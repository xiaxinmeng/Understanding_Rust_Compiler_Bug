{"sha": "0e45a5ed3f79338656b19a41172d3a7761586ebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNDVhNWVkM2Y3OTMzODY1NmIxOWE0MTE3MmQzYTc3NjE1ODZlYmM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-16T18:52:56Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-16T19:12:38Z"}, "message": "[rustbuild] add a way to run command after failure\n\nThis is a simple way to workaround the debugging issues caused by the rustc\nwrapper used in the bootstrap process. Namely, it uses some obscure environment\nvariables and you can\u2019t just copy the failed command and run it in the shell or\ndebugger to examine the failure more closely.\n\nWith `--on-fail` its possible to run an arbitrary command within exactly the\nsame environment under which rustc failed. Theres\u2019s multiple ways to use this\nnew flag:\n\n$ python x.py build --stage=1 --on-fail=env\n\n    would print a list of environment variables and the failed command, so a\n    few copy-pastes and you now can run the same rust in your shell outside the\n    bootstrap system.\n\n$ python x.py build --stage=1 --on-fail=bash\n\n    Is a more useful variation of the command above in that it launches a whole\n    shell with environment already in place! All that\u2019s left to do is copy-paste\n    the command just above the shell prompt!\n\nFixes #38686\nFixes #38221", "tree": {"sha": "14998e1cdb71b36c21fbbdf57b648d19569e2b2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14998e1cdb71b36c21fbbdf57b648d19569e2b2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e45a5ed3f79338656b19a41172d3a7761586ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e45a5ed3f79338656b19a41172d3a7761586ebc", "html_url": "https://github.com/rust-lang/rust/commit/0e45a5ed3f79338656b19a41172d3a7761586ebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e45a5ed3f79338656b19a41172d3a7761586ebc/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62eb6056d332be09206dc664f2e949ae64341e64", "url": "https://api.github.com/repos/rust-lang/rust/commits/62eb6056d332be09206dc664f2e949ae64341e64", "html_url": "https://github.com/rust-lang/rust/commit/62eb6056d332be09206dc664f2e949ae64341e64"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "bf1da57607d5fe40b990df9b21bef9dc0bca59b9", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e45a5ed3f79338656b19a41172d3a7761586ebc/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e45a5ed3f79338656b19a41172d3a7761586ebc/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=0e45a5ed3f79338656b19a41172d3a7761586ebc", "patch": "@@ -68,6 +68,7 @@ fn main() {\n     };\n     let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n+    let mut on_fail = env::var_os(\"RUSTC_ON_FAIL\").map(|of| Command::new(of));\n \n     let rustc = env::var_os(rustc).unwrap_or_else(|| panic!(\"{:?} was not set\", rustc));\n     let libdir = env::var_os(libdir).unwrap_or_else(|| panic!(\"{:?} was not set\", libdir));\n@@ -212,9 +213,20 @@ fn main() {\n     }\n \n     // Actually run the compiler!\n-    std::process::exit(match exec_cmd(&mut cmd) {\n-        Ok(s) => s.code().unwrap_or(0xfe),\n-        Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),\n+    std::process::exit(if let Some(ref mut on_fail) = on_fail {\n+        match cmd.status() {\n+            Ok(s) if s.success() => 0,\n+            _ => {\n+                println!(\"\\nDid not run successfully:\\n{:?}\\n-------------\", cmd);\n+                exec_cmd(on_fail).expect(\"could not run the backup command\");\n+                1\n+            }\n+        }\n+    } else {\n+        std::process::exit(match exec_cmd(&mut cmd) {\n+            Ok(s) => s.code().unwrap_or(0xfe),\n+            Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),\n+        })\n     })\n }\n "}, {"sha": "b55f3d710ca7bfcee4643dd40d4e6836dc495503", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e45a5ed3f79338656b19a41172d3a7761586ebc/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e45a5ed3f79338656b19a41172d3a7761586ebc/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=0e45a5ed3f79338656b19a41172d3a7761586ebc", "patch": "@@ -28,6 +28,7 @@ use step;\n /// Deserialized version of all flags for this compile.\n pub struct Flags {\n     pub verbose: usize, // verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n+    pub on_fail: Option<String>,\n     pub stage: Option<u32>,\n     pub keep_stage: Option<u32>,\n     pub build: String,\n@@ -81,6 +82,7 @@ impl Flags {\n         opts.optopt(\"\", \"build\", \"build target of the stage0 compiler\", \"BUILD\");\n         opts.optmulti(\"\", \"host\", \"host targets to build\", \"HOST\");\n         opts.optmulti(\"\", \"target\", \"target targets to build\", \"TARGET\");\n+        opts.optopt(\"\", \"on-fail\", \"command to run on failure\", \"CMD\");\n         opts.optopt(\"\", \"stage\", \"stage to build\", \"N\");\n         opts.optopt(\"\", \"keep-stage\", \"stage to keep without recompiling\", \"N\");\n         opts.optopt(\"\", \"src\", \"path to the root of the rust checkout\", \"DIR\");\n@@ -283,6 +285,7 @@ To learn more about a subcommand, run `./x.py <command> -h`\n         Flags {\n             verbose: m.opt_count(\"v\"),\n             stage: stage,\n+            on_fail: m.opt_str(\"on-fail\"),\n             keep_stage: m.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n             build: m.opt_str(\"build\").unwrap_or_else(|| {\n                 env::var(\"BUILD\").unwrap()"}, {"sha": "a28cb24a8166f70374565f6675303c313093e7ec", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e45a5ed3f79338656b19a41172d3a7761586ebc/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e45a5ed3f79338656b19a41172d3a7761586ebc/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=0e45a5ed3f79338656b19a41172d3a7761586ebc", "patch": "@@ -499,6 +499,10 @@ impl Build {\n             cargo.env(\"RUSTC_INCREMENTAL\", incr_dir);\n         }\n \n+        if let Some(ref on_fail) = self.flags.on_fail {\n+            cargo.env(\"RUSTC_ON_FAIL\", on_fail);\n+        }\n+\n         let verbose = cmp::max(self.config.verbose, self.flags.verbose);\n         cargo.env(\"RUSTC_VERBOSE\", format!(\"{}\", verbose));\n "}]}