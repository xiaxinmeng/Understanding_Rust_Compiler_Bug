{"sha": "ed793d86daa67fb1117dd1db8da5da765e0fc773", "node_id": "C_kwDOAAsO6NoAKGVkNzkzZDg2ZGFhNjdmYjExMTdkZDFkYjhkYTVkYTc2NWUwZmM3NzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-23T02:47:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-23T02:47:54Z"}, "message": "Auto merge of #93397 - joshtriplett:sort-floats, r=Amanieu\n\nAdd `[f32]::sort_floats` and `[f64]::sort_floats`\n\nIt's inconvenient to sort a slice or Vec of floats, compared to sorting integers. To simplify numeric code, add a convenience method to `[f32]` and `[f64]` to sort them using `sort_unstable_by` with `total_cmp`.", "tree": {"sha": "5285379d5f405f897a3b712a44f8c024bfc44327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5285379d5f405f897a3b712a44f8c024bfc44327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed793d86daa67fb1117dd1db8da5da765e0fc773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed793d86daa67fb1117dd1db8da5da765e0fc773", "html_url": "https://github.com/rust-lang/rust/commit/ed793d86daa67fb1117dd1db8da5da765e0fc773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed793d86daa67fb1117dd1db8da5da765e0fc773/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aedb9c68dceebef23439541337a321252036b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aedb9c68dceebef23439541337a321252036b54", "html_url": "https://github.com/rust-lang/rust/commit/8aedb9c68dceebef23439541337a321252036b54"}, {"sha": "bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c", "html_url": "https://github.com/rust-lang/rust/commit/bded8fcfc0a0735071f41bec5d9a388e8c0c7c7c"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "e6ca6ef82673e1cc515b3445bd8f73de5fc11b6e", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ed793d86daa67fb1117dd1db8da5da765e0fc773/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed793d86daa67fb1117dd1db8da5da765e0fc773/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=ed793d86daa67fb1117dd1db8da5da765e0fc773", "patch": "@@ -4101,6 +4101,66 @@ impl<T, const N: usize> [[T; N]] {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[cfg(not(test))]\n+impl [f32] {\n+    /// Sorts the slice of floats.\n+    ///\n+    /// This sort is in-place (i.e. does not allocate), *O*(*n* \\* log(*n*)) worst-case, and uses\n+    /// the ordering defined by [`f32::total_cmp`].\n+    ///\n+    /// # Current implementation\n+    ///\n+    /// This uses the same sorting algorithm as [`sort_unstable_by`](slice::sort_unstable_by).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(sort_floats)]\n+    /// let mut v = [2.6, -5e-8, f32::NAN, 8.29, f32::INFINITY, -1.0, 0.0, -f32::INFINITY, -0.0];\n+    ///\n+    /// v.sort_floats();\n+    /// let sorted = [-f32::INFINITY, -1.0, -5e-8, -0.0, 0.0, 2.6, 8.29, f32::INFINITY, f32::NAN];\n+    /// assert_eq!(&v[..8], &sorted[..8]);\n+    /// assert!(v[8].is_nan());\n+    /// ```\n+    #[unstable(feature = \"sort_floats\", issue = \"93396\")]\n+    #[inline]\n+    pub fn sort_floats(&mut self) {\n+        self.sort_unstable_by(f32::total_cmp);\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cfg(not(test))]\n+impl [f64] {\n+    /// Sorts the slice of floats.\n+    ///\n+    /// This sort is in-place (i.e. does not allocate), *O*(*n* \\* log(*n*)) worst-case, and uses\n+    /// the ordering defined by [`f64::total_cmp`].\n+    ///\n+    /// # Current implementation\n+    ///\n+    /// This uses the same sorting algorithm as [`sort_unstable_by`](slice::sort_unstable_by).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(sort_floats)]\n+    /// let mut v = [2.6, -5e-8, f64::NAN, 8.29, f64::INFINITY, -1.0, 0.0, -f64::INFINITY, -0.0];\n+    ///\n+    /// v.sort_floats();\n+    /// let sorted = [-f64::INFINITY, -1.0, -5e-8, -0.0, 0.0, 2.6, 8.29, f64::INFINITY, f64::NAN];\n+    /// assert_eq!(&v[..8], &sorted[..8]);\n+    /// assert!(v[8].is_nan());\n+    /// ```\n+    #[unstable(feature = \"sort_floats\", issue = \"93396\")]\n+    #[inline]\n+    pub fn sort_floats(&mut self) {\n+        self.sort_unstable_by(f64::total_cmp);\n+    }\n+}\n+\n trait CloneFromSpec<T> {\n     fn spec_clone_from(&mut self, src: &[T]);\n }"}]}