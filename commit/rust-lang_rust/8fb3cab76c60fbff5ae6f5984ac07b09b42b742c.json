{"sha": "8fb3cab76c60fbff5ae6f5984ac07b09b42b742c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYjNjYWI3NmM2MGZiZmY1YWU2ZjU5ODRhYzA3YjA5YjQyYjc0MmM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-07T14:39:05Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-07T14:49:57Z"}, "message": "Fix crash for super trait cycles", "tree": {"sha": "fdf832ba772141368f27d733cd718ee9a599a346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdf832ba772141368f27d733cd718ee9a599a346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c", "html_url": "https://github.com/rust-lang/rust/commit/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db34eec209c740ed919afb288f75daa755cd268", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db34eec209c740ed919afb288f75daa755cd268", "html_url": "https://github.com/rust-lang/rust/commit/9db34eec209c740ed919afb288f75daa755cd268"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "f93f11a82951fa8ef8c474c5c337c83f617a9279", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8fb3cab76c60fbff5ae6f5984ac07b09b42b742c", "patch": "@@ -1007,7 +1007,6 @@ dependencies = [\n  \"chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git)\",\n  \"ena 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"once_cell 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "d9bed4ddaf28917f832db4a1e905831221f44fef", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=8fb3cab76c60fbff5ae6f5984ac07b09b42b742c", "patch": "@@ -12,7 +12,6 @@ rustc-hash = \"1.0\"\n parking_lot = \"0.9.0\"\n ena = \"0.13\"\n once_cell = \"1.0.1\"\n-itertools = \"0.8.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_arena = { path = \"../ra_arena\" }"}, {"sha": "1bb2f9f284271b7ba4f6271bcb8d6491781e15b2", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=8fb3cab76c60fbff5ae6f5984ac07b09b42b742c", "patch": "@@ -1,11 +1,8 @@\n pub(crate) mod src;\n pub(crate) mod docs;\n \n-use std::iter;\n use std::sync::Arc;\n \n-use itertools::Itertools;\n-\n use ra_db::{CrateId, Edition, FileId, SourceRootId};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n@@ -849,20 +846,23 @@ impl Trait {\n \n     /// Returns an iterator over the whole super trait hierarchy (including the\n     /// trait itself).\n-    pub fn all_super_traits<'a>(\n-        self,\n-        db: &'a impl HirDatabase,\n-    ) -> impl Iterator<Item = Trait> + 'a {\n-        self.all_super_traits_inner(db).unique()\n-    }\n-\n-    fn all_super_traits_inner<'a>(\n-        self,\n-        db: &'a impl HirDatabase,\n-    ) -> impl Iterator<Item = Trait> + 'a {\n-        iter::once(self).chain(self.direct_super_traits(db).into_iter().flat_map(move |t| {\n-            iter::once(t).chain(Box::new(t.all_super_traits(db)) as Box<dyn Iterator<Item = Trait>>)\n-        }))\n+    pub fn all_super_traits(self, db: &impl HirDatabase) -> Vec<Trait> {\n+        // we need to take care a bit here to avoid infinite loops in case of cycles\n+        // (i.e. if we have `trait A: B; trait B: A;`)\n+        let mut result = vec![self];\n+        let mut i = 0;\n+        while i < result.len() {\n+            let t = result[i];\n+            // yeah this is quadratic, but trait hierarchies should be flat\n+            // enough that this doesn't matter\n+            for tt in t.direct_super_traits(db) {\n+                if !result.contains(&tt) {\n+                    result.push(tt);\n+                }\n+            }\n+            i += 1;\n+        }\n+        result\n     }\n \n     pub fn associated_type_by_name(self, db: &impl DefDatabase, name: &Name) -> Option<TypeAlias> {\n@@ -882,7 +882,7 @@ impl Trait {\n         db: &impl HirDatabase,\n         name: &Name,\n     ) -> Option<TypeAlias> {\n-        self.all_super_traits(db).find_map(|t| t.associated_type_by_name(db, name))\n+        self.all_super_traits(db).into_iter().find_map(|t| t.associated_type_by_name(db, name))\n     }\n \n     pub(crate) fn trait_data(self, db: &impl DefDatabase) -> Arc<TraitData> {"}, {"sha": "c4bddde85d00de59351bd24bd85ea35ae1dd8004", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb3cab76c60fbff5ae6f5984ac07b09b42b742c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=8fb3cab76c60fbff5ae6f5984ac07b09b42b742c", "patch": "@@ -3694,6 +3694,27 @@ fn test<T: Trait1, U: Trait2>(x: T, y: U) {\n     );\n }\n \n+#[test]\n+fn super_trait_cycle() {\n+    // This just needs to not crash\n+    assert_snapshot!(\n+        infer(r#\"\n+trait A: B {}\n+trait B: A {}\n+\n+fn test<T: A>(x: T) {\n+    x.foo();\n+}\n+\"#),\n+        @r###\"\n+    [44; 45) 'x': T\n+    [50; 66) '{     ...o(); }': ()\n+    [56; 57) 'x': T\n+    [56; 63) 'x.foo()': {unknown}\n+    \"###\n+    );\n+}\n+\n #[test]\n fn super_trait_assoc_type_bounds() {\n     assert_snapshot!("}]}