{"sha": "62a13cce9b6356af0dfeeeb6add3432f0e76a19f", "node_id": "C_kwDOAAsO6NoAKDYyYTEzY2NlOWI2MzU2YWYwZGZlZWViNmFkZDM0MzJmMGU3NmExOWY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-12T19:22:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-12T19:22:15Z"}, "message": "Merge #11267\n\n11267: internal: Remove `ModuleId` from `hir` reexports r=jonas-schievink a=jonas-schievink\n\nfollowup to https://github.com/rust-analyzer/rust-analyzer/pull/11266\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "c1579dcc2b89905cb28687307d7f89669391db94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1579dcc2b89905cb28687307d7f89669391db94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62a13cce9b6356af0dfeeeb6add3432f0e76a19f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh3ypnCRBK7hj4Ov3rIwAApYUIAChaxBE2zy7lHSfwm+rLmuso\ndoPc2vtK94O8Cx3MK/WzQNN42fKMjWhjteOHn4GduX6A90eX7ppoTEZJntICPrsn\nU6YBC5ncpfE9oK7E9wk8xZIA+xTrlSKJ5+RLcQCaxy1HnE49enGlW8HzV/jXt3as\n/YBCGhvx9SZ7QgwYYo9hqZiH2yiwbDo/RA51NipVBuIYWyZ8poTQmzkw8IN7j9/E\n9o4MW2CXE+aQVUfvXUiqgik3NyRTDBeFUB8z/9N8rWlwpZLwWp884leLCyy026EC\ndFIIj/WxrbZlqVYhmX/AI5aotxIXarhjVrZIab/2QgwZI17oLkZtQUDjrF4CyC4=\n=+lGC\n-----END PGP SIGNATURE-----\n", "payload": "tree c1579dcc2b89905cb28687307d7f89669391db94\nparent 16d3a7bf08f0bef707cf7cb7f084d7ff02e03454\nparent 18e80e6892f130f71b6e4e3d7dbc3600d1473b01\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1642015335 +0000\ncommitter GitHub <noreply@github.com> 1642015335 +0000\n\nMerge #11267\n\n11267: internal: Remove `ModuleId` from `hir` reexports r=jonas-schievink a=jonas-schievink\n\nfollowup to https://github.com/rust-analyzer/rust-analyzer/pull/11266\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62a13cce9b6356af0dfeeeb6add3432f0e76a19f", "html_url": "https://github.com/rust-lang/rust/commit/62a13cce9b6356af0dfeeeb6add3432f0e76a19f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62a13cce9b6356af0dfeeeb6add3432f0e76a19f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16d3a7bf08f0bef707cf7cb7f084d7ff02e03454", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d3a7bf08f0bef707cf7cb7f084d7ff02e03454", "html_url": "https://github.com/rust-lang/rust/commit/16d3a7bf08f0bef707cf7cb7f084d7ff02e03454"}, {"sha": "18e80e6892f130f71b6e4e3d7dbc3600d1473b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/18e80e6892f130f71b6e4e3d7dbc3600d1473b01", "html_url": "https://github.com/rust-lang/rust/commit/18e80e6892f130f71b6e4e3d7dbc3600d1473b01"}], "stats": {"total": 94, "additions": 50, "deletions": 44}, "files": [{"sha": "871440692580135e31115d568fee70907fa0e997", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62a13cce9b6356af0dfeeeb6add3432f0e76a19f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a13cce9b6356af0dfeeeb6add3432f0e76a19f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=62a13cce9b6356af0dfeeeb6add3432f0e76a19f", "patch": "@@ -49,7 +49,7 @@ use hir_def::{\n     src::HasSource as _,\n     AdtId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId, DefWithBodyId, EnumId,\n     FunctionId, GenericDefId, HasModule, ImplId, ItemContainerId, LifetimeParamId,\n-    LocalEnumVariantId, LocalFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId,\n+    LocalEnumVariantId, LocalFieldId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n     TypeParamId, UnionId,\n };\n use hir_expand::{name::name, MacroCallKind, MacroDefKind};\n@@ -115,7 +115,6 @@ pub use {\n         path::{ModPath, PathKind},\n         type_ref::{Mutability, TypeRef},\n         visibility::Visibility,\n-        ModuleId,\n     },\n     hir_expand::{\n         name::{known, Name},\n@@ -183,6 +182,11 @@ impl Crate {\n         Module { id: def_map.module_id(def_map.root()) }\n     }\n \n+    pub fn modules(self, db: &dyn HirDatabase) -> Vec<Module> {\n+        let def_map = db.crate_def_map(self.id);\n+        def_map.modules().map(|(id, _)| def_map.module_id(id).into()).collect()\n+    }\n+\n     pub fn root_file(self, db: &dyn HirDatabase) -> FileId {\n         db.crate_graph()[self.id].root_file_id\n     }"}, {"sha": "f1669d528845347a9a7cd7e0f3219e68227b3785", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62a13cce9b6356af0dfeeeb6add3432f0e76a19f/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a13cce9b6356af0dfeeeb6add3432f0e76a19f/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=62a13cce9b6356af0dfeeeb6add3432f0e76a19f", "patch": "@@ -102,14 +102,14 @@ pub struct SymbolCollector<'a> {\n /// Given a [`ModuleId`] and a [`HirDatabase`], use the DefMap for the module's crate to collect\n /// all symbols that should be indexed for the given module.\n impl<'a> SymbolCollector<'a> {\n-    pub fn collect(db: &dyn HirDatabase, module_id: ModuleId) -> Vec<FileSymbol> {\n+    pub fn collect(db: &dyn HirDatabase, module: Module) -> Vec<FileSymbol> {\n         let mut symbol_collector = SymbolCollector {\n             db,\n             symbols: Default::default(),\n             current_container_name: None,\n             // The initial work is the root module we're collecting, additional work will\n             // be populated as we traverse the module's definitions.\n-            work: vec![SymbolCollectorWork { module_id, parent: None }],\n+            work: vec![SymbolCollectorWork { module_id: module.into(), parent: None }],\n         };\n \n         while let Some(work) = symbol_collector.work.pop() {"}, {"sha": "9697ba24b80074374ebb64dcfabb838c569b8181", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/62a13cce9b6356af0dfeeeb6add3432f0e76a19f/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a13cce9b6356af0dfeeeb6add3432f0e76a19f/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=62a13cce9b6356af0dfeeeb6add3432f0e76a19f", "patch": "@@ -30,13 +30,13 @@ use std::{\n \n use base_db::{\n     salsa::{self, ParallelDatabase},\n-    CrateId, SourceDatabaseExt, SourceRootId, Upcast,\n+    SourceDatabaseExt, SourceRootId, Upcast,\n };\n use fst::{self, Streamer};\n use hir::{\n-    db::{DefDatabase, HirDatabase},\n+    db::HirDatabase,\n     symbols::{FileSymbol, SymbolCollector},\n-    ModuleId,\n+    Crate, Module,\n };\n use rayon::prelude::*;\n use rustc_hash::FxHashSet;\n@@ -93,7 +93,7 @@ impl Query {\n pub trait SymbolsDatabase: HirDatabase + SourceDatabaseExt + Upcast<dyn HirDatabase> {\n     /// The symbol index for a given module. These modules should only be in source roots that\n     /// are inside local_roots.\n-    fn module_symbols(&self, module_id: ModuleId) -> Arc<SymbolIndex>;\n+    fn module_symbols(&self, module: Module) -> Arc<SymbolIndex>;\n \n     /// The symbol index for a given source root within library_roots.\n     fn library_symbols(&self, source_root_id: SourceRootId) -> Arc<SymbolIndex>;\n@@ -116,20 +116,20 @@ fn library_symbols(db: &dyn SymbolsDatabase, source_root_id: SourceRootId) -> Ar\n     let symbols = db\n         .source_root_crates(source_root_id)\n         .iter()\n-        .flat_map(|&krate| module_ids_for_crate(db.upcast(), krate))\n+        .flat_map(|&krate| Crate::from(krate).modules(db.upcast()))\n         // we specifically avoid calling SymbolsDatabase::module_symbols here, even they do the same thing,\n         // as the index for a library is not going to really ever change, and we do not want to store each\n         // module's index in salsa.\n-        .map(|module_id| SymbolCollector::collect(db.upcast(), module_id))\n+        .map(|module| SymbolCollector::collect(db.upcast(), module))\n         .flatten()\n         .collect();\n \n     Arc::new(SymbolIndex::new(symbols))\n }\n \n-fn module_symbols(db: &dyn SymbolsDatabase, module_id: ModuleId) -> Arc<SymbolIndex> {\n+fn module_symbols(db: &dyn SymbolsDatabase, module: Module) -> Arc<SymbolIndex> {\n     let _p = profile::span(\"module_symbols\");\n-    let symbols = SymbolCollector::collect(db.upcast(), module_id);\n+    let symbols = SymbolCollector::collect(db.upcast(), module);\n     Arc::new(SymbolIndex::new(symbols))\n }\n \n@@ -188,41 +188,36 @@ pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n             .map_with(Snap::new(db), |snap, &root| snap.library_symbols(root))\n             .collect()\n     } else {\n-        let mut module_ids = Vec::new();\n+        let mut modules = Vec::new();\n \n         for &root in db.local_roots().iter() {\n             let crates = db.source_root_crates(root);\n             for &krate in crates.iter() {\n-                module_ids.extend(module_ids_for_crate(db, krate));\n+                modules.extend(Crate::from(krate).modules(db));\n             }\n         }\n \n-        module_ids\n+        modules\n             .par_iter()\n-            .map_with(Snap::new(db), |snap, &module_id| snap.module_symbols(module_id))\n+            .map_with(Snap::new(db), |snap, &module| snap.module_symbols(module))\n             .collect()\n     };\n \n     query.search(&indices)\n }\n \n-pub fn crate_symbols(db: &RootDatabase, krate: CrateId, query: Query) -> Vec<FileSymbol> {\n+pub fn crate_symbols(db: &RootDatabase, krate: Crate, query: Query) -> Vec<FileSymbol> {\n     let _p = profile::span(\"crate_symbols\").detail(|| format!(\"{:?}\", query));\n \n-    let module_ids = module_ids_for_crate(db, krate);\n-    let indices: Vec<_> = module_ids\n+    let modules = krate.modules(db);\n+    let indices: Vec<_> = modules\n         .par_iter()\n-        .map_with(Snap::new(db), |snap, &module_id| snap.module_symbols(module_id))\n+        .map_with(Snap::new(db), |snap, &module| snap.module_symbols(module))\n         .collect();\n \n     query.search(&indices)\n }\n \n-fn module_ids_for_crate(db: &dyn DefDatabase, krate: CrateId) -> Vec<ModuleId> {\n-    let def_map = db.crate_def_map(krate);\n-    def_map.modules().map(|(id, _)| def_map.module_id(id)).collect()\n-}\n-\n pub fn index_resolve(db: &RootDatabase, name: &str) -> Vec<FileSymbol> {\n     let mut query = Query::new(name.to_string());\n     query.exact();\n@@ -427,7 +422,8 @@ struct StructInModB;\n         \"#,\n         );\n \n-        let symbols: Vec<_> = module_ids_for_crate(db.upcast(), db.test_crate())\n+        let symbols: Vec<_> = Crate::from(db.test_crate())\n+            .modules(&db)\n             .into_iter()\n             .map(|module_id| (module_id, SymbolCollector::collect(&db, module_id)))\n             .collect();"}, {"sha": "cc51d85da702fdb69cd919815cd955c2eb84a367", "filename": "crates/ide_db/src/test_data/test_symbol_index_collection.txt", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/62a13cce9b6356af0dfeeeb6add3432f0e76a19f/crates%2Fide_db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "raw_url": "https://github.com/rust-lang/rust/raw/62a13cce9b6356af0dfeeeb6add3432f0e76a19f/crates%2Fide_db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftest_data%2Ftest_symbol_index_collection.txt?ref=62a13cce9b6356af0dfeeeb6add3432f0e76a19f", "patch": "@@ -1,11 +1,13 @@\n [\n     (\n-        ModuleId {\n-            krate: CrateId(\n-                0,\n-            ),\n-            block: None,\n-            local_id: Idx::<ModuleData>(0),\n+        Module {\n+            id: ModuleId {\n+                krate: CrateId(\n+                    0,\n+                ),\n+                block: None,\n+                local_id: Idx::<ModuleData>(0),\n+            },\n         },\n         [\n             FileSymbol {\n@@ -459,12 +461,14 @@\n         ],\n     ),\n     (\n-        ModuleId {\n-            krate: CrateId(\n-                0,\n-            ),\n-            block: None,\n-            local_id: Idx::<ModuleData>(1),\n+        Module {\n+            id: ModuleId {\n+                krate: CrateId(\n+                    0,\n+                ),\n+                block: None,\n+                local_id: Idx::<ModuleData>(1),\n+            },\n         },\n         [\n             FileSymbol {\n@@ -492,12 +496,14 @@\n         ],\n     ),\n     (\n-        ModuleId {\n-            krate: CrateId(\n-                0,\n-            ),\n-            block: None,\n-            local_id: Idx::<ModuleData>(2),\n+        Module {\n+            id: ModuleId {\n+                krate: CrateId(\n+                    0,\n+                ),\n+                block: None,\n+                local_id: Idx::<ModuleData>(2),\n+            },\n         },\n         [\n             FileSymbol {"}]}