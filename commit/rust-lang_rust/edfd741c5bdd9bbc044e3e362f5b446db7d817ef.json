{"sha": "edfd741c5bdd9bbc044e3e362f5b446db7d817ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZmQ3NDFjNWJkZDliYmMwNDRlM2UzNjJmNWI0NDZkYjdkODE3ZWY=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-20T16:13:58Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-20T16:26:18Z"}, "message": "hir_ty: add tests around autoderef with visibility checking", "tree": {"sha": "fb9dfb9a6adcf7017287ecd59ef10d6ce5d2b90f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb9dfb9a6adcf7017287ecd59ef10d6ce5d2b90f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edfd741c5bdd9bbc044e3e362f5b446db7d817ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edfd741c5bdd9bbc044e3e362f5b446db7d817ef", "html_url": "https://github.com/rust-lang/rust/commit/edfd741c5bdd9bbc044e3e362f5b446db7d817ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edfd741c5bdd9bbc044e3e362f5b446db7d817ef/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e4aae82329e5c53e488c54fb0561bb289f5c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e4aae82329e5c53e488c54fb0561bb289f5c21", "html_url": "https://github.com/rust-lang/rust/commit/15e4aae82329e5c53e488c54fb0561bb289f5c21"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "751a7ce54716498efd0d6695e9c599cdfd4b31e4", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/edfd741c5bdd9bbc044e3e362f5b446db7d817ef/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edfd741c5bdd9bbc044e3e362f5b446db7d817ef/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=edfd741c5bdd9bbc044e3e362f5b446db7d817ef", "patch": "@@ -1173,3 +1173,122 @@ fn main() {\n \"#,\n     );\n }\n+\n+#[test]\n+fn autoderef_visibility_field() {\n+    check_infer(\n+        r#\"\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+    fn deref(&self) -> &Self::Target;\n+}\n+mod a {\n+    pub struct Foo(pub char);\n+    pub struct Bar(i32);\n+    impl Bar {\n+        pub fn new() -> Self {\n+            Self(0)\n+        }\n+    }\n+    impl super::Deref for Bar {\n+        type Target = Foo;\n+        fn deref(&self) -> &Foo {\n+            &Foo('z')\n+        }\n+    }\n+}\n+mod b {\n+    fn foo() {\n+        let x = super::a::Bar::new().0;\n+    }\n+}\n+        \"#,\n+        expect![[r#\"\n+            67..71 'self': &Self\n+            200..231 '{     ...     }': Bar\n+            214..218 'Self': Bar(i32) -> Bar\n+            214..221 'Self(0)': Bar\n+            219..220 '0': i32\n+            315..319 'self': &Bar\n+            329..362 '{     ...     }': &Foo\n+            343..352 '&Foo('z')': &Foo\n+            344..347 'Foo': Foo(char) -> Foo\n+            344..352 'Foo('z')': Foo\n+            348..351 ''z'': char\n+            392..439 '{     ...     }': ()\n+            406..407 'x': char\n+            410..428 'super:...r::new': fn new() -> Bar\n+            410..430 'super:...:new()': Bar\n+            410..432 'super:...ew().0': char\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn autoderef_visibility_method() {\n+    check_infer(\n+        r#\"\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+    fn deref(&self) -> &Self::Target;\n+}\n+mod a {\n+    pub struct Foo(pub char);\n+    \n+    impl Foo {\n+        pub fn mango(&self) -> char {\n+            self.0\n+        }\n+    }\n+    pub struct Bar(i32);\n+    impl Bar {\n+        pub fn new() -> Self {\n+            Self(0)\n+        }\n+        fn mango(&self) -> i32 {\n+            self.0\n+        }\n+    }\n+    impl super::Deref for Bar {\n+        type Target = Foo;\n+        fn deref(&self) -> &Foo {\n+            &Foo('z')\n+        }\n+    }\n+}\n+mod b {\n+    fn foo() {\n+        let x = super::a::Bar::new().mango();\n+    }\n+}\n+        \"#,\n+        expect![[r#\"\n+            67..71 'self': &Self\n+            173..177 'self': &Foo\n+            187..217 '{     ...     }': char\n+            201..205 'self': &Foo\n+            201..207 'self.0': char\n+            293..324 '{     ...     }': Bar\n+            307..311 'Self': Bar(i32) -> Bar\n+            307..314 'Self(0)': Bar\n+            312..313 '0': i32\n+            343..347 'self': &Bar\n+            356..386 '{     ...     }': i32\n+            370..374 'self': &Bar\n+            370..376 'self.0': i32\n+            470..474 'self': &Bar\n+            484..517 '{     ...     }': &Foo\n+            498..507 '&Foo('z')': &Foo\n+            499..502 'Foo': Foo(char) -> Foo\n+            499..507 'Foo('z')': Foo\n+            503..506 ''z'': char\n+            547..600 '{     ...     }': ()\n+            561..562 'x': char\n+            565..583 'super:...r::new': fn new() -> Bar\n+            565..585 'super:...:new()': Bar\n+            565..593 'super:...ango()': char\n+        \"#]],\n+    )\n+}"}]}