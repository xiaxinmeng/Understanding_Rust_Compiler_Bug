{"sha": "3bb9fc4007405f76a3807cc268b3c1c5f1067e52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYjlmYzQwMDc0MDVmNzZhMzgwN2NjMjY4YjNjMWM1ZjEwNjdlNTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-21T01:21:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-21T01:21:56Z"}, "message": "Rollup merge of #57769 - estebank:cast-suggestion-struct-field, r=matthewjasper\n\nSuggest correct cast for struct fields with shorthand syntax\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/type-mismatch-struct-field-shorthand.rs:8:19\n   |\nLL |     let _ = RGB { r, g, b };\n   |                   ^ expected f64, found f32\nhelp: you can cast an `f32` to `f64` in a lossless way\n   |\nLL |     let _ = RGB { r: r.into(), g, b };\n   |                   ^^^^^^^^^^^\n```\n\nFix #52497.", "tree": {"sha": "1744e7bc83f863d4fb748db70c71f5af48041757", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1744e7bc83f863d4fb748db70c71f5af48041757"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bb9fc4007405f76a3807cc268b3c1c5f1067e52", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcRR60CRBK7hj4Ov3rIwAAdHIIAK/W6DXD7dM7Crh8KzOE/y3g\nUN2jM/byCUpW9uBmSTFS2HUzYO1klJ+z2KHHEnTFQQDngiy6tWvaWY7B0OvEUGUX\nnF6FBmwEs4uYxJxPSl5R1wRUBtsY2ERtY6jDP9xxFvvU3FBjr3EYSQZxzzzYWHrB\ndTbJrO2HeS9FDIING7g5LpZ4CFPtHL+i5h29SQEo3UAa0FzAnO9eqYa76wPKpzXK\nNqQWGJemnx++dh6GB0lsiY2OxImINWBin1dAr1JgN7PgG2yWjVwQ6Bp4AVHLD6Fl\nYwhq1bBzC26hXjzcMC9JuEXJS4aEY8VVD0zy8pFaCUIUllzhtkr7mP8GDfFvSb0=\n=F4h5\n-----END PGP SIGNATURE-----\n", "payload": "tree 1744e7bc83f863d4fb748db70c71f5af48041757\nparent 627e001a722d0aa1c8db0523ed26c25f775570f4\nparent 5b44b3cb1b2bc2f93520fe1339d93efe8439238c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548033716 +0100\ncommitter GitHub <noreply@github.com> 1548033716 +0100\n\nRollup merge of #57769 - estebank:cast-suggestion-struct-field, r=matthewjasper\n\nSuggest correct cast for struct fields with shorthand syntax\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/type-mismatch-struct-field-shorthand.rs:8:19\n   |\nLL |     let _ = RGB { r, g, b };\n   |                   ^ expected f64, found f32\nhelp: you can cast an `f32` to `f64` in a lossless way\n   |\nLL |     let _ = RGB { r: r.into(), g, b };\n   |                   ^^^^^^^^^^^\n```\n\nFix #52497.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb9fc4007405f76a3807cc268b3c1c5f1067e52", "html_url": "https://github.com/rust-lang/rust/commit/3bb9fc4007405f76a3807cc268b3c1c5f1067e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "627e001a722d0aa1c8db0523ed26c25f775570f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/627e001a722d0aa1c8db0523ed26c25f775570f4", "html_url": "https://github.com/rust-lang/rust/commit/627e001a722d0aa1c8db0523ed26c25f775570f4"}, {"sha": "5b44b3cb1b2bc2f93520fe1339d93efe8439238c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b44b3cb1b2bc2f93520fe1339d93efe8439238c", "html_url": "https://github.com/rust-lang/rust/commit/5b44b3cb1b2bc2f93520fe1339d93efe8439238c"}], "stats": {"total": 144, "additions": 132, "deletions": 12}, "files": [{"sha": "d985bdae491d09d6d2dd40f47a648b632cce65cb", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=3bb9fc4007405f76a3807cc268b3c1c5f1067e52", "patch": "@@ -454,12 +454,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         false\n     }\n \n-    pub fn check_for_cast(&self,\n-                      err: &mut DiagnosticBuilder<'tcx>,\n-                      expr: &hir::Expr,\n-                      checked_ty: Ty<'tcx>,\n-                      expected_ty: Ty<'tcx>)\n-                      -> bool {\n+    pub fn check_for_cast(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        expr: &hir::Expr,\n+        checked_ty: Ty<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n         let parent_id = self.tcx.hir().get_parent_node(expr.id);\n         if let Some(parent) = self.tcx.hir().find(parent_id) {\n             // Shouldn't suggest `.into()` on `const`s.\n@@ -487,17 +488,40 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // For now, don't suggest casting with `as`.\n         let can_cast = false;\n \n+        let mut prefix = String::new();\n+        if let Some(hir::Node::Expr(hir::Expr {\n+            node: hir::ExprKind::Struct(_, fields, _),\n+            ..\n+        })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.id)) {\n+            // `expr` is a literal field for a struct, only suggest if appropriate\n+            for field in fields {\n+                if field.expr.id == expr.id && field.is_shorthand {\n+                    // This is a field literal\n+                    prefix = format!(\"{}: \", field.ident);\n+                    break;\n+                }\n+            }\n+            if &prefix == \"\" {\n+                // Likely a field was meant, but this field wasn't found. Do not suggest anything.\n+                return false;\n+            }\n+        }\n+\n         let needs_paren = expr.precedence().order() < (PREC_POSTFIX as i8);\n \n         if let Ok(src) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n             let msg = format!(\"you can cast an `{}` to `{}`\", checked_ty, expected_ty);\n-            let cast_suggestion = format!(\"{}{}{} as {}\",\n-                                          if needs_paren { \"(\" } else { \"\" },\n-                                          src,\n-                                          if needs_paren { \")\" } else { \"\" },\n-                                          expected_ty);\n+            let cast_suggestion = format!(\n+                \"{}{}{}{} as {}\",\n+                prefix,\n+                if needs_paren { \"(\" } else { \"\" },\n+                src,\n+                if needs_paren { \")\" } else { \"\" },\n+                expected_ty,\n+            );\n             let into_suggestion = format!(\n-                \"{}{}{}.into()\",\n+                \"{}{}{}{}.into()\",\n+                prefix,\n                 if needs_paren { \"(\" } else { \"\" },\n                 src,\n                 if needs_paren { \")\" } else { \"\" },"}, {"sha": "2ce12220723df745d7986ea148ccc39722f5502e", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.rs?ref=3bb9fc4007405f76a3807cc268b3c1c5f1067e52", "patch": "@@ -0,0 +1,9 @@\n+struct RGB { r: f64, g: f64, b: f64 }\n+\n+fn main() {\n+    let (r, g, c): (f32, f32, f32) = (0., 0., 0.);\n+    let _ = RGB { r, g, c };\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR struct `RGB` has no field named `c`\n+}"}, {"sha": "d0f9e1f7f7c8ee433d9390bd438b8e9f5fc0867a", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand-2.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr?ref=3bb9fc4007405f76a3807cc268b3c1c5f1067e52", "patch": "@@ -0,0 +1,30 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:19\n+   |\n+LL |     let _ = RGB { r, g, c };\n+   |                   ^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = RGB { r: r.into(), g, c };\n+   |                   ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:22\n+   |\n+LL |     let _ = RGB { r, g, c };\n+   |                      ^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = RGB { r, g: g.into(), c };\n+   |                      ^^^^^^^^^^^\n+\n+error[E0560]: struct `RGB` has no field named `c`\n+  --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:25\n+   |\n+LL |     let _ = RGB { r, g, c };\n+   |                         ^ help: a field with a similar name exists: `b`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0308, E0560.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "91758c0b218823d54d2fb1c13b613a922ff7f1fb", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.fixed?ref=3bb9fc4007405f76a3807cc268b3c1c5f1067e52", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct RGB { r: f64, g: f64, b: f64 }\n+\n+fn main() {\n+    let (r, g, b): (f32, f32, f32) = (0., 0., 0.);\n+    let _ = RGB { r: r.into(), g: g.into(), b: b.into() };\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+}"}, {"sha": "9d3a17a72b21e21ffdf1bca23c9f6950cfcbbf2a", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.rs?ref=3bb9fc4007405f76a3807cc268b3c1c5f1067e52", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct RGB { r: f64, g: f64, b: f64 }\n+\n+fn main() {\n+    let (r, g, b): (f32, f32, f32) = (0., 0., 0.);\n+    let _ = RGB { r, g, b };\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+}"}, {"sha": "6bc16ba8b70fa927c25cc1657401649dce32f244", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb9fc4007405f76a3807cc268b3c1c5f1067e52/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr?ref=3bb9fc4007405f76a3807cc268b3c1c5f1067e52", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-struct-field-shorthand.rs:8:19\n+   |\n+LL |     let _ = RGB { r, g, b };\n+   |                   ^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = RGB { r: r.into(), g, b };\n+   |                   ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-struct-field-shorthand.rs:8:22\n+   |\n+LL |     let _ = RGB { r, g, b };\n+   |                      ^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = RGB { r, g: g.into(), b };\n+   |                      ^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-struct-field-shorthand.rs:8:25\n+   |\n+LL |     let _ = RGB { r, g, b };\n+   |                         ^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = RGB { r, g, b: b.into() };\n+   |                         ^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}