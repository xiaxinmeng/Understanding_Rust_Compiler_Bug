{"sha": "777db102dfdaa70ed7d91bad29d294874bfa9946", "node_id": "C_kwDOAAsO6NoAKDc3N2RiMTAyZGZkYWE3MGVkN2Q5MWJhZDI5ZDI5NDg3NGJmYTk5NDY", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-13T21:30:54Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-13T21:36:08Z"}, "message": "Update issue-64130-4-async-move.rs", "tree": {"sha": "143b67094d4357a16353da4e561b7ca727d2c577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/143b67094d4357a16353da4e561b7ca727d2c577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/777db102dfdaa70ed7d91bad29d294874bfa9946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/777db102dfdaa70ed7d91bad29d294874bfa9946", "html_url": "https://github.com/rust-lang/rust/commit/777db102dfdaa70ed7d91bad29d294874bfa9946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/777db102dfdaa70ed7d91bad29d294874bfa9946/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bcc107ffe037a7329b94bf533c3af255981180f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bcc107ffe037a7329b94bf533c3af255981180f", "html_url": "https://github.com/rust-lang/rust/commit/9bcc107ffe037a7329b94bf533c3af255981180f"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "f609e36362c440e0e8b5d87995d40027e39f2e19", "filename": "src/test/ui/async-await/issue-64130-4-async-move.drop-tracking.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/777db102dfdaa70ed7d91bad29d294874bfa9946/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/777db102dfdaa70ed7d91bad29d294874bfa9946/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr?ref=777db102dfdaa70ed7d91bad29d294874bfa9946", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-4-async-move.rs:15:17\n+  --> $DIR/issue-64130-4-async-move.rs:19:17\n    |\n LL | pub fn foo() -> impl Future + Send {\n    |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:21:31\n+  --> $DIR/issue-64130-4-async-move.rs:25:31\n    |\n LL |         match client.status() {\n    |               ------ has type `&Client` which is not `Send`\n@@ -17,7 +17,7 @@ LL |                 let _x = get().await;\n LL |     }\n    |     - `client` is later dropped here\n help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-64130-4-async-move.rs:19:15\n+  --> $DIR/issue-64130-4-async-move.rs:23:15\n    |\n LL |         match client.status() {\n    |               ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr"}, {"sha": "f609e36362c440e0e8b5d87995d40027e39f2e19", "filename": "src/test/ui/async-await/issue-64130-4-async-move.no_drop_tracking.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/777db102dfdaa70ed7d91bad29d294874bfa9946/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/777db102dfdaa70ed7d91bad29d294874bfa9946/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr?ref=777db102dfdaa70ed7d91bad29d294874bfa9946", "patch": "@@ -0,0 +1,26 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-64130-4-async-move.rs:19:17\n+   |\n+LL | pub fn foo() -> impl Future + Send {\n+   |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-64130-4-async-move.rs:25:31\n+   |\n+LL |         match client.status() {\n+   |               ------ has type `&Client` which is not `Send`\n+LL |             200 => {\n+LL |                 let _x = get().await;\n+   |                               ^^^^^^ await occurs here, with `client` maybe used later\n+...\n+LL |     }\n+   |     - `client` is later dropped here\n+help: consider moving this into a `let` binding to create a shorter lived borrow\n+  --> $DIR/issue-64130-4-async-move.rs:23:15\n+   |\n+LL |         match client.status() {\n+   |               ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a38428fc00f0bb63be5c6cda36ef22f81cc10536", "filename": "src/test/ui/async-await/issue-64130-4-async-move.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/777db102dfdaa70ed7d91bad29d294874bfa9946/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777db102dfdaa70ed7d91bad29d294874bfa9946/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs?ref=777db102dfdaa70ed7d91bad29d294874bfa9946", "patch": "@@ -1,4 +1,8 @@\n // edition:2018\n+// revisions: no_drop_tracking drop_tracking\n+// [drop_tracking] check-pass\n+// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n+// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n use std::any::Any;\n use std::future::Future;\n \n@@ -10,16 +14,16 @@ impl Client {\n     }\n }\n \n-async fn get() { }\n+async fn get() {}\n \n pub fn foo() -> impl Future + Send {\n-    //~^ ERROR future cannot be sent between threads safely\n+    //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n     let client = Client(Box::new(true));\n     async move {\n         match client.status() {\n             200 => {\n                 let _x = get().await;\n-            },\n+            }\n             _ => (),\n         }\n     }"}]}