{"sha": "906deae0790bd18681b937fe9a141a3c26cf1855", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNmRlYWUwNzkwYmQxODY4MWI5MzdmZTlhMTQxYTNjMjZjZjE4NTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-04T16:26:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-04T16:26:18Z"}, "message": "Auto merge of #56244 - oli-obk:loud_ui_errors, r=nikomatsakis\n\nReport failing tests without `//~ ERROR` comments\n\nr? @nikomatsakis", "tree": {"sha": "f28fe49ecd3ba0600399f83e6d1b6896ce19e1d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28fe49ecd3ba0600399f83e6d1b6896ce19e1d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/906deae0790bd18681b937fe9a141a3c26cf1855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/906deae0790bd18681b937fe9a141a3c26cf1855", "html_url": "https://github.com/rust-lang/rust/commit/906deae0790bd18681b937fe9a141a3c26cf1855", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/906deae0790bd18681b937fe9a141a3c26cf1855/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "431e0ab62f7730f11db693c23f48403e4c719f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/431e0ab62f7730f11db693c23f48403e4c719f82", "html_url": "https://github.com/rust-lang/rust/commit/431e0ab62f7730f11db693c23f48403e4c719f82"}, {"sha": "ff97569dd9c55ef8a89e9201a03ed41a482e030c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff97569dd9c55ef8a89e9201a03ed41a482e030c", "html_url": "https://github.com/rust-lang/rust/commit/ff97569dd9c55ef8a89e9201a03ed41a482e030c"}], "stats": {"total": 779, "additions": 440, "deletions": 339}, "files": [{"sha": "645deff334b8bda74b83a321c73609e5d7c7351a", "filename": "src/test/rustdoc-ui/doc-without-codeblock.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,3 +1,4 @@\n+//~ ERROR Missing code example in this documentation\n // Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -11,10 +12,13 @@\n #![deny(missing_doc_code_examples)]\n \n /// Some docs.\n+//~^ ERROR Missing code example in this documentation\n pub struct Foo;\n \n /// And then, the princess died.\n+//~^ ERROR Missing code example in this documentation\n pub mod foo {\n     /// Or maybe not because she saved herself!\n+    //~^ ERROR Missing code example in this documentation\n     pub fn bar() {}\n }"}, {"sha": "f3efc65405049d3ba738c60fc39fb20948898c85", "filename": "src/test/rustdoc-ui/doc-without-codeblock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,25 +1,25 @@\n error: Missing code example in this documentation\n    |\n note: lint level defined here\n-  --> $DIR/doc-without-codeblock.rs:11:9\n+  --> $DIR/doc-without-codeblock.rs:12:9\n    |\n LL | #![deny(missing_doc_code_examples)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Missing code example in this documentation\n-  --> $DIR/doc-without-codeblock.rs:13:1\n+  --> $DIR/doc-without-codeblock.rs:14:1\n    |\n LL | /// Some docs.\n    | ^^^^^^^^^^^^^^\n \n error: Missing code example in this documentation\n-  --> $DIR/doc-without-codeblock.rs:16:1\n+  --> $DIR/doc-without-codeblock.rs:18:1\n    |\n LL | /// And then, the princess died.\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Missing code example in this documentation\n-  --> $DIR/doc-without-codeblock.rs:18:5\n+  --> $DIR/doc-without-codeblock.rs:21:5\n    |\n LL |     /// Or maybe not because she saved herself!\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c701548faaa9226c10348da3ca266a1900644c50", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -17,8 +17,9 @@\n // https://github.com/rust-lang/rust/issues/55723\n \n /// ## For example:\n-///  \n+///\n /// \uff08arr[i]\uff09\n+//~^ ERROR `[i]` cannot be resolved, ignoring it...\n pub fn test_ice() {\n     unimplemented!();\n }"}, {"sha": "771dc3bd351128e392734d4f8dfc14ce48aa6272", "filename": "src/test/rustdoc-ui/private-item-doc-test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -16,5 +16,6 @@ mod foo {\n     /// ```\n     /// assert!(false);\n     /// ```\n+    //~^^^^^ ERROR Documentation test in private item\n     fn bar() {}\n }"}, {"sha": "3153ba47aa9d4a4d4f1e1fdae43fd053ac9adbf3", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -14,4 +14,5 @@ trait I32Iterator = Iterator<Item = i32>;\n \n fn main() {\n     let _: &I32Iterator<Item = u32> = &vec![42].into_iter();\n+    //~^ ERROR type mismatch\n }"}, {"sha": "1e0514edd66f62121adc7b9871f8ff514555cb87", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -11,7 +11,7 @@\n #![feature(trait_alias)]\n \n trait Foo: Iterator<Item = i32> {}\n-trait Bar: Foo<Item = u32> {}\n+trait Bar: Foo<Item = u32> {} //~ ERROR type annotations required\n \n trait I32Iterator = Iterator<Item = i32>;\n trait U32Iterator = I32Iterator<Item = u32>;"}, {"sha": "c3e6eb8605635d1b025be5d7df7aaa0c3807f65d", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0284]: type annotations required: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:14:1\n    |\n-LL | trait Bar: Foo<Item = u32> {}\n+LL | trait Bar: Foo<Item = u32> {} //~ ERROR type annotations required\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: required by `Foo`"}, {"sha": "c58496c91f513061cb388700fbe15ae64760263c", "filename": "src/test/ui/await-keyword/2015-edition-warning.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2F2015-edition-warning.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2F2015-edition-warning.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2015-edition-warning.fixed?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -5,11 +5,23 @@\n \n mod outer_mod {\n     pub mod r#await {\n+//~^ ERROR `await` is a keyword\n+//~| WARN was previously accepted\n         pub struct r#await;\n+//~^ ERROR `await` is a keyword\n+//~| WARN was previously accepted\n     }\n }\n use outer_mod::r#await::r#await;\n+//~^ ERROR `await` is a keyword\n+//~| ERROR `await` is a keyword\n+//~| WARN was previously accepted\n+//~| WARN was previously accepted\n \n fn main() {\n     match r#await { r#await => {} }\n+//~^ ERROR `await` is a keyword\n+//~| ERROR `await` is a keyword\n+//~| WARN was previously accepted\n+//~| WARN was previously accepted\n }"}, {"sha": "a7543a14325fbecfc1f9a774382d128640b65157", "filename": "src/test/ui/await-keyword/2015-edition-warning.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2F2015-edition-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2F2015-edition-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2015-edition-warning.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -5,11 +5,23 @@\n \n mod outer_mod {\n     pub mod await {\n+//~^ ERROR `await` is a keyword\n+//~| WARN was previously accepted\n         pub struct await;\n+//~^ ERROR `await` is a keyword\n+//~| WARN was previously accepted\n     }\n }\n use outer_mod::await::await;\n+//~^ ERROR `await` is a keyword\n+//~| ERROR `await` is a keyword\n+//~| WARN was previously accepted\n+//~| WARN was previously accepted\n \n fn main() {\n     match await { await => {} }\n+//~^ ERROR `await` is a keyword\n+//~| ERROR `await` is a keyword\n+//~| WARN was previously accepted\n+//~| WARN was previously accepted\n }"}, {"sha": "d9ae1b9a167a63502d3f5c48fe32b8f6d9e43dad", "filename": "src/test/ui/await-keyword/2015-edition-warning.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2F2015-edition-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2F2015-edition-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2015-edition-warning.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -13,7 +13,7 @@ LL | #![deny(keyword_idents)]\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-warning.rs:8:20\n+  --> $DIR/2015-edition-warning.rs:10:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -22,7 +22,7 @@ LL |         pub struct await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-warning.rs:11:16\n+  --> $DIR/2015-edition-warning.rs:15:16\n    |\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -31,7 +31,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-warning.rs:11:23\n+  --> $DIR/2015-edition-warning.rs:15:23\n    |\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -40,7 +40,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-warning.rs:14:11\n+  --> $DIR/2015-edition-warning.rs:22:11\n    |\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -49,7 +49,7 @@ LL |     match await { await => {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-warning.rs:14:19\n+  --> $DIR/2015-edition-warning.rs:22:19\n    |\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`"}, {"sha": "7ba3382ddf1298229797b850a8840d180d8fe03b", "filename": "src/test/ui/await-keyword/2018-edition-error.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -2,12 +2,14 @@\n #![allow(non_camel_case_types)]\n \n mod outer_mod {\n-    pub mod await {\n-        pub struct await;\n+    pub mod await { //~ ERROR `await` is a keyword\n+        pub struct await; //~ ERROR `await` is a keyword\n     }\n }\n-use self::outer_mod::await::await;\n+use self::outer_mod::await::await; //~ ERROR `await` is a keyword\n+    //~^ ERROR `await` is a keyword\n \n fn main() {\n-    match await { await => () }\n+    match await { await => () } //~ ERROR `await` is a keyword\n+    //~^ ERROR `await` is a keyword\n }"}, {"sha": "9ddb27916d1843143b4b626713d3a5f4241eed6d", "filename": "src/test/ui/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,37 +1,37 @@\n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:5:13\n    |\n-LL |     pub mod await {\n+LL |     pub mod await { //~ ERROR `await` is a keyword\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:6:20\n    |\n-LL |         pub struct await;\n+LL |         pub struct await; //~ ERROR `await` is a keyword\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:9:22\n    |\n-LL | use self::outer_mod::await::await;\n+LL | use self::outer_mod::await::await; //~ ERROR `await` is a keyword\n    |                      ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:9:29\n    |\n-LL | use self::outer_mod::await::await;\n+LL | use self::outer_mod::await::await; //~ ERROR `await` is a keyword\n    |                             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n-  --> $DIR/2018-edition-error.rs:12:11\n+  --> $DIR/2018-edition-error.rs:13:11\n    |\n-LL |     match await { await => () }\n+LL |     match await { await => () } //~ ERROR `await` is a keyword\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n-  --> $DIR/2018-edition-error.rs:12:19\n+  --> $DIR/2018-edition-error.rs:13:19\n    |\n-LL |     match await { await => () }\n+LL |     match await { await => () } //~ ERROR `await` is a keyword\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error: aborting due to 6 previous errors"}, {"sha": "96dd48052def876cc7a3951334cf12bc8de07065", "filename": "src/test/ui/await-keyword/post_expansion_error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2Fpost_expansion_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fawait-keyword%2Fpost_expansion_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2Fpost_expansion_error.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -6,4 +6,5 @@ macro_rules! r#await {\n \n fn main() {\n     await!()\n+    //~^ ERROR `await` is a keyword\n }"}, {"sha": "4f845d87aa2f88345cec4f4b87d6a8669956a67e", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-moved-out-with-mut.ast.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.ast.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `t.0`\n-  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:25:31\n+  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:26:31\n    |\n LL |         drop(t);\n    |              - value moved here\n@@ -10,7 +10,7 @@ LL |         println!(\"{:?} {:?}\", t.0, t.1);\n    = note: move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `t.1`\n-  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:25:36\n+  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:26:36\n    |\n LL |         drop(t);\n    |              - value moved here\n@@ -21,7 +21,7 @@ LL |         println!(\"{:?} {:?}\", t.0, t.1);\n    = note: move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `u.0`\n-  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:33:31\n+  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:37:31\n    |\n LL |         drop(u);\n    |              - value moved here\n@@ -32,7 +32,7 @@ LL |         println!(\"{:?} {:?}\", u.0, u.1);\n    = note: move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `u.1`\n-  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:33:36\n+  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:37:36\n    |\n LL |         drop(u);\n    |              - value moved here\n@@ -43,7 +43,7 @@ LL |         println!(\"{:?} {:?}\", u.0, u.1);\n    = note: move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `v.x`\n-  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:41:31\n+  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:48:31\n    |\n LL |         drop(v);\n    |              - value moved here\n@@ -54,7 +54,7 @@ LL |         println!(\"{:?} {:?}\", v.x, v.y);\n    = note: move occurs because `v` has type `Spair`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `v.y`\n-  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:41:36\n+  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:48:36\n    |\n LL |         drop(v);\n    |              - value moved here"}, {"sha": "7861087ad02ebd9b079e9048c12f72c4c241e6de", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-moved-out-with-mut.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.nll.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,7 +9,7 @@ LL |         t.0 = S(1);\n    = note: move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `u`\n-  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:31:9\n+  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:34:9\n    |\n LL |         drop(u);\n    |              - value moved here\n@@ -19,7 +19,7 @@ LL |         u.0 = S(1);\n    = note: move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `v`\n-  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:39:9\n+  --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:45:9\n    |\n LL |         drop(v);\n    |              - value moved here"}, {"sha": "358a5dd1cbdcf2c98c7bb9c9b7ced8adb5bd2822", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-moved-out-with-mut.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -21,23 +21,32 @@ fn main() {\n         let mut t: Tuple = (S(0), 0);\n         drop(t);\n         t.0 = S(1);\n+        //[nll]~^ ERROR assign to part of moved value\n         t.1 = 2;\n         println!(\"{:?} {:?}\", t.0, t.1);\n+        //[ast]~^ ERROR use of moved value\n+        //[ast]~^^ ERROR use of moved value\n     }\n \n     {\n         let mut u: Tpair = Tpair(S(0), 0);\n         drop(u);\n         u.0 = S(1);\n+        //[nll]~^ ERROR assign to part of moved value\n         u.1 = 2;\n         println!(\"{:?} {:?}\", u.0, u.1);\n+        //[ast]~^ ERROR use of moved value\n+        //[ast]~^^ ERROR use of moved value\n     }\n \n     {\n         let mut v: Spair = Spair { x: S(0), y: 0 };\n         drop(v);\n         v.x = S(1);\n+        //[nll]~^ ERROR assign to part of moved value\n         v.y = 2;\n         println!(\"{:?} {:?}\", v.x, v.y);\n+        //[ast]~^ ERROR use of moved value\n+        //[ast]~^^ ERROR use of moved value\n     }\n }"}, {"sha": "ad4accbbeeef93ccc5454be23d5a0eee165fc5f8", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -13,7 +13,7 @@ impl Value {\n fn foo(val: Value) {\n     let _reviewers_original: Vec<Value> = match val.as_array() {\n         Some(array) => {\n-            *array\n+            *array //~ ERROR cannot move out of borrowed content\n         }\n         None => vec![]\n     };"}, {"sha": "d1d7d13088bcc8d4d8bb8f779225bc649897e31a", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-54597-reject-move-out-of-borrow-via-pat.rs:16:13\n    |\n-LL |             *array\n+LL |             *array //~ ERROR cannot move out of borrowed content\n    |             ^^^^^^\n    |             |\n    |             cannot move out of borrowed content"}, {"sha": "f3e9ce364d9b46f2ce16c0acd4da43e559fb6a0c", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.ast.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,7 +9,7 @@ LL |         x\n    |\n \n error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:29:22\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:32:22\n    |\n LL |         let mut c1 = |z: &'static mut isize| {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n@@ -19,31 +19,31 @@ LL |         x\n    |\n \n error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:9\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:9\n    |\n LL |     pub fn capture_assign_whole(x: (i32,)) {\n    |                                 - help: make this binding mutable: `mut x`\n LL |         || { x = (1,); };\n    |         ^^ cannot borrow mutably\n \n error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:9\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:52:9\n    |\n LL |     pub fn capture_assign_part(x: (i32,)) {\n    |                                - help: make this binding mutable: `mut x`\n LL |         || { x.0 = 1; };\n    |         ^^ cannot borrow mutably\n \n error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:9\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:58:9\n    |\n LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n    |                                   - help: make this binding mutable: `mut x`\n LL |         || { &mut x; };\n    |         ^^ cannot borrow mutably\n \n error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:9\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:64:9\n    |\n LL |     pub fn capture_reborrow_part(x: (i32,)) {\n    |                                  - help: make this binding mutable: `mut x`"}, {"sha": "434f318ad14494438d286a65345c812411e3993d", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.migrate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -8,7 +8,7 @@ LL |         let mut c1 = |y: &'static mut isize| x = y;\n    |                                              ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:50\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:34:50\n    |\n LL |     pub fn ee(x: &'static mut isize) {\n    |               - help: consider changing this to be mutable: `mut x`\n@@ -17,31 +17,31 @@ LL |             let mut c2 = |y: &'static mut isize| x = y;\n    |                                                  ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:14\n    |\n LL |     pub fn capture_assign_whole(x: (i32,)) {\n    |                                 - help: consider changing this to be mutable: `mut x`\n LL |         || { x = (1,); };\n    |              ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:52:14\n    |\n LL |     pub fn capture_assign_part(x: (i32,)) {\n    |                                - help: consider changing this to be mutable: `mut x`\n LL |         || { x.0 = 1; };\n    |              ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:58:14\n    |\n LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n    |                                   - help: consider changing this to be mutable: `mut x`\n LL |         || { &mut x; };\n    |              ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:64:14\n    |\n LL |     pub fn capture_reborrow_part(x: (i32,)) {\n    |                                  - help: consider changing this to be mutable: `mut x`"}, {"sha": "434f318ad14494438d286a65345c812411e3993d", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -8,7 +8,7 @@ LL |         let mut c1 = |y: &'static mut isize| x = y;\n    |                                              ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:50\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:34:50\n    |\n LL |     pub fn ee(x: &'static mut isize) {\n    |               - help: consider changing this to be mutable: `mut x`\n@@ -17,31 +17,31 @@ LL |             let mut c2 = |y: &'static mut isize| x = y;\n    |                                                  ^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:14\n    |\n LL |     pub fn capture_assign_whole(x: (i32,)) {\n    |                                 - help: consider changing this to be mutable: `mut x`\n LL |         || { x = (1,); };\n    |              ^^^^^^^^ cannot assign\n \n error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:52:14\n    |\n LL |     pub fn capture_assign_part(x: (i32,)) {\n    |                                - help: consider changing this to be mutable: `mut x`\n LL |         || { x.0 = 1; };\n    |              ^^^^^^^ cannot assign\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:58:14\n    |\n LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n    |                                   - help: consider changing this to be mutable: `mut x`\n LL |         || { &mut x; };\n    |              ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n-  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:14\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:64:14\n    |\n LL |     pub fn capture_reborrow_part(x: (i32,)) {\n    |                                  - help: consider changing this to be mutable: `mut x`"}, {"sha": "2bd71ec25f841d8dfb2931bf40f6071a1d50f632", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -19,6 +19,9 @@ mod borrowck_closures_unique {\n     pub fn e(x: &'static mut isize) {\n         static mut Y: isize = 3;\n         let mut c1 = |y: &'static mut isize| x = y;\n+        //[migrate]~^ ERROR is not declared as mutable\n+        //[nll]~^^ ERROR is not declared as mutable\n+        //[ast]~^^^ closure cannot assign to immutable\n         unsafe { c1(&mut Y); }\n     }\n }\n@@ -27,7 +30,10 @@ mod borrowck_closures_unique_grandparent {\n     pub fn ee(x: &'static mut isize) {\n         static mut Z: isize = 3;\n         let mut c1 = |z: &'static mut isize| {\n+        //[ast]~^ closure cannot assign to immutable\n             let mut c2 = |y: &'static mut isize| x = y;\n+        //[migrate]~^ ERROR is not declared as mutable\n+        //[nll]~^^ ERROR is not declared as mutable\n             c2(z);\n         };\n         unsafe { c1(&mut Z); }\n@@ -38,15 +44,27 @@ mod borrowck_closures_unique_grandparent {\n mod mutability_errors {\n     pub fn capture_assign_whole(x: (i32,)) {\n         || { x = (1,); };\n+        //[ast]~^ ERROR immutable argument\n+        //[migrate]~^^ ERROR is not declared as mutable\n+        //[nll]~^^^ ERROR is not declared as mutable\n     }\n     pub fn capture_assign_part(x: (i32,)) {\n         || { x.0 = 1; };\n+        //[ast]~^ ERROR immutable argument\n+        //[migrate]~^^ ERROR is not declared as mutable\n+        //[nll]~^^^ ERROR is not declared as mutable\n     }\n     pub fn capture_reborrow_whole(x: (i32,)) {\n         || { &mut x; };\n+        //[ast]~^ ERROR immutable argument\n+        //[migrate]~^^ ERROR is not declared as mutable\n+        //[nll]~^^^ ERROR is not declared as mutable\n     }\n     pub fn capture_reborrow_part(x: (i32,)) {\n         || { &mut x.0; };\n+        //[ast]~^ ERROR immutable argument\n+        //[migrate]~^^ ERROR is not declared as mutable\n+        //[nll]~^^^ ERROR is not declared as mutable\n     }\n }\n "}, {"sha": "7e2a72f23701446dc87fa3e95240701c235feac6", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -29,6 +29,7 @@ fn main() {\n     // This will compile, but then hard-abort at runtime.\n     // FIXME(oli-obk): this should instead panic (not hard-abort) at runtime.\n     let x: &'static u8 = &(bar() + 1);\n+    //~^ ERROR does not live long enough\n     let y = *x;\n     unreachable!();\n }"}, {"sha": "6d4b50c1dde894d20de626f2df78ee4a6a6c2b22", "filename": "src/test/ui/consts/const-int-unchecked.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -13,9 +13,9 @@\n use std::intrinsics;\n \n const SHR: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n-//^~ ERROR: Overflowing shift by 8 in unchecked_shr\n+//~^ ERROR any use of this value will cause an error\n const SHL: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n-//^~ ERROR: Overflowing shift by 8 in unchecked_shl\n+//~^ ERROR any use of this value will cause an error\n \n fn main() {\n }"}, {"sha": "ca5a6f7f3d259437c5381031117e7b8b0de57c79", "filename": "src/test/ui/custom_test_frameworks/mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -17,3 +17,4 @@ extern crate example_runner;\n \n #[test]\n fn wrong_kind(){}\n+//~^ ERROR trait bound `test::TestDescAndFn: example_runner::Testable` is not satisfied"}, {"sha": "903019590ef10725b475a7a1b0da1bc2af15397e", "filename": "src/test/ui/error-codes/E0161.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.ast.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n   --> $DIR/E0161.rs:32:9\n    |\n-LL |     box *x; //~ ERROR E0161\n+LL |     box *x;\n    |         ^^\n \n error: aborting due to previous error"}, {"sha": "bfeab0c6e6b2c055a0df842ef881b538cad2b4fb", "filename": "src/test/ui/error-codes/E0161.astul.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.astul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.astul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.astul.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n   --> $DIR/E0161.rs:32:5\n    |\n-LL |     box *x; //~ ERROR E0161\n+LL |     box *x;\n    |     ^^^^^^\n \n error: aborting due to previous error"}, {"sha": "903019590ef10725b475a7a1b0da1bc2af15397e", "filename": "src/test/ui/error-codes/E0161.edition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n   --> $DIR/E0161.rs:32:9\n    |\n-LL |     box *x; //~ ERROR E0161\n+LL |     box *x;\n    |         ^^\n \n error: aborting due to previous error"}, {"sha": "bfeab0c6e6b2c055a0df842ef881b538cad2b4fb", "filename": "src/test/ui/error-codes/E0161.editionul.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.editionul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.editionul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.editionul.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n   --> $DIR/E0161.rs:32:5\n    |\n-LL |     box *x; //~ ERROR E0161\n+LL |     box *x;\n    |     ^^^^^^\n \n error: aborting due to previous error"}, {"sha": "903019590ef10725b475a7a1b0da1bc2af15397e", "filename": "src/test/ui/error-codes/E0161.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n   --> $DIR/E0161.rs:32:9\n    |\n-LL |     box *x; //~ ERROR E0161\n+LL |     box *x;\n    |         ^^\n \n error: aborting due to previous error"}, {"sha": "bfeab0c6e6b2c055a0df842ef881b538cad2b4fb", "filename": "src/test/ui/error-codes/E0161.nllul.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nllul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nllul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nllul.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n   --> $DIR/E0161.rs:32:5\n    |\n-LL |     box *x; //~ ERROR E0161\n+LL |     box *x;\n    |     ^^^^^^\n \n error: aborting due to previous error"}, {"sha": "26742ff9400d1b2055fbf8b3d6a2ad28bb6d3f68", "filename": "src/test/ui/error-codes/E0161.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -29,7 +29,15 @@\n #![feature(box_syntax)]\n \n fn foo(x: Box<[i32]>) {\n-    box *x; //~ ERROR E0161\n+    box *x;\n+    //[ast]~^ ERROR E0161\n+    //[nll]~^^ ERROR E0161\n+    //[zflags]~^^^ ERROR E0161\n+    //[edition]~^^^^ ERROR E0161\n+    //[astul]~^^^^^ ERROR E0161\n+    //[nllul]~^^^^^^ ERROR E0161\n+    //[zflagsul]~^^^^^^^ ERROR E0161\n+    //[editionul]~^^^^^^^^ ERROR E0161\n }\n \n fn main() {}"}, {"sha": "903019590ef10725b475a7a1b0da1bc2af15397e", "filename": "src/test/ui/error-codes/E0161.zflags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n   --> $DIR/E0161.rs:32:9\n    |\n-LL |     box *x; //~ ERROR E0161\n+LL |     box *x;\n    |         ^^\n \n error: aborting due to previous error"}, {"sha": "bfeab0c6e6b2c055a0df842ef881b538cad2b4fb", "filename": "src/test/ui/error-codes/E0161.zflagsul.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflagsul.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflagsul.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflagsul.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0161]: cannot move a value of type [i32]: the size of [i32] cannot be statically determined\n   --> $DIR/E0161.rs:32:5\n    |\n-LL |     box *x; //~ ERROR E0161\n+LL |     box *x;\n    |     ^^^^^^\n \n error: aborting due to previous error"}, {"sha": "73678195492b5ecdbd2e7be2c1785f1555b13fb0", "filename": "src/test/ui/error-codes/E0718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0718.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -11,7 +11,7 @@\n #![feature(lang_items)]\n \n // Arc is expected to be a struct, so this will error.\n-#[lang = \"arc\"]\n+#[lang = \"arc\"] //~ ERROR language item must be applied to a struct\n static X: u32 = 42;\n \n fn main() {}"}, {"sha": "8544b07618b865ef35555b86bb731442de15dbd6", "filename": "src/test/ui/error-codes/E0718.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0718.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0718.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0718.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0718]: `arc` language item must be applied to a struct\n   --> $DIR/E0718.rs:14:1\n    |\n-LL | #[lang = \"arc\"]\n+LL | #[lang = \"arc\"] //~ ERROR language item must be applied to a struct\n    | ^^^^^^^^^^^^^^^ attribute should be applied to a struct, not a static item\n \n error: aborting due to previous error"}, {"sha": "895f9e04d88c91cd7b9266f88cc49f3d776aab06", "filename": "src/test/ui/error-codes/E0719.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,10 +9,12 @@\n // except according to those terms.\n \n trait Foo: Iterator<Item = i32, Item = i32> {}\n+//~^ ERROR is already specified\n \n type Unit = ();\n \n fn test() -> Box<Iterator<Item = (), Item = Unit>> {\n+//~^ ERROR is already specified\n     Box::new(None.into_iter())\n }\n "}, {"sha": "0666e1ede3cf70d283501a33beee87915e643903", "filename": "src/test/ui/error-codes/E0719.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -7,7 +7,7 @@ LL | trait Foo: Iterator<Item = i32, Item = i32> {}\n    |                     `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/E0719.rs:15:38\n+  --> $DIR/E0719.rs:16:38\n    |\n LL | fn test() -> Box<Iterator<Item = (), Item = Unit>> {\n    |                           ---------  ^^^^^^^^^^^ re-bound here"}, {"sha": "34f23152c2dcc0eb1372a615f4e890fd859954f8", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_bindings.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,9 +9,13 @@\n // except according to those terms.\n \n const FOO: impl Copy = 42;\n+//~^ ERROR `impl Trait` not allowed\n \n static BAR: impl Copy = 42;\n+//~^ ERROR `impl Trait` not allowed\n \n fn main() {\n     let foo = impl Copy = 42;\n+//~^ ERROR expected expression, found keyword `impl`\n+    let foo: impl Copy = 42;\n }"}, {"sha": "4582e3697e269c1d283745bb053667cf8b844c7b", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_bindings.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,5 +1,5 @@\n error: expected expression, found keyword `impl`\n-  --> $DIR/feature-gate-impl_trait_in_bindings.rs:16:15\n+  --> $DIR/feature-gate-impl_trait_in_bindings.rs:18:15\n    |\n LL |     let foo = impl Copy = 42;\n    |               ^^^^ expected expression\n@@ -13,7 +13,7 @@ LL | const FOO: impl Copy = 42;\n    = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-impl_trait_in_bindings.rs:13:13\n+  --> $DIR/feature-gate-impl_trait_in_bindings.rs:14:13\n    |\n LL | static BAR: impl Copy = 42;\n    |             ^^^^^^^^^"}, {"sha": "56ede0104a5fd8fe48c168e9302c2bd64e0bdc72", "filename": "src/test/ui/feature-gates/feature-gate-linker-flavor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linker-flavor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linker-flavor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linker-flavor.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -14,6 +14,7 @@\n // book\n \n #[used]\n+//~^ ERROR attribute must be applied to a `static` variable\n fn foo() {}\n \n fn main() {}"}, {"sha": "52e01c24ace8b9a9b5b19a9aa21cc718e433f26e", "filename": "src/test/ui/feature-gates/feature-gate-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n trait Foo = Default;\n+//~^ ERROR trait aliases are experimental\n \n fn main() {}"}, {"sha": "fec0868c540a8de49d93ee285f9bf31e27d4b2dd", "filename": "src/test/ui/feature-gates/feature-gate-underscore_const_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -15,6 +15,7 @@ struct Str {}\n impl Trt for Str {}\n \n const _ : () = {\n+//~^ ERROR is unstable\n     use std::marker::PhantomData;\n     struct ImplementsTrait<T: Trt>(PhantomData<T>);\n     let _ = ImplementsTrait::<Str>(PhantomData);"}, {"sha": "694d2c1e73c82673eefa2c657e8a27db83d03c3d", "filename": "src/test/ui/feature-gates/feature-gate-underscore_const_names.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-underscore_const_names.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -2,6 +2,7 @@ error[E0658]: naming constants with `_` is unstable (see issue #54912)\n   --> $DIR/feature-gate-underscore_const_names.rs:17:1\n    |\n LL | / const _ : () = {\n+LL | | //~^ ERROR is unstable\n LL | |     use std::marker::PhantomData;\n LL | |     struct ImplementsTrait<T: Trt>(PhantomData<T>);\n LL | |     let _ = ImplementsTrait::<Str>(PhantomData);"}, {"sha": "2cda483b6a1c2f4051107247a6490836a913e5cc", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -13,6 +13,8 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n     loop {\n         match unsafe { g.resume() } {\n             GeneratorState::Complete(c) => return c,\n+//[nll]~^ ERROR explicit lifetime required\n+//[ast]~^^ ERROR explicit lifetime required\n             GeneratorState::Yielded(_) => (),\n         }\n     }"}, {"sha": "84a0f788b1e7e2103b59d4b085488ead52a1797f", "filename": "src/test/ui/impl-trait/bindings-opaque.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -18,6 +18,9 @@ fn main() {\n     let foo: impl Copy = 42;\n \n     let _ = FOO.count_ones();\n+//~^ ERROR no method\n     let _ = BAR.count_ones();\n+//~^ ERROR no method\n     let _ = foo.count_ones();\n+//~^ ERROR no method\n }"}, {"sha": "1f79149c5612f6fda491e1cbbef63191c900bc92", "filename": "src/test/ui/impl-trait/bindings-opaque.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -5,13 +5,13 @@ LL |     let _ = FOO.count_ones();\n    |                 ^^^^^^^^^^\n \n error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:21:17\n+  --> $DIR/bindings-opaque.rs:22:17\n    |\n LL |     let _ = BAR.count_ones();\n    |                 ^^^^^^^^^^\n \n error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:22:17\n+  --> $DIR/bindings-opaque.rs:24:17\n    |\n LL |     let _ = foo.count_ones();\n    |                 ^^^^^^^^^^"}, {"sha": "0cca12f8a674f9b2e9b2b82be9a802ef67b7e10f", "filename": "src/test/ui/impl-trait/bindings.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -12,23 +12,27 @@\n \n fn a<T: Clone>(x: T) {\n     const foo: impl Clone = x;\n+//~^ ERROR can't capture dynamic environment in a fn item\n }\n \n fn b<T: Clone>(x: T) {\n     let _ = move || {\n         const foo: impl Clone = x;\n+//~^ ERROR can't capture dynamic environment in a fn item\n     };\n }\n \n trait Foo<T: Clone> {\n     fn a(x: T) {\n         const foo: impl Clone = x;\n+//~^ ERROR can't capture dynamic environment in a fn item\n     }\n }\n \n impl<T: Clone> Foo<T> for i32 {\n     fn a(x: T) {\n         const foo: impl Clone = x;\n+//~^ ERROR can't capture dynamic environment in a fn item\n     }\n }\n "}, {"sha": "91be86f7af3d233107ce19c41d177d7c2f91a0af", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -7,23 +7,23 @@ LL |     const foo: impl Clone = x;\n    = help: use the `|| { ... }` closure form instead\n \n error[E0434]: can't capture dynamic environment in a fn item\n-  --> $DIR/bindings.rs:19:33\n+  --> $DIR/bindings.rs:20:33\n    |\n LL |         const foo: impl Clone = x;\n    |                                 ^\n    |\n    = help: use the `|| { ... }` closure form instead\n \n error[E0434]: can't capture dynamic environment in a fn item\n-  --> $DIR/bindings.rs:25:33\n+  --> $DIR/bindings.rs:27:33\n    |\n LL |         const foo: impl Clone = x;\n    |                                 ^\n    |\n    = help: use the `|| { ... }` closure form instead\n \n error[E0434]: can't capture dynamic environment in a fn item\n-  --> $DIR/bindings.rs:31:33\n+  --> $DIR/bindings.rs:34:33\n    |\n LL |         const foo: impl Clone = x;\n    |                                 ^"}, {"sha": "fb9e9e17c82e6a4ff55a8479c032b080383b8feb", "filename": "src/test/ui/issues/issue-17905-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -16,6 +16,8 @@ impl Pair<\n     isize\n > {\n     fn say(self: &Pair<&str, isize>) {\n+//~^ ERROR mismatched method receiver\n+//~| ERROR mismatched method receiver\n         println!(\"{:?}\", self);\n     }\n }"}, {"sha": "cf8b5190599505157a1dadd3e912447bca9f0d39", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -10,6 +10,8 @@ note: the anonymous lifetime #2 defined on the method body at 18:5...\n   --> $DIR/issue-17905-2.rs:18:5\n    |\n LL | /     fn say(self: &Pair<&str, isize>) {\n+LL | | //~^ ERROR mismatched method receiver\n+LL | | //~| ERROR mismatched method receiver\n LL | |         println!(\"{:?}\", self);\n LL | |     }\n    | |_____^\n@@ -36,6 +38,8 @@ note: ...does not necessarily outlive the anonymous lifetime #2 defined on the m\n   --> $DIR/issue-17905-2.rs:18:5\n    |\n LL | /     fn say(self: &Pair<&str, isize>) {\n+LL | | //~^ ERROR mismatched method receiver\n+LL | | //~| ERROR mismatched method receiver\n LL | |         println!(\"{:?}\", self);\n LL | |     }\n    | |_____^"}, {"sha": "a6130d21b5d396953e7aa8028c234ef42c0fc333", "filename": "src/test/ui/issues/issue-22872.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-22872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-22872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -18,6 +18,8 @@ pub trait Process<'a> {\n \n fn push_process<P>(process: P) where P: Process<'static> {\n     let _: Box<for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n+//~^ ERROR is not an iterator\n+//~| ERROR is not satisfied\n }\n \n fn main() {}"}, {"sha": "13e627a492f404d4cb9eb9d9ca8313257e042a0c", "filename": "src/test/ui/issues/issue-34229.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-34229.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-34229.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,4 +1,5 @@\n #[derive(PartialEq)] struct Comparable;\n #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n+//~^ ERROR can't compare `Comparable`\n \n fn main() {}"}, {"sha": "ca912b211c42fc8d9cb2b12434edd57a55f99eec", "filename": "src/test/ui/issues/issue-39175.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-39175.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-39175.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39175.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -22,4 +22,5 @@ use std::process::Command;\n \n fn main() {\n     Command::new(\"echo\").arg(\"hello\").exec();\n+//~^ ERROR no method named `exec`\n }"}, {"sha": "c4da18a3c9d634e9cee8035686ec53c4651f07dc", "filename": "src/test/ui/issues/issue-45829/import-self.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -14,12 +14,16 @@ mod foo {\n }\n \n use foo::{self};\n+//~^ ERROR is defined multiple times\n \n use foo as self;\n+//~^ ERROR expected identifier\n \n use foo::self;\n+//~^ ERROR `self` imports are only allowed within a { } list\n \n use foo::A;\n use foo::{self as A};\n+//~^ ERROR is defined multiple times\n \n fn main() {}"}, {"sha": "4e8b70824b9693fa570461267a4f2d417b188318", "filename": "src/test/ui/issues/issue-45829/import-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-self.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,11 +1,11 @@\n error: expected identifier, found keyword `self`\n-  --> $DIR/import-self.rs:18:12\n+  --> $DIR/import-self.rs:19:12\n    |\n LL | use foo as self;\n    |            ^^^^ expected identifier, found keyword\n \n error[E0429]: `self` imports are only allowed within a { } list\n-  --> $DIR/import-self.rs:20:5\n+  --> $DIR/import-self.rs:22:5\n    |\n LL | use foo::self;\n    |     ^^^^^^^^^\n@@ -26,7 +26,7 @@ LL | use foo::{self as other_foo};\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0252]: the name `A` is defined multiple times\n-  --> $DIR/import-self.rs:23:11\n+  --> $DIR/import-self.rs:26:11\n    |\n LL | use foo::A;\n    |     ------ previous import of the type `A` here"}, {"sha": "0ba6ef34b4960431ba9319235011805b201c50b2", "filename": "src/test/ui/issues/issue-45829/import-twice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fimport-twice.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -14,5 +14,6 @@ mod foo {\n }\n \n use foo::{A, A};\n+//~^ ERROR is defined multiple times\n \n fn main() {}"}, {"sha": "5135151bd64ed667fbbce54b1104b6e989bb38a9", "filename": "src/test/ui/issues/issue-45829/issue-45829.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fissue-45829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fissue-45829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fissue-45829.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -14,5 +14,6 @@ mod foo {\n }\n \n use foo::{A, B as A};\n+//~^ ERROR is defined multiple times\n \n fn main() {}"}, {"sha": "e6040e539c1f1cb864121f99c9e38638fa5e002e", "filename": "src/test/ui/issues/issue-45829/rename-extern-vs-use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -16,5 +16,6 @@ mod foo {\n \n use foo::bar;\n extern crate issue_45829_b as bar;\n+//~^ ERROR the name `bar` is defined multiple times\n \n fn main() {}"}, {"sha": "08cbbd6e5450caa6f278830b909e800f5652999d", "filename": "src/test/ui/issues/issue-45829/rename-extern-with-tab.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -13,5 +13,6 @@\n \n extern crate issue_45829_a;\n extern  crate    issue_45829_b  as  issue_45829_a;\n+//~^ ERROR is defined multiple times\n \n fn main() {}"}, {"sha": "d4c323da70f92cf5aba84d4217e818a622e944e5", "filename": "src/test/ui/issues/issue-45829/rename-extern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -13,5 +13,6 @@\n \n extern crate issue_45829_a;\n extern crate issue_45829_b as issue_45829_a;\n+//~^ ERROR is defined multiple times\n \n fn main() {}"}, {"sha": "5e131f0a0d02cbfaa8abe7d7e3d4a047ff0fd4ce", "filename": "src/test/ui/issues/issue-45829/rename-use-vs-extern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-vs-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-vs-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-vs-extern.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -12,5 +12,6 @@\n \n extern crate issue_45829_b;\n use std as issue_45829_b;\n+//~^ ERROR is defined multiple times\n \n fn main() {}"}, {"sha": "84bf8ed83567291a43a0e70f11edb11890ce8e7d", "filename": "src/test/ui/issues/issue-45829/rename-use-with-tabs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-with-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-with-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-with-tabs.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -17,5 +17,6 @@ mod foo {\n }\n \n use foo::{A, bar::B    as    A};\n+//~^ ERROR is defined multiple times\n \n fn main() {}"}, {"sha": "5be9c84f283314158291bc1e5b6500ec182825d2", "filename": "src/test/ui/issues/issue-45829/rename-with-path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-with-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-with-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-with-path.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n use std::{collections::HashMap as A, sync::Arc as A};\n+//~^ ERROR is defined multiple times\n \n fn main() {}"}, {"sha": "8e146d83066b36c61c40b318d3c15209c71eeea0", "filename": "src/test/ui/issues/issue-45829/rename.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -10,6 +10,7 @@\n \n use core;\n use std as core;\n+//~^ ERROR is defined multiple times\n \n fn main() {\n     1 + 1;"}, {"sha": "7826ce6c0f34e9ffd4bb8102a2f71c67b408fb90", "filename": "src/test/ui/issues/issue-51602.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-51602.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-51602.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51602.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -10,6 +10,7 @@\n \n fn main(){\n     if i in 1..10 {\n+//~^ ERROR expected `{`, found keyword `in`\n         break;\n     }\n }"}, {"sha": "52397aa8b488b3a3d3dcecd95beb9083c05bbd84", "filename": "src/test/ui/issues/issue-52717.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-52717.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-52717.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52717.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -17,5 +17,6 @@ fn main() {\n   let x = A::A { foo: 3 };\n   match x {\n     A::A { fob } => { println!(\"{}\", fob); }\n+//~^ ERROR does not have a field named `fob`\n   }\n }"}, {"sha": "987c940b320573b80571ae6aef50d07412fa77e1", "filename": "src/test/ui/issues/issue-53565.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53565.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53565.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53565.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n use std::time::{foo, bar, buzz};\n+//~^ ERROR unresolved imports\n use std::time::{abc, def};\n+//~^ ERROR unresolved imports\n fn main(){\n-   println!(\"Hello World!\");\n+    println!(\"Hello World!\");\n }"}, {"sha": "b18d694a5e08b8fe6c4283bca747b738925482c7", "filename": "src/test/ui/issues/issue-53565.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53565.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53565.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53565.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -8,7 +8,7 @@ LL | use std::time::{foo, bar, buzz};\n    |                 no `foo` in `time`\n \n error[E0432]: unresolved imports `std::time::abc`, `std::time::def`\n-  --> $DIR/issue-53565.rs:11:17\n+  --> $DIR/issue-53565.rs:12:17\n    |\n LL | use std::time::{abc, def};\n    |                 ^^^  ^^^ no `def` in `time`"}, {"sha": "fb7662095d0c6c6c6bd8260ed8f4ebef238e50ec", "filename": "src/test/ui/issues/issue-53692.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53692.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -11,12 +11,14 @@ fn main() {\n         let items = vec![1, 2, 3];\n         let ref_items: &[i32] = &items;\n         let items_clone: Vec<i32> = ref_items.clone();\n+//~^ ERROR mismatched types\n \n         // in that case no suggestion will be triggered\n         let items_clone_2:Vec<i32> = items.clone();\n \n         let s = \"hi\";\n         let string: String = s.clone();\n+//~^ ERROR mismatched types\n \n         // in that case no suggestion will be triggered\n         let s2 = \"hi\";"}, {"sha": "ff4660dc702c0971cc131d470cde371d357e0fe2", "filename": "src/test/ui/issues/issue-53692.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -11,7 +11,7 @@ LL |         let items_clone: Vec<i32> = ref_items.clone();\n               found type `&[i32]`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-53692.rs:19:30\n+  --> $DIR/issue-53692.rs:20:30\n    |\n LL |         let string: String = s.clone();\n    |                              ^^^^^^^^^"}, {"sha": "e178007cd6be5bfa641bf4814defee87686892f7", "filename": "src/test/ui/issues/issue-53840.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53840.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -20,8 +20,10 @@ fn main() {\n     let bar = Bar { a: \"1\".to_string(), b: \"2\".to_string() };\n     match E::Foo(\"\".into(), \"\".into(), \"\".into()) {\n         E::Foo(a, b, ref c) => {}\n+//~^ ERROR cannot bind by-move and by-ref in the same pattern\n     }\n     match bar {\n         Bar {a, ref b} => {}\n+//~^ ERROR cannot bind by-move and by-ref in the same pattern\n     }\n }"}, {"sha": "599abe95bb619557e1de5237c913d4e50749dbea", "filename": "src/test/ui/issues/issue-53840.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-53840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53840.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -8,7 +8,7 @@ LL |         E::Foo(a, b, ref c) => {}\n    |                by-move pattern here\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/issue-53840.rs:25:14\n+  --> $DIR/issue-53840.rs:26:14\n    |\n LL |         Bar {a, ref b} => {}\n    |              ^  ----- both by-ref and by-move used"}, {"sha": "68d838054776e7675e9aa0fd91e2bea74b9ec09f", "filename": "src/test/ui/issues/issue-54348.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     [1][0u64 as usize];\n-    [1][1.5 as usize]; // ERROR index out of bounds\n-    [1][1u64 as usize]; // ERROR index out of bounds\n+    [1][1.5 as usize]; //~ ERROR index out of bounds\n+    [1][1u64 as usize]; //~ ERROR index out of bounds\n }"}, {"sha": "d4ee94aa411b79f769df29a18a63949bd7a35f8d", "filename": "src/test/ui/issues/issue-54348.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,15 +1,15 @@\n error: index out of bounds: the len is 1 but the index is 1\n   --> $DIR/issue-54348.rs:3:5\n    |\n-LL |     [1][1.5 as usize]; // ERROR index out of bounds\n+LL |     [1][1.5 as usize]; //~ ERROR index out of bounds\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: #[deny(const_err)] on by default\n \n error: index out of bounds: the len is 1 but the index is 1\n   --> $DIR/issue-54348.rs:4:5\n    |\n-LL |     [1][1u64 as usize]; // ERROR index out of bounds\n+LL |     [1][1u64 as usize]; //~ ERROR index out of bounds\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "a172f6a7bfad140c4d70b216953fa7a5fe2aa2e6", "filename": "src/test/ui/issues/issue-55796.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -14,9 +14,11 @@ pub trait Graph<'a> {\n \n     fn out_neighbors(&'a self, u: &Self::Node) -> Box<Iterator<Item = Self::Node>> {\n         Box::new(self.out_edges(u).map(|e| e.target()))\n+//~^ ERROR cannot infer\n     }\n \n     fn in_neighbors(&'a self, u: &Self::Node) -> Box<Iterator<Item = Self::Node>> {\n         Box::new(self.in_edges(u).map(|e| e.target()))\n+//~^ ERROR cannot infer\n     }\n }"}, {"sha": "f8ca0727efb7efd24d5a84a6f35e3d2282ec4daf", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -24,7 +24,7 @@ LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n               found std::boxed::Box<dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node>>\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:20:9\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -34,8 +34,8 @@ note: first, the lifetime cannot outlive the lifetime 'a as defined on the trait\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `std::iter::Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:20:39: 20:53]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:20:9\n+note: ...so that the type `std::iter::Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:21:39: 21:53]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:21:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d2dfc7ec327d3a70d3460173fffd84a152d565d6", "filename": "src/test/ui/iterators/array-of-ranges.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,14 +1,23 @@\n fn main() {\n     for _ in [0..1] {}\n+//~^ ERROR is not an iterator\n     for _ in [0..=1] {}\n+//~^ ERROR is not an iterator\n     for _ in [0..] {}\n+//~^ ERROR is not an iterator\n     for _ in [..1] {}\n+//~^ ERROR is not an iterator\n     for _ in [..=1] {}\n+//~^ ERROR is not an iterator\n     let start = 0;\n     let end = 0;\n     for _ in [start..end] {}\n+//~^ ERROR is not an iterator\n     let array_of_range = [start..end];\n     for _ in array_of_range {}\n+//~^ ERROR is not an iterator\n     for _ in [0..1, 2..3] {}\n+//~^ ERROR is not an iterator\n     for _ in [0..=1] {}\n+//~^ ERROR is not an iterator\n }"}, {"sha": "495659720c390dccd08c68a90f8be5c27b5feae8", "filename": "src/test/ui/iterators/array-of-ranges.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,7 +9,7 @@ LL |     for _ in [0..1] {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::RangeInclusive<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:3:14\n+  --> $DIR/array-of-ranges.rs:4:14\n    |\n LL |     for _ in [0..=1] {}\n    |              ^^^^^^^ if you meant to iterate between two values, remove the square brackets\n@@ -19,7 +19,7 @@ LL |     for _ in [0..=1] {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::RangeFrom<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:4:14\n+  --> $DIR/array-of-ranges.rs:6:14\n    |\n LL |     for _ in [0..] {}\n    |              ^^^^^ if you meant to iterate from a value onwards, remove the square brackets\n@@ -29,7 +29,7 @@ LL |     for _ in [0..] {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::RangeTo<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:5:14\n+  --> $DIR/array-of-ranges.rs:8:14\n    |\n LL |     for _ in [..1] {}\n    |              ^^^^^ if you meant to iterate until a value, remove the square brackets and add a starting value\n@@ -39,7 +39,7 @@ LL |     for _ in [..1] {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::RangeToInclusive<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:6:14\n+  --> $DIR/array-of-ranges.rs:10:14\n    |\n LL |     for _ in [..=1] {}\n    |              ^^^^^^ if you meant to iterate until a value (including it), remove the square brackets and add a starting value\n@@ -49,7 +49,7 @@ LL |     for _ in [..=1] {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:9:14\n+  --> $DIR/array-of-ranges.rs:14:14\n    |\n LL |     for _ in [start..end] {}\n    |              ^^^^^^^^^^^^ if you meant to iterate between two values, remove the square brackets\n@@ -59,7 +59,7 @@ LL |     for _ in [start..end] {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:11:14\n+  --> $DIR/array-of-ranges.rs:17:14\n    |\n LL |     for _ in array_of_range {}\n    |              ^^^^^^^^^^^^^^ if you meant to iterate between two values, remove the square brackets\n@@ -69,7 +69,7 @@ LL |     for _ in array_of_range {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 2]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:12:14\n+  --> $DIR/array-of-ranges.rs:19:14\n    |\n LL |     for _ in [0..1, 2..3] {}\n    |              ^^^^^^^^^^^^ borrow the array with `&` or call `.iter()` on it to iterate over it\n@@ -79,7 +79,7 @@ LL |     for _ in [0..1, 2..3] {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::RangeInclusive<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:13:14\n+  --> $DIR/array-of-ranges.rs:21:14\n    |\n LL |     for _ in [0..=1] {}\n    |              ^^^^^^^ if you meant to iterate between two values, remove the square brackets"}, {"sha": "33c84f6fa3582ce1f7046b89d805269d5543798e", "filename": "src/test/ui/iterators/array.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fiterators%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fiterators%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,6 +1,9 @@\n fn main() {\n     for _ in [1, 2] {}\n+//~^ ERROR is not an iterator\n     let x = [1, 2];\n     for _ in x {}\n+//~^ ERROR is not an iterator\n     for _ in [1.0, 2.0] {}\n+//~^ ERROR is not an iterator\n }"}, {"sha": "582c812a8d6b65e20f22c569521e935348da7bcc", "filename": "src/test/ui/iterators/array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fiterators%2Farray.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fiterators%2Farray.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,7 +9,7 @@ LL |     for _ in [1, 2] {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[{integer}; 2]` is not an iterator\n-  --> $DIR/array.rs:4:14\n+  --> $DIR/array.rs:5:14\n    |\n LL |     for _ in x {}\n    |              ^ borrow the array with `&` or call `.iter()` on it to iterate over it\n@@ -19,7 +19,7 @@ LL |     for _ in x {}\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[{float}; 2]` is not an iterator\n-  --> $DIR/array.rs:5:14\n+  --> $DIR/array.rs:7:14\n    |\n LL |     for _ in [1.0, 2.0] {}\n    |              ^^^^^^^^^^ borrow the array with `&` or call `.iter()` on it to iterate over it"}, {"sha": "bdd99ef8d17c08ccf9de5fdc9c997524fcf75479", "filename": "src/test/ui/iterators/bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fiterators%2Fbound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fiterators%2Fbound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fbound.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,3 +1,4 @@\n struct S<I: Iterator>(I);\n struct T(S<u8>);\n+//~^ ERROR is not an iterator\n fn main() {}"}, {"sha": "1c288a7e44f37a563f7e2feadf38e4997d29f8e1", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -6,6 +6,7 @@ trait Future {\n use std::error::Error;\n \n fn foo() -> impl Future<Item=(), Error=Box<Error>> {\n+//~^ ERROR missing lifetime\n     Ok(())\n }\n "}, {"sha": "6a151fa49f88350bf85233af9bfb989a27f1efe4", "filename": "src/test/ui/loud_ui.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Floud_ui.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Floud_ui.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floud_ui.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -0,0 +1,6 @@\n+// should-fail\n+\n+// this test ensures that when we forget to use\n+// any `//~ ERROR` comments whatsoever, that the test doesn't succeed\n+\n+fn main() {}"}, {"sha": "9423f0a359c69bdf04de02bccd2b926cde56afcb", "filename": "src/test/ui/macros/macro-in-expression-context-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,5 +3,6 @@ macro_rules! empty { () => () }\n fn main() {\n     match 42 {\n         _ => { empty!() }\n+//~^ ERROR macro expansion ends with an incomplete expression\n     };\n }"}, {"sha": "9b5f73296c5238d08a2f86d65213d95da26d6050", "filename": "src/test/ui/mismatched_types/numeric-literal-cast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -14,7 +14,10 @@ fn foo2(_: i32) {}\n \n fn main() {\n     foo(1u8);\n+//~^ ERROR mismatched types\n     foo1(2f32);\n+//~^ ERROR mismatched types\n     foo2(3i16);\n+//~^ ERROR mismatched types\n }\n "}, {"sha": "3aabbf530f22c73d636965962e524c33dbfdf8ea", "filename": "src/test/ui/mismatched_types/numeric-literal-cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,7 +9,7 @@ LL |     foo(1u16);\n    |         ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-literal-cast.rs:17:10\n+  --> $DIR/numeric-literal-cast.rs:18:10\n    |\n LL |     foo1(2f32);\n    |          ^^^^ expected f64, found f32\n@@ -19,7 +19,7 @@ LL |     foo1(2f64);\n    |          ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-literal-cast.rs:18:10\n+  --> $DIR/numeric-literal-cast.rs:20:10\n    |\n LL |     foo2(3i16);\n    |          ^^^^ expected i32, found i16"}, {"sha": "679567816c58f3b1ff125f187679636f9bbeacb3", "filename": "src/test/ui/nll/issue-52086.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -18,7 +18,9 @@ struct Bar { field: Vec<i32> }\n fn main() {\n     let x = Rc::new(Bar { field: vec![] });\n     drop(x.field);\n+//~^ ERROR cannot move out of an `Rc`\n \n     let y = Arc::new(Bar { field: vec![] });\n     drop(y.field);\n+//~^ ERROR cannot move out of an `Arc`\n }"}, {"sha": "1834b9bea9a577cbb0eb3276ce10b0beda0e9f8a", "filename": "src/test/ui/nll/issue-52086.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -5,7 +5,7 @@ LL |     drop(x.field);\n    |          ^^^^^^^ cannot move out of an `Rc`\n \n error[E0507]: cannot move out of an `Arc`\n-  --> $DIR/issue-52086.rs:23:10\n+  --> $DIR/issue-52086.rs:24:10\n    |\n LL |     drop(y.field);\n    |          ^^^^^^^ cannot move out of an `Arc`"}, {"sha": "07f9cf74d20bc1ed6178db384b6a2582fdab8533", "filename": "src/test/ui/nll/issue-52534-1.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -17,37 +17,45 @@ impl Test {\n     fn bar(&self, x: &u32) -> &u32 {\n         let x = 22;\n         &x\n+//~^ ERROR cannot return reference to local variable\n     }\n }\n \n fn foo(x: &u32) -> &u32 {\n     let x = 22;\n     &x\n+//~^ ERROR cannot return reference to local variable\n }\n \n fn baz(x: &u32) -> &&u32 {\n     let x = 22;\n     &&x\n+//~^ ERROR cannot return value referencing local variable\n+//~| ERROR cannot return reference to temporary value\n }\n \n fn foobazbar<'a>(x: u32, y: &'a u32) -> &'a u32 {\n     let x = 22;\n     &x\n+//~^ ERROR cannot return reference to local variable\n }\n \n fn foobar<'a>(x: &'a u32) -> &'a u32 {\n     let x = 22;\n     &x\n+//~^ ERROR cannot return reference to local variable\n }\n \n fn foobaz<'a, 'b>(x: &'a u32, y: &'b u32) -> &'a u32 {\n     let x = 22;\n     &x\n+//~^ ERROR cannot return reference to local variable\n }\n \n fn foobarbaz<'a, 'b>(x: &'a u32, y: &'b u32, z: &'a u32) -> &'a u32 {\n     let x = 22;\n     &x\n+//~^ ERROR cannot return reference to local variable\n }\n \n fn main() { }"}, {"sha": "e6556cd513446e7b0b3e88a4b91ab898a6dc58e5", "filename": "src/test/ui/nll/issue-52534-1.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -5,13 +5,13 @@ LL |         &x\n    |         ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:25:5\n+  --> $DIR/issue-52534-1.rs:26:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return value referencing local variable `x`\n-  --> $DIR/issue-52534-1.rs:30:5\n+  --> $DIR/issue-52534-1.rs:32:5\n    |\n LL |     &&x\n    |     ^--\n@@ -20,7 +20,7 @@ LL |     &&x\n    |     returns a value referencing data owned by the current function\n \n error[E0515]: cannot return reference to temporary value\n-  --> $DIR/issue-52534-1.rs:30:5\n+  --> $DIR/issue-52534-1.rs:32:5\n    |\n LL |     &&x\n    |     ^--\n@@ -29,25 +29,25 @@ LL |     &&x\n    |     returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:35:5\n+  --> $DIR/issue-52534-1.rs:39:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:40:5\n+  --> $DIR/issue-52534-1.rs:45:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:45:5\n+  --> $DIR/issue-52534-1.rs:51:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-52534-1.rs:50:5\n+  --> $DIR/issue-52534-1.rs:57:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function"}, {"sha": "91f9302721ea8b9565bd6dee4bd661a811547a57", "filename": "src/test/ui/nll/issue-52534-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -17,6 +17,7 @@ fn foo(x: &u32) -> &u32 {\n     {\n         let x = 32;\n         y = &x\n+//~^ ERROR does not live long enough\n     }\n \n     println!(\"{}\", y);"}, {"sha": "8bc463fede193a3d60ef8f2b84e8bddf73490cd3", "filename": "src/test/ui/nll/issue-52534-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,6 +3,7 @@ error[E0597]: `x` does not live long enough\n    |\n LL |         y = &x\n    |         ^^^^^^ borrowed value does not live long enough\n+LL | //~^ ERROR does not live long enough\n LL |     }\n    |     - `x` dropped here while still borrowed\n LL | "}, {"sha": "bf395a5b3ddfff7b6e931724c8e8e2e7186ad8da", "filename": "src/test/ui/nll/issue-52534.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -20,11 +20,13 @@ fn baz(_: impl FnOnce(&u32, u32) -> &u32) {\n fn bar() {\n     let x = 22;\n     foo(|a| &x)\n+//~^ ERROR does not live long enough\n }\n \n fn foobar() {\n     let y = 22;\n     baz(|first, second| &y)\n+//~^ ERROR does not live long enough\n }\n \n fn main() { }"}, {"sha": "7c3006b0e588fd6cb60064ac92c74144661f4948", "filename": "src/test/ui/nll/issue-52534.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -5,19 +5,21 @@ LL |     foo(|a| &x)\n    |          -   ^ `x` would have to be valid for `'0`...\n    |          |\n    |          has type `&'0 u32`\n+LL | //~^ ERROR does not live long enough\n LL | }\n    | - ...but `x` will be dropped here, when the function `bar` returns\n    |\n    = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/issue-52534.rs:27:26\n+  --> $DIR/issue-52534.rs:28:26\n    |\n LL |     baz(|first, second| &y)\n    |          -----           ^ `y` would have to be valid for `'0`...\n    |          |\n    |          has type `&'0 u32`\n+LL | //~^ ERROR does not live long enough\n LL | }\n    | - ...but `y` will be dropped here, when the function `foobar` returns\n    |"}, {"sha": "7bf0c7b8784f87dcf7a31f0eb7cc036584e9d568", "filename": "src/test/ui/nll/issue-52669.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-52669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52669.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -23,6 +23,7 @@ fn bar(mut a: A) -> B {\n     a.b = B;\n     foo(a);\n     a.b.clone()\n+//~^ ERROR borrow of moved value\n }\n \n fn main() {}"}, {"sha": "a08e7ffd5015e1d3aa47587f0d46bb04d0978de4", "filename": "src/test/ui/nll/issue-53040.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53040.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -13,4 +13,5 @@\n fn main() {\n     let mut v: Vec<()> = Vec::new();\n     || &mut v;\n+//~^ ERROR captured variable cannot escape `FnMut` closure body\n }"}, {"sha": "007e40ed5627360a93990614748f19495d9ec0b7", "filename": "src/test/ui/nll/issue-53807.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-53807.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-53807.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53807.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -10,8 +10,10 @@\n \n pub fn main(){\n     let maybe = Some(vec![true, true]);\n-     loop {\n+    loop {\n         if let Some(thing) = maybe {\n+//~^ ERROR use of partially moved value\n+//~| ERROR use of moved value\n         }\n     }\n }"}, {"sha": "8412cbdc54b3b2bd048c9b313e7bf79881112a8c", "filename": "src/test/ui/nll/issue-54382-use-span-of-tail-of-block.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.nll.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -6,7 +6,7 @@ LL |             D(\"other\").next(&_thing1)\n    |             |               |\n    |             |               borrowed value does not live long enough\n    |             a temporary with access to the borrow is created here ...\n-LL |         }\n+...\n LL |     }\n    |     - `_thing1` dropped here while still borrowed\n LL | "}, {"sha": "312e6dce8c795b020beda0ab85d00b37b90c97bc", "filename": "src/test/ui/nll/issue-54382-use-span-of-tail-of-block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -5,6 +5,7 @@ fn main() {\n             let _thing2 = D(\"thing2\");\n             side_effects();\n             D(\"other\").next(&_thing1)\n+//~^ ERROR does not live long enough\n         }\n     }\n "}, {"sha": "8d23891e1ba79c2676afeda78d3c6f037cb3b001", "filename": "src/test/ui/nll/issue-54382-use-span-of-tail-of-block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `_thing1` does not live long enough\n    |\n LL |             D(\"other\").next(&_thing1)\n    |                              ^^^^^^^ borrowed value does not live long enough\n-LL |         }\n+...\n LL |     }\n    |     - `_thing1` dropped here while still borrowed\n LL | "}, {"sha": "58239fe6e888d806aa887fd89a5641f2af6661d4", "filename": "src/test/ui/nll/issue-54556-niconii.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `counter` does not live long enough\n   --> $DIR/issue-54556-niconii.rs:22:20\n    |\n-LL |     if let Ok(_) = counter.lock() { }\n+LL |     if let Ok(_) = counter.lock() { } //~ ERROR does not live long enough\n    |                    ^^^^^^^-------\n    |                    |\n    |                    borrowed value does not live long enough"}, {"sha": "cae389e8ccb52966cdee6277ce964b94026afef0", "filename": "src/test/ui/nll/issue-54556-niconii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -19,7 +19,7 @@ impl Mutex {\n fn main() {\n     let counter = Mutex;\n \n-    if let Ok(_) = counter.lock() { }\n+    if let Ok(_) = counter.lock() { } //~ ERROR does not live long enough\n \n     // With this code as written, the dynamic semantics here implies\n     // that `Mutex::drop` for `counter` runs *before*"}, {"sha": "03a7b94d181bac42a20f0735c1bbb07269cd61f8", "filename": "src/test/ui/nll/issue-54556-niconii.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `counter` does not live long enough\n   --> $DIR/issue-54556-niconii.rs:22:20\n    |\n-LL |     if let Ok(_) = counter.lock() { }\n+LL |     if let Ok(_) = counter.lock() { } //~ ERROR does not live long enough\n    |                    ^^^^^^^ borrowed value does not live long enough\n ...\n LL | }"}, {"sha": "b58454427af84af17bc83be63c2b241868ba7a2f", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `stmt` does not live long enough\n   --> $DIR/issue-54556-stephaneyfx.rs:27:21\n    |\n-LL |     let rows = Rows(&stmt);\n+LL |     let rows = Rows(&stmt); //~ ERROR does not live long enough\n    |                     ^^^^^ borrowed value does not live long enough\n LL |     rows.map(|row| row).next()\n    |     ------------------- a temporary with access to the borrow is created here ..."}, {"sha": "b758228e49cfc4ff0b0922cb421a6ae324438a07", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -24,7 +24,7 @@ impl<'stmt> Iterator for Rows<'stmt> {\n \n fn get_names() -> Option<String> {\n     let stmt = Statement;\n-    let rows = Rows(&stmt);\n+    let rows = Rows(&stmt); //~ ERROR does not live long enough\n     rows.map(|row| row).next()\n     // let x = rows.map(|row| row).next();\n     // x"}, {"sha": "bf3285a73c7c530d6f97805fe7345e842f58a459", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `stmt` does not live long enough\n   --> $DIR/issue-54556-stephaneyfx.rs:27:22\n    |\n-LL |     let rows = Rows(&stmt);\n+LL |     let rows = Rows(&stmt); //~ ERROR does not live long enough\n    |                      ^^^^ borrowed value does not live long enough\n ...\n LL | }"}, {"sha": "1bc43017bc67533ff54d5410da9101bef4c2ee3b", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `_thing1` does not live long enough\n   --> $DIR/issue-54556-temps-in-tail-diagnostic.rs:5:11\n    |\n-LL |         D(&_thing1).end()\n+LL |         D(&_thing1).end() //~ ERROR does not live long enough\n    |         --^^^^^^^^-\n    |         | |\n    |         | borrowed value does not live long enough"}, {"sha": "2935caaf25cc1d7177470de484fbdc72e7208568", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     {\n         let mut _thing1 = D(Box::new(\"thing1\"));\n         // D(\"other\").next(&_thing1).end()\n-        D(&_thing1).end()\n+        D(&_thing1).end() //~ ERROR does not live long enough\n     }\n \n     ;"}, {"sha": "ca636e76132653c4facaf27248c1a99db3af36cb", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `_thing1` does not live long enough\n   --> $DIR/issue-54556-temps-in-tail-diagnostic.rs:5:12\n    |\n-LL |         D(&_thing1).end()\n+LL |         D(&_thing1).end() //~ ERROR does not live long enough\n    |            ^^^^^^^ borrowed value does not live long enough\n LL |     }\n    |     - `_thing1` dropped here while still borrowed"}, {"sha": "52d0870b78f95f4625c8b22676fa377c89ab4c1f", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.nll.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -11,7 +11,7 @@ LL |     {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; //\n    = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:12:55\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:13:55\n    |\n LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; // suggest `;`\n    |                                                     --^^^^-       -    - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n@@ -23,7 +23,7 @@ LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; //\n    = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:14:55\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:16:55\n    |\n LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   // suggest `;`\n    |                                                     --^^^^-       -- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n@@ -35,7 +35,7 @@ LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   //\n    = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:16:55\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:19:55\n    |\n LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n    |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n@@ -47,7 +47,7 @@ LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; //\n    = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:18:55\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:22:55\n    |\n LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; // suggest `;`\n    |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n@@ -59,7 +59,7 @@ LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; //\n    = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:20:55\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:25:55\n    |\n LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // `let x = ...; x`\n    |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n@@ -71,7 +71,7 @@ LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; //\n    = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:24:55\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:30:55\n    |\n LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `let x = ...; x`\n    |                                                     --^^^^-       - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n@@ -83,7 +83,7 @@ LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `l\n    = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:30:55\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:37:55\n    |\n LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  // suggest `;`\n    |                                                     --^^^^-          -\n@@ -96,7 +96,7 @@ LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  //\n    = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:32:55\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:40:55\n    |\n LL | fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   // `let x = ...; x`\n    |                                                     --^^^^-         -"}, {"sha": "0d96767a05d035f109e171785d0698eb3a682d2c", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -8,29 +8,37 @@\n \n fn main() {\n     {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+//~^ ERROR does not live long enough\n \n     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; // suggest `;`\n+//~^ ERROR does not live long enough\n \n     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   // suggest `;`\n+//~^ ERROR does not live long enough\n \n     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+//~^ ERROR does not live long enough\n \n     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; // suggest `;`\n+//~^ ERROR does not live long enough\n \n     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // `let x = ...; x`\n+//~^ ERROR does not live long enough\n     let _x =     { let mut _t1 = D(Box::new(\"t1\")); let x = D(&_t1).end(); x } ; // no error\n \n     let mut _y;\n     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `let x = ...; x`\n+//~^ ERROR does not live long enough\n     _y =         { let mut _t1 = D(Box::new(\"t1\")); let x = D(&_t1).end(); x } ; // no error\n }\n \n fn f_param_ref(_t1: D<Box<&'static str>>) {         D(&_t1).unit()   }  // no error\n \n fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  // suggest `;`\n+//~^ ERROR does not live long enough\n \n fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   // `let x = ...; x`\n-\n+//~^ ERROR does not live long enough\n \n #[derive(Debug)]\n struct D<T: std::fmt::Debug>(T);"}, {"sha": "e9e4e51136d0a98eec6fd9c5af171fd9646cfc3a", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -8,7 +8,7 @@ LL |     {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; //\n    |                                                        borrowed value does not live long enough\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:12:56\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:13:56\n    |\n LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; // suggest `;`\n    |                                                        ^^^        -    - borrowed value needs to live until here\n@@ -17,7 +17,7 @@ LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; //\n    |                                                        borrowed value does not live long enough\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:14:56\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:16:56\n    |\n LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   // suggest `;`\n    |                                                        ^^^        -- borrowed value needs to live until here\n@@ -26,7 +26,7 @@ LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   //\n    |                                                        borrowed value does not live long enough\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:16:56\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:19:56\n    |\n LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n    |                                                        ^^^           - - borrowed value needs to live until here\n@@ -35,7 +35,7 @@ LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; //\n    |                                                        borrowed value does not live long enough\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:18:56\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:22:56\n    |\n LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; // suggest `;`\n    |                                                        ^^^           - - borrowed value needs to live until here\n@@ -44,7 +44,7 @@ LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; //\n    |                                                        borrowed value does not live long enough\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:20:56\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:25:56\n    |\n LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // `let x = ...; x`\n    |                                                        ^^^           - - borrowed value needs to live until here\n@@ -53,7 +53,7 @@ LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; //\n    |                                                        borrowed value does not live long enough\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:24:56\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:30:56\n    |\n LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `let x = ...; x`\n    |                                                        ^^^        - - borrowed value needs to live until here\n@@ -62,7 +62,7 @@ LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `l\n    |                                                        borrowed value does not live long enough\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:30:56\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:37:56\n    |\n LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  // suggest `;`\n    |                                                        ^^^           - `_t1` dropped here while still borrowed\n@@ -72,7 +72,7 @@ LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  //\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `_t1` does not live long enough\n-  --> $DIR/issue-54556-used-vs-unused-tails.rs:32:56\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:40:56\n    |\n LL | fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   // `let x = ...; x`\n    |                                                        ^^^          - `_t1` dropped here while still borrowed"}, {"sha": "e3968640cdd8ff63a8bd42e4557898ecb91148c2", "filename": "src/test/ui/nll/issue-55394.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -18,7 +18,7 @@ struct Foo<'s> {\n \n impl Foo<'_> {\n     fn new(bar: &mut Bar) -> Self {\n-        Foo { bar }\n+        Foo { bar } //~ ERROR unsatisfied lifetime constraints\n     }\n }\n "}, {"sha": "a194e0860546eab796ce991108f53f9846871577", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -5,7 +5,7 @@ LL |     fn new(bar: &mut Bar) -> Self {\n    |                 -            ---- return type is Foo<'2>\n    |                 |\n    |                 let's call the lifetime of this reference `'1`\n-LL |         Foo { bar }\n+LL |         Foo { bar } //~ ERROR unsatisfied lifetime constraints\n    |         ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n \n error: aborting due to previous error"}, {"sha": "ffa1171c2b73fe57c475c79fcc957513aed91136", "filename": "src/test/ui/nll/move-subpaths-moves-root.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -13,5 +13,5 @@\n fn main() {\n     let x = (vec![1, 2, 3], );\n     drop(x.0);\n-    drop(x);\n+    drop(x); //~ ERROR use of moved value\n }"}, {"sha": "e9c1e7b853d44b6ad1dc85784a674ea0ffcefd6c", "filename": "src/test/ui/nll/move-subpaths-moves-root.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `x`\n    |\n LL |     drop(x.0);\n    |          --- value moved here\n-LL |     drop(x);\n+LL |     drop(x); //~ ERROR use of moved value\n    |          ^ value used here after move\n    |\n    = note: move occurs because `x.0` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait"}, {"sha": "d29f8f8af208cd42ab753a654f2236da1b2a7787", "filename": "src/test/ui/nll/relate_tys/universe-violation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -12,6 +12,6 @@ fn make_it() -> fn(&'static u32) -> &'static u32 {\n \n fn main() {\n     let a: fn(_) -> _ = make_it();\n-    let b: fn(&u32) -> &u32 = a;\n+    let b: fn(&u32) -> &u32 = a; //~ ERROR higher-ranked subtype error\n     drop(a);\n }"}, {"sha": "0a2e0ed7b2db23bbaebba5551baa13d264f74fc8", "filename": "src/test/ui/nll/relate_tys/universe-violation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Funiverse-violation.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error: higher-ranked subtype error\n   --> $DIR/universe-violation.rs:15:31\n    |\n-LL |     let b: fn(&u32) -> &u32 = a;\n+LL |     let b: fn(&u32) -> &u32 = a; //~ ERROR higher-ranked subtype error\n    |                               ^\n \n error: aborting due to previous error"}, {"sha": "2fd598997779543da13d10754755e7745d643c5c", "filename": "src/test/ui/nll/user-annotations/cast_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -13,5 +13,5 @@\n \n fn main() {\n     let x = 22_u32;\n-    let y: &u32 = (&x) as &'static u32;\n+    let y: &u32 = (&x) as &'static u32; //~ ERROR `x` does not live long enough\n }"}, {"sha": "908d03b5dd93f2345f9ec4aca9ea864ef18c7f3b", "filename": "src/test/ui/nll/user-annotations/cast_static_lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fcast_static_lifetime.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/cast_static_lifetime.rs:16:19\n    |\n-LL |     let y: &u32 = (&x) as &'static u32;\n+LL |     let y: &u32 = (&x) as &'static u32; //~ ERROR `x` does not live long enough\n    |                   ^^^^----------------\n    |                   |\n    |                   borrowed value does not live long enough"}, {"sha": "042ad028575bbfdc5fa76d077227ca06cc59a48b", "filename": "src/test/ui/nll/user-annotations/issue-54124.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,8 @@\n #![feature(nll)]\n \n fn test<'a>() {\n-    let _:fn(&()) = |_:&'a ()| {};\n+    let _:fn(&()) = |_:&'a ()| {}; //~ ERROR unsatisfied lifetime constraints\n+    //~^ ERROR unsatisfied lifetime constraints\n }\n \n fn main() {"}, {"sha": "5b5afaee8df711244cfac3573314261886dbf943", "filename": "src/test/ui/nll/user-annotations/issue-54124.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,7 +3,7 @@ error: unsatisfied lifetime constraints\n    |\n LL | fn test<'a>() {\n    |         -- lifetime `'a` defined here\n-LL |     let _:fn(&()) = |_:&'a ()| {};\n+LL |     let _:fn(&()) = |_:&'a ()| {}; //~ ERROR unsatisfied lifetime constraints\n    |                      ^ - let's call the lifetime of this reference `'1`\n    |                      |\n    |                      requires that `'1` must outlive `'a`\n@@ -13,7 +13,7 @@ error: unsatisfied lifetime constraints\n    |\n LL | fn test<'a>() {\n    |         -- lifetime `'a` defined here\n-LL |     let _:fn(&()) = |_:&'a ()| {};\n+LL |     let _:fn(&()) = |_:&'a ()| {}; //~ ERROR unsatisfied lifetime constraints\n    |                      ^ requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors"}, {"sha": "441a0d823643cf35947cf6b3f79bd065a2d3604a", "filename": "src/test/ui/panic-handler/panic-handler-wrong-location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -13,6 +13,6 @@\n #![no_std]\n #![no_main]\n \n-#[panic_handler]\n+#[panic_handler] //~ ERROR `panic_impl` language item must be applied to a function\n #[no_mangle]\n static X: u32 = 42;"}, {"sha": "513c9914362242e5f252085815aafe66686b66bb", "filename": "src/test/ui/panic-handler/panic-handler-wrong-location.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-wrong-location.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0718]: `panic_impl` language item must be applied to a function\n   --> $DIR/panic-handler-wrong-location.rs:16:1\n    |\n-LL | #[panic_handler]\n+LL | #[panic_handler] //~ ERROR `panic_impl` language item must be applied to a function\n    | ^^^^^^^^^^^^^^^^ attribute should be applied to a function, not a static item\n \n error: `#[panic_handler]` function required, but not found"}, {"sha": "70088631db66d38672ca6c1cd3900062c4161ac7", "filename": "src/test/ui/parser/if-in-in.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Z parse-only\n \n fn main() {\n-    for i in in 1..2 {\n+    for i in in 1..2 { //~ ERROR expected iterable, found keyword `in`\n         println!(\"{}\", i);\n     }\n }"}, {"sha": "d741c70e58028cbb572bfd277d166ee1423c432b", "filename": "src/test/ui/parser/if-in-in.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error: expected iterable, found keyword `in`\n   --> $DIR/if-in-in.rs:4:14\n    |\n-LL |     for i in in 1..2 {\n+LL |     for i in in 1..2 { //~ ERROR expected iterable, found keyword `in`\n    |           ---^^\n    |           |\n    |           help: remove the duplicated `in`"}, {"sha": "64f675ecc1c4d1f3579e1eaff60cdc52ab3341cc", "filename": "src/test/ui/proc-macro/span-preservation.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,3 +1,4 @@\n+//~ ERROR mismatched types\n // aux-build:span-preservation.rs\n \n // For each of these, we should get the appropriate type mismatch error message,\n@@ -9,13 +10,13 @@ use foo::foo;\n \n #[foo]\n fn a() {\n-    let x: usize = \"hello\";;;;;\n+    let x: usize = \"hello\";;;;; //~ ERROR mismatched types\n }\n \n #[foo]\n fn b(x: Option<isize>) -> usize {\n     match x {\n-        Some(x) => { return x },\n+        Some(x) => { return x }, //~ ERROR mismatched types\n         None => 10\n     }\n }\n@@ -31,8 +32,8 @@ fn c() {\n         b: usize\n     }\n \n-    let x = Foo { a: 10isize };\n-    let y = Foo { a: 10, b: 10isize };\n+    let x = Foo { a: 10isize }; //~ ERROR mismatched types\n+    let y = Foo { a: 10, b: 10isize }; //~ ERROR has no field named `b`\n }\n \n // FIXME: This doesn't work at the moment. See the one below. The pretty-printer\n@@ -45,7 +46,7 @@ extern fn bar() {\n \n #[foo]\n extern \"C\" fn baz() {\n-    0\n+    0 //~ ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "64d0173cb9c224355ed3ff7461b8b2757ec09ab5", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -4,40 +4,40 @@ error[E0308]: mismatched types\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:12:20\n+  --> $DIR/span-preservation.rs:13:20\n    |\n-LL |     let x: usize = \"hello\";;;;;\n+LL |     let x: usize = \"hello\";;;;; //~ ERROR mismatched types\n    |                    ^^^^^^^ expected usize, found reference\n    |\n    = note: expected type `usize`\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:18:29\n+  --> $DIR/span-preservation.rs:19:29\n    |\n-LL |         Some(x) => { return x },\n+LL |         Some(x) => { return x }, //~ ERROR mismatched types\n    |                             ^ expected usize, found isize\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:34:22\n+  --> $DIR/span-preservation.rs:35:22\n    |\n-LL |     let x = Foo { a: 10isize };\n+LL |     let x = Foo { a: 10isize }; //~ ERROR mismatched types\n    |                      ^^^^^^^ expected usize, found isize\n \n error[E0560]: struct `c::Foo` has no field named `b`\n-  --> $DIR/span-preservation.rs:35:26\n+  --> $DIR/span-preservation.rs:36:26\n    |\n-LL |     let y = Foo { a: 10, b: 10isize };\n+LL |     let y = Foo { a: 10, b: 10isize }; //~ ERROR has no field named `b`\n    |                          ^ `c::Foo` does not have this field\n    |\n    = note: available fields are: `a`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:48:5\n+  --> $DIR/span-preservation.rs:49:5\n    |\n LL | extern \"C\" fn baz() {\n    |                     - possibly return type missing here?\n-LL |     0\n+LL |     0 //~ ERROR mismatched types\n    |     ^ expected (), found integral variable\n    |\n    = note: expected type `()`"}, {"sha": "bdd708197bc768a497ca5b939b5e34858fca96ef", "filename": "src/test/ui/regions/regions-struct-not-wf.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/431e0ab62f7730f11db693c23f48403e4c719f82/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431e0ab62f7730f11db693c23f48403e4c719f82/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.rs?ref=431e0ab62f7730f11db693c23f48403e4c719f82", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Various examples of structs whose fields are not well-formed.\n-\n-#![allow(dead_code)]\n-\n-trait Trait<'a, T> {\n-    type Out;\n-}\n-trait Trait1<'a, 'b, T> {\n-    type Out;\n-}\n-\n-impl<'a, T> Trait<'a, T> for usize {\n-    type Out = &'a T;\n-}\n-\n-struct RefOk<'a, T:'a> {\n-    field: &'a T\n-}\n-\n-impl<'a, T> Trait<'a, T> for u32 {\n-    type Out = RefOk<'a, T>;\n-}\n-\n-impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n-    type Out = &'a &'b T;\n-}\n-\n-fn main() { }"}, {"sha": "d8c8b6c3ccc86bc944f7853c11709d84a333cf12", "filename": "src/test/ui/regions/regions-struct-not-wf.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/431e0ab62f7730f11db693c23f48403e4c719f82/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/431e0ab62f7730f11db693c23f48403e4c719f82/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.stderr?ref=431e0ab62f7730f11db693c23f48403e4c719f82", "patch": "@@ -1,49 +0,0 @@\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-struct-not-wf.rs:23:5\n-   |\n-LL | impl<'a, T> Trait<'a, T> for usize {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     type Out = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a T` does not outlive the data it points at\n-  --> $DIR/regions-struct-not-wf.rs:23:5\n-   |\n-LL |     type Out = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-struct-not-wf.rs:31:5\n-   |\n-LL | impl<'a, T> Trait<'a, T> for u32 {\n-   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     type Out = RefOk<'a, T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-struct-not-wf.rs:31:5\n-   |\n-LL |     type Out = RefOk<'a, T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-struct-not-wf.rs:35:5\n-   |\n-LL |     type Out = &'a &'b T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the impl at 34:6\n-  --> $DIR/regions-struct-not-wf.rs:34:6\n-   |\n-LL | impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n-   |      ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 34:10\n-  --> $DIR/regions-struct-not-wf.rs:34:10\n-   |\n-LL | impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n-   |          ^^\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0309, E0491.\n-For more information about an error, try `rustc --explain E0309`."}, {"sha": "600dd16ae3b0b8947c21cdbb9d76091313772529", "filename": "src/test/ui/resolve/issue-22692.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let _ = String.new();\n+    let _ = String.new(); //~ ERROR expected value, found struct `String`\n }"}, {"sha": "b964d3d6781befd9c77ce2ca774624915d635ffb", "filename": "src/test/ui/resolve/issue-22692.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0423]: expected value, found struct `String`\n   --> $DIR/issue-22692.rs:12:13\n    |\n-LL |     let _ = String.new();\n+LL |     let _ = String.new(); //~ ERROR expected value, found struct `String`\n    |             ^^^^^^----\n    |             |\n    |             help: use `::` to access an associated function: `String::new`"}, {"sha": "60949a6e59886baba137a7315a5df83aa05bf96d", "filename": "src/test/ui/resolve/issue-54379.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -15,7 +15,9 @@ fn main() {\n     let thing = MyStruct { s1: None };\n \n     match thing {\n-        MyStruct { .., Some(_) } => {},\n+        MyStruct { .., Some(_) } => {}, //~ ERROR pattern does not mention field `s1`\n+        //~^ ERROR expected `,`\n+        //~| ERROR expected `}`, found `,`\n         _ => {}\n     }\n }"}, {"sha": "49612a41ad33128099f4ea819c2aeb8f5c468725", "filename": "src/test/ui/resolve/issue-54379.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-54379.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error: expected `}`, found `,`\n   --> $DIR/issue-54379.rs:18:22\n    |\n-LL |         MyStruct { .., Some(_) } => {},\n+LL |         MyStruct { .., Some(_) } => {}, //~ ERROR pattern does not mention field `s1`\n    |                    --^\n    |                    | |\n    |                    | expected `}`\n@@ -10,13 +10,13 @@ LL |         MyStruct { .., Some(_) } => {},\n error: expected `,`\n   --> $DIR/issue-54379.rs:18:24\n    |\n-LL |         MyStruct { .., Some(_) } => {},\n+LL |         MyStruct { .., Some(_) } => {}, //~ ERROR pattern does not mention field `s1`\n    |                        ^^^^\n \n error[E0027]: pattern does not mention field `s1`\n   --> $DIR/issue-54379.rs:18:9\n    |\n-LL |         MyStruct { .., Some(_) } => {},\n+LL |         MyStruct { .., Some(_) } => {}, //~ ERROR pattern does not mention field `s1`\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ missing field `s1`\n \n error: aborting due to 3 previous errors"}, {"sha": "e8bb584f0bb603250c8b9cd6697205e5ff7d3c96", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -20,19 +20,19 @@ trait Trait1<'a, 'b, T> {\n }\n \n impl<'a, T> Trait<'a, T> for usize {\n-    type Out = &'a T;\n+    type Out = &'a T; //~ ERROR `T` may not live long enough\n }\n \n struct RefOk<'a, T:'a> {\n     field: &'a T\n }\n \n impl<'a, T> Trait<'a, T> for u32 {\n-    type Out = RefOk<'a, T>;\n+    type Out = RefOk<'a, T>; //~ ERROR `T` may not live long enough\n }\n \n impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n-    type Out = &'a &'b T;\n+    type Out = &'a &'b T; //~ ERROR reference has a longer lifetime than the data\n }\n \n fn main() { }"}, {"sha": "35a4f0cc725730224c5fea1029ab419a1d6e654c", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,33 +3,33 @@ error[E0309]: the parameter type `T` may not live long enough\n    |\n LL | impl<'a, T> Trait<'a, T> for usize {\n    |          - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     type Out = &'a T;\n+LL |     type Out = &'a T; //~ ERROR `T` may not live long enough\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'a T` does not outlive the data it points at\n   --> $DIR/regions-struct-not-wf.rs:23:5\n    |\n-LL |     type Out = &'a T;\n+LL |     type Out = &'a T; //~ ERROR `T` may not live long enough\n    |     ^^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-struct-not-wf.rs:31:5\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n    |          - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     type Out = RefOk<'a, T>;\n+LL |     type Out = RefOk<'a, T>; //~ ERROR `T` may not live long enough\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/regions-struct-not-wf.rs:31:5\n    |\n-LL |     type Out = RefOk<'a, T>;\n+LL |     type Out = RefOk<'a, T>; //~ ERROR `T` may not live long enough\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-struct-not-wf.rs:35:5\n    |\n-LL |     type Out = &'a &'b T;\n+LL |     type Out = &'a &'b T; //~ ERROR reference has a longer lifetime than the data\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime 'a as defined on the impl at 34:6"}, {"sha": "0b3f59fd7e452fb569dc4db4276fe6554550dbc0", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _ = dbg!(a);\n    |             ------- value moved here\n-LL |     let _ = dbg!(a);\n+LL |     let _ = dbg!(a); //~ ERROR use of moved value\n    |                  ^ value used here after move\n    |\n    = note: move occurs because `a` has type `NoCopy`, which does not implement the `Copy` trait"}, {"sha": "e6ddb3d91bfef461e0ddb4578500f66befd9d8fa", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -6,5 +6,6 @@ struct NoCopy(usize);\n fn main() {\n     let a = NoCopy(0);\n     let _ = dbg!(a);\n-    let _ = dbg!(a);\n+    let _ = dbg!(a); //~ ERROR use of moved value\n+    //~^ ERROR use of moved value\n }"}, {"sha": "5f3a6b414e048fd257433ced2f3f629129f84ada", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _ = dbg!(a);\n    |             ------- value moved here\n-LL |     let _ = dbg!(a);\n+LL |     let _ = dbg!(a); //~ ERROR use of moved value\n    |                  ^ value used here after move\n    |\n    = note: move occurs because `a` has type `NoCopy`, which does not implement the `Copy` trait\n@@ -14,7 +14,7 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _ = dbg!(a);\n    |             ------- value moved here\n-LL |     let _ = dbg!(a);\n+LL |     let _ = dbg!(a); //~ ERROR use of moved value\n    |             ^^^^^^^ value used here after move\n    |\n    = note: move occurs because `a` has type `NoCopy`, which does not implement the `Copy` trait"}, {"sha": "bdde484c252179a3dcd247fb9489c30d79ca1948", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,5 +3,5 @@\n struct NotDebug;\n \n fn main() {\n-    let _: NotDebug = dbg!(NotDebug);\n+    let _: NotDebug = dbg!(NotDebug); //~ ERROR `NotDebug` doesn't implement `std::fmt::Debug`\n }"}, {"sha": "bd41f7b3405303f62ee6dbfe4fec2c00ede8083e", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `NotDebug` doesn't implement `std::fmt::Debug`\n   --> $DIR/dbg-macro-requires-debug.rs:6:23\n    |\n-LL |     let _: NotDebug = dbg!(NotDebug);\n+LL |     let _: NotDebug = dbg!(NotDebug); //~ ERROR `NotDebug` doesn't implement `std::fmt::Debug`\n    |                       ^^^^^^^^^^^^^^ `NotDebug` cannot be formatted using `{:?}`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `NotDebug`"}, {"sha": "0f67956a6d565fb05aa33b692ea179d98bf0195d", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generic_associated_types)]\n+#![feature(generic_associated_types)] //~ WARN `generic_associated_types` is incomplete\n \n // Checking the interaction with this other feature\n #![feature(associated_type_defaults)]"}, {"sha": "8801ce3e3a0e40d7185cc61352092c10b3b07848", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,6 +1,6 @@\n warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n   --> $DIR/generic-associated-types-where.rs:11:12\n    |\n-LL | #![feature(generic_associated_types)]\n+LL | #![feature(generic_associated_types)] //~ WARN `generic_associated_types` is incomplete\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "89fed56303933b66dedc28ac30ca395fe085fee5", "filename": "src/test/ui/rust-2018/local-path-suggestions-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2015.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -31,6 +31,6 @@ mod baz {\n \n use foo::Bar;\n \n-use foobar::Baz;\n+use foobar::Baz; //~ ERROR unresolved import `foobar`\n \n fn main() { }"}, {"sha": "3f56b988a4a88c24d6eab13c5537067d65d1e2b9", "filename": "src/test/ui/rust-2018/local-path-suggestions-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2015.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0432]: unresolved import `foobar`\n   --> $DIR/local-path-suggestions-2015.rs:34:5\n    |\n-LL | use foobar::Baz;\n+LL | use foobar::Baz; //~ ERROR unresolved import `foobar`\n    |     ^^^^^^ did you mean `aux_baz::foobar`?\n \n error: aborting due to previous error"}, {"sha": "9e5e6980406ad9b6f83a6269699b4cafe190ad74", "filename": "src/test/ui/rust-2018/trait-import-suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -29,13 +29,13 @@ mod foo {\n \n     fn in_foo() {\n         let x: u32 = 22;\n-        x.foobar();\n+        x.foobar(); //~ ERROR no method named `foobar`\n     }\n }\n \n fn main() {\n     let x: u32 = 22;\n-    x.bar();\n-    x.baz();\n-    let y = u32::from_str(\"33\");\n+    x.bar(); //~ ERROR no method named `bar`\n+    x.baz(); //~ ERROR no method named `baz`\n+    let y = u32::from_str(\"33\"); //~ ERROR no function or associated item named `from_str`\n }"}, {"sha": "d5d996e27eeb4b03b5d6b8d65a2a278aabc00abd", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `foobar` found for type `u32` in the current scope\n   --> $DIR/trait-import-suggestions.rs:32:11\n    |\n-LL |         x.foobar();\n+LL |         x.foobar(); //~ ERROR no method named `foobar`\n    |           ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -11,7 +11,7 @@ LL |         x.foobar();\n error[E0599]: no method named `bar` found for type `u32` in the current scope\n   --> $DIR/trait-import-suggestions.rs:38:7\n    |\n-LL |     x.bar();\n+LL |     x.bar(); //~ ERROR no method named `bar`\n    |       ^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n@@ -23,13 +23,13 @@ LL | use crate::foo::Bar;\n error[E0599]: no method named `baz` found for type `u32` in the current scope\n   --> $DIR/trait-import-suggestions.rs:39:7\n    |\n-LL |     x.baz();\n+LL |     x.baz(); //~ ERROR no method named `baz`\n    |       ^^^\n \n error[E0599]: no function or associated item named `from_str` found for type `u32` in the current scope\n   --> $DIR/trait-import-suggestions.rs:40:13\n    |\n-LL |     let y = u32::from_str(\"33\");\n+LL |     let y = u32::from_str(\"33\"); //~ ERROR no function or associated item named `from_str`\n    |             ^^^^^^^^^^^^^ function or associated item not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope"}, {"sha": "6b26f1214368ca8f104ed7e2db9dbbaa965fcc7d", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,18 +1,18 @@\n-struct A<T, 'a> {\n+struct A<T, 'a> { //~ ERROR lifetime parameters must be declared\n     t: &'a T,\n }\n \n-struct B<T, 'a, U> {\n+struct B<T, 'a, U> { //~ ERROR lifetime parameters must be declared\n     t: &'a T,\n     u: U,\n }\n \n-struct C<T, U, 'a> {\n+struct C<T, U, 'a> { //~ ERROR lifetime parameters must be declared\n     t: &'a T,\n     u: U,\n }\n \n-struct D<T, U, 'a, 'b, V, 'c> {\n+struct D<T, U, 'a, 'b, V, 'c> { //~ ERROR lifetime parameters must be declared\n     t: &'a T,\n     u: &'b U,\n     v: &'c V,"}, {"sha": "72a2cbe6bf6de07798cdacc79e6b48c3f4907ca5", "filename": "src/test/ui/suggestions/suggest-move-lifetimes.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-lifetimes.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,41 +1,41 @@\n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:1:13\n    |\n-LL | struct A<T, 'a> {\n+LL | struct A<T, 'a> { //~ ERROR lifetime parameters must be declared\n    |             ^^\n help: move the lifetime parameter prior to the first type parameter\n    |\n-LL | struct A<'a, T> {\n+LL | struct A<'a, T> { //~ ERROR lifetime parameters must be declared\n    |          ^^^ --\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:5:13\n    |\n-LL | struct B<T, 'a, U> {\n+LL | struct B<T, 'a, U> { //~ ERROR lifetime parameters must be declared\n    |             ^^\n help: move the lifetime parameter prior to the first type parameter\n    |\n-LL | struct B<'a, T, U> {\n+LL | struct B<'a, T, U> { //~ ERROR lifetime parameters must be declared\n    |          ^^^   --\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:10:16\n    |\n-LL | struct C<T, U, 'a> {\n+LL | struct C<T, U, 'a> { //~ ERROR lifetime parameters must be declared\n    |                ^^\n help: move the lifetime parameter prior to the first type parameter\n    |\n-LL | struct C<'a, T, U> {\n+LL | struct C<'a, T, U> { //~ ERROR lifetime parameters must be declared\n    |          ^^^    --\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/suggest-move-lifetimes.rs:15:16\n    |\n-LL | struct D<T, U, 'a, 'b, V, 'c> {\n+LL | struct D<T, U, 'a, 'b, V, 'c> { //~ ERROR lifetime parameters must be declared\n    |                ^^  ^^     ^^\n help: move the lifetime parameter prior to the first type parameter\n    |\n-LL | struct D<'a, 'b, 'c, T, U, V> {\n+LL | struct D<'a, 'b, 'c, T, U, V> { //~ ERROR lifetime parameters must be declared\n    |          ^^^ ^^^ ^^^      ---\n \n error: aborting due to 4 previous errors"}, {"sha": "6d6e280d9652fbee606359ecfa8888710d7adfdc", "filename": "src/test/ui/suggestions/suggest-variants.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -9,7 +9,7 @@ struct S {\n }\n \n fn main() {\n-    println!(\"My shape is {:?}\", Shape::Squareee { size: 5});\n-    println!(\"My shape is {:?}\", Shape::Circl { size: 5});\n-    println!(\"My shape is {:?}\", Shape::Rombus{ size: 5});\n+    println!(\"My shape is {:?}\", Shape::Squareee { size: 5});  //~ ERROR no variant `Squareee`\n+    println!(\"My shape is {:?}\", Shape::Circl { size: 5}); //~ ERROR no variant `Circl`\n+    println!(\"My shape is {:?}\", Shape::Rombus{ size: 5}); //~ ERROR no variant `Rombus`\n }"}, {"sha": "36abda2a89bb8ff958ab1d2700dee42367a7ab8c", "filename": "src/test/ui/suggestions/suggest-variants.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-variants.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,19 +1,19 @@\n error: no variant `Squareee` on enum `Shape`\n   --> $DIR/suggest-variants.rs:12:34\n    |\n-LL |     println!(\"My shape is {:?}\", Shape::Squareee { size: 5});\n+LL |     println!(\"My shape is {:?}\", Shape::Squareee { size: 5});  //~ ERROR no variant `Squareee`\n    |                                  ^^^^^^^^^^^^^^^ help: did you mean: `Shape::Square`\n \n error: no variant `Circl` on enum `Shape`\n   --> $DIR/suggest-variants.rs:13:34\n    |\n-LL |     println!(\"My shape is {:?}\", Shape::Circl { size: 5});\n+LL |     println!(\"My shape is {:?}\", Shape::Circl { size: 5}); //~ ERROR no variant `Circl`\n    |                                  ^^^^^^^^^^^^ help: did you mean: `Shape::Circle`\n \n error: no variant `Rombus` on enum `Shape`\n   --> $DIR/suggest-variants.rs:14:34\n    |\n-LL |     println!(\"My shape is {:?}\", Shape::Rombus{ size: 5});\n+LL |     println!(\"My shape is {:?}\", Shape::Rombus{ size: 5}); //~ ERROR no variant `Rombus`\n    |                                  ^^^^^^^^^^^^^ unknown variant\n \n error: aborting due to 3 previous errors"}, {"sha": "a3cc53e69e20e87d4d2aec03405d4bfa97c18280", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,6 +3,11 @@ pub trait T<X, Y> {\n     type B;\n     type C;\n }\n- pub struct Foo { i: Box<T<usize, usize, usize, usize, B=usize>> }\n+pub struct Foo {\n+    i: Box<T<usize, usize, usize, usize, B=usize>>,\n+    //~^ ERROR must be specified\n+    //~| ERROR wrong number of type arguments\n+}\n+\n \n- fn main() {}\n+fn main() {}"}, {"sha": "16e9fa90aa1a6ebe860a363191d44e8c876d62e2", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,29 +1,29 @@\n error[E0107]: wrong number of type arguments: expected 2, found 4\n-  --> $DIR/use-type-argument-instead-of-assoc-type.rs:6:42\n+  --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:28\n    |\n-LL |  pub struct Foo { i: Box<T<usize, usize, usize, usize, B=usize>> }\n-   |                                          ^^^^^  ^^^^^ unexpected type argument\n-   |                                          |\n-   |                                          unexpected type argument\n+LL |     i: Box<T<usize, usize, usize, usize, B=usize>>,\n+   |                            ^^^^^  ^^^^^ unexpected type argument\n+   |                            |\n+   |                            unexpected type argument\n \n error[E0191]: the value of the associated types `A` (from the trait `T`), `C` (from the trait `T`) must be specified\n-  --> $DIR/use-type-argument-instead-of-assoc-type.rs:6:26\n+  --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:12\n    |\n LL |     type A;\n    |     ------- `A` defined here\n LL |     type B;\n LL |     type C;\n    |     ------- `C` defined here\n-LL | }\n-LL |  pub struct Foo { i: Box<T<usize, usize, usize, usize, B=usize>> }\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                          |\n-   |                          associated type `A` must be specified\n-   |                          associated type `C` must be specified\n+...\n+LL |     i: Box<T<usize, usize, usize, usize, B=usize>>,\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            |\n+   |            associated type `A` must be specified\n+   |            associated type `C` must be specified\n help: if you meant to specify the associated types, write\n    |\n-LL |  pub struct Foo { i: Box<T<usize, usize, A = usize, C = usize, B=usize>> }\n-   |                                          ^^^^^^^^^  ^^^^^^^^^\n+LL |     i: Box<T<usize, usize, A = usize, C = usize, B=usize>>,\n+   |                            ^^^^^^^^^  ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "802fdd077aa5ae9e1ac4e0c1eb9d96ec2b0d3439", "filename": "src/test/ui/traits/trait-alias-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -12,6 +12,6 @@\n \n trait DefaultAlias = Default;\n \n-impl DefaultAlias for () {}\n+impl DefaultAlias for () {} //~ ERROR expected trait, found trait alias\n \n fn main() {}"}, {"sha": "f94e4a40914bef8d47de658b9c3805b70dce71a0", "filename": "src/test/ui/traits/trait-alias-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-impl.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0404]: expected trait, found trait alias `DefaultAlias`\n   --> $DIR/trait-alias-impl.rs:15:6\n    |\n-LL | impl DefaultAlias for () {}\n+LL | impl DefaultAlias for () {} //~ ERROR expected trait, found trait alias\n    |      ^^^^^^^^^^^^ not a trait\n \n error: aborting due to previous error"}, {"sha": "4694135e78fb856307b5688f13fcba1c63a3c91c", "filename": "src/test/ui/traits/trait-alias-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -14,6 +14,6 @@ trait EqAlias = Eq;\n trait IteratorAlias = Iterator;\n \n fn main() {\n-    let _: &dyn EqAlias = &123;\n-    let _: &dyn IteratorAlias = &vec![123].into_iter();\n+    let _: &dyn EqAlias = &123; //~ ERROR `EqAlias` cannot be made into an object\n+    let _: &dyn IteratorAlias = &vec![123].into_iter(); //~ ERROR must be specified\n }"}, {"sha": "9d9c142802d6cd9b081cbe52aae0d48afbfdbdea", "filename": "src/test/ui/traits/trait-alias-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,15 +1,15 @@\n error[E0038]: the trait `EqAlias` cannot be made into an object\n   --> $DIR/trait-alias-object.rs:17:13\n    |\n-LL |     let _: &dyn EqAlias = &123;\n+LL |     let _: &dyn EqAlias = &123; //~ ERROR `EqAlias` cannot be made into an object\n    |             ^^^^^^^^^^^ the trait `EqAlias` cannot be made into an object\n    |\n    = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n error[E0191]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified\n   --> $DIR/trait-alias-object.rs:18:13\n    |\n-LL |     let _: &dyn IteratorAlias = &vec![123].into_iter();\n+LL |     let _: &dyn IteratorAlias = &vec![123].into_iter(); //~ ERROR must be specified\n    |             ^^^^^^^^^^^^^^^^^ associated type `Item` must be specified\n \n error: aborting due to 2 previous errors"}, {"sha": "59ac5a02da3127708dbcd276f64a4f79cba312ab", "filename": "src/test/ui/traits/trait-alias-wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -12,6 +12,6 @@\n \n trait Foo {}\n trait A<T: Foo> {}\n-trait B<T> = A<T>; // T cannot be unbounded\n+trait B<T> = A<T>; //~ ERROR `T: Foo` is not satisfied\n \n fn main() {}"}, {"sha": "cae571c4c61b1e9a55a801e9db8d6003f414bd86", "filename": "src/test/ui/traits/trait-alias-wf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-wf.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `T: Foo` is not satisfied\n   --> $DIR/trait-alias-wf.rs:15:1\n    |\n-LL | trait B<T> = A<T>; // T cannot be unbounded\n+LL | trait B<T> = A<T>; //~ ERROR `T: Foo` is not satisfied\n    | ^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `T`\n    |\n    = help: consider adding a `where T: Foo` bound"}, {"sha": "567cc7a3f5fa3b9fa7e897118a5fa23334bbcfc5", "filename": "src/test/ui/underscore-lifetime/underscore-outlives-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -4,5 +4,5 @@\n // #54902\n \n trait Foo<'a> {}\n-impl<'b: '_> Foo<'b> for i32 {}\n+impl<'b: '_> Foo<'b> for i32 {} //~ ERROR `'_` cannot be used here\n fn main() { }"}, {"sha": "e4ff653f3ad42b1f16a929da083758363ceb3be1", "filename": "src/test/ui/underscore-lifetime/underscore-outlives-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -1,7 +1,7 @@\n error[E0637]: `'_` cannot be used here\n   --> $DIR/underscore-outlives-bounds.rs:7:10\n    |\n-LL | impl<'b: '_> Foo<'b> for i32 {}\n+LL | impl<'b: '_> Foo<'b> for i32 {} //~ ERROR `'_` cannot be used here\n    |          ^^ `'_` is a reserved lifetime name\n \n error: aborting due to previous error"}, {"sha": "7c6fb8c9969985dfbf4577bda5cb50a73830c6f5", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -16,7 +16,7 @@ trait Trait<'a, T> {\n }\n \n impl<'a, T> Trait<'a, T> for usize {\n-    type Out = &'a fn(T);\n+    type Out = &'a fn(T); //~ ERROR `T` may not live long enough\n }\n \n struct Foo<'a,T> {\n@@ -26,7 +26,7 @@ struct Foo<'a,T> {\n trait Baz<T> { }\n \n impl<'a, T> Trait<'a, T> for u32 {\n-    type Out = &'a Baz<T>;\n+    type Out = &'a Baz<T>; //~ ERROR `T` may not live long enough\n }\n \n fn main() { }"}, {"sha": "0454215290cd98f45a69e2895716470aeadbb548", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -3,27 +3,27 @@ error[E0309]: the parameter type `T` may not live long enough\n    |\n LL | impl<'a, T> Trait<'a, T> for usize {\n    |          - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     type Out = &'a fn(T);\n+LL |     type Out = &'a fn(T); //~ ERROR `T` may not live long enough\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:5\n    |\n-LL |     type Out = &'a fn(T);\n+LL |     type Out = &'a fn(T); //~ ERROR `T` may not live long enough\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:29:5\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n    |          - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     type Out = &'a Baz<T>;\n+LL |     type Out = &'a Baz<T>; //~ ERROR `T` may not live long enough\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:29:5\n    |\n-LL |     type Out = &'a Baz<T>;\n+LL |     type Out = &'a Baz<T>; //~ ERROR `T` may not live long enough\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "c654230e2032f3190c8da2308a62e04fdad637e1", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906deae0790bd18681b937fe9a141a3c26cf1855/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=906deae0790bd18681b937fe9a141a3c26cf1855", "patch": "@@ -2781,12 +2781,14 @@ impl<'test> TestCx<'test> {\n                explicit, self.config.compare_mode, expected_errors, proc_res.status,\n                self.props.error_patterns);\n         if !explicit && self.config.compare_mode.is_none() {\n-            if !expected_errors.is_empty() && !proc_res.status.success() {\n-                // \"//~ERROR comments\"\n-                self.check_expected_errors(expected_errors, &proc_res);\n-            } else if !self.props.error_patterns.is_empty() && !proc_res.status.success() {\n-                // \"// error-pattern\" comments\n-                self.check_error_patterns(&proc_res.stderr, &proc_res);\n+            if !proc_res.status.success() {\n+                if !self.props.error_patterns.is_empty() {\n+                    // \"// error-pattern\" comments\n+                    self.check_error_patterns(&proc_res.stderr, &proc_res);\n+                } else {\n+                    // \"//~ERROR comments\"\n+                    self.check_expected_errors(expected_errors, &proc_res);\n+                }\n             }\n         }\n "}]}