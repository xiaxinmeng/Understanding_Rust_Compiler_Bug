{"sha": "a20e6bb1627f8669b334e673740f78e435cd0321", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMGU2YmIxNjI3Zjg2NjliMzM0ZTY3Mzc0MGY3OGU0MzVjZDAzMjE=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-03-10T02:29:46Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-03-10T02:29:46Z"}, "message": "Consider `doc(hidden)` for crate-local inlining", "tree": {"sha": "f3825fc32fd7bd26183e1ded8a50868668bf4e86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3825fc32fd7bd26183e1ded8a50868668bf4e86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20e6bb1627f8669b334e673740f78e435cd0321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20e6bb1627f8669b334e673740f78e435cd0321", "html_url": "https://github.com/rust-lang/rust/commit/a20e6bb1627f8669b334e673740f78e435cd0321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20e6bb1627f8669b334e673740f78e435cd0321/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7fca1e1f5d74bf88ffacaf339b28d8c73f8c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7fca1e1f5d74bf88ffacaf339b28d8c73f8c4f", "html_url": "https://github.com/rust-lang/rust/commit/ae7fca1e1f5d74bf88ffacaf339b28d8c73f8c4f"}], "stats": {"total": 69, "additions": 63, "deletions": 6}, "files": [{"sha": "4c03abac9e867b6f43203975eb10928a8332f558", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a20e6bb1627f8669b334e673740f78e435cd0321/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20e6bb1627f8669b334e673740f78e435cd0321/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=a20e6bb1627f8669b334e673740f78e435cd0321", "patch": "@@ -26,6 +26,7 @@ use rustc::middle::stability;\n use rustc_front::hir;\n \n use core;\n+use clean::{Clean, Attributes};\n use doctree::*;\n \n // looks to me like the first two of these are actually\n@@ -182,15 +183,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                        please_inline: bool) -> Option<hir::ViewPath_> {\n         match path {\n             hir::ViewPathSimple(dst, base) => {\n-                if self.resolve_id(id, Some(dst), false, om, please_inline) {\n+                if self.maybe_inline_local(id, Some(dst), false, om, please_inline) {\n                     None\n                 } else {\n                     Some(hir::ViewPathSimple(dst, base))\n                 }\n             }\n             hir::ViewPathList(p, paths) => {\n                 let mine = paths.into_iter().filter(|path| {\n-                    !self.resolve_id(path.node.id(), None, false, om,\n+                    !self.maybe_inline_local(path.node.id(), None, false, om,\n                                      please_inline)\n                 }).collect::<hir::HirVec<hir::PathListItem>>();\n \n@@ -201,9 +202,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            // these are feature gated anyway\n             hir::ViewPathGlob(base) => {\n-                if self.resolve_id(id, None, true, om, please_inline) {\n+                if self.maybe_inline_local(id, None, true, om, please_inline) {\n                     None\n                 } else {\n                     Some(hir::ViewPathGlob(base))\n@@ -213,8 +213,32 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     }\n \n-    fn resolve_id(&mut self, id: ast::NodeId, renamed: Option<ast::Name>,\n+    /// Tries to resolve the target of a `pub use` statement and inlines the\n+    /// target if it is defined locally and would not be documented otherwise,\n+    /// or when it is specifically requested with `please_inline`.\n+    /// (the latter is the case when the import is marked `doc(inline)`)\n+    ///\n+    /// Cross-crate inlining occurs later on during crate cleaning\n+    /// and follows different rules.\n+    ///\n+    /// Returns true if the target has been inlined.\n+    fn maybe_inline_local(&mut self, id: ast::NodeId, renamed: Option<ast::Name>,\n                   glob: bool, om: &mut Module, please_inline: bool) -> bool {\n+\n+        fn inherits_doc_hidden(cx: &core::DocContext, mut node: ast::NodeId) -> bool {\n+            while let Some(id) = cx.map.get_enclosing_scope(node) {\n+                node = id;\n+                let attrs = cx.map.attrs(node).clean(cx);\n+                if attrs.list_def(\"doc\").has_word(\"hidden\") {\n+                    return true;\n+                }\n+                if node == ast::CRATE_NODE_ID {\n+                    break;\n+                }\n+            }\n+            false\n+        }\n+\n         let tcx = match self.cx.tcx_opt() {\n             Some(tcx) => tcx,\n             None => return false\n@@ -226,9 +250,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let analysis = match self.analysis {\n             Some(analysis) => analysis, None => return false\n         };\n-        if !please_inline && analysis.access_levels.is_public(def) {\n+\n+        let is_private = !analysis.access_levels.is_public(def);\n+        let is_hidden = inherits_doc_hidden(self.cx, def_node_id);\n+\n+        // Only inline if requested or if the item would otherwise be stripped\n+        if !please_inline && !is_private && !is_hidden {\n             return false\n         }\n+\n         if !self.view_item_stack.insert(def_node_id) { return false }\n \n         let ret = match tcx.map.get(def_node_id) {"}, {"sha": "b38e104b7b4eebbfc0708ad81af247ffeed413e8", "filename": "src/test/rustdoc/inline_local/issue-28537.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a20e6bb1627f8669b334e673740f78e435cd0321/src%2Ftest%2Frustdoc%2Finline_local%2Fissue-28537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20e6bb1627f8669b334e673740f78e435cd0321/src%2Ftest%2Frustdoc%2Finline_local%2Fissue-28537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fissue-28537.rs?ref=a20e6bb1627f8669b334e673740f78e435cd0321", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[doc(hidden)]\n+pub mod foo {\n+    pub struct Foo;\n+}\n+\n+mod bar {\n+    pub use self::bar::Bar;\n+    mod bar {\n+        pub struct Bar;\n+    }\n+}\n+\n+// @has issue_28537/struct.Foo.html\n+pub use foo::Foo;\n+\n+// @has issue_28537/struct.Bar.html\n+pub use self::bar::Bar;"}]}