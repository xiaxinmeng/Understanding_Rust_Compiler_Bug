{"sha": "5912ca986c52041d01384393cbf2da10270738ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MTJjYTk4NmM1MjA0MWQwMTM4NDM5M2NiZjJkYTEwMjcwNzM4ZWU=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-04T14:06:05Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:39:58Z"}, "message": "move iter_nth, iter_nth_zero and iterator_step_by_zero to their own module", "tree": {"sha": "95d10fc90bdac41c1a645d5b91521d9ebbf7a597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d10fc90bdac41c1a645d5b91521d9ebbf7a597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5912ca986c52041d01384393cbf2da10270738ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5912ca986c52041d01384393cbf2da10270738ee", "html_url": "https://github.com/rust-lang/rust/commit/5912ca986c52041d01384393cbf2da10270738ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5912ca986c52041d01384393cbf2da10270738ee/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe099ba8d2f6f4d085e7480f020f9f87e6b39e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe099ba8d2f6f4d085e7480f020f9f87e6b39e8", "html_url": "https://github.com/rust-lang/rust/commit/3fe099ba8d2f6f4d085e7480f020f9f87e6b39e8"}], "stats": {"total": 158, "additions": 91, "deletions": 67}, "files": [{"sha": "c8adea9536b2dbf07ca9a434df08cbc1b19bf74b", "filename": "clippy_lints/src/methods/iter_nth.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5912ca986c52041d01384393cbf2da10270738ee/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5912ca986c52041d01384393cbf2da10270738ee/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs?ref=5912ca986c52041d01384393cbf2da10270738ee", "patch": "@@ -0,0 +1,38 @@\n+use crate::methods::derefs_to_slice;\n+use crate::methods::iter_nth_zero;\n+use crate::utils::{is_type_diagnostic_item, span_lint_and_help};\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n+\n+use super::ITER_NTH;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &hir::Expr<'_>,\n+    nth_and_iter_args: &[&'tcx [hir::Expr<'tcx>]],\n+    is_mut: bool,\n+) {\n+    let iter_args = nth_and_iter_args[1];\n+    let mut_str = if is_mut { \"_mut\" } else { \"\" };\n+    let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.typeck_results().expr_ty(&iter_args[0])).is_some() {\n+        \"slice\"\n+    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vec_type) {\n+        \"Vec\"\n+    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym!(vecdeque_type)) {\n+        \"VecDeque\"\n+    } else {\n+        let nth_args = nth_and_iter_args[0];\n+        iter_nth_zero::check(cx, expr, &nth_args);\n+        return; // caller is not a type that we want to lint\n+    };\n+\n+    span_lint_and_help(\n+        cx,\n+        ITER_NTH,\n+        expr.span,\n+        &format!(\"called `.iter{0}().nth()` on a {1}\", mut_str, caller_type),\n+        None,\n+        &format!(\"calling `.get{}()` is both faster and more readable\", mut_str),\n+    );\n+}"}, {"sha": "247192d81f3ec58f33340eedcecce5511655d8d4", "filename": "clippy_lints/src/methods/iter_nth_zero.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5912ca986c52041d01384393cbf2da10270738ee/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5912ca986c52041d01384393cbf2da10270738ee/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs?ref=5912ca986c52041d01384393cbf2da10270738ee", "patch": "@@ -0,0 +1,27 @@\n+use crate::consts::{constant, Constant};\n+use crate::utils::{match_trait_method, paths, snippet_with_applicability, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+\n+use super::ITER_NTH_ZERO;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, nth_args: &'tcx [hir::Expr<'_>]) {\n+    if_chain! {\n+        if match_trait_method(cx, expr, &paths::ITERATOR);\n+        if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), &nth_args[1]);\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                ITER_NTH_ZERO,\n+                expr.span,\n+                \"called `.nth(0)` on a `std::iter::Iterator`, when `.next()` is equivalent\",\n+                \"try calling `.next()` instead of `.nth(0)`\",\n+                format!(\"{}.next()\", snippet_with_applicability(cx, nth_args[0].span, \"..\", &mut applicability)),\n+                applicability,\n+            );\n+        }\n+    }\n+}"}, {"sha": "3e05d7f76b75aa2272f7b237a5b082d71543be62", "filename": "clippy_lints/src/methods/iterator_step_by_zero.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5912ca986c52041d01384393cbf2da10270738ee/clippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5912ca986c52041d01384393cbf2da10270738ee/clippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs?ref=5912ca986c52041d01384393cbf2da10270738ee", "patch": "@@ -0,0 +1,19 @@\n+use crate::consts::{constant, Constant};\n+use crate::utils::{match_trait_method, paths, span_lint};\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+\n+use super::ITERATOR_STEP_BY_ZERO;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, args: &'tcx [hir::Expr<'_>]) {\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), &args[1]) {\n+            span_lint(\n+                cx,\n+                ITERATOR_STEP_BY_ZERO,\n+                expr.span,\n+                \"`Iterator::step_by(0)` will panic at runtime\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "259d370550c844b58c0ea6661c48455c57ee60df", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 7, "deletions": 67, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5912ca986c52041d01384393cbf2da10270738ee/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5912ca986c52041d01384393cbf2da10270738ee/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5912ca986c52041d01384393cbf2da10270738ee", "patch": "@@ -11,6 +11,9 @@ mod inspect_for_each;\n mod iter_cloned_collect;\n mod iter_count;\n mod iter_next_slice;\n+mod iter_nth;\n+mod iter_nth_zero;\n+mod iterator_step_by_zero;\n mod manual_saturating_arithmetic;\n mod map_collect_result_unit;\n mod ok_expect;\n@@ -43,7 +46,6 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol, SymbolStr};\n use rustc_typeck::hir_ty_to_ty;\n \n-use crate::consts::{constant, Constant};\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n@@ -1709,11 +1711,11 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"count\", \"into_iter\"] => iter_count::check(cx, expr, &arg_lists[1], \"into_iter\"),\n             [\"count\", \"iter\"] => iter_count::check(cx, expr, &arg_lists[1], \"iter\"),\n             [\"count\", \"iter_mut\"] => iter_count::check(cx, expr, &arg_lists[1], \"iter_mut\"),\n-            [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n-            [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n+            [\"nth\", \"iter\"] => iter_nth::check(cx, expr, &arg_lists, false),\n+            [\"nth\", \"iter_mut\"] => iter_nth::check(cx, expr, &arg_lists, true),\n             [\"nth\", \"bytes\"] => bytes_nth::check(cx, expr, &arg_lists[1]),\n-            [\"nth\", ..] => lint_iter_nth_zero(cx, expr, arg_lists[0]),\n-            [\"step_by\", ..] => lint_step_by(cx, expr, arg_lists[0]),\n+            [\"nth\", ..] => iter_nth_zero::check(cx, expr, arg_lists[0]),\n+            [\"step_by\", ..] => iterator_step_by_zero::check(cx, expr, arg_lists[0]),\n             [\"next\", \"skip\"] => lint_iter_skip_next(cx, expr, arg_lists[1]),\n             [\"collect\", \"cloned\"] => iter_cloned_collect::check(cx, expr, arg_lists[1]),\n             [\"as_ref\"] => lint_asref(cx, expr, \"as_ref\", arg_lists[0]),\n@@ -2586,68 +2588,6 @@ fn lint_unnecessary_fold(cx: &LateContext<'_>, expr: &hir::Expr<'_>, fold_args:\n     }\n }\n \n-fn lint_step_by<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, args: &'tcx [hir::Expr<'_>]) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), &args[1]) {\n-            span_lint(\n-                cx,\n-                ITERATOR_STEP_BY_ZERO,\n-                expr.span,\n-                \"`Iterator::step_by(0)` will panic at runtime\",\n-            );\n-        }\n-    }\n-}\n-\n-fn lint_iter_nth<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &hir::Expr<'_>,\n-    nth_and_iter_args: &[&'tcx [hir::Expr<'tcx>]],\n-    is_mut: bool,\n-) {\n-    let iter_args = nth_and_iter_args[1];\n-    let mut_str = if is_mut { \"_mut\" } else { \"\" };\n-    let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.typeck_results().expr_ty(&iter_args[0])).is_some() {\n-        \"slice\"\n-    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vec_type) {\n-        \"Vec\"\n-    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vecdeque_type) {\n-        \"VecDeque\"\n-    } else {\n-        let nth_args = nth_and_iter_args[0];\n-        lint_iter_nth_zero(cx, expr, &nth_args);\n-        return; // caller is not a type that we want to lint\n-    };\n-\n-    span_lint_and_help(\n-        cx,\n-        ITER_NTH,\n-        expr.span,\n-        &format!(\"called `.iter{0}().nth()` on a {1}\", mut_str, caller_type),\n-        None,\n-        &format!(\"calling `.get{}()` is both faster and more readable\", mut_str),\n-    );\n-}\n-\n-fn lint_iter_nth_zero<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, nth_args: &'tcx [hir::Expr<'_>]) {\n-    if_chain! {\n-        if match_trait_method(cx, expr, &paths::ITERATOR);\n-        if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), &nth_args[1]);\n-        then {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                ITER_NTH_ZERO,\n-                expr.span,\n-                \"called `.nth(0)` on a `std::iter::Iterator`, when `.next()` is equivalent\",\n-                \"try calling `.next()` instead of `.nth(0)`\",\n-                format!(\"{}.next()\", snippet_with_applicability(cx, nth_args[0].span, \"..\", &mut applicability)),\n-                applicability,\n-            );\n-        }\n-    }\n-}\n-\n fn lint_iter_skip_next(cx: &LateContext<'_>, expr: &hir::Expr<'_>, skip_args: &[hir::Expr<'_>]) {\n     // lint if caller of skip is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {"}]}