{"sha": "48349960e68a9d19b17ac54cd12e939a9a46ea7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MzQ5OTYwZTY4YTlkMTliMTdhYzU0Y2QxMmU5MzlhOWE0NmVhN2Q=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-09T02:46:14Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-18T14:06:13Z"}, "message": "Use Cow to handle modifications of projection in preparation for interning", "tree": {"sha": "76fbadee0b0fbf3f6090122cb1d4f10583bf65f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76fbadee0b0fbf3f6090122cb1d4f10583bf65f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48349960e68a9d19b17ac54cd12e939a9a46ea7d", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2pxtYACgkQiMlBzaHU\nZDJO2A//dak9JQ5pxIr08ZS5J4eBmakgx0+RkZRZN70s0dmvTL9ymun5woqTC0yE\nW+0d3Toc81fB7BrTVQvx3vRuxUybXBqaBuHvCcyvXyM0i+nBRAPsdGARpun3vrSf\nUDlcY2JbLHBFdeBBqFrGY3ZAwA2ESxxiWmZXUw8QNK2P5dIdF5vQD1+ljBgnXy7V\nfARS4Kl4lyK10w/NR6voVqJU73BEl09J9RkHhbWlz75jGf9hF79wpeIcwQLQigGz\nFMRpQievQOyKKSSrGCVU3aycpPWQjHzQRua8o2hF3QI1roMWa5s22o0BdD3rsmFG\nkECrz5VkiRdQkW67UahypI5rv3u1+uH7cCqriHHnf+g/CEq5RPwnff35jEQ6Jh0j\nDSkLd55aYbi7lmqrx1XEOxJ/ejP7ozd3kjjAHcTKRddVZ4vpYl0e/4x4wC9ss+MH\nX7f9OnjHRCblB69hJl756/4tmEgA27g7uDNkHDR2Afk5XJlfH78fGuXuF33TBMRo\nAlAglhidovgWYRU1Zudzq7XpzneghUSlIpJi1bqEdDd8hf4Xpczx3p83sM4i/LXR\nnh0Qq8ah1mgp9RQ8+upzJbUerTvZS5Y+dfOxvifK53T5iaY9CsTY1a2Qg8jBbbgL\nDrJH7H+pY+oEwZWXLRQz3lSYqnMm6E7ZCiShwtcIB59n25WKCF8=\n=N0qV\n-----END PGP SIGNATURE-----", "payload": "tree 76fbadee0b0fbf3f6090122cb1d4f10583bf65f0\nparent d53fc9cae5b17c138be09383dea8b8f10d3df3a1\nauthor Santiago Pastorino <spastorino@gmail.com> 1570589174 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571407573 -0400\n\nUse Cow to handle modifications of projection in preparation for interning\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48349960e68a9d19b17ac54cd12e939a9a46ea7d", "html_url": "https://github.com/rust-lang/rust/commit/48349960e68a9d19b17ac54cd12e939a9a46ea7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48349960e68a9d19b17ac54cd12e939a9a46ea7d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53fc9cae5b17c138be09383dea8b8f10d3df3a1", "html_url": "https://github.com/rust-lang/rust/commit/d53fc9cae5b17c138be09383dea8b8f10d3df3a1"}], "stats": {"total": 116, "additions": 67, "deletions": 49}, "files": [{"sha": "fef406e8987834328e3cf3aca97d58bec78e48a2", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=48349960e68a9d19b17ac54cd12e939a9a46ea7d", "patch": "@@ -792,26 +792,37 @@ macro_rules! visit_place_fns {\n         ) {\n             self.visit_place_base(&mut place.base, context, location);\n \n-            place.projection = self.process_projection(&place.projection);\n+            if let Some(new_projection) = self.process_projection(&place.projection) {\n+                place.projection = new_projection;\n+            }\n         }\n \n         fn process_projection(\n             &mut self,\n-            projection: &Box<[PlaceElem<'tcx>]>,\n-        ) -> Box<[PlaceElem<'tcx>]> {\n-            let new_projection: Vec<_> = projection.iter().map(|elem|\n-                self.process_projection_elem(elem)\n-            ).collect();\n+            projection: &'a [PlaceElem<'tcx>],\n+        ) -> Option<Box<[PlaceElem<'tcx>]>> {\n+            let mut projection = Cow::Borrowed(projection);\n+\n+            for i in 0..projection.len() {\n+                if let Some(elem) = projection.get(i) {\n+                    if let Some(elem) = self.process_projection_elem(elem) {\n+                        let vec = projection.to_mut();\n+                        vec[i] = elem;\n+                    }\n+                }\n+            }\n \n-            new_projection.into_boxed_slice()\n+            match projection {\n+                Cow::Borrowed(_) => None,\n+                Cow::Owned(vec) => Some(vec.into_boxed_slice()),\n+            }\n         }\n \n         fn process_projection_elem(\n             &mut self,\n-            elem: &PlaceElem<'tcx>,\n-        ) -> PlaceElem<'tcx> {\n-            // FIXME: avoid cloning here\n-            elem.clone()\n+            _elem: &PlaceElem<'tcx>,\n+        ) -> Option<PlaceElem<'tcx>> {\n+            None\n         }\n     );\n "}, {"sha": "9ecd6f837750e797365b467b434a4d818dcaf5ad", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=48349960e68a9d19b17ac54cd12e939a9a46ea7d", "patch": "@@ -65,12 +65,16 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n     fn process_projection_elem(\n         &mut self,\n         elem: &PlaceElem<'tcx>,\n-    ) -> PlaceElem<'tcx> {\n+    ) -> Option<PlaceElem<'tcx>> {\n         if let PlaceElem::Field(field, ty) = elem {\n-            PlaceElem::Field(*field, self.renumber_regions(ty))\n-        } else {\n-            elem.clone()\n+            let new_ty = self.renumber_regions(ty);\n+\n+            if new_ty != *ty {\n+                return Some(PlaceElem::Field(*field, new_ty));\n+            }\n         }\n+\n+        None\n     }\n \n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {"}, {"sha": "439cae2093ae5361ec82b136f369d862cd03f796", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=48349960e68a9d19b17ac54cd12e939a9a46ea7d", "patch": "@@ -42,12 +42,16 @@ impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n     fn process_projection_elem(\n         &mut self,\n         elem: &PlaceElem<'tcx>,\n-    ) -> PlaceElem<'tcx> {\n+    ) -> Option<PlaceElem<'tcx>> {\n         if let PlaceElem::Field(field, ty) = elem {\n-            PlaceElem::Field(*field, self.tcx.erase_regions(ty))\n-        } else {\n-            elem.clone()\n+            let new_ty = self.tcx.erase_regions(ty);\n+\n+            if new_ty != *ty {\n+                return Some(PlaceElem::Field(*field, new_ty));\n+            }\n         }\n+\n+        None\n     }\n }\n "}, {"sha": "6533e3c5ba81fcc8180252c5bb8299eb09fadb82", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=48349960e68a9d19b17ac54cd12e939a9a46ea7d", "patch": "@@ -89,22 +89,16 @@ impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor {\n         }\n     }\n \n-    fn visit_place(&mut self,\n-                    place: &mut Place<'tcx>,\n-                    context: PlaceContext,\n-                    location: Location) {\n-        self.visit_place_base(&mut place.base, context, location);\n-\n-        let new_projection: Vec<_> = place.projection.iter().map(|elem|\n-            match elem {\n-                PlaceElem::Index(local) if *local == self.from => {\n-                    PlaceElem::Index(self.to)\n-                }\n-                _ => elem.clone(),\n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+    ) -> Option<PlaceElem<'tcx>> {\n+        match elem {\n+            PlaceElem::Index(local) if *local == self.from => {\n+                Some(PlaceElem::Index(self.to))\n             }\n-        ).collect();\n-\n-        place.projection = new_projection.into_boxed_slice();\n+            _ => None,\n+        }\n     }\n }\n "}, {"sha": "0cbdcedff4780dea11618d9a609c18f2436ff196", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=48349960e68a9d19b17ac54cd12e939a9a46ea7d", "patch": "@@ -703,12 +703,16 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n     fn process_projection_elem(\n         &mut self,\n         elem: &PlaceElem<'tcx>,\n-    ) -> PlaceElem<'tcx> {\n+    ) -> Option<PlaceElem<'tcx>> {\n         if let PlaceElem::Index(local) = elem {\n-            PlaceElem::Index(self.make_integrate_local(local))\n-        } else {\n-            elem.clone()\n+            let new_local = self.make_integrate_local(local);\n+\n+            if new_local != *local {\n+                return Some(PlaceElem::Index(new_local))\n+            }\n         }\n+\n+        None\n     }\n \n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {"}, {"sha": "ad1785417cd93409633603c784e9b8735143e92c", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=48349960e68a9d19b17ac54cd12e939a9a46ea7d", "patch": "@@ -408,12 +408,12 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n     fn process_projection_elem(\n         &mut self,\n         elem: &PlaceElem<'tcx>,\n-    ) -> PlaceElem<'tcx> {\n+    ) -> Option<PlaceElem<'tcx>> {\n         match elem {\n             PlaceElem::Index(local) if self.is_temp_kind(*local) => {\n-                PlaceElem::Index(self.promote_temp(*local))\n+                Some(PlaceElem::Index(self.promote_temp(*local)))\n             }\n-            _ => elem.clone(),\n+            _ => None,\n         }\n     }\n }"}, {"sha": "606c1a3a1cc09dd9deb761c42b0fe8f819340410", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=48349960e68a9d19b17ac54cd12e939a9a46ea7d", "patch": "@@ -374,11 +374,12 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater {\n     fn process_projection_elem(\n         &mut self,\n         elem: &PlaceElem<'tcx>,\n-    ) -> PlaceElem<'tcx> {\n-        if let PlaceElem::Index(local) = elem {\n-            PlaceElem::Index(self.map[*local].unwrap())\n-        } else {\n-            elem.clone()\n+    ) -> Option<PlaceElem<'tcx>> {\n+        match elem {\n+            PlaceElem::Index(local) => {\n+                Some(PlaceElem::Index(self.map[*local].unwrap()))\n+            }\n+            _ => None\n         }\n     }\n }"}, {"sha": "cdd07ad4b8ff4b88ba81689ddbf0aca0b71a7055", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48349960e68a9d19b17ac54cd12e939a9a46ea7d/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=48349960e68a9d19b17ac54cd12e939a9a46ea7d", "patch": "@@ -141,12 +141,12 @@ impl MutVisitor<'_> for MutateUseVisitor {\n     fn process_projection_elem(\n         &mut self,\n         elem: &PlaceElem<'tcx>,\n-    ) -> PlaceElem<'tcx> {\n+    ) -> Option<PlaceElem<'tcx>> {\n         match elem {\n             PlaceElem::Index(local) if *local == self.query => {\n-                PlaceElem::Index(self.new_local)\n+                Some(PlaceElem::Index(self.new_local))\n             }\n-            _ => elem.clone(),\n+            _ => None,\n         }\n     }\n }"}]}