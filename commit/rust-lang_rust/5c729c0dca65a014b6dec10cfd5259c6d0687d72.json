{"sha": "5c729c0dca65a014b6dec10cfd5259c6d0687d72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNzI5YzBkY2E2NWEwMTRiNmRlYzEwY2ZkNTI1OWM2ZDA2ODdkNzI=", "commit": {"author": {"name": "Etienne Millon", "email": "me@emillon.org", "date": "2013-07-24T16:00:33Z"}, "committer": {"name": "Etienne Millon", "email": "me@emillon.org", "date": "2013-07-24T21:20:57Z"}, "message": "Check for comparisons to NaN in patterns\n\nFor every pattern that refers to a static value, evaluate it and emit a warning\nif it is a NaN.\n\nFixes #6804", "tree": {"sha": "1c60903581a094e90cc8c3ab4a3626e4de6a5706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c60903581a094e90cc8c3ab4a3626e4de6a5706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c729c0dca65a014b6dec10cfd5259c6d0687d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c729c0dca65a014b6dec10cfd5259c6d0687d72", "html_url": "https://github.com/rust-lang/rust/commit/5c729c0dca65a014b6dec10cfd5259c6d0687d72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c729c0dca65a014b6dec10cfd5259c6d0687d72/comments", "author": {"login": "emillon", "id": 496345, "node_id": "MDQ6VXNlcjQ5NjM0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/496345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emillon", "html_url": "https://github.com/emillon", "followers_url": "https://api.github.com/users/emillon/followers", "following_url": "https://api.github.com/users/emillon/following{/other_user}", "gists_url": "https://api.github.com/users/emillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/emillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emillon/subscriptions", "organizations_url": "https://api.github.com/users/emillon/orgs", "repos_url": "https://api.github.com/users/emillon/repos", "events_url": "https://api.github.com/users/emillon/events{/privacy}", "received_events_url": "https://api.github.com/users/emillon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emillon", "id": 496345, "node_id": "MDQ6VXNlcjQ5NjM0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/496345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emillon", "html_url": "https://github.com/emillon", "followers_url": "https://api.github.com/users/emillon/followers", "following_url": "https://api.github.com/users/emillon/following{/other_user}", "gists_url": "https://api.github.com/users/emillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/emillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emillon/subscriptions", "organizations_url": "https://api.github.com/users/emillon/orgs", "repos_url": "https://api.github.com/users/emillon/repos", "events_url": "https://api.github.com/users/emillon/events{/privacy}", "received_events_url": "https://api.github.com/users/emillon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "766eb950c6e7cdbab89e15200d0bd2dfee58e25e", "url": "https://api.github.com/repos/rust-lang/rust/commits/766eb950c6e7cdbab89e15200d0bd2dfee58e25e", "html_url": "https://github.com/rust-lang/rust/commit/766eb950c6e7cdbab89e15200d0bd2dfee58e25e"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "18bf3859f0739da3cf8478fe776e2fe4230ca7e7", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c729c0dca65a014b6dec10cfd5259c6d0687d72/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c729c0dca65a014b6dec10cfd5259c6d0687d72/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=5c729c0dca65a014b6dec10cfd5259c6d0687d72", "patch": "@@ -10,7 +10,7 @@\n \n \n use middle::const_eval::{compare_const_vals, lookup_const_by_id};\n-use middle::const_eval::{eval_const_expr, const_val, const_bool};\n+use middle::const_eval::{eval_const_expr, const_val, const_bool, const_float};\n use middle::pat_util::*;\n use middle::ty::*;\n use middle::ty;\n@@ -102,6 +102,22 @@ pub fn check_arms(cx: &MatchCheckCtxt, arms: &[arm]) {\n     let mut seen = ~[];\n     for arms.iter().advance |arm| {\n         for arm.pats.iter().advance |pat| {\n+\n+            // Check that we do not match against a static NaN (#6804)\n+            match cx.tcx.def_map.find(&pat.id) {\n+                Some(&def_static(did, false)) => {\n+                    let const_expr = lookup_const_by_id(cx.tcx, did).get();\n+                    match eval_const_expr(cx.tcx, const_expr) {\n+                        const_float(f) if f.is_NaN() => {\n+                            let msg = \"unmatchable NaN in pattern, use is_NaN() in a guard instead\";\n+                            cx.tcx.sess.span_warn(pat.span, msg);\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+                _ => {}\n+            }\n+\n             let v = ~[*pat];\n             match is_useful(cx, &seen, v) {\n               not_useful => {"}, {"sha": "85e09a777d14247c306db34c65db5476656c903b", "filename": "src/test/compile-fail/issue-6804.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c729c0dca65a014b6dec10cfd5259c6d0687d72/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c729c0dca65a014b6dec10cfd5259c6d0687d72/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=5c729c0dca65a014b6dec10cfd5259c6d0687d72", "patch": "@@ -0,0 +1,16 @@\n+// Matching against NaN should result in a warning\n+\n+use std::float::NaN;\n+\n+fn main() {\n+    let x = NaN;\n+    match x {\n+        NaN => {},\n+        _ => {},\n+    };\n+    //~^^^ WARNING unmatchable NaN in pattern, use is_NaN() in a guard instead\n+}\n+\n+// At least one error is needed so that compilation fails\n+#[static_assert]\n+static b: bool = false; //~ ERROR static assertion failed"}]}