{"sha": "05b9f0e36082b874b08922ef72210167fb9ecef2", "node_id": "C_kwDOAAsO6NoAKDA1YjlmMGUzNjA4MmI4NzRiMDg5MjJlZjcyMjEwMTY3ZmI5ZWNlZjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-30T21:38:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-30T21:38:25Z"}, "message": "Rollup merge of #102483 - spastorino:create-defs-on-lowering, r=cjgillot\n\ncreate def ids for impl traits during ast lowering\n\nr? `@cjgillot`", "tree": {"sha": "8f63a52d664f70cf8011c606a0285b750422d71a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f63a52d664f70cf8011c606a0285b750422d71a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b9f0e36082b874b08922ef72210167fb9ecef2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjN2HRCRBK7hj4Ov3rIwAA4LsIAGqUYodW1kMKpj11w9r189QE\nJGsWP68CbK1McYdlU+iMddafwGPq4w4KcQ75Vs20bBRgncK3IrBd8EnRIwtrS9JF\n/5bn5aWzgxeJJ1DsIQSftyTlbgZ4v9XLM/cm2tOEGgrGMuH+hWMqkDgilX+c8hvl\nkIzfdxe+EnlJbZ8aZxwI+c58361mkxXPAhAILUBp09sNKx38fvtOjNUjACXQJEaO\n8HHaD8fLxKKVjAGSzQ7f1LHE4moy6ecDbIeWPz/C/zs5FD95ka3T1ZpAg1EdRwTb\nMkU2I36aqhyB9a5jLMHpdH9Bcd5Mid734sT4PKqNqotJ3iOOJDV4HNRXtKPmhJg=\n=LUbM\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f63a52d664f70cf8011c606a0285b750422d71a\nparent 9ec772e2230ad0bba99115408822253a24272150\nparent b2bef02bcdc322a42ccde2688f34dce01a0cbb50\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664573905 +0200\ncommitter GitHub <noreply@github.com> 1664573905 +0200\n\nRollup merge of #102483 - spastorino:create-defs-on-lowering, r=cjgillot\n\ncreate def ids for impl traits during ast lowering\n\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b9f0e36082b874b08922ef72210167fb9ecef2", "html_url": "https://github.com/rust-lang/rust/commit/05b9f0e36082b874b08922ef72210167fb9ecef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b9f0e36082b874b08922ef72210167fb9ecef2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec772e2230ad0bba99115408822253a24272150", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec772e2230ad0bba99115408822253a24272150", "html_url": "https://github.com/rust-lang/rust/commit/9ec772e2230ad0bba99115408822253a24272150"}, {"sha": "b2bef02bcdc322a42ccde2688f34dce01a0cbb50", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2bef02bcdc322a42ccde2688f34dce01a0cbb50", "html_url": "https://github.com/rust-lang/rust/commit/b2bef02bcdc322a42ccde2688f34dce01a0cbb50"}], "stats": {"total": 66, "additions": 30, "deletions": 36}, "files": [{"sha": "8281164ab12070dc60beb1c3979baa1e692e75df", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/05b9f0e36082b874b08922ef72210167fb9ecef2/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b9f0e36082b874b08922ef72210167fb9ecef2/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=05b9f0e36082b874b08922ef72210167fb9ecef2", "patch": "@@ -61,8 +61,8 @@ use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::span_bug;\n use rustc_middle::ty::{ResolverAstLowering, TyCtxt};\n+use rustc_middle::{bug, span_bug};\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DesugaringKind;\n@@ -1060,13 +1060,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n                     // constructing the HIR for `impl bounds...` and then lowering that.\n \n-                    let parent_def_id = self.current_hir_id_owner;\n                     let impl_trait_node_id = self.next_node_id();\n-                    self.create_def(\n-                        parent_def_id.def_id,\n-                        impl_trait_node_id,\n-                        DefPathData::ImplTrait,\n-                    );\n \n                     self.with_dyn_type_scope(false, |this| {\n                         let node_id = this.next_node_id();\n@@ -1357,9 +1351,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         def_node_id,\n                         bounds,\n                         false,\n-                        &ImplTraitContext::TypeAliasesOpaqueTy,\n+                        itctx,\n                     ),\n                     ImplTraitContext::Universal => {\n+                        self.create_def(\n+                            self.current_hir_id_owner.def_id,\n+                            def_node_id,\n+                            DefPathData::ImplTrait,\n+                        );\n                         let span = t.span;\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n                         let (param, bounds, path) =\n@@ -1453,7 +1452,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // frequently opened issues show.\n         let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::OpaqueTy, span, None);\n \n-        let opaque_ty_def_id = self.local_def_id(opaque_ty_node_id);\n+        let opaque_ty_def_id = match origin {\n+            hir::OpaqueTyOrigin::TyAlias => self.create_def(\n+                self.current_hir_id_owner.def_id,\n+                opaque_ty_node_id,\n+                DefPathData::ImplTrait,\n+            ),\n+            hir::OpaqueTyOrigin::FnReturn(fn_def_id) => {\n+                self.create_def(fn_def_id, opaque_ty_node_id, DefPathData::ImplTrait)\n+            }\n+            hir::OpaqueTyOrigin::AsyncFn(..) => bug!(\"unreachable\"),\n+        };\n         debug!(?opaque_ty_def_id);\n \n         // Contains the new lifetime definitions created for the TAIT (if any)."}, {"sha": "8523b5ca0ec33b173ecdfcf476a41e3a3ec66501", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05b9f0e36082b874b08922ef72210167fb9ecef2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b9f0e36082b874b08922ef72210167fb9ecef2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=05b9f0e36082b874b08922ef72210167fb9ecef2", "patch": "@@ -14,7 +14,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::hir::nested_filter;\n use rustc_span::def_id::StableCrateId;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n \n #[inline]\n@@ -1131,7 +1131,7 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n                 .filter_map(|(def_id, info)| {\n                     let _ = info.as_owner()?;\n                     let def_path_hash = definitions.def_path_hash(def_id);\n-                    let span = resolutions.source_span[def_id];\n+                    let span = resolutions.source_span.get(def_id).unwrap_or(&DUMMY_SP);\n                     debug_assert_eq!(span.parent(), None);\n                     Some((def_path_hash, span))\n                 })"}, {"sha": "148eabb38e2303692f687517d1cc22df43bcaaa1", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05b9f0e36082b874b08922ef72210167fb9ecef2/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b9f0e36082b874b08922ef72210167fb9ecef2/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=05b9f0e36082b874b08922ef72210167fb9ecef2", "patch": "@@ -12,7 +12,7 @@ use rustc_session::cstore::CrateStore;\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{BytePos, CachingSourceMapView, SourceFile, Span, SpanData};\n+use rustc_span::{BytePos, CachingSourceMapView, SourceFile, Span, SpanData, DUMMY_SP};\n \n /// This is the context state available during incr. comp. hashing. It contains\n /// enough information to transform `DefId`s and `HirId`s into stable `DefPath`s (i.e.,\n@@ -185,7 +185,7 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n \n     #[inline]\n     fn def_span(&self, def_id: LocalDefId) -> Span {\n-        self.source_span[def_id]\n+        *self.source_span.get(def_id).unwrap_or(&DUMMY_SP)\n     }\n \n     #[inline]"}, {"sha": "38a3c9dd71a5ef2f5dcc250ea476b1876cc05049", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05b9f0e36082b874b08922ef72210167fb9ecef2/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b9f0e36082b874b08922ef72210167fb9ecef2/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=05b9f0e36082b874b08922ef72210167fb9ecef2", "patch": "@@ -285,21 +285,6 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     fn visit_ty(&mut self, ty: &'a Ty) {\n         match ty.kind {\n             TyKind::MacCall(..) => self.visit_macro_invoc(ty.id),\n-            TyKind::ImplTrait(node_id, _) => {\n-                let parent_def = match self.impl_trait_context {\n-                    ImplTraitContext::Universal(item_def) => self.resolver.create_def(\n-                        item_def,\n-                        node_id,\n-                        DefPathData::ImplTrait,\n-                        self.expansion.to_expn_id(),\n-                        ty.span,\n-                    ),\n-                    ImplTraitContext::Existential => {\n-                        self.create_def(node_id, DefPathData::ImplTrait, ty.span)\n-                    }\n-                };\n-                self.with_parent(parent_def, |this| visit::walk_ty(this, ty))\n-            }\n             _ => visit::walk_ty(self, ty),\n         }\n     }"}, {"sha": "2e02078048027732a86e45f7d2adfa1faaa36948", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05b9f0e36082b874b08922ef72210167fb9ecef2/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05b9f0e36082b874b08922ef72210167fb9ecef2/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=05b9f0e36082b874b08922ef72210167fb9ecef2", "patch": "@@ -9,7 +9,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:35:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:44 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -35,17 +35,17 @@ note: required because it's used within this generator\n    |\n LL |     || {\n    |     ^^\n-note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+note: required because it appears within the type `Opaque(DefId(0:45 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:41:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+note: required because it appears within the type `Opaque(DefId(0:46 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n   --> $DIR/generator-print-verbose-1.rs:47:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+   = note: required because it captures the following types: `Opaque(DefId(0:46 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:52:20\n    |"}, {"sha": "6a8a1ad1caadd242684015add8d640297fb32308", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05b9f0e36082b874b08922ef72210167fb9ecef2/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05b9f0e36082b874b08922ef72210167fb9ecef2/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=05b9f0e36082b874b08922ef72210167fb9ecef2", "patch": "@@ -1,14 +1,14 @@\n-error[E0700]: hidden type for `Opaque(DefId(0:11 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReStatic, T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReStatic, T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n   --> $DIR/impl-trait-captures.rs:11:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n-   |                  -- hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n+   |                  -- hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n LL |     x\n    |     ^\n    |\n-help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_))` lifetime bound\n+help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))` lifetime bound\n    |\n-LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_)) {\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) {\n    |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error"}]}