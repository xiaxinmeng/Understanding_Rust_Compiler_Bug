{"sha": "95e727a5c3799f3eaf6ead0b203087cf30cc7206", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZTcyN2E1YzM3OTlmM2VhZjZlYWQwYjIwMzA4N2NmMzBjYzcyMDY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-19T18:42:58Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid cloning Place in check_access_permissions", "tree": {"sha": "4e58a530c9a9d7d21ddcaba1c3788d341cbfe2bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e58a530c9a9d7d21ddcaba1c3788d341cbfe2bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95e727a5c3799f3eaf6ead0b203087cf30cc7206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95e727a5c3799f3eaf6ead0b203087cf30cc7206", "html_url": "https://github.com/rust-lang/rust/commit/95e727a5c3799f3eaf6ead0b203087cf30cc7206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95e727a5c3799f3eaf6ead0b203087cf30cc7206/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e3b7076c216413f39bf28bfea76f9a72b96cbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e3b7076c216413f39bf28bfea76f9a72b96cbb", "html_url": "https://github.com/rust-lang/rust/commit/34e3b7076c216413f39bf28bfea76f9a72b96cbb"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "cfc7e77f4e5a87417c60a2b49756f866ca2bcc13", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95e727a5c3799f3eaf6ead0b203087cf30cc7206/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e727a5c3799f3eaf6ead0b203087cf30cc7206/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=95e727a5c3799f3eaf6ead0b203087cf30cc7206", "patch": "@@ -1996,9 +1996,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         self.report_mutability_error(\n                             place,\n                             span,\n-                            &Place {\n-                                base: _place_err.0.clone(),\n-                                projection: _place_err.1.clone(),\n+                            PlaceRef {\n+                                base: _place_err.0,\n+                                projection: _place_err.1,\n                             },\n                             error_access,\n                             location,\n@@ -2033,9 +2033,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             self.report_mutability_error(\n                 place,\n                 span,\n-                &Place {\n-                    base: the_place_err.0.clone(),\n-                    projection: the_place_err.1.clone(),\n+                PlaceRef {\n+                    base: the_place_err.0,\n+                    projection: the_place_err.1,\n                 },\n                 error_access,\n                 location,"}, {"sha": "caaf344f781dc837247164acc3a8dc2a6eee2c0c", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/95e727a5c3799f3eaf6ead0b203087cf30cc7206/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95e727a5c3799f3eaf6ead0b203087cf30cc7206/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=95e727a5c3799f3eaf6ead0b203087cf30cc7206", "patch": "@@ -2,7 +2,9 @@ use core::unicode::property::Pattern_White_Space;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::mir::{self, BindingForm, ClearCrossCrate, Local, Location, Body};\n-use rustc::mir::{Mutability, Place, PlaceBase, Projection, ProjectionElem, Static, StaticKind};\n+use rustc::mir::{\n+    Mutability, Place, PlaceRef, PlaceBase, Projection, ProjectionElem, Static, StaticKind\n+};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n@@ -25,7 +27,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         &mut self,\n         access_place: &Place<'tcx>,\n         span: Span,\n-        the_place_err: &Place<'tcx>,\n+        the_place_err: PlaceRef<'cx, 'tcx>,\n         error_access: AccessKind,\n         location: Location,\n     ) {\n@@ -44,7 +46,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         debug!(\"report_mutability_error: access_place_desc={:?}\", access_place_desc);\n \n         match the_place_err {\n-            Place {\n+            PlaceRef {\n                 base: PlaceBase::Local(local),\n                 projection: None,\n             } => {\n@@ -62,7 +64,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            Place {\n+            PlaceRef {\n                 base: _,\n                 projection:\n                     Some(box Projection {\n@@ -83,21 +85,27 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            Place {\n+            PlaceRef {\n                 base: _,\n                 projection:\n                     Some(box Projection {\n                         base,\n                         elem: ProjectionElem::Deref,\n                     }),\n             } => {\n-                if the_place_err.base == PlaceBase::Local(Local::new(1)) &&\n+                if the_place_err.base == &PlaceBase::Local(Local::new(1)) &&\n                     base.is_none() &&\n                     !self.upvars.is_empty() {\n                     item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n                     debug_assert!(self.body.local_decls[Local::new(1)].ty.is_region_ptr());\n                     debug_assert!(is_closure_or_generator(\n-                        the_place_err.ty(self.body, self.infcx.tcx).ty\n+                        Place::ty_from(\n+                            the_place_err.base,\n+                            the_place_err.projection,\n+                            self.body,\n+                            self.infcx.tcx\n+                        )\n+                        .ty\n                     ));\n \n                     reason =\n@@ -138,7 +146,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            Place {\n+            PlaceRef {\n                 base:\n                     PlaceBase::Static(box Static {\n                         kind: StaticKind::Promoted(_),\n@@ -147,7 +155,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 projection: None,\n             } => unreachable!(),\n \n-            Place {\n+            PlaceRef {\n                 base:\n                     PlaceBase::Static(box Static {\n                         kind: StaticKind::Static(def_id),\n@@ -168,30 +176,30 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            Place {\n+            PlaceRef {\n                 base: _,\n                 projection:\n                     Some(box Projection {\n                         base: _,\n                         elem: ProjectionElem::Index(_),\n                     }),\n             }\n-            | Place {\n+            | PlaceRef {\n                 base: _,\n                 projection:\n                     Some(box Projection {\n                         base: _,\n                         elem: ProjectionElem::ConstantIndex { .. },\n                     }),\n             }\n-            | Place {\n+            | PlaceRef {\n                 base: _,\n                 projection: Some(box Projection {\n                     base: _,\n                     elem: ProjectionElem::Subslice { .. },\n                 }),\n             }\n-            | Place {\n+            | PlaceRef {\n                 base: _,\n                 projection: Some(box Projection {\n                     base: _,\n@@ -252,7 +260,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             // something like `*((*_1).0`. The local that we get will be a reference to the\n             // struct we've got a field access of (it must be a reference since there's a deref\n             // after the field access).\n-            Place {\n+            PlaceRef {\n                 base,\n                 projection: Some(box Projection {\n                     base: Some(box Projection {\n@@ -282,7 +290,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             },\n \n             // Suggest removing a `&mut` from the use of a mutable reference.\n-            Place {\n+            PlaceRef {\n                 base: PlaceBase::Local(local),\n                 projection: None,\n             } if {\n@@ -318,7 +326,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n             // We want to suggest users use `let mut` for local (user\n             // variable) mutations...\n-            Place {\n+            PlaceRef {\n                 base: PlaceBase::Local(local),\n                 projection: None,\n             } if self.body.local_decls[*local].can_be_made_mutable() => {\n@@ -339,7 +347,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n \n             // Also suggest adding mut for upvars\n-            Place {\n+            PlaceRef {\n                 base,\n                 projection: Some(box Projection {\n                     base: proj_base,\n@@ -375,7 +383,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             // complete hack to approximate old AST-borrowck\n             // diagnostic: if the span starts with a mutable borrow of\n             // a local variable, then just suggest the user remove it.\n-            Place {\n+            PlaceRef {\n                 base: PlaceBase::Local(_),\n                 projection: None,\n             } if {\n@@ -390,7 +398,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 err.span_label(span, \"try removing `&mut` here\");\n             }\n \n-            Place {\n+            PlaceRef {\n                 base: PlaceBase::Local(local),\n                 projection: Some(box Projection {\n                     base: None,\n@@ -417,7 +425,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             //\n             // FIXME: can this case be generalized to work for an\n             // arbitrary base for the projection?\n-            Place {\n+            PlaceRef {\n                 base: PlaceBase::Local(local),\n                 projection: Some(box Projection {\n                     base: None,\n@@ -500,7 +508,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            Place {\n+            PlaceRef {\n                 base,\n                 projection: Some(box Projection {\n                     base: None,\n@@ -517,7 +525,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 );\n             }\n \n-            Place {\n+            PlaceRef {\n                 base: _,\n                 projection: Some(box Projection {\n                     base: _,"}]}