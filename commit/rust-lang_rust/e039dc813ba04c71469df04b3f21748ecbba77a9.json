{"sha": "e039dc813ba04c71469df04b3f21748ecbba77a9", "node_id": "C_kwDOAAsO6NoAKGUwMzlkYzgxM2JhMDRjNzE0NjlkZjA0YjNmMjE3NDhlY2JiYTc3YTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-25T00:34:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-25T00:34:31Z"}, "message": "Rollup merge of #95270 - michaelwoerister:fix-box-unsized-debuginfo, r=wesleywiser\n\ndebuginfo: Fix debuginfo for Box<T> where T is unsized.\n\nBefore this fix, the debuginfo for the fields was generated from the struct defintion of Box<T>, but (at least at the moment) the compiler pretends that Box<T> is just a (fat) pointer, so the fields need to be `pointer` and `vtable` instead of `__0: Unique<T>` and `__1: Allocator`.\n\nThis is meant as a temporary mitigation until we can make sure that simply treating Box as a regular struct in debuginfo does not cause too much breakage in the ecosystem.\n\nr? ````@wesleywiser````", "tree": {"sha": "6a483fcff469661cef1f8af60c4b57c1273ff85f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a483fcff469661cef1f8af60c4b57c1273ff85f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e039dc813ba04c71469df04b3f21748ecbba77a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiPQ4XCRBK7hj4Ov3rIwAA9mUIAAeWTBkMt1iCnGk5Cw1pEKXn\n/QBPSLP8u9uYLRghRa4awBX39VIvOJGWle3HyMMACfk2p5N/djuxf3+IA22UiwSn\nhpSvOJAn71KFnTIY8N/GA7mEunerJKk/RZtGA+vrm7H8gFynZ950yJC3Wf7lF1h7\n8y2GwtAJq5gvjK4a/wU92cVcjhANDtBWYjG0FdRIl/r8G+Zyc8O0lHwFDlYIyuNq\nDpZkiHh5ThWOnTgdfK6nD9U0L937hO+NwJeHVD2r3w03rup5WbTXun2S7Xh/F4Zq\nu7U8TFmkbDjiDwTzj0IhARHod7NNpe9XWlvoFcVe04vDdC+AsqDPCqk/2u13O24=\n=SRPQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a483fcff469661cef1f8af60c4b57c1273ff85f\nparent 1fcb8fc3e0bc82fc63bbb8baa6c6325d361115fc\nparent e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648168471 +0100\ncommitter GitHub <noreply@github.com> 1648168471 +0100\n\nRollup merge of #95270 - michaelwoerister:fix-box-unsized-debuginfo, r=wesleywiser\n\ndebuginfo: Fix debuginfo for Box<T> where T is unsized.\n\nBefore this fix, the debuginfo for the fields was generated from the struct defintion of Box<T>, but (at least at the moment) the compiler pretends that Box<T> is just a (fat) pointer, so the fields need to be `pointer` and `vtable` instead of `__0: Unique<T>` and `__1: Allocator`.\n\nThis is meant as a temporary mitigation until we can make sure that simply treating Box as a regular struct in debuginfo does not cause too much breakage in the ecosystem.\n\nr? ````@wesleywiser````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e039dc813ba04c71469df04b3f21748ecbba77a9", "html_url": "https://github.com/rust-lang/rust/commit/e039dc813ba04c71469df04b3f21748ecbba77a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e039dc813ba04c71469df04b3f21748ecbba77a9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fcb8fc3e0bc82fc63bbb8baa6c6325d361115fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fcb8fc3e0bc82fc63bbb8baa6c6325d361115fc", "html_url": "https://github.com/rust-lang/rust/commit/1fcb8fc3e0bc82fc63bbb8baa6c6325d361115fc"}, {"sha": "e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600", "url": "https://api.github.com/repos/rust-lang/rust/commits/e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600", "html_url": "https://github.com/rust-lang/rust/commit/e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "74e194750faddffe269347358d223140586a3bfc", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e039dc813ba04c71469df04b3f21748ecbba77a9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e039dc813ba04c71469df04b3f21748ecbba77a9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=e039dc813ba04c71469df04b3f21748ecbba77a9", "patch": "@@ -166,6 +166,13 @@ fn build_pointer_or_reference_di_node<'ll, 'tcx>(\n     pointee_type: Ty<'tcx>,\n     unique_type_id: UniqueTypeId<'tcx>,\n ) -> DINodeCreationResult<'ll> {\n+    // The debuginfo generated by this function is only valid if `ptr_type` is really just\n+    // a (fat) pointer. Make sure it is not called for e.g. `Box<T, NonZSTAllocator>`.\n+    debug_assert_eq!(\n+        cx.size_and_align_of(ptr_type),\n+        cx.size_and_align_of(cx.tcx.mk_mut_ptr(pointee_type))\n+    );\n+\n     let pointee_type_di_node = type_di_node(cx, pointee_type);\n \n     return_if_di_node_created_in_meantime!(cx, unique_type_id);\n@@ -212,7 +219,17 @@ fn build_pointer_or_reference_di_node<'ll, 'tcx>(\n                     DIFlags::FlagZero,\n                 ),\n                 |cx, owner| {\n-                    let layout = cx.layout_of(ptr_type);\n+                    // FIXME: If this fat pointer is a `Box` then we don't want to use its\n+                    //        type layout and instead use the layout of the raw pointer inside\n+                    //        of it.\n+                    //        The proper way to handle this is to not treat Box as a pointer\n+                    //        at all and instead emit regular struct debuginfo for it. We just\n+                    //        need to make sure that we don't break existing debuginfo consumers\n+                    //        by doing that (at least not without a warning period).\n+                    let layout_type =\n+                        if ptr_type.is_box() { cx.tcx.mk_mut_ptr(pointee_type) } else { ptr_type };\n+\n+                    let layout = cx.layout_of(layout_type);\n                     let addr_field = layout.field(cx, abi::FAT_PTR_ADDR);\n                     let extra_field = layout.field(cx, abi::FAT_PTR_EXTRA);\n "}, {"sha": "7cb0002ca512510020aa49d8f3a2a85af530490d", "filename": "src/test/debuginfo/unsized.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e039dc813ba04c71469df04b3f21748ecbba77a9/src%2Ftest%2Fdebuginfo%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e039dc813ba04c71469df04b3f21748ecbba77a9/src%2Ftest%2Fdebuginfo%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funsized.rs?ref=e039dc813ba04c71469df04b3f21748ecbba77a9", "patch": "@@ -16,13 +16,17 @@\n // gdbg-check:$3 = {pointer = [...], vtable = [...]}\n // gdbr-check:$3 = &unsized::Foo<dyn core::fmt::Debug> {pointer: [...], vtable: [...]}\n \n+// gdb-command:print _box\n+// gdbg-check:$4 = {pointer = [...], vtable = [...]}\n+// gdbr-check:$4 = alloc::boxed::Box<unsized::Foo<dyn core::fmt::Debug>, alloc::alloc::Global> {pointer: [...], vtable: [...]}\n+\n // gdb-command:print tuple_slice\n-// gdbg-check:$4 = {data_ptr = [...], length = 2}\n-// gdbr-check:$4 = &(i32, i32, [i32]) {data_ptr: [...], length: 2}\n+// gdbg-check:$5 = {data_ptr = [...], length = 2}\n+// gdbr-check:$5 = &(i32, i32, [i32]) {data_ptr: [...], length: 2}\n \n // gdb-command:print tuple_dyn\n-// gdbg-check:$5 = {pointer = [...], vtable = [...]}\n-// gdbr-check:$5 = &(i32, i32, dyn core::fmt::Debug) {pointer: [...], vtable: [...]}\n+// gdbg-check:$6 = {pointer = [...], vtable = [...]}\n+// gdbr-check:$6 = &(i32, i32, dyn core::fmt::Debug) {pointer: [...], vtable: [...]}\n \n // === CDB TESTS ===================================================================================\n \n@@ -42,6 +46,12 @@\n // cdb-check:    [+0x000] pointer          : 0x[...] [Type: unsized::Foo<dyn$<core::fmt::Debug> > *]\n // cdb-check:    [...] vtable           : 0x[...] [Type: unsigned [...]int[...] (*)[3]]\n \n+// cdb-command:dx _box\n+// cdb-check:\n+// cdb-check:_box             [Type: alloc::boxed::Box<unsized::Foo<dyn$<core::fmt::Debug> >,alloc::alloc::Global>]\n+// cdb-check:[+0x000] pointer          : 0x[...] [Type: unsized::Foo<dyn$<core::fmt::Debug> > *]\n+// cdb-check:[...] vtable           : 0x[...] [Type: unsigned [...]int[...] (*)[3]]\n+\n // cdb-command:dx tuple_slice\n // cdb-check:tuple_slice      [Type: ref$<tuple$<i32,i32,slice$<i32> > >]\n // cdb-check:    [+0x000] data_ptr         : 0x[...] [Type: tuple$<i32,i32,slice$<i32> > *]\n@@ -69,6 +79,7 @@ fn main() {\n     let a: &Foo<[u8]> = &foo.value;\n     let b: &Foo<Foo<[u8]>> = &foo;\n     let c: &Foo<dyn std::fmt::Debug> = &Foo { value: 7i32 };\n+    let _box: Box<Foo<dyn std::fmt::Debug>> = Box::new(Foo { value: 8i32 });\n \n     // Also check unsized tuples\n     let tuple_slice: &(i32, i32, [i32]) = &(0, 1, [2, 3]);"}]}