{"sha": "a93ea7ebc83560c2c62243a9190eff09dd3a7e62", "node_id": "C_kwDOAAsO6NoAKGE5M2VhN2ViYzgzNTYwYzJjNjIyNDNhOTE5MGVmZjA5ZGQzYTdlNjI", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-05-02T09:55:39Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-06-14T12:50:53Z"}, "message": "Add user documentation for -Zvirtual-function-elimination", "tree": {"sha": "95768ee8a3f29bc239b353e7717ac4c9138dd26f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95768ee8a3f29bc239b353e7717ac4c9138dd26f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a93ea7ebc83560c2c62243a9190eff09dd3a7e62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmKohC0ACgkQHKDfKvWd\naKWx0w/5AcT8YyPmi6Yt06ku52/25g/G7c8YPQYjI11wc+uGZUdTivr64jmXN6LV\nS+Ci0SJrqicHfr8+d5BP2BDYamUm+Wnq7cafOtbkW3pF8xz8sHqkdS2M96hhu7zs\nxxPmGSt3gZskMT95wvJ309b6WbX2N+V/gQsFqYLrO8FmpffV2Ep9k6dtF4wz630m\ne4WQ1y7XjisXdmbOxfowVW+uGp7YdNDxQnYkj/6r2pTFANYtwqRjOOpPX67l3X/R\nAsl3Pe0ei3LLV8BxQ3VhDdPI4lwNlLsA2lfHTuEbbINoLoGV23exWiJNpZ3GnkXB\n5DW70oOndffukirqqZMfS6uLKgbrYvFb4BkQQOt1rGSLXQz5jZTAo8pg9CWN4UKm\n0tQ3Lyecn62vftT4BFHRBw3rTsm+38205jXrUDLF8nxyQftaJ4Sd/k/EX08BtUSK\nonRk6KTHBAn0pjOZ5D/BMIUBCZV6OsJZQ67OpjUFbbBjHg+SjoAzuvnE2oLuG3Hc\nksF1cNSE/EylsX+1NT8MZWwLGb3XniKs9eSjeZ4bS9EYrC+B+nMJt1QXtfV8YZtZ\nA9bsek1e2C1oS+WhDwOWWNmGvl9fmRSsl33gLYgKDjnUriGgCJ5Bw6Ma2b4TljcT\nn6EQ1UkEiSm9/2fMHot6e1zSOxdGtEuHvwuoiB9WH2ezyg97PN0=\n=4MEz\n-----END PGP SIGNATURE-----", "payload": "tree 95768ee8a3f29bc239b353e7717ac4c9138dd26f\nparent 996c6b7964a5d587f253a9b469cb00e20dc1b5fe\nauthor flip1995 <philipp.krones@embecosm.com> 1651485339 +0100\ncommitter Philipp Krones <hello@philkrones.com> 1655211053 +0200\n\nAdd user documentation for -Zvirtual-function-elimination\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a93ea7ebc83560c2c62243a9190eff09dd3a7e62", "html_url": "https://github.com/rust-lang/rust/commit/a93ea7ebc83560c2c62243a9190eff09dd3a7e62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a93ea7ebc83560c2c62243a9190eff09dd3a7e62/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "996c6b7964a5d587f253a9b469cb00e20dc1b5fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/996c6b7964a5d587f253a9b469cb00e20dc1b5fe", "html_url": "https://github.com/rust-lang/rust/commit/996c6b7964a5d587f253a9b469cb00e20dc1b5fe"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "c6516d838ddc8d99bc6c6b9a3446dd0f92442091", "filename": "src/doc/unstable-book/src/compiler-flags/virtual-function-elimination.md", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a93ea7ebc83560c2c62243a9190eff09dd3a7e62/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fvirtual-function-elimination.md", "raw_url": "https://github.com/rust-lang/rust/raw/a93ea7ebc83560c2c62243a9190eff09dd3a7e62/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fvirtual-function-elimination.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fvirtual-function-elimination.md?ref=a93ea7ebc83560c2c62243a9190eff09dd3a7e62", "patch": "@@ -0,0 +1,39 @@\n+# `virtual-function-elimination`\n+\n+This option controls whether LLVM runs the Virtual Function Elimination (VFE)\n+optimization. This optimization in only available with LTO, so this flag can\n+only be passed if [`-Clto`][Clto] is also passed.\n+\n+VFE makes it possible to remove functions from vtables that are never\n+dynamically called by the rest of the code. Without this flag, LLVM makes the\n+really conservative assumption, that if any function in a vtable is called, no\n+function that is referenced by this vtable can be removed. With this flag\n+additional information are given to LLVM, so that it can determine which\n+functions are actually called and remove the unused functions.\n+\n+## Limitations\n+\n+At the time of writing this flag may remove vtable functions too eagerly. One\n+such example is in this code:\n+\n+```rust\n+trait Foo { fn foo(&self) { println!(\"foo\") } }\n+\n+impl Foo for usize {}\n+\n+pub struct FooBox(Box<dyn Foo>);\n+\n+pub fn make_foo() -> FooBox { FooBox(Box::new(0)) }\n+\n+#[inline]\n+pub fn f(a: FooBox) { a.0.foo() }\n+```\n+\n+In the above code the `Foo` trait is private, so an assumption is made that its\n+functions can only be seen/called from the current crate and can therefore get\n+optimized out, if unused. However, with `make_foo` you can produce a wrapped\n+`dyn Foo` type outside of the current crate, which can then be used in `f`. Due\n+to inlining of `f`, `Foo::foo` can then be called from a foreign crate. This can\n+lead to miscompilations.\n+\n+[Clto]: https://doc.rust-lang.org/rustc/codegen-options/index.html#lto"}]}