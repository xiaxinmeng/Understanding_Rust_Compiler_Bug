{"sha": "4e0c27bbfd263580c971aee1ef6960914e20a7ff", "node_id": "C_kwDOAAsO6NoAKDRlMGMyN2JiZmQyNjM1ODBjOTcxYWVlMWVmNjk2MDkxNGUyMGE3ZmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-27T16:22:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-27T16:26:55Z"}, "message": "Erase regions from CallArgument, add test + bless", "tree": {"sha": "383a8174260203b28e98d09b67b32191484122c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/383a8174260203b28e98d09b67b32191484122c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e0c27bbfd263580c971aee1ef6960914e20a7ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0c27bbfd263580c971aee1ef6960914e20a7ff", "html_url": "https://github.com/rust-lang/rust/commit/4e0c27bbfd263580c971aee1ef6960914e20a7ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e0c27bbfd263580c971aee1ef6960914e20a7ff/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dce44faf5b11cc9dd4491d7ed9211455f81bbdf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dce44faf5b11cc9dd4491d7ed9211455f81bbdf2", "html_url": "https://github.com/rust-lang/rust/commit/dce44faf5b11cc9dd4491d7ed9211455f81bbdf2"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "42c92e56e1623fd055409f6e6db85c23c28b4b09", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0c27bbfd263580c971aee1ef6960914e20a7ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0c27bbfd263580c971aee1ef6960914e20a7ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=4e0c27bbfd263580c971aee1ef6960914e20a7ff", "patch": "@@ -1630,7 +1630,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n             let op_arg_ty = self.normalize(op_arg_ty, term_location);\n             let category = if from_hir_call {\n-                ConstraintCategory::CallArgument(func_ty)\n+                ConstraintCategory::CallArgument(self.infcx.tcx.erase_regions(func_ty))\n             } else {\n                 ConstraintCategory::Boring\n             };"}, {"sha": "77841780f621655e91b0a9e098c5560efce79507", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e0c27bbfd263580c971aee1ef6960914e20a7ff/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0c27bbfd263580c971aee1ef6960914e20a7ff/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr?ref=4e0c27bbfd263580c971aee1ef6960914e20a7ff", "patch": "@@ -15,19 +15,19 @@ LL |     let a = bar(f, x);\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:40:13\n+  --> $DIR/project-fn-ret-invariant.rs:42:13\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n-LL |     let f = foo; // <-- No consistent type can be inferred for `f` here.\n-LL |     let a = bar(f, x);\n+...\n+LL |     let b = bar(f, y);\n    |             ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a function pointer to `foo`\n-   = note: the function `foo` is invariant over the parameter `'a`\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n help: `'a` and `'b` must be the same: replace one with the other"}, {"sha": "e043379133ab041caef74535d315b2b630cac0a2", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0c27bbfd263580c971aee1ef6960914e20a7ff/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0c27bbfd263580c971aee1ef6960914e20a7ff/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=4e0c27bbfd263580c971aee1ef6960914e20a7ff", "patch": "@@ -39,8 +39,8 @@ fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n     let f = foo; // <-- No consistent type can be inferred for `f` here.\n     let a = bar(f, x);\n     //[oneuse]~^ ERROR lifetime may not live long enough\n-    //[oneuse]~| ERROR lifetime may not live long enough\n     let b = bar(f, y);\n+    //[oneuse]~^ ERROR lifetime may not live long enough\n     (a, b)\n }\n "}, {"sha": "f1fa95f92469b49fd43ef8760929b703fd9260a5", "filename": "src/test/ui/borrowck/issue-103624.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4e0c27bbfd263580c971aee1ef6960914e20a7ff/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0c27bbfd263580c971aee1ef6960914e20a7ff/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.rs?ref=4e0c27bbfd263580c971aee1ef6960914e20a7ff", "patch": "@@ -0,0 +1,31 @@\n+// edition:2021\n+\n+struct StructA {\n+    b: StructB,\n+}\n+\n+async fn spawn_blocking<T>(f: impl (Fn() -> T) + Send + Sync + 'static) -> T {\n+    todo!()\n+}\n+\n+impl StructA {\n+    async fn foo(&self) {\n+        let bar = self.b.bar().await;\n+        spawn_blocking(move || {\n+            //~^ ERROR borrowed data escapes outside of associated function\n+            self.b;\n+            //~^ ERROR cannot move out of `self.b`, as `self` is a captured variable in an `Fn` closure\n+        })\n+        .await;\n+    }\n+}\n+\n+struct StructB {}\n+\n+impl StructB {\n+    async fn bar(&self) -> Option<u8> {\n+        None\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e6a35dd8801afc280faa41643ee659e24dea0d38", "filename": "src/test/ui/borrowck/issue-103624.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4e0c27bbfd263580c971aee1ef6960914e20a7ff/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0c27bbfd263580c971aee1ef6960914e20a7ff/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.stderr?ref=4e0c27bbfd263580c971aee1ef6960914e20a7ff", "patch": "@@ -0,0 +1,35 @@\n+error[E0507]: cannot move out of `self.b`, as `self` is a captured variable in an `Fn` closure\n+  --> $DIR/issue-103624.rs:16:13\n+   |\n+LL |     async fn foo(&self) {\n+   |                  ----- captured outer variable\n+LL |         let bar = self.b.bar().await;\n+LL |         spawn_blocking(move || {\n+   |                        ------- captured by this `Fn` closure\n+LL |\n+LL |             self.b;\n+   |             ^^^^^^ move occurs because `self.b` has type `StructB`, which does not implement the `Copy` trait\n+\n+error[E0521]: borrowed data escapes outside of associated function\n+  --> $DIR/issue-103624.rs:14:9\n+   |\n+LL |       async fn foo(&self) {\n+   |                    -----\n+   |                    |\n+   |                    `self` is a reference that is only valid in the associated function body\n+   |                    let's call the lifetime of this reference `'1`\n+LL |           let bar = self.b.bar().await;\n+LL | /         spawn_blocking(move || {\n+LL | |\n+LL | |             self.b;\n+LL | |\n+LL | |         })\n+   | |          ^\n+   | |          |\n+   | |__________`self` escapes the associated function body here\n+   |            argument requires that `'1` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0507, E0521.\n+For more information about an error, try `rustc --explain E0507`."}]}