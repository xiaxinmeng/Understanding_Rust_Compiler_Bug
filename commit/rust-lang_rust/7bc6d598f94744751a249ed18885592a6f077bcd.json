{"sha": "7bc6d598f94744751a249ed18885592a6f077bcd", "node_id": "C_kwDOAAsO6NoAKDdiYzZkNTk4Zjk0NzQ0NzUxYTI0OWVkMTg4ODU1OTJhNmYwNzdiY2Q", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-02T16:14:20Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-02T16:14:20Z"}, "message": "Avoid ICEing miri on layout query cycles", "tree": {"sha": "754bd0963ef2d70f95e950c5ae72d36059c283d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/754bd0963ef2d70f95e950c5ae72d36059c283d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc6d598f94744751a249ed18885592a6f077bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc6d598f94744751a249ed18885592a6f077bcd", "html_url": "https://github.com/rust-lang/rust/commit/7bc6d598f94744751a249ed18885592a6f077bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc6d598f94744751a249ed18885592a6f077bcd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b99493492ad59c7a44c65373558175db42b4151", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b99493492ad59c7a44c65373558175db42b4151", "html_url": "https://github.com/rust-lang/rust/commit/7b99493492ad59c7a44c65373558175db42b4151"}], "stats": {"total": 163, "additions": 119, "deletions": 44}, "files": [{"sha": "c6bbf2ef0cdb5bfdf986e7849e4e496149d60ba6", "filename": "compiler/rustc_middle/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bc6d598f94744751a249ed18885592a6f077bcd/compiler%2Frustc_middle%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7bc6d598f94744751a249ed18885592a6f077bcd/compiler%2Frustc_middle%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fmessages.ftl?ref=7bc6d598f94744751a249ed18885592a6f077bcd", "patch": "@@ -32,6 +32,9 @@ middle_values_too_big =\n middle_cannot_be_normalized =\n     unable to determine layout for `{$ty}` because `{$failure_ty}` cannot be normalized\n \n+middle_cycle =\n+    a cycle occurred during layout computation\n+\n middle_strict_coherence_needs_negative_coherence =\n     to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled\n     .label = due to this attribute"}, {"sha": "f2a2e67cf82dcbda5304da72f36f586540cddf13", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7bc6d598f94744751a249ed18885592a6f077bcd/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc6d598f94744751a249ed18885592a6f077bcd/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=7bc6d598f94744751a249ed18885592a6f077bcd", "patch": "@@ -210,6 +210,7 @@ pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),\n     SizeOverflow(Ty<'tcx>),\n     NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),\n+    Cycle,\n }\n \n impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n@@ -230,6 +231,9 @@ impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n                 diag.set_arg(\"failure_ty\", e.get_type_for_failure());\n                 diag.set_primary_message(fluent::middle_cannot_be_normalized);\n             }\n+            LayoutError::Cycle => {\n+                diag.set_primary_message(fluent::middle_cycle);\n+            }\n         }\n         diag\n     }\n@@ -250,6 +254,7 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n                 t,\n                 e.get_type_for_failure()\n             ),\n+            LayoutError::Cycle => write!(f, \"a cycle occurred during layout computation\"),\n         }\n     }\n }"}, {"sha": "c62c33d4dfc1894633378deca54b7aecb65adeff", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bc6d598f94744751a249ed18885592a6f077bcd/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc6d598f94744751a249ed18885592a6f077bcd/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=7bc6d598f94744751a249ed18885592a6f077bcd", "patch": "@@ -106,6 +106,12 @@ impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::EarlyBinder<ty::Binder<'_, ty::F\n     }\n }\n \n+impl<'tcx, T> Value<TyCtxt<'tcx>, DepKind> for Result<T, ty::layout::LayoutError<'_>> {\n+    fn from_cycle_error(_tcx: TyCtxt<'tcx>, _cycle: &[QueryInfo<DepKind>]) -> Self {\n+        Err(ty::layout::LayoutError::Cycle)\n+    }\n+}\n+\n // item_and_field_ids should form a cycle where each field contains the\n // type in the next element in the list\n pub fn recursive_type_error("}, {"sha": "20e09a548058ddcf536ef07e6bf35f116d2f39eb", "filename": "src/librustdoc/html/templates/type_layout.html", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/7bc6d598f94744751a249ed18885592a6f077bcd/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "raw_url": "https://github.com/rust-lang/rust/raw/7bc6d598f94744751a249ed18885592a6f077bcd/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html?ref=7bc6d598f94744751a249ed18885592a6f077bcd", "patch": "@@ -1,53 +1,58 @@\n-<h2 id=\"layout\" class=\"small-section-header\">  {# #}\n+<h2 id=\"layout\" class=\"small-section-header\"> {# #}\n     Layout<a href=\"#layout\" class=\"anchor\">\u00a7</a> {# #}\n </h2> {# #}\n <div class=\"docblock\"> {# #}\n     {% match type_layout_size %}\n-        {% when Ok(type_layout_size) %}\n-            <div class=\"warning\"> {# #}\n-                <p> {# #}\n-                    <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n-                    unstable</strong> and may even differ between compilations. {#+ #}\n-                    The only exception is types with certain <code>repr(...)</code> {#+ #}\n-                    attributes. Please see the Rust Reference\u2019s {#+ #}\n-                    <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">\u201cType Layout\u201d</a> {#+ #}\n-                    chapter for details on type layout guarantees. {# #}\n-                </p> {# #}\n-            </div> {# #}\n-            <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n-            {% if !variants.is_empty() %}\n-                <p> {# #}\n-                    <strong>Size for each variant:</strong> {# #}\n-                </p> {# #}\n-                <ul> {# #}\n-                    {% for (name, layout_size) in variants %}\n-                        <li> {# #}\n-                            <code>{{ name }}</code>: {#+ #}\n-                            {{ layout_size|safe }}\n-                        </li> {# #}\n-                    {% endfor %}\n-                </ul> {# #}\n-            {% endif %}\n-        {# This kind of layout error can occur with valid code, e.g. if you try to\n-           get the layout of a generic type such as `Vec<T>`. #}\n+    {% when Ok(type_layout_size) %}\n+    <div class=\"warning\"> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n+                unstable</strong> and may even differ between compilations. {#+ #}\n+            The only exception is types with certain <code>repr(...)</code> {#+ #}\n+            attributes. Please see the Rust Reference\u2019s {#+ #}\n+            <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">\u201cType Layout\u201d</a> {#+ #}\n+            chapter for details on type layout guarantees. {# #}\n+        </p> {# #}\n+    </div> {# #}\n+    <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n+    {% if !variants.is_empty() %}\n+    <p> {# #}\n+        <strong>Size for each variant:</strong> {# #}\n+    </p> {# #}\n+    <ul> {# #}\n+        {% for (name, layout_size) in variants %}\n+        <li> {# #}\n+            <code>{{ name }}</code>: {#+ #}\n+            {{ layout_size|safe }}\n+        </li> {# #}\n+        {% endfor %}\n+    </ul> {# #}\n+    {% endif %}\n+    {# This kind of layout error can occur with valid code, e.g. if you try to\n+    get the layout of a generic type such as `Vec<T>`. #}\n         {% when Err(LayoutError::Unknown(_)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Unable to compute type layout, {#+ #}\n-                possibly due to this type having generic parameters. {#+ #}\n-                Layout can only be computed for concrete, fully-instantiated types. {# #}\n-            </p> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Unable to compute type layout, {#+ #}\n+            possibly due to this type having generic parameters. {#+ #}\n+            Layout can only be computed for concrete, fully-instantiated types. {# #}\n+        </p> {# #}\n         {# This kind of error probably can't happen with valid code, but we don't\n-           want to panic and prevent the docs from building, so we just let the\n-           user know that we couldn't compute the layout. #}\n+        want to panic and prevent the docs from building, so we just let the\n+        user know that we couldn't compute the layout. #}\n         {% when Err(LayoutError::SizeOverflow(_)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n-                the type was too big. {# #}\n-            </p> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type was too big. {# #}\n+        </p> {# #}\n         {% when Err(LayoutError::NormalizationFailure(_, _)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n-                the type failed to be normalized. {# #}\n-            </p> {# #}\n-    {% endmatch %}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type failed to be normalized. {# #}\n+        </p> {# #}\n+        {% when Err(LayoutError::Cycle) %}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type's layout depended on the type's layout itself. {# #}\n+        </p> {# #}\n+        {% endmatch %}\n </div> {# #}"}, {"sha": "d050310bd805ccb2a4700cc8033b7a449fd9e58f", "filename": "src/tools/miri/tests/fail/layout_cycle.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7bc6d598f94744751a249ed18885592a6f077bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc6d598f94744751a249ed18885592a6f077bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs?ref=7bc6d598f94744751a249ed18885592a6f077bcd", "patch": "@@ -0,0 +1,28 @@\n+//@error-pattern: a cycle occurred during layout computation\n+//~^ ERROR: cycle detected when computing layout of\n+\n+use std::mem;\n+\n+pub struct S<T: Tr> {\n+    pub f: <T as Tr>::I,\n+}\n+\n+pub trait Tr {\n+    type I: Tr;\n+}\n+\n+impl<T: Tr> Tr for S<T> {\n+    type I = S<S<T>>;\n+}\n+\n+impl Tr for () {\n+    type I = ();\n+}\n+\n+fn foo<T: Tr>() -> usize {\n+    mem::size_of::<S<T>>()\n+}\n+\n+fn main() {\n+    println!(\"{}\", foo::<S<()>>());\n+}"}, {"sha": "62b7d5fb77d12f3141a50952d6d64e67ed6fb521", "filename": "src/tools/miri/tests/fail/layout_cycle.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7bc6d598f94744751a249ed18885592a6f077bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bc6d598f94744751a249ed18885592a6f077bcd/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr?ref=7bc6d598f94744751a249ed18885592a6f077bcd", "patch": "@@ -0,0 +1,28 @@\n+error[E0391]: cycle detected when computing layout of `S<S<()>>`\n+   |\n+   = note: ...which requires computing layout of `<S<()> as Tr>::I`...\n+   = note: ...which again requires computing layout of `S<S<()>>`, completing the cycle\n+\n+error: post-monomorphization error: a cycle occurred during layout computation\n+  --> RUSTLIB/core/src/mem/mod.rs:LL:CC\n+   |\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ a cycle occurred during layout computation\n+   |\n+   = note: inside `std::mem::size_of::<S<S<()>>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n+note: inside `foo::<S<()>>`\n+  --> $DIR/layout_cycle.rs:LL:CC\n+   |\n+LL |     mem::size_of::<S<T>>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `main`\n+  --> $DIR/layout_cycle.rs:LL:CC\n+   |\n+LL |     println!(\"{}\", foo::<S<()>>());\n+   |                    ^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0391`."}]}