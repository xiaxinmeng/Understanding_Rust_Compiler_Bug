{"sha": "1cd184d6539478c7e54c92835902921976dce5d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZDE4NGQ2NTM5NDc4YzdlNTRjOTI4MzU5MDI5MjE5NzZkY2U1ZDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-10T07:12:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-10T07:12:54Z"}, "message": "use either for uses", "tree": {"sha": "3b6e19f4556f85c2875ae3e6376f35fe3f34d17a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b6e19f4556f85c2875ae3e6376f35fe3f34d17a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cd184d6539478c7e54c92835902921976dce5d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd184d6539478c7e54c92835902921976dce5d1", "html_url": "https://github.com/rust-lang/rust/commit/1cd184d6539478c7e54c92835902921976dce5d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cd184d6539478c7e54c92835902921976dce5d1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b863272899a1bae63c7d9411d0ebff74652bae8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b863272899a1bae63c7d9411d0ebff74652bae8e", "html_url": "https://github.com/rust-lang/rust/commit/b863272899a1bae63c7d9411d0ebff74652bae8e"}], "stats": {"total": 84, "additions": 40, "deletions": 44}, "files": [{"sha": "f13a6b37ac6cbb059779fb0b60d467c98bbf3bfe", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=1cd184d6539478c7e54c92835902921976dce5d1", "patch": "@@ -4,7 +4,7 @@ use ra_db::{CrateId, SourceRootId, Edition};\n use ra_syntax::{ast::self, TreeArc};\n \n use crate::{\n-    Name, ScopesWithSourceMap, Ty, HirFileId, ImportSource,\n+    Name, ScopesWithSourceMap, Ty, HirFileId, Either,\n     HirDatabase, DefDatabase,\n     type_ref::TypeRef,\n     nameres::{ModuleScope, Namespace, ImportId, CrateModuleId},\n@@ -117,8 +117,14 @@ impl Module {\n     }\n \n     /// Returns the syntax of the last path segment corresponding to this import\n-    pub fn import_source(&self, db: &impl HirDatabase, import: ImportId) -> ImportSource {\n-        self.import_source_impl(db, import)\n+    pub fn import_source(\n+        &self,\n+        db: &impl HirDatabase,\n+        import: ImportId,\n+    ) -> Either<TreeArc<ast::UseTree>, TreeArc<ast::ExternCrateItem>> {\n+        let (file_id, source) = self.definition_source(db);\n+        let (_, source_map) = db.raw_items_with_source_map(file_id);\n+        source_map.get(&source, import)\n     }\n \n     /// Returns the crate this module is part of."}, {"sha": "5c2ea73ce60748a5fda6e779f227e3e995da934d", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=1cd184d6539478c7e54c92835902921976dce5d1", "patch": "@@ -3,9 +3,9 @@ use ra_syntax::{ast, TreeArc};\n \n use crate::{\n     Module, ModuleSource, Name, AstId,\n-    nameres::{CrateModuleId, ImportId},\n+    nameres::CrateModuleId,\n     HirDatabase, DefDatabase,\n-    HirFileId, ImportSource,\n+    HirFileId,\n };\n \n impl ModuleSource {\n@@ -68,16 +68,6 @@ impl Module {\n         Some((decl.file_id(), ast))\n     }\n \n-    pub(crate) fn import_source_impl(\n-        &self,\n-        db: &impl HirDatabase,\n-        import: ImportId,\n-    ) -> ImportSource {\n-        let (file_id, source) = self.definition_source(db);\n-        let (_, source_map) = db.raw_items_with_source_map(file_id);\n-        source_map.get(&source, import)\n-    }\n-\n     pub(crate) fn crate_root_impl(&self, db: &impl DefDatabase) -> Module {\n         let def_map = db.crate_def_map(self.krate);\n         self.with_module_id(def_map.root())"}, {"sha": "6714529d9d21592933b381122ea2d1e15010c253", "filename": "crates/ra_hir/src/either.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Feither.rs?ref=1cd184d6539478c7e54c92835902921976dce5d1", "patch": "@@ -0,0 +1,18 @@\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub enum Either<A, B> {\n+    A(A),\n+    B(B),\n+}\n+\n+impl<A, B> Either<A, B> {\n+    pub fn map<U, V, F1, F2>(self, f1: F1, f2: F2) -> Either<U, V>\n+    where\n+        F1: FnOnce(A) -> U,\n+        F2: FnOnce(B) -> V,\n+    {\n+        match self {\n+            Either::A(a) => Either::A(f1(a)),\n+            Either::B(b) => Either::B(f2(b)),\n+        }\n+    }\n+}"}, {"sha": "0881939a20c990981d95a871c41c5f661e0006f0", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=1cd184d6539478c7e54c92835902921976dce5d1", "patch": "@@ -17,6 +17,8 @@ macro_rules! impl_froms {\n     }\n }\n \n+mod either;\n+\n pub mod db;\n #[macro_use]\n pub mod mock;\n@@ -52,11 +54,12 @@ use crate::{\n };\n \n pub use self::{\n+    either::Either,\n     path::{Path, PathKind},\n     name::Name,\n     source_id::{AstIdMap, ErasedFileAstId},\n     ids::{HirFileId, MacroDefId, MacroCallId, MacroCallLoc},\n-    nameres::{PerNs, Namespace, ImportId, ImportSource},\n+    nameres::{PerNs, Namespace, ImportId},\n     ty::{Ty, ApplicationTy, TypeCtor, Substs, display::HirDisplay},\n     impl_block::{ImplBlock, ImplItem},\n     docs::{Docs, Documentation},"}, {"sha": "0eddfab127af53fe59f257cae494f5f17c361eb1", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=1cd184d6539478c7e54c92835902921976dce5d1", "patch": "@@ -75,7 +75,7 @@ pub(crate) use self::raw::{RawItems, ImportSourceMap};\n \n pub use self::{\n     per_ns::{PerNs, Namespace},\n-    raw::{ImportId, ImportSource},\n+    raw::ImportId,\n };\n \n /// Contans all top-level defs from a macro-expanded crate"}, {"sha": "43c97a0bf3f5157333d2ef7d77c5366d0cc5d40f", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd184d6539478c7e54c92835902921976dce5d1/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=1cd184d6539478c7e54c92835902921976dce5d1", "patch": "@@ -12,7 +12,7 @@ use ra_syntax::{\n \n use crate::{\n     DefDatabase, Name, AsName, Path, HirFileId, ModuleSource,\n-    AstIdMap, FileAstId,\n+    AstIdMap, FileAstId, Either,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -34,28 +34,15 @@ pub struct ImportSourceMap {\n     map: ArenaMap<ImportId, ImportSourcePtr>,\n }\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-enum ImportSourcePtr {\n-    UseTree(AstPtr<ast::UseTree>),\n-    ExternCrate(AstPtr<ast::ExternCrateItem>),\n-}\n+type ImportSourcePtr = Either<AstPtr<ast::UseTree>, AstPtr<ast::ExternCrateItem>>;\n+type ImportSource = Either<TreeArc<ast::UseTree>, TreeArc<ast::ExternCrateItem>>;\n \n impl ImportSourcePtr {\n     fn to_node(self, file: &SourceFile) -> ImportSource {\n-        match self {\n-            ImportSourcePtr::UseTree(ptr) => ImportSource::UseTree(ptr.to_node(file).to_owned()),\n-            ImportSourcePtr::ExternCrate(ptr) => {\n-                ImportSource::ExternCrate(ptr.to_node(file).to_owned())\n-            }\n-        }\n+        self.map(|ptr| ptr.to_node(file).to_owned(), |ptr| ptr.to_node(file).to_owned())\n     }\n }\n \n-pub enum ImportSource {\n-    UseTree(TreeArc<ast::UseTree>),\n-    ExternCrate(TreeArc<ast::ExternCrateItem>),\n-}\n-\n impl ImportSourceMap {\n     fn insert(&mut self, import: ImportId, ptr: ImportSourcePtr) {\n         self.map.insert(import, ptr)\n@@ -281,11 +268,7 @@ impl RawItemsCollector {\n         Path::expand_use_item(use_item, |path, use_tree, is_glob, alias| {\n             let import_data =\n                 ImportData { path, alias, is_glob, is_prelude, is_extern_crate: false };\n-            self.push_import(\n-                current_module,\n-                import_data,\n-                ImportSourcePtr::UseTree(AstPtr::new(use_tree)),\n-            );\n+            self.push_import(current_module, import_data, Either::A(AstPtr::new(use_tree)));\n         })\n     }\n \n@@ -304,11 +287,7 @@ impl RawItemsCollector {\n                 is_prelude: false,\n                 is_extern_crate: true,\n             };\n-            self.push_import(\n-                current_module,\n-                import_data,\n-                ImportSourcePtr::ExternCrate(AstPtr::new(extern_crate)),\n-            );\n+            self.push_import(current_module, import_data, Either::B(AstPtr::new(extern_crate)));\n         }\n     }\n "}]}