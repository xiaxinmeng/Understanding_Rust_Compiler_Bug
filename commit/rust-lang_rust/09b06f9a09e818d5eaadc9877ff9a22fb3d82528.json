{"sha": "09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YjA2ZjlhMDllODE4ZDVlYWFkYzk4NzdmZjlhMjJmYjNkODI1Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-27T00:25:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-27T00:25:52Z"}, "message": "Auto merge of #75966 - Dylan-DPC:rollup-srfpces, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #74730 (Hexagon libstd: update type defs)\n - #75758 (Fixes for VxWorks)\n - #75780 (Unconfuse Unpin docs a bit)\n - #75806 (Prevent automatic page change when using history)\n - #75818 (Update docs for SystemTime Windows implementation)\n - #75837 (Fix font color for help button in ayu and dark themes)\n - #75870 (Unify theme choices border color in ayu theme)\n - #75875 (Shorten liballoc vec resize intra-doc link)\n - #75953 (Fix swapped stability attributes for rustdoc lints)\n - #75958 (Avoid function-scoping global variables)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "14efdb214aace2a620e6cf4557ef570a82ea7cfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14efdb214aace2a620e6cf4557ef570a82ea7cfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "html_url": "https://github.com/rust-lang/rust/commit/09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45a83e97ccc70a99794346eb60c11e209c67ecba", "url": "https://api.github.com/repos/rust-lang/rust/commits/45a83e97ccc70a99794346eb60c11e209c67ecba", "html_url": "https://github.com/rust-lang/rust/commit/45a83e97ccc70a99794346eb60c11e209c67ecba"}, {"sha": "8fd73aa45de5f4d9445a0c8b6f2672826b927442", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd73aa45de5f4d9445a0c8b6f2672826b927442", "html_url": "https://github.com/rust-lang/rust/commit/8fd73aa45de5f4d9445a0c8b6f2672826b927442"}], "stats": {"total": 165, "additions": 86, "deletions": 79}, "files": [{"sha": "b4ad238680f790b1c60e7be363593bdfeb237514", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -1456,9 +1456,9 @@ impl<T> Vec<T> {\n     /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n     ///\n     /// This method uses a closure to create new values on every push. If\n-    /// you'd rather [`Clone`] a given value, use [`resize`]. If you want\n-    /// to use the [`Default`] trait to generate values, you can pass\n-    /// [`Default::default()`] as the second argument.\n+    /// you'd rather [`Clone`] a given value, use [`Vec::resize`]. If you\n+    /// want to use the [`Default`] trait to generate values, you can\n+    /// pass [`Default::default`] as the second argument.\n     ///\n     /// # Examples\n     ///\n@@ -1472,8 +1472,6 @@ impl<T> Vec<T> {\n     /// vec.resize_with(4, || { p *= 2; p });\n     /// assert_eq!(vec, [2, 4, 8, 16]);\n     /// ```\n-    ///\n-    /// [`resize`]: Vec::resize\n     #[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]\n     pub fn resize_with<F>(&mut self, new_len: usize, f: F)\n     where"}, {"sha": "b44ca95b00230b712fbff11bb805057ed0ba42f6", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -728,23 +728,23 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n \n /// Types that can be safely moved after being pinned.\n ///\n-/// Since Rust itself has no notion of immovable types, and considers moves\n-/// (e.g., through assignment or [`mem::replace`]) to always be safe,\n-/// this trait cannot prevent types from moving by itself.\n+/// Rust itself has no notion of immovable types, and considers moves (e.g.,\n+/// through assignment or [`mem::replace`]) to always be safe.\n ///\n-/// Instead it is used to prevent moves through the type system,\n-/// by controlling the behavior of pointers `P` wrapped in the [`Pin<P>`] wrapper,\n-/// which \"pin\" the type in place by not allowing it to be moved out of them.\n-/// See the [`pin module`] documentation for more information on pinning.\n+/// The [`Pin`][Pin] type is used instead to prevent moves through the type\n+/// system. Pointers `P<T>` wrapped in the [`Pin<P<T>>`][Pin] wrapper can't be\n+/// moved out of. See the [`pin module`] documentation for more information on\n+/// pinning.\n ///\n-/// Implementing this trait lifts the restrictions of pinning off a type,\n-/// which then allows it to move out with functions such as [`mem::replace`].\n+/// Implementing the `Unpin` trait for `T` lifts the restrictions of pinning off\n+/// the type, which then allows moving `T` out of [`Pin<P<T>>`][Pin] with\n+/// functions such as [`mem::replace`].\n ///\n /// `Unpin` has no consequence at all for non-pinned data. In particular,\n /// [`mem::replace`] happily moves `!Unpin` data (it works for any `&mut T`, not\n-/// just when `T: Unpin`). However, you cannot use\n-/// [`mem::replace`] on data wrapped inside a [`Pin<P>`] because you cannot get the\n-/// `&mut T` you need for that, and *that* is what makes this system work.\n+/// just when `T: Unpin`). However, you cannot use [`mem::replace`] on data\n+/// wrapped inside a [`Pin<P<T>>`][Pin] because you cannot get the `&mut T` you\n+/// need for that, and *that* is what makes this system work.\n ///\n /// So this, for example, can only be done on types implementing `Unpin`:\n ///\n@@ -765,8 +765,8 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// This trait is automatically implemented for almost every type.\n ///\n /// [`mem::replace`]: ../../std/mem/fn.replace.html\n-/// [`Pin<P>`]: ../pin/struct.Pin.html\n-/// [`pin module`]: ../../std/pin/index.html\n+/// [Pin]: crate::pin::Pin\n+/// [`pin module`]: crate::pin\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n #[rustc_on_unimplemented(\n     on(_Self = \"std::future::Future\", note = \"consider using `Box::pin`\",),"}, {"sha": "1950ffcb21b6755187362b71568a692b26d8674f", "filename": "library/std/src/os/linux/raw.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -170,63 +170,63 @@ mod arch {\n \n #[cfg(target_arch = \"hexagon\")]\n mod arch {\n-    use crate::os::raw::{c_int, c_long, c_longlong, c_ulonglong};\n+    use crate::os::raw::{c_int, c_long, c_uint};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type blkcnt_t = c_longlong;\n+    pub type blkcnt_t = i64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type blksize_t = c_long;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type ino_t = c_ulonglong;\n+    pub type ino_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type nlink_t = c_uint;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type off_t = c_longlong;\n+    pub type off_t = i64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type time_t = c_long;\n+    pub type time_t = i64;\n \n     #[repr(C)]\n     #[derive(Clone)]\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub struct stat {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_dev: ::dev_t,\n+        pub st_dev: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ino: ::c_ulonglong,\n+        pub st_ino: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mode: ::c_uint,\n+        pub st_mode: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_nlink: ::c_uint,\n+        pub st_nlink: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_uid: ::c_uint,\n+        pub st_uid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_gid: ::c_uint,\n+        pub st_gid: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_rdev: ::c_ulonglong,\n+        pub st_rdev: u64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad1: ::c_ulong,\n+        pub __pad1: u32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_size: ::c_longlong,\n+        pub st_size: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blksize: ::blksize_t,\n+        pub st_blksize: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad2: ::c_int,\n+        pub __pad2: i32,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_blocks: ::blkcnt_t,\n+        pub st_blocks: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: ::time_t,\n+        pub st_atime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime_nsec: ::c_long,\n+        pub st_atime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: ::time_t,\n+        pub st_mtime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime_nsec: ::c_long,\n+        pub st_mtime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: ::time_t,\n+        pub st_ctime: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime_nsec: ::c_long,\n+        pub st_ctime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub __pad3: [::c_int; 2],\n+        pub __pad3: [c_int; 2],\n     }\n }\n "}, {"sha": "d58468ad539ff92ca0a9d4d96fd260c01d7329b2", "filename": "library/std/src/sys/vxworks/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Ffd.rs?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -53,7 +53,7 @@ impl FileDesc {\n     }\n \n     #[inline]\n-    fn is_read_vectored(&self) -> bool {\n+    pub fn is_read_vectored(&self) -> bool {\n         true\n     }\n "}, {"sha": "6473a0c3cec41aa764d824f02a81f1765773b781", "filename": "library/std/src/sys/vxworks/process/process_common.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -351,28 +351,19 @@ impl ExitStatus {\n     }\n \n     fn exited(&self) -> bool {\n-        /*unsafe*/\n-        { libc::WIFEXITED(self.0) }\n+        libc::WIFEXITED(self.0)\n     }\n \n     pub fn success(&self) -> bool {\n         self.code() == Some(0)\n     }\n \n     pub fn code(&self) -> Option<i32> {\n-        if self.exited() {\n-            Some(/*unsafe*/ { libc::WEXITSTATUS(self.0) })\n-        } else {\n-            None\n-        }\n+        if self.exited() { Some(libc::WEXITSTATUS(self.0)) } else { None }\n     }\n \n     pub fn signal(&self) -> Option<i32> {\n-        if !self.exited() {\n-            Some(/*unsafe*/ { libc::WTERMSIG(self.0) })\n-        } else {\n-            None\n-        }\n+        if !self.exited() { Some(libc::WTERMSIG(self.0)) } else { None }\n     }\n }\n "}, {"sha": "5391ed83ebc36267e5932ba1723411bdc3e722a6", "filename": "library/std/src/sys/vxworks/thread_local_dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -2,6 +2,6 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n-    use crate::sys_common::thread_local::register_dtor_fallback;\n+    use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n     register_dtor_fallback(t, dtor);\n }"}, {"sha": "c8aee1da39b394dffa7d6ba7e233ea93f4cac5b5", "filename": "library/std/src/time.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -159,14 +159,15 @@ pub struct Instant(time::Instant);\n /// | DARWIN    | [gettimeofday]                                                       |\n /// | VXWorks   | [clock_gettime (Realtime Clock)]                                     |\n /// | WASI      | [__wasi_clock_time_get (Realtime Clock)]                             |\n-/// | Windows   | [GetSystemTimeAsFileTime]                                            |\n+/// | Windows   | [GetSystemTimePreciseAsFileTime] / [GetSystemTimeAsFileTime]         |\n ///\n /// [clock_time_get (Realtime Clock)]: https://nuxi.nl/cloudabi/#clock_time_get\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n /// [gettimeofday]: http://man7.org/linux/man-pages/man2/gettimeofday.2.html\n /// [clock_gettime (Realtime Clock)]: https://linux.die.net/man/3/clock_gettime\n /// [__wasi_clock_time_get (Realtime Clock)]: https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#clock_time_get\n+/// [GetSystemTimePreciseAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimepreciseasfiletime\n /// [GetSystemTimeAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimeasfiletime\n ///\n /// **Disclaimer:** These system calls might change over time."}, {"sha": "d50e4cf52697a30bd96338ba12c11e01a852f8cf", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -132,7 +132,8 @@ pub fn find(build: &mut Build) {\n             false\n         };\n \n-        if cxx_configured {\n+        // for VxWorks, record CXX compiler which will be used in lib.rs:linker()\n+        if cxx_configured || target.contains(\"vxworks\") {\n             let compiler = cfg.get_compiler();\n             build.cxx.insert(target, compiler);\n         }"}, {"sha": "191cc5b0b64ca85db834c46305059b9de884ab44", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -854,6 +854,10 @@ impl Build {\n         if let Some(linker) = self.config.target_config.get(&target).and_then(|c| c.linker.as_ref())\n         {\n             Some(linker)\n+        } else if target.contains(\"vxworks\") {\n+            // need to use CXX compiler as linker to resolve the exception functions\n+            // that are only existed in CXX libraries\n+            Some(self.cxx[&target].path())\n         } else if target != self.config.build\n             && util::use_host_linker(target)\n             && !target.contains(\"msvc\")"}, {"sha": "57c8d5bff76739876c002ba463e6048c8f8bd3c4", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -1576,14 +1576,21 @@ function defocusSearchBar() {\n         }\n \n         function showResults(results) {\n-            if (results.others.length === 1 &&\n-                getCurrentValue(\"rustdoc-go-to-only-result\") === \"true\") {\n+            var search = getSearchElement();\n+            if (results.others.length === 1\n+                && getCurrentValue(\"rustdoc-go-to-only-result\") === \"true\"\n+                // By default, the search DOM element is \"empty\" (meaning it has no children not\n+                // text content). Once a search has been run, it won't be empty, even if you press\n+                // ESC or empty the search input (which also \"cancels\" the search).\n+                && (!search.firstChild || search.firstChild.innerText !== getSearchLoadingText()))\n+            {\n                 var elem = document.createElement(\"a\");\n                 elem.href = results.others[0].href;\n                 elem.style.display = \"none\";\n                 // For firefox, we need the element to be in the DOM so it can be clicked.\n                 document.body.appendChild(elem);\n                 elem.click();\n+                return;\n             }\n             var query = getQuery(search_input.value);\n \n@@ -1602,7 +1609,6 @@ function defocusSearchBar() {\n                 \"</div><div id=\\\"results\\\">\" +\n                 ret_others[0] + ret_in_args[0] + ret_returned[0] + \"</div>\";\n \n-            var search = getSearchElement();\n             search.innerHTML = output;\n             showSearchResults(search);\n             var tds = search.getElementsByTagName(\"td\");\n@@ -2679,6 +2685,10 @@ function defocusSearchBar() {\n         }\n     }\n \n+    function getSearchLoadingText() {\n+        return \"Loading search results...\";\n+    }\n+\n     if (search_input) {\n         search_input.onfocus = function() {\n             putBackSearch(this);\n@@ -2688,7 +2698,7 @@ function defocusSearchBar() {\n     var params = getQueryStringParams();\n     if (params && params.search) {\n         var search = getSearchElement();\n-        search.innerHTML = \"<h3 style=\\\"text-align: center;\\\">Loading search results...</h3>\";\n+        search.innerHTML = \"<h3 style=\\\"text-align: center;\\\">\" + getSearchLoadingText() + \"</h3>\";\n         showSearchResults(search);\n     }\n "}, {"sha": "f7d474b5562be41b42b202f0181f1ad59e738b8d", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -495,6 +495,7 @@ kbd {\n #theme-picker, #settings-menu, .help-button {\n \tborder-color: #5c6773;\n \tbackground-color: #0f1419;\n+\tcolor: #fff;\n }\n \n #theme-picker > img, #settings-menu > img {\n@@ -513,7 +514,7 @@ kbd {\n }\n \n #theme-choices > button:not(:first-child) {\n-\tborder-top-color: #c5c5c5;\n+\tborder-top-color: #5c6773;\n }\n \n #theme-choices > button:hover, #theme-choices > button:focus {"}, {"sha": "f5a853377684385708c93ce73f039874c4b9116c", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -389,6 +389,7 @@ kbd {\n #theme-picker, #settings-menu, .help-button {\n \tborder-color: #e0e0e0;\n \tbackground: #f0f0f0;\n+\tcolor: #000;\n }\n \n #theme-picker:hover, #theme-picker:focus,"}, {"sha": "367f93cfd38938547ab381cd0abaf4414d0aa011", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -1,7 +1,7 @@\n //! This pass is overloaded and runs two different lints.\n //!\n-//! - MISSING_DOC_CODE_EXAMPLES: this looks for public items missing doc-tests\n-//! - PRIVATE_DOC_TESTS: this looks for private items with doc-tests.\n+//! - MISSING_DOC_CODE_EXAMPLES: this lint is **UNSTABLE** and looks for public items missing doc-tests\n+//! - PRIVATE_DOC_TESTS: this lint is **STABLE** and looks for private items with doc-tests.\n \n use super::{span_of_attrs, Pass};\n use crate::clean;\n@@ -89,7 +89,9 @@ pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n \n     find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n \n-    if tests.found_tests == 0 {\n+    if tests.found_tests == 0\n+        && rustc_feature::UnstableFeatures::from_environment().is_nightly_build()\n+    {\n         if should_have_doc_example(&item.inner) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n             let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n@@ -100,9 +102,7 @@ pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n                 |lint| lint.build(\"missing code example in this documentation\").emit(),\n             );\n         }\n-    } else if rustc_feature::UnstableFeatures::from_environment().is_nightly_build()\n-        && tests.found_tests > 0\n-        && !cx.renderinfo.borrow().access_levels.is_public(item.def_id)\n+    } else if tests.found_tests > 0 && !cx.renderinfo.borrow().access_levels.is_public(item.def_id)\n     {\n         cx.tcx.struct_span_lint_hir(\n             lint::builtin::PRIVATE_DOC_TESTS,"}, {"sha": "9cfde0c232b337deb85565851fc1f28903e78e6a", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/09b06f9a09e818d5eaadc9877ff9a22fb3d82528/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=09b06f9a09e818d5eaadc9877ff9a22fb3d82528", "patch": "@@ -275,7 +275,12 @@ def update_latest(\n         return message\n \n \n-def main():\n+# Warning: Do not try to add a function containing the body of this try block.\n+# There are variables declared within that are implicitly global; it is unknown\n+# which ones precisely but at least this is true for `github_token`.\n+try:\n+    if __name__ != '__main__':\n+        exit(0)\n     repo = os.environ.get('TOOLSTATE_VALIDATE_MAINTAINERS_REPO')\n     if repo:\n         github_token = os.environ.get('TOOLSTATE_REPO_ACCESS_TOKEN')\n@@ -342,11 +347,6 @@ def main():\n         }\n     ))\n     response.read()\n-\n-\n-if __name__ == '__main__':\n-    try:\n-        main()\n-    except urllib2.HTTPError as e:\n-        print(\"HTTPError: %s\\n%s\" % (e, e.read()))\n-        raise\n+except urllib2.HTTPError as e:\n+    print(\"HTTPError: %s\\n%s\" % (e, e.read()))\n+    raise"}]}