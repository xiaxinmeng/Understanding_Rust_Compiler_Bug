{"sha": "890ec6f7987af9fee0675502db1d419a12f9071c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MGVjNmY3OTg3YWY5ZmVlMDY3NTUwMmRiMWQ0MTlhMTJmOTA3MWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-20T13:50:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T13:50:44Z"}, "message": "Merge #2612\n\n2612: Fix resolve for field init shorthand r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9e4ff021db736a76bc82555886d868cd7429f021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e4ff021db736a76bc82555886d868cd7429f021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/890ec6f7987af9fee0675502db1d419a12f9071c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/NG0CRBK7hj4Ov3rIwAAdHIIABzoGVveZSWx8CXw0d/qTSpz\neYEQvBGmkcukH6rLz6i3xv55JsOGAMEqxE/1M0HhcIp4HBN64jIGa/dCAto3RBLT\nJ5PPI1rHPiQDW7UmkrTV22rJK56JUW67U0T1grzSJZFTvtfXH64iYDFFRUftYw/S\neZnPmn1VGSZFHLYIr0fR8HvFEGds2x+NXunmXEKZEkR2+1evFPEReZWOW6Tq7kVq\n5pfGBz6+zVpc16xEWyvbXHidFBfHLHho8Ol/jNFswAPOycdnKpnR2/LFMcJ2btPB\ns6qInTrFupUCaEqWSgMNPOHjHX7tb9AEjButTIVcmfdaJG07kimQfKGpxdoRIjw=\n=w2Pt\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e4ff021db736a76bc82555886d868cd7429f021\nparent a0571359f3ea5361f1676b0777b578c6deefdc7d\nparent 3d4b48e481da35f19366514c0e22ed42fef037a0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576849844 +0000\ncommitter GitHub <noreply@github.com> 1576849844 +0000\n\nMerge #2612\n\n2612: Fix resolve for field init shorthand r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/890ec6f7987af9fee0675502db1d419a12f9071c", "html_url": "https://github.com/rust-lang/rust/commit/890ec6f7987af9fee0675502db1d419a12f9071c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/890ec6f7987af9fee0675502db1d419a12f9071c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0571359f3ea5361f1676b0777b578c6deefdc7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0571359f3ea5361f1676b0777b578c6deefdc7d", "html_url": "https://github.com/rust-lang/rust/commit/a0571359f3ea5361f1676b0777b578c6deefdc7d"}, {"sha": "3d4b48e481da35f19366514c0e22ed42fef037a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4b48e481da35f19366514c0e22ed42fef037a0", "html_url": "https://github.com/rust-lang/rust/commit/3d4b48e481da35f19366514c0e22ed42fef037a0"}], "stats": {"total": 104, "additions": 68, "deletions": 36}, "files": [{"sha": "42ca55fe727d2e22e124ec6d2b4ee31e88ebe382", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=890ec6f7987af9fee0675502db1d419a12f9071c", "patch": "@@ -1,4 +1,6 @@\n-//! FIXME: write short doc here\n+//! Finds a corresponding hir data structure for a syntax node in a specific\n+//! file.\n+\n use hir_def::{\n     child_by_source::ChildBySource, dyn_map::DynMap, keys, keys::Key, nameres::ModuleSource,\n     ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId, ImplId, ModuleId,\n@@ -11,14 +13,14 @@ use ra_syntax::{\n };\n \n use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n+    db::{DefDatabase, HirDatabase},\n     Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, ImplBlock, InFile, Local,\n     MacroDef, Module, Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n };\n \n pub trait FromSource: Sized {\n     type Ast;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self>;\n+    fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self>;\n }\n \n pub trait FromSourceByContainer: Sized {\n@@ -32,7 +34,7 @@ where\n     T: From<<T as FromSourceByContainer>::Id>,\n {\n     type Ast = <T as FromSourceByContainer>::Ast;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self> {\n         analyze_container(db, src.as_ref().map(|it| it.syntax()))[T::KEY]\n             .get(&src)\n             .copied()\n@@ -64,7 +66,7 @@ from_source_by_container_impls![\n \n impl FromSource for MacroDef {\n     type Ast = ast::MacroCall;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self> {\n         let kind = MacroDefKind::Declarative;\n \n         let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n@@ -80,7 +82,7 @@ impl FromSource for MacroDef {\n \n impl FromSource for EnumVariant {\n     type Ast = ast::EnumVariant;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self> {\n         let parent_enum = src.value.parent_enum();\n         let src_enum = InFile { file_id: src.file_id, value: parent_enum };\n         let parent_enum = Enum::from_source(db, src_enum)?;\n@@ -93,7 +95,7 @@ impl FromSource for EnumVariant {\n \n impl FromSource for StructField {\n     type Ast = FieldSource;\n-    fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n+    fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self> {\n         let src = src.as_ref();\n \n         // FIXME this is buggy"}, {"sha": "b60a6b87e4661dd1361bf86985705b06930bb848", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=890ec6f7987af9fee0675502db1d419a12f9071c", "patch": "@@ -237,7 +237,13 @@ impl SourceAnalyzer {\n     }\n \n     pub fn resolve_record_field(&self, field: &ast::RecordField) -> Option<crate::StructField> {\n-        let expr_id = self.expr_id(&field.expr()?)?;\n+        let expr_id = match field.expr() {\n+            Some(it) => self.expr_id(&it)?,\n+            None => {\n+                let src = InFile { file_id: self.file_id, value: field };\n+                self.body_source_map.as_ref()?.field_init_shorthand_expr(src)?\n+            }\n+        };\n         self.infer.as_ref()?.record_field_resolution(expr_id).map(|it| it.into())\n     }\n "}, {"sha": "401fe0b9b55c23813b76fe2fab96f1776313b9d6", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=890ec6f7987af9fee0675502db1d419a12f9071c", "patch": "@@ -229,6 +229,11 @@ impl BodySourceMap {\n         self.expr_map.get(&src).cloned()\n     }\n \n+    pub fn field_init_shorthand_expr(&self, node: InFile<&ast::RecordField>) -> Option<ExprId> {\n+        let src = node.map(|it| Either::Right(AstPtr::new(it)));\n+        self.expr_map.get(&src).cloned()\n+    }\n+\n     pub fn pat_syntax(&self, pat: PatId) -> Option<PatSource> {\n         self.pat_map_back.get(pat).copied()\n     }"}, {"sha": "9b57447897ed445727562c49a87707121cc9a3fc", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=890ec6f7987af9fee0675502db1d419a12f9071c", "patch": "@@ -258,7 +258,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_in_items() {\n+    fn goto_def_in_items() {\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -271,7 +271,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_at_start_of_item() {\n+    fn goto_def_at_start_of_item() {\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -305,7 +305,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_module_declaration() {\n+    fn goto_def_for_module_declaration() {\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -332,8 +332,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_macros() {\n-        covers!(goto_definition_works_for_macros);\n+    fn goto_def_for_macros() {\n+        covers!(goto_def_for_macros);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -349,8 +349,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_macros_from_other_crates() {\n-        covers!(goto_definition_works_for_macros);\n+    fn goto_def_for_macros_from_other_crates() {\n+        covers!(goto_def_for_macros);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -369,7 +369,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_macros_in_use_tree() {\n+    fn goto_def_for_macros_in_use_tree() {\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -385,7 +385,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_macro_defined_fn_with_arg() {\n+    fn goto_def_for_macro_defined_fn_with_arg() {\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -405,7 +405,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_macro_defined_fn_no_arg() {\n+    fn goto_def_for_macro_defined_fn_no_arg() {\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -425,8 +425,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_methods() {\n-        covers!(goto_definition_works_for_methods);\n+    fn goto_def_for_methods() {\n+        covers!(goto_def_for_methods);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -445,8 +445,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_fields() {\n-        covers!(goto_definition_works_for_fields);\n+    fn goto_def_for_fields() {\n+        covers!(goto_def_for_fields);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -464,8 +464,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_record_fields() {\n-        covers!(goto_definition_works_for_record_fields);\n+    fn goto_def_for_record_fields() {\n+        covers!(goto_def_for_record_fields);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -502,7 +502,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_ufcs_inherent_methods() {\n+    fn goto_def_for_ufcs_inherent_methods() {\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -521,7 +521,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_ufcs_trait_methods_through_traits() {\n+    fn goto_def_for_ufcs_trait_methods_through_traits() {\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -539,7 +539,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_for_ufcs_trait_methods_through_self() {\n+    fn goto_def_for_ufcs_trait_methods_through_self() {\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -654,7 +654,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn goto_definition_works_when_used_on_definition_name_itself() {\n+    fn goto_def_when_used_on_definition_name_itself() {\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -875,4 +875,21 @@ mod tests {\n             \"x\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_def_for_field_init_shorthand() {\n+        covers!(goto_def_for_field_init_shorthand);\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo { x: i32 }\n+            fn main() {\n+                let x = 92;\n+                Foo { x<|> };\n+            }\n+            \",\n+            \"x RECORD_FIELD_DEF FileId(1) [13; 19) [13; 14)\",\n+            \"x: i32|x\",\n+        )\n+    }\n }"}, {"sha": "077a44473b86e83f81af18053d11668f86593bcf", "filename": "crates/ra_ide/src/marks.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_ide%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_ide%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmarks.rs?ref=890ec6f7987af9fee0675502db1d419a12f9071c", "patch": "@@ -3,10 +3,11 @@\n test_utils::marks!(\n     inserts_angle_brackets_for_generics\n     inserts_parens_for_function_calls\n-    goto_definition_works_for_macros\n-    goto_definition_works_for_methods\n-    goto_definition_works_for_fields\n-    goto_definition_works_for_record_fields\n+    goto_def_for_macros\n+    goto_def_for_methods\n+    goto_def_for_fields\n+    goto_def_for_record_fields\n+    goto_def_for_field_init_shorthand\n     call_info_bad_offset\n     dont_complete_current_use\n     dont_complete_primitive_in_use"}, {"sha": "3483a7176c362772c0fa21ab352a4eabf5ba02c7", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ec6f7987af9fee0675502db1d419a12f9071c/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=890ec6f7987af9fee0675502db1d419a12f9071c", "patch": "@@ -134,21 +134,22 @@ pub(crate) fn classify_name_ref(\n     let analyzer = SourceAnalyzer::new(db, name_ref.map(|it| it.syntax()), None);\n \n     if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n-        tested_by!(goto_definition_works_for_methods);\n+        tested_by!(goto_def_for_methods);\n         if let Some(func) = analyzer.resolve_method_call(&method_call) {\n             return Some(from_assoc_item(db, func.into()));\n         }\n     }\n \n     if let Some(field_expr) = ast::FieldExpr::cast(parent.clone()) {\n-        tested_by!(goto_definition_works_for_fields);\n+        tested_by!(goto_def_for_fields);\n         if let Some(field) = analyzer.resolve_field(&field_expr) {\n             return Some(from_struct_field(db, field));\n         }\n     }\n \n     if let Some(record_field) = ast::RecordField::cast(parent.clone()) {\n-        tested_by!(goto_definition_works_for_record_fields);\n+        tested_by!(goto_def_for_record_fields);\n+        tested_by!(goto_def_for_field_init_shorthand);\n         if let Some(field_def) = analyzer.resolve_record_field(&record_field) {\n             return Some(from_struct_field(db, field_def));\n         }\n@@ -160,7 +161,7 @@ pub(crate) fn classify_name_ref(\n     let visibility = None;\n \n     if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n-        tested_by!(goto_definition_works_for_macros);\n+        tested_by!(goto_def_for_macros);\n         if let Some(macro_def) = analyzer.resolve_macro_call(db, name_ref.with_value(&macro_call)) {\n             let kind = NameKind::Macro(macro_def);\n             return Some(NameDefinition { kind, container, visibility });"}]}