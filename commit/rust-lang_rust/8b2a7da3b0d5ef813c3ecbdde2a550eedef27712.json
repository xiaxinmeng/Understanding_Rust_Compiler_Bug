{"sha": "8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "node_id": "C_kwDOAAsO6NoAKDhiMmE3ZGEzYjBkNWVmODEzYzNlY2JkZGUyYTU1MGVlZGVmMjc3MTI", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-12T14:47:32Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-13T17:08:35Z"}, "message": "Rename `assert_uninit_valid` intrinsic\n\nIt's not about \"uninit\" anymore but about \"filling with 0x01 bytes\" so\nthe name should at least try to reflect that.", "tree": {"sha": "6471bae4f793ac97778d715ff17ef4e4bed3ad05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6471bae4f793ac97778d715ff17ef4e4bed3ad05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "html_url": "https://github.com/rust-lang/rust/commit/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32da2305880765a4c76180086959a2d5da131565", "url": "https://api.github.com/repos/rust-lang/rust/commits/32da2305880765a4c76180086959a2d5da131565", "html_url": "https://github.com/rust-lang/rust/commit/32da2305880765a4c76180086959a2d5da131565"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "e4a27f1bb6d403896b08207f7f2a07a8e141b4cc", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "patch": "@@ -713,7 +713,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let res = CValue::by_val(swap(&mut fx.bcx, val), arg.layout());\n             ret.write_cvalue(fx, res);\n         }\n-        sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n+        sym::assert_inhabited | sym::assert_zero_valid | sym::assert_mem_uninitialized_valid => {\n             intrinsic_args!(fx, args => (); intrinsic);\n \n             let layout = fx.layout_of(substs.type_at(0));\n@@ -742,7 +742,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_uninit_valid && !fx.tcx.permits_uninit_init(layout) {\n+            if intrinsic == sym::assert_mem_uninitialized_valid\n+                && !fx.tcx.permits_uninit_init(layout)\n+            {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,"}, {"sha": "a1cd43f749ec01654c29958517cd6e8dd205e04c", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "patch": "@@ -666,12 +666,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         enum AssertIntrinsic {\n             Inhabited,\n             ZeroValid,\n-            UninitValid,\n+            MemUninitializedValid,\n         }\n         let panic_intrinsic = intrinsic.and_then(|i| match i {\n             sym::assert_inhabited => Some(AssertIntrinsic::Inhabited),\n             sym::assert_zero_valid => Some(AssertIntrinsic::ZeroValid),\n-            sym::assert_uninit_valid => Some(AssertIntrinsic::UninitValid),\n+            sym::assert_mem_uninitialized_valid => Some(AssertIntrinsic::MemUninitializedValid),\n             _ => None,\n         });\n         if let Some(intrinsic) = panic_intrinsic {\n@@ -682,7 +682,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let do_panic = match intrinsic {\n                 Inhabited => layout.abi.is_uninhabited(),\n                 ZeroValid => !bx.tcx().permits_zero_init(layout),\n-                UninitValid => !bx.tcx().permits_uninit_init(layout),\n+                MemUninitializedValid => !bx.tcx().permits_uninit_init(layout),\n             };\n             Some(if do_panic {\n                 let msg_str = with_no_visible_paths!({"}, {"sha": "27abc2b97b02862f1cfb08b70b9b6b6ee9465a4e", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "patch": "@@ -432,7 +432,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::transmute => {\n                 self.copy_op(&args[0], dest, /*allow_transmute*/ true)?;\n             }\n-            sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n+            sym::assert_inhabited\n+            | sym::assert_zero_valid\n+            | sym::assert_mem_uninitialized_valid => {\n                 let ty = instance.substs.type_at(0);\n                 let layout = self.layout_of(ty)?;\n \n@@ -464,7 +466,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     }\n                 }\n \n-                if intrinsic_name == sym::assert_uninit_valid {\n+                if intrinsic_name == sym::assert_mem_uninitialized_valid {\n                     let should_panic = !self.tcx.permits_uninit_init(layout);\n \n                     if should_panic {"}, {"sha": "598dc2dca5c6288b88eab85e96c9f95d0de8fa1b", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "patch": "@@ -75,7 +75,7 @@ pub fn intrinsic_operation_unsafety(tcx: TyCtxt<'_>, intrinsic_id: DefId) -> hir\n         sym::abort\n         | sym::assert_inhabited\n         | sym::assert_zero_valid\n-        | sym::assert_uninit_valid\n+        | sym::assert_mem_uninitialized_valid\n         | sym::size_of\n         | sym::min_align_of\n         | sym::needs_drop\n@@ -193,9 +193,9 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             }\n             sym::rustc_peek => (1, vec![param(0)], param(0)),\n             sym::caller_location => (0, vec![], tcx.caller_location_ty()),\n-            sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n-                (1, Vec::new(), tcx.mk_unit())\n-            }\n+            sym::assert_inhabited\n+            | sym::assert_zero_valid\n+            | sym::assert_mem_uninitialized_valid => (1, Vec::new(), tcx.mk_unit()),\n             sym::forget => (1, vec![param(0)], tcx.mk_unit()),\n             sym::transmute => (2, vec![param(0)], param(1)),\n             sym::prefetch_read_data"}, {"sha": "c97340983c0103c496cfe2ca250d526b3ae65e61", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "patch": "@@ -377,9 +377,9 @@ symbols! {\n         assert_eq_macro,\n         assert_inhabited,\n         assert_macro,\n+        assert_mem_uninitialized_valid,\n         assert_ne_macro,\n         assert_receiver_is_total_eq,\n-        assert_uninit_valid,\n         assert_zero_valid,\n         asserting,\n         associated_const_equality,"}, {"sha": "ed58a7f1799350507542bbc1534f9be4296dd81b", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "patch": "@@ -959,13 +959,14 @@ extern \"rust-intrinsic\" {\n     #[rustc_safe_intrinsic]\n     pub fn assert_zero_valid<T>();\n \n-    /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n-    /// bit patterns: This will statically either panic, or do nothing.\n+    /// A guard for `std::mem::uninitialized`. Checks whether a repeated bit pattern `0x01`\n+    /// is legal for `T`: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n     #[rustc_safe_intrinsic]\n-    pub fn assert_uninit_valid<T>();\n+    #[cfg(not(bootstrap))]\n+    pub fn assert_mem_uninitialized_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n     ///"}, {"sha": "5e01ccc07d8fdbf7d1b559004688fb8916311e1f", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "patch": "@@ -682,7 +682,8 @@ pub unsafe fn zeroed<T>() -> T {\n pub unsafe fn uninitialized<T>() -> T {\n     // SAFETY: the caller must guarantee that an uninitialized value is valid for `T`.\n     unsafe {\n-        intrinsics::assert_uninit_valid::<T>();\n+        #[cfg(not(bootstrap))] // If the compiler hits this itself then it deserves the UB.\n+        intrinsics::assert_mem_uninitialized_valid::<T>();\n         let mut val = MaybeUninit::<T>::uninit();\n \n         // Fill memory with 0x01, as an imperfect mitigation for old code that uses this function on"}, {"sha": "b4fd423becd9d15bb5c880a5b1265b32551c5c81", "filename": "src/test/ui/consts/assert-type-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.rs?ref=8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "patch": "@@ -13,7 +13,7 @@ fn main() {\n         //~^ERROR: evaluation of constant value failed\n     };\n     const _BAD2: () = {\n-        intrinsics::assert_uninit_valid::<&'static i32>();\n+        intrinsics::assert_mem_uninitialized_valid::<&'static i32>();\n         //~^ERROR: evaluation of constant value failed\n     };\n     const _BAD3: () = {"}, {"sha": "70aec91e22622c6ace0b5f046330c6d939d6a518", "filename": "src/test/ui/consts/assert-type-intrinsics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b2a7da3b0d5ef813c3ecbdde2a550eedef27712/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr?ref=8b2a7da3b0d5ef813c3ecbdde2a550eedef27712", "patch": "@@ -7,8 +7,8 @@ LL |         MaybeUninit::<!>::uninit().assume_init();\n error[E0080]: evaluation of constant value failed\n   --> $DIR/assert-type-intrinsics.rs:16:9\n    |\n-LL |         intrinsics::assert_uninit_valid::<&'static i32>();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `&i32` uninitialized, which is invalid\n+LL |         intrinsics::assert_mem_uninitialized_valid::<&'static i32>();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `&i32` uninitialized, which is invalid\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/assert-type-intrinsics.rs:20:9"}]}