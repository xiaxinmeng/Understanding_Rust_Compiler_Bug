{"sha": "8b81208012c2d88df74e18579a8025c24305db8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiODEyMDgwMTJjMmQ4OGRmNzRlMTg1NzlhODAyNWMyNDMwNWRiOGM=", "commit": {"author": {"name": "Unknown", "email": "dobbybabee@gmail.com", "date": "2019-01-18T04:19:51Z"}, "committer": {"name": "Unknown", "email": "dobbybabee@gmail.com", "date": "2019-01-18T04:19:51Z"}, "message": "Adding a test for checking if test files are missing.", "tree": {"sha": "8b922703897f2c68ed94aef9fd2f591560edaec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b922703897f2c68ed94aef9fd2f591560edaec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b81208012c2d88df74e18579a8025c24305db8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b81208012c2d88df74e18579a8025c24305db8c", "html_url": "https://github.com/rust-lang/rust/commit/8b81208012c2d88df74e18579a8025c24305db8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b81208012c2d88df74e18579a8025c24305db8c/comments", "author": null, "committer": null, "parents": [{"sha": "59b250e4f9681a89717f81cd44360e181a4174be", "url": "https://api.github.com/repos/rust-lang/rust/commits/59b250e4f9681a89717f81cd44360e181a4174be", "html_url": "https://github.com/rust-lang/rust/commit/59b250e4f9681a89717f81cd44360e181a4174be"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "31d2dccff711af06f8076ef26b3d2ef5a9d9bb43", "filename": "tests/missing-test-files.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8b81208012c2d88df74e18579a8025c24305db8c/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b81208012c2d88df74e18579a8025c24305db8c/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=8b81208012c2d88df74e18579a8025c24305db8c", "patch": "@@ -0,0 +1,47 @@\n+use std::fs::{self, DirEntry};\n+use std::io;\n+use std::path::Path;\n+\n+#[test]\n+fn test_missing_tests() {\n+    explore_directory(Path::new(\"./tests\")).unwrap();\n+}\n+\n+/*\n+Test for missing files.\n+\n+Since rs files are alphabetically before stderr/stdout, we can sort by the full name\n+and iter in that order. If we've seen the file stem for the first time and it's not\n+a rust file, it means the rust file has to be missing.\n+*/\n+fn explore_directory(dir: &Path) -> io::Result<()> {\n+    let mut current_file = String::new();\n+    let mut files: Vec<DirEntry> = fs::read_dir(dir)?.filter_map(Result::ok).collect();\n+    files.sort_by_key(|e| e.path());\n+    for entry in files.iter() {\n+        let path = entry.path();\n+        if path.is_dir() {\n+            explore_directory(&path)?;\n+        } else {\n+            let file_stem = path.file_stem().unwrap().to_str().unwrap().to_string();\n+            match path.extension() {\n+                Some(ext) => {\n+                    match ext.to_str().unwrap() {\n+                        \"rs\" => current_file = file_stem.clone(),\n+                        \"stderr\" | \"stdout\" => {\n+                            assert_eq!(\n+                                file_stem,\n+                                current_file,\n+                                \"{}\",\n+                                format!(\"Didn't see a test file for {:}\", path.to_str().unwrap())\n+                            );\n+                        },\n+                        _ => continue,\n+                    };\n+                },\n+                None => {},\n+            }\n+        }\n+    }\n+    Ok(())\n+}"}]}