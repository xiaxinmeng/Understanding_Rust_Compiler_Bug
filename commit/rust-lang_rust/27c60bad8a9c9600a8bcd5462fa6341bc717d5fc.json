{"sha": "27c60bad8a9c9600a8bcd5462fa6341bc717d5fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YzYwYmFkOGE5Yzk2MDBhOGJjZDU0NjJmYTYzNDFiYzcxN2Q1ZmM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-15T22:19:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-23T18:02:47Z"}, "message": "Remove Pat pre-lowering.", "tree": {"sha": "6861034b5ab04c06f0ef4248245ee3288148c46d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6861034b5ab04c06f0ef4248245ee3288148c46d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c60bad8a9c9600a8bcd5462fa6341bc717d5fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c60bad8a9c9600a8bcd5462fa6341bc717d5fc", "html_url": "https://github.com/rust-lang/rust/commit/27c60bad8a9c9600a8bcd5462fa6341bc717d5fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c60bad8a9c9600a8bcd5462fa6341bc717d5fc/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e17ab57fc3a1c12850c4ec0ae40319d9f18e63b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e17ab57fc3a1c12850c4ec0ae40319d9f18e63b", "html_url": "https://github.com/rust-lang/rust/commit/6e17ab57fc3a1c12850c4ec0ae40319d9f18e63b"}], "stats": {"total": 48, "additions": 5, "deletions": 43}, "files": [{"sha": "f7c693cc94d1fdd9efc9e877046461f3c0217a73", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 43, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/27c60bad8a9c9600a8bcd5462fa6341bc717d5fc/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c60bad8a9c9600a8bcd5462fa6341bc717d5fc/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=27c60bad8a9c9600a8bcd5462fa6341bc717d5fc", "patch": "@@ -425,7 +425,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         /// declared for every type and trait definition.\n         struct MiscCollector<'tcx, 'lowering, 'hir> {\n             lctx: &'tcx mut LoweringContext<'lowering, 'hir>,\n-            hir_id_owner: Option<NodeId>,\n         }\n \n         impl MiscCollector<'_, '_, '_> {\n@@ -452,30 +451,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                 }\n             }\n-\n-            fn with_hir_id_owner<T>(\n-                &mut self,\n-                owner: Option<NodeId>,\n-                f: impl FnOnce(&mut Self) -> T,\n-            ) -> T {\n-                let old = mem::replace(&mut self.hir_id_owner, owner);\n-                let r = f(self);\n-                self.hir_id_owner = old;\n-                r\n-            }\n         }\n \n         impl<'tcx> Visitor<'tcx> for MiscCollector<'tcx, '_, '_> {\n-            fn visit_pat(&mut self, p: &'tcx Pat) {\n-                if let PatKind::Paren(..) | PatKind::Rest = p.kind {\n-                    // Doesn't generate a HIR node\n-                } else if let Some(owner) = self.hir_id_owner {\n-                    self.lctx.lower_node_id_with_owner(p.id, owner);\n-                }\n-\n-                visit::walk_pat(self, p)\n-            }\n-\n             fn visit_item(&mut self, item: &'tcx Item) {\n                 let hir_id = self.lctx.allocate_hir_id_counter(item.id);\n \n@@ -499,24 +477,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     _ => {}\n                 }\n \n-                self.with_hir_id_owner(Some(item.id), |this| {\n-                    visit::walk_item(this, item);\n-                });\n+                visit::walk_item(self, item);\n             }\n \n             fn visit_assoc_item(&mut self, item: &'tcx AssocItem, ctxt: AssocCtxt) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n-                let owner = match (&item.kind, ctxt) {\n-                    // Ignore patterns in trait methods without bodies.\n-                    (AssocItemKind::Fn(_, _, _, None), AssocCtxt::Trait) => None,\n-                    _ => Some(item.id),\n-                };\n-                self.with_hir_id_owner(owner, |this| visit::walk_assoc_item(this, item, ctxt));\n-            }\n-\n-            fn visit_foreign_item(&mut self, i: &'tcx ForeignItem) {\n-                // Ignore patterns in foreign items\n-                self.with_hir_id_owner(None, |this| visit::walk_foreign_item(this, i));\n+                visit::walk_assoc_item(self, item, ctxt);\n             }\n \n             fn visit_ty(&mut self, t: &'tcx Ty) {\n@@ -527,18 +493,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         // Mirrors visit::walk_fn_decl\n                         for parameter in &f.decl.inputs {\n                             // We don't lower the ids of argument patterns\n-                            self.with_hir_id_owner(None, |this| {\n-                                this.visit_pat(&parameter.pat);\n-                            });\n+                            self.visit_pat(&parameter.pat);\n                             self.visit_ty(&parameter.ty)\n                         }\n                         self.visit_fn_ret_ty(&f.decl.output)\n                     }\n                     TyKind::ImplTrait(def_node_id, _) => {\n                         self.lctx.allocate_hir_id_counter(def_node_id);\n-                        self.with_hir_id_owner(Some(def_node_id), |this| {\n-                            visit::walk_ty(this, t);\n-                        });\n+                        visit::walk_ty(self, t);\n                     }\n                     _ => visit::walk_ty(self, t),\n                 }\n@@ -548,7 +510,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.lower_node_id(CRATE_NODE_ID);\n         debug_assert!(self.node_id_to_hir_id[CRATE_NODE_ID] == Some(hir::CRATE_HIR_ID));\n \n-        visit::walk_crate(&mut MiscCollector { lctx: &mut self, hir_id_owner: None }, c);\n+        visit::walk_crate(&mut MiscCollector { lctx: &mut self }, c);\n         visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n \n         let module = self.lower_mod(&c.module);"}]}