{"sha": "8b9344acc3cc7f63ce2294c1482d7e386e812b6e", "node_id": "C_kwDOAAsO6NoAKDhiOTM0NGFjYzNjYzdmNjNjZTIyOTRjMTQ4MmQ3ZTM4NmU4MTJiNmU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-08T16:07:20Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-12T13:51:20Z"}, "message": "Fix object safety checks for new RPITITs", "tree": {"sha": "42178b3a40630a5156a526176ac238f0e5aa4953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42178b3a40630a5156a526176ac238f0e5aa4953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b9344acc3cc7f63ce2294c1482d7e386e812b6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQN2NgACgkQgTGiTgx5\n768zkg//XwWLRXyzxj3aa4fYrm2U0vn1r5Ou+TgRo1H9Fb37/GvsUO4veIw31pqQ\nvkDQ4rhl3jmZ8k0a8YGSuLaYtg67JE7WRYQFr1roFwILBKchuK1rSAyOP/j/ppau\nLD0VIJq/BHpdbV68iB5myxTG4E2KU6jUxr/y7UqeoeFre+yU/BDWkhZJPfxJAGlx\n8qd+FbfEPVk7D4QBVSgqGKWyg4dE4U2EIgJjX2y3rN+2iJ+/2Qyw5XQT/n3JXsB5\nqNZGmlRGAFGHhFORIlhitymjQ54NuHd9UxIRnIPL6JVmWgWNW2GnnFIEM5CO9wGs\ngNvYTXC8/IjShdCwKe6ixQMfr0h+4CQZCsWQKM0ESYgDAwst7C8qUki40T2q6xCm\nIIUKSw2ncNSqOFe8FjUltFnb4hoAOyOa3FqLJbnVNjknX79EF2NhZA79gmxLB2i2\nAlbh//Ryc3aArMR38GXMFijr05N1MELk5BTFDkO2xW2fRhlmslnjHet98mtPHBI+\nFwJ/HPBOTjvXgG+EfR1f/8b+/SCwXTBLua4iqAmMfqgt4xulcN90WlfxOCsSOhrU\n3DsqSWZahikBczvx6JIGMW26VEjWxRhj1g9qZ7LfE9fBzdOPkYG3Te8SaLSrUnKc\n8naykMzgm1Gg65igzeoDpzmKKb3s/uVCu0JgLlu/cnKZsD/pVrE=\n=16US\n-----END PGP SIGNATURE-----", "payload": "tree 42178b3a40630a5156a526176ac238f0e5aa4953\nparent fa421ec454dfd2a5e8d4c2aa17284e80043a6989\nauthor Santiago Pastorino <spastorino@gmail.com> 1678291640 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678629080 -0300\n\nFix object safety checks for new RPITITs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b9344acc3cc7f63ce2294c1482d7e386e812b6e", "html_url": "https://github.com/rust-lang/rust/commit/8b9344acc3cc7f63ce2294c1482d7e386e812b6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b9344acc3cc7f63ce2294c1482d7e386e812b6e/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa421ec454dfd2a5e8d4c2aa17284e80043a6989", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa421ec454dfd2a5e8d4c2aa17284e80043a6989", "html_url": "https://github.com/rust-lang/rust/commit/fa421ec454dfd2a5e8d4c2aa17284e80043a6989"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "a5def4151bfda5d2d73ccb75388a4f2080204a05", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b9344acc3cc7f63ce2294c1482d7e386e812b6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9344acc3cc7f63ce2294c1482d7e386e812b6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=8b9344acc3cc7f63ce2294c1482d7e386e812b6e", "patch": "@@ -13,7 +13,6 @@ use super::{elaborate_predicates, elaborate_trait_ref};\n use crate::infer::TyCtxtInferExt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, Obligation, ObligationCause};\n-use hir::def::DefKind;\n use rustc_errors::{DelayDm, FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -855,7 +854,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<TyCtxt<'tcx>>>(\n                     }\n                 }\n                 ty::Alias(ty::Projection, ref data)\n-                    if self.tcx.def_kind(data.def_id) == DefKind::ImplTraitPlaceholder =>\n+                    if self.tcx.is_impl_trait_in_trait(data.def_id) =>\n                 {\n                     // We'll deny these later in their own pass\n                     ControlFlow::Continue(())\n@@ -922,7 +921,7 @@ pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n     ty.skip_binder().walk().find_map(|arg| {\n         if let ty::GenericArgKind::Type(ty) = arg.unpack()\n             && let ty::Alias(ty::Projection, proj) = ty.kind()\n-            && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n+            && tcx.is_impl_trait_in_trait(proj.def_id)\n         {\n             Some(MethodViolationCode::ReferencesImplTraitInTrait(tcx.def_span(proj.def_id)))\n         } else {"}, {"sha": "b7f2b019a7765aaafd7883f60283e1ea0347988e", "filename": "tests/ui/impl-trait/in-trait/object-safety.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b9344acc3cc7f63ce2294c1482d7e386e812b6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b9344acc3cc7f63ce2294c1482d7e386e812b6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr?ref=8b9344acc3cc7f63ce2294c1482d7e386e812b6e", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:17:33\n+  --> $DIR/object-safety.rs:20:33\n    |\n LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:22\n+  --> $DIR/object-safety.rs:10:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n@@ -14,13 +14,13 @@ LL |     fn baz(&self) -> impl Debug;\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:20:13\n+  --> $DIR/object-safety.rs:23:13\n    |\n LL |     let s = i.baz();\n    |             ^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:22\n+  --> $DIR/object-safety.rs:10:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n@@ -29,13 +29,13 @@ LL |     fn baz(&self) -> impl Debug;\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:17:13\n+  --> $DIR/object-safety.rs:20:13\n    |\n LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:22\n+  --> $DIR/object-safety.rs:10:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...", "previous_filename": "tests/ui/impl-trait/in-trait/object-safety.stderr"}, {"sha": "b7f2b019a7765aaafd7883f60283e1ea0347988e", "filename": "tests/ui/impl-trait/in-trait/object-safety.next.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8b9344acc3cc7f63ce2294c1482d7e386e812b6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b9344acc3cc7f63ce2294c1482d7e386e812b6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr?ref=8b9344acc3cc7f63ce2294c1482d7e386e812b6e", "patch": "@@ -0,0 +1,50 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:20:33\n+   |\n+LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n+   |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:10:22\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:23:13\n+   |\n+LL |     let s = i.baz();\n+   |             ^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:10:22\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:20:13\n+   |\n+LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n+   |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:10:22\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> impl Debug;\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   = help: consider moving `baz` to another trait\n+   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n+   = note: required by cast to type `Box<dyn Foo>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "016a0aaae4b6e4b4cd0ec18521f613d4bec8f16a", "filename": "tests/ui/impl-trait/in-trait/object-safety.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b9344acc3cc7f63ce2294c1482d7e386e812b6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9344acc3cc7f63ce2294c1482d7e386e812b6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.rs?ref=8b9344acc3cc7f63ce2294c1482d7e386e812b6e", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}]}