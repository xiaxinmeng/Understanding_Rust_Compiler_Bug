{"sha": "fad05591e5e421f0b43a906e18e7a26ebe92d07d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZDA1NTkxZTVlNDIxZjBiNDNhOTA2ZTE4ZTdhMjZlYmU5MmQwN2Q=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-03-27T16:58:28Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-03-27T17:09:03Z"}, "message": "testsuite: more `pub fn main`", "tree": {"sha": "6c4cda0923719d4488eea0af4392d5a52d640bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c4cda0923719d4488eea0af4392d5a52d640bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fad05591e5e421f0b43a906e18e7a26ebe92d07d", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fad05591e5e421f0b43a906e18e7a26ebe92d07d", "html_url": "https://github.com/rust-lang/rust/commit/fad05591e5e421f0b43a906e18e7a26ebe92d07d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fad05591e5e421f0b43a906e18e7a26ebe92d07d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e23fad0e6a9a7104c779d02c8568a81ada37d7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e23fad0e6a9a7104c779d02c8568a81ada37d7cc", "html_url": "https://github.com/rust-lang/rust/commit/e23fad0e6a9a7104c779d02c8568a81ada37d7cc"}], "stats": {"total": 152, "additions": 126, "deletions": 26}, "files": [{"sha": "047c339fafb3c85ccc6d0470b1bae09e32667c1b", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,7 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n #[deriving(Eq)]\n struct Point { x : int }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(14,14);\n     assert_eq!(~\"abc\",~\"abc\");\n     assert_eq!(~Point{x:34},~Point{x:34});"}, {"sha": "f6f0e6ef3700b682faf846c3ee307d38de2a74fe", "filename": "src/test/run-pass/const-cast-ptr-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -10,6 +10,6 @@\n \n static a: *u8 = 0 as *u8;\n \n-fn main() {\n+pub fn main() {\n     fail_unless!(a == ptr::null());\n }"}, {"sha": "981a8a94b0938bae5ae8b9fa796779bc6733d3c0", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -15,7 +15,7 @@ static y: *libc::c_void = x as *libc::c_void;\n static a: &'static int = &10;\n static b: *int = a as *int;\n \n-fn main() {\n+pub fn main() {\n     fail_unless!(x as *libc::c_void == y);\n     fail_unless!(a as *int == b);\n }"}, {"sha": "67bae91b26ec930278b5d171812a30bf5c527729", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -15,6 +15,6 @@ extern mod cci_const;\n use cci_const::bar;\n static foo: *u8 = bar;\n \n-fn main() {\n+pub fn main() {\n     fail_unless!(foo == cci_const::bar);\n }"}, {"sha": "800800a307b2869b9d9307a80c5cda9bf80b5f7a", "filename": "src/test/run-pass/const-enum-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -11,7 +11,7 @@\n enum A { A1, A2 }\n enum B { B1=0, B2=2 }\n \n-fn main () {\n+pub fn main () {\n     static c1: int = A2 as int;\n     static c2: int = B2 as int;\n     static c3: float = A2 as float;"}, {"sha": "12349eacd29a62b7be9111737173e18aeb8a9988", "filename": "src/test/run-pass/const-enum-structlike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -15,7 +15,7 @@ enum E {\n \n static C: E = S1 { u: 23 };\n \n-fn main() {\n+pub fn main() {\n     match C {\n         S0 { _ } => fail!(),\n         S1 { u } => fail_unless!(u == 23)"}, {"sha": "c593fd39aaacd9984606ee68012cdeea8c53b9fe", "filename": "src/test/run-pass/const-expr-in-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -11,7 +11,7 @@\n // Check that constant expressions can be used for declaring the \n // type of a fixed length vector.\n \n-fn main() {\n+pub fn main() {\n \n     static FOO: int = 2;\n     let _v: [int, ..FOO*3];"}, {"sha": "be54c6eb7be498edc074622116c8d263faf95b0a", "filename": "src/test/run-pass/const-expr-in-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -10,7 +10,7 @@\n \n // Check that constant expressions can be used in vec repeat syntax. \n \n-fn main() {\n+pub fn main() {\n \n     static FOO: int = 2;\n     let _v = [0, ..FOO*3*2/2];"}, {"sha": "4163748eaee01fc09776c16a6bdc2ee9b7df3b5e", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -12,7 +12,7 @@ static a: [u8, ..3] = ['h' as u8, 'i' as u8, 0 as u8];\n static c: &'static [u8, ..3] = &a;\n static b: *u8 = c as *u8;\n \n-fn main() {\n+pub fn main() {\n     let foo = &a as *u8;\n     fail_unless!(unsafe { str::raw::from_bytes(a) } == ~\"hi\\x00\");\n     fail_unless!(unsafe { str::raw::from_buf(foo) } == ~\"hi\");"}, {"sha": "c3e882ac04f9e403dcf7f09f6f9482077a5cfd9e", "filename": "src/test/run-pass/const-vec-syntax.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-vec-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fconst-vec-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-syntax.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,6 +1,16 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n fn f(_: &const [int]) {}\n \n-fn main() {\n+pub fn main() {\n     let v = [ 1, 2, 3 ];\n     f(v);\n }"}, {"sha": "6caceeb2d7015a8577b4137dfc7c0c3bd4ff725a", "filename": "src/test/run-pass/deriving-clone-enum.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,9 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n #[deriving(Clone)]\n enum E {\n     A,\n     B(()),\n     C\n }\n \n-fn main() {}\n+pub fn main() {}\n "}, {"sha": "b157cd321cf5a580020fe360d4b978e5498faa2e", "filename": "src/test/run-pass/deriving-clone-generic-struct.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,9 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n #[deriving(Clone)]\n struct S<T> {\n     foo: (),\n     bar: (),\n     baz: T,\n }\n \n-fn main() {}\n+pub fn main() {}\n "}, {"sha": "c534883f600cede602067715504f67ae7df509fe", "filename": "src/test/run-pass/deriving-clone-tuple-struct.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,5 +1,15 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n #[deriving(Clone)]\n struct S((), ());\n \n-fn main() {}\n+pub fn main() {}\n "}, {"sha": "1df86da6cb7f93841e3f7690fa9bd1fed909407a", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -30,7 +30,7 @@ fn check_strs(actual: &str, expected: &str) -> bool\n         return true;\n }\n     \n-fn main()\n+pub fn main()\n {\n  //       fail_unless!(check_strs(fmt!(\"%?\", Text(@~\"foo\")), \"Text(@~\\\"foo\\\")\"));\n  //       fail_unless!(check_strs(fmt!(\"%?\", ETag(@~[~\"foo\"], @~\"bar\")), \"ETag(@~[ ~\\\"foo\\\" ], @~\\\"bar\\\")\"));"}, {"sha": "deb8e0a3b07f8fc547104296a81864f92267a536", "filename": "src/test/run-pass/issue-4120.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fissue-4120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fissue-4120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4120.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -12,7 +12,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main()\n+pub fn main()\n {\n     unsafe {\n         libc::exit(0);"}, {"sha": "f6ad444f94a9c48b1b8410a40002ba2bc1cc06f2", "filename": "src/test/run-pass/issue-4387.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fissue-4387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fissue-4387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4387.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let foo = [0, ..2*4];\n }"}, {"sha": "5284fe92ade8e54c1f0bb38dcb5bb868c68c6567", "filename": "src/test/run-pass/issue-4448.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fissue-4448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fissue-4448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4448.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let (port, chan) = comm::stream::<&'static str>();\n \n     do task::spawn {"}, {"sha": "1fc51961b16a380cf473424e501a9326ceb6b14b", "filename": "src/test/run-pass/issue-5243.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fissue-5243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fissue-5243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5243.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -18,6 +18,6 @@ struct S<'self> {\n \n fn f<'lt>(_s: &'lt S<'lt>) {}\n \n-fn main() {\n+pub fn main() {\n     f(& S { v: &42 });\n }"}, {"sha": "0ae1edeed50078fec8a1c76c9181b5e61b65ab82", "filename": "src/test/run-pass/log-poly.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Flog-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Flog-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-poly.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,8 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n enum Numbers {\n     Three\n }\n \n-fn main() {\n+pub fn main() {\n     debug!(1);\n     info!(2.0);\n     warn!(Three);"}, {"sha": "9a319ea6a5c50d62ef588957c2054f24ba3ed48c", "filename": "src/test/run-pass/new-style-constants.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,8 +1,18 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use core::io::println;\n \n static FOO: int = 3;\n \n-fn main() {\n+pub fn main() {\n     println(fmt!(\"%d\", FOO));\n }\n "}, {"sha": "5d37a42af424239973ffccb2b43a005207f71b8a", "filename": "src/test/run-pass/new-style-fixed-length-vec.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,8 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use core::io::println;\n \n static FOO: [int, ..3] = [1, 2, 3];\n \n-fn main() {\n+pub fn main() {\n     println(fmt!(\"%d %d %d\", FOO[0], FOO[1], FOO[2]));\n }\n "}, {"sha": "0e483390beec9158a6ad15d1bfaa00e33b1cf438", "filename": "src/test/run-pass/one-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fone-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fone-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fone-tuple.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -10,7 +10,7 @@\n \n // Why one-tuples? Because macros.\n \n-fn main() {\n+pub fn main() {\n     match ('c',) {\n         (x,) => {\n             fail_unless!(x == 'c');"}, {"sha": "f42d3054e5c07cbbaecb2cd2a7053c04d56cae8a", "filename": "src/test/run-pass/option_addition.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Foption_addition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Foption_addition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption_addition.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,4 +1,14 @@\n-fn main() {\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n     let foo = 1;\n     let bar = 2;\n     let foobar = foo + bar;"}, {"sha": "05f0994c7655d648bf4332138ccf52f5914541ff", "filename": "src/test/run-pass/regions-expl-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fregions-expl-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fregions-expl-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-expl-self.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -18,4 +18,4 @@ pub impl Foo {\n     fn foo(&'a self) {}\n }\n \n-fn main() {}\n\\ No newline at end of file\n+pub fn main() {}\n\\ No newline at end of file"}, {"sha": "cef3e6e824338f2196192c55932bfcf9ccbbb593", "filename": "src/test/run-pass/regions-parameterization-self-types-issue-5224.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fregions-parameterization-self-types-issue-5224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad05591e5e421f0b43a906e18e7a26ebe92d07d/src%2Ftest%2Frun-pass%2Fregions-parameterization-self-types-issue-5224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-parameterization-self-types-issue-5224.rs?ref=fad05591e5e421f0b43a906e18e7a26ebe92d07d", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n // Test how region-parameterization inference\n // interacts with explicit self types.\n //\n@@ -22,7 +32,7 @@ fn get_int<G: Getter>(g: &G) -> int {\n     *g.get()\n }\n \n-fn main() {\n+pub fn main() {\n     let foo = Foo { field: 22 };\n     fail_unless!(get_int(&foo) == 22);\n }"}]}