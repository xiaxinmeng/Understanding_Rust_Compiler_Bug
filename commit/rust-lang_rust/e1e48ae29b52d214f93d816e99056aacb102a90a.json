{"sha": "e1e48ae29b52d214f93d816e99056aacb102a90a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZTQ4YWUyOWI1MmQyMTRmOTNkODE2ZTk5MDU2YWFjYjEwMmE5MGE=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-22T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-26T09:33:45Z"}, "message": "simplify-locals: Change RemoveStatements visitor into a function\n\nNo functionl changes intended.", "tree": {"sha": "57886a9baf86fae3a9a264e4828b6ba90ede1bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57886a9baf86fae3a9a264e4828b6ba90ede1bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1e48ae29b52d214f93d816e99056aacb102a90a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e48ae29b52d214f93d816e99056aacb102a90a", "html_url": "https://github.com/rust-lang/rust/commit/e1e48ae29b52d214f93d816e99056aacb102a90a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1e48ae29b52d214f93d816e99056aacb102a90a/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b64be8b51d680ca8185e519be81937c1a98ed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b64be8b51d680ca8185e519be81937c1a98ed0", "html_url": "https://github.com/rust-lang/rust/commit/a6b64be8b51d680ca8185e519be81937c1a98ed0"}], "stats": {"total": 73, "additions": 31, "deletions": 42}, "files": [{"sha": "f88156588e5dee8744086291061ee5b6097c8e2f", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 31, "deletions": 42, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e1e48ae29b52d214f93d816e99056aacb102a90a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e48ae29b52d214f93d816e99056aacb102a90a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=e1e48ae29b52d214f93d816e99056aacb102a90a", "patch": "@@ -330,14 +330,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n         // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from\n         // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a\n         // fixedpoint where there are no more unused locals.\n-        loop {\n-            let mut remove_statements = RemoveStatements::new(&mut used_locals, tcx);\n-            remove_statements.visit_body(body);\n-\n-            if !remove_statements.modified {\n-                break;\n-            }\n-        }\n+        remove_unused_definitions(&mut used_locals, body);\n \n         // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.\n         let map = make_local_map(&mut body.local_decls, &used_locals);\n@@ -487,44 +480,40 @@ impl Visitor<'_> for UsedLocals {\n     }\n }\n \n-struct RemoveStatements<'a, 'tcx> {\n+/// Removes unused definitions. Updates the used locals to reflect the changes made.\n+fn remove_unused_definitions<'a, 'tcx>(\n     used_locals: &'a mut UsedLocals,\n-    tcx: TyCtxt<'tcx>,\n-    modified: bool,\n-}\n-\n-impl<'a, 'tcx> RemoveStatements<'a, 'tcx> {\n-    fn new(used_locals: &'a mut UsedLocals, tcx: TyCtxt<'tcx>) -> Self {\n-        Self { used_locals, tcx, modified: false }\n-    }\n-}\n-\n-impl<'a, 'tcx> MutVisitor<'tcx> for RemoveStatements<'a, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n+    body: &mut Body<'tcx>,\n+) {\n+    // The use counts are updated as we remove the statements. A local might become unused\n+    // during the retain operation, leading to a temporary inconsistency (storage statements or\n+    // definitions referencing the local might remain). For correctness it is crucial that this\n+    // computation reaches a fixed point.\n+\n+    let mut modified = true;\n+    while modified {\n+        modified = false;\n+\n+        for data in body.basic_blocks_mut() {\n+            // Remove unnecessary StorageLive and StorageDead annotations.\n+            data.statements.retain(|statement| {\n+                let keep = match &statement.kind {\n+                    StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n+                        used_locals.is_used(*local)\n+                    }\n+                    StatementKind::Assign(box (place, _)) => used_locals.is_used(place.local),\n+                    _ => true,\n+                };\n \n-    fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n-        // Remove unnecessary StorageLive and StorageDead annotations.\n-        data.statements.retain(|statement| {\n-            let keep = match &statement.kind {\n-                StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n-                    self.used_locals.is_used(*local)\n+                if !keep {\n+                    trace!(\"removing statement {:?}\", statement);\n+                    modified = true;\n+                    used_locals.statement_removed(statement);\n                 }\n-                StatementKind::Assign(box (place, _)) => self.used_locals.is_used(place.local),\n-                _ => true,\n-            };\n-\n-            if !keep {\n-                trace!(\"removing statement {:?}\", statement);\n-                self.modified = true;\n-                self.used_locals.statement_removed(statement);\n-            }\n \n-            keep\n-        });\n-\n-        self.super_basic_block_data(block, data);\n+                keep\n+            });\n+        }\n     }\n }\n "}]}