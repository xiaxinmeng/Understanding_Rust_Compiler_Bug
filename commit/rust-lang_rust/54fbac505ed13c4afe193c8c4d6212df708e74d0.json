{"sha": "54fbac505ed13c4afe193c8c4d6212df708e74d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZmJhYzUwNWVkMTNjNGFmZTE5M2M4YzRkNjIxMmRmNzA4ZTc0ZDA=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-17T15:18:09Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-17T15:18:09Z"}, "message": "libcore: Add `AdditiveIterator`, `MultiplicativeIterator`, `OrdIterator`", "tree": {"sha": "6b492c7b0b402c2850a37bb47b7653cee9e8dd7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b492c7b0b402c2850a37bb47b7653cee9e8dd7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54fbac505ed13c4afe193c8c4d6212df708e74d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54fbac505ed13c4afe193c8c4d6212df708e74d0", "html_url": "https://github.com/rust-lang/rust/commit/54fbac505ed13c4afe193c8c4d6212df708e74d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54fbac505ed13c4afe193c8c4d6212df708e74d0/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4cea351ba9df84efbff56d7bd79cd52704592d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4cea351ba9df84efbff56d7bd79cd52704592d6", "html_url": "https://github.com/rust-lang/rust/commit/b4cea351ba9df84efbff56d7bd79cd52704592d6"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "bf2864702963bce5a8fcd918d8c3c854bc8db208", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/54fbac505ed13c4afe193c8c4d6212df708e74d0/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fbac505ed13c4afe193c8c4d6212df708e74d0/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=54fbac505ed13c4afe193c8c4d6212df708e74d0", "patch": "@@ -18,6 +18,7 @@ implementing the `Iterator` trait.\n */\n \n use prelude::*;\n+use num::{Zero, One};\n \n pub trait Iterator<A> {\n     /// Advance the iterator and return the next value. Return `None` when the end is reached.\n@@ -205,6 +206,51 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     fn count(&mut self) -> uint { self.fold(0, |cnt, _x| cnt + 1) }\n }\n \n+pub trait AdditiveIterator<A> {\n+    fn sum(&mut self) -> A;\n+}\n+\n+impl<A: Add<A, A> + Zero, T: Iterator<A>> AdditiveIterator<A> for T {\n+    #[inline(always)]\n+    fn sum(&mut self) -> A { self.fold(Zero::zero::<A>(), |s, x| s + x) }\n+}\n+\n+pub trait MultiplicativeIterator<A> {\n+    fn product(&mut self) -> A;\n+}\n+\n+impl<A: Mul<A, A> + One, T: Iterator<A>> MultiplicativeIterator<A> for T {\n+    #[inline(always)]\n+    fn product(&mut self) -> A { self.fold(One::one::<A>(), |p, x| p * x) }\n+}\n+\n+pub trait OrdIterator<A> {\n+    fn max(&mut self) -> Option<A>;\n+    fn min(&mut self) -> Option<A>;\n+}\n+\n+impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n+    #[inline(always)]\n+    fn max(&mut self) -> Option<A> {\n+        self.fold(None, |max, x| {\n+            match max {\n+                None    => Some(x),\n+                Some(y) => Some(cmp::max(x, y))\n+            }\n+        })\n+    }\n+\n+    #[inline(always)]\n+    fn min(&mut self) -> Option<A> {\n+        self.fold(None, |min, x| {\n+            match min {\n+                None    => Some(x),\n+                Some(y) => Some(cmp::min(x, y))\n+            }\n+        })\n+    }\n+}\n+\n pub struct ChainIterator<T, U> {\n     priv a: T,\n     priv b: U,\n@@ -675,4 +721,37 @@ mod tests {\n         assert_eq!(v.slice(0, 10).iter().count(), 10);\n         assert_eq!(v.slice(0, 0).iter().count(), 0);\n     }\n+\n+    #[test]\n+    fn test_iterator_sum() {\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).sum(), 6);\n+        assert_eq!(v.iter().transform(|&x| x).sum(), 55);\n+        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).sum(), 0);\n+    }\n+\n+    #[test]\n+    fn test_iterator_product() {\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).product(), 0);\n+        assert_eq!(v.slice(1, 5).iter().transform(|&x| x).product(), 24);\n+        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).product(), 1);\n+    }\n+\n+    #[test]\n+    fn test_iterator_max() {\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).max(), Some(3));\n+        assert_eq!(v.iter().transform(|&x| x).max(), Some(10));\n+        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).max(), None);\n+    }\n+\n+    #[test]\n+    fn test_iterator_min() {\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+        assert_eq!(v.slice(0, 4).iter().transform(|&x| x).min(), Some(0));\n+        assert_eq!(v.iter().transform(|&x| x).min(), Some(0));\n+        assert_eq!(v.slice(0, 0).iter().transform(|&x| x).min(), None);\n+    }\n+\n }"}]}