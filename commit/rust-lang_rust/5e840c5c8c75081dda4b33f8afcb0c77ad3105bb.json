{"sha": "5e840c5c8c75081dda4b33f8afcb0c77ad3105bb", "node_id": "C_kwDOAAsO6NoAKDVlODQwYzVjOGM3NTA4MWRkYTRiMzNmOGFmY2IwYzc3YWQzMTA1YmI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-19T23:50:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:12:07Z"}, "message": "incorporate some review feedback", "tree": {"sha": "04c4b2e6e9bb5210805b27ac89f990098b5e157c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04c4b2e6e9bb5210805b27ac89f990098b5e157c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb", "html_url": "https://github.com/rust-lang/rust/commit/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8affef2ccba424f37445f6df6592426600d00a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/8affef2ccba424f37445f6df6592426600d00a31", "html_url": "https://github.com/rust-lang/rust/commit/8affef2ccba424f37445f6df6592426600d00a31"}], "stats": {"total": 56, "additions": 18, "deletions": 38}, "files": [{"sha": "9cca9bcf7246735c00d6d8b9dfb0d3aa7d47bb00", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=5e840c5c8c75081dda4b33f8afcb0c77ad3105bb", "patch": "@@ -10,6 +10,7 @@ use crate::value::Value;\n use rustc_codegen_ssa::base::{compare_simd_types, wants_msvc_seh};\n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n+use rustc_codegen_ssa::meth;\n use rustc_codegen_ssa::mir::operand::OperandRef;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n@@ -364,17 +365,13 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n             }\n \n             sym::vtable_size | sym::vtable_align => {\n-                let ptr = args[0].immediate();\n-                let layout = self.layout_of(self.tcx.types.usize);\n-                let type_ = self.backend_type(layout);\n-                let offset = match name {\n-                    sym::vtable_size => 1,\n-                    sym::vtable_align => 2,\n+                let vtable = args[0].immediate();\n+                let idx = match name {\n+                    sym::vtable_size => ty::COMMON_VTABLE_ENTRIES_SIZE,\n+                    sym::vtable_align => ty::COMMON_VTABLE_ENTRIES_ALIGN,\n                     _ => bug!(),\n                 };\n-                let offset = self.const_int(type_, offset);\n-                let vtable_field_ptr = self.inbounds_gep(type_, ptr, &[offset]);\n-                self.load(type_, vtable_field_ptr, layout.align.abi)\n+                meth::VirtualIndex::from_index(idx).get_usize(self, vtable)\n             }\n \n             _ if name.as_str().starts_with(\"simd_\") => {"}, {"sha": "5d5c49c25a35877f8863c9d37a9aa87eda4724e2", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=5e840c5c8c75081dda4b33f8afcb0c77ad3105bb", "patch": "@@ -297,32 +297,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Immediate::new_slice(ptr, length.eval_usize(*self.tcx, self.param_env), self);\n                 self.write_immediate(val, dest)\n             }\n-            (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {\n-                let val = self.read_immediate(src)?;\n-                let (old_data, old_vptr) = val.to_scalar_pair()?;\n+            (&ty::Dynamic(ref _data_a, ..), &ty::Dynamic(ref data_b, ..)) => {\n+                let (old_data, old_vptr) = self.read_immediate(src)?.to_scalar_pair()?;\n                 let old_vptr = self.scalar_to_ptr(old_vptr)?;\n-                if data_a.principal_def_id() == data_b.principal_def_id() {\n-                    return self.write_immediate(*val, dest);\n-                }\n-                // trait upcasting coercion\n-                let Some(vptr_entry_idx) = self.tcx.vtable_trait_upcasting_coercion_new_vptr_slot((\n-                    src_pointee_ty,\n-                    dest_pointee_ty,\n-                )) else {\n-                    return self.write_immediate(*val, dest);\n-                };\n-\n                 let (ty, _) = self.get_ptr_vtable(old_vptr)?;\n-                let Some(ty::VtblEntry::TraitVPtr(new_trait)) = self.get_vtable_entries(old_vptr)?.get(vptr_entry_idx) else {\n-                    throw_ub_format!(\n-                        \"upcasting to index {vptr_entry_idx} of vtable {old_vptr} but \\\n-                        that vtable is too small or does not have an upcast-vtable at that index\"\n-                    )\n-                };\n-                let new_trait = new_trait.map_bound(|trait_ref| {\n-                    ty::ExistentialTraitRef::erase_self_ty(*self.tcx, trait_ref)\n-                });\n-                let new_vptr = self.get_vtable_ptr(ty, Some(new_trait))?;\n+                let new_vptr = self.get_vtable_ptr(ty, data_b.principal())?;\n                 self.write_immediate(Immediate::new_dyn_trait(old_data, new_vptr, self), dest)\n             }\n             (_, &ty::Dynamic(ref data, _)) => {"}, {"sha": "b07530753c552b1a81ddb233675db2180910f36e", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=5e840c5c8c75081dda4b33f8afcb0c77ad3105bb", "patch": "@@ -875,7 +875,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> std::fmt::Debug for DumpAllocs<'a,\n                             write!(fmt, \" (vtable: impl {trait_ref} for {ty})\")?;\n                         }\n                         Some(GlobalAlloc::Vtable(ty, None)) => {\n-                            write!(fmt, \" (vtable: impl ? for {ty})\")?;\n+                            write!(fmt, \" (vtable: impl <auto trait> for {ty})\")?;\n                         }\n                         Some(GlobalAlloc::Static(did)) => {\n                             write!(fmt, \" (static: {})\", self.ecx.tcx.def_path_str(did))?;"}, {"sha": "b3a511d5a492bdd146f3e36cda800d14a3fd032e", "filename": "compiler/rustc_const_eval/src/interpret/traits.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs?ref=5e840c5c8c75081dda4b33f8afcb0c77ad3105bb", "patch": "@@ -10,9 +10,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Creates a dynamic vtable for the given type and vtable origin. This is used only for\n     /// objects.\n     ///\n-    /// The `trait_ref` encodes the erased self type. Hence, if we are\n-    /// making an object `Foo<Trait>` from a value of type `Foo<T>`, then\n-    /// `trait_ref` would map `T: Trait`.\n+    /// The `trait_ref` encodes the erased self type. Hence, if we are making an object `Foo<Trait>`\n+    /// from a value of type `Foo<T>`, then `trait_ref` would map `T: Trait`. `None` here means that\n+    /// this is an auto trait without any methods, so we only need the basic vtable (drop, size,\n+    /// align).\n     pub fn get_vtable_ptr(\n         &self,\n         ty: Ty<'tcx>,"}, {"sha": "bd9e6a9141d470a3fae404761a3ffc0079fd290d", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=5e840c5c8c75081dda4b33f8afcb0c77ad3105bb", "patch": "@@ -728,7 +728,7 @@ pub fn write_allocations<'tcx>(\n             Some(GlobalAlloc::Vtable(ty, Some(trait_ref))) => {\n                 write!(w, \" (vtable: impl {trait_ref} for {ty})\")?\n             }\n-            Some(GlobalAlloc::Vtable(ty, None)) => write!(w, \" (vtable: impl ? for {ty})\")?,\n+            Some(GlobalAlloc::Vtable(ty, None)) => write!(w, \" (vtable: impl <auto trait> for {ty})\")?,\n             Some(GlobalAlloc::Static(did)) if !tcx.is_foreign_item(did) => {\n                 match tcx.eval_static_initializer(did) {\n                     Ok(alloc) => {"}, {"sha": "25cc852200a04e6a5c94c9e310510bff60e79a8f", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e840c5c8c75081dda4b33f8afcb0c77ad3105bb/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=5e840c5c8c75081dda4b33f8afcb0c77ad3105bb", "patch": "@@ -204,6 +204,9 @@ impl<Dyn: ?Sized> DynMetadata<Dyn> {\n     /// Returns the size of the type associated with this vtable.\n     #[inline]\n     pub fn size_of(self) -> usize {\n+        // Note that \"size stored in vtable\" is *not* the same as \"result of size_of_val_raw\".\n+        // Consider a reference like `&(i32, dyn Send)`: the vtable will only store the size of the\n+        // `Send` part!\n         #[cfg(bootstrap)]\n         return self.vtable_ptr.size_of;\n         #[cfg(not(bootstrap))]"}]}