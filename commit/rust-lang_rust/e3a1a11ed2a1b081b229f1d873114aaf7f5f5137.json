{"sha": "e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "node_id": "C_kwDOAAsO6NoAKGUzYTFhMTFlZDJhMWIwODFiMjI5ZjFkODczMTE0YWFmN2Y1ZjUxMzc", "commit": {"author": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2022-06-17T14:31:36Z"}, "committer": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2023-06-12T08:46:49Z"}, "message": "Implement `TryFrom<&OsStr>` for `&str`", "tree": {"sha": "5496127222a8b670726b2034e1f780cd5d66c4c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5496127222a8b670726b2034e1f780cd5d66c4c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "html_url": "https://github.com/rust-lang/rust/commit/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/comments", "author": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "html_url": "https://github.com/rust-lang/rust/commit/0075bb4fad68e64b6d1be06bf2db366c30bc75e1"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "29f4d4182258947dfdbcfb77adfbfd3b8f652559", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "patch": "@@ -692,7 +692,7 @@ impl OsStr {\n                   without modifying the original\"]\n     #[inline]\n     pub fn to_str(&self) -> Option<&str> {\n-        self.inner.to_str()\n+        self.inner.to_str().ok()\n     }\n \n     /// Converts an `OsStr` to a <code>[Cow]<[str]></code>.\n@@ -1101,6 +1101,24 @@ impl<'a> From<Cow<'a, OsStr>> for OsString {\n     }\n }\n \n+#[stable(feature = \"str_tryfrom_osstr_impl\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<'a> TryFrom<&'a OsStr> for &'a str {\n+    type Error = crate::str::Utf8Error;\n+\n+    /// Tries to convert an `&OsStr` to a `&str`.\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// let as_str = <&str>::try_from(os_str).unwrap();\n+    /// assert_eq!(as_str, \"foo\");\n+    /// ```\n+    fn try_from(value: &'a OsStr) -> Result<Self, Self::Error> {\n+        value.inner.to_str()\n+    }\n+}\n+\n #[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n impl Default for Box<OsStr> {\n     #[inline]"}, {"sha": "b88107479ceed27aa828faa81ee7656aae7a3f2e", "filename": "library/std/src/sys/unix/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "patch": "@@ -195,8 +195,8 @@ impl Slice {\n         Slice::from_u8_slice(s.as_bytes())\n     }\n \n-    pub fn to_str(&self) -> Option<&str> {\n-        str::from_utf8(&self.inner).ok()\n+    pub fn to_str(&self) -> Result<&str, crate::str::Utf8Error> {\n+        str::from_utf8(&self.inner)\n     }\n \n     pub fn to_string_lossy(&self) -> Cow<'_, str> {"}, {"sha": "aca2b739226d4abaed7922a480d43da69e36e3f6", "filename": "library/std/src/sys/windows/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs?ref=e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "patch": "@@ -155,7 +155,7 @@ impl Slice {\n         unsafe { mem::transmute(Wtf8::from_str(s)) }\n     }\n \n-    pub fn to_str(&self) -> Option<&str> {\n+    pub fn to_str(&self) -> Result<&str, crate::str::Utf8Error> {\n         self.inner.as_str()\n     }\n "}, {"sha": "f357824aee1384162ed5a1eb02387143a874decb", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "patch": "@@ -566,13 +566,8 @@ impl Wtf8 {\n     ///\n     /// This does not copy the data.\n     #[inline]\n-    pub fn as_str(&self) -> Option<&str> {\n-        // Well-formed WTF-8 is also well-formed UTF-8\n-        // if and only if it contains no surrogate.\n-        match self.next_surrogate(0) {\n-            None => Some(unsafe { str::from_utf8_unchecked(&self.bytes) }),\n-            Some(_) => None,\n-        }\n+    pub fn as_str(&self) -> Result<&str, str::Utf8Error> {\n+        str::from_utf8(&self.bytes)\n     }\n \n     /// Lossily converts the string to UTF-8."}, {"sha": "cb6391458b0407742b2f18679f896566807d3ddc", "filename": "library/std/src/sys_common/wtf8/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a1a11ed2a1b081b229f1d873114aaf7f5f5137/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs?ref=e3a1a11ed2a1b081b229f1d873114aaf7f5f5137", "patch": "@@ -354,11 +354,11 @@ fn wtf8_code_points() {\n \n #[test]\n fn wtf8_as_str() {\n-    assert_eq!(Wtf8::from_str(\"\").as_str(), Some(\"\"));\n-    assert_eq!(Wtf8::from_str(\"a\u00e9 \ud83d\udca9\").as_str(), Some(\"a\u00e9 \ud83d\udca9\"));\n+    assert_eq!(Wtf8::from_str(\"\").as_str(), Ok(\"\"));\n+    assert_eq!(Wtf8::from_str(\"a\u00e9 \ud83d\udca9\").as_str(), Ok(\"a\u00e9 \ud83d\udca9\"));\n     let mut string = Wtf8Buf::new();\n     string.push(CodePoint::from_u32(0xD800).unwrap());\n-    assert_eq!(string.as_str(), None);\n+    assert!(string.as_str().is_err());\n }\n \n #[test]"}]}