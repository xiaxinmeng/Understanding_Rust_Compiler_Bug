{"sha": "ba7374e517415696c383a6c7b79214d2168dff21", "node_id": "C_kwDOAAsO6NoAKGJhNzM3NGU1MTc0MTU2OTZjMzgzYTZjN2I3OTIxNGQyMTY4ZGZmMjE", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-12-01T21:36:50Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-12-01T21:36:50Z"}, "message": "Improve diagnostic for missing half of binary operator in `if` condition", "tree": {"sha": "363ccd08f39fbb2f6e24c04f3d64372c67afece9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/363ccd08f39fbb2f6e24c04f3d64372c67afece9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba7374e517415696c383a6c7b79214d2168dff21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7374e517415696c383a6c7b79214d2168dff21", "html_url": "https://github.com/rust-lang/rust/commit/ba7374e517415696c383a6c7b79214d2168dff21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba7374e517415696c383a6c7b79214d2168dff21/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "html_url": "https://github.com/rust-lang/rust/commit/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "1dbd7bad0f0236d416885e9b74123d52b9942916", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ba7374e517415696c383a6c7b79214d2168dff21/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7374e517415696c383a6c7b79214d2168dff21/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=ba7374e517415696c383a6c7b79214d2168dff21", "patch": "@@ -1988,25 +1988,34 @@ impl<'a> Parser<'a> {\n         let lo = self.prev_token.span;\n         let cond = self.parse_cond_expr()?;\n \n+        let missing_then_block_binop_span = || {\n+            match cond.kind {\n+                ExprKind::Binary(Spanned { span: binop_span, .. }, _, ref right)\n+                    if let ExprKind::Block(..) = right.kind => Some(binop_span),\n+                _ => None\n+            }\n+        };\n+\n         // Verify that the parsed `if` condition makes sense as a condition. If it is a block, then\n         // verify that the last statement is either an implicit return (no `;`) or an explicit\n         // return. This won't catch blocks with an explicit `return`, but that would be caught by\n         // the dead code lint.\n-        let thn = if self.eat_keyword(kw::Else) || !cond.returns() {\n-            self.error_missing_if_cond(lo, cond.span)\n+        let thn = if self.token.is_keyword(kw::Else) || !cond.returns() {\n+            if let Some(binop_span) = missing_then_block_binop_span() {\n+                self.error_missing_if_then_block(lo, None, Some(binop_span)).emit();\n+                self.mk_block_err(cond.span)\n+            } else {\n+                self.error_missing_if_cond(lo, cond.span)\n+            }\n         } else {\n             let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.\n             let not_block = self.token != token::OpenDelim(token::Brace);\n-            let block = self.parse_block().map_err(|mut err| {\n+            let block = self.parse_block().map_err(|err| {\n                 if not_block {\n-                    err.span_label(lo, \"this `if` expression has a condition, but no block\");\n-                    if let ExprKind::Binary(_, _, ref right) = cond.kind {\n-                        if let ExprKind::Block(_, _) = right.kind {\n-                            err.help(\"maybe you forgot the right operand of the condition?\");\n-                        }\n-                    }\n+                    self.error_missing_if_then_block(lo, Some(err), missing_then_block_binop_span())\n+                } else {\n+                    err\n                 }\n-                err\n             })?;\n             self.error_on_if_block_attrs(lo, false, block.span, &attrs);\n             block\n@@ -2015,6 +2024,28 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::If(cond, thn, els), attrs))\n     }\n \n+    fn error_missing_if_then_block(\n+        &self,\n+        if_span: Span,\n+        err: Option<DiagnosticBuilder<'a>>,\n+        binop_span: Option<Span>,\n+    ) -> DiagnosticBuilder<'a> {\n+        let msg = \"this `if` expression has a condition, but no block\";\n+\n+        let mut err = if let Some(mut err) = err {\n+            err.span_label(if_span, msg);\n+            err\n+        } else {\n+            self.struct_span_err(if_span, msg)\n+        };\n+\n+        if let Some(binop_span) = binop_span {\n+            err.span_help(binop_span, \"maybe you forgot the right operand of the condition?\");\n+        }\n+\n+        err\n+    }\n+\n     fn error_missing_if_cond(&self, lo: Span, span: Span) -> P<ast::Block> {\n         let sp = self.sess.source_map().next_point(lo);\n         self.struct_span_err(sp, \"missing condition for `if` expression\")"}, {"sha": "d3f6ca07617f4ced46de000122fe607bb0b65759", "filename": "src/test/ui/expr/if/if-without-block.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba7374e517415696c383a6c7b79214d2168dff21/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba7374e517415696c383a6c7b79214d2168dff21/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-block.stderr?ref=ba7374e517415696c383a6c7b79214d2168dff21", "patch": "@@ -7,7 +7,11 @@ LL |     if 5 == {\n LL | }\n    | ^ expected `{`\n    |\n-   = help: maybe you forgot the right operand of the condition?\n+help: maybe you forgot the right operand of the condition?\n+  --> $DIR/if-without-block.rs:3:10\n+   |\n+LL |     if 5 == {\n+   |          ^^\n \n error: aborting due to previous error\n "}, {"sha": "9959df566383707aae0a5098e92292306ace6263", "filename": "src/test/ui/parser/issue-91421.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba7374e517415696c383a6c7b79214d2168dff21/src%2Ftest%2Fui%2Fparser%2Fissue-91421.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7374e517415696c383a6c7b79214d2168dff21/src%2Ftest%2Fui%2Fparser%2Fissue-91421.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-91421.rs?ref=ba7374e517415696c383a6c7b79214d2168dff21", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for issue #91421.\n+\n+fn main() {\n+    let value = if true && {\n+    //~^ ERROR: this `if` expression has a condition, but no block\n+    //~| HELP: maybe you forgot the right operand of the condition?\n+        3\n+        //~^ ERROR: mismatched types [E0308]\n+    } else { 4 };\n+}"}, {"sha": "04284d5e3b2f719941b7eea25398abb261788728", "filename": "src/test/ui/parser/issue-91421.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba7374e517415696c383a6c7b79214d2168dff21/src%2Ftest%2Fui%2Fparser%2Fissue-91421.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba7374e517415696c383a6c7b79214d2168dff21/src%2Ftest%2Fui%2Fparser%2Fissue-91421.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-91421.stderr?ref=ba7374e517415696c383a6c7b79214d2168dff21", "patch": "@@ -0,0 +1,21 @@\n+error: this `if` expression has a condition, but no block\n+  --> $DIR/issue-91421.rs:4:17\n+   |\n+LL |     let value = if true && {\n+   |                 ^^\n+   |\n+help: maybe you forgot the right operand of the condition?\n+  --> $DIR/issue-91421.rs:4:25\n+   |\n+LL |     let value = if true && {\n+   |                         ^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-91421.rs:7:9\n+   |\n+LL |         3\n+   |         ^ expected `bool`, found integer\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}