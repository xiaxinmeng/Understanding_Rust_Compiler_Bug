{"sha": "8011e3fabb38e5bbc40038b540459595cce7a995", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMTFlM2ZhYmIzOGU1YmJjNDAwMzhiNTQwNDU5NTk1Y2NlN2E5OTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-13T19:23:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-02T21:13:22Z"}, "message": "hack around on makefiles trying to get a 64 bit build\n\nright now there are many temporary hacks, search for NDM to find them", "tree": {"sha": "f4e5e59cce6db49091f8613dab24cffc383d6cfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4e5e59cce6db49091f8613dab24cffc383d6cfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8011e3fabb38e5bbc40038b540459595cce7a995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8011e3fabb38e5bbc40038b540459595cce7a995", "html_url": "https://github.com/rust-lang/rust/commit/8011e3fabb38e5bbc40038b540459595cce7a995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8011e3fabb38e5bbc40038b540459595cce7a995/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "020cd360e1e4406c3dae93004b45104a2324d3c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/020cd360e1e4406c3dae93004b45104a2324d3c7", "html_url": "https://github.com/rust-lang/rust/commit/020cd360e1e4406c3dae93004b45104a2324d3c7"}], "stats": {"total": 2463, "additions": 2401, "deletions": 62}, "files": [{"sha": "dee46615323b80b93054ec8f6736cb311c12a3be", "filename": "mk/libuv/ia32/mac/Makefile", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2FMakefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -7,7 +7,7 @@\n MAKEFLAGS=-r\n \n # The source directory tree.\n-srcdir := ../../..\n+srcdir := ../../../..\n \n # The name of the builddir.\n builddir_name ?= out\n@@ -344,7 +344,7 @@ ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n endif\n \n quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=mac\" src/rt/libuv/uv.gyp\n+cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=mac\" src/rt/libuv/uv.gyp\n #Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n #\t$(call do_cmd,regen_makefile)\n ", "previous_filename": "mk/libuv/mac/Makefile"}, {"sha": "15272c03c13c29387a0c9bd5c8e38e2eff4462cd", "filename": "mk/libuv/ia32/mac/gyp-mac-tool", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "mk/libuv/mac/gyp-mac-tool"}, {"sha": "95fe809a17e88a68fc91730caa5cb60c2653a7f9", "filename": "mk/libuv/ia32/mac/src/rt/libuv/run-benchmarks.target.mk", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "mk/libuv/mac/src/rt/libuv/run-benchmarks.target.mk"}, {"sha": "6e8687bdc6bf1f12f1d9901c67478dfd3b9fa087", "filename": "mk/libuv/ia32/mac/src/rt/libuv/run-tests.target.mk", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,115 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := '-D_GNU_SOURCE'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -fasm-blocks \\\n+\t-mpascal-strings \\\n+\t-Os \\\n+\t-gdwarf-2 \\\n+\t-arch i386\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Default := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/rt/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(builddir)/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -arch i386 \\\n+\t-L$(builddir)\n+\n+LIBS := -framework Carbon \\\n+\t-framework CoreServices\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "e1ee2faf422e85868d6d8a9f267858b2d2fec4db", "filename": "mk/libuv/ia32/mac/src/rt/libuv/uv.Makefile", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -1,6 +1,6 @@\n # This file is generated by gyp; do not edit.\n \n-export builddir_name ?= mk/libuv/win/./src/rt/libuv/out\n+export builddir_name ?= mk/libuv/ia32/mac/./src/rt/libuv/out\n .PHONY: all\n all:\n \t$(MAKE) -C ../../.. uv run-tests run-benchmarks", "previous_filename": "mk/libuv/win/src/rt/libuv/uv.Makefile"}, {"sha": "75ade3733e0c3e5a077bf1b7d48b999d74674051", "filename": "mk/libuv/ia32/mac/src/rt/libuv/uv.target.mk", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "mk/libuv/mac/src/rt/libuv/uv.target.mk"}, {"sha": "ea0e20a9a13b32e16906869105d07ac30cf5caac", "filename": "mk/libuv/ia32/unix/Makefile", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Funix%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Funix%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2FMakefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -7,7 +7,7 @@\n MAKEFLAGS=-r\n \n # The source directory tree.\n-srcdir := ../../..\n+srcdir := ../../../..\n \n # The name of the builddir.\n builddir_name ?= out\n@@ -322,7 +322,7 @@ ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n endif\n \n quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=linux\" src/rt/libuv/uv.gyp\n+cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=linux\" src/rt/libuv/uv.gyp\n #Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n #\t$(call do_cmd,regen_makefile)\n ", "previous_filename": "mk/libuv/unix/Makefile"}, {"sha": "68135b0eaba25d54e887ebc66fa6cac88ae6cf8d", "filename": "mk/libuv/ia32/unix/src/rt/libuv/run-benchmarks.target.mk", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "mk/libuv/unix/src/rt/libuv/run-benchmarks.target.mk"}, {"sha": "de3b45c6f2117ceeead86a9c8e7181c9a4e97c86", "filename": "mk/libuv/ia32/unix/src/rt/libuv/run-tests.target.mk", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "mk/libuv/unix/src/rt/libuv/run-tests.target.mk"}, {"sha": "6b2f5eab0d6a3d01637624464276d9ea28028e74", "filename": "mk/libuv/ia32/unix/src/rt/libuv/uv.Makefile", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -1,6 +1,6 @@\n # This file is generated by gyp; do not edit.\n \n-export builddir_name ?= mk/libuv/unix/./src/rt/libuv/out\n+export builddir_name ?= mk/libuv/ia32/unix/./src/rt/libuv/out\n .PHONY: all\n all:\n \t$(MAKE) -C ../../.. uv run-tests run-benchmarks", "previous_filename": "mk/libuv/unix/src/rt/libuv/uv.Makefile"}, {"sha": "4a9b2b5b888d173650b2ee4344364ad2eb3e412b", "filename": "mk/libuv/ia32/unix/src/rt/libuv/uv.target.mk", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "mk/libuv/unix/src/rt/libuv/uv.target.mk"}, {"sha": "06fe8946dfc60c16077a476d9ed3f9f48853d933", "filename": "mk/libuv/ia32/win/Makefile", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fwin%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fwin%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2FMakefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -7,7 +7,7 @@\n MAKEFLAGS=-r\n \n # The source directory tree.\n-srcdir := ../../..\n+srcdir := ../../../..\n \n # The name of the builddir.\n builddir_name ?= out\n@@ -322,7 +322,7 @@ ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n endif\n \n quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=win\" src/rt/libuv/uv.gyp\n+cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=win\" src/rt/libuv/uv.gyp\n #Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n #\t$(call do_cmd,regen_makefile)\n ", "previous_filename": "mk/libuv/win/Makefile"}, {"sha": "73378736e3720770e472e4bf9bee0d713cfae801", "filename": "mk/libuv/ia32/win/src/rt/libuv/run-benchmarks.target.mk", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "mk/libuv/win/src/rt/libuv/run-benchmarks.target.mk"}, {"sha": "860b29f06406c089cc0c20debfdf86eb196b6383", "filename": "mk/libuv/ia32/win/src/rt/libuv/run-tests.target.mk", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "mk/libuv/win/src/rt/libuv/run-tests.target.mk"}, {"sha": "e1c7ed09137bf91d52d64126909be67f21f1e76d", "filename": "mk/libuv/ia32/win/src/rt/libuv/uv.Makefile", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -1,6 +1,6 @@\n # This file is generated by gyp; do not edit.\n \n-export builddir_name ?= mk/libuv/mac/./src/rt/libuv/out\n+export builddir_name ?= mk/libuv/ia32/win/./src/rt/libuv/out\n .PHONY: all\n all:\n \t$(MAKE) -C ../../.. uv run-tests run-benchmarks", "previous_filename": "mk/libuv/mac/src/rt/libuv/uv.Makefile"}, {"sha": "17c78fb6ff67e67ca9fd945fde24d6da2544eadc", "filename": "mk/libuv/ia32/win/src/rt/libuv/uv.target.mk", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "mk/libuv/win/src/rt/libuv/uv.target.mk"}, {"sha": "659834e4cd2a3750501861857364312ac9523842", "filename": "mk/libuv/x86_64/mac/Makefile", "status": "added", "additions": 375, "deletions": 0, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,375 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../..\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Default\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= ./gyp-mac-tool flock $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS) \n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crs\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crs\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_objc = CXX($(TOOLSET)) $@\n+cmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n+\n+quiet_cmd_objcxx = CXX($(TOOLSET)) $@\n+cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n+\n+# Commands for precompiled header files.\n+quiet_cmd_pch_c = CXX($(TOOLSET)) $@\n+cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\n+cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CCFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+quiet_cmd_pch_m = CXX($(TOOLSET)) $@\n+cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n+quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\n+cmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n+\n+# gyp-mac-tool is written next to the root Makefile by gyp.\n+# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n+# already.\n+quiet_cmd_mac_tool = MACTOOL $(4) $<\n+cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n+\n+quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\n+cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = LIBTOOL-STATIC $@\n+cmd_alink = rm -f $@ && libtool -static -o $@ $(filter %.o,$^)\n+\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n+\n+# TODO(thakis): Find out and document the difference between shared_library and\n+# loadable_module on mac.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n+\n+# TODO(thakis): The solink_module rule is likely wrong. Xcode seems to pass\n+# -bundle -single_module here (for osmesa.so).\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 2,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare \"all\" target first so it is the default, even though we don't have the\n+# deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.m FORCE_DO_CMD\n+\t@$(call do_cmd,objc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.mm FORCE_DO_CMD\n+\t@$(call do_cmd,objcxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.m FORCE_DO_CMD\n+\t@$(call do_cmd,objc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.mm FORCE_DO_CMD\n+\t@$(call do_cmd,objcxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.m FORCE_DO_CMD\n+\t@$(call do_cmd,objc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.mm FORCE_DO_CMD\n+\t@$(call do_cmd,objcxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/rt/libuv/run-benchmarks.target.mk)))),)\n+  include src/rt/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/rt/libuv/run-tests.target.mk)))),)\n+  include src/rt/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/rt/libuv/uv.target.mk)))),)\n+  include src/rt/libuv/uv.target.mk\n+endif\n+\n+quiet_cmd_regen_makefile = ACTION Regenerating $@\n+cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=mac\" src/rt/libuv/uv.gyp\n+#Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n+#\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "15272c03c13c29387a0c9bd5c8e38e2eff4462cd", "filename": "mk/libuv/x86_64/mac/gyp-mac-tool", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,190 @@\n+#!/usr/bin/python\n+# Generated by gyp. Do not edit.\n+# Copyright (c) 2011 Google Inc. All rights reserved.\n+# Use of this source code is governed by a BSD-style license that can be\n+# found in the LICENSE file.\n+\n+\"\"\"Utility functions to perform Xcode-style build steps.\n+\n+These functions are executed via gyp-mac-tool when using the Makefile generator.\n+\"\"\"\n+\n+import os\n+import fcntl\n+import plistlib\n+import shutil\n+import string\n+import subprocess\n+import sys\n+\n+def main(args):\n+  executor = MacTool()\n+  executor.Dispatch(args)\n+\n+class MacTool(object):\n+  \"\"\"This class performs all the Mac tooling steps. The methods can either be\n+  executed directly, or dispatched from an argument list.\"\"\"\n+\n+  def Dispatch(self, args):\n+    \"\"\"Dispatches a string command to a method.\"\"\"\n+    if len(args) < 1:\n+      raise Exception(\"Not enough arguments\")\n+\n+    method = \"Exec%s\" % self._CommandifyName(args[0])\n+    getattr(self, method)(*args[1:])\n+\n+  def _CommandifyName(self, name_string):\n+    \"\"\"Transforms a tool name like copy-info-plist to CopyInfoPlist\"\"\"\n+    return name_string.title().replace('-', '')\n+\n+  def ExecFlock(self, lockfile, *cmd_list):\n+    \"\"\"Emulates the most basic behavior of Linux's flock(1).\"\"\"\n+    # Rely on exception handling to report errors.\n+    fd = os.open(lockfile, os.O_RDONLY|os.O_NOCTTY|os.O_CREAT, 0o666)\n+    fcntl.flock(fd, fcntl.LOCK_EX)\n+    return subprocess.call(cmd_list)\n+\n+  def ExecCopyInfoPlist(self, source, dest):\n+    \"\"\"Copies the |source| Info.plist to the destination directory |dest|.\"\"\"\n+    # Read the source Info.plist into memory.\n+    fd = open(source, 'r')\n+    lines = fd.read()\n+    fd.close()\n+\n+    # Go through all the environment variables and replace them as variables in\n+    # the file.\n+    for key in os.environ:\n+      if key.startswith('_'):\n+        continue\n+      evar = '${%s}' % key\n+      lines = string.replace(lines, evar, os.environ[key])\n+\n+    # Write out the file with variables replaced.\n+    fd = open(dest, 'w')\n+    fd.write(lines)\n+    fd.close()\n+\n+    # Now write out PkgInfo file now that the Info.plist file has been\n+    # \"compiled\".\n+    self._WritePkgInfo(dest)\n+\n+  def _WritePkgInfo(self, info_plist):\n+    \"\"\"This writes the PkgInfo file from the data stored in Info.plist.\"\"\"\n+    plist = plistlib.readPlist(info_plist)\n+    if not plist:\n+      return\n+\n+    # Only create PkgInfo for executable types.\n+    package_type = plist['CFBundlePackageType']\n+    if package_type != 'APPL':\n+      return\n+\n+    # The format of PkgInfo is eight characters, representing the bundle type\n+    # and bundle signature, each four characters. If that is missing, four\n+    # '?' characters are used instead.\n+    signature_code = plist['CFBundleSignature']\n+    if len(signature_code) != 4:\n+      signature_code = '?' * 4\n+\n+    dest = os.path.join(os.path.dirname(info_plist), 'PkgInfo')\n+    fp = open(dest, 'w')\n+    fp.write('%s%s' % (package_type, signature_code))\n+    fp.close()\n+\n+  def ExecPackageFramework(self, framework, version):\n+    \"\"\"Takes a path to Something.framework and the Current version of that and\n+    sets up all the symlinks.\"\"\"\n+    # Find the name of the binary based on the part before the \".framework\".\n+    binary = os.path.basename(framework).split('.')[0]\n+\n+    CURRENT = 'Current'\n+    RESOURCES = 'Resources'\n+    VERSIONS = 'Versions'\n+\n+    if not os.path.exists(os.path.join(framework, VERSIONS, version, binary)):\n+      # Binary-less frameworks don't seem to contain symlinks (see e.g.\n+      # chromium's out/Debug/org.chromium.Chromium.manifest/ bundle).\n+      return\n+\n+    # Move into the framework directory to set the symlinks correctly.\n+    pwd = os.getcwd()\n+    os.chdir(framework)\n+\n+    # Set up the Current version.\n+    self._Relink(version, os.path.join(VERSIONS, CURRENT))\n+\n+    # Set up the root symlinks.\n+    self._Relink(os.path.join(VERSIONS, CURRENT, binary), binary)\n+    self._Relink(os.path.join(VERSIONS, CURRENT, RESOURCES), RESOURCES)\n+\n+    # Back to where we were before!\n+    os.chdir(pwd)\n+\n+  def _Relink(self, dest, link):\n+    \"\"\"Creates a symlink to |dest| named |link|. If |link| already exists,\n+    it is overwritten.\"\"\"\n+    if os.path.lexists(link):\n+      os.remove(link)\n+    os.symlink(dest, link)\n+\n+  def ExecCopyBundleResource(self, source, dest):\n+    \"\"\"Copies a resource file to the bundle/Resources directory, performing any\n+    necessary compilation on each resource.\"\"\"\n+    extension = os.path.splitext(source)[1].lower()\n+    if os.path.isdir(source):\n+      # Copy tree.\n+      if os.path.exists(dest):\n+        shutil.rmtree(dest)\n+      shutil.copytree(source, dest)\n+    elif extension == '.xib':\n+      self._CopyXIBFile(source, dest)\n+    elif extension == '.strings':\n+      self._CopyStringsFile(source, dest)\n+    # TODO: Given that files with arbitrary extensions can be copied to the\n+    # bundle, we will want to get rid of this whitelist eventually.\n+    elif extension in [\n+        '.icns', '.manifest', '.pak', '.pdf', '.png', '.sb', '.sh',\n+        '.ttf', '.sdef']:\n+      shutil.copyfile(source, dest)\n+    else:\n+      raise NotImplementedError(\n+          \"Don't know how to copy bundle resources of type %s while copying \"\n+          \"%s to %s)\" % (extension, source, dest))\n+\n+  def _CopyXIBFile(self, source, dest):\n+    \"\"\"Compiles a XIB file with ibtool into a binary plist in the bundle.\"\"\"\n+    args = ['/Developer/usr/bin/ibtool', '--errors', '--warnings',\n+        '--notices', '--output-format', 'human-readable-text', '--compile',\n+        dest, source]\n+    subprocess.call(args)\n+\n+  def _CopyStringsFile(self, source, dest):\n+    \"\"\"Copies a .strings file using iconv to reconvert the input into UTF-16.\"\"\"\n+    input_code = self._DetectInputEncoding(source) or \"UTF-8\"\n+    fp = open(dest, 'w')\n+    args = ['/usr/bin/iconv', '--from-code', input_code, '--to-code',\n+        'UTF-16', source]\n+    subprocess.call(args, stdout=fp)\n+    fp.close()\n+\n+  def _DetectInputEncoding(self, file_name):\n+    \"\"\"Reads the first few bytes from file_name and tries to guess the text\n+    encoding. Returns None as a guess if it can't detect it.\"\"\"\n+    fp = open(file_name, 'rb')\n+    try:\n+      header = fp.read(3)\n+    except e:\n+      fp.close()\n+      return None\n+    fp.close()\n+    if header.startswith(\"\\xFE\\xFF\"):\n+      return \"UTF-16BE\"\n+    elif header.startswith(\"\\xFF\\xFE\"):\n+      return \"UTF-16LE\"\n+    elif header.startswith(\"\\xEF\\xBB\\xBF\"):\n+      return \"UTF-8\"\n+    else:\n+      return None\n+\n+if __name__ == '__main__':\n+  sys.exit(main(sys.argv[1:]))"}, {"sha": "d4c4a17a93b26d399fb4a726eb75f30bab84e612", "filename": "mk/libuv/x86_64/mac/src/rt/libuv/run-benchmarks.target.mk", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,92 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-benchmarks\n+DEFS_Default := '-D_GNU_SOURCE'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -fasm-blocks \\\n+\t-mpascal-strings \\\n+\t-Os \\\n+\t-gdwarf-2 \\\n+\t-arch i386\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Default := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/rt/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(builddir)/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -arch i386 \\\n+\t-L$(builddir)\n+\n+LIBS := -framework Carbon \\\n+\t-framework CoreServices\n+\n+$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-benchmarks: LIBS := $(LIBS)\n+$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n+$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n+$(builddir)/run-benchmarks: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-benchmarks\n+# Add target alias\n+.PHONY: run-benchmarks\n+run-benchmarks: $(builddir)/run-benchmarks\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-benchmarks\n+"}, {"sha": "f3ef6c3eae3a98c722d02852db27ccc704a59e75", "filename": "mk/libuv/x86_64/mac/src/rt/libuv/run-tests.target.mk", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "mk/libuv/mac/src/rt/libuv/run-tests.target.mk"}, {"sha": "c146ac9b8ce76d3be255eafa41ece6a55ae3bc05", "filename": "mk/libuv/x86_64/mac/src/rt/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/x86_64/mac/./src/rt/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../../.. uv run-tests run-benchmarks"}, {"sha": "e6983a245548820058e92271829349eb8aeba2c4", "filename": "mk/libuv/x86_64/mac/src/rt/libuv/uv.target.mk", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,142 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-DHAVE_CONFIG_H' \\\n+\t'-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_darwin.h\"'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -fasm-blocks \\\n+\t-mpascal-strings \\\n+\t-Os \\\n+\t-gdwarf-2 \\\n+\t-arch i386\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Default := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/rt/libuv/include \\\n+\t-I$(srcdir)/src/rt/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/rt/libuv/src \\\n+\t-I$(srcdir)/src/rt/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/rt/libuv/src/ares/config_darwin\n+\n+OBJS := $(obj).target/$(TARGET)/src/rt/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/core.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/uv-eio.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/fs.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/udp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tty.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/stream.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/cares.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/process.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/eio/eio.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/ev/ev.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/darwin.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -arch i386 \\\n+\t-L$(builddir)\n+\n+LIBS := -lm\n+\n+$(builddir)/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/libuv.a: LIBS := $(LIBS)\n+$(builddir)/libuv.a: TOOLSET := $(TOOLSET)\n+$(builddir)/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(builddir)/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(builddir)/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "122dadf5678ce99ae967c78a41c6c5f3649fc600", "filename": "mk/libuv/x86_64/unix/Makefile", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,353 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../..\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Default\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= flock $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS) \n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crsT\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crsT\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = AR($(TOOLSET)) $@\n+cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n+\n+# Due to circular dependencies between libraries :(, we wrap the\n+# special \"figure out circular dependencies\" flags around the entire\n+# input list during linking.\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n+\n+# We support two kinds of shared objects (.so):\n+# 1) shared_library, which is just bundling together many dependent libraries\n+# into a link line.\n+# 2) loadable_module, which is generating a module intended for dlopen().\n+#\n+# They differ only slightly:\n+# In the former case, we want to package all dependent code into the .so.\n+# In the latter case, we want to package just the API exposed by the\n+# outermost module.\n+# This means shared_library uses --whole-archive, while loadable_module doesn't.\n+# (Note that --whole-archive is incompatible with the --start-group used in\n+# normal linking.)\n+\n+# Other shared-object link notes:\n+# - Set SONAME to the library filename so our binaries don't reference\n+# the local, absolute paths used on the link command-line.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n+\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare \"all\" target first so it is the default, even though we don't have the\n+# deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/rt/libuv/run-benchmarks.target.mk)))),)\n+  include src/rt/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/rt/libuv/run-tests.target.mk)))),)\n+  include src/rt/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/rt/libuv/uv.target.mk)))),)\n+  include src/rt/libuv/uv.target.mk\n+endif\n+\n+quiet_cmd_regen_makefile = ACTION Regenerating $@\n+cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=linux\" src/rt/libuv/uv.gyp\n+#Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n+#\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "ad3900cea632d01358f08395df6671a9b15c8abc", "filename": "mk/libuv/x86_64/unix/src/rt/libuv/run-benchmarks.target.mk", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,78 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-benchmarks\n+DEFS_Default := '-D_GNU_SOURCE'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := \n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/rt/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -pthread\n+\n+LIBS := -lrt\n+\n+$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-benchmarks: LIBS := $(LIBS)\n+$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n+$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n+$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-benchmarks\n+# Add target alias\n+.PHONY: run-benchmarks\n+run-benchmarks: $(builddir)/run-benchmarks\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-benchmarks\n+"}, {"sha": "605892fea05dc8ca7ba79ad2da8b04b03e795647", "filename": "mk/libuv/x86_64/unix/src/rt/libuv/run-tests.target.mk", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,101 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := '-D_GNU_SOURCE'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := \n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/rt/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -pthread\n+\n+LIBS := -lrt\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "b635300e7f58bc751f2d962d3644e3783ae5ea13", "filename": "mk/libuv/x86_64/unix/src/rt/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/x86_64/unix/./src/rt/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../../.. uv run-tests run-benchmarks"}, {"sha": "dc5264341b7d07cf1aa2cc590af5c72ab86e5776", "filename": "mk/libuv/x86_64/unix/src/rt/libuv/uv.target.mk", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,134 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-DHAVE_CONFIG_H' \\\n+\t'-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_linux.h\"'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -g \\\n+\t--std=gnu89 \\\n+\t-pedantic \\\n+\t-Wall \\\n+\t-Wextra \\\n+\t-Wno-unused-parameter\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/rt/libuv/include \\\n+\t-I$(srcdir)/src/rt/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/rt/libuv/src \\\n+\t-I$(srcdir)/src/rt/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/rt/libuv/src/ares/config_linux\n+\n+OBJS := $(obj).target/$(TARGET)/src/rt/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/core.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/uv-eio.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/fs.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/udp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tty.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/stream.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/cares.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/process.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/eio/eio.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/ev/ev.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/linux.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := -lm\n+\n+$(obj).target/src/rt/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(obj).target/src/rt/libuv/libuv.a: LIBS := $(LIBS)\n+$(obj).target/src/rt/libuv/libuv.a: TOOLSET := $(TOOLSET)\n+$(obj).target/src/rt/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(obj).target/src/rt/libuv/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(obj).target/src/rt/libuv/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "cc92055b2a28618e7228472dd2dff90fbc940133", "filename": "mk/libuv/x86_64/win/Makefile", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,353 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../..\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Default\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= flock $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS) \n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crsT\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crsT\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = AR($(TOOLSET)) $@\n+cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n+\n+# Due to circular dependencies between libraries :(, we wrap the\n+# special \"figure out circular dependencies\" flags around the entire\n+# input list during linking.\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n+\n+# We support two kinds of shared objects (.so):\n+# 1) shared_library, which is just bundling together many dependent libraries\n+# into a link line.\n+# 2) loadable_module, which is generating a module intended for dlopen().\n+#\n+# They differ only slightly:\n+# In the former case, we want to package all dependent code into the .so.\n+# In the latter case, we want to package just the API exposed by the\n+# outermost module.\n+# This means shared_library uses --whole-archive, while loadable_module doesn't.\n+# (Note that --whole-archive is incompatible with the --start-group used in\n+# normal linking.)\n+\n+# Other shared-object link notes:\n+# - Set SONAME to the library filename so our binaries don't reference\n+# the local, absolute paths used on the link command-line.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n+\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare \"all\" target first so it is the default, even though we don't have the\n+# deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/rt/libuv/run-benchmarks.target.mk)))),)\n+  include src/rt/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/rt/libuv/run-tests.target.mk)))),)\n+  include src/rt/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/rt/libuv/uv.target.mk)))),)\n+  include src/rt/libuv/uv.target.mk\n+endif\n+\n+quiet_cmd_regen_makefile = ACTION Regenerating $@\n+cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=win\" src/rt/libuv/uv.gyp\n+#Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n+#\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "0a3cbf31b5b5884bf1af34014cf927e91277b44b", "filename": "mk/libuv/x86_64/win/src/rt/libuv/run-benchmarks.target.mk", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,79 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-benchmarks\n+DEFS_Default := \n+\n+# Flags passed to all source files.\n+CFLAGS_Default := \n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/rt/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-win.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := ws2_32.lib \\\n+\t-lws2_32.lib\n+\n+$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-benchmarks: LIBS := $(LIBS)\n+$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n+$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n+$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-benchmarks\n+# Add target alias\n+.PHONY: run-benchmarks\n+run-benchmarks: $(builddir)/run-benchmarks\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-benchmarks\n+"}, {"sha": "438b41ea520f53f03cdd9bac0d229229a9187ae2", "filename": "mk/libuv/x86_64/win/src/rt/libuv/run-tests.target.mk", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,102 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := \n+\n+# Flags passed to all source files.\n+CFLAGS_Default := \n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/rt/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-win.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := ws2_32.lib \\\n+\t-lws2_32.lib\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "8bfd8a0ebffcc56449526c3e32a1897221f8667e", "filename": "mk/libuv/x86_64/win/src/rt/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/x86_64/win/./src/rt/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../../.. uv run-tests run-benchmarks"}, {"sha": "e8f7a135ac513f184fed4a58cbbfea0d2cb5364c", "filename": "mk/libuv/x86_64/win/src/rt/libuv/uv.target.mk", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,135 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-DHAVE_CONFIG_H' \\\n+\t'-D_WIN32_WINNT=0x0502' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-D_GNU_SOURCE'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := \n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/rt/libuv/include \\\n+\t-I$(srcdir)/src/rt/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/rt/libuv/src \\\n+\t-I$(srcdir)/src/rt/libuv/src/ares/config_win32\n+\n+OBJS := $(obj).target/$(TARGET)/src/rt/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/windows_port.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/async.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/cares.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/core.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/error.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/fs.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/handle.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/loop-watcher.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/process.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/req.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/stdio.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/stream.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/tty.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/threads.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/timer.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/udp.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/util.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/winapi.o \\\n+\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/winsock.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := \n+\n+$(obj).target/src/rt/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(obj).target/src/rt/libuv/libuv.a: LIBS := $(LIBS)\n+$(obj).target/src/rt/libuv/libuv.a: TOOLSET := $(TOOLSET)\n+$(obj).target/src/rt/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(obj).target/src/rt/libuv/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(obj).target/src/rt/libuv/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "c14c88c967131e011f219f34d2f11074cc0c2129", "filename": "mk/platform.mk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -66,13 +66,13 @@ ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n   # approaches welcome!\n   #\n   # NB: Currently GCC's optimizer breaks rustrt (task-comm-1 hangs) on Darwin.\n-  CFG_GCC_CFLAGS += -m32\n-  CFG_CLANG_CFLAGS += -m32\n+  CFG_GCC_CFLAGS += -m64 #NDM\n+  CFG_CLANG_CFLAGS += -m64 #NDM\n   ifeq ($(CFG_CPUTYPE), x86_64)\n-    CFG_GCCISH_CFLAGS += -arch i386\n-    CFG_GCCISH_LINK_FLAGS += -arch i386\n+    CFG_GCCISH_CFLAGS += -arch x86_64 #NDM\n+    CFG_GCCISH_LINK_FLAGS += -arch x86_64 #NDM\n   endif\n-  CFG_GCCISH_LINK_FLAGS += -m32\n+  CFG_GCCISH_LINK_FLAGS += -m64\n   CFG_DSYMUTIL := dsymutil\n   CFG_DEF_SUFFIX := .darwin.def\n   # Mac requires this flag to make rpath work"}, {"sha": "c45e0b9b4dacc9347174ca531ac0e7326c50d27c", "filename": "mk/rt.mk", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -32,8 +32,8 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/memory_region.cpp \\\n               rt/test/rust_test_harness.cpp \\\n               rt/test/rust_test_runtime.cpp \\\n-              rt/test/rust_test_util.cpp \\\n-              rt/arch/i386/context.cpp \\\n+              rt/test/rust_test_util.cpp #NDM\n+#NDM              rt/arch/i386/context.cpp\n \n RUNTIME_LL :=\n \n@@ -76,16 +76,19 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/test/rust_test_harness.h \\\n                rt/test/rust_test_runtime.h \\\n                rt/test/rust_test_util.h \\\n-               rt/arch/i386/context.h \\\n+               rt/arch/i386/context.h\n \n ifeq ($(CFG_WINDOWSY), 1)\n   LIBUV_OSTYPE := win\n+  LIBUV_ARCH := x86_64 #NDM\n   LIBUV_LIB := rt/libuv/Default/obj.target/src/rt/libuv/libuv.a\n else ifeq ($(CFG_OSTYPE), apple-darwin)\n   LIBUV_OSTYPE := mac\n+  LIBUV_ARCH := x86_64 #NDM\n   LIBUV_LIB := rt/libuv/Default/libuv.a\n else\n   LIBUV_OSTYPE := unix\n+  LIBUV_ARCH := x86_64 #NDM\n   LIBUV_LIB := rt/libuv/Default/obj.target/src/rt/libuv/libuv.a\n endif\n \n@@ -121,7 +124,7 @@ $(LIBUV_LIB): $(wildcard \\\n                      $(S)src/rt/libuv/*/* \\\n                      $(S)src/rt/libuv/*/*/* \\\n                      $(S)src/rt/libuv/*/*/*/*)\n-\t$(Q)$(MAKE) -C $(S)mk/libuv/$(LIBUV_OSTYPE) \\\n+\t$(Q)$(MAKE) -C $(S)mk/libuv/$(LIBUV_ARCH)/$(LIBUV_OSTYPE) \\\n \t\tCFLAGS=\"-m32\" LDFLAGS=\"-m32\" \\\n \t\tCC=\"$(CFG_GCCISH_CROSS)$(CC)\" \\\n \t\tCXX=\"$(CFG_GCCISH_CROSS)$(CXX)\" \\"}, {"sha": "8cbebebf1ff4cde1f02d128523093691d491e277", "filename": "src/comp/back/x86_64.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Fcomp%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Fcomp%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86_64.rs?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -0,0 +1,49 @@\n+import lib::llvm::llvm;\n+import lib::llvm::llvm::ModuleRef;\n+import std::str;\n+import driver::session;\n+\n+fn get_target_strs(target_os: session::os) -> target_strs::t {\n+    ret {\n+        module_asm: \"\",\n+\n+        meta_sect_name: alt target_os {\n+          session::os_macos. { \"__DATA,__note.rustc\" }\n+          session::os_win32. { \".note.rustc\" }\n+          session::os_linux. { \".note.rustc\" }\n+        },\n+\n+        data_layout: alt target_os {\n+          session::os_macos. {\n+            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n+                \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n+                \"s0:64:64-f80:128:128-n8:16:32:64\"\n+          }\n+\n+          session::os_win32. {\n+            \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\" //NDM i386\n+          }\n+\n+          session::os_linux. {\n+            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\" //NDM i386\n+          }\n+        },\n+\n+        target_triple: alt target_os {\n+          session::os_macos. { \"x86_64-apple-darwin\" }\n+          session::os_win32. { \"x86_64-pc-mingw32\" }\n+          session::os_linux. { \"x86_64-unknown-linux-gnu\" }\n+        }\n+    };\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}, {"sha": "22d6bcd8366efb126939f1c7df4c0b5b3e8d996d", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -16,7 +16,7 @@ import std::map::mk_hashmap;\n import std::option::{some, none};\n import std::getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n import back::link::output_type;\n-import back::x86;\n+import back::{x86, x86_64};\n \n tag pp_mode { ppm_normal; ppm_expanded; ppm_typed; ppm_identified; }\n \n@@ -295,7 +295,7 @@ fn get_arch(triple: str) -> session::arch {\n                str::find(triple, \"i786\") >= 0 {\n             session::arch_x86\n         } else if str::find(triple, \"x86_64\") >= 0 {\n-            session::arch_x64\n+            session::arch_x86_64\n         } else if str::find(triple, \"arm\") >= 0 ||\n                       str::find(triple, \"xscale\") >= 0 {\n             session::arch_arm\n@@ -307,12 +307,12 @@ fn build_target_config(sopts: @session::options) -> @session::config {\n     let arch = get_arch(sopts.target_triple);\n     let (int_type, uint_type, float_type) = alt arch {\n       session::arch_x86. {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n-      session::arch_x64. {(ast::ty_i64, ast::ty_u64, ast::ty_f64)}\n+      session::arch_x86_64. {(ast::ty_i64, ast::ty_u64, ast::ty_f64)}\n       session::arch_arm. {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n     };\n     let target_strs = alt arch {\n       session::arch_x86. {x86::get_target_strs(os)}\n-      session::arch_x64. {x86::get_target_strs(os)}\n+      session::arch_x86_64. {x86_64::get_target_strs(os)}\n       session::arch_arm. {x86::get_target_strs(os)}\n     };\n     let target_cfg: @session::config ="}, {"sha": "e766b7eb030877e45b9472bf4aa4dde2d3f9e7b8", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -11,7 +11,7 @@ import back::target_strs;\n \n tag os { os_win32; os_macos; os_linux; }\n \n-tag arch { arch_x86; arch_x64; arch_arm; }\n+tag arch { arch_x86; arch_x86_64; arch_arm; }\n \n type config =\n     {os: os,"}, {"sha": "b54610dd5c3a10325b39fbbc455974ae800abda9", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -92,6 +92,7 @@ mod back {\n     mod abi;\n     mod upcall;\n     mod x86;\n+    mod x86_64;\n     mod rpath;\n     mod target_strs;\n }"}, {"sha": "d7477e09354b4b37737dbfcbfb22e1975690b876", "filename": "src/etc/gyp-uv", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Fetc%2Fgyp-uv", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Fetc%2Fgyp-uv", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgyp-uv?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -9,43 +9,45 @@\n # cd $RUST_DIR/src/rt\n # rm -r libuv\n # tar -xvf $LIBUV_DIR/libuv.tar.gz\n-# cd libuv\n-# mkdir build\n-# svn co http://gyp.googlecode.com/svn/trunk build/gyp\n-# cd ../../..\n-# ./src/etc/gyp-uv\n+# mkdir -p libuv/build\n+# svn co http://gyp.googlecode.com/svn/trunk libuv/build/gyp\n+# cd ../..\n+# ./src/etc/gyp_uv\n \n set -e\n \n cd `dirname $0`\n cd ../..\n \n-args=\"--depth . -Dlibrary=static_library -Dtarget_arch=ia32\"\n-\n-./src/rt/libuv/build/gyp/gyp src/rt/libuv/uv.gyp $args \\\n-  -f make-mac \\\n-  --generator-output mk/libuv/mac \\\n-  -DOS=mac\n-\n-./src/rt/libuv/build/gyp/gyp src/rt/libuv/uv.gyp $args \\\n-  -f make-linux \\\n-  --generator-output mk/libuv/unix \\\n-  -DOS=linux\n-\n-./src/rt/libuv/build/gyp/gyp src/rt/libuv/uv.gyp $args \\\n-  -f make-linux \\\n-  --generator-output mk/libuv/win \\\n-  -DOS=win\n-\n-# Comment out the gyp auto regeneration\n-for os in mac unix win; do\n-  sed -i\".save\" \\\n-    -e 's/^\\(Makefile: $(srcdir)\\/src\\/rt\\/libuv\\/uv\\.gyp\\)/#\\1/' \\\n-    mk/libuv/$os/Makefile\n-\n-  sed -i\".save\" \\\n-    -e 's/^\\(\t$(call do_cmd,regen_makefile)\\)/#\\1/' \\\n-    mk/libuv/$os/Makefile\n-\n-  rm mk/libuv/$os/Makefile.save\n+for ARCH in ia32 x86_64\n+do\n+    args=\"--depth . -Dlibrary=static_library -Dtarget_arch=$ARCH\"\n+    \n+    ./src/rt/libuv/build/gyp/gyp src/rt/libuv/uv.gyp $args \\\n+        -f make-mac \\\n+        --generator-output mk/libuv/$ARCH/mac \\\n+        -DOS=mac\n+\n+    ./src/rt/libuv/build/gyp/gyp src/rt/libuv/uv.gyp $args \\\n+        -f make-linux \\\n+        --generator-output mk/libuv/$ARCH/unix \\\n+        -DOS=linux\n+\n+    ./src/rt/libuv/build/gyp/gyp src/rt/libuv/uv.gyp $args \\\n+        -f make-linux \\\n+        --generator-output mk/libuv/$ARCH/win \\\n+        -DOS=win\n+\n+    # Comment out the gyp auto regeneration\n+    for os in mac unix win; do\n+        sed -i \".save\" \\\n+            -e 's/^\\(Makefile: $(srcdir)\\/src\\/rt\\/libuv\\/uv\\.gyp\\)/#\\1/' \\\n+            mk/libuv/$ARCH/$os/Makefile\n+\n+        sed -i \".save\" \\\n+            -e 's/^\\(\t$(call do_cmd,regen_makefile)\\)/#\\1/' \\\n+            mk/libuv/$ARCH/$os/Makefile\n+\n+        rm mk/libuv/$ARCH/$os/Makefile.save\n+    done\n done"}, {"sha": "7c689a88bf799b2be421a74d4aa730d119e0035f", "filename": "src/rt/arch/x86_64/_context.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Farch%2Fx86_64%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Farch%2Fx86_64%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2F_context.S?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "src/rt/arch/x64/_context.S"}, {"sha": "dd1efda289c8da25582336220cf2644f38971f54", "filename": "src/rt/arch/x86_64/ccall.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Farch%2Fx86_64%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Farch%2Fx86_64%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fccall.S?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "src/rt/arch/x64/ccall.S"}, {"sha": "0d10854939602e38f901dab12bd35be5f1343acc", "filename": "src/rt/arch/x86_64/context.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "src/rt/arch/x64/context.cpp"}, {"sha": "8f0478d6b743326dc1ee31c0135552a36afd38b1", "filename": "src/rt/arch/x86_64/context.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.h?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "previous_filename": "src/rt/arch/x64/context.h"}, {"sha": "06790fccd58ae697b41d849f7d9ce3ee78214c8a", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -67,9 +67,9 @@ struct frame_glue_fns;\n typedef intptr_t rust_task_id;\n typedef intptr_t rust_port_id;\n \n-#ifndef __i386__\n-#error \"Target CPU not supported.\"\n-#endif\n+//NDM #ifndef __i386__\n+//NDM #error \"Target CPU not supported.\"\n+//NDM #endif\n \n #define I(dom, e) ((e) ? (void)0 : \\\n          (dom)->srv->fatal(#e, __FILE__, __LINE__, \"\"))"}, {"sha": "e0d799f7caa51ed9f36e93e31f70084252a9e567", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -26,13 +26,26 @@ rust_log::~rust_log() {\n \n const uint16_t\n hash(uintptr_t ptr) {\n+#   if(ULONG_MAX == 0xFFFFFFFF)\n     // Robert Jenkins' 32 bit integer hash function\n     ptr = (ptr + 0x7ed55d16) + (ptr << 12);\n     ptr = (ptr ^ 0xc761c23c) ^ (ptr >> 19);\n     ptr = (ptr + 0x165667b1) + (ptr << 5);\n     ptr = (ptr + 0xd3a2646c) ^ (ptr << 9);\n     ptr = (ptr + 0xfd7046c5) + (ptr << 3);\n     ptr = (ptr ^ 0xb55a4f09) ^ (ptr >> 16);\n+#   elif(ULONG_MAX == 0xFFFFFFFFFFFFFFFF)\n+    // \"hash64shift()\" from http://www.concentric.net/~Ttwang/tech/inthash.htm\n+    ptr = (~ptr) + (ptr << 21); // ptr = (ptr << 21) - ptr - 1;\n+    ptr = ptr ^ (ptr >> 24);\n+    ptr = (ptr + (ptr << 3)) + (ptr << 8); // ptr * 265\n+    ptr = ptr ^ (ptr >> 14);\n+    ptr = (ptr + (ptr << 2)) + (ptr << 4); // ptr * 21\n+    ptr = ptr ^ (ptr >> 28);\n+    ptr = ptr + (ptr << 31);    \n+#   else\n+#   error \"hash() not defined for this pointer size\"\n+#   endif\n     return (uint16_t) ptr;\n }\n \n@@ -72,7 +85,7 @@ rust_log::trace_ln(rust_task *task, uint32_t level, char *message) {\n #if defined(__WIN32__)\n     uint32_t thread_id = 0;\n #else\n-    uint32_t thread_id = hash((uint32_t) pthread_self());\n+    uint32_t thread_id = hash((uintptr_t) pthread_self());\n #endif\n     char prefix[BUF_BYTES] = \"\";\n     if (_sched && _sched->name) {"}, {"sha": "c0544383d23cdb21df6840336ffe99f0345fc1bd", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -8,11 +8,15 @@\n \n // Upcalls.\n \n-#ifdef __i386__\n+#if defined(__i386__) || defined(__x86_64__) || defined(_M_X64)\n void\n check_stack(rust_task *task) {\n     void *esp;\n+#   ifdef __i386__\n     asm volatile(\"movl %%esp,%0\" : \"=r\" (esp));\n+#   else\n+    asm volatile(\"mov %%rsp,%0\" : \"=r\" (esp));\n+#   endif\n     if (esp < task->stk->data)\n         task->kernel->fatal(\"Out of stack space, sorry\");\n }"}, {"sha": "9c6c5d7e2e3b54844a5feecea5e6fb042bbbba9c", "filename": "src/rt/test/rust_test_util.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Ftest%2Frust_test_util.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8011e3fabb38e5bbc40038b540459595cce7a995/src%2Frt%2Ftest%2Frust_test_util.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_util.cpp?ref=8011e3fabb38e5bbc40038b540459595cce7a995", "patch": "@@ -54,7 +54,7 @@ rust_synchronized_indexed_list_test::run() {\n         delete worker;\n     }\n \n-    long long expected_items = LARGE_COUNT * THREADS;\n+    size_t expected_items = LARGE_COUNT * THREADS;\n \n     CHECK(list.length() == expected_items);\n "}]}