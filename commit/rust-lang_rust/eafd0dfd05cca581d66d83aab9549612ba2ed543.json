{"sha": "eafd0dfd05cca581d66d83aab9549612ba2ed543", "node_id": "C_kwDOAAsO6NoAKGVhZmQwZGZkMDVjY2E1ODFkNjZkODNhYWI5NTQ5NjEyYmEyZWQ1NDM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-12T02:20:10Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-16T22:10:56Z"}, "message": "Box the `MacCall` in various types.", "tree": {"sha": "ac234c9169db2ad104c0cc3727d19d017f792411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac234c9169db2ad104c0cc3727d19d017f792411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eafd0dfd05cca581d66d83aab9549612ba2ed543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eafd0dfd05cca581d66d83aab9549612ba2ed543", "html_url": "https://github.com/rust-lang/rust/commit/eafd0dfd05cca581d66d83aab9549612ba2ed543", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eafd0dfd05cca581d66d83aab9549612ba2ed543/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5746c752f4e3f294cd252f7dd611a1908b12dd8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5746c752f4e3f294cd252f7dd611a1908b12dd8e", "html_url": "https://github.com/rust-lang/rust/commit/5746c752f4e3f294cd252f7dd611a1908b12dd8e"}], "stats": {"total": 188, "additions": 94, "deletions": 94}, "files": [{"sha": "16b2a0ea67244625a5fe9e23307efae1495d6ba8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -770,7 +770,7 @@ pub enum PatKind {\n     Paren(P<Pat>),\n \n     /// A macro pattern; pre-expansion.\n-    MacCall(MacCall),\n+    MacCall(P<MacCall>),\n }\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Copy)]\n@@ -980,7 +980,7 @@ pub enum StmtKind {\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct MacCallStmt {\n-    pub mac: MacCall,\n+    pub mac: P<MacCall>,\n     pub style: MacStmtStyle,\n     pub attrs: AttrVec,\n     pub tokens: Option<LazyTokenStream>,\n@@ -1437,7 +1437,7 @@ pub enum ExprKind {\n     InlineAsm(P<InlineAsm>),\n \n     /// A macro invocation; pre-expansion.\n-    MacCall(MacCall),\n+    MacCall(P<MacCall>),\n \n     /// A struct literal expression.\n     ///\n@@ -2040,7 +2040,7 @@ pub enum TyKind {\n     /// Inferred type of a `self` or `&self` argument in a method.\n     ImplicitSelf,\n     /// A macro in the type position.\n-    MacCall(MacCall),\n+    MacCall(P<MacCall>),\n     /// Placeholder for a kind that has failed to be defined.\n     Err,\n     /// Placeholder for a `va_list`.\n@@ -2877,7 +2877,7 @@ pub enum ItemKind {\n     /// A macro invocation.\n     ///\n     /// E.g., `foo!(..)`.\n-    MacCall(MacCall),\n+    MacCall(P<MacCall>),\n \n     /// A macro definition.\n     MacroDef(MacroDef),\n@@ -2951,7 +2951,7 @@ pub enum AssocItemKind {\n     /// An associated type.\n     TyAlias(Box<TyAlias>),\n     /// A macro expanding to associated items.\n-    MacCall(MacCall),\n+    MacCall(P<MacCall>),\n }\n \n impl AssocItemKind {\n@@ -3000,7 +3000,7 @@ pub enum ForeignItemKind {\n     /// An foreign type.\n     TyAlias(Box<TyAlias>),\n     /// A macro expanding to foreign items.\n-    MacCall(MacCall),\n+    MacCall(P<MacCall>),\n }\n \n impl From<ForeignItemKind> for ItemKind {\n@@ -3036,15 +3036,15 @@ mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n     // These are in alphabetical order, which is easy to maintain.\n-    static_assert_size!(AssocItem, 160);\n-    static_assert_size!(AssocItemKind, 72);\n+    static_assert_size!(AssocItem, 120);\n+    static_assert_size!(AssocItemKind, 32);\n     static_assert_size!(Attribute, 32);\n     static_assert_size!(Block, 48);\n     static_assert_size!(Expr, 104);\n     static_assert_size!(ExprKind, 72);\n     static_assert_size!(Fn, 192);\n-    static_assert_size!(ForeignItem, 160);\n-    static_assert_size!(ForeignItemKind, 72);\n+    static_assert_size!(ForeignItem, 112);\n+    static_assert_size!(ForeignItemKind, 24);\n     static_assert_size!(GenericBound, 88);\n     static_assert_size!(Generics, 72);\n     static_assert_size!(Impl, 200);"}, {"sha": "119724b50493eedb83dd5d2223e9b450aa199dd2", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -52,15 +52,15 @@ pub fn expand_assert<'cx>(\n     let expr = if let Some(tokens) = custom_message {\n         let then = cx.expr(\n             call_site_span,\n-            ExprKind::MacCall(MacCall {\n+            ExprKind::MacCall(P(MacCall {\n                 path: panic_path(),\n                 args: P(MacArgs::Delimited(\n                     DelimSpan::from_single(call_site_span),\n                     MacDelimiter::Parenthesis,\n                     tokens,\n                 )),\n                 prior_type_ascription: None,\n-            }),\n+            })),\n         );\n         expr_if_not(cx, call_site_span, cond_expr, then, None)\n     }"}, {"sha": "d30fd479015ff49fa7dd0c7424c810bbdba42eda", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -177,15 +177,15 @@ impl<'cx, 'a> Context<'cx, 'a> {\n         });\n         self.cx.expr(\n             self.span,\n-            ExprKind::MacCall(MacCall {\n+            ExprKind::MacCall(P(MacCall {\n                 path: panic_path,\n                 args: P(MacArgs::Delimited(\n                     DelimSpan::from_single(self.span),\n                     MacDelimiter::Parenthesis,\n                     initial.into_iter().chain(captures).collect::<TokenStream>(),\n                 )),\n                 prior_type_ascription: None,\n-            }),\n+            })),\n         )\n     }\n "}, {"sha": "3f1a8b3bc2cf7b2c45a8d078e21091bef961eae7", "filename": "compiler/rustc_builtin_macros/src/edition_panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -48,7 +48,7 @@ fn expand<'cx>(\n     MacEager::expr(\n         cx.expr(\n             sp,\n-            ExprKind::MacCall(MacCall {\n+            ExprKind::MacCall(P(MacCall {\n                 path: Path {\n                     span: sp,\n                     segments: cx\n@@ -64,7 +64,7 @@ fn expand<'cx>(\n                     tts,\n                 )),\n                 prior_type_ascription: None,\n-            }),\n+            })),\n         ),\n     )\n }"}, {"sha": "cc72dab84afa2a6f7b51ff64bad5dd57f6fa029c", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -306,7 +306,7 @@ pub struct Invocation {\n \n pub enum InvocationKind {\n     Bang {\n-        mac: ast::MacCall,\n+        mac: P<ast::MacCall>,\n         span: Span,\n     },\n     Attr {\n@@ -1017,7 +1017,7 @@ trait InvocationCollectorNode: HasAttrs + HasNodeId + Sized {\n     fn is_mac_call(&self) -> bool {\n         false\n     }\n-    fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n         unreachable!()\n     }\n     fn pre_flat_map_node_collect_attr(_cfg: &StripUnconfigured<'_>, _attr: &ast::Attribute) {}\n@@ -1046,7 +1046,7 @@ impl InvocationCollectorNode for P<ast::Item> {\n     fn is_mac_call(&self) -> bool {\n         matches!(self.kind, ItemKind::MacCall(..))\n     }\n-    fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n         let node = self.into_inner();\n         match node.kind {\n             ItemKind::MacCall(mac) => (mac, node.attrs, AddSemicolon::No),\n@@ -1154,7 +1154,7 @@ impl InvocationCollectorNode for AstNodeWrapper<P<ast::AssocItem>, TraitItemTag>\n     fn is_mac_call(&self) -> bool {\n         matches!(self.wrapped.kind, AssocItemKind::MacCall(..))\n     }\n-    fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n         let item = self.wrapped.into_inner();\n         match item.kind {\n             AssocItemKind::MacCall(mac) => (mac, item.attrs, AddSemicolon::No),\n@@ -1179,7 +1179,7 @@ impl InvocationCollectorNode for AstNodeWrapper<P<ast::AssocItem>, ImplItemTag>\n     fn is_mac_call(&self) -> bool {\n         matches!(self.wrapped.kind, AssocItemKind::MacCall(..))\n     }\n-    fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n         let item = self.wrapped.into_inner();\n         match item.kind {\n             AssocItemKind::MacCall(mac) => (mac, item.attrs, AddSemicolon::No),\n@@ -1202,7 +1202,7 @@ impl InvocationCollectorNode for P<ast::ForeignItem> {\n     fn is_mac_call(&self) -> bool {\n         matches!(self.kind, ForeignItemKind::MacCall(..))\n     }\n-    fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n         let node = self.into_inner();\n         match node.kind {\n             ForeignItemKind::MacCall(mac) => (mac, node.attrs, AddSemicolon::No),\n@@ -1323,7 +1323,7 @@ impl InvocationCollectorNode for ast::Stmt {\n             StmtKind::Local(..) | StmtKind::Empty => false,\n         }\n     }\n-    fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n         // We pull macro invocations (both attributes and fn-like macro calls) out of their\n         // `StmtKind`s and treat them as statement macro invocations, not as items or expressions.\n         let (add_semicolon, mac, attrs) = match self.kind {\n@@ -1387,7 +1387,7 @@ impl InvocationCollectorNode for P<ast::Ty> {\n     fn is_mac_call(&self) -> bool {\n         matches!(self.kind, ast::TyKind::MacCall(..))\n     }\n-    fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n         let node = self.into_inner();\n         match node.kind {\n             TyKind::MacCall(mac) => (mac, Vec::new(), AddSemicolon::No),\n@@ -1411,7 +1411,7 @@ impl InvocationCollectorNode for P<ast::Pat> {\n     fn is_mac_call(&self) -> bool {\n         matches!(self.kind, PatKind::MacCall(..))\n     }\n-    fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n         let node = self.into_inner();\n         match node.kind {\n             PatKind::MacCall(mac) => (mac, Vec::new(), AddSemicolon::No),\n@@ -1439,7 +1439,7 @@ impl InvocationCollectorNode for P<ast::Expr> {\n     fn is_mac_call(&self) -> bool {\n         matches!(self.kind, ExprKind::MacCall(..))\n     }\n-    fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n         let node = self.into_inner();\n         match node.kind {\n             ExprKind::MacCall(mac) => (mac, node.attrs, AddSemicolon::No),\n@@ -1466,7 +1466,7 @@ impl InvocationCollectorNode for AstNodeWrapper<P<ast::Expr>, OptExprTag> {\n     fn is_mac_call(&self) -> bool {\n         matches!(self.wrapped.kind, ast::ExprKind::MacCall(..))\n     }\n-    fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {\n+    fn take_mac_call(self) -> (P<ast::MacCall>, Self::AttrsTy, AddSemicolon) {\n         let node = self.wrapped.into_inner();\n         match node.kind {\n             ExprKind::MacCall(mac) => (mac, node.attrs, AddSemicolon::No),\n@@ -1512,7 +1512,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         placeholder(fragment_kind, NodeId::placeholder_from_expn_id(expn_id), vis)\n     }\n \n-    fn collect_bang(&mut self, mac: ast::MacCall, kind: AstFragmentKind) -> AstFragment {\n+    fn collect_bang(&mut self, mac: P<ast::MacCall>, kind: AstFragmentKind) -> AstFragment {\n         // cache the macro call span so that it can be\n         // easily adjusted for incremental compilation\n         let span = mac.span();"}, {"sha": "48918541e72fcb2e4d720cb6573e9aedef854b01", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -15,12 +15,12 @@ pub fn placeholder(\n     id: ast::NodeId,\n     vis: Option<ast::Visibility>,\n ) -> AstFragment {\n-    fn mac_placeholder() -> ast::MacCall {\n-        ast::MacCall {\n+    fn mac_placeholder() -> P<ast::MacCall> {\n+        P(ast::MacCall {\n             path: ast::Path { span: DUMMY_SP, segments: Vec::new(), tokens: None },\n             args: P(ast::MacArgs::Empty),\n             prior_type_ascription: None,\n-        }\n+        })\n     }\n \n     let ident = Ident::empty();"}, {"sha": "f7a9e3d163e1771bd0e296d3385dddd9f1cbed34", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -1492,11 +1492,11 @@ impl<'a> Parser<'a> {\n                 self.struct_span_err(path.span, \"macros cannot use qualified paths\").emit();\n             }\n             let lo = path.span;\n-            let mac = MacCall {\n+            let mac = P(MacCall {\n                 path,\n                 args: self.parse_mac_args()?,\n                 prior_type_ascription: self.last_type_ascription,\n-            };\n+            });\n             (lo.to(self.prev_token.span), ExprKind::MacCall(mac))\n         } else if self.check(&token::OpenDelim(Delimiter::Brace)) &&\n             let Some(expr) = self.maybe_parse_struct_expr(qself.as_ref(), &path) {"}, {"sha": "cd3c982ce817c7579e89ee27d51a386a018b1004", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -287,7 +287,7 @@ impl<'a> Parser<'a> {\n             return Ok(None);\n         } else if macros_allowed && self.check_path() {\n             // MACRO INVOCATION ITEM\n-            (Ident::empty(), ItemKind::MacCall(self.parse_item_macro(vis)?))\n+            (Ident::empty(), ItemKind::MacCall(P(self.parse_item_macro(vis)?)))\n         } else {\n             return Ok(None);\n         };"}, {"sha": "42bf889844710a3ed9d679f5cb369b7203124606", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -665,7 +665,7 @@ impl<'a> Parser<'a> {\n     fn parse_pat_mac_invoc(&mut self, path: Path) -> PResult<'a, PatKind> {\n         self.bump();\n         let args = self.parse_mac_args()?;\n-        let mac = MacCall { path, args, prior_type_ascription: self.last_type_ascription };\n+        let mac = P(MacCall { path, args, prior_type_ascription: self.last_type_ascription });\n         Ok(PatKind::MacCall(mac))\n     }\n "}, {"sha": "d2e0b557f8cfa52b7b063e8c75020d63b1cc2d8c", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -181,7 +181,7 @@ impl<'a> Parser<'a> {\n             None => unreachable!(),\n         };\n \n-        let mac = MacCall { path, args, prior_type_ascription: self.last_type_ascription };\n+        let mac = P(MacCall { path, args, prior_type_ascription: self.last_type_ascription });\n \n         let kind = if (style == MacStmtStyle::Braces\n             && self.token != token::Dot"}, {"sha": "76b710095d798da61d36feb4a8e1e1e8d47978e9", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -598,11 +598,11 @@ impl<'a> Parser<'a> {\n         let path = self.parse_path_inner(PathStyle::Type, ty_generics)?;\n         if self.eat(&token::Not) {\n             // Macro invocation in type position\n-            Ok(TyKind::MacCall(MacCall {\n+            Ok(TyKind::MacCall(P(MacCall {\n                 path,\n                 args: self.parse_mac_args()?,\n                 prior_type_ascription: self.last_type_ascription,\n-            }))\n+            })))\n         } else if allow_plus == AllowPlus::Yes && self.check_plus() {\n             // `Trait1 + Trait2 + 'a`\n             self.parse_remaining_bounds_path(Vec::new(), path, lo, true)"}, {"sha": "61cb7b25e4981eb4691c60b100cd3d34af0ba6ee", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/eafd0dfd05cca581d66d83aab9549612ba2ed543/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eafd0dfd05cca581d66d83aab9549612ba2ed543/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=eafd0dfd05cca581d66d83aab9549612ba2ed543", "patch": "@@ -3,7 +3,7 @@ PRE EXPANSION AST STATS\n \n Name                Accumulated Size         Count     Item Size\n ----------------------------------------------------------------\n-ExprField                 48 ( 0.5%)             1            48\n+ExprField                 48 ( 0.6%)             1            48\n Attribute                 64 ( 0.7%)             2            32\n - Normal                    32 ( 0.4%)             1\n - DocComment                32 ( 0.4%)             1\n@@ -14,48 +14,48 @@ WherePredicate            72 ( 0.8%)             1            72\n - BoundPredicate            72 ( 0.8%)             1\n Crate                     72 ( 0.8%)             1            72\n Arm                       96 ( 1.1%)             2            48\n+ForeignItem              112 ( 1.3%)             1           112\n+- Fn                       112 ( 1.3%)             1\n FieldDef                 160 ( 1.8%)             2            80\n-ForeignItem              160 ( 1.8%)             1           160\n-- Fn                       160 ( 1.8%)             1\n Stmt                     160 ( 1.8%)             5            32\n - Local                     32 ( 0.4%)             1\n - MacCall                   32 ( 0.4%)             1\n - Expr                      96 ( 1.1%)             3\n Param                    160 ( 1.8%)             4            40\n-FnDecl                   200 ( 2.2%)             5            40\n-Variant                  240 ( 2.7%)             2           120\n-Block                    288 ( 3.2%)             6            48\n+FnDecl                   200 ( 2.3%)             5            40\n+Variant                  240 ( 2.8%)             2           120\n+Block                    288 ( 3.3%)             6            48\n GenericBound             352 ( 4.0%)             4            88\n - Trait                    352 ( 4.0%)             4\n-GenericParam             520 ( 5.8%)             5           104\n-AssocItem                640 ( 7.2%)             4           160\n-- TyAlias                  320 ( 3.6%)             2\n-- Fn                       320 ( 3.6%)             2\n-PathSegment              720 ( 8.1%)            30            24\n-Expr                     832 ( 9.3%)             8           104\n+AssocItem                480 ( 5.5%)             4           120\n+- TyAlias                  240 ( 2.8%)             2\n+- Fn                       240 ( 2.8%)             2\n+GenericParam             520 ( 6.0%)             5           104\n+PathSegment              720 ( 8.3%)            30            24\n+Expr                     832 ( 9.6%)             8           104\n - Path                     104 ( 1.2%)             1\n - Match                    104 ( 1.2%)             1\n - Struct                   104 ( 1.2%)             1\n-- Lit                      208 ( 2.3%)             2\n-- Block                    312 ( 3.5%)             3\n-Pat                      840 ( 9.4%)             7           120\n-- Struct                   120 ( 1.3%)             1\n-- Wild                     120 ( 1.3%)             1\n-- Ident                    600 ( 6.7%)             5\n-Ty                     1_344 (15.1%)            14            96\n+- Lit                      208 ( 2.4%)             2\n+- Block                    312 ( 3.6%)             3\n+Pat                      840 ( 9.7%)             7           120\n+- Struct                   120 ( 1.4%)             1\n+- Wild                     120 ( 1.4%)             1\n+- Ident                    600 ( 6.9%)             5\n+Ty                     1_344 (15.5%)            14            96\n - Rptr                      96 ( 1.1%)             1\n - Ptr                       96 ( 1.1%)             1\n - ImplicitSelf             192 ( 2.2%)             2\n-- Path                     960 (10.8%)            10\n-Item                   1_800 (20.2%)             9           200\n-- Trait                    200 ( 2.2%)             1\n-- Enum                     200 ( 2.2%)             1\n-- ForeignMod               200 ( 2.2%)             1\n-- Impl                     200 ( 2.2%)             1\n-- Fn                       400 ( 4.5%)             2\n-- Use                      600 ( 6.7%)             3\n+- Path                     960 (11.0%)            10\n+Item                   1_800 (20.7%)             9           200\n+- Trait                    200 ( 2.3%)             1\n+- Enum                     200 ( 2.3%)             1\n+- ForeignMod               200 ( 2.3%)             1\n+- Impl                     200 ( 2.3%)             1\n+- Fn                       400 ( 4.6%)             2\n+- Use                      600 ( 6.9%)             3\n ----------------------------------------------------------------\n-Total                  8_904\n+Total                  8_696\n \n \n POST EXPANSION AST STATS\n@@ -65,18 +65,18 @@ Name                Accumulated Size         Count     Item Size\n ExprField                 48 ( 0.5%)             1            48\n GenericArgs               64 ( 0.7%)             1            64\n - AngleBracketed            64 ( 0.7%)             1\n-Local                     72 ( 0.7%)             1            72\n-WherePredicate            72 ( 0.7%)             1            72\n-- BoundPredicate            72 ( 0.7%)             1\n-Crate                     72 ( 0.7%)             1            72\n+Local                     72 ( 0.8%)             1            72\n+WherePredicate            72 ( 0.8%)             1            72\n+- BoundPredicate            72 ( 0.8%)             1\n+Crate                     72 ( 0.8%)             1            72\n Arm                       96 ( 1.0%)             2            48\n-InlineAsm                120 ( 1.2%)             1           120\n-Attribute                128 ( 1.3%)             4            32\n+ForeignItem              112 ( 1.2%)             1           112\n+- Fn                       112 ( 1.2%)             1\n+InlineAsm                120 ( 1.3%)             1           120\n+Attribute                128 ( 1.4%)             4            32\n - DocComment                32 ( 0.3%)             1\n - Normal                    96 ( 1.0%)             3\n FieldDef                 160 ( 1.7%)             2            80\n-ForeignItem              160 ( 1.7%)             1           160\n-- Fn                       160 ( 1.7%)             1\n Stmt                     160 ( 1.7%)             5            32\n - Local                     32 ( 0.3%)             1\n - Semi                      32 ( 0.3%)             1\n@@ -85,39 +85,39 @@ Param                    160 ( 1.7%)             4            40\n FnDecl                   200 ( 2.1%)             5            40\n Variant                  240 ( 2.5%)             2           120\n Block                    288 ( 3.0%)             6            48\n-GenericBound             352 ( 3.6%)             4            88\n-- Trait                    352 ( 3.6%)             4\n-GenericParam             520 ( 5.4%)             5           104\n-AssocItem                640 ( 6.6%)             4           160\n-- TyAlias                  320 ( 3.3%)             2\n-- Fn                       320 ( 3.3%)             2\n-PathSegment              792 ( 8.2%)            33            24\n-Pat                      840 ( 8.7%)             7           120\n-- Struct                   120 ( 1.2%)             1\n-- Wild                     120 ( 1.2%)             1\n-- Ident                    600 ( 6.2%)             5\n-Expr                     936 ( 9.7%)             9           104\n+GenericBound             352 ( 3.7%)             4            88\n+- Trait                    352 ( 3.7%)             4\n+AssocItem                480 ( 5.1%)             4           120\n+- TyAlias                  240 ( 2.5%)             2\n+- Fn                       240 ( 2.5%)             2\n+GenericParam             520 ( 5.5%)             5           104\n+PathSegment              792 ( 8.4%)            33            24\n+Pat                      840 ( 8.9%)             7           120\n+- Struct                   120 ( 1.3%)             1\n+- Wild                     120 ( 1.3%)             1\n+- Ident                    600 ( 6.3%)             5\n+Expr                     936 ( 9.9%)             9           104\n - Path                     104 ( 1.1%)             1\n - Match                    104 ( 1.1%)             1\n - Struct                   104 ( 1.1%)             1\n - InlineAsm                104 ( 1.1%)             1\n - Lit                      208 ( 2.2%)             2\n-- Block                    312 ( 3.2%)             3\n-Ty                     1_344 (13.9%)            14            96\n+- Block                    312 ( 3.3%)             3\n+Ty                     1_344 (14.2%)            14            96\n - Rptr                      96 ( 1.0%)             1\n - Ptr                       96 ( 1.0%)             1\n - ImplicitSelf             192 ( 2.0%)             2\n-- Path                     960 ( 9.9%)            10\n-Item                   2_200 (22.8%)            11           200\n+- Path                     960 (10.2%)            10\n+Item                   2_200 (23.3%)            11           200\n - Trait                    200 ( 2.1%)             1\n - Enum                     200 ( 2.1%)             1\n - ExternCrate              200 ( 2.1%)             1\n - ForeignMod               200 ( 2.1%)             1\n - Impl                     200 ( 2.1%)             1\n-- Fn                       400 ( 4.1%)             2\n-- Use                      800 ( 8.3%)             4\n+- Fn                       400 ( 4.2%)             2\n+- Use                      800 ( 8.5%)             4\n ----------------------------------------------------------------\n-Total                  9_664\n+Total                  9_456\n \n \n HIR STATS"}]}