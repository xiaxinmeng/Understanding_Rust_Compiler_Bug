{"sha": "f03c7f83eb72d44077f03b8140768eefb60150a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwM2M3ZjgzZWI3MmQ0NDA3N2YwM2I4MTQwNzY4ZWVmYjYwMTUwYTA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-14T02:12:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-16T22:28:22Z"}, "message": "Add `UnsafetyViolationDetails`.\n\nThis replaces the need for the `description` and `details` symbols in\n`UnsafetyViolation`, which are static. As a result some\n`Symbol::as_str()` calls are no longer necessary, which is nice.", "tree": {"sha": "06694c7e64baad006dece4c9fb8a3a4de41412f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06694c7e64baad006dece4c9fb8a3a4de41412f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03c7f83eb72d44077f03b8140768eefb60150a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03c7f83eb72d44077f03b8140768eefb60150a0", "html_url": "https://github.com/rust-lang/rust/commit/f03c7f83eb72d44077f03b8140768eefb60150a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03c7f83eb72d44077f03b8140768eefb60150a0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "002af4d0c7aac6607ca4e0a6629ab679df20aeac", "url": "https://api.github.com/repos/rust-lang/rust/commits/002af4d0c7aac6607ca4e0a6629ab679df20aeac", "html_url": "https://github.com/rust-lang/rust/commit/002af4d0c7aac6607ca4e0a6629ab679df20aeac"}], "stats": {"total": 204, "additions": 118, "deletions": 86}, "files": [{"sha": "b311f8344bb6dc787f12a51db651f0489a8d8f24", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 88, "deletions": 4, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f03c7f83eb72d44077f03b8140768eefb60150a0/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03c7f83eb72d44077f03b8140768eefb60150a0/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=f03c7f83eb72d44077f03b8140768eefb60150a0", "patch": "@@ -8,7 +8,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n use rustc_index::vec::IndexVec;\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use smallvec::SmallVec;\n use std::cell::Cell;\n@@ -18,7 +18,7 @@ use super::{Field, SourceInfo};\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UnsafetyViolationKind {\n-    /// Only permitted in regular `fn`s, prohibitted in `const fn`s.\n+    /// Only permitted in regular `fn`s, prohibited in `const fn`s.\n     General,\n     /// Permitted both in `const fn`s and regular `fn`s.\n     GeneralAndConstFn,\n@@ -35,13 +35,97 @@ pub enum UnsafetyViolationKind {\n     UnsafeFnBorrowPacked,\n }\n \n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum UnsafetyViolationDetails {\n+    CallToUnsafeFunction,\n+    UseOfInlineAssembly,\n+    InitializingTypeWith,\n+    CastOfPointerToInt,\n+    BorrowOfPackedField,\n+    UseOfMutableStatic,\n+    UseOfExternStatic,\n+    DerefOfRawPointer,\n+    AssignToNonCopyUnionField,\n+    AccessToUnionField,\n+    MutationOfLayoutConstrainedField,\n+    BorrowOfLayoutConstrainedField,\n+    CallToFunctionWith,\n+}\n+\n+impl UnsafetyViolationDetails {\n+    pub fn description_and_note(&self) -> (&'static str, &'static str) {\n+        use UnsafetyViolationDetails::*;\n+        match self {\n+            CallToUnsafeFunction => (\n+                \"call to unsafe function\",\n+                \"consult the function's documentation for information on how to avoid undefined \\\n+                 behavior\",\n+            ),\n+            UseOfInlineAssembly => (\n+                \"use of inline assembly\",\n+                \"inline assembly is entirely unchecked and can cause undefined behavior\",\n+            ),\n+            InitializingTypeWith => (\n+                \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+                \"initializing a layout restricted type's field with a value outside the valid \\\n+                 range is undefined behavior\",\n+            ),\n+            CastOfPointerToInt => {\n+                (\"cast of pointer to int\", \"casting pointers to integers in constants\")\n+            }\n+            BorrowOfPackedField => (\n+                \"borrow of packed field\",\n+                \"fields of packed structs might be misaligned: dereferencing a misaligned pointer \\\n+                 or even just creating a misaligned reference is undefined behavior\",\n+            ),\n+            UseOfMutableStatic => (\n+                \"use of mutable static\",\n+                \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n+                 races will cause undefined behavior\",\n+            ),\n+            UseOfExternStatic => (\n+                \"use of extern static\",\n+                \"extern statics are not controlled by the Rust type system: invalid data, \\\n+                 aliasing violations or data races will cause undefined behavior\",\n+            ),\n+            DerefOfRawPointer => (\n+                \"dereference of raw pointer\",\n+                \"raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules \\\n+                 and cause data races: all of these are undefined behavior\",\n+            ),\n+            AssignToNonCopyUnionField => (\n+                \"assignment to non-`Copy` union field\",\n+                \"the previous content of the field will be dropped, which causes undefined \\\n+                 behavior if the field was not properly initialized\",\n+            ),\n+            AccessToUnionField => (\n+                \"access to union field\",\n+                \"the field may not be properly initialized: using uninitialized data will cause \\\n+                 undefined behavior\",\n+            ),\n+            MutationOfLayoutConstrainedField => (\n+                \"mutation of layout constrained field\",\n+                \"mutating layout constrained fields cannot statically be checked for valid values\",\n+            ),\n+            BorrowOfLayoutConstrainedField => (\n+                \"borrow of layout constrained field with interior mutability\",\n+                \"references to fields of layout constrained fields lose the constraints. Coupled \\\n+                 with interior mutability, the field can be changed to invalid values\",\n+            ),\n+            CallToFunctionWith => (\n+                \"call to function with `#[target_feature]`\",\n+                \"can only be called if the required target features are available\",\n+            ),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n     pub lint_root: hir::HirId,\n-    pub description: Symbol,\n-    pub details: Symbol,\n     pub kind: UnsafetyViolationKind,\n+    pub details: UnsafetyViolationDetails,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "81d7ac089262206aa24957a226f5c50ea627701e", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 30, "deletions": 82, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/f03c7f83eb72d44077f03b8140768eefb60150a0/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03c7f83eb72d44077f03b8140768eefb60150a0/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=f03c7f83eb72d44077f03b8140768eefb60150a0", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{SAFE_PACKED_BORROWS, UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::sym;\n \n use std::ops::Bound;\n \n@@ -86,10 +86,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let sig = func_ty.fn_sig(self.tcx);\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n                     self.require_unsafe(\n-                        \"call to unsafe function\",\n-                        \"consult the function's documentation for information on how to avoid \\\n-                         undefined behavior\",\n                         UnsafetyViolationKind::GeneralAndConstFn,\n+                        UnsafetyViolationDetails::CallToUnsafeFunction,\n                     )\n                 }\n \n@@ -99,9 +97,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             }\n \n             TerminatorKind::InlineAsm { .. } => self.require_unsafe(\n-                \"use of inline assembly\",\n-                \"inline assembly is entirely unchecked and can cause undefined behavior\",\n                 UnsafetyViolationKind::General,\n+                UnsafetyViolationDetails::UseOfInlineAssembly,\n             ),\n         }\n         self.super_terminator(terminator, location);\n@@ -122,9 +119,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             }\n \n             StatementKind::LlvmInlineAsm { .. } => self.require_unsafe(\n-                \"use of inline assembly\",\n-                \"inline assembly is entirely unchecked and can cause undefined behavior\",\n                 UnsafetyViolationKind::General,\n+                UnsafetyViolationDetails::UseOfInlineAssembly,\n             ),\n         }\n         self.super_statement(statement, location);\n@@ -138,10 +134,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     match self.tcx.layout_scalar_valid_range(def.did) {\n                         (Bound::Unbounded, Bound::Unbounded) => {}\n                         _ => self.require_unsafe(\n-                            \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n-                            \"initializing a layout restricted type's field with a value \\\n-                                outside the valid range is undefined behavior\",\n                             UnsafetyViolationKind::GeneralAndConstFn,\n+                            UnsafetyViolationDetails::InitializingTypeWith,\n                         ),\n                     }\n                 }\n@@ -163,9 +157,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 match (cast_in, cast_out) {\n                     (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n                         self.require_unsafe(\n-                            \"cast of pointer to int\",\n-                            \"casting pointers to integers in constants\",\n                             UnsafetyViolationKind::General,\n+                            UnsafetyViolationDetails::CastOfPointerToInt,\n                         );\n                     }\n                     _ => {}\n@@ -190,11 +183,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n         if context.is_borrow() {\n             if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n                 self.require_unsafe(\n-                    \"borrow of packed field\",\n-                    \"fields of packed structs might be misaligned: dereferencing a \\\n-                    misaligned pointer or even just creating a misaligned reference \\\n-                    is undefined behavior\",\n                     UnsafetyViolationKind::BorrowPacked,\n+                    UnsafetyViolationDetails::BorrowOfPackedField,\n                 );\n             }\n         }\n@@ -204,11 +194,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             if context.is_borrow() {\n                 if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n                     self.require_unsafe(\n-                        \"borrow of packed field\",\n-                        \"fields of packed structs might be misaligned: dereferencing a \\\n-                        misaligned pointer or even just creating a misaligned reference \\\n-                        is undefined behavior\",\n                         UnsafetyViolationKind::BorrowPacked,\n+                        UnsafetyViolationDetails::BorrowOfPackedField,\n                     );\n                 }\n             }\n@@ -219,19 +206,14 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {\n                         if self.tcx.is_mutable_static(def_id) {\n                             self.require_unsafe(\n-                                \"use of mutable static\",\n-                                \"mutable statics can be mutated by multiple threads: aliasing \\\n-                            violations or data races will cause undefined behavior\",\n                                 UnsafetyViolationKind::General,\n+                                UnsafetyViolationDetails::UseOfMutableStatic,\n                             );\n                             return;\n                         } else if self.tcx.is_foreign_item(def_id) {\n                             self.require_unsafe(\n-                                \"use of extern static\",\n-                                \"extern statics are not controlled by the Rust type system: \\\n-                            invalid data, aliasing violations or data races will cause \\\n-                            undefined behavior\",\n                                 UnsafetyViolationKind::General,\n+                                UnsafetyViolationDetails::UseOfExternStatic,\n                             );\n                             return;\n                         }\n@@ -246,11 +228,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             let base_ty = Place::ty_from(place.local, proj_base, self.body, self.tcx).ty;\n             match base_ty.kind {\n                 ty::RawPtr(..) => self.require_unsafe(\n-                    \"dereference of raw pointer\",\n-                    \"raw pointers may be NULL, dangling or unaligned; they can violate \\\n-                         aliasing rules and cause data races: all of these are undefined \\\n-                         behavior\",\n                     UnsafetyViolationKind::General,\n+                    UnsafetyViolationDetails::DerefOfRawPointer,\n                 ),\n                 ty::Adt(adt, _) => {\n                     if adt.is_union() {\n@@ -271,21 +250,16 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                                 self.param_env,\n                             ) {\n                                 self.require_unsafe(\n-                                    \"assignment to non-`Copy` union field\",\n-                                    \"the previous content of the field will be dropped, which \\\n-                                     causes undefined behavior if the field was not properly \\\n-                                     initialized\",\n                                     UnsafetyViolationKind::GeneralAndConstFn,\n+                                    UnsafetyViolationDetails::AssignToNonCopyUnionField,\n                                 )\n                             } else {\n                                 // write to non-move union, safe\n                             }\n                         } else {\n                             self.require_unsafe(\n-                                \"access to union field\",\n-                                \"the field may not be properly initialized: using \\\n-                                 uninitialized data will cause undefined behavior\",\n                                 UnsafetyViolationKind::GeneralAndConstFn,\n+                                UnsafetyViolationDetails::AccessToUnionField,\n                             )\n                         }\n                     }\n@@ -298,26 +272,15 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n-    fn require_unsafe(\n-        &mut self,\n-        description: &'static str,\n-        details: &'static str,\n-        kind: UnsafetyViolationKind,\n-    ) {\n+    fn require_unsafe(&mut self, kind: UnsafetyViolationKind, details: UnsafetyViolationDetails) {\n         let source_info = self.source_info;\n         let lint_root = self.body.source_scopes[self.source_info.scope]\n             .local_data\n             .as_ref()\n             .assert_crate_local()\n             .lint_root;\n         self.register_violations(\n-            &[UnsafetyViolation {\n-                source_info,\n-                lint_root,\n-                description: Symbol::intern(description),\n-                details: Symbol::intern(details),\n-                kind,\n-            }],\n+            &[UnsafetyViolation { source_info, lint_root, kind, details }],\n             &[],\n         );\n     }\n@@ -434,12 +397,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                         if self.tcx.layout_scalar_valid_range(def.did)\n                             != (Bound::Unbounded, Bound::Unbounded)\n                         {\n-                            let (description, details) = if is_mut_use {\n-                                (\n-                                    \"mutation of layout constrained field\",\n-                                    \"mutating layout constrained fields cannot statically be \\\n-                                        checked for valid values\",\n-                                )\n+                            let details = if is_mut_use {\n+                                UnsafetyViolationDetails::MutationOfLayoutConstrainedField\n \n                             // Check `is_freeze` as late as possible to avoid cycle errors\n                             // with opaque types.\n@@ -448,21 +407,11 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                 .ty\n                                 .is_freeze(self.tcx.at(self.source_info.span), self.param_env)\n                             {\n-                                (\n-                                    \"borrow of layout constrained field with interior \\\n-                                        mutability\",\n-                                    \"references to fields of layout constrained fields \\\n-                                        lose the constraints. Coupled with interior mutability, \\\n-                                        the field can be changed to invalid values\",\n-                                )\n+                                UnsafetyViolationDetails::BorrowOfLayoutConstrainedField\n                             } else {\n                                 continue;\n                             };\n-                            self.require_unsafe(\n-                                description,\n-                                details,\n-                                UnsafetyViolationKind::GeneralAndConstFn,\n-                            );\n+                            self.require_unsafe(UnsafetyViolationKind::GeneralAndConstFn, details);\n                         }\n                     }\n                 }\n@@ -480,9 +429,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         // Is `callee_features` a subset of `calling_features`?\n         if !callee_features.iter().all(|feature| self_features.contains(feature)) {\n             self.require_unsafe(\n-                \"call to function with `#[target_feature]`\",\n-                \"can only be called if the required target features are available\",\n                 UnsafetyViolationKind::GeneralAndConstFn,\n+                UnsafetyViolationDetails::CallToFunctionWith,\n             )\n         }\n     }\n@@ -675,9 +623,9 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n \n     let UnsafetyCheckResult { violations, unsafe_blocks } = tcx.unsafety_check_result(def_id);\n \n-    for &UnsafetyViolation { source_info, lint_root, description, details, kind } in\n-        violations.iter()\n-    {\n+    for &UnsafetyViolation { source_info, lint_root, kind, details } in violations.iter() {\n+        let (description, note) = details.description_and_note();\n+\n         // Report an error.\n         let unsafe_fn_msg =\n             if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root) { \" function or\" } else { \"\" };\n@@ -693,8 +641,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     description,\n                     unsafe_fn_msg,\n                 )\n-                .span_label(source_info.span, &*description.as_str())\n-                .note(&details.as_str())\n+                .span_label(source_info.span, description)\n+                .note(note)\n                 .emit();\n             }\n             UnsafetyViolationKind::BorrowPacked => {\n@@ -712,7 +660,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                                 \"{} is unsafe and requires unsafe{} block (error E0133)\",\n                                 description, unsafe_fn_msg,\n                             ))\n-                            .note(&details.as_str())\n+                            .note(note)\n                             .emit()\n                         },\n                     )\n@@ -727,8 +675,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                         \"{} is unsafe and requires unsafe block (error E0133)\",\n                         description,\n                     ))\n-                    .span_label(source_info.span, &*description.as_str())\n-                    .note(&details.as_str())\n+                    .span_label(source_info.span, description)\n+                    .note(note)\n                     .emit();\n                 },\n             ),\n@@ -756,8 +704,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                         \"{} is unsafe and requires unsafe block (error E0133)\",\n                         description,\n                     ))\n-                    .span_label(source_info.span, &*description.as_str())\n-                    .note(&details.as_str())\n+                    .span_label(source_info.span, description)\n+                    .note(note)\n                     .emit();\n                 })\n             }"}]}