{"sha": "ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMTUyZDliOWZlOTg5OWE4ZTBiYTE0ZDExZmExZDc1ZWY1NmIxZDY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-05-25T17:15:27Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-26T12:14:22Z"}, "message": "Better suggestion for array_into_iter in for loop.", "tree": {"sha": "632fca2d45d6ad3971357ed334ad27e16b5b9719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632fca2d45d6ad3971357ed334ad27e16b5b9719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6", "html_url": "https://github.com/rust-lang/rust/commit/ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "html_url": "https://github.com/rust-lang/rust/commit/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "77741c7240b0d100ae1749094dbdd9e780a67f90", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_session::lint::FutureIncompatibilityReason;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n+use rustc_span::Span;\n \n declare_lint! {\n     /// The `array_into_iter` lint detects calling `into_iter` on arrays.\n@@ -36,13 +37,29 @@ declare_lint! {\n     };\n }\n \n-declare_lint_pass!(\n-    /// Checks for instances of calling `into_iter` on arrays.\n-    ArrayIntoIter => [ARRAY_INTO_ITER]\n-);\n+#[derive(Copy, Clone, Default)]\n+pub struct ArrayIntoIter {\n+    for_expr_span: Span,\n+}\n+\n+impl_lint_pass!(ArrayIntoIter => [ARRAY_INTO_ITER]);\n \n impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n+        // Save the span of expressions in `for _ in expr` syntax,\n+        // so we can give a better suggestion for those later.\n+        if let hir::ExprKind::Match(arg, [_], hir::MatchSource::ForLoopDesugar) = &expr.kind {\n+            if let hir::ExprKind::Call(path, [arg]) = &arg.kind {\n+                if let hir::ExprKind::Path(hir::QPath::LangItem(\n+                    hir::LangItem::IntoIterIntoIter,\n+                    _,\n+                )) = &path.kind\n+                {\n+                    self.for_expr_span = arg.span;\n+                }\n+            }\n+        }\n+\n         // We only care about method call expressions.\n         if let hir::ExprKind::MethodCall(call, span, args, _) = &expr.kind {\n             if call.ident.name != sym::into_iter {\n@@ -98,27 +115,37 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                 _ => bug!(\"array type coerced to something other than array or slice\"),\n             };\n             cx.struct_span_lint(ARRAY_INTO_ITER, *span, |lint| {\n-                lint.build(&format!(\n+                let mut diag = lint.build(&format!(\n                     \"this method call resolves to `<&{} as IntoIterator>::into_iter` \\\n                     (due to backwards compatibility), \\\n                     but will resolve to <{} as IntoIterator>::into_iter in Rust 2021.\",\n                     target, target,\n-                ))\n-                .span_suggestion(\n+                ));\n+                diag.span_suggestion(\n                     call.ident.span,\n                     \"use `.iter()` instead of `.into_iter()` to avoid ambiguity\",\n                     \"iter\".into(),\n                     Applicability::MachineApplicable,\n-                )\n-                .multipart_suggestion(\n-                    \"or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\",\n-                    vec![\n-                        (expr.span.shrink_to_lo(), \"IntoIterator::into_iter(\".into()),\n-                        (receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()), \")\".into()),\n-                    ],\n-                    Applicability::MaybeIncorrect,\n-                )\n-                .emit();\n+                );\n+                if self.for_expr_span == expr.span {\n+                    let expr_span = expr.span.ctxt().outer_expn_data().call_site;\n+                    diag.span_suggestion(\n+                        receiver_arg.span.shrink_to_hi().to(expr_span.shrink_to_hi()),\n+                        \"or remove `.into_iter()` to iterate by value\",\n+                        String::new(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    diag.multipart_suggestion(\n+                        \"or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\",\n+                        vec![\n+                            (expr.span.shrink_to_lo(), \"IntoIterator::into_iter(\".into()),\n+                            (receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()), \")\".into()),\n+                        ],\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                diag.emit();\n             })\n         }\n     }"}, {"sha": "89f9809d643e08487ebbdbaf47c8d0e4376470e9", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=ef152d9b9fe9899a8e0ba14d11fa1d75ef56b1d6", "patch": "@@ -163,7 +163,7 @@ macro_rules! late_lint_passes {\n                 // FIXME: Turn the computation of types which implement Debug into a query\n                 // and change this to a module lint pass\n                 MissingDebugImplementations: MissingDebugImplementations::default(),\n-                ArrayIntoIter: ArrayIntoIter,\n+                ArrayIntoIter: ArrayIntoIter::default(),\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n                 DropTraitConstraints: DropTraitConstraints,\n                 TemporaryCStringAsPtr: TemporaryCStringAsPtr,"}]}