{"sha": "b432e82515f4cc145cf41bbcb92ff9b874b23afe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MzJlODI1MTVmNGNjMTQ1Y2Y0MWJiY2I5MmZmOWI4NzRiMjNhZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-04T18:16:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-04T18:16:51Z"}, "message": "auto merge of #11306 : alexcrichton/rust/native-bounds, r=pcwalton\n\nThis allows inspection of the current task's bounds regardless of what the\r\nunderlying task is.\r\n\r\nCloses #11293", "tree": {"sha": "c94c4b24c628207e0522e458054b573e01fe8f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c94c4b24c628207e0522e458054b573e01fe8f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b432e82515f4cc145cf41bbcb92ff9b874b23afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b432e82515f4cc145cf41bbcb92ff9b874b23afe", "html_url": "https://github.com/rust-lang/rust/commit/b432e82515f4cc145cf41bbcb92ff9b874b23afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b432e82515f4cc145cf41bbcb92ff9b874b23afe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86cb6a39fee0d437ab1d4642468257b1f6b11f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d86cb6a39fee0d437ab1d4642468257b1f6b11f4", "html_url": "https://github.com/rust-lang/rust/commit/d86cb6a39fee0d437ab1d4642468257b1f6b11f4"}, {"sha": "dcaf10f8de7be79d7ef8aa5e048bf6535108dc16", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcaf10f8de7be79d7ef8aa5e048bf6535108dc16", "html_url": "https://github.com/rust-lang/rust/commit/dcaf10f8de7be79d7ef8aa5e048bf6535108dc16"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "ddacc11fd9eddc64ccdb692b2a2dbe962c76ae5a", "filename": "src/libgreen/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b432e82515f4cc145cf41bbcb92ff9b874b23afe/src%2Flibgreen%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b432e82515f4cc145cf41bbcb92ff9b874b23afe/src%2Flibgreen%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsimple.rs?ref=b432e82515f4cc145cf41bbcb92ff9b874b23afe", "patch": "@@ -75,6 +75,7 @@ impl Runtime for SimpleTask {\n         fail!()\n     }\n     fn local_io<'a>(&'a mut self) -> Option<rtio::LocalIo<'a>> { None }\n+    fn stack_bounds(&self) -> Option<(uint, uint)> { None }\n     fn wrap(~self) -> ~Any { fail!() }\n }\n "}, {"sha": "183fe8d055528ab9ee85e04bfde13813a1b853e9", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b432e82515f4cc145cf41bbcb92ff9b874b23afe/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b432e82515f4cc145cf41bbcb92ff9b874b23afe/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=b432e82515f4cc145cf41bbcb92ff9b874b23afe", "patch": "@@ -450,6 +450,13 @@ impl Runtime for GreenTask {\n         }\n     }\n \n+    fn stack_bounds(&self) -> Option<(uint, uint)> {\n+        self.coroutine.as_ref().map(|c| {\n+            (c.current_stack_segment.start() as uint,\n+             c.current_stack_segment.end() as uint)\n+        })\n+    }\n+\n     fn wrap(~self) -> ~Any { self as ~Any }\n }\n "}, {"sha": "661358a64e98b3c0167acf45033493693cf9d3f2", "filename": "src/libnative/task.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b432e82515f4cc145cf41bbcb92ff9b874b23afe/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b432e82515f4cc145cf41bbcb92ff9b874b23afe/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=b432e82515f4cc145cf41bbcb92ff9b874b23afe", "patch": "@@ -32,12 +32,17 @@ use bookeeping;\n /// Creates a new Task which is ready to execute as a 1:1 task.\n pub fn new() -> ~Task {\n     let mut task = ~Task::new();\n-    task.put_runtime(~Ops {\n+    task.put_runtime(ops() as ~rt::Runtime);\n+    return task;\n+}\n+\n+fn ops() -> ~Ops {\n+    ~Ops {\n         lock: unsafe { Mutex::new() },\n         awoken: false,\n         io: io::IoFactory::new(),\n-    } as ~rt::Runtime);\n-    return task;\n+        stack_bounds: None,\n+    }\n }\n \n /// Spawns a function with the default configuration\n@@ -53,7 +58,7 @@ pub fn spawn_opts(opts: TaskOpts, f: proc()) {\n         notify_chan, name, stack_size\n     } = opts;\n \n-    let mut task = new();\n+    let mut task = ~Task::new();\n     task.name = name;\n     match notify_chan {\n         Some(chan) => {\n@@ -65,6 +70,7 @@ pub fn spawn_opts(opts: TaskOpts, f: proc()) {\n \n     let stack = stack_size.unwrap_or(env::min_stack());\n     let task = task;\n+    let ops = ops();\n \n     // Spawning a new OS thread guarantees that __morestack will never get\n     // triggered, but we must manually set up the actual stack bounds once this\n@@ -75,13 +81,17 @@ pub fn spawn_opts(opts: TaskOpts, f: proc()) {\n     Thread::spawn_stack(stack, proc() {\n         let something_around_the_top_of_the_stack = 1;\n         let addr = &something_around_the_top_of_the_stack as *int;\n+        let my_stack = addr as uint;\n         unsafe {\n-            let my_stack = addr as uint;\n             stack::record_stack_bounds(my_stack - stack + 1024, my_stack);\n         }\n+        let mut ops = ops;\n+        ops.stack_bounds = Some((my_stack - stack + 1024, my_stack));\n \n         bookeeping::increment();\n         let mut f = Some(f);\n+        let mut task = task;\n+        task.put_runtime(ops as ~rt::Runtime);\n         task.run(|| { f.take_unwrap()() });\n         bookeeping::decrement();\n     })\n@@ -93,6 +103,11 @@ struct Ops {\n     lock: Mutex,       // native synchronization\n     awoken: bool,      // used to prevent spurious wakeups\n     io: io::IoFactory, // local I/O factory\n+\n+    // This field holds the known bounds of the stack in (lo, hi) form. Not all\n+    // native tasks necessarily know their precise bounds, hence this is\n+    // optional.\n+    stack_bounds: Option<(uint, uint)>,\n }\n \n impl rt::Runtime for Ops {\n@@ -114,6 +129,8 @@ impl rt::Runtime for Ops {\n         self as ~Any\n     }\n \n+    fn stack_bounds(&self) -> Option<(uint, uint)> { self.stack_bounds }\n+\n     // This function gets a little interesting. There are a few safety and\n     // ownership violations going on here, but this is all done in the name of\n     // shared state. Additionally, all of the violations are protected with a"}, {"sha": "050caef86ebdbf0930d54ef1c9ca7b3ecc7ec12f", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b432e82515f4cc145cf41bbcb92ff9b874b23afe/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b432e82515f4cc145cf41bbcb92ff9b874b23afe/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=b432e82515f4cc145cf41bbcb92ff9b874b23afe", "patch": "@@ -159,6 +159,7 @@ pub trait Runtime {\n     // you're in.\n     fn spawn_sibling(~self, cur_task: ~Task, opts: TaskOpts, f: proc());\n     fn local_io<'a>(&'a mut self) -> Option<rtio::LocalIo<'a>>;\n+    fn stack_bounds(&self) -> Option<(uint, uint)>; // (lo, hi)\n \n     // XXX: This is a serious code smell and this should not exist at all.\n     fn wrap(~self) -> ~Any;"}, {"sha": "41819421be8d0f64a71212d140f5f44696585959", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b432e82515f4cc145cf41bbcb92ff9b874b23afe/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b432e82515f4cc145cf41bbcb92ff9b874b23afe/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=b432e82515f4cc145cf41bbcb92ff9b874b23afe", "patch": "@@ -277,6 +277,13 @@ impl Task {\n     pub fn local_io<'a>(&'a mut self) -> Option<LocalIo<'a>> {\n         self.imp.get_mut_ref().local_io()\n     }\n+\n+    /// Returns the stack bounds for this task in (lo, hi) format. The stack\n+    /// bounds may not be known for all tasks, so the return value may be\n+    /// `None`.\n+    pub fn stack_bounds(&self) -> Option<(uint, uint)> {\n+        self.imp.get_ref().stack_bounds()\n+    }\n }\n \n impl Drop for Task {"}]}