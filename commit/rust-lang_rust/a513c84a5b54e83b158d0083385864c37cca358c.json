{"sha": "a513c84a5b54e83b158d0083385864c37cca358c", "node_id": "C_kwDOAAsO6NoAKGE1MTNjODRhNWI1NGU4M2IxNThkMDA4MzM4NTg2NGMzN2NjYTM1OGM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-12T07:27:36Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-12T07:27:36Z"}, "message": "Add `AtomicPtr::as_mut_ptr`", "tree": {"sha": "56acd83e91c77ea77247745748679cada825d42a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56acd83e91c77ea77247745748679cada825d42a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a513c84a5b54e83b158d0083385864c37cca358c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a513c84a5b54e83b158d0083385864c37cca358c", "html_url": "https://github.com/rust-lang/rust/commit/a513c84a5b54e83b158d0083385864c37cca358c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a513c84a5b54e83b158d0083385864c37cca358c/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4203eda5f0dd0b0192bfd22ea5989fbaf917818", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4203eda5f0dd0b0192bfd22ea5989fbaf917818", "html_url": "https://github.com/rust-lang/rust/commit/d4203eda5f0dd0b0192bfd22ea5989fbaf917818"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "8a7c3c3c3038ce2368de3ba0e197fb0d6c9e7f51", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a513c84a5b54e83b158d0083385864c37cca358c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a513c84a5b54e83b158d0083385864c37cca358c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=a513c84a5b54e83b158d0083385864c37cca358c", "patch": "@@ -1786,6 +1786,42 @@ impl<T> AtomicPtr<T> {\n         // SAFETY: data races are prevented by atomic intrinsics.\n         unsafe { atomic_xor(self.p.get(), core::ptr::invalid_mut(val), order).cast() }\n     }\n+\n+    /// Returns a mutable pointer to the underlying pointer.\n+    ///\n+    /// Doing non-atomic reads and writes on the resulting integer can be a data race.\n+    /// This method is mostly useful for FFI, where the function signature may use\n+    /// `*mut *mut T` instead of `&AtomicPtr<T>`.\n+    ///\n+    /// Returning an `*mut` pointer from a shared reference to this atomic is safe because the\n+    /// atomic types work with interior mutability. All modifications of an atomic change the value\n+    /// through a shared reference, and can do so safely as long as they use atomic operations. Any\n+    /// use of the returned raw pointer requires an `unsafe` block and still has to uphold the same\n+    /// restriction: operations on it must be atomic.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore (extern-declaration)\n+    /// #![feature(atomic_mut_ptr)]\n+    //// use std::sync::atomic::AtomicPtr;\n+    ///\n+    /// extern \"C\" {\n+    ///     fn my_atomic_op(arg: *mut *mut u32);\n+    /// }\n+    ///\n+    /// let mut value = 17;\n+    /// let atomic = AtomicPtr::new(&mut value);\n+    ///\n+    /// // SAFETY: Safe as long as `my_atomic_op` is atomic.\n+    /// unsafe {\n+    ///     my_atomic_op(atomic.as_mut_ptr());\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_mut_ptr\", reason = \"recently added\", issue = \"66893\")]\n+    pub fn as_mut_ptr(&self) -> *mut *mut T {\n+        self.p.get()\n+    }\n }\n \n #[cfg(target_has_atomic_load_store = \"8\")]"}]}