{"sha": "21b7052eb87c397094484227eec75269061d8491", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYjcwNTJlYjg3YzM5NzA5NDQ4NDIyN2VlYzc1MjY5MDYxZDg0OTE=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-25T18:05:41Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-14T23:47:22Z"}, "message": "Point to closure when emitting 'cannot move out' for captured variable", "tree": {"sha": "ce6d394e9b60d7accf9bd898ac2d86f2499ab68c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce6d394e9b60d7accf9bd898ac2d86f2499ab68c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b7052eb87c397094484227eec75269061d8491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b7052eb87c397094484227eec75269061d8491", "html_url": "https://github.com/rust-lang/rust/commit/21b7052eb87c397094484227eec75269061d8491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b7052eb87c397094484227eec75269061d8491/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c0f80d6081092faff801542dd82f0e2420152b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c0f80d6081092faff801542dd82f0e2420152b", "html_url": "https://github.com/rust-lang/rust/commit/c3c0f80d6081092faff801542dd82f0e2420152b"}], "stats": {"total": 718, "additions": 503, "deletions": 215}, "files": [{"sha": "b23ce281bef24de4ed1b6ef045744f2ff25bcb95", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -336,15 +336,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 if def_id.as_local() == Some(self.mir_def_id()) && upvar_field.is_some() =>\n             {\n                 let closure_kind_ty = closure_substs.as_closure().kind_ty();\n-                let closure_kind = closure_kind_ty.to_opt_closure_kind();\n-                let capture_description = match closure_kind {\n-                    Some(ty::ClosureKind::Fn) => \"captured variable in an `Fn` closure\",\n-                    Some(ty::ClosureKind::FnMut) => \"captured variable in an `FnMut` closure\",\n+                let closure_kind = match closure_kind_ty.to_opt_closure_kind() {\n+                    Some(kind @ (ty::ClosureKind::Fn | ty::ClosureKind::FnMut)) => kind,\n                     Some(ty::ClosureKind::FnOnce) => {\n                         bug!(\"closure kind does not match first argument type\")\n                     }\n                     None => bug!(\"closure kind not inferred by borrowck\"),\n                 };\n+                let capture_description =\n+                    format!(\"captured variable in an `{}` closure\", closure_kind);\n \n                 let upvar = &self.upvars[upvar_field.unwrap().index()];\n                 let upvar_hir_id = upvar.place.get_root_variable();\n@@ -368,6 +368,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let mut diag = self.cannot_move_out_of(span, &place_description);\n \n                 diag.span_label(upvar_span, \"captured outer variable\");\n+                diag.span_label(\n+                    self.body.span,\n+                    format!(\"captured by this `{}` closure\", closure_kind),\n+                );\n \n                 diag\n             }"}, {"sha": "30e74c5ec950c6044205afe52d09947b2f0ca66e", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -4,7 +4,10 @@ error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n LL |     let x = Box::new(0);\n    |         - captured outer variable\n LL |     Box::new(|| x)\n-   |                 ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |              ---^\n+   |              |  |\n+   |              |  move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |              captured by this `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "05489cf18e7fc9a5b2ebc352536a4b1d7a46f8ea", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -1,15 +1,18 @@\n error[E0507]: cannot move out of `bar`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-move-by-capture.rs:9:29\n    |\n-LL |     let bar: Box<_> = box 3;\n-   |         --- captured outer variable\n-LL |     let _g = to_fn_mut(|| {\n-LL |         let _h = to_fn_once(move || -> isize { *bar });\n-   |                             ^^^^^^^^^^^^^^^^   ----\n-   |                             |                  |\n-   |                             |                  move occurs because `bar` has type `Box<isize>`, which does not implement the `Copy` trait\n-   |                             |                  move occurs due to use in closure\n-   |                             move out of `bar` occurs here\n+LL |       let bar: Box<_> = box 3;\n+   |           --- captured outer variable\n+LL |       let _g = to_fn_mut(|| {\n+   |  ________________________-\n+LL | |         let _h = to_fn_once(move || -> isize { *bar });\n+   | |                             ^^^^^^^^^^^^^^^^   ----\n+   | |                             |                  |\n+   | |                             |                  move occurs because `bar` has type `Box<isize>`, which does not implement the `Copy` trait\n+   | |                             |                  move occurs due to use in closure\n+   | |                             move out of `bar` occurs here\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error: aborting due to previous error\n "}, {"sha": "9fc12ba74904267249bd12963ec30949ec60b077", "filename": "src/test/ui/borrowck/issue-87456-point-to-closure.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.rs?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #87456.\n+\n+fn take_mut(_val: impl FnMut()) {}\n+\n+fn main() {\n+    let val = String::new();\n+    //~^ NOTE: captured outer variable\n+    take_mut(|| {\n+    //~^ NOTE: captured by this `FnMut` closure\n+        let _foo: String = val;\n+        //~^ ERROR: cannot move out of `val`, a captured variable in an `FnMut` closure [E0507]\n+        //~| NOTE: move occurs because\n+    })\n+}"}, {"sha": "fd38ad7bb0a7f16d7be0ebd385026b3a64fa62b5", "filename": "src/test/ui/borrowck/issue-87456-point-to-closure.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -0,0 +1,22 @@\n+error[E0507]: cannot move out of `val`, a captured variable in an `FnMut` closure\n+  --> $DIR/issue-87456-point-to-closure.rs:10:28\n+   |\n+LL |       let val = String::new();\n+   |           --- captured outer variable\n+LL |\n+LL |       take_mut(|| {\n+   |  ______________-\n+LL | |\n+LL | |         let _foo: String = val;\n+   | |                            ^^^\n+   | |                            |\n+   | |                            move occurs because `val` has type `String`, which does not implement the `Copy` trait\n+   | |                            help: consider borrowing here: `&val`\n+LL | |\n+LL | |\n+LL | |     })\n+   | |_____- captured by this `FnMut` closure\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "1663ce81d6cf446b5819502eb7b14b8f8c108884", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -1,11 +1,15 @@\n error[E0507]: cannot move out of `y`, a captured variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:11:9\n    |\n-LL |     let y = vec![format!(\"World\")];\n-   |         - captured outer variable\n-LL |     call(|| {\n-LL |         y.into_iter();\n-   |         ^ move occurs because `y` has type `Vec<String>`, which does not implement the `Copy` trait\n+LL |       let y = vec![format!(\"World\")];\n+   |           - captured outer variable\n+LL |       call(|| {\n+   |  __________-\n+LL | |         y.into_iter();\n+   | |         ^ move occurs because `y` has type `Vec<String>`, which does not implement the `Copy` trait\n+LL | |\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "fa3b58e1279378353ddd0c6033eb9edee9518b0f", "filename": "src/test/ui/issues/issue-4335.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -4,7 +4,10 @@ error[E0507]: cannot move out of `*v`, as `v` is a captured variable in an `FnMu\n LL | fn f<'r, T>(v: &'r T) -> Box<dyn FnMut() -> T + 'r> {\n    |             - captured outer variable\n LL |     id(Box::new(|| *v))\n-   |                    ^^ move occurs because `*v` has type `T`, which does not implement the `Copy` trait\n+   |                 ---^^\n+   |                 |  |\n+   |                 |  move occurs because `*v` has type `T`, which does not implement the `Copy` trait\n+   |                 captured by this `FnMut` closure\n \n error: aborting due to previous error\n "}, {"sha": "e12af2d45274315fcdef2ad9bfed6f3d1e4f2784", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -4,7 +4,10 @@ error[E0507]: cannot move out of `i`, a captured variable in an `Fn` closure\n LL |     let i = box 3;\n    |         - captured outer variable\n LL |     let _f = to_fn(|| test(i));\n-   |                            ^ move occurs because `i` has type `Box<usize>`, which does not implement the `Copy` trait\n+   |                    --------^-\n+   |                    |       |\n+   |                    |       move occurs because `i` has type `Box<usize>`, which does not implement the `Copy` trait\n+   |                    captured by this `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "c9324f0422cdc4444d88921cff84884071898e92", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -4,7 +4,10 @@ error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn`\n LL |        let x = (vec![22], vec![44]);\n    |            - captured outer variable\n LL |        expect_fn(|| drop(x.0));\n-   |                          ^^^ move occurs because `x.0` has type `Vec<i32>`, which does not implement the `Copy` trait\n+   |                  --------^^^-\n+   |                  |       |\n+   |                  |       move occurs because `x.0` has type `Vec<i32>`, which does not implement the `Copy` trait\n+   |                  captured by this `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "0f630abd14876a5b21a0e00e40e1654270209403", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -29,11 +29,17 @@ LL |     f.f.call_mut(())\n error[E0507]: cannot move out of `f`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:57:13\n    |\n-LL |     let mut f = move |g: Box<dyn FnMut(isize)>, b: isize| {\n-   |         ----- captured outer variable\n+LL |       let mut f = move |g: Box<dyn FnMut(isize)>, b: isize| {\n+   |           ----- captured outer variable\n ...\n-LL |         foo(f);\n-   |             ^ move occurs because `f` has type `[closure@$DIR/borrowck-call-is-borrow-issue-12224.rs:52:17: 54:6]`, which does not implement the `Copy` trait\n+LL |       f(Box::new(|a| {\n+   |  ________________-\n+LL | |\n+LL | |         foo(f);\n+   | |             ^ move occurs because `f` has type `[closure@$DIR/borrowck-call-is-borrow-issue-12224.rs:52:17: 54:6]`, which does not implement the `Copy` trait\n+LL | |\n+LL | |     }), 3);\n+   | |_____- captured by this `FnMut` closure\n \n error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:55:16"}, {"sha": "fb1055c9c30931f9d307d13fb77aec747ceb2ece", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.stderr", "status": "modified", "additions": 380, "deletions": 174, "changes": 554, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -1,281 +1,487 @@\n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:28:21\n    |\n-LL |     let x = X(Y);\n-   |         - captured outer variable\n+LL |       let x = X(Y);\n+   |           - captured outer variable\n ...\n-LL |         let X(_t) = x;\n-   |               --    ^ help: consider borrowing here: `&x`\n-   |               |\n-   |               data moved here\n-   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+   | |               --    ^ help: consider borrowing here: `&x`\n+   | |               |\n+   | |               data moved here\n+   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL | |\n+LL | |\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:32:34\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         if let Either::One(_t) = e { }\n-   |                            --    ^ help: consider borrowing here: `&e`\n-   |                            |\n-   |                            data moved here\n-   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+LL | |\n+LL | |         if let Either::One(_t) = e { }\n+   | |                            --    ^ help: consider borrowing here: `&e`\n+   | |                            |\n+   | |                            data moved here\n+   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:36:37\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         while let Either::One(_t) = e { }\n-   |                               --    ^ help: consider borrowing here: `&e`\n-   |                               |\n-   |                               data moved here\n-   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         while let Either::One(_t) = e { }\n+   | |                               --    ^ help: consider borrowing here: `&e`\n+   | |                               |\n+   | |                               data moved here\n+   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:40:15\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n-...\n-LL |             Either::One(_t)\n-   |                         --\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match e {\n+   | |               ^ help: consider borrowing here: `&e`\n+...  |\n+LL | |             Either::One(_t)\n+   | |                         --\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:47:15\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n-...\n-LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |             Either::One(_t) => (),\n-   |                         --\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match e {\n+   | |               ^ help: consider borrowing here: `&e`\n+...  |\n+LL | |             Either::One(_t) => (),\n+   | |                         --\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:56:25\n    |\n-LL |     let x = X(Y);\n-   |         - captured outer variable\n+LL |       let x = X(Y);\n+   |           - captured outer variable\n ...\n-LL |         let X(mut _t) = x;\n-   |               ------    ^ help: consider borrowing here: `&x`\n-   |               |\n-   |               data moved here\n-   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         let X(mut _t) = x;\n+   | |               ------    ^ help: consider borrowing here: `&x`\n+   | |               |\n+   | |               data moved here\n+   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:60:38\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         if let Either::One(mut _t) = em { }\n-   |                            ------    ^^ help: consider borrowing here: `&em`\n-   |                            |\n-   |                            data moved here\n-   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         if let Either::One(mut _t) = em { }\n+   | |                            ------    ^^ help: consider borrowing here: `&em`\n+   | |                            |\n+   | |                            data moved here\n+   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:64:41\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         while let Either::One(mut _t) = em { }\n-   |                               ------    ^^ help: consider borrowing here: `&em`\n-   |                               |\n-   |                               data moved here\n-   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         while let Either::One(mut _t) = em { }\n+   | |                               ------    ^^ help: consider borrowing here: `&em`\n+   | |                               |\n+   | |                               data moved here\n+   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:68:15\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n-...\n-LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |             Either::One(mut _t)\n-   |                         ------\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match em {\n+   | |               ^^ help: consider borrowing here: `&em`\n+...  |\n+LL | |             Either::One(mut _t)\n+   | |                         ------\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:75:15\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n-...\n-LL |             Either::One(mut _t) => (),\n-   |                         ------\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match em {\n+   | |               ^^ help: consider borrowing here: `&em`\n+...  |\n+LL | |             Either::One(mut _t) => (),\n+   | |                         ------\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:95:21\n    |\n-LL |     let x = X(Y);\n-   |         - captured outer variable\n+LL |       let x = X(Y);\n+   |           - captured outer variable\n ...\n-LL |         let X(_t) = x;\n-   |               --    ^ help: consider borrowing here: `&x`\n-   |               |\n-   |               data moved here\n-   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+   | |               --    ^ help: consider borrowing here: `&x`\n+   | |               |\n+   | |               data moved here\n+   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL | |\n+LL | |\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:99:34\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         if let Either::One(_t) = e { }\n-   |                            --    ^ help: consider borrowing here: `&e`\n-   |                            |\n-   |                            data moved here\n-   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+LL | |\n+LL | |         if let Either::One(_t) = e { }\n+   | |                            --    ^ help: consider borrowing here: `&e`\n+   | |                            |\n+   | |                            data moved here\n+   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:103:37\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         while let Either::One(_t) = e { }\n-   |                               --    ^ help: consider borrowing here: `&e`\n-   |                               |\n-   |                               data moved here\n-   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         while let Either::One(_t) = e { }\n+   | |                               --    ^ help: consider borrowing here: `&e`\n+   | |                               |\n+   | |                               data moved here\n+   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:107:15\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n-...\n-LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |             Either::One(_t)\n-   |                         --\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match e {\n+   | |               ^ help: consider borrowing here: `&e`\n+...  |\n+LL | |             Either::One(_t)\n+   | |                         --\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:114:15\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n-...\n-LL |             Either::One(_t) => (),\n-   |                         --\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match e {\n+   | |               ^ help: consider borrowing here: `&e`\n+...  |\n+LL | |             Either::One(_t) => (),\n+   | |                         --\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:123:25\n    |\n-LL |     let x = X(Y);\n-   |         - captured outer variable\n+LL |       let x = X(Y);\n+   |           - captured outer variable\n ...\n-LL |         let X(mut _t) = x;\n-   |               ------    ^ help: consider borrowing here: `&x`\n-   |               |\n-   |               data moved here\n-   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         let X(mut _t) = x;\n+   | |               ------    ^ help: consider borrowing here: `&x`\n+   | |               |\n+   | |               data moved here\n+   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:127:38\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         if let Either::One(mut _t) = em { }\n-   |                            ------    ^^ help: consider borrowing here: `&em`\n-   |                            |\n-   |                            data moved here\n-   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         if let Either::One(mut _t) = em { }\n+   | |                            ------    ^^ help: consider borrowing here: `&em`\n+   | |                            |\n+   | |                            data moved here\n+   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:131:41\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         while let Either::One(mut _t) = em { }\n-   |                               ------    ^^ help: consider borrowing here: `&em`\n-   |                               |\n-   |                               data moved here\n-   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         while let Either::One(mut _t) = em { }\n+   | |                               ------    ^^ help: consider borrowing here: `&em`\n+   | |                               |\n+   | |                               data moved here\n+   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:135:15\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n-...\n-LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |             Either::One(mut _t)\n-   |                         ------\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match em {\n+   | |               ^^ help: consider borrowing here: `&em`\n+...  |\n+LL | |             Either::One(mut _t)\n+   | |                         ------\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:142:15\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n-...\n-LL |             Either::One(mut _t) => (),\n-   |                         ------\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match em {\n+   | |               ^^ help: consider borrowing here: `&em`\n+...  |\n+LL | |             Either::One(mut _t) => (),\n+   | |                         ------\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:150:15\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n-...\n-LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |             Either::One(mut _t) => (),\n-   |                         ------\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match em {\n+   | |               ^^ help: consider borrowing here: `&em`\n+...  |\n+LL | |             Either::One(mut _t) => (),\n+   | |                         ------\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error: aborting due to 21 previous errors\n "}, {"sha": "a0ce7d05b4d48efecc2aa29787f701d344254ba9", "filename": "src/test/ui/suggestions/option-content-move2.stderr", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -1,17 +1,22 @@\n error[E0507]: cannot move out of `var`, a captured variable in an `FnMut` closure\n   --> $DIR/option-content-move2.rs:9:9\n    |\n-LL |     let mut var = None;\n-   |         ------- captured outer variable\n-...\n-LL |         move || {\n-   |         ^^^^^^^ move out of `var` occurs here\n-LL |\n-LL |             var = Some(NotCopyable);\n-   |             ---\n-   |             |\n-   |             move occurs because `var` has type `Option<NotCopyable>`, which does not implement the `Copy` trait\n-   |             move occurs due to use in closure\n+LL |       let mut var = None;\n+   |           ------- captured outer variable\n+LL |       func(|| {\n+   |  __________-\n+LL | |         // Shouldn't suggest `move ||.as_ref()` here\n+LL | |         move || {\n+   | |         ^^^^^^^ move out of `var` occurs here\n+LL | |\n+LL | |             var = Some(NotCopyable);\n+   | |             ---\n+   | |             |\n+   | |             move occurs because `var` has type `Option<NotCopyable>`, which does not implement the `Copy` trait\n+   | |             move occurs due to use in closure\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error: aborting due to previous error\n "}, {"sha": "482d3e44fe4ea7f0656ff49342c76ddb0e1c8905", "filename": "src/test/ui/unboxed-closures/unboxed-closure-illegal-move.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b7052eb87c397094484227eec75269061d8491/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr?ref=21b7052eb87c397094484227eec75269061d8491", "patch": "@@ -4,31 +4,43 @@ error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn(|| drop(x));\n-   |                               ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       --------^-\n+   |                       |       |\n+   |                       |       move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       captured by this `Fn` closure\n \n error[E0507]: cannot move out of `x`, a captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:19:35\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn_mut(|| drop(x));\n-   |                                   ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           --------^-\n+   |                           |       |\n+   |                           |       move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:28:36\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn(move || drop(x));\n-   |                                    ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       -------------^-\n+   |                       |            |\n+   |                       |            move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       captured by this `Fn` closure\n \n error[E0507]: cannot move out of `x`, a captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:32:40\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn_mut(move || drop(x));\n-   |                                        ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           -------------^-\n+   |                           |            |\n+   |                           |            move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           captured by this `FnMut` closure\n \n error: aborting due to 4 previous errors\n "}]}