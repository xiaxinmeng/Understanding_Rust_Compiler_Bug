{"sha": "426055cb299017748fcf8368e40afa4259af7a57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNjA1NWNiMjk5MDE3NzQ4ZmNmODM2OGU0MGFmYTQyNTlhZjdhNTc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-11T15:42:47Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-14T11:40:11Z"}, "message": "Improve rustdoc js testers code", "tree": {"sha": "03a703e60b80f68c791a15fe5550151a05154151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03a703e60b80f68c791a15fe5550151a05154151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/426055cb299017748fcf8368e40afa4259af7a57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/426055cb299017748fcf8368e40afa4259af7a57", "html_url": "https://github.com/rust-lang/rust/commit/426055cb299017748fcf8368e40afa4259af7a57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/426055cb299017748fcf8368e40afa4259af7a57/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6b75e0ef11107d699a98bb89dd9f9d688d3e008", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b75e0ef11107d699a98bb89dd9f9d688d3e008", "html_url": "https://github.com/rust-lang/rust/commit/d6b75e0ef11107d699a98bb89dd9f9d688d3e008"}], "stats": {"total": 84, "additions": 39, "deletions": 45}, "files": [{"sha": "85c5d28bb8924690f7fad6ae7af5870f9dbd6659", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/426055cb299017748fcf8368e40afa4259af7a57/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426055cb299017748fcf8368e40afa4259af7a57/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=426055cb299017748fcf8368e40afa4259af7a57", "patch": "@@ -628,8 +628,9 @@ impl Step for RustdocJSStd {\n             let mut command = Command::new(nodejs);\n             command\n                 .arg(builder.src.join(\"src/tools/rustdoc-js/tester.js\"))\n-                .arg(\"--std\")\n-                .arg(\"--version\")\n+                .arg(\"--crate-name\")\n+                .arg(\"std\")\n+                .arg(\"--resource-suffix\")\n                 .arg(crate::channel::CFG_RELEASE_NUM)\n                 .arg(\"--doc-folder\")\n                 .arg(builder.doc_out(self.target))"}, {"sha": "d7be8c2b6eff1254ceb753ba29155a721391dc84", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/426055cb299017748fcf8368e40afa4259af7a57/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426055cb299017748fcf8368e40afa4259af7a57/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=426055cb299017748fcf8368e40afa4259af7a57", "patch": "@@ -2807,11 +2807,15 @@ impl<'test> TestCx<'test> {\n             self.document(&out_dir);\n \n             let root = self.config.find_rust_src_root().unwrap();\n+            let file_stem =\n+                self.testpaths.file.file_stem().and_then(|f| f.to_str()).expect(\"no file stem\");\n             let res = self.cmd2procres(\n                 Command::new(&nodejs)\n                     .arg(root.join(\"src/tools/rustdoc-js/tester.js\"))\n                     .arg(\"--doc-folder\")\n-                    .arg(out_dir.parent().expect(\"no parent\"))\n+                    .arg(out_dir)\n+                    .arg(\"--crate-name\")\n+                    .arg(file_stem.replace(\"-\", \"_\"))\n                     .arg(\"--test-file\")\n                     .arg(self.testpaths.file.with_extension(\"js\")),\n             );"}, {"sha": "03f06fc1c6c7113238a9114822038e9c42fe6fcc", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 31, "deletions": 42, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/426055cb299017748fcf8368e40afa4259af7a57/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/426055cb299017748fcf8368e40afa4259af7a57/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=426055cb299017748fcf8368e40afa4259af7a57", "patch": "@@ -224,7 +224,7 @@ function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n     }\n     searchIndex.pop();\n     searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n-    finalJS = \"\";\n+    var finalJS = \"\";\n \n     var arraysToLoad = [\"itemTypes\"];\n     var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n@@ -306,52 +306,53 @@ function runChecks(testFile, loaded, index) {\n     return errors;\n }\n \n-function load_files(doc_folder, version, crate) {\n-    var mainJs = readFile(doc_folder + \"/main\" + version + \".js\");\n-    var aliases = readFile(doc_folder + \"/aliases\" + version + \".js\");\n-    var searchIndex = readFile(doc_folder + \"/search-index\" + version + \".js\").split(\"\\n\");\n+function load_files(doc_folder, resource_suffix, crate) {\n+    var mainJs = readFile(path.join(doc_folder, \"main\" + resource_suffix + \".js\"));\n+    var aliases = readFile(path.join(doc_folder, \"aliases\" + resource_suffix + \".js\"));\n+    var searchIndex = readFile(\n+        path.join(doc_folder, \"search-index\" + resource_suffix + \".js\")).split(\"\\n\");\n \n     return loadMainJsAndIndex(mainJs, aliases, searchIndex, crate);\n }\n \n function showHelp() {\n     console.log(\"rustdoc-js options:\");\n-    console.log(\"  --doc-folder [PATH] : location of the generated doc folder\");\n-    console.log(\"  --help              : show this message then quit\");\n-    console.log(\"  --std               : to run std tests\");\n-    console.log(\"  --test-file   [PATH]: location of the JS test file\");\n-    console.log(\"  --test-folder [PATH]: location of the JS tests folder\");\n-    console.log(\"  --version [STRING]  : version used when generating docs (used to get js files)\");\n+    console.log(\"  --doc-folder [PATH]        : location of the generated doc folder\");\n+    console.log(\"  --help                     : show this message then quit\");\n+    console.log(\"  --crate-name [STRING]      : crate name to be used\");\n+    console.log(\"  --test-file [PATH]         : location of the JS test file\");\n+    console.log(\"  --test-folder [PATH]       : location of the JS tests folder\");\n+    console.log(\"  --resource-suffix [STRING] : suffix to refer to the correct files\");\n }\n \n function parseOptions(args) {\n     var opts = {\n-        \"is_std\": false,\n-        \"version\": \"\",\n+        \"crate_name\": \"\",\n+        \"resource_suffix\": \"\",\n         \"doc_folder\": \"\",\n         \"test_folder\": \"\",\n         \"test_file\": \"\",\n     };\n     var correspondances = {\n-        \"--version\": \"version\",\n+        \"--resource-suffix\": \"resource_suffix\",\n         \"--doc-folder\": \"doc_folder\",\n         \"--test-folder\": \"test_folder\",\n         \"--test-file\": \"test_file\",\n+        \"--crate-name\": \"crate_name\",\n     };\n \n     for (var i = 0; i < args.length; ++i) {\n-        if (args[i] === \"--version\"\n+        if (args[i] === \"--resource-suffix\"\n             || args[i] === \"--doc-folder\"\n             || args[i] === \"--test-folder\"\n-            || args[i] === \"--test-file\") {\n+            || args[i] === \"--test-file\"\n+            || args[i] === \"--crate-name\") {\n             i += 1;\n             if (i >= args.length) {\n                 console.error(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n                 return null;\n             }\n             opts[correspondances[args[i - 1]]] = args[i];\n-        } else if (args[i] === \"--std\") {\n-            opts[\"is_std\"] = true;\n         } else if (args[i] === \"--help\") {\n             showHelp();\n             process.exit(0);\n@@ -363,28 +364,20 @@ function parseOptions(args) {\n     }\n     if (opts[\"doc_folder\"].length < 1) {\n         console.error(\"Missing `--doc-folder` option.\");\n-        return null;\n+    } else if (opts[\"crate_name\"].length < 1) {\n+        console.error(\"Missing `--crate-name` option.\");\n     } else if (opts[\"test_folder\"].length < 1 && opts[\"test_file\"].length < 1) {\n         console.error(\"At least one of `--test-folder` or `--test-file` option is required.\");\n-        return null;\n-    } else if (opts[\"is_std\"] === true && opts[\"test_file\"].length !== 0) {\n-        console.error(\"`--std` and `--test-file` options can't be used at the same time.\")\n+    } else {\n+        return opts;\n     }\n-    return opts;\n+    return null;\n }\n \n-function checkFile(test_file, opts, std_loaded, std_index) {\n+function checkFile(test_file, opts, loaded, index) {\n     const test_name = path.basename(test_file, \".js\");\n \n     process.stdout.write('Checking \"' + test_name + '\" ... ');\n-\n-    var loaded = std_loaded;\n-    var index = std_index;\n-    if (opts[\"is_std\"] !== true) {\n-        var tmp = load_files(path.join(opts[\"doc_folder\"], test_name), opts[\"version\"], test_name);\n-        loaded = tmp[0];\n-        index = tmp[1];\n-    }\n     return runChecks(test_file, loaded, index);\n }\n \n@@ -394,25 +387,21 @@ function main(argv) {\n         return 1;\n     }\n \n-    var std_loaded = null;\n-    var std_index = null;\n-    if (opts[\"is_std\"] === true) {\n-        var tmp = load_files(opts[\"doc_folder\"], opts[\"version\"], \"std\");\n-        std_loaded = tmp[0];\n-        std_index = tmp[1];\n-    }\n-\n+    var [loaded, index] = load_files(\n+        opts[\"doc_folder\"],\n+        opts[\"resource_suffix\"],\n+        opts[\"crate_name\"]);\n     var errors = 0;\n \n     if (opts[\"test_file\"].length !== 0) {\n-        errors += checkFile(opts[\"test_file\"], opts, null, null);\n+        errors += checkFile(opts[\"test_file\"], opts, loaded, index);\n     }\n     if (opts[\"test_folder\"].length !== 0) {\n         fs.readdirSync(opts[\"test_folder\"]).forEach(function(file) {\n             if (!file.endsWith(\".js\")) {\n                 return;\n             }\n-            errors += checkFile(path.join(opts[\"test_folder\"], file), opts, std_loaded, std_index);\n+            errors += checkFile(path.join(opts[\"test_folder\"], file), opts, loaded, index);\n         });\n     }\n     return errors > 0 ? 1 : 0;"}]}