{"sha": "90b3658cd69f63d95f3bf568e6f23406c56f11a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYjM2NThjZDY5ZjYzZDk1ZjNiZjU2OGU2ZjIzNDA2YzU2ZjExYTc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T05:19:43Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T14:05:54Z"}, "message": "std: remove Encoder::read_rec and Decoder::emit_rec", "tree": {"sha": "40ec4badb694e21123f60f079f48a550778019e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40ec4badb694e21123f60f079f48a550778019e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90b3658cd69f63d95f3bf568e6f23406c56f11a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90b3658cd69f63d95f3bf568e6f23406c56f11a7", "html_url": "https://github.com/rust-lang/rust/commit/90b3658cd69f63d95f3bf568e6f23406c56f11a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90b3658cd69f63d95f3bf568e6f23406c56f11a7/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99cdcfba847ade51791afbc95478306c6c3e7c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99cdcfba847ade51791afbc95478306c6c3e7c1", "html_url": "https://github.com/rust-lang/rust/commit/e99cdcfba847ade51791afbc95478306c6c3e7c1"}], "stats": {"total": 70, "additions": 22, "deletions": 48}, "files": [{"sha": "719ffe9bb87d775a72f58ab0ee0ee3c6258bb2da", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90b3658cd69f63d95f3bf568e6f23406c56f11a7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b3658cd69f63d95f3bf568e6f23406c56f11a7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=90b3658cd69f63d95f3bf568e6f23406c56f11a7", "patch": "@@ -558,7 +558,7 @@ trait read_method_map_entry_helper {\n fn encode_method_map_entry(ecx: @e::EncodeContext,\n                               ebml_w: writer::Encoder,\n                               mme: method_map_entry) {\n-    do ebml_w.emit_rec {\n+    do ebml_w.emit_struct(\"method_map_entry\", 3) {\n         do ebml_w.emit_field(~\"self_arg\", 0u) {\n             ebml_w.emit_arg(ecx, mme.self_arg);\n         }\n@@ -574,7 +574,7 @@ fn encode_method_map_entry(ecx: @e::EncodeContext,\n impl read_method_map_entry_helper for reader::Decoder {\n     fn read_method_map_entry(&self, xcx: @ExtendedDecodeContext)\n         -> method_map_entry {\n-        do self.read_rec {\n+        do self.read_struct(\"method_map_entry\", 3) {\n             method_map_entry {\n                 self_arg: self.read_field(~\"self_arg\", 0u, || {\n                     self.read_arg(xcx)\n@@ -817,7 +817,7 @@ impl ebml_writer_helpers for writer::Encoder {\n \n     fn emit_tpbt(&self, ecx: @e::EncodeContext,\n                  tpbt: ty::ty_param_bounds_and_ty) {\n-        do self.emit_rec {\n+        do self.emit_struct(\"ty_param_bounds_and_ty\", 3) {\n             do self.emit_field(~\"bounds\", 0) {\n                 do self.emit_from_vec(*tpbt.bounds) |bs| {\n                     self.emit_bounds(ecx, *bs);\n@@ -1084,7 +1084,7 @@ impl ebml_decoder_decoder_helpers for reader::Decoder {\n     fn read_ty_param_bounds_and_ty(&self, xcx: @ExtendedDecodeContext)\n         -> ty::ty_param_bounds_and_ty\n     {\n-        do self.read_rec {\n+        do self.read_struct(\"ty_param_bounds_and_ty\", 3) {\n             ty::ty_param_bounds_and_ty {\n                 bounds: self.read_field(~\"bounds\", 0u, || {\n                     @self.read_to_vec(|| self.read_bounds(xcx) )"}, {"sha": "6b216504e543efec94d5f7ccf9ec45f2ff366b19", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90b3658cd69f63d95f3bf568e6f23406c56f11a7/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b3658cd69f63d95f3bf568e6f23406c56f11a7/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=90b3658cd69f63d95f3bf568e6f23406c56f11a7", "patch": "@@ -362,11 +362,6 @@ pub mod reader {\n             self.push_doc(self.next_doc(EsVecElt), f)\n         }\n \n-        fn read_rec<T>(&self, f: &fn() -> T) -> T {\n-            debug!(\"read_rec()\");\n-            f()\n-        }\n-\n         fn read_struct<T>(&self, name: &str, _len: uint, f: &fn() -> T) -> T {\n             debug!(\"read_struct(name=%s)\", name);\n             f()\n@@ -644,7 +639,6 @@ pub mod writer {\n             self.wr_tag(EsVecElt as uint, f)\n         }\n \n-        fn emit_rec(&self, f: &fn()) { f() }\n         fn emit_struct(&self, _name: &str, _len: uint, f: &fn()) { f() }\n         fn emit_field(&self, name: &str, _idx: uint, f: &fn()) {\n             self._emit_label(name);"}, {"sha": "ac7119d8ed8c5f9599e282e9cb593a7f8439f677", "filename": "src/libstd/json.rs", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/90b3658cd69f63d95f3bf568e6f23406c56f11a7/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b3658cd69f63d95f3bf568e6f23406c56f11a7/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=90b3658cd69f63d95f3bf568e6f23406c56f11a7", "patch": "@@ -141,11 +141,6 @@ impl serialize::Encoder for Encoder {\n         f()\n     }\n \n-    fn emit_rec(&self, f: &fn()) {\n-        self.wr.write_char('{');\n-        f();\n-        self.wr.write_char('}');\n-    }\n     fn emit_struct(&self, _name: &str, _len: uint, f: &fn()) {\n         self.wr.write_char('{');\n         f();\n@@ -253,20 +248,17 @@ impl serialize::Encoder for PrettyEncoder {\n         f()\n     }\n \n-    fn emit_rec(&self, f: &fn()) {\n-        self.wr.write_char('{');\n-        self.indent += 2;\n-        f();\n-        self.wr.write_char('\\n');\n-        self.indent -= 2;\n-        self.wr.write_str(spaces(self.indent));\n-        self.wr.write_char('}');\n-    }\n     fn emit_struct(&self, _name: &str, len: uint, f: &fn()) {\n         if len == 0 {\n             self.wr.write_str(\"{}\");\n         } else {\n-            self.emit_rec(f)\n+            self.wr.write_char('{');\n+            self.indent += 2;\n+            f();\n+            self.wr.write_char('\\n');\n+            self.indent -= 2;\n+            self.wr.write_str(spaces(self.indent));\n+            self.wr.write_char('}');\n         }\n     }\n     fn emit_field(&self, name: &str, idx: uint, f: &fn()) {\n@@ -286,25 +278,25 @@ impl serialize::Encoder for PrettyEncoder {\n     fn emit_option_some(&self, f: &fn()) { f(); }\n }\n \n-impl<S:serialize::Encoder> serialize::Encodable<S> for Json {\n-    fn encode(&self, s: &S) {\n+impl<E: serialize::Encoder> serialize::Encodable<E> for Json {\n+    fn encode(&self, e: &E) {\n         match *self {\n-            Number(v) => v.encode(s),\n-            String(ref v) => v.encode(s),\n-            Boolean(v) => v.encode(s),\n-            List(ref v) => v.encode(s),\n+            Number(v) => v.encode(e),\n+            String(ref v) => v.encode(e),\n+            Boolean(v) => v.encode(e),\n+            List(ref v) => v.encode(e),\n             Object(ref v) => {\n-                do s.emit_rec || {\n+                do e.emit_struct(\"Object\", v.len())|| {\n                     let mut idx = 0;\n                     for v.each |&(key, value)| {\n-                        do s.emit_field(*key, idx) {\n-                            value.encode(s);\n+                        do e.emit_field(*key, idx) {\n+                            value.encode(e);\n                         }\n                         idx += 1;\n                     }\n                 }\n             },\n-            Null => s.emit_nil(),\n+            Null => e.emit_nil(),\n         }\n     }\n }\n@@ -855,13 +847,6 @@ impl<'self> serialize::Decoder for Decoder<'self> {\n         }\n     }\n \n-    fn read_rec<T>(&self, f: &fn() -> T) -> T {\n-        debug!(\"read_rec()\");\n-        let value = f();\n-        self.pop();\n-        value\n-    }\n-\n     fn read_struct<T>(&self, _name: &str, _len: uint, f: &fn() -> T) -> T {\n         debug!(\"read_struct()\");\n         let value = f();\n@@ -870,7 +855,7 @@ impl<'self> serialize::Decoder for Decoder<'self> {\n     }\n \n     fn read_field<T>(&self, name: &str, idx: uint, f: &fn() -> T) -> T {\n-        debug!(\"read_rec_field(%s, idx=%u)\", name, idx);\n+        debug!(\"read_field(%s, idx=%u)\", name, idx);\n         let top = self.peek();\n         match *top {\n             Object(ref obj) => {"}, {"sha": "83201653474011190c98f82fa3b1a6043e80ec12", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90b3658cd69f63d95f3bf568e6f23406c56f11a7/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b3658cd69f63d95f3bf568e6f23406c56f11a7/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=90b3658cd69f63d95f3bf568e6f23406c56f11a7", "patch": "@@ -49,7 +49,6 @@ pub trait Encoder {\n     fn emit_seq(&self, len: uint, f: &fn());\n     fn emit_seq_elt(&self, idx: uint, f: &fn());\n \n-    fn emit_rec(&self, f: &fn());\n     fn emit_struct(&self, name: &str, _len: uint, f: &fn());\n     fn emit_field(&self, f_name: &str, f_idx: uint, f: &fn());\n \n@@ -92,7 +91,6 @@ pub trait Decoder {\n     fn read_seq<T>(&self, f: &fn(uint) -> T) -> T;\n     fn read_seq_elt<T>(&self, idx: uint, f: &fn() -> T) -> T;\n \n-    fn read_rec<T>(&self, f: &fn() -> T) -> T;\n     fn read_struct<T>(&self, name: &str, _len: uint, f: &fn() -> T) -> T;\n     fn read_field<T>(&self, name: &str, idx: uint, f: &fn() -> T) -> T;\n "}, {"sha": "3aceef9c73ada3332fe7140fbd5a60c5db901f5b", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90b3658cd69f63d95f3bf568e6f23406c56f11a7/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b3658cd69f63d95f3bf568e6f23406c56f11a7/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=90b3658cd69f63d95f3bf568e6f23406c56f11a7", "patch": "@@ -1262,9 +1262,6 @@ mod test {\n             self.add_unknown_to_log(); f();\n         }\n \n-        fn emit_rec(&self, f: &fn()) {\n-            self.add_unknown_to_log(); f();\n-        }\n         fn emit_struct(&self, name: &str, +len: uint, f: &fn()) {\n             self.add_to_log(CallToEmitStruct (name.to_str(),len)); f();\n         }"}]}