{"sha": "d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "node_id": "C_kwDOAAsO6NoAKGQwY2MyMDEyMDQ2NDRhMmNjYzBkOWM5ZjVmZjVlYzQ0ODcwY2FkYzU", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-10T21:42:49Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-10T22:36:51Z"}, "message": "author: fix some bugs", "tree": {"sha": "e02a43c590e5b58e6679df6ef0daa80b491423bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e02a43c590e5b58e6679df6ef0daa80b491423bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "html_url": "https://github.com/rust-lang/rust/commit/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce01346ac1168272c2ec2d4c272fbc1f27f39aae", "html_url": "https://github.com/rust-lang/rust/commit/ce01346ac1168272c2ec2d4c272fbc1f27f39aae"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "3af90c5b1f4f85db223fcc6aaa64a0d2021c4f54", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n         if let Some(label) = label {\n             let label_bind = self.next(\"label\");\n \n-            println!(\"    if let Some(ref {}) = {}\", label_bind, self.current);\n+            println!(\"    if let Some(ref {}) = {};\", label_bind, self.current);\n \n             let label_name_bind = self.next(\"label_name\");\n             let label_name = label.ident.name;\n@@ -246,7 +246,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 let str_pat = self.next(\"s\");\n \n                 println!(\"    if let LitKind::Str(ref {}, _) = {}.node;\", str_pat, lit_pat);\n-                println!(\"    if {}.as_str() == {:?}\", str_pat, &*text.as_str());\n+                println!(\"    if {}.as_str() == {:?};\", str_pat, &*text.as_str());\n             },\n         }\n     }\n@@ -311,7 +311,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n             let body_pat = self.next(\"body\");\n \n             println!(\n-                \"    if let Some(higher::While {{ condition: {}, body: {} }}) = higher::While::hir({})\",\n+                \"    if let Some(higher::While {{ condition: {}, body: {} }}) = higher::While::hir({});\",\n                 condition_pat, body_pat, self.current\n             );\n \n@@ -335,7 +335,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n             let if_then_pat = self.next(\"if_then\");\n \n             println!(\n-                \"    if let Some(higher::WhileLet {{ let_pat: {}, let_expr: {}, if_then: {} }}) = higher::WhileLet::hir({})\",\n+                \"    if let Some(higher::WhileLet {{ let_pat: {}, let_expr: {}, if_then: {} }}) = higher::WhileLet::hir({});\",\n                 let_pat_, let_expr_pat, if_then_pat, self.current\n             );\n \n@@ -364,7 +364,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n             let else_pat = self.next(\"else_expr\");\n \n             println!(\n-                \"    if let Some(higher::IfLet {{ let_pat: {}, let_expr: {}, if_then: {}, if_else: {}}}) = higher::IfLet::hir({})\",\n+                \"    if let Some(higher::IfLet {{ let_pat: {}, let_expr: {}, if_then: {}, if_else: {}}}) = higher::IfLet::hir({});\",\n                 let_pat_, let_expr_pat, if_then_pat, else_pat, self.current\n             );\n \n@@ -391,7 +391,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n             let else_pat = self.next(\"else_expr\");\n \n             println!(\n-                \"    if let Some(higher::If {{ cond: {}, then: {}, r#else: {}}}) = higher::If::hir({})\",\n+                \"    if let Some(higher::If {{ cond: {}, then: {}, r#else: {}}}) = higher::If::hir({});\",\n                 cond_pat, then_pat, else_pat, self.current\n             );\n \n@@ -415,7 +415,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n             let body_pat = self.next(\"body\");\n \n             println!(\n-                \"    if let Some(higher::ForLoop {{ pat: {}, arg: {}, body: {}, ..}}) = higher::ForLoop::hir({})\",\n+                \"    if let Some(higher::ForLoop {{ pat: {}, arg: {}, body: {}, ..}}) = higher::ForLoop::hir({});\",\n                 pat_, arg_pat, body_pat, self.current\n             );\n \n@@ -596,7 +596,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let label_pat = self.next(\"label\");\n \n                 println!(\n-                    \"Loop(ref {}, ref {}, LoopSource::{:?}) = {};\",\n+                    \"Loop(ref {}, ref {}, LoopSource::{:?}, _) = {};\",\n                     body_pat, label_pat, des, current\n                 );\n \n@@ -626,10 +626,10 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let body_id_pat = self.next(\"body_id\");\n \n                 println!(\n-                    \"Closure({}, ref {}, ref {}, _, {}) = {}\",\n+                    \"Closure({}, ref {}, ref {}, _, {}) = {};\",\n                     capture_by, fn_decl_pat, body_id_pat, movability, current\n                 );\n-                println!(\"    if let {} = {}.output\", ret_ty, fn_decl_pat);\n+                println!(\"    if let {} = {}.output;\", ret_ty, fn_decl_pat);\n \n                 let hir = self.cx.tcx.hir();\n                 let body = hir.body(body_id);\n@@ -699,7 +699,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let field_name_pat = self.next(\"field_name\");\n \n                 println!(\"Field(ref {}, ref {}) = {};\", obj_pat, field_name_pat, current);\n-                println!(\"    if {}.as_str() == {:?}\", field_name_pat, field_ident.as_str());\n+                println!(\"    if {}.as_str() == {:?};\", field_name_pat, field_ident.as_str());\n \n                 self.current = obj_pat;\n                 self.visit_expr(object);\n@@ -804,13 +804,13 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n \n                 for (i, field) in fields.iter().enumerate() {\n                     println!(\n-                        \"    if {}[{}].ident.name.as_str() == {:?}\",\n+                        \"    if {}[{}].ident.name.as_str() == {:?};\",\n                         fields_pat,\n                         i,\n                         &*field.ident.name.as_str()\n                     );\n \n-                    self.current = format!(\"{}[{}]\", fields_pat, i);\n+                    self.current = format!(\"{}[{}].expr\", fields_pat, i);\n                     self.visit_expr(field.expr);\n                 }\n             },\n@@ -909,7 +909,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n \n                 for (i, field) in fields.iter().enumerate() {\n                     println!(\n-                        \"    if {}[{}].ident.name.as_str() == {:?}\",\n+                        \"    if {}[{}].ident.name.as_str() == {:?};\",\n                         fields_pat,\n                         i,\n                         &*field.ident.name.as_str()\n@@ -981,7 +981,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             },\n             PatKind::Lit(lit_expr) => {\n                 let lit_expr_pat = self.next(\"lit_expr\");\n-                println!(\"Lit(ref {}) = {}\", lit_expr_pat, current);\n+                println!(\"Lit(ref {}) = {};\", lit_expr_pat, current);\n \n                 self.current = lit_expr_pat;\n                 self.visit_expr(lit_expr);\n@@ -1063,7 +1063,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             // Expr without trailing semi-colon (must have unit type):\n             StmtKind::Expr(e) => {\n                 let e_pat = self.next(\"e\");\n-                println!(\"Expr(ref {}, _) = {}\", e_pat, current);\n+                println!(\"Expr(ref {}, _) = {};\", e_pat, current);\n \n                 self.current = e_pat;\n                 self.visit_expr(e);\n@@ -1072,7 +1072,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             // Expr with trailing semi-colon (may have any type):\n             StmtKind::Semi(e) => {\n                 let e_pat = self.next(\"e\");\n-                println!(\"Semi(ref {}, _) = {}\", e_pat, current);\n+                println!(\"Semi(ref {}) = {};\", e_pat, current);\n \n                 self.current = e_pat;\n                 self.visit_expr(e);"}, {"sha": "d9bd738ae9226cee23e68ebc918f660ed3e2ad30", "filename": "tests/ui/author/blocks.stdout", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/tests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/tests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stdout?ref=d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "patch": "@@ -13,7 +13,7 @@ if_chain! {\n     if let LitKind::Float(_, LitFloatType::Suffixed(FloatTy::F32)) = lit1.node;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local1.pat.kind;\n     if name1.as_str() == \"_t\";\n-    if let StmtKind::Semi(ref e, _) = block.stmts[2].kind\n+    if let StmtKind::Semi(ref e) = block.stmts[2].kind;\n     if let ExprKind::Unary(UnOp::Neg, ref inner) = e.kind;\n     if let ExprKind::Path(ref qpath) = inner.kind;\n     if match_qpath(qpath, &[\"x\"]);\n@@ -45,15 +45,15 @@ if_chain! {\n     }\n }\n if_chain! {\n-    if let ExprKind::Closure(CaptureBy::Value, ref fn_decl, ref body_id, _, None) = expr.kind\n-    if let FnRetTy::DefaultReturn(_) = fn_decl.output\n+    if let ExprKind::Closure(CaptureBy::Value, ref fn_decl, ref body_id, _, None) = expr.kind;\n+    if let FnRetTy::DefaultReturn(_) = fn_decl.output;\n     let body = cx.tcx.hir().body(body_id);\n     if let ExprKind::Call(ref func, ref args) = body.value.kind;\n     if let ExprKind::Path(ref qpath) = func.kind;\n     if matches!(qpath, QPath::LangItem(LangItem::FromGenerator, _));\n     if args.len() == 1;\n-    if let ExprKind::Closure(CaptureBy::Value, ref fn_decl1, ref body_id1, _, Some(Movability::Static)) = args[0].kind\n-    if let FnRetTy::DefaultReturn(_) = fn_decl1.output\n+    if let ExprKind::Closure(CaptureBy::Value, ref fn_decl1, ref body_id1, _, Some(Movability::Static)) = args[0].kind;\n+    if let FnRetTy::DefaultReturn(_) = fn_decl1.output;\n     let body1 = cx.tcx.hir().body(body_id1);\n     if let ExprKind::Block(ref block, ref label) = body1.value.kind;\n     if block.stmts.len() == 0;"}, {"sha": "889d3e595ba175bbaa202680695b70db4c9a1b15", "filename": "tests/ui/author/if.stdout", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/tests%2Fui%2Fauthor%2Fif.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/tests%2Fui%2Fauthor%2Fif.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stdout?ref=d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "patch": "@@ -1,12 +1,12 @@\n if_chain! {\n     if let StmtKind::Local(ref local) = stmt.kind;\n     if let Some(ref init) = local.init;\n-    if let Some(higher::If { cond: cond, then: then, r#else: else_expr}) = higher::If::hir(init)\n+    if let Some(higher::If { cond: cond, then: then, r#else: else_expr}) = higher::If::hir(init);\n     if let ExprKind::Lit(ref lit) = cond.kind;\n     if let LitKind::Bool(true) = lit.node;\n     if let ExprKind::Block(ref block, ref label) = then.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e, _) = block.stmts[0].kind\n+    if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n     if let ExprKind::Binary(ref op, ref left, ref right) = e.kind;\n     if BinOpKind::Eq == op.node;\n     if let ExprKind::Lit(ref lit1) = left.kind;\n@@ -16,7 +16,7 @@ if_chain! {\n     if block.expr.is_none();\n     if let ExprKind::Block(ref block1, ref label1) = else_expr.kind;\n     if block1.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e1, _) = block1.stmts[0].kind\n+    if let StmtKind::Semi(ref e1) = block1.stmts[0].kind;\n     if let ExprKind::Binary(ref op1, ref left1, ref right1) = e1.kind;\n     if BinOpKind::Eq == op1.node;\n     if let ExprKind::Lit(ref lit3) = left1.kind;\n@@ -30,8 +30,8 @@ if_chain! {\n     }\n }\n if_chain! {\n-    if let Some(higher::IfLet { let_pat: let_pat, let_expr: let_expr, if_then: if_then, if_else: else_expr}) = higher::IfLet::hir(expr)\n-    if let PatKind::Lit(ref lit_expr) = let_pat.kind\n+    if let Some(higher::IfLet { let_pat: let_pat, let_expr: let_expr, if_then: if_then, if_else: else_expr}) = higher::IfLet::hir(expr);\n+    if let PatKind::Lit(ref lit_expr) = let_pat.kind;\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Bool(true) = lit.node;\n     if let ExprKind::Path(ref qpath) = let_expr.kind;"}, {"sha": "9e7300335c55c72c1a229c3d179dec37fa464674", "filename": "tests/ui/author/loop.stdout", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/tests%2Fui%2Fauthor%2Floop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/tests%2Fui%2Fauthor%2Floop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Floop.stdout?ref=d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "patch": "@@ -1,16 +1,16 @@\n if_chain! {\n     if let ExprKind::DropTemps(ref expr) = expr.kind;\n-    if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr)\n+    if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = pat.kind;\n     if name.as_str() == \"y\";\n     if let ExprKind::Struct(ref qpath, ref fields, None) = arg.kind;\n     if matches!(qpath, QPath::LangItem(LangItem::Range, _));\n     if fields.len() == 2;\n-    if fields[0].ident.name.as_str() == \"start\"\n-    if let ExprKind::Lit(ref lit) = fields[0].kind;\n+    if fields[0].ident.name.as_str() == \"start\";\n+    if let ExprKind::Lit(ref lit) = fields[0].expr.kind;\n     if let LitKind::Int(0, LitIntType::Unsuffixed) = lit.node;\n-    if fields[1].ident.name.as_str() == \"end\"\n-    if let ExprKind::Lit(ref lit1) = fields[1].kind;\n+    if fields[1].ident.name.as_str() == \"end\";\n+    if let ExprKind::Lit(ref lit1) = fields[1].expr.kind;\n     if let LitKind::Int(10, LitIntType::Unsuffixed) = lit1.node;\n     if let ExprKind::Block(ref block, ref label) = body.kind;\n     if block.stmts.len() == 1;\n@@ -27,20 +27,20 @@ if_chain! {\n }\n if_chain! {\n     if let ExprKind::DropTemps(ref expr) = expr.kind;\n-    if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr)\n+    if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr);\n     if let PatKind::Wild = pat.kind;\n     if let ExprKind::Struct(ref qpath, ref fields, None) = arg.kind;\n     if matches!(qpath, QPath::LangItem(LangItem::Range, _));\n     if fields.len() == 2;\n-    if fields[0].ident.name.as_str() == \"start\"\n-    if let ExprKind::Lit(ref lit) = fields[0].kind;\n+    if fields[0].ident.name.as_str() == \"start\";\n+    if let ExprKind::Lit(ref lit) = fields[0].expr.kind;\n     if let LitKind::Int(0, LitIntType::Unsuffixed) = lit.node;\n-    if fields[1].ident.name.as_str() == \"end\"\n-    if let ExprKind::Lit(ref lit1) = fields[1].kind;\n+    if fields[1].ident.name.as_str() == \"end\";\n+    if let ExprKind::Lit(ref lit1) = fields[1].expr.kind;\n     if let LitKind::Int(10, LitIntType::Unsuffixed) = lit1.node;\n     if let ExprKind::Block(ref block, ref label) = body.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e, _) = block.stmts[0].kind\n+    if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n     if let ExprKind::Break(ref destination, None) = e.kind;\n     if block.expr.is_none();\n     then {\n@@ -49,61 +49,61 @@ if_chain! {\n }\n if_chain! {\n     if let ExprKind::DropTemps(ref expr) = expr.kind;\n-    if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr)\n+    if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr);\n     if let PatKind::Wild = pat.kind;\n     if let ExprKind::Struct(ref qpath, ref fields, None) = arg.kind;\n     if matches!(qpath, QPath::LangItem(LangItem::Range, _));\n     if fields.len() == 2;\n-    if fields[0].ident.name.as_str() == \"start\"\n-    if let ExprKind::Lit(ref lit) = fields[0].kind;\n+    if fields[0].ident.name.as_str() == \"start\";\n+    if let ExprKind::Lit(ref lit) = fields[0].expr.kind;\n     if let LitKind::Int(0, LitIntType::Unsuffixed) = lit.node;\n-    if fields[1].ident.name.as_str() == \"end\"\n-    if let ExprKind::Lit(ref lit1) = fields[1].kind;\n+    if fields[1].ident.name.as_str() == \"end\";\n+    if let ExprKind::Lit(ref lit1) = fields[1].expr.kind;\n     if let LitKind::Int(10, LitIntType::Unsuffixed) = lit1.node;\n     if let ExprKind::Block(ref block, ref label) = body.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e, _) = block.stmts[0].kind\n+    if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n     if let ExprKind::Break(ref destination, None) = e.kind;\n-    if let Some(ref label1) = destination.label\n+    if let Some(ref label1) = destination.label;\n     if label_name.ident.name.as_str() == \"'label\";\n     if block.expr.is_none();\n     then {\n         // report your lint here\n     }\n }\n if_chain! {\n-    if let Some(higher::While { condition: condition, body: body }) = higher::While::hir(expr)\n+    if let Some(higher::While { condition: condition, body: body }) = higher::While::hir(expr);\n     if let ExprKind::Path(ref qpath) = condition.kind;\n     if match_qpath(qpath, &[\"a\"]);\n     if let ExprKind::Block(ref block, ref label) = body.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e, _) = block.stmts[0].kind\n+    if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n     if let ExprKind::Break(ref destination, None) = e.kind;\n     if block.expr.is_none();\n     then {\n         // report your lint here\n     }\n }\n if_chain! {\n-    if let Some(higher::WhileLet { let_pat: let_pat, let_expr: let_expr, if_then: if_then }) = higher::WhileLet::hir(expr)\n-    if let PatKind::Lit(ref lit_expr) = let_pat.kind\n+    if let Some(higher::WhileLet { let_pat: let_pat, let_expr: let_expr, if_then: if_then }) = higher::WhileLet::hir(expr);\n+    if let PatKind::Lit(ref lit_expr) = let_pat.kind;\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Bool(true) = lit.node;\n     if let ExprKind::Path(ref qpath) = let_expr.kind;\n     if match_qpath(qpath, &[\"a\"]);\n     if let ExprKind::Block(ref block, ref label) = if_then.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e, _) = block.stmts[0].kind\n+    if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n     if let ExprKind::Break(ref destination, None) = e.kind;\n     if block.expr.is_none();\n     then {\n         // report your lint here\n     }\n }\n if_chain! {\n-    if let ExprKind::Loop(ref body, ref label, LoopSource::Loop) = expr.kind;\n+    if let ExprKind::Loop(ref body, ref label, LoopSource::Loop, _) = expr.kind;\n     if body.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e, _) = body.stmts[0].kind\n+    if let StmtKind::Semi(ref e) = body.stmts[0].kind;\n     if let ExprKind::Break(ref destination, None) = e.kind;\n     if body.expr.is_none();\n     then {"}, {"sha": "07d744a7723d767be39b4ad8f78bcd05941a269a", "filename": "tests/ui/author/matches.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/tests%2Fui%2Fauthor%2Fmatches.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/tests%2Fui%2Fauthor%2Fmatches.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stdout?ref=d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "patch": "@@ -7,7 +7,7 @@ if_chain! {\n     if arms.len() == 3;\n     if let ExprKind::Lit(ref lit1) = arms[0].body.kind;\n     if let LitKind::Int(5, LitIntType::Unsuffixed) = lit1.node;\n-    if let PatKind::Lit(ref lit_expr) = arms[0].pat.kind\n+    if let PatKind::Lit(ref lit_expr) = arms[0].pat.kind;\n     if let ExprKind::Lit(ref lit2) = lit_expr.kind;\n     if let LitKind::Int(16, LitIntType::Unsuffixed) = lit2.node;\n     if let ExprKind::Block(ref block, ref label) = arms[1].body.kind;\n@@ -21,7 +21,7 @@ if_chain! {\n     if let Some(trailing_expr) = &block.expr;\n     if let ExprKind::Path(ref qpath) = trailing_expr.kind;\n     if match_qpath(qpath, &[\"x\"]);\n-    if let PatKind::Lit(ref lit_expr1) = arms[1].pat.kind\n+    if let PatKind::Lit(ref lit_expr1) = arms[1].pat.kind;\n     if let ExprKind::Lit(ref lit4) = lit_expr1.kind;\n     if let LitKind::Int(17, LitIntType::Unsuffixed) = lit4.node;\n     if let ExprKind::Lit(ref lit5) = arms[2].body.kind;"}, {"sha": "66e6df195d29a2ea3c06cf935b68122b8241b6b6", "filename": "tests/ui/author/struct.stdout", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/tests%2Fui%2Fauthor%2Fstruct.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5/tests%2Fui%2Fauthor%2Fstruct.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fstruct.stdout?ref=d0cc201204644a2ccc0d9c9f5ff5ec44870cadc5", "patch": "@@ -2,8 +2,8 @@ if_chain! {\n     if let ExprKind::Struct(ref qpath, ref fields, None) = expr.kind;\n     if match_qpath(qpath, &[\"Test\"]);\n     if fields.len() == 1;\n-    if fields[0].ident.name.as_str() == \"field\"\n-    if let Some(higher::If { cond: cond, then: then, r#else: else_expr}) = higher::If::hir(fields[0])\n+    if fields[0].ident.name.as_str() == \"field\";\n+    if let Some(higher::If { cond: cond, then: then, r#else: else_expr}) = higher::If::hir(fields[0].expr);\n     if let ExprKind::Lit(ref lit) = cond.kind;\n     if let LitKind::Bool(true) = lit.node;\n     if let ExprKind::Block(ref block, ref label) = then.kind;\n@@ -24,8 +24,8 @@ if_chain! {\n     if let PatKind::Struct(ref qpath, ref fields, false) = arm.kind;\n     if match_qpath(qpath, &[\"Test\"]);\n     if fields.len() == 1;\n-    if fields[0].ident.name.as_str() == \"field\"\n-    if let PatKind::Lit(ref lit_expr) = fields[0].kind\n+    if fields[0].ident.name.as_str() == \"field\";\n+    if let PatKind::Lit(ref lit_expr) = fields[0].kind;\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Int(1, LitIntType::Unsuffixed) = lit.node;\n     if let ExprKind::Block(ref block, ref label) = lit_expr.kind;\n@@ -39,7 +39,7 @@ if_chain! {\n     if let PatKind::TupleStruct(ref qpath, ref fields, None) = arm.kind;\n     if match_qpath(qpath, &[\"TestTuple\"]);\n     if fields.len() == 1;\n-    if let PatKind::Lit(ref lit_expr) = fields[0].kind\n+    if let PatKind::Lit(ref lit_expr) = fields[0].kind;\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Int(1, LitIntType::Unsuffixed) = lit.node;\n     if let ExprKind::Block(ref block, ref label) = lit_expr.kind;"}]}