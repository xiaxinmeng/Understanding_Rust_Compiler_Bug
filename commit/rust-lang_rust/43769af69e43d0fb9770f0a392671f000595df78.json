{"sha": "43769af69e43d0fb9770f0a392671f000595df78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNzY5YWY2OWU0M2QwZmI5NzcwZjBhMzkyNjcxZjAwMDU5NWRmNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-11T17:48:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-11T17:48:48Z"}, "message": "Auto merge of #88857 - workingjubilee:rollup-zrtvspt, r=workingjubilee\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #87904 (Reword description of automatic impls of `Unsize`.)\n - #88147 (Fix non-capturing closure return type coercion)\n - #88209 (Improve error message when _ is used for in/inout asm operands)\n - #88668 (Change more x64 size checks to not apply to x32.)\n - #88733 (Fix ICE for functions with more than 65535 arguments)\n - #88757 (Suggest wapping expr in parentheses on invalid unary negation)\n - #88779 (Use more accurate spans for \"unused delimiter\" lint)\n - #88830 (Add help for E0463)\n - #88849 (don't clone types that are Copy (clippy::clone_on_copy))\n - #88850 (don't convert types into identical types)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4bd8ff3b37565cf6e4f43cfec62d63bfebc3f608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd8ff3b37565cf6e4f43cfec62d63bfebc3f608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43769af69e43d0fb9770f0a392671f000595df78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43769af69e43d0fb9770f0a392671f000595df78", "html_url": "https://github.com/rust-lang/rust/commit/43769af69e43d0fb9770f0a392671f000595df78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43769af69e43d0fb9770f0a392671f000595df78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "641e02f388acc6b1d316a59c605a32d1711a8758", "url": "https://api.github.com/repos/rust-lang/rust/commits/641e02f388acc6b1d316a59c605a32d1711a8758", "html_url": "https://github.com/rust-lang/rust/commit/641e02f388acc6b1d316a59c605a32d1711a8758"}, {"sha": "2a8ad06689266d3959f35e407f8b6b2047a2457e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8ad06689266d3959f35e407f8b6b2047a2457e", "html_url": "https://github.com/rust-lang/rust/commit/2a8ad06689266d3959f35e407f8b6b2047a2457e"}], "stats": {"total": 1091, "additions": 823, "deletions": 268}, "files": [{"sha": "e9dce953c73888e3e80ea8258117bc3ac7a81878", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -422,11 +422,25 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn check_fn_decl(&self, fn_decl: &FnDecl, self_semantic: SelfSemantic) {\n+        self.check_decl_num_args(fn_decl);\n         self.check_decl_cvaradic_pos(fn_decl);\n         self.check_decl_attrs(fn_decl);\n         self.check_decl_self_param(fn_decl, self_semantic);\n     }\n \n+    /// Emits fatal error if function declaration has more than `u16::MAX` arguments\n+    /// Error is fatal to prevent errors during typechecking\n+    fn check_decl_num_args(&self, fn_decl: &FnDecl) {\n+        let max_num_args: usize = u16::MAX.into();\n+        if fn_decl.inputs.len() > max_num_args {\n+            let Param { span, .. } = fn_decl.inputs[0];\n+            self.err_handler().span_fatal(\n+                span,\n+                &format!(\"function can not have more than {} arguments\", max_num_args),\n+            );\n+        }\n+    }\n+\n     fn check_decl_cvaradic_pos(&self, fn_decl: &FnDecl) {\n         match &*fn_decl.inputs {\n             [Param { ty, span, .. }] => {"}, {"sha": "b28f8ce1d8b3af45c611c959bce6d92e2ad43753", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -1739,7 +1739,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     category: constraint.category,\n                     from_closure: false,\n                     span,\n-                    variance_info: constraint.variance_info.clone(),\n+                    variance_info: constraint.variance_info,\n                 };\n             }\n             Locations::Single(loc) => loc,\n@@ -1752,13 +1752,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 category,\n                 from_closure: true,\n                 span: span,\n-                variance_info: constraint.variance_info.clone(),\n+                variance_info: constraint.variance_info,\n             })\n             .unwrap_or(BlameConstraint {\n                 category: constraint.category,\n                 from_closure: false,\n                 span: body.source_info(loc).span,\n-                variance_info: constraint.variance_info.clone(),\n+                variance_info: constraint.variance_info,\n             })\n     }\n \n@@ -2001,7 +2001,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         category: constraint.category,\n                         from_closure: false,\n                         span: constraint.locations.span(body),\n-                        variance_info: constraint.variance_info.clone(),\n+                        variance_info: constraint.variance_info,\n                     }\n                 }\n             })"}, {"sha": "c032364c008f34a551f782107b3eb7594a843884", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -117,6 +117,10 @@ fn parse_args<'a>(\n         let mut explicit_reg = false;\n         let op = if !is_global_asm && p.eat_keyword(kw::In) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            if p.eat_keyword(kw::Underscore) {\n+                let err = ecx.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                return Err(err);\n+            }\n             let expr = p.parse_expr()?;\n             ast::InlineAsmOperand::In { reg, expr }\n         } else if !is_global_asm && p.eat_keyword(sym::out) {\n@@ -129,6 +133,10 @@ fn parse_args<'a>(\n             ast::InlineAsmOperand::Out { reg, expr, late: true }\n         } else if !is_global_asm && p.eat_keyword(sym::inout) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            if p.eat_keyword(kw::Underscore) {\n+                let err = ecx.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                return Err(err);\n+            }\n             let expr = p.parse_expr()?;\n             if p.eat(&token::FatArrow) {\n                 let out_expr =\n@@ -139,6 +147,10 @@ fn parse_args<'a>(\n             }\n         } else if !is_global_asm && p.eat_keyword(sym::inlateout) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n+            if p.eat_keyword(kw::Underscore) {\n+                let err = ecx.struct_span_err(p.token.span, \"_ cannot be used for input operands\");\n+                return Err(err);\n+            }\n             let expr = p.parse_expr()?;\n             if p.eat(&token::FatArrow) {\n                 let out_expr ="}, {"sha": "67f92bc0a51a7b8a161f792589e49ce9227441bb", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -1036,7 +1036,7 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(st.span.lo());\n         match st.kind {\n             hir::StmtKind::Local(ref loc) => {\n-                self.print_local(loc.init.as_deref(), |this| this.print_local_decl(&loc));\n+                self.print_local(loc.init, |this| this.print_local_decl(&loc));\n             }\n             hir::StmtKind::Item(item) => self.ann.nested(self, Nested::Item(item)),\n             hir::StmtKind::Expr(ref expr) => {"}, {"sha": "1139b714d0a1ff155b8055258a14dae507ad88d3", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2345,7 +2345,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 );\n                 err.span_suggestion(\n                     generics.where_clause.tail_span_for_suggestion(),\n-                    \"consider adding a where clause\".into(),\n+                    \"consider adding a where clause\",\n                     suggestion,\n                     Applicability::MaybeIncorrect,\n                 );"}, {"sha": "e88c6608aca335540020bb44f498298afd00345a", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -519,7 +519,7 @@ where\n \n         let old_ambient_variance = self.ambient_variance;\n         self.ambient_variance = self.ambient_variance.xform(variance);\n-        self.ambient_variance_info = self.ambient_variance_info.clone().xform(info);\n+        self.ambient_variance_info = self.ambient_variance_info.xform(info);\n \n         debug!(\"relate_with_variance: ambient_variance = {:?}\", self.ambient_variance);\n \n@@ -597,12 +597,12 @@ where\n \n         if self.ambient_covariance() {\n             // Covariance: a <= b. Hence, `b: a`.\n-            self.push_outlives(v_b, v_a, self.ambient_variance_info.clone());\n+            self.push_outlives(v_b, v_a, self.ambient_variance_info);\n         }\n \n         if self.ambient_contravariance() {\n             // Contravariant: b <= a. Hence, `a: b`.\n-            self.push_outlives(v_a, v_b, self.ambient_variance_info.clone());\n+            self.push_outlives(v_a, v_b, self.ambient_variance_info);\n         }\n \n         Ok(a)"}, {"sha": "48b955e41ac69506c05e5e46b071c979293dd6d3", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 52, "deletions": 68, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -3,7 +3,6 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_ast::util::{classify, parser};\n use rustc_ast::{ExprKind, StmtKind};\n-use rustc_ast_pretty::pprust;\n use rustc_errors::{pluralize, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -12,7 +11,7 @@ use rustc_middle::ty::adjustment;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};\n-use rustc_span::{BytePos, Span, DUMMY_SP};\n+use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n \n declare_lint! {\n     /// The `unused_must_use` lint detects unused result of a type flagged as\n@@ -491,77 +490,60 @@ trait UnusedDelimLint {\n         left_pos: Option<BytePos>,\n         right_pos: Option<BytePos>,\n     ) {\n-        let expr_text = if let Ok(snippet) = cx.sess().source_map().span_to_snippet(value.span) {\n-            snippet\n-        } else {\n-            pprust::expr_to_string(value)\n+        let spans = match value.kind {\n+            ast::ExprKind::Block(ref block, None) if block.stmts.len() > 0 => {\n+                let start = block.stmts[0].span;\n+                let end = block.stmts[block.stmts.len() - 1].span;\n+                if value.span.from_expansion() || start.from_expansion() || end.from_expansion() {\n+                    (\n+                        value.span.with_hi(value.span.lo() + BytePos(1)),\n+                        value.span.with_lo(value.span.hi() - BytePos(1)),\n+                    )\n+                } else {\n+                    (value.span.with_hi(start.lo()), value.span.with_lo(end.hi()))\n+                }\n+            }\n+            ast::ExprKind::Paren(ref expr) => {\n+                if value.span.from_expansion() || expr.span.from_expansion() {\n+                    (\n+                        value.span.with_hi(value.span.lo() + BytePos(1)),\n+                        value.span.with_lo(value.span.hi() - BytePos(1)),\n+                    )\n+                } else {\n+                    (value.span.with_hi(expr.span.lo()), value.span.with_lo(expr.span.hi()))\n+                }\n+            }\n+            _ => return,\n         };\n         let keep_space = (\n             left_pos.map_or(false, |s| s >= value.span.lo()),\n             right_pos.map_or(false, |s| s <= value.span.hi()),\n         );\n-        self.emit_unused_delims(cx, value.span, &expr_text, ctx.into(), keep_space);\n+        self.emit_unused_delims(cx, spans, ctx.into(), keep_space);\n     }\n \n     fn emit_unused_delims(\n         &self,\n         cx: &EarlyContext<'_>,\n-        span: Span,\n-        pattern: &str,\n+        spans: (Span, Span),\n         msg: &str,\n         keep_space: (bool, bool),\n     ) {\n         // FIXME(flip1995): Quick and dirty fix for #70814. This should be fixed in rustdoc\n         // properly.\n-        if span == DUMMY_SP {\n+        if spans.0 == DUMMY_SP || spans.1 == DUMMY_SP {\n             return;\n         }\n \n-        cx.struct_span_lint(self.lint(), span, |lint| {\n+        cx.struct_span_lint(self.lint(), MultiSpan::from(vec![spans.0, spans.1]), |lint| {\n             let span_msg = format!(\"unnecessary {} around {}\", Self::DELIM_STR, msg);\n             let mut err = lint.build(&span_msg);\n-            let mut ate_left_paren = false;\n-            let mut ate_right_paren = false;\n-            let parens_removed = pattern\n-                .trim_matches(|c| match c {\n-                    '(' | '{' => {\n-                        if ate_left_paren {\n-                            false\n-                        } else {\n-                            ate_left_paren = true;\n-                            true\n-                        }\n-                    }\n-                    ')' | '}' => {\n-                        if ate_right_paren {\n-                            false\n-                        } else {\n-                            ate_right_paren = true;\n-                            true\n-                        }\n-                    }\n-                    _ => false,\n-                })\n-                .trim();\n-\n-            let replace = {\n-                let mut replace = if keep_space.0 {\n-                    let mut s = String::from(\" \");\n-                    s.push_str(parens_removed);\n-                    s\n-                } else {\n-                    String::from(parens_removed)\n-                };\n-\n-                if keep_space.1 {\n-                    replace.push(' ');\n-                }\n-                replace\n-            };\n-\n+            let replacement = vec![\n+                (spans.0, if keep_space.0 { \" \".into() } else { \"\".into() }),\n+                (spans.1, if keep_space.1 { \" \".into() } else { \"\".into() }),\n+            ];\n             let suggestion = format!(\"remove these {}\", Self::DELIM_STR);\n-\n-            err.span_suggestion_short(span, &suggestion, replace, Applicability::MachineApplicable);\n+            err.multipart_suggestion(&suggestion, replacement, Applicability::MachineApplicable);\n             err.emit();\n         });\n     }\n@@ -770,14 +752,15 @@ impl UnusedParens {\n                 // Otherwise proceed with linting.\n                 _ => {}\n             }\n-\n-            let pattern_text =\n-                if let Ok(snippet) = cx.sess().source_map().span_to_snippet(value.span) {\n-                    snippet\n-                } else {\n-                    pprust::pat_to_string(value)\n-                };\n-            self.emit_unused_delims(cx, value.span, &pattern_text, \"pattern\", (false, false));\n+            let spans = if value.span.from_expansion() || inner.span.from_expansion() {\n+                (\n+                    value.span.with_hi(value.span.lo() + BytePos(1)),\n+                    value.span.with_lo(value.span.hi() - BytePos(1)),\n+                )\n+            } else {\n+                (value.span.with_hi(inner.span.lo()), value.span.with_lo(inner.span.hi()))\n+            };\n+            self.emit_unused_delims(cx, spans, \"pattern\", (false, false));\n         }\n     }\n }\n@@ -870,14 +853,15 @@ impl EarlyLintPass for UnusedParens {\n                     );\n                 }\n                 _ => {\n-                    let pattern_text =\n-                        if let Ok(snippet) = cx.sess().source_map().span_to_snippet(ty.span) {\n-                            snippet\n-                        } else {\n-                            pprust::ty_to_string(ty)\n-                        };\n-\n-                    self.emit_unused_delims(cx, ty.span, &pattern_text, \"type\", (false, false));\n+                    let spans = if ty.span.from_expansion() || r.span.from_expansion() {\n+                        (\n+                            ty.span.with_hi(ty.span.lo() + BytePos(1)),\n+                            ty.span.with_lo(ty.span.hi() - BytePos(1)),\n+                        )\n+                    } else {\n+                        (ty.span.with_hi(r.span.lo()), ty.span.with_lo(r.span.hi()))\n+                    };\n+                    self.emit_unused_delims(cx, spans, \"type\", (false, false));\n                 }\n             }\n         }"}, {"sha": "80dcf99da6224b775936e1b1d746e89a640987c1", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -448,7 +448,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                                             span_idx = Some(syn::Index::from(idx));\n                                         } else {\n                                             throw_span_err!(\n-                                                info.span.clone().unwrap(),\n+                                                info.span.unwrap(),\n                                                 \"type of field annotated with `#[suggestion(...)]` contains more than one Span\"\n                                             );\n                                         }\n@@ -460,7 +460,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                                             applicability_idx = Some(syn::Index::from(idx));\n                                         } else {\n                                             throw_span_err!(\n-                                                info.span.clone().unwrap(),\n+                                                info.span.unwrap(),\n                                                 \"type of field annotated with `#[suggestion(...)]` contains more than one Applicability\"\n                                             );\n                                         }\n@@ -479,15 +479,15 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                                     return Ok((span, applicability));\n                                 }\n                                 throw_span_err!(\n-                                    info.span.clone().unwrap(),\n+                                    info.span.unwrap(),\n                                     \"wrong types for suggestion\",\n                                     |diag| {\n                                         diag.help(\"#[suggestion(...)] on a tuple field must be applied to fields of type (Span, Applicability)\")\n                                     }\n                                 );\n                             }\n                             _ => throw_span_err!(\n-                                info.span.clone().unwrap(),\n+                                info.span.unwrap(),\n                                 \"wrong field type for suggestion\",\n                                 |diag| {\n                                     diag.help(\"#[suggestion(...)] should be applied to fields of type Span or (Span, Applicability)\")"}, {"sha": "b6922e0d72a065364c0e0444c70e961128ae5328", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -1095,6 +1095,11 @@ impl CrateError {\n                         == Symbol::intern(&sess.opts.debugging_opts.profiler_runtime)\n                     {\n                         err.note(&\"the compiler may have been built without the profiler runtime\");\n+                    } else if crate_name.as_str().starts_with(\"rustc_\") {\n+                        err.help(\n+                            \"maybe you need to install the missing components with: \\\n+                             `rustup component add rust-src rustc-dev llvm-tools-preview`\",\n+                        );\n                     }\n                     err.span_label(span, \"can't find crate\");\n                     err"}, {"sha": "e40227530cdefe331ba511dc78c03fe6d37e444e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -1736,7 +1736,7 @@ pub struct Place<'tcx> {\n     pub projection: &'tcx List<PlaceElem<'tcx>>,\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(Place<'_>, 16);\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -2062,7 +2062,7 @@ pub enum Operand<'tcx> {\n     Constant(Box<Constant<'tcx>>),\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(Operand<'_>, 24);\n \n impl<'tcx> Debug for Operand<'tcx> {\n@@ -2200,7 +2200,7 @@ pub enum Rvalue<'tcx> {\n     Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(Rvalue<'_>, 40);\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n@@ -2226,7 +2226,7 @@ pub enum AggregateKind<'tcx> {\n     Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(AggregateKind<'_>, 48);\n \n #[derive(Copy, Clone, Debug, PartialEq, PartialOrd, Eq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "4df073c40e22c318eb620685d295283cf0ba4a15", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2060,7 +2060,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 source_info.span, ascription.source, ascription.user_ty,\n             );\n \n-            let user_ty = ascription.user_ty.clone().user_ty(\n+            let user_ty = ascription.user_ty.user_ty(\n                 &mut self.canonical_user_type_annotations,\n                 ascription.source.ty(&self.local_decls, self.tcx).ty,\n                 source_info.span,"}, {"sha": "a2cce9f1eda076e12fc6f2f43b0465a5c4e62507", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -75,13 +75,11 @@ fn lower_slice_len_call<'tcx>(\n                     let deref_arg = tcx.mk_place_deref(arg);\n                     let r_value = Rvalue::Len(deref_arg);\n                     let len_statement_kind = StatementKind::Assign(Box::new((*dest, r_value)));\n-                    let add_statement = Statement {\n-                        kind: len_statement_kind,\n-                        source_info: terminator.source_info.clone(),\n-                    };\n+                    let add_statement =\n+                        Statement { kind: len_statement_kind, source_info: terminator.source_info };\n \n                     // modify terminator into simple Goto\n-                    let new_terminator_kind = TerminatorKind::Goto { target: bb.clone() };\n+                    let new_terminator_kind = TerminatorKind::Goto { target: *bb };\n \n                     let patch = SliceLenPatchInformation { add_statement, new_terminator_kind };\n "}, {"sha": "568682cc3e4e0498228dd4a1319ebc4ccf8a584b", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -34,7 +34,7 @@ pub struct AttrWrapper {\n \n // This struct is passed around very frequently,\n // so make sure it doesn't accidentally get larger\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(AttrWrapper, 16);\n \n impl AttrWrapper {"}, {"sha": "0d7abeba1a703c003cfbb13c05eb276d7c4c76b8", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -775,7 +775,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         if blk.targeted_by_break {\n             self.break_ln.insert(blk.hir_id, succ);\n         }\n-        let succ = self.propagate_through_opt_expr(blk.expr.as_deref(), succ);\n+        let succ = self.propagate_through_opt_expr(blk.expr, succ);\n         blk.stmts.iter().rev().fold(succ, |succ, stmt| self.propagate_through_stmt(stmt, succ))\n     }\n \n@@ -796,7 +796,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 // initialization, which is mildly more complex than checking\n                 // once at the func header but otherwise equivalent.\n \n-                let succ = self.propagate_through_opt_expr(local.init.as_deref(), succ);\n+                let succ = self.propagate_through_opt_expr(local.init, succ);\n                 self.define_bindings_in_pat(&local.pat, succ)\n             }\n             hir::StmtKind::Item(..) => succ,"}, {"sha": "5fc8e230d72a3eba67aca78d8a258115f9d21e31", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -812,7 +812,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n         resolve_expr(self, ex);\n     }\n     fn visit_local(&mut self, l: &'tcx Local<'tcx>) {\n-        resolve_local(self, Some(&l.pat), l.init.as_deref());\n+        resolve_local(self, Some(&l.pat), l.init);\n     }\n }\n "}, {"sha": "392d618995af4a5a2057c4898b9a2261a62785ec", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -1487,7 +1487,7 @@ impl<'a> Resolver<'a> {\n                 .iter()\n                 .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n                 .collect(),\n-            main_def: self.main_def.clone(),\n+            main_def: self.main_def,\n             trait_impls: self.trait_impls.clone(),\n             proc_macros,\n             confused_type_with_std_module: self.confused_type_with_std_module.clone(),"}, {"sha": "ef60608a27c8bb6bb03e1fe56e1ea54ab1af908b", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -1357,9 +1357,7 @@ fn for_all_expns_in<E>(\n     mut f: impl FnMut(ExpnId, &ExpnData, ExpnHash) -> Result<(), E>,\n ) -> Result<(), E> {\n     let all_data: Vec<_> = HygieneData::with(|data| {\n-        expns\n-            .map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn).clone()))\n-            .collect()\n+        expns.map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn))).collect()\n     });\n     for (expn, data, hash) in all_data.into_iter() {\n         f(expn, &data, hash)?;"}, {"sha": "52367661a4c0018a586e8b3fabf8f5724c9a2f64", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -249,10 +249,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if let ObligationCauseCode::WellFormed(Some(wf_loc)) =\n                     root_obligation.cause.code.peel_derives()\n                 {\n-                    if let Some(cause) = self.tcx.diagnostic_hir_wf_check((\n-                        tcx.erase_regions(obligation.predicate),\n-                        wf_loc.clone(),\n-                    )) {\n+                    if let Some(cause) = self\n+                        .tcx\n+                        .diagnostic_hir_wf_check((tcx.erase_regions(obligation.predicate), *wf_loc))\n+                    {\n                         obligation.cause = cause;\n                         span = obligation.cause.span;\n                     }"}, {"sha": "92db0ca2a7c403d6c5f6c2666f6f9f33bd158cdd", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -595,7 +595,7 @@ impl TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n             ty::ReLateBound(debruijn, br) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderRegion { universe, name: br.kind };\n-                self.mapped_regions.insert(p.clone(), br);\n+                self.mapped_regions.insert(p, br);\n                 self.infcx.tcx.mk_region(ty::RePlaceholder(p))\n             }\n             _ => r,\n@@ -613,7 +613,7 @@ impl TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n             ty::Bound(debruijn, bound_ty) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderType { universe, name: bound_ty.var };\n-                self.mapped_types.insert(p.clone(), bound_ty);\n+                self.mapped_types.insert(p, bound_ty);\n                 self.infcx.tcx.mk_ty(ty::Placeholder(p))\n             }\n             _ if t.has_vars_bound_at_or_above(self.current_index) => t.super_fold_with(self),\n@@ -637,7 +637,7 @@ impl TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n                     universe,\n                     name: ty::BoundConst { var: bound_const, ty },\n                 };\n-                self.mapped_consts.insert(p.clone(), bound_const);\n+                self.mapped_consts.insert(p, bound_const);\n                 self.infcx.tcx.mk_const(ty::Const { val: ty::ConstKind::Placeholder(p), ty })\n             }\n             _ if ct.has_vars_bound_at_or_above(self.current_index) => ct.super_fold_with(self),"}, {"sha": "9824b644c3ebe0193eec7f1616f413790af0ac96", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2445,7 +2445,7 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n             \"get_provisional = {:#?}\",\n             self.map.borrow().get(&fresh_trait_ref),\n         );\n-        Some(self.map.borrow().get(&fresh_trait_ref)?.clone())\n+        Some(*self.map.borrow().get(&fresh_trait_ref)?)\n     }\n \n     /// Insert a provisional result into the cache. The result came"}, {"sha": "6fe96e4cc27b2f0811939203903e8379b1cc5f4c", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -1003,6 +1003,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             exprs.len()\n         );\n \n+        // The following check fixes #88097, where the compiler erroneously\n+        // attempted to coerce a closure type to itself via a function pointer.\n+        if prev_ty == new_ty {\n+            return Ok(prev_ty);\n+        }\n+\n         // Special-case that coercion alone cannot handle:\n         // Function items or non-capturing closures of differing IDs or InternalSubsts.\n         let (a_sig, b_sig) = {"}, {"sha": "cbfdce96bc57bdd0b1554f8b4e32ec1e8343faf6", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -186,7 +186,7 @@ pub enum AutorefOrPtrAdjustment<'tcx> {\n impl<'tcx> AutorefOrPtrAdjustment<'tcx> {\n     fn get_unsize(&self) -> Option<Ty<'tcx>> {\n         match self {\n-            AutorefOrPtrAdjustment::Autoref { mutbl: _, unsize } => unsize.clone(),\n+            AutorefOrPtrAdjustment::Autoref { mutbl: _, unsize } => *unsize,\n             AutorefOrPtrAdjustment::ToConstPtr => None,\n         }\n     }"}, {"sha": "a574a63d63b28eb259c194969494cac59fbda510", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 46, "deletions": 35, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -680,42 +680,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ex.span,\n                         format!(\"cannot apply unary operator `{}`\", op.as_str()),\n                     );\n-                    match actual.kind() {\n-                        Uint(_) if op == hir::UnOp::Neg => {\n-                            err.note(\"unsigned values cannot be negated\");\n-\n-                            if let hir::ExprKind::Unary(\n-                                _,\n-                                hir::Expr {\n-                                    kind:\n-                                        hir::ExprKind::Lit(Spanned {\n-                                            node: ast::LitKind::Int(1, _),\n-                                            ..\n-                                        }),\n-                                    ..\n-                                },\n-                            ) = ex.kind\n-                            {\n-                                err.span_suggestion(\n-                                    ex.span,\n-                                    &format!(\n-                                        \"you may have meant the maximum value of `{}`\",\n-                                        actual\n-                                    ),\n-                                    format!(\"{}::MAX\", actual),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+\n+                    let sp = self.tcx.sess.source_map().start_point(ex.span);\n+                    if let Some(sp) =\n+                        self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp)\n+                    {\n+                        // If the previous expression was a block expression, suggest parentheses\n+                        // (turning this into a binary subtraction operation instead.)\n+                        // for example, `{2} - 2` -> `({2}) - 2` (see src\\test\\ui\\parser\\expr-as-stmt.rs)\n+                        self.tcx.sess.parse_sess.expr_parentheses_needed(&mut err, *sp);\n+                    } else {\n+                        match actual.kind() {\n+                            Uint(_) if op == hir::UnOp::Neg => {\n+                                err.note(\"unsigned values cannot be negated\");\n+\n+                                if let hir::ExprKind::Unary(\n+                                    _,\n+                                    hir::Expr {\n+                                        kind:\n+                                            hir::ExprKind::Lit(Spanned {\n+                                                node: ast::LitKind::Int(1, _),\n+                                                ..\n+                                            }),\n+                                        ..\n+                                    },\n+                                ) = ex.kind\n+                                {\n+                                    err.span_suggestion(\n+                                        ex.span,\n+                                        &format!(\n+                                            \"you may have meant the maximum value of `{}`\",\n+                                            actual\n+                                        ),\n+                                        format!(\"{}::MAX\", actual),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                            }\n+                            Str | Never | Char | Tuple(_) | Array(_, _) => {}\n+                            Ref(_, ref lty, _) if *lty.kind() == Str => {}\n+                            _ => {\n+                                let missing_trait = match op {\n+                                    hir::UnOp::Neg => \"std::ops::Neg\",\n+                                    hir::UnOp::Not => \"std::ops::Not\",\n+                                    hir::UnOp::Deref => \"std::ops::UnDerf\",\n+                                };\n+                                suggest_impl_missing(&mut err, operand_ty, &missing_trait);\n                             }\n-                        }\n-                        Str | Never | Char | Tuple(_) | Array(_, _) => {}\n-                        Ref(_, ref lty, _) if *lty.kind() == Str => {}\n-                        _ => {\n-                            let missing_trait = match op {\n-                                hir::UnOp::Neg => \"std::ops::Neg\",\n-                                hir::UnOp::Not => \"std::ops::Not\",\n-                                hir::UnOp::Deref => \"std::ops::UnDerf\",\n-                            };\n-                            suggest_impl_missing(&mut err, operand_ty, &missing_trait);\n                         }\n                     }\n                     err.emit();"}, {"sha": "a7ed5bfaf8598367492120435663c08676b55a0d", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -99,17 +99,15 @@ pub trait Sized {\n /// `Unsize<dyn fmt::Debug>`.\n ///\n /// All implementations of `Unsize` are provided automatically by the compiler.\n-///\n-/// `Unsize` is implemented for:\n-///\n-/// - `[T; N]` is `Unsize<[T]>`\n-/// - `T` is `Unsize<dyn Trait>` when `T: Trait`\n-/// - `Foo<..., T, ...>` is `Unsize<Foo<..., U, ...>>` if:\n-///   - `T: Unsize<U>`\n-///   - Foo is a struct\n-///   - Only the last field of `Foo` has a type involving `T`\n-///   - `T` is not part of the type of any other fields\n-///   - `Bar<T>: Unsize<Bar<U>>`, if the last field of `Foo` has type `Bar<T>`\n+/// Those implementations are:\n+///\n+/// - Arrays `[T; N]` implement `Unsize<[T]>`.\n+/// - Types implementing a trait `Trait` also implement `Unsize<dyn Trait>`.\n+/// - Structs `Foo<..., T, ...>` implement `Unsize<Foo<..., U, ...>>` if all of these conditions\n+///   are met:\n+///   - `T: Unsize<U>`.\n+///   - Only the last field of `Foo` has a type involving `T`.\n+///   - `Bar<T>: Unsize<Bar<U>>`, where `Bar<T>` stands for the actual type of that last field.\n ///\n /// `Unsize` is used along with [`ops::CoerceUnsized`] to allow\n /// \"user-defined\" containers such as [`Rc`] to contain dynamically-sized"}, {"sha": "aa2448075141935819b27a6f4bfc69a12083c063", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -53,7 +53,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n         // Because the testsuit node holds some of the information as attributes, we can't write it\n         // until all of the tests has ran. Instead of writting every result as they come in, we add\n         // them to a Vec and write them all at once when run is complete.\n-        let duration = exec_time.map(|t| t.0.clone()).unwrap_or_default();\n+        let duration = exec_time.map(|t| t.0).unwrap_or_default();\n         self.results.push((desc.clone(), result.clone(), duration));\n         Ok(())\n     }"}, {"sha": "4f4952d0afb9d561d5351ce7a7ef966de96f8189", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -463,7 +463,7 @@ impl Item {\n             .filter_map(|ItemLink { link: s, link_text, did, ref fragment }| {\n                 match did {\n                     Some(did) => {\n-                        if let Ok((mut href, ..)) = href(did.clone(), cx) {\n+                        if let Ok((mut href, ..)) = href(*did, cx) {\n                             if let Some(ref fragment) = *fragment {\n                                 href.push('#');\n                                 href.push_str(fragment);"}, {"sha": "9222a0338ae6fee7ae8bbb284f101ffe71354ace", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -73,7 +73,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         search_paths: options.libs.clone(),\n         crate_types,\n         lint_opts: if !options.display_warnings { lint_opts } else { vec![] },\n-        lint_cap: Some(options.lint_cap.clone().unwrap_or_else(|| lint::Forbid)),\n+        lint_cap: Some(options.lint_cap.unwrap_or_else(|| lint::Forbid)),\n         cg: options.codegen_options.clone(),\n         externs: options.externs.clone(),\n         unstable_features: options.render_options.unstable_features,"}, {"sha": "34f9c0a8187a659f5602dd580755e5242398adbc", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -69,7 +69,7 @@ crate struct Context<'tcx> {\n }\n \n // `Context` is cloned a lot, so we don't want the size to grow unexpectedly.\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Context<'_>, 104);\n \n /// Shared mutable state used in [`Context`] and elsewhere."}, {"sha": "61f6b4e01c18c37a3557b932a0df1d91e2358355", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -1323,7 +1323,7 @@ impl LinkCollector<'_, '_> {\n         if let Some(ref cached) = self.visited_links.get(&key) {\n             match cached {\n                 Some(cached) => {\n-                    self.kind_side_channel.set(cached.side_channel.clone());\n+                    self.kind_side_channel.set(cached.side_channel);\n                     return Some(cached.res.clone());\n                 }\n                 None if cache_resolution_failure => return None,"}, {"sha": "fa14c52cf0ad7f9fcd43549989d2bbf52d14b4e1", "filename": "src/test/ui/asm/parse-error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -76,6 +76,12 @@ fn main() {\n         //~^ ERROR asm template must be a string literal\n         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n         //~^ ERROR asm template must be a string literal\n+        asm!(\"{}\", in(reg) _);\n+        //~^ ERROR _ cannot be used for input operands\n+        asm!(\"{}\", inout(reg) _);\n+        //~^ ERROR _ cannot be used for input operands\n+        asm!(\"{}\", inlateout(reg) _);\n+        //~^ ERROR _ cannot be used for input operands\n     }\n }\n "}, {"sha": "78d342cc1daf79f6fbf455b234501276d0a83858", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -214,162 +214,180 @@ LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error: _ cannot be used for input operands\n+  --> $DIR/parse-error.rs:79:28\n+   |\n+LL |         asm!(\"{}\", in(reg) _);\n+   |                            ^\n+\n+error: _ cannot be used for input operands\n+  --> $DIR/parse-error.rs:81:31\n+   |\n+LL |         asm!(\"{}\", inout(reg) _);\n+   |                               ^\n+\n+error: _ cannot be used for input operands\n+  --> $DIR/parse-error.rs:83:35\n+   |\n+LL |         asm!(\"{}\", inlateout(reg) _);\n+   |                                   ^\n+\n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:84:1\n+  --> $DIR/parse-error.rs:90:1\n    |\n LL | global_asm!();\n    | ^^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:86:13\n+  --> $DIR/parse-error.rs:92:13\n    |\n LL | global_asm!(FOO);\n    |             ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:88:18\n+  --> $DIR/parse-error.rs:94:18\n    |\n LL | global_asm!(\"{}\" FOO);\n    |                  ^^^ expected `,`\n \n error: expected operand, options, or additional template string\n-  --> $DIR/parse-error.rs:90:19\n+  --> $DIR/parse-error.rs:96:19\n    |\n LL | global_asm!(\"{}\", FOO);\n    |                   ^^^ expected operand, options, or additional template string\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:92:24\n+  --> $DIR/parse-error.rs:98:24\n    |\n LL | global_asm!(\"{}\", const);\n    |                        ^ expected expression\n \n error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n-  --> $DIR/parse-error.rs:94:30\n+  --> $DIR/parse-error.rs:100:30\n    |\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n-  --> $DIR/parse-error.rs:96:25\n+  --> $DIR/parse-error.rs:102:25\n    |\n LL | global_asm!(\"\", options(FOO));\n    |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:98:25\n+  --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:100:25\n+  --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:102:30\n+  --> $DIR/parse-error.rs:108:30\n    |\n LL | global_asm!(\"{}\", options(), const FOO);\n    |                   ---------  ^^^^^^^^^ argument\n    |                   |\n    |                   previous options\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:104:29\n+  --> $DIR/parse-error.rs:110:29\n    |\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n error: expected `)`, found `FOO`\n-  --> $DIR/parse-error.rs:106:33\n+  --> $DIR/parse-error.rs:112:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n    |                                 ^^^ expected `)`\n \n error: expected `)`, found `,`\n-  --> $DIR/parse-error.rs:108:32\n+  --> $DIR/parse-error.rs:114:32\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n    |                                ^ expected `)`\n \n error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:110:37\n+  --> $DIR/parse-error.rs:116:37\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ----------------  ^^^^^^^^^ argument\n    |                   |\n    |                   clobber_abi\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:110:19\n+  --> $DIR/parse-error.rs:116:19\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ^^^^^^^^^^^^^^^^\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:113:28\n+  --> $DIR/parse-error.rs:119:28\n    |\n LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n    |                 ---------  ^^^^^^^^^^^^^^^^\n    |                 |\n    |                 options\n \n error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:115:30\n+  --> $DIR/parse-error.rs:121:30\n    |\n LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n    |                   ---------  ^^^^^^^^^^^^^^^^\n    |                   |\n    |                   options\n \n error: clobber_abi specified multiple times\n-  --> $DIR/parse-error.rs:117:35\n+  --> $DIR/parse-error.rs:123:35\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n    |                 ----------------  ^^^^^^^^^^^^^^^^\n    |                 |\n    |                 clobber_abi previously specified here\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:119:35\n+  --> $DIR/parse-error.rs:125:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                    |\n    |                    previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:119:35\n+  --> $DIR/parse-error.rs:125:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                                   ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"\"`\n-  --> $DIR/parse-error.rs:122:28\n+  --> $DIR/parse-error.rs:128:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n    |                            ^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: expected one of `clobber_abi`, `const`, or `options`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:124:30\n+  --> $DIR/parse-error.rs:130:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n    |                              ^^^^ expected one of `clobber_abi`, `const`, or `options`\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:126:13\n+  --> $DIR/parse-error.rs:132:13\n    |\n LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:128:20\n+  --> $DIR/parse-error.rs:134:20\n    |\n LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n    |                    ^^^^^^^^^^^^^^^^^^^^\n@@ -439,6 +457,6 @@ LL |     let mut bar = 0;\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                                          ^^^ non-constant value\n \n-error: aborting due to 63 previous errors\n+error: aborting due to 66 previous errors\n \n For more information about this error, try `rustc --explain E0435`."}, {"sha": "0aea56ddb702b0386cec7e45011e04f1c4ec90bd", "filename": "src/test/ui/async-await/issues/issue-54752-async-block.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2,9 +2,14 @@ warning: unnecessary parentheses around assigned value\n   --> $DIR/issue-54752-async-block.rs:6:22\n    |\n LL | fn main() { let _a = (async  { }); }\n-   |                      ^^^^^^^^^^^^ help: remove these parentheses\n+   |                      ^          ^\n    |\n    = note: `#[warn(unused_parens)]` on by default\n+help: remove these parentheses\n+   |\n+LL - fn main() { let _a = (async  { }); }\n+LL + fn main() { let _a = async  { }; }\n+   | \n \n warning: 1 warning emitted\n "}, {"sha": "e543e1bae9239f16f161600deb5308c921ec6d12", "filename": "src/test/ui/coercion/issue-88097.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fcoercion%2Fissue-88097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fcoercion%2Fissue-88097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fissue-88097.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -0,0 +1,31 @@\n+// In #88097, the compiler attempted to coerce a closure type to itself via\n+// a function pointer, which caused an unnecessary error. Check that this\n+// behavior has been fixed.\n+\n+// check-pass\n+\n+fn peculiar() -> impl Fn(u8) -> u8 {\n+    return |x| x + 1\n+}\n+\n+fn peculiar2() -> impl Fn(u8) -> u8 {\n+    return |x| x + 1;\n+}\n+\n+fn peculiar3() -> impl Fn(u8) -> u8 {\n+    let f = |x| x + 1;\n+    return f\n+}\n+\n+fn peculiar4() -> impl Fn(u8) -> u8 {\n+    let f = |x| x + 1;\n+    f\n+}\n+\n+fn peculiar5() -> impl Fn(u8) -> u8 {\n+    let f = |x| x + 1;\n+    let g = |x| x + 2;\n+    return if true { f } else { g }\n+}\n+\n+fn main() {}"}, {"sha": "533fcabd418228734b6a9d46dfb121ae6d643a09", "filename": "src/test/ui/const-generics/unused_braces.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2,13 +2,18 @@ warning: unnecessary braces around const expression\n   --> $DIR/unused_braces.rs:9:14\n    |\n LL |     let _: A<{ 7 }>;\n-   |              ^^^^^ help: remove these braces\n+   |              ^^ ^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused_braces.rs:3:9\n    |\n LL | #![warn(unused_braces)]\n    |         ^^^^^^^^^^^^^\n+help: remove these braces\n+   |\n+LL -     let _: A<{ 7 }>;\n+LL +     let _: A<7>;\n+   | \n \n warning: 1 warning emitted\n "}, {"sha": "1d5f9ebb5e5c5e3ba1558e1ab559c4261e347e5b", "filename": "src/test/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 118, "deletions": 17, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2,109 +2,210 @@ error: unnecessary parentheses around `return` value\n   --> $DIR/lint-unnecessary-parens.rs:13:12\n    |\n LL |     return (1);\n-   |            ^^^ help: remove these parentheses\n+   |            ^ ^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-unnecessary-parens.rs:3:9\n    |\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     return (1);\n+LL +     return 1;\n+   | \n \n error: unnecessary parentheses around `return` value\n   --> $DIR/lint-unnecessary-parens.rs:16:12\n    |\n LL |     return (X { y });\n-   |            ^^^^^^^^^ help: remove these parentheses\n+   |            ^       ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     return (X { y });\n+LL +     return X { y };\n+   | \n \n error: unnecessary parentheses around type\n   --> $DIR/lint-unnecessary-parens.rs:19:46\n    |\n LL | pub fn unused_parens_around_return_type() -> (u32) {\n-   |                                              ^^^^^ help: remove these parentheses\n+   |                                              ^   ^\n+   |\n+help: remove these parentheses\n+   |\n+LL - pub fn unused_parens_around_return_type() -> (u32) {\n+LL + pub fn unused_parens_around_return_type() -> u32 {\n+   | \n \n error: unnecessary parentheses around block return value\n   --> $DIR/lint-unnecessary-parens.rs:25:9\n    |\n LL |         (5)\n-   |         ^^^ help: remove these parentheses\n+   |         ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (5)\n+LL +         5\n+   | \n \n error: unnecessary parentheses around block return value\n   --> $DIR/lint-unnecessary-parens.rs:27:5\n    |\n LL |     (5)\n-   |     ^^^ help: remove these parentheses\n+   |     ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     (5)\n+LL +     5\n+   | \n \n error: unnecessary parentheses around assigned value\n   --> $DIR/lint-unnecessary-parens.rs:44:31\n    |\n LL | pub const CONST_ITEM: usize = (10);\n-   |                               ^^^^ help: remove these parentheses\n+   |                               ^  ^\n+   |\n+help: remove these parentheses\n+   |\n+LL - pub const CONST_ITEM: usize = (10);\n+LL + pub const CONST_ITEM: usize = 10;\n+   | \n \n error: unnecessary parentheses around assigned value\n   --> $DIR/lint-unnecessary-parens.rs:45:33\n    |\n LL | pub static STATIC_ITEM: usize = (10);\n-   |                                 ^^^^ help: remove these parentheses\n+   |                                 ^  ^\n+   |\n+help: remove these parentheses\n+   |\n+LL - pub static STATIC_ITEM: usize = (10);\n+LL + pub static STATIC_ITEM: usize = 10;\n+   | \n \n error: unnecessary parentheses around function argument\n   --> $DIR/lint-unnecessary-parens.rs:49:9\n    |\n LL |     bar((true));\n-   |         ^^^^^^ help: remove these parentheses\n+   |         ^    ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     bar((true));\n+LL +     bar(true);\n+   | \n \n error: unnecessary parentheses around `if` condition\n   --> $DIR/lint-unnecessary-parens.rs:51:8\n    |\n LL |     if (true) {}\n-   |        ^^^^^^ help: remove these parentheses\n+   |        ^    ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if (true) {}\n+LL +     if true {}\n+   | \n \n error: unnecessary parentheses around `while` condition\n   --> $DIR/lint-unnecessary-parens.rs:52:11\n    |\n LL |     while (true) {}\n-   |           ^^^^^^ help: remove these parentheses\n+   |           ^    ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     while (true) {}\n+LL +     while true {}\n+   | \n \n error: unnecessary parentheses around `match` scrutinee expression\n   --> $DIR/lint-unnecessary-parens.rs:53:11\n    |\n LL |     match (true) {\n-   |           ^^^^^^ help: remove these parentheses\n+   |           ^    ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     match (true) {\n+LL +     match true {\n+   | \n \n error: unnecessary parentheses around `let` scrutinee expression\n   --> $DIR/lint-unnecessary-parens.rs:56:16\n    |\n LL |     if let 1 = (1) {}\n-   |                ^^^ help: remove these parentheses\n+   |                ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if let 1 = (1) {}\n+LL +     if let 1 = 1 {}\n+   | \n \n error: unnecessary parentheses around `let` scrutinee expression\n   --> $DIR/lint-unnecessary-parens.rs:57:19\n    |\n LL |     while let 1 = (2) {}\n-   |                   ^^^ help: remove these parentheses\n+   |                   ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     while let 1 = (2) {}\n+LL +     while let 1 = 2 {}\n+   | \n \n error: unnecessary parentheses around method argument\n   --> $DIR/lint-unnecessary-parens.rs:73:24\n    |\n LL |     X { y: false }.foo((true));\n-   |                        ^^^^^^ help: remove these parentheses\n+   |                        ^    ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     X { y: false }.foo((true));\n+LL +     X { y: false }.foo(true);\n+   | \n \n error: unnecessary parentheses around assigned value\n   --> $DIR/lint-unnecessary-parens.rs:75:18\n    |\n LL |     let mut _a = (0);\n-   |                  ^^^ help: remove these parentheses\n+   |                  ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     let mut _a = (0);\n+LL +     let mut _a = 0;\n+   | \n \n error: unnecessary parentheses around assigned value\n   --> $DIR/lint-unnecessary-parens.rs:76:10\n    |\n LL |     _a = (0);\n-   |          ^^^ help: remove these parentheses\n+   |          ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     _a = (0);\n+LL +     _a = 0;\n+   | \n \n error: unnecessary parentheses around assigned value\n   --> $DIR/lint-unnecessary-parens.rs:77:11\n    |\n LL |     _a += (1);\n-   |           ^^^ help: remove these parentheses\n+   |           ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     _a += (1);\n+LL +     _a += 1;\n+   | \n \n error: aborting due to 17 previous errors\n "}, {"sha": "255772ff40261160a1874bd94642806d32bb9357", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -10,13 +10,18 @@ warning: unnecessary parentheses around assigned value\n   --> $DIR/suggestions.rs:48:31\n    |\n LL |         let mut registry_no = (format!(\"NX-{}\", 74205));\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n+   |                               ^                       ^\n    |\n note: the lint level is defined here\n   --> $DIR/suggestions.rs:4:21\n    |\n LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n    |                     ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -         let mut registry_no = (format!(\"NX-{}\", 74205));\n+LL +         let mut registry_no = format!(\"NX-{}\", 74205);\n+   | \n \n warning: variable does not need to be mutable\n   --> $DIR/suggestions.rs:48:13"}, {"sha": "677b96d3f32f082cee633cb9b8631b5241844ce7", "filename": "src/test/ui/lint/unused/issue-54538-unused-parens-lint.stderr", "status": "modified", "additions": 167, "deletions": 24, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2,151 +2,294 @@ error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:16:9\n    |\n LL |     let (a) = 0;\n-   |         ^^^ help: remove these parentheses\n+   |         ^ ^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-54538-unused-parens-lint.rs:13:9\n    |\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     let (a) = 0;\n+LL +     let a = 0;\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:17:9\n    |\n LL |     for (a) in 0..1 {}\n-   |         ^^^ help: remove these parentheses\n+   |         ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     for (a) in 0..1 {}\n+LL +     for a in 0..1 {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:18:12\n    |\n LL |     if let (a) = 0 {}\n-   |            ^^^ help: remove these parentheses\n+   |            ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if let (a) = 0 {}\n+LL +     if let a = 0 {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:19:15\n    |\n LL |     while let (a) = 0 {}\n-   |               ^^^ help: remove these parentheses\n+   |               ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     while let (a) = 0 {}\n+LL +     while let a = 0 {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:20:12\n    |\n LL |     fn foo((a): u8) {}\n-   |            ^^^ help: remove these parentheses\n+   |            ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     fn foo((a): u8) {}\n+LL +     fn foo(a: u8) {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:21:14\n    |\n LL |     let _ = |(a): u8| 0;\n-   |              ^^^ help: remove these parentheses\n+   |              ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     let _ = |(a): u8| 0;\n+LL +     let _ = |a: u8| 0;\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:49:12\n    |\n LL |     if let (0 | 1) = 0 {}\n-   |            ^^^^^^^ help: remove these parentheses\n+   |            ^     ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if let (0 | 1) = 0 {}\n+LL +     if let 0 | 1 = 0 {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:50:13\n    |\n LL |     if let ((0 | 1),) = (0,) {}\n-   |             ^^^^^^^ help: remove these parentheses\n+   |             ^     ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if let ((0 | 1),) = (0,) {}\n+LL +     if let (0 | 1,) = (0,) {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:51:13\n    |\n LL |     if let [(0 | 1)] = [0] {}\n-   |             ^^^^^^^ help: remove these parentheses\n+   |             ^     ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if let [(0 | 1)] = [0] {}\n+LL +     if let [0 | 1] = [0] {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:52:16\n    |\n LL |     if let 0 | (1 | 2) = 0 {}\n-   |                ^^^^^^^ help: remove these parentheses\n+   |                ^     ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if let 0 | (1 | 2) = 0 {}\n+LL +     if let 0 | 1 | 2 = 0 {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:54:15\n    |\n LL |     if let TS((0 | 1)) = TS(0) {}\n-   |               ^^^^^^^ help: remove these parentheses\n+   |               ^     ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if let TS((0 | 1)) = TS(0) {}\n+LL +     if let TS(0 | 1) = TS(0) {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:56:20\n    |\n LL |     if let NS { f: (0 | 1) } = (NS { f: 0 }) {}\n-   |                    ^^^^^^^ help: remove these parentheses\n+   |                    ^     ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if let NS { f: (0 | 1) } = (NS { f: 0 }) {}\n+LL +     if let NS { f: 0 | 1 } = (NS { f: 0 }) {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:66:9\n    |\n LL |         (_) => {}\n-   |         ^^^ help: remove these parentheses\n+   |         ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (_) => {}\n+LL +         _ => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:67:9\n    |\n LL |         (y) => {}\n-   |         ^^^ help: remove these parentheses\n+   |         ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (y) => {}\n+LL +         y => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:68:9\n    |\n LL |         (ref r) => {}\n-   |         ^^^^^^^ help: remove these parentheses\n+   |         ^     ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (ref r) => {}\n+LL +         ref r => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:69:9\n    |\n LL |         (e @ 1...2) => {}\n-   |         ^^^^^^^^^^^ help: remove these parentheses\n+   |         ^         ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (e @ 1...2) => {}\n+LL +         e @ 1...2 => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:75:9\n    |\n LL |         (e @ &(1...2)) => {}\n-   |         ^^^^^^^^^^^^^^ help: remove these parentheses\n+   |         ^            ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (e @ &(1...2)) => {}\n+LL +         e @ &(1...2) => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:76:10\n    |\n LL |         &(_) => {}\n-   |          ^^^ help: remove these parentheses\n+   |          ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         &(_) => {}\n+LL +         &_ => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:87:9\n    |\n LL |         (_) => {}\n-   |         ^^^ help: remove these parentheses\n+   |         ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (_) => {}\n+LL +         _ => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:88:9\n    |\n LL |         (y) => {}\n-   |         ^^^ help: remove these parentheses\n+   |         ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (y) => {}\n+LL +         y => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:89:9\n    |\n LL |         (ref r) => {}\n-   |         ^^^^^^^ help: remove these parentheses\n+   |         ^     ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (ref r) => {}\n+LL +         ref r => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:90:9\n    |\n LL |         (e @ 1..=2) => {}\n-   |         ^^^^^^^^^^^ help: remove these parentheses\n+   |         ^         ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (e @ 1..=2) => {}\n+LL +         e @ 1..=2 => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:96:9\n    |\n LL |         (e @ &(1..=2)) => {}\n-   |         ^^^^^^^^^^^^^^ help: remove these parentheses\n+   |         ^            ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         (e @ &(1..=2)) => {}\n+LL +         e @ &(1..=2) => {}\n+   | \n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:97:10\n    |\n LL |         &(_) => {}\n-   |          ^^^ help: remove these parentheses\n+   |          ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         &(_) => {}\n+LL +         &_ => {}\n+   | \n \n error: aborting due to 24 previous errors\n "}, {"sha": "a715093df4c329c34e40fc372b49e948b1b0bfbc", "filename": "src/test/ui/lint/unused/issue-74883-unused-paren-baren-yield.stderr", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-74883-unused-paren-baren-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-74883-unused-paren-baren-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-74883-unused-paren-baren-yield.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2,49 +2,83 @@ error: unnecessary parentheses around `let` scrutinee expression\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:14:29\n    |\n LL |         while let Some(_) = ({yield}) {}\n-   |                             ^^^^^^^^^ help: remove these parentheses\n+   |                             ^       ^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:3:24\n    |\n LL | #![deny(unused_braces, unused_parens)]\n    |                        ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -         while let Some(_) = ({yield}) {}\n+LL +         while let Some(_) = {yield} {}\n+   | \n \n error: unnecessary parentheses around `let` scrutinee expression\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:15:29\n    |\n LL |         while let Some(_) = ((yield)) {}\n-   |                             ^^^^^^^^^ help: remove these parentheses\n+   |                             ^       ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         while let Some(_) = ((yield)) {}\n+LL +         while let Some(_) = (yield) {}\n+   | \n \n error: unnecessary braces around block return value\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:16:10\n    |\n LL |         {{yield}};\n-   |          ^^^^^^^ help: remove these braces\n+   |          ^     ^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:3:9\n    |\n LL | #![deny(unused_braces, unused_parens)]\n    |         ^^^^^^^^^^^^^\n+help: remove these braces\n+   |\n+LL -         {{yield}};\n+LL +         {yield};\n+   | \n \n error: unnecessary parentheses around block return value\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:17:10\n    |\n LL |         {( yield )};\n-   |          ^^^^^^^^^ help: remove these parentheses\n+   |          ^^     ^^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         {( yield )};\n+LL +         {yield};\n+   | \n \n error: unnecessary parentheses around block return value\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:18:30\n    |\n LL |         while let Some(_) = {(yield)} {}\n-   |                              ^^^^^^^ help: remove these parentheses\n+   |                              ^     ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         while let Some(_) = {(yield)} {}\n+LL +         while let Some(_) = {yield} {}\n+   | \n \n error: unnecessary braces around block return value\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:19:30\n    |\n LL |         while let Some(_) = {{yield}} {}\n-   |                              ^^^^^^^ help: remove these braces\n+   |                              ^     ^\n+   |\n+help: remove these braces\n+   |\n+LL -         while let Some(_) = {{yield}} {}\n+LL +         while let Some(_) = {yield} {}\n+   | \n \n error: aborting due to 6 previous errors\n "}, {"sha": "7d6fef00ac1a4078357771226ddb4d6e0ed8955a", "filename": "src/test/ui/lint/unused_braces.stderr", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2,43 +2,71 @@ warning: unnecessary parentheses around assigned value\n   --> $DIR/unused_braces.rs:10:13\n    |\n LL |     let _ = (7);\n-   |             ^^^ help: remove these parentheses\n+   |             ^ ^\n    |\n note: the lint level is defined here\n   --> $DIR/unused_braces.rs:4:24\n    |\n LL | #![warn(unused_braces, unused_parens)]\n    |                        ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     let _ = (7);\n+LL +     let _ = 7;\n+   | \n \n warning: unnecessary braces around `if` condition\n   --> $DIR/unused_braces.rs:26:8\n    |\n LL |     if { true } {\n-   |        ^^^^^^^^ help: remove these braces\n+   |        ^^    ^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused_braces.rs:4:9\n    |\n LL | #![warn(unused_braces, unused_parens)]\n    |         ^^^^^^^^^^^^^\n+help: remove these braces\n+   |\n+LL -     if { true } {\n+LL +     if true {\n+   | \n \n warning: unnecessary braces around `while` condition\n   --> $DIR/unused_braces.rs:30:11\n    |\n LL |     while { false } {\n-   |           ^^^^^^^^^ help: remove these braces\n+   |           ^^     ^^\n+   |\n+help: remove these braces\n+   |\n+LL -     while { false } {\n+LL +     while false {\n+   | \n \n warning: unnecessary braces around const expression\n   --> $DIR/unused_braces.rs:34:17\n    |\n LL |     let _: [u8; { 3 }];\n-   |                 ^^^^^ help: remove these braces\n+   |                 ^^ ^^\n+   |\n+help: remove these braces\n+   |\n+LL -     let _: [u8; { 3 }];\n+LL +     let _: [u8; 3];\n+   | \n \n warning: unnecessary braces around function argument\n   --> $DIR/unused_braces.rs:37:13\n    |\n LL |     consume({ 7 });\n-   |             ^^^^^ help: remove these braces\n+   |             ^^ ^^\n+   |\n+help: remove these braces\n+   |\n+LL -     consume({ 7 });\n+LL +     consume(7);\n+   | \n \n warning: 5 warnings emitted\n "}, {"sha": "5a5326cab3b1de5391d1d2c7f5eec0144337ba43", "filename": "src/test/ui/lint/unused_braces_borrow.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2,13 +2,18 @@ warning: unnecessary braces around function argument\n   --> $DIR/unused_braces_borrow.rs:24:13\n    |\n LL |     consume({ a.b });\n-   |             ^^^^^^^ help: remove these braces\n+   |             ^^   ^^\n    |\n note: the lint level is defined here\n   --> $DIR/unused_braces_borrow.rs:4:9\n    |\n LL | #![warn(unused_braces)]\n    |         ^^^^^^^^^^^^^\n+help: remove these braces\n+   |\n+LL -     consume({ a.b });\n+LL +     consume(a.b);\n+   | \n \n warning: 1 warning emitted\n "}, {"sha": "498c25d2e1c44ed4a2318ef21f6170e9861a2b0c", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -1,14 +1,19 @@\n-{\"message\":\"unnecessary parentheses around assigned value\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":596,\"byte_end\":609,\"line_start\":16,\"line_end\":16,\"column_start\":14,\"column_end\":27,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\n+{\"message\":\"unnecessary parentheses around assigned value\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":596,\"byte_end\":597,\"line_start\":16,\"line_end\":16,\"column_start\":14,\"column_end\":15,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\n   --> $DIR/unused_parens_json_suggestion.rs:16:14\n    |\n LL |     let _a = (1 / (2 + 3));\n-   |              ^^^^^^^^^^^^^ help: remove these parentheses\n+   |              ^           ^\n    |\n note: the lint level is defined here\n   --> $DIR/unused_parens_json_suggestion.rs:10:9\n    |\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     let _a = (1 / (2 + 3));\n+LL +     let _a = 1 / (2 + 3);\n+   | \n \n \"}\n {\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to previous error"}, {"sha": "08291b10fcc204f284fe3347f193846bc10c1b51", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.stderr", "status": "modified", "additions": 71, "deletions": 18, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -1,70 +1,123 @@\n-{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":500,\"byte_end\":504,\"line_start\":17,\"line_end\":17,\"column_start\":8,\"column_end\":12,\"is_primary\":true,\"text\":[{\"text\":\"    if (_b) {\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":500,\"byte_end\":501,\"line_start\":17,\"line_end\":17,\"column_start\":8,\"column_end\":9,\"is_primary\":true,\"text\":[{\"text\":\"    if (_b) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:17:8\n    |\n LL |     if (_b) {\n-   |        ^^^^ help: remove these parentheses\n+   |        ^  ^\n    |\n note: the lint level is defined here\n   --> $DIR/unused_parens_remove_json_suggestion.rs:10:9\n    |\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     if (_b) {\n+LL +     if _b {\n+   | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":631,\"byte_end\":634,\"line_start\":28,\"line_end\":28,\"column_start\":7,\"column_end\":10,\"is_primary\":true,\"text\":[{\"text\":\"    if(c) {\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":631,\"byte_end\":632,\"line_start\":28,\"line_end\":28,\"column_start\":7,\"column_end\":8,\"is_primary\":true,\"text\":[{\"text\":\"    if(c) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:28:7\n    |\n LL |     if(c) {\n-   |       ^^^ help: remove these parentheses\n+   |       ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if(c) {\n+LL +     if c {\n+   | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":711,\"byte_end\":714,\"line_start\":32,\"line_end\":32,\"column_start\":8,\"column_end\":11,\"is_primary\":true,\"text\":[{\"text\":\"    if (c){\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":711,\"byte_end\":712,\"line_start\":32,\"line_end\":32,\"column_start\":8,\"column_end\":9,\"is_primary\":true,\"text\":[{\"text\":\"    if (c){\n   --> $DIR/unused_parens_remove_json_suggestion.rs:32:8\n    |\n LL |     if (c){\n-   |        ^^^ help: remove these parentheses\n+   |        ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if (c){\n+LL +     if c {\n+   | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":\"false && true \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"error: unnecessary parentheses around `while` condition\n+{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":794,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":12,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":12}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":807,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":25,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":25,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":794,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":12,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":12}],\"label\":null,\"suggested_replacement\":\"\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":807,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":25,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":25,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":\" \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"error: unnecessary parentheses around `while` condition\n   --> $DIR/unused_parens_remove_json_suggestion.rs:36:11\n    |\n LL |     while (false && true){\n-   |           ^^^^^^^^^^^^^^^ help: remove these parentheses\n+   |           ^             ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     while (false && true){\n+LL +     while false && true {\n+   | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":821,\"byte_end\":824,\"line_start\":37,\"line_end\":37,\"column_start\":12,\"column_end\":15,\"is_primary\":true,\"text\":[{\"text\":\"        if (c) {\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":821,\"byte_end\":822,\"line_start\":37,\"line_end\":37,\"column_start\":12,\"column_end\":13,\"is_primary\":true,\"text\":[{\"text\":\"        if (c) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:37:12\n    |\n LL |         if (c) {\n-   |            ^^^ help: remove these parentheses\n+   |            ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         if (c) {\n+LL +         if c {\n+   | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":918,\"byte_end\":933,\"line_start\":43,\"line_end\":43,\"column_start\":10,\"column_end\":25,\"is_primary\":true,\"text\":[{\"text\":\"    while(true && false) {\n+{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":918,\"byte_end\":919,\"line_start\":43,\"line_end\":43,\"column_start\":10,\"column_end\":11,\"is_primary\":true,\"text\":[{\"text\":\"    while(true && false) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:43:10\n    |\n LL |     while(true && false) {\n-   |          ^^^^^^^^^^^^^^^ help: remove these parentheses\n+   |          ^             ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     while(true && false) {\n+LL +     while true && false {\n+   | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":987,\"byte_end\":995,\"line_start\":44,\"line_end\":44,\"column_start\":18,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"        for _ in (0 .. 3){\n+{\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":987,\"byte_end\":988,\"line_start\":44,\"line_end\":44,\"column_start\":18,\"column_end\":19,\"is_primary\":true,\"text\":[{\"text\":\"        for _ in (0 .. 3){\n   --> $DIR/unused_parens_remove_json_suggestion.rs:44:18\n    |\n LL |         for _ in (0 .. 3){\n-   |                  ^^^^^^^^ help: remove these parentheses\n+   |                  ^      ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         for _ in (0 .. 3){\n+LL +         for _ in 0 .. 3 {\n+   | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1088,\"byte_end\":1096,\"line_start\":49,\"line_end\":49,\"column_start\":14,\"column_end\":22,\"is_primary\":true,\"text\":[{\"text\":\"    for _ in (0 .. 3) {\n+{\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1088,\"byte_end\":1089,\"line_start\":49,\"line_end\":49,\"column_start\":14,\"column_end\":15,\"is_primary\":true,\"text\":[{\"text\":\"    for _ in (0 .. 3) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:49:14\n    |\n LL |     for _ in (0 .. 3) {\n-   |              ^^^^^^^^ help: remove these parentheses\n+   |              ^      ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     for _ in (0 .. 3) {\n+LL +     for _ in 0 .. 3 {\n+   | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1147,\"byte_end\":1162,\"line_start\":50,\"line_end\":50,\"column_start\":15,\"column_end\":30,\"is_primary\":true,\"text\":[{\"text\":\"        while (true && false) {\n+{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1147,\"byte_end\":1148,\"line_start\":50,\"line_end\":50,\"column_start\":15,\"column_end\":16,\"is_primary\":true,\"text\":[{\"text\":\"        while (true && false) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:50:15\n    |\n LL |         while (true && false) {\n-   |               ^^^^^^^^^^^^^^^ help: remove these parentheses\n+   |               ^             ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -         while (true && false) {\n+LL +         while true && false {\n+   | \n \n \"}\n {\"message\":\"aborting due to 9 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 9 previous errors"}, {"sha": "101959d6da0e0ae36daffadaecd581aac2af43db", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -32,4 +32,9 @@ fn moo(x: u32) -> bool {\n     }) > 0 //~ ERROR expected expression\n }\n \n+fn qux() -> u32 {\n+    ({2}) - 2 //~ ERROR cannot apply unary operator `-` to type `u32`\n+    //~^ ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "45c4f977502d24fc0414b854c5fb843792cf331c", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -32,4 +32,9 @@ fn moo(x: u32) -> bool {\n     } > 0 //~ ERROR expected expression\n }\n \n+fn qux() -> u32 {\n+    {2} - 2 //~ ERROR cannot apply unary operator `-` to type `u32`\n+    //~^ ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "cae775099e0a03ced8306d34efbe54a3df257290", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -99,7 +99,29 @@ help: parentheses are required to parse this as an expression\n LL |     ({ 3 }) * 3\n    |     +     +\n \n-error: aborting due to 9 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:36:6\n+   |\n+LL |     {2} - 2\n+   |      ^ expected `()`, found integer\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |     {return 2;} - 2\n+   |      ++++++  +\n+\n+error[E0600]: cannot apply unary operator `-` to type `u32`\n+  --> $DIR/expr-as-stmt.rs:36:9\n+   |\n+LL |     {2} - 2\n+   |         ^^^ cannot apply unary operator `-`\n+   |\n+help: parentheses are required to parse this as an expression\n+   |\n+LL |     ({2}) - 2\n+   |     +   +\n+\n+error: aborting due to 11 previous errors\n \n-Some errors have detailed explanations: E0308, E0614.\n+Some errors have detailed explanations: E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "8adf02b150b874cf2577068fae6e0c9bd5502327", "filename": "src/test/ui/path-lookahead.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2,13 +2,18 @@ warning: unnecessary parentheses around `return` value\n   --> $DIR/path-lookahead.rs:10:12\n    |\n LL |     return (<T as ToString>::to_string(&arg));\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n+   |            ^                                ^\n    |\n note: the lint level is defined here\n   --> $DIR/path-lookahead.rs:5:9\n    |\n LL | #![warn(unused_parens)]\n    |         ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     return (<T as ToString>::to_string(&arg));\n+LL +     return <T as ToString>::to_string(&arg);\n+   | \n \n warning: 1 warning emitted\n "}, {"sha": "d8dd31645e06162f37987f06b87d04fc2a3a4773", "filename": "src/test/ui/try-block/try-block-unused-delims.stderr", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -2,43 +2,71 @@ warning: unnecessary parentheses around function argument\n   --> $DIR/try-block-unused-delims.rs:11:13\n    |\n LL |     consume((try {}));\n-   |             ^^^^^^^^ help: remove these parentheses\n+   |             ^      ^\n    |\n note: the lint level is defined here\n   --> $DIR/try-block-unused-delims.rs:6:9\n    |\n LL | #![warn(unused_parens, unused_braces)]\n    |         ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     consume((try {}));\n+LL +     consume(try {});\n+   | \n \n warning: unnecessary braces around function argument\n   --> $DIR/try-block-unused-delims.rs:14:13\n    |\n LL |     consume({ try {} });\n-   |             ^^^^^^^^^^ help: remove these braces\n+   |             ^^      ^^\n    |\n note: the lint level is defined here\n   --> $DIR/try-block-unused-delims.rs:6:24\n    |\n LL | #![warn(unused_parens, unused_braces)]\n    |                        ^^^^^^^^^^^^^\n+help: remove these braces\n+   |\n+LL -     consume({ try {} });\n+LL +     consume(try {});\n+   | \n \n warning: unnecessary parentheses around `match` scrutinee expression\n   --> $DIR/try-block-unused-delims.rs:17:11\n    |\n LL |     match (try {}) {\n-   |           ^^^^^^^^ help: remove these parentheses\n+   |           ^      ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     match (try {}) {\n+LL +     match try {} {\n+   | \n \n warning: unnecessary parentheses around `let` scrutinee expression\n   --> $DIR/try-block-unused-delims.rs:22:22\n    |\n LL |     if let Err(()) = (try {}) {}\n-   |                      ^^^^^^^^ help: remove these parentheses\n+   |                      ^      ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     if let Err(()) = (try {}) {}\n+LL +     if let Err(()) = try {} {}\n+   | \n \n warning: unnecessary parentheses around `match` scrutinee expression\n   --> $DIR/try-block-unused-delims.rs:25:11\n    |\n LL |     match (try {}) {\n-   |           ^^^^^^^^ help: remove these parentheses\n+   |           ^      ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     match (try {}) {\n+LL +     match try {} {\n+   | \n \n warning: 5 warnings emitted\n "}, {"sha": "e50cc586515a626d4a64284cc57c1c60bbbc7ff7", "filename": "src/test/ui/type/type-check/issue-88577-check-fn-with-more-than-65535-arguments.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-88577-check-fn-with-more-than-65535-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-88577-check-fn-with-more-than-65535-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-88577-check-fn-with-more-than-65535-arguments.rs?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -0,0 +1,12 @@\n+macro_rules! many_args {\n+    ([$($t:tt)*]#$($h:tt)*) => {\n+        many_args!{[$($t)*$($t)*]$($h)*}\n+    };\n+    ([$($t:tt)*]) => {\n+        fn _f($($t: ()),*) {} //~ ERROR function can not have more than 65535 arguments\n+    }\n+}\n+\n+many_args!{[_]########## ######}\n+\n+fn main() {}"}, {"sha": "615fd2ccb04af04942a0d40d12aeffb7274f0a48", "filename": "src/test/ui/type/type-check/issue-88577-check-fn-with-more-than-65535-arguments.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-88577-check-fn-with-more-than-65535-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43769af69e43d0fb9770f0a392671f000595df78/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-88577-check-fn-with-more-than-65535-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-88577-check-fn-with-more-than-65535-arguments.stderr?ref=43769af69e43d0fb9770f0a392671f000595df78", "patch": "@@ -0,0 +1,13 @@\n+error: function can not have more than 65535 arguments\n+  --> $DIR/issue-88577-check-fn-with-more-than-65535-arguments.rs:6:24\n+   |\n+LL |           fn _f($($t: ()),*) {}\n+   |  ________________________^\n+LL | |     }\n+LL | | }\n+LL | |\n+LL | | many_args!{[_]########## ######}\n+   | |____________^\n+\n+error: aborting due to previous error\n+"}]}