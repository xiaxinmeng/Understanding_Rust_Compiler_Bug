{"sha": "6f91c32da68aac9956c894608bd0a85f554d98c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOTFjMzJkYTY4YWFjOTk1NmM4OTQ2MDhiZDBhODVmNTU0ZDk4YzY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-25T22:00:28Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-26T22:08:36Z"}, "message": "Fix new 'unnecessary trailing semicolon' warnings", "tree": {"sha": "d3ea4878fc6c222d1447df9c07e0b859e7f849df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3ea4878fc6c222d1447df9c07e0b859e7f849df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f91c32da68aac9956c894608bd0a85f554d98c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl/AJ2QACgkQtAh+UQ6Y\nsWRGbQ//aPfcG2nAqbt3KPZhjtN+Aqxtzt6nhi5Fb0Z79j4++3srxP9KJZKXcEiV\nxKjFEwfMBOfvgA8nDV/XVycpWr1wYddflgdlS6InvY48EScCvPxyKfe+yWKmkYJX\nNcVhNadkth2BeUZBeq1+2OhD6wr1MW8Et9pC+15WJRydiVFV4RfQsWXi7CrQmTAC\nHxbDSzHYx/i8fDlA7gd9i6R6kLSnq3avfrJ1s9uHpvq5+CLkPNfCk/01nRZk8U8q\nvJIVVLTEloeJRqBkvVfNGpwKJT0+QWjQyHWSmAAzib9M3KM8YXkQaNmnoWKgE69b\nLE3mgHKV6yIp0f0MVHKk/+Yd5pV6CjWB2PCgku0tiYsKF54+Al6q4DkqAAJw7tAB\nwUHzdesSvojEgx1uVX4r8SZtrNvFSnlQ3heZTPP/MeCe1IPpi+6PGh9gyrZJl7Ip\nbNu1VfEUuJm+FO+m5LZECaP/J68/8/Edx0Uhk+GNhdyWtFJUTW3/rPCath8pRx2B\n58se99f1Dk/+T2df5Dg5gs014ZPqtGno1mvUZLGO3NqMl/WT3wdd6ElCojf5Vy37\npHTyE88eV+wWVKg80uZvIMDOJ4kvftTRCF/41jGjvsZP7ULiQfcGzy7MSqmNs3zw\nvrpZxx3QVdiev8zOCmR34DyFkDBvaPLIzDZb0lFy9wfggR7QU0U=\n=Xkve\n-----END PGP SIGNATURE-----", "payload": "tree d3ea4878fc6c222d1447df9c07e0b859e7f849df\nparent db0d0e8c435f96bd36184c76e8bc01ecbcbc4ea3\nauthor Aaron Hill <aa1ronham@gmail.com> 1606341628 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1606428516 -0500\n\nFix new 'unnecessary trailing semicolon' warnings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f91c32da68aac9956c894608bd0a85f554d98c6", "html_url": "https://github.com/rust-lang/rust/commit/6f91c32da68aac9956c894608bd0a85f554d98c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f91c32da68aac9956c894608bd0a85f554d98c6/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db0d0e8c435f96bd36184c76e8bc01ecbcbc4ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/db0d0e8c435f96bd36184c76e8bc01ecbcbc4ea3", "html_url": "https://github.com/rust-lang/rust/commit/db0d0e8c435f96bd36184c76e8bc01ecbcbc4ea3"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "e59832a8eed5f2ceb53b5f40a5b0fc46fa049d51", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -451,7 +451,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             Inhabited,\n             ZeroValid,\n             UninitValid,\n-        };\n+        }\n         let panic_intrinsic = intrinsic.and_then(|i| match i {\n             sym::assert_inhabited => Some(AssertIntrinsic::Inhabited),\n             sym::assert_zero_valid => Some(AssertIntrinsic::ZeroValid),"}, {"sha": "676c85e4afdceda21bd13b190a4895f9b472e545", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -2345,7 +2345,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n         enum InitKind {\n             Zeroed,\n             Uninit,\n-        };\n+        }\n \n         /// Information about why a type cannot be initialized this way.\n         /// Contains an error message and optionally a span to point at."}, {"sha": "9ad9d53cd0db3512205bde954f4fe049029d5718", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -1131,7 +1131,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n         struct ProhibitOpaqueTypes<'a, 'tcx> {\n             cx: &'a LateContext<'tcx>,\n-        };\n+        }\n \n         impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n             type BreakTy = Ty<'tcx>;"}, {"sha": "7538818b8afc33cb85ab0ab0b9f73f06273d36c0", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -254,7 +254,7 @@ macro_rules! make_mir_visitor {\n                 macro_rules! basic_blocks {\n                     (mut) => (body.basic_blocks_mut().iter_enumerated_mut());\n                     () => (body.basic_blocks().iter_enumerated());\n-                };\n+                }\n                 for (bb, data) in basic_blocks!($($mutability)?) {\n                     self.visit_basic_block_data(bb, data);\n                 }\n@@ -275,7 +275,7 @@ macro_rules! make_mir_visitor {\n                 macro_rules! type_annotations {\n                     (mut) => (body.user_type_annotations.iter_enumerated_mut());\n                     () => (body.user_type_annotations.iter_enumerated());\n-                };\n+                }\n \n                 for (index, annotation) in type_annotations!($($mutability)?) {\n                     self.visit_user_type_annotation(\n@@ -909,7 +909,7 @@ macro_rules! make_mir_visitor {\n                 macro_rules! basic_blocks {\n                     (mut) => (body.basic_blocks_mut());\n                     () => (body.basic_blocks());\n-                };\n+                }\n                 let basic_block = & $($mutability)? basic_blocks!($($mutability)?)[location.block];\n                 if basic_block.statements.len() == location.statement_index {\n                     if let Some(ref $($mutability)? terminator) = basic_block.terminator {"}, {"sha": "413c9cca589d9097107c0ebb0cce9f775e1e960c", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -540,7 +540,7 @@ fn polymorphize<'tcx>(\n \n     struct PolymorphizationFolder<'tcx> {\n         tcx: TyCtxt<'tcx>,\n-    };\n+    }\n \n     impl ty::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n         fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {"}, {"sha": "ec90f063a55240fb4afcca9094b010bcbbd77eae", "filename": "compiler/rustc_mir/src/interpret/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -15,7 +15,7 @@ where\n \n     struct UsedParamsNeedSubstVisitor<'tcx> {\n         tcx: TyCtxt<'tcx>,\n-    };\n+    }\n \n     impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n         type BreakTy = ();"}, {"sha": "aa1de6d51cba2c3b47f7ddcbdaadc8ef8490bec6", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -309,7 +309,7 @@ fn well_formed_types_in_env<'tcx>(\n         InherentImpl,\n         Fn,\n         Other,\n-    };\n+    }\n \n     let node_kind = match node {\n         Node::TraitItem(item) => match item.kind {"}, {"sha": "11ca42872c523c7af23cee7c7b16bc514f146ae3", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -477,7 +477,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     struct ProhibitOpaqueVisitor<'tcx> {\n         opaque_identity_ty: Ty<'tcx>,\n         generics: &'tcx ty::Generics,\n-    };\n+    }\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Option<Ty<'tcx>>;"}, {"sha": "e19406d7a069737a2019de90db0003bad46d6952", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -919,7 +919,7 @@ fn test_from_iter_partially_drained_in_place_specialization() {\n \n #[test]\n fn test_from_iter_specialization_with_iterator_adapters() {\n-    fn assert_in_place_trait<T: InPlaceIterable>(_: &T) {};\n+    fn assert_in_place_trait<T: InPlaceIterable>(_: &T) {}\n     let src: Vec<usize> = vec![0usize; 256];\n     let srcptr = src.as_ptr();\n     let iter = src\n@@ -1198,7 +1198,7 @@ fn drain_filter_consumed_panic() {\n     struct Check {\n         index: usize,\n         drop_counts: Rc<Mutex<Vec<usize>>>,\n-    };\n+    }\n \n     impl Drop for Check {\n         fn drop(&mut self) {\n@@ -1250,7 +1250,7 @@ fn drain_filter_unconsumed_panic() {\n     struct Check {\n         index: usize,\n         drop_counts: Rc<Mutex<Vec<usize>>>,\n-    };\n+    }\n \n     impl Drop for Check {\n         fn drop(&mut self) {"}, {"sha": "23e8d1d856a30aaa4e2c7b844baea43d19b87b88", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -1182,7 +1182,7 @@ impl<'a> Formatter<'a> {\n     /// ```\n     /// use std::fmt;\n     ///\n-    /// struct Foo { nb: i32 };\n+    /// struct Foo { nb: i32 }\n     ///\n     /// impl Foo {\n     ///     fn new(nb: i32) -> Foo {"}, {"sha": "af63e1bb097b8c18e4bd2dd8507bc5947fb34b1f", "filename": "library/core/src/future/poll_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -21,7 +21,7 @@ use crate::task::{Context, Poll};\n ///\n /// let read_future = poll_fn(read_line);\n /// assert_eq!(read_future.await, \"Hello, World!\".to_owned());\n-/// # };\n+/// # }\n /// ```\n #[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n pub fn poll_fn<T, F>(f: F) -> PollFn<F>"}, {"sha": "1924720b949f84f479b9650db260c06ebb77b047", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -348,7 +348,7 @@ impl<T> MaybeUninit<T> {\n     /// ```rust,no_run\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// enum NotZero { One = 1, Two = 2 };\n+    /// enum NotZero { One = 1, Two = 2 }\n     ///\n     /// let x = MaybeUninit::<(u8, NotZero)>::zeroed();\n     /// let x = unsafe { x.assume_init() };"}, {"sha": "1970b17e2672147e474554b80227c3ca805de8d4", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -18,7 +18,7 @@ fn test() {\n         struct Pair {\n             fst: isize,\n             snd: isize,\n-        };\n+        }\n         let mut p = Pair { fst: 10, snd: 20 };\n         let pptr: *mut Pair = &mut p;\n         let iptr: *mut isize = pptr as *mut isize;"}, {"sha": "5c12a54eef1208e83fcbc63fae0ab31712d4b568", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -265,14 +265,14 @@ where\n             running_tests.remove(test);\n         }\n         timed_out\n-    };\n+    }\n \n     fn calc_timeout(running_tests: &TestMap) -> Option<Duration> {\n         running_tests.values().min().map(|next_timeout| {\n             let now = Instant::now();\n             if *next_timeout >= now { *next_timeout - now } else { Duration::new(0, 0) }\n         })\n-    };\n+    }\n \n     if concurrency == 1 {\n         while !remaining.is_empty() {"}, {"sha": "a8d00803a534a3c6cd892e202f2fca42f19cc5e5", "filename": "src/test/ui/associated-type-bounds/dyn-impl-trait-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-impl-trait-type.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -30,7 +30,7 @@ fn def_et3() -> Et3 {\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(&self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     Box::new(A)\n }\n pub fn use_et3() {"}, {"sha": "b7869e22b4a14c585a0596f60f0104284743cbb9", "filename": "src/test/ui/associated-type-bounds/dyn-lcsit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -33,7 +33,7 @@ const cdef_et3: &dyn Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(&self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     &A\n };\n pub fn use_et3() {"}, {"sha": "08f965452ef48a30e5b3941bf34f7559fc03edeb", "filename": "src/test/ui/associated-type-bounds/dyn-rpit-and-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-rpit-and-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-rpit-and-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-rpit-and-let.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -35,7 +35,7 @@ fn def_et3() -> Box<dyn Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(&self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     let x /* : Box<dyn Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>> */\n         = Box::new(A);\n     x"}, {"sha": "5364f25f89a1154061fc7b9b51183e3b03dfeada", "filename": "src/test/ui/associated-type-bounds/lcsit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -39,7 +39,7 @@ const cdef_et3: impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(&self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     let x: impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>> = A;\n     x\n };"}, {"sha": "47cadf3310bd8612c448661d189fb5b36b16915b", "filename": "src/test/ui/associated-type-bounds/rpit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Frpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Frpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Frpit.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -27,7 +27,7 @@ fn def_et3() -> impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     A\n }\n "}, {"sha": "025540ce20070b21be2ab627008b0436f022e818", "filename": "src/test/ui/associated-type-bounds/trait-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -31,7 +31,7 @@ fn def_et3() -> Et3 {\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n         fn mk(self) -> Self::As1 { 0..10 }\n-    };\n+    }\n     A\n }\n pub fn use_et3() {"}, {"sha": "575fbd33572f094f5a284faf76ab9bb5499a68fa", "filename": "src/test/ui/const-generics/min_const_generics/macro.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -15,22 +15,22 @@ impl<const N: usize> Marker<N> for Example<N> {}\n \n fn make_marker() -> impl Marker<{\n     #[macro_export]\n-    macro_rules! const_macro { () => {{ 3 }} }; inline!()\n+    macro_rules! const_macro { () => {{ 3 }} } inline!()\n }> {\n   Example::<{ const_macro!() }>\n }\n \n fn from_marker(_: impl Marker<{\n     #[macro_export]\n-    macro_rules! inline { () => {{ 3 }} }; inline!()\n+    macro_rules! inline { () => {{ 3 }} } inline!()\n }>) {}\n \n fn main() {\n   let _ok = Example::<{\n     #[macro_export]\n     macro_rules! gimme_a_const {\n       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n-    };\n+    }\n     gimme_a_const!(run)\n   }>;\n \n@@ -42,13 +42,13 @@ fn main() {\n \n   let _ok: [u8; {\n     #[macro_export]\n-    macro_rules! const_two { () => {{ 2 }} };\n+    macro_rules! const_two { () => {{ 2 }} }\n     const_two!()\n   }];\n \n   let _ok = [0; {\n     #[macro_export]\n-    macro_rules! const_three { () => {{ 3 }} };\n+    macro_rules! const_three { () => {{ 3 }} }\n     const_three!()\n   }];\n   let _ok = [0; const_three!()];"}, {"sha": "f40815fdbdbc5626ad3ccb166cf28d2c867523eb", "filename": "src/test/ui/issues/issue-10767.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fissues%2Fissue-10767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fissues%2Fissue-10767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10767.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -5,6 +5,6 @@\n \n pub fn main() {\n     fn f() {\n-    };\n+    }\n     let _: Box<fn()> = box (f as fn());\n }"}, {"sha": "a6bea38580477303c0cd61d328232d10d76fd505", "filename": "src/test/ui/issues/issue-2074.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fissues%2Fissue-2074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fissues%2Fissue-2074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2074.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -5,11 +5,11 @@\n \n pub fn main() {\n     let one = || {\n-        enum r { a };\n+        enum r { a }\n         r::a as usize\n     };\n     let two = || {\n-        enum r { a };\n+        enum r { a }\n         r::a as usize\n     };\n     one(); two();"}, {"sha": "a315981b6a69fdda98d50d7152a990088a598012", "filename": "src/test/ui/macros/macro-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fmacros%2Fmacro-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fmacros%2Fmacro-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-2.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -3,7 +3,7 @@ pub fn main() {\n \n     macro_rules! mylambda_tt {\n         ($x:ident, $body:expr) => ({\n-            fn f($x: isize) -> isize { return $body; };\n+            fn f($x: isize) -> isize { return $body; }\n             f\n         })\n     }"}, {"sha": "6c011c897da50ffd7e6c397ff74a334aa3ddc83d", "filename": "src/test/ui/macros/macro-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fmacros%2Fmacro-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fmacros%2Fmacro-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -8,7 +8,7 @@ mod m {\n \n macro_rules! foo {\n     ($p:path) => ({\n-        fn f() -> $p { 10 };\n+        fn f() -> $p { 10 }\n         f()\n     })\n }"}, {"sha": "111b9ba94773fb2913dc100785a436d976226d16", "filename": "src/test/ui/structs-enums/nested-enum-same-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fstructs-enums%2Fnested-enum-same-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fstructs-enums%2Fnested-enum-same-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fnested-enum-same-names.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -17,10 +17,10 @@ as it does not include the method name in the symbol name.\n pub struct Foo;\n impl Foo {\n     pub fn foo() {\n-        enum Panic { Common };\n+        enum Panic { Common }\n     }\n     pub fn bar() {\n-        enum Panic { Common };\n+        enum Panic { Common }\n     }\n }\n "}, {"sha": "90f56d5fa71d164324e220f0647dda9216a189d0", "filename": "src/test/ui/try-is-identifier-edition2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Ftry-is-identifier-edition2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Ftry-is-identifier-edition2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-is-identifier-edition2015.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -5,7 +5,7 @@\n \n fn main() {\n     let try = 2;\n-    struct try { try: u32 };\n+    struct try { try: u32 }\n     let try: try = try { try };\n     assert_eq!(try.try, 2);\n }"}, {"sha": "fb87d8ea0ba7f0a52df9e639785492a6205f2289", "filename": "src/test/ui/zero-sized/zero-size-type-destructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fzero-sized%2Fzero-size-type-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f91c32da68aac9956c894608bd0a85f554d98c6/src%2Ftest%2Fui%2Fzero-sized%2Fzero-size-type-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fzero-sized%2Fzero-size-type-destructors.rs?ref=6f91c32da68aac9956c894608bd0a85f554d98c6", "patch": "@@ -10,7 +10,7 @@ pub fn foo() {\n         fn drop(&mut self) {\n           unsafe { destructions -= 1 };\n         }\n-    };\n+    }\n \n     let _x = [Foo, Foo, Foo];\n }"}]}