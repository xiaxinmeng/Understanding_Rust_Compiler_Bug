{"sha": "c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1Mjk1YWM2NGE4ZjJjN2FlZTljZGQxM2I4ZmUwMGI4MmFmZjg0MzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-07T01:42:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-07T01:42:15Z"}, "message": "Auto merge of #61408 - varkor:fmin-fmax-llvm-intrinsics, r=alexcrichton\n\nUse LLVM intrinsics for floating-point min/max\n\nResurrection of https://github.com/rust-lang/rust/pull/46926, now that the optimisation issues are fixed. I've confirmed locally that https://github.com/rust-lang/rust/pull/61384 solves the issues.\n\nI'm not sure if we're allowed to move the `min`/`max` methods from libcore to libstd: I can't quite tell what the status is from https://github.com/rust-lang/rust/issues/50145. However, this is necessary to use the intrinsics.\n\nFixes https://github.com/rust-lang/rust/issues/18384.\n\nr? @SimonSapin\ncc @rkruppe @nikic", "tree": {"sha": "5eca448a6718302f8bec87fbff6da04a83a87b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eca448a6718302f8bec87fbff6da04a83a87b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "html_url": "https://github.com/rust-lang/rust/commit/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eeb567a27eba18420a620ca7d0c007e29d8bc0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eeb567a27eba18420a620ca7d0c007e29d8bc0c", "html_url": "https://github.com/rust-lang/rust/commit/5eeb567a27eba18420a620ca7d0c007e29d8bc0c"}, {"sha": "0e5edc9f1611e5c13864e4f66a9e69ce7776ea91", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5edc9f1611e5c13864e4f66a9e69ce7776ea91", "html_url": "https://github.com/rust-lang/rust/commit/0e5edc9f1611e5c13864e4f66a9e69ce7776ea91"}], "stats": {"total": 159, "additions": 102, "deletions": 57}, "files": [{"sha": "719321574435af1d9ff492a329211905b706a005", "filename": "Cargo.lock", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "patch": "@@ -25,7 +25,7 @@ dependencies = [\n name = \"alloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -118,7 +118,7 @@ dependencies = [\n  \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"backtrace-sys 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n@@ -130,7 +130,7 @@ version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -357,7 +357,7 @@ name = \"cfg-if\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -486,7 +486,7 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.15\"\n+version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -768,7 +768,7 @@ name = \"dlmalloc\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -934,7 +934,7 @@ name = \"fortanix-sgx-abi\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -1095,7 +1095,7 @@ name = \"hashbrown\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-alloc 1.0.0\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -1803,7 +1803,7 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1813,7 +1813,7 @@ name = \"panic_unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unwind 0.0.0\",\n@@ -1998,7 +1998,7 @@ name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2518,7 +2518,7 @@ name = \"rustc-demangle\"\n version = \"0.1.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -2646,7 +2646,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2878,7 +2878,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2941,7 +2941,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3060,7 +3060,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3338,7 +3338,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"backtrace 0.3.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"dlmalloc 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fortanix-sgx-abi 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3936,7 +3936,7 @@ name = \"unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -4149,7 +4149,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0aa3473e85a3161b59845d6096b289bb577874cafeaf75ea1b1beaa6572c7fc\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\n-\"checksum compiler_builtins 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e899b947d7e71c3d35c0b6194d64025b84946640510e215090c815b20828964e\"\n+\"checksum compiler_builtins 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e79ed19793c99771b386d76e08c3419409bb3d418b81a8b8afc73524247461cf\"\n \"checksum compiletest_rs 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f40ecc9332b68270998995c00f8051ee856121764a0d3230e64c9efd059d27b6\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \"checksum core-foundation 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e2640d6d0bf22e82bed1b73c6aef8d5dd31e5abe6666c57e6d45e2649f4f887\""}, {"sha": "b609af16ffe5bd2ae51abbe7aeb9a7bae6d29252", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "patch": "@@ -1051,6 +1051,19 @@ extern \"rust-intrinsic\" {\n     /// Returns the absolute value of an `f64`.\n     pub fn fabsf64(x: f64) -> f64;\n \n+    /// Returns the minimum of two `f32` values.\n+    #[cfg(not(bootstrap))]\n+    pub fn minnumf32(x: f32, y: f32) -> f32;\n+    /// Returns the minimum of two `f64` values.\n+    #[cfg(not(bootstrap))]\n+    pub fn minnumf64(x: f64, y: f64) -> f64;\n+    /// Returns the maximum of two `f32` values.\n+    #[cfg(not(bootstrap))]\n+    pub fn maxnumf32(x: f32, y: f32) -> f32;\n+    /// Returns the maximum of two `f64` values.\n+    #[cfg(not(bootstrap))]\n+    pub fn maxnumf64(x: f64, y: f64) -> f64;\n+\n     /// Copies the sign from `y` to `x` for `f32` values.\n     pub fn copysignf32(x: f32, y: f32) -> f32;\n     /// Copies the sign from `y` to `x` for `f64` values.\n@@ -1561,3 +1574,47 @@ pub unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n     real_intrinsics::write_bytes(dst, val, count)\n }\n+\n+// Simple bootstrap implementations of minnum/maxnum for stage0 compilation.\n+\n+/// Returns the minimum of two `f32` values.\n+#[cfg(bootstrap)]\n+pub fn minnumf32(x: f32, y: f32) -> f32 {\n+    // IEEE754 says: minNum(x, y) is the canonicalized number x if x < y, y if y < x, the\n+    // canonicalized number if one operand is a number and the other a quiet NaN. Otherwise it\n+    // is either x or y, canonicalized (this means results might differ among implementations).\n+    // When either x or y is a signaling NaN, then the result is according to 6.2.\n+    //\n+    // Since we do not support sNaN in Rust yet, we do not need to handle them.\n+    // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n+    // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n+    (if x < y || y != y { x } else { y }) * 1.0\n+}\n+\n+/// Returns the minimum of two `f64` values.\n+#[cfg(bootstrap)]\n+pub fn minnumf64(x: f64, y: f64) -> f64 {\n+    // Identical to the `f32` case.\n+    (if x < y || y != y { x } else { y }) * 1.0\n+}\n+\n+/// Returns the maximum of two `f32` values.\n+#[cfg(bootstrap)]\n+pub fn maxnumf32(x: f32, y: f32) -> f32 {\n+    // IEEE754 says: maxNum(x, y) is the canonicalized number y if x < y, x if y < x, the\n+    // canonicalized number if one operand is a number and the other a quiet NaN. Otherwise it\n+    // is either x or y, canonicalized (this means results might differ among implementations).\n+    // When either x or y is a signaling NaN, then the result is according to 6.2.\n+    //\n+    // Since we do not support sNaN in Rust yet, we do not need to handle them.\n+    // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n+    // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n+    (if x < y || x != x { y } else { x }) * 1.0\n+}\n+\n+/// Returns the maximum of two `f64` values.\n+#[cfg(bootstrap)]\n+pub fn maxnumf64(x: f64, y: f64) -> f64 {\n+    // Identical to the `f32` case.\n+    (if x < y || x != x { y } else { x }) * 1.0\n+}"}, {"sha": "0bcd371b528e43b5a0bd1a235cc36f8d9e98f35f", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "patch": "@@ -7,6 +7,9 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[cfg(not(test))]\n+use crate::intrinsics;\n+\n use crate::mem;\n use crate::num::FpCategory;\n \n@@ -372,15 +375,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn max(self, other: f32) -> f32 {\n-        // IEEE754 says: maxNum(x, y) is the canonicalized number y if x < y, x if y < x, the\n-        // canonicalized number if one operand is a number and the other a quiet NaN. Otherwise it\n-        // is either x or y, canonicalized (this means results might differ among implementations).\n-        // When either x or y is a signalingNaN, then the result is according to 6.2.\n-        //\n-        // Since we do not support sNaN in Rust yet, we do not need to handle them.\n-        // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n-        // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n-        (if self.is_nan() || self < other { other } else { self }) * 1.0\n+        intrinsics::maxnumf32(self, other)\n     }\n \n     /// Returns the minimum of the two numbers.\n@@ -396,15 +391,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn min(self, other: f32) -> f32 {\n-        // IEEE754 says: minNum(x, y) is the canonicalized number x if x < y, y if y < x, the\n-        // canonicalized number if one operand is a number and the other a quiet NaN. Otherwise it\n-        // is either x or y, canonicalized (this means results might differ among implementations).\n-        // When either x or y is a signalingNaN, then the result is according to 6.2.\n-        //\n-        // Since we do not support sNaN in Rust yet, we do not need to handle them.\n-        // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n-        // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n-        (if other.is_nan() || self < other { self } else { other }) * 1.0\n+        intrinsics::minnumf32(self, other)\n     }\n \n     /// Raw transmutation to `u32`."}, {"sha": "4d4a2c9c5a97cc7c63cd642ae25ea02125b98469", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "patch": "@@ -7,6 +7,9 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[cfg(not(test))]\n+use crate::intrinsics;\n+\n use crate::mem;\n use crate::num::FpCategory;\n \n@@ -385,15 +388,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn max(self, other: f64) -> f64 {\n-        // IEEE754 says: maxNum(x, y) is the canonicalized number y if x < y, x if y < x, the\n-        // canonicalized number if one operand is a number and the other a quiet NaN. Otherwise it\n-        // is either x or y, canonicalized (this means results might differ among implementations).\n-        // When either x or y is a signalingNaN, then the result is according to 6.2.\n-        //\n-        // Since we do not support sNaN in Rust yet, we do not need to handle them.\n-        // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n-        // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n-        (if self.is_nan() || self < other { other } else { self }) * 1.0\n+        intrinsics::maxnumf64(self, other)\n     }\n \n     /// Returns the minimum of the two numbers.\n@@ -409,15 +404,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn min(self, other: f64) -> f64 {\n-        // IEEE754 says: minNum(x, y) is the canonicalized number x if x < y, y if y < x, the\n-        // canonicalized number if one operand is a number and the other a quiet NaN. Otherwise it\n-        // is either x or y, canonicalized (this means results might differ among implementations).\n-        // When either x or y is a signalingNaN, then the result is according to 6.2.\n-        //\n-        // Since we do not support sNaN in Rust yet, we do not need to handle them.\n-        // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n-        // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n-        (if other.is_nan() || self < other { self } else { other }) * 1.0\n+        intrinsics::minnumf64(self, other)\n     }\n \n     /// Raw transmutation to `u64`."}, {"sha": "2bc46334555ec88eaa0ce628b94611c28a0d69e1", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "patch": "@@ -645,6 +645,11 @@ impl CodegenCx<'b, 'tcx> {\n         ifn!(\"llvm.fabs.v4f64\", fn(t_v4f64) -> t_v4f64);\n         ifn!(\"llvm.fabs.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n+        ifn!(\"llvm.minnum.f32\", fn(t_f32, t_f32) -> t_f32);\n+        ifn!(\"llvm.minnum.f64\", fn(t_f64, t_f64) -> t_f64);\n+        ifn!(\"llvm.maxnum.f32\", fn(t_f32, t_f32) -> t_f32);\n+        ifn!(\"llvm.maxnum.f64\", fn(t_f64, t_f64) -> t_f64);\n+\n         ifn!(\"llvm.floor.f32\", fn(t_f32) -> t_f32);\n         ifn!(\"llvm.floor.v2f32\", fn(t_v2f32) -> t_v2f32);\n         ifn!(\"llvm.floor.v4f32\", fn(t_v4f32) -> t_v4f32);"}, {"sha": "875f1d0940a3a1a740aafab96f8470abf1d5f425", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "patch": "@@ -55,6 +55,10 @@ fn get_simple_intrinsic(cx: &CodegenCx<'ll, '_>, name: &str) -> Option<&'ll Valu\n         \"fmaf64\" => \"llvm.fma.f64\",\n         \"fabsf32\" => \"llvm.fabs.f32\",\n         \"fabsf64\" => \"llvm.fabs.f64\",\n+        \"minnumf32\" => \"llvm.minnum.f32\",\n+        \"minnumf64\" => \"llvm.minnum.f64\",\n+        \"maxnumf32\" => \"llvm.maxnum.f32\",\n+        \"maxnumf64\" => \"llvm.maxnum.f64\",\n         \"copysignf32\" => \"llvm.copysign.f32\",\n         \"copysignf64\" => \"llvm.copysign.f64\",\n         \"floorf32\" => \"llvm.floor.f32\","}, {"sha": "11598ad4c9c02dcbbe4f4d4179d05f12089bd107", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "patch": "@@ -70,7 +70,8 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n         \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n         \"saturating_add\" | \"saturating_sub\" |\n         \"rotate_left\" | \"rotate_right\" |\n-        \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" | \"bitreverse\"\n+        \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" | \"bitreverse\" |\n+        \"minnumf32\" | \"minnumf64\" | \"maxnumf32\" | \"maxnumf64\"\n         => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n     }\n@@ -272,6 +273,10 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n             \"fabsf32\"      => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n             \"fabsf64\"      => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"minnumf32\"    => (0, vec![ tcx.types.f32, tcx.types.f32 ], tcx.types.f32),\n+            \"minnumf64\"    => (0, vec![ tcx.types.f64, tcx.types.f64 ], tcx.types.f64),\n+            \"maxnumf32\"    => (0, vec![ tcx.types.f32, tcx.types.f32 ], tcx.types.f32),\n+            \"maxnumf64\"    => (0, vec![ tcx.types.f64, tcx.types.f64 ], tcx.types.f64),\n             \"copysignf32\"  => (0, vec![ tcx.types.f32, tcx.types.f32 ], tcx.types.f32),\n             \"copysignf64\"  => (0, vec![ tcx.types.f64, tcx.types.f64 ], tcx.types.f64),\n             \"floorf32\"     => (0, vec![ tcx.types.f32 ], tcx.types.f32),"}, {"sha": "9abad83fdb0399694f1d681d3439090251ca4ca9", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=c5295ac64a8f2c7aee9cdd13b8fe00b82aff8435", "patch": "@@ -19,7 +19,7 @@ panic_unwind = { path = \"../libpanic_unwind\", optional = true }\n panic_abort = { path = \"../libpanic_abort\" }\n core = { path = \"../libcore\" }\n libc = { version = \"0.2.51\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.15\" }\n+compiler_builtins = { version = \"0.1.16\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n hashbrown = { version = \"0.4.0\", features = ['rustc-dep-of-std'] }"}]}