{"sha": "061d2c2f7791f18538c42d043fb320f0316a0ed6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MWQyYzJmNzc5MWYxODUzOGM0MmQwNDNmYjMyMGYwMzE2YTBlZDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-08T23:38:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-08T23:58:08Z"}, "message": "Make task_sleep an intrinsic.", "tree": {"sha": "281c4cc15c726197c74fb2152d90045243203115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/281c4cc15c726197c74fb2152d90045243203115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/061d2c2f7791f18538c42d043fb320f0316a0ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/061d2c2f7791f18538c42d043fb320f0316a0ed6", "html_url": "https://github.com/rust-lang/rust/commit/061d2c2f7791f18538c42d043fb320f0316a0ed6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/061d2c2f7791f18538c42d043fb320f0316a0ed6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f82de8178ca5f7ed7a3803fdc41f84fc97664b", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f82de8178ca5f7ed7a3803fdc41f84fc97664b", "html_url": "https://github.com/rust-lang/rust/commit/68f82de8178ca5f7ed7a3803fdc41f84fc97664b"}], "stats": {"total": 323, "additions": 189, "deletions": 134}, "files": [{"sha": "757df61596c75cf2fc5d8bc50621f277589cbeb6", "filename": "src/etc/gen-intrinsics", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Fetc%2Fgen-intrinsics", "raw_url": "https://github.com/rust-lang/rust/raw/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Fetc%2Fgen-intrinsics", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgen-intrinsics?ref=061d2c2f7791f18538c42d043fb320f0316a0ed6", "patch": "@@ -6,14 +6,21 @@\n \n for ARCH in i386 x86_64\n do\n-    clang++ -emit-llvm -S -arch $ARCH -O3 -Isrc/rt/isaac -Isrc/rt/uthash \\\n+    if [ $ARCH = \"i386\" ]\n+    then\n+\tBITS=32\n+    else\n+\tBITS=64\n+    fi\n+\n+    clang++ -emit-llvm -S -m$BITS -O3 -Isrc/rt/isaac -Isrc/rt/uthash \\\n         -Isrc/rt/arch/$ARCH -fno-stack-protector \\\n         -o src/rt/intrinsics/intrinsics.$ARCH.ll.in \\\n         src/rt/intrinsics/intrinsics.cpp\n-    sed -i \"\" \\\n+    sed -i \\\n         -e 's/^target datalayout =/; target datalayout =/' \\\n         src/rt/intrinsics/intrinsics.$ARCH.ll.in\n-    sed -i \"\" \\\n+    sed -i \\\n         -e 's/^target triple = \"[^\"]*\"/target triple = \"@CFG_TARGET_TRIPLE@\"/' \\\n         src/rt/intrinsics/intrinsics.$ARCH.ll.in\n done\n\\ No newline at end of file"}, {"sha": "a9d6ae270da082b6ec0195304c299b45b2b3bfb2", "filename": "src/lib/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=061d2c2f7791f18538c42d043fb320f0316a0ed6", "patch": "@@ -50,7 +50,7 @@ export spawn;\n export spawn_notify;\n export spawn_joinable;\n \n-native \"cdecl\" mod rustrt {\n+native \"rust-intrinsic\" mod rustrt {\n     // these must run on the Rust stack so that they can swap stacks etc:\n     fn task_sleep(time_in_us: uint);\n }"}, {"sha": "9e39a0a15a4f300ab9d86e4e8b967c0adb3b4c4e", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=061d2c2f7791f18538c42d043fb320f0316a0ed6", "patch": "@@ -9,6 +9,12 @@\n extern \"C\" CDECL void\n upcall_fail(char const *expr, char const *file, size_t line);\n \n+extern \"C\" CDECL void\n+port_recv(uintptr_t *dptr, rust_port *port);\n+\n+extern \"C\" CDECL void\n+rust_task_sleep(size_t time_in_us);\n+\n extern \"C\" void\n rust_intrinsic_vec_len(rust_task *task, size_t *retptr, type_desc *ty,\n                        rust_vec **vp)\n@@ -54,3 +60,8 @@ rust_intrinsic_get_type_desc(rust_task *task, void **retptr,\n     *(type_desc**)retptr = ty;\n }\n \n+extern \"C\" void\n+rust_intrinsic_task_sleep(rust_task *_task, void **retptr,\n+\t\t\t  size_t time_in_us) {\n+  rust_task_sleep(time_in_us);\n+}"}, {"sha": "f62ad352ee6ab8e583c82ac657c82b2f32e30e6a", "filename": "src/rt/intrinsics/intrinsics.i386.ll.in", "status": "modified", "additions": 74, "deletions": 56, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in?ref=061d2c2f7791f18538c42d043fb320f0316a0ed6", "patch": "@@ -1,93 +1,99 @@\n ; ModuleID = 'src/rt/intrinsics/intrinsics.cpp'\n-; target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32\"\n+; target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:32:32-n8:16:32-S128\"\n target triple = \"@CFG_TARGET_TRIPLE@\"\n \n-%0 = type { i32, %\"struct.memory_region::alloc_header\"**, i32 }\n-%1 = type { i32, %struct.rust_scheduler**, i32 }\n-%2 = type { %\"struct.hash_map<long, rust_task *>::map_entry\"* }\n-%3 = type { %struct.rust_task*, i32, i32, %class.rust_chan** }\n-%class.array_list = type { i32, %struct.rust_task**, i32 }\n-%class.circular_buffer = type { %class.rust_kernel*, i32, i32, i32, i32, i8* }\n+%struct.rust_task = type { %struct.rust_task_user, i32, %class.context, %struct.stk_seg*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, %class.timer, i32*, %class.array_list.1, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n+%struct.rust_task_user = type { i32, i32, %struct.chan_handle, i32 }\n+%struct.chan_handle = type { i32, i32 }\n %class.context = type { %struct.registers_t, %class.context* }\n-%\"class.debug::task_debug_info\" = type { %\"class.std::map\" }\n-%class.hash_map = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n-%class.indexed_list = type { i32 (...)**, %class.array_list }\n-%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_mutex_t, %struct._opaque_pthread_t*, i8, i8 }\n-%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %0, i8, i8, %class.lock_and_signal }\n-%class.ptr_vec = type { %struct.rust_task*, i32, i32, %struct.rust_token** }\n-%class.rust_chan = type { i32, %class.rust_kernel*, %struct.rust_task*, %class.rust_port*, i32, %class.circular_buffer }\n-%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i32 }\n-%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %1, %struct.randctx, i32, %2, i32, i32, i32, %struct.rust_env* }\n+%struct.registers_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32 }\n+%struct.stk_seg = type { %struct.stk_seg*, i32, i32, i32, [0 x i8] }\n+%struct.rust_scheduler = type { %class.rust_thread, i32, i32, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i32, %union.pthread_attr_t, %struct.rust_env*, %class.context }\n+%class.rust_thread = type { i32 (...)**, i8, i32 }\n %class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8 }\n-%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n-%class.rust_port = type { i32, i32, %class.rust_kernel*, %struct.rust_task*, %class.rust_chan*, i32, %class.ptr_vec, %3, %class.lock_and_signal }\n %class.rust_srv = type { i32 (...)**, %struct.rust_env*, %class.memory_region }\n-%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n+%struct.rust_env = type { i32, i32, i8*, i8, i8, i8* }\n+%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %class.array_list, i8, i8, %class.lock_and_signal }\n+%class.array_list = type { i32, %\"struct.memory_region::alloc_header\"**, i32 }\n+%\"struct.memory_region::alloc_header\" = type { i32, i32, i8*, i32, [0 x i8] }\n+%class.lock_and_signal = type { i32 (...)**, %union.pthread_cond_t, %union.pthread_mutex_t, i32, i8, i8 }\n+%union.pthread_cond_t = type { %struct.anon, [4 x i8] }\n+%struct.anon = type { i32, i32, i64, i64, i64, i8*, i32, i32 }\n+%union.pthread_mutex_t = type { %\"struct.<anonymous union>::__pthread_mutex_s\" }\n+%\"struct.<anonymous union>::__pthread_mutex_s\" = type { i32, i32, i32, i32, i32, %union.anon }\n+%union.anon = type { i32 }\n %class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n-%class.rust_thread = type { i32 (...)**, i8, %struct._opaque_pthread_t* }\n-%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n-%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n-%class.timer = type { i32 (...)**, i64, i64 }\n-%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n+%class.indexed_list = type { i32 (...)**, %class.array_list.1 }\n+%class.array_list.1 = type { i32, %struct.rust_task**, i32 }\n+%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i32 }\n+%struct.type_desc = type { %struct.type_desc**, i32, i32, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i32, void (i8*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i32, i32, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n+%struct.rust_shape_tables = type { i8*, i8* }\n %struct.UT_hash_handle = type { %struct.UT_hash_table*, i8*, i8*, %struct.UT_hash_handle*, %struct.UT_hash_handle*, i8*, i32, i32 }\n %struct.UT_hash_table = type { %struct.UT_hash_bucket*, i32, i32, i32, %struct.UT_hash_handle*, i32, i32, i32, i32, i32 }\n-%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }\n-%struct._opaque_pthread_attr_t = type { i32, [36 x i8] }\n-%struct._opaque_pthread_cond_t = type { i32, [24 x i8] }\n-%struct._opaque_pthread_mutex_t = type { i32, [40 x i8] }\n-%struct._opaque_pthread_t = type { i32, %struct.__darwin_pthread_handler_rec*, [596 x i8] }\n-%struct.chan_handle = type { i32, i32 }\n-%\"struct.hash_map<long, rust_port *>::map_entry\" = type opaque\n-%\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n-%\"struct.memory_region::alloc_header\" = type { i32, i32, i8*, i32, [0 x i8] }\n+%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n %struct.randctx = type { i32, [256 x i32], [256 x i32], i32, i32, i32 }\n-%struct.registers_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32 }\n+%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %class.array_list.3, %struct.randctx, i32, %class.hash_map, i32, i32, i32, %struct.rust_env* }\n+%class.array_list.3 = type { i32, %struct.rust_scheduler**, i32 }\n+%class.hash_map = type { %\"struct.hash_map<int, rust_task *>::map_entry\"* }\n+%\"struct.hash_map<int, rust_task *>::map_entry\" = type opaque\n+%union.pthread_attr_t = type { i32, [32 x i8] }\n %struct.rust_cond = type { i8 }\n-%struct.rust_env = type { i32, i32, i8*, i8, i8, i8* }\n+%class.timer = type { i32 (...)**, i64, i64 }\n+%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n+%class.hash_map.4 = type { %\"struct.hash_map<int, rust_port *>::map_entry\"* }\n+%\"struct.hash_map<int, rust_port *>::map_entry\" = type opaque\n+%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n %struct.rust_obstack_chunk = type { %struct.rust_obstack_chunk*, i32, i32, i32, [0 x i8] }\n-%struct.rust_scheduler = type { %class.rust_thread, i32, i32, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i32, %struct._opaque_pthread_attr_t, %struct.rust_env*, %class.context }\n-%struct.rust_shape_tables = type { i8*, i8* }\n-%struct.rust_task = type { %struct.rust_task_user, i32, %class.context, %struct.rust_vec*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, %class.timer, i32*, %class.array_list, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n-%struct.rust_task_user = type { i32, i32, %struct.chan_handle, i32 }\n-%struct.rust_token = type opaque\n-%struct.rust_vec = type { i32, i32, [0 x i8] }\n-%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %struct.rust_cond, %\"struct.std::_Rb_tree_node_base\", i32 }\n+%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n+%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i32 }\n+%\"struct.std::less\" = type { i8 }\n %\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n-%struct.type_desc = type { %struct.type_desc**, i32, i32, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i32, void (i8*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i32, i32, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n+%\"class.debug::task_debug_info\" = type { %\"class.std::map.5\" }\n+%\"class.std::map.5\" = type { %\"class.std::_Rb_tree.6\" }\n+%\"class.std::_Rb_tree.6\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i32 }\n+%struct.rust_vec = type { i32, i32, [0 x i8] }\n+%class.rust_port = type { i32, i32, %class.rust_kernel*, %struct.rust_task*, %class.rust_chan*, i32, %class.ptr_vec, %class.ptr_vec.13, %class.lock_and_signal }\n+%class.rust_chan = type { i32, %class.rust_kernel*, %struct.rust_task*, %class.rust_port*, i32, %class.circular_buffer }\n+%class.circular_buffer = type { %class.rust_kernel*, i32, i32, i32, i32, i8* }\n+%class.ptr_vec = type { %struct.rust_task*, i32, i32, %struct.rust_token** }\n+%struct.rust_token = type opaque\n+%class.ptr_vec.13 = type { %struct.rust_task*, i32, i32, %class.rust_chan** }\n \n-@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\"\n-@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\"\n+@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\", align 1\n+@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\", align 1\n \n define void @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, i32* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n-  %1 = load %struct.rust_vec** %vp, align 4\n+  %1 = load %struct.rust_vec** %vp, align 4, !tbaa !0\n   %2 = getelementptr inbounds %struct.rust_vec* %1, i32 0, i32 0\n-  %3 = load i32* %2, align 4\n+  %3 = load i32* %2, align 4, !tbaa !3\n   %4 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %5 = load i32* %4, align 4\n+  %5 = load i32* %4, align 4, !tbaa !3\n   %6 = udiv i32 %3, %5\n-  store i32 %6, i32* %retptr, align 4\n+  store i32 %6, i32* %retptr, align 4, !tbaa !3\n   ret void\n }\n \n define void @rust_intrinsic_ptr_offset(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %ptr, i32 %count) nounwind {\n   %1 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %2 = load i32* %1, align 4\n+  %2 = load i32* %1, align 4, !tbaa !3\n   %3 = mul i32 %2, %count\n   %4 = getelementptr inbounds i8* %ptr, i32 %3\n-  store i8* %4, i8** %retptr, align 4\n+  store i8* %4, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n define void @rust_intrinsic_cast(%struct.rust_task* nocapture %task, i8* nocapture %retptr, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n   %1 = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1\n-  %2 = load i32* %1, align 4\n+  %2 = load i32* %1, align 4, !tbaa !3\n   %3 = getelementptr inbounds %struct.type_desc* %t2, i32 0, i32 1\n-  %4 = load i32* %3, align 4\n+  %4 = load i32* %3, align 4, !tbaa !3\n   %5 = icmp eq i32 %2, %4\n   br i1 %5, label %7, label %6\n \n ; <label>:6                                       ; preds = %0\n-  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i32 0, i32 0), i32 32)\n+  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i32 0, i32 0), i32 38)\n   br label %8\n \n ; <label>:7                                       ; preds = %0\n@@ -103,7 +109,7 @@ declare void @upcall_fail(i8*, i8*, i32)\n declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind\n \n define void @rust_intrinsic_addr_of(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n-  store i8* %valptr, i8** %retptr, align 4\n+  store i8* %valptr, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n@@ -117,6 +123,18 @@ declare void @port_recv(i32*, %class.rust_port*)\n \n define void @rust_intrinsic_get_type_desc(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* %ty) nounwind {\n   %ty.c = bitcast %struct.type_desc* %ty to i8*\n-  store i8* %ty.c, i8** %retptr, align 4\n+  store i8* %ty.c, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n+\n+define void @rust_intrinsic_task_sleep(%struct.rust_task* nocapture %_task, i8** nocapture %retptr, i32 %time_in_us) {\n+  tail call void @rust_task_sleep(i32 %time_in_us)\n+  ret void\n+}\n+\n+declare void @rust_task_sleep(i32)\n+\n+!0 = metadata !{metadata !\"any pointer\", metadata !1}\n+!1 = metadata !{metadata !\"omnipotent char\", metadata !2}\n+!2 = metadata !{metadata !\"Simple C/C++ TBAA\", null}\n+!3 = metadata !{metadata !\"int\", metadata !1}"}, {"sha": "a99870bc221fd736198b3fcb2c4effe07f1e6c6f", "filename": "src/rt/intrinsics/intrinsics.x86_64.ll.in", "status": "modified", "additions": 80, "deletions": 62, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in?ref=061d2c2f7791f18538c42d043fb320f0316a0ed6", "patch": "@@ -1,93 +1,99 @@\n ; ModuleID = 'src/rt/intrinsics/intrinsics.cpp'\n-; target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n+; target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\"\n target triple = \"@CFG_TARGET_TRIPLE@\"\n \n-%0 = type { i64, %\"struct.memory_region::alloc_header\"**, i64 }\n-%1 = type { i64, %struct.rust_scheduler**, i64 }\n-%2 = type { %\"struct.hash_map<long, rust_task *>::map_entry\"* }\n-%3 = type { %struct.rust_task*, i64, i64, %class.rust_chan** }\n-%class.array_list = type { i64, %struct.rust_task**, i64 }\n-%class.circular_buffer = type { %class.rust_kernel*, i64, i64, i64, i64, i8* }\n+%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i64, %class.timer, i64*, %class.array_list.1, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n+%struct.rust_task_user = type { i64, i32, %struct.chan_handle, i64 }\n+%struct.chan_handle = type { i64, i64 }\n %class.context = type { %struct.registers_t, %class.context* }\n-%\"class.debug::task_debug_info\" = type { %\"class.std::map\" }\n-%class.hash_map = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n-%class.indexed_list = type { i32 (...)**, %class.array_list }\n-%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_attr_t, %struct._opaque_pthread_t*, i8, i8 }\n-%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %0, i8, i8, %class.lock_and_signal }\n-%class.ptr_vec = type { %struct.rust_task*, i64, i64, %struct.rust_token** }\n-%class.rust_chan = type { i64, %class.rust_kernel*, %struct.rust_task*, %class.rust_port*, i64, %class.circular_buffer }\n-%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i64 }\n-%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %1, %struct.randctx, i64, %2, i64, i32, i32, %struct.rust_env* }\n+%struct.registers_t = type { [7 x i64], [6 x i64], i64 }\n+%struct.stk_seg = type { %struct.stk_seg*, i64, i32, [0 x i8] }\n+%struct.rust_scheduler = type { %class.rust_thread, i64, i64, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i64, %union.pthread_attr_t, %struct.rust_env*, %class.context }\n+%class.rust_thread = type { i32 (...)**, i8, i64 }\n %class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8 }\n-%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n-%class.rust_port = type { i64, i64, %class.rust_kernel*, %struct.rust_task*, %class.rust_chan*, i64, %class.ptr_vec, %3, %class.lock_and_signal }\n %class.rust_srv = type { i32 (...)**, %struct.rust_env*, %class.memory_region }\n-%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n+%struct.rust_env = type { i64, i64, i8*, i8, i8, i8* }\n+%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %class.array_list, i8, i8, %class.lock_and_signal }\n+%class.array_list = type { i64, %\"struct.memory_region::alloc_header\"**, i64 }\n+%\"struct.memory_region::alloc_header\" = type { i32, i32, i8*, i32, [0 x i8] }\n+%class.lock_and_signal = type { i32 (...)**, %union.pthread_cond_t, %union.pthread_mutex_t, i64, i8, i8 }\n+%union.pthread_cond_t = type { %struct.anon }\n+%struct.anon = type { i32, i32, i64, i64, i64, i8*, i32, i32 }\n+%union.pthread_mutex_t = type { %\"struct.<anonymous union>::__pthread_mutex_s\" }\n+%\"struct.<anonymous union>::__pthread_mutex_s\" = type { i32, i32, i32, i32, i32, i32, %struct.__pthread_internal_list }\n+%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }\n %class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n-%class.rust_thread = type { i32 (...)**, i8, %struct._opaque_pthread_t* }\n-%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n-%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n-%class.timer = type { i32 (...)**, i64, i64 }\n-%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n+%class.indexed_list = type { i32 (...)**, %class.array_list.1 }\n+%class.array_list.1 = type { i64, %struct.rust_task**, i64 }\n+%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i64 }\n+%struct.type_desc = type { %struct.type_desc**, i64, i64, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i64, void (i8*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i64, i64, %struct.UT_hash_handle, i64, [0 x %struct.type_desc*] }\n+%struct.rust_shape_tables = type { i8*, i8* }\n %struct.UT_hash_handle = type { %struct.UT_hash_table*, i8*, i8*, %struct.UT_hash_handle*, %struct.UT_hash_handle*, i8*, i32, i32 }\n %struct.UT_hash_table = type { %struct.UT_hash_bucket*, i32, i32, i32, %struct.UT_hash_handle*, i64, i32, i32, i32, i32 }\n-%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }\n-%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }\n-%struct._opaque_pthread_cond_t = type { i64, [40 x i8] }\n-%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [1168 x i8] }\n-%struct.chan_handle = type { i64, i64 }\n-%\"struct.hash_map<long, rust_port *>::map_entry\" = type opaque\n-%\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n-%\"struct.memory_region::alloc_header\" = type { i32, i32, i8*, i32, [0 x i8] }\n+%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n %struct.randctx = type { i64, [256 x i64], [256 x i64], i64, i64, i64 }\n-%struct.registers_t = type { [7 x i64], [6 x i64], i64 }\n+%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %class.array_list.3, %struct.randctx, i64, %class.hash_map, i64, i32, i32, %struct.rust_env* }\n+%class.array_list.3 = type { i64, %struct.rust_scheduler**, i64 }\n+%class.hash_map = type { %\"struct.hash_map<long, rust_task *>::map_entry\"* }\n+%\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n+%union.pthread_attr_t = type { i64, [48 x i8] }\n %struct.rust_cond = type { i8 }\n-%struct.rust_env = type { i64, i64, i8*, i8, i8, i8* }\n+%class.timer = type { i32 (...)**, i64, i64 }\n+%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n+%class.hash_map.4 = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n+%\"struct.hash_map<long, rust_port *>::map_entry\" = type opaque\n+%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n %struct.rust_obstack_chunk = type { %struct.rust_obstack_chunk*, i64, i64, i64, [0 x i8] }\n-%struct.rust_scheduler = type { %class.rust_thread, i64, i64, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i64, %struct._opaque_pthread_attr_t, %struct.rust_env*, %class.context }\n-%struct.rust_shape_tables = type { i8*, i8* }\n-%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i64, %class.timer, i64*, %class.array_list, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n-%struct.rust_task_user = type { i64, i32, %struct.chan_handle, i64 }\n-%struct.rust_token = type opaque\n-%struct.rust_vec = type { i64, i64, [0 x i8] }\n-%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %struct.rust_cond, %\"struct.std::_Rb_tree_node_base\", i64 }\n+%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n+%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i64 }\n+%\"struct.std::less\" = type { i8 }\n %\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n-%struct.stk_seg = type { i32, i64, [0 x i8] }\n-%struct.type_desc = type { %struct.type_desc**, i64, i64, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i64, void (i8*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i64, i64, %struct.UT_hash_handle, i64, [0 x %struct.type_desc*] }\n+%\"class.debug::task_debug_info\" = type { %\"class.std::map.5\" }\n+%\"class.std::map.5\" = type { %\"class.std::_Rb_tree.6\" }\n+%\"class.std::_Rb_tree.6\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i64 }\n+%struct.rust_vec = type { i64, i64, [0 x i8] }\n+%class.rust_port = type { i64, i64, %class.rust_kernel*, %struct.rust_task*, %class.rust_chan*, i64, %class.ptr_vec, %class.ptr_vec.13, %class.lock_and_signal }\n+%class.rust_chan = type { i64, %class.rust_kernel*, %struct.rust_task*, %class.rust_port*, i64, %class.circular_buffer }\n+%class.circular_buffer = type { %class.rust_kernel*, i64, i64, i64, i64, i8* }\n+%class.ptr_vec = type { %struct.rust_task*, i64, i64, %struct.rust_token** }\n+%struct.rust_token = type opaque\n+%class.ptr_vec.13 = type { %struct.rust_task*, i64, i64, %class.rust_chan** }\n \n-@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\"\n-@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\"\n+@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\", align 1\n+@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\", align 1\n \n-define void @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, i64* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n-  %1 = load %struct.rust_vec** %vp, align 8\n+define void @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, i64* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind uwtable {\n+  %1 = load %struct.rust_vec** %vp, align 8, !tbaa !0\n   %2 = getelementptr inbounds %struct.rust_vec* %1, i64 0, i32 0\n-  %3 = load i64* %2, align 8\n+  %3 = load i64* %2, align 8, !tbaa !3\n   %4 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n-  %5 = load i64* %4, align 8\n+  %5 = load i64* %4, align 8, !tbaa !3\n   %6 = udiv i64 %3, %5\n-  store i64 %6, i64* %retptr, align 8\n+  store i64 %6, i64* %retptr, align 8, !tbaa !3\n   ret void\n }\n \n-define void @rust_intrinsic_ptr_offset(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %ptr, i64 %count) nounwind {\n+define void @rust_intrinsic_ptr_offset(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %ptr, i64 %count) nounwind uwtable {\n   %1 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n-  %2 = load i64* %1, align 8\n+  %2 = load i64* %1, align 8, !tbaa !3\n   %3 = mul i64 %2, %count\n   %4 = getelementptr inbounds i8* %ptr, i64 %3\n-  store i8* %4, i8** %retptr, align 8\n+  store i8* %4, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_cast(%struct.rust_task* nocapture %task, i8* nocapture %retptr, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n+define void @rust_intrinsic_cast(%struct.rust_task* nocapture %task, i8* nocapture %retptr, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) uwtable {\n   %1 = getelementptr inbounds %struct.type_desc* %t1, i64 0, i32 1\n-  %2 = load i64* %1, align 8\n+  %2 = load i64* %1, align 8, !tbaa !3\n   %3 = getelementptr inbounds %struct.type_desc* %t2, i64 0, i32 1\n-  %4 = load i64* %3, align 8\n+  %4 = load i64* %3, align 8, !tbaa !3\n   %5 = icmp eq i64 %2, %4\n   br i1 %5, label %7, label %6\n \n ; <label>:6                                       ; preds = %0\n-  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i64 0, i64 0), i64 32)\n+  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i64 0, i64 0), i64 38)\n   br label %8\n \n ; <label>:7                                       ; preds = %0\n@@ -102,21 +108,33 @@ declare void @upcall_fail(i8*, i8*, i64)\n \n declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind\n \n-define void @rust_intrinsic_addr_of(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n-  store i8* %valptr, i8** %retptr, align 8\n+define void @rust_intrinsic_addr_of(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind uwtable {\n+  store i8* %valptr, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n-define void @rust_intrinsic_recv(%struct.rust_task* nocapture %task, i8** %retptr, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n+define void @rust_intrinsic_recv(%struct.rust_task* nocapture %task, i8** %retptr, %struct.type_desc* nocapture %ty, %class.rust_port* %port) uwtable {\n   %1 = bitcast i8** %retptr to i64*\n   tail call void @port_recv(i64* %1, %class.rust_port* %port)\n   ret void\n }\n \n declare void @port_recv(i64*, %class.rust_port*)\n \n-define void @rust_intrinsic_get_type_desc(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* %ty) nounwind {\n+define void @rust_intrinsic_get_type_desc(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* %ty) nounwind uwtable {\n   %ty.c = bitcast %struct.type_desc* %ty to i8*\n-  store i8* %ty.c, i8** %retptr, align 8\n+  store i8* %ty.c, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n+\n+define void @rust_intrinsic_task_sleep(%struct.rust_task* nocapture %_task, i8** nocapture %retptr, i64 %time_in_us) uwtable {\n+  tail call void @rust_task_sleep(i64 %time_in_us)\n+  ret void\n+}\n+\n+declare void @rust_task_sleep(i64)\n+\n+!0 = metadata !{metadata !\"any pointer\", metadata !1}\n+!1 = metadata !{metadata !\"omnipotent char\", metadata !2}\n+!2 = metadata !{metadata !\"Simple C/C++ TBAA\", null}\n+!3 = metadata !{metadata !\"long\", metadata !1}"}, {"sha": "53650beea38673d07b0e6f5fc83376ddbeb9b6a7", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=061d2c2f7791f18538c42d043fb320f0316a0ed6", "patch": "@@ -165,12 +165,6 @@ rand_free(randctx *rctx) {\n     task->free(rctx);\n }\n \n-extern \"C\" CDECL void\n-task_sleep(size_t time_in_us) {\n-    rust_task *task = rust_scheduler::get_task();\n-    task->yield(time_in_us);\n-}\n-\n /* Debug builtins for std::dbg. */\n \n static void\n@@ -544,6 +538,16 @@ chan_id_send(type_desc *t, rust_task_id target_task_id,\n     }\n }\n \n+// This is called by an intrinsic on the Rust stack.\n+// Do not call on the C stack.\n+extern \"C\" CDECL void\n+rust_task_sleep(size_t time_in_us) {\n+    rust_task *task = rust_scheduler::get_task();\n+    task->yield(time_in_us);\n+}\n+\n+// This is called by an intrinsic on the Rust stack.\n+// Do not call on the C stack.\n extern \"C\" CDECL void\n port_recv(uintptr_t *dptr, rust_port *port) {\n     rust_task *task = rust_scheduler::get_task();"}, {"sha": "f144d668b13a77e955406a3acc8d337766f82d2c", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=061d2c2f7791f18538c42d043fb320f0316a0ed6", "patch": "@@ -287,9 +287,6 @@ struct type_desc {\n #include \"rust_port.h\"\n #include \"memory.h\"\n \n-extern \"C\" CDECL void\n-port_recv(uintptr_t *dptr, rust_port *port);\n-\n #include \"test/rust_test_harness.h\"\n #include \"test/rust_test_util.h\"\n #include \"test/rust_test_runtime.h\""}, {"sha": "3063d57f801c3a3a30a4370ef1ca06b2225bc7ab", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=061d2c2f7791f18538c42d043fb320f0316a0ed6", "patch": "@@ -52,14 +52,14 @@ rust_ptr_eq\n rust_run_program\n rust_start\n rust_getcwd\n+rust_task_sleep\n set_min_stack\n sched_threads\n size_of\n squareroot\n start_task\n vec_reserve_shared\n vec_from_buf_shared\n-task_sleep\n unsupervise\n upcall_alloc_c_stack\n upcall_call_c_stack"}, {"sha": "e0a191f292c0b12c0bd28e95b65b616d8ed896ad", "filename": "src/test/run-pass/bind-native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Ftest%2Frun-pass%2Fbind-native.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061d2c2f7791f18538c42d043fb320f0316a0ed6/src%2Ftest%2Frun-pass%2Fbind-native.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-native.rs?ref=061d2c2f7791f18538c42d043fb320f0316a0ed6", "patch": "@@ -3,7 +3,7 @@ Can we bind native things?\n */\n \n native \"c-stack-cdecl\" mod rustrt {\n-    fn task_sleep();\n+    fn pin_task();\n }\n \n-fn main() { bind rustrt::task_sleep(); }\n+fn main() { bind rustrt::pin_task(); }"}]}