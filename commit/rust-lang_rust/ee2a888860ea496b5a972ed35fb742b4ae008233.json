{"sha": "ee2a888860ea496b5a972ed35fb742b4ae008233", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMmE4ODg4NjBlYTQ5NmI1YTk3MmVkMzVmYjc0MmI0YWUwMDgyMzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-12T18:25:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-14T15:46:29Z"}, "message": "extra: Capture stdout/stderr of tests by default\n\nWhen tests fail, their stdout and stderr is printed as part of the summary, but\nthis helps suppress failure messages from #[should_fail] tests and generally\nclean up the output of the test runner.", "tree": {"sha": "249171a9397fb0a961bb7d19dff6f25e8f587ac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/249171a9397fb0a961bb7d19dff6f25e8f587ac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee2a888860ea496b5a972ed35fb742b4ae008233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2a888860ea496b5a972ed35fb742b4ae008233", "html_url": "https://github.com/rust-lang/rust/commit/ee2a888860ea496b5a972ed35fb742b4ae008233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee2a888860ea496b5a972ed35fb742b4ae008233/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "url": "https://api.github.com/repos/rust-lang/rust/commits/665555d58f2aa3c1d8aecd7b34392bde6c41b20d", "html_url": "https://github.com/rust-lang/rust/commit/665555d58f2aa3c1d8aecd7b34392bde6c41b20d"}], "stats": {"total": 112, "additions": 78, "deletions": 34}, "files": [{"sha": "38c1162f6368563866f43952d6c5cb65342ab9c3", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=ee2a888860ea496b5a972ed35fb742b4ae008233", "patch": "@@ -30,6 +30,8 @@ pub struct TestProps {\n     check_lines: ~[~str],\n     // Flag to force a crate to be built with the host architecture\n     force_host: bool,\n+    // Check stdout for error-pattern output as well as stderr\n+    check_stdout: bool,\n }\n \n // Load any test directives embedded in the file\n@@ -42,6 +44,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut debugger_cmds = ~[];\n     let mut check_lines = ~[];\n     let mut force_host = false;\n+    let mut check_stdout = false;\n     iter_header(testfile, |ln| {\n         match parse_error_pattern(ln) {\n           Some(ep) => error_patterns.push(ep),\n@@ -60,6 +63,10 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             force_host = parse_force_host(ln);\n         }\n \n+        if !check_stdout {\n+            check_stdout = parse_check_stdout(ln);\n+        }\n+\n         match parse_aux_build(ln) {\n             Some(ab) => { aux_builds.push(ab); }\n             None => {}\n@@ -91,6 +98,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         debugger_cmds: debugger_cmds,\n         check_lines: check_lines,\n         force_host: force_host,\n+        check_stdout: check_stdout,\n     };\n }\n \n@@ -155,6 +163,10 @@ fn parse_force_host(line: &str) -> bool {\n     parse_name_directive(line, \"force-host\")\n }\n \n+fn parse_check_stdout(line: &str) -> bool {\n+    parse_name_directive(line, \"check-stdout\")\n+}\n+\n fn parse_exec_env(line: &str) -> Option<(~str, ~str)> {\n     parse_name_value_directive(line, ~\"exec-env\").map(|nv| {\n         // nv is either FOO or FOO=BAR"}, {"sha": "8b45d98786445da3c6b552f48bfad5e7ff47587d", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=ee2a888860ea496b5a972ed35fb742b4ae008233", "patch": "@@ -452,7 +452,12 @@ fn check_error_patterns(props: &TestProps,\n     let mut next_err_idx = 0u;\n     let mut next_err_pat = &props.error_patterns[next_err_idx];\n     let mut done = false;\n-    for line in ProcRes.stderr.lines() {\n+    let output_to_check = if props.check_stdout {\n+        ProcRes.stdout + ProcRes.stderr\n+    } else {\n+        ProcRes.stderr.clone()\n+    };\n+    for line in output_to_check.lines() {\n         if line.contains(*next_err_pat) {\n             debug!(\"found error pattern {}\", *next_err_pat);\n             next_err_idx += 1u;"}, {"sha": "df13538b4bcc3dcdb69efb4528f840e312a77acd", "filename": "src/libextra/test.rs", "status": "modified", "additions": 52, "deletions": 33, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=ee2a888860ea496b5a972ed35fb742b4ae008233", "patch": "@@ -26,12 +26,11 @@ use stats;\n use time::precise_time_ns;\n use collections::TreeMap;\n \n-use std::clone::Clone;\n use std::cmp;\n use std::io;\n-use std::io::File;\n-use std::io::Writer;\n+use std::io::{File, PortReader, ChanWriter};\n use std::io::stdio::StdWriter;\n+use std::str;\n use std::task;\n use std::to_str::ToStr;\n use std::f64;\n@@ -358,7 +357,7 @@ struct ConsoleTestState<T> {\n     ignored: uint,\n     measured: uint,\n     metrics: MetricMap,\n-    failures: ~[TestDesc],\n+    failures: ~[(TestDesc, ~[u8])],\n     max_name_len: uint, // number of columns to fill when aligning names\n }\n \n@@ -498,9 +497,23 @@ impl<T: Writer> ConsoleTestState<T> {\n     pub fn write_failures(&mut self) -> io::IoResult<()> {\n         if_ok!(self.write_plain(\"\\nfailures:\\n\"));\n         let mut failures = ~[];\n-        for f in self.failures.iter() {\n+        let mut fail_out  = ~\"\";\n+        for &(ref f, ref stdout) in self.failures.iter() {\n             failures.push(f.name.to_str());\n+            if stdout.len() > 0 {\n+                fail_out.push_str(format!(\"---- {} stdout ----\\n\\t\",\n+                                  f.name.to_str()));\n+                let output = str::from_utf8_lossy(*stdout);\n+                fail_out.push_str(output.as_slice().replace(\"\\n\", \"\\n\\t\"));\n+                fail_out.push_str(\"\\n\");\n+            }\n+        }\n+        if fail_out.len() > 0 {\n+            if_ok!(self.write_plain(\"\\n\"));\n+            if_ok!(self.write_plain(fail_out));\n         }\n+\n+        if_ok!(self.write_plain(\"\\nfailures:\\n\"));\n         failures.sort();\n         for name in failures.iter() {\n             if_ok!(self.write_plain(format!(\"    {}\\n\", name.to_str())));\n@@ -632,7 +645,7 @@ pub fn run_tests_console(opts: &TestOpts,\n         match (*event).clone() {\n             TeFiltered(ref filtered_tests) => st.write_run_start(filtered_tests.len()),\n             TeWait(ref test, padding) => st.write_test_start(test, padding),\n-            TeResult(test, result) => {\n+            TeResult(test, result, stdout) => {\n                 if_ok!(st.write_log(&test, &result));\n                 if_ok!(st.write_result(&result));\n                 match result {\n@@ -655,7 +668,7 @@ pub fn run_tests_console(opts: &TestOpts,\n                     }\n                     TrFailed => {\n                         st.failed += 1;\n-                        st.failures.push(test);\n+                        st.failures.push((test, stdout));\n                     }\n                 }\n                 Ok(())\n@@ -717,17 +730,17 @@ fn should_sort_failures_before_printing_them() {\n         measured: 0u,\n         max_name_len: 10u,\n         metrics: MetricMap::new(),\n-        failures: ~[test_b, test_a]\n+        failures: ~[(test_b, ~[]), (test_a, ~[])]\n     };\n \n     st.write_failures().unwrap();\n     let s = match st.out {\n-        Raw(ref m) => str::from_utf8(m.get_ref()).unwrap(),\n+        Raw(ref m) => str::from_utf8_lossy(m.get_ref()),\n         Pretty(_) => unreachable!()\n     };\n \n-    let apos = s.find_str(\"a\").unwrap();\n-    let bpos = s.find_str(\"b\").unwrap();\n+    let apos = s.as_slice().find_str(\"a\").unwrap();\n+    let bpos = s.as_slice().find_str(\"b\").unwrap();\n     assert!(apos < bpos);\n }\n \n@@ -737,11 +750,10 @@ fn use_color() -> bool { return get_concurrency() == 1; }\n enum TestEvent {\n     TeFiltered(~[TestDesc]),\n     TeWait(TestDesc, NamePadding),\n-    TeResult(TestDesc, TestResult),\n+    TeResult(TestDesc, TestResult, ~[u8] /* stdout */),\n }\n \n-/// The message sent to the test monitor from the individual runners.\n-pub type MonitorMsg = (TestDesc, TestResult);\n+pub type MonitorMsg = (TestDesc, TestResult, ~[u8] /* stdout */);\n \n fn run_tests(opts: &TestOpts,\n              tests: ~[TestDescAndFn],\n@@ -783,11 +795,11 @@ fn run_tests(opts: &TestOpts,\n             pending += 1;\n         }\n \n-        let (desc, result) = p.recv();\n+        let (desc, result, stdout) = p.recv();\n         if concurrency != 1 {\n             if_ok!(callback(TeWait(desc.clone(), PadNone)));\n         }\n-        if_ok!(callback(TeResult(desc, result)));\n+        if_ok!(callback(TeResult(desc, result, stdout)));\n         pending -= 1;\n     }\n \n@@ -796,8 +808,8 @@ fn run_tests(opts: &TestOpts,\n     for b in filtered_benchs_and_metrics.move_iter() {\n         if_ok!(callback(TeWait(b.desc.clone(), b.testfn.padding())));\n         run_test(!opts.run_benchmarks, b, ch.clone());\n-        let (test, result) = p.recv();\n-        if_ok!(callback(TeResult(test, result)));\n+        let (test, result, stdout) = p.recv();\n+        if_ok!(callback(TeResult(test, result, stdout)));\n     }\n     Ok(())\n }\n@@ -884,7 +896,7 @@ pub fn run_test(force_ignore: bool,\n     let TestDescAndFn {desc, testfn} = test;\n \n     if force_ignore || desc.ignore {\n-        monitor_ch.send((desc, TrIgnored));\n+        monitor_ch.send((desc, TrIgnored, ~[]));\n         return;\n     }\n \n@@ -893,40 +905,47 @@ pub fn run_test(force_ignore: bool,\n                       testfn: proc()) {\n         spawn(proc() {\n             let mut task = task::task();\n-            task.name(match desc.name {\n-                DynTestName(ref name) => name.to_owned().into_maybe_owned(),\n-                StaticTestName(name) => name.into_maybe_owned()\n-            });\n+            let (p, c) = Chan::new();\n+            let mut reader = PortReader::new(p);\n+            let stdout = ChanWriter::new(c.clone());\n+            let stderr = ChanWriter::new(c);\n+            match desc.name {\n+                DynTestName(ref name) => task.name(name.clone()),\n+                StaticTestName(name) => task.name(name),\n+            }\n+            task.opts.stdout = Some(~stdout as ~Writer);\n+            task.opts.stderr = Some(~stderr as ~Writer);\n             let result_future = task.future_result();\n             task.spawn(testfn);\n \n+            let stdout = reader.read_to_end().unwrap();\n             let task_result = result_future.recv();\n             let test_result = calc_result(&desc, task_result.is_ok());\n-            monitor_ch.send((desc.clone(), test_result));\n-        });\n+            monitor_ch.send((desc.clone(), test_result, stdout));\n+        })\n     }\n \n     match testfn {\n         DynBenchFn(bencher) => {\n             let bs = ::test::bench::benchmark(|harness| bencher.run(harness));\n-            monitor_ch.send((desc, TrBench(bs)));\n+            monitor_ch.send((desc, TrBench(bs), ~[]));\n             return;\n         }\n         StaticBenchFn(benchfn) => {\n             let bs = ::test::bench::benchmark(|harness| benchfn(harness));\n-            monitor_ch.send((desc, TrBench(bs)));\n+            monitor_ch.send((desc, TrBench(bs), ~[]));\n             return;\n         }\n         DynMetricFn(f) => {\n             let mut mm = MetricMap::new();\n             f(&mut mm);\n-            monitor_ch.send((desc, TrMetrics(mm)));\n+            monitor_ch.send((desc, TrMetrics(mm), ~[]));\n             return;\n         }\n         StaticMetricFn(f) => {\n             let mut mm = MetricMap::new();\n             f(&mut mm);\n-            monitor_ch.send((desc, TrMetrics(mm)));\n+            monitor_ch.send((desc, TrMetrics(mm), ~[]));\n             return;\n         }\n         DynTestFn(f) => run_test_inner(desc, monitor_ch, f),\n@@ -1264,7 +1283,7 @@ mod tests {\n         };\n         let (p, ch) = Chan::new();\n         run_test(false, desc, ch);\n-        let (_, res) = p.recv();\n+        let (_, res, _) = p.recv();\n         assert!(res != TrOk);\n     }\n \n@@ -1281,7 +1300,7 @@ mod tests {\n         };\n         let (p, ch) = Chan::new();\n         run_test(false, desc, ch);\n-        let (_, res) = p.recv();\n+        let (_, res, _) = p.recv();\n         assert_eq!(res, TrIgnored);\n     }\n \n@@ -1298,7 +1317,7 @@ mod tests {\n         };\n         let (p, ch) = Chan::new();\n         run_test(false, desc, ch);\n-        let (_, res) = p.recv();\n+        let (_, res, _) = p.recv();\n         assert_eq!(res, TrOk);\n     }\n \n@@ -1315,7 +1334,7 @@ mod tests {\n         };\n         let (p, ch) = Chan::new();\n         run_test(false, desc, ch);\n-        let (_, res) = p.recv();\n+        let (_, res, _) = p.recv();\n         assert_eq!(res, TrFailed);\n     }\n "}, {"sha": "bf2c6dbb623f354c270e4a3c32c5b851e260fbae", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=ee2a888860ea496b5a972ed35fb742b4ae008233", "patch": "@@ -96,6 +96,12 @@ impl ChanWriter {\n     }\n }\n \n+impl Clone for ChanWriter {\n+    fn clone(&self) -> ChanWriter {\n+        ChanWriter { chan: self.chan.clone() }\n+    }\n+}\n+\n impl Writer for ChanWriter {\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n         if !self.chan.try_send(buf.to_owned()) {"}, {"sha": "427e606147d50d6a3278829bbce6b3e1c7b00d41", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=ee2a888860ea496b5a972ed35fb742b4ae008233", "patch": "@@ -10,6 +10,7 @@\n \n // error-pattern:runned an unexported test\n // compile-flags:--test\n+// check-stdout\n \n extern mod extra;\n "}, {"sha": "77d87c22c6f1cfe84a81ef9fbb60920c6f7aa264", "filename": "src/test/run-fail/test-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Ftest%2Frun-fail%2Ftest-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2a888860ea496b5a972ed35fb742b4ae008233/src%2Ftest%2Frun-fail%2Ftest-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-fail.rs?ref=ee2a888860ea496b5a972ed35fb742b4ae008233", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// check-stdout\n // error-pattern:task 'test_foo' failed at\n // compile-flags: --test\n "}]}