{"sha": "b9d5a6b709be1e21961f2a867d6e6542ffa557f2", "node_id": "C_kwDOAAsO6NoAKGI5ZDVhNmI3MDliZTFlMjE5NjFmMmE4NjdkNmU2NTQyZmZhNTU3ZjI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-03-30T17:11:06Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-03-30T17:26:12Z"}, "message": "Don't leave a comma at the start of argument list when removing arguments", "tree": {"sha": "8d28d42d0f1309f271bdcee05fd1cf2dfade38c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d28d42d0f1309f271bdcee05fd1cf2dfade38c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9d5a6b709be1e21961f2a867d6e6542ffa557f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d5a6b709be1e21961f2a867d6e6542ffa557f2", "html_url": "https://github.com/rust-lang/rust/commit/b9d5a6b709be1e21961f2a867d6e6542ffa557f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6975b77e3b170902e66bfd2b411624b1b1ba23e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6975b77e3b170902e66bfd2b411624b1b1ba23e9", "html_url": "https://github.com/rust-lang/rust/commit/6975b77e3b170902e66bfd2b411624b1b1ba23e9"}], "stats": {"total": 92, "additions": 73, "deletions": 19}, "files": [{"sha": "bb1063538b417d395e275d911c56996013def410", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=b9d5a6b709be1e21961f2a867d6e6542ffa557f2", "patch": "@@ -21,7 +21,7 @@ use rustc_hir_analysis::astconv::AstConv;\n use rustc_hir_analysis::check::intrinsicck::InlineAsmCtxt;\n use rustc_hir_analysis::check::potentially_plural_count;\n use rustc_hir_analysis::structured_errors::StructuredDiagnostic;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::error_reporting::{FailureCode, ObligationCauseExt};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::TypeTrace;\n@@ -31,7 +31,7 @@ use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, IsSuggestable, Ty};\n use rustc_session::Session;\n use rustc_span::symbol::{kw, Ident};\n-use rustc_span::{self, sym, Span};\n+use rustc_span::{self, sym, BytePos, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext};\n \n use std::iter;\n@@ -894,8 +894,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let mut errors = errors.into_iter().peekable();\n+        let mut only_extras_so_far = errors\n+            .peek()\n+            .map_or(false, |first| matches!(first, Error::Extra(arg_idx) if arg_idx.index() == 0));\n         let mut suggestions = vec![];\n         while let Some(error) = errors.next() {\n+            only_extras_so_far &= matches!(error, Error::Extra(_));\n+\n             match error {\n                 Error::Invalid(provided_idx, expected_idx, compatibility) => {\n                     let (formal_ty, expected_ty) = formal_and_expected_inputs[expected_idx];\n@@ -941,10 +946,37 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if arg_idx.index() > 0\n                         && let Some((_, prev)) = provided_arg_tys\n                             .get(ProvidedIdx::from_usize(arg_idx.index() - 1)\n-                    ) {\n-                        // Include previous comma\n-                        span = prev.shrink_to_hi().to(span);\n-                    }\n+                        ) {\n+                            // Include previous comma\n+                            span = prev.shrink_to_hi().to(span);\n+                        }\n+\n+                        // Is last argument for deletion in a row starting from the 0-th argument?\n+                        // Then delete the next comma, so we are not left with `f(, ...)`\n+                        //\n+                        //     fn f() {}\n+                        //   - f(0, 1,)\n+                        //   + f()\n+                        if only_extras_so_far\n+                            && errors\n+                                .peek()\n+                                .map_or(true, |next_error| !matches!(next_error, Error::Extra(_)))\n+                        {\n+                            let next = provided_arg_tys\n+                                .get(arg_idx.plus(1))\n+                                .map(|&(_, sp)| sp)\n+                                .unwrap_or_else(|| {\n+                                    // Subtract one to move before `)`\n+                                    call_expr\n+                                        .span\n+                                        .shrink_to_hi()\n+                                        .with_lo(call_expr.span.hi() - BytePos(1))\n+                                });\n+\n+                            // Include next comma\n+                            span = span.until(next);\n+                        }\n+\n                         suggestions.push((span, String::new()));\n \n                         suggestion_text = match suggestion_text {"}, {"sha": "143ddf99586f0ae1bb3bcdc7332d27273c39a95e", "filename": "tests/ui/argument-suggestions/issue-109425.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/tests%2Fui%2Fargument-suggestions%2Fissue-109425.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/tests%2Fui%2Fargument-suggestions%2Fissue-109425.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-109425.fixed?ref=b9d5a6b709be1e21961f2a867d6e6542ffa557f2", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+fn f() {}\n+fn i(_: u32) {}\n+fn is(_: u32, _: &str) {}\n+fn s(_: &str) {}\n+\n+fn main() {\n+    // code             expected suggestion\n+    f();        // f()\n+    //~^ error: this function takes 0 arguments but 2 arguments were supplied\n+    i(0,);     // i(0,)\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+    i(0);      // i(0)\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+    is(0, \"\"); // is(0, \"\")\n+    //~^ error: this function takes 2 arguments but 4 arguments were supplied\n+    s(\"\");     // s(\"\")\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+}"}, {"sha": "a845c419555c20e14dc0a59a42cdc98405ce8731", "filename": "tests/ui/argument-suggestions/issue-109425.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/tests%2Fui%2Fargument-suggestions%2Fissue-109425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/tests%2Fui%2Fargument-suggestions%2Fissue-109425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-109425.rs?ref=b9d5a6b709be1e21961f2a867d6e6542ffa557f2", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n fn f() {}\n fn i(_: u32) {}\n fn is(_: u32, _: &str) {}"}, {"sha": "1514f1cb487ef95ff1926db099982d0660414747", "filename": "tests/ui/argument-suggestions/issue-109425.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/tests%2Fui%2Fargument-suggestions%2Fissue-109425.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/tests%2Fui%2Fargument-suggestions%2Fissue-109425.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-109425.stderr?ref=b9d5a6b709be1e21961f2a867d6e6542ffa557f2", "patch": "@@ -1,32 +1,32 @@\n error[E0061]: this function takes 0 arguments but 2 arguments were supplied\n-  --> $DIR/issue-109425.rs:8:5\n+  --> $DIR/issue-109425.rs:10:5\n    |\n LL |     f(0, 1,);        // f()\n    |     ^ -  - unexpected argument of type `{integer}`\n    |       |\n    |       unexpected argument of type `{integer}`\n    |\n note: function defined here\n-  --> $DIR/issue-109425.rs:1:4\n+  --> $DIR/issue-109425.rs:3:4\n    |\n LL | fn f() {}\n    |    ^\n help: remove the extra arguments\n    |\n LL -     f(0, 1,);        // f()\n-LL +     f(,);        // f()\n+LL +     f();        // f()\n    |\n \n error[E0061]: this function takes 1 argument but 3 arguments were supplied\n-  --> $DIR/issue-109425.rs:10:5\n+  --> $DIR/issue-109425.rs:12:5\n    |\n LL |     i(0, 1, 2,);     // i(0,)\n    |     ^    -  - unexpected argument of type `{integer}`\n    |          |\n    |          unexpected argument of type `{integer}`\n    |\n note: function defined here\n-  --> $DIR/issue-109425.rs:2:4\n+  --> $DIR/issue-109425.rs:4:4\n    |\n LL | fn i(_: u32) {}\n    |    ^ ------\n@@ -37,15 +37,15 @@ LL +     i(0,);     // i(0,)\n    |\n \n error[E0061]: this function takes 1 argument but 3 arguments were supplied\n-  --> $DIR/issue-109425.rs:12:5\n+  --> $DIR/issue-109425.rs:14:5\n    |\n LL |     i(0, 1, 2);      // i(0)\n    |     ^    -  - unexpected argument of type `{integer}`\n    |          |\n    |          unexpected argument of type `{integer}`\n    |\n note: function defined here\n-  --> $DIR/issue-109425.rs:2:4\n+  --> $DIR/issue-109425.rs:4:4\n    |\n LL | fn i(_: u32) {}\n    |    ^ ------\n@@ -56,15 +56,15 @@ LL +     i(0);      // i(0)\n    |\n \n error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n-  --> $DIR/issue-109425.rs:14:5\n+  --> $DIR/issue-109425.rs:16:5\n    |\n LL |     is(0, 1, 2, \"\"); // is(0, \"\")\n    |     ^^    -  - unexpected argument of type `{integer}`\n    |           |\n    |           unexpected argument of type `{integer}`\n    |\n note: function defined here\n-  --> $DIR/issue-109425.rs:3:4\n+  --> $DIR/issue-109425.rs:5:4\n    |\n LL | fn is(_: u32, _: &str) {}\n    |    ^^ ------  -------\n@@ -75,22 +75,22 @@ LL +     is(0, \"\"); // is(0, \"\")\n    |\n \n error[E0061]: this function takes 1 argument but 3 arguments were supplied\n-  --> $DIR/issue-109425.rs:16:5\n+  --> $DIR/issue-109425.rs:18:5\n    |\n LL |     s(0, 1, \"\");     // s(\"\")\n    |     ^ -  - unexpected argument of type `{integer}`\n    |       |\n    |       unexpected argument of type `{integer}`\n    |\n note: function defined here\n-  --> $DIR/issue-109425.rs:4:4\n+  --> $DIR/issue-109425.rs:6:4\n    |\n LL | fn s(_: &str) {}\n    |    ^ -------\n help: remove the extra arguments\n    |\n LL -     s(0, 1, \"\");     // s(\"\")\n-LL +     s(, \"\");     // s(\"\")\n+LL +     s(\"\");     // s(\"\")\n    |\n \n error: aborting due to 5 previous errors"}, {"sha": "d4956872a399dc0ea95ff0ac845c0bf6175cbdf7", "filename": "tests/ui/suggestions/issue-109396.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/tests%2Fui%2Fsuggestions%2Fissue-109396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9d5a6b709be1e21961f2a867d6e6542ffa557f2/tests%2Fui%2Fsuggestions%2Fissue-109396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109396.stderr?ref=b9d5a6b709be1e21961f2a867d6e6542ffa557f2", "patch": "@@ -25,7 +25,7 @@ note: function defined here\n help: remove the extra arguments\n    |\n LL -             file.as_raw_fd(),\n-LL +             ,\n+LL +             );\n    |\n \n error: aborting due to 2 previous errors"}]}