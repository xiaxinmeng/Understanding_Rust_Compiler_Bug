{"sha": "d79ad36cf5c8f11e37001a090abae5ff94fbab1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OWFkMzZjZjVjOGYxMWUzNzAwMWEwOTBhYmFlNWZmOTRmYmFiMWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-21T02:18:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-28T13:43:47Z"}, "message": "walk the bodies \"in order\" by traversing the crate\n\nOtherwise the errors from borrowck come out in an unpredictable\norder.", "tree": {"sha": "7e60d68c0ba3a3abaa286963ca41c9b60b4aa1f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e60d68c0ba3a3abaa286963ca41c9b60b4aa1f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d79ad36cf5c8f11e37001a090abae5ff94fbab1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d79ad36cf5c8f11e37001a090abae5ff94fbab1b", "html_url": "https://github.com/rust-lang/rust/commit/d79ad36cf5c8f11e37001a090abae5ff94fbab1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d79ad36cf5c8f11e37001a090abae5ff94fbab1b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9bddad7bcd2b1bb4e5d534c271c6005739ab9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9bddad7bcd2b1bb4e5d534c271c6005739ab9c", "html_url": "https://github.com/rust-lang/rust/commit/3e9bddad7bcd2b1bb4e5d534c271c6005739ab9c"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "0d10049bc1e4ef76056ac9f72198a290edce3fe1", "filename": "src/librustc/dep_graph/visit.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d79ad36cf5c8f11e37001a090abae5ff94fbab1b/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d79ad36cf5c8f11e37001a090abae5ff94fbab1b/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fvisit.rs?ref=d79ad36cf5c8f11e37001a090abae5ff94fbab1b", "patch": "@@ -11,6 +11,7 @@\n use hir;\n use hir::def_id::DefId;\n use hir::itemlikevisit::ItemLikeVisitor;\n+use hir::intravisit::{self, NestedVisitorMap, Visitor};\n use ty::TyCtxt;\n \n use super::dep_node::DepNode;\n@@ -78,9 +79,30 @@ pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n pub fn visit_all_bodies_in_krate<'a, 'tcx, C>(tcx: TyCtxt<'a, 'tcx, 'tcx>, callback: C)\n     where C: Fn(/* body_owner */ DefId, /* body id */ hir::BodyId),\n {\n+    // NB: we use a visitor here rather than walking the keys of the\n+    // hashmap so as to ensure we visit the bodies \"in order\".\n+\n     let krate = tcx.hir.krate();\n-    for body_id in krate.bodies.keys().cloned() {\n-        let body_owner_def_id = tcx.hir.body_owner_def_id(body_id);\n-        callback(body_owner_def_id, body_id);\n+    intravisit::walk_crate(&mut V { tcx, callback }, krate);\n+\n+    struct V<'a, 'tcx: 'a, C> {\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        callback: C\n+    }\n+\n+    impl<'a, 'tcx, C> Visitor<'tcx> for V<'a, 'tcx, C>\n+        where C: Fn(/* body_owner */ DefId, /* body id */ hir::BodyId),\n+    {\n+        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+            NestedVisitorMap::All(&self.tcx.hir)\n+        }\n+\n+        fn visit_body(&mut self, body: &'tcx hir::Body) {\n+            let body_id = body.id();\n+            let body_owner_def_id = self.tcx.hir.body_owner_def_id(body_id);\n+            (self.callback)(body_owner_def_id, body_id);\n+\n+            intravisit::walk_body(self, body);\n+        }\n     }\n }"}, {"sha": "5d074903b2b992c838aeb571fe5f6ba2d5dfc633", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d79ad36cf5c8f11e37001a090abae5ff94fbab1b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d79ad36cf5c8f11e37001a090abae5ff94fbab1b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d79ad36cf5c8f11e37001a090abae5ff94fbab1b", "patch": "@@ -168,43 +168,48 @@ impl<'hir> MapEntry<'hir> {\n         })\n     }\n \n-    fn is_body_owner(self, node_id: NodeId) -> bool {\n+    fn associated_body(self) -> Option<BodyId> {\n         match self {\n             EntryItem(_, item) => {\n                 match item.node {\n                     ItemConst(_, body) |\n                     ItemStatic(.., body) |\n-                    ItemFn(_, _, _, _, _, body) => body.node_id == node_id,\n-                    _ => false\n+                    ItemFn(_, _, _, _, _, body) => Some(body),\n+                    _ => None,\n                 }\n             }\n \n             EntryTraitItem(_, item) => {\n                 match item.node {\n                     TraitItemKind::Const(_, Some(body)) |\n-                    TraitItemKind::Method(_, TraitMethod::Provided(body)) => {\n-                        body.node_id == node_id\n-                    }\n-                    _ => false\n+                    TraitItemKind::Method(_, TraitMethod::Provided(body)) => Some(body),\n+                    _ => None\n                 }\n             }\n \n             EntryImplItem(_, item) => {\n                 match item.node {\n                     ImplItemKind::Const(_, body) |\n-                    ImplItemKind::Method(_, body) => body.node_id == node_id,\n-                    _ => false\n+                    ImplItemKind::Method(_, body) => Some(body),\n+                    _ => None,\n                 }\n             }\n \n             EntryExpr(_, expr) => {\n                 match expr.node {\n-                    ExprClosure(.., body, _) => body.node_id == node_id,\n-                    _ => false\n+                    ExprClosure(.., body, _) => Some(body),\n+                    _ => None,\n                 }\n             }\n \n-            _ => false\n+            _ => None\n+        }\n+    }\n+\n+    fn is_body_owner(self, node_id: NodeId) -> bool {\n+        match self.associated_body() {\n+            Some(b) => b.node_id == node_id,\n+            None => false,\n         }\n     }\n }"}, {"sha": "01364c0714407a029e76bd967554e341a2c11f8a", "filename": "src/test/ui/span/mut-arg-hint.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d79ad36cf5c8f11e37001a090abae5ff94fbab1b/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d79ad36cf5c8f11e37001a090abae5ff94fbab1b/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr?ref=d79ad36cf5c8f11e37001a090abae5ff94fbab1b", "patch": "@@ -1,11 +1,3 @@\n-error: cannot borrow immutable borrowed content `*a` as mutable\n-  --> $DIR/mut-arg-hint.rs:18:5\n-   |\n-17 | pub fn foo<'a>(mut a: &'a String) {\n-   |                       ---------- use `&'a mut String` here to make mutable\n-18 |     a.push_str(\"foo\");\n-   |     ^ cannot borrow as mutable\n-\n error: cannot borrow immutable borrowed content `*a` as mutable\n   --> $DIR/mut-arg-hint.rs:13:9\n    |\n@@ -14,6 +6,14 @@ error: cannot borrow immutable borrowed content `*a` as mutable\n 13 |         a.push_str(\"bar\");\n    |         ^ cannot borrow as mutable\n \n+error: cannot borrow immutable borrowed content `*a` as mutable\n+  --> $DIR/mut-arg-hint.rs:18:5\n+   |\n+17 | pub fn foo<'a>(mut a: &'a String) {\n+   |                       ---------- use `&'a mut String` here to make mutable\n+18 |     a.push_str(\"foo\");\n+   |     ^ cannot borrow as mutable\n+\n error: cannot borrow immutable borrowed content `*a` as mutable\n   --> $DIR/mut-arg-hint.rs:25:9\n    |"}]}