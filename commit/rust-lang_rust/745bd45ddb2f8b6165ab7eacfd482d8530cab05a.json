{"sha": "745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NWJkNDVkZGIyZjhiNjE2NWFiN2VhY2ZkNDgyZDg1MzBjYWIwNWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-30T18:37:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T18:37:35Z"}, "message": "Merge #4227\n\n4227: Report invalid, nested, multi-segment crate-paths r=matklad a=djrenren\n\nThere was a bug in the previous path-validating code that didn't detect multi-segment paths that started with `crate`.\r\n\r\n```rust\r\n// Successfully reported\r\nuse foo::{crate};\r\n\r\n// BUG: was not being reported\r\nuse foo::{crate::bar};\r\n```\r\n\r\nThis was due to my confusion about path-associativity. That is, the path with no qualifier is the innermost path, not the outermost. I've updated the code with a lot of comments to explain what's going on. \r\n\r\nThis bug was discovered when I found an erroneous `ok` test which I reported here: \r\nhttps://github.com/rust-analyzer/rust-analyzer/issues/4226\r\n\r\nThis test now fails and has been modified, hopefully in the spirit of the original test, to be correct.  Sorry about submitting the bug in the first place!\n\nCo-authored-by: John Renner <john@jrenner.net>", "tree": {"sha": "9e36b55112d3ea5f9d913d36597884b82aa87f68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e36b55112d3ea5f9d913d36597884b82aa87f68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqxrwCRBK7hj4Ov3rIwAAdHIIAKAFDQ0wpaDRgeBlHHzQtF/2\nkVP0sGgXZoEV89NM+LCMxuuQQVR6rtz0UN1fI8p2AZx4D4L7s4r4fjEq9NQVo9+/\nk1XeFxGuJSmXbjmcKvO4G7h1zI5XONZCn2M6wYY9+jDKRYzNcovWsZ+YyBrX28eN\n5GIpzGtsg+md6PLIKVGK3IzbHWSzyzI89heQZff/4LfhplxdHQ5rueZs9c9WH58e\nZdakWjIwMtt+voRPgYcwwK5uQl5yyBxTkOdCaeeiCpM3TipAogs9Gb9/SN1awSoy\nwMIdXw7ZdgwuOIJKiurLLSBMRtsFA3C22hIElAHQGqmnlTg8hY1Sh6D0HciEUZ4=\n=/0VX\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e36b55112d3ea5f9d913d36597884b82aa87f68\nparent 861652ffa6b6440a022a353d2e6b9f5ca780d2ec\nparent 513a3615f6d462852c0135dc4ac30a2086e25c5a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588271855 +0000\ncommitter GitHub <noreply@github.com> 1588271855 +0000\n\nMerge #4227\n\n4227: Report invalid, nested, multi-segment crate-paths r=matklad a=djrenren\n\nThere was a bug in the previous path-validating code that didn't detect multi-segment paths that started with `crate`.\r\n\r\n```rust\r\n// Successfully reported\r\nuse foo::{crate};\r\n\r\n// BUG: was not being reported\r\nuse foo::{crate::bar};\r\n```\r\n\r\nThis was due to my confusion about path-associativity. That is, the path with no qualifier is the innermost path, not the outermost. I've updated the code with a lot of comments to explain what's going on. \r\n\r\nThis bug was discovered when I found an erroneous `ok` test which I reported here: \r\nhttps://github.com/rust-analyzer/rust-analyzer/issues/4226\r\n\r\nThis test now fails and has been modified, hopefully in the spirit of the original test, to be correct.  Sorry about submitting the bug in the first place!\n\nCo-authored-by: John Renner <john@jrenner.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "html_url": "https://github.com/rust-lang/rust/commit/745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "861652ffa6b6440a022a353d2e6b9f5ca780d2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/861652ffa6b6440a022a353d2e6b9f5ca780d2ec", "html_url": "https://github.com/rust-lang/rust/commit/861652ffa6b6440a022a353d2e6b9f5ca780d2ec"}, {"sha": "513a3615f6d462852c0135dc4ac30a2086e25c5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/513a3615f6d462852c0135dc4ac30a2086e25c5a", "html_url": "https://github.com/rust-lang/rust/commit/513a3615f6d462852c0135dc4ac30a2086e25c5a"}], "stats": {"total": 197, "additions": 116, "deletions": 81}, "files": [{"sha": "3a0c7a31a852b2a544febe467832f6081143c2e9", "filename": "crates/ra_parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "patch": "@@ -47,7 +47,7 @@ fn use_tree(p: &mut Parser, top_level: bool) {\n         // use {crate::path::from::root, or::path::from::crate_name}; // Rust 2018 (with a crate named `or`)\n         // use {path::from::root}; // Rust 2015\n         // use ::{some::arbritrary::path}; // Rust 2015\n-        // use ::{{{crate::export}}}; // Nonsensical but perfectly legal nestnig\n+        // use ::{{{root::export}}}; // Nonsensical but perfectly legal nesting\n         T!['{'] => {\n             use_tree_list(p);\n         }"}, {"sha": "f0b3dec631f41c431205008b6ce57bf5572cd194", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "patch": "@@ -236,21 +236,40 @@ fn validate_crate_keyword_in_path_segment(\n     };\n \n     // Disallow both ::crate and foo::crate\n-    let path = segment.parent_path();\n+    let mut path = segment.parent_path();\n     if segment.coloncolon_token().is_some() || path.qualifier().is_some() {\n         errors.push(SyntaxError::new(ERR_MSG, crate_token.text_range()));\n         return;\n     }\n \n-    // We now know that the path variable describes a complete path.\n     // For expressions and types, validation is complete, but we still have\n-    // to handle UseItems like this:\n-    //      use foo:{crate};\n-    // so we crawl upwards looking for any preceding paths on `UseTree`s\n+    // to handle invalid UseItems like this:\n+    //\n+    //      use foo:{crate::bar::baz};\n+    //\n+    // To handle this we must inspect the parent `UseItem`s and `UseTree`s\n+    // but right now we're looking deep inside the nested `Path` nodes because\n+    // `Path`s are left-associative:\n+    //\n+    //   ((crate)::bar)::baz)\n+    //       ^ current value of path\n+    //\n+    // So we need to climb to the top\n+    while let Some(parent) = path.parent_path() {\n+        path = parent;\n+    }\n+\n+    // Now that we've found the whole path we need to see if there's a prefix\n+    // somewhere in the UseTree hierarchy. This check is arbitrarily deep\n+    // because rust allows arbitrary nesting like so:\n+    //\n+    // use {foo::{{{{crate::bar::baz}}}}};\n     for node in path.syntax().ancestors().skip(1) {\n         match_ast! {\n             match node {\n                 ast::UseTree(it) => if let Some(tree_path) = it.path() {\n+                    // Even a top-level path exists within a `UseTree` so we must explicitly\n+                    // allow our path but disallow anything else\n                     if tree_path != path {\n                         errors.push(SyntaxError::new(ERR_MSG, crate_token.text_range()));\n                     }"}, {"sha": "d2a5492733b7b239f9c6c9b78f2da3ce852e8c68", "filename": "crates/ra_syntax/test_data/parser/err/0040_illegal_crate_kw_location.rast", "status": "modified", "additions": 64, "deletions": 49, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "raw_url": "https://github.com/rust-lang/rust/raw/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rast?ref=745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "patch": "@@ -1,4 +1,4 @@\n-SOURCE_FILE@0..83\n+SOURCE_FILE@0..98\n   USE_ITEM@0..12\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n@@ -9,68 +9,83 @@ SOURCE_FILE@0..83\n           CRATE_KW@6..11 \"crate\"\n     SEMICOLON@11..12 \";\"\n   WHITESPACE@12..13 \"\\n\"\n-  USE_ITEM@13..39\n+  USE_ITEM@13..54\n     USE_KW@13..16 \"use\"\n     WHITESPACE@16..17 \" \"\n-    USE_TREE@17..38\n-      USE_TREE_LIST@17..38\n+    USE_TREE@17..53\n+      USE_TREE_LIST@17..53\n         L_CURLY@17..18 \"{\"\n         USE_TREE@18..23\n           PATH@18..23\n             PATH_SEGMENT@18..23\n               CRATE_KW@18..23 \"crate\"\n         COMMA@23..24 \",\"\n         WHITESPACE@24..25 \" \"\n-        USE_TREE@25..37\n+        USE_TREE@25..52\n           PATH@25..28\n             PATH_SEGMENT@25..28\n               NAME_REF@25..28\n                 IDENT@25..28 \"foo\"\n           COLON2@28..30 \"::\"\n-          USE_TREE_LIST@30..37\n+          USE_TREE_LIST@30..52\n             L_CURLY@30..31 \"{\"\n-            USE_TREE@31..36\n-              PATH@31..36\n-                PATH_SEGMENT@31..36\n-                  CRATE_KW@31..36 \"crate\"\n-            R_CURLY@36..37 \"}\"\n-        R_CURLY@37..38 \"}\"\n-    SEMICOLON@38..39 \";\"\n-  WHITESPACE@39..40 \"\\n\"\n-  USE_ITEM@40..57\n-    USE_KW@40..43 \"use\"\n-    WHITESPACE@43..44 \" \"\n-    USE_TREE@44..56\n-      PATH@44..56\n-        PATH@44..49\n-          PATH_SEGMENT@44..49\n-            NAME_REF@44..49\n-              IDENT@44..49 \"hello\"\n-        COLON2@49..51 \"::\"\n-        PATH_SEGMENT@51..56\n-          CRATE_KW@51..56 \"crate\"\n-    SEMICOLON@56..57 \";\"\n-  WHITESPACE@57..58 \"\\n\"\n-  USE_ITEM@58..82\n-    USE_KW@58..61 \"use\"\n-    WHITESPACE@61..62 \" \"\n-    USE_TREE@62..81\n-      PATH@62..81\n-        PATH@62..74\n-          PATH@62..67\n-            PATH_SEGMENT@62..67\n-              NAME_REF@62..67\n-                IDENT@62..67 \"hello\"\n-          COLON2@67..69 \"::\"\n-          PATH_SEGMENT@69..74\n-            CRATE_KW@69..74 \"crate\"\n-        COLON2@74..76 \"::\"\n-        PATH_SEGMENT@76..81\n-          NAME_REF@76..81\n-            IDENT@76..81 \"there\"\n-    SEMICOLON@81..82 \";\"\n-  WHITESPACE@82..83 \"\\n\"\n+            USE_TREE@31..51\n+              PATH@31..51\n+                PATH@31..46\n+                  PATH@31..41\n+                    PATH@31..36\n+                      PATH_SEGMENT@31..36\n+                        CRATE_KW@31..36 \"crate\"\n+                    COLON2@36..38 \"::\"\n+                    PATH_SEGMENT@38..41\n+                      NAME_REF@38..41\n+                        IDENT@38..41 \"foo\"\n+                  COLON2@41..43 \"::\"\n+                  PATH_SEGMENT@43..46\n+                    NAME_REF@43..46\n+                      IDENT@43..46 \"bar\"\n+                COLON2@46..48 \"::\"\n+                PATH_SEGMENT@48..51\n+                  NAME_REF@48..51\n+                    IDENT@48..51 \"baz\"\n+            R_CURLY@51..52 \"}\"\n+        R_CURLY@52..53 \"}\"\n+    SEMICOLON@53..54 \";\"\n+  WHITESPACE@54..55 \"\\n\"\n+  USE_ITEM@55..72\n+    USE_KW@55..58 \"use\"\n+    WHITESPACE@58..59 \" \"\n+    USE_TREE@59..71\n+      PATH@59..71\n+        PATH@59..64\n+          PATH_SEGMENT@59..64\n+            NAME_REF@59..64\n+              IDENT@59..64 \"hello\"\n+        COLON2@64..66 \"::\"\n+        PATH_SEGMENT@66..71\n+          CRATE_KW@66..71 \"crate\"\n+    SEMICOLON@71..72 \";\"\n+  WHITESPACE@72..73 \"\\n\"\n+  USE_ITEM@73..97\n+    USE_KW@73..76 \"use\"\n+    WHITESPACE@76..77 \" \"\n+    USE_TREE@77..96\n+      PATH@77..96\n+        PATH@77..89\n+          PATH@77..82\n+            PATH_SEGMENT@77..82\n+              NAME_REF@77..82\n+                IDENT@77..82 \"hello\"\n+          COLON2@82..84 \"::\"\n+          PATH_SEGMENT@84..89\n+            CRATE_KW@84..89 \"crate\"\n+        COLON2@89..91 \"::\"\n+        PATH_SEGMENT@91..96\n+          NAME_REF@91..96\n+            IDENT@91..96 \"there\"\n+    SEMICOLON@96..97 \";\"\n+  WHITESPACE@97..98 \"\\n\"\n error 6..11: The `crate` keyword is only allowed as the first segment of a path\n error 31..36: The `crate` keyword is only allowed as the first segment of a path\n-error 51..56: The `crate` keyword is only allowed as the first segment of a path\n-error 69..74: The `crate` keyword is only allowed as the first segment of a path\n+error 66..71: The `crate` keyword is only allowed as the first segment of a path\n+error 84..89: The `crate` keyword is only allowed as the first segment of a path"}, {"sha": "508def2c7ef503bbdadcdc19ef7b550da9260214", "filename": "crates/ra_syntax/test_data/parser/err/0040_illegal_crate_kw_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0040_illegal_crate_kw_location.rs?ref=745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "patch": "@@ -1,4 +1,4 @@\n use ::crate;\n-use {crate, foo::{crate}};\n+use {crate, foo::{crate::foo::bar::baz}};\n use hello::crate;\n use hello::crate::there;"}, {"sha": "cf3a90400a802fb6c97af7dcf93adcceeea99a0a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0002_use_tree_list.rast", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast?ref=745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "patch": "@@ -1,4 +1,4 @@\n-SOURCE_FILE@0..250\n+SOURCE_FILE@0..249\n   USE_ITEM@0..58\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n@@ -104,32 +104,33 @@ SOURCE_FILE@0..250\n   WHITESPACE@166..167 \" \"\n   COMMENT@167..179 \"// Rust 2015\"\n   WHITESPACE@179..180 \"\\n\"\n-  USE_ITEM@180..206\n+  USE_ITEM@180..205\n     USE_KW@180..183 \"use\"\n     WHITESPACE@183..184 \" \"\n-    USE_TREE@184..205\n+    USE_TREE@184..204\n       COLON2@184..186 \"::\"\n-      USE_TREE_LIST@186..205\n+      USE_TREE_LIST@186..204\n         L_CURLY@186..187 \"{\"\n-        USE_TREE@187..204\n-          USE_TREE_LIST@187..204\n+        USE_TREE@187..203\n+          USE_TREE_LIST@187..203\n             L_CURLY@187..188 \"{\"\n-            USE_TREE@188..203\n-              USE_TREE_LIST@188..203\n+            USE_TREE@188..202\n+              USE_TREE_LIST@188..202\n                 L_CURLY@188..189 \"{\"\n-                USE_TREE@189..202\n-                  PATH@189..202\n-                    PATH@189..194\n-                      PATH_SEGMENT@189..194\n-                        CRATE_KW@189..194 \"crate\"\n-                    COLON2@194..196 \"::\"\n-                    PATH_SEGMENT@196..202\n-                      NAME_REF@196..202\n-                        IDENT@196..202 \"export\"\n-                R_CURLY@202..203 \"}\"\n-            R_CURLY@203..204 \"}\"\n-        R_CURLY@204..205 \"}\"\n-    SEMICOLON@205..206 \";\"\n-  WHITESPACE@206..207 \" \"\n-  COMMENT@207..249 \"// Nonsensical but pe ...\"\n-  WHITESPACE@249..250 \"\\n\"\n+                USE_TREE@189..201\n+                  PATH@189..201\n+                    PATH@189..193\n+                      PATH_SEGMENT@189..193\n+                        NAME_REF@189..193\n+                          IDENT@189..193 \"root\"\n+                    COLON2@193..195 \"::\"\n+                    PATH_SEGMENT@195..201\n+                      NAME_REF@195..201\n+                        IDENT@195..201 \"export\"\n+                R_CURLY@201..202 \"}\"\n+            R_CURLY@202..203 \"}\"\n+        R_CURLY@203..204 \"}\"\n+    SEMICOLON@204..205 \";\"\n+  WHITESPACE@205..206 \" \"\n+  COMMENT@206..248 \"// Nonsensical but pe ...\"\n+  WHITESPACE@248..249 \"\\n\""}, {"sha": "381cba1e29e084aa06f8562fc108700e570ef03e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0002_use_tree_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/745bd45ddb2f8b6165ab7eacfd482d8530cab05a/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rs?ref=745bd45ddb2f8b6165ab7eacfd482d8530cab05a", "patch": "@@ -1,4 +1,4 @@\n use {crate::path::from::root, or::path::from::crate_name}; // Rust 2018 (with a crate named `or`)\n use {path::from::root}; // Rust 2015\n use ::{some::arbritrary::path}; // Rust 2015\n-use ::{{{crate::export}}}; // Nonsensical but perfectly legal nestnig\n+use ::{{{root::export}}}; // Nonsensical but perfectly legal nesting"}]}