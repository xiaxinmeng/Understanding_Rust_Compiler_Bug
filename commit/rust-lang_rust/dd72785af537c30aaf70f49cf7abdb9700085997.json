{"sha": "dd72785af537c30aaf70f49cf7abdb9700085997", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNzI3ODVhZjUzN2MzMGFhZjcwZjQ5Y2Y3YWJkYjk3MDAwODU5OTc=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-07-16T20:19:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-16T20:19:43Z"}, "message": "Revert \"Refactored code to access TLS only in case of panic\"", "tree": {"sha": "b409f07a1daf8e2c7aa0e0b62305354e45e7c6d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b409f07a1daf8e2c7aa0e0b62305354e45e7c6d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd72785af537c30aaf70f49cf7abdb9700085997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd72785af537c30aaf70f49cf7abdb9700085997", "html_url": "https://github.com/rust-lang/rust/commit/dd72785af537c30aaf70f49cf7abdb9700085997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd72785af537c30aaf70f49cf7abdb9700085997/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5b9850d79beb87c0e498e0a0b8097e4a11bfae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b9850d79beb87c0e498e0a0b8097e4a11bfae6", "html_url": "https://github.com/rust-lang/rust/commit/d5b9850d79beb87c0e498e0a0b8097e4a11bfae6"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "d73e9542d21253e765958f4a1a1d51140a393dd5", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd72785af537c30aaf70f49cf7abdb9700085997/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72785af537c30aaf70f49cf7abdb9700085997/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=dd72785af537c30aaf70f49cf7abdb9700085997", "patch": "@@ -232,9 +232,10 @@ fn default_hook(info: &PanicInfo) {\n pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<Any + Send>> {\n     let mut slot = None;\n     let mut f = Some(f);\n-    let ret;\n+    let ret = PANIC_COUNT.with(|s| {\n+        let prev = s.get();\n+        s.set(0);\n \n-    {\n         let mut to_run = || {\n             slot = Some(f.take().unwrap()());\n         };\n@@ -247,21 +248,18 @@ pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<Any + Send>> {\n                                          dataptr,\n                                          &mut any_data,\n                                          &mut any_vtable);\n+        s.set(prev);\n+\n         if r == 0 {\n-            ret = Ok(());\n+            Ok(())\n         } else {\n-            PANIC_COUNT.with(|s| {\n-                let prev = s.get();\n-                s.set(prev - 1);\n-            });\n-            ret = Err(mem::transmute(raw::TraitObject {\n+            Err(mem::transmute(raw::TraitObject {\n                 data: any_data as *mut _,\n                 vtable: any_vtable as *mut _,\n-            }));\n+            }))\n         }\n-    }\n+    });\n \n-    debug_assert!(PANIC_COUNT.with(|c| c.get() == 0));\n     return ret.map(|()| {\n         slot.take().unwrap()\n     });"}]}