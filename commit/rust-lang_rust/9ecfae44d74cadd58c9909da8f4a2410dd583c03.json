{"sha": "9ecfae44d74cadd58c9909da8f4a2410dd583c03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllY2ZhZTQ0ZDc0Y2FkZDU4Yzk5MDlkYThmNGEyNDEwZGQ1ODNjMDM=", "commit": {"author": {"name": "Soveu", "email": "marx.tomasz@gmail.com", "date": "2021-04-16T14:29:11Z"}, "committer": {"name": "Soveu", "email": "marx.tomasz@gmail.com", "date": "2021-04-16T14:29:11Z"}, "message": "builtin derive macros: fix error with const generics default", "tree": {"sha": "3baae7e6aff87ddb870fa2a1de7fd55f49bdc75e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3baae7e6aff87ddb870fa2a1de7fd55f49bdc75e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ecfae44d74cadd58c9909da8f4a2410dd583c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecfae44d74cadd58c9909da8f4a2410dd583c03", "html_url": "https://github.com/rust-lang/rust/commit/9ecfae44d74cadd58c9909da8f4a2410dd583c03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ecfae44d74cadd58c9909da8f4a2410dd583c03/comments", "author": {"login": "Soveu", "id": 34382234, "node_id": "MDQ6VXNlcjM0MzgyMjM0", "avatar_url": "https://avatars.githubusercontent.com/u/34382234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soveu", "html_url": "https://github.com/Soveu", "followers_url": "https://api.github.com/users/Soveu/followers", "following_url": "https://api.github.com/users/Soveu/following{/other_user}", "gists_url": "https://api.github.com/users/Soveu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soveu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soveu/subscriptions", "organizations_url": "https://api.github.com/users/Soveu/orgs", "repos_url": "https://api.github.com/users/Soveu/repos", "events_url": "https://api.github.com/users/Soveu/events{/privacy}", "received_events_url": "https://api.github.com/users/Soveu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Soveu", "id": 34382234, "node_id": "MDQ6VXNlcjM0MzgyMjM0", "avatar_url": "https://avatars.githubusercontent.com/u/34382234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soveu", "html_url": "https://github.com/Soveu", "followers_url": "https://api.github.com/users/Soveu/followers", "following_url": "https://api.github.com/users/Soveu/following{/other_user}", "gists_url": "https://api.github.com/users/Soveu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soveu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soveu/subscriptions", "organizations_url": "https://api.github.com/users/Soveu/orgs", "repos_url": "https://api.github.com/users/Soveu/repos", "events_url": "https://api.github.com/users/Soveu/events{/privacy}", "received_events_url": "https://api.github.com/users/Soveu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4bc912c4816a660b052dd7c8dffbc63fd4dffdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bc912c4816a660b052dd7c8dffbc63fd4dffdf", "html_url": "https://github.com/rust-lang/rust/commit/d4bc912c4816a660b052dd7c8dffbc63fd4dffdf"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "a3decff3ae7e1892fa075881cb859a80fc41a697", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ecfae44d74cadd58c9909da8f4a2410dd583c03/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecfae44d74cadd58c9909da8f4a2410dd583c03/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=9ecfae44d74cadd58c9909da8f4a2410dd583c03", "patch": "@@ -541,7 +541,7 @@ impl<'a> TraitDef<'a> {\n             self.generics.to_generics(cx, self.span, type_ident, generics);\n \n         // Create the generic parameters\n-        params.extend(generics.params.iter().map(|param| match param.kind {\n+        params.extend(generics.params.iter().map(|param| match &param.kind {\n             GenericParamKind::Lifetime { .. } => param.clone(),\n             GenericParamKind::Type { .. } => {\n                 // I don't think this can be moved out of the loop, since\n@@ -561,7 +561,18 @@ impl<'a> TraitDef<'a> {\n \n                 cx.typaram(self.span, param.ident, vec![], bounds, None)\n             }\n-            GenericParamKind::Const { .. } => param.clone(),\n+            GenericParamKind::Const { ty, kw_span, .. } => {\n+                let const_nodefault_kind = GenericParamKind::Const {\n+                    ty: ty.clone(),\n+                    kw_span: kw_span.clone(),\n+\n+                    // We can't have default values inside impl block\n+                    default: None,\n+                };\n+                let mut param_clone = param.clone();\n+                param_clone.kind = const_nodefault_kind;\n+                param_clone\n+            }\n         }));\n \n         // and similarly for where clauses"}, {"sha": "a844f2d20237b9fd01f1db2764f4d2cf56736886", "filename": "src/test/ui/derives/derive-macro-const-default.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ecfae44d74cadd58c9909da8f4a2410dd583c03/src%2Ftest%2Fui%2Fderives%2Fderive-macro-const-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecfae44d74cadd58c9909da8f4a2410dd583c03/src%2Ftest%2Fui%2Fderives%2Fderive-macro-const-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-macro-const-default.rs?ref=9ecfae44d74cadd58c9909da8f4a2410dd583c03", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(const_generics_defaults)]\n+\n+#[derive(Clone, PartialEq, Debug)]\n+struct Example<T, const N: usize = 1usize>([T; N]);\n+\n+fn main() {\n+    let a = Example([(); 16]);\n+    let b = a.clone();\n+    if a != b {\n+        let _c = format!(\"{:?}\", a);\n+    }\n+}"}]}