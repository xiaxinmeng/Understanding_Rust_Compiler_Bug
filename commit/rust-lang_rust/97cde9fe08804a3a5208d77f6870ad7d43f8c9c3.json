{"sha": "97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "node_id": "C_kwDOAAsO6NoAKDk3Y2RlOWZlMDg4MDRhM2E1MjA4ZDc3ZjY4NzBhZDdkNDNmOGM5YzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-28T14:20:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-28T14:20:13Z"}, "message": "Auto merge of #94447 - matthiaskrgr:rollup-d8rj2xv, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #89793 (Add `slice::{from_ptr_range, from_mut_ptr_range} `)\n - #92642 (Update search location from a relative path to absolute)\n - #93389 (regression for issue 90847)\n - #93413 (Fix broken link from rustdoc docs to ayu theme)\n - #94365 (Fix MinGW target detection in raw-dylib)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0ce4d525840d0908e39d014a0a4ce413e9de64e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ce4d525840d0908e39d014a0a4ce413e9de64e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "html_url": "https://github.com/rust-lang/rust/commit/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edda7e959d0dea66ec60b064f63bf275ad1c41c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/edda7e959d0dea66ec60b064f63bf275ad1c41c5", "html_url": "https://github.com/rust-lang/rust/commit/edda7e959d0dea66ec60b064f63bf275ad1c41c5"}, {"sha": "ea39f46caddd3a4547517f82dd1d57a145d01b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea39f46caddd3a4547517f82dd1d57a145d01b26", "html_url": "https://github.com/rust-lang/rust/commit/ea39f46caddd3a4547517f82dd1d57a145d01b26"}], "stats": {"total": 154, "additions": 151, "deletions": 3}, "files": [{"sha": "f814cc930433151171551fc9f2abb7064d3136f5", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "patch": "@@ -151,7 +151,9 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             output_path.with_extension(\"lib\")\n         };\n \n-        let mingw_gnu_toolchain = self.config.sess.target.llvm_target.ends_with(\"pc-windows-gnu\");\n+        let target = &self.config.sess.target;\n+        let mingw_gnu_toolchain =\n+            target.vendor == \"pc\" && target.os == \"windows\" && target.env == \"gnu\";\n \n         let import_name_and_ordinal_vector: Vec<(String, Option<u16>)> = dll_imports\n             .iter()"}, {"sha": "08b95d791a38caf8d4aafd86059ca71fa0285c06", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "patch": "@@ -71,6 +71,9 @@ pub use raw::{from_raw_parts, from_raw_parts_mut};\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n pub use raw::{from_mut, from_ref};\n \n+#[unstable(feature = \"slice_from_ptr_range\", issue = \"89792\")]\n+pub use raw::{from_mut_ptr_range, from_ptr_range};\n+\n // This function is public only because there is no other way to unit test heapsort.\n #[unstable(feature = \"sort_internals\", reason = \"internal to sort module\", issue = \"none\")]\n pub use sort::heapsort;"}, {"sha": "39c8d68e4bf343dbfec4e20f9143b1b4bfd625b1", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "patch": "@@ -1,6 +1,7 @@\n //! Free functions to create `&[T]` and `&mut [T]`.\n \n use crate::array;\n+use crate::ops::Range;\n use crate::ptr;\n \n /// Forms a slice from a pointer and a length.\n@@ -177,3 +178,113 @@ pub const fn from_ref<T>(s: &T) -> &[T] {\n pub const fn from_mut<T>(s: &mut T) -> &mut [T] {\n     array::from_mut(s)\n }\n+\n+/// Forms a slice from a pointer range.\n+///\n+/// This function is useful for interacting with foreign interfaces which\n+/// use two pointers to refer to a range of elements in memory, as is\n+/// common in C++.\n+///\n+/// # Safety\n+///\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * The `start` pointer of the range must be a [valid] and properly aligned pointer\n+///   to the first element of a slice.\n+///\n+/// * The `end` pointer must be a [valid] and properly aligned pointer to *one past*\n+///   the last element, such that the offset from the end to the start pointer is\n+///   the length of the slice.\n+///\n+/// * The range must contain `N` consecutive properly initialized values of type `T`:\n+///\n+///     * The entire memory range of this slice must be contained within a single allocated object!\n+///       Slices can never span across multiple allocated objects.\n+///\n+/// * The memory referenced by the returned slice must not be mutated for the duration\n+///   of lifetime `'a`, except inside an `UnsafeCell`.\n+///\n+/// * The total length of the range must be no larger than `isize::MAX`.\n+///   See the safety documentation of [`pointer::offset`].\n+///\n+/// Note that a range created from [`slice::as_ptr_range`] fulfills these requirements.\n+///\n+/// # Caveat\n+///\n+/// The lifetime for the returned slice is inferred from its usage. To\n+/// prevent accidental misuse, it's suggested to tie the lifetime to whichever\n+/// source lifetime is safe in the context, such as by providing a helper\n+/// function taking the lifetime of a host value for the slice, or by explicit\n+/// annotation.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(slice_from_ptr_range)]\n+///\n+/// use core::slice;\n+///\n+/// let x = [1, 2, 3];\n+/// let range = x.as_ptr_range();\n+///\n+/// unsafe {\n+///     assert_eq!(slice::from_ptr_range(range), &x);\n+/// }\n+/// ```\n+///\n+/// [valid]: ptr#safety\n+#[unstable(feature = \"slice_from_ptr_range\", issue = \"89792\")]\n+pub unsafe fn from_ptr_range<'a, T>(range: Range<*const T>) -> &'a [T] {\n+    // SAFETY: the caller must uphold the safety contract for `from_ptr_range`.\n+    unsafe { from_raw_parts(range.start, range.end.offset_from(range.start) as usize) }\n+}\n+\n+/// Performs the same functionality as [`from_ptr_range`], except that a\n+/// mutable slice is returned.\n+///\n+/// # Safety\n+///\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * The `start` pointer of the range must be a [valid] and properly aligned pointer\n+///   to the first element of a slice.\n+///\n+/// * The `end` pointer must be a [valid] and properly aligned pointer to *one past*\n+///   the last element, such that the offset from the end to the start pointer is\n+///   the length of the slice.\n+///\n+/// * The range must contain `N` consecutive properly initialized values of type `T`:\n+///\n+///     * The entire memory range of this slice must be contained within a single allocated object!\n+///       Slices can never span across multiple allocated objects.\n+///\n+/// * The memory referenced by the returned slice must not be accessed through any other pointer\n+///   (not derived from the return value) for the duration of lifetime `'a`.\n+///   Both read and write accesses are forbidden.\n+///\n+/// * The total length of the range must be no larger than `isize::MAX`.\n+///   See the safety documentation of [`pointer::offset`].\n+///\n+/// Note that a range created from [`slice::as_mut_ptr_range`] fulfills these requirements.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(slice_from_ptr_range)]\n+///\n+/// use core::slice;\n+///\n+/// let mut x = [1, 2, 3];\n+/// let range = x.as_mut_ptr_range();\n+///\n+/// unsafe {\n+///     assert_eq!(slice::from_mut_ptr_range(range), &mut [1, 2, 3]);\n+/// }\n+/// ```\n+///\n+/// [valid]: ptr#safety\n+#[unstable(feature = \"slice_from_ptr_range\", issue = \"89792\")]\n+pub unsafe fn from_mut_ptr_range<'a, T>(range: Range<*mut T>) -> &'a mut [T] {\n+    // SAFETY: the caller must uphold the safety contract for `from_mut_ptr_range`.\n+    unsafe { from_raw_parts_mut(range.start, range.end.offset_from(range.start) as usize) }\n+}"}, {"sha": "2437f4afdeb5e860acf1ebce188c140d0a9058dc", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "patch": "@@ -46,6 +46,7 @@\n #![feature(pin_macro)]\n #![feature(sort_internals)]\n #![feature(slice_take)]\n+#![feature(slice_from_ptr_range)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(maybe_uninit_array_assume_init)]\n #![feature(maybe_uninit_write_slice)]"}, {"sha": "06a30d7096c775d4ef306f7d89fbcbd6ae5274d7", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "patch": "@@ -2,6 +2,7 @@ use core::cell::Cell;\n use core::cmp::Ordering;\n use core::mem::MaybeUninit;\n use core::result::Result::{Err, Ok};\n+use core::slice;\n \n #[test]\n fn test_position() {\n@@ -2480,3 +2481,24 @@ take_tests! {\n     (take_mut_oob_max_range_to_inclusive, (..=usize::MAX), None, empty_max_mut!()),\n     (take_mut_in_bounds_max_range_from, (usize::MAX..), Some(&mut [] as _), empty_max_mut!()),\n }\n+\n+#[test]\n+fn test_slice_from_ptr_range() {\n+    let arr = [\"foo\".to_owned(), \"bar\".to_owned()];\n+    let range = arr.as_ptr_range();\n+    unsafe {\n+        assert_eq!(slice::from_ptr_range(range), &arr);\n+    }\n+\n+    let mut arr = [1, 2, 3];\n+    let range = arr.as_mut_ptr_range();\n+    unsafe {\n+        assert_eq!(slice::from_mut_ptr_range(range), &mut [1, 2, 3]);\n+    }\n+\n+    let arr: [Vec<String>; 0] = [];\n+    let range = arr.as_ptr_range();\n+    unsafe {\n+        assert_eq!(slice::from_ptr_range(range), &arr);\n+    }\n+}"}, {"sha": "f0794fc0be37873976e3b4d8a973226b82084464", "filename": "src/doc/not_found.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/src%2Fdoc%2Fnot_found.md", "raw_url": "https://github.com/rust-lang/rust/raw/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/src%2Fdoc%2Fnot_found.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnot_found.md?ref=97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "patch": "@@ -84,7 +84,7 @@ function on_submit(event) {\n     if (form['from'].value === 'duckduckgo') {\n         document.location.href = form.action + '?q=' + encodeURIComponent(q + ' site:doc.rust-lang.org');\n     } else if (form['from'].value === 'library') {\n-        document.location.href = 'std/index.html?search=' + encodeURIComponent(q);\n+        document.location.href = '/std/index.html?search=' + encodeURIComponent(q);\n     }\n }\n "}, {"sha": "2a6b62ebfd552b80bc184bb2080c6f165ed3e0bc", "filename": "src/doc/rustdoc/src/what-to-include.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-to-include.md", "raw_url": "https://github.com/rust-lang/rust/raw/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-to-include.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-to-include.md?ref=97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "patch": "@@ -118,7 +118,7 @@ rustdoc --theme awesome.css src/lib.rs\n \n Here is an example of a new theme, [Ayu].\n \n-[Ayu]: https://github.com/rust-lang/rust/blob/master/src/librustdoc/html/static/themes/ayu.css\n+[Ayu]: https://github.com/rust-lang/rust/blob/master/src/librustdoc/html/static/css/themes/ayu.css\n [API Guidelines]: https://rust-lang.github.io/api-guidelines/documentation.html#rustdoc-does-not-show-unhelpful-implementation-details-c-hidden\n [Documentation tests]: documentation-tests.md\n [on this blog]: https://blog.guillaume-gomez.fr/articles/2016-09-16+Generating+doc+with+rustdoc+and+a+custom+theme"}, {"sha": "ebc6fe1412320cc1c775ac625bb44967f8cd019b", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-90847.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-90847.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-90847.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-90847.rs?ref=97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+#![feature(adt_const_params)]\n+\n+struct Foo<const A: [(); 0 + 0]> where [(); 0 + 0]: Sized;\n+\n+fn main() {}"}]}