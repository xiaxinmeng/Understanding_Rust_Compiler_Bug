{"sha": "f5af266b6d707da0f6a6cf388a93e14e38a8a1ef", "node_id": "C_kwDOAAsO6NoAKGY1YWYyNjZiNmQ3MDdkYTBmNmE2Y2YzODhhOTNlMTRlMzhhOGExZWY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-04T13:59:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-04T13:59:25Z"}, "message": "Address nits", "tree": {"sha": "77bcbb62e970e5bd6008e2cfc56e2e3ed52c670c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77bcbb62e970e5bd6008e2cfc56e2e3ed52c670c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5af266b6d707da0f6a6cf388a93e14e38a8a1ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5af266b6d707da0f6a6cf388a93e14e38a8a1ef", "html_url": "https://github.com/rust-lang/rust/commit/f5af266b6d707da0f6a6cf388a93e14e38a8a1ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5af266b6d707da0f6a6cf388a93e14e38a8a1ef/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe894756f83e12522be51bdba39267927dde3cc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe894756f83e12522be51bdba39267927dde3cc4", "html_url": "https://github.com/rust-lang/rust/commit/fe894756f83e12522be51bdba39267927dde3cc4"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "2e5400c42d0f840e7f2516ad4adcc315097e1def", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5af266b6d707da0f6a6cf388a93e14e38a8a1ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5af266b6d707da0f6a6cf388a93e14e38a8a1ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=f5af266b6d707da0f6a6cf388a93e14e38a8a1ef", "patch": "@@ -378,6 +378,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     )\n }\n \n+/// Normalize a type and process all resulting obligations, returning any errors\n pub fn fully_normalize<'a, 'tcx, T>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     cause: ObligationCause<'tcx>,\n@@ -412,6 +413,8 @@ where\n     Ok(resolved_value)\n }\n \n+/// Process an obligation (and any nested obligations that come from it) to\n+/// completion, returning any errors\n pub fn fully_solve_obligation<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     obligation: PredicateObligation<'tcx>,\n@@ -421,6 +424,8 @@ pub fn fully_solve_obligation<'a, 'tcx>(\n     engine.select_all_or_error(infcx)\n }\n \n+/// Process a set of obligations (and any nested obligations that come from them)\n+/// to completion\n pub fn fully_solve_obligations<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     obligations: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n@@ -430,6 +435,9 @@ pub fn fully_solve_obligations<'a, 'tcx>(\n     engine.select_all_or_error(infcx)\n }\n \n+/// Process a bound (and any nested obligations that come from it) to completion.\n+/// This is a convenience function for traits that have no generic arguments, such\n+/// as auto traits, and builtin traits like Copy or Sized.\n pub fn fully_solve_bound<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     cause: ObligationCause<'tcx>,"}, {"sha": "50e9b95a445fd7e340caf5b697c0c52737c77797", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f5af266b6d707da0f6a6cf388a93e14e38a8a1ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5af266b6d707da0f6a6cf388a93e14e38a8a1ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=f5af266b6d707da0f6a6cf388a93e14e38a8a1ef", "patch": "@@ -707,6 +707,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         ty: Ty<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n     ) -> Option<(Ty<'tcx>, DefId)> {\n         let tcx = self.tcx();\n         if tcx.features().trait_upcasting {\n@@ -720,7 +721,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n \n         let obligation = traits::Obligation::new(\n-            ObligationCause::dummy(),\n+            cause.clone(),\n             param_env,\n             ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n         );\n@@ -735,7 +736,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 item_def_id: tcx.lang_items().deref_target()?,\n                 substs: trait_ref.substs,\n             },\n-            ObligationCause::dummy(),\n+            cause.clone(),\n             0,\n             // We're *intentionally* throwing these away,\n             // since we don't actually use them.\n@@ -809,7 +810,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let target_trait_did = principal_def_id_b.unwrap();\n                         let source_trait_ref = principal_a.with_self_ty(self.tcx(), source);\n                         if let Some((deref_output_ty, deref_output_trait_did)) = self\n-                            .need_migrate_deref_output_trait_object(source, obligation.param_env)\n+                            .need_migrate_deref_output_trait_object(\n+                                source,\n+                                obligation.param_env,\n+                                &obligation.cause,\n+                            )\n                         {\n                             if deref_output_trait_did == target_trait_did {\n                                 self.tcx().struct_span_lint_hir("}]}