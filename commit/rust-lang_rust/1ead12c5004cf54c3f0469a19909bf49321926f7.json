{"sha": "1ead12c5004cf54c3f0469a19909bf49321926f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYWQxMmM1MDA0Y2Y1NGMzZjA0NjlhMTk5MDliZjQ5MzIxOTI2Zjc=", "commit": {"author": {"name": "Donald Robertson", "email": "donaldarobertson89@gmail.com", "date": "2018-05-29T08:20:18Z"}, "committer": {"name": "Donald Robertson", "email": "donaldarobertson89@gmail.com", "date": "2018-06-04T18:43:03Z"}, "message": "Adding handling and tests for custom type with implemented expect method", "tree": {"sha": "b9cfa6fca0c4ed1d3971e87deaeeb59dfdd6caf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9cfa6fca0c4ed1d3971e87deaeeb59dfdd6caf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ead12c5004cf54c3f0469a19909bf49321926f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ead12c5004cf54c3f0469a19909bf49321926f7", "html_url": "https://github.com/rust-lang/rust/commit/1ead12c5004cf54c3f0469a19909bf49321926f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ead12c5004cf54c3f0469a19909bf49321926f7/comments", "author": null, "committer": null, "parents": [{"sha": "fe8c9d596543955e0513b239669916b55693dff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe8c9d596543955e0513b239669916b55693dff4", "html_url": "https://github.com/rust-lang/rust/commit/fe8c9d596543955e0513b239669916b55693dff4"}], "stats": {"total": 100, "additions": 63, "deletions": 37}, "files": [{"sha": "38413c5aa4da9cd5a92a9a37e39a83b6b3c03161", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ead12c5004cf54c3f0469a19909bf49321926f7/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ead12c5004cf54c3f0469a19909bf49321926f7/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=1ead12c5004cf54c3f0469a19909bf49321926f7", "patch": "@@ -1006,11 +1006,13 @@ fn lint_expect_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: Span, n\n             return;\n         }\n \n-        let self_ty = cx.tables.expr_ty(self_expr);\n-        let closure = match match_type(cx, self_ty, &paths::OPTION) {\n-            true => \"||\",\n-            false => \"|_|\",\n-        };\n+        let self_type = cx.tables.expr_ty(self_expr);\n+        let known_types = &[&paths::OPTION, &paths::RESULT];\n+\n+        // if not a known type, return early\n+        if known_types.iter().all(|&k| !match_type(cx, self_type, k)) {\n+            return;\n+        }\n \n         // don't lint for constant values\n         let owner_def = cx.tcx.hir.get_parent_did(arg.id);\n@@ -1019,6 +1021,11 @@ fn lint_expect_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: Span, n\n             return;\n         }\n \n+        let closure = match match_type(cx, self_type, &paths::OPTION) {\n+            true => \"||\",\n+            false => \"|_|\",\n+        };\n+\n         let sugg: Cow<_> = snippet(cx, arg.span, \"..\");\n         let span_replace_word = method_span.with_hi(span.hi());\n         "}, {"sha": "b04c008ba239138be1099b88e308fa8df2239d52", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ead12c5004cf54c3f0469a19909bf49321926f7/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ead12c5004cf54c3f0469a19909bf49321926f7/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=1ead12c5004cf54c3f0469a19909bf49321926f7", "patch": "@@ -344,6 +344,16 @@ fn or_fun_call() {\n \n /// Checks implementation of the `EXPECT_FUN_CALL` lint\n fn expect_fun_call() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Self { Foo }\n+\n+        fn expect(&self, msg: &str) {\n+            panic!(\"{}\", msg)\n+        }\n+    }\n+\n     let with_some = Some(\"value\");\n     with_some.expect(\"error\");\n \n@@ -369,6 +379,15 @@ fn expect_fun_call() {\n \n     let with_err_and_as_str: Result<(), ()> = Err(());\n     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+\n+    let with_dummy_type = Foo::new();\n+    with_dummy_type.expect(\"another test string\");\n+\n+    let with_dummy_type_and_format = Foo::new();\n+    with_dummy_type_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+\n+    let with_dummy_type_and_as_str = Foo::new();\n+    with_dummy_type_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n }\n \n /// Checks implementation of `ITER_NTH` lint"}, {"sha": "65b5589a9c120e1712906e076d553174740450d6", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1ead12c5004cf54c3f0469a19909bf49321926f7/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ead12c5004cf54c3f0469a19909bf49321926f7/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=1ead12c5004cf54c3f0469a19909bf49321926f7", "patch": "@@ -424,105 +424,105 @@ error: use of `unwrap_or` followed by a function call\n     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:355:26\n+   --> $DIR/methods.rs:365:26\n     |\n-355 |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+365 |     with_none_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(&format!(\"Error {}: fake error\", error_code)))`\n     |\n     = note: `-D expect-fun-call` implied by `-D warnings`\n \n error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:358:26\n+   --> $DIR/methods.rs:368:26\n     |\n-358 |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+368 |     with_none_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(format!(\"Error {}: fake error\", error_code).as_str()))`\n \n error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:368:25\n+   --> $DIR/methods.rs:378:25\n     |\n-368 |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n+378 |     with_err_and_format.expect(&format!(\"Error {}: fake error\", error_code));\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(&format!(\"Error {}: fake error\", error_code)))`\n \n error: use of `expect` followed by a function call\n-   --> $DIR/methods.rs:371:25\n+   --> $DIR/methods.rs:381:25\n     |\n-371 |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+381 |     with_err_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(format!(\"Error {}: fake error\", error_code).as_str()))`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:382:23\n+   --> $DIR/methods.rs:401:23\n     |\n-382 |         let bad_vec = some_vec.iter().nth(3);\n+401 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:383:26\n+   --> $DIR/methods.rs:402:26\n     |\n-383 |         let bad_slice = &some_vec[..].iter().nth(3);\n+402 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:384:31\n+   --> $DIR/methods.rs:403:31\n     |\n-384 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+403 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:385:29\n+   --> $DIR/methods.rs:404:29\n     |\n-385 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+404 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:390:23\n+   --> $DIR/methods.rs:409:23\n     |\n-390 |         let bad_vec = some_vec.iter_mut().nth(3);\n+409 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:393:26\n+   --> $DIR/methods.rs:412:26\n     |\n-393 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+412 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:396:29\n+   --> $DIR/methods.rs:415:29\n     |\n-396 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+415 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:408:13\n+   --> $DIR/methods.rs:427:13\n     |\n-408 |     let _ = some_vec.iter().skip(42).next();\n+427 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:409:13\n+   --> $DIR/methods.rs:428:13\n     |\n-409 |     let _ = some_vec.iter().cycle().skip(42).next();\n+428 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:410:13\n+   --> $DIR/methods.rs:429:13\n     |\n-410 |     let _ = (1..10).skip(10).next();\n+429 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:411:14\n+   --> $DIR/methods.rs:430:14\n     |\n-411 |     let _ = &some_vec[..].iter().skip(3).next();\n+430 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:420:13\n+   --> $DIR/methods.rs:439:13\n     |\n-420 |     let _ = opt.unwrap();\n+439 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}