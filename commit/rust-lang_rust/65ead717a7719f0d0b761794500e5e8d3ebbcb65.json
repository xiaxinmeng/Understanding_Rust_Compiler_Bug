{"sha": "65ead717a7719f0d0b761794500e5e8d3ebbcb65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZWFkNzE3YTc3MTlmMGQwYjc2MTc5NDUwMGU1ZThkM2ViYmNiNjU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-21T15:12:51Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-21T15:53:45Z"}, "message": "she -> they in Dining Philosophers\n\nAlso, when checking for common gendered words elsewhere, I found one 'he', moved to 'they' as well.\n\nhttps://github.com/rust-lang/rust/pull/25640#issuecomment-104304643", "tree": {"sha": "b6cda9760f933685fe61d99b6a8a007616146c96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6cda9760f933685fe61d99b6a8a007616146c96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ead717a7719f0d0b761794500e5e8d3ebbcb65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ead717a7719f0d0b761794500e5e8d3ebbcb65", "html_url": "https://github.com/rust-lang/rust/commit/65ead717a7719f0d0b761794500e5e8d3ebbcb65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ead717a7719f0d0b761794500e5e8d3ebbcb65/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd3bbd78e24f640754ccd223611d1ef412a6106", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd3bbd78e24f640754ccd223611d1ef412a6106", "html_url": "https://github.com/rust-lang/rust/commit/7bd3bbd78e24f640754ccd223611d1ef412a6106"}], "stats": {"total": 88, "additions": 45, "deletions": 43}, "files": [{"sha": "7e37473ac8feaf1aeb2eb0c943d0593f6689753c", "filename": "src/doc/trpl/dining-philosophers.md", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/65ead717a7719f0d0b761794500e5e8d3ebbcb65/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/65ead717a7719f0d0b761794500e5e8d3ebbcb65/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md?ref=65ead717a7719f0d0b761794500e5e8d3ebbcb65", "patch": "@@ -2,26 +2,28 @@\n \n For our second project, let\u2019s look at a classic concurrency problem. It\u2019s\n called \u2018the dining philosophers\u2019. It was originally conceived by Dijkstra in\n-1965, but we\u2019ll use the version from [this paper][paper] by Tony Hoare in 1985.\n+1965, but we\u2019ll use a lightly adapted version from [this paper][paper] by Tony\n+Hoare in 1985.\n \n [paper]: http://www.usingcsp.com/cspbook.pdf\n \n > In ancient times, a wealthy philanthropist endowed a College to accommodate\n-> five eminent philosophers. Each philosopher had a room in which she could\n-> engage in her professional activity of thinking; there was also a common\n+> five eminent philosophers. Each philosopher had a room in which they could\n+> engage in their professional activity of thinking; there was also a common\n > dining room, furnished with a circular table, surrounded by five chairs, each\n > labelled by the name of the philosopher who was to sit in it. They sat\n > anticlockwise around the table. To the left of each philosopher there was\n > laid a golden fork, and in the centre stood a large bowl of spaghetti, which\n-> was constantly replenished. A philosopher was expected to spend most of her\n-> time thinking; but when she felt hungry, she went to the dining room, sat down\n-> in her own chair, picked up her own fork on her left, and plunged it into the\n-> spaghetti. But such is the tangled nature of spaghetti that a second fork is\n-> required to carry it to the mouth. The philosopher therefore had also to pick\n-> up the fork on her right. When she was finished she would put down both her\n-> forks, get up from her chair, and continue thinking. Of course, a fork can be\n-> used by only one philosopher at a time. If the other philosopher wants it, she\n-> just has to wait until the fork is available again.\n+> was constantly replenished. A philosopher was expected to spend most of\n+> their time thinking; but when they felt hungry, they went to the dining\n+> room, sat down in their own chair, picked up their own fork on their left,\n+> and plunged it into the spaghetti. But such is the tangled nature of\n+> spaghetti that a second fork is required to carry it to the mouth. The\n+> philosopher therefore had also to pick up the fork on their right. When\n+> they were finished they would put down both their forks, get up from their\n+> chair, and continue thinking. Of course, a fork can be used by only one\n+> philosopher at a time. If the other philosopher wants it, they just have\n+> to wait until the fork is available again.\n \n This classic problem shows off a few different elements of concurrency. The\n reason is that it's actually slightly tricky to implement: a simple\n@@ -60,10 +62,10 @@ impl Philosopher {\n }\n \n fn main() {\n-    let p1 = Philosopher::new(\"Baruch Spinoza\");\n+    let p1 = Philosopher::new(\"Judith Butler\");\n     let p2 = Philosopher::new(\"Gilles Deleuze\");\n     let p3 = Philosopher::new(\"Karl Marx\");\n-    let p4 = Philosopher::new(\"Friedrich Nietzsche\");\n+    let p4 = Philosopher::new(\"Emma Goldman\");\n     let p5 = Philosopher::new(\"Michel Foucault\");\n }\n ```\n@@ -159,10 +161,10 @@ look at `main()` again:\n # }\n # \n fn main() {\n-    let p1 = Philosopher::new(\"Baruch Spinoza\");\n+    let p1 = Philosopher::new(\"Judith Butler\");\n     let p2 = Philosopher::new(\"Gilles Deleuze\");\n     let p3 = Philosopher::new(\"Karl Marx\");\n-    let p4 = Philosopher::new(\"Friedrich Nietzsche\");\n+    let p4 = Philosopher::new(\"Emma Goldman\");\n     let p5 = Philosopher::new(\"Michel Foucault\");\n }\n ```\n@@ -176,10 +178,10 @@ that `new()` function, it would look like this:\n #     name: String,\n # }\n fn main() {\n-    let p1 = Philosopher { name: \"Baruch Spinoza\".to_string() };\n+    let p1 = Philosopher { name: \"Judith Butler\".to_string() };\n     let p2 = Philosopher { name: \"Gilles Deleuze\".to_string() };\n     let p3 = Philosopher { name: \"Karl Marx\".to_string() };\n-    let p4 = Philosopher { name: \"Friedrich Nietzche\".to_string() };\n+    let p4 = Philosopher { name: \"Emma Goldman\".to_string() };\n     let p5 = Philosopher { name: \"Michel Foucault\".to_string() };\n }\n ```\n@@ -211,10 +213,10 @@ impl Philosopher {\n \n fn main() {\n     let philosophers = vec![\n-        Philosopher::new(\"Baruch Spinoza\"),\n+        Philosopher::new(\"Judith Butler\"),\n         Philosopher::new(\"Gilles Deleuze\"),\n         Philosopher::new(\"Karl Marx\"),\n-        Philosopher::new(\"Friedrich Nietzsche\"),\n+        Philosopher::new(\"Emma Goldman\"),\n         Philosopher::new(\"Michel Foucault\"),\n     ];\n \n@@ -247,10 +249,10 @@ mention they\u2019re done eating. Running this program should give you the followin\n output:\n \n ```text\n-Baruch Spinoza is done eating.\n+Judith Butler is done eating.\n Gilles Deleuze is done eating.\n Karl Marx is done eating.\n-Friedrich Nietzsche is done eating.\n+Emma Goldman is done eating.\n Michel Foucault is done eating.\n ```\n \n@@ -285,10 +287,10 @@ impl Philosopher {\n \n fn main() {\n     let philosophers = vec![\n-        Philosopher::new(\"Baruch Spinoza\"),\n+        Philosopher::new(\"Judith Butler\"),\n         Philosopher::new(\"Gilles Deleuze\"),\n         Philosopher::new(\"Karl Marx\"),\n-        Philosopher::new(\"Friedrich Nietzsche\"),\n+        Philosopher::new(\"Emma Goldman\"),\n         Philosopher::new(\"Michel Foucault\"),\n     ];\n \n@@ -323,14 +325,14 @@ simulate the time it takes a philosopher to eat.\n If you run this program, you should see each philosopher eat in turn:\n \n ```text\n-Baruch Spinoza is eating.\n-Baruch Spinoza is done eating.\n+Judith Butler is eating.\n+Judith Butler is done eating.\n Gilles Deleuze is eating.\n Gilles Deleuze is done eating.\n Karl Marx is eating.\n Karl Marx is done eating.\n-Friedrich Nietzsche is eating.\n-Friedrich Nietzsche is done eating.\n+Emma Goldman is eating.\n+Emma Goldman is done eating.\n Michel Foucault is eating.\n Michel Foucault is done eating.\n ```\n@@ -366,10 +368,10 @@ impl Philosopher {\n \n fn main() {\n     let philosophers = vec![\n-        Philosopher::new(\"Baruch Spinoza\"),\n+        Philosopher::new(\"Judith Butler\"),\n         Philosopher::new(\"Gilles Deleuze\"),\n         Philosopher::new(\"Karl Marx\"),\n-        Philosopher::new(\"Friedrich Nietzsche\"),\n+        Philosopher::new(\"Emma Goldman\"),\n         Philosopher::new(\"Michel Foucault\"),\n     ];\n \n@@ -458,11 +460,11 @@ We have multi-threading!\n ```text\n Gilles Deleuze is eating.\n Gilles Deleuze is done eating.\n-Friedrich Nietzsche is eating.\n-Friedrich Nietzsche is done eating.\n+Emma Goldman is eating.\n+Emma Goldman is done eating.\n Michel Foucault is eating.\n-Baruch Spinoza is eating.\n-Baruch Spinoza is done eating.\n+Judith Butler is eating.\n+Judith Butler is done eating.\n Karl Marx is eating.\n Karl Marx is done eating.\n Michel Foucault is done eating.\n@@ -532,10 +534,10 @@ fn main() {\n     ]});\n \n     let philosophers = vec![\n-        Philosopher::new(\"Baruch Spinoza\", 0, 1),\n+        Philosopher::new(\"Judith Butler\", 0, 1),\n         Philosopher::new(\"Gilles Deleuze\", 1, 2),\n         Philosopher::new(\"Karl Marx\", 2, 3),\n-        Philosopher::new(\"Friedrich Nietzsche\", 3, 4),\n+        Philosopher::new(\"Emma Goldman\", 3, 4),\n         Philosopher::new(\"Michel Foucault\", 0, 4),\n     ];\n \n@@ -643,10 +645,10 @@ count will go up, and when each thread ends, it will go back down.\n \n ```rust,ignore\n let philosophers = vec![\n-    Philosopher::new(\"Baruch Spinoza\", 0, 1),\n+    Philosopher::new(\"Judith Butler\", 0, 1),\n     Philosopher::new(\"Gilles Deleuze\", 1, 2),\n     Philosopher::new(\"Karl Marx\", 2, 3),\n-    Philosopher::new(\"Friedrich Nietzsche\", 3, 4),\n+    Philosopher::new(\"Emma Goldman\", 3, 4),\n     Philosopher::new(\"Michel Foucault\", 0, 4),\n ];\n ```\n@@ -679,12 +681,12 @@ and so you\u2019ll get some output like this:\n \n ```text\n Gilles Deleuze is eating.\n-Friedrich Nietzsche is eating.\n-Friedrich Nietzsche is done eating.\n+Emma Goldman is eating.\n+Emma Goldman is done eating.\n Gilles Deleuze is done eating.\n-Baruch Spinoza is eating.\n+Judith Butler is eating.\n Karl Marx is eating.\n-Baruch Spinoza is done eating.\n+Judith Butler is done eating.\n Michel Foucault is eating.\n Karl Marx is done eating.\n Michel Foucault is done eating."}, {"sha": "1f660449593fb6fd46ba7e986a9622143f88eacd", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ead717a7719f0d0b761794500e5e8d3ebbcb65/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ead717a7719f0d0b761794500e5e8d3ebbcb65/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=65ead717a7719f0d0b761794500e5e8d3ebbcb65", "patch": "@@ -144,7 +144,7 @@\n //!     // At the end of the method, gadget_owner, gadget1 and gadget2 get\n //!     // destroyed. There are now no strong (`Rc<T>`) references to the gadgets.\n //!     // Once they get destroyed, the Gadgets get destroyed. This zeroes the\n-//!     // reference count on Gadget Man, so he gets destroyed as well.\n+//!     // reference count on Gadget Man, they get destroyed as well.\n //! }\n //! ```\n "}]}