{"sha": "7bf7bd6a75c38ed71df69cb9149eb7fdce23ced5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZjdiZDZhNzVjMzhlZDcxZGY2OWNiOTE0OWViN2ZkY2UyM2NlZDU=", "commit": {"author": {"name": "Aidan Cully", "email": "github@aidan.users.panix.com", "date": "2014-12-05T22:20:44Z"}, "committer": {"name": "Aidan Cully", "email": "github@aidan.users.panix.com", "date": "2014-12-05T22:20:44Z"}, "message": "work around portability issue on FreeBSD, in which the key returned from\npthread_key_create can be 0.", "tree": {"sha": "5603049884b85f5f91a7287bbbdb0a70f891378d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5603049884b85f5f91a7287bbbdb0a70f891378d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bf7bd6a75c38ed71df69cb9149eb7fdce23ced5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf7bd6a75c38ed71df69cb9149eb7fdce23ced5", "html_url": "https://github.com/rust-lang/rust/commit/7bf7bd6a75c38ed71df69cb9149eb7fdce23ced5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bf7bd6a75c38ed71df69cb9149eb7fdce23ced5/comments", "author": {"login": "aidancully", "id": 503301, "node_id": "MDQ6VXNlcjUwMzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/503301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidancully", "html_url": "https://github.com/aidancully", "followers_url": "https://api.github.com/users/aidancully/followers", "following_url": "https://api.github.com/users/aidancully/following{/other_user}", "gists_url": "https://api.github.com/users/aidancully/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidancully/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidancully/subscriptions", "organizations_url": "https://api.github.com/users/aidancully/orgs", "repos_url": "https://api.github.com/users/aidancully/repos", "events_url": "https://api.github.com/users/aidancully/events{/privacy}", "received_events_url": "https://api.github.com/users/aidancully/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aidancully", "id": 503301, "node_id": "MDQ6VXNlcjUwMzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/503301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidancully", "html_url": "https://github.com/aidancully", "followers_url": "https://api.github.com/users/aidancully/followers", "following_url": "https://api.github.com/users/aidancully/following{/other_user}", "gists_url": "https://api.github.com/users/aidancully/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidancully/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidancully/subscriptions", "organizations_url": "https://api.github.com/users/aidancully/orgs", "repos_url": "https://api.github.com/users/aidancully/repos", "events_url": "https://api.github.com/users/aidancully/events{/privacy}", "received_events_url": "https://api.github.com/users/aidancully/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95d17711397d63425688d18140a58723caddff8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95d17711397d63425688d18140a58723caddff8e", "html_url": "https://github.com/rust-lang/rust/commit/95d17711397d63425688d18140a58723caddff8e"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "b33e74248d2756ea411c791cd0d1d572c9cfd527", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7bf7bd6a75c38ed71df69cb9149eb7fdce23ced5/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bf7bd6a75c38ed71df69cb9149eb7fdce23ced5/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=7bf7bd6a75c38ed71df69cb9149eb7fdce23ced5", "patch": "@@ -185,7 +185,23 @@ impl StaticKey {\n     }\n \n     unsafe fn lazy_init(&self) -> uint {\n-        let key = imp::create(self.dtor);\n+        // POSIX allows the key created here to be 0, but the compare_and_swap\n+        // below relies on using 0 as a sentinel value to check who won the\n+        // race to set the shared TLS key. As far as I know, there is no\n+        // guaranteed value that cannot be returned as a posix_key_create key,\n+        // so there is no value we can initialize the inner key with to\n+        // prove that it has not yet been set. As such, we'll continue using a\n+        // value of 0, but with some gyrations to make sure we have a non-0\n+        // value returned from the creation routine.\n+        // TODO: this is clearly a hack, and should be cleaned up.\n+        let key1 = imp::create(self.dtor);\n+        let key = if key1 != 0 {\n+            key1\n+        } else {\n+            let key2 = imp::create(self.dtor);\n+            imp::destroy(key1);\n+            key2\n+        };\n         assert!(key != 0);\n         match self.inner.key.compare_and_swap(0, key as uint, atomic::SeqCst) {\n             // The CAS succeeded, so we've created the actual key"}]}