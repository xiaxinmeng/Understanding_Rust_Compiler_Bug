{"sha": "5c60145323d6e42cee5ad11efdabbd753b667d63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNjAxNDUzMjNkNmU0MmNlZTVhZDExZWZkYWJiZDc1M2I2NjdkNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-27T10:49:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-27T10:49:11Z"}, "message": "Auto merge of #24820 - bradking:fix-windows-process-spawn-command-line, r=alexcrichton\n\nFix `make_command_line` for the case of backslashes at the end of an\r\nargument requiring quotes.  We must encode the command and arguments\r\nsuch that `CommandLineToArgvW` recovers them in the spawned process.\r\nSimplify the logic by using a running count of backslashes as they\r\nare encountered instead of looking ahead for quotes following them.\r\n\r\nExtend `test_make_command_line` to additionally cover:\r\n\r\n* a leading quote in an argument that requires quotes,\r\n* a backslash before a quote in an argument that requires quotes,\r\n* a backslash at the end of an argument that requires quotes, and\r\n* a backslash at the end of an argument that does not require quotes.", "tree": {"sha": "5cbd79def3d3749f03e9561c957eba75b82044bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cbd79def3d3749f03e9561c957eba75b82044bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c60145323d6e42cee5ad11efdabbd753b667d63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c60145323d6e42cee5ad11efdabbd753b667d63", "html_url": "https://github.com/rust-lang/rust/commit/5c60145323d6e42cee5ad11efdabbd753b667d63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c60145323d6e42cee5ad11efdabbd753b667d63/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ab2b3a259a7a0418c6dd66dc9f11f20b0f6eff", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ab2b3a259a7a0418c6dd66dc9f11f20b0f6eff", "html_url": "https://github.com/rust-lang/rust/commit/f4ab2b3a259a7a0418c6dd66dc9f11f20b0f6eff"}, {"sha": "e90408e91596da9fd81e77012e74bfe94b26dd83", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90408e91596da9fd81e77012e74bfe94b26dd83", "html_url": "https://github.com/rust-lang/rust/commit/e90408e91596da9fd81e77012e74bfe94b26dd83"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "2e5585d2f4389a8a51307594c6ecd49062d0a4e9", "filename": "src/libstd/sys/windows/process2.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5c60145323d6e42cee5ad11efdabbd753b667d63/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c60145323d6e42cee5ad11efdabbd753b667d63/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs?ref=5c60145323d6e42cee5ad11efdabbd753b667d63", "patch": "@@ -367,6 +367,8 @@ fn zeroed_process_information() -> libc::types::os::arch::extra::PROCESS_INFORMA\n \n // Produces a wide string *without terminating null*\n fn make_command_line(prog: &OsStr, args: &[OsString]) -> Vec<u16> {\n+    // Encode the command and arguments in a command line string such\n+    // that the spawned process may recover them using CommandLineToArgvW.\n     let mut cmd: Vec<u16> = Vec::new();\n     append_arg(&mut cmd, prog);\n     for arg in args {\n@@ -387,30 +389,27 @@ fn make_command_line(prog: &OsStr, args: &[OsString]) -> Vec<u16> {\n         }\n \n         let mut iter = arg.encode_wide();\n+        let mut backslashes: usize = 0;\n         while let Some(x) = iter.next() {\n-            if x == '\"' as u16 {\n-                // escape quotes\n-                cmd.push('\\\\' as u16);\n-                cmd.push('\"' as u16);\n-            } else if x == '\\\\' as u16 {\n-                // is this a run of backslashes followed by a \" ?\n-                if iter.clone().skip_while(|y| *y == '\\\\' as u16).next() == Some('\"' as u16) {\n-                    // Double it ... NOTE: this behavior is being\n-                    // preserved as it's been part of Rust for a long\n-                    // time, but no one seems to know exactly why this\n-                    // is the right thing to do.\n-                    cmd.push('\\\\' as u16);\n-                    cmd.push('\\\\' as u16);\n-                } else {\n-                    // Push it through unescaped\n-                    cmd.push('\\\\' as u16);\n-                }\n+            if x == '\\\\' as u16 {\n+                backslashes += 1;\n             } else {\n-                cmd.push(x)\n+                if x == '\"' as u16 {\n+                    // Add n+1 backslashes to total 2n+1 before internal '\"'.\n+                    for _ in 0..(backslashes+1) {\n+                        cmd.push('\\\\' as u16);\n+                    }\n+                }\n+                backslashes = 0;\n             }\n+            cmd.push(x);\n         }\n \n         if quote {\n+            // Add n backslashes to total 2n before ending '\"'.\n+            for _ in 0..backslashes {\n+                cmd.push('\\\\' as u16);\n+            }\n             cmd.push('\"' as u16);\n         }\n     }\n@@ -486,6 +485,10 @@ mod tests {\n             test_wrapper(\"echo\", &[\"a b c\"]),\n             \"echo \\\"a b c\\\"\"\n         );\n+        assert_eq!(\n+            test_wrapper(\"echo\", &[\"\\\" \\\\\\\" \\\\\", \"\\\\\"]),\n+            \"echo \\\"\\\\\\\" \\\\\\\\\\\\\\\" \\\\\\\\\\\" \\\\\"\n+        );\n         assert_eq!(\n             test_wrapper(\"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\", &[]),\n             \"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\""}]}