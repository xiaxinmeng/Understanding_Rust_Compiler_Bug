{"sha": "90dbf59b920054e5808718f4a54323e3653348aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZGJmNTliOTIwMDU0ZTU4MDg3MThmNGE1NDMyM2UzNjUzMzQ4YWE=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-17T13:35:20Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-02-27T19:06:17Z"}, "message": "Fix some imports and paths", "tree": {"sha": "63d7884813dae8f640e9b50d534444a200a5046a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63d7884813dae8f640e9b50d534444a200a5046a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90dbf59b920054e5808718f4a54323e3653348aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90dbf59b920054e5808718f4a54323e3653348aa", "html_url": "https://github.com/rust-lang/rust/commit/90dbf59b920054e5808718f4a54323e3653348aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90dbf59b920054e5808718f4a54323e3653348aa/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d691bd9cee83a4bd49b02849cc3095eb6fc23d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d691bd9cee83a4bd49b02849cc3095eb6fc23d7", "html_url": "https://github.com/rust-lang/rust/commit/9d691bd9cee83a4bd49b02849cc3095eb6fc23d7"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "32a168619dfb3267cdac4f39e3084fe5ddd05a26", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90dbf59b920054e5808718f4a54323e3653348aa/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dbf59b920054e5808718f4a54323e3653348aa/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=90dbf59b920054e5808718f4a54323e3653348aa", "patch": "@@ -344,9 +344,6 @@ extern crate unwind;\n // testing gives test-std access to real-std lang items and globals. See #2912\n #[cfg(test)] extern crate std as realstd;\n \n-#[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n-extern crate fortanix_sgx_abi;\n-\n // The standard macros that are not built-in to the compiler.\n #[macro_use]\n mod macros;"}, {"sha": "d84b6154cbebf401dc14110d01aeec20e8557ad3", "filename": "src/libstd/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90dbf59b920054e5808718f4a54323e3653348aa/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dbf59b920054e5808718f4a54323e3653348aa/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=90dbf59b920054e5808718f4a54323e3653348aa", "patch": "@@ -22,7 +22,7 @@ pub fn read(fd: Fd, buf: &mut [u8]) -> IoResult<usize> {\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub fn read_alloc(fd: Fd) -> IoResult<Vec<u8>> {\n     unsafe {\n-        let userbuf = ByteBuffer { data: ::ptr::null_mut(), len: 0 };\n+        let userbuf = ByteBuffer { data: crate::ptr::null_mut(), len: 0 };\n         let mut userbuf = alloc::User::new_from_enclave(&userbuf);\n         raw::read_alloc(fd, userbuf.as_raw_mut_ptr()).from_sgx_result()?;\n         Ok(userbuf.copy_user_buffer())"}, {"sha": "8c60bddc23839c9b5b84e61cbc269a981f6acec2", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90dbf59b920054e5808718f4a54323e3653348aa/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dbf59b920054e5808718f4a54323e3653348aa/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=90dbf59b920054e5808718f4a54323e3653348aa", "patch": "@@ -39,7 +39,6 @@ mod imp {\n     use libc::{sigaltstack, SIGSTKSZ, SS_DISABLE};\n     use libc::{sigaction, SIGBUS, SIG_DFL,\n                SA_SIGINFO, SA_ONSTACK, sighandler_t};\n-    use libc;\n     use libc::{mmap, munmap};\n     use libc::{SIGSEGV, PROT_READ, PROT_WRITE, MAP_PRIVATE, MAP_ANON};\n     use libc::MAP_FAILED;"}, {"sha": "206443a6736922a9d5c91ff5c3bc8650e5cbbbbe", "filename": "src/libstd/sys_common/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90dbf59b920054e5808718f4a54323e3653348aa/src%2Flibstd%2Fsys_common%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dbf59b920054e5808718f4a54323e3653348aa/src%2Flibstd%2Fsys_common%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Futil.rs?ref=90dbf59b920054e5808718f4a54323e3653348aa", "patch": "@@ -11,7 +11,7 @@ pub fn dumb_print(args: fmt::Arguments) {\n \n // Other platforms should use the appropriate platform-specific mechanism for\n // aborting the process.  If no platform-specific mechanism is available,\n-// ::intrinsics::abort() may be used instead.  The above implementations cover\n+// crate::intrinsics::abort() may be used instead.  The above implementations cover\n // all targets currently supported by libstd.\n \n pub fn abort(args: fmt::Arguments) -> ! {"}]}