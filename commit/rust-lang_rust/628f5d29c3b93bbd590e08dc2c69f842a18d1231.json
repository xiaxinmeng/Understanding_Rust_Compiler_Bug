{"sha": "628f5d29c3b93bbd590e08dc2c69f842a18d1231", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOGY1ZDI5YzNiOTNiYmQ1OTBlMDhkYzJjNjlmODQyYTE4ZDEyMzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-02T18:46:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-05T22:57:01Z"}, "message": "std: Stabilize the `ffi` module\n\nThe two main sub-modules, `c_str` and `os_str`, have now had some time to bake\nin the standard library. This commits performs a sweep over the modules adding\nvarious stability tags.\n\nThe following APIs are now marked `#[stable]`\n\n* `OsString`\n* `OsStr`\n* `OsString::from_string`\n* `OsString::from_str`\n* `OsString::new`\n* `OsString::into_string`\n* `OsString::push` (renamed from `push_os_str`, added an `AsOsStr` bound)\n* various trait implementations for `OsString`\n* `OsStr::from_str`\n* `OsStr::to_str`\n* `OsStr::to_string_lossy`\n* `OsStr::to_os_string`\n* various trait implementations for `OsStr`\n* `CString`\n* `CStr`\n* `NulError`\n* `CString::new` - this API's implementation may change as a result of\n  rust-lang/rfcs#912 but the usage of `CString::new(thing)` looks like it is\n  unlikely to change. Additionally, the `IntoBytes` bound is also likely to\n  change but the set of implementors for the trait will not change (despite the\n  trait perhaps being renamed).\n* `CString::from_vec_unchecked`\n* `CString::as_bytes`\n* `CString::as_bytes_with_nul`\n* `NulError::nul_position`\n* `NulError::into_vec`\n* `CStr::from_ptr`\n* `CStr::as_ptr`\n* `CStr::to_bytes`\n* `CStr::to_bytes_with_nul`\n* various trait implementations for `CStr`\n\nThe following APIs remain `#[unstable]`\n\n* `OsStr*Ext` traits remain unstable as the organization of `os::platform` is\n  uncertain still and the traits may change location.\n* `AsOsStr` remains unstable as generic conversion traits are likely to be\n  rethought soon.\n\nThe following APIs were deprecated\n\n* `OsString::push_os_str` is now called `push` and takes `T: AsOsStr` instead (a\n  superset of the previous functionality).", "tree": {"sha": "ad05df7b6bcbbc9b26eb5eb243626014add1cedb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad05df7b6bcbbc9b26eb5eb243626014add1cedb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/628f5d29c3b93bbd590e08dc2c69f842a18d1231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/628f5d29c3b93bbd590e08dc2c69f842a18d1231", "html_url": "https://github.com/rust-lang/rust/commit/628f5d29c3b93bbd590e08dc2c69f842a18d1231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/628f5d29c3b93bbd590e08dc2c69f842a18d1231/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68740b405404a3f885e388c8d31722797d519c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/68740b405404a3f885e388c8d31722797d519c30", "html_url": "https://github.com/rust-lang/rust/commit/68740b405404a3f885e388c8d31722797d519c30"}], "stats": {"total": 118, "additions": 89, "deletions": 29}, "files": [{"sha": "a5d087b6dd2daaefff81c9c21b1c4e3b789fd6dd", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -22,7 +22,6 @@\n #![feature(unicode)]\n #![feature(core)]\n #![feature(path)]\n-#![feature(os)]\n #![feature(io)]\n #![feature(fs)]\n #![feature(net)]"}, {"sha": "04714b50fc027b78215777f4f388b3eec326e9bc", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -20,7 +20,6 @@ use procsrv;\n use util::logv;\n \n use std::env;\n-use std::ffi::OsStr;\n use std::fmt;\n use std::fs::{self, File};\n use std::io::BufReader;\n@@ -1323,7 +1322,7 @@ fn make_exe_name(config: &Config, testfile: &Path) -> PathBuf {\n     let mut f = output_base_name(config, testfile);\n     if !env::consts::EXE_SUFFIX.is_empty() {\n         let mut fname = f.file_name().unwrap().to_os_string();\n-        fname.push_os_str(OsStr::from_str(env::consts::EXE_SUFFIX));\n+        fname.push(env::consts::EXE_SUFFIX);\n         f.set_file_name(&fname);\n     }\n     f\n@@ -1433,7 +1432,7 @@ fn make_out_name(config: &Config, testfile: &Path, extension: &str) -> PathBuf {\n fn aux_output_dir_name(config: &Config, testfile: &Path) -> PathBuf {\n     let f = output_base_name(config, testfile);\n     let mut fname = f.file_name().unwrap().to_os_string();\n-    fname.push_os_str(OsStr::from_str(\"libaux\"));\n+    fname.push(\"libaux\");\n     f.with_file_name(&fname)\n }\n \n@@ -1647,8 +1646,8 @@ fn append_suffix_to_stem(p: &Path, suffix: &str) -> PathBuf {\n         p.to_path_buf()\n     } else {\n         let mut stem = p.file_stem().unwrap().to_os_string();\n-        stem.push_os_str(OsStr::from_str(\"-\"));\n-        stem.push_os_str(OsStr::from_str(suffix));\n+        stem.push(\"-\");\n+        stem.push(suffix);\n         p.with_file_name(&stem)\n     }\n }"}, {"sha": "2c426a3e7fe20e31db311179ef2fddbaeab0548f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -38,7 +38,6 @@\n #![feature(unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(std_misc)]\n-#![feature(os)]\n #![feature(path)]\n #![feature(fs)]\n #![feature(io)]"}, {"sha": "6fa8cca23e1089d56055cd61f7fbfa5adcbddb7d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -29,7 +29,6 @@\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(libc)]\n-#![feature(os)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "21c738aa4a70c362ba99185e4508f016ecda1ab8", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -27,7 +27,7 @@ use util::common::time;\n use util::ppaux;\n use util::sha2::{Digest, Sha256};\n \n-use std::ffi::{AsOsStr, OsString};\n+use std::ffi::OsString;\n use std::fs::{self, TempDir, PathExt};\n use std::io::{self, Read, Write};\n use std::mem;\n@@ -882,7 +882,7 @@ fn link_args(cmd: &mut Command,\n             let morestack = lib_path.join(\"libmorestack.a\");\n \n             let mut v = OsString::from_str(\"-Wl,-force_load,\");\n-            v.push_os_str(morestack.as_os_str());\n+            v.push(&morestack);\n             cmd.arg(&v);\n         } else {\n             cmd.args(&[\"-Wl,--whole-archive\", \"-lmorestack\", \"-Wl,--no-whole-archive\"]);\n@@ -1007,7 +1007,7 @@ fn link_args(cmd: &mut Command,\n \n             if sess.opts.cg.rpath {\n                 let mut v = OsString::from_str(\"-Wl,-install_name,@rpath/\");\n-                v.push_os_str(out_filename.file_name().unwrap());\n+                v.push(out_filename.file_name().unwrap());\n                 cmd.arg(&v);\n             }\n         } else {\n@@ -1107,7 +1107,7 @@ fn add_local_native_libraries(cmd: &mut Command, sess: &Session) {\n                                             &search_path[..],\n                                             &sess.diagnostic().handler);\n             let mut v = OsString::from_str(\"-Wl,-force_load,\");\n-            v.push_os_str(lib.as_os_str());\n+            v.push(&lib);\n             cmd.arg(&v);\n         }\n     }"}, {"sha": "88293afa53fc27f7f217dc5cd31516c6ee8ae249", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -35,12 +35,10 @@\n #![feature(rustc_private)]\n #![feature(unsafe_destructor)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n #![feature(unicode)]\n #![feature(io)]\n #![feature(fs)]\n #![feature(path)]\n-#![feature(os)]\n #![feature(tempdir)]\n \n extern crate arena;"}, {"sha": "b00d61c0303e0305337b0a74382d630d4bde9d4c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -38,7 +38,6 @@ use std::cell::RefCell;\n use std::cmp::Ordering;\n use std::collections::{HashMap, HashSet};\n use std::default::Default;\n-use std::ffi::OsStr;\n use std::fmt;\n use std::fs::{self, File};\n use std::io::prelude::*;\n@@ -770,7 +769,7 @@ impl<'a> SourceCollector<'a> {\n \n         let mut fname = p.file_name().expect(\"source has no filename\")\n                          .to_os_string();\n-        fname.push_os_str(OsStr::from_str(\".html\"));\n+        fname.push(\".html\");\n         cur.push(&fname);\n         let mut w = BufWriter::new(try!(File::create(&cur)));\n "}, {"sha": "ec9f90723be96525237346913150d0a389f39b0b", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![unstable(feature = \"std_misc\")]\n+\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use error::{Error, FromError};\n use fmt;\n@@ -59,6 +61,7 @@ use vec::Vec;\n /// # }\n /// ```\n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CString {\n     inner: Vec<u8>,\n }\n@@ -110,13 +113,19 @@ pub struct CString {\n /// }\n /// ```\n #[derive(Hash)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CStr {\n+    // FIXME: this should not be represented with a DST slice but rather with\n+    //        just a raw `libc::c_char` along with some form of marker to make\n+    //        this an unsized type. Essentially `sizeof(&CStr)` should be the\n+    //        same as `sizeof(&c_char)` but `CStr` should be an unsized type.\n     inner: [libc::c_char]\n }\n \n /// An error returned from `CString::new` to indicate that a nul byte was found\n /// in the vector provided.\n #[derive(Clone, PartialEq, Debug)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct NulError(usize, Vec<u8>);\n \n /// A conversion trait used by the constructor of `CString` for types that can\n@@ -153,6 +162,7 @@ impl CString {\n     /// This function will return an error if the bytes yielded contain an\n     /// internal 0 byte. The error returned will contain the bytes as well as\n     /// the position of the nul byte.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<T: IntoBytes>(t: T) -> Result<CString, NulError> {\n         let bytes = t.into_bytes();\n         match bytes.iter().position(|x| *x == 0) {\n@@ -216,6 +226,7 @@ impl CString {\n     ///\n     /// This method is equivalent to `from_vec` except that no runtime assertion\n     /// is made that `v` contains no 0 bytes.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_vec_unchecked(mut v: Vec<u8>) -> CString {\n         v.push(0);\n         CString { inner: v }\n@@ -225,17 +236,20 @@ impl CString {\n     ///\n     /// The returned slice does **not** contain the trailing nul separator and\n     /// it is guaranteed to not have any interior nul bytes.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.inner[..self.inner.len() - 1]\n     }\n \n     /// Equivalent to the `as_bytes` function except that the returned slice\n     /// includes the trailing nul byte.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes_with_nul(&self) -> &[u8] {\n         &self.inner\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Deref for CString {\n     type Target = CStr;\n \n@@ -254,30 +268,36 @@ impl fmt::Debug for CString {\n impl NulError {\n     /// Returns the position of the nul byte in the slice that was provided to\n     /// `CString::from_vec`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn nul_position(&self) -> usize { self.0 }\n \n     /// Consumes this error, returning the underlying vector of bytes which\n     /// generated the error in the first place.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_vec(self) -> Vec<u8> { self.1 }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for NulError {\n     fn description(&self) -> &str { \"nul byte found in data\" }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for NulError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"nul byte found in provided data at position: {}\", self.0)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromError<NulError> for io::Error {\n     fn from_error(_: NulError) -> io::Error {\n         io::Error::new(io::ErrorKind::InvalidInput,\n                        \"data provided contains a nul byte\", None)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromError<NulError> for old_io::IoError {\n     fn from_error(_: NulError) -> old_io::IoError {\n         old_io::IoError {\n@@ -325,6 +345,7 @@ impl CStr {\n     /// }\n     /// # }\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const libc::c_char) -> &'a CStr {\n         let len = libc::strlen(ptr);\n         mem::transmute(slice::from_raw_parts(ptr, len as usize + 1))\n@@ -335,6 +356,7 @@ impl CStr {\n     /// The returned pointer will be valid for as long as `self` is and points\n     /// to a contiguous region of memory terminated with a 0 byte to represent\n     /// the end of the string.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_ptr(&self) -> *const libc::c_char {\n         self.inner.as_ptr()\n     }\n@@ -351,6 +373,7 @@ impl CStr {\n     /// > **Note**: This method is currently implemented as a 0-cost cast, but\n     /// > it is planned to alter its definition in the future to perform the\n     /// > length calculation whenever this method is called.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n         &bytes[..bytes.len() - 1]\n@@ -364,22 +387,27 @@ impl CStr {\n     /// > **Note**: This method is currently implemented as a 0-cost cast, but\n     /// > it is planned to alter its definition in the future to perform the\n     /// > length calculation whenever this method is called.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes_with_nul(&self) -> &[u8] {\n         unsafe { mem::transmute::<&[libc::c_char], &[u8]>(&self.inner) }\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for CStr {\n     fn eq(&self, other: &CStr) -> bool {\n         self.to_bytes().eq(other.to_bytes())\n     }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for CStr {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for CStr {\n     fn partial_cmp(&self, other: &CStr) -> Option<Ordering> {\n         self.to_bytes().partial_cmp(&other.to_bytes())\n     }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for CStr {\n     fn cmp(&self, other: &CStr) -> Ordering {\n         self.to_bytes().cmp(&other.to_bytes())"}, {"sha": "f17dc6542491bad149819704d118debd755ac9a7", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -10,24 +10,27 @@\n \n //! Utilities related to FFI bindings.\n \n-#![unstable(feature = \"std_misc\",\n-            reason = \"module just underwent fairly large reorganization and the dust \\\n-                      still needs to settle\")]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-pub use self::c_str::{CString, CStr, NulError, IntoBytes};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use self::c_str::{CString, CStr};\n+pub use self::c_str::{NulError, IntoBytes};\n #[allow(deprecated)]\n pub use self::c_str::c_str_to_bytes;\n #[allow(deprecated)]\n pub use self::c_str::c_str_to_bytes_with_nul;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::os_str::OsString;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::os_str::OsStr;\n \n mod c_str;\n mod os_str;\n \n // FIXME (#21670): these should be defined in the os_str module\n /// Freely convertible to an `&OsStr` slice.\n+#[unstable(feature = \"std_misc\")]\n pub trait AsOsStr {\n     /// Convert to an `&OsStr` slice.\n     fn as_os_str(&self) -> &OsStr;"}, {"sha": "77df831bbfe3771e21e57fb92ca2f5a191674b0d", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -49,46 +49,61 @@ use super::AsOsStr;\n \n /// Owned, mutable OS strings.\n #[derive(Clone)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsString {\n     inner: Buf\n }\n \n /// Slices into OS strings.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsStr {\n     inner: Slice\n }\n \n impl OsString {\n     /// Constructs an `OsString` at no cost by consuming a `String`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_string(s: String) -> OsString {\n         OsString { inner: Buf::from_string(s) }\n     }\n \n     /// Constructs an `OsString` by copying from a `&str` slice.\n     ///\n     /// Equivalent to: `OsString::from_string(String::from_str(s))`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_str(s: &str) -> OsString {\n         OsString { inner: Buf::from_str(s) }\n     }\n \n     /// Constructs a new empty `OsString`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> OsString {\n         OsString { inner: Buf::from_string(String::new()) }\n     }\n \n     /// Convert the `OsString` into a `String` if it contains valid Unicode data.\n     ///\n     /// On failure, ownership of the original `OsString` is returned.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_string(self) -> Result<String, OsString> {\n         self.inner.into_string().map_err(|buf| OsString { inner: buf} )\n     }\n \n     /// Extend the string with the given `&OsStr` slice.\n+    #[deprecated(since = \"1.0.0\", reason = \"renamed to `push`\")]\n+    #[unstable(feature = \"os\")]\n     pub fn push_os_str(&mut self, s: &OsStr) {\n         self.inner.push_slice(&s.inner)\n     }\n+\n+    /// Extend the string with the given `&OsStr` slice.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn push<T: AsOsStr + ?Sized>(&mut self, s: &T) {\n+        self.inner.push_slice(&s.as_os_str().inner)\n+    }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Index<ops::RangeFull> for OsString {\n     type Output = OsStr;\n \n@@ -98,6 +113,7 @@ impl ops::Index<ops::RangeFull> for OsString {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Deref for OsString {\n     type Target = OsStr;\n \n@@ -107,32 +123,38 @@ impl ops::Deref for OsString {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for OsString {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         fmt::Debug::fmt(&**self, formatter)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for OsString {\n     fn eq(&self, other: &OsString) -> bool {\n         &**self == &**other\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<str> for OsString {\n     fn eq(&self, other: &str) -> bool {\n         &**self == other\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<OsString> for str {\n     fn eq(&self, other: &OsString) -> bool {\n         &**other == self\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for OsString {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for OsString {\n     #[inline]\n     fn partial_cmp(&self, other: &OsString) -> Option<cmp::Ordering> {\n@@ -148,13 +170,15 @@ impl PartialOrd for OsString {\n     fn ge(&self, other: &OsString) -> bool { &**self >= &**other }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd<str> for OsString {\n     #[inline]\n     fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {\n         (&**self).partial_cmp(other)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for OsString {\n     #[inline]\n     fn cmp(&self, other: &OsString) -> cmp::Ordering {\n@@ -172,25 +196,29 @@ impl Hash for OsString {\n \n impl OsStr {\n     /// Coerce directly from a `&str` slice to a `&OsStr` slice.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_str(s: &str) -> &OsStr {\n         unsafe { mem::transmute(Slice::from_str(s)) }\n     }\n \n     /// Yield a `&str` slice if the `OsStr` is valid unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n     }\n \n     /// Convert an `OsStr` to a `Cow<str>`.\n     ///\n     /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         self.inner.to_string_lossy()\n     }\n \n     /// Copy the slice into an owned `OsString`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_os_string(&self) -> OsString {\n         OsString { inner: self.inner.to_owned() }\n     }\n@@ -204,26 +232,31 @@ impl OsStr {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for OsStr {\n     fn eq(&self, other: &OsStr) -> bool {\n         self.bytes().eq(other.bytes())\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<str> for OsStr {\n     fn eq(&self, other: &str) -> bool {\n         *self == *OsStr::from_str(other)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq<OsStr> for str {\n     fn eq(&self, other: &OsStr) -> bool {\n         *other == *OsStr::from_str(self)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for OsStr {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for OsStr {\n     #[inline]\n     fn partial_cmp(&self, other: &OsStr) -> Option<cmp::Ordering> {\n@@ -239,6 +272,7 @@ impl PartialOrd for OsStr {\n     fn ge(&self, other: &OsStr) -> bool { self.bytes().ge(other.bytes()) }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd<str> for OsStr {\n     #[inline]\n     fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {\n@@ -249,6 +283,7 @@ impl PartialOrd<str> for OsStr {\n // FIXME (#19470): cannot provide PartialOrd<OsStr> for str until we\n // have more flexible coherence rules.\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for OsStr {\n     #[inline]\n     fn cmp(&self, other: &OsStr) -> cmp::Ordering { self.bytes().cmp(other.bytes()) }\n@@ -262,21 +297,25 @@ impl Hash for OsStr {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for OsStr {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         self.inner.fmt(formatter)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Borrow<OsStr> for OsString {\n     fn borrow(&self) -> &OsStr { &self[..] }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ToOwned for OsStr {\n     type Owned = OsString;\n     fn to_owned(&self) -> OsString { self.to_os_string() }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: AsOsStr + ?Sized> AsOsStr for &'a T {\n     fn as_os_str(&self) -> &OsStr {\n         (*self).as_os_str()\n@@ -307,15 +346,12 @@ impl AsOsStr for String {\n     }\n }\n \n-#[cfg(unix)]\n impl AsOsStr for Path {\n+    #[cfg(unix)]\n     fn as_os_str(&self) -> &OsStr {\n         unsafe { mem::transmute(self.as_vec()) }\n     }\n-}\n-\n-#[cfg(windows)]\n-impl AsOsStr for Path {\n+    #[cfg(windows)]\n     fn as_os_str(&self) -> &OsStr {\n         // currently .as_str() is actually infallible on windows\n         OsStr::from_str(self.as_str().unwrap())"}, {"sha": "18720ecddd9f53038025e749e715a737591ca384", "filename": "src/libstd/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628f5d29c3b93bbd590e08dc2c69f842a18d1231/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=628f5d29c3b93bbd590e08dc2c69f842a18d1231", "patch": "@@ -872,10 +872,10 @@ impl PathBuf {\n \n         // `path` is a pure relative path\n         } else if need_sep {\n-            self.inner.push_os_str(OsStr::from_str(MAIN_SEP_STR));\n+            self.inner.push(MAIN_SEP_STR);\n         }\n \n-        self.inner.push_os_str(path.as_os_str());\n+        self.inner.push(path);\n     }\n \n     /// Truncate `self` to `self.parent()`.\n@@ -937,8 +937,8 @@ impl PathBuf {\n \n         let extension = extension.as_os_str();\n         if os_str_as_u8_slice(extension).len() > 0 {\n-            stem.push_os_str(OsStr::from_str(\".\"));\n-            stem.push_os_str(extension.as_os_str());\n+            stem.push(\".\");\n+            stem.push(extension);\n         }\n         self.set_file_name(&stem);\n "}]}