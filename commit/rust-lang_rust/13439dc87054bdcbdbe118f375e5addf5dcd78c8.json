{"sha": "13439dc87054bdcbdbe118f375e5addf5dcd78c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNDM5ZGM4NzA1NGJkY2JkYmUxMThmMzc1ZTVhZGRmNWRjZDc4Yzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T05:31:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:11:12Z"}, "message": "Convert std::run to ivecs", "tree": {"sha": "80c5289cf89690c7e69aee68f778507c1f91b620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80c5289cf89690c7e69aee68f778507c1f91b620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13439dc87054bdcbdbe118f375e5addf5dcd78c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13439dc87054bdcbdbe118f375e5addf5dcd78c8", "html_url": "https://github.com/rust-lang/rust/commit/13439dc87054bdcbdbe118f375e5addf5dcd78c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13439dc87054bdcbdbe118f375e5addf5dcd78c8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c042a02cd3c2cbaa0a69cc6d7e90568593193d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c042a02cd3c2cbaa0a69cc6d7e90568593193d8", "html_url": "https://github.com/rust-lang/rust/commit/5c042a02cd3c2cbaa0a69cc6d7e90568593193d8"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "1dc83ca74cdaf478a37c5a9571a1dcc14c681e54", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13439dc87054bdcbdbe118f375e5addf5dcd78c8/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13439dc87054bdcbdbe118f375e5addf5dcd78c8/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=13439dc87054bdcbdbe118f375e5addf5dcd78c8", "patch": "@@ -623,7 +623,7 @@ fn main(args: vec[str]) {\n     }\n     // We run 'gcc' here\n \n-    let err_code = run::run_program(prog, ivec::to_vec(gcc_args));\n+    let err_code = run::run_program(prog, gcc_args);\n     if 0 != err_code {\n         sess.err(#fmt(\"linking with gcc failed with code %d\", err_code));\n         sess.note(#fmt(\"gcc arguments: %s\",\n@@ -633,13 +633,13 @@ fn main(args: vec[str]) {\n     // Clean up on Darwin\n \n     if sess.get_targ_cfg().os == session::os_macos {\n-        run::run_program(\"dsymutil\", [saved_out_filename]);\n+        run::run_program(\"dsymutil\", ~[saved_out_filename]);\n     }\n \n \n     // Remove the temporary object file if we aren't saving temps\n     if !sopts.save_temps {\n-        run::run_program(\"rm\", [saved_out_filename + \".o\"]);\n+        run::run_program(\"rm\", ~[saved_out_filename + \".o\"]);\n     }\n }\n "}, {"sha": "bee16f4781019344fdc5b84ccaa9abcff73715ca", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13439dc87054bdcbdbe118f375e5addf5dcd78c8/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13439dc87054bdcbdbe118f375e5addf5dcd78c8/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=13439dc87054bdcbdbe118f375e5addf5dcd78c8", "patch": "@@ -26,7 +26,7 @@ fn write_file(filename: &str, content: &str) {\n                         ~[io::create,\n                           io::truncate]).write_str(content);\n     // Work around https://github.com/graydon/rust/issues/726\n-    std::run::run_program(\"chmod\", [\"644\", filename]);\n+    std::run::run_program(\"chmod\", ~[\"644\", filename]);\n }\n \n fn file_contains(filename: &str, needle: &str) -> bool {\n@@ -177,7 +177,7 @@ fn check_variants_of_ast(crate: &ast::crate, codemap: &codemap::codemap, filenam\n fn check_whole_compiler(code: &str) {\n     let filename = \"test.rs\";\n     write_file(filename, code);\n-    let p = std::run::program_output(\"/Users/jruderman/code/rust/build/stage1/rustc\", [\"-c\", filename]);\n+    let p = std::run::program_output(\"/Users/jruderman/code/rust/build/stage1/rustc\", ~[\"-c\", filename]);\n     //log_err #fmt(\"Status: %d\", p.status);\n     //log_err \"Output: \" + p.out;\n     if p.err != \"\" {\n@@ -311,7 +311,7 @@ fn check_roundtrip_convergence(code: &str, maxIters: uint) {\n         log_err #fmt(\"Did not converge after %u iterations!\", i);\n         write_file(\"round-trip-a.rs\", old);\n         write_file(\"round-trip-b.rs\", new);\n-        std::run::run_program(\"diff\", [\"-w\", \"-u\", \"round-trip-a.rs\", \"round-trip-b.rs\"]);\n+        std::run::run_program(\"diff\", ~[\"-w\", \"-u\", \"round-trip-a.rs\", \"round-trip-b.rs\"]);\n         fail \"Mismatch\";\n     }\n }"}, {"sha": "fa79a6330f53d993d6957088a26095bcfe76ee6f", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13439dc87054bdcbdbe118f375e5addf5dcd78c8/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13439dc87054bdcbdbe118f375e5addf5dcd78c8/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=13439dc87054bdcbdbe118f375e5addf5dcd78c8", "patch": "@@ -13,23 +13,25 @@ native \"rust\" mod rustrt {\n        int;\n }\n \n-fn arg_vec(prog: str, args: vec[str]) -> vec[sbuf] {\n-    let argptrs = [str::buf(prog)];\n-    for arg: str  in args { vec::push[sbuf](argptrs, str::buf(arg)); }\n-    vec::push[sbuf](argptrs, 0 as sbuf);\n+fn arg_vec(prog: str, args: &[str]) -> [sbuf] {\n+    let argptrs = ~[str::buf(prog)];\n+    for arg: str  in args { argptrs += ~[str::buf(arg)]; }\n+    argptrs += ~[0 as sbuf];\n     ret argptrs;\n }\n \n-fn spawn_process(prog: str, args: vec[str], in_fd: int, out_fd: int,\n+fn spawn_process(prog: str, args: &[str], in_fd: int, out_fd: int,\n                  err_fd: int) -> int {\n     // Note: we have to hold on to this vector reference while we hold a\n     // pointer to its buffer\n     let argv = arg_vec(prog, args);\n-    let pid = rustrt::rust_run_program(vec::buf(argv), in_fd, out_fd, err_fd);\n+    let argvv = ivec::to_vec(argv);\n+    let pid = rustrt::rust_run_program(\n+        vec::buf(argvv), in_fd, out_fd, err_fd);\n     ret pid;\n }\n \n-fn run_program(prog: str, args: vec[str]) -> int {\n+fn run_program(prog: str, args: &[str]) -> int {\n     ret os::waitpid(spawn_process(prog, args, 0, 0, 0));\n }\n \n@@ -48,7 +50,7 @@ resource program_res(p: program) {\n     p.destroy();\n }\n \n-fn start_program(prog: str, args: vec[str]) -> @program_res {\n+fn start_program(prog: str, args: &[str]) -> @program_res {\n     let pipe_input = os::pipe();\n     let pipe_output = os::pipe();\n     let pipe_err = os::pipe();\n@@ -112,7 +114,7 @@ fn read_all(rd: &io::reader) -> str {\n     ret buf;\n }\n \n-fn program_output(prog: str, args: vec[str])\n+fn program_output(prog: str, args: [str])\n     -> {status: int, out: str, err: str} {\n     let pr = start_program(prog, args);\n     pr.close_input();"}, {"sha": "db1aeb6cb32651becf6becf01d78a8eb859fc513", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13439dc87054bdcbdbe118f375e5addf5dcd78c8/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13439dc87054bdcbdbe118f375e5addf5dcd78c8/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=13439dc87054bdcbdbe118f375e5addf5dcd78c8", "patch": "@@ -140,7 +140,7 @@ fn worker(p: port[request]) {\n         let pipe_err = os::pipe();\n         let spawnproc =\n             bind run::spawn_process(execparms.prog,\n-                                    ivec::to_vec(execparms.args),\n+                                    execparms.args,\n                                     pipe_in.in,\n                                     pipe_out.out,\n                                     pipe_err.out);"}, {"sha": "cdc00438e2d33abfc77c39e1d55356a4674ea843", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13439dc87054bdcbdbe118f375e5addf5dcd78c8/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13439dc87054bdcbdbe118f375e5addf5dcd78c8/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=13439dc87054bdcbdbe118f375e5addf5dcd78c8", "patch": "@@ -11,9 +11,9 @@ import std::ivec;\n #[cfg(target_os = \"macos\")]\n #[test]\n fn test_leaks() {\n-    run::run_program(\"echo\", []);\n-    run::start_program(\"echo\", []);\n-    run::program_output(\"echo\", []);\n+    run::run_program(\"echo\", ~[]);\n+    run::start_program(\"echo\", ~[]);\n+    run::program_output(\"echo\", ~[]);\n }\n \n // FIXME\n@@ -28,7 +28,7 @@ fn test_pipes() {\n     let pipe_out = os::pipe();\n     let pipe_err = os::pipe();\n \n-    let pid = run::spawn_process(\"cat\", [],\n+    let pid = run::spawn_process(\"cat\", ~[],\n        pipe_in.in, pipe_out.out, pipe_err.out);\n     os::libc::close(pipe_in.in);\n     os::libc::close(pipe_out.out);"}]}