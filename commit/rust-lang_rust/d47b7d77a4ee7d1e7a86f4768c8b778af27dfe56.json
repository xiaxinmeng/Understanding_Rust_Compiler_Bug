{"sha": "d47b7d77a4ee7d1e7a86f4768c8b778af27dfe56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0N2I3ZDc3YTRlZTdkMWU3YTg2ZjQ3NjhjOGI3NzhhZjI3ZGZlNTY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-31T08:41:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-31T08:41:23Z"}, "message": "Rollup merge of #88462 - petrochenkov:macstore, r=jyn514\n\nrustdoc: Stop using resolver for macro loading\n\nr? `@jyn514`", "tree": {"sha": "2dc5d398df04959f6c768c9d189e5476165e5764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dc5d398df04959f6c768c9d189e5476165e5764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d47b7d77a4ee7d1e7a86f4768c8b778af27dfe56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLeszCRBK7hj4Ov3rIwAAjtsIAId4q2dwnuaAnxpAomdeeYP/\nEB194dBwS+Xzuo+9n4pKhYWEx3J1Ju0eJYB++5RzJkPFlWse7dH3aidsKxvJCEGq\n9LomE8Om0WBAs19ZpIzfESr/V5RiWRq1U6Etyc1SJMoO7WqDit5X2JdqPgWtUg4y\noI9EynKZGG4JBNhFTMUfnykXVpTp74zrnajQQT/lkfMHXWVJGkeKKaQ/RqKs0j4b\nCwDfXWafLIC0owz4h8bWRWtJ7WJdiPxEIgHNXTMsRDE5A5RLJZCIEAnSQHDNzFAm\nN9W7IEGbklIoLW1w075tfV9q+bPZWx4iF1TztCmY3isGwhUWax36/I509pXZu1A=\n=W8ZK\n-----END PGP SIGNATURE-----\n", "payload": "tree 2dc5d398df04959f6c768c9d189e5476165e5764\nparent 7696aca55f8f5820cbe80a2b455616f10a81af83\nparent b8728e773f126b554162bd49065f08028d87f7c3\nauthor Mara Bos <m-ou.se@m-ou.se> 1630399283 +0200\ncommitter GitHub <noreply@github.com> 1630399283 +0200\n\nRollup merge of #88462 - petrochenkov:macstore, r=jyn514\n\nrustdoc: Stop using resolver for macro loading\n\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d47b7d77a4ee7d1e7a86f4768c8b778af27dfe56", "html_url": "https://github.com/rust-lang/rust/commit/d47b7d77a4ee7d1e7a86f4768c8b778af27dfe56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d47b7d77a4ee7d1e7a86f4768c8b778af27dfe56/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7696aca55f8f5820cbe80a2b455616f10a81af83", "url": "https://api.github.com/repos/rust-lang/rust/commits/7696aca55f8f5820cbe80a2b455616f10a81af83", "html_url": "https://github.com/rust-lang/rust/commit/7696aca55f8f5820cbe80a2b455616f10a81af83"}, {"sha": "b8728e773f126b554162bd49065f08028d87f7c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8728e773f126b554162bd49065f08028d87f7c3", "html_url": "https://github.com/rust-lang/rust/commit/b8728e773f126b554162bd49065f08028d87f7c3"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "0c81a5584301355e4d70e84c4b8139751c0d5b6b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d47b7d77a4ee7d1e7a86f4768c8b778af27dfe56/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d47b7d77a4ee7d1e7a86f4768c8b778af27dfe56/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d47b7d77a4ee7d1e7a86f4768c8b778af27dfe56", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n-use rustc_metadata::creader::LoadedMacro;\n+use rustc_metadata::creader::{CStore, LoadedMacro};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -179,7 +179,7 @@ crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: ItemType)\n     let fqn = if let ItemType::Macro = kind {\n         // Check to see if it is a macro 2.0 or built-in macro\n         if matches!(\n-            cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())),\n+            CStore::from_tcx(cx.tcx).load_macro_untracked(did, cx.sess()),\n             LoadedMacro::MacroDef(def, _)\n                 if matches!(&def.kind, ast::ItemKind::MacroDef(ast_def)\n                     if !ast_def.macro_rules)\n@@ -558,7 +558,7 @@ fn build_macro(\n     import_def_id: Option<DefId>,\n ) -> clean::ItemKind {\n     let imported_from = cx.tcx.crate_name(def_id.krate);\n-    match cx.enter_resolver(|r| r.cstore().load_macro_untracked(def_id, cx.sess())) {\n+    match CStore::from_tcx(cx.tcx).load_macro_untracked(def_id, cx.sess()) {\n         LoadedMacro::MacroDef(item_def, _) => {\n             if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n                 clean::MacroItem(clean::Macro {"}]}