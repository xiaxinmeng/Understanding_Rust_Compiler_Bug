{"sha": "0610ee490e2cc1386f300a6855c6a8a78dcba636", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTBlZTQ5MGUyY2MxMzg2ZjMwMGE2ODU1YzZhOGE3OGRjYmE2MzY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-14T16:44:42Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-14T16:44:42Z"}, "message": "Regression tests for `wrapping_*` operations for integer types.", "tree": {"sha": "7cd22f1ca00368d411bb3bbf7c7330589656b3fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd22f1ca00368d411bb3bbf7c7330589656b3fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0610ee490e2cc1386f300a6855c6a8a78dcba636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0610ee490e2cc1386f300a6855c6a8a78dcba636", "html_url": "https://github.com/rust-lang/rust/commit/0610ee490e2cc1386f300a6855c6a8a78dcba636", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0610ee490e2cc1386f300a6855c6a8a78dcba636/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8122ee87d48f0422adf96e568912fe93da27ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8122ee87d48f0422adf96e568912fe93da27ac7", "html_url": "https://github.com/rust-lang/rust/commit/d8122ee87d48f0422adf96e568912fe93da27ac7"}], "stats": {"total": 236, "additions": 236, "deletions": 0}, "files": [{"sha": "5d1d6919f5204192bde609cff810bd32b641ed30", "filename": "src/test/run-pass/wrapping-int-api.rs", "status": "added", "additions": 236, "deletions": 0, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/0610ee490e2cc1386f300a6855c6a8a78dcba636/src%2Ftest%2Frun-pass%2Fwrapping-int-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0610ee490e2cc1386f300a6855c6a8a78dcba636/src%2Ftest%2Frun-pass%2Fwrapping-int-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwrapping-int-api.rs?ref=0610ee490e2cc1386f300a6855c6a8a78dcba636", "patch": "@@ -0,0 +1,236 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core)]\n+\n+// Test inherent wrapping_* methods for {i,u}{size,8,16,32,64}.\n+\n+use std::{i8, i16, i32, i64, isize};\n+use std::{u8, u16, u32, u64, usize};\n+\n+fn main() {\n+    assert_eq!(   i8::MAX.wrapping_add(1),    i8::MIN);\n+    assert_eq!(  i16::MAX.wrapping_add(1),   i16::MIN);\n+    assert_eq!(  i32::MAX.wrapping_add(1),   i32::MIN);\n+    assert_eq!(  i64::MAX.wrapping_add(1),   i64::MIN);\n+    assert_eq!(isize::MAX.wrapping_add(1), isize::MIN);\n+\n+    assert_eq!(   i8::MIN.wrapping_sub(1),    i8::MAX);\n+    assert_eq!(  i16::MIN.wrapping_sub(1),   i16::MAX);\n+    assert_eq!(  i32::MIN.wrapping_sub(1),   i32::MAX);\n+    assert_eq!(  i64::MIN.wrapping_sub(1),   i64::MAX);\n+    assert_eq!(isize::MIN.wrapping_sub(1), isize::MAX);\n+\n+    assert_eq!(   u8::MAX.wrapping_add(1),    u8::MIN);\n+    assert_eq!(  u16::MAX.wrapping_add(1),   u16::MIN);\n+    assert_eq!(  u32::MAX.wrapping_add(1),   u32::MIN);\n+    assert_eq!(  u64::MAX.wrapping_add(1),   u64::MIN);\n+    assert_eq!(usize::MAX.wrapping_add(1), usize::MIN);\n+\n+    assert_eq!(   u8::MIN.wrapping_sub(1),    u8::MAX);\n+    assert_eq!(  u16::MIN.wrapping_sub(1),   u16::MAX);\n+    assert_eq!(  u32::MIN.wrapping_sub(1),   u32::MAX);\n+    assert_eq!(  u64::MIN.wrapping_sub(1),   u64::MAX);\n+    assert_eq!(usize::MIN.wrapping_sub(1), usize::MAX);\n+\n+    assert_eq!((0xfe_u8 as i8).wrapping_mul(16),\n+               (0xe0_u8 as i8));\n+    assert_eq!((0xfedc_u16 as i16).wrapping_mul(16),\n+               (0xedc0_u16 as i16));\n+    assert_eq!((0xfedc_ba98_u32 as i32).wrapping_mul(16),\n+               (0xedcb_a980_u32 as i32));\n+    assert_eq!((0xfedc_ba98_7654_3217_u64 as i64).wrapping_mul(16),\n+               (0xedcb_a987_6543_2170_u64 as i64));\n+\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            assert_eq!((0xfedc_ba98_u32 as isize).wrapping_mul(16),\n+                       (0xedcb_a980_u32 as isize));\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            assert_eq!((0xfedc_ba98_7654_3217_u64 as isize).wrapping_mul(16),\n+                       (0xedcb_a987_6543_2170_u64 as isize));\n+        }\n+    }\n+\n+    assert_eq!((0xfe as u8).wrapping_mul(16),\n+               (0xe0 as u8));\n+    assert_eq!((0xfedc as u16).wrapping_mul(16),\n+               (0xedc0 as u16));\n+    assert_eq!((0xfedc_ba98 as u32).wrapping_mul(16),\n+               (0xedcb_a980 as u32));\n+    assert_eq!((0xfedc_ba98_7654_3217 as u64).wrapping_mul(16),\n+               (0xedcb_a987_6543_2170 as u64));\n+\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            assert_eq!((0xfedc_ba98 as usize).wrapping_mul(16),\n+                       (0xedcb_a980 as usize));\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            assert_eq!((0xfedc_ba98_7654_3217 as usize).wrapping_mul(16),\n+                       (0xedcb_a987_6543_2170 as usize));\n+        }\n+    }\n+\n+    macro_rules! check_mul_no_wrap {\n+        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_mul($f), ($e) * $f); }\n+    }\n+    macro_rules! check_mul_wraps {\n+        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_mul($f), $e); }\n+    }\n+\n+    check_mul_no_wrap!(0xfe_u8 as i8, -1);\n+    check_mul_no_wrap!(0xfedc_u16 as i16, -1);\n+    check_mul_no_wrap!(0xfedc_ba98_u32 as i32, -1);\n+    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -1);\n+    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -1);\n+\n+    check_mul_no_wrap!(0xfe_u8 as i8, -2);\n+    check_mul_no_wrap!(0xfedc_u16 as i16, -2);\n+    check_mul_no_wrap!(0xfedc_ba98_u32 as i32, -2);\n+    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -2);\n+    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -2);\n+\n+    check_mul_no_wrap!(0xfe_u8 as i8, 2);\n+    check_mul_no_wrap!(0xfedc_u16 as i16, 2);\n+    check_mul_no_wrap!(0xfedc_ba98_u32 as i32, 2);\n+    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, 2);\n+    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, 2);\n+\n+    check_mul_wraps!(0x80_u8 as i8, -1);\n+    check_mul_wraps!(0x8000_u16 as i16, -1);\n+    check_mul_wraps!(0x8000_0000_u32 as i32, -1);\n+    check_mul_wraps!(0x8000_0000_0000_0000_u64 as i64, -1);\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            check_mul_wraps!(0x8000_0000_u32 as isize, -1);\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            check_mul_wraps!(0x8000_0000_0000_0000_u64 as isize, -1);\n+        }\n+    }\n+\n+    macro_rules! check_div_no_wrap {\n+        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_div($f), ($e) / $f); }\n+    }\n+    macro_rules! check_div_wraps {\n+        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_div($f), $e); }\n+    }\n+\n+    check_div_no_wrap!(0xfe_u8 as i8, -1);\n+    check_div_no_wrap!(0xfedc_u16 as i16, -1);\n+    check_div_no_wrap!(0xfedc_ba98_u32 as i32, -1);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -1);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -1);\n+\n+    check_div_no_wrap!(0xfe_u8 as i8, -2);\n+    check_div_no_wrap!(0xfedc_u16 as i16, -2);\n+    check_div_no_wrap!(0xfedc_ba98_u32 as i32, -2);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -2);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -2);\n+\n+    check_div_no_wrap!(0xfe_u8 as i8, 2);\n+    check_div_no_wrap!(0xfedc_u16 as i16, 2);\n+    check_div_no_wrap!(0xfedc_ba98_u32 as i32, 2);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, 2);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, 2);\n+\n+    check_div_wraps!(-128 as i8, -1);\n+    check_div_wraps!(0x8000_u16 as i16, -1);\n+    check_div_wraps!(0x8000_0000_u32 as i32, -1);\n+    check_div_wraps!(0x8000_0000_0000_0000_u64 as i64, -1);\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            check_div_wraps!(0x8000_0000_u32 as isize, -1);\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            check_div_wraps!(0x8000_0000_0000_0000_u64 as isize, -1);\n+        }\n+    }\n+\n+\n+    macro_rules! check_rem_no_wrap {\n+        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_rem($f), ($e) % $f); }\n+    }\n+    macro_rules! check_rem_wraps {\n+        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_rem($f), 0); }\n+    }\n+\n+    check_rem_no_wrap!(0xfe_u8 as i8, -1);\n+    check_rem_no_wrap!(0xfedc_u16 as i16, -1);\n+    check_rem_no_wrap!(0xfedc_ba98_u32 as i32, -1);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -1);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -1);\n+\n+    check_rem_no_wrap!(0xfe_u8 as i8, -2);\n+    check_rem_no_wrap!(0xfedc_u16 as i16, -2);\n+    check_rem_no_wrap!(0xfedc_ba98_u32 as i32, -2);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -2);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -2);\n+\n+    check_rem_no_wrap!(0xfe_u8 as i8, 2);\n+    check_rem_no_wrap!(0xfedc_u16 as i16, 2);\n+    check_rem_no_wrap!(0xfedc_ba98_u32 as i32, 2);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, 2);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, 2);\n+\n+    check_rem_wraps!(0x80_u8 as i8, -1);\n+    check_rem_wraps!(0x8000_u16 as i16, -1);\n+    check_rem_wraps!(0x8000_0000_u32 as i32, -1);\n+    check_rem_wraps!(0x8000_0000_0000_0000_u64 as i64, -1);\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            check_rem_wraps!(0x8000_0000_u32 as isize, -1);\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            check_rem_wraps!(0x8000_0000_0000_0000_u64 as isize, -1);\n+        }\n+    }\n+\n+    macro_rules! check_neg_no_wrap {\n+        ($e:expr) => { assert_eq!(($e).wrapping_neg(), -($e)); }\n+    }\n+    macro_rules! check_neg_wraps {\n+        ($e:expr) => { assert_eq!(($e).wrapping_neg(),  ($e)); }\n+    }\n+\n+    check_neg_no_wrap!(0xfe_u8 as i8);\n+    check_neg_no_wrap!(0xfedc_u16 as i16);\n+    check_neg_no_wrap!(0xfedc_ba98_u32 as i32);\n+    check_neg_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64);\n+    check_neg_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize);\n+\n+    check_neg_wraps!(0x80_u8 as i8);\n+    check_neg_wraps!(0x8000_u16 as i16);\n+    check_neg_wraps!(0x8000_0000_u32 as i32);\n+    check_neg_wraps!(0x8000_0000_0000_0000_u64 as i64);\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            check_neg_wraps!(0x8000_0000_u32 as isize);\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            check_neg_wraps!(0x8000_0000_0000_0000_u64 as isize);\n+        }\n+    }\n+\n+}"}]}