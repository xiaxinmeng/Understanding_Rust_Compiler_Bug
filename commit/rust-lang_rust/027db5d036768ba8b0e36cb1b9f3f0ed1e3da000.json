{"sha": "027db5d036768ba8b0e36cb1b9f3f0ed1e3da000", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyN2RiNWQwMzY3NjhiYThiMGUzNmNiMWI5ZjNmMGVkMWUzZGEwMDA=", "commit": {"author": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2021-08-24T13:44:17Z"}, "committer": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2021-08-26T14:40:27Z"}, "message": "RustWrapper: adapt to LLVM change 0f45c16f2caa\n\nThe above-mentioned commit (part of the LLVM 14 development cycle)\nremoves a method that rustc uses somewhat extensively. We mostly switch\nto lower-level methods that exist in all versions of LLVM we use, so no\nnew ifdef logic is required in most cases.", "tree": {"sha": "c76ae286677b087e24cce04a1e1e4aed23a3297f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c76ae286677b087e24cce04a1e1e4aed23a3297f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/027db5d036768ba8b0e36cb1b9f3f0ed1e3da000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/027db5d036768ba8b0e36cb1b9f3f0ed1e3da000", "html_url": "https://github.com/rust-lang/rust/commit/027db5d036768ba8b0e36cb1b9f3f0ed1e3da000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/027db5d036768ba8b0e36cb1b9f3f0ed1e3da000/comments", "author": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f66e825f73d2bd7f8a763b723983850f891985b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66e825f73d2bd7f8a763b723983850f891985b0", "html_url": "https://github.com/rust-lang/rust/commit/f66e825f73d2bd7f8a763b723983850f891985b0"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "4f07a0c67c13f43f50b1962a992b0c9b6ad50136", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/027db5d036768ba8b0e36cb1b9f3f0ed1e3da000/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/027db5d036768ba8b0e36cb1b9f3f0ed1e3da000/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=027db5d036768ba8b0e36cb1b9f3f0ed1e3da000", "patch": "@@ -270,34 +270,30 @@ extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n   Attribute Attr = Attribute::get(A->getContext(), fromRust(RustAttr));\n-  AttrBuilder B(Attr);\n-  A->addAttributes(Index, B);\n+  A->addAttribute(Index, Attr);\n }\n \n extern \"C\" void LLVMRustAddAlignmentAttr(LLVMValueRef Fn,\n                                          unsigned Index,\n                                          uint32_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n-  AttrBuilder B;\n-  B.addAlignmentAttr(Bytes);\n-  A->addAttributes(Index, B);\n+  A->addAttribute(Index, Attribute::getWithAlignment(\n+      A->getContext(), llvm::Align(Bytes)));\n }\n \n extern \"C\" void LLVMRustAddDereferenceableAttr(LLVMValueRef Fn, unsigned Index,\n                                                uint64_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n-  AttrBuilder B;\n-  B.addDereferenceableAttr(Bytes);\n-  A->addAttributes(Index, B);\n+  A->addAttribute(Index, Attribute::getWithDereferenceableBytes(A->getContext(),\n+                                                                Bytes));\n }\n \n extern \"C\" void LLVMRustAddDereferenceableOrNullAttr(LLVMValueRef Fn,\n                                                      unsigned Index,\n                                                      uint64_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n-  AttrBuilder B;\n-  B.addDereferenceableOrNullAttr(Bytes);\n-  A->addAttributes(Index, B);\n+  A->addAttribute(Index, Attribute::getWithDereferenceableOrNullBytes(\n+      A->getContext(), Bytes));\n }\n \n extern \"C\" void LLVMRustAddByValAttr(LLVMValueRef Fn, unsigned Index,\n@@ -323,9 +319,8 @@ extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n                                                    const char *Name,\n                                                    const char *Value) {\n   Function *F = unwrap<Function>(Fn);\n-  AttrBuilder B;\n-  B.addAttribute(Name, Value);\n-  F->addAttributes(Index, B);\n+  F->addAttribute(Index, Attribute::get(\n+      F->getContext(), StringRef(Name), StringRef(Value)));\n }\n \n extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,"}]}