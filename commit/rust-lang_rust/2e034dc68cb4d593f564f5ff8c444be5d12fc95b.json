{"sha": "2e034dc68cb4d593f564f5ff8c444be5d12fc95b", "node_id": "C_kwDOAAsO6NoAKDJlMDM0ZGM2OGNiNGQ1OTNmNTY0ZjVmZjhjNDQ0YmU1ZDEyZmM5NWI", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-12T13:57:14Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-12T13:57:14Z"}, "message": "Exclude locals completely, instead of individual places", "tree": {"sha": "b09153566f23935f503af344d6dd3160491e1ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b09153566f23935f503af344d6dd3160491e1ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e034dc68cb4d593f564f5ff8c444be5d12fc95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e034dc68cb4d593f564f5ff8c444be5d12fc95b", "html_url": "https://github.com/rust-lang/rust/commit/2e034dc68cb4d593f564f5ff8c444be5d12fc95b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e034dc68cb4d593f564f5ff8c444be5d12fc95b/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3f648958d4f556bcceedd8c1d9b0dedb83c7bf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f648958d4f556bcceedd8c1d9b0dedb83c7bf9", "html_url": "https://github.com/rust-lang/rust/commit/b3f648958d4f556bcceedd8c1d9b0dedb83c7bf9"}], "stats": {"total": 114, "additions": 85, "deletions": 29}, "files": [{"sha": "85a35c13fd93a841d64bf5c738270da827ee38f0", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2e034dc68cb4d593f564f5ff8c444be5d12fc95b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e034dc68cb4d593f564f5ff8c444be5d12fc95b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=2e034dc68cb4d593f564f5ff8c444be5d12fc95b", "patch": "@@ -34,7 +34,7 @@\n \n use std::fmt::{Debug, Formatter};\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n@@ -587,7 +587,8 @@ impl Map {\n         filter: impl FnMut(Ty<'tcx>) -> bool,\n     ) -> Self {\n         let mut map = Self::new();\n-        map.register_with_filter(tcx, body, filter, &escaped_places(body));\n+        let exclude = excluded_locals(body);\n+        map.register_with_filter(tcx, body, filter, &exclude);\n         debug!(\"registered {} places ({} nodes in total)\", map.value_count, map.places.len());\n         map\n     }\n@@ -598,19 +599,14 @@ impl Map {\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n         mut filter: impl FnMut(Ty<'tcx>) -> bool,\n-        exclude: &FxHashSet<Place<'tcx>>,\n+        exclude: &IndexVec<Local, bool>,\n     ) {\n         // We use this vector as stack, pushing and popping projections.\n         let mut projection = Vec::new();\n         for (local, decl) in body.local_decls.iter_enumerated() {\n-            self.register_with_filter_rec(\n-                tcx,\n-                local,\n-                &mut projection,\n-                decl.ty,\n-                &mut filter,\n-                exclude,\n-            );\n+            if !exclude[local] {\n+                self.register_with_filter_rec(tcx, local, &mut projection, decl.ty, &mut filter);\n+            }\n         }\n     }\n \n@@ -624,17 +620,10 @@ impl Map {\n         projection: &mut Vec<PlaceElem<'tcx>>,\n         ty: Ty<'tcx>,\n         filter: &mut impl FnMut(Ty<'tcx>) -> bool,\n-        exclude: &FxHashSet<Place<'tcx>>,\n     ) {\n-        let place = Place { local, projection: tcx.intern_place_elems(projection) };\n-        if exclude.contains(&place) {\n-            // This will also exclude all projections of the excluded place.\n-            return;\n-        }\n-\n         // Note: The framework supports only scalars for now.\n         if filter(ty) && ty.is_scalar() {\n-            trace!(\"registering place: {:?}\", place);\n+            // trace!(\"registering place {:?}\", PlaceRef { local, projection: &*projection });\n \n             // We know that the projection only contains trackable elements.\n             let place = self.make_place(local, projection).unwrap();\n@@ -653,7 +642,7 @@ impl Map {\n                 return;\n             }\n             projection.push(PlaceElem::Field(field, ty));\n-            self.register_with_filter_rec(tcx, local, projection, ty, filter, exclude);\n+            self.register_with_filter_rec(tcx, local, projection, ty, filter);\n             projection.pop();\n         });\n     }\n@@ -835,27 +824,27 @@ fn iter_fields<'tcx>(\n     }\n }\n \n-/// Returns all places, that have their reference or address taken.\n-///\n-/// This includes shared references, and also drops and `InlineAsm` out parameters.\n-fn escaped_places<'tcx>(body: &Body<'tcx>) -> FxHashSet<Place<'tcx>> {\n-    struct Collector<'tcx> {\n-        result: FxHashSet<Place<'tcx>>,\n+/// Returns all locals with projections that have their reference or address taken.\n+fn excluded_locals<'tcx>(body: &Body<'tcx>) -> IndexVec<Local, bool> {\n+    struct Collector {\n+        result: IndexVec<Local, bool>,\n     }\n \n-    impl<'tcx> Visitor<'tcx> for Collector<'tcx> {\n+    impl<'tcx> Visitor<'tcx> for Collector {\n         fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n             if context.is_borrow()\n                 || context.is_address_of()\n                 || context.is_drop()\n                 || context == PlaceContext::MutatingUse(MutatingUseContext::AsmOutput)\n             {\n-                self.result.insert(*place);\n+                // A pointer to a place could be used to access other places with the same local,\n+                // hence we have to exclude the local completely.\n+                self.result[place.local] = true;\n             }\n         }\n     }\n \n-    let mut collector = Collector { result: FxHashSet::default() };\n+    let mut collector = Collector { result: IndexVec::from_elem(false, &body.local_decls) };\n     collector.visit_body(body);\n     collector.result\n }"}, {"sha": "8126d4b8585e6573e8b9e8d684a1e99cfa4406a9", "filename": "src/test/mir-opt/dataflow-const-prop/sibling_ptr.main.DataflowConstProp.diff", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2e034dc68cb4d593f564f5ff8c444be5d12fc95b/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2e034dc68cb4d593f564f5ff8c444be5d12fc95b/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.main.DataflowConstProp.diff?ref=2e034dc68cb4d593f564f5ff8c444be5d12fc95b", "patch": "@@ -0,0 +1,56 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/sibling_ptr.rs:+0:11: +0:11\n+      let mut _1: (u8, u8);                // in scope 0 at $DIR/sibling_ptr.rs:+1:9: +1:14\n+      let _2: ();                          // in scope 0 at $DIR/sibling_ptr.rs:+2:5: +5:6\n+      let mut _4: *mut u8;                 // in scope 0 at $DIR/sibling_ptr.rs:+4:10: +4:18\n+      let mut _5: *mut u8;                 // in scope 0 at $DIR/sibling_ptr.rs:+4:10: +4:11\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/sibling_ptr.rs:+1:9: +1:14\n+          let _6: u8;                      // in scope 1 at $DIR/sibling_ptr.rs:+6:9: +6:11\n+          scope 2 {\n+              let _3: *mut u8;             // in scope 2 at $DIR/sibling_ptr.rs:+3:13: +3:14\n+              scope 3 {\n+                  debug p => _3;           // in scope 3 at $DIR/sibling_ptr.rs:+3:13: +3:14\n+              }\n+          }\n+          scope 4 {\n+              debug x1 => _6;              // in scope 4 at $DIR/sibling_ptr.rs:+6:9: +6:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/sibling_ptr.rs:+1:9: +1:14\n+          Deinit(_1);                      // scope 0 at $DIR/sibling_ptr.rs:+1:27: +1:33\n+          (_1.0: u8) = const 0_u8;         // scope 0 at $DIR/sibling_ptr.rs:+1:27: +1:33\n+          (_1.1: u8) = const 0_u8;         // scope 0 at $DIR/sibling_ptr.rs:+1:27: +1:33\n+          StorageLive(_2);                 // scope 1 at $DIR/sibling_ptr.rs:+2:5: +5:6\n+          StorageLive(_3);                 // scope 2 at $DIR/sibling_ptr.rs:+3:13: +3:14\n+          _3 = &raw mut (_1.0: u8);        // scope 2 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+          StorageLive(_4);                 // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n+          StorageLive(_5);                 // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n+          _5 = _3;                         // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:11\n+          _4 = ptr::mut_ptr::<impl *mut u8>::add(move _5, const 1_usize) -> bb1; // scope 3 at $DIR/sibling_ptr.rs:+4:10: +4:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/sibling_ptr.rs:8:12: 8:15\n+                                           // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 3 at $DIR/sibling_ptr.rs:+4:17: +4:18\n+          (*_4) = const 1_u8;              // scope 3 at $DIR/sibling_ptr.rs:+4:9: +4:22\n+          StorageDead(_4);                 // scope 3 at $DIR/sibling_ptr.rs:+4:22: +4:23\n+          _2 = const ();                   // scope 2 at $DIR/sibling_ptr.rs:+2:5: +5:6\n+          StorageDead(_3);                 // scope 2 at $DIR/sibling_ptr.rs:+5:5: +5:6\n+          StorageDead(_2);                 // scope 1 at $DIR/sibling_ptr.rs:+5:5: +5:6\n+          StorageLive(_6);                 // scope 1 at $DIR/sibling_ptr.rs:+6:9: +6:11\n+          _6 = (_1.1: u8);                 // scope 1 at $DIR/sibling_ptr.rs:+6:14: +6:17\n+          _0 = const ();                   // scope 0 at $DIR/sibling_ptr.rs:+0:11: +7:2\n+          StorageDead(_6);                 // scope 1 at $DIR/sibling_ptr.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/sibling_ptr.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/sibling_ptr.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "87ef00d18295fe1ca861d419d1f9f2b5004ad43e", "filename": "src/test/mir-opt/dataflow-const-prop/sibling_ptr.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e034dc68cb4d593f564f5ff8c444be5d12fc95b/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e034dc68cb4d593f564f5ff8c444be5d12fc95b/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fsibling_ptr.rs?ref=2e034dc68cb4d593f564f5ff8c444be5d12fc95b", "patch": "@@ -0,0 +1,11 @@\n+// unit-test: DataflowConstProp\n+\n+// EMIT_MIR sibling_ptr.main.DataflowConstProp.diff\n+fn main() {\n+    let mut x: (u8, u8) = (0, 0);\n+    unsafe {\n+        let p = std::ptr::addr_of_mut!(x.0);\n+        *p.add(1) = 1;\n+    }\n+    let x1 = x.1;  // should not be propagated\n+}"}]}