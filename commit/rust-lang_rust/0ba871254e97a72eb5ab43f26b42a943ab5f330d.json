{"sha": "0ba871254e97a72eb5ab43f26b42a943ab5f330d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYTg3MTI1NGU5N2E3MmViNWFiNDNmMjZiNDJhOTQzYWI1ZjMzMGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-07T16:30:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-07T16:30:52Z"}, "message": "Rollup merge of #47922 - zackmdavis:and_the_case_of_the_unused_field_pattern, r=estebank\n\ncorrect unused field pattern suggestions\n\n![unused_field_pattern_local](https://user-images.githubusercontent.com/1076988/35662336-7a69488a-06cc-11e8-9901-8d22b5cf924f.png)\n\nr? @estebank", "tree": {"sha": "d1f7240e765bf1fe004a13d4f38fe9e160a97e54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1f7240e765bf1fe004a13d4f38fe9e160a97e54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ba871254e97a72eb5ab43f26b42a943ab5f330d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaeym8CRBK7hj4Ov3rIwAAdHIIACLX0dESEfo2zbXXZtIz+Zkf\nTqVZkqCaRUlABuKVmlCw5bcMf2M1QbErlI80cJiIxJ/vkvnixLq8HCi3nzNOED9N\nT4Ac25izZh8AtNCHfHuSDy+cunnc/GbxENo3jHY+BwE6VJtTS42lSkO8+TURiUgy\nmzgsWXopvx4CDvhn8tBL061O+DsPM+4s8eC/rvRZa3TGRK8H53RWI7BThMOGX+JT\n4uuNfgDMFvJh2mEOm3CUHf09yunhw5BU75HAVBgae7BTCXnJLSyDZzq8cT9lIhF+\nszycc6Hhk+SuvINAXrtZt1cuK9hNpG93yNPH8BkZtzBuZCfnFRgJfliszMsujeM=\n=IgKj\n-----END PGP SIGNATURE-----\n", "payload": "tree d1f7240e765bf1fe004a13d4f38fe9e160a97e54\nparent d2f7febe9330664041d8d7790aa497bd7f9b8d5c\nparent e4b1a7971d7b4ed61d27af44e3169cb26595ae13\nauthor Manish Goregaokar <manishsmail@gmail.com> 1518021052 -0800\ncommitter GitHub <noreply@github.com> 1518021052 -0800\n\nRollup merge of #47922 - zackmdavis:and_the_case_of_the_unused_field_pattern, r=estebank\n\ncorrect unused field pattern suggestions\n\n![unused_field_pattern_local](https://user-images.githubusercontent.com/1076988/35662336-7a69488a-06cc-11e8-9901-8d22b5cf924f.png)\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba871254e97a72eb5ab43f26b42a943ab5f330d", "html_url": "https://github.com/rust-lang/rust/commit/0ba871254e97a72eb5ab43f26b42a943ab5f330d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ba871254e97a72eb5ab43f26b42a943ab5f330d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2f7febe9330664041d8d7790aa497bd7f9b8d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f7febe9330664041d8d7790aa497bd7f9b8d5c", "html_url": "https://github.com/rust-lang/rust/commit/d2f7febe9330664041d8d7790aa497bd7f9b8d5c"}, {"sha": "e4b1a7971d7b4ed61d27af44e3169cb26595ae13", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b1a7971d7b4ed61d27af44e3169cb26595ae13", "html_url": "https://github.com/rust-lang/rust/commit/e4b1a7971d7b4ed61d27af44e3169cb26595ae13"}], "stats": {"total": 144, "additions": 127, "deletions": 17}, "files": [{"sha": "10497c95e27d07e79531034c15120e0c48406392", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0ba871254e97a72eb5ab43f26b42a943ab5f330d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba871254e97a72eb5ab43f26b42a943ab5f330d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=0ba871254e97a72eb5ab43f26b42a943ab5f330d", "patch": "@@ -109,7 +109,7 @@ use self::VarKind::*;\n use hir::def::*;\n use ty::{self, TyCtxt};\n use lint;\n-use util::nodemap::NodeMap;\n+use util::nodemap::{NodeMap, NodeSet};\n \n use std::{fmt, usize};\n use std::io::prelude::*;\n@@ -244,7 +244,8 @@ struct CaptureInfo {\n #[derive(Copy, Clone, Debug)]\n struct LocalInfo {\n     id: NodeId,\n-    name: ast::Name\n+    name: ast::Name,\n+    is_shorthand: bool,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -333,6 +334,13 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n         }\n     }\n \n+    fn variable_is_shorthand(&self, var: Variable) -> bool {\n+        match self.var_kinds[var.get()] {\n+            Local(LocalInfo { is_shorthand, .. }) => is_shorthand,\n+            Arg(..) | CleanExit => false\n+        }\n+    }\n+\n     fn set_captures(&mut self, node_id: NodeId, cs: Vec<CaptureInfo>) {\n         self.capture_info_map.insert(node_id, Rc::new(cs));\n     }\n@@ -384,23 +392,41 @@ fn visit_local<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, local: &'tcx hir::Local) {\n         let name = path1.node;\n         ir.add_live_node_for_node(p_id, VarDefNode(sp));\n         ir.add_variable(Local(LocalInfo {\n-          id: p_id,\n-          name,\n+            id: p_id,\n+            name,\n+            is_shorthand: false,\n         }));\n     });\n     intravisit::walk_local(ir, local);\n }\n \n fn visit_arm<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, arm: &'tcx hir::Arm) {\n     for pat in &arm.pats {\n+        // for struct patterns, take note of which fields used shorthand (`x`\n+        // rather than `x: x`)\n+        //\n+        // FIXME: according to the rust-lang-nursery/rustc-guide book and\n+        // librustc/README.md, `NodeId`s are to be phased out in favor of\n+        // `HirId`s; however, we need to match the signature of `each_binding`,\n+        // which uses `NodeIds`.\n+        let mut shorthand_field_ids = NodeSet();\n+        if let hir::PatKind::Struct(_, ref fields, _) = pat.node {\n+            for field in fields {\n+                if field.node.is_shorthand {\n+                    shorthand_field_ids.insert(field.node.pat.id);\n+                }\n+            }\n+        }\n+\n         pat.each_binding(|bm, p_id, sp, path1| {\n             debug!(\"adding local variable {} from match with bm {:?}\",\n                    p_id, bm);\n             let name = path1.node;\n             ir.add_live_node_for_node(p_id, VarDefNode(sp));\n             ir.add_variable(Local(LocalInfo {\n                 id: p_id,\n-                name,\n+                name: name,\n+                is_shorthand: shorthand_field_ids.contains(&p_id)\n             }));\n         })\n     }\n@@ -1483,17 +1509,26 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     self.assigned_on_exit(ln, var).is_some()\n                 };\n \n+                let suggest_underscore_msg = format!(\"consider using `_{}` instead\",\n+                                                     name);\n                 if is_assigned {\n-                    self.ir.tcx.lint_node_note(lint::builtin::UNUSED_VARIABLES, id, sp,\n-                        &format!(\"variable `{}` is assigned to, but never used\",\n-                                 name),\n-                        &format!(\"to avoid this warning, consider using `_{}` instead\",\n-                                 name));\n+                    self.ir.tcx\n+                        .lint_node_note(lint::builtin::UNUSED_VARIABLES, id, sp,\n+                                        &format!(\"variable `{}` is assigned to, but never used\",\n+                                                 name),\n+                                        &suggest_underscore_msg);\n                 } else if name != \"self\" {\n-                    self.ir.tcx.lint_node_note(lint::builtin::UNUSED_VARIABLES, id, sp,\n-                        &format!(\"unused variable: `{}`\", name),\n-                        &format!(\"to avoid this warning, consider using `_{}` instead\",\n-                                 name));\n+                    let msg = format!(\"unused variable: `{}`\", name);\n+                    let mut err = self.ir.tcx\n+                        .struct_span_lint_node(lint::builtin::UNUSED_VARIABLES, id, sp, &msg);\n+                    if self.ir.variable_is_shorthand(var) {\n+                        err.span_suggestion(sp, \"try ignoring the field\",\n+                                            format!(\"{}: _\", name));\n+                    } else {\n+                        err.span_suggestion_short(sp, &suggest_underscore_msg,\n+                                                  format!(\"_{}\", name));\n+                    }\n+                    err.emit()\n                 }\n             }\n             true"}, {"sha": "f98a8f834df8a912f1bdb914f1d904eed1c6270e", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ba871254e97a72eb5ab43f26b42a943ab5f330d/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba871254e97a72eb5ab43f26b42a943ab5f330d/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=0ba871254e97a72eb5ab43f26b42a943ab5f330d", "patch": "@@ -13,18 +13,20 @@\n #![allow(non_snake_case)]\n \n use hir::def_id::DefId;\n-use hir::ItemLocalId;\n+use hir::{HirId, ItemLocalId};\n use syntax::ast;\n \n pub use rustc_data_structures::fx::FxHashMap;\n pub use rustc_data_structures::fx::FxHashSet;\n \n pub type NodeMap<T> = FxHashMap<ast::NodeId, T>;\n pub type DefIdMap<T> = FxHashMap<DefId, T>;\n+pub type HirIdMap<T> = FxHashMap<HirId, T>;\n pub type ItemLocalMap<T> = FxHashMap<ItemLocalId, T>;\n \n pub type NodeSet = FxHashSet<ast::NodeId>;\n pub type DefIdSet = FxHashSet<DefId>;\n+pub type HirIdSet = FxHashSet<HirId>;\n pub type ItemLocalSet = FxHashSet<ItemLocalId>;\n \n pub fn NodeMap<T>() -> NodeMap<T> { FxHashMap() }"}, {"sha": "a68b4f763529240d63b9382f3bc94531259a15db", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0ba871254e97a72eb5ab43f26b42a943ab5f330d/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba871254e97a72eb5ab43f26b42a943ab5f330d/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs?ref=0ba871254e97a72eb5ab43f26b42a943ab5f330d", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+#![warn(unused)] // UI tests pass `-A unused` (#43896)\n+\n+struct SoulHistory {\n+    corridors_of_light: usize,\n+    hours_are_suns: bool,\n+    endless_and_singing: bool\n+}\n+\n+fn main() {\n+    let i_think_continually = 2;\n+    let who_from_the_womb_remembered = SoulHistory {\n+        corridors_of_light: 5,\n+        hours_are_suns: true,\n+        endless_and_singing: true\n+    };\n+\n+    if let SoulHistory { corridors_of_light,\n+                         mut hours_are_suns,\n+                         endless_and_singing: true } = who_from_the_womb_remembered {\n+        hours_are_suns = false;\n+    }\n+}"}, {"sha": "694fe69e016486e7edf34c0507c0030ffd161ae1", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0ba871254e97a72eb5ab43f26b42a943ab5f330d/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ba871254e97a72eb5ab43f26b42a943ab5f330d/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=0ba871254e97a72eb5ab43f26b42a943ab5f330d", "patch": "@@ -0,0 +1,40 @@\n+warning: unused variable: `i_think_continually`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:22:9\n+   |\n+22 |     let i_think_continually = 2;\n+   |         ^^^^^^^^^^^^^^^^^^^ help: consider using `_i_think_continually` instead\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:13:9\n+   |\n+13 | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n+   |         ^^^^^^\n+   = note: #[warn(unused_variables)] implied by #[warn(unused)]\n+\n+warning: unused variable: `corridors_of_light`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:29:26\n+   |\n+29 |     if let SoulHistory { corridors_of_light,\n+   |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n+\n+warning: variable `hours_are_suns` is assigned to, but never used\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:30:26\n+   |\n+30 |                          mut hours_are_suns,\n+   |                          ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: consider using `_hours_are_suns` instead\n+\n+warning: value assigned to `hours_are_suns` is never read\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:32:9\n+   |\n+32 |         hours_are_suns = false;\n+   |         ^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:13:9\n+   |\n+13 | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n+   |         ^^^^^^\n+   = note: #[warn(unused_assignments)] implied by #[warn(unused)]\n+"}, {"sha": "31728dbf08db2b642c6d3bc6f68a567a02e93be7", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ba871254e97a72eb5ab43f26b42a943ab5f330d/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ba871254e97a72eb5ab43f26b42a943ab5f330d/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=0ba871254e97a72eb5ab43f26b42a943ab5f330d", "patch": "@@ -2,15 +2,14 @@ warning: unused variable: `theOtherTwo`\n   --> $DIR/issue-24690.rs:23:9\n    |\n 23 |     let theOtherTwo = 2; //~ WARN should have a snake case name\n-   |         ^^^^^^^^^^^\n+   |         ^^^^^^^^^^^ help: consider using `_theOtherTwo` instead\n    |\n note: lint level defined here\n   --> $DIR/issue-24690.rs:18:9\n    |\n 18 | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n-   = note: to avoid this warning, consider using `_theOtherTwo` instead\n \n warning: variable `theTwo` should have a snake case name such as `the_two`\n   --> $DIR/issue-24690.rs:22:9"}]}