{"sha": "5edbdd127a59ed79bf9381a4005efb4e7bcb262b", "node_id": "C_kwDOAAsO6NoAKDVlZGJkZDEyN2E1OWVkNzliZjkzODFhNDAwNWVmYjRlN2JjYjI2MmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-01T10:12:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-01T10:12:59Z"}, "message": "Auto merge of #12918 - lowr:fix/doctest-names, r=Veykril\n\nfix: remove whitespaces from doctest names\n\nWhen rustdoc runs doctests, it removes whitespaces from the tests' path ([code](https://github.com/rust-lang/rust/blob/25bb1c13bd472b75ceebee3b8dcf4dcbc431a8be/src/librustdoc/doctest.rs#L951)). See https://github.com/rust-lang/rust/pull/89422 for details.\n\nInterestingly enough, \"Run doctest\" has been working without much problem even though rust-analyzer hasn't followed the change. This is because cargo passes the test name to rustdoc via `--test-args` option, and then rustdoc [splits it by whitespace](https://github.com/rust-lang/rust/blob/25bb1c13bd472b75ceebee3b8dcf4dcbc431a8be/src/librustdoc/config.rs#L513-L514); the last element of the split test name **always** matches the test name that rustdoc generates.\n\nHowever, it may run other tests unexpectedly (to be precise, this has long since been a thing because of the split). Consider the following example:\n\n```rust\nstruct A<T, U>(T, U);\nstruct B<T, U>(T, U);\n/// ```\n/// doctest here\n/// ```\nimpl<T, U> A<T, U> {}\n/// ```\n/// doctest here\n/// ```\nimpl<T, U> B<T, U> {}\n```\n\nWhen you \"Run doctest\" either of the two, rustdoc considers \"U>\" one of the test specs and both doctests are run. This patch fixes it by following rustdoc and removing the whitespace from the doctests' name.", "tree": {"sha": "7f3791792d821678780cd0bfa3c6a8abd1bb64ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f3791792d821678780cd0bfa3c6a8abd1bb64ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5edbdd127a59ed79bf9381a4005efb4e7bcb262b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5edbdd127a59ed79bf9381a4005efb4e7bcb262b", "html_url": "https://github.com/rust-lang/rust/commit/5edbdd127a59ed79bf9381a4005efb4e7bcb262b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5edbdd127a59ed79bf9381a4005efb4e7bcb262b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b472f6684bb1958274995d12b2c50310d88cc52", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b472f6684bb1958274995d12b2c50310d88cc52", "html_url": "https://github.com/rust-lang/rust/commit/2b472f6684bb1958274995d12b2c50310d88cc52"}, {"sha": "d40ab66186fa477177a10d01eb16960a5f20c7ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/d40ab66186fa477177a10d01eb16960a5f20c7ac", "html_url": "https://github.com/rust-lang/rust/commit/d40ab66186fa477177a10d01eb16960a5f20c7ac"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "3155f97f258dcfa82a22b95fa8dd85c87287ac06", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 71, "deletions": 6, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5edbdd127a59ed79bf9381a4005efb4e7bcb262b/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edbdd127a59ed79bf9381a4005efb4e7bcb262b/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=5edbdd127a59ed79bf9381a4005efb4e7bcb262b", "patch": "@@ -373,11 +373,13 @@ pub(crate) fn runnable_impl(\n     let adt_name = ty.as_adt()?.name(sema.db);\n     let mut ty_args = ty.type_arguments().peekable();\n     let params = if ty_args.peek().is_some() {\n-        format!(\"<{}>\", ty_args.format_with(\", \", |ty, cb| cb(&ty.display(sema.db))))\n+        format!(\"<{}>\", ty_args.format_with(\",\", |ty, cb| cb(&ty.display(sema.db))))\n     } else {\n         String::new()\n     };\n-    let test_id = TestId::Path(format!(\"{}{}\", adt_name, params));\n+    let mut test_id = format!(\"{}{}\", adt_name, params);\n+    test_id.retain(|c| c != ' ');\n+    let test_id = TestId::Path(test_id);\n \n     Some(Runnable { use_name_in_title: false, nav, kind: RunnableKind::DocTest { test_id }, cfg })\n }\n@@ -441,10 +443,11 @@ fn module_def_doctest(db: &RootDatabase, def: Definition) -> Option<Runnable> {\n                         format_to!(\n                             path,\n                             \"<{}>\",\n-                            ty_args.format_with(\", \", |ty, cb| cb(&ty.display(db)))\n+                            ty_args.format_with(\",\", |ty, cb| cb(&ty.display(db)))\n                         );\n                     }\n                     format_to!(path, \"::{}\", def_name);\n+                    path.retain(|c| c != ' ');\n                     return Some(path);\n                 }\n             }\n@@ -2067,13 +2070,23 @@ mod tests {\n $0\n struct Foo<T, U>;\n \n+/// ```\n+/// ```\n impl<T, U> Foo<T, U> {\n     /// ```rust\n     /// ````\n     fn t() {}\n }\n+\n+/// ```\n+/// ```\n+impl Foo<Foo<(), ()>, ()> {\n+    /// ```\n+    /// ```\n+    fn t() {}\n+}\n \"#,\n-            &[DocTest],\n+            &[DocTest, DocTest, DocTest, DocTest],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -2082,12 +2095,64 @@ impl<T, U> Foo<T, U> {\n                             file_id: FileId(\n                                 0,\n                             ),\n-                            full_range: 47..85,\n+                            full_range: 20..103,\n+                            focus_range: 47..56,\n+                            name: \"impl\",\n+                            kind: Impl,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Foo<T,U>\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 63..101,\n+                            name: \"t\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Foo<T,U>::t\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 105..188,\n+                            focus_range: 126..146,\n+                            name: \"impl\",\n+                            kind: Impl,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"Foo<Foo<(),()>,()>\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 153..186,\n                             name: \"t\",\n                         },\n                         kind: DocTest {\n                             test_id: Path(\n-                                \"Foo<T, U>::t\",\n+                                \"Foo<Foo<(),()>,()>::t\",\n                             ),\n                         },\n                         cfg: None,"}]}