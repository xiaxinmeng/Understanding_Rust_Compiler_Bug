{"sha": "f7fa67cea13efdacfc82389f6f592bb4bda86a2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZmE2N2NlYTEzZWZkYWNmYzgyMzg5ZjZmNTkyYmI0YmRhODZhMmU=", "commit": {"author": {"name": "Jordan Rhee", "email": "jordanrh@microsoft.com", "date": "2018-06-26T16:44:19Z"}, "committer": {"name": "Jordan Rhee", "email": "jordanrh@microsoft.com", "date": "2018-09-04T21:54:37Z"}, "message": "Add target thumbv7a-pc-windows-msvc", "tree": {"sha": "733f114a89b99f464534a1cfdc76fda72f512ef7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/733f114a89b99f464534a1cfdc76fda72f512ef7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7fa67cea13efdacfc82389f6f592bb4bda86a2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fa67cea13efdacfc82389f6f592bb4bda86a2e", "html_url": "https://github.com/rust-lang/rust/commit/f7fa67cea13efdacfc82389f6f592bb4bda86a2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/comments", "author": {"login": "jordanrh1", "id": 11446053, "node_id": "MDQ6VXNlcjExNDQ2MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/11446053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jordanrh1", "html_url": "https://github.com/jordanrh1", "followers_url": "https://api.github.com/users/jordanrh1/followers", "following_url": "https://api.github.com/users/jordanrh1/following{/other_user}", "gists_url": "https://api.github.com/users/jordanrh1/gists{/gist_id}", "starred_url": "https://api.github.com/users/jordanrh1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jordanrh1/subscriptions", "organizations_url": "https://api.github.com/users/jordanrh1/orgs", "repos_url": "https://api.github.com/users/jordanrh1/repos", "events_url": "https://api.github.com/users/jordanrh1/events{/privacy}", "received_events_url": "https://api.github.com/users/jordanrh1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jordanrh1", "id": 11446053, "node_id": "MDQ6VXNlcjExNDQ2MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/11446053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jordanrh1", "html_url": "https://github.com/jordanrh1", "followers_url": "https://api.github.com/users/jordanrh1/followers", "following_url": "https://api.github.com/users/jordanrh1/following{/other_user}", "gists_url": "https://api.github.com/users/jordanrh1/gists{/gist_id}", "starred_url": "https://api.github.com/users/jordanrh1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jordanrh1/subscriptions", "organizations_url": "https://api.github.com/users/jordanrh1/orgs", "repos_url": "https://api.github.com/users/jordanrh1/repos", "events_url": "https://api.github.com/users/jordanrh1/events{/privacy}", "received_events_url": "https://api.github.com/users/jordanrh1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2e17f4e3a2070a7f703f51e29c1c388ef703b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2e17f4e3a2070a7f703f51e29c1c388ef703b6", "html_url": "https://github.com/rust-lang/rust/commit/1c2e17f4e3a2070a7f703f51e29c1c388ef703b6"}], "stats": {"total": 125, "additions": 123, "deletions": 2}, "files": [{"sha": "8333477a8416e30480cfd40ae28051e35a224c72", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=f7fa67cea13efdacfc82389f6f592bb4bda86a2e", "patch": "@@ -119,7 +119,9 @@ mod imp {\n     }\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+// TODO: this needs to be validated when WinEH for ARM is implemented in LLVM\n+// It looks like ARM and ARM64 use the same _TypeInfo semantics as x64\n+#[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\"))]\n #[macro_use]\n mod imp {\n     pub type ptr_t = u32;"}, {"sha": "3c68b5a7ab1163d6c640aeb351ddc95b33ab10e4", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=f7fa67cea13efdacfc82389f6f592bb4bda86a2e", "patch": "@@ -386,6 +386,7 @@ supported_targets! {\n     (\"x86_64-pc-windows-msvc\", x86_64_pc_windows_msvc),\n     (\"i686-pc-windows-msvc\", i686_pc_windows_msvc),\n     (\"i586-pc-windows-msvc\", i586_pc_windows_msvc),\n+    (\"thumbv7a-pc-windows-msvc\", thumbv7a_pc_windows_msvc),\n \n     (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),"}, {"sha": "2da975a21a222fbdf605844697d795868064ba89", "filename": "src/librustc_target/spec/thumbv7a_pc_windows_msvc.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=f7fa67cea13efdacfc82389f6f592bb4bda86a2e", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult, PanicStrategy};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::windows_msvc_base::opts();\n+\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\n+        \"/LIBPATH:C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\VC\\\\Tools\\\\MSVC\\\\14.11.25503\\\\lib\\\\arm\".to_string());\n+\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\n+        \"/LIBPATH:C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\lib\\\\10.0.17134.0\\\\ucrt\\\\arm\".to_string());\n+\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\n+        \"/LIBPATH:C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\lib\\\\10.0.17134.0\\\\um\\\\arm\".to_string());\n+\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\n+        \"/MACHINE:ARM\".to_string());\n+\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\n+        \"/INCREMENTAL:NO\".to_string());\n+\n+    // Prevent error LNK2013: BRANCH24(T) fixup overflow\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\n+        \"/OPT:NOLBR\".to_string());\n+\n+    base.panic_strategy = PanicStrategy::Abort;\n+\n+    Ok(Target {\n+        llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:w-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"windows\".to_string(),\n+        target_env: \"msvc\".to_string(),\n+        target_vendor: \"pc\".to_string(),\n+        linker_flavor: LinkerFlavor::Msvc,\n+\n+        options: TargetOptions {\n+            features: \"+v7,+thumb-mode,+vfp3,+d16,+thumb2,+neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "cfa9e7b7c25b31ad8cd4c6b1a5cfdd64a95f65f6", "filename": "src/libstd/sys/windows/backtrace/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs?ref=f7fa67cea13efdacfc82389f6f592bb4bda86a2e", "patch": "@@ -248,6 +248,17 @@ impl StackFrame for c::STACKFRAME_EX {\n         c::IMAGE_FILE_MACHINE_AMD64\n     }\n \n+    #[cfg(target_arch = \"arm\")]\n+    fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n+        self.AddrPC.Offset = ctx.Pc as u64;\n+        self.AddrPC.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrStack.Offset = ctx.Sp as u64;\n+        self.AddrStack.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrFrame.Offset = ctx.R11 as u64;\n+        self.AddrFrame.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        c::IMAGE_FILE_MACHINE_ARMNT\n+    }\n+\n     #[cfg(target_arch = \"aarch64\")]\n     fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n         self.AddrPC.Offset = ctx.Pc as u64;\n@@ -291,6 +302,17 @@ impl StackFrame for c::STACKFRAME64 {\n         c::IMAGE_FILE_MACHINE_AMD64\n     }\n \n+    #[cfg(target_arch = \"arm\")]\n+    fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n+        self.AddrPC.Offset = ctx.Pc as u64;\n+        self.AddrPC.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrStack.Offset = ctx.Sp as u64;\n+        self.AddrStack.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrFrame.Offset = ctx.R11 as u64;\n+        self.AddrFrame.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        c::IMAGE_FILE_MACHINE_ARMNT\n+    }\n+\n     #[cfg(target_arch = \"aarch64\")]\n     fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n         self.AddrPC.Offset = ctx.Pc as u64;"}, {"sha": "dc0eb244155382f22a0c36102d22d7e2a674fd3e", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fa67cea13efdacfc82389f6f592bb4bda86a2e/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=f7fa67cea13efdacfc82389f6f592bb4bda86a2e", "patch": "@@ -114,6 +114,11 @@ pub const SECURITY_SQOS_PRESENT: DWORD = 0x00100000;\n \n pub const FIONBIO: c_ulong = 0x8004667e;\n \n+#[cfg(target_arch = \"arm\")]\n+const ARM_MAX_BREAKPOINTS: usize = 8;\n+#[cfg(target_arch = \"arm\")]\n+const ARM_MAX_WATCHPOINTS: usize = 1;\n+\n #[repr(C)]\n #[derive(Copy)]\n pub struct WIN32_FIND_DATAW {\n@@ -283,6 +288,9 @@ pub const IMAGE_FILE_MACHINE_AMD64: DWORD = 0x8664;\n #[cfg(target_arch = \"aarch64\")]\n #[cfg(feature = \"backtrace\")]\n pub const IMAGE_FILE_MACHINE_ARM64: DWORD = 0xAA64;\n+#[cfg(target_arch = \"arm\")]\n+#[cfg(feature = \"backtrace\")]\n+pub const IMAGE_FILE_MACHINE_ARMNT: DWORD = 0x01c4;\n \n pub const EXCEPTION_CONTINUE_SEARCH: LONG = 0;\n pub const EXCEPTION_STACK_OVERFLOW: DWORD = 0xc00000fd;\n@@ -789,12 +797,43 @@ pub struct FLOATING_SAVE_AREA {\n     _Dummy: [u8; 512] // FIXME: Fill this out\n }\n \n+#[cfg(target_arch = \"arm\")]\n+#[repr(C)]\n+pub struct CONTEXT {\n+    pub ContextFlags: ULONG,\n+    pub R0: ULONG,\n+    pub R1: ULONG,\n+    pub R2: ULONG,\n+    pub R3: ULONG,\n+    pub R4: ULONG,\n+    pub R5: ULONG,\n+    pub R6: ULONG,\n+    pub R7: ULONG,\n+    pub R8: ULONG,\n+    pub R9: ULONG,\n+    pub R10: ULONG,\n+    pub R11: ULONG,\n+    pub R12: ULONG,\n+    pub Sp: ULONG,\n+    pub Lr: ULONG,\n+    pub Pc: ULONG,\n+    pub Cpsr: ULONG,\n+    pub Fpscr: ULONG,\n+    pub Padding: ULONG,\n+    pub D: [u64; 32],\n+    pub Bvr: [ULONG; ARM_MAX_BREAKPOINTS],\n+    pub Bcr: [ULONG; ARM_MAX_BREAKPOINTS],\n+    pub Wvr: [ULONG; ARM_MAX_WATCHPOINTS],\n+    pub Wcr: [ULONG; ARM_MAX_WATCHPOINTS],\n+    pub Padding2: [ULONG; 2]\n+}\n+\n // FIXME(#43348): This structure is used for backtrace only, and a fake\n // definition is provided here only to allow rustdoc to pass type-check. This\n // will not appear in the final documentation. This should be also defined for\n // other architectures supported by Windows such as ARM, and for historical\n // interest, maybe MIPS and PowerPC as well.\n-#[cfg(all(rustdoc, not(any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"aarch64\"))))]\n+#[cfg(all(rustdoc, not(any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"aarch64\", target_arch = \"arm\"))))]\n pub enum CONTEXT {}\n \n #[cfg(target_arch = \"aarch64\")]"}]}