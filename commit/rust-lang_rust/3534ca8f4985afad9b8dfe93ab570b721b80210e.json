{"sha": "3534ca8f4985afad9b8dfe93ab570b721b80210e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MzRjYThmNDk4NWFmYWQ5YjhkZmU5M2FiNTcwYjcyMWI4MDIxMGU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-20T00:28:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-24T17:54:16Z"}, "message": "Turn crate store into a resolver output", "tree": {"sha": "2209c4b0513bb9105302a47257f74c1083d449be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2209c4b0513bb9105302a47257f74c1083d449be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3534ca8f4985afad9b8dfe93ab570b721b80210e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3534ca8f4985afad9b8dfe93ab570b721b80210e", "html_url": "https://github.com/rust-lang/rust/commit/3534ca8f4985afad9b8dfe93ab570b721b80210e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3534ca8f4985afad9b8dfe93ab570b721b80210e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd796ad067f0c23c05524276279d057c9699c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd796ad067f0c23c05524276279d057c9699c97", "html_url": "https://github.com/rust-lang/rust/commit/5fd796ad067f0c23c05524276279d057c9699c97"}], "stats": {"total": 202, "additions": 102, "deletions": 100}, "files": [{"sha": "002e6874466bbd12321c6256411c24d1499879c2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -83,8 +83,6 @@ pub struct LoweringContext<'a> {\n     /// Used to assign IDs to HIR nodes that do not directly correspond to AST nodes.\n     sess: &'a Session,\n \n-    cstore: &'a dyn CrateStore,\n-\n     resolver: &'a mut dyn Resolver,\n \n     /// HACK(Centril): there is a cyclic dependency between the parser and lowering\n@@ -160,6 +158,8 @@ pub struct LoweringContext<'a> {\n }\n \n pub trait Resolver {\n+    fn cstore(&self) -> &dyn CrateStore;\n+\n     /// Obtains resolution for a `NodeId` with a single resolution.\n     fn get_partial_res(&mut self, id: NodeId) -> Option<PartialRes>;\n \n@@ -240,7 +240,6 @@ impl<'a> ImplTraitContext<'a> {\n \n pub fn lower_crate(\n     sess: &Session,\n-    cstore: &dyn CrateStore,\n     dep_graph: &DepGraph,\n     krate: &Crate,\n     resolver: &mut dyn Resolver,\n@@ -256,7 +255,6 @@ pub fn lower_crate(\n     LoweringContext {\n         crate_root: sess.parse_sess.injected_crate_name.try_get().copied(),\n         sess,\n-        cstore,\n         resolver,\n         nt_to_tokenstream,\n         items: BTreeMap::new(),\n@@ -980,7 +978,7 @@ impl<'a> LoweringContext<'a> {\n         if id.is_local() {\n             self.resolver.definitions().def_key(id.index)\n         } else {\n-            self.cstore.def_key(id)\n+            self.resolver.cstore().def_key(id)\n         }\n     }\n \n@@ -1727,8 +1725,8 @@ impl<'a> LoweringContext<'a> {\n                             return n;\n                         }\n                         assert!(!def_id.is_local());\n-                        let item_generics =\n-                            self.cstore.item_generics_cloned_untracked(def_id, self.sess);\n+                        let item_generics = self.resolver.cstore()\n+                            .item_generics_cloned_untracked(def_id, self.sess);\n                         let n = item_generics.own_counts().lifetimes;\n                         self.type_def_lifetime_params.insert(def_id, n);\n                         n"}, {"sha": "9b2e6df6bea14d403a92085a7a15ab008d484dd6", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -1027,7 +1027,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     interners: CtxtInterners<'tcx>,\n \n-    cstore: &'tcx CrateStoreDyn,\n+    cstore: Box<CrateStoreDyn>,\n \n     pub sess: &'tcx Session,\n \n@@ -1195,7 +1195,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn create_global_ctxt(\n         s: &'tcx Session,\n         lint_store: Lrc<lint::LintStore>,\n-        cstore: &'tcx CrateStoreDyn,\n         local_providers: ty::query::Providers<'tcx>,\n         extern_providers: ty::query::Providers<'tcx>,\n         arenas: &'tcx AllArenas,\n@@ -1213,6 +1212,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n         let dep_graph = hir.dep_graph.clone();\n+        let cstore = resolutions.cstore;\n         let max_cnum = cstore.crates_untracked().iter().map(|c| c.as_usize()).max().unwrap_or(0);\n         let mut providers = IndexVec::from_elem_n(extern_providers, max_cnum + 1);\n         providers[LOCAL_CRATE] = local_providers;\n@@ -1428,7 +1428,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         StableHashingContext::new(self.sess,\n                                   krate,\n                                   self.hir().definitions(),\n-                                  self.cstore)\n+                                  &*self.cstore)\n     }\n \n     // This method makes sure that we have a DepNode and a Fingerprint for"}, {"sha": "90450494a141911fb19fb3faad2b1729ceac7df0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -15,6 +15,7 @@ use rustc_macros::HashStable;\n use crate::ich::Fingerprint;\n use crate::ich::StableHashingContext;\n use crate::infer::canonical::Canonical;\n+use crate::middle::cstore::CrateStoreDyn;\n use crate::middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n use crate::mir::Body;\n@@ -121,6 +122,7 @@ mod sty;\n \n pub struct ResolverOutputs {\n     pub definitions: hir_map::Definitions,\n+    pub cstore: Box<CrateStoreDyn>,\n     pub extern_crate_map: NodeMap<CrateNum>,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,"}, {"sha": "e014e4ed0fdc1cbe6fdb960fc012f2f2e2c1a3c7", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -11,7 +11,6 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::OnDrop;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n-use rustc_metadata::cstore::CStore;\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n@@ -37,7 +36,6 @@ pub struct Compiler {\n     pub(crate) output_dir: Option<PathBuf>,\n     pub(crate) output_file: Option<PathBuf>,\n     pub(crate) queries: Queries,\n-    pub(crate) cstore: Lrc<CStore>,\n     pub(crate) crate_name: Option<String>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n }\n@@ -49,9 +47,6 @@ impl Compiler {\n     pub fn codegen_backend(&self) -> &Lrc<Box<dyn CodegenBackend>> {\n         &self.codegen_backend\n     }\n-    pub fn cstore(&self) -> &Lrc<CStore> {\n-        &self.cstore\n-    }\n     pub fn source_map(&self) -> &Lrc<SourceMap> {\n         &self.source_map\n     }\n@@ -160,13 +155,10 @@ where\n         config.lint_caps,\n     );\n \n-    let cstore = Lrc::new(CStore::new(codegen_backend.metadata_loader()));\n-\n     let compiler = Compiler {\n         sess,\n         codegen_backend,\n         source_map,\n-        cstore,\n         input: config.input,\n         input_path: config.input_path,\n         output_dir: config.output_dir,"}, {"sha": "80ce203b4fbb6bafbef03a074d0ad33b8039757e", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::lowering::lower_crate;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n-use rustc::middle::cstore::{CrateStore, MetadataLoader};\n+use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n use rustc::ty::{self, AllArenas, ResolverOutputs, TyCtxt, GlobalCtxt};\n use rustc::ty::steal::Steal;\n use rustc::traits;\n@@ -23,8 +23,7 @@ use rustc_codegen_utils::link::filename_for_metadata;\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_data_structures::sync::{Lrc, ParallelIterator, par_iter};\n use rustc_incremental;\n-use rustc_metadata::creader::CrateLoader;\n-use rustc_metadata::cstore::{self, CStore};\n+use rustc_metadata::cstore;\n use rustc_mir as mir;\n use rustc_passes::{self, ast_validation, hir_stats, layout_test};\n use rustc_plugin as plugin;\n@@ -116,7 +115,7 @@ declare_box_region_type!(\n pub fn configure_and_expand(\n     sess: Lrc<Session>,\n     lint_store: Lrc<lint::LintStore>,\n-    cstore: Lrc<CStore>,\n+    metadata_loader: Box<MetadataLoaderDyn>,\n     krate: ast::Crate,\n     crate_name: &str,\n     plugin_info: PluginInfo,\n@@ -129,16 +128,14 @@ pub fn configure_and_expand(\n     let crate_name = crate_name.to_string();\n     let (result, resolver) = BoxedResolver::new(static move || {\n         let sess = &*sess;\n-        let crate_loader = CrateLoader::new(sess, &*cstore, &crate_name);\n         let resolver_arenas = Resolver::arenas();\n         let res = configure_and_expand_inner(\n             sess,\n             &lint_store,\n-            &*cstore,\n             krate,\n             &crate_name,\n             &resolver_arenas,\n-            &crate_loader,\n+            &*metadata_loader,\n             plugin_info,\n         );\n         let mut resolver = match res {\n@@ -275,11 +272,10 @@ pub fn register_plugins<'a>(\n fn configure_and_expand_inner<'a>(\n     sess: &'a Session,\n     lint_store: &'a lint::LintStore,\n-    cstore: &'a CStore,\n     mut krate: ast::Crate,\n     crate_name: &str,\n     resolver_arenas: &'a ResolverArenas<'a>,\n-    crate_loader: &'a CrateLoader<'a>,\n+    metadata_loader: &'a MetadataLoaderDyn,\n     plugin_info: PluginInfo,\n ) -> Result<(ast::Crate, Resolver<'a>)> {\n     time(sess, \"pre-AST-expansion lint checks\", || {\n@@ -293,10 +289,9 @@ fn configure_and_expand_inner<'a>(\n \n     let mut resolver = Resolver::new(\n         sess,\n-        cstore,\n         &krate,\n         crate_name,\n-        crate_loader,\n+        metadata_loader,\n         &resolver_arenas,\n     );\n     syntax_ext::register_builtin_macros(&mut resolver, sess.edition());\n@@ -496,15 +491,14 @@ fn configure_and_expand_inner<'a>(\n pub fn lower_to_hir(\n     sess: &Session,\n     lint_store: &lint::LintStore,\n-    cstore: &CStore,\n     resolver: &mut Resolver<'_>,\n     dep_graph: &DepGraph,\n     krate: &ast::Crate,\n ) -> Result<hir::map::Forest> {\n     // Lower AST to HIR.\n     let hir_forest = time(sess, \"lowering AST -> HIR\", || {\n         let nt_to_tokenstream = syntax::parse::nt_to_tokenstream;\n-        let hir_crate = lower_crate(sess, cstore, &dep_graph, &krate, resolver, nt_to_tokenstream);\n+        let hir_crate = lower_crate(sess, &dep_graph, &krate, resolver, nt_to_tokenstream);\n \n         if sess.opts.debugging_opts.hir_stats {\n             hir_stats::print_hir_stats(&hir_crate);\n@@ -610,8 +604,12 @@ fn escape_dep_filename(filename: &FileName) -> String {\n     filename.to_string().replace(\" \", \"\\\\ \")\n }\n \n-fn write_out_deps(compiler: &Compiler, outputs: &OutputFilenames, out_filenames: &[PathBuf]) {\n-    let sess = &compiler.sess;\n+fn write_out_deps(\n+    sess: &Session,\n+    boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n+    outputs: &OutputFilenames,\n+    out_filenames: &[PathBuf],\n+) {\n     // Write out dependency rules to the dep-info file if requested\n     if !sess.opts.output_types.contains_key(&OutputType::DepInfo) {\n         return;\n@@ -630,18 +628,20 @@ fn write_out_deps(compiler: &Compiler, outputs: &OutputFilenames, out_filenames:\n             .collect();\n \n         if sess.binary_dep_depinfo() {\n-            for cnum in compiler.cstore.crates_untracked() {\n-                let source = compiler.cstore.crate_source_untracked(cnum);\n-                if let Some((path, _)) = source.dylib {\n-                    files.push(escape_dep_filename(&FileName::Real(path)));\n-                }\n-                if let Some((path, _)) = source.rlib {\n-                    files.push(escape_dep_filename(&FileName::Real(path)));\n+            boxed_resolver.borrow().borrow_mut().access(|resolver| {\n+                for cnum in resolver.cstore().crates_untracked() {\n+                    let source = resolver.cstore().crate_source_untracked(cnum);\n+                    if let Some((path, _)) = source.dylib {\n+                        files.push(escape_dep_filename(&FileName::Real(path)));\n+                    }\n+                    if let Some((path, _)) = source.rlib {\n+                        files.push(escape_dep_filename(&FileName::Real(path)));\n+                    }\n+                    if let Some((path, _)) = source.rmeta {\n+                        files.push(escape_dep_filename(&FileName::Real(path)));\n+                    }\n                 }\n-                if let Some((path, _)) = source.rmeta {\n-                    files.push(escape_dep_filename(&FileName::Real(path)));\n-                }\n-            }\n+            });\n         }\n \n         let mut file = fs::File::create(&deps_filename)?;\n@@ -679,6 +679,7 @@ pub fn prepare_outputs(\n     sess: &Session,\n     compiler: &Compiler,\n     krate: &ast::Crate,\n+    boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n     crate_name: &str\n ) -> Result<OutputFilenames> {\n     // FIXME: rustdoc passes &[] instead of &krate.attrs here\n@@ -720,7 +721,7 @@ pub fn prepare_outputs(\n         }\n     }\n \n-    write_out_deps(compiler, &outputs, &output_paths);\n+    write_out_deps(sess, boxed_resolver, &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)\n         && sess.opts.output_types.len() == 1;\n@@ -790,21 +791,19 @@ pub fn create_global_ctxt(\n     crate_name: &str,\n ) -> BoxedGlobalCtxt {\n     let sess = compiler.session().clone();\n-    let cstore = compiler.cstore.clone();\n     let codegen_backend = compiler.codegen_backend().clone();\n     let crate_name = crate_name.to_string();\n     let defs = mem::take(&mut resolver_outputs.definitions);\n \n     let ((), result) = BoxedGlobalCtxt::new(static move || {\n         let sess = &*sess;\n-        let cstore = &*cstore;\n \n         let global_ctxt: Option<GlobalCtxt<'_>>;\n         let arenas = AllArenas::new();\n \n         // Construct the HIR map.\n         let hir_map = time(sess, \"indexing HIR\", || {\n-            hir::map::map_crate(sess, cstore, &mut hir_forest, &defs)\n+            hir::map::map_crate(sess, &*resolver_outputs.cstore, &mut hir_forest, &defs)\n         });\n \n         let query_result_on_disk_cache = time(sess, \"load query result cache\", || {\n@@ -822,7 +821,6 @@ pub fn create_global_ctxt(\n         let gcx = TyCtxt::create_global_ctxt(\n             sess,\n             lint_store,\n-            cstore,\n             local_providers,\n             extern_providers,\n             &arenas,"}, {"sha": "b5c356bf05a1b49532e4bab6c1e5c909efe191f5", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -164,7 +164,7 @@ impl Compiler {\n             passes::configure_and_expand(\n                 self.sess.clone(),\n                 lint_store.clone(),\n-                self.cstore().clone(),\n+                self.codegen_backend().metadata_loader(),\n                 krate,\n                 &crate_name,\n                 plugin_info,\n@@ -202,7 +202,6 @@ impl Compiler {\n                 passes::lower_to_hir(\n                     self.session(),\n                     lint_store,\n-                    self.cstore(),\n                     resolver,\n                     &*self.dep_graph()?.peek(),\n                     &krate\n@@ -214,11 +213,11 @@ impl Compiler {\n \n     pub fn prepare_outputs(&self) -> Result<&Query<OutputFilenames>> {\n         self.queries.prepare_outputs.compute(|| {\n-            let krate = self.expansion()?;\n-            let krate = krate.peek();\n+            let expansion_result = self.expansion()?;\n+            let (krate, boxed_resolver) = &*expansion_result.peek();\n             let crate_name = self.crate_name()?;\n             let crate_name = crate_name.peek();\n-            passes::prepare_outputs(self.session(), self, &krate.0, &*crate_name)\n+            passes::prepare_outputs(self.session(), self, &krate, &boxed_resolver, &crate_name)\n         })\n     }\n "}, {"sha": "5f4abbc3bdc880f08151f7b497e5a4793385d218", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -14,7 +14,7 @@ use rustc::session::{Session, CrateDisambiguator};\n use rustc::session::config::{Sanitizer, self};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc::session::search_paths::PathKind;\n-use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource};\n+use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoaderDyn};\n use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n@@ -38,9 +38,12 @@ crate struct Library {\n }\n \n pub struct CrateLoader<'a> {\n+    // Immutable configuration.\n     sess: &'a Session,\n-    cstore: &'a CStore,\n+    metadata_loader: &'a MetadataLoaderDyn,\n     local_crate_name: Symbol,\n+    // Mutable output.\n+    cstore: CStore,\n }\n \n fn dump_crates(cstore: &CStore) {\n@@ -75,14 +78,27 @@ impl<'a> LoadError<'a> {\n }\n \n impl<'a> CrateLoader<'a> {\n-    pub fn new(sess: &'a Session, cstore: &'a CStore, local_crate_name: &str) -> Self {\n+    pub fn new(\n+        sess: &'a Session,\n+        metadata_loader: &'a MetadataLoaderDyn,\n+        local_crate_name: &str,\n+    ) -> Self {\n         CrateLoader {\n             sess,\n-            cstore,\n+            metadata_loader,\n             local_crate_name: Symbol::intern(local_crate_name),\n+            cstore: Default::default(),\n         }\n     }\n \n+    pub fn cstore(&self) -> &CStore {\n+        &self.cstore\n+    }\n+\n+    pub fn into_cstore(self) -> CStore {\n+        self.cstore\n+    }\n+\n     fn existing_match(&self, name: Symbol, hash: Option<&Svh>, kind: PathKind)\n                       -> Option<CrateNum> {\n         let mut ret = None;\n@@ -346,7 +362,7 @@ impl<'a> CrateLoader<'a> {\n                 rejected_via_filename: vec![],\n                 should_match_name: true,\n                 is_proc_macro: Some(false),\n-                metadata_loader: &*self.cstore.metadata_loader,\n+                metadata_loader: self.metadata_loader,\n             };\n \n             self.load(&mut locate_ctxt).map(|r| (r, None)).or_else(|| {"}, {"sha": "09d37a00703383722efc00107a15bf59fc28915a", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -5,12 +5,13 @@ use crate::schema;\n use rustc::dep_graph::DepNodeIndex;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n-use rustc::middle::cstore::{CrateSource, DepKind, ExternCrate, MetadataLoaderDyn};\n+use rustc::middle::cstore::{CrateSource, DepKind, ExternCrate};\n use rustc::mir::interpret::AllocDecodingState;\n use rustc_index::vec::IndexVec;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::sync::{Lrc, RwLock, Lock, MetadataRef, AtomicCell};\n use syntax::ast;\n+use syntax::edition::Edition;\n use syntax_expand::base::SyntaxExtension;\n use syntax_pos;\n use proc_macro::bridge::client::ProcMacro;\n@@ -36,7 +37,7 @@ crate struct ImportedSourceFile {\n     pub translated_source_file: Lrc<syntax_pos::SourceFile>,\n }\n \n-pub struct CrateMetadata {\n+crate struct CrateMetadata {\n     /// The primary crate data - binary metadata blob.\n     crate blob: MetadataBlob,\n \n@@ -94,28 +95,29 @@ pub struct CrateMetadata {\n     crate extern_crate: Lock<Option<ExternCrate>>,\n }\n \n+#[derive(Clone)]\n pub struct CStore {\n     metas: RwLock<IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>>,\n-    crate metadata_loader: Box<MetadataLoaderDyn>,\n }\n \n pub enum LoadedMacro {\n-    MacroDef(ast::Item),\n+    MacroDef(ast::Item, Edition),\n     ProcMacro(SyntaxExtension),\n }\n \n-impl CStore {\n-    pub fn new(metadata_loader: Box<MetadataLoaderDyn>) -> CStore {\n+impl Default for CStore {\n+    fn default() -> Self {\n         CStore {\n             // We add an empty entry for LOCAL_CRATE (which maps to zero) in\n             // order to make array indices in `metas` match with the\n             // corresponding `CrateNum`. This first entry will always remain\n             // `None`.\n             metas: RwLock::new(IndexVec::from_elem_n(None, 1)),\n-            metadata_loader,\n         }\n     }\n+}\n \n+impl CStore {\n     crate fn alloc_new_crate_num(&self) -> CrateNum {\n         let mut metas = self.metas.borrow_mut();\n         let cnum = CrateNum::new(metas.len());"}, {"sha": "c20017ffef6600e2261a7385436b99d0e7fbf9f5", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -29,7 +29,6 @@ use std::sync::Arc;\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map;\n-use syntax::edition::Edition;\n use syntax::parse::source_file_to_stream;\n use syntax::parse::parser::emit_unclosed_delims;\n use syntax::source_map::Spanned;\n@@ -411,10 +410,6 @@ impl cstore::CStore {\n         }\n     }\n \n-    pub fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition {\n-        self.get_crate_data(cnum).root.edition\n-    }\n-\n     pub fn struct_field_names_untracked(&self, def: DefId, sess: &Session) -> Vec<Spanned<Symbol>> {\n         self.get_crate_data(def.krate).get_struct_field_names(def.index, sess)\n     }\n@@ -470,7 +465,7 @@ impl cstore::CStore {\n             }),\n             vis: source_map::respan(local_span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n             tokens: None,\n-        })\n+        }, data.root.edition)\n     }\n \n     pub fn associated_item_cloned_untracked(&self, def: DefId) -> ty::AssocItem {"}, {"sha": "c0fb8e33a819eb6ec0bc6313a20e9c4447edbe52", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -110,9 +110,9 @@ impl<'a> Resolver<'a> {\n         }\n \n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n-            (self.cstore.crate_name_untracked(def_id.krate), None)\n+            (self.cstore().crate_name_untracked(def_id.krate), None)\n         } else {\n-            let def_key = self.cstore.def_key(def_id);\n+            let def_key = self.cstore().def_key(def_id);\n             (def_key.disambiguated_data.data.get_opt_name().unwrap(),\n              Some(self.get_module(DefId { index: def_key.parent.unwrap(), ..def_id })))\n         };\n@@ -153,9 +153,8 @@ impl<'a> Resolver<'a> {\n             return Some(ext.clone());\n         }\n \n-        let ext = Lrc::new(match self.cstore.load_macro_untracked(def_id, &self.session) {\n-            LoadedMacro::MacroDef(item) =>\n-                self.compile_macro(&item, self.cstore.crate_edition_untracked(def_id.krate)),\n+        let ext = Lrc::new(match self.cstore().load_macro_untracked(def_id, &self.session) {\n+            LoadedMacro::MacroDef(item, edition) => self.compile_macro(&item, edition),\n             LoadedMacro::ProcMacro(ext) => ext,\n         });\n \n@@ -177,7 +176,7 @@ impl<'a> Resolver<'a> {\n \n     crate fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n         let def_id = module.def_id().expect(\"unpopulated module without a def-id\");\n-        for child in self.cstore.item_children_untracked(def_id, self.session) {\n+        for child in self.cstore().item_children_untracked(def_id, self.session) {\n             let child = child.map_id(|_| panic!(\"unexpected id\"));\n             BuildReducedGraphVisitor { r: self, parent_scope: ParentScope::module(module) }\n                 .build_reduced_graph_for_external_crate_res(child);\n@@ -885,19 +884,19 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 bug!(\"unexpected resolution: {:?}\", res)\n         }\n         // Record some extra data for better diagnostics.\n+        let cstore = self.r.cstore();\n         match res {\n             Res::Def(DefKind::Struct, def_id) | Res::Def(DefKind::Union, def_id) => {\n-                let field_names =\n-                    self.r.cstore.struct_field_names_untracked(def_id, self.r.session);\n+                let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n                 self.insert_field_names(def_id, field_names);\n             }\n             Res::Def(DefKind::Method, def_id) => {\n-                if self.r.cstore.associated_item_cloned_untracked(def_id).method_has_self_argument {\n+                if cstore.associated_item_cloned_untracked(def_id).method_has_self_argument {\n                     self.r.has_self.insert(def_id);\n                 }\n             }\n             Res::Def(DefKind::Ctor(CtorOf::Struct, ..), def_id) => {\n-                let parent = self.r.cstore.def_key(def_id).parent;\n+                let parent = cstore.def_key(def_id).parent;\n                 if let Some(struct_def_id) = parent.map(|index| DefId { index, ..def_id }) {\n                     self.r.struct_constructors.insert(struct_def_id, (res, vis));\n                 }"}, {"sha": "1c67395fbf0b2536a668de6fe26bd5bac1620373", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -21,7 +21,7 @@ use Determinacy::*;\n \n use rustc::hir::map::Definitions;\n use rustc::hir::{self, PrimTy, Bool, Char, Float, Int, Uint, Str};\n-use rustc::middle::cstore::CrateStore;\n+use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc::session::Session;\n use rustc::lint;\n use rustc::hir::def::{self, DefKind, PartialRes, CtorKind, CtorOf, NonMacroAttrKind, ExportMap};\n@@ -829,7 +829,6 @@ pub struct ExternPreludeEntry<'a> {\n /// This is the visitor that walks the whole crate.\n pub struct Resolver<'a> {\n     session: &'a Session,\n-    cstore: &'a CStore,\n \n     definitions: Definitions,\n \n@@ -916,7 +915,7 @@ pub struct Resolver<'a> {\n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n \n-    crate_loader: &'a CrateLoader<'a>,\n+    crate_loader: CrateLoader<'a>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Name, SyntaxExtension>,\n     macro_use_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n@@ -1015,14 +1014,18 @@ impl<'a, 'b> DefIdTree for &'a Resolver<'b> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         match id.krate {\n             LOCAL_CRATE => self.definitions.def_key(id.index).parent,\n-            _ => self.cstore.def_key(id).parent,\n+            _ => self.cstore().def_key(id).parent,\n         }.map(|index| DefId { index, ..id })\n     }\n }\n \n /// This interface is used through the AST\u2192HIR step, to embed full paths into the HIR. After that\n /// the resolver is no longer needed as all the relevant information is inline.\n impl<'a> hir::lowering::Resolver for Resolver<'a> {\n+    fn cstore(&self) -> &dyn CrateStore {\n+        self.cstore()\n+    }\n+\n     fn resolve_str_path(\n         &mut self,\n         span: Span,\n@@ -1083,10 +1086,9 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n \n impl<'a> Resolver<'a> {\n     pub fn new(session: &'a Session,\n-               cstore: &'a CStore,\n                krate: &Crate,\n                crate_name: &str,\n-               crate_loader: &'a CrateLoader<'a>,\n+               metadata_loader: &'a MetadataLoaderDyn,\n                arenas: &'a ResolverArenas<'a>)\n                -> Resolver<'a> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);\n@@ -1147,8 +1149,6 @@ impl<'a> Resolver<'a> {\n         Resolver {\n             session,\n \n-            cstore,\n-\n             definitions,\n \n             // The outermost module has def ID 0; this is not reflected in the\n@@ -1202,7 +1202,7 @@ impl<'a> Resolver<'a> {\n                 vis: ty::Visibility::Public,\n             }),\n \n-            crate_loader,\n+            crate_loader: CrateLoader::new(session, metadata_loader, crate_name),\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n             macro_use_prelude: FxHashMap::default(),\n@@ -1239,6 +1239,7 @@ impl<'a> Resolver<'a> {\n     pub fn into_outputs(self) -> ResolverOutputs {\n         ResolverOutputs {\n             definitions: self.definitions,\n+            cstore: Box::new(self.crate_loader.into_cstore()),\n             extern_crate_map: self.extern_crate_map,\n             export_map: self.export_map,\n             trait_map: self.trait_map,\n@@ -1254,6 +1255,7 @@ impl<'a> Resolver<'a> {\n     pub fn clone_outputs(&self) -> ResolverOutputs {\n         ResolverOutputs {\n             definitions: self.definitions.clone(),\n+            cstore: Box::new(self.cstore().clone()),\n             extern_crate_map: self.extern_crate_map.clone(),\n             export_map: self.export_map.clone(),\n             trait_map: self.trait_map.clone(),\n@@ -1266,6 +1268,10 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    pub fn cstore(&self) -> &CStore {\n+        self.crate_loader.cstore()\n+    }\n+\n     fn non_macro_attr(&self, mark_used: bool) -> Lrc<SyntaxExtension> {\n         self.non_macro_attrs[mark_used as usize].clone()\n     }"}, {"sha": "31340ddd68372f18455ab587247f4eaea20d3d69", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -1344,7 +1344,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 if res != Res::Err {\n                     if let Some(def_id) = res.opt_def_id() {\n                         if !def_id.is_local() {\n-                            this.cstore.export_macros_untracked(def_id.krate);\n+                            this.cstore().export_macros_untracked(def_id.krate);\n                         }\n                     }\n                     reexports.push(Export {"}, {"sha": "a6a8fec429e20ec80030a282350a18e6bf274738", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -479,8 +479,8 @@ fn build_static(cx: &DocContext<'_>, did: DefId, mutable: bool) -> clean::Static\n \n fn build_macro(cx: &DocContext<'_>, did: DefId, name: ast::Name) -> clean::ItemEnum {\n     let imported_from = cx.tcx.original_crate_name(did.krate);\n-    match cx.cstore.load_macro_untracked(did, cx.sess()) {\n-        LoadedMacro::MacroDef(def) => {\n+    match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n+        LoadedMacro::MacroDef(def, _) => {\n             let matchers: hir::HirVec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.kind {\n                 let tts: Vec<_> = def.stream().into_trees().collect();\n                 tts.chunks(4).map(|arm| arm[0].span()).collect()"}, {"sha": "b227f432a4e98d3b0b24ec111f7fdfd8208831d6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3534ca8f4985afad9b8dfe93ab570b721b80210e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3534ca8f4985afad9b8dfe93ab570b721b80210e", "patch": "@@ -12,7 +12,6 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_interface::interface;\n use rustc_driver::abort_on_err;\n use rustc_resolve as resolve;\n-use rustc_metadata::cstore::CStore;\n \n use syntax::source_map;\n use syntax::attr;\n@@ -43,7 +42,6 @@ pub struct DocContext<'tcx> {\n \n     pub tcx: TyCtxt<'tcx>,\n     pub resolver: Rc<RefCell<interface::BoxedResolver>>,\n-    pub cstore: Lrc<CStore>,\n     /// Later on moved into `html::render::CACHE_KEY`\n     pub renderinfo: RefCell<RenderInfo>,\n     /// Later on moved through `clean::Crate` into `html::render::CACHE_KEY`\n@@ -117,9 +115,7 @@ impl<'tcx> DocContext<'tcx> {\n                     .def_path_table()\n                     .next_id()\n             } else {\n-                self.cstore\n-                    .def_path_table(crate_num)\n-                    .next_id()\n+                self.enter_resolver(|r| r.cstore().def_path_table(crate_num).next_id())\n             };\n \n             DefId {\n@@ -376,7 +372,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             let mut ctxt = DocContext {\n                 tcx,\n                 resolver,\n-                cstore: compiler.cstore().clone(),\n                 external_traits: Default::default(),\n                 active_extern_traits: Default::default(),\n                 renderinfo: RefCell::new(renderinfo),"}]}