{"sha": "0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160", "node_id": "C_kwDOAAsO6NoAKDBiODFmOTkyZTljYzQxZDRmYjk1N2YxYjlkMmE5OWIxZjczZjgxNjA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-29T12:35:11Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-30T11:04:27Z"}, "message": "update universe used by the leak check", "tree": {"sha": "17057e61a6d7ce908b24d592822443985e623e68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17057e61a6d7ce908b24d592822443985e623e68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160", "html_url": "https://github.com/rust-lang/rust/commit/0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dccc8db17dafa8b56bbfa1e57249845cb95cbe04", "url": "https://api.github.com/repos/rust-lang/rust/commits/dccc8db17dafa8b56bbfa1e57249845cb95cbe04", "html_url": "https://github.com/rust-lang/rust/commit/dccc8db17dafa8b56bbfa1e57249845cb95cbe04"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "bca2343e4242204e80d95fdf8ca93e0f7c2d451c", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=0b81f992e9cc41d4fb957f1b9d2a99b1f73f8160", "patch": "@@ -137,7 +137,9 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self), ret)]\n     fn compute_external_query_constraints(&self) -> Result<ExternalConstraints<'tcx>, NoSolution> {\n-        self.infcx.leak_check(ty::UniverseIndex::ROOT, None).map_err(|e| {\n+        // We only check for leaks from universes which were entered inside\n+        // of the query.\n+        self.infcx.leak_check(self.max_input_universe, None).map_err(|e| {\n             debug!(?e, \"failed the leak check\");\n             NoSolution\n         })?;"}]}