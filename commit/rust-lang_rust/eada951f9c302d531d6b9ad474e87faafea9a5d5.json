{"sha": "eada951f9c302d531d6b9ad474e87faafea9a5d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZGE5NTFmOWMzMDJkNTMxZDZiOWFkNDc0ZTg3ZmFhZmVhOWE1ZDU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-14T21:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-27T19:14:42Z"}, "message": "Support `Self` in struct expressions and patterns", "tree": {"sha": "e6673240106bdddda3641a53304bdfac3e7faf2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6673240106bdddda3641a53304bdfac3e7faf2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eada951f9c302d531d6b9ad474e87faafea9a5d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eada951f9c302d531d6b9ad474e87faafea9a5d5", "html_url": "https://github.com/rust-lang/rust/commit/eada951f9c302d531d6b9ad474e87faafea9a5d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eada951f9c302d531d6b9ad474e87faafea9a5d5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f91b1b0e1b74d33d5b27b1811f7aa395314543", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f91b1b0e1b74d33d5b27b1811f7aa395314543", "html_url": "https://github.com/rust-lang/rust/commit/a9f91b1b0e1b74d33d5b27b1811f7aa395314543"}], "stats": {"total": 105, "additions": 102, "deletions": 3}, "files": [{"sha": "7f6c98efa4d47d9967286eff3708f23e7f303cd7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eada951f9c302d531d6b9ad474e87faafea9a5d5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eada951f9c302d531d6b9ad474e87faafea9a5d5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=eada951f9c302d531d6b9ad474e87faafea9a5d5", "patch": "@@ -3234,16 +3234,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n             Def::Struct(..) | Def::Union(..) | Def::TyAlias(..) |\n-            Def::AssociatedTy(..) => {\n+            Def::AssociatedTy(..) | Def::SelfTy(..) => {\n                 match ty.sty {\n                     ty::TyAdt(adt, substs) if !adt.is_enum() => {\n                         Some((adt.struct_variant(), adt.did, substs))\n                     }\n                     _ => None,\n                 }\n             }\n-            // Self is not supported yet.\n-            Def::SelfTy(..) => None,\n             _ => bug!(\"unexpected definition: {:?}\", def)\n         };\n "}, {"sha": "d76b9fda8bf8207d565c190da7f51e45d8b714e9", "filename": "src/test/compile-fail/struct-path-self.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/eada951f9c302d531d6b9ad474e87faafea9a5d5/src%2Ftest%2Fcompile-fail%2Fstruct-path-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eada951f9c302d531d6b9ad474e87faafea9a5d5/src%2Ftest%2Fcompile-fail%2Fstruct-path-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-path-self.rs?ref=eada951f9c302d531d6b9ad474e87faafea9a5d5", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+trait Tr {\n+    fn f() {\n+        let s = Self {};\n+        //~^ ERROR expected struct, variant or union type, found type parameter `Self`\n+        let z = Self::<u8> {};\n+        //~^ ERROR expected struct, variant or union type, found type parameter `Self`\n+        //~| ERROR type parameters are not allowed on this type\n+        match s {\n+            Self { .. } => {}\n+            //~^ ERROR expected struct, variant or union type, found type parameter `Self`\n+        }\n+    }\n+}\n+\n+impl Tr for S {\n+    fn f() {\n+        let s = Self {}; // OK\n+        let z = Self::<u8> {}; //~ ERROR type parameters are not allowed on this type\n+        match s {\n+            Self { .. } => {} // OK\n+        }\n+    }\n+}\n+\n+impl S {\n+    fn g() {\n+        let s = Self {}; // OK\n+        let z = Self::<u8> {}; //~ ERROR type parameters are not allowed on this type\n+        match s {\n+            Self { .. } => {} // OK\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c7a282c2a2fa02c289cfdf87028c4439ff57b45f", "filename": "src/test/run-pass/struct-path-self.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/eada951f9c302d531d6b9ad474e87faafea9a5d5/src%2Ftest%2Frun-pass%2Fstruct-path-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eada951f9c302d531d6b9ad474e87faafea9a5d5/src%2Ftest%2Frun-pass%2Fstruct-path-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-path-self.rs?ref=eada951f9c302d531d6b9ad474e87faafea9a5d5", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Add;\n+\n+struct S<T, U = u16> {\n+    a: T,\n+    b: U,\n+}\n+\n+trait Tr {\n+    fn f(&self) -> Self;\n+}\n+\n+impl<T: Default + Add<u8, Output = T>, U: Default> Tr for S<T, U> {\n+    fn f(&self) -> Self {\n+        let s = Self { a: Default::default(), b: Default::default() };\n+        match s {\n+            Self { a, b } => Self { a: a + 1, b: b }\n+        }\n+    }\n+}\n+\n+impl<T: Default, U: Default + Add<u16, Output = U>> S<T, U> {\n+    fn g(&self) -> Self {\n+        let s = Self { a: Default::default(), b: Default::default() };\n+        match s {\n+            Self { a, b } => Self { a: a, b: b + 1 }\n+        }\n+    }\n+}\n+\n+impl S<u8> {\n+    fn new() -> Self {\n+        Self { a: 0, b: 1 }\n+    }\n+}\n+\n+fn main() {\n+    let s0 = S::new();\n+    let s1 = s0.f();\n+    assert_eq!(s1.a, 1);\n+    assert_eq!(s1.b, 0);\n+    let s2 = s0.g();\n+    assert_eq!(s2.a, 0);\n+    assert_eq!(s2.b, 1);\n+}"}]}