{"sha": "a08d768cd8a44b3620ff3164b983400e3ee07fe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOGQ3NjhjZDhhNDRiMzYyMGZmMzE2NGI5ODM0MDBlM2VlMDdmZTU=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-15T14:46:03Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-15T16:29:19Z"}, "message": "Fix inlining of glue code\n\nCurrently, when calling glue functions, we cast the function to match\nthe argument type. This interacts very badly with LLVM and breaks\ninlining of the glue code.\n\nIt's more efficient to use a unified function type for the glue\nfunctions and always cast the function argument instead of the function.\n\nThe resulting code for rustc is about 13% faster (measured up to and\nincluding the \"trans\" pass) and the resulting librustc is about 5%\nsmaller.", "tree": {"sha": "01dd79ca997d45648bd285bf67d1144932743d42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01dd79ca997d45648bd285bf67d1144932743d42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a08d768cd8a44b3620ff3164b983400e3ee07fe5", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a08d768cd8a44b3620ff3164b983400e3ee07fe5", "html_url": "https://github.com/rust-lang/rust/commit/a08d768cd8a44b3620ff3164b983400e3ee07fe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a08d768cd8a44b3620ff3164b983400e3ee07fe5/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83d44f87e5fe8935c1f8a5f26409a99286675650", "url": "https://api.github.com/repos/rust-lang/rust/commits/83d44f87e5fe8935c1f8a5f26409a99286675650", "html_url": "https://github.com/rust-lang/rust/commit/83d44f87e5fe8935c1f8a5f26409a99286675650"}], "stats": {"total": 53, "additions": 10, "deletions": 43}, "files": [{"sha": "9b7abe00c808929e99034d92a1b532106cf3930f", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 8, "deletions": 40, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a08d768cd8a44b3620ff3164b983400e3ee07fe5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08d768cd8a44b3620ff3164b983400e3ee07fe5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=a08d768cd8a44b3620ff3164b983400e3ee07fe5", "patch": "@@ -218,14 +218,6 @@ pub fn simplified_glue_type(tcx: ty::ctxt, field: uint, t: ty::t) -> ty::t {\n     return t;\n }\n \n-pub fn cast_glue(ccx: @CrateContext, ti: @mut tydesc_info, v: ValueRef)\n-              -> ValueRef {\n-    unsafe {\n-        let llfnty = type_of_glue_fn(ccx, ti.ty);\n-        llvm::LLVMConstPointerCast(v, T_ptr(llfnty))\n-    }\n-}\n-\n pub fn lazily_emit_simplified_tydesc_glue(ccx: @CrateContext,\n                                           field: uint,\n                                           ti: @mut tydesc_info) -> bool {\n@@ -235,19 +227,14 @@ pub fn lazily_emit_simplified_tydesc_glue(ccx: @CrateContext,\n         let simpl_ti = get_tydesc(ccx, simpl);\n         lazily_emit_tydesc_glue(ccx, field, simpl_ti);\n         {\n-            let simpl_ti = &mut *simpl_ti;\n             if field == abi::tydesc_field_take_glue {\n-                ti.take_glue =\n-                    simpl_ti.take_glue.map(|v| cast_glue(ccx, ti, *v));\n+                ti.take_glue = simpl_ti.take_glue;\n             } else if field == abi::tydesc_field_drop_glue {\n-                ti.drop_glue =\n-                    simpl_ti.drop_glue.map(|v| cast_glue(ccx, ti, *v));\n+                ti.drop_glue = simpl_ti.drop_glue;\n             } else if field == abi::tydesc_field_free_glue {\n-                ti.free_glue =\n-                    simpl_ti.free_glue.map(|v| cast_glue(ccx, ti, *v));\n+                ti.free_glue = simpl_ti.free_glue;\n             } else if field == abi::tydesc_field_visit_glue {\n-                ti.visit_glue =\n-                    simpl_ti.visit_glue.map(|v| cast_glue(ccx, ti, *v));\n+                ti.visit_glue = simpl_ti.visit_glue;\n             }\n         }\n         return true;\n@@ -260,7 +247,7 @@ pub fn lazily_emit_tydesc_glue(ccx: @CrateContext,\n                                field: uint,\n                                ti: @mut tydesc_info) {\n     let _icx = ccx.insn_ctxt(\"lazily_emit_tydesc_glue\");\n-    let llfnty = type_of_glue_fn(ccx, ti.ty);\n+    let llfnty = type_of_glue_fn(ccx);\n \n     if lazily_emit_simplified_tydesc_glue(ccx, field, ti) {\n         return;\n@@ -353,25 +340,7 @@ pub fn call_tydesc_glue_full(bcx: block,\n       }\n     };\n \n-    // When available, use static type info to give glue the right type.\n-    let static_glue_fn = match static_ti {\n-      None => None,\n-      Some(sti) => {\n-        match static_glue_fn {\n-          None => None,\n-          Some(sgf) => Some(\n-              PointerCast(bcx, sgf, T_ptr(type_of_glue_fn(ccx, sti.ty))))\n-        }\n-      }\n-    };\n-\n-    // When static type info is available, avoid casting parameter because the\n-    // function already has the right type. Otherwise cast to generic pointer.\n-    let llrawptr = if static_ti.is_none() || static_glue_fn.is_none() {\n-        PointerCast(bcx, v, T_ptr(T_i8()))\n-    } else {\n-        v\n-    };\n+    let llrawptr = PointerCast(bcx, v, T_ptr(T_i8()));\n \n     let llfn = {\n         match static_glue_fn {\n@@ -736,14 +705,13 @@ pub fn make_generic_glue_inner(ccx: @CrateContext,\n     // requirement since in many contexts glue is invoked indirectly and\n     // the caller has no idea if it's dealing with something that can be\n     // passed by value.\n-    //\n-    // llfn is expected be declared to take a parameter of the appropriate\n-    // type, so we don't need to explicitly cast the function parameter.\n \n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n     let rawptr0_arg = fcx.arg_pos(1u);\n     let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, rawptr0_arg as c_uint) };\n+    let llty = type_of(ccx, t);\n+    let llrawptr0 = PointerCast(bcx, llrawptr0, T_ptr(llty));\n     helper(bcx, llrawptr0, t);\n     finish_fn(fcx, lltop);\n     return llfn;"}, {"sha": "2f505b9de63d3ca3cbbafc2b1d08792c6ad653f2", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a08d768cd8a44b3620ff3164b983400e3ee07fe5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08d768cd8a44b3620ff3164b983400e3ee07fe5/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=a08d768cd8a44b3620ff3164b983400e3ee07fe5", "patch": "@@ -341,8 +341,7 @@ pub fn type_of_rooted(ccx: @CrateContext, t: ty::t) -> TypeRef {\n     return T_root(type_of(ccx, t), addrspace);\n }\n \n-pub fn type_of_glue_fn(ccx: @CrateContext, t: ty::t) -> TypeRef {\n+pub fn type_of_glue_fn(ccx: @CrateContext) -> TypeRef {\n     let tydescpp = T_ptr(T_ptr(ccx.tydesc_type));\n-    let llty = T_ptr(type_of(ccx, t));\n-    return T_fn([T_ptr(T_nil()), tydescpp, llty], T_nil());\n+    return T_fn([T_ptr(T_nil()), tydescpp, T_ptr(T_i8())], T_nil());\n }"}]}