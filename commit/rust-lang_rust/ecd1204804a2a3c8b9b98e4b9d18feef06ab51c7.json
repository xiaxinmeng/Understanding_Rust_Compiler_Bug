{"sha": "ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZDEyMDQ4MDRhMmEzYzhiOWI5OGU0YjlkMThmZWVmMDZhYjUxYzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-25T14:51:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-25T14:51:17Z"}, "message": "Merge #2403\n\n2403: Fixme for union fields r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d051e9bb71631cca33a1b4c23bf3f2576d1c0f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d051e9bb71631cca33a1b4c23bf3f2576d1c0f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2+plCRBK7hj4Ov3rIwAAdHIIAHrqZTDd2vN8M1WMfactfhAF\nQ4Ms/axybzaipc/sJ2au0XaHn7WBq3rD+YylS37tY+kSkWUnFNxzUpPoTjrC94sD\ncRYofiYN2ara3gmyJuuxRrgZv4bXyxhFnwl1hx2sOuiF1z6Aq0Bjymjc1WWR8egA\nBGVcJY2tl7myRNQrhCcg01n13Pd9GKUhuBZGoiuM2mhOrtWrSkA+/lA9Zp/OVuVf\nxdUDm8Pygo6SvZBSqnQ8WFyavM3xLIXxZsYvsu5TsYlDhDFn8rZIPqwRGMaKTFIl\nBFqBcQO4VXw3vdVe7iSHucaZhA+CH7OuY4FTNmhphIdjv5Zijl4uPNAtnKssxKY=\n=XlSr\n-----END PGP SIGNATURE-----\n", "payload": "tree d051e9bb71631cca33a1b4c23bf3f2576d1c0f56\nparent be00d74c7b61fb82bdade482e95035a21f9dd736\nparent 1455663ea15ecbfbe87b4b5be6919aa35dd0b260\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574693477 +0000\ncommitter GitHub <noreply@github.com> 1574693477 +0000\n\nMerge #2403\n\n2403: Fixme for union fields r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "html_url": "https://github.com/rust-lang/rust/commit/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be00d74c7b61fb82bdade482e95035a21f9dd736", "url": "https://api.github.com/repos/rust-lang/rust/commits/be00d74c7b61fb82bdade482e95035a21f9dd736", "html_url": "https://github.com/rust-lang/rust/commit/be00d74c7b61fb82bdade482e95035a21f9dd736"}, {"sha": "1455663ea15ecbfbe87b4b5be6919aa35dd0b260", "url": "https://api.github.com/repos/rust-lang/rust/commits/1455663ea15ecbfbe87b4b5be6919aa35dd0b260", "html_url": "https://github.com/rust-lang/rust/commit/1455663ea15ecbfbe87b4b5be6919aa35dd0b260"}], "stats": {"total": 288, "additions": 190, "deletions": 98}, "files": [{"sha": "8f68bd5fb13061dbbffd82c2df455d780a8d382c", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -35,8 +35,8 @@ pub(crate) fn add_new(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let strukt = ctx.find_node_at_offset::<ast::StructDef>()?;\n \n     // We want to only apply this to non-union structs with named fields\n-    let field_list = match (strukt.kind(), strukt.is_union()) {\n-        (StructKind::Record(named), false) => named,\n+    let field_list = match strukt.kind() {\n+        StructKind::Record(named) => named,\n         _ => return None,\n     };\n "}, {"sha": "ae730beb51a8a9dfab561248b87298099ff3f2c7", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -320,7 +320,7 @@ pub struct Struct {\n \n impl Struct {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.0.module(db) }\n+        Module { id: self.id.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -369,11 +369,11 @@ pub struct Union {\n \n impl Union {\n     pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n-        db.struct_data(self.id.into()).name.clone()\n+        db.union_data(self.id).name.clone()\n     }\n \n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.0.module(db) }\n+        Module { id: self.id.module(db) }\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Ty {"}, {"sha": "076d86f2b9c71faaabaaa4181c79e4e3bbb6815d", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -51,13 +51,13 @@ impl HasSource for StructField {\n impl HasSource for Struct {\n     type Ast = ast::StructDef;\n     fn source(self, db: &impl DefDatabase) -> Source<ast::StructDef> {\n-        self.id.0.source(db)\n+        self.id.source(db)\n     }\n }\n impl HasSource for Union {\n-    type Ast = ast::StructDef;\n-    fn source(self, db: &impl DefDatabase) -> Source<ast::StructDef> {\n-        self.id.0.source(db)\n+    type Ast = ast::UnionDef;\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::UnionDef> {\n+        self.id.source(db)\n     }\n }\n impl HasSource for Enum {"}, {"sha": "95db7161bf808ced07f59672b27220e37eece5ad", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir_def::{AstItemDef, LocationCtx, ModuleId, StructId, StructOrUnionId, UnionId};\n+use hir_def::{AstItemDef, LocationCtx, ModuleId};\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n@@ -19,19 +19,18 @@ pub trait FromSource: Sized {\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self>;\n }\n \n-// FIXIME: these two impls are wrong, `ast::StructDef` might produce either a struct or a union\n impl FromSource for Struct {\n     type Ast = ast::StructDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        let id: StructOrUnionId = from_source(db, src)?;\n-        Some(Struct { id: StructId(id) })\n+        let id = from_source(db, src)?;\n+        Some(Struct { id })\n     }\n }\n impl FromSource for Union {\n-    type Ast = ast::StructDef;\n+    type Ast = ast::UnionDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        let id: StructOrUnionId = from_source(db, src)?;\n-        Some(Union { id: UnionId(id) })\n+        let id = from_source(db, src)?;\n+        Some(Union { id })\n     }\n }\n impl FromSource for Enum {"}, {"sha": "3cbcbd1d01bc54d9faaba58fb47ce81e6ec4e37e", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -858,7 +858,7 @@ impl HirDisplay for ApplicationTy {\n                 let name = match def {\n                     CallableDef::FunctionId(ff) => f.db.function_data(ff).name.clone(),\n                     CallableDef::StructId(s) => {\n-                        f.db.struct_data(s.0).name.clone().unwrap_or_else(Name::missing)\n+                        f.db.struct_data(s).name.clone().unwrap_or_else(Name::missing)\n                     }\n                     CallableDef::EnumVariantId(e) => {\n                         let enum_data = f.db.enum_data(e.parent);"}, {"sha": "bb9a2e427eff4369b20151e13d8d779a9edbe5cc", "filename": "crates/ra_hir/src/ty/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -246,7 +246,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 ty_app!(TypeCtor::Adt(Adt::Struct(struct2)), st2),\n             ) if struct1 == struct2 => {\n                 let field_tys = self.db.field_types(struct1.id.into());\n-                let struct_data = self.db.struct_data(struct1.id.0);\n+                let struct_data = self.db.struct_data(struct1.id);\n \n                 let mut fields = struct_data.variant_data.fields().iter();\n                 let (last_field_id, _data) = fields.next_back()?;"}, {"sha": "994a6d7e9503f8b00ca1f1ec9cb49749a6b1257f", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -263,6 +263,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                                 .clone()\n                                 .subst(&a_ty.parameters)\n                         }),\n+                        // FIXME:\n+                        TypeCtor::Adt(Adt::Union(_)) => None,\n                         _ => None,\n                     },\n                     _ => None,"}, {"sha": "eb51d31bd06f27ed5652561ca03c93042bcf295c", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -560,7 +560,8 @@ pub(crate) fn field_types_query(\n     variant_id: VariantId,\n ) -> Arc<ArenaMap<LocalStructFieldId, Ty>> {\n     let (resolver, var_data) = match variant_id {\n-        VariantId::StructId(it) => (it.resolver(db), db.struct_data(it.0).variant_data.clone()),\n+        VariantId::StructId(it) => (it.resolver(db), db.struct_data(it).variant_data.clone()),\n+        VariantId::UnionId(it) => (it.resolver(db), db.union_data(it).variant_data.clone()),\n         VariantId::EnumVariantId(it) => (\n             it.parent.resolver(db),\n             db.enum_data(it.parent).variants[it.local_id].variant_data.clone(),\n@@ -818,7 +819,7 @@ impl CallableDef {\n     pub fn krate(self, db: &impl HirDatabase) -> CrateId {\n         match self {\n             CallableDef::FunctionId(f) => f.lookup(db).module(db).krate,\n-            CallableDef::StructId(s) => s.0.module(db).krate,\n+            CallableDef::StructId(s) => s.module(db).krate,\n             CallableDef::EnumVariantId(e) => e.parent.module(db).krate,\n         }\n     }"}, {"sha": "0091bfbc33600f2f31afe7a98c9aeda2eb03cf61", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -12,7 +12,7 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n     db::DefDatabase, trace::Trace, type_ref::TypeRef, AstItemDef, EnumId, HasChildSource,\n-    LocalEnumVariantId, LocalStructFieldId, StructOrUnionId, VariantId,\n+    LocalEnumVariantId, LocalStructFieldId, StructId, UnionId, VariantId,\n };\n \n /// Note that we use `StructData` for unions as well!\n@@ -49,13 +49,25 @@ pub struct StructFieldData {\n }\n \n impl StructData {\n-    pub(crate) fn struct_data_query(db: &impl DefDatabase, id: StructOrUnionId) -> Arc<StructData> {\n+    pub(crate) fn struct_data_query(db: &impl DefDatabase, id: StructId) -> Arc<StructData> {\n         let src = id.source(db);\n         let name = src.value.name().map(|n| n.as_name());\n         let variant_data = VariantData::new(src.value.kind());\n         let variant_data = Arc::new(variant_data);\n         Arc::new(StructData { name, variant_data })\n     }\n+    pub(crate) fn union_data_query(db: &impl DefDatabase, id: UnionId) -> Arc<StructData> {\n+        let src = id.source(db);\n+        let name = src.value.name().map(|n| n.as_name());\n+        let variant_data = VariantData::new(\n+            src.value\n+                .record_field_def_list()\n+                .map(ast::StructKind::Record)\n+                .unwrap_or(ast::StructKind::Unit),\n+        );\n+        let variant_data = Arc::new(variant_data);\n+        Arc::new(StructData { name, variant_data })\n+    }\n }\n \n impl EnumData {\n@@ -137,7 +149,12 @@ impl HasChildSource for VariantId {\n                 let src = it.parent.child_source(db);\n                 src.map(|map| map[it.local_id].kind())\n             }\n-            VariantId::StructId(it) => it.0.source(db).map(|it| it.kind()),\n+            VariantId::StructId(it) => it.source(db).map(|it| it.kind()),\n+            VariantId::UnionId(it) => it.source(db).map(|it| {\n+                it.record_field_def_list()\n+                    .map(ast::StructKind::Record)\n+                    .unwrap_or(ast::StructKind::Unit)\n+            }),\n         };\n         let mut trace = Trace::new_for_map();\n         lower_struct(&mut trace, &src.value);"}, {"sha": "298608e27cdb3692d3f60aa4a4c8b53e617c7e99", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -54,9 +54,9 @@ impl Attrs {\n                 Attrs::from_attrs_owner(db, src.map(|it| it as &dyn AttrsOwner))\n             }\n             AttrDefId::AdtId(it) => match it {\n-                AdtId::StructId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n+                AdtId::StructId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n                 AdtId::EnumId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n-                AdtId::UnionId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n+                AdtId::UnionId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             },\n             AttrDefId::TraitId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             AttrDefId::MacroDefId(it) => attrs_from_ast(it.ast_id, db),"}, {"sha": "ef5611ffc0da75b467e079ac5e58cbe31a95d941", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -18,16 +18,18 @@ use crate::{\n         CrateDefMap,\n     },\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, FunctionId, FunctionLoc, GenericDefId,\n-    ImplId, ItemLoc, ModuleId, StaticId, StaticLoc, StructOrUnionId, TraitId, TypeAliasId,\n-    TypeAliasLoc,\n+    ImplId, ItemLoc, ModuleId, StaticId, StaticLoc, StructId, TraitId, TypeAliasId, TypeAliasLoc,\n+    UnionId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_function(&self, loc: FunctionLoc) -> FunctionId;\n     #[salsa::interned]\n-    fn intern_struct_or_union(&self, loc: ItemLoc<ast::StructDef>) -> StructOrUnionId;\n+    fn intern_struct(&self, loc: ItemLoc<ast::StructDef>) -> StructId;\n+    #[salsa::interned]\n+    fn intern_union(&self, loc: ItemLoc<ast::UnionDef>) -> UnionId;\n     #[salsa::interned]\n     fn intern_enum(&self, loc: ItemLoc<ast::EnumDef>) -> EnumId;\n     #[salsa::interned]\n@@ -57,7 +59,9 @@ pub trait DefDatabase: InternDatabase + AstDatabase {\n     fn crate_def_map(&self, krate: CrateId) -> Arc<CrateDefMap>;\n \n     #[salsa::invoke(StructData::struct_data_query)]\n-    fn struct_data(&self, id: StructOrUnionId) -> Arc<StructData>;\n+    fn struct_data(&self, id: StructId) -> Arc<StructData>;\n+    #[salsa::invoke(StructData::union_data_query)]\n+    fn union_data(&self, id: UnionId) -> Arc<StructData>;\n \n     #[salsa::invoke(EnumData::enum_data_query)]\n     fn enum_data(&self, e: EnumId) -> Arc<EnumData>;"}, {"sha": "4749b642f0d5fa3ae43e54b856760d8a87623448", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -47,9 +47,9 @@ impl Documentation {\n                 }\n             }\n             AttrDefId::AdtId(it) => match it {\n-                AdtId::StructId(it) => docs_from_ast(&it.0.source(db).value),\n+                AdtId::StructId(it) => docs_from_ast(&it.source(db).value),\n                 AdtId::EnumId(it) => docs_from_ast(&it.source(db).value),\n-                AdtId::UnionId(it) => docs_from_ast(&it.0.source(db).value),\n+                AdtId::UnionId(it) => docs_from_ast(&it.source(db).value),\n             },\n             AttrDefId::EnumVariantId(it) => {\n                 let src = it.parent.child_source(db);"}, {"sha": "3f94e40e4f4bedc2dd0e76084ffc4eaba9e3e812", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -60,10 +60,8 @@ impl GenericParams {\n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         match def {\n             GenericDefId::FunctionId(it) => generics.fill(&it.lookup(db).source(db).value, start),\n-            GenericDefId::AdtId(AdtId::StructId(it)) => {\n-                generics.fill(&it.0.source(db).value, start)\n-            }\n-            GenericDefId::AdtId(AdtId::UnionId(it)) => generics.fill(&it.0.source(db).value, start),\n+            GenericDefId::AdtId(AdtId::StructId(it)) => generics.fill(&it.source(db).value, start),\n+            GenericDefId::AdtId(AdtId::UnionId(it)) => generics.fill(&it.source(db).value, start),\n             GenericDefId::AdtId(AdtId::EnumId(it)) => generics.fill(&it.source(db).value, start),\n             GenericDefId::TraitId(it) => {\n                 // traits get the Self type as an implicit first type parameter"}, {"sha": "a88a78b38f5d8b18c19f2595b3f0a6ddbd1f6998", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -141,30 +141,26 @@ impl Lookup for FunctionId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct StructOrUnionId(salsa::InternId);\n-impl_intern_key!(StructOrUnionId);\n-impl AstItemDef<ast::StructDef> for StructOrUnionId {\n+pub struct StructId(salsa::InternId);\n+impl_intern_key!(StructId);\n+impl AstItemDef<ast::StructDef> for StructId {\n     fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n-        db.intern_struct_or_union(loc)\n+        db.intern_struct(loc)\n     }\n     fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StructDef> {\n-        db.lookup_intern_struct_or_union(self)\n+        db.lookup_intern_struct(self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct StructId(pub StructOrUnionId);\n-impl From<StructId> for StructOrUnionId {\n-    fn from(id: StructId) -> StructOrUnionId {\n-        id.0\n+pub struct UnionId(salsa::InternId);\n+impl_intern_key!(UnionId);\n+impl AstItemDef<ast::UnionDef> for UnionId {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::UnionDef>) -> Self {\n+        db.intern_union(loc)\n     }\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct UnionId(pub StructOrUnionId);\n-impl From<UnionId> for StructOrUnionId {\n-    fn from(id: UnionId) -> StructOrUnionId {\n-        id.0\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::UnionDef> {\n+        db.lookup_intern_union(self)\n     }\n }\n \n@@ -435,6 +431,7 @@ impl_froms!(\n pub enum VariantId {\n     EnumVariantId(EnumVariantId),\n     StructId(StructId),\n+    UnionId(UnionId),\n }\n impl_froms!(VariantId: EnumVariantId, StructId);\n \n@@ -485,8 +482,8 @@ impl HasModule for ConstLoc {\n impl HasModule for AdtId {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match self {\n-            AdtId::StructId(it) => it.0.module(db),\n-            AdtId::UnionId(it) => it.0.module(db),\n+            AdtId::StructId(it) => it.module(db),\n+            AdtId::UnionId(it) => it.module(db),\n             AdtId::EnumId(it) => it.module(db),\n         }\n     }"}, {"sha": "4ff6f72cfbae3802f61a052a5b13e81cbf2c1e4a", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -25,7 +25,7 @@ use crate::{\n     per_ns::PerNs,\n     AdtId, AstId, AstItemDef, ConstLoc, ContainerId, EnumId, EnumVariantId, FunctionLoc, ImplId,\n     Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticLoc, StructId,\n-    StructOrUnionId, TraitId, TypeAliasLoc, UnionId,\n+    TraitId, TypeAliasLoc, UnionId,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -698,14 +698,12 @@ where\n                 PerNs::values(def.into())\n             }\n             raw::DefKind::Struct(ast_id) => {\n-                let id = StructOrUnionId::from_ast_id(ctx, ast_id).into();\n-                let s = StructId(id).into();\n-                PerNs::both(s, s)\n+                let id = StructId::from_ast_id(ctx, ast_id).into();\n+                PerNs::both(id, id)\n             }\n             raw::DefKind::Union(ast_id) => {\n-                let id = StructOrUnionId::from_ast_id(ctx, ast_id).into();\n-                let u = UnionId(id).into();\n-                PerNs::both(u, u)\n+                let id = UnionId::from_ast_id(ctx, ast_id).into();\n+                PerNs::both(id, id)\n             }\n             raw::DefKind::Enum(ast_id) => PerNs::types(EnumId::from_ast_id(ctx, ast_id).into()),\n             raw::DefKind::Const(ast_id) => {"}, {"sha": "6eb106094cf4ed239d5be7bdb6088a6d4a8fc0e7", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -176,7 +176,7 @@ pub(super) struct DefData {\n pub(super) enum DefKind {\n     Function(FileAstId<ast::FnDef>),\n     Struct(FileAstId<ast::StructDef>),\n-    Union(FileAstId<ast::StructDef>),\n+    Union(FileAstId<ast::UnionDef>),\n     Enum(FileAstId<ast::EnumDef>),\n     Const(FileAstId<ast::ConstDef>),\n     Static(FileAstId<ast::StaticDef>),\n@@ -246,11 +246,12 @@ impl RawItemsCollector {\n             ast::ModuleItem::StructDef(it) => {\n                 let id = self.source_ast_id_map.ast_id(&it);\n                 let name = it.name();\n-                if it.is_union() {\n-                    (DefKind::Union(id), name)\n-                } else {\n-                    (DefKind::Struct(id), name)\n-                }\n+                (DefKind::Struct(id), name)\n+            }\n+            ast::ModuleItem::UnionDef(it) => {\n+                let id = self.source_ast_id_map.ast_id(&it);\n+                let name = it.name();\n+                (DefKind::Union(id), name)\n             }\n             ast::ModuleItem::EnumDef(it) => {\n                 (DefKind::Enum(self.source_ast_id_map.ast_id(&it)), it.name())"}, {"sha": "87fcd617c523a9daa9d00bd40419bfefc0dee384", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -82,6 +82,12 @@ fn crate_def_map_smoke_test() {\n \n         //- /foo/bar.rs\n         pub struct Baz;\n+\n+        union U {\n+            to_be: bool,\n+            not_to_be: u8,\n+        }\n+\n         enum E { V }\n         \",\n     );\n@@ -99,6 +105,7 @@ fn crate_def_map_smoke_test() {\n         \u22eecrate::foo::bar\n         \u22eeBaz: t v\n         \u22eeE: t\n+        \u22eeU: t v\n     \"###)\n }\n "}, {"sha": "9ffc9b980140d586e1bb4f3547bc77165d6e8447", "filename": "crates/ra_ide_api/src/display/short_label.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -19,6 +19,12 @@ impl ShortLabel for ast::StructDef {\n     }\n }\n \n+impl ShortLabel for ast::UnionDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"union \")\n+    }\n+}\n+\n impl ShortLabel for ast::EnumDef {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"enum \")"}, {"sha": "2b3100fc366f3bb81edfd6e42515d4d1aeff7e33", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -49,6 +49,10 @@ fn impls_for_def(\n             let src = hir::Source { file_id: position.file_id.into(), value: def.clone() };\n             hir::Enum::from_source(db, src)?.ty(db)\n         }\n+        ast::NominalDef::UnionDef(def) => {\n+            let src = hir::Source { file_id: position.file_id.into(), value: def.clone() };\n+            hir::Union::from_source(db, src)?.ty(db)\n+        }\n     };\n \n     let krate = module.krate();"}, {"sha": "370990e21fd357b0c5b767cb08a30069f77114e2", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -1,13 +1,13 @@\n //! FIXME: write short doc here\n \n mod consts;\n-mod nominal;\n+mod adt;\n mod traits;\n mod use_item;\n \n pub(crate) use self::{\n+    adt::{enum_variant_list, record_field_def_list},\n     expressions::{match_arm_list, record_field_list},\n-    nominal::{enum_variant_list, record_field_def_list},\n     traits::{impl_item_list, trait_item_list},\n     use_item::use_tree_list,\n };\n@@ -247,7 +247,7 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n             //     a: i32,\n             //     b: f32,\n             // }\n-            nominal::struct_def(p, m, T![struct]);\n+            adt::struct_def(p, m);\n         }\n         IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => {\n             // test union_items\n@@ -256,9 +256,9 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n             //     a: i32,\n             //     b: f32,\n             // }\n-            nominal::struct_def(p, m, T![union]);\n+            adt::union_def(p, m);\n         }\n-        T![enum] => nominal::enum_def(p, m),\n+        T![enum] => adt::enum_def(p, m),\n         T![use] => use_item::use_item(p, m),\n         T![const] if (la == IDENT || la == T![_] || la == T![mut]) => consts::const_def(p, m),\n         T![static] => consts::static_def(p, m),"}, {"sha": "c777bc9d0042ae790283001abc6518a2172ed353", "filename": "crates/ra_parser/src/grammar/items/adt.rs", "status": "renamed", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -2,10 +2,19 @@\n \n use super::*;\n \n-pub(super) fn struct_def(p: &mut Parser, m: Marker, kind: SyntaxKind) {\n-    assert!(p.at(T![struct]) || p.at_contextual_kw(\"union\"));\n-    p.bump_remap(kind);\n+pub(super) fn struct_def(p: &mut Parser, m: Marker) {\n+    assert!(p.at(T![struct]));\n+    p.bump(T![struct]);\n+    struct_or_union(p, m, T![struct], STRUCT_DEF);\n+}\n+\n+pub(super) fn union_def(p: &mut Parser, m: Marker) {\n+    assert!(p.at_contextual_kw(\"union\"));\n+    p.bump_remap(T![union]);\n+    struct_or_union(p, m, T![union], UNION_DEF);\n+}\n \n+fn struct_or_union(p: &mut Parser, m: Marker, kw: SyntaxKind, def: SyntaxKind) {\n     name_r(p, ITEM_RECOVERY_SET);\n     type_params::opt_type_param_list(p);\n     match p.current() {\n@@ -22,26 +31,26 @@ pub(super) fn struct_def(p: &mut Parser, m: Marker, kind: SyntaxKind) {\n                 }\n             }\n         }\n-        T![;] if kind == T![struct] => {\n+        T![;] if kw == T![struct] => {\n             p.bump(T![;]);\n         }\n         T!['{'] => record_field_def_list(p),\n-        T!['('] if kind == T![struct] => {\n+        T!['('] if kw == T![struct] => {\n             tuple_field_def_list(p);\n             // test tuple_struct_where\n             // struct Test<T>(T) where T: Clone;\n             // struct Test<T>(T);\n             type_params::opt_where_clause(p);\n             p.expect(T![;]);\n         }\n-        _ if kind == T![struct] => {\n+        _ if kw == T![struct] => {\n             p.error(\"expected `;`, `{`, or `(`\");\n         }\n         _ => {\n             p.error(\"expected `{`\");\n         }\n     }\n-    m.complete(p, STRUCT_DEF);\n+    m.complete(p, def);\n }\n \n pub(super) fn enum_def(p: &mut Parser, m: Marker) {", "previous_filename": "crates/ra_parser/src/grammar/items/nominal.rs"}, {"sha": "fe0fcdb33f269cd75e8cc2430385adb562b2dbce", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -122,6 +122,7 @@ pub enum SyntaxKind {\n     R_DOLLAR,\n     SOURCE_FILE,\n     STRUCT_DEF,\n+    UNION_DEF,\n     ENUM_DEF,\n     FN_DEF,\n     RET_TYPE,"}, {"sha": "a8f6251762921f95970f1297cb50ee3f071aa19d", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -196,17 +196,6 @@ impl StructKind {\n }\n \n impl ast::StructDef {\n-    pub fn is_union(&self) -> bool {\n-        for child in self.syntax().children_with_tokens() {\n-            match child.kind() {\n-                T![struct] => return false,\n-                T![union] => return true,\n-                _ => (),\n-            }\n-        }\n-        false\n-    }\n-\n     pub fn kind(&self) -> StructKind {\n         StructKind::from_node(self)\n     }"}, {"sha": "c06076e3d7acbef3ae28ea7a35d4ce8bb4903095", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -1856,6 +1856,7 @@ impl Module {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ModuleItem {\n     StructDef(StructDef),\n+    UnionDef(UnionDef),\n     EnumDef(EnumDef),\n     FnDef(FnDef),\n     TraitDef(TraitDef),\n@@ -1872,6 +1873,11 @@ impl From<StructDef> for ModuleItem {\n         ModuleItem::StructDef(node)\n     }\n }\n+impl From<UnionDef> for ModuleItem {\n+    fn from(node: UnionDef) -> ModuleItem {\n+        ModuleItem::UnionDef(node)\n+    }\n+}\n impl From<EnumDef> for ModuleItem {\n     fn from(node: EnumDef) -> ModuleItem {\n         ModuleItem::EnumDef(node)\n@@ -1925,14 +1931,15 @@ impl From<Module> for ModuleItem {\n impl AstNode for ModuleItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            STRUCT_DEF | ENUM_DEF | FN_DEF | TRAIT_DEF | TYPE_ALIAS_DEF | IMPL_BLOCK | USE_ITEM\n-            | EXTERN_CRATE_ITEM | CONST_DEF | STATIC_DEF | MODULE => true,\n+            STRUCT_DEF | UNION_DEF | ENUM_DEF | FN_DEF | TRAIT_DEF | TYPE_ALIAS_DEF\n+            | IMPL_BLOCK | USE_ITEM | EXTERN_CRATE_ITEM | CONST_DEF | STATIC_DEF | MODULE => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             STRUCT_DEF => ModuleItem::StructDef(StructDef { syntax }),\n+            UNION_DEF => ModuleItem::UnionDef(UnionDef { syntax }),\n             ENUM_DEF => ModuleItem::EnumDef(EnumDef { syntax }),\n             FN_DEF => ModuleItem::FnDef(FnDef { syntax }),\n             TRAIT_DEF => ModuleItem::TraitDef(TraitDef { syntax }),\n@@ -1950,6 +1957,7 @@ impl AstNode for ModuleItem {\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n             ModuleItem::StructDef(it) => &it.syntax,\n+            ModuleItem::UnionDef(it) => &it.syntax,\n             ModuleItem::EnumDef(it) => &it.syntax,\n             ModuleItem::FnDef(it) => &it.syntax,\n             ModuleItem::TraitDef(it) => &it.syntax,\n@@ -2038,6 +2046,7 @@ impl NeverType {}\n pub enum NominalDef {\n     StructDef(StructDef),\n     EnumDef(EnumDef),\n+    UnionDef(UnionDef),\n }\n impl From<StructDef> for NominalDef {\n     fn from(node: StructDef) -> NominalDef {\n@@ -2049,17 +2058,23 @@ impl From<EnumDef> for NominalDef {\n         NominalDef::EnumDef(node)\n     }\n }\n+impl From<UnionDef> for NominalDef {\n+    fn from(node: UnionDef) -> NominalDef {\n+        NominalDef::UnionDef(node)\n+    }\n+}\n impl AstNode for NominalDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            STRUCT_DEF | ENUM_DEF => true,\n+            STRUCT_DEF | ENUM_DEF | UNION_DEF => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             STRUCT_DEF => NominalDef::StructDef(StructDef { syntax }),\n             ENUM_DEF => NominalDef::EnumDef(EnumDef { syntax }),\n+            UNION_DEF => NominalDef::UnionDef(UnionDef { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -2068,6 +2083,7 @@ impl AstNode for NominalDef {\n         match self {\n             NominalDef::StructDef(it) => &it.syntax,\n             NominalDef::EnumDef(it) => &it.syntax,\n+            NominalDef::UnionDef(it) => &it.syntax,\n         }\n     }\n }\n@@ -3789,6 +3805,38 @@ impl AstNode for TypeRef {\n }\n impl TypeRef {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct UnionDef {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for UnionDef {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            UNION_DEF => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl ast::VisibilityOwner for UnionDef {}\n+impl ast::NameOwner for UnionDef {}\n+impl ast::TypeParamsOwner for UnionDef {}\n+impl ast::AttrsOwner for UnionDef {}\n+impl ast::DocCommentsOwner for UnionDef {}\n+impl UnionDef {\n+    pub fn record_field_def_list(&self) -> Option<RecordFieldDefList> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UseItem {\n     pub(crate) syntax: SyntaxNode,\n }"}, {"sha": "d1be40abeb9690a54d8f90a3f50765cd9dfeccdf", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -126,6 +126,7 @@ Grammar(\n         \"SOURCE_FILE\",\n \n         \"STRUCT_DEF\",\n+        \"UNION_DEF\",\n         \"ENUM_DEF\",\n         \"FN_DEF\",\n         \"RET_TYPE\",\n@@ -285,6 +286,16 @@ Grammar(\n                 \"DocCommentsOwner\"\n             ]\n         ),\n+        \"UnionDef\": (\n+            traits: [\n+                \"VisibilityOwner\",\n+                \"NameOwner\",\n+                \"TypeParamsOwner\",\n+                \"AttrsOwner\",\n+                \"DocCommentsOwner\"\n+            ],\n+            options: [\"RecordFieldDefList\"],\n+        ),\n         \"RecordFieldDefList\": (collections: [(\"fields\", \"RecordFieldDef\")]),\n         \"RecordFieldDef\": (\n             traits: [\n@@ -388,17 +399,17 @@ Grammar(\n         ]),\n \n         \"NominalDef\": (\n-            enum: [\"StructDef\", \"EnumDef\"],\n+            enum: [\"StructDef\", \"EnumDef\", \"UnionDef\"],\n             traits: [\n                 \"NameOwner\",\n                 \"TypeParamsOwner\",\n                 \"AttrsOwner\"\n             ],\n         ),\n         \"ModuleItem\": (\n-            enum: [\"StructDef\", \"EnumDef\", \"FnDef\", \"TraitDef\", \"TypeAliasDef\", \"ImplBlock\",\n+            enum: [\"StructDef\", \"UnionDef\", \"EnumDef\", \"FnDef\", \"TraitDef\", \"TypeAliasDef\", \"ImplBlock\",\n                    \"UseItem\", \"ExternCrateItem\", \"ConstDef\", \"StaticDef\", \"Module\" ],\n-            traits: [\"AttrsOwner\"]\n+            traits: [\"AttrsOwner\"],\n         ),\n         \"ImplItem\": (\n             enum: [\"FnDef\", \"TypeAliasDef\", \"ConstDef\"],"}, {"sha": "9d798268463d1d959cb93f520225865380b5e917", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0068_union_items.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.txt?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 51)\n-  STRUCT_DEF@[0; 12)\n+  UNION_DEF@[0; 12)\n     UNION_KW@[0; 5) \"union\"\n     WHITESPACE@[5; 6) \" \"\n     NAME@[6; 9)\n@@ -9,7 +9,7 @@ SOURCE_FILE@[0; 51)\n       L_CURLY@[10; 11) \"{\"\n       R_CURLY@[11; 12) \"}\"\n   WHITESPACE@[12; 13) \"\\n\"\n-  STRUCT_DEF@[13; 50)\n+  UNION_DEF@[13; 50)\n     UNION_KW@[13; 18) \"union\"\n     WHITESPACE@[18; 19) \" \"\n     NAME@[19; 22)"}, {"sha": "90538b90daa858ae86308759ea677f57308553fe", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.txt?ref=ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "patch": "@@ -1592,7 +1592,7 @@ SOURCE_FILE@[0; 3813)\n       BLOCK@[2845; 2906)\n         L_CURLY@[2845; 2846) \"{\"\n         WHITESPACE@[2846; 2851) \"\\n    \"\n-        STRUCT_DEF@[2851; 2904)\n+        UNION_DEF@[2851; 2904)\n           UNION_KW@[2851; 2856) \"union\"\n           WHITESPACE@[2856; 2857) \" \"\n           NAME@[2857; 2862)"}]}