{"sha": "3c65f536206a4df9900f5f6666f3674817d3638b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNjVmNTM2MjA2YTRkZjk5MDBmNWY2NjY2ZjM2NzQ4MTdkMzYzOGI=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-03-26T21:39:29Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-03-28T09:13:13Z"}, "message": "Stabilize match_default_bindings\n\nThis includes a submodule update to rustfmt\nin order to allow a stable feature declaration.", "tree": {"sha": "5898acfc68c09ad94ff4674bb783b4586f428879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5898acfc68c09ad94ff4674bb783b4586f428879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c65f536206a4df9900f5f6666f3674817d3638b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c65f536206a4df9900f5f6666f3674817d3638b", "html_url": "https://github.com/rust-lang/rust/commit/3c65f536206a4df9900f5f6666f3674817d3638b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c65f536206a4df9900f5f6666f3674817d3638b/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e58df0d8c5221fa5743587740eb50e4db42c3d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58df0d8c5221fa5743587740eb50e4db42c3d1e", "html_url": "https://github.com/rust-lang/rust/commit/e58df0d8c5221fa5743587740eb50e4db42c3d1e"}], "stats": {"total": 444, "additions": 55, "deletions": 389}, "files": [{"sha": "8ace51ddac2b5be629898c007cb7aa79efa693ce", "filename": "src/Cargo.lock", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1511,7 +1511,7 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"67.0.0\"\n+version = \"73.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1520,61 +1520,61 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"67.0.0\"\n+version = \"73.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"67.0.0\"\n+version = \"73.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"67.0.0\"\n+version = \"73.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"67.0.0\"\n+version = \"73.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"67.0.0\"\n+version = \"73.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2009,7 +2009,7 @@ dependencies = [\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2729,12 +2729,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rls-rustc 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"885f66b92757420572cbb02e033d4a9558c7413ca9b7ac206f28fd58ffdb44ea\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rls-vfs 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be231e1e559c315bc60ced5ad2cc2d7a9c208ed7d4e2c126500149836fda19bb\"\n-\"checksum rustc-ap-rustc_cratesio_shim 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"adc16e4a6e50a4ffbd4633d737aedbdfcb565bdf658159e0544266908180a919\"\n-\"checksum rustc-ap-rustc_data_structures 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5ec5f0a018fbec07f64b689ac20f7343ed77939055ca07d2aceb37c832245b1b\"\n-\"checksum rustc-ap-rustc_errors 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8301221cc07002666eed552a089b15000bc954c94b14a460c0653363a7f42f4c\"\n-\"checksum rustc-ap-serialize 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5212ee40fc332d791cacf202ae5fb99197341857c0a14bcdf60541fea7dfc5ed\"\n-\"checksum rustc-ap-syntax 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"168571b3878c6c61aef4bacef95c86d30fa61fb1cff04395d9535c80c196e559\"\n-\"checksum rustc-ap-syntax_pos 67.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd7a0486f56db583caa665c8b4ff02c4774fe279db1741509437bc8a84c53361\"\n+\"checksum rustc-ap-rustc_cratesio_shim 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"421262e22426c06306e46057a75048f883dbc43886f78dbe1e750397a9c9b8e6\"\n+\"checksum rustc-ap-rustc_data_structures 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8460c1207f9abb48a9720aee8be418bcfac018b6eee7b740b98a410e7799d24a\"\n+\"checksum rustc-ap-rustc_errors 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad2077469162e52fcd84543334e18632088b9e342fe54e3b78c37d7077d09714\"\n+\"checksum rustc-ap-serialize 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"69943901ae255dca5f63faeae2ff08b402d34a56d1eb50d34fbff6e83e6ace60\"\n+\"checksum rustc-ap-syntax 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a44363359a43df753e26a4d4fef72720af183de635ebae8699686cb5d5de813\"\n+\"checksum rustc-ap-syntax_pos 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"413f464657e8d5f3864de308dba1867526f21a44809b6f338b34e8c0caf88fb0\"\n \"checksum rustc-demangle 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11fb43a206a04116ffd7cfcf9bcb941f8eb6cc7ff667272246b0a1c74259a3cb\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum same-file 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cfb6eded0b06a0b512c8ddbcf04089138c9b4362c2f696f3c3d76039d68f3637\""}, {"sha": "cc542931cbe1fc01b10f1e2aef1bf2bc417b7298", "filename": "src/doc/unstable-book/src/language-features/match-default-bindings.md", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmatch-default-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmatch-default-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmatch-default-bindings.md?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -1,58 +0,0 @@\n-# `match_default_bindings`\n-\n-The tracking issue for this feature is: [#42640]\n-\n-[#42640]: https://github.com/rust-lang/rust/issues/42640\n-\n-------------------------\n-\n-Match default bindings (also called \"default binding modes in match\") improves ergonomics for\n-pattern-matching on references by introducing automatic dereferencing (and a corresponding shift\n-in binding modes) for large classes of patterns that would otherwise not compile.\n-\n-For example, under match default bindings,\n-\n-```rust\n-#![feature(match_default_bindings)]\n-\n-fn main() {\n-    let x: &Option<_> = &Some(0);\n-\n-    match x {\n-        Some(y) => {\n-            println!(\"y={}\", *y);\n-        },\n-        None => {},\n-    }\n-}\n-```\n-\n-compiles and is equivalent to either of the below:\n-\n-```rust\n-fn main() {\n-    let x: &Option<_> = &Some(0);\n-\n-    match *x {\n-        Some(ref y) => {\n-            println!(\"y={}\", *y);\n-        },\n-        None => {},\n-    }\n-}\n-```\n-\n-or\n-\n-```rust\n-fn main() {\n-    let x: &Option<_> = &Some(0);\n-\n-    match x {\n-        &Some(ref y) => {\n-            println!(\"y={}\", *y);\n-        },\n-        &None => {},\n-    }\n-}\n-```"}, {"sha": "c74ae2343b866b0833154d97fb3457e4a7464276", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -887,65 +887,6 @@ foo(3_i8);\n // therefore the type-checker complains with this error code.\n ```\n \n-Here is a more subtle instance of the same problem, that can\n-arise with for-loops in Rust:\n-\n-```compile_fail\n-let vs: Vec<i32> = vec![1, 2, 3, 4];\n-for v in &vs {\n-    match v {\n-        1 => {},\n-        _ => {},\n-    }\n-}\n-```\n-\n-The above fails because of an analogous type mismatch,\n-though may be harder to see. Again, here are some\n-explanatory comments for the same example:\n-\n-```compile_fail\n-{\n-    let vs = vec![1, 2, 3, 4];\n-\n-    // `for`-loops use a protocol based on the `Iterator`\n-    // trait. Each item yielded in a `for` loop has the\n-    // type `Iterator::Item` -- that is, `Item` is the\n-    // associated type of the concrete iterator impl.\n-    for v in &vs {\n-//      ~    ~~~\n-//      |     |\n-//      |    We borrow `vs`, iterating over a sequence of\n-//      |    *references* of type `&Elem` (where `Elem` is\n-//      |    vector's element type). Thus, the associated\n-//      |    type `Item` must be a reference `&`-type ...\n-//      |\n-//  ... and `v` has the type `Iterator::Item`, as dictated by\n-//  the `for`-loop protocol ...\n-\n-        match v {\n-            1 => {}\n-//          ~\n-//          |\n-// ... but *here*, `v` is forced to have some integral type;\n-// only types like `u8`,`i8`,`u16`,`i16`, et cetera can\n-// match the pattern `1` ...\n-\n-            _ => {}\n-        }\n-\n-// ... therefore, the compiler complains, because it sees\n-// an attempt to solve the equations\n-// `some integral-type` = type-of-`v`\n-//                      = `Iterator::Item`\n-//                      = `&Elem` (i.e. `some reference type`)\n-//\n-// which cannot possibly all be true.\n-\n-    }\n-}\n-```\n-\n To avoid those issues, you have to make the types match correctly.\n So we can fix the previous examples like this:\n "}, {"sha": "ae8ae9404bc874fa4af084133022f6765366af4b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -55,7 +55,7 @@\n #![cfg_attr(stage0, feature(i128_type, i128))]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![cfg_attr(windows, feature(libc))]\n-#![feature(match_default_bindings)]\n+#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(macro_lifetime_matcher)]\n #![feature(macro_vis_matcher)]\n #![feature(exhaustive_patterns)]"}, {"sha": "d54654c60868c26d586907659b1b6a3d3ec1ecff", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -16,7 +16,7 @@\n #![allow(non_camel_case_types)]\n \n #![feature(from_ref)]\n-#![feature(match_default_bindings)]\n+#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(quote)]\n \n #[macro_use] extern crate log;"}, {"sha": "262e5f608ca64cd21e98ad9a429a813d8e0c90e0", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -30,7 +30,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![cfg_attr(stage0, feature(i128_type))]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(macro_vis_matcher)]\n-#![feature(match_default_bindings)]\n+#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(exhaustive_patterns)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "0a21cc597e63b5893429c24eed1f1088501eb400", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -14,7 +14,7 @@\n #![deny(warnings)]\n \n #![feature(crate_visibility_modifier)]\n-#![feature(match_default_bindings)]\n+#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(underscore_lifetimes)]\n \n #[macro_use]"}, {"sha": "43ff925e422f189b98872bc362d46f2167a4526a", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -23,7 +23,6 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cmp;\n use syntax::ast;\n use syntax::codemap::Spanned;\n-use syntax::feature_gate;\n use syntax::ptr::P;\n use syntax_pos::Span;\n \n@@ -114,42 +113,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             };\n             if pat_adjustments.len() > 0 {\n-                if tcx.features().match_default_bindings {\n-                    debug!(\"default binding mode is now {:?}\", def_bm);\n-                    self.inh.tables.borrow_mut()\n-                        .pat_adjustments_mut()\n-                        .insert(pat.hir_id, pat_adjustments);\n-                } else {\n-                    let mut ref_sp = pat.span;\n-                    let mut id = pat.id;\n-                    loop {  // make span include all enclosing `&` to avoid confusing diag output\n-                        id = tcx.hir.get_parent_node(id);\n-                        let node = tcx.hir.find(id);\n-                        if let Some(hir::map::NodePat(pat)) = node {\n-                            if let hir::PatKind::Ref(..) = pat.node {\n-                                ref_sp = pat.span;\n-                            } else {\n-                                break;\n-                            }\n-                        } else {\n-                            break;\n-                        }\n-                    }\n-                    let sp = ref_sp.to(pat.span);\n-                    let mut err = feature_gate::feature_err(\n-                        &tcx.sess.parse_sess,\n-                        \"match_default_bindings\",\n-                        sp,\n-                        feature_gate::GateIssue::Language,\n-                        \"non-reference pattern used to match a reference\",\n-                    );\n-                    if let Ok(snippet) = tcx.sess.codemap().span_to_snippet(sp) {\n-                        err.span_suggestion(sp,\n-                                            \"consider using a reference\",\n-                                            format!(\"&{}\", &snippet));\n-                    }\n-                    err.emit();\n-                }\n+                debug!(\"default binding mode is now {:?}\", def_bm);\n+                self.inh.tables.borrow_mut()\n+                    .pat_adjustments_mut()\n+                    .insert(pat.hir_id, pat_adjustments);\n             }\n         } else if let PatKind::Ref(..) = pat.node {\n             // When you encounter a `&pat` pattern, reset to \"by"}, {"sha": "44ecb32a0bf9b1fcbb453a191a962beb9b5e1992", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -79,7 +79,7 @@ This API is completely unstable and subject to change.\n #![cfg_attr(stage0, feature(copy_closures, clone_closures))]\n #![feature(crate_visibility_modifier)]\n #![feature(from_ref)]\n-#![feature(match_default_bindings)]\n+#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(exhaustive_patterns)]\n #![feature(option_filter)]\n #![feature(quote)]"}, {"sha": "ce8c613dc8bb686c6812ce5ce51be9346b10122c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -385,9 +385,6 @@ declare_features! (\n     // allow `'_` placeholder lifetimes\n     (active, underscore_lifetimes, \"1.22.0\", Some(44524), None),\n \n-    // Default match binding modes (RFC 2005)\n-    (active, match_default_bindings, \"1.22.0\", Some(42640), None),\n-\n     // Trait object syntax with `dyn` prefix\n     (active, dyn_trait, \"1.22.0\", Some(44662), Some(Edition::Edition2018)),\n \n@@ -563,6 +560,8 @@ declare_features! (\n     (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n     // The `i128` type\n     (accepted, i128_type, \"1.26.0\", Some(35118), None),\n+    // Default match binding modes (RFC 2005)\n+    (accepted, match_default_bindings, \"1.26.0\", Some(42640), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "dc349c1a3e6a12f51b728a4b16111d085a12b9d0", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -22,7 +22,7 @@\n \n #![feature(unicode)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(match_default_bindings)]\n+#![cfg_attr(stage0, feature(match_default_bindings))]\n #![feature(non_exhaustive)]\n #![cfg_attr(stage0, feature(i128_type))]\n #![feature(const_atomic_usize_new)]"}, {"sha": "438073e3b2f82b5e37c3d3631601ee8d742efff2", "filename": "src/test/compile-fail/issue-16338.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -17,5 +17,4 @@ fn main() {\n     let Slice { data: data, len: len } = \"foo\";\n     //~^ ERROR mismatched types\n     //~| found type `Slice<_>`\n-    //~| ERROR non-reference pattern used to match a reference\n }"}, {"sha": "bb4dbdcd0cba7793b892ab29c586720df444f3e1", "filename": "src/test/compile-fail/issue-20261.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fcompile-fail%2Fissue-20261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fcompile-fail%2Fissue-20261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20261.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     // NB: this (almost) typechecks when default binding modes are enabled.\n     for (ref i,) in [].iter() {\n-        //~^ ERROR non-reference pattern used to match a reference\n         i.clone();\n+        //~^ ERROR type annotations needed\n     }\n }"}, {"sha": "f89b3e39390d31de8b22d29cbea8c112ede25b71", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -15,15 +15,13 @@ fn main() {\n     //~^^ ERROR only char and numeric types are allowed in range\n     //~| start type: &'static str\n     //~| end type: &'static str\n-    //~| ERROR non-reference pattern used to match a reference\n \n     match \"wow\" {\n         10 ... \"what\" => ()\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n     //~| start type: {integer}\n     //~| end type: &'static str\n-    //~| ERROR non-reference pattern used to match a reference\n \n     match 5 {\n         'c' ... 100 => { }"}, {"sha": "d737aa0029bf83ae324964e11c466397eb75aa8e", "filename": "src/test/compile-fail/match-vec-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -19,7 +19,7 @@ fn main() {\n \n     // Note that this one works with default binding modes.\n     match &[0, 1, 2] {\n-        [..] => {} //~ ERROR non-reference pattern used to match a reference\n+        [..] => {}\n     };\n \n     match &[0, 1, 2] {"}, {"sha": "2114dbebe93fb2a74c4c2b7c02ab0fd914969928", "filename": "src/test/run-pass/nll/rc-loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Frc-loop.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -14,7 +14,6 @@\n // `x`.  The lexical checker makes this very painful. The NLL checker\n // does not.\n \n-#![feature(match_default_bindings)]\n #![feature(nll)]\n \n use std::rc::Rc;"}, {"sha": "95bce1935e525a6220692069cb796acc8e229f74", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fbox.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(box_syntax, box_patterns)]\n-#![feature(match_default_bindings)]\n \n struct Foo{}\n "}, {"sha": "af40ef2b1c5d16e7457cc1bf54e3d27cf1bcdce8", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/constref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fconstref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fconstref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fconstref.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n const CONST_REF: &[u8; 3] = b\"foo\";\n \n trait Foo {"}, {"sha": "4755fc37ef3470fd34212c5d993f0682a5a76c03", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fenum.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n enum Wrapper {\n     Wrap(i32),\n }"}, {"sha": "c2467d3f009104ad021437a77819ab697adc5555", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/for.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Ffor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Ffor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Ffor.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n pub fn main() {\n     let mut tups = vec![(0u8, 1u8)];\n "}, {"sha": "df28046d7d70bc089b8d583bdc44ff62944a4822", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/general.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fgeneral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fgeneral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fgeneral.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n fn some_or_wildcard(r: &Option<i32>, b: &i32) {\n     let _: &i32 = match r {\n         Some(a) => a,"}, {"sha": "004ea42b65b889edf66c1a644bd2d64cd4539b6e", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/lit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Flit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Flit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Flit.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n fn with_u8() {\n     let s = 5u8;\n     let r = match &s {"}, {"sha": "2292d97eaf4e5812f9943f81437e3547f344bca6", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/range.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Frange.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n pub fn main() {\n     let i = 5;\n     match &&&&i {"}, {"sha": "bc96853fd948a341d0ab72c1c8e86de00c5e4faf", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/ref-region.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fref-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fref-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fref-region.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n fn foo<'a, 'b>(x: &'a &'b Option<u32>) -> &'a u32 {\n     let x: &'a &'a Option<u32> = x;\n     match x {"}, {"sha": "1d86a2ecf869acb52423ba8f38e2a1136fcee34b", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/reset-mode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Freset-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Freset-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Freset-mode.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n // Test that we \"reset\" the mode as we pass through a `&` pattern.\n //\n // cc #46688"}, {"sha": "0d1d0893c593e8d9476d491f03f58b42e02634be", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fslice.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n #![feature(slice_patterns)]\n \n fn slice_pat() {"}, {"sha": "017439b3b140f9660c86ce56a9818af38da5c46e", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fstruct.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n #[derive(Debug, PartialEq)]\n struct Foo {\n     x: u8,"}, {"sha": "3b55405abdd7e923c998599559072ad3723de72c", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Ftuple-struct.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n enum Foo {\n     Bar(Option<i8>, (), (), Vec<i32>),\n     Baz,"}, {"sha": "966b8e1a8127940cfe04ea362222b1ae72933f60", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/tuple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Ftuple.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n pub fn main() {\n     let foo = (Some(1), (), (), vec![2, 3]);\n "}, {"sha": "1bc2c2d58b1947c606dc0b04889cc525d1b6810b", "filename": "src/test/ui/error-codes/E0029-teach.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -16,7 +16,6 @@ fn main() {\n     match s {\n         \"hello\" ... \"world\" => {}\n         //~^ ERROR only char and numeric types are allowed in range patterns\n-        //~| ERROR non-reference pattern used to match a reference\n         _ => {}\n     }\n }"}, {"sha": "4bb71f68a98b9bde2a83af0f0fce00a955bdfc4e", "filename": "src/test/ui/error-codes/E0029-teach.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1,11 +1,3 @@\n-error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n-  --> $DIR/E0029-teach.rs:17:9\n-   |\n-LL |         \"hello\" ... \"world\" => {}\n-   |         ^^^^^^^^^^^^^^^^^^^ help: consider using a reference: `&\"hello\" ... \"world\"`\n-   |\n-   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n-\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/E0029-teach.rs:17:9\n    |\n@@ -16,7 +8,6 @@ LL |         \"hello\" ... \"world\" => {}\n    = note: end type: &'static str\n    = note: In a match expression, only numbers and characters can be matched against a range. This is because the compiler checks that the range is non-empty at compile-time, and is unable to evaluate arbitrary comparison functions. If you want to capture values of an orderable type between two end-points, you can use a guard.\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0029, E0658.\n-For more information about an error, try `rustc --explain E0029`.\n+For more information about this error, try `rustc --explain E0029`."}, {"sha": "29b6fe44113582fca7e71ee40191c831a85d4ede", "filename": "src/test/ui/error-codes/E0029.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -14,7 +14,6 @@ fn main() {\n     match s {\n         \"hello\" ... \"world\" => {}\n         //~^ ERROR only char and numeric types are allowed in range patterns\n-        //~| ERROR non-reference pattern used to match a reference\n         _ => {}\n     }\n }"}, {"sha": "bcdfa3871110752ac051a00e498d5f192fa2f97c", "filename": "src/test/ui/error-codes/E0029.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1,11 +1,3 @@\n-error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n-  --> $DIR/E0029.rs:15:9\n-   |\n-LL |         \"hello\" ... \"world\" => {}\n-   |         ^^^^^^^^^^^^^^^^^^^ help: consider using a reference: `&\"hello\" ... \"world\"`\n-   |\n-   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n-\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/E0029.rs:15:9\n    |\n@@ -15,7 +7,6 @@ LL |         \"hello\" ... \"world\" => {}\n    = note: start type: &'static str\n    = note: end type: &'static str\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0029, E0658.\n-For more information about an error, try `rustc --explain E0029`.\n+For more information about this error, try `rustc --explain E0029`."}, {"sha": "4ee2c1e2936a85a2f168e053486dad28964a6481", "filename": "src/test/ui/feature-gate-match_default_bindings.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.rs?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn main() {\n-    match &Some(3) {\n-        Some(n) => {},\n-        //~^ ERROR non-reference pattern used to match a reference\n-        _ => panic!(),\n-    }\n-}"}, {"sha": "8fa553561de2018fa40aad6d1009a82fbaad088d", "filename": "src/test/ui/feature-gate-match_default_bindings.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.stderr?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n-  --> $DIR/feature-gate-match_default_bindings.rs:13:9\n-   |\n-LL |         Some(n) => {},\n-   |         ^^^^^^^ help: consider using a reference: `&Some(n)`\n-   |\n-   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "65578e76d6d696e0725438196a5f9cc7af616a8a", "filename": "src/test/ui/pat-slice-old-style.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Fpat-slice-old-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Fpat-slice-old-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpat-slice-old-style.rs?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// NB: this test was introduced in #23121 and will have to change when default match binding modes\n-// stabilizes.\n-\n-#![feature(slice_patterns)]\n-\n-fn slice_pat(x: &[u8]) {\n-    // OLD!\n-    match x {\n-        [a, b..] => {},\n-        //~^ ERROR non-reference pattern used to match a reference\n-        _ => panic!(),\n-    }\n-}\n-\n-fn main() {\n-    slice_pat(\"foo\".as_bytes());\n-}"}, {"sha": "6fa5b18a14e863d6be7c2ba7275ec7c13075bbc2", "filename": "src/test/ui/pat-slice-old-style.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Fpat-slice-old-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Fpat-slice-old-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpat-slice-old-style.stderr?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n-  --> $DIR/pat-slice-old-style.rs:19:9\n-   |\n-LL |         [a, b..] => {},\n-   |         ^^^^^^^^ help: consider using a reference: `&[a, b..]`\n-   |\n-   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "f80e47507ff04483cde056c3f18ec020d38d60ea", "filename": "src/test/ui/rfc-2005-default-binding-mode/const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -10,8 +10,6 @@\n \n // FIXME(tschottdorf): this test should pass.\n \n-#![feature(match_default_bindings)]\n-\n #[derive(PartialEq, Eq)]\n struct Foo {\n     bar: i32,"}, {"sha": "4849c39a5d0992d3e865fc846e34fcbc6fb2bdf6", "filename": "src/test/ui/rfc-2005-default-binding-mode/const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/const.rs:26:9\n+  --> $DIR/const.rs:24:9\n    |\n LL |         FOO => {}, //~ ERROR mismatched types\n    |         ^^^ expected &Foo, found struct `Foo`"}, {"sha": "a108653f85d20393deb1574d08f2e8cdcf4a3991", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n enum Wrapper {\n     Wrap(i32),\n }"}, {"sha": "a7f3b507508e86d84def1936d79cb67fa5c8f9f8", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1,21 +1,21 @@\n error[E0594]: cannot assign to immutable borrowed content `*x`\n-  --> $DIR/enum.rs:21:5\n+  --> $DIR/enum.rs:19:5\n    |\n LL |     let Wrap(x) = &Wrap(3);\n    |              - consider changing this to `x`\n LL |     *x += 1; //~ ERROR cannot assign to immutable\n    |     ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*x`\n-  --> $DIR/enum.rs:25:9\n+  --> $DIR/enum.rs:23:9\n    |\n LL |     if let Some(x) = &Some(3) {\n    |                 - consider changing this to `x`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n    |         ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*x`\n-  --> $DIR/enum.rs:31:9\n+  --> $DIR/enum.rs:29:9\n    |\n LL |     while let Some(x) = &Some(3) {\n    |                    - consider changing this to `x`"}, {"sha": "8001d980174e0c8e6778692e53530fc5c0c7d17d", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n // Verify the binding mode shifts - only when no `&` are auto-dereferenced is the\n // final default binding mode mutable.\n "}, {"sha": "f2b9bde41ab3341274cdd319d871223829794907", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1,21 +1,21 @@\n error[E0594]: cannot assign to immutable borrowed content `*n`\n-  --> $DIR/explicit-mut.rs:19:13\n+  --> $DIR/explicit-mut.rs:17:13\n    |\n LL |         Some(n) => {\n    |              - consider changing this to `n`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n    |             ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*n`\n-  --> $DIR/explicit-mut.rs:27:13\n+  --> $DIR/explicit-mut.rs:25:13\n    |\n LL |         Some(n) => {\n    |              - consider changing this to `n`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n    |             ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*n`\n-  --> $DIR/explicit-mut.rs:35:13\n+  --> $DIR/explicit-mut.rs:33:13\n    |\n LL |         Some(n) => {\n    |              - consider changing this to `n`"}, {"sha": "a354d2216a9c777acdb829a4bddd36264c65a17d", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n struct Foo {}\n \n pub fn main() {"}, {"sha": "dbd4bd5dbec4359e91f21c9ab609c446ccac6d53", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1,5 +1,5 @@\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/for.rs:18:13\n+  --> $DIR/for.rs:16:13\n    |\n LL |     for (n, mut m) in &tups {\n    |          -  ^^^^^ by-move pattern here"}, {"sha": "4f4c2a149a7d69ca96c342f06517092f5764778d", "filename": "src/test/ui/rfc-2005-default-binding-mode/issue-44912-or.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n // FIXME(tschottdorf): This should compile. See #44912.\n \n pub fn main() {"}, {"sha": "04fa3708ffb758e2f708cde2e0deded88e2ec014", "filename": "src/test/ui/rfc-2005-default-binding-mode/issue-44912-or.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.stderr?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1,5 +1,5 @@\n error[E0409]: variable `x` is bound in inconsistent ways within the same match arm\n-  --> $DIR/issue-44912-or.rs:18:35\n+  --> $DIR/issue-44912-or.rs:16:35\n    |\n LL |         Some((x, 3)) | &Some((ref x, 5)) => x,\n    |               - first binding     ^ bound in different ways"}, {"sha": "209f584534615a1bc39a517ff9507c065ce995f2", "filename": "src/test/ui/rfc-2005-default-binding-mode/lit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n-\n // FIXME(tschottdorf): we want these to compile, but they don't.\n \n fn with_str() {"}, {"sha": "d5c230bc8de5496b3156d841b55d4254e780811e", "filename": "src/test/ui/rfc-2005-default-binding-mode/lit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/lit.rs:19:13\n+  --> $DIR/lit.rs:17:13\n    |\n LL |             \"abc\" => true, //~ ERROR mismatched types\n    |             ^^^^^ expected &str, found str\n@@ -8,7 +8,7 @@ LL |             \"abc\" => true, //~ ERROR mismatched types\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/lit.rs:28:9\n+  --> $DIR/lit.rs:26:9\n    |\n LL |         b\"abc\" => true, //~ ERROR mismatched types\n    |         ^^^^^^ expected &[u8], found array of 3 elements"}, {"sha": "fbe4dfe216196eac7793cc1711129c972e248198", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(match_default_bindings)]\n #![feature(slice_patterns)]\n \n pub fn main() {"}, {"sha": "18dc6b2869ab9c541ae2b30b76450a1723b7a4c1", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c65f536206a4df9900f5f6666f3674817d3638b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `&[]` not covered\n-  --> $DIR/slice.rs:17:11\n+  --> $DIR/slice.rs:16:11\n    |\n LL |     match sl { //~ ERROR non-exhaustive patterns\n    |           ^^ pattern `&[]` not covered"}, {"sha": "b9b974ff3c521aa6b36d48a33d96f98a1ea30585", "filename": "src/test/ui/rfc-2005-default-binding-mode/suggestion.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.rs?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    if let Some(y) = &Some(22) { //~ ERROR non-reference pattern\n-      println!(\"{}\", y);\n-    }\n-}"}, {"sha": "ea58c62fc847675e9f625ceff79a7ccbd98f75a7", "filename": "src/test/ui/rfc-2005-default-binding-mode/suggestion.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n-  --> $DIR/suggestion.rs:12:12\n-   |\n-LL |     if let Some(y) = &Some(22) { //~ ERROR non-reference pattern\n-   |            ^^^^^^^ help: consider using a reference: `&Some(y)`\n-   |\n-   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "0a2e7ef322606f63c5bf015edeaae3b424ad4481", "filename": "src/test/ui/suggestions/dont-suggest-dereference-on-arg.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.rs?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo(s: &str) -> bool { true }\n-\n-fn main() {\n-    let x = vec![(String::new(), String::new())];\n-    x.iter()\n-        .filter(|&(ref a, _)| foo(a))\n-        //~^ ERROR non-reference pattern used to match a reference\n-        .collect();\n-}"}, {"sha": "4e2a321ffac09926c5f5f48c85460c5c4b37d483", "filename": "src/test/ui/suggestions/dont-suggest-dereference-on-arg.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n-  --> $DIR/dont-suggest-dereference-on-arg.rs:16:18\n-   |\n-LL |         .filter(|&(ref a, _)| foo(a))\n-   |                  ^^^^^^^^^^^ help: consider using a reference: `&&(ref a, _)`\n-   |\n-   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a4462d18bf6b92aaec1eeb1c30d5ddf94a3ca987", "filename": "src/tools/rustfmt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=3c65f536206a4df9900f5f6666f3674817d3638b", "patch": "@@ -1 +1 @@\n-Subproject commit 374dba833e22cc8df8e16e19cccbde61c69d9aed\n+Subproject commit a4462d18bf6b92aaec1eeb1c30d5ddf94a3ca987"}]}