{"sha": "6d14512fd9adde3c86d592c14b8b04e01696e972", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMTQ1MTJmZDlhZGRlM2M4NmQ1OTJjMTRiOGIwNGUwMTY5NmU5NzI=", "commit": {"author": {"name": "Nikolai Vazquez", "email": "nvazquez1297@gmail.com", "date": "2017-09-28T04:51:38Z"}, "committer": {"name": "Nikolai Vazquez", "email": "nvazquez1297@gmail.com", "date": "2017-09-28T04:51:38Z"}, "message": "Remove mem::transmute used in CStr conversions", "tree": {"sha": "2c2e16ebfd4432c3a6215aa8695e4aac0f9a94d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c2e16ebfd4432c3a6215aa8695e4aac0f9a94d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d14512fd9adde3c86d592c14b8b04e01696e972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d14512fd9adde3c86d592c14b8b04e01696e972", "html_url": "https://github.com/rust-lang/rust/commit/6d14512fd9adde3c86d592c14b8b04e01696e972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d14512fd9adde3c86d592c14b8b04e01696e972/comments", "author": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d663fcfc7a219f034ecdd219f03517e17db62d", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d663fcfc7a219f034ecdd219f03517e17db62d", "html_url": "https://github.com/rust-lang/rust/commit/36d663fcfc7a219f034ecdd219f03517e17db62d"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "2f962416ffce6b3d5bb18105a4f69d131c72e8ff", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d14512fd9adde3c86d592c14b8b04e01696e972/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d14512fd9adde3c86d592c14b8b04e01696e972/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=6d14512fd9adde3c86d592c14b8b04e01696e972", "patch": "@@ -312,7 +312,7 @@ impl CString {\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n         let len = libc::strlen(ptr) + 1; // Including the NUL byte\n         let slice = slice::from_raw_parts(ptr, len as usize);\n-        CString { inner: mem::transmute(slice) }\n+        CString { inner: Box::from_raw(slice as *mut [c_char] as *mut [u8]) }\n     }\n \n     /// Transfers ownership of the string to a C caller.\n@@ -480,7 +480,7 @@ impl CString {\n     /// ```\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_boxed_c_str(self) -> Box<CStr> {\n-        unsafe { mem::transmute(self.into_inner()) }\n+        unsafe { Box::from_raw(Box::into_raw(self.into_inner()) as *mut CStr) }\n     }\n \n     // Bypass \"move out of struct which implements [`Drop`] trait\" restriction.\n@@ -569,7 +569,7 @@ impl Borrow<CStr> for CString {\n impl<'a> From<&'a CStr> for Box<CStr> {\n     fn from(s: &'a CStr) -> Box<CStr> {\n         let boxed: Box<[u8]> = Box::from(s.to_bytes_with_nul());\n-        unsafe { mem::transmute(boxed) }\n+        unsafe { Box::from_raw(Box::into_raw(boxed) as *mut CStr) }\n     }\n }\n \n@@ -593,7 +593,7 @@ impl From<CString> for Box<CStr> {\n impl Default for Box<CStr> {\n     fn default() -> Box<CStr> {\n         let boxed: Box<[u8]> = Box::from([0]);\n-        unsafe { mem::transmute(boxed) }\n+        unsafe { Box::from_raw(Box::into_raw(boxed) as *mut CStr) }\n     }\n }\n \n@@ -817,7 +817,7 @@ impl CStr {\n     #[inline]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     pub unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n-        mem::transmute(bytes)\n+        &*(bytes as *const [u8] as *const CStr)\n     }\n \n     /// Returns the inner pointer to this C string.\n@@ -913,7 +913,7 @@ impl CStr {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes_with_nul(&self) -> &[u8] {\n-        unsafe { mem::transmute(&self.inner) }\n+        unsafe { &*(&self.inner as *const [c_char] as *const [u8]) }\n     }\n \n     /// Yields a [`&str`] slice if the `CStr` contains valid UTF-8.\n@@ -1005,7 +1005,8 @@ impl CStr {\n     /// ```\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_c_string(self: Box<CStr>) -> CString {\n-        unsafe { mem::transmute(self) }\n+        let raw = Box::into_raw(self) as *mut [u8];\n+        CString { inner: unsafe { Box::from_raw(raw) } }\n     }\n }\n "}]}