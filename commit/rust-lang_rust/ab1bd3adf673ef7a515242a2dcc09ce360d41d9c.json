{"sha": "ab1bd3adf673ef7a515242a2dcc09ce360d41d9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMWJkM2FkZjY3M2VmN2E1MTUyNDJhMmRjYzA5Y2UzNjBkNDFkOWM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-06-23T23:27:54Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-06-29T19:32:24Z"}, "message": "core: optimize {option,result}::collect\n\nThe bug #11084 causes these collect functions to run about\ntwice as slow as they should because llvm is having trouble\noptimizing away the closure for some reason. This patch works\naround that performance bug by using a simple adapter iterator\nexplicitly for capturing if the outer iterator returns an\nerror.", "tree": {"sha": "f4bab1a0c84e691a800be3d8e9cbb7c7cb197714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4bab1a0c84e691a800be3d8e9cbb7c7cb197714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab1bd3adf673ef7a515242a2dcc09ce360d41d9c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1bd3adf673ef7a515242a2dcc09ce360d41d9c", "html_url": "https://github.com/rust-lang/rust/commit/ab1bd3adf673ef7a515242a2dcc09ce360d41d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab1bd3adf673ef7a515242a2dcc09ce360d41d9c/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea9991921d2969517e445230997b8771d84bdb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea9991921d2969517e445230997b8771d84bdb4", "html_url": "https://github.com/rust-lang/rust/commit/1ea9991921d2969517e445230997b8771d84bdb4"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "8fb10fcca0c465c02db1e75e696d1f949361de43", "filename": "src/libcore/option.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ab1bd3adf673ef7a515242a2dcc09ce360d41d9c/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1bd3adf673ef7a515242a2dcc09ce360d41d9c/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ab1bd3adf673ef7a515242a2dcc09ce360d41d9c", "patch": "@@ -587,20 +587,32 @@ impl<A> ExactSize<A> for Item<A> {}\n /// ```\n #[inline]\n pub fn collect<T, Iter: Iterator<Option<T>>, V: FromIterator<T>>(iter: Iter) -> Option<V> {\n-    // FIXME(#11084): This should be twice as fast once this bug is closed.\n-    let mut iter = iter.scan(false, |state, x| {\n-        match x {\n-            Some(x) => Some(x),\n-            None => {\n-                *state = true;\n-                None\n+    // FIXME(#11084): This could be replaced with Iterator::scan when this\n+    // performance bug is closed.\n+\n+    struct Adapter<Iter> {\n+        iter: Iter,\n+        found_none: bool,\n+    }\n+\n+    impl<T, Iter: Iterator<Option<T>>> Iterator<T> for Adapter<Iter> {\n+        #[inline]\n+        fn next(&mut self) -> Option<T> {\n+            match self.iter.next() {\n+                Some(Some(value)) => Some(value),\n+                Some(None) => {\n+                    self.found_none = true;\n+                    None\n+                }\n+                None => None,\n             }\n         }\n-    });\n+    }\n \n-    let v: V = FromIterator::from_iter(iter.by_ref());\n+    let mut adapter = Adapter { iter: iter, found_none: false };\n+    let v: V = FromIterator::from_iter(adapter.by_ref());\n \n-    if iter.state {\n+    if adapter.found_none {\n         None\n     } else {\n         Some(v)"}, {"sha": "8cd56713ffbb3c2033a9e7c33c9f7b1f10725562", "filename": "src/libcore/result.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ab1bd3adf673ef7a515242a2dcc09ce360d41d9c/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1bd3adf673ef7a515242a2dcc09ce360d41d9c/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=ab1bd3adf673ef7a515242a2dcc09ce360d41d9c", "patch": "@@ -585,20 +585,32 @@ impl<T: Show, E> Result<T, E> {\n /// ```\n #[inline]\n pub fn collect<T, E, Iter: Iterator<Result<T, E>>, V: FromIterator<T>>(iter: Iter) -> Result<V, E> {\n-    // FIXME(#11084): This should be twice as fast once this bug is closed.\n-    let mut iter = iter.scan(None, |state, x| {\n-        match x {\n-            Ok(x) => Some(x),\n-            Err(err) => {\n-                *state = Some(err);\n-                None\n+    // FIXME(#11084): This could be replaced with Iterator::scan when this\n+    // performance bug is closed.\n+\n+    struct Adapter<Iter, E> {\n+        iter: Iter,\n+        err: Option<E>,\n+    }\n+\n+    impl<T, E, Iter: Iterator<Result<T, E>>> Iterator<T> for Adapter<Iter, E> {\n+        #[inline]\n+        fn next(&mut self) -> Option<T> {\n+            match self.iter.next() {\n+                Some(Ok(value)) => Some(value),\n+                Some(Err(err)) => {\n+                    self.err = Some(err);\n+                    None\n+                }\n+                None => None,\n             }\n         }\n-    });\n+    }\n \n-    let v: V = FromIterator::from_iter(iter.by_ref());\n+    let mut adapter = Adapter { iter: iter, err: None };\n+    let v: V = FromIterator::from_iter(adapter.by_ref());\n \n-    match iter.state {\n+    match adapter.err {\n         Some(err) => Err(err),\n         None => Ok(v),\n     }"}]}