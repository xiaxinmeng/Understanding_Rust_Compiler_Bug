{"sha": "e8fa74ae45024d1120a73c15a3c21f675b25f1f4", "node_id": "C_kwDOAAsO6NoAKGU4ZmE3NGFlNDUwMjRkMTEyMGE3M2MxNWEzYzIxZjY3NWIyNWYxZjQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-31T05:12:40Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:45Z"}, "message": "Check that impl types actually satisfy RPITIT bounds", "tree": {"sha": "cfb11ecd598bcdcc739b52710de455839f144fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb11ecd598bcdcc739b52710de455839f144fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8fa74ae45024d1120a73c15a3c21f675b25f1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8fa74ae45024d1120a73c15a3c21f675b25f1f4", "html_url": "https://github.com/rust-lang/rust/commit/e8fa74ae45024d1120a73c15a3c21f675b25f1f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8fa74ae45024d1120a73c15a3c21f675b25f1f4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d1807d6d19a446f2f620773d42b5de2dbed757", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d1807d6d19a446f2f620773d42b5de2dbed757", "html_url": "https://github.com/rust-lang/rust/commit/a4d1807d6d19a446f2f620773d42b5de2dbed757"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "e55f43994b9f32cac7bbc894ef98ce8b2fec292e", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8fa74ae45024d1120a73c15a3c21f675b25f1f4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fa74ae45024d1120a73c15a3c21f675b25f1f4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=e8fa74ae45024d1120a73c15a3c21f675b25f1f4", "patch": "@@ -391,6 +391,30 @@ fn compare_predicate_entailment<'tcx>(\n             return Err(diag.emit());\n         }\n \n+        // Check that an impl's fn return satisfies the bounds of the\n+        // FIXME(RPITIT): Generalize this to nested impl traits\n+        if let ty::Projection(proj) = tcx.fn_sig(trait_m.def_id).skip_binder().output().kind()\n+            && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+        {\n+            let return_span = tcx.hir().fn_decl_by_hir_id(impl_m_hir_id).unwrap().output.span();\n+\n+            for (predicate, span) in tcx\n+                .bound_explicit_item_bounds(proj.item_def_id)\n+                .transpose_iter()\n+                .map(|pred| pred.map_bound(|pred| *pred).subst(tcx, trait_to_placeholder_substs))\n+            {\n+                ocx.register_obligation(traits::Obligation::new(\n+                    traits::ObligationCause::new(\n+                        return_span,\n+                        impl_m_hir_id,\n+                        ObligationCauseCode::BindingObligation(proj.item_def_id, span),\n+                    ),\n+                    param_env,\n+                    predicate,\n+                ));\n+            }\n+        }\n+\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors = ocx.select_all_or_error();"}]}