{"sha": "ca3b4330f1c033033ea876a1074168071239f81d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhM2I0MzMwZjFjMDMzMDMzZWE4NzZhMTA3NDE2ODA3MTIzOWY4MWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-12T09:49:57Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-12T09:49:57Z"}, "message": "Use snippet, pprust methods expand AST", "tree": {"sha": "e9650b6a17d312288084308ee8fa72d32af1bccc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9650b6a17d312288084308ee8fa72d32af1bccc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca3b4330f1c033033ea876a1074168071239f81d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3b4330f1c033033ea876a1074168071239f81d", "html_url": "https://github.com/rust-lang/rust/commit/ca3b4330f1c033033ea876a1074168071239f81d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca3b4330f1c033033ea876a1074168071239f81d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0481d04d6f4c69838f0e81b5eb4880dc8fc17e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0481d04d6f4c69838f0e81b5eb4880dc8fc17e2e", "html_url": "https://github.com/rust-lang/rust/commit/0481d04d6f4c69838f0e81b5eb4880dc8fc17e2e"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "0350db8163ae036189dd1a85e6b3e4f8e566fc92", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca3b4330f1c033033ea876a1074168071239f81d/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3b4330f1c033033ea876a1074168071239f81d/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=ca3b4330f1c033033ea876a1074168071239f81d", "patch": "@@ -18,8 +18,7 @@ use rustc::middle::def::*;\n use syntax::ast::*;\n use syntax::ptr::P;\n use syntax::codemap::{Span, Spanned, ExpnInfo};\n-use syntax::print::pprust::{block_to_string, expr_to_string};\n-use utils::{in_macro, span_help_and_lint};\n+use utils::{in_macro, span_help_and_lint, snippet};\n \n declare_lint! {\n     pub COLLAPSIBLE_IF,\n@@ -50,8 +49,8 @@ fn check_expr_expd(cx: &Context, e: &Expr, info: Option<&ExpnInfo>) {\n                 span_help_and_lint(cx, COLLAPSIBLE_IF, e.span,\n                     \"this if statement can be collapsed\",\n                     &format!(\"try\\nif {} && {} {}\",\n-                             check_to_string(check), check_to_string(check_inner),\n-                             block_to_string(&*content)));\n+                             check_to_string(cx, check), check_to_string(cx, check_inner),\n+                             snippet(cx, content.span, \"..\")));\n             }\n     }\n }\n@@ -63,11 +62,11 @@ fn requires_brackets(e: &Expr) -> bool {\n     }\n }\n \n-fn check_to_string(e: &Expr) -> String {\n+fn check_to_string(cx: &Context, e: &Expr) -> String {\n     if requires_brackets(e) {\n-        format!(\"({})\", expr_to_string(e))\n+        format!(\"({})\", snippet(cx, e.span, \"..\"))\n     } else {\n-        format!(\"{}\", expr_to_string(e))\n+        format!(\"{}\", snippet(cx, e.span, \"..\"))\n     }\n }\n "}]}