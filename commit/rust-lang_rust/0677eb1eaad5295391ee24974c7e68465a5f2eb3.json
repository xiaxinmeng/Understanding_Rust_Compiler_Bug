{"sha": "0677eb1eaad5295391ee24974c7e68465a5f2eb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NzdlYjFlYWFkNTI5NTM5MWVlMjQ5NzRjN2U2ODQ2NWE1ZjJlYjM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-26T08:05:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-26T08:05:52Z"}, "message": "Rollup merge of #59410 - tbu-:pr_doc_clarifyclamp, r=joshtriplett\n\nClarify `{Ord,f32,f64}::clamp` docs a little\n\nExplicitly call out when it returns NaN, adhere to the panic doc\nguidelines.", "tree": {"sha": "4a36a21ee1554f466a29bef9a594ca1241b78701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a36a21ee1554f466a29bef9a594ca1241b78701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0677eb1eaad5295391ee24974c7e68465a5f2eb3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcmd1gCRBK7hj4Ov3rIwAAdHIIAIiGJHUkbu0dn4knsHPka63D\ngZ7LVjrSNEP6/WS1Mne+wf6F+vf3eCEurse9J4bNj8IBMvOtyc/0koszn3srvYsq\nXKpINXWEG00OKdTmME5C+11NKo75Ap6aUE6IKuZXMDI3gxgWGtrl4gos9KJFZKNB\nY1CFELJMqzcKeuVVWL6P+ykWygermG5YGGznn5OGgQj+mMzmwWF/6y40gsse1MZy\nUDj0LE3/yFm1hEiIwgvtX6jyNixogpxI9fciYKp4O0ot0cwFv8/kM9uoZmu0cWse\n5vnj5dojCbedvi89EwdcmmTQOhHW+tVE02Cq7izC9CUE/lZWl5aZZopv1YA80/k=\n=eOW/\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a36a21ee1554f466a29bef9a594ca1241b78701\nparent 95e7a5016607b5e566aa9394e66ec6acad135e33\nparent 0bb36a2f90358c5eb647655e9a891d26f9499bec\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553587552 +0100\ncommitter GitHub <noreply@github.com> 1553587552 +0100\n\nRollup merge of #59410 - tbu-:pr_doc_clarifyclamp, r=joshtriplett\n\nClarify `{Ord,f32,f64}::clamp` docs a little\n\nExplicitly call out when it returns NaN, adhere to the panic doc\nguidelines.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0677eb1eaad5295391ee24974c7e68465a5f2eb3", "html_url": "https://github.com/rust-lang/rust/commit/0677eb1eaad5295391ee24974c7e68465a5f2eb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0677eb1eaad5295391ee24974c7e68465a5f2eb3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e7a5016607b5e566aa9394e66ec6acad135e33", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e7a5016607b5e566aa9394e66ec6acad135e33", "html_url": "https://github.com/rust-lang/rust/commit/95e7a5016607b5e566aa9394e66ec6acad135e33"}, {"sha": "0bb36a2f90358c5eb647655e9a891d26f9499bec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb36a2f90358c5eb647655e9a891d26f9499bec", "html_url": "https://github.com/rust-lang/rust/commit/0bb36a2f90358c5eb647655e9a891d26f9499bec"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "807b35e1af10b1e35350751408a83516dee349f1", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0677eb1eaad5295391ee24974c7e68465a5f2eb3/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0677eb1eaad5295391ee24974c7e68465a5f2eb3/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=0677eb1eaad5295391ee24974c7e68465a5f2eb3", "patch": "@@ -568,8 +568,14 @@ pub trait Ord: Eq + PartialOrd<Self> {\n         if self <= other { self } else { other }\n     }\n \n-    /// Returns max if self is greater than max, and min if self is less than min.\n-    /// Otherwise this will return self.  Panics if min > max.\n+    /// Restrict a value to a certain interval.\n+    ///\n+    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n+    /// less than `min`. Otherwise this returns `self`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `min > max`.\n     ///\n     /// # Examples\n     ///\n@@ -586,8 +592,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n         assert!(min <= max);\n         if self < min {\n             min\n-        }\n-        else if self > max {\n+        } else if self > max {\n             max\n         } else {\n             self"}, {"sha": "796908b0df943cd6526668bca1eae3e29557e26f", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0677eb1eaad5295391ee24974c7e68465a5f2eb3/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0677eb1eaad5295391ee24974c7e68465a5f2eb3/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=0677eb1eaad5295391ee24974c7e68465a5f2eb3", "patch": "@@ -960,17 +960,27 @@ impl f32 {\n     pub fn atanh(self) -> f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n-    /// Returns max if self is greater than max, and min if self is less than min.\n-    /// Otherwise this returns self.  Panics if min > max, min equals NaN, or max equals NaN.\n+\n+    /// Restrict a value to a certain interval unless it is NaN.\n+    ///\n+    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n+    /// less than `min`. Otherwise this returns `self`.\n+    ///\n+    /// Not that this function returns NaN if the initial value was NaN as\n+    /// well.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `min > max`, `min` is NaN, or `max` is NaN.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(clamp)]\n-    /// assert!((-3.0f32).clamp(-2.0f32, 1.0f32) == -2.0f32);\n-    /// assert!((0.0f32).clamp(-2.0f32, 1.0f32) == 0.0f32);\n-    /// assert!((2.0f32).clamp(-2.0f32, 1.0f32) == 1.0f32);\n-    /// assert!((std::f32::NAN).clamp(-2.0f32, 1.0f32).is_nan());\n+    /// assert!((-3.0f32).clamp(-2.0, 1.0) == -2.0);\n+    /// assert!((0.0f32).clamp(-2.0, 1.0) == 0.0);\n+    /// assert!((2.0f32).clamp(-2.0, 1.0) == 1.0);\n+    /// assert!((std::f32::NAN).clamp(-2.0, 1.0).is_nan());\n     /// ```\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     #[inline]"}, {"sha": "e679a7d2e8c0455591527b5f5fcb478bd1dd74eb", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0677eb1eaad5295391ee24974c7e68465a5f2eb3/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0677eb1eaad5295391ee24974c7e68465a5f2eb3/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=0677eb1eaad5295391ee24974c7e68465a5f2eb3", "patch": "@@ -882,17 +882,26 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n-    /// Returns max if self is greater than max, and min if self is less than min.\n-    /// Otherwise this returns self.  Panics if min > max, min equals NaN, or max equals NaN.\n+    /// Restrict a value to a certain interval unless it is NaN.\n+    ///\n+    /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n+    /// less than `min`. Otherwise this returns `self`.\n+    ///\n+    /// Not that this function returns NaN if the initial value was NaN as\n+    /// well.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `min > max`, `min` is NaN, or `max` is NaN.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(clamp)]\n-    /// assert!((-3.0f64).clamp(-2.0f64, 1.0f64) == -2.0f64);\n-    /// assert!((0.0f64).clamp(-2.0f64, 1.0f64) == 0.0f64);\n-    /// assert!((2.0f64).clamp(-2.0f64, 1.0f64) == 1.0f64);\n-    /// assert!((std::f64::NAN).clamp(-2.0f64, 1.0f64).is_nan());\n+    /// assert!((-3.0f64).clamp(-2.0, 1.0) == -2.0);\n+    /// assert!((0.0f64).clamp(-2.0, 1.0) == 0.0);\n+    /// assert!((2.0f64).clamp(-2.0, 1.0) == 1.0);\n+    /// assert!((std::f64::NAN).clamp(-2.0, 1.0).is_nan());\n     /// ```\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     #[inline]"}]}