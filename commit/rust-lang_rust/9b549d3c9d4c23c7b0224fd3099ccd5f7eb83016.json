{"sha": "9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNTQ5ZDNjOWQ0YzIzYzdiMDIyNGZkMzA5OWNjZDVmN2ViODMwMTY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-19T19:49:34Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid cloning Place in gather_init", "tree": {"sha": "4d909475e75f2bedd625986f5a97f07aaa78ea67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d909475e75f2bedd625986f5a97f07aaa78ea67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016", "html_url": "https://github.com/rust-lang/rust/commit/9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77653e88bc552944cac2eca4a880b6ee8abc9a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77653e88bc552944cac2eca4a880b6ee8abc9a2", "html_url": "https://github.com/rust-lang/rust/commit/d77653e88bc552944cac2eca4a880b6ee8abc9a2"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "28518868e663fb1caff3f60d2b57616a3d74608c", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016", "patch": "@@ -274,9 +274,9 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                     // move-path for the interior so it will be separate from\n                     // the exterior.\n                     self.create_move_path(&place.clone().deref());\n-                    self.gather_init(place, InitKind::Shallow);\n+                    self.gather_init(place.as_place_ref(), InitKind::Shallow);\n                 } else {\n-                    self.gather_init(place, InitKind::Deep);\n+                    self.gather_init(place.as_place_ref(), InitKind::Deep);\n                 }\n                 self.gather_rvalue(rval);\n             }\n@@ -286,7 +286,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::InlineAsm(ref asm) => {\n                 for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n                     if !kind.is_indirect {\n-                        self.gather_init(output, InitKind::Deep);\n+                        self.gather_init(output.as_place_ref(), InitKind::Deep);\n                     }\n                 }\n                 for (_, input) in asm.inputs.iter() {\n@@ -376,7 +376,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             TerminatorKind::DropAndReplace { ref location, ref value, .. } => {\n                 self.create_move_path(location);\n                 self.gather_operand(value);\n-                self.gather_init(location, InitKind::Deep);\n+                self.gather_init(location.as_place_ref(), InitKind::Deep);\n             }\n             TerminatorKind::Call {\n                 ref func,\n@@ -391,7 +391,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 }\n                 if let Some((ref destination, _bb)) = *destination {\n                     self.create_move_path(destination);\n-                    self.gather_init(destination, InitKind::NonPanicPathOnly);\n+                    self.gather_init(destination.as_place_ref(), InitKind::NonPanicPathOnly);\n                 }\n             }\n         }\n@@ -426,35 +426,35 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n         self.builder.data.loc_map[self.loc].push(move_out);\n     }\n \n-    fn gather_init(&mut self, place: &Place<'tcx>, kind: InitKind) {\n+    fn gather_init(&mut self, place: PlaceRef<'cx, 'tcx>, kind: InitKind) {\n         debug!(\"gather_init({:?}, {:?})\", self.loc, place);\n \n         let place = match place.projection {\n             // Check if we are assigning into a field of a union, if so, lookup the place\n             // of the union so it is marked as initialized again.\n             Some(box Projection {\n-                base: ref proj_base,\n+                base: proj_base,\n                 elem: ProjectionElem::Field(_, _),\n             }) => {\n                 if let ty::Adt(def, _) =\n-                    Place::ty_from(&place.base, proj_base, self.builder.body, self.builder.tcx)\n+                    Place::ty_from(place.base, proj_base, self.builder.body, self.builder.tcx)\n                         .ty\n                         .sty\n                 {\n                     if def.is_union() {\n-                        Place { base: place.base.clone(), projection: proj_base.clone() }\n+                        PlaceRef { base: place.base, projection: proj_base }\n                     } else {\n-                        place.clone()\n+                        place\n                     }\n                 } else {\n-                    place.clone()\n+                    place\n                 }\n             }\n \n-            _ => place.clone()\n+            _ => place\n         };\n \n-        if let LookupResult::Exact(path) = self.builder.data.rev_lookup.find(place.as_place_ref()) {\n+        if let LookupResult::Exact(path) = self.builder.data.rev_lookup.find(place) {\n             let init = self.builder.data.inits.push(Init {\n                 location: InitLocation::Statement(self.loc),\n                 path,"}]}