{"sha": "c4c8c60279aa58616412289c0d832251b62d7ad3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YzhjNjAyNzlhYTU4NjE2NDEyMjg5YzBkODMyMjUxYjYyZDdhZDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-14T07:35:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-14T07:41:04Z"}, "message": "update README: 'cargo miri' with full MIR; consistent capitalization", "tree": {"sha": "3ed66a85117890806d2f03692a1a58e5cb5a1f3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ed66a85117890806d2f03692a1a58e5cb5a1f3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4c8c60279aa58616412289c0d832251b62d7ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c8c60279aa58616412289c0d832251b62d7ad3", "html_url": "https://github.com/rust-lang/rust/commit/c4c8c60279aa58616412289c0d832251b62d7ad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4c8c60279aa58616412289c0d832251b62d7ad3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "034bb25f548fff29d9caab6f0ebe232b9ba11278", "url": "https://api.github.com/repos/rust-lang/rust/commits/034bb25f548fff29d9caab6f0ebe232b9ba11278", "html_url": "https://github.com/rust-lang/rust/commit/034bb25f548fff29d9caab6f0ebe232b9ba11278"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "314e27de0aa23635f4d72836c23f429b069716ef", "filename": "README.md", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c4c8c60279aa58616412289c0d832251b62d7ad3/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c4c8c60279aa58616412289c0d832251b62d7ad3/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c4c8c60279aa58616412289c0d832251b62d7ad3", "patch": "@@ -7,41 +7,33 @@ undergraduate research course at the [University of Saskatchewan][usask].\n \n ## Building Miri\n \n-I recommend that you install [rustup][rustup] to obtain Rust.  miri comes with a\n+I recommend that you install [rustup][rustup] to obtain Rust.  Miri comes with a\n `rust-toolchain` file so rustup will automatically pick a suitable nightly\n version.  Then all you have to do is:\n \n ```sh\n cargo build\n ```\n \n-## Running tests\n+## Running Miri\n \n ```sh\n cargo run tests/run-pass/vecs.rs # Or whatever test you like.\n ```\n \n-## Running miri on your own project('s test suite)\n-\n-Install miri as a cargo subcommand with `cargo install --debug`.\n-Then, inside your own project, use `cargo +nightly miri` to run your project, if it is\n-a bin project, or run `cargo +nightly miri test` to run all tests in your project\n-through miri.\n-\n-## Running miri with full libstd\n+## Running Miri with full libstd\n \n Per default libstd does not contain the MIR of non-polymorphic functions. When\n-miri hits a call to such a function, execution terminates. To fix this, it is\n+Miri hits a call to such a function, execution terminates. To fix this, it is\n possible to compile libstd with full MIR:\n \n ```sh\n rustup component add rust-src\n cargo install xargo\n-cd xargo/\n-RUSTFLAGS='-Zalways-encode-mir' xargo build\n+xargo/build.sh\n ```\n \n-Now you can run miri against the libstd compiled by xargo:\n+Now you can run Miri against the libstd compiled by xargo:\n \n ```sh\n MIRI_SYSROOT=~/.xargo/HOST cargo run tests/run-pass-fullmir/hashmap.rs\n@@ -50,13 +42,23 @@ MIRI_SYSROOT=~/.xargo/HOST cargo run tests/run-pass-fullmir/hashmap.rs\n Notice that you will have to re-run the last step of the preparations above when\n your toolchain changes (e.g., when you update the nightly).\n \n-You can also set `-Zmiri-start-fn` to make miri start evaluation with the\n+You can also set `-Zmiri-start-fn` to make Miri start evaluation with the\n `start_fn` lang item, instead of starting at the `main` function.\n \n+## Running Miri on your own project('s test suite)\n+\n+Install Miri as a cargo subcommand with `cargo install --all-features`, and install\n+a full libstd as described above.\n+\n+Then, inside your own project, use `MIRI_SYSROOT=~/.xargo/HOST cargo +nightly\n+miri` to run your project, if it is a bin project, or run\n+`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri test` to run all tests in your\n+project through Miri.\n+\n ## Development and Debugging\n \n-Since the heart of miri (the main interpreter engine) lives in rustc, working on\n-miri will often require using a locally built rustc. This includes getting a\n+Since the heart of Miri (the main interpreter engine) lives in rustc, working on\n+Miri will often require using a locally built rustc. This includes getting a\n trace of the execution, as distributed rustc has `trace!` disabled.\n \n The first-time setup for a local rustc looks as follows:\n@@ -68,12 +70,12 @@ cp config.toml.example config.toml\n ./x.py build src/rustc\n # You may have to change the architecture in the next command\n rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2\n-# Now cd to your miri directory\n+# Now cd to your Miri directory\n rustup override set custom\n ```\n The `build` step can take 30 minutes and more.\n \n-Now you can `cargo build` miri, and you can `cargo test --tests`.  (`--tests`\n+Now you can `cargo build` Miri, and you can `cargo test --tests`.  (`--tests`\n is needed to skip doctests because we have not built rustdoc for your custom\n toolchain.) You can also set `RUST_LOG=rustc_mir::interpret=trace` as\n environment variable to get a step-by-step trace."}]}