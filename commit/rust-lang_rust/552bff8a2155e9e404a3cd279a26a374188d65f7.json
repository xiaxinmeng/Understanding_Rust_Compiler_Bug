{"sha": "552bff8a2155e9e404a3cd279a26a374188d65f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MmJmZjhhMjE1NWU5ZTQwNGEzY2QyNzlhMjZhMzc0MTg4ZDY1Zjc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-25T21:04:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-25T21:04:49Z"}, "message": "Adjust pp interface to that printing a crate (an reproducing literals/comments) takes a reader, not just a filename. Fixes first big pp-fuzzer bug.", "tree": {"sha": "a5c387e899308e080e940b3367bd87bd2ddd149c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5c387e899308e080e940b3367bd87bd2ddd149c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552bff8a2155e9e404a3cd279a26a374188d65f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552bff8a2155e9e404a3cd279a26a374188d65f7", "html_url": "https://github.com/rust-lang/rust/commit/552bff8a2155e9e404a3cd279a26a374188d65f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552bff8a2155e9e404a3cd279a26a374188d65f7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5749a2deac857e56b29ffb56b62dd383c3489eb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5749a2deac857e56b29ffb56b62dd383c3489eb3", "html_url": "https://github.com/rust-lang/rust/commit/5749a2deac857e56b29ffb56b62dd383c3489eb3"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "2891cd8f285c6d933817e51277220a2f1da06d93", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/552bff8a2155e9e404a3cd279a26a374188d65f7/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552bff8a2155e9e404a3cd279a26a374188d65f7/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=552bff8a2155e9e404a3cd279a26a374188d65f7", "patch": "@@ -217,8 +217,9 @@ fn pretty_print_input(session::session sess, ast::crate_cfg cfg,\n             ann = pprust::no_ann();\n         }\n     }\n-    pprust::print_crate(sess.get_codemap(), crate, input, ioivec::stdout(),\n-                        ann);\n+    pprust::print_crate(sess.get_codemap(), crate, input,\n+                        ioivec::file_reader(input),\n+                        ioivec::stdout(), ann);\n }\n \n fn version(str argv0) {"}, {"sha": "9f9c2a1f269d04e0e36c8b724964b7803eafed0f", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552bff8a2155e9e404a3cd279a26a374188d65f7/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552bff8a2155e9e404a3cd279a26a374188d65f7/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=552bff8a2155e9e404a3cd279a26a374188d65f7", "patch": "@@ -736,9 +736,9 @@ fn is_lit(&token::token t) -> bool {\n \n type lit = rec(str lit, uint pos);\n \n-fn gather_comments_and_literals(&codemap::codemap cm, str path)\n+fn gather_comments_and_literals(&codemap::codemap cm, str path,\n+                                ioivec::reader srdr)\n         -> rec(cmnt[] cmnts, lit[] lits) {\n-    auto srdr = ioivec::file_reader(path);\n     auto src = str::unsafe_from_bytes_ivec(srdr.read_whole_stream());\n     auto itr = @interner::mk[str](str::hash, str::eq);\n     auto rdr = new_reader(cm, src, codemap::new_filemap(path, 0u, 0u), itr);"}, {"sha": "1a9a69d149e4d7996e5a37d088d3b2d390f7c93f", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552bff8a2155e9e404a3cd279a26a374188d65f7/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552bff8a2155e9e404a3cd279a26a374188d65f7/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=552bff8a2155e9e404a3cd279a26a374188d65f7", "patch": "@@ -73,10 +73,14 @@ const uint alt_indent_unit = 2u;\n \n const uint default_columns = 78u;\n \n-fn print_crate(&codemap cm, @ast::crate crate, str filename,\n+// Requires you to pass an input filename and reader so that\n+// it can scan the input text for comments and literals to\n+// copy forward.\n+fn print_crate(&codemap cm, @ast::crate crate,\n+               str filename, ioivec::reader in,\n                ioivec::writer out, &pp_ann ann) {\n     let pp::breaks[] boxes = ~[];\n-    auto r = lexer::gather_comments_and_literals(cm, filename);\n+    auto r = lexer::gather_comments_and_literals(cm, filename, in);\n     auto s =\n         @rec(s=pp::mk_printer(out, default_columns),\n              cm=some(cm),"}, {"sha": "1245ffa7678ece4bf81f6e52c77f8541fc45a111", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/552bff8a2155e9e404a3cd279a26a374188d65f7/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552bff8a2155e9e404a3cd279a26a374188d65f7/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=552bff8a2155e9e404a3cd279a26a374188d65f7", "patch": "@@ -50,7 +50,8 @@ fn read_whole_file(&str filename) -> str {\n }\n \n fn write_file(&str filename, &str content) {\n-    ioivec::file_writer(filename, ~[ioivec::create]).write_str(content);\n+    ioivec::file_writer(filename, ~[ioivec::create,\n+                                    ioivec::truncate]).write_str(content);\n }\n \n fn file_contains(&str filename, &str needle) -> bool {\n@@ -149,6 +150,7 @@ fn devnull() -> ioivec::writer { std::ioivec::string_writer().get_writer() }\n \n fn as_str(fn (ioivec::writer) f) -> str { auto w = std::ioivec::string_writer(); f(w.get_writer()); w.get_str() }\n \n+/*\n fn pp_variants(&ast::crate crate, &codemap::codemap cmap, &str filename) {\n     auto exprs = steal_exprs(crate);\n     auto exprsL = ivec::len(exprs);\n@@ -163,26 +165,30 @@ fn pp_variants(&ast::crate crate, &codemap::codemap cmap, &str filename) {\n         }\n     }\n }\n+*/\n \n-fn check_roundtrip(@ast::crate crate2, &codemap::codemap cmap, &str filename) {\n-    auto str3 = as_str(bind pprust::print_crate(cmap, crate2, filename, _, pprust::no_ann()));\n+fn check_roundtrip(@ast::crate cr1, &codemap::codemap cm1, &str filename, &str str1) {\n+    auto str2 = as_str(bind pprust::print_crate(cm1, cr1, filename,\n+                                                ioivec::string_reader(str1), _,\n+                                                pprust::no_ann()));\n     if (true\n-      && !contains(str3, \"][]\") // https://github.com/graydon/rust/issues/669\n-      && !contains(str3, \"][mutable]\") // https://github.com/graydon/rust/issues/669\n-      && !contains(str3, \"][mutable ]\") // https://github.com/graydon/rust/issues/669\n-      && !contains(str3, \"self\") // crazy rules enforced by parser rather than typechecker?\n-      && !contains(str3, \"spawn\") // more precedence issues\n-      && !contains(str3, \"bind\") // more precedence issues?\n+      && !contains(str2, \"][]\") // https://github.com/graydon/rust/issues/669\n+      && !contains(str2, \"][mutable]\") // https://github.com/graydon/rust/issues/669\n+      && !contains(str2, \"][mutable ]\") // https://github.com/graydon/rust/issues/669\n+      && !contains(str2, \"self\") // crazy rules enforced by parser rather than typechecker?\n+      && !contains(str2, \"spawn\") // more precedence issues\n+      && !contains(str2, \"bind\") // more precedence issues?\n        ) {\n-        auto cm4 = codemap::new_codemap();\n-        auto crate4 = parser::parse_crate_from_source_str(filename, str3, ~[], cm4);\n+        auto cm2 = codemap::new_codemap();\n+        auto cr2 = parser::parse_crate_from_source_str(filename, str2, ~[], cm2);\n         // should compare crates at this point, but it's easier to compare strings\n-        auto str5 = as_str(bind pprust::print_crate(cm4, crate4, filename, _, pprust::no_ann()));\n+        auto str3 = as_str(bind pprust::print_crate(cm2, cr2, filename, ioivec::string_reader(str2),\n+                                                    _, pprust::no_ann()));\n         if (!str::is_ascii(str3)) {\n           log_err \"Non-ASCII in \" + filename; // why does non-ASCII work correctly with \"rustc --pretty normal\" but not here???\n-        } else if (str3 != str5) {\n-            write_file(\"round-trip-a.rs\", str3);\n-            write_file(\"round-trip-b.rs\", str5);\n+        } else if (str2 != str3) {\n+            write_file(\"round-trip-a.rs\", str2);\n+            write_file(\"round-trip-b.rs\", str3);\n             std::run::run_program(\"kdiff3\", [\"round-trip-a.rs\", \"round-trip-b.rs\"]);\n             fail \"Mismatch\";\n         }\n@@ -201,14 +207,14 @@ fn main(vec[str] args) {\n \n     for (str file in files) {\n         log_err \"=== \" + file + \" ===\";\n-        auto cm = codemap::new_codemap();\n-        auto src = read_whole_file(file);\n-        auto crate = parser::parse_crate_from_source_str(file, src, ~[], cm);\n-        if (!contains(src, \"#macro\") // https://github.com/graydon/rust/issues/671\n+        auto cm1 = codemap::new_codemap();\n+        auto str1 = read_whole_file(file);\n+        auto cr1 = parser::parse_crate_from_source_str(file, str1, ~[], cm1);\n+        if (!contains(str1, \"#macro\") // https://github.com/graydon/rust/issues/671\n          && !str::ends_with(file, \"block-expr-precedence.rs\") // https://github.com/graydon/rust/issues/674\n          && !str::ends_with(file, \"syntax-extension-fmt.rs\") // an issue where -2147483648 gains an extra negative sign each time through, which i can't reproduce using \"rustc --pretty normal\"???\n ) {\n-            check_roundtrip(crate, cm, file);\n+            check_roundtrip(cr1, cm1, file, str1);\n         }\n         //pprust::print_crate(cm, crate, file, devnull(), pprust::no_ann());\n         // Currently hits https://github.com/graydon/rust/issues/675"}]}