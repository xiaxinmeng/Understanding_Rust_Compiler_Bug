{"sha": "40746fa447b78a27b649db41a6bfe63f6645d5eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNzQ2ZmE0NDdiNzhhMjdiNjQ5ZGI0MWE2YmZlNjNmNjY0NWQ1ZWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-17T00:06:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-17T00:07:02Z"}, "message": "rustc: Implement conversions from interior vector data to unsafe pointers and vice-versa", "tree": {"sha": "c01cd7e7efdf0f29b30bbd75b48008c73fbd74cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c01cd7e7efdf0f29b30bbd75b48008c73fbd74cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40746fa447b78a27b649db41a6bfe63f6645d5eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40746fa447b78a27b649db41a6bfe63f6645d5eb", "html_url": "https://github.com/rust-lang/rust/commit/40746fa447b78a27b649db41a6bfe63f6645d5eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40746fa447b78a27b649db41a6bfe63f6645d5eb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e50c918e6b35c853813480b5c65c35813ceb6aa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e50c918e6b35c853813480b5c65c35813ceb6aa1", "html_url": "https://github.com/rust-lang/rust/commit/e50c918e6b35c853813480b5c65c35813ceb6aa1"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "a33c04977bbc577498ddc8da069af002cf2d6f8d", "filename": "src/lib/ivec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/40746fa447b78a27b649db41a6bfe63f6645d5eb/src%2Flib%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40746fa447b78a27b649db41a6bfe63f6645d5eb/src%2Flib%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fivec.rs?ref=40746fa447b78a27b649db41a6bfe63f6645d5eb", "patch": "@@ -12,6 +12,8 @@ native \"rust-intrinsic\" mod rusti {\n native \"rust\" mod rustrt {\n     fn ivec_reserve[T](&mutable T[] v, uint n);\n     fn ivec_on_heap[T](&T[] v) -> bool;\n+    fn ivec_to_ptr[T](&T[] v) -> *T;\n+    fn ivec_copy_from_buf[T](&mutable T[] v, *T ptr, uint count);\n }\n \n /// Reserves space for `n` elements in the given vector.\n@@ -23,3 +25,17 @@ fn on_heap[T](&T[] v) -> bool {\n     ret rustrt::ivec_on_heap(v);\n }\n \n+fn to_ptr[T](&T[] v) -> *T {\n+    ret rustrt::ivec_to_ptr(v);\n+}\n+\n+fn len[T](&T[] v) -> uint {\n+    ret rusti::ivec_len(v);\n+}\n+\n+mod unsafe {\n+    fn copy_from_buf[T](&mutable T[] v, *T ptr, uint count) {\n+        ret rustrt::ivec_copy_from_buf(v, ptr, count);\n+    }\n+}\n+"}, {"sha": "cc9b48cc01425e5f88353a2d286ca141a9efabc0", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/40746fa447b78a27b649db41a6bfe63f6645d5eb/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/40746fa447b78a27b649db41a6bfe63f6645d5eb/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=40746fa447b78a27b649db41a6bfe63f6645d5eb", "patch": "@@ -616,6 +616,43 @@ ivec_on_heap(rust_task *task, type_desc *ty, rust_ivec *v)\n     return !v->fill && v->payload.ptr;\n }\n \n+/**\n+ * Returns an unsafe pointer to the data part of an interior vector.\n+ */\n+extern \"C\" void *\n+ivec_to_ptr(rust_task *task, type_desc *ty, rust_ivec *v)\n+{\n+    return v->fill ? v->payload.data : v->payload.ptr->data;\n+}\n+\n+/**\n+ * Copies elements in an unsafe buffer to the given interior vector. The\n+ * vector must have size zero.\n+ */\n+extern \"C\" void\n+ivec_copy_from_buf(rust_task *task, type_desc *ty, rust_ivec *v, void *ptr,\n+                   size_t count)\n+{\n+    if (v->fill || (v->payload.ptr && v->payload.ptr->fill)) {\n+        task->fail(1);\n+        return;\n+    }\n+\n+    ivec_reserve(task, ty, v, count);\n+\n+    size_t new_size = count * ty->size;\n+    if (v->fill) {\n+        // On stack.\n+        memmove(v->payload.data, ptr, new_size);\n+        v->fill = new_size;\n+        return;\n+    }\n+\n+    // On heap.\n+    memmove(v->payload.ptr->data, ptr, new_size);\n+    v->payload.ptr->fill = new_size;\n+}\n+\n \n //\n // Local Variables:"}, {"sha": "3d0b73da5e58a8df0a1ecf80108ee7934faf1992", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40746fa447b78a27b649db41a6bfe63f6645d5eb/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/40746fa447b78a27b649db41a6bfe63f6645d5eb/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=40746fa447b78a27b649db41a6bfe63f6645d5eb", "patch": "@@ -9,8 +9,10 @@ debug_trap\n debug_tydesc\n do_gc\n get_time\n+ivec_copy_from_buf\n ivec_on_heap\n ivec_reserve\n+ivec_to_ptr\n last_os_error\n rand_free\n rand_new"}, {"sha": "15d1d9bbe5937b53132def93b58282eea414b30b", "filename": "src/test/run-pass/lib-ivec.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/40746fa447b78a27b649db41a6bfe63f6645d5eb/src%2Ftest%2Frun-pass%2Flib-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40746fa447b78a27b649db41a6bfe63f6645d5eb/src%2Ftest%2Frun-pass%2Flib-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-ivec.rs?ref=40746fa447b78a27b649db41a6bfe63f6645d5eb", "patch": "@@ -10,7 +10,32 @@ fn test_reserve_and_on_heap() {\n     assert (ivec::on_heap(v));\n }\n \n+fn test_unsafe_ptrs() {\n+    // Test on-stack copy-from-buf.\n+    auto a = ~[ 1, 2, 3 ];\n+    auto ptr = ivec::to_ptr(a);\n+    auto b = ~[];\n+    ivec::unsafe::copy_from_buf(b, ptr, 3u);\n+    assert (ivec::len(b) == 3u);\n+    assert (b.(0) == 1);\n+    assert (b.(1) == 2);\n+    assert (b.(2) == 3);\n+\n+    // Test on-heap copy-from-buf.\n+    auto c = ~[ 1, 2, 3, 4, 5 ];\n+    ptr = ivec::to_ptr(c);\n+    auto d = ~[];\n+    ivec::unsafe::copy_from_buf(d, ptr, 5u);\n+    assert (ivec::len(d) == 5u);\n+    assert (d.(0) == 1);\n+    assert (d.(1) == 2);\n+    assert (d.(2) == 3);\n+    assert (d.(3) == 4);\n+    assert (d.(4) == 5);\n+}\n+\n fn main() {\n     test_reserve_and_on_heap();\n+    test_unsafe_ptrs();\n }\n "}]}