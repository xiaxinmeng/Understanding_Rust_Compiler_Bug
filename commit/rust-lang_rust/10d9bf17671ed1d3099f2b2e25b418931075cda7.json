{"sha": "10d9bf17671ed1d3099f2b2e25b418931075cda7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZDliZjE3NjcxZWQxZDMwOTlmMmIyZTI1YjQxODkzMTA3NWNkYTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-02T00:51:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T16:06:58Z"}, "message": "Use note for requirement source span", "tree": {"sha": "7f4a56f12cc973afc2fbfb585ba11bd8856ac11e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f4a56f12cc973afc2fbfb585ba11bd8856ac11e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d9bf17671ed1d3099f2b2e25b418931075cda7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d9bf17671ed1d3099f2b2e25b418931075cda7", "html_url": "https://github.com/rust-lang/rust/commit/10d9bf17671ed1d3099f2b2e25b418931075cda7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d9bf17671ed1d3099f2b2e25b418931075cda7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31ea589a06e336a3d596e20e3a3f4327c8356aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/31ea589a06e336a3d596e20e3a3f4327c8356aa4", "html_url": "https://github.com/rust-lang/rust/commit/31ea589a06e336a3d596e20e3a3f4327c8356aa4"}], "stats": {"total": 120, "additions": 77, "deletions": 43}, "files": [{"sha": "74267a8dec059fe335ce5c6fb69a3bb1af996162", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=10d9bf17671ed1d3099f2b2e25b418931075cda7", "patch": "@@ -77,18 +77,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                                 sup_origin.span(),\n                                 \"...is captured here, requiring it to live as long as `'static`\",\n                             );\n-                        } else if sup_origin.span() <= return_sp {\n+                        } else {\n                             err.span_label(sup_origin.span(), \"...is captured here...\");\n-                            err.span_label(\n+                            err.span_note(\n                                 return_sp,\n                                 \"...and is required to live as long as `'static` here\",\n                             );\n-                        } else {\n-                            err.span_label(\n-                                return_sp,\n-                                \"...is required to live as long as `'static` here...\",\n-                            );\n-                            err.span_label(sup_origin.span(), \"...and is captured here\");\n                         }\n                     } else {\n                         err.span_label("}, {"sha": "ff7007dd30b1bcb2f0d93892157d2bd328b81495", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=10d9bf17671ed1d3099f2b2e25b418931075cda7", "patch": "@@ -6,8 +6,12 @@ LL |     pub async fn run_dummy_fn(&self) {\n    |                               |\n    |                               this data with an anonymous lifetime `'_`...\n    |                               ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/issue-62097.rs:13:9\n+   |\n LL |         foo(|| self.bar()).await;\n-   |         --- ...and is required to live as long as `'static` here\n+   |         ^^^\n \n error: aborting due to previous error\n "}, {"sha": "698464b4971a772d6cae8e1c765c26002c034352", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=10d9bf17671ed1d3099f2b2e25b418931075cda7", "patch": "@@ -2,11 +2,15 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |              ----     ---------   ^ ...and is captured here\n-   |              |        |\n-   |              |        ...is required to live as long as `'static` here...\n+   |              ----                 ^ ...is captured here...\n+   |              |\n    |              this data with an anonymous lifetime `'_`...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n+   |\n+LL | fn elided(x: &i32) -> impl Copy { x }\n+   |                       ^^^^^^^^^\n help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n@@ -16,11 +20,15 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |                    -------     ---------   ^ ...and is captured here\n-   |                    |           |\n-   |                    |           ...is required to live as long as `'static` here...\n+   |                    -------                 ^ ...is captured here...\n+   |                    |\n    |                    this data with lifetime `'a`...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n+   |\n+LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n+   |                                ^^^^^^^^^\n help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n@@ -30,11 +38,15 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n-   |               ----     -------------------   ^ ...and is captured here\n-   |               |        |\n-   |               |        ...is required to live as long as `'static` here...\n+   |               ----                           ^ ...is captured here...\n+   |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:24\n+   |\n+LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n+   |                        ^^^^^^^^^^^^^^^^^^^\n help: consider changing the `impl Trait`'s explicit `'static` bound to argument `x`\n    |\n LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n@@ -48,11 +60,15 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:12:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n-   |                     -------     -------------------   ^ ...and is captured here\n-   |                     |           |\n-   |                     |           ...is required to live as long as `'static` here...\n+   |                     -------                           ^ ...is captured here...\n+   |                     |\n    |                     this data with lifetime `'a`...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:12:33\n+   |\n+LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n+   |                                 ^^^^^^^^^^^^^^^^^^^\n help: consider changing the `impl Trait`'s explicit `'static` bound to argument `x`\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }\n@@ -74,11 +90,13 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:33:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |                      -------     --------------------------------   ^ ...and is captured here\n-   |                      |           |\n-   |                      |           ...is required to live as long as `'static` here...\n-   |                      this data with lifetime `'a`...\n+   |                      ------- this data with lifetime `'a`...        ^ ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:33:34\n    |\n+LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider changing the `impl Trait`'s explicit `'static` bound to argument `x`\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }"}, {"sha": "bcc46785c5918d8ced83cc8bebb2a7657916f991", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=10d9bf17671ed1d3099f2b2e25b418931075cda7", "patch": "@@ -2,14 +2,17 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:7:16\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         -----     ----------------------- ...is required to live as long as `'static` here...\n-   |                         |\n-   |                         this data with an anonymous lifetime `'_`...\n+   |                         ----- this data with an anonymous lifetime `'_`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n-   |         ...and is captured here\n+   |         ...is captured here...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n@@ -19,14 +22,17 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:11:16\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                        --------     ----------------------- ...is required to live as long as `'static` here...\n-   |                        |\n-   |                        this data with lifetime `'a`...\n+   |                        -------- this data with lifetime `'a`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n-   |         ...and is captured here\n+   |         ...is captured here...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/static-return-lifetime-infered.rs:10:37\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {"}, {"sha": "2ffbf6e08158e82256b0c36410ee2db5855db83e", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=10d9bf17671ed1d3099f2b2e25b418931075cda7", "patch": "@@ -2,10 +2,15 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ^^^^  ----------     ---------- ...and is required to live as long as `'static` here\n-   |                |     |\n-   |                |     this data with an anonymous lifetime `'_`...\n+   |                ^^^^  ---------- this data with an anonymous lifetime `'_`...\n+   |                |\n    |                ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:37\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                                     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2da7bcf543d66a6fcef08fd1183688f7d757c6f8", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=10d9bf17671ed1d3099f2b2e25b418931075cda7", "patch": "@@ -2,11 +2,15 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ----------     ----------   ^^^^ ...and is captured here\n-   |                |              |\n-   |                |              ...is required to live as long as `'static` here...\n+   |                ----------                  ^^^^ ...is captured here...\n+   |                |\n    |                this data with an anonymous lifetime `'_`...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:31\n+   |\n+LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                               ^^^^^^^^^^\n help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }"}, {"sha": "95d905af05089952b41f17852145bb46a196493a", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10d9bf17671ed1d3099f2b2e25b418931075cda7/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=10d9bf17671ed1d3099f2b2e25b418931075cda7", "patch": "@@ -10,15 +10,18 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                            ------     ------------- ...is required to live as long as `'static` here...\n-   |                            |\n-   |                            this data with an anonymous lifetime `'_`...\n+   |                            ------ this data with an anonymous lifetime `'_`...\n ...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n-   | |_____^ ...and is captured here\n+   | |_____^ ...is captured here...\n    |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/missing-lifetimes-in-signature.rs:15:37\n+   |\n+LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n+   |                                     ^^^^^^^^^^^^^\n help: to declare that the `impl Trait` captures data from argument `dest`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_"}]}