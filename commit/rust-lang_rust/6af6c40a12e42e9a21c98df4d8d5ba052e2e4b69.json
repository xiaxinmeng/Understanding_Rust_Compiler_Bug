{"sha": "6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZjZjNDBhMTJlNDJlOWEyMWM5OGRmNGQ4ZDViYTA1MmUyZTRiNjk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-19T09:27:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-19T09:27:54Z"}, "message": "Rollup merge of #81115 - ssomers:btree_drainy_refactor_4, r=Mark-Simulacrum\n\nBTreeMap: prefer bulk_steal functions over specialized ones\n\nThe `steal_` functions (apart from their return value) are basically specializations of the more general `bulk_steal_` functions. This PR removes the specializations. The library/alloc benchmarks say this is never slower and up to 6% faster.\n\nr? ``@Mark-Simulacrum``", "tree": {"sha": "0d822bb0a8de7dd4c3e9a93fdb018d2454faad94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d822bb0a8de7dd4c3e9a93fdb018d2454faad94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgBqYbCRBK7hj4Ov3rIwAAdHIIAKtsuJdZeGajM0ckmM0B8NlO\nVqAJrToJierqn2GNeIuZjeRvphtBvOJl18E2OMc6Lz6O8YnDV2K9TKxfL8tYhfyz\n7OT1zMUPqnLL3YUI5shHFZFlkjLDVMSI7Vwk1rSDquIIudZmoCtINvF80xm8igyg\nzRtc43Ytt7rq+Hl0e8Nz6FYbfy4N3brSfHc3CaF/NazQboAWKbAAgwEkBDEx57Ah\nN5mPXKlMnKKLhX+V2jki2D9cIC8uIFjSpVBF6b77Wzr871g/NQ0zZeWjLH444vz9\nsB+wmC1WOpR0CybIMDd4AhLaQ30+lSidwB115r/5s5WjVKCPhsUS0SsUL9/zX/Y=\n=6oam\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d822bb0a8de7dd4c3e9a93fdb018d2454faad94\nparent de02bf399e477c3fbc447767a565d83df829a0c3\nparent 4775334f362b9e196738b0ccd2349ddd03de4007\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1611048474 +0100\ncommitter GitHub <noreply@github.com> 1611048474 +0100\n\nRollup merge of #81115 - ssomers:btree_drainy_refactor_4, r=Mark-Simulacrum\n\nBTreeMap: prefer bulk_steal functions over specialized ones\n\nThe `steal_` functions (apart from their return value) are basically specializations of the more general `bulk_steal_` functions. This PR removes the specializations. The library/alloc benchmarks say this is never slower and up to 6% faster.\n\nr? ``@Mark-Simulacrum``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69", "html_url": "https://github.com/rust-lang/rust/commit/6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de02bf399e477c3fbc447767a565d83df829a0c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/de02bf399e477c3fbc447767a565d83df829a0c3", "html_url": "https://github.com/rust-lang/rust/commit/de02bf399e477c3fbc447767a565d83df829a0c3"}, {"sha": "4775334f362b9e196738b0ccd2349ddd03de4007", "url": "https://api.github.com/repos/rust-lang/rust/commits/4775334f362b9e196738b0ccd2349ddd03de4007", "html_url": "https://github.com/rust-lang/rust/commit/4775334f362b9e196738b0ccd2349ddd03de4007"}], "stats": {"total": 129, "additions": 8, "deletions": 121}, "files": [{"sha": "8ab3f58c1adba0395e75d1dcaf4159e6630f4cb4", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 117, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69", "patch": "@@ -592,17 +592,6 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n             self.val_area_mut(idx).write(val);\n         }\n     }\n-\n-    /// Adds a key-value pair to the beginning of the node.\n-    fn push_front(&mut self, key: K, val: V) {\n-        let new_len = self.len() + 1;\n-        assert!(new_len <= CAPACITY);\n-        unsafe {\n-            slice_insert(self.key_area_mut(..new_len), 0, key);\n-            slice_insert(self.val_area_mut(..new_len), 0, val);\n-            *self.len_mut() = new_len as u16;\n-        }\n-    }\n }\n \n impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n@@ -638,88 +627,6 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n             Handle::new_edge(self.reborrow_mut(), idx + 1).correct_parent_link();\n         }\n     }\n-\n-    /// Adds a key-value pair, and an edge to go to the left of that pair,\n-    /// to the beginning of the node.\n-    fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) {\n-        let new_len = self.len() + 1;\n-        assert!(edge.height == self.height - 1);\n-        assert!(new_len <= CAPACITY);\n-\n-        unsafe {\n-            slice_insert(self.key_area_mut(..new_len), 0, key);\n-            slice_insert(self.val_area_mut(..new_len), 0, val);\n-            slice_insert(self.edge_area_mut(..new_len + 1), 0, edge.node);\n-            *self.len_mut() = new_len as u16;\n-        }\n-\n-        self.correct_all_childrens_parent_links();\n-    }\n-}\n-\n-impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Removes a key-value pair from the end of the node and returns the pair.\n-    /// Also removes the edge that was to the right of that pair and, if the node\n-    /// is internal, returns the orphaned subtree that this edge owned.\n-    ///\n-    /// # Safety\n-    /// The node must not be empty.\n-    unsafe fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n-        debug_assert!(self.len() > 0);\n-\n-        let idx = self.len() - 1;\n-\n-        unsafe {\n-            let key = self.key_area_mut(idx).assume_init_read();\n-            let val = self.val_area_mut(idx).assume_init_read();\n-            let edge = match self.reborrow_mut().force() {\n-                ForceResult::Leaf(_) => None,\n-                ForceResult::Internal(mut internal) => {\n-                    let node = internal.edge_area_mut(idx + 1).assume_init_read();\n-                    let mut edge = Root { node, height: internal.height - 1, _marker: PhantomData };\n-                    // Currently, clearing the parent link is superfluous, because we will\n-                    // insert the node elsewhere and set its parent link again.\n-                    edge.clear_parent_link();\n-                    Some(edge)\n-                }\n-            };\n-\n-            *self.len_mut() -= 1;\n-            (key, val, edge)\n-        }\n-    }\n-\n-    /// Removes a key-value pair from the beginning of the node and returns the pair.\n-    /// Also removes the edge that was to the left of that pair and, if the node is\n-    /// internal, returns the orphaned subtree that this edge owned.\n-    fn pop_front(&mut self) -> (K, V, Option<Root<K, V>>) {\n-        debug_assert!(self.len() > 0);\n-\n-        let old_len = self.len();\n-\n-        unsafe {\n-            let key = slice_remove(self.key_area_mut(..old_len), 0);\n-            let val = slice_remove(self.val_area_mut(..old_len), 0);\n-            let edge = match self.reborrow_mut().force() {\n-                ForceResult::Leaf(_) => None,\n-                ForceResult::Internal(mut internal) => {\n-                    let node = slice_remove(internal.edge_area_mut(..old_len + 1), 0);\n-                    let mut edge = Root { node, height: internal.height - 1, _marker: PhantomData };\n-                    // Currently, clearing the parent link is superfluous, because we will\n-                    // insert the node elsewhere and set its parent link again.\n-                    edge.clear_parent_link();\n-\n-                    internal.correct_childrens_parent_links(0..old_len);\n-\n-                    Some(edge)\n-                }\n-            };\n-\n-            *self.len_mut() -= 1;\n-\n-            (key, val, edge)\n-        }\n-    }\n }\n \n impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n@@ -1399,18 +1306,8 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n         mut self,\n         track_right_edge_idx: usize,\n     ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {\n-        unsafe {\n-            let (k, v, edge) = self.left_child.pop();\n-\n-            let (k, v) = self.parent.replace_kv(k, v);\n-\n-            match self.right_child.reborrow_mut().force() {\n-                ForceResult::Leaf(mut leaf) => leaf.push_front(k, v),\n-                ForceResult::Internal(mut internal) => internal.push_front(k, v, edge.unwrap()),\n-            }\n-\n-            Handle::new_edge(self.right_child, 1 + track_right_edge_idx)\n-        }\n+        self.bulk_steal_left(1);\n+        unsafe { Handle::new_edge(self.right_child, 1 + track_right_edge_idx) }\n     }\n \n     /// Removes a key-value pair from the right child and places it in the key-value storage\n@@ -1421,18 +1318,8 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n         mut self,\n         track_left_edge_idx: usize,\n     ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {\n-        unsafe {\n-            let (k, v, edge) = self.right_child.pop_front();\n-\n-            let (k, v) = self.parent.replace_kv(k, v);\n-\n-            match self.left_child.reborrow_mut().force() {\n-                ForceResult::Leaf(mut leaf) => leaf.push(k, v),\n-                ForceResult::Internal(mut internal) => internal.push(k, v, edge.unwrap()),\n-            }\n-\n-            Handle::new_edge(self.left_child, track_left_edge_idx)\n-        }\n+        self.bulk_steal_right(1);\n+        unsafe { Handle::new_edge(self.left_child, track_left_edge_idx) }\n     }\n \n     /// This does stealing similar to `steal_left` but steals multiple elements at once."}, {"sha": "ff842197d19182782ae95c847e1d042abdd80061", "filename": "library/alloc/src/collections/btree/remove.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs?ref=6af6c40a12e42e9a21c98df4d8d5ba052e2e4b69", "patch": "@@ -121,25 +121,25 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n         self,\n     ) -> Option<NodeRef<marker::Mut<'a>, K, V, marker::Internal>> {\n         match self.forget_type().choose_parent_kv() {\n-            Ok(Left(left_parent_kv)) => {\n+            Ok(Left(mut left_parent_kv)) => {\n                 debug_assert_eq!(left_parent_kv.right_child_len(), MIN_LEN - 1);\n                 if left_parent_kv.can_merge() {\n                     let parent = left_parent_kv.merge_tracking_parent();\n                     Some(parent)\n                 } else {\n                     debug_assert!(left_parent_kv.left_child_len() > MIN_LEN);\n-                    left_parent_kv.steal_left(0);\n+                    left_parent_kv.bulk_steal_left(1);\n                     None\n                 }\n             }\n-            Ok(Right(right_parent_kv)) => {\n+            Ok(Right(mut right_parent_kv)) => {\n                 debug_assert_eq!(right_parent_kv.left_child_len(), MIN_LEN - 1);\n                 if right_parent_kv.can_merge() {\n                     let parent = right_parent_kv.merge_tracking_parent();\n                     Some(parent)\n                 } else {\n                     debug_assert!(right_parent_kv.right_child_len() > MIN_LEN);\n-                    right_parent_kv.steal_right(0);\n+                    right_parent_kv.bulk_steal_right(1);\n                     None\n                 }\n             }"}]}