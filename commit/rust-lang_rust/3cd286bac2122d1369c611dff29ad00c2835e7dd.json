{"sha": "3cd286bac2122d1369c611dff29ad00c2835e7dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZDI4NmJhYzIxMjJkMTM2OWM2MTFkZmYyOWFkMDBjMjgzNWU3ZGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-02-20T09:57:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-02-21T16:32:17Z"}, "message": "s/skol_/placeholder_/", "tree": {"sha": "7b7a59d2a42537909c0c24506e763bfc2bb5ded1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7a59d2a42537909c0c24506e763bfc2bb5ded1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cd286bac2122d1369c611dff29ad00c2835e7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd286bac2122d1369c611dff29ad00c2835e7dd", "html_url": "https://github.com/rust-lang/rust/commit/3cd286bac2122d1369c611dff29ad00c2835e7dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cd286bac2122d1369c611dff29ad00c2835e7dd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e25a6829c66302dc06c351bb494774e3d075f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e25a6829c66302dc06c351bb494774e3d075f77", "html_url": "https://github.com/rust-lang/rust/commit/0e25a6829c66302dc06c351bb494774e3d075f77"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "34deb9ccdcabc7035e8fe4c660807714339973f6", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3cd286bac2122d1369c611dff29ad00c2835e7dd/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd286bac2122d1369c611dff29ad00c2835e7dd/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3cd286bac2122d1369c611dff29ad00c2835e7dd", "patch": "@@ -1682,23 +1682,23 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     ) -> bool {\n         let poly_trait_predicate = self.infcx()\n             .resolve_type_vars_if_possible(&obligation.predicate);\n-        let (skol_trait_predicate, _) = self.infcx()\n+        let (placeholder_trait_predicate, _) = self.infcx()\n             .replace_bound_vars_with_placeholders(&poly_trait_predicate);\n         debug!(\n             \"match_projection_obligation_against_definition_bounds: \\\n-             skol_trait_predicate={:?}\",\n-            skol_trait_predicate,\n+             placeholder_trait_predicate={:?}\",\n+            placeholder_trait_predicate,\n         );\n \n-        let (def_id, substs) = match skol_trait_predicate.trait_ref.self_ty().sty {\n+        let (def_id, substs) = match placeholder_trait_predicate.trait_ref.self_ty().sty {\n             ty::Projection(ref data) => (data.trait_ref(self.tcx()).def_id, data.substs),\n             ty::Opaque(def_id, substs) => (def_id, substs),\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,\n                     \"match_projection_obligation_against_definition_bounds() called \\\n                      but self-ty is not a projection: {:?}\",\n-                    skol_trait_predicate.trait_ref.self_ty()\n+                    placeholder_trait_predicate.trait_ref.self_ty()\n                 );\n             }\n         };\n@@ -1723,7 +1723,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     self.match_projection(\n                         obligation,\n                         bound.clone(),\n-                        skol_trait_predicate.trait_ref.clone(),\n+                        placeholder_trait_predicate.trait_ref.clone(),\n                     )\n                 })\n             });\n@@ -1740,7 +1740,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 let result = self.match_projection(\n                     obligation,\n                     bound,\n-                    skol_trait_predicate.trait_ref.clone(),\n+                    placeholder_trait_predicate.trait_ref.clone(),\n                 );\n \n                 assert!(result);\n@@ -1753,12 +1753,12 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         trait_bound: ty::PolyTraitRef<'tcx>,\n-        skol_trait_ref: ty::TraitRef<'tcx>,\n+        placeholder_trait_ref: ty::TraitRef<'tcx>,\n     ) -> bool {\n-        debug_assert!(!skol_trait_ref.has_escaping_bound_vars());\n+        debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());\n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n-            .sup(ty::Binder::dummy(skol_trait_ref), trait_bound)\n+            .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)\n             .is_ok()\n     }\n "}]}