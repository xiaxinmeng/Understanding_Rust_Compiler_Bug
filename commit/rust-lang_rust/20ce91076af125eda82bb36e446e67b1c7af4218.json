{"sha": "20ce91076af125eda82bb36e446e67b1c7af4218", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwY2U5MTA3NmFmMTI1ZWRhODJiYjM2ZTQ0NmU2N2IxYzdhZjQyMTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-23T18:41:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-23T18:53:24Z"}, "message": "hygiene: Merge `NameAndSpan` into `ExpnInfo`", "tree": {"sha": "db4017fc25d2a0d413f70ed1186b6d7dfd45be4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db4017fc25d2a0d413f70ed1186b6d7dfd45be4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ce91076af125eda82bb36e446e67b1c7af4218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ce91076af125eda82bb36e446e67b1c7af4218", "html_url": "https://github.com/rust-lang/rust/commit/20ce91076af125eda82bb36e446e67b1c7af4218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ce91076af125eda82bb36e446e67b1c7af4218/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117cb040f14719489a38ace1c256ec282f42c367", "url": "https://api.github.com/repos/rust-lang/rust/commits/117cb040f14719489a38ace1c256ec282f42c367", "html_url": "https://github.com/rust-lang/rust/commit/117cb040f14719489a38ace1c256ec282f42c367"}], "stats": {"total": 270, "additions": 116, "deletions": 154}, "files": [{"sha": "4f470e1c26b46176871db7dce29bc80b81ff5c94", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -612,13 +612,11 @@ impl<'a> LoweringContext<'a> {\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(codemap::ExpnInfo {\n             call_site: span,\n-            callee: codemap::NameAndSpan {\n-                format: codemap::CompilerDesugaring(reason),\n-                span: Some(span),\n-                allow_internal_unstable: true,\n-                allow_internal_unsafe: false,\n-                edition: codemap::hygiene::default_edition(),\n-            },\n+            def_site: Some(span),\n+            format: codemap::CompilerDesugaring(reason),\n+            allow_internal_unstable: true,\n+            allow_internal_unsafe: false,\n+            edition: codemap::hygiene::default_edition(),\n         });\n         span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n     }"}, {"sha": "935bc4c8c6d8c532e017942150cc4ad53fe38d56", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -391,15 +391,11 @@ impl_stable_hash_for!(enum ::syntax::ast::MetaItemKind {\n \n impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnInfo {\n     call_site,\n-    callee\n-});\n-\n-impl_stable_hash_for!(struct ::syntax_pos::hygiene::NameAndSpan {\n+    def_site,\n     format,\n     allow_internal_unstable,\n     allow_internal_unsafe,\n-    edition,\n-    span\n+    edition\n });\n \n impl_stable_hash_for!(enum ::syntax_pos::hygiene::ExpnFormat {"}, {"sha": "0d7d39ccf40dfcff2e069e7537c8d5472f5becba", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -366,9 +366,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         if let Some(k) = obligation.cause.span.compiler_desugaring_kind() {\n-            let desugaring = k.as_symbol().as_str();\n             flags.push((\"from_desugaring\".to_string(), None));\n-            flags.push((\"from_desugaring\".to_string(), Some(desugaring.to_string())));\n+            flags.push((\"from_desugaring\".to_string(), Some(k.name().to_string())));\n         }\n         let generics = self.tcx.generics_of(def_id);\n         let self_ty = trait_ref.self_ty();"}, {"sha": "a9530964bffa2ab0874e119ea2d15891dbec7010", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -15,7 +15,7 @@ use syntax::ast::{Arg, FnHeader, Generics, Mac, Mutability, Ty, Unsafety};\n use syntax::ast::{self, Expr, Ident, Item, ItemKind, TyKind, VisibilityKind};\n use syntax::attr;\n use syntax::codemap::respan;\n-use syntax::codemap::{ExpnInfo, MacroAttribute, NameAndSpan};\n+use syntax::codemap::{ExpnInfo, MacroAttribute};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::base::Resolver;\n use syntax::ext::build::AstBuilder;\n@@ -80,13 +80,11 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(ExpnInfo {\n             call_site: DUMMY_SP,\n-            callee: NameAndSpan {\n-                format: MacroAttribute(Symbol::intern(name)),\n-                span: None,\n-                allow_internal_unstable: true,\n-                allow_internal_unsafe: false,\n-                edition: hygiene::default_edition(),\n-            },\n+            def_site: None,\n+            format: MacroAttribute(Symbol::intern(name)),\n+            allow_internal_unstable: true,\n+            allow_internal_unsafe: false,\n+            edition: hygiene::default_edition(),\n         });\n         let span = item.span.with_ctxt(SyntaxContext::empty().apply_mark(mark));\n         let ecfg = ExpansionConfig::default(name.to_string());"}, {"sha": "deb91774175667d148bc7b79a7f48b1f1990c940", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -844,7 +844,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         let callsite = span.source_callsite();\n         let callsite_span = self.span_from_span(callsite);\n         let callee = span.source_callee()?;\n-        let callee_span = callee.span?;\n+        let callee_span = callee.def_site?;\n \n         // Ignore attribute macros, their spans are usually mangled\n         if let MacroAttribute(_) = callee.format {\n@@ -872,7 +872,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         let callee_span = self.span_from_span(callee_span);\n         Some(MacroRef {\n             span: callsite_span,\n-            qualname: callee.name().to_string(), // FIXME: generate the real qualname\n+            qualname: callee.format.name().to_string(), // FIXME: generate the real qualname\n             callee_span,\n         })\n     }"}, {"sha": "8e4b7660a1ccef89c20739d2134588f25e7852bb", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -19,7 +19,7 @@\n \n \n pub use syntax_pos::*;\n-pub use syntax_pos::hygiene::{ExpnFormat, ExpnInfo, NameAndSpan};\n+pub use syntax_pos::hygiene::{ExpnFormat, ExpnInfo};\n pub use self::ExpnFormat::*;\n \n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "16d786dd6cad2f76450618c0c917a80991d12e36", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -834,7 +834,7 @@ impl<'a> ExtCtxt<'a> {\n         let mut last_macro = None;\n         loop {\n             if ctxt.outer().expn_info().map_or(None, |info| {\n-                if info.callee.name() == \"include\" {\n+                if info.format.name() == \"include\" {\n                     // Stop going up the backtrace once include! is encountered\n                     return None;\n                 }"}, {"sha": "940fb6405f1b6065c170dfd7d7abc5ec9fdfd006", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -10,7 +10,7 @@\n \n use attr::HasAttrs;\n use ast;\n-use codemap::{hygiene, ExpnInfo, NameAndSpan, ExpnFormat};\n+use codemap::{hygiene, ExpnInfo, ExpnFormat};\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use parse::parser::PathStyle;\n@@ -60,13 +60,11 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt, span: Span, traits: &[ast::Path]\n \n     cx.current_expansion.mark.set_expn_info(ExpnInfo {\n         call_site: span,\n-        callee: NameAndSpan {\n-            format: ExpnFormat::MacroAttribute(Symbol::intern(&pretty_name)),\n-            span: None,\n-            allow_internal_unstable: true,\n-            allow_internal_unsafe: false,\n-            edition: hygiene::default_edition(),\n-        },\n+        def_site: None,\n+        format: ExpnFormat::MacroAttribute(Symbol::intern(&pretty_name)),\n+        allow_internal_unstable: true,\n+        allow_internal_unsafe: false,\n+        edition: hygiene::default_edition(),\n     });\n \n     let span = span.with_ctxt(cx.backtrace());"}, {"sha": "69c99c63aafe3e55692d41ec91785063c00879c4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 31, "deletions": 41, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -11,7 +11,7 @@\n use ast::{self, Block, Ident, NodeId, PatKind, Path};\n use ast::{MacStmtStyle, StmtKind, ItemKind};\n use attr::{self, HasAttrs};\n-use codemap::{ExpnInfo, NameAndSpan, MacroBang, MacroAttribute, dummy_spanned, respan};\n+use codemap::{ExpnInfo, MacroBang, MacroAttribute, dummy_spanned, respan};\n use config::{is_test_or_bench, StripUnconfigured};\n use errors::{Applicability, FatalError};\n use ext::base::*;\n@@ -514,7 +514,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n             let mut err = self.cx.struct_span_err(info.call_site,\n                 &format!(\"recursion limit reached while expanding the macro `{}`\",\n-                         info.callee.name()));\n+                         info.format.name()));\n             err.help(&format!(\n                 \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n                 suggested_limit));\n@@ -538,13 +538,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         attr::mark_used(&attr);\n         invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n             call_site: attr.span,\n-            callee: NameAndSpan {\n-                format: MacroAttribute(Symbol::intern(&format!(\"{}\", attr.path))),\n-                span: None,\n-                allow_internal_unstable: false,\n-                allow_internal_unsafe: false,\n-                edition: ext.edition(),\n-            }\n+            def_site: None,\n+            format: MacroAttribute(Symbol::intern(&format!(\"{}\", attr.path))),\n+            allow_internal_unstable: false,\n+            allow_internal_unsafe: false,\n+            edition: ext.edition(),\n         });\n \n         match *ext {\n@@ -727,13 +725,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n             mark.set_expn_info(ExpnInfo {\n                 call_site: span,\n-                callee: NameAndSpan {\n-                    format: macro_bang_format(path),\n-                    span: def_site_span,\n-                    allow_internal_unstable,\n-                    allow_internal_unsafe,\n-                    edition,\n-                },\n+                def_site: def_site_span,\n+                format: macro_bang_format(path),\n+                allow_internal_unstable,\n+                allow_internal_unsafe,\n+                edition,\n             });\n             Ok(())\n         };\n@@ -777,13 +773,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 } else {\n                     invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n                         call_site: span,\n-                        callee: NameAndSpan {\n-                            format: macro_bang_format(path),\n-                            span: tt_span,\n-                            allow_internal_unstable,\n-                            allow_internal_unsafe: false,\n-                            edition: hygiene::default_edition(),\n-                        }\n+                        def_site: tt_span,\n+                        format: macro_bang_format(path),\n+                        allow_internal_unstable,\n+                        allow_internal_unsafe: false,\n+                        edition: hygiene::default_edition(),\n                     });\n \n                     let input: Vec<_> = mac.node.stream().into_trees().collect();\n@@ -815,16 +809,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     self.gate_proc_macro_expansion_kind(span, kind);\n                     invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n                         call_site: span,\n-                        callee: NameAndSpan {\n-                            format: macro_bang_format(path),\n-                            // FIXME procedural macros do not have proper span info\n-                            // yet, when they do, we should use it here.\n-                            span: None,\n-                            // FIXME probably want to follow macro_rules macros here.\n-                            allow_internal_unstable,\n-                            allow_internal_unsafe: false,\n-                            edition,\n-                        },\n+                        // FIXME procedural macros do not have proper span info\n+                        // yet, when they do, we should use it here.\n+                        def_site: None,\n+                        format: macro_bang_format(path),\n+                        // FIXME probably want to follow macro_rules macros here.\n+                        allow_internal_unstable,\n+                        allow_internal_unsafe: false,\n+                        edition,\n                     });\n \n                     let tok_result = expandfun.expand(self.cx, span, mac.node.stream());\n@@ -894,13 +886,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n         let mut expn_info = ExpnInfo {\n             call_site: span,\n-            callee: NameAndSpan {\n-                format: MacroAttribute(pretty_name),\n-                span: None,\n-                allow_internal_unstable: false,\n-                allow_internal_unsafe: false,\n-                edition: ext.edition(),\n-            }\n+            def_site: None,\n+            format: MacroAttribute(pretty_name),\n+            allow_internal_unstable: false,\n+            allow_internal_unsafe: false,\n+            edition: ext.edition(),\n         };\n \n         match *ext {\n@@ -916,7 +906,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 Some(invoc.fragment_kind.expect_from_annotatables(items))\n             }\n             BuiltinDerive(func) => {\n-                expn_info.callee.allow_internal_unstable = true;\n+                expn_info.allow_internal_unstable = true;\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = span.with_ctxt(self.cx.backtrace());\n                 let mut items = Vec::new();"}, {"sha": "66e8e0d7a9c6c76e52dcaa0b0b850d62cce71ba9", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -14,7 +14,7 @@ use std::cell::Cell;\n use ext::hygiene::{Mark, SyntaxContext};\n use symbol::{Symbol, keywords};\n use syntax_pos::{DUMMY_SP, Span};\n-use codemap::{ExpnInfo, NameAndSpan, MacroAttribute, dummy_spanned, hygiene, respan};\n+use codemap::{ExpnInfo, MacroAttribute, dummy_spanned, hygiene, respan};\n use ptr::P;\n use tokenstream::TokenStream;\n \n@@ -25,13 +25,11 @@ fn ignored_span(sp: Span) -> Span {\n     let mark = Mark::fresh(Mark::root());\n     mark.set_expn_info(ExpnInfo {\n         call_site: DUMMY_SP,\n-        callee: NameAndSpan {\n-            format: MacroAttribute(Symbol::intern(\"std_inject\")),\n-            span: None,\n-            allow_internal_unstable: true,\n-            allow_internal_unsafe: false,\n-            edition: hygiene::default_edition(),\n-        }\n+        def_site: None,\n+        format: MacroAttribute(Symbol::intern(\"std_inject\")),\n+        allow_internal_unstable: true,\n+        allow_internal_unsafe: false,\n+        edition: hygiene::default_edition(),\n     });\n     sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n }"}, {"sha": "141fd122ff57b6647cea156804d3da4b15322f8b", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -22,7 +22,7 @@ use std::vec;\n use attr::{self, HasAttrs};\n use syntax_pos::{self, DUMMY_SP, NO_EXPANSION, Span, FileMap, BytePos};\n \n-use codemap::{self, CodeMap, ExpnInfo, NameAndSpan, MacroAttribute, dummy_spanned};\n+use codemap::{self, CodeMap, ExpnInfo, MacroAttribute, dummy_spanned};\n use errors;\n use config;\n use entry::{self, EntryPointType};\n@@ -307,13 +307,11 @@ fn generate_test_harness(sess: &ParseSess,\n \n     mark.set_expn_info(ExpnInfo {\n         call_site: DUMMY_SP,\n-        callee: NameAndSpan {\n-            format: MacroAttribute(Symbol::intern(\"test\")),\n-            span: None,\n-            allow_internal_unstable: true,\n-            allow_internal_unsafe: false,\n-            edition: hygiene::default_edition(),\n-        }\n+        def_site: None,\n+        format: MacroAttribute(Symbol::intern(\"test\")),\n+        allow_internal_unstable: true,\n+        allow_internal_unsafe: false,\n+        edition: hygiene::default_edition(),\n     });\n \n     TestHarnessGenerator {"}, {"sha": "e6a1434ca9d10ca540432f668a1008ed6be7da3f", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -157,11 +157,11 @@ fn call_intrinsic(cx: &ExtCtxt,\n                   intrinsic: &str,\n                   args: Vec<P<ast::Expr>>)\n                   -> P<ast::Expr> {\n-    if cx.current_expansion.mark.expn_info().unwrap().callee.allow_internal_unstable {\n+    if cx.current_expansion.mark.expn_info().unwrap().allow_internal_unstable {\n         span = span.with_ctxt(cx.backtrace());\n     } else { // Avoid instability errors with user defined curstom derives, cc #36316\n         let mut info = cx.current_expansion.mark.expn_info().unwrap();\n-        info.callee.allow_internal_unstable = true;\n+        info.allow_internal_unstable = true;\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(info);\n         span = span.with_ctxt(SyntaxContext::empty().apply_mark(mark));"}, {"sha": "ee343e47bd8905c5d44c4ce6bee4bdc892df6879", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -14,7 +14,7 @@ use errors;\n \n use syntax::ast::{self, Ident, NodeId};\n use syntax::attr;\n-use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute, hygiene, respan};\n+use syntax::codemap::{ExpnInfo, MacroAttribute, hygiene, respan};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n@@ -364,13 +364,11 @@ fn mk_registrar(cx: &mut ExtCtxt,\n     let mark = Mark::fresh(Mark::root());\n     mark.set_expn_info(ExpnInfo {\n         call_site: DUMMY_SP,\n-        callee: NameAndSpan {\n-            format: MacroAttribute(Symbol::intern(\"proc_macro\")),\n-            span: None,\n-            allow_internal_unstable: true,\n-            allow_internal_unsafe: false,\n-            edition: hygiene::default_edition(),\n-        }\n+        def_site: None,\n+        format: MacroAttribute(Symbol::intern(\"proc_macro\")),\n+        allow_internal_unstable: true,\n+        allow_internal_unsafe: false,\n+        edition: hygiene::default_edition(),\n     });\n     let span = DUMMY_SP.apply_mark(mark);\n "}, {"sha": "08b7f7c76cb65782f76a38d23538e65d32cce809", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -482,12 +482,11 @@ pub struct ExpnInfo {\n     /// call_site span would have its own ExpnInfo, with the call_site\n     /// pointing to the `foo!` invocation.\n     pub call_site: Span,\n-    /// Information about the expansion.\n-    pub callee: NameAndSpan\n-}\n-\n-#[derive(Clone, Hash, Debug, RustcEncodable, RustcDecodable)]\n-pub struct NameAndSpan {\n+    /// The span of the macro definition itself. The macro may not\n+    /// have a sensible definition span (e.g. something defined\n+    /// completely inside libsyntax) in which case this is None.\n+    /// This span serves only informational purpose and is not used for resolution.\n+    pub def_site: Option<Span>,\n     /// The format with which the macro was invoked.\n     pub format: ExpnFormat,\n     /// Whether the macro is allowed to use #[unstable]/feature-gated\n@@ -499,20 +498,6 @@ pub struct NameAndSpan {\n     pub allow_internal_unsafe: bool,\n     /// Edition of the crate in which the macro is defined.\n     pub edition: Edition,\n-    /// The span of the macro definition itself. The macro may not\n-    /// have a sensible definition span (e.g. something defined\n-    /// completely inside libsyntax) in which case this is None.\n-    pub span: Option<Span>\n-}\n-\n-impl NameAndSpan {\n-    pub fn name(&self) -> Symbol {\n-        match self.format {\n-            ExpnFormat::MacroAttribute(s) |\n-            ExpnFormat::MacroBang(s) => s,\n-            ExpnFormat::CompilerDesugaring(ref kind) => kind.as_symbol(),\n-        }\n-    }\n }\n \n /// The source of expansion.\n@@ -526,8 +511,17 @@ pub enum ExpnFormat {\n     CompilerDesugaring(CompilerDesugaringKind)\n }\n \n+impl ExpnFormat {\n+    pub fn name(&self) -> Symbol {\n+        match *self {\n+            ExpnFormat::MacroBang(name) | ExpnFormat::MacroAttribute(name) => name,\n+            ExpnFormat::CompilerDesugaring(kind) => kind.name(),\n+        }\n+    }\n+}\n+\n /// The kind of compiler desugaring.\n-#[derive(Clone, Hash, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, Hash, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum CompilerDesugaringKind {\n     DotFill,\n     QuestionMark,\n@@ -540,16 +534,14 @@ pub enum CompilerDesugaringKind {\n }\n \n impl CompilerDesugaringKind {\n-    pub fn as_symbol(&self) -> Symbol {\n-        use CompilerDesugaringKind::*;\n-        let s = match *self {\n-            Async => \"async\",\n-            DotFill => \"...\",\n-            QuestionMark => \"?\",\n-            Catch => \"do catch\",\n-            ExistentialReturnType => \"existental type\",\n-        };\n-        Symbol::intern(s)\n+    pub fn name(self) -> Symbol {\n+        Symbol::intern(match self {\n+            CompilerDesugaringKind::Async => \"async\",\n+            CompilerDesugaringKind::DotFill => \"...\",\n+            CompilerDesugaringKind::QuestionMark => \"?\",\n+            CompilerDesugaringKind::Catch => \"do catch\",\n+            CompilerDesugaringKind::ExistentialReturnType => \"existental type\",\n+        })\n     }\n }\n "}, {"sha": "a4fb9571ecbe9a75e260e9c40be19a74ceb9815d", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce91076af125eda82bb36e446e67b1c7af4218/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=20ce91076af125eda82bb36e446e67b1c7af4218", "patch": "@@ -51,7 +51,7 @@ extern crate unicode_width;\n \n pub mod edition;\n pub mod hygiene;\n-pub use hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnFormat, NameAndSpan, CompilerDesugaringKind};\n+pub use hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnFormat, CompilerDesugaringKind};\n \n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n@@ -303,19 +303,19 @@ impl Span {\n     /// Edition of the crate from which this span came.\n     pub fn edition(self) -> edition::Edition {\n         self.ctxt().outer().expn_info().map_or_else(|| hygiene::default_edition(),\n-                                                    |einfo| einfo.callee.edition)\n+                                                    |einfo| einfo.edition)\n     }\n \n     /// Return the source callee.\n     ///\n-    /// Returns None if the supplied span has no expansion trace,\n-    /// else returns the NameAndSpan for the macro definition\n+    /// Returns `None` if the supplied span has no expansion trace,\n+    /// else returns the `ExpnInfo` for the macro definition\n     /// corresponding to the source callsite.\n-    pub fn source_callee(self) -> Option<NameAndSpan> {\n-        fn source_callee(info: ExpnInfo) -> NameAndSpan {\n+    pub fn source_callee(self) -> Option<ExpnInfo> {\n+        fn source_callee(info: ExpnInfo) -> ExpnInfo {\n             match info.call_site.ctxt().outer().expn_info() {\n                 Some(info) => source_callee(info),\n-                None => info.callee,\n+                None => info,\n             }\n         }\n         self.ctxt().outer().expn_info().map(source_callee)\n@@ -326,15 +326,15 @@ impl Span {\n     /// `#[allow_internal_unstable]`).\n     pub fn allows_unstable(&self) -> bool {\n         match self.ctxt().outer().expn_info() {\n-            Some(info) => info.callee.allow_internal_unstable,\n+            Some(info) => info.allow_internal_unstable,\n             None => false,\n         }\n     }\n \n     /// Check if this span arises from a compiler desugaring of kind `kind`.\n     pub fn is_compiler_desugaring(&self, kind: CompilerDesugaringKind) -> bool {\n         match self.ctxt().outer().expn_info() {\n-            Some(info) => match info.callee.format {\n+            Some(info) => match info.format {\n                 ExpnFormat::CompilerDesugaring(k) => k == kind,\n                 _ => false,\n             },\n@@ -346,7 +346,7 @@ impl Span {\n     /// if this span is not from a desugaring.\n     pub fn compiler_desugaring_kind(&self) -> Option<CompilerDesugaringKind> {\n         match self.ctxt().outer().expn_info() {\n-            Some(info) => match info.callee.format {\n+            Some(info) => match info.format {\n                 ExpnFormat::CompilerDesugaring(k) => Some(k),\n                 _ => None\n             },\n@@ -359,7 +359,7 @@ impl Span {\n     //  (that is, a macro marked with `#[allow_internal_unsafe]`).\n     pub fn allows_unsafe(&self) -> bool {\n         match self.ctxt().outer().expn_info() {\n-            Some(info) => info.callee.allow_internal_unsafe,\n+            Some(info) => info.allow_internal_unsafe,\n             None => false,\n         }\n     }\n@@ -368,20 +368,17 @@ impl Span {\n         let mut prev_span = DUMMY_SP;\n         let mut result = vec![];\n         while let Some(info) = self.ctxt().outer().expn_info() {\n-            let (pre, post) = match info.callee.format {\n-                ExpnFormat::MacroAttribute(..) => (\"#[\", \"]\"),\n-                ExpnFormat::MacroBang(..) => (\"\", \"!\"),\n-                ExpnFormat::CompilerDesugaring(..) => (\"desugaring of `\", \"`\"),\n-            };\n-            let macro_decl_name = format!(\"{}{}{}\", pre, info.callee.name(), post);\n-            let def_site_span = info.callee.span;\n-\n             // Don't print recursive invocations\n             if !info.call_site.source_equal(&prev_span) {\n+                let (pre, post) = match info.format {\n+                    ExpnFormat::MacroAttribute(..) => (\"#[\", \"]\"),\n+                    ExpnFormat::MacroBang(..) => (\"\", \"!\"),\n+                    ExpnFormat::CompilerDesugaring(..) => (\"desugaring of `\", \"`\"),\n+                };\n                 result.push(MacroBacktrace {\n                     call_site: info.call_site,\n-                    macro_decl_name,\n-                    def_site_span,\n+                    macro_decl_name: format!(\"{}{}{}\", pre, info.format.name(), post),\n+                    def_site_span: info.def_site,\n                 });\n             }\n "}]}