{"sha": "775bacd1b8d97ade32c8d74ce35be1f34759aead", "node_id": "C_kwDOAAsO6NoAKDc3NWJhY2QxYjhkOTdhZGUzMmM4ZDc0Y2UzNWJlMWYzNDc1OWFlYWQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-03-07T17:43:42Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-03-07T18:13:41Z"}, "message": "Simplify `sort_by` calls", "tree": {"sha": "774e3a2e4f0b44a136fe7e4623d390cc1a688880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/774e3a2e4f0b44a136fe7e4623d390cc1a688880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/775bacd1b8d97ade32c8d74ce35be1f34759aead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/775bacd1b8d97ade32c8d74ce35be1f34759aead", "html_url": "https://github.com/rust-lang/rust/commit/775bacd1b8d97ade32c8d74ce35be1f34759aead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/775bacd1b8d97ade32c8d74ce35be1f34759aead/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac4379fea9e83465d814bb05005689f49bd2141e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4379fea9e83465d814bb05005689f49bd2141e", "html_url": "https://github.com/rust-lang/rust/commit/ac4379fea9e83465d814bb05005689f49bd2141e"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "57805f7c800536d1a4353f3020dd1c1773ae6914", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=775bacd1b8d97ade32c8d74ce35be1f34759aead", "patch": "@@ -1031,7 +1031,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             .collect();\n \n         // Sort them by the name so we have a stable result.\n-        names.sort_by(|a, b| a.as_str().partial_cmp(b.as_str()).unwrap());\n+        names.sort_by(|a, b| a.as_str().cmp(b.as_str()));\n         names\n     }\n "}, {"sha": "2ec67ecae3d44a45957ecace705be3b36b53ee80", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=775bacd1b8d97ade32c8d74ce35be1f34759aead", "patch": "@@ -42,7 +42,7 @@ use rustc_trait_selection::traits::{\n use super::probe::{AutorefOrPtrAdjustment, IsSuggestion, Mode, ProbeScope};\n use super::{CandidateSource, MethodError, NoMatchData};\n use rustc_hir::intravisit::Visitor;\n-use std::cmp::Ordering;\n+use std::cmp::{self, Ordering};\n use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -2517,7 +2517,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if !candidates.is_empty() {\n             // Sort from most relevant to least relevant.\n-            candidates.sort_by(|a, b| a.cmp(b).reverse());\n+            candidates.sort_by_key(|&info| cmp::Reverse(info));\n             candidates.dedup();\n \n             let param_type = match rcvr_ty.kind() {"}, {"sha": "5c524a18454ec515026c68537cf84d1b0cccd5c8", "filename": "compiler/rustc_monomorphize/src/partitioning/merging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs?ref=775bacd1b8d97ade32c8d74ce35be1f34759aead", "patch": "@@ -24,7 +24,7 @@ pub fn merge_codegen_units<'tcx>(\n     // smallest into each other) we're sure to start off with a deterministic\n     // order (sorted by name). This'll mean that if two cgus have the same size\n     // the stable sort below will keep everything nice and deterministic.\n-    codegen_units.sort_by(|a, b| a.name().as_str().partial_cmp(b.name().as_str()).unwrap());\n+    codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n \n     // This map keeps track of what got merged into what.\n     let mut cgu_contents: FxHashMap<Symbol, Vec<Symbol>> ="}, {"sha": "7ac1c9e057e8f8fd69dbb6593ba20da9697e5603", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=775bacd1b8d97ade32c8d74ce35be1f34759aead", "patch": "@@ -252,7 +252,7 @@ pub fn partition<'tcx>(\n         internalization_candidates: _,\n     } = post_inlining;\n \n-    result.sort_by(|a, b| a.name().as_str().partial_cmp(b.name().as_str()).unwrap());\n+    result.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n \n     result\n }"}, {"sha": "c4b9fdc81c5eb3f52b98debe891b97e4173a000b", "filename": "compiler/rustc_parse/src/lexer/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs?ref=775bacd1b8d97ade32c8d74ce35be1f34759aead", "patch": "@@ -71,7 +71,7 @@ pub fn report_suspicious_mismatch_block(\n         .collect();\n \n     // sort by `lo`, so the large block spans in the front\n-    matched_spans.sort_by(|a, b| a.0.lo().cmp(&b.0.lo()));\n+    matched_spans.sort_by_key(|(span, _)| span.lo());\n \n     // We use larger block whose identation is well to cover those inner mismatched blocks\n     // O(N^2) here, but we are on error reporting path, so it is fine"}, {"sha": "6133e75a78fff07826454de25cbd7b9f2f96a4ba", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=775bacd1b8d97ade32c8d74ce35be1f34759aead", "patch": "@@ -1736,7 +1736,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n \n         let name = path[path.len() - 1].ident.name;\n         // Make sure error reporting is deterministic.\n-        names.sort_by(|a, b| a.candidate.as_str().partial_cmp(b.candidate.as_str()).unwrap());\n+        names.sort_by(|a, b| a.candidate.as_str().cmp(b.candidate.as_str()));\n \n         match find_best_match_for_name(\n             &names.iter().map(|suggestion| suggestion.candidate).collect::<Vec<Symbol>>(),"}, {"sha": "0dfee92f404345ffcf2538db6296844fb1fc6e55", "filename": "compiler/rustc_session/src/code_stats.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bacd1b8d97ade32c8d74ce35be1f34759aead/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs?ref=775bacd1b8d97ade32c8d74ce35be1f34759aead", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lock;\n use rustc_span::Symbol;\n use rustc_target::abi::{Align, Size};\n-use std::cmp::{self, Ordering};\n+use std::cmp;\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct VariantInfo {\n@@ -87,7 +87,7 @@ impl CodeStats {\n         // Except for Generators, whose variants are already sorted according to\n         // their yield points in `variant_info_for_generator`.\n         if kind != DataTypeKind::Generator {\n-            variants.sort_by(|info1, info2| info2.size.cmp(&info1.size));\n+            variants.sort_by_key(|info| cmp::Reverse(info.size));\n         }\n         let info = TypeSizeInfo {\n             kind,\n@@ -107,13 +107,7 @@ impl CodeStats {\n \n         // Primary sort: large-to-small.\n         // Secondary sort: description (dictionary order)\n-        sorted.sort_by(|info1, info2| {\n-            // (reversing cmp order to get large-to-small ordering)\n-            match info2.overall_size.cmp(&info1.overall_size) {\n-                Ordering::Equal => info1.type_description.cmp(&info2.type_description),\n-                other => other,\n-            }\n-        });\n+        sorted.sort_by_key(|info| (cmp::Reverse(info.overall_size), &info.type_description));\n \n         for info in sorted {\n             let TypeSizeInfo { type_description, overall_size, align, kind, variants, .. } = info;"}]}