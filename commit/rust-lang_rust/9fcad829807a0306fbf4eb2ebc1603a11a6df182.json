{"sha": "9fcad829807a0306fbf4eb2ebc1603a11a6df182", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmY2FkODI5ODA3YTAzMDZmYmY0ZWIyZWJjMTYwM2ExMWE2ZGYxODI=", "commit": {"author": {"name": "James Leitch", "email": "rickvanprim@gmail.com", "date": "2021-04-21T03:03:35Z"}, "committer": {"name": "James Leitch", "email": "rickvanprim@gmail.com", "date": "2021-04-21T22:10:53Z"}, "message": "Diagnostic Remap Path Prefixes added.", "tree": {"sha": "a91162aed471e8b8bb8d80ed2dfcb7aaeb64acfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a91162aed471e8b8bb8d80ed2dfcb7aaeb64acfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fcad829807a0306fbf4eb2ebc1603a11a6df182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fcad829807a0306fbf4eb2ebc1603a11a6df182", "html_url": "https://github.com/rust-lang/rust/commit/9fcad829807a0306fbf4eb2ebc1603a11a6df182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fcad829807a0306fbf4eb2ebc1603a11a6df182/comments", "author": {"login": "rickvanprim", "id": 13792812, "node_id": "MDQ6VXNlcjEzNzkyODEy", "avatar_url": "https://avatars.githubusercontent.com/u/13792812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rickvanprim", "html_url": "https://github.com/rickvanprim", "followers_url": "https://api.github.com/users/rickvanprim/followers", "following_url": "https://api.github.com/users/rickvanprim/following{/other_user}", "gists_url": "https://api.github.com/users/rickvanprim/gists{/gist_id}", "starred_url": "https://api.github.com/users/rickvanprim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rickvanprim/subscriptions", "organizations_url": "https://api.github.com/users/rickvanprim/orgs", "repos_url": "https://api.github.com/users/rickvanprim/repos", "events_url": "https://api.github.com/users/rickvanprim/events{/privacy}", "received_events_url": "https://api.github.com/users/rickvanprim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rickvanprim", "id": 13792812, "node_id": "MDQ6VXNlcjEzNzkyODEy", "avatar_url": "https://avatars.githubusercontent.com/u/13792812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rickvanprim", "html_url": "https://github.com/rickvanprim", "followers_url": "https://api.github.com/users/rickvanprim/followers", "following_url": "https://api.github.com/users/rickvanprim/following{/other_user}", "gists_url": "https://api.github.com/users/rickvanprim/gists{/gist_id}", "starred_url": "https://api.github.com/users/rickvanprim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rickvanprim/subscriptions", "organizations_url": "https://api.github.com/users/rickvanprim/orgs", "repos_url": "https://api.github.com/users/rickvanprim/repos", "events_url": "https://api.github.com/users/rickvanprim/events{/privacy}", "received_events_url": "https://api.github.com/users/rickvanprim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60841f42769b154864252b04d622494a9ddfc696", "url": "https://api.github.com/repos/rust-lang/rust/commits/60841f42769b154864252b04d622494a9ddfc696", "html_url": "https://github.com/rust-lang/rust/commit/60841f42769b154864252b04d622494a9ddfc696"}], "stats": {"total": 90, "additions": 53, "deletions": 37}, "files": [{"sha": "3be335550bbb9c2961748e08a595e012749b95ad", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fcad829807a0306fbf4eb2ebc1603a11a6df182/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcad829807a0306fbf4eb2ebc1603a11a6df182/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=9fcad829807a0306fbf4eb2ebc1603a11a6df182", "patch": "@@ -17,7 +17,7 @@ use ide_db::helpers::{\n };\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest, RustcSource};\n-use rustc_hash::FxHashSet;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use serde::{de::DeserializeOwned, Deserialize};\n use vfs::AbsPathBuf;\n \n@@ -99,6 +99,9 @@ config_data! {\n         diagnostics_enableExperimental: bool    = \"true\",\n         /// List of rust-analyzer diagnostics to disable.\n         diagnostics_disabled: FxHashSet<String> = \"[]\",\n+        /// Map of path prefixes to be substituted when parsing diagnostic file paths.\n+        /// This should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.\n+        diagnostics_remapPathPrefixes: FxHashMap<String, String> = \"{}\",\n         /// List of warnings that should be displayed with info severity.\n         ///\n         /// The warnings will be indicated by a blue squiggly underline in code\n@@ -474,6 +477,7 @@ impl Config {\n     }\n     pub fn diagnostics_map(&self) -> DiagnosticsMapConfig {\n         DiagnosticsMapConfig {\n+            remap_path_prefixes: self.data.diagnostics_remapPathPrefixes.clone(),\n             warnings_as_info: self.data.diagnostics_warningsAsInfo.clone(),\n             warnings_as_hint: self.data.diagnostics_warningsAsHint.clone(),\n         }\n@@ -835,6 +839,9 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"items\": { \"type\": \"string\" },\n             \"uniqueItems\": true,\n         },\n+        \"FxHashMap<String, String>\" => set! {\n+            \"type\": \"object\",\n+        },\n         \"Option<usize>\" => set! {\n             \"type\": [\"null\", \"integer\"],\n             \"minimum\": 0,"}, {"sha": "776d21778ee051fe4369d33739933cc8d239ccb1", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fcad829807a0306fbf4eb2ebc1603a11a6df182/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcad829807a0306fbf4eb2ebc1603a11a6df182/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=9fcad829807a0306fbf4eb2ebc1603a11a6df182", "patch": "@@ -12,6 +12,7 @@ pub(crate) type CheckFixes = Arc<FxHashMap<FileId, Vec<Fix>>>;\n \n #[derive(Debug, Default, Clone)]\n pub struct DiagnosticsMapConfig {\n+    pub remap_path_prefixes: FxHashMap<String, String>,\n     pub warnings_as_info: Vec<String>,\n     pub warnings_as_hint: Vec<String>,\n }"}, {"sha": "08303a7814ed32a18d5ad3108e812e8e86d3ffa6", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9fcad829807a0306fbf4eb2ebc1603a11a6df182/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fcad829807a0306fbf4eb2ebc1603a11a6df182/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=9fcad829807a0306fbf4eb2ebc1603a11a6df182", "patch": "@@ -44,8 +44,12 @@ fn is_dummy_macro_file(file_name: &str) -> bool {\n }\n \n /// Converts a Rust span to a LSP location\n-fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n-    let file_name = resolve_path(workspace_root, &span.file_name);\n+fn location(\n+    config: &DiagnosticsMapConfig,\n+    workspace_root: &Path,\n+    span: &DiagnosticSpan,\n+) -> lsp_types::Location {\n+    let file_name = resolve_path(config, workspace_root, &span.file_name);\n     let uri = url_from_abs_path(&file_name);\n \n     // FIXME: this doesn't handle UTF16 offsets correctly\n@@ -61,54 +65,46 @@ fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location\n ///\n /// This takes locations pointing into the standard library, or generally outside the current\n /// workspace into account and tries to avoid those, in case macros are involved.\n-fn primary_location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n+fn primary_location(\n+    config: &DiagnosticsMapConfig,\n+    workspace_root: &Path,\n+    span: &DiagnosticSpan,\n+) -> lsp_types::Location {\n     let span_stack = std::iter::successors(Some(span), |span| Some(&span.expansion.as_ref()?.span));\n     for span in span_stack.clone() {\n-        let abs_path = resolve_path(workspace_root, &span.file_name);\n+        let abs_path = resolve_path(config, workspace_root, &span.file_name);\n         if !is_dummy_macro_file(&span.file_name) && abs_path.starts_with(workspace_root) {\n-            return location(workspace_root, span);\n+            return location(config, workspace_root, span);\n         }\n     }\n \n     // Fall back to the outermost macro invocation if no suitable span comes up.\n     let last_span = span_stack.last().unwrap();\n-    location(workspace_root, last_span)\n+    location(config, workspace_root, last_span)\n }\n \n /// Converts a secondary Rust span to a LSP related information\n ///\n /// If the span is unlabelled this will return `None`.\n fn diagnostic_related_information(\n+    config: &DiagnosticsMapConfig,\n     workspace_root: &Path,\n     span: &DiagnosticSpan,\n ) -> Option<lsp_types::DiagnosticRelatedInformation> {\n     let message = span.label.clone()?;\n-    let location = location(workspace_root, span);\n+    let location = location(config, workspace_root, span);\n     Some(lsp_types::DiagnosticRelatedInformation { location, message })\n }\n \n-/// Resolves paths mimicking VSCode's behavior when `file_name` starts\n-/// with the root directory component, which does not discard the base\n-/// path.  If this relative path exists, use it, otherwise fall back\n-/// to the existing Rust behavior of path joining.\n-fn resolve_path(workspace_root: &Path, file_name: &str) -> PathBuf {\n-    let file_name = Path::new(file_name);\n-\n-    // Test path with VSCode's path join behavior.\n-    let vscode_path = {\n-        let mut result = PathBuf::from(workspace_root);\n-        result.extend(file_name.components().skip_while(|component| match component {\n-            std::path::Component::RootDir => true,\n-            _ => false,\n-        }));\n-        result\n-    };\n-    if vscode_path.exists() {\n-        return vscode_path;\n+/// Resolves paths applying any matching path prefix remappings, and then\n+/// joining the path to the workspace root.\n+fn resolve_path(config: &DiagnosticsMapConfig, workspace_root: &Path, file_name: &str) -> PathBuf {\n+    match config.remap_path_prefixes.iter().find(|(from, _)| file_name.starts_with(*from)) {\n+        Some((from, to)) => {\n+            workspace_root.join(format!(\"{}{}\", to, file_name.strip_prefix(from).unwrap()))\n+        }\n+        None => workspace_root.join(file_name),\n     }\n-\n-    // Default to Rust's path join behavior.\n-    workspace_root.join(file_name)\n }\n \n struct SubDiagnostic {\n@@ -122,6 +118,7 @@ enum MappedRustChildDiagnostic {\n }\n \n fn map_rust_child_diagnostic(\n+    config: &DiagnosticsMapConfig,\n     workspace_root: &Path,\n     rd: &flycheck::Diagnostic,\n ) -> MappedRustChildDiagnostic {\n@@ -135,7 +132,7 @@ fn map_rust_child_diagnostic(\n     let mut edit_map: HashMap<lsp_types::Url, Vec<lsp_types::TextEdit>> = HashMap::new();\n     for &span in &spans {\n         if let Some(suggested_replacement) = &span.suggested_replacement {\n-            let location = location(workspace_root, span);\n+            let location = location(config, workspace_root, span);\n             let edit = lsp_types::TextEdit::new(location.range, suggested_replacement.clone());\n             edit_map.entry(location.uri).or_default().push(edit);\n         }\n@@ -144,15 +141,15 @@ fn map_rust_child_diagnostic(\n     if edit_map.is_empty() {\n         MappedRustChildDiagnostic::SubDiagnostic(SubDiagnostic {\n             related: lsp_types::DiagnosticRelatedInformation {\n-                location: location(workspace_root, spans[0]),\n+                location: location(config, workspace_root, spans[0]),\n                 message: rd.message.clone(),\n             },\n             suggested_fix: None,\n         })\n     } else {\n         MappedRustChildDiagnostic::SubDiagnostic(SubDiagnostic {\n             related: lsp_types::DiagnosticRelatedInformation {\n-                location: location(workspace_root, spans[0]),\n+                location: location(config, workspace_root, spans[0]),\n                 message: rd.message.clone(),\n             },\n             suggested_fix: Some(lsp_ext::CodeAction {\n@@ -217,15 +214,15 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     let mut tags = Vec::new();\n \n     for secondary_span in rd.spans.iter().filter(|s| !s.is_primary) {\n-        let related = diagnostic_related_information(workspace_root, secondary_span);\n+        let related = diagnostic_related_information(config, workspace_root, secondary_span);\n         if let Some(related) = related {\n             subdiagnostics.push(SubDiagnostic { related, suggested_fix: None });\n         }\n     }\n \n     let mut message = rd.message.clone();\n     for child in &rd.children {\n-        let child = map_rust_child_diagnostic(workspace_root, &child);\n+        let child = map_rust_child_diagnostic(config, workspace_root, &child);\n         match child {\n             MappedRustChildDiagnostic::SubDiagnostic(sub) => {\n                 subdiagnostics.push(sub);\n@@ -269,7 +266,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     primary_spans\n         .iter()\n         .flat_map(|primary_span| {\n-            let primary_location = primary_location(workspace_root, &primary_span);\n+            let primary_location = primary_location(config, workspace_root, &primary_span);\n \n             let mut message = message.clone();\n             if needs_primary_span_label {\n@@ -299,7 +296,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 // generated that code.\n                 let is_in_macro_call = i != 0;\n \n-                let secondary_location = location(workspace_root, &span);\n+                let secondary_location = location(config, workspace_root, &span);\n                 if secondary_location == primary_location {\n                     continue;\n                 }"}, {"sha": "cb6fe585002727eef64721408fb43c7b7cec1d5c", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fcad829807a0306fbf4eb2ebc1603a11a6df182/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/9fcad829807a0306fbf4eb2ebc1603a11a6df182/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=9fcad829807a0306fbf4eb2ebc1603a11a6df182", "patch": "@@ -147,6 +147,12 @@ have more false positives than usual.\n --\n List of rust-analyzer diagnostics to disable.\n --\n+[[rust-analyzer.diagnostics.remapPathPrefixes]]rust-analyzer.diagnostics.remapPathPrefixes (default: `{}`)::\n++\n+--\n+Map of path prefixes to be substituted when parsing diagnostic file paths.\n+This should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.\n+--\n [[rust-analyzer.diagnostics.warningsAsHint]]rust-analyzer.diagnostics.warningsAsHint (default: `[]`)::\n +\n --"}, {"sha": "dcb2e89d14cfab52caa541179f1b36ebaae1f2c6", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fcad829807a0306fbf4eb2ebc1603a11a6df182/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/9fcad829807a0306fbf4eb2ebc1603a11a6df182/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=9fcad829807a0306fbf4eb2ebc1603a11a6df182", "patch": "@@ -565,6 +565,11 @@\n                     },\n                     \"uniqueItems\": true\n                 },\n+                \"rust-analyzer.diagnostics.remapPathPrefixes\": {\n+                    \"markdownDescription\": \"Map of path prefixes to be substituted when parsing diagnostic file paths.\\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.diagnostics.warningsAsHint\": {\n                     \"markdownDescription\": \"List of warnings that should be displayed with info severity.\\n\\nThe warnings will be indicated by a blue squiggly underline in code\\nand a blue icon in the `Problems Panel`.\",\n                     \"default\": [],\n@@ -1195,4 +1200,4 @@\n             ]\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}]}