{"sha": "37d363879e9dbc60969b297a99220e7928cb28a9", "node_id": "C_kwDOAAsO6NoAKDM3ZDM2Mzg3OWU5ZGJjNjA5NjliMjk3YTk5MjIwZTc5MjhjYjI4YTk", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-05-31T05:53:59Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-06-01T16:11:50Z"}, "message": "Improve calculation of \"Impls on Foreign Types\"", "tree": {"sha": "5ddaf89763c890222649fc598638330085dfb58b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ddaf89763c890222649fc598638330085dfb58b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37d363879e9dbc60969b297a99220e7928cb28a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37d363879e9dbc60969b297a99220e7928cb28a9", "html_url": "https://github.com/rust-lang/rust/commit/37d363879e9dbc60969b297a99220e7928cb28a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37d363879e9dbc60969b297a99220e7928cb28a9/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e972dc608a0a2cb639decda1c9f30cb029e423", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e972dc608a0a2cb639decda1c9f30cb029e423", "html_url": "https://github.com/rust-lang/rust/commit/29e972dc608a0a2cb639decda1c9f30cb029e423"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "53cc11ba482ef1536cd2d48c19c979d925ebd20b", "filename": "src/librustdoc/formats/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/37d363879e9dbc60969b297a99220e7928cb28a9/src%2Flibrustdoc%2Fformats%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d363879e9dbc60969b297a99220e7928cb28a9/src%2Flibrustdoc%2Fformats%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fmod.rs?ref=37d363879e9dbc60969b297a99220e7928cb28a9", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::def_id::DefId;\n crate use renderer::{run_format, FormatRenderer};\n \n use crate::clean::{self, ItemId};\n+use cache::Cache;\n \n /// Specifies whether rendering directly implemented trait items or ones from a certain Deref\n /// impl.\n@@ -60,4 +61,28 @@ impl Impl {\n             }\n         }\n     }\n+\n+    // Returns true if this is an implementation on a \"local\" type, meaning:\n+    // the type is in the current crate, or the type and the trait are both\n+    // re-exported by the current crate.\n+    pub(crate) fn is_on_local_type(&self, cache: &Cache) -> bool {\n+        let for_type = &self.inner_impl().for_;\n+        if let Some(for_type_did) = for_type.def_id(cache) {\n+            // The \"for\" type is local if it's in the paths for the current crate.\n+            if cache.paths.contains_key(&for_type_did) {\n+                return true;\n+            }\n+            if let Some(trait_did) = self.trait_did() {\n+                // The \"for\" type and the trait are from the same crate. That could\n+                // be different from the current crate, for instance when both were\n+                // re-exported from some other crate. But they are local with respect to\n+                // each other.\n+                if for_type_did.krate == trait_did.krate {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        };\n+        true\n+    }\n }"}, {"sha": "c21add68d2cffa28c0e274d44b92220e881387e1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d363879e9dbc60969b297a99220e7928cb28a9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d363879e9dbc60969b297a99220e7928cb28a9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=37d363879e9dbc60969b297a99220e7928cb28a9", "patch": "@@ -2287,9 +2287,7 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n     if let Some(implementors) = cache.implementors.get(&it.item_id.expect_def_id()) {\n         let mut res = implementors\n             .iter()\n-            .filter(|i| {\n-                i.inner_impl().for_.def_id(cache).map_or(false, |d| !cache.paths.contains_key(&d))\n-            })\n+            .filter(|i| !i.is_on_local_type(cache))\n             .filter_map(|i| extract_for_impl_name(&i.impl_item, cx))\n             .collect::<Vec<_>>();\n "}, {"sha": "363b38add051802a570b07406be13d84bc3399ef", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37d363879e9dbc60969b297a99220e7928cb28a9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d363879e9dbc60969b297a99220e7928cb28a9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=37d363879e9dbc60969b297a99220e7928cb28a9", "patch": "@@ -818,9 +818,8 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n             }\n         }\n \n-        let (local, foreign) = implementors.iter().partition::<Vec<_>, _>(|i| {\n-            i.inner_impl().for_.def_id(cache).map_or(true, |d| cache.paths.contains_key(&d))\n-        });\n+        let (local, foreign) =\n+            implementors.iter().partition::<Vec<_>, _>(|i| i.is_on_local_type(cache));\n \n         let (mut synthetic, mut concrete): (Vec<&&Impl>, Vec<&&Impl>) =\n             local.iter().partition(|i| i.inner_impl().kind.is_auto());"}, {"sha": "a8cb16ec34cc01cffb3803c64fab6d144d6dd2e7", "filename": "src/test/rustdoc/issue-75588.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d363879e9dbc60969b297a99220e7928cb28a9/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d363879e9dbc60969b297a99220e7928cb28a9/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-75588.rs?ref=37d363879e9dbc60969b297a99220e7928cb28a9", "patch": "@@ -13,5 +13,5 @@ extern crate real_gimli;\n // @!has foo/trait.Deref.html '//*[@id=\"impl-Deref-for-EndianSlice\"]//h3[@class=\"code-header in-band\"]' 'impl Deref for EndianSlice'\n pub use realcore::Deref;\n \n-// @has foo/trait.Join.html '//*[@id=\"impl-Join-for-Foo\"]//h3[@class=\"code-header in-band\"]' 'impl Join for Foo'\n+// @has foo/trait.Join.html '//*[@id=\"impl-Join\"]//h3[@class=\"code-header in-band\"]' 'impl Join for Foo'\n pub use realcore::Join;"}]}