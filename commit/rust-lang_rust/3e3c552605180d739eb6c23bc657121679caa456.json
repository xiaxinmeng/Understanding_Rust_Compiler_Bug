{"sha": "3e3c552605180d739eb6c23bc657121679caa456", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlM2M1NTI2MDUxODBkNzM5ZWI2YzIzYmM2NTcxMjE2NzljYWE0NTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-28T10:16:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-28T10:16:03Z"}, "message": "Auto merge of #76019 - pietroalbini:rollup-1tkgdnd, r=pietroalbini\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #75330 (Improve rendering of crate features via doc(cfg))\n - #75927 (Use intra-doc links in `core::macros`)\n - #75941 (Clean up E0761 explanation)\n - #75943 (Fix potential UB in align_offset doc examples)\n - #75946 (Error use explicit intra-doc link and fix text)\n - #75955 (Use intra-doc links in `core::future::future` and `core::num::dec2flt`)\n - #75967 (Fix typo in `std::hint::black_box` docs)\n - #75972 (Fix ICE due to carriage return w/ multibyte char)\n - #75989 (Rename rustdoc/test -> rustdoc/doctest)\n - #75996 (fix wording in release notes)\n - #75998 (Add InstrProfilingPlatformFuchsia.c to profiler_builtins)\n - #76000 (Adds --bless support to test/run-make-fulldeps)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "46b2381c5f2cfd4296693402036037193d5654a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b2381c5f2cfd4296693402036037193d5654a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e3c552605180d739eb6c23bc657121679caa456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3c552605180d739eb6c23bc657121679caa456", "html_url": "https://github.com/rust-lang/rust/commit/3e3c552605180d739eb6c23bc657121679caa456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e3c552605180d739eb6c23bc657121679caa456/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41aaa90c67cdb04cac7427756891ad04c3e0bebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/41aaa90c67cdb04cac7427756891ad04c3e0bebf", "html_url": "https://github.com/rust-lang/rust/commit/41aaa90c67cdb04cac7427756891ad04c3e0bebf"}, {"sha": "0106ad4e27389671bbf411ab6cdf8faa926ce0ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/0106ad4e27389671bbf411ab6cdf8faa926ce0ae", "html_url": "https://github.com/rust-lang/rust/commit/0106ad4e27389671bbf411ab6cdf8faa926ce0ae"}], "stats": {"total": 305, "additions": 220, "deletions": 85}, "files": [{"sha": "64fe2df3c496c9fa3952183aa156abf3b18a73f5", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -51,7 +51,7 @@ Compatibility Notes\n -------------------\n - [The target configuration option `abi_blacklist` has been renamed\n   to `unsupported_abis`.][74150] The old name will still continue to work.\n-- [Rustc will now warn if you have a C-like enum that implements `Drop`.][72331]\n+- [Rustc will now warn if you cast a C-like enum that implements `Drop`.][72331]\n   This was previously accepted but will become a hard error in a future release.\n - [Rustc will fail to compile if you have a struct with\n   `#[repr(i128)]` or `#[repr(u128)]`.][74109] This representation is currently only"}, {"sha": "e9a99ddb6b1bdd90910a110cfd3904b1ed60aac3", "filename": "library/core/src/future/future.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -23,7 +23,7 @@ use crate::task::{Context, Poll};\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `.await` the value.\n ///\n-/// [`Waker`]: ../task/struct.Waker.html\n+/// [`Waker`]: crate::task::Waker\n #[doc(spotlight)]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n@@ -91,11 +91,9 @@ pub trait Future {\n     /// (memory corruption, incorrect use of `unsafe` functions, or the like),\n     /// regardless of the future's state.\n     ///\n-    /// [`Poll::Pending`]: ../task/enum.Poll.html#variant.Pending\n-    /// [`Poll::Ready(val)`]: ../task/enum.Poll.html#variant.Ready\n-    /// [`Context`]: ../task/struct.Context.html\n-    /// [`Waker`]: ../task/struct.Waker.html\n-    /// [`Waker::wake`]: ../task/struct.Waker.html#method.wake\n+    /// [`Poll::Ready(val)`]: Poll::Ready\n+    /// [`Waker`]: crate::task::Waker\n+    /// [`Waker::wake`]: crate::task::Waker::wake\n     #[lang = \"poll\"]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;"}, {"sha": "d40a3802867624dd8d3dcd425ff2eaf3662f7956", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -101,7 +101,7 @@ pub fn spin_loop() {\n /// [`std::convert::identity`]: https://doc.rust-lang.org/core/convert/fn.identity.html\n ///\n /// Unlike [`std::convert::identity`], a Rust compiler is encouraged to assume that `black_box` can\n-/// use `x` in any possible valid way that Rust code is allowed to without introducing undefined\n+/// use `dummy` in any possible valid way that Rust code is allowed to without introducing undefined\n /// behavior in the calling code. This property makes `black_box` useful for writing code in which\n /// certain optimizations are not desired, such as benchmarks.\n ///"}, {"sha": "4e0da1fc4a6a38c77ba4cfccef3589478ec5a9a8", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -333,16 +333,16 @@ macro_rules! r#try {\n /// This macro accepts a format string, a list of arguments, and a 'writer'. Arguments will be\n /// formatted according to the specified format string and the result will be passed to the writer.\n /// The writer may be any value with a `write_fmt` method; generally this comes from an\n-/// implementation of either the [`std::fmt::Write`] or the [`std::io::Write`] trait. The macro\n-/// returns whatever the `write_fmt` method returns; commonly a [`std::fmt::Result`], or an\n+/// implementation of either the [`fmt::Write`] or the [`io::Write`] trait. The macro\n+/// returns whatever the `write_fmt` method returns; commonly a [`fmt::Result`], or an\n /// [`io::Result`].\n ///\n /// See [`std::fmt`] for more information on the format string syntax.\n ///\n /// [`std::fmt`]: crate::fmt\n-/// [`std::fmt::Write`]: crate::fmt::Write\n-/// [`std::io::Write`]: ../std/io/trait.Write.html\n-/// [`std::fmt::Result`]: crate::fmt::Result\n+/// [`fmt::Write`]: crate::fmt::Write\n+/// [`io::Write`]: ../std/io/trait.Write.html\n+/// [`fmt::Result`]: crate::fmt::Result\n /// [`io::Result`]: ../std/io/type.Result.html\n ///\n /// # Examples"}, {"sha": "a02e74d5e5a4d3980c1c08b4facf83dd9908a8c1", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -5,12 +5,12 @@ to the caller of the program. `panic!` should be used when a program reaches\n an unrecoverable state.\n \n This macro is the perfect way to assert conditions in example code and in\n-tests. `panic!` is closely tied with the `unwrap` method of both [`Option`]\n-and [`Result`][runwrap] enums. Both implementations call `panic!` when they are set\n-to None or Err variants.\n+tests. `panic!` is closely tied with the `unwrap` method of both\n+[`Option`][ounwrap] and [`Result`][runwrap] enums. Both implementations call\n+`panic!` when they are set to [`None`] or [`Err`] variants.\n \n This macro is used to inject panic into a Rust thread, causing the thread to\n-panic entirely. Each thread's panic can be reaped as the `Box<Any>` type,\n+panic entirely. Each thread's panic can be reaped as the [`Box`]`<`[`Any`]`>` type,\n and the single-argument form of the `panic!` macro will be the value which\n is transmitted.\n \n@@ -24,11 +24,11 @@ The multi-argument form of this macro panics with a string and has the\n \n See also the macro [`compile_error!`], for raising errors during compilation.\n \n-[runwrap]: ../std/result/enum.Result.html#method.unwrap\n-[`Option`]: ../std/option/enum.Option.html#method.unwrap\n-[`Result`]: ../std/result/enum.Result.html\n+[ounwrap]: Option::unwrap\n+[runwrap]: Result::unwrap\n+[`Box`]: ../std/boxed/struct.Box.html\n+[`Any`]: crate::any::Any\n [`format!`]: ../std/macro.format.html\n-[`compile_error!`]: ../std/macro.compile_error.html\n [book]: ../book/ch09-00-error-handling.html\n \n # Current implementation"}, {"sha": "ed6202bb82f0fc45e7c4a9605353f7436f2e7a13", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -166,10 +166,6 @@ from_str_float_impl!(f64);\n ///\n /// This error is used as the error type for the [`FromStr`] implementation\n /// for [`f32`] and [`f64`].\n-///\n-/// [`FromStr`]: ../str/trait.FromStr.html\n-/// [`f32`]: ../../std/primitive.f32.html\n-/// [`f64`]: ../../std/primitive.f64.html\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseFloatError {"}, {"sha": "d09cdb44e083760bff48bb60ce51605a0327c934", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -836,7 +836,7 @@ impl<T: ?Sized> *const T {\n     /// # use std::mem::align_of;\n     /// # unsafe {\n     /// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n-    /// let ptr = &x[n] as *const u8;\n+    /// let ptr = x.as_ptr().add(n) as *const u8;\n     /// let offset = ptr.align_offset(align_of::<u16>());\n     /// if offset < x.len() - n - 1 {\n     ///     let u16_ptr = ptr.add(offset) as *const u16;"}, {"sha": "537aa20bf1dbcb13652ad67a351cc00bb72fe654", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -1094,7 +1094,7 @@ impl<T: ?Sized> *mut T {\n     /// # use std::mem::align_of;\n     /// # unsafe {\n     /// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n-    /// let ptr = &x[n] as *const u8;\n+    /// let ptr = x.as_ptr().add(n) as *const u8;\n     /// let offset = ptr.align_offset(align_of::<u16>());\n     /// if offset < x.len() - n - 1 {\n     ///     let u16_ptr = ptr.add(offset) as *const u16;"}, {"sha": "2a5d5853fec64b4c93c3bcb73fa89185419adb13", "filename": "library/profiler_builtins/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/library%2Fprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/library%2Fprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fprofiler_builtins%2Fbuild.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -20,6 +20,7 @@ fn main() {\n         \"InstrProfilingMergeFile.c\",\n         \"InstrProfilingNameVar.c\",\n         \"InstrProfilingPlatformDarwin.c\",\n+        \"InstrProfilingPlatformFuchsia.c\",\n         \"InstrProfilingPlatformLinux.c\",\n         \"InstrProfilingPlatformOther.c\",\n         \"InstrProfilingPlatformWindows.c\","}, {"sha": "d3b0f8ceb68a64e8b8981cb840f6cf9f0bbd116b", "filename": "library/std/src/error.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -33,15 +33,14 @@ use crate::string;\n /// themselves through the [`Display`] and [`Debug`] traits, and may provide\n /// cause chain information:\n ///\n-/// The [`source`] method is generally used when errors cross \"abstraction\n-/// boundaries\". If one module must report an error that is caused by an error\n-/// from a lower-level module, it can allow access to that error via the\n-/// [`source`] method. This makes it possible for the high-level module to\n-/// provide its own errors while also revealing some of the implementation for\n-/// debugging via [`source`] chains.\n+/// [`Error::source()`] is generally used when errors cross\n+/// \"abstraction boundaries\". If one module must report an error that is caused\n+/// by an error from a lower-level module, it can allow accessing that error\n+/// via [`Error::source()`]. This makes it possible for the high-level\n+/// module to provide its own errors while also revealing some of the\n+/// implementation for debugging via `source` chains.\n ///\n /// [`Result<T, E>`]: Result\n-/// [`source`]: Error::source\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Error: Debug + Display {\n     /// The lower-level source of this error, if any.\n@@ -636,7 +635,7 @@ impl dyn Error {\n     }\n \n     /// Returns an iterator starting with the current error and continuing with\n-    /// recursively calling [`source`].\n+    /// recursively calling [`Error::source`].\n     ///\n     /// If you want to omit the current error and only use its sources,\n     /// use `skip(1)`.\n@@ -686,8 +685,6 @@ impl dyn Error {\n     /// assert!(iter.next().is_none());\n     /// assert!(iter.next().is_none());\n     /// ```\n-    ///\n-    /// [`source`]: Error::source\n     #[unstable(feature = \"error_iter\", issue = \"58520\")]\n     #[inline]\n     pub fn chain(&self) -> Chain<'_> {"}, {"sha": "e112674fbcc49b7d95d33a903ffc6b2bd2ee022d", "filename": "src/librustc_error_codes/error_codes/E0761.md", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustc_error_codes%2Ferror_codes%2FE0761.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustc_error_codes%2Ferror_codes%2FE0761.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0761.md?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -2,24 +2,20 @@ Multiple candidate files were found for an out-of-line module.\n \n Erroneous code example:\n \n-```rust\n+```ignore (multiple source files required for compile_fail)\n // file: ambiguous_module/mod.rs\n \n fn foo() {}\n-```\n \n-```rust\n // file: ambiguous_module.rs\n \n fn foo() {}\n-```\n \n-```ignore (multiple source files required for compile_fail)\n+// file: lib.rs\n+\n mod ambiguous_module; // error: file for module `ambiguous_module`\n                       // found at both ambiguous_module.rs and\n                       // ambiguous_module.rs/mod.rs\n-\n-fn main() {}\n ```\n \n Please remove this ambiguity by deleting/renaming one of the candidate files."}, {"sha": "e07b8b86aef8e45cb84879be4841a8b13f04bc2b", "filename": "src/librustc_parse_format/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustc_parse_format%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustc_parse_format%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse_format%2Flib.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -760,7 +760,7 @@ fn find_skips_from_snippet(\n                 (' ' | '\\n' | '\\t', _) if eat_ws => {\n                     skips.push(pos);\n                 }\n-                ('\\\\', Some((next_pos, 'n' | 't' | '0' | '\\\\' | '\\'' | '\\\"'))) => {\n+                ('\\\\', Some((next_pos, 'n' | 't' | 'r' | '0' | '\\\\' | '\\'' | '\\\"'))) => {\n                     skips.push(*next_pos);\n                     let _ = s.next();\n                 }"}, {"sha": "c039b181178a40f198eb48512e2cc11c82458cb8", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 128, "deletions": 23, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -135,7 +135,7 @@ impl Cfg {\n \n     /// Renders the configuration for human display, as a short HTML description.\n     pub(crate) fn render_short_html(&self) -> String {\n-        let mut msg = Html(self, true).to_string();\n+        let mut msg = Display(self, Format::ShortHtml).to_string();\n         if self.should_capitalize_first_letter() {\n             if let Some(i) = msg.find(|c: char| c.is_ascii_alphanumeric()) {\n                 msg[i..i + 1].make_ascii_uppercase();\n@@ -148,14 +148,29 @@ impl Cfg {\n     pub(crate) fn render_long_html(&self) -> String {\n         let on = if self.should_use_with_in_description() { \"with\" } else { \"on\" };\n \n-        let mut msg = format!(\"This is supported {} <strong>{}</strong>\", on, Html(self, false));\n+        let mut msg = format!(\n+            \"This is supported {} <strong>{}</strong>\",\n+            on,\n+            Display(self, Format::LongHtml)\n+        );\n         if self.should_append_only_to_description() {\n             msg.push_str(\" only\");\n         }\n         msg.push('.');\n         msg\n     }\n \n+    /// Renders the configuration for long display, as a long plain text description.\n+    pub(crate) fn render_long_plain(&self) -> String {\n+        let on = if self.should_use_with_in_description() { \"with\" } else { \"on\" };\n+\n+        let mut msg = format!(\"This is supported {} {}\", on, Display(self, Format::LongPlain));\n+        if self.should_append_only_to_description() {\n+            msg.push_str(\" only\");\n+        }\n+        msg\n+    }\n+\n     fn should_capitalize_first_letter(&self) -> bool {\n         match *self {\n             Cfg::False | Cfg::True | Cfg::Not(..) => true,\n@@ -286,9 +301,31 @@ impl ops::BitOr for Cfg {\n     }\n }\n \n-/// Pretty-print wrapper for a `Cfg`. Also indicates whether the \"short-form\" rendering should be\n-/// used.\n-struct Html<'a>(&'a Cfg, bool);\n+#[derive(Clone, Copy)]\n+enum Format {\n+    LongHtml,\n+    LongPlain,\n+    ShortHtml,\n+}\n+\n+impl Format {\n+    fn is_long(self) -> bool {\n+        match self {\n+            Format::LongHtml | Format::LongPlain => true,\n+            Format::ShortHtml => false,\n+        }\n+    }\n+\n+    fn is_html(self) -> bool {\n+        match self {\n+            Format::LongHtml | Format::ShortHtml => true,\n+            Format::LongPlain => false,\n+        }\n+    }\n+}\n+\n+/// Pretty-print wrapper for a `Cfg`. Also indicates what form of rendering should be used.\n+struct Display<'a>(&'a Cfg, Format);\n \n fn write_with_opt_paren<T: fmt::Display>(\n     fmt: &mut fmt::Formatter<'_>,\n@@ -305,7 +342,7 @@ fn write_with_opt_paren<T: fmt::Display>(\n     Ok(())\n }\n \n-impl<'a> fmt::Display for Html<'a> {\n+impl<'a> fmt::Display for Display<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self.0 {\n             Cfg::Not(ref child) => match **child {\n@@ -314,31 +351,86 @@ impl<'a> fmt::Display for Html<'a> {\n                         if sub_cfgs.iter().all(Cfg::is_simple) { \" nor \" } else { \", nor \" };\n                     for (i, sub_cfg) in sub_cfgs.iter().enumerate() {\n                         fmt.write_str(if i == 0 { \"neither \" } else { separator })?;\n-                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg, self.1))?;\n+                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Display(sub_cfg, self.1))?;\n                     }\n                     Ok(())\n                 }\n-                ref simple @ Cfg::Cfg(..) => write!(fmt, \"non-{}\", Html(simple, self.1)),\n-                ref c => write!(fmt, \"not ({})\", Html(c, self.1)),\n+                ref simple @ Cfg::Cfg(..) => write!(fmt, \"non-{}\", Display(simple, self.1)),\n+                ref c => write!(fmt, \"not ({})\", Display(c, self.1)),\n             },\n \n             Cfg::Any(ref sub_cfgs) => {\n                 let separator = if sub_cfgs.iter().all(Cfg::is_simple) { \" or \" } else { \", or \" };\n+\n+                let short_longhand = self.1.is_long() && {\n+                    let all_crate_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::feature, Some(_))));\n+                    let all_target_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::target_feature, Some(_))));\n+\n+                    if all_crate_features {\n+                        fmt.write_str(\"crate features \")?;\n+                        true\n+                    } else if all_target_features {\n+                        fmt.write_str(\"target features \")?;\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                };\n+\n                 for (i, sub_cfg) in sub_cfgs.iter().enumerate() {\n                     if i != 0 {\n                         fmt.write_str(separator)?;\n                     }\n-                    write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg, self.1))?;\n+                    if let (true, Cfg::Cfg(_, Some(feat))) = (short_longhand, sub_cfg) {\n+                        if self.1.is_html() {\n+                            write!(fmt, \"<code>{}</code>\", feat)?;\n+                        } else {\n+                            write!(fmt, \"`{}`\", feat)?;\n+                        }\n+                    } else {\n+                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Display(sub_cfg, self.1))?;\n+                    }\n                 }\n                 Ok(())\n             }\n \n             Cfg::All(ref sub_cfgs) => {\n+                let short_longhand = self.1.is_long() && {\n+                    let all_crate_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::feature, Some(_))));\n+                    let all_target_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::target_feature, Some(_))));\n+\n+                    if all_crate_features {\n+                        fmt.write_str(\"crate features \")?;\n+                        true\n+                    } else if all_target_features {\n+                        fmt.write_str(\"target features \")?;\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                };\n+\n                 for (i, sub_cfg) in sub_cfgs.iter().enumerate() {\n                     if i != 0 {\n                         fmt.write_str(\" and \")?;\n                     }\n-                    write_with_opt_paren(fmt, !sub_cfg.is_simple(), Html(sub_cfg, self.1))?;\n+                    if let (true, Cfg::Cfg(_, Some(feat))) = (short_longhand, sub_cfg) {\n+                        if self.1.is_html() {\n+                            write!(fmt, \"<code>{}</code>\", feat)?;\n+                        } else {\n+                            write!(fmt, \"`{}`\", feat)?;\n+                        }\n+                    } else {\n+                        write_with_opt_paren(fmt, !sub_cfg.is_simple(), Display(sub_cfg, self.1))?;\n+                    }\n                 }\n                 Ok(())\n             }\n@@ -406,26 +498,39 @@ impl<'a> fmt::Display for Html<'a> {\n                     },\n                     (sym::target_endian, Some(endian)) => return write!(fmt, \"{}-endian\", endian),\n                     (sym::target_pointer_width, Some(bits)) => return write!(fmt, \"{}-bit\", bits),\n-                    (sym::target_feature, Some(feat)) => {\n-                        if self.1 {\n-                            return write!(fmt, \"<code>{}</code>\", feat);\n-                        } else {\n+                    (sym::target_feature, Some(feat)) => match self.1 {\n+                        Format::LongHtml => {\n                             return write!(fmt, \"target feature <code>{}</code>\", feat);\n                         }\n-                    }\n+                        Format::LongPlain => return write!(fmt, \"target feature `{}`\", feat),\n+                        Format::ShortHtml => return write!(fmt, \"<code>{}</code>\", feat),\n+                    },\n+                    (sym::feature, Some(feat)) => match self.1 {\n+                        Format::LongHtml => {\n+                            return write!(fmt, \"crate feature <code>{}</code>\", feat);\n+                        }\n+                        Format::LongPlain => return write!(fmt, \"crate feature `{}`\", feat),\n+                        Format::ShortHtml => return write!(fmt, \"<code>{}</code>\", feat),\n+                    },\n                     _ => \"\",\n                 };\n                 if !human_readable.is_empty() {\n                     fmt.write_str(human_readable)\n                 } else if let Some(v) = value {\n-                    write!(\n-                        fmt,\n-                        \"<code>{}=\\\"{}\\\"</code>\",\n-                        Escape(&name.as_str()),\n-                        Escape(&v.as_str())\n-                    )\n-                } else {\n+                    if self.1.is_html() {\n+                        write!(\n+                            fmt,\n+                            r#\"<code>{}=\"{}\"</code>\"#,\n+                            Escape(&name.as_str()),\n+                            Escape(&v.as_str())\n+                        )\n+                    } else {\n+                        write!(fmt, r#\"`{}=\"{}\"`\"#, name, v)\n+                    }\n+                } else if self.1.is_html() {\n                     write!(fmt, \"<code>{}</code>\", Escape(&name.as_str()))\n+                } else {\n+                    write!(fmt, \"`{}`\", name)\n                 }\n             }\n         }"}, {"sha": "7b7c152d8abbf65e6c57a9b3dc41d9b712fff52e", "filename": "src/librustdoc/doctest.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "previous_filename": "src/librustdoc/test.rs"}, {"sha": "a96186a95e16b904cb84dfd4ef9228bab5cefeeb", "filename": "src/librustdoc/doctest/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest%2Ftests.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "previous_filename": "src/librustdoc/test/tests.rs"}, {"sha": "56499f736e163bf0b3d07107a10708b94e10b3f8", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -34,9 +34,9 @@ use std::fmt::Write;\n use std::ops::Range;\n use std::str;\n \n+use crate::doctest;\n use crate::html::highlight;\n use crate::html::toc::TocBuilder;\n-use crate::test;\n \n use pulldown_cmark::{html, CodeBlockKind, CowStr, Event, Options, Parser, Tag};\n \n@@ -243,7 +243,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                 .collect::<Vec<Cow<'_, str>>>()\n                 .join(\"\\n\");\n             let krate = krate.as_ref().map(|s| &**s);\n-            let (test, _) = test::make_test(&test, krate, false, &Default::default(), edition);\n+            let (test, _) = doctest::make_test(&test, krate, false, &Default::default(), edition);\n             let channel = if test.contains(\"#![feature(\") { \"&amp;version=nightly\" } else { \"\" };\n \n             let edition_string = format!(\"&amp;edition={}\", edition);\n@@ -568,7 +568,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n     }\n }\n \n-pub fn find_testable_code<T: test::Tester>(\n+pub fn find_testable_code<T: doctest::Tester>(\n     doc: &str,\n     tests: &mut T,\n     error_codes: ErrorCodes,"}, {"sha": "15afe9257d187cc5b203800bc4074fe663eb2305", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -2130,8 +2130,8 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n fn stability_tags(item: &clean::Item) -> String {\n     let mut tags = String::new();\n \n-    fn tag_html(class: &str, contents: &str) -> String {\n-        format!(r#\"<span class=\"stab {}\">{}</span>\"#, class, contents)\n+    fn tag_html(class: &str, title: &str, contents: &str) -> String {\n+        format!(r#\"<span class=\"stab {}\" title=\"{}\">{}</span>\"#, class, Escape(title), contents)\n     }\n \n     // The trailing space after each tag is to space it properly against the rest of the docs.\n@@ -2140,7 +2140,7 @@ fn stability_tags(item: &clean::Item) -> String {\n         if !stability::deprecation_in_effect(depr.is_since_rustc_version, depr.since.as_deref()) {\n             message = \"Deprecation planned\";\n         }\n-        tags += &tag_html(\"deprecated\", message);\n+        tags += &tag_html(\"deprecated\", \"\", message);\n     }\n \n     // The \"rustc_private\" crates are permanently unstable so it makes no sense\n@@ -2151,11 +2151,11 @@ fn stability_tags(item: &clean::Item) -> String {\n         .map(|s| s.level == stability::Unstable && s.feature != \"rustc_private\")\n         == Some(true)\n     {\n-        tags += &tag_html(\"unstable\", \"Experimental\");\n+        tags += &tag_html(\"unstable\", \"\", \"Experimental\");\n     }\n \n     if let Some(ref cfg) = item.attrs.cfg {\n-        tags += &tag_html(\"portability\", &cfg.render_short_html());\n+        tags += &tag_html(\"portability\", &cfg.render_long_plain(), &cfg.render_short_html());\n     }\n \n     tags"}, {"sha": "8658b39b4557815f3200e0e07adabe02d6706198", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -64,13 +64,13 @@ mod docfs;\n mod doctree;\n #[macro_use]\n mod error;\n+mod doctest;\n mod fold;\n crate mod formats;\n pub mod html;\n mod json;\n mod markdown;\n mod passes;\n-mod test;\n mod theme;\n mod visit_ast;\n mod visit_lib;\n@@ -476,7 +476,7 @@ fn main_options(options: config::Options) -> MainResult {\n \n     match (options.should_test, options.markdown_input()) {\n         (true, true) => return wrap_return(&diag, markdown::test(options)),\n-        (true, false) => return test::run(options),\n+        (true, false) => return doctest::run(options),\n         (false, true) => {\n             return wrap_return(\n                 &diag,"}, {"sha": "3a87e1c46a6155e5a16a74a955178074f0357b87", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -7,10 +7,10 @@ use rustc_span::edition::Edition;\n use rustc_span::source_map::DUMMY_SP;\n \n use crate::config::{Options, RenderOptions};\n+use crate::doctest::{Collector, TestOptions};\n use crate::html::escape::Escape;\n use crate::html::markdown;\n use crate::html::markdown::{find_testable_code, ErrorCodes, IdMap, Markdown, MarkdownWithToc};\n-use crate::test::{Collector, TestOptions};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {"}, {"sha": "cbbe86dc433f33456a7343750e21f044bbf51eda", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -54,7 +54,7 @@ impl Tests {\n     }\n }\n \n-impl crate::test::Tester for Tests {\n+impl crate::doctest::Tester for Tests {\n     fn add_test(&mut self, _: String, _: LangString, _: usize) {\n         self.found_tests += 1;\n     }"}, {"sha": "47ba362c97789fe481b3d061442624a81cf49454", "filename": "src/test/rustdoc/duplicate-cfg.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -3,38 +3,54 @@\n #![crate_name = \"foo\"]\n #![feature(doc_cfg)]\n \n+// @has 'foo/index.html'\n+// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync$'\n+// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate feature `sync` only'\n+\n // @has 'foo/struct.Foo.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'sync'\n #[doc(cfg(feature = \"sync\"))]\n #[doc(cfg(feature = \"sync\"))]\n pub struct Foo;\n \n+// @has 'foo/bar/index.html'\n+// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync$'\n+// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate feature `sync` only'\n+\n // @has 'foo/bar/struct.Bar.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod bar {\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Bar;\n }\n \n+// @has 'foo/baz/index.html'\n+// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync and send$'\n+// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate features `sync` and `send` only'\n+\n // @has 'foo/baz/struct.Baz.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" and feature=\"send\" only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n pub mod baz {\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Baz;\n }\n \n // @has 'foo/qux/struct.Qux.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" and feature=\"send\" only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod qux {\n     #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n     pub struct Qux;\n }\n \n+// @has 'foo/quux/index.html'\n+// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync and send and foo and bar$'\n+// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate feature `sync` and crate feature `send` and `foo` and `bar` only'\n+\n // @has 'foo/quux/struct.Quux.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" and feature=\"send\" and foo and bar only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send and foo and bar only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\", foo)))]\n pub mod quux {\n     #[doc(cfg(all(feature = \"send\", feature = \"sync\", bar)))]"}, {"sha": "3df8277b87372fdf62a969843ce3791891b3d187", "filename": "src/test/ui/issues/issue-70381.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Ftest%2Fui%2Fissues%2Fissue-70381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Ftest%2Fui%2Fissues%2Fissue-70381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70381.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -0,0 +1,6 @@\n+// Test that multi-byte unicode characters with missing parameters do not ICE.\n+\n+fn main() {\n+  println!(\"\\r\u00a1{}\")\n+  //~^ ERROR 1 positional argument in format string\n+}"}, {"sha": "96b8e656991c2abef2b9e0e3f3b7ed1ae5feb6ea", "filename": "src/test/ui/issues/issue-70381.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Ftest%2Fui%2Fissues%2Fissue-70381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Ftest%2Fui%2Fissues%2Fissue-70381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70381.stderr?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -0,0 +1,8 @@\n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/issue-70381.rs:4:16\n+   |\n+LL |   println!(\"\\r\u00a1{}\")\n+   |                ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "965b20f5202e01de368b9608fade303036e1379a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e3c552605180d739eb6c23bc657121679caa456/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3c552605180d739eb6c23bc657121679caa456/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=3e3c552605180d739eb6c23bc657121679caa456", "patch": "@@ -2782,6 +2782,18 @@ impl<'test> TestCx<'test> {\n             cmd.env(\"RUSTFLAGS\", \"-Ctarget-feature=-crt-static\").env(\"IS_MUSL_HOST\", \"1\");\n         }\n \n+        if self.config.bless {\n+            cmd.env(\"RUSTC_BLESS_TEST\", \"--bless\");\n+            // Assume this option is active if the environment variable is \"defined\", with _any_ value.\n+            // As an example, a `Makefile` can use this option by:\n+            //\n+            //   ifdef RUSTC_BLESS_TEST\n+            //       cp \"$(TMPDIR)\"/actual_something.ext expected_something.ext\n+            //   else\n+            //       $(DIFF) expected_something.ext \"$(TMPDIR)\"/actual_something.ext\n+            //   endif\n+        }\n+\n         if self.config.target.contains(\"msvc\") && self.config.cc != \"\" {\n             // We need to pass a path to `lib.exe`, so assume that `cc` is `cl.exe`\n             // and that `lib.exe` lives next to it."}]}