{"sha": "5e9bf46b46e8faeb456705a174c83cc0563fc6f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOWJmNDZiNDZlOGZhZWI0NTY3MDVhMTc0YzgzY2MwNTYzZmM2Zjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-23T17:37:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-23T17:37:22Z"}, "message": "Auto merge of #1683 - frewsxcv:frewsxcv-nprocessors, r=RalfJung\n\nAdd shim for libc::sysconf(libc::_SC_NPROCESSORS_CONF)\n\n`libc::sysconf(libc::_SC_NPROCESSORS_CONF)` is used by AArch64 devices to get the number of CPUs in the `num_cpus` crate:\n\nhttps://github.com/seanmonstar/num_cpus/blob/b423db0a698b035914ae1fd6b7ce5d2a4e727b46/src/lib.rs#L337-L342", "tree": {"sha": "b3352ff7bd7ac468143b69e21d329c3755e42bd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3352ff7bd7ac468143b69e21d329c3755e42bd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e9bf46b46e8faeb456705a174c83cc0563fc6f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9bf46b46e8faeb456705a174c83cc0563fc6f9", "html_url": "https://github.com/rust-lang/rust/commit/5e9bf46b46e8faeb456705a174c83cc0563fc6f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e9bf46b46e8faeb456705a174c83cc0563fc6f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3ca994a6d8a7866e37a0e2ee7d3d8768d7a76a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ca994a6d8a7866e37a0e2ee7d3d8768d7a76a7", "html_url": "https://github.com/rust-lang/rust/commit/e3ca994a6d8a7866e37a0e2ee7d3d8768d7a76a7"}, {"sha": "7d8f8c405ff069a5e8e3347b8af8e73b8224a911", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8f8c405ff069a5e8e3347b8af8e73b8224a911", "html_url": "https://github.com/rust-lang/rust/commit/7d8f8c405ff069a5e8e3347b8af8e73b8224a911"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "a1f4a0013946117e10356c11bd63dc79a90b1af3", "filename": "ci.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e9bf46b46e8faeb456705a174c83cc0563fc6f9/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5e9bf46b46e8faeb456705a174c83cc0563fc6f9/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=5e9bf46b46e8faeb456705a174c83cc0563fc6f9", "patch": "@@ -47,7 +47,7 @@ run_tests\n case $HOST_TARGET in\n   x86_64-unknown-linux-gnu)\n     MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n-    MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n+    MIRI_TEST_TARGET=aarch64-apple-darwin run_tests\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n     ;;\n   x86_64-apple-darwin)"}, {"sha": "237fb27d9222b0a04a44d77c9a5332ae296d1abc", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e9bf46b46e8faeb456705a174c83cc0563fc6f9/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9bf46b46e8faeb456705a174c83cc0563fc6f9/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=5e9bf46b46e8faeb456705a174c83cc0563fc6f9", "patch": "@@ -484,6 +484,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let &[] = check_arg_count(args)?;\n                 this.yield_active_thread();\n             }\n+            \"llvm.aarch64.hint\" if this.tcx.sess.target.arch == \"aarch64\" => {\n+                let &[hint] = check_arg_count(args)?;\n+                let hint = this.read_scalar(hint)?.to_i32()?;\n+                match hint {\n+                    1 => { // HINT_YIELD\n+                        this.yield_active_thread();\n+                    }\n+                    _ => {\n+                        throw_unsup_format!(\"unsupported llvm.aarch64.hint argument {}\", hint);\n+                    }\n+                }\n+            }\n \n             // Platform-specific shims\n             _ => match this.tcx.sess.target.os.as_str() {"}, {"sha": "f92242f56d9e4a14b7ff781ee3d1aa7124a21a1d", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e9bf46b46e8faeb456705a174c83cc0563fc6f9/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9bf46b46e8faeb456705a174c83cc0563fc6f9/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=5e9bf46b46e8faeb456705a174c83cc0563fc6f9", "patch": "@@ -180,6 +180,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 let sysconfs = &[\n                     (\"_SC_PAGESIZE\", Scalar::from_int(PAGE_SIZE, this.pointer_size())),\n+                    (\"_SC_NPROCESSORS_CONF\", Scalar::from_int(NUM_CPUS, this.pointer_size())),\n                     (\"_SC_NPROCESSORS_ONLN\", Scalar::from_int(NUM_CPUS, this.pointer_size())),\n                 ];\n                 let mut result = None;"}, {"sha": "a4b0ce524df241d2852fb0cd3a0c2d457749c3fd", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e9bf46b46e8faeb456705a174c83cc0563fc6f9/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9bf46b46e8faeb456705a174c83cc0563fc6f9/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=5e9bf46b46e8faeb456705a174c83cc0563fc6f9", "patch": "@@ -25,32 +25,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // File related shims\n-            \"close$NOCANCEL\" => {\n+            \"close\" | \"close$NOCANCEL\" => {\n                 let &[result] = check_arg_count(args)?;\n                 let result = this.close(result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"stat$INODE64\" => {\n+            \"stat\" | \"stat$INODE64\" => {\n                 let &[path, buf] = check_arg_count(args)?;\n                 let result = this.macos_stat(path, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"lstat$INODE64\" => {\n+            \"lstat\" | \"lstat$INODE64\" => {\n                 let &[path, buf] = check_arg_count(args)?;\n                 let result = this.macos_lstat(path, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"fstat$INODE64\" => {\n+            \"fstat\" | \"fstat$INODE64\" => {\n                 let &[fd, buf] = check_arg_count(args)?;\n                 let result = this.macos_fstat(fd, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"opendir$INODE64\" => {\n+            \"opendir\" | \"opendir$INODE64\" => {\n                 let &[name] = check_arg_count(args)?;\n                 let result = this.opendir(name)?;\n                 this.write_scalar(result, dest)?;\n             }\n-            \"readdir_r$INODE64\" => {\n+            \"readdir_r\" | \"readdir_r$INODE64\" => {\n                 let &[dirp, entry, result] = check_arg_count(args)?;\n                 let result = this.macos_readdir_r(dirp, entry, result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;"}]}