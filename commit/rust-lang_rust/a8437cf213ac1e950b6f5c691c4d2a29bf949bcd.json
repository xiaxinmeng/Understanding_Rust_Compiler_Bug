{"sha": "a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NDM3Y2YyMTNhYzFlOTUwYjZmNWM2OTFjNGQyYTI5YmY5NDliY2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-27T08:29:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-27T08:29:24Z"}, "message": "Auto merge of #69507 - JohnTitor:rollup-jqf1gmw, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #69324 (Backport only: avoid ICE on bad placeholder type)\n - #69439 (resolve: `lifetimes.rs` -> `late/lifetimes.rs`)\n - #69473 (update llvm to silence gcc 9 warnings)\n - #69479 (clarify operator precedence)\n - #69480 (Clean up E0373 explanation)\n - #69500 (Simplify the signature of par_for_each_in)\n - #69505 (Enable setting diagnostic labels)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e599cffe76aa80b6d99006590bf1078c1226366b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e599cffe76aa80b6d99006590bf1078c1226366b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "html_url": "https://github.com/rust-lang/rust/commit/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d28560e660168b30af3b58167094aeb299bc2b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28560e660168b30af3b58167094aeb299bc2b58", "html_url": "https://github.com/rust-lang/rust/commit/d28560e660168b30af3b58167094aeb299bc2b58"}, {"sha": "c384acec291e76b99904bdfc7ddc9694fb0d02cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c384acec291e76b99904bdfc7ddc9694fb0d02cf", "html_url": "https://github.com/rust-lang/rust/commit/c384acec291e76b99904bdfc7ddc9694fb0d02cf"}], "stats": {"total": 918, "additions": 589, "deletions": 329}, "files": [{"sha": "aa50e7cdf578d5bae60bd9a5ecb2ed36d502faaf", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -304,7 +304,7 @@ impl<S: Sip> super::Hasher for Hasher<S> {\n \n         if self.ntail != 0 {\n             needed = 8 - self.ntail;\n-            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << 8 * self.ntail;\n+            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);\n             if length < needed {\n                 self.ntail += length;\n                 return;"}, {"sha": "f96bf6c110cec89eab727898ff41b027343aa38e", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -997,7 +997,7 @@ impl SpecializedEncoder<IntEncodedWithFixedSize> for opaque::Encoder {\n     fn specialized_encode(&mut self, x: &IntEncodedWithFixedSize) -> Result<(), Self::Error> {\n         let start_pos = self.position();\n         for i in 0..IntEncodedWithFixedSize::ENCODED_SIZE {\n-            ((x.0 >> i * 8) as u8).encode(self)?;\n+            ((x.0 >> (i * 8)) as u8).encode(self)?;\n         }\n         let end_pos = self.position();\n         assert_eq!((end_pos - start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);"}, {"sha": "beb28dd072058fd4a74d0c5d28d71b3196f9b91f", "filename": "src/librustc_data_structures/sip128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_data_structures%2Fsip128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_data_structures%2Fsip128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsip128.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -274,7 +274,7 @@ impl Hasher for SipHasher128 {\n \n         if self.ntail != 0 {\n             needed = 8 - self.ntail;\n-            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << 8 * self.ntail;\n+            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);\n             if length < needed {\n                 self.ntail += length;\n                 return;"}, {"sha": "9051b1751b119426d2a6101dfe6ee867492834b1", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -203,11 +203,7 @@ cfg_if! {\n             t.into_iter()\n         }\n \n-        pub fn par_for_each_in<T: IntoIterator>(\n-            t: T,\n-            for_each:\n-                impl Fn(<<T as IntoIterator>::IntoIter as Iterator>::Item) + Sync + Send\n-        ) {\n+        pub fn par_for_each_in<T: IntoIterator>(t: T, for_each: impl Fn(T::Item) + Sync + Send) {\n             // We catch panics here ensuring that all the loop iterations execute.\n             // This makes behavior consistent with the parallel compiler.\n             let mut panic = None;\n@@ -397,9 +393,7 @@ cfg_if! {\n \n         pub fn par_for_each_in<T: IntoParallelIterator>(\n             t: T,\n-            for_each: impl Fn(\n-                <<T as IntoParallelIterator>::Iter as ParallelIterator>::Item\n-            ) + Sync + Send\n+            for_each: impl Fn(T::Item) + Sync + Send,\n         ) {\n             t.into_par_iter().for_each(for_each)\n         }"}, {"sha": "fd96987793115a41e9036f355d8ec1fdc15087e4", "filename": "src/librustc_error_codes/error_codes/E0373.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_error_codes%2Ferror_codes%2FE0373.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_error_codes%2Ferror_codes%2FE0373.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0373.md?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -1,6 +1,6 @@\n-This error occurs when an attempt is made to use data captured by a closure,\n-when that data may no longer exist. It's most commonly seen when attempting to\n-return a closure:\n+A captured variable in a closure may not live long enough.\n+\n+Erroneous code example:\n \n ```compile_fail,E0373\n fn foo() -> Box<Fn(u32) -> u32> {\n@@ -9,6 +9,10 @@ fn foo() -> Box<Fn(u32) -> u32> {\n }\n ```\n \n+This error occurs when an attempt is made to use data captured by a closure,\n+when that data may no longer exist. It's most commonly seen when attempting to\n+return a closure as shown in the previous code example.\n+\n Notice that `x` is stack-allocated by `foo()`. By default, Rust captures\n closed-over data by reference. This means that once `foo()` returns, `x` no\n longer exists. An attempt to access `x` within the closure would thus be"}, {"sha": "bf9eeb0b6c5ffbdeace0949a39587ec890ccd07c", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 242, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -6,9 +6,8 @@ use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n-use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -20,7 +19,6 @@ use syntax::ast::{self, Ident, Path};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use crate::imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n-use crate::lifetimes::{ElisionFailureInfo, LifetimeContext};\n use crate::path_names_to_string;\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind};\n use crate::{BindingError, CrateLint, HasGenericParams, LegacyScope, Module, ModuleOrUniformRoot};\n@@ -49,40 +47,6 @@ crate struct ImportSuggestion {\n     pub path: Path,\n }\n \n-crate enum MissingLifetimeSpot<'tcx> {\n-    Generics(&'tcx hir::Generics<'tcx>),\n-    HigherRanked { span: Span, span_type: ForLifetimeSpanType },\n-}\n-\n-crate enum ForLifetimeSpanType {\n-    BoundEmpty,\n-    BoundTail,\n-    TypeEmpty,\n-    TypeTail,\n-}\n-\n-impl ForLifetimeSpanType {\n-    crate fn descr(&self) -> &'static str {\n-        match self {\n-            Self::BoundEmpty | Self::BoundTail => \"bound\",\n-            Self::TypeEmpty | Self::TypeTail => \"type\",\n-        }\n-    }\n-\n-    crate fn suggestion(&self, sugg: &str) -> String {\n-        match self {\n-            Self::BoundEmpty | Self::TypeEmpty => format!(\"for<{}> \", sugg),\n-            Self::BoundTail | Self::TypeTail => format!(\", {}\", sugg),\n-        }\n-    }\n-}\n-\n-impl<'tcx> Into<MissingLifetimeSpot<'tcx>> for &'tcx hir::Generics<'tcx> {\n-    fn into(self) -> MissingLifetimeSpot<'tcx> {\n-        MissingLifetimeSpot::Generics(self)\n-    }\n-}\n-\n /// Adjust the impl span so that just the `impl` keyword is taken by removing\n /// everything after `<` (`\"impl<T> Iterator for A<T> {}\" -> \"impl\"`) and\n /// everything after the first whitespace (`\"impl Iterator for A\" -> \"impl\"`).\n@@ -1491,208 +1455,3 @@ crate fn show_candidates(\n         err.note(&msg);\n     }\n }\n-\n-impl<'tcx> LifetimeContext<'_, 'tcx> {\n-    crate fn report_missing_lifetime_specifiers(\n-        &self,\n-        span: Span,\n-        count: usize,\n-    ) -> DiagnosticBuilder<'tcx> {\n-        struct_span_err!(\n-            self.tcx.sess,\n-            span,\n-            E0106,\n-            \"missing lifetime specifier{}\",\n-            pluralize!(count)\n-        )\n-    }\n-\n-    crate fn emit_undeclared_lifetime_error(&self, lifetime_ref: &hir::Lifetime) {\n-        let mut err = struct_span_err!(\n-            self.tcx.sess,\n-            lifetime_ref.span,\n-            E0261,\n-            \"use of undeclared lifetime name `{}`\",\n-            lifetime_ref\n-        );\n-        err.span_label(lifetime_ref.span, \"undeclared lifetime\");\n-        for missing in &self.missing_named_lifetime_spots {\n-            match missing {\n-                MissingLifetimeSpot::Generics(generics) => {\n-                    let (span, sugg) = if let Some(param) = generics\n-                        .params\n-                        .iter()\n-                        .filter(|p| match p.kind {\n-                            hir::GenericParamKind::Type {\n-                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                ..\n-                            } => false,\n-                            _ => true,\n-                        })\n-                        .next()\n-                    {\n-                        (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n-                    } else {\n-                        (generics.span, format!(\"<{}>\", lifetime_ref))\n-                    };\n-                    err.span_suggestion(\n-                        span,\n-                        &format!(\"consider introducing lifetime `{}` here\", lifetime_ref),\n-                        sugg,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                MissingLifetimeSpot::HigherRanked { span, span_type } => {\n-                    err.span_suggestion(\n-                        *span,\n-                        &format!(\n-                            \"consider making the {} lifetime-generic with a new `{}` lifetime\",\n-                            span_type.descr(),\n-                            lifetime_ref\n-                        ),\n-                        span_type.suggestion(&lifetime_ref.to_string()),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    err.note(\n-                        \"for more information on higher-ranked polymorphism, visit \\\n-                            https://doc.rust-lang.org/nomicon/hrtb.html\",\n-                    );\n-                }\n-            }\n-        }\n-        err.emit();\n-    }\n-\n-    crate fn is_trait_ref_fn_scope(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) -> bool {\n-        if let def::Res::Def(_, did) = trait_ref.trait_ref.path.res {\n-            if [\n-                self.tcx.lang_items().fn_once_trait(),\n-                self.tcx.lang_items().fn_trait(),\n-                self.tcx.lang_items().fn_mut_trait(),\n-            ]\n-            .contains(&Some(did))\n-            {\n-                let (span, span_type) = match &trait_ref.bound_generic_params {\n-                    [] => (trait_ref.span.shrink_to_lo(), ForLifetimeSpanType::BoundEmpty),\n-                    [.., bound] => (bound.span.shrink_to_hi(), ForLifetimeSpanType::BoundTail),\n-                };\n-                self.missing_named_lifetime_spots\n-                    .push(MissingLifetimeSpot::HigherRanked { span, span_type });\n-                return true;\n-            }\n-        };\n-        false\n-    }\n-\n-    crate fn add_missing_lifetime_specifiers_label(\n-        &self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        span: Span,\n-        count: usize,\n-        lifetime_names: &FxHashSet<ast::Ident>,\n-        params: &[ElisionFailureInfo],\n-    ) {\n-        if count > 1 {\n-            err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n-        } else {\n-            let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok();\n-            let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n-                err.span_suggestion(\n-                    span,\n-                    \"consider using the named lifetime\",\n-                    sugg,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            };\n-            let suggest_new =\n-                |err: &mut DiagnosticBuilder<'_>, sugg: &str| {\n-                    err.span_label(span, \"expected named lifetime parameter\");\n-\n-                    for missing in self.missing_named_lifetime_spots.iter().rev() {\n-                        let mut introduce_suggestion = vec![];\n-                        let msg;\n-                        let should_break;\n-                        introduce_suggestion.push(match missing {\n-                        MissingLifetimeSpot::Generics(generics) => {\n-                            msg = \"consider introducing a named lifetime parameter\".to_string();\n-                            should_break = true;\n-                            if let Some(param) = generics.params.iter().filter(|p| match p.kind {\n-                                hir::GenericParamKind::Type {\n-                                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                    ..\n-                                } => false,\n-                                _ => true,\n-                            }).next() {\n-                                (param.span.shrink_to_lo(), \"'a, \".to_string())\n-                            } else {\n-                                (generics.span, \"<'a>\".to_string())\n-                            }\n-                        }\n-                        MissingLifetimeSpot::HigherRanked { span, span_type } => {\n-                            msg = format!(\n-                                \"consider making the {} lifetime-generic with a new `'a` lifetime\",\n-                                span_type.descr(),\n-                            );\n-                            should_break = false;\n-                            err.note(\n-                                \"for more information on higher-ranked polymorphism, visit \\\n-                             https://doc.rust-lang.org/nomicon/hrtb.html\",\n-                            );\n-                            (*span, span_type.suggestion(\"'a\"))\n-                        }\n-                    });\n-                        for param in params {\n-                            if let Ok(snippet) =\n-                                self.tcx.sess.source_map().span_to_snippet(param.span)\n-                            {\n-                                if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n-                                    introduce_suggestion\n-                                        .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n-                                } else if snippet.starts_with(\"&'_ \") {\n-                                    introduce_suggestion\n-                                        .push((param.span, format!(\"&'a {}\", &snippet[4..])));\n-                                }\n-                            }\n-                        }\n-                        introduce_suggestion.push((span, sugg.to_string()));\n-                        err.multipart_suggestion(\n-                            &msg,\n-                            introduce_suggestion,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        if should_break {\n-                            break;\n-                        }\n-                    }\n-                };\n-\n-            match (\n-                lifetime_names.len(),\n-                lifetime_names.iter().next(),\n-                snippet.as_ref().map(|s| s.as_str()),\n-            ) {\n-                (1, Some(name), Some(\"&\")) => {\n-                    suggest_existing(err, format!(\"&{} \", name));\n-                }\n-                (1, Some(name), Some(\"'_\")) => {\n-                    suggest_existing(err, name.to_string());\n-                }\n-                (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n-                    suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n-                }\n-                (0, _, Some(\"&\")) => {\n-                    suggest_new(err, \"&'a \");\n-                }\n-                (0, _, Some(\"'_\")) => {\n-                    suggest_new(err, \"'a\");\n-                }\n-                (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n-                    suggest_new(err, &format!(\"{}<'a>\", snippet));\n-                }\n-                _ => {\n-                    err.span_label(span, \"expected lifetime parameter\");\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "c924fef4dc9d2d1be1e9840e517f6c1c2a93911a", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -32,6 +32,7 @@ use std::collections::BTreeSet;\n use std::mem::replace;\n \n mod diagnostics;\n+crate mod lifetimes;\n \n type Res = def::Res<NodeId>;\n "}, {"sha": "957574cced79ba3d42b4d02f520c3d74ac289e3f", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 242, "deletions": 1, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -1,12 +1,14 @@\n use crate::diagnostics::{ImportSuggestion, TypoSuggestion};\n+use crate::late::lifetimes::{ElisionFailureInfo, LifetimeContext};\n use crate::late::{LateResolutionVisitor, RibKind};\n use crate::path_names_to_string;\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n@@ -28,6 +30,40 @@ enum AssocSuggestion {\n     AssocItem,\n }\n \n+crate enum MissingLifetimeSpot<'tcx> {\n+    Generics(&'tcx hir::Generics<'tcx>),\n+    HigherRanked { span: Span, span_type: ForLifetimeSpanType },\n+}\n+\n+crate enum ForLifetimeSpanType {\n+    BoundEmpty,\n+    BoundTail,\n+    TypeEmpty,\n+    TypeTail,\n+}\n+\n+impl ForLifetimeSpanType {\n+    crate fn descr(&self) -> &'static str {\n+        match self {\n+            Self::BoundEmpty | Self::BoundTail => \"bound\",\n+            Self::TypeEmpty | Self::TypeTail => \"type\",\n+        }\n+    }\n+\n+    crate fn suggestion(&self, sugg: &str) -> String {\n+        match self {\n+            Self::BoundEmpty | Self::TypeEmpty => format!(\"for<{}> \", sugg),\n+            Self::BoundTail | Self::TypeTail => format!(\", {}\", sugg),\n+        }\n+    }\n+}\n+\n+impl<'tcx> Into<MissingLifetimeSpot<'tcx>> for &'tcx hir::Generics<'tcx> {\n+    fn into(self) -> MissingLifetimeSpot<'tcx> {\n+        MissingLifetimeSpot::Generics(self)\n+    }\n+}\n+\n fn is_self_type(path: &[Segment], namespace: Namespace) -> bool {\n     namespace == TypeNS && path.len() == 1 && path[0].ident.name == kw::SelfUpper\n }\n@@ -904,3 +940,208 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         None\n     }\n }\n+\n+impl<'tcx> LifetimeContext<'_, 'tcx> {\n+    crate fn report_missing_lifetime_specifiers(\n+        &self,\n+        span: Span,\n+        count: usize,\n+    ) -> DiagnosticBuilder<'tcx> {\n+        struct_span_err!(\n+            self.tcx.sess,\n+            span,\n+            E0106,\n+            \"missing lifetime specifier{}\",\n+            pluralize!(count)\n+        )\n+    }\n+\n+    crate fn emit_undeclared_lifetime_error(&self, lifetime_ref: &hir::Lifetime) {\n+        let mut err = struct_span_err!(\n+            self.tcx.sess,\n+            lifetime_ref.span,\n+            E0261,\n+            \"use of undeclared lifetime name `{}`\",\n+            lifetime_ref\n+        );\n+        err.span_label(lifetime_ref.span, \"undeclared lifetime\");\n+        for missing in &self.missing_named_lifetime_spots {\n+            match missing {\n+                MissingLifetimeSpot::Generics(generics) => {\n+                    let (span, sugg) = if let Some(param) = generics\n+                        .params\n+                        .iter()\n+                        .filter(|p| match p.kind {\n+                            hir::GenericParamKind::Type {\n+                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                                ..\n+                            } => false,\n+                            _ => true,\n+                        })\n+                        .next()\n+                    {\n+                        (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n+                    } else {\n+                        (generics.span, format!(\"<{}>\", lifetime_ref))\n+                    };\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\"consider introducing lifetime `{}` here\", lifetime_ref),\n+                        sugg,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                MissingLifetimeSpot::HigherRanked { span, span_type } => {\n+                    err.span_suggestion(\n+                        *span,\n+                        &format!(\n+                            \"consider making the {} lifetime-generic with a new `{}` lifetime\",\n+                            span_type.descr(),\n+                            lifetime_ref\n+                        ),\n+                        span_type.suggestion(&lifetime_ref.to_string()),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    err.note(\n+                        \"for more information on higher-ranked polymorphism, visit \\\n+                            https://doc.rust-lang.org/nomicon/hrtb.html\",\n+                    );\n+                }\n+            }\n+        }\n+        err.emit();\n+    }\n+\n+    crate fn is_trait_ref_fn_scope(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) -> bool {\n+        if let def::Res::Def(_, did) = trait_ref.trait_ref.path.res {\n+            if [\n+                self.tcx.lang_items().fn_once_trait(),\n+                self.tcx.lang_items().fn_trait(),\n+                self.tcx.lang_items().fn_mut_trait(),\n+            ]\n+            .contains(&Some(did))\n+            {\n+                let (span, span_type) = match &trait_ref.bound_generic_params {\n+                    [] => (trait_ref.span.shrink_to_lo(), ForLifetimeSpanType::BoundEmpty),\n+                    [.., bound] => (bound.span.shrink_to_hi(), ForLifetimeSpanType::BoundTail),\n+                };\n+                self.missing_named_lifetime_spots\n+                    .push(MissingLifetimeSpot::HigherRanked { span, span_type });\n+                return true;\n+            }\n+        };\n+        false\n+    }\n+\n+    crate fn add_missing_lifetime_specifiers_label(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        span: Span,\n+        count: usize,\n+        lifetime_names: &FxHashSet<ast::Ident>,\n+        params: &[ElisionFailureInfo],\n+    ) {\n+        if count > 1 {\n+            err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n+        } else {\n+            let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok();\n+            let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+                err.span_suggestion(\n+                    span,\n+                    \"consider using the named lifetime\",\n+                    sugg,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            };\n+            let suggest_new =\n+                |err: &mut DiagnosticBuilder<'_>, sugg: &str| {\n+                    err.span_label(span, \"expected named lifetime parameter\");\n+\n+                    for missing in self.missing_named_lifetime_spots.iter().rev() {\n+                        let mut introduce_suggestion = vec![];\n+                        let msg;\n+                        let should_break;\n+                        introduce_suggestion.push(match missing {\n+                        MissingLifetimeSpot::Generics(generics) => {\n+                            msg = \"consider introducing a named lifetime parameter\".to_string();\n+                            should_break = true;\n+                            if let Some(param) = generics.params.iter().filter(|p| match p.kind {\n+                                hir::GenericParamKind::Type {\n+                                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                                    ..\n+                                } => false,\n+                                _ => true,\n+                            }).next() {\n+                                (param.span.shrink_to_lo(), \"'a, \".to_string())\n+                            } else {\n+                                (generics.span, \"<'a>\".to_string())\n+                            }\n+                        }\n+                        MissingLifetimeSpot::HigherRanked { span, span_type } => {\n+                            msg = format!(\n+                                \"consider making the {} lifetime-generic with a new `'a` lifetime\",\n+                                span_type.descr(),\n+                            );\n+                            should_break = false;\n+                            err.note(\n+                                \"for more information on higher-ranked polymorphism, visit \\\n+                             https://doc.rust-lang.org/nomicon/hrtb.html\",\n+                            );\n+                            (*span, span_type.suggestion(\"'a\"))\n+                        }\n+                    });\n+                        for param in params {\n+                            if let Ok(snippet) =\n+                                self.tcx.sess.source_map().span_to_snippet(param.span)\n+                            {\n+                                if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n+                                    introduce_suggestion\n+                                        .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n+                                } else if snippet.starts_with(\"&'_ \") {\n+                                    introduce_suggestion\n+                                        .push((param.span, format!(\"&'a {}\", &snippet[4..])));\n+                                }\n+                            }\n+                        }\n+                        introduce_suggestion.push((span, sugg.to_string()));\n+                        err.multipart_suggestion(\n+                            &msg,\n+                            introduce_suggestion,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        if should_break {\n+                            break;\n+                        }\n+                    }\n+                };\n+\n+            match (\n+                lifetime_names.len(),\n+                lifetime_names.iter().next(),\n+                snippet.as_ref().map(|s| s.as_str()),\n+            ) {\n+                (1, Some(name), Some(\"&\")) => {\n+                    suggest_existing(err, format!(\"&{} \", name));\n+                }\n+                (1, Some(name), Some(\"'_\")) => {\n+                    suggest_existing(err, name.to_string());\n+                }\n+                (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n+                    suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n+                }\n+                (0, _, Some(\"&\")) => {\n+                    suggest_new(err, \"&'a \");\n+                }\n+                (0, _, Some(\"'_\")) => {\n+                    suggest_new(err, \"'a\");\n+                }\n+                (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n+                    suggest_new(err, &format!(\"{}<'a>\", snippet));\n+                }\n+                _ => {\n+                    err.span_label(span, \"expected lifetime parameter\");\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "478757f0db737a6ff653603b8e9c72db7d8639df", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -5,7 +5,7 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n-use crate::diagnostics::{ForLifetimeSpanType, MissingLifetimeSpot};\n+use crate::late::diagnostics::{ForLifetimeSpanType, MissingLifetimeSpot};\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::resolve_lifetime::*;", "previous_filename": "src/librustc_resolve/lifetimes.rs"}, {"sha": "ebd3f8b832bf11c99a43801a4055e862db8b636c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -68,7 +68,6 @@ mod def_collector;\n mod diagnostics;\n mod imports;\n mod late;\n-mod lifetimes;\n mod macros;\n \n enum Weak {\n@@ -2959,5 +2958,5 @@ impl CrateLint {\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n-    lifetimes::provide(providers);\n+    late::lifetimes::provide(providers);\n }"}, {"sha": "61aa8e51cb07f8e76394be4e080489eedf9dd66e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -320,7 +320,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn ty_infer(&self, _: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n-        self.tcx().sess.delay_span_bug(span, \"bad placeholder type\");\n+        placeholder_type_error(self.tcx(), span, &[], vec![span], false);\n         self.tcx().types.err\n     }\n "}, {"sha": "9f65ad057357b307180955831968f79e74090a90", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -1 +1 @@\n-Subproject commit 73cf98d8656736781e3ea667011d2aefc21f521e\n+Subproject commit 9f65ad057357b307180955831968f79e74090a90"}, {"sha": "f02931eeb6fc30d4b9267f09571ce463b68208d5", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -17,6 +17,7 @@ type D = (u8, u8)::AssocTy;\n type E = _::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n type F = &'static (u8)::AssocTy;\n //~^ ERROR missing angle brackets in associated item path"}, {"sha": "d5b2abf2f8b5014e550e0698a576998f50c84f00", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -29,25 +29,25 @@ LL | type E = _::AssocTy;\n    |          ^^^^^^^^^^ help: try: `<_>::AssocTy`\n \n error: missing angle brackets in associated item path\n-  --> $DIR/bad-assoc-ty.rs:21:19\n+  --> $DIR/bad-assoc-ty.rs:22:19\n    |\n LL | type F = &'static (u8)::AssocTy;\n    |                   ^^^^^^^^^^^^^ help: try: `<(u8)>::AssocTy`\n \n error: missing angle brackets in associated item path\n-  --> $DIR/bad-assoc-ty.rs:27:10\n+  --> $DIR/bad-assoc-ty.rs:28:10\n    |\n LL | type G = dyn 'static + (Send)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<dyn 'static + (Send)>::AssocTy`\n \n error: missing angle brackets in associated item path\n-  --> $DIR/bad-assoc-ty.rs:44:10\n+  --> $DIR/bad-assoc-ty.rs:45:10\n    |\n LL | type I = ty!()::AssocTy;\n    |          ^^^^^^^^^^^^^^ help: try: `<ty!()>::AssocTy`\n \n error: missing angle brackets in associated item path\n-  --> $DIR/bad-assoc-ty.rs:37:19\n+  --> $DIR/bad-assoc-ty.rs:38:19\n    |\n LL |     ($ty: ty) => ($ty::AssocTy);\n    |                   ^^^^^^^^^^^^ help: try: `<$ty>::AssocTy`\n@@ -87,26 +87,32 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n LL | type E = _::AssocTy;\n    |          ^ not allowed in type signatures\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:17:10\n+   |\n+LL | type E = _::AssocTy;\n+   |          ^ not allowed in type signatures\n+\n error[E0223]: ambiguous associated type\n-  --> $DIR/bad-assoc-ty.rs:21:19\n+  --> $DIR/bad-assoc-ty.rs:22:19\n    |\n LL | type F = &'static (u8)::AssocTy;\n    |                   ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/bad-assoc-ty.rs:27:10\n+  --> $DIR/bad-assoc-ty.rs:28:10\n    |\n LL | type G = dyn 'static + (Send)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn std::marker::Send + 'static) as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/bad-assoc-ty.rs:33:10\n+  --> $DIR/bad-assoc-ty.rs:34:10\n    |\n LL | type H = Fn(u8) -> (u8)::Output;\n    |          ^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(dyn std::ops::Fn(u8) -> u8 + 'static) as Trait>::Output`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/bad-assoc-ty.rs:37:19\n+  --> $DIR/bad-assoc-ty.rs:38:19\n    |\n LL |     ($ty: ty) => ($ty::AssocTy);\n    |                   ^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n@@ -117,12 +123,12 @@ LL | type J = ty!(u8);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/bad-assoc-ty.rs:44:10\n+  --> $DIR/bad-assoc-ty.rs:45:10\n    |\n LL | type I = ty!()::AssocTy;\n    |          ^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 20 previous errors\n \n Some errors have detailed explanations: E0121, E0223.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "77c80521236a0e7bae49e05e70f33a1f4aea7e41", "filename": "src/test/ui/self/self-infer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Fself%2Fself-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Fself%2Fself-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-infer.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -2,7 +2,9 @@ struct S;\n \n impl S {\n     fn f(self: _) {} //~ERROR the type placeholder `_` is not allowed within types on item sig\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item sig\n     fn g(self: &_) {} //~ERROR the type placeholder `_` is not allowed within types on item sig\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item sig\n }\n \n fn main() {}"}, {"sha": "d6bf8b44d6099d523dba36928c0b2b14785e5400", "filename": "src/test/ui/self/self-infer.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -1,3 +1,9 @@\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/self-infer.rs:4:16\n+   |\n+LL |     fn f(self: _) {}\n+   |                ^ not allowed in type signatures\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/self-infer.rs:4:16\n    |\n@@ -10,7 +16,13 @@ LL |     fn f<T>(self: T) {}\n    |         ^^^       ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/self-infer.rs:5:17\n+  --> $DIR/self-infer.rs:6:17\n+   |\n+LL |     fn g(self: &_) {}\n+   |                 ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/self-infer.rs:6:17\n    |\n LL |     fn g(self: &_) {}\n    |                 ^ not allowed in type signatures\n@@ -20,6 +32,6 @@ help: use type parameters instead\n LL |     fn g<T>(self: &T) {}\n    |         ^^^        ^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0121`."}, {"sha": "eb6cc832fb41738a7267b2554a5160217b4c8ed6", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -19,19 +19,24 @@ static TEST5: (_, _) = (1, 2);\n \n fn test6(_: _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn test6_b<T>(_: _, _: T) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn test7(x: _) { let _x: usize = x; }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn test8(_f: fn() -> _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n struct Test9;\n \n@@ -41,6 +46,7 @@ impl Test9 {\n \n     fn test10(&self, _x : _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n \n fn test11(x: &usize) -> &_ {\n@@ -59,12 +65,16 @@ impl Clone for Test9 {\n \n     fn clone_from(&mut self, other: _) { *self = Test9; }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n \n struct Test10 {\n     a: _,\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     b: (_, _),\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n \n pub fn main() {\n@@ -92,13 +102,16 @@ pub fn main() {\n \n     fn fn_test6(_: _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     fn fn_test7(x: _) { let _x: usize = x; }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     fn fn_test8(_f: fn() -> _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     struct FnTest9;\n \n@@ -108,6 +121,7 @@ pub fn main() {\n \n         fn fn_test10(&self, _x : _) { }\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     }\n \n     impl Clone for FnTest9 {\n@@ -116,12 +130,16 @@ pub fn main() {\n \n         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     }\n \n     struct FnTest10 {\n         a: _,\n         //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n         b: (_, _),\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     }\n \n     fn fn_test11(_: _) -> (_, _) { panic!() }\n@@ -138,28 +156,40 @@ pub fn main() {\n trait T {\n     fn method_test1(&self, x: _);\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     fn method_test2(&self, x: _) -> _;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     fn method_test3(&self) -> _;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     fn assoc_fn_test1(x: _);\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     fn assoc_fn_test2(x: _) -> _;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     fn assoc_fn_test3() -> _;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n \n struct BadStruct<_>(_);\n //~^ ERROR expected identifier, found reserved identifier `_`\n //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n trait BadTrait<_> {}\n //~^ ERROR expected identifier, found reserved identifier `_`\n impl BadTrait<_> for BadStruct<_> {}\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn impl_trait() -> impl BadTrait<_> {\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     unimplemented!()\n }\n \n@@ -168,18 +198,22 @@ struct BadStruct1<_, _>(_);\n //~| ERROR expected identifier, found reserved identifier `_`\n //~| ERROR the name `_` is already used\n //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n struct BadStruct2<_, T>(_, T);\n //~^ ERROR expected identifier, found reserved identifier `_`\n //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n type X = Box<_>;\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n struct Struct;\n trait Trait<T> {}\n impl Trait<usize> for Struct {}\n type Y = impl Trait<_>;\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n fn foo() -> Y {\n     Struct\n }"}, {"sha": "a8fdd66ee375387ee63d02157821758de3fcf405", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 261, "deletions": 55, "changes": 316, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -1,35 +1,35 @@\n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:153:18\n+  --> $DIR/typeck_type_placeholder_item.rs:179:18\n    |\n LL | struct BadStruct<_>(_);\n    |                  ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:156:16\n+  --> $DIR/typeck_type_placeholder_item.rs:183:16\n    |\n LL | trait BadTrait<_> {}\n    |                ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:166:19\n+  --> $DIR/typeck_type_placeholder_item.rs:196:19\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:166:22\n+  --> $DIR/typeck_type_placeholder_item.rs:196:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                      ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:171:19\n+  --> $DIR/typeck_type_placeholder_item.rs:202:19\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                   ^ expected identifier, found reserved identifier\n \n error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/typeck_type_placeholder_item.rs:166:22\n+  --> $DIR/typeck_type_placeholder_item.rs:196:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   -  ^ already used\n@@ -79,6 +79,12 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n LL | static TEST5: (_, _) = (1, 2);\n    |               ^^^^^^ not allowed in type signatures\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:20:13\n+   |\n+LL | fn test6(_: _) { }\n+   |             ^ not allowed in type signatures\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:20:13\n    |\n@@ -91,7 +97,13 @@ LL | fn test6<T>(_: T) { }\n    |         ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:23:18\n+  --> $DIR/typeck_type_placeholder_item.rs:24:18\n+   |\n+LL | fn test6_b<T>(_: _, _: T) { }\n+   |                  ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:24:18\n    |\n LL | fn test6_b<T>(_: _, _: T) { }\n    |                  ^ not allowed in type signatures\n@@ -102,7 +114,13 @@ LL | fn test6_b<T, K>(_: K, _: T) { }\n    |             ^^^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:26:30\n+  --> $DIR/typeck_type_placeholder_item.rs:28:30\n+   |\n+LL | fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n+   |                              ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:28:30\n    |\n LL | fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n    |                              ^ not allowed in type signatures\n@@ -113,7 +131,13 @@ LL | fn test6_c<T, K, L, A, B, C>(_: C, _: (T, K, L, A, B)) { }\n    |                         ^^^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:29:13\n+  --> $DIR/typeck_type_placeholder_item.rs:32:13\n+   |\n+LL | fn test7(x: _) { let _x: usize = x; }\n+   |             ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:32:13\n    |\n LL | fn test7(x: _) { let _x: usize = x; }\n    |             ^ not allowed in type signatures\n@@ -124,13 +148,19 @@ LL | fn test7<T>(x: T) { let _x: usize = x; }\n    |         ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:32:22\n+  --> $DIR/typeck_type_placeholder_item.rs:36:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n    |                      ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:32:22\n+  --> $DIR/typeck_type_placeholder_item.rs:36:22\n+   |\n+LL | fn test8(_f: fn() -> _) { }\n+   |                      ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:36:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n    |                      ^ not allowed in type signatures\n@@ -141,7 +171,61 @@ LL | fn test8<T>(_f: fn() -> T) { }\n    |         ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:46:26\n+  --> $DIR/typeck_type_placeholder_item.rs:72:8\n+   |\n+LL |     a: _,\n+   |        ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:75:9\n+   |\n+LL |     b: (_, _),\n+   |         ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:75:12\n+   |\n+LL |     b: (_, _),\n+   |            ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:137:12\n+   |\n+LL |         a: _,\n+   |            ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:140:13\n+   |\n+LL |         b: (_, _),\n+   |             ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:140:16\n+   |\n+LL |         b: (_, _),\n+   |                ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:179:21\n+   |\n+LL | struct BadStruct<_>(_);\n+   |                     ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:196:25\n+   |\n+LL | struct BadStruct1<_, _>(_);\n+   |                         ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:202:25\n+   |\n+LL | struct BadStruct2<_, T>(_, T);\n+   |                         ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:52:26\n    |\n LL | fn test11(x: &usize) -> &_ {\n    |                         -^\n@@ -150,7 +234,7 @@ LL | fn test11(x: &usize) -> &_ {\n    |                         help: replace with the correct return type: `&&usize`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:51:52\n+  --> $DIR/typeck_type_placeholder_item.rs:57:52\n    |\n LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      --------------^\n@@ -159,11 +243,11 @@ LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      help: replace with the correct return type: `*const *const usize`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:65:8\n+  --> $DIR/typeck_type_placeholder_item.rs:72:8\n    |\n LL |     a: _,\n    |        ^ not allowed in type signatures\n-LL |\n+...\n LL |     b: (_, _),\n    |         ^  ^ not allowed in type signatures\n    |         |\n@@ -174,17 +258,18 @@ help: use type parameters instead\n LL | struct Test10<T> {\n LL |     a: T,\n LL |\n+LL |\n LL |     b: (T, T),\n    |\n \n error: missing type for `static` item\n-  --> $DIR/typeck_type_placeholder_item.rs:71:12\n+  --> $DIR/typeck_type_placeholder_item.rs:81:12\n    |\n LL |     static A = 42;\n    |            ^ help: provide a type for the item: `A: i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:73:15\n+  --> $DIR/typeck_type_placeholder_item.rs:83:15\n    |\n LL |     static B: _ = 42;\n    |               ^\n@@ -193,13 +278,13 @@ LL |     static B: _ = 42;\n    |               help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:75:15\n+  --> $DIR/typeck_type_placeholder_item.rs:85:15\n    |\n LL |     static C: Option<_> = Some(42);\n    |               ^^^^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:78:21\n+  --> $DIR/typeck_type_placeholder_item.rs:88:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n    |                     ^\n@@ -208,7 +293,7 @@ LL |     fn fn_test() -> _ { 5 }\n    |                     help: replace with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:81:23\n+  --> $DIR/typeck_type_placeholder_item.rs:91:23\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      -^--^-\n@@ -218,7 +303,7 @@ LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:84:22\n+  --> $DIR/typeck_type_placeholder_item.rs:94:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n@@ -227,7 +312,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:87:22\n+  --> $DIR/typeck_type_placeholder_item.rs:97:22\n    |\n LL |     static FN_TEST4: _ = 145;\n    |                      ^\n@@ -236,13 +321,19 @@ LL |     static FN_TEST4: _ = 145;\n    |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:90:22\n+  --> $DIR/typeck_type_placeholder_item.rs:100:22\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n    |                      ^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:93:20\n+  --> $DIR/typeck_type_placeholder_item.rs:103:20\n+   |\n+LL |     fn fn_test6(_: _) { }\n+   |                    ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:103:20\n    |\n LL |     fn fn_test6(_: _) { }\n    |                    ^ not allowed in type signatures\n@@ -253,7 +344,13 @@ LL |     fn fn_test6<T>(_: T) { }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:96:20\n+  --> $DIR/typeck_type_placeholder_item.rs:107:20\n+   |\n+LL |     fn fn_test7(x: _) { let _x: usize = x; }\n+   |                    ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:107:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n    |                    ^ not allowed in type signatures\n@@ -264,13 +361,19 @@ LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:99:29\n+  --> $DIR/typeck_type_placeholder_item.rs:111:29\n+   |\n+LL |     fn fn_test8(_f: fn() -> _) { }\n+   |                             ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:111:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:99:29\n+  --> $DIR/typeck_type_placeholder_item.rs:111:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n@@ -281,11 +384,11 @@ LL |     fn fn_test8<T>(_f: fn() -> T) { }\n    |                ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:122:12\n+  --> $DIR/typeck_type_placeholder_item.rs:137:12\n    |\n LL |         a: _,\n    |            ^ not allowed in type signatures\n-LL |\n+...\n LL |         b: (_, _),\n    |             ^  ^ not allowed in type signatures\n    |             |\n@@ -296,25 +399,26 @@ help: use type parameters instead\n LL |     struct FnTest10<T> {\n LL |         a: T,\n LL |\n+LL |\n LL |         b: (T, T),\n    |\n \n error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:127:18\n+  --> $DIR/typeck_type_placeholder_item.rs:145:18\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                  ^ cannot infer type\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:127:28\n+  --> $DIR/typeck_type_placeholder_item.rs:145:28\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                            ^  ^ not allowed in type signatures\n    |                            |\n    |                            not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:131:30\n+  --> $DIR/typeck_type_placeholder_item.rs:149:30\n    |\n LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             -^--^-\n@@ -324,7 +428,7 @@ LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:134:33\n+  --> $DIR/typeck_type_placeholder_item.rs:152:33\n    |\n LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           ------^-\n@@ -333,7 +437,7 @@ LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:153:21\n+  --> $DIR/typeck_type_placeholder_item.rs:179:21\n    |\n LL | struct BadStruct<_>(_);\n    |                     ^ not allowed in type signatures\n@@ -344,7 +448,19 @@ LL | struct BadStruct<T>(T);\n    |                  ^  ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:158:15\n+  --> $DIR/typeck_type_placeholder_item.rs:185:32\n+   |\n+LL | impl BadTrait<_> for BadStruct<_> {}\n+   |                                ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:185:15\n+   |\n+LL | impl BadTrait<_> for BadStruct<_> {}\n+   |               ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:185:15\n    |\n LL | impl BadTrait<_> for BadStruct<_> {}\n    |               ^                ^ not allowed in type signatures\n@@ -357,13 +473,13 @@ LL | impl<T> BadTrait<T> for BadStruct<T> {}\n    |     ^^^          ^                ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:161:34\n+  --> $DIR/typeck_type_placeholder_item.rs:190:34\n    |\n LL | fn impl_trait() -> impl BadTrait<_> {\n    |                                  ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:166:25\n+  --> $DIR/typeck_type_placeholder_item.rs:196:25\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                         ^ not allowed in type signatures\n@@ -374,7 +490,7 @@ LL | struct BadStruct1<T, _>(T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:171:25\n+  --> $DIR/typeck_type_placeholder_item.rs:202:25\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                         ^ not allowed in type signatures\n@@ -385,13 +501,25 @@ LL | struct BadStruct2<K, T>(K, T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:175:14\n+  --> $DIR/typeck_type_placeholder_item.rs:207:14\n    |\n LL | type X = Box<_>;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:42:27\n+  --> $DIR/typeck_type_placeholder_item.rs:207:14\n+   |\n+LL | type X = Box<_>;\n+   |              ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:47:27\n+   |\n+LL |     fn test10(&self, _x : _) { }\n+   |                           ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:47:27\n    |\n LL |     fn test10(&self, _x : _) { }\n    |                           ^ not allowed in type signatures\n@@ -402,7 +530,13 @@ LL |     fn test10<T>(&self, _x : T) { }\n    |              ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:139:31\n+  --> $DIR/typeck_type_placeholder_item.rs:157:31\n+   |\n+LL |     fn method_test1(&self, x: _);\n+   |                               ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:157:31\n    |\n LL |     fn method_test1(&self, x: _);\n    |                               ^ not allowed in type signatures\n@@ -413,7 +547,19 @@ LL |     fn method_test1<T>(&self, x: T);\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:141:31\n+  --> $DIR/typeck_type_placeholder_item.rs:160:37\n+   |\n+LL |     fn method_test2(&self, x: _) -> _;\n+   |                                     ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:160:31\n+   |\n+LL |     fn method_test2(&self, x: _) -> _;\n+   |                               ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:160:31\n    |\n LL |     fn method_test2(&self, x: _) -> _;\n    |                               ^     ^ not allowed in type signatures\n@@ -426,7 +572,13 @@ LL |     fn method_test2<T>(&self, x: T) -> T;\n    |                    ^^^           ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:143:31\n+  --> $DIR/typeck_type_placeholder_item.rs:164:31\n+   |\n+LL |     fn method_test3(&self) -> _;\n+   |                               ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:164:31\n    |\n LL |     fn method_test3(&self) -> _;\n    |                               ^ not allowed in type signatures\n@@ -437,7 +589,13 @@ LL |     fn method_test3<T>(&self) -> T;\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:145:26\n+  --> $DIR/typeck_type_placeholder_item.rs:167:26\n+   |\n+LL |     fn assoc_fn_test1(x: _);\n+   |                          ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:167:26\n    |\n LL |     fn assoc_fn_test1(x: _);\n    |                          ^ not allowed in type signatures\n@@ -448,7 +606,19 @@ LL |     fn assoc_fn_test1<T>(x: T);\n    |                      ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:147:26\n+  --> $DIR/typeck_type_placeholder_item.rs:170:32\n+   |\n+LL |     fn assoc_fn_test2(x: _) -> _;\n+   |                                ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:170:26\n+   |\n+LL |     fn assoc_fn_test2(x: _) -> _;\n+   |                          ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:170:26\n    |\n LL |     fn assoc_fn_test2(x: _) -> _;\n    |                          ^     ^ not allowed in type signatures\n@@ -461,7 +631,13 @@ LL |     fn assoc_fn_test2<T>(x: T) -> T;\n    |                      ^^^    ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:149:28\n+  --> $DIR/typeck_type_placeholder_item.rs:174:28\n+   |\n+LL |     fn assoc_fn_test3() -> _;\n+   |                            ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:174:28\n    |\n LL |     fn assoc_fn_test3() -> _;\n    |                            ^ not allowed in type signatures\n@@ -472,7 +648,13 @@ LL |     fn assoc_fn_test3<T>() -> T;\n    |                      ^^^      ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:60:37\n+  --> $DIR/typeck_type_placeholder_item.rs:66:37\n+   |\n+LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n+   |                                     ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:66:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n    |                                     ^ not allowed in type signatures\n@@ -483,7 +665,13 @@ LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n    |                  ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:109:34\n+  --> $DIR/typeck_type_placeholder_item.rs:122:34\n+   |\n+LL |         fn fn_test10(&self, _x : _) { }\n+   |                                  ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:122:34\n    |\n LL |         fn fn_test10(&self, _x : _) { }\n    |                                  ^ not allowed in type signatures\n@@ -494,7 +682,13 @@ LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:117:41\n+  --> $DIR/typeck_type_placeholder_item.rs:131:41\n+   |\n+LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n+   |                                         ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:131:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n    |                                         ^ not allowed in type signatures\n@@ -505,13 +699,25 @@ LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:181:21\n+  --> $DIR/typeck_type_placeholder_item.rs:190:34\n+   |\n+LL | fn impl_trait() -> impl BadTrait<_> {\n+   |                                  ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:214:21\n+   |\n+LL | type Y = impl Trait<_>;\n+   |                     ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:214:21\n    |\n LL | type Y = impl Trait<_>;\n    |                     ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:39:24\n+  --> $DIR/typeck_type_placeholder_item.rs:44:24\n    |\n LL |     fn test9(&self) -> _ { () }\n    |                        ^\n@@ -520,7 +726,7 @@ LL |     fn test9(&self) -> _ { () }\n    |                        help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:57:24\n+  --> $DIR/typeck_type_placeholder_item.rs:63:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n    |                        ^\n@@ -529,7 +735,7 @@ LL |     fn clone(&self) -> _ { Test9 }\n    |                        help: replace with the correct return type: `Test9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:106:31\n+  --> $DIR/typeck_type_placeholder_item.rs:119:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n    |                               ^\n@@ -538,15 +744,15 @@ LL |         fn fn_test9(&self) -> _ { () }\n    |                               help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:114:28\n+  --> $DIR/typeck_type_placeholder_item.rs:128:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            ^\n    |                            |\n    |                            not allowed in type signatures\n    |                            help: replace with the correct return type: `main::FnTest9`\n \n-error: aborting due to 58 previous errors\n+error: aborting due to 92 previous errors\n \n Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "a174dd1e7f3fe4815de097037d36d160b8e2e23e", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a8437cf213ac1e950b6f5c691c4d2a29bf949bcd/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=a8437cf213ac1e950b6f5c691c4d2a29bf949bcd", "patch": "@@ -1,6 +1,7 @@\n [relabel]\n allow-unauthenticated = [\n     \"C-*\", \"A-*\", \"E-*\", \"NLL-*\", \"O-*\", \"S-*\", \"T-*\", \"WG-*\", \"F-*\",\n+    \"D-*\",\n     \"requires-nightly\",\n     # I-* without I-nominated\n     \"I-*\", \"!I-nominated\","}]}