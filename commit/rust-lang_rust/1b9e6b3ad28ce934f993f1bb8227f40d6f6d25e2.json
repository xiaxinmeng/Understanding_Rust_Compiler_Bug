{"sha": "1b9e6b3ad28ce934f993f1bb8227f40d6f6d25e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOWU2YjNhZDI4Y2U5MzRmOTkzZjFiYjgyMjdmNDBkNmY2ZDI1ZTI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-25T03:59:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-25T04:12:40Z"}, "message": "Bind tag members as aliases rather than new locals.", "tree": {"sha": "3d08a2ec084e9043c9345586ef4df86c343b81f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d08a2ec084e9043c9345586ef4df86c343b81f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b9e6b3ad28ce934f993f1bb8227f40d6f6d25e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9e6b3ad28ce934f993f1bb8227f40d6f6d25e2", "html_url": "https://github.com/rust-lang/rust/commit/1b9e6b3ad28ce934f993f1bb8227f40d6f6d25e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b9e6b3ad28ce934f993f1bb8227f40d6f6d25e2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe21b5af04166e65ef99828c8b5f4ff5783632a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe21b5af04166e65ef99828c8b5f4ff5783632a", "html_url": "https://github.com/rust-lang/rust/commit/5fe21b5af04166e65ef99828c8b5f4ff5783632a"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "b294ffebb954b7431cd8d566f052203f804c141c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1b9e6b3ad28ce934f993f1bb8227f40d6f6d25e2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9e6b3ad28ce934f993f1bb8227f40d6f6d25e2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1b9e6b3ad28ce934f993f1bb8227f40d6f6d25e2", "patch": "@@ -3752,24 +3752,27 @@ fn trans_pat_match(@block_ctxt cx, @ast.pat pat, ValueRef llval,\n     fail;\n }\n \n-fn trans_pat_binding(@block_ctxt cx, @ast.pat pat, ValueRef llval)\n+fn trans_pat_binding(@block_ctxt cx, @ast.pat pat,\n+                     ValueRef llval, bool bind_alias)\n     -> result {\n     alt (pat.node) {\n         case (ast.pat_wild(_)) { ret res(cx, llval); }\n         case (ast.pat_lit(_, _)) { ret res(cx, llval); }\n         case (ast.pat_bind(?id, ?def_id, ?ann)) {\n-            auto ty = node_ann_type(cx.fcx.lcx.ccx, ann);\n-\n-            auto rslt = alloc_ty(cx, ty);\n-            auto dst = rslt.val;\n-            auto bcx = rslt.bcx;\n-\n-            llvm.LLVMSetValueName(dst, _str.buf(id));\n-            bcx.fcx.lllocals.insert(def_id, dst);\n-            bcx.cleanups +=\n-                vec(clean(bind drop_slot(_, dst, ty)));\n-\n-            ret copy_ty(bcx, INIT, dst, llval, ty);\n+            if (bind_alias) {\n+                cx.fcx.lllocals.insert(def_id, llval);\n+                ret res(cx, llval);\n+            } else {\n+                auto t = node_ann_type(cx.fcx.lcx.ccx, ann);\n+                auto rslt = alloc_ty(cx, t);\n+                auto dst = rslt.val;\n+                auto bcx = rslt.bcx;\n+                llvm.LLVMSetValueName(dst, _str.buf(id));\n+                bcx.fcx.lllocals.insert(def_id, dst);\n+                bcx.cleanups +=\n+                    vec(clean(bind drop_slot(_, dst, t)));\n+                ret copy_ty(bcx, INIT, dst, llval, t);\n+            }\n         }\n         case (ast.pat_tag(_, ?subpats, ?vdef_opt, ?ann)) {\n             if (_vec.len[@ast.pat](subpats) == 0u) { ret res(cx, llval); }\n@@ -3789,12 +3792,8 @@ fn trans_pat_binding(@block_ctxt cx, @ast.pat pat, ValueRef llval)\n                 auto rslt = GEP_tag(this_cx, llblobptr, vdef._0, vdef._1,\n                                     ty_param_substs, i);\n                 this_cx = rslt.bcx;\n-                auto llsubvalptr = rslt.val;\n-\n-                auto llsubval = load_if_immediate(this_cx, llsubvalptr,\n-                    pat_ty(cx.fcx.lcx.ccx.tystore, subpat));\n                 auto subpat_res = trans_pat_binding(this_cx, subpat,\n-                                                    llsubval);\n+                                                    rslt.val, true);\n                 this_cx = subpat_res.bcx;\n                 i += 1;\n             }\n@@ -3819,7 +3818,7 @@ fn trans_alt(@block_ctxt cx, @ast.expr expr,\n         match_res.bcx.build.Br(binding_cx.llbb);\n \n         auto binding_res = trans_pat_binding(binding_cx, arm.pat,\n-                                             expr_res.val);\n+                                             expr_res.val, false);\n \n         auto block_res = trans_block(binding_res.bcx, arm.block);\n         arm_results += vec(block_res);"}]}