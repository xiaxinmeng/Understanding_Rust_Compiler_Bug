{"sha": "5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYjg4ZmE1YzcyZDBmOWI1YWJlMTA2ODgxZjJjNWZmYmE5YjA3M2Q=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-08-07T23:30:03Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-11-13T18:45:38Z"}, "message": "hide unused exports on other platforms", "tree": {"sha": "ad62ac7aacbaaaada42cc164bd392d5fbd59d6b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad62ac7aacbaaaada42cc164bd392d5fbd59d6b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d", "html_url": "https://github.com/rust-lang/rust/commit/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16236470c1774f88374bab29d2b9d1875cb97246", "url": "https://api.github.com/repos/rust-lang/rust/commits/16236470c1774f88374bab29d2b9d1875cb97246", "html_url": "https://github.com/rust-lang/rust/commit/16236470c1774f88374bab29d2b9d1875cb97246"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "cc0e1172a533d9979df9e768d93e5e751157b447", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d", "patch": "@@ -283,10 +283,8 @@ pub use self::stdio::{set_panic, set_print};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::util::{empty, repeat, sink, Empty, Repeat, Sink};\n \n-pub(crate) use self::copy::generic_copy;\n-\n mod buffered;\n-mod copy;\n+pub(crate) mod copy;\n mod cursor;\n mod error;\n mod impls;"}, {"sha": "8a69e9ccd55bc5de70dcda8af0dd908179204d4f", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d", "patch": "@@ -409,6 +409,8 @@ impl Read for Stdin {\n     }\n }\n \n+// only used by platform-dependent io::copy specializations, i.e. unused on some platforms\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n impl StdinLock<'_> {\n     pub(crate) fn as_mut_buf(&mut self) -> &mut BufReader<impl Read> {\n         &mut self.inner"}, {"sha": "b106eb0a5b6dab68aef3211206dd2c206edb9984", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=5eb88fa5c72d0f9b5abe106881f2c5ffba9b073d", "patch": "@@ -1276,7 +1276,7 @@ pub(crate) fn copy_regular_files(\n                         // - copy_file_range is disallowed, for example by seccomp (EPERM)\n                         // - copy_file_range cannot be used with pipes or device nodes (EINVAL)\n                         assert_eq!(written, 0);\n-                        return io::generic_copy(reader, writer);\n+                        return io::copy::generic_copy(reader, writer);\n                     }\n                     _ => return Err(err),\n                 }\n@@ -1328,7 +1328,7 @@ pub(crate) fn sendfile_splice(\n                         // Try fallback io::copy if splice/sendfile do not support this particular\n                         // file descritor (EINVAL)\n                         assert_eq!(written, 0);\n-                        return io::generic_copy(reader, writer);\n+                        return io::copy::generic_copy(reader, writer);\n                     }\n                     _ => return Err(err),\n                 }"}]}