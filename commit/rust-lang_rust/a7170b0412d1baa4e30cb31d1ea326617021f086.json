{"sha": "a7170b0412d1baa4e30cb31d1ea326617021f086", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MTcwYjA0MTJkMWJhYTRlMzBjYjMxZDFlYTMyNjYxNzAyMWYwODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-16T02:46:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-16T02:46:23Z"}, "message": "Auto merge of #48524 - abonander:check-macro-stability, r=petrochenkov\n\ncheck stability of macro invocations\n\nI haven't implemented tests yet but this should be a pretty solid prototype. I think as-implemented it will also stability-check macro invocations in the same crate, dunno if we want that or not.\n\nI don't know if we want this to go through `rustc::middle::stability` or not, considering the information there wouldn't be available at the time of macro expansion (even for external crates, right?).\n\nr? @nrc\ncloses #34079\ncc @petrochenkov @durka @jseyfried #38356", "tree": {"sha": "c29e3be6c0201716b609c9e2f714f8703a580b3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c29e3be6c0201716b609c9e2f714f8703a580b3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7170b0412d1baa4e30cb31d1ea326617021f086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7170b0412d1baa4e30cb31d1ea326617021f086", "html_url": "https://github.com/rust-lang/rust/commit/a7170b0412d1baa4e30cb31d1ea326617021f086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7170b0412d1baa4e30cb31d1ea326617021f086/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b66873187e37a9d79adad89563088a9cb86028", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b66873187e37a9d79adad89563088a9cb86028", "html_url": "https://github.com/rust-lang/rust/commit/36b66873187e37a9d79adad89563088a9cb86028"}, {"sha": "69035f20b92870a7ad5dbc22c65aee971d8f8698", "url": "https://api.github.com/repos/rust-lang/rust/commits/69035f20b92870a7ad5dbc22c65aee971d8f8698", "html_url": "https://github.com/rust-lang/rust/commit/69035f20b92870a7ad5dbc22c65aee971d8f8698"}], "stats": {"total": 160, "additions": 141, "deletions": 19}, "files": [{"sha": "ebfd8785a0a0c8e0866fae9b2a979d11158cc09d", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=a7170b0412d1baa4e30cb31d1ea326617021f086", "patch": "@@ -106,14 +106,16 @@ impl<'a> Registry<'a> {\n                 expander,\n                 def_info: _,\n                 allow_internal_unstable,\n-                allow_internal_unsafe\n+                allow_internal_unsafe,\n+                unstable_feature\n             } => {\n                 let nid = ast::CRATE_NODE_ID;\n                 NormalTT {\n                     expander,\n                     def_info: Some((nid, self.krate_span)),\n                     allow_internal_unstable,\n-                    allow_internal_unsafe\n+                    allow_internal_unsafe,\n+                    unstable_feature\n                 }\n             }\n             IdentTT(ext, _, allow_internal_unstable) => {\n@@ -149,6 +151,7 @@ impl<'a> Registry<'a> {\n             def_info: None,\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n+            unstable_feature: None,\n         });\n     }\n "}, {"sha": "23c42972912a149ec22b563c04189f046bcb74e6", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a7170b0412d1baa4e30cb31d1ea326617021f086", "patch": "@@ -555,6 +555,8 @@ pub enum SyntaxExtension {\n         /// Whether the contents of the macro can use `unsafe`\n         /// without triggering the `unsafe_code` lint.\n         allow_internal_unsafe: bool,\n+        /// The macro's feature name if it is unstable, and the stability feature\n+        unstable_feature: Option<(Symbol, u32)>,\n     },\n \n     /// A function-like syntax extension that has an extra ident before\n@@ -670,6 +672,7 @@ pub struct ExpansionData {\n     pub depth: usize,\n     pub module: Rc<ModuleData>,\n     pub directory_ownership: DirectoryOwnership,\n+    pub crate_span: Option<Span>,\n }\n \n /// One of these is made during expansion and incrementally updated as we go;\n@@ -701,6 +704,7 @@ impl<'a> ExtCtxt<'a> {\n                 depth: 0,\n                 module: Rc::new(ModuleData { mod_path: Vec::new(), directory: PathBuf::new() }),\n                 directory_ownership: DirectoryOwnership::Owned { relative: None },\n+                crate_span: None,\n             },\n             expansions: HashMap::new(),\n         }"}, {"sha": "7ccace014d032d9b4ab6343552f165a414886919", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a7170b0412d1baa4e30cb31d1ea326617021f086", "patch": "@@ -18,7 +18,7 @@ use ext::base::*;\n use ext::derive::{add_derived_markers, collect_derives};\n use ext::hygiene::{Mark, SyntaxContext};\n use ext::placeholders::{placeholder, PlaceholderExpander};\n-use feature_gate::{self, Features, is_builtin_attr};\n+use feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use fold;\n use fold::*;\n use parse::{DirectoryOwnership, PResult};\n@@ -229,6 +229,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         module.directory.pop();\n         self.cx.root_path = module.directory.clone();\n         self.cx.current_expansion.module = Rc::new(module);\n+        self.cx.current_expansion.crate_span = Some(krate.span);\n \n         let orig_mod_span = krate.module.inner;\n \n@@ -533,11 +534,36 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let path = &mac.node.path;\n \n         let ident = ident.unwrap_or_else(|| keywords::Invalid.ident());\n-        let validate_and_set_expn_info = |def_site_span,\n+        let validate_and_set_expn_info = |this: &mut Self, // arg instead of capture\n+                                          def_site_span: Option<Span>,\n                                           allow_internal_unstable,\n-                                          allow_internal_unsafe| {\n+                                          allow_internal_unsafe,\n+                                          // can't infer this type\n+                                          unstable_feature: Option<(Symbol, u32)>| {\n+\n+            // feature-gate the macro invocation\n+            if let Some((feature, issue)) = unstable_feature {\n+                let crate_span = this.cx.current_expansion.crate_span.unwrap();\n+                // don't stability-check macros in the same crate\n+                // (the only time this is null is for syntax extensions registered as macros)\n+                if def_site_span.map_or(false, |def_span| !crate_span.contains(def_span))\n+                    && !span.allows_unstable() && this.cx.ecfg.features.map_or(true, |feats| {\n+                    // macro features will count as lib features\n+                    !feats.declared_lib_features.iter().any(|&(feat, _)| feat == feature)\n+                }) {\n+                    let explain = format!(\"macro {}! is unstable\", path);\n+                    emit_feature_err(this.cx.parse_sess, &*feature.as_str(), span,\n+                                     GateIssue::Library(Some(issue)), &explain);\n+                    this.cx.trace_macros_diag();\n+                    return Err(kind.dummy(span));\n+                }\n+            }\n+\n             if ident.name != keywords::Invalid.name() {\n-                return Err(format!(\"macro {}! expects no ident argument, given '{}'\", path, ident));\n+                let msg = format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n+                this.cx.span_err(path.span, &msg);\n+                this.cx.trace_macros_diag();\n+                return Err(kind.dummy(span));\n             }\n             mark.set_expn_info(ExpnInfo {\n                 call_site: span,\n@@ -553,11 +579,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n         let opt_expanded = match *ext {\n             DeclMacro(ref expand, def_span) => {\n-                if let Err(msg) = validate_and_set_expn_info(def_span.map(|(_, s)| s),\n-                                                             false, false) {\n-                    self.cx.span_err(path.span, &msg);\n-                    self.cx.trace_macros_diag();\n-                    kind.dummy(span)\n+                if let Err(dummy_span) = validate_and_set_expn_info(self, def_span.map(|(_, s)| s),\n+                                                                    false, false, None) {\n+                    dummy_span\n                 } else {\n                     kind.make_from(expand.expand(self.cx, span, mac.node.stream()))\n                 }\n@@ -567,14 +591,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 ref expander,\n                 def_info,\n                 allow_internal_unstable,\n-                allow_internal_unsafe\n+                allow_internal_unsafe,\n+                unstable_feature,\n             } => {\n-                if let Err(msg) = validate_and_set_expn_info(def_info.map(|(_, s)| s),\n-                                                             allow_internal_unstable,\n-                                                             allow_internal_unsafe) {\n-                    self.cx.span_err(path.span, &msg);\n-                    self.cx.trace_macros_diag();\n-                    kind.dummy(span)\n+                if let Err(dummy_span) = validate_and_set_expn_info(self, def_info.map(|(_, s)| s),\n+                                                                    allow_internal_unstable,\n+                                                                    allow_internal_unsafe,\n+                                                                    unstable_feature) {\n+                    dummy_span\n                 } else {\n                     kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n                 }"}, {"sha": "a4b2c3990f5e1bbe9414f34915dc715f59c1d271", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=a7170b0412d1baa4e30cb31d1ea326617021f086", "patch": "@@ -283,11 +283,22 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item) -> Syntax\n     if body.legacy {\n         let allow_internal_unstable = attr::contains_name(&def.attrs, \"allow_internal_unstable\");\n         let allow_internal_unsafe = attr::contains_name(&def.attrs, \"allow_internal_unsafe\");\n+\n+        let unstable_feature = attr::find_stability(&sess.span_diagnostic,\n+                                                    &def.attrs, def.span).and_then(|stability| {\n+            if let attr::StabilityLevel::Unstable { issue, .. } = stability.level {\n+                Some((stability.feature, issue))\n+            } else {\n+                None\n+            }\n+        });\n+\n         NormalTT {\n             expander,\n             def_info: Some((def.id, def.span)),\n             allow_internal_unstable,\n-            allow_internal_unsafe\n+            allow_internal_unsafe,\n+            unstable_feature\n         }\n     } else {\n         SyntaxExtension::DeclMacro(expander, Some((def.id, def.span)))"}, {"sha": "5b078535852f48ec7869eddbd1555dc290b1611d", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=a7170b0412d1baa4e30cb31d1ea326617021f086", "patch": "@@ -67,6 +67,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n                         def_info: None,\n                         allow_internal_unstable: false,\n                         allow_internal_unsafe: false,\n+                        unstable_feature: None,\n                     });\n         )* }\n     }\n@@ -120,6 +121,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n                 def_info: None,\n                 allow_internal_unstable: true,\n                 allow_internal_unsafe: false,\n+                unstable_feature: None\n             });\n \n     for (name, ext) in user_exts {"}, {"sha": "6462c11af481fe659b6b4e93059a56706fb7e156", "filename": "src/test/compile-fail/auxiliary/unstable-macros.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Funstable-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Funstable-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Funstable-macros.rs?ref=a7170b0412d1baa4e30cb31d1ea326617021f086", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(staged_api)]\n+#![stable(feature = \"unit_test\", since = \"0.0.0\")]\n+\n+#[unstable(feature = \"unstable_macros\", issue = \"0\")]\n+#[macro_export]\n+macro_rules! unstable_macro{ () => () }"}, {"sha": "a4b922c0fe19cf4000b422416cf7ef13d8322c7e", "filename": "src/test/compile-fail/macro-stability.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Ftest%2Fcompile-fail%2Fmacro-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Ftest%2Fcompile-fail%2Fmacro-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-stability.rs?ref=a7170b0412d1baa4e30cb31d1ea326617021f086", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:unstable-macros.rs\n+\n+#![feature(staged_api)]\n+#[macro_use] extern crate unstable_macros;\n+\n+#[unstable(feature = \"local_unstable\", issue = \"0\")]\n+macro_rules! local_unstable { () => () }\n+\n+fn main() {\n+    local_unstable!();\n+    unstable_macro!(); //~ ERROR: macro unstable_macro! is unstable\n+}"}, {"sha": "231ed2898f1db6af7ebf332911343c57e5284fd3", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin_args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs?ref=a7170b0412d1baa4e30cb31d1ea326617021f086", "patch": "@@ -53,5 +53,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n             def_info: None,\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n+            unstable_feature: None,\n         });\n }"}, {"sha": "6462c11af481fe659b6b4e93059a56706fb7e156", "filename": "src/test/run-pass/auxiliary/unstable-macros.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Ftest%2Frun-pass%2Fauxiliary%2Funstable-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Ftest%2Frun-pass%2Fauxiliary%2Funstable-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Funstable-macros.rs?ref=a7170b0412d1baa4e30cb31d1ea326617021f086", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(staged_api)]\n+#![stable(feature = \"unit_test\", since = \"0.0.0\")]\n+\n+#[unstable(feature = \"unstable_macros\", issue = \"0\")]\n+#[macro_export]\n+macro_rules! unstable_macro{ () => () }"}, {"sha": "9afcd51aa85af16f7efe818ce47a5bae38749aa7", "filename": "src/test/run-pass/macro-stability.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Ftest%2Frun-pass%2Fmacro-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7170b0412d1baa4e30cb31d1ea326617021f086/src%2Ftest%2Frun-pass%2Fmacro-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-stability.rs?ref=a7170b0412d1baa4e30cb31d1ea326617021f086", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:unstable-macros.rs\n+\n+#![feature(unstable_macros)]\n+\n+#[macro_use] extern crate unstable_macros;\n+\n+#[unstable(feature = \"local_unstable\", issue = \"0\")]\n+macro_rules! local_unstable { () => () }\n+\n+fn main() {\n+    unstable_macro!();\n+    local_unstable!();\n+}"}]}