{"sha": "eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "node_id": "C_kwDOAAsO6NoAKGVlYjEwMzM1Y2U5NGQzNWYzYzEzZjdkMTRmYWJjOTFiM2RjZDQ2OWM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-23T16:08:02Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-15T15:56:16Z"}, "message": "Pass one argument instead of fetching two fields of it at every call site", "tree": {"sha": "66dc702eb13dca35de9d793a01e6ba5ea7f32c6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66dc702eb13dca35de9d793a01e6ba5ea7f32c6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "html_url": "https://github.com/rust-lang/rust/commit/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a034446faea140b00e59ada55519ac9bc7b08ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a034446faea140b00e59ada55519ac9bc7b08ee9", "html_url": "https://github.com/rust-lang/rust/commit/a034446faea140b00e59ada55519ac9bc7b08ee9"}], "stats": {"total": 160, "additions": 60, "deletions": 100}, "files": [{"sha": "98502737dc5001264ddc7b6658edb66f32fc64f0", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 21, "deletions": 36, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "patch": "@@ -71,7 +71,7 @@ pub(crate) enum PlaceBase {\n /// This is used internally when building a place for an expression like `a.b.c`. The fields `b`\n /// and `c` can be progressively pushed onto the place builder that is created when converting `a`.\n #[derive(Clone, Debug, PartialEq)]\n-pub(crate) struct PlaceBuilder<'tcx> {\n+pub(in crate::build) struct PlaceBuilder<'tcx> {\n     base: PlaceBase,\n     projection: Vec<PlaceElem<'tcx>>,\n }\n@@ -202,10 +202,9 @@ fn find_capture_matching_projections<'a, 'tcx>(\n /// `PlaceBuilder` now starts from `PlaceBase::Local`.\n ///\n /// Returns a Result with the error being the PlaceBuilder (`from_builder`) that was not found.\n-fn to_upvars_resolved_place_builder<'a, 'tcx>(\n+fn to_upvars_resolved_place_builder<'tcx>(\n     from_builder: PlaceBuilder<'tcx>,\n-    tcx: TyCtxt<'tcx>,\n-    typeck_results: &'a ty::TypeckResults<'tcx>,\n+    cx: &Builder<'_, 'tcx>,\n ) -> Result<PlaceBuilder<'tcx>, PlaceBuilder<'tcx>> {\n     match from_builder.base {\n         PlaceBase::Local(_) => Ok(from_builder),\n@@ -220,13 +219,13 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n \n             let Some((capture_index, capture)) =\n                 find_capture_matching_projections(\n-                    typeck_results,\n+                    cx.typeck_results,\n                     var_hir_id,\n                     closure_def_id,\n                     &from_builder.projection,\n                 ) else {\n-                let closure_span = tcx.def_span(closure_def_id);\n-                if !enable_precise_capture(tcx, closure_span) {\n+                let closure_span = cx.tcx.def_span(closure_def_id);\n+                if !enable_precise_capture(cx.tcx, closure_span) {\n                     bug!(\n                         \"No associated capture found for {:?}[{:#?}] even though \\\n                             capture_disjoint_fields isn't enabled\",\n@@ -243,8 +242,8 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n             };\n \n             // We won't be building MIR if the closure wasn't local\n-            let closure_hir_id = tcx.hir().local_def_id_to_hir_id(closure_def_id.expect_local());\n-            let closure_ty = typeck_results.node_type(closure_hir_id);\n+            let closure_hir_id = cx.tcx.hir().local_def_id_to_hir_id(closure_def_id.expect_local());\n+            let closure_ty = cx.typeck_results.node_type(closure_hir_id);\n \n             let substs = match closure_ty.kind() {\n                 ty::Closure(_, substs) => ty::UpvarSubsts::Closure(substs),\n@@ -316,24 +315,16 @@ fn strip_prefix<'tcx>(\n }\n \n impl<'tcx> PlaceBuilder<'tcx> {\n-    pub(crate) fn into_place<'a>(\n-        self,\n-        tcx: TyCtxt<'tcx>,\n-        typeck_results: &'a ty::TypeckResults<'tcx>,\n-    ) -> Place<'tcx> {\n+    pub(crate) fn into_place(self, cx: &Builder<'_, 'tcx>) -> Place<'tcx> {\n         if let PlaceBase::Local(local) = self.base {\n-            Place { local, projection: tcx.intern_place_elems(&self.projection) }\n+            Place { local, projection: cx.tcx.intern_place_elems(&self.projection) }\n         } else {\n-            self.expect_upvars_resolved(tcx, typeck_results).into_place(tcx, typeck_results)\n+            self.expect_upvars_resolved(cx).into_place(cx)\n         }\n     }\n \n-    fn expect_upvars_resolved<'a>(\n-        self,\n-        tcx: TyCtxt<'tcx>,\n-        typeck_results: &'a ty::TypeckResults<'tcx>,\n-    ) -> PlaceBuilder<'tcx> {\n-        to_upvars_resolved_place_builder(self, tcx, typeck_results).unwrap()\n+    fn expect_upvars_resolved(self, cx: &Builder<'_, 'tcx>) -> PlaceBuilder<'tcx> {\n+        to_upvars_resolved_place_builder(self, cx).unwrap()\n     }\n \n     /// Attempts to resolve the `PlaceBuilder`.\n@@ -347,12 +338,11 @@ impl<'tcx> PlaceBuilder<'tcx> {\n     /// not captured. This can happen because the final mir that will be\n     /// generated doesn't require a read for this place. Failures will only\n     /// happen inside closures.\n-    pub(crate) fn try_upvars_resolved<'a>(\n+    pub(crate) fn try_upvars_resolved(\n         self,\n-        tcx: TyCtxt<'tcx>,\n-        typeck_results: &'a ty::TypeckResults<'tcx>,\n+        cx: &Builder<'_, 'tcx>,\n     ) -> Result<PlaceBuilder<'tcx>, PlaceBuilder<'tcx>> {\n-        to_upvars_resolved_place_builder(self, tcx, typeck_results)\n+        to_upvars_resolved_place_builder(self, cx)\n     }\n \n     pub(crate) fn base(&self) -> PlaceBase {\n@@ -412,7 +402,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<Place<'tcx>> {\n         let place_builder = unpack!(block = self.as_place_builder(block, expr));\n-        block.and(place_builder.into_place(self.tcx, self.typeck_results))\n+        block.and(place_builder.into_place(self))\n     }\n \n     /// This is used when constructing a compound `Place`, so that we can avoid creating\n@@ -436,7 +426,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<Place<'tcx>> {\n         let place_builder = unpack!(block = self.as_read_only_place_builder(block, expr));\n-        block.and(place_builder.into_place(self.tcx, self.typeck_results))\n+        block.and(place_builder.into_place(self))\n     }\n \n     /// This is used when constructing a compound `Place`, so that we can avoid creating\n@@ -531,7 +521,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             inferred_ty: expr.ty,\n                         });\n \n-                    let place = place_builder.clone().into_place(this.tcx, this.typeck_results);\n+                    let place = place_builder.clone().into_place(this);\n                     this.cfg.push(\n                         block,\n                         Statement {\n@@ -683,7 +673,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         if is_outermost_index {\n             self.read_fake_borrows(block, fake_borrow_temps, source_info)\n         } else {\n-            base_place = base_place.expect_upvars_resolved(self.tcx, self.typeck_results);\n+            base_place = base_place.expect_upvars_resolved(self);\n             self.add_fake_borrows_of_base(\n                 &base_place,\n                 block,\n@@ -711,12 +701,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let lt = self.temp(bool_ty, expr_span);\n \n         // len = len(slice)\n-        self.cfg.push_assign(\n-            block,\n-            source_info,\n-            len,\n-            Rvalue::Len(slice.into_place(self.tcx, self.typeck_results)),\n-        );\n+        self.cfg.push_assign(block, source_info, len, Rvalue::Len(slice.into_place(self)));\n         // lt = idx < len\n         self.cfg.push_assign(\n             block,"}, {"sha": "93f76333165a5c1bb3cc041fdaff6a36d974ce8c", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "patch": "@@ -321,11 +321,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let place_builder =\n                         unpack!(block = this.as_place_builder(block, &this.thir[*thir_place]));\n \n-                    if let Ok(place_builder_resolved) =\n-                        place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n-                    {\n-                        let mir_place =\n-                            place_builder_resolved.into_place(this.tcx, this.typeck_results);\n+                    if let Ok(place_builder_resolved) = place_builder.try_upvars_resolved(this) {\n+                        let mir_place = place_builder_resolved.into_place(this);\n                         this.cfg.push_fake_read(\n                             block,\n                             this.source_info(this.tcx.hir().span(*hir_id)),\n@@ -616,8 +613,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // by the parent itself. The mutability of the current capture\n             // is same as that of the capture in the parent closure.\n             PlaceBase::Upvar { .. } => {\n-                let enclosing_upvars_resolved =\n-                    arg_place_builder.clone().into_place(this.tcx, this.typeck_results);\n+                let enclosing_upvars_resolved = arg_place_builder.clone().into_place(this);\n \n                 match enclosing_upvars_resolved.as_ref() {\n                     PlaceRef {\n@@ -654,7 +650,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             Mutability::Mut => BorrowKind::Mut { allow_two_phase_borrow: false },\n         };\n \n-        let arg_place = arg_place_builder.into_place(this.tcx, this.typeck_results);\n+        let arg_place = arg_place_builder.into_place(this);\n \n         this.cfg.push_assign(\n             block,"}, {"sha": "d1ef515b3d29bda290a6f6f3a4684c24fa80a650", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "patch": "@@ -365,9 +365,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             None => {\n                                 let place_builder = place_builder.clone();\n                                 this.consume_by_copy_or_move(\n-                                    place_builder\n-                                        .field(n, *ty)\n-                                        .into_place(this.tcx, this.typeck_results),\n+                                    place_builder.field(n, *ty).into_place(this),\n                                 )\n                             }\n                         })"}, {"sha": "7fc28d624da5c38b5552ce40228225ec0c4f3408", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "patch": "@@ -220,10 +220,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let cause_matched_place = FakeReadCause::ForMatchedPlace(None);\n         let source_info = self.source_info(scrutinee_span);\n \n-        if let Ok(scrutinee_builder) =\n-            scrutinee_place_builder.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n-        {\n-            let scrutinee_place = scrutinee_builder.into_place(self.tcx, self.typeck_results);\n+        if let Ok(scrutinee_builder) = scrutinee_place_builder.clone().try_upvars_resolved(self) {\n+            let scrutinee_place = scrutinee_builder.into_place(self);\n             self.cfg.push_fake_read(block, source_info, cause_matched_place, scrutinee_place);\n         }\n \n@@ -348,12 +346,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // ```\n                     let mut opt_scrutinee_place: Option<(Option<&Place<'tcx>>, Span)> = None;\n                     let scrutinee_place: Place<'tcx>;\n-                    if let Ok(scrutinee_builder) = scrutinee_place_builder\n-                        .clone()\n-                        .try_upvars_resolved(this.tcx, this.typeck_results)\n+                    if let Ok(scrutinee_builder) =\n+                        scrutinee_place_builder.clone().try_upvars_resolved(this)\n                     {\n-                        scrutinee_place =\n-                            scrutinee_builder.into_place(this.tcx, this.typeck_results);\n+                        scrutinee_place = scrutinee_builder.into_place(this);\n                         opt_scrutinee_place = Some((Some(&scrutinee_place), scrutinee_span));\n                     }\n                     let scope = this.declare_bindings(\n@@ -602,12 +598,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             while let Some(next) = {\n                 for binding in &candidate_ref.bindings {\n                     let local = self.var_local_id(binding.var_id, OutsideGuard);\n-\n-                    let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n-                        VarBindingForm { opt_match_place: Some((ref mut match_place, _)), .. },\n-                    )))) = self.local_decls[local].local_info else {\n-                        bug!(\"Let binding to non-user variable.\")\n-                    };\n                     // `try_upvars_resolved` may fail if it is unable to resolve the given\n                     // `PlaceBuilder` inside a closure. In this case, we don't want to include\n                     // a scrutinee place. `scrutinee_place_builder` will fail for destructured\n@@ -622,10 +612,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     //    let (v1, v2) = foo;\n                     // };\n                     // ```\n-                    if let Ok(match_pair_resolved) =\n-                        initializer.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n-                    {\n-                        let place = match_pair_resolved.into_place(self.tcx, self.typeck_results);\n+                    if let Ok(match_pair_resolved) = initializer.clone().try_upvars_resolved(self) {\n+                        let place = match_pair_resolved.into_place(self);\n+\n+                        let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                            VarBindingForm { opt_match_place: Some((ref mut match_place, _)), .. },\n+                        )))) = self.local_decls[local].local_info else {\n+                            bug!(\"Let binding to non-user variable.\")\n+                        };\n+\n                         *match_place = Some(place);\n                     }\n                 }\n@@ -1605,9 +1600,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         // Insert a Shallow borrow of any places that is switched on.\n         if let Some(fb) = fake_borrows && let Ok(match_place_resolved) =\n-            match_place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n+            match_place.clone().try_upvars_resolved(self)\n         {\n-            let resolved_place = match_place_resolved.into_place(self.tcx, self.typeck_results);\n+            let resolved_place = match_place_resolved.into_place(self);\n             fb.insert(resolved_place);\n         }\n \n@@ -1799,10 +1794,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         );\n         let mut opt_expr_place: Option<(Option<&Place<'tcx>>, Span)> = None;\n         let expr_place: Place<'tcx>;\n-        if let Ok(expr_builder) =\n-            expr_place_builder.try_upvars_resolved(self.tcx, self.typeck_results)\n-        {\n-            expr_place = expr_builder.into_place(self.tcx, self.typeck_results);\n+        if let Ok(expr_builder) = expr_place_builder.try_upvars_resolved(self) {\n+            expr_place = expr_builder.into_place(self);\n             opt_expr_place = Some((Some(&expr_place), expr_span));\n         }\n         let otherwise_post_guard_block = otherwise_candidate.pre_binding_block.unwrap();"}, {"sha": "6fa817da28a3c7578b6ee1b2b17bc2bf03750f07", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "patch": "@@ -156,12 +156,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 ascription: thir::Ascription { ref annotation, variance },\n             } => {\n                 // Apply the type ascription to the value at `match_pair.place`, which is the\n-                if let Ok(place_resolved) =\n-                    match_pair.place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n-                {\n+                if let Ok(place_resolved) = match_pair.place.clone().try_upvars_resolved(self) {\n                     candidate.ascriptions.push(Ascription {\n                         annotation: annotation.clone(),\n-                        source: place_resolved.into_place(self.tcx, self.typeck_results),\n+                        source: place_resolved.into_place(self),\n                         variance,\n                     });\n                 }\n@@ -185,12 +183,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 ref subpattern,\n                 is_primary: _,\n             } => {\n-                if let Ok(place_resolved) =\n-                    match_pair.place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n-                {\n+                if let Ok(place_resolved) = match_pair.place.clone().try_upvars_resolved(self) {\n                     candidate.bindings.push(Binding {\n                         span: match_pair.pattern.span,\n-                        source: place_resolved.into_place(self.tcx, self.typeck_results),\n+                        source: place_resolved.into_place(self),\n                         var_id: var,\n                         binding_mode: mode,\n                     });"}, {"sha": "92f00560f0139d45d8892c07305c7d57bd53c44a", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "patch": "@@ -155,10 +155,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         make_target_blocks: impl FnOnce(&mut Self) -> Vec<BasicBlock>,\n     ) {\n         let place: Place<'tcx>;\n-        if let Ok(test_place_builder) =\n-            place_builder.try_upvars_resolved(self.tcx, self.typeck_results)\n-        {\n-            place = test_place_builder.into_place(self.tcx, self.typeck_results);\n+        if let Ok(test_place_builder) = place_builder.try_upvars_resolved(self) {\n+            place = test_place_builder.into_place(self);\n         } else {\n             return;\n         }"}, {"sha": "38839e63059649bd09c0ea967bab1679bf4643bb", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb10335ce94d35f3c13f7d14fabc91b3dcd469c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=eeb10335ce94d35f3c13f7d14fabc91b3dcd469c", "patch": "@@ -31,21 +31,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         suffix: &'pat [Pat<'tcx>],\n     ) {\n         let tcx = self.tcx;\n-        let (min_length, exact_size) = if let Ok(place_resolved) =\n-            place.clone().try_upvars_resolved(tcx, self.typeck_results)\n-        {\n-            match place_resolved\n-                .into_place(tcx, self.typeck_results)\n-                .ty(&self.local_decls, tcx)\n-                .ty\n-                .kind()\n-            {\n-                ty::Array(_, length) => (length.eval_usize(tcx, self.param_env), true),\n-                _ => ((prefix.len() + suffix.len()).try_into().unwrap(), false),\n-            }\n-        } else {\n-            ((prefix.len() + suffix.len()).try_into().unwrap(), false)\n-        };\n+        let (min_length, exact_size) =\n+            if let Ok(place_resolved) = place.clone().try_upvars_resolved(self) {\n+                match place_resolved.into_place(self).ty(&self.local_decls, tcx).ty.kind() {\n+                    ty::Array(_, length) => (length.eval_usize(tcx, self.param_env), true),\n+                    _ => ((prefix.len() + suffix.len()).try_into().unwrap(), false),\n+                }\n+            } else {\n+                ((prefix.len() + suffix.len()).try_into().unwrap(), false)\n+            };\n \n         match_pairs.extend(prefix.iter().enumerate().map(|(idx, subpattern)| {\n             let elem =\n@@ -100,7 +94,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n }\n \n impl<'pat, 'tcx> MatchPair<'pat, 'tcx> {\n-    pub(crate) fn new(\n+    pub(in crate::build) fn new(\n         place: PlaceBuilder<'tcx>,\n         pattern: &'pat Pat<'tcx>,\n     ) -> MatchPair<'pat, 'tcx> {"}]}