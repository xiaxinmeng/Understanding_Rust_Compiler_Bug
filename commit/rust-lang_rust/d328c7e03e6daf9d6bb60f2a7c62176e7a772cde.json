{"sha": "d328c7e03e6daf9d6bb60f2a7c62176e7a772cde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMjhjN2UwM2U2ZGFmOWQ2YmI2MGYyYTdjNjIxNzZlN2E3NzJjZGU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-28T01:32:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-28T17:03:40Z"}, "message": "List crate attributes when running rustc with '--ls'", "tree": {"sha": "2b23726bcd7d0ae91d4127376360dca533612e09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b23726bcd7d0ae91d4127376360dca533612e09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d328c7e03e6daf9d6bb60f2a7c62176e7a772cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d328c7e03e6daf9d6bb60f2a7c62176e7a772cde", "html_url": "https://github.com/rust-lang/rust/commit/d328c7e03e6daf9d6bb60f2a7c62176e7a772cde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d328c7e03e6daf9d6bb60f2a7c62176e7a772cde/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9561def20974acb302034c21b6de221972918d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/9561def20974acb302034c21b6de221972918d27", "html_url": "https://github.com/rust-lang/rust/commit/9561def20974acb302034c21b6de221972918d27"}], "stats": {"total": 86, "additions": 64, "deletions": 22}, "files": [{"sha": "1bc2f685e5e7a42bac9e47f0f4e0d01fd05f0b6e", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d328c7e03e6daf9d6bb60f2a7c62176e7a772cde/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d328c7e03e6daf9d6bb60f2a7c62176e7a772cde/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=d328c7e03e6daf9d6bb60f2a7c62176e7a772cde", "patch": "@@ -24,25 +24,6 @@ import tags::*;\n export read_crates;\n export list_file_metadata;\n \n-fn get_exported_metadata(&session::session sess, &str path, &vec[u8] data) ->\n-   hashmap[str, str] {\n-    auto meta_items =\n-        ebml::get_doc(ebml::new_doc(data), tag_meta_export);\n-    auto mm = common::new_str_hash[str]();\n-    for each (ebml::doc m in\n-             ebml::tagged_docs(meta_items, tag_meta_item)) {\n-        auto kd = ebml::get_doc(m, tag_meta_item_key);\n-        auto vd = ebml::get_doc(m, tag_meta_item_value);\n-        auto k = str::unsafe_from_bytes(ebml::doc_data(kd));\n-        auto v = str::unsafe_from_bytes(ebml::doc_data(vd));\n-        log #fmt(\"metadata in %s: %s = %s\", path, k, v);\n-        if (!mm.insert(k, v)) {\n-            sess.warn(#fmt(\"Duplicate metadata item in %s: %s\", path, k));\n-        }\n-    }\n-    ret mm;\n-}\n-\n fn metadata_matches(hashmap[str, str] mm, &vec[@ast::meta_item] metas) ->\n    bool {\n     log #fmt(\"matching %u metadata requirements against %u metadata items\",\n@@ -126,7 +107,8 @@ fn find_library_crate(&session::session sess, &ast::ident ident,\n             }\n             alt (get_metadata_section(path)) {\n                 case (option::some(?cvec)) {\n-                    auto mm = get_exported_metadata(sess, path, cvec);\n+                    auto mm = decoder::get_exported_metadata(sess,\n+                                                             path, cvec);\n                     if (!metadata_matches(mm, metas)) {\n                         log #fmt(\"skipping %s, metadata doesn't match\", path);\n                         cont;"}, {"sha": "1da65b97e34b199bc452a7986368ec61c260da5e", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d328c7e03e6daf9d6bb60f2a7c62176e7a772cde/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d328c7e03e6daf9d6bb60f2a7c62176e7a772cde/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=d328c7e03e6daf9d6bb60f2a7c62176e7a772cde", "patch": "@@ -5,19 +5,23 @@ import std::option;\n import std::vec;\n import std::str;\n import std::io;\n+import std::map::hashmap;\n import front::ast;\n import middle::ty;\n import tags::*;\n import tydecode::parse_def_id;\n import tydecode::parse_ty_data;\n import driver::session;\n+import util::common;\n+import pretty::pprust;\n \n export get_symbol;\n export get_tag_variants;\n export get_type;\n export lookup_defs;\n export get_type;\n export list_crate_metadata;\n+export get_exported_metadata;\n \n fn lookup_hash(&ebml::doc d, fn(vec[u8]) -> bool  eq_fn, uint hash) ->\n    vec[ebml::doc] {\n@@ -252,8 +256,35 @@ fn item_kind_to_str(u8 kind) -> str {\n     }\n }\n \n-fn list_crate_metadata(vec[u8] bytes, io::writer out) {\n-    auto md = ebml::new_doc(bytes);\n+fn get_meta_items(&ebml::doc md) -> vec[ast::meta_item] {\n+    let vec[ast::meta_item] items = [];\n+    for each (ebml::doc meta_item_doc in\n+              ebml::tagged_docs(md, tag_meta_item)) {\n+        auto kd = ebml::get_doc(meta_item_doc, tag_meta_item_key);\n+        auto vd = ebml::get_doc(meta_item_doc, tag_meta_item_value);\n+        auto k = str::unsafe_from_bytes(ebml::doc_data(kd));\n+        auto v = str::unsafe_from_bytes(ebml::doc_data(vd));\n+        items += [rec(node=ast::meta_key_value(k, v),\n+                      span=rec(lo=0u, hi=0u))];\n+    }\n+    ret items;\n+}\n+\n+fn list_meta_items(&ebml::doc meta_items, io::writer out) {\n+    for (ast::meta_item mi in get_meta_items(meta_items)) {\n+        out.write_str(#fmt(\"%s\\n\", pprust::meta_item_to_str(mi)));\n+    }\n+}\n+\n+fn list_crate_attributes(&ebml::doc md, io::writer out) {\n+    out.write_str(\"=Crate=\\n\");\n+    auto meta_items = ebml::get_doc(md, tag_meta_export);\n+    list_meta_items(meta_items, out);\n+    out.write_str(\"\\n\");\n+}\n+\n+fn list_crate_items(vec[u8] bytes, &ebml::doc md, io::writer out) {\n+    out.write_str(\"=Items=\\n\");\n     auto paths = ebml::get_doc(md, tag_paths);\n     auto items = ebml::get_doc(md, tag_items);\n     auto index = ebml::get_doc(paths, tag_index);\n@@ -270,8 +301,33 @@ fn list_crate_metadata(vec[u8] bytes, io::writer out) {\n                                describe_def(items, did)));\n         }\n     }\n+    out.write_str(\"\\n\");\n+}\n+\n+fn list_crate_metadata(vec[u8] bytes, io::writer out) {\n+    auto md = ebml::new_doc(bytes);\n+    list_crate_attributes(md, out);\n+    list_crate_items(bytes, md, out);\n }\n \n+fn get_exported_metadata(&session::session sess, &str path, &vec[u8] data) ->\n+   hashmap[str, str] {\n+    auto meta_items =\n+        ebml::get_doc(ebml::new_doc(data), tag_meta_export);\n+    auto mm = common::new_str_hash[str]();\n+    for each (ebml::doc m in\n+             ebml::tagged_docs(meta_items, tag_meta_item)) {\n+        auto kd = ebml::get_doc(m, tag_meta_item_key);\n+        auto vd = ebml::get_doc(m, tag_meta_item_value);\n+        auto k = str::unsafe_from_bytes(ebml::doc_data(kd));\n+        auto v = str::unsafe_from_bytes(ebml::doc_data(vd));\n+        log #fmt(\"metadata in %s: %s = %s\", path, k, v);\n+        if (!mm.insert(k, v)) {\n+            sess.warn(#fmt(\"Duplicate metadata item in %s: %s\", path, k));\n+        }\n+    }\n+    ret mm;\n+}\n \n // Local Variables:\n // mode: rust"}, {"sha": "1e4d89cddcb82e783184a3021ea2db21d2c53e57", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d328c7e03e6daf9d6bb60f2a7c62176e7a772cde/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d328c7e03e6daf9d6bb60f2a7c62176e7a772cde/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=d328c7e03e6daf9d6bb60f2a7c62176e7a772cde", "patch": "@@ -80,6 +80,10 @@ fn block_to_str(&ast::block blk) -> str {\n     ret writer.get_str();\n }\n \n+fn meta_item_to_str(&ast::meta_item mi) -> str {\n+    ret to_str(@mi, print_meta_item);\n+}\n+\n fn cbox(&ps s, uint u) {\n     vec::push(s.boxes, pp::consistent);\n     pp::cbox(s.s, u);"}]}