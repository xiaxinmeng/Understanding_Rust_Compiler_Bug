{"sha": "ad7de67a32d40360ad36d03845c5a7004ba68150", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkN2RlNjdhMzJkNDAzNjBhZDM2ZDAzODQ1YzVhNzAwNGJhNjgxNTA=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-03-25T17:44:29Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-03-26T16:13:11Z"}, "message": "Refine docs for `RawVec::from_raw_parts(_in)`", "tree": {"sha": "cebcf96a45e1b75d1111b63805413b1a6a6ecc7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cebcf96a45e1b75d1111b63805413b1a6a6ecc7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad7de67a32d40360ad36d03845c5a7004ba68150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7de67a32d40360ad36d03845c5a7004ba68150", "html_url": "https://github.com/rust-lang/rust/commit/ad7de67a32d40360ad36d03845c5a7004ba68150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad7de67a32d40360ad36d03845c5a7004ba68150/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e", "html_url": "https://github.com/rust-lang/rust/commit/aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "79dfa7b6b453e68aaf46c9e27321141ac20bf3d4", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad7de67a32d40360ad36d03845c5a7004ba68150/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7de67a32d40360ad36d03845c5a7004ba68150/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=ad7de67a32d40360ad36d03845c5a7004ba68150", "patch": "@@ -100,10 +100,11 @@ impl<T> RawVec<T, Global> {\n \n     /// Reconstitutes a `RawVec` from a pointer and capacity.\n     ///\n-    /// # Undefined Behavior\n+    /// # Safety\n     ///\n     /// The `ptr` must be allocated (on the system heap), and with the given `capacity`.\n-    /// The `capacity` cannot exceed `isize::MAX` (only a concern on 32-bit systems).\n+    /// The `capacity` cannot exceed `isize::MAX` for sized types. (only a concern on 32-bit\n+    /// systems). ZSTs may have a capacity up to `usize::MAX`.\n     /// If the `ptr` and `capacity` come from a `RawVec`, then this is guaranteed.\n     #[inline]\n     pub unsafe fn from_raw_parts(ptr: *mut T, capacity: usize) -> Self {\n@@ -160,10 +161,11 @@ impl<T, A: AllocRef> RawVec<T, A> {\n \n     /// Reconstitutes a `RawVec` from a pointer, capacity, and allocator.\n     ///\n-    /// # Undefined Behavior\n+    /// # Safety\n     ///\n     /// The `ptr` must be allocated (via the given allocator `a`), and with the given `capacity`.\n-    /// The `capacity` cannot exceed `isize::MAX` (only a concern on 32-bit systems).\n+    /// The `capacity` cannot exceed `isize::MAX` for sized types. (only a concern on 32-bit\n+    /// systems). ZSTs may have a capacity up to `usize::MAX`.\n     /// If the `ptr` and `capacity` come from a `RawVec` created via `a`, then this is guaranteed.\n     #[inline]\n     pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, a: A) -> Self {"}]}