{"sha": "fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMjlhOWU4MzdjNmU5Njk5MTg1Y2NhZTU1ZTgzOTAyYjRmNmVmNmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-13T07:59:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-13T07:59:36Z"}, "message": "Merge #8494\n\n8494: internal: unfork code paths for unresolved and resolved assist r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "259a4e997aa8617cae19ab98ccc1daccb973c5a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/259a4e997aa8617cae19ab98ccc1daccb973c5a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdU9oCRBK7hj4Ov3rIwAAdHIIAIXlz+0a66pc9ZPGRJrOU1r3\nIpbAs5xhql6qckPfOEj/JZzLelCBPTeYhQ880KnTjeGI4Cc2Ets0UdA3DdMj9XDU\nCq9EZTelcgNSiac80q8EYLNYPnYMUhLg/XOxPsl/DiCxihOu9Q+zG945XL9CQpde\nb7Zl5jNhtkSAmJH9B37lcjHmILiQLZctKZLgejKClZc54XK2kJppvEb/HKJ7A02L\nRkznJ2+TLNi3oZyeW9a66UzsNIvnHkNYoywXkK19dqX4dJB/CEKNWo6STwsQyt9k\nsBcww7nyUn7yiVg5NPe/PiwCiQ8oRofQ02L2Vcpq3LZhyQlWr2aE3zUQyNC1Vg8=\n=RCRu\n-----END PGP SIGNATURE-----\n", "payload": "tree 259a4e997aa8617cae19ab98ccc1daccb973c5a0\nparent 15d3b6c577ad370302f9e82f0df4d001300f9b17\nparent 460f0ef6695d58f21e431331ad60d9a76d40d064\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618300776 +0000\ncommitter GitHub <noreply@github.com> 1618300776 +0000\n\nMerge #8494\n\n8494: internal: unfork code paths for unresolved and resolved assist r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "html_url": "https://github.com/rust-lang/rust/commit/fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15d3b6c577ad370302f9e82f0df4d001300f9b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d3b6c577ad370302f9e82f0df4d001300f9b17", "html_url": "https://github.com/rust-lang/rust/commit/15d3b6c577ad370302f9e82f0df4d001300f9b17"}, {"sha": "460f0ef6695d58f21e431331ad60d9a76d40d064", "url": "https://api.github.com/repos/rust-lang/rust/commits/460f0ef6695d58f21e431331ad60d9a76d40d064", "html_url": "https://github.com/rust-lang/rust/commit/460f0ef6695d58f21e431331ad60d9a76d40d064"}], "stats": {"total": 173, "additions": 72, "deletions": 101}, "files": [{"sha": "3694f468f0b9293e79834011b6886c1674c22416", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "patch": "@@ -28,7 +28,9 @@ pub use assist_config::AssistConfig;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum AssistKind {\n+    // FIXME: does the None variant make sense? Probably not.\n     None,\n+\n     QuickFix,\n     Generate,\n     Refactor,"}, {"sha": "712d5a9c277736e87205f3704d5647cc6f98c41d", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "patch": "@@ -42,27 +42,27 @@ pub(crate) fn text_range(line_index: &LineIndex, range: lsp_types::Range) -> Tex\n     TextRange::new(start, end)\n }\n \n-pub(crate) fn file_id(world: &GlobalStateSnapshot, url: &lsp_types::Url) -> Result<FileId> {\n-    world.url_to_file_id(url)\n+pub(crate) fn file_id(snap: &GlobalStateSnapshot, url: &lsp_types::Url) -> Result<FileId> {\n+    snap.url_to_file_id(url)\n }\n \n pub(crate) fn file_position(\n-    world: &GlobalStateSnapshot,\n+    snap: &GlobalStateSnapshot,\n     tdpp: lsp_types::TextDocumentPositionParams,\n ) -> Result<FilePosition> {\n-    let file_id = file_id(world, &tdpp.text_document.uri)?;\n-    let line_index = world.file_line_index(file_id)?;\n+    let file_id = file_id(snap, &tdpp.text_document.uri)?;\n+    let line_index = snap.file_line_index(file_id)?;\n     let offset = offset(&line_index, tdpp.position);\n     Ok(FilePosition { file_id, offset })\n }\n \n pub(crate) fn file_range(\n-    world: &GlobalStateSnapshot,\n+    snap: &GlobalStateSnapshot,\n     text_document_identifier: lsp_types::TextDocumentIdentifier,\n     range: lsp_types::Range,\n ) -> Result<FileRange> {\n-    let file_id = file_id(world, &text_document_identifier.uri)?;\n-    let line_index = world.file_line_index(file_id)?;\n+    let file_id = file_id(snap, &text_document_identifier.uri)?;\n+    let line_index = snap.file_line_index(file_id)?;\n     let range = text_range(&line_index, range);\n     Ok(FileRange { file_id, range })\n }\n@@ -82,7 +82,7 @@ pub(crate) fn assist_kind(kind: lsp_types::CodeActionKind) -> Option<AssistKind>\n }\n \n pub(crate) fn annotation(\n-    world: &GlobalStateSnapshot,\n+    snap: &GlobalStateSnapshot,\n     code_lens: lsp_types::CodeLens,\n ) -> Result<Annotation> {\n     let data = code_lens.data.unwrap();\n@@ -91,25 +91,25 @@ pub(crate) fn annotation(\n     match resolve {\n         lsp_ext::CodeLensResolveData::Impls(params) => {\n             let file_id =\n-                world.url_to_file_id(&params.text_document_position_params.text_document.uri)?;\n-            let line_index = world.file_line_index(file_id)?;\n+                snap.url_to_file_id(&params.text_document_position_params.text_document.uri)?;\n+            let line_index = snap.file_line_index(file_id)?;\n \n             Ok(Annotation {\n                 range: text_range(&line_index, code_lens.range),\n                 kind: AnnotationKind::HasImpls {\n-                    position: file_position(world, params.text_document_position_params)?,\n+                    position: file_position(snap, params.text_document_position_params)?,\n                     data: None,\n                 },\n             })\n         }\n         lsp_ext::CodeLensResolveData::References(params) => {\n-            let file_id = world.url_to_file_id(&params.text_document.uri)?;\n-            let line_index = world.file_line_index(file_id)?;\n+            let file_id = snap.url_to_file_id(&params.text_document.uri)?;\n+            let line_index = snap.file_line_index(file_id)?;\n \n             Ok(Annotation {\n                 range: text_range(&line_index, code_lens.range),\n                 kind: AnnotationKind::HasReferences {\n-                    position: file_position(world, params)?,\n+                    position: file_position(snap, params)?,\n                     data: None,\n                 },\n             })"}, {"sha": "85c70373a8cf878403b4f4cb66cd51fe70d744fd", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 40, "deletions": 60, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "patch": "@@ -8,16 +8,16 @@ use std::{\n };\n \n use ide::{\n-    AnnotationConfig, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, Query,\n-    RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, TextEdit,\n+    AnnotationConfig, AssistKind, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData,\n+    Query, RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange, TextEdit,\n };\n use ide_db::SymbolKind;\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n-    CodeActionKind, CodeLens, CompletionItem, Diagnostic, DiagnosticTag, DocumentFormattingParams,\n+    CodeLens, CompletionItem, Diagnostic, DiagnosticTag, DocumentFormattingParams,\n     DocumentHighlight, FoldingRange, FoldingRangeParams, HoverContents, Location, NumberOrString,\n     Position, PrepareRenameResponse, Range, RenameParams, SemanticTokensDeltaParams,\n     SemanticTokensFullDeltaResult, SemanticTokensParams, SemanticTokensRangeParams,\n@@ -36,7 +36,7 @@ use crate::{\n     diff::diff,\n     from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n-    line_index::{LineEndings, LineIndex},\n+    line_index::LineEndings,\n     lsp_ext::{self, InlayHint, InlayHintsParams},\n     lsp_utils::all_edits_are_disjoint,\n     to_proto, LspError, Result,\n@@ -982,86 +982,66 @@ pub(crate) fn handle_code_action(\n     params: lsp_types::CodeActionParams,\n ) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n     let _p = profile::span(\"handle_code_action\");\n-    // We intentionally don't support command-based actions, as those either\n-    // requires custom client-code anyway, or requires server-initiated edits.\n-    // Server initiated edits break causality, so we avoid those as well.\n+\n     if !snap.config.code_action_literals() {\n+        // We intentionally don't support command-based actions, as those either\n+        // require either custom client-code or server-initiated edits. Server\n+        // initiated edits break causality, so we avoid those.\n         return Ok(None);\n     }\n \n-    let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.file_line_index(file_id)?;\n-    let range = from_proto::text_range(&line_index, params.range);\n-    let frange = FileRange { file_id, range };\n+    let line_index =\n+        snap.file_line_index(from_proto::file_id(&snap, &params.text_document.uri)?)?;\n+    let frange = from_proto::file_range(&snap, params.text_document.clone(), params.range)?;\n \n     let mut assists_config = snap.config.assist();\n     assists_config.allowed = params\n-        .clone()\n         .context\n         .only\n+        .clone()\n         .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n \n     let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n-    let include_quick_fixes = match &params.context.only {\n-        Some(v) => v.iter().any(|it| {\n-            it == &lsp_types::CodeActionKind::EMPTY || it == &lsp_types::CodeActionKind::QUICKFIX\n-        }),\n+    let include_quick_fixes = match &assists_config.allowed {\n+        Some(v) => v.iter().any(|it| it == &AssistKind::None || it == &AssistKind::QuickFix),\n         None => true,\n     };\n-    if include_quick_fixes {\n-        add_quick_fixes(&snap, frange, &line_index, &mut res)?;\n-    }\n-\n-    if snap.config.code_action_resolve() {\n-        for (index, assist) in\n-            snap.analysis.assists(&assists_config, false, frange)?.into_iter().enumerate()\n-        {\n-            res.push(to_proto::unresolved_code_action(&snap, params.clone(), assist, index)?);\n-        }\n-    } else {\n-        for assist in snap.analysis.assists(&assists_config, true, frange)?.into_iter() {\n-            res.push(to_proto::resolved_code_action(&snap, assist)?);\n-        }\n-    }\n+    let code_action_resolve_cap = snap.config.code_action_resolve();\n \n-    Ok(Some(res))\n-}\n+    let mut assists = Vec::new();\n \n-fn add_quick_fixes(\n-    snap: &GlobalStateSnapshot,\n-    frange: FileRange,\n-    line_index: &LineIndex,\n-    acc: &mut Vec<lsp_ext::CodeAction>,\n-) -> Result<()> {\n-    let diagnostics = snap.analysis.diagnostics(&snap.config.diagnostics(), frange.file_id)?;\n+    // Fixes from native diagnostics.\n+    if include_quick_fixes {\n+        let diagnostics = snap.analysis.diagnostics(&snap.config.diagnostics(), frange.file_id)?;\n+        assists.extend(\n+            diagnostics\n+                .into_iter()\n+                .filter_map(|d| d.fix)\n+                .filter(|fix| fix.target.intersect(frange.range).is_some()),\n+        )\n+    }\n \n-    for fix in diagnostics\n-        .into_iter()\n-        .filter_map(|d| d.fix)\n-        .filter(|fix| fix.target.intersect(frange.range).is_some())\n-    {\n-        if let Some(source_change) = fix.source_change {\n-            let edit = to_proto::snippet_workspace_edit(&snap, source_change)?;\n-            let action = lsp_ext::CodeAction {\n-                title: fix.label.to_string(),\n-                group: None,\n-                kind: Some(CodeActionKind::QUICKFIX),\n-                edit: Some(edit),\n-                is_preferred: Some(false),\n-                data: None,\n-            };\n-            acc.push(action);\n-        }\n+    // Assists proper.\n+    assists.extend(snap.analysis.assists(&assists_config, !code_action_resolve_cap, frange)?);\n+    for (index, assist) in assists.into_iter().enumerate() {\n+        let resolve_data =\n+            if code_action_resolve_cap { Some((index, params.clone())) } else { None };\n+        let code_action = to_proto::code_action(&snap, assist, resolve_data)?;\n+        res.push(code_action)\n     }\n \n+    // Fixes from `cargo check`.\n     for fix in snap.check_fixes.get(&frange.file_id).into_iter().flatten() {\n+        // FIXME: this mapping is awkward and shouldn't exist. Refactor\n+        // `snap.check_fixes` to not convert to LSP prematurely.\n         let fix_range = from_proto::text_range(&line_index, fix.range);\n         if fix_range.intersect(frange.range).is_some() {\n-            acc.push(fix.action.clone());\n+            res.push(fix.action.clone());\n         }\n     }\n-    Ok(())\n+\n+    Ok(Some(res))\n }\n \n pub(crate) fn handle_code_action_resolve(\n@@ -1091,7 +1071,7 @@ pub(crate) fn handle_code_action_resolve(\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];\n     assert!(assist.id.0 == id);\n-    let edit = to_proto::resolved_code_action(&snap, assist.clone())?.edit;\n+    let edit = to_proto::code_action(&snap, assist.clone(), None)?.edit;\n     code_action.edit = edit;\n     Ok(code_action)\n }"}, {"sha": "53852bfdc8183e06ed08b080968258a332d64997", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "patch": "@@ -843,40 +843,31 @@ pub(crate) fn code_action_kind(kind: AssistKind) -> lsp_types::CodeActionKind {\n     }\n }\n \n-pub(crate) fn unresolved_code_action(\n+pub(crate) fn code_action(\n     snap: &GlobalStateSnapshot,\n-    code_action_params: lsp_types::CodeActionParams,\n     assist: Assist,\n-    index: usize,\n+    resolve_data: Option<(usize, lsp_types::CodeActionParams)>,\n ) -> Result<lsp_ext::CodeAction> {\n-    assert!(assist.source_change.is_none());\n-    let res = lsp_ext::CodeAction {\n+    let mut res = lsp_ext::CodeAction {\n         title: assist.label.to_string(),\n         group: assist.group.filter(|_| snap.config.code_action_group()).map(|gr| gr.0),\n         kind: Some(code_action_kind(assist.id.1)),\n         edit: None,\n         is_preferred: None,\n-        data: Some(lsp_ext::CodeActionData {\n-            id: format!(\"{}:{}\", assist.id.0, index.to_string()),\n-            code_action_params,\n-        }),\n-    };\n-    Ok(res)\n-}\n-\n-pub(crate) fn resolved_code_action(\n-    snap: &GlobalStateSnapshot,\n-    assist: Assist,\n-) -> Result<lsp_ext::CodeAction> {\n-    let change = assist.source_change.unwrap();\n-    let res = lsp_ext::CodeAction {\n-        edit: Some(snippet_workspace_edit(snap, change)?),\n-        title: assist.label.to_string(),\n-        group: assist.group.filter(|_| snap.config.code_action_group()).map(|gr| gr.0),\n-        kind: Some(code_action_kind(assist.id.1)),\n-        is_preferred: None,\n         data: None,\n     };\n+    match (assist.source_change, resolve_data) {\n+        (Some(it), _) => res.edit = Some(snippet_workspace_edit(snap, it)?),\n+        (None, Some((index, code_action_params))) => {\n+            res.data = Some(lsp_ext::CodeActionData {\n+                id: format!(\"{}:{}\", assist.id.0, index.to_string()),\n+                code_action_params,\n+            });\n+        }\n+        (None, None) => {\n+            stdx::never!(\"assist should always be resolved if client can't do lazy resolving\")\n+        }\n+    };\n     Ok(res)\n }\n "}, {"sha": "52a2674d5765024ea6e91be3e06dea1d44d4fa93", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a9e837c6e9699185ccae55e83902b4f6ef6a/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=fe29a9e837c6e9699185ccae55e83902b4f6ef6a", "patch": "@@ -340,7 +340,6 @@ fn main() {}\n                 }\n               ]\n             },\n-            \"isPreferred\": false,\n             \"kind\": \"quickfix\",\n             \"title\": \"Create module\"\n         }]),\n@@ -411,7 +410,6 @@ fn main() {{}}\n                 }\n               ]\n             },\n-            \"isPreferred\": false,\n             \"kind\": \"quickfix\",\n             \"title\": \"Create module\"\n         }]),"}]}