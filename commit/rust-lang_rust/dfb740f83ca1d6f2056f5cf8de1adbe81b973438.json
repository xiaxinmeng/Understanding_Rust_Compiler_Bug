{"sha": "dfb740f83ca1d6f2056f5cf8de1adbe81b973438", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYjc0MGY4M2NhMWQ2ZjIwNTZmNWNmOGRlMWFkYmU4MWI5NzM0Mzg=", "commit": {"author": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-05-08T19:30:30Z"}, "committer": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-05-08T19:30:30Z"}, "message": "removed unnecessary if", "tree": {"sha": "06bfecee0689cbb7b75ca0b14fc4e8dbe1eef26f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06bfecee0689cbb7b75ca0b14fc4e8dbe1eef26f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb740f83ca1d6f2056f5cf8de1adbe81b973438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb740f83ca1d6f2056f5cf8de1adbe81b973438", "html_url": "https://github.com/rust-lang/rust/commit/dfb740f83ca1d6f2056f5cf8de1adbe81b973438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb740f83ca1d6f2056f5cf8de1adbe81b973438/comments", "author": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f532bfed5e0a80bf145f5db504601dc037367a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f532bfed5e0a80bf145f5db504601dc037367a1", "html_url": "https://github.com/rust-lang/rust/commit/1f532bfed5e0a80bf145f5db504601dc037367a1"}], "stats": {"total": 3, "additions": 0, "deletions": 3}, "files": [{"sha": "a065dd6a592f27afa4a078f88a5355ecda29917b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfb740f83ca1d6f2056f5cf8de1adbe81b973438/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb740f83ca1d6f2056f5cf8de1adbe81b973438/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dfb740f83ca1d6f2056f5cf8de1adbe81b973438", "patch": "@@ -2681,9 +2681,6 @@ fn def_span<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Span {\n /// return the ID of the trait that the trait item belongs to.\n /// Otherwise, return `None`.\n fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n-    if def_id.krate != LOCAL_CRATE {\n-        return tcx.trait_of_item(def_id)\n-    }\n     tcx.opt_associated_item(def_id)\n         .and_then(|associated_item| {\n             match associated_item.container {"}]}