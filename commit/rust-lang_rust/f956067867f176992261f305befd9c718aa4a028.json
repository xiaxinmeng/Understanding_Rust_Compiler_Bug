{"sha": "f956067867f176992261f305befd9c718aa4a028", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NTYwNjc4NjdmMTc2OTkyMjYxZjMwNWJlZmQ5YzcxOGFhNGEwMjg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-09T06:58:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-09T06:58:48Z"}, "message": "Implement a -minimal mode prologue, cut 100kb from rustc.", "tree": {"sha": "137410b391aaf06405d60cf1b724b069283e186c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/137410b391aaf06405d60cf1b724b069283e186c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f956067867f176992261f305befd9c718aa4a028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f956067867f176992261f305befd9c718aa4a028", "html_url": "https://github.com/rust-lang/rust/commit/f956067867f176992261f305befd9c718aa4a028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f956067867f176992261f305befd9c718aa4a028/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f51b31dfe917bf2bbe3f12bed5431160966625", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f51b31dfe917bf2bbe3f12bed5431160966625", "html_url": "https://github.com/rust-lang/rust/commit/39f51b31dfe917bf2bbe3f12bed5431160966625"}], "stats": {"total": 110, "additions": 78, "deletions": 32}, "files": [{"sha": "d2d70ea26a054a120ed5b75da35ab5eb0a12644d", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 76, "deletions": 30, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f956067867f176992261f305befd9c718aa4a028/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/f956067867f176992261f305befd9c718aa4a028/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=f956067867f176992261f305befd9c718aa4a028", "patch": "@@ -1229,14 +1229,63 @@ let stack_growth_check\n       Il.patch_jump e bypass_grow_upcall_jmp_pc e.Il.emit_pc\n ;;\n \n-let fn_prologue\n-    (e:Il.emitter)\n+let n_glue_args = Int64.of_int Abi.worst_case_glue_call_args;;\n+let n_glue_words = Int64.mul word_sz n_glue_args;;\n+\n+let combined_frame_size\n     (framesz:size)\n     (callsz:size)\n+    : size =\n+  (*\n+   * We double the reserved callsz because we need a 'temporary tail-call\n+   * region' above the actual call region, in case there's a drop call at the\n+   * end of assembling the tail-call args and before copying them to callee\n+   * position.\n+   *)\n+\n+  let callsz = add_sz callsz callsz in\n+\n+  (*\n+   * Add in *another* word to handle an extra-awkward spill of the\n+   * callee address that might occur during an indirect tail call.\n+   *)\n+  let callsz = add_sz (SIZE_fixed word_sz) callsz in\n+\n+  (*\n+   * Add in enough words for a glue-call (these occur underneath esp)\n+   *)\n+  let callsz = add_sz (SIZE_fixed n_glue_words) callsz in\n+\n+    add_sz callsz framesz\n+;;\n+\n+let minimal_fn_prologue\n+    (e:Il.emitter)\n+    (call_and_frame_sz:Asm.expr64)\n+    : unit =\n+\n+  let emit = Il.emit e in\n+  let mov dst src = emit (Il.umov dst src) in\n+  let add dst src = emit (Il.binary Il.ADD dst (Il.Cell dst) src) in\n+  let sub dst src = emit (Il.binary Il.SUB dst (Il.Cell dst) src) in\n+\n+    (* See diagram and explanation in full_fn_prologue, below.    *)\n+    save_callee_saves e;\n+    mov (rc ebp) (ro esp);                 (* Establish frame base.  *)\n+    sub (rc esp) (imm call_and_frame_sz);  (* Establish a frame.     *)\n+    mov (rc edi) (ro esp);                 (* Zero the frame. *)\n+    mov (rc ecx) (imm call_and_frame_sz);\n+    emit (Il.unary Il.ZERO (word_at (h edi)) (ro ecx));\n+    (* Move esp back up over the glue region. *)\n+    add (rc esp) (immi n_glue_words);\n+;;\n+\n+let full_fn_prologue\n+    (e:Il.emitter)\n+    (call_and_frame_sz:size)\n     (nabi:nabi)\n     (grow_task_fixup:fixup)\n     (is_obj_fn:bool)\n-    (_(*minimal*):bool)\n     : unit =\n \n   let esi_n = word_n (h esi) in\n@@ -1299,33 +1348,6 @@ let fn_prologue\n    * callee-saves) before we perform the next check.\n    *)\n \n-  (*\n-   * We double the reserved callsz because we need a 'temporary tail-call\n-   * region' above the actual call region, in case there's a drop call at the\n-   * end of assembling the tail-call args and before copying them to callee\n-   * position.\n-   *)\n-\n-  let callsz = add_sz callsz callsz in\n-  let n_glue_args = Int64.of_int Abi.worst_case_glue_call_args in\n-  let n_glue_words = Int64.mul word_sz n_glue_args in\n-\n-  (*\n-   * Add in *another* word to handle an extra-awkward spill of the\n-   * callee address that might occur during an indirect tail call.\n-   *)\n-  let callsz = add_sz (SIZE_fixed word_sz) callsz in\n-\n-  (*\n-   * Add in enough words for a glue-call (these occur underneath esp)\n-   *)\n-  let callsz = add_sz (SIZE_fixed n_glue_words) callsz in\n-\n-  (*\n-   * Cumulative dynamic-frame size.\n-   *)\n-  let call_and_frame_sz = add_sz callsz framesz in\n-\n     (* Already have room to save regs on entry. *)\n     save_callee_saves e;\n \n@@ -1393,6 +1415,30 @@ let fn_prologue\n         add (rc esp) (immi n_glue_words);\n ;;\n \n+let fn_prologue\n+    (e:Il.emitter)\n+    (framesz:size)\n+    (callsz:size)\n+    (nabi:nabi)\n+    (grow_task_fixup:fixup)\n+    (is_obj_fn:bool)\n+    (minimal:bool)\n+    : unit =\n+\n+  let call_and_frame_sz = combined_frame_size framesz callsz in\n+\n+  let full _ =\n+    full_fn_prologue e call_and_frame_sz nabi grow_task_fixup is_obj_fn\n+  in\n+\n+    if minimal\n+    then\n+      match Il.size_to_expr64 call_and_frame_sz with\n+          None -> full()\n+        | Some sz -> minimal_fn_prologue e sz\n+    else\n+      full()\n+;;\n \n let fn_epilogue (e:Il.emitter) : unit =\n "}, {"sha": "d84c87a4f53bbe4b20734880c3a2417b6f18249b", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f956067867f176992261f305befd9c718aa4a028/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/f956067867f176992261f305befd9c718aa4a028/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=f956067867f176992261f305befd9c718aa4a028", "patch": "@@ -3477,7 +3477,7 @@ let trans_visitor\n    * the non-zero refcount case (i.e. fall-through means zero refcount).\n    *)\n   and drop_refcount_and_cmp (boxed:Il.cell) : quad_idx =\n-    in_quad_category \"drop refcnt + free\"\n+    in_quad_category \"refcount\"\n       begin\n         fun _ ->\n           iflog (fun _ -> annotate \"drop refcount and maybe free\");\n@@ -3498,7 +3498,7 @@ let trans_visitor\n       end\n \n   and incr_refcount (boxed:Il.cell) : unit =\n-    in_quad_category \"incr refcnt\"\n+    in_quad_category \"refcount\"\n       begin\n         fun _ ->\n           let rc = box_rc_cell boxed in"}]}