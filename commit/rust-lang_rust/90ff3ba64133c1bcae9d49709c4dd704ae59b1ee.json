{"sha": "90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZmYzYmE2NDEzM2MxYmNhZTlkNDk3MDljNGRkNzA0YWU1OWIxZWU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-20T14:48:25Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-20T14:48:25Z"}, "message": "Merge #1000\n\n1000: Clean up some documentation debt r=Xanewok a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\nCo-authored-by: bjorn3 <bjorn3@users.noreply.github.com>", "tree": {"sha": "7bc6798bb03af8148effab8f6a8a304d05d171bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bc6798bb03af8148effab8f6a8a304d05d171bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "html_url": "https://github.com/rust-lang/rust/commit/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "69ee5c9c5ef212f7911028c9ddf581559e6565c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/69ee5c9c5ef212f7911028c9ddf581559e6565c3", "html_url": "https://github.com/rust-lang/rust/commit/69ee5c9c5ef212f7911028c9ddf581559e6565c3"}, {"sha": "290237d2eb472522191721397d0c4db905cdc565", "url": "https://api.github.com/repos/rust-lang/rust/commits/290237d2eb472522191721397d0c4db905cdc565", "html_url": "https://github.com/rust-lang/rust/commit/290237d2eb472522191721397d0c4db905cdc565"}], "stats": {"total": 1149, "additions": 687, "deletions": 462}, "files": [{"sha": "a2efc7afa5abc75409a520237ba52547d1838e1e", "filename": "CONTRIBUTING.md", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5c9c5ef212f7911028c9ddf581559e6565c3/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5c9c5ef212f7911028c9ddf581559e6565c3/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=69ee5c9c5ef212f7911028c9ddf581559e6565c3", "patch": "@@ -1,18 +0,0 @@\n-The project is in its early stages: contributions are welcome and would be\n-**very** helpful, but the project is not _yet_ optimized for contribution.\n-Moreover, it is doubly experimental, so there's no guarantee that any work here\n-would reach production.\n-\n-To get an idea of how rust-analyzer works, take a look at the [ARCHITECTURE.md](./ARCHITECTURE.md)\n-document.\n-\n-Useful labels on the issue tracker:\n-  * [E-mentor](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-mentor)\n-    issues have links to the code in question and tests,\n-  * [E-easy](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy),\n-    [E-medium](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-medium),\n-    [E-hard](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-hard),\n-    labels are *estimates* for how hard would be to write a fix.\n-\n-There's no formal PR check list: everything that passes CI (we use [bors](https://bors.tech/)) is valid,\n-but it's a good idea to write nice commit messages, test code thoroughly, maintain consistent style, etc."}, {"sha": "3a0c9dee1631b17a7408a7072b227e88fa19a8d0", "filename": "README.md", "status": "modified", "additions": 22, "deletions": 94, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "patch": "@@ -13,116 +13,44 @@ Work on the Rust Analyzer is sponsored by\n \n [![Ferrous Systems](https://ferrous-systems.com/images/ferrous-logo-text.svg)](https://ferrous-systems.com/)\n \n-## Quick Start\n+## Language Server Quick Start\n \n-Rust analyzer builds on Rust >= 1.31.0 and uses the 2018 edition.\n+Rust Analyzer is a work-in-progress, so you'll have to build it from source, and\n+you might encounter critical bugs. That said, it is complete enough to provide a\n+useful IDE experience and some people use it as a daily driver.\n \n-```\n-# run tests\n-$ cargo test\n+To build rust-analyzer, you need:\n \n-# show syntax tree of a Rust file\n-$ cargo run --package ra_cli parse < crates/ra_syntax/src/lib.rs\n+* latest stable rust for language server itself\n+* latest stable npm and VS Code for VS Code extension (`code` should be in path)\n \n-# show symbols of a Rust file\n-$ cargo run --package ra_cli symbols < crates/ra_syntax/src/lib.rs\n+For setup for other editors, see [./docs/user](./docs/user).\n \n-# install the language server\n-$ cargo install-lsp\n-or\n-$ cargo install --path crates/ra_lsp_server\n ```\n+# clone the repo\n+$ git clone https://github.com/rust-analyzer/rust-analyzer && cd rust-analyzer\n+\n+# install both the language server and VS Code extension\n+$ cargo install-code\n \n-See [these instructions](./editors/README.md) for VS Code setup and the list of\n-features (some of which are VS Code specific).\n+# alternatively, install only the server. Binary name is `ra_lsp_server`.\n+$ cargo install-lsp\n+```\n+## Documentation\n \n-## Debugging\n+If you want to **contribute** to rust-analyzer or just curious about how things work\n+under the hood, check the [./docs/dev](./docs/dev) folder.\n \n-See [these instructions](./DEBUGGING.md) on how to debug the vscode extension and the lsp server.\n+If you want to **use** rust-analyzer's language server with your editor of\n+choice, check [./docs/user](./docs/user) folder. It also contains some tips & tricks to help\n+you be more productive when using rust-analyzer.\n \n ## Getting in touch\n \n We are on the rust-lang Zulip!\n \n https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frls-2.2E0\n \n-## Contributing\n-\n-See [CONTRIBUTING.md](./CONTRIBUTING.md) and [ARCHITECTURE.md](./ARCHITECTURE.md)\n-\n-## Supported LSP features\n-\n-### General\n-- [x] [initialize](https://microsoft.github.io/language-server-protocol/specification#initialize)\n-- [x] [initialized](https://microsoft.github.io/language-server-protocol/specification#initialized)\n-- [x] [shutdown](https://microsoft.github.io/language-server-protocol/specification#shutdown)\n-- [ ] [exit](https://microsoft.github.io/language-server-protocol/specification#exit)\n-- [x] [$/cancelRequest](https://microsoft.github.io/language-server-protocol/specification#cancelRequest)\n-\n-### Workspace\n-- [ ] [workspace/workspaceFolders](https://microsoft.github.io/language-server-protocol/specification#workspace_workspaceFolders)\n-- [ ] [workspace/didChangeWorkspaceFolders](https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeWorkspaceFolders)\n-- [x] [workspace/didChangeConfiguration](https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeConfiguration)\n-- [ ] [workspace/configuration](https://microsoft.github.io/language-server-protocol/specification#workspace_configuration)\n-- [x] [workspace/didChangeWatchedFiles](https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeWatchedFiles)\n-- [x] [workspace/symbol](https://microsoft.github.io/language-server-protocol/specification#workspace_symbol)\n-- [x] [workspace/executeCommand](https://microsoft.github.io/language-server-protocol/specification#workspace_executeCommand)\n- - `apply_code_action`\n-- [ ] [workspace/applyEdit](https://microsoft.github.io/language-server-protocol/specification#workspace_applyEdit)\n-\n-### Text Synchronization\n-- [x] [textDocument/didOpen](https://microsoft.github.io/language-server-protocol/specification#textDocument_didOpen)\n-- [x] [textDocument/didChange](https://microsoft.github.io/language-server-protocol/specification#textDocument_didChange)\n-- [ ] [textDocument/willSave](https://microsoft.github.io/language-server-protocol/specification#textDocument_willSave)\n-- [ ] [textDocument/willSaveWaitUntil](https://microsoft.github.io/language-server-protocol/specification#textDocument_willSaveWaitUntil)\n-- [x] [textDocument/didSave](https://microsoft.github.io/language-server-protocol/specification#textDocument_didSave)\n-- [x] [textDocument/didClose](https://microsoft.github.io/language-server-protocol/specification#textDocument_didClose)\n-\n-### Diagnostics\n-- [x] [textDocument/publishDiagnostics](https://microsoft.github.io/language-server-protocol/specification#textDocument_publishDiagnostics)\n-\n-### Lanuguage Features\n-- [x] [textDocument/completion](https://microsoft.github.io/language-server-protocol/specification#textDocument_completion)\n- - open close: false\n- - change: Full\n- - will save: false\n- - will save wait until: false\n- - save: false\n-- [x] [completionItem/resolve](https://microsoft.github.io/language-server-protocol/specification#completionItem_resolve)\n- - resolve provider: none\n- - trigger characters: `:`, `.`\n-- [x] [textDocument/hover](https://microsoft.github.io/language-server-protocol/specification#textDocument_hover)\n-- [x] [textDocument/signatureHelp](https://microsoft.github.io/language-server-protocol/specification#textDocument_signatureHelp)\n- - trigger characters: `(`,  `,`,  `)`\n-- [ ] [textDocument/declaration](https://microsoft.github.io/language-server-protocol/specification#textDocument_declaration)\n-- [x] [textDocument/definition](https://microsoft.github.io/language-server-protocol/specification#textDocument_definition)\n-- [ ] [textDocument/typeDefinition](https://microsoft.github.io/language-server-protocol/specification#textDocument_typeDefinition)\n-- [x] [textDocument/implementation](https://microsoft.github.io/language-server-protocol/specification#textDocument_implementation)\n-- [x] [textDocument/references](https://microsoft.github.io/language-server-protocol/specification#textDocument_references)\n-- [x] [textDocument/documentHighlight](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentHighlight)\n-- [x] [textDocument/documentSymbol](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentSymbol)\n-- [x] [textDocument/codeAction](https://microsoft.github.io/language-server-protocol/specification#textDocument_codeAction)\n- - rust-analyzer.syntaxTree\n- - rust-analyzer.extendSelection\n- - rust-analyzer.matchingBrace\n- - rust-analyzer.parentModule\n- - rust-analyzer.joinLines\n- - rust-analyzer.run\n- - rust-analyzer.analyzerStatus\n-- [x] [textDocument/codeLens](https://microsoft.github.io/language-server-protocol/specification#textDocument_codeLens)\n-- [ ] [textDocument/documentLink](https://microsoft.github.io/language-server-protocol/specification#codeLens_resolve)\n-- [ ] [documentLink/resolve](https://microsoft.github.io/language-server-protocol/specification#documentLink_resolve)\n-- [ ] [textDocument/documentColor](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentColor)\n-- [ ] [textDocument/colorPresentation](https://microsoft.github.io/language-server-protocol/specification#textDocument_colorPresentation)\n-- [x] [textDocument/formatting](https://microsoft.github.io/language-server-protocol/specification#textDocument_formatting)\n-- [ ] [textDocument/rangeFormatting](https://microsoft.github.io/language-server-protocol/specification#textDocument_rangeFormatting)\n-- [x] [textDocument/onTypeFormatting](https://microsoft.github.io/language-server-protocol/specification#textDocument_onTypeFormatting)\n- - first trigger character: `=`\n- - more trigger character `.`\n-- [x] [textDocument/rename](https://microsoft.github.io/language-server-protocol/specification#textDocument_rename)\n-- [x] [textDocument/prepareRename](https://microsoft.github.io/language-server-protocol/specification#textDocument_prepareRename)\n-- [x] [textDocument/foldingRange](https://microsoft.github.io/language-server-protocol/specification#textDocument_foldingRange)\n-\n ## License\n \n Rust analyzer is primarily distributed under the terms of both the MIT"}, {"sha": "3856ebc5bba39ac54121a9dedc6fdc089f2ec5f8", "filename": "ROADMAP.md", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5c9c5ef212f7911028c9ddf581559e6565c3/ROADMAP.md", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5c9c5ef212f7911028c9ddf581559e6565c3/ROADMAP.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ROADMAP.md?ref=69ee5c9c5ef212f7911028c9ddf581559e6565c3", "patch": "@@ -1,77 +0,0 @@\n-# Rust Analyzer Roadmap 01\n-\n-Written on 2018-11-06, extends approximately to February 2019.\n-After that, we should coordinate with the compiler/rls developers to align goals and share code and experience.\n-\n-\n-# Overall Goals\n-\n-The mission is:\n-  * Provide an excellent \"code analyzed as you type\" IDE experience for the Rust language,\n-  * Implement the bulk of the features in Rust itself.\n-\n-\n-High-level architecture constraints:\n-  * Long-term, replace the current rustc frontend.\n-    It's *obvious* that the code should be shared, but OTOH, all great IDEs started as from-scratch rewrites.\n-  * Don't hard-code a particular protocol or mode of operation.\n-    Produce a library which could be used for implementing an LSP server, or for in-process embedding.\n-  * As long as possible, stick with stable Rust.\n-\n-\n-# Current Goals\n-\n-Ideally, we would be coordinating with the compiler/rls teams, but they are busy working on making Rust 2018 at the moment.\n-The sync-up point will happen some time after the edition, probably early 2019.\n-In the meantime, the goal is to **experiment**, specifically, to figure out how a from-scratch written RLS might look like.\n-\n-\n-## Data Storage and Protocol implementation\n-\n-The fundamental part of any architecture is who owns which data, how the data is mutated and how the data is exposed to user.\n-For storage we use the [salsa](http://github.com/salsa-rs/salsa) library, which provides a solid model that seems to be the way to go.\n-\n-Modification to source files is mostly driven by the language client, but we also should support watching the file system. The current\n-file watching implementation is a stub.\n-\n-**Action Item:** implement reliable file watching service.\n-\n-We also should extract LSP bits as a reusable library. There's already `gen_lsp_server`, but it is pretty limited.\n-\n-**Action Item:** try using `gen_lsp_server` in more than one language server, for example for TOML and Nix.\n-\n-The ideal architecture for `gen_lsp_server` is still unclear. I'd rather avoid futures: they bring significant runtime complexity\n-(call stacks become insane) and the performance benefits are negligible for our use case (one thread per request is perfectly OK given\n-the low amount of requests a language server receives). The current interface is based on crossbeam-channel, but it's not clear\n-if that is the best choice.\n-\n-\n-## Low-effort, high payoff features\n-\n-Implementing 20% of type inference will give use 80% of completion.\n-Thus it makes sense to partially implement name resolution, type inference and trait matching, even though there is a chance that\n-this code is replaced later on when we integrate with the compiler\n-\n-Specifically, we need to:\n-\n-* **Action Item:** implement path resolution, so that we get completion in imports and such.\n-* **Action Item:** implement simple type inference, so that we get completion for inherent methods.\n-* **Action Item:** implement nicer completion infrastructure, so that we have icons, snippets, doc comments, after insert callbacks, ...\n-\n-\n-## Dragons to kill\n-\n-To make experiments most effective, we should try to prototype solutions for the hardest problems.\n-In the case of Rust, the two hardest problems are:\n-  * Conditional compilation and source/model mismatch.\n-    A single source file might correspond to several entities in the semantic model.\n-    For example, different cfg flags produce effectively different crates from the same source.\n-  * Macros are intertwined with name resolution in a single fix-point iteration algorithm.\n-    This is just plain hard to implement, but also interacts poorly with on-demand.\n-\n-\n-For the first bullet point, we need to design descriptors infra and explicit mapping step between sources and semantic model, which is intentionally fuzzy in one direction.\n-The **action item** here is basically \"write code, see what works, keep high-level picture in mind\".\n-\n-For the second bullet point, there's hope that salsa with its deep memoization will result in a fast enough solution even without being fully on-demand.\n-Again, the **action item** is to write the code and see what works. Salsa itself uses macros heavily, so it should be a great test."}, {"sha": "ac7f4fd71bf7afab8387df7bae2e66c2b7989010", "filename": "docs/dev/README.md", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "patch": "@@ -0,0 +1,124 @@\n+# Contributing Quick Start\n+\n+Rust Analyzer is just a usual rust project, which is organized as a Cargo\n+workspace, builds on stable and doesn't depend on C libraries. So, just\n+\n+```\n+$ cargo test\n+```\n+\n+should be enough to get you started!\n+\n+To learn more about how rust-analyzer works, see\n+[./architecture.md](./architecture.md) document.\n+\n+Various organizational and process issues are discussed here.\n+\n+# Getting in Touch\n+\n+Rust Analyzer is a part of [RLS-2.0 working\n+group](https://github.com/rust-lang/compiler-team/tree/6a769c13656c0a6959ebc09e7b1f7c09b86fb9c0/working-groups/rls-2.0).\n+Discussion happens in this Zulip stream:\n+\n+https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0\n+\n+# Issue Labels\n+\n+* [good-first-issue](https://github.com/rust-analyzer/rust-analyzer/labels/good%20first%20issue)\n+  are good issues to get into the project.\n+* [E-mentor](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-mentor)\n+  issues have links to the code in question and tests.\n+* [E-easy](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy),\n+  [E-medium](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-medium),\n+  [E-hard](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-hard),\n+  labels are *estimates* for how hard would be to write a fix.\n+* [E-fun](https://github.com/rust-analyzer/rust-analyzer/issues?q=is%3Aopen+is%3Aissue+label%3AE-fun)\n+  is for cool, but probably hard stuff.\n+\n+# CI\n+\n+We use Travis for CI. Most of the things, including formatting, are checked by\n+`cargo test` so, if `cargo test` passes locally, that's a good sign that CI will\n+be green as well. We use bors-ng to enforce the [not rocket\n+science](https://graydon2.dreamwidth.org/1597.html) rule.\n+\n+You can run `cargo format-hook` to install git-hook to run rustfmt on commit.\n+\n+# Code organization\n+\n+All Rust code lives in the `crates` top-level directory, and is organized as a\n+single Cargo workspace. The `editors` top-level directory contains code for\n+integrating with editors. Currently, it contains plugins for VS Code (in\n+typescript) and Emacs (in elisp). The `docs` top-level directory contains both\n+developer and user documentation.\n+\n+We have some automation infra in Rust in the `crates/tool` package. It contains\n+stuff like formatting checking, code generation and powers `cargo install-code`.\n+The latter syntax is achieved with the help of cargo aliases (see `.cargo`\n+directory).\n+\n+# Launching rust-analyzer\n+\n+Debugging language server can be tricky: LSP is rather chatty, so driving it\n+from the command line is not really feasible, driving it via VS Code requires\n+interacting with two processes.\n+\n+For this reason, the best way to see how rust-analyzer works is to find a\n+relevant test and execute it (VS Code includes an action for running a single\n+test).\n+\n+However, launching a VS Code instance with locally build language server is\n+possible. There's even a VS Code task for this, so just <kbd>F5</kbd> should\n+work (thanks, [@andrew-w-ross](https://github.com/andrew-w-ross)!).\n+\n+I often just install development version with `cargo jinstall-lsp` and\n+restart the host VS Code.\n+\n+See [./debugging.md](./debugging.md) for how to attach to rust-analyzer with\n+debugger, and don't forget that rust-analyzer has useful `pd` snippet and `dbg`\n+postfix completion for printf debugging :-)\n+\n+# Working With VS Code Extension\n+\n+To work on the VS Code extension, launch code inside `editors/code` and use `F5`\n+to launch/debug. To automatically apply formatter and linter suggestions, use\n+`npm run fix`.\n+\n+# Logging\n+\n+Logging is done by both rust-analyzer and VS Code, so it might be tricky to\n+figure out where logs go.\n+\n+Inside rust-analyzer, we use the standard `log` crate for logging, and\n+`flexi_logger` for logging frotend. By default, log goes to stderr (the same as\n+with `env_logger`), but the stderr itself is processed by VS Code. To mirror\n+logs to a `./log` directory, set `RA_INTERNAL_MODE=1` environmental variable.\n+\n+To see stderr in the running VS Code instance, go to the \"Output\" tab of the\n+panel and select `rust-analyzer`. This shows `eprintln!` as well. Note that\n+`stdout` is used for the actual protocol, so `println!` will break things.\n+\n+To log all communication between the server and the client, there are two choices:\n+\n+* you can log on the server side, by running something like\n+  ```\n+  env RUST_LOG=gen_lsp_server=trace code .\n+  ```\n+\n+* you can log on the client side, by enabling `\"rust-analyzer.trace.server\":\n+  \"verbose\"` workspace setting. These logs are shown in a separate tab in the\n+  output and could be used with LSP inspector. Kudos to\n+  [@DJMcNab](https://github.com/DJMcNab) for setting this awesome infra up!\n+\n+\n+There's also two VS Code commands which might be of interest:\n+\n+* `Rust Analyzer: Status` shows some memory-usage statistics. To take full\n+  advantage of it, you need to compile rust-analyzer with jemalloc support:\n+  ```\n+  $ cargo install --path crates/ra_lsp_server --force --features jemalloc\n+  ```\n+\n+  There's an alias for this: `cargo jinstall-lsp`.\n+\n+* `Rust Analyzer: Syntax Tree` shows syntax tree of the current file/selection."}, {"sha": "f990d5bf0ee91d5127e5c810a47f098c3303d71f", "filename": "docs/dev/architecture.md", "status": "renamed", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "patch": "@@ -7,8 +7,10 @@ in the right place!\n See also the [guide](./guide.md), which walks through a particular snapshot of\n rust-analyzer code base.\n \n-For syntax-trees specifically, there's a [video walk\n-through](https://youtu.be/DGAuLWdCCAI) as well.\n+Yet another resource is this playlist with videos about various parts of the\n+analyzer:\n+\n+https://www.youtube.com/playlist?list=PL85XCvVPmGQho7MZkdW-wtPtuJcFpzycE\n \n ## The Big Picture\n \n@@ -61,7 +63,7 @@ processes. These are outlined below:\n \n ## Code Walk-Through\n \n-### `crates/ra_syntax`\n+### `crates/ra_syntax`, `crates/ra_parser`\n \n Rust syntax tree structure and parser. See\n [RFC](https://github.com/rust-lang/rfcs/pull/2256) for some design notes.\n@@ -145,12 +147,14 @@ throughout its modules.\n \n An LSP implementation which wraps `ra_ide_api` into a langauge server protocol.\n \n-### `crates/ra_vfs`\n+### `ra_vfs`\n \n Although `hir` and `ra_ide_api` don't do any IO, we need to be able to read\n files from disk at the end of the day. This is what `ra_vfs` does. It also\n manages overlays: \"dirty\" files in the editor, whose \"true\" contents is\n-different from data on disk.\n+different from data on disk. This is more or less the single really\n+platform-dependent component, so it lives in a separate repository and has an\n+extensive cross-platform CI testing.\n \n ### `crates/gen_lsp_server`\n \n@@ -164,37 +168,32 @@ Run with `RUST_LOG=sync_lsp_server=debug` to see all the messages.\n \n A CLI interface to rust-analyzer.\n \n-### `crate/tools`\n-\n-Custom Cargo tasks used to develop rust-analyzer:\n-\n-- `cargo gen-syntax` -- generate `ast` and `syntax_kinds`\n-- `cargo gen-tests` -- collect inline tests from grammar\n-- `cargo install-code` -- build and install VS Code extension and server\n-\n-### `editors/code`\n-\n-VS Code plugin\n \n+## Testing Infrastructure\n \n-## Common workflows\n+Rust Analyzer has three interesting [systems\n+boundaries](https://www.tedinski.com/2018/04/10/making-tests-a-positive-influence-on-design.html)\n+to concentrate tests on.\n \n-To try out VS Code extensions, run `cargo install-code`.  This installs both the\n-`ra_lsp_server` binary and the VS Code extension. To install only the binary, use\n-`cargo install-lsp` (shorthand for `cargo install --path crates/ra_lsp_server --force`)\n+The outermost boundary is the `ra_lsp_server` crate, which defines an LSP\n+interface in terms of stdio. We do integration testing of this component, by\n+feeding it with a stream of LSP requests and checking responses. These tests are\n+known as \"heavy\", because they interact with Cargo and read real files from\n+disk. For this reason, we try to avoid writing too many tests on this boundary:\n+in a statically typed language, it's hard to make an error in the protocol\n+itself if messages are themselves typed.\n \n-To see logs from the language server, set `RUST_LOG=info` env variable. To see\n-all communication between the server and the client, use\n-`RUST_LOG=gen_lsp_server=debug` (this will print quite a bit of stuff).\n+The middle, and most important, boundary is `ra_ide_api`. Unlike\n+`ra_lsp_server`, which exposes API, `ide_api` uses Rust API and is intended to\n+use by various tools. Typical test creates an `AnalysisHost`, calls some\n+`Analysis` functions and compares the results against expectation.\n \n-There's `rust-analyzer: status` command which prints common high-level debug\n-info. In particular, it prints info about memory usage of various data\n-structures, and, if compiled with jemalloc support (`cargo jinstall-lsp` or \n-`cargo install --path crates/ra_lsp_server --force --features jemalloc`), includes\n- statistic about the heap.\n+The innermost and most elaborate boundary is `hir`. It has a much richer\n+vocabulary of types than `ide_api`, but the basic testing setup is the same: we\n+create a database, run some queries, assert result.\n \n-To run tests, just `cargo test`.\n+For comparisons, we use [insta](https://github.com/mitsuhiko/insta/) library for\n+snapshot testing.\n \n-To work on the VS Code extension, launch code inside `editors/code` and use `F5` to\n-launch/debug. To automatically apply formatter and linter suggestions, use `npm\n-run fix`.\n+To test various analysis corner cases and avoid forgetting about old tests, we\n+use so-called marks. See the `marks` module in the `test_utils` crate for more.", "previous_filename": "ARCHITECTURE.md"}, {"sha": "f868e6998f7f9ca3f68a2daa8d0148c2cf40942d", "filename": "docs/dev/debugging.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fdev%2Fdebugging.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fdev%2Fdebugging.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fdebugging.md?ref=90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "previous_filename": "DEBUGGING.md"}, {"sha": "abbe4c154242305f3af19020d44757c81fc6987a", "filename": "docs/dev/guide.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fdev%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fdev%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fguide.md?ref=90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "previous_filename": "guide.md"}, {"sha": "212d132eed79819daf0a86316260ba2a0096fd6f", "filename": "docs/dev/lsp-features.md", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fdev%2Flsp-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fdev%2Flsp-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-features.md?ref=90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "patch": "@@ -0,0 +1,74 @@\n+# Supported LSP features\n+\n+This list documents LSP features, supported by rust-analyzer.\n+\n+## General\n+- [x] [initialize](https://microsoft.github.io/language-server-protocol/specification#initialize)\n+- [x] [initialized](https://microsoft.github.io/language-server-protocol/specification#initialized)\n+- [x] [shutdown](https://microsoft.github.io/language-server-protocol/specification#shutdown)\n+- [ ] [exit](https://microsoft.github.io/language-server-protocol/specification#exit)\n+- [x] [$/cancelRequest](https://microsoft.github.io/language-server-protocol/specification#cancelRequest)\n+\n+## Workspace\n+- [ ] [workspace/workspaceFolders](https://microsoft.github.io/language-server-protocol/specification#workspace_workspaceFolders)\n+- [ ] [workspace/didChangeWorkspaceFolders](https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeWorkspaceFolders)\n+- [x] [workspace/didChangeConfiguration](https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeConfiguration)\n+- [ ] [workspace/configuration](https://microsoft.github.io/language-server-protocol/specification#workspace_configuration)\n+- [x] [workspace/didChangeWatchedFiles](https://microsoft.github.io/language-server-protocol/specification#workspace_didChangeWatchedFiles)\n+- [x] [workspace/symbol](https://microsoft.github.io/language-server-protocol/specification#workspace_symbol)\n+- [x] [workspace/executeCommand](https://microsoft.github.io/language-server-protocol/specification#workspace_executeCommand)\n+ - `apply_code_action`\n+- [ ] [workspace/applyEdit](https://microsoft.github.io/language-server-protocol/specification#workspace_applyEdit)\n+\n+## Text Synchronization\n+- [x] [textDocument/didOpen](https://microsoft.github.io/language-server-protocol/specification#textDocument_didOpen)\n+- [x] [textDocument/didChange](https://microsoft.github.io/language-server-protocol/specification#textDocument_didChange)\n+- [ ] [textDocument/willSave](https://microsoft.github.io/language-server-protocol/specification#textDocument_willSave)\n+- [ ] [textDocument/willSaveWaitUntil](https://microsoft.github.io/language-server-protocol/specification#textDocument_willSaveWaitUntil)\n+- [x] [textDocument/didSave](https://microsoft.github.io/language-server-protocol/specification#textDocument_didSave)\n+- [x] [textDocument/didClose](https://microsoft.github.io/language-server-protocol/specification#textDocument_didClose)\n+\n+## Diagnostics\n+- [x] [textDocument/publishDiagnostics](https://microsoft.github.io/language-server-protocol/specification#textDocument_publishDiagnostics)\n+\n+## Lanuguage Features\n+- [x] [textDocument/completion](https://microsoft.github.io/language-server-protocol/specification#textDocument_completion)\n+ - open close: false\n+ - change: Full\n+ - will save: false\n+ - will save wait until: false\n+ - save: false\n+- [x] [completionItem/resolve](https://microsoft.github.io/language-server-protocol/specification#completionItem_resolve)\n+ - resolve provider: none\n+ - trigger characters: `:`, `.`\n+- [x] [textDocument/hover](https://microsoft.github.io/language-server-protocol/specification#textDocument_hover)\n+- [x] [textDocument/signatureHelp](https://microsoft.github.io/language-server-protocol/specification#textDocument_signatureHelp)\n+ - trigger characters: `(`,  `,`,  `)`\n+- [ ] [textDocument/declaration](https://microsoft.github.io/language-server-protocol/specification#textDocument_declaration)\n+- [x] [textDocument/definition](https://microsoft.github.io/language-server-protocol/specification#textDocument_definition)\n+- [ ] [textDocument/typeDefinition](https://microsoft.github.io/language-server-protocol/specification#textDocument_typeDefinition)\n+- [x] [textDocument/implementation](https://microsoft.github.io/language-server-protocol/specification#textDocument_implementation)\n+- [x] [textDocument/references](https://microsoft.github.io/language-server-protocol/specification#textDocument_references)\n+- [x] [textDocument/documentHighlight](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentHighlight)\n+- [x] [textDocument/documentSymbol](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentSymbol)\n+- [x] [textDocument/codeAction](https://microsoft.github.io/language-server-protocol/specification#textDocument_codeAction)\n+ - rust-analyzer.syntaxTree\n+ - rust-analyzer.extendSelection\n+ - rust-analyzer.matchingBrace\n+ - rust-analyzer.parentModule\n+ - rust-analyzer.joinLines\n+ - rust-analyzer.run\n+ - rust-analyzer.analyzerStatus\n+- [x] [textDocument/codeLens](https://microsoft.github.io/language-server-protocol/specification#textDocument_codeLens)\n+- [ ] [textDocument/documentLink](https://microsoft.github.io/language-server-protocol/specification#codeLens_resolve)\n+- [ ] [documentLink/resolve](https://microsoft.github.io/language-server-protocol/specification#documentLink_resolve)\n+- [ ] [textDocument/documentColor](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentColor)\n+- [ ] [textDocument/colorPresentation](https://microsoft.github.io/language-server-protocol/specification#textDocument_colorPresentation)\n+- [x] [textDocument/formatting](https://microsoft.github.io/language-server-protocol/specification#textDocument_formatting)\n+- [ ] [textDocument/rangeFormatting](https://microsoft.github.io/language-server-protocol/specification#textDocument_rangeFormatting)\n+- [x] [textDocument/onTypeFormatting](https://microsoft.github.io/language-server-protocol/specification#textDocument_onTypeFormatting)\n+ - first trigger character: `=`\n+ - more trigger character `.`\n+- [x] [textDocument/rename](https://microsoft.github.io/language-server-protocol/specification#textDocument_rename)\n+- [x] [textDocument/prepareRename](https://microsoft.github.io/language-server-protocol/specification#textDocument_prepareRename)\n+- [x] [textDocument/foldingRange](https://microsoft.github.io/language-server-protocol/specification#textDocument_foldingRange)"}, {"sha": "439c4e6ae5c37cb12c8c2e983e2db2aa1d3d4fda", "filename": "docs/user/README.md", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "patch": "@@ -0,0 +1,77 @@\n+The main interface to rust-analyzer is the\n+[LSP](https://microsoft.github.io/language-server-protocol/) implementation. To\n+install lsp server, use `cargo install-lsp`, which is a shorthand for `cargo\n+install --package ra_lsp_server`. The binary is named `ra_lsp_server`, you\n+should be able to use it with any LSP-compatible editor. We use custom\n+extensions to LSP, so special client-side support is required to take full\n+advantage of rust-analyzer. This repository contains support code for VS Code\n+and Emacs.\n+\n+Rust Analyzer needs sources of rust standard library to work, so you might need\n+to execute\n+\n+```\n+$ rustup component add rust-src\n+```\n+\n+See [./features.md](./features.md) document for a list of features that are available.\n+\n+## VS Code\n+\n+Prerequisites:\n+\n+In order to build the VS Code plugin, you need to have node.js and npm with\n+a minimum version of 10 installed. Please refer to\n+[node.js and npm documentation](https://nodejs.org) for installation instructions.\n+\n+You will also need the most recent version of VS Code: we don't try to\n+maintain compatibility with older versions yet.\n+\n+The experimental VS Code plugin can then be built and installed by executing the\n+following commands:\n+\n+```\n+$ git clone https://github.com/rust-analyzer/rust-analyzer.git --depth 1\n+$ cd rust-analyzer\n+$ cargo install-code\n+```\n+\n+This will run `cargo install --package ra_lsp_server` to install the server\n+binary into `~/.cargo/bin`, and then will build and install plugin from\n+`editors/code`. See\n+[this](https://github.com/rust-analyzer/rust-analyzer/blob/69ee5c9c5ef212f7911028c9ddf581559e6565c3/crates/tools/src/main.rs#L37-L56)\n+for details. The installation is expected to *just work*, if it doesn't, report\n+bugs!\n+\n+It's better to remove existing Rust plugins to avoid interference.\n+\n+Beyond basic LSP features, there are some extension commands which you can\n+invoke via <kbd>Ctrl+Shift+P</kbd> or bind to a shortcut. See [./features.md](./features.md)\n+for details.\n+\n+### Settings\n+\n+* `rust-analyzer.highlightingOn`: enables experimental syntax highlighting\n+* `rust-analyzer.showWorkspaceLoadedNotification`: to ease troubleshooting, a\n+  notification is shown by default when a workspace is loaded\n+* `rust-analyzer.enableEnhancedTyping`: by default, rust-analyzer intercepts\n+  `Enter` key to make it easier to continue comments\n+* `rust-analyzer.raLspServerPath`: path to `ra_lsp_server` executable\n+* `rust-analyzer.enableCargoWatchOnStartup`: prompt to install & enable `cargo\n+  watch` for live error highlighting (note, this **does not** use rust-analyzer)\n+* `rust-analyzer.trace.server`: enables internal logging\n+\n+\n+## Emacs\n+\n+Prerequisites:\n+\n+`emacs-lsp`, `dash` and `ht` packages.\n+\n+Installation:\n+\n+* add\n+[ra-emacs-lsp.el](https://github.com/rust-analyzer/rust-analyzer/blob/69ee5c9c5ef212f7911028c9ddf581559e6565c3/editors/emacs/ra-emacs-lsp.el)\n+to load path and require it in `init.el`\n+* run `lsp` in a rust buffer\n+* (Optionally) bind commands like `rust-analyzer-join-lines` or `rust-analyzer-extend-selection` to keys"}, {"sha": "b9d2aa84f8bc640b4951ea3aacd4722b8ee16880", "filename": "docs/user/features.md", "status": "added", "additions": 359, "deletions": 0, "changes": 359, "blob_url": "https://github.com/rust-lang/rust/blob/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "patch": "@@ -0,0 +1,359 @@\n+This documents is an index of features that rust-analyzer language server\n+provides. Shortcuts are for the default VS Code layout. If there's no shortcut,\n+you can use <kbd>Ctrl+Shift+P</kbd> to search for the corresponding action.\n+\n+### Workspace Symbol <kbd>ctrl+t</kbd>\n+\n+Uses fuzzy-search to find types, modules and function by name across your\n+project and dependencies. This **the** most useful feature, which improves code\n+navigation tremendously. It mostly works on top of the built-in LSP\n+functionality, however `#` and `*` symbols can be used to narrow down the\n+search. Specifically,\n+\n+- `Foo` searches for `Foo` type in the current workspace\n+- `foo#` searches for `foo` function in the current workspace\n+- `Foo*` searches for `Foo` type among dependencies, excluding `stdlib`\n+- `foo#*` searches for `foo` function among dependencies.\n+\n+That is, `#` switches from \"types\" to all symbols, `*` switches from the current\n+workspace to dependencies.\n+\n+### Document Symbol <kbd>ctrl+shift+o</kbd>\n+\n+Provides a tree of the symbols defined in the file. Can be used to\n+\n+* fuzzy search symbol in a file (super useful)\n+* draw breadcrumbs to describe the context around the cursor\n+* draw outline of the file\n+\n+### On Typing Assists\n+\n+Some features trigger on typing certain characters:\n+\n+- typing `let =` tries to smartly add `;` if `=` is followed by an existing expression.\n+- Enter inside comments automatically inserts `///`\n+- typing `.` in a chain method call auto-indents\n+\n+### Commands <kbd>ctrl+shift+p</kbd>\n+\n+#### Extend Selection\n+\n+Extends the current selection to the encompassing syntactic construct\n+(expression, statement, item, module, etc). It works with multiple cursors. Do\n+bind this command to a key, it's super-useful! Expected to be upstreamed to LSP\n+soonish: https://github.com/Microsoft/language-server-protocol/issues/613\n+\n+#### Run\n+\n+Shows popup suggesting to run a test/benchmark/binary **at the current cursor\n+location**. Super useful for repeatedly running just a single test. Do bind this\n+to a shortcut!\n+\n+#### Parent Module\n+\n+Navigates to the parent module of the current module.\n+\n+#### Matching Brace\n+\n+If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n+moves cursor to the matching brace. It uses the actual parser to determine\n+braces, so it won't confuse generics with comparisons.\n+\n+#### Join Lines\n+\n+Join selected lines into one, smartly fixing up whitespace and trailing commas.\n+\n+#### Show Syntax Tree\n+\n+Shows the parse tree of the current file. It exists mostly for debugging\n+rust-analyzer itself.\n+\n+#### Status\n+\n+Shows internal statistic about memory usage of rust-analyzer\n+\n+#### Run garbage collection\n+\n+Manually triggers GC\n+\n+### Code Actions (Assists)\n+\n+These are triggered in a particular context via light bulb. We use custom code on\n+the VS Code side to be able to position cursor. `<|>` signifies cursor\n+\n+- Add `#[derive]`\n+\n+```rust\n+// before:\n+struct Foo {\n+    <|>x: i32\n+}\n+// after:\n+#[derive(<|>)]\n+struct Foo {\n+    x: i32\n+}\n+```\n+\n+- Add `impl`\n+\n+```rust\n+// before:\n+struct Foo<'a, T: Debug> {\n+    <|>t: T\n+}\n+// after:\n+struct Foo<'a, T: Debug> {\n+    t: T\n+}\n+\n+impl<'a, T: Debug> Foo<'a, T> {\n+    <|>\n+}\n+```\n+\n+- Add missing `impl` members\n+\n+```rust\n+// before:\n+trait Foo {\n+    fn foo(&self);\n+    fn bar(&self);\n+    fn baz(&self);\n+}\n+\n+struct S;\n+\n+impl Foo for S {\n+    fn bar(&self) {}\n+    <|>\n+}\n+\n+// after:\n+trait Foo {\n+    fn foo(&self);\n+    fn bar(&self);\n+    fn baz(&self);\n+}\n+\n+struct S;\n+\n+impl Foo for S {\n+    fn bar(&self) {}\n+    fn foo(&self) { unimplemented!() }\n+    fn baz(&self) { unimplemented!() }<|>\n+}\n+```\n+\n+- Import path\n+\n+```rust\n+// before:\n+impl std::fmt::Debug<|> for Foo {\n+}\n+\n+// after:\n+use std::fmt::Debug;\n+\n+impl Debug<|> for Foo {\n+}\n+```\n+\n+- Change Visibility\n+\n+```rust\n+// before:\n+<|>fn foo() {}\n+\n+// after:\n+<|>pub(crate) fn foo() {}\n+\n+// after:\n+<|>pub fn foo() {}\n+```\n+\n+- Fill match arms\n+\n+```rust\n+// before:\n+enum A {\n+    As,\n+    Bs,\n+    Cs(String),\n+    Ds(String, String),\n+    Es{x: usize, y: usize}\n+}\n+\n+fn main() {\n+    let a = A::As;\n+    match a<|> {}\n+}\n+\n+// after:\n+enum A {\n+    As,\n+    Bs,\n+    Cs(String),\n+    Ds(String, String),\n+    Es{x: usize, y: usize}\n+}\n+\n+fn main() {\n+    let a = A::As;\n+    match <|>a {\n+        A::As => (),\n+        A::Bs => (),\n+        A::Cs(_) => (),\n+        A::Ds(_, _) => (),\n+        A::Es{x, y} => (),\n+    }\n+}\n+```\n+\n+-- Fill struct fields\n+\n+```rust\n+// before:\n+struct S<'a, D> {\n+    a: u32,\n+    b: String,\n+    c: (i32, i32),\n+    d: D,\n+    r: &'a str,\n+}\n+\n+fn main() {\n+    let s = S<|> {}\n+}\n+\n+// after:\n+struct S<'a, D> {\n+    a: u32,\n+    b: String,\n+    c: (i32, i32),\n+    d: D,\n+    r: &'a str,\n+}\n+\n+fn main() {\n+    let s = <|>S {\n+        a: (),\n+        b: (),\n+        c: (),\n+        d: (),\n+        r: (),\n+    }\n+}\n+```\n+\n+- Flip `,`\n+\n+```rust\n+// before:\n+fn foo(x: usize,<|> dim: (usize, usize)) {}\n+// after:\n+fn foo(dim: (usize, usize), x: usize) {}\n+```\n+\n+- Introduce variable:\n+\n+```rust\n+// before:\n+fn foo() {\n+    foo(<|>1 + 1<|>);\n+}\n+\n+// after:\n+fn foo() {\n+    let var_name = 1 + 1;\n+    foo(var_name);\n+}\n+```\n+\n+-- Remove `dbg!`\n+\n+```rust\n+// before:\n+fn foo(n: usize) {\n+    if let Some(_) = dbg!(n.<|>checked_sub(4)) {\n+        // ...\n+    }\n+}\n+\n+// after:\n+fn foo(n: usize) {\n+    if let Some(_) = n.<|>checked_sub(4) {\n+        // ...\n+    }\n+}\n+```\n+\n+- Replace if-let with match:\n+\n+```rust\n+// before:\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        if <|>let VariantData::Struct(..) = *self {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+// after:\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        <|>match *self {\n+            VariantData::Struct(..) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+```\n+\n+- Split import\n+\n+```rust\n+// before:\n+use algo:<|>:visitor::{Visitor, visit};\n+//after:\n+use algo::{<|>visitor::{Visitor, visit}};\n+```\n+\n+### Magic Completions\n+\n+In addition to usual reference completion, rust-analyzer provides some \u2728magic\u2728\n+completions as well:\n+\n+Keywords like `if`, `else` `while`, `loop` are completed with braces, and cursor\n+is placed at the appropriate position. Even though `if` is easy to type, you\n+still want to complete it, to get ` { }` for free! `return` is inserted with a\n+space or `;` depending on the return type of the function.\n+\n+When completing a function call, `()` are automatically inserted. If function\n+takes arguments, cursor is positioned inside the parenthesis.\n+\n+There are postifx completions, which can be triggerd by typing something like\n+`foo().if`. The word after `.` determines postifx completion, possible variants are:\n+\n+- `expr.if` -> `if expr {}`\n+- `expr.match` -> `match expr {}`\n+- `expr.while` -> `while expr {}`\n+- `expr.ref` -> `&expr`\n+- `expr.refm` -> `&mut expr`\n+- `expr.not` -> `!expr`\n+- `expr.dbg` -> `dbg!(expr)`\n+\n+There also snippet completions:\n+\n+#### Inside Expressions\n+\n+- `pd` -> `println!(\"{:?}\")`\n+- `ppd` -> `println!(\"{:#?}\")`\n+\n+#### Inside Modules\n+\n+- `tfn` -> `#[test] fn f(){}`\n+"}, {"sha": "ddc6ee0485f41466b2d676034f0dbde51de6b415", "filename": "editors/README.md", "status": "removed", "additions": 0, "deletions": 241, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/69ee5c9c5ef212f7911028c9ddf581559e6565c3/editors%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/69ee5c9c5ef212f7911028c9ddf581559e6565c3/editors%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2FREADME.md?ref=69ee5c9c5ef212f7911028c9ddf581559e6565c3", "patch": "@@ -1,241 +0,0 @@\n-\n-Prerequisites:\n-\n-In order to build the VS Code plugin, you need to have node.js and npm with\n-a minimum version of 10 installed. Please refer to\n-[node.js and npm documentation](https://nodejs.org) for installation instructions.\n-\n-You will also need the most recent version of VS Code: we don't try to\n-maintain compatibility with older versions yet.\n-\n-The experimental VS Code plugin can then be built and installed by executing the\n-following commands:\n-\n-```\n-$ git clone https://github.com/rust-analyzer/rust-analyzer.git --depth 1\n-$ cd rust-analyzer\n-$ cargo install-code\n-\n-# for stdlib support\n-$ rustup component add rust-src\n-```\n-\n-This will run `cargo install --package ra_lsp_server` to install the server\n-binary into `~/.cargo/bin`, and then will build and install plugin from\n-`editors/code`. See\n-[this](https://github.com/rust-analyzer/rust-analyzer/blob/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates/tools/src/main.rs#L150)\n-for details. The installation is expected to *just work*, if it doesn't, report\n-bugs!\n-\n-It's better to remove existing Rust plugins to avoid interference.\n-\n-## Rust Analyzer Specific Features\n-\n-These features are implemented as extensions to the language server protocol.\n-They are more experimental in nature and work only with VS Code.\n-\n-### Syntax highlighting\n-\n-It overrides built-in highlighting, and works only with a specific theme\n-(zenburn). `rust-analyzer.highlightingOn` setting can be used to disable it.\n-\n-### Go to symbol in workspace <kbd>ctrl+t</kbd>\n-\n-It mostly works on top of the built-in LSP functionality, however `#` and `*`\n-symbols can be used to narrow down the search. Specifically,\n-\n-- `#Foo` searches for `Foo` type in the current workspace\n-- `#foo#` searches for `foo` function in the current workspace\n-- `#Foo*` searches for `Foo` type among dependencies, excluding `stdlib`\n-- `#foo#*` searches for `foo` function among dependencies.\n-\n-That is, `#` switches from \"types\" to all symbols, `*` switches from the current\n-workspace to dependencies.\n-\n-### Commands <kbd>ctrl+shift+p</kbd>\n-\n-#### Show Rust Syntax Tree\n-\n-Shows the parse tree of the current file. It exists mostly for debugging\n-rust-analyzer itself.\n-\n-#### Extend Selection\n-\n-Extends the current selection to the encompassing syntactic construct\n-(expression, statement, item, module, etc). It works with multiple cursors. Do\n-bind this command to a key, its super-useful! Expected to be upstreamed to LSP soonish:\n-https://github.com/Microsoft/language-server-protocol/issues/613\n-\n-#### Matching Brace\n-\n-If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n-moves cursor to the matching brace. It uses the actual parser to determine\n-braces, so it won't confuse generics with comparisons.\n-\n-#### Parent Module\n-\n-Navigates to the parent module of the current module.\n-\n-#### Join Lines\n-\n-Join selected lines into one, smartly fixing up whitespace and trailing commas.\n-\n-#### Run\n-\n-Shows popup suggesting to run a test/benchmark/binary **at the current cursor\n-location**. Super useful for repeatedly running just a single test. Do bind this\n-to a shortcut!\n-\n-\n-### On Typing Assists\n-\n-Some features trigger on typing certain characters:\n-\n-- typing `let =` tries to smartly add `;` if `=` is followed by an existing expression.\n-- Enter inside comments automatically inserts `///`\n-- typing `.` in a chain method call auto-indents\n-\n-\n-### Code Actions (Assists)\n-\n-These are triggered in a particular context via light bulb. We use custom code on\n-the VS Code side to be able to position cursor.\n-\n-\n-- Flip `,`\n-\n-```rust\n-// before:\n-fn foo(x: usize,<|> dim: (usize, usize))\n-// after:\n-fn foo(dim: (usize, usize), x: usize)\n-```\n-\n-- Add `#[derive]`\n-\n-```rust\n-// before:\n-struct Foo {\n-    <|>x: i32\n-}\n-// after:\n-#[derive(<|>)]\n-struct Foo {\n-    x: i32\n-}\n-```\n-\n-- Add `impl`\n-\n-```rust\n-// before:\n-struct Foo<'a, T: Debug> {\n-    <|>t: T\n-}\n-// after:\n-struct Foo<'a, T: Debug> {\n-    t: T\n-}\n-\n-impl<'a, T: Debug> Foo<'a, T> {\n-    <|>\n-}\n-```\n-\n-- Change visibility\n-\n-```rust\n-// before:\n-fn<|> foo() {}\n-\n-// after\n-pub(crate) fn foo() {}\n-```\n-\n-- Introduce variable:\n-\n-```rust\n-// before:\n-fn foo() {\n-    foo(<|>1 + 1<|>);\n-}\n-\n-// after:\n-fn foo() {\n-    let var_name = 1 + 1;\n-    foo(var_name);\n-}\n-```\n-\n-- Replace if-let with match:\n-\n-```rust\n-// before:\n-impl VariantData {\n-    pub fn is_struct(&self) -> bool {\n-        if <|>let VariantData::Struct(..) = *self {\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n-// after:\n-impl VariantData {\n-    pub fn is_struct(&self) -> bool {\n-        <|>match *self {\n-            VariantData::Struct(..) => true,\n-            _ => false,\n-        }\n-    }\n-}\n-```\n-\n-- Split import\n-\n-```rust\n-// before:\n-use algo:<|>:visitor::{Visitor, visit};\n-//after:\n-use algo::{<|>visitor::{Visitor, visit}};\n-```\n-\n-## LSP features\n-\n-* **Go to definition**: works correctly for local variables and some paths,\n-  falls back to heuristic name matching for other things for the time being.\n-\n-* **Completion**: completes paths, including dependencies and standard library.\n-  Does not handle glob imports and macros. Completes fields and inherent\n-  methods.\n-\n-* **Outline** <kbd>alt+shift+o</kbd>\n-\n-* **Signature Info**\n-\n-* **Format document**. Formats the current file with rustfmt. Rustfmt must be\n-  installed separately with `rustup component add rustfmt`.\n-\n-* **Hover** shows types of expressions and docstings\n-\n-* **Rename** works for local variables\n-\n-* **Code Lens** for running tests\n-\n-* **Folding**\n-\n-* **Diagnostics**\n-  - missing module for `mod foo;` with a fix to create `foo.rs`.\n-  - struct field shorthand\n-  - unnecessary braces in use item\n-\n-\n-## Performance\n-\n-Rust Analyzer is expected to be pretty fast. Specifically, the initial analysis\n-of the project (i.e, when you first invoke completion or symbols) typically\n-takes dozen of seconds at most. After that, everything is supposed to be more or\n-less instant. However currently all analysis results are kept in memory, so\n-memory usage is pretty high. Working with `rust-lang/rust` repo, for example,\n-needs about 5 gigabytes of ram."}]}