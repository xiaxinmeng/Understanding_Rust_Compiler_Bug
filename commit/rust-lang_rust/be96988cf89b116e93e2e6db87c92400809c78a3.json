{"sha": "be96988cf89b116e93e2e6db87c92400809c78a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOTY5ODhjZjg5YjExNmU5M2UyZTZkYjg3YzkyNDAwODA5Yzc4YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-05T18:14:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-05T18:14:09Z"}, "message": "Auto merge of #28849 - semmaz:doc-anchor-fix, r=alexcrichton\n\nr? @steveklabnik", "tree": {"sha": "1a099f85480e0bfbe484d98edeecdb113224da5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a099f85480e0bfbe484d98edeecdb113224da5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be96988cf89b116e93e2e6db87c92400809c78a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be96988cf89b116e93e2e6db87c92400809c78a3", "html_url": "https://github.com/rust-lang/rust/commit/be96988cf89b116e93e2e6db87c92400809c78a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be96988cf89b116e93e2e6db87c92400809c78a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c298efdb1f5e9334c25dcc1ea98fcc35a0b4c05d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c298efdb1f5e9334c25dcc1ea98fcc35a0b4c05d", "html_url": "https://github.com/rust-lang/rust/commit/c298efdb1f5e9334c25dcc1ea98fcc35a0b4c05d"}, {"sha": "fcf8dedb99fa674a152b5625dd81938c4d8ff67b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf8dedb99fa674a152b5625dd81938c4d8ff67b", "html_url": "https://github.com/rust-lang/rust/commit/fcf8dedb99fa674a152b5625dd81938c4d8ff67b"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "0ad8a78880e523306e293440bd40c5f8dd700991", "filename": "src/doc/nomicon/lifetime-mismatch.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Fnomicon%2Flifetime-mismatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Fnomicon%2Flifetime-mismatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Flifetime-mismatch.md?ref=be96988cf89b116e93e2e6db87c92400809c78a3", "patch": "@@ -78,4 +78,4 @@ TODO: other common problems? SEME regions stuff, mostly?\n \n \n \n-[ex2]: lifetimes.html#example-2:-aliasing-a-mutable-reference\n+[ex2]: lifetimes.html#example-aliasing-a-mutable-reference"}, {"sha": "85e17a9ce5b7ef29c060905403672c77cb7b527f", "filename": "src/doc/nomicon/repr-rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Fnomicon%2Frepr-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Fnomicon%2Frepr-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Frepr-rust.md?ref=be96988cf89b116e93e2e6db87c92400809c78a3", "patch": "@@ -151,4 +151,4 @@ use fairly elaborate algorithms to cache bits throughout nested types with\n special constrained representations. As such it is *especially* desirable that\n we leave enum layout unspecified today.\n \n-[dst]: exotic-sizes.html#dynamically-sized-types-(dsts)\n+[dst]: exotic-sizes.html#dynamically-sized-types-dsts"}, {"sha": "aba7bed842e888730e822574c2764e5e1d4ae85f", "filename": "src/doc/reference.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=be96988cf89b116e93e2e6db87c92400809c78a3", "patch": "@@ -1997,7 +1997,7 @@ On `struct`s:\n   list of names `#[macro_use(foo, bar)]` restricts the import to just those\n   macros named.  The `extern crate` must appear at the crate root, not inside\n   `mod`, which ensures proper function of the [`$crate` macro\n-  variable](book/macros.html#the-variable-$crate).\n+  variable](book/macros.html#the-variable-crate).\n \n - `macro_reexport` on an `extern crate` \u2014 re-export the named macros.\n \n@@ -2007,7 +2007,7 @@ On `struct`s:\n   link it into the output.\n \n See the [macros section of the\n-book](book/macros.html#scoping-and-macro-import/export) for more information on\n+book](book/macros.html#scoping-and-macro-importexport) for more information on\n macro scope.\n \n \n@@ -2586,7 +2586,7 @@ Here are some examples:\n #### Moved and copied types\n \n When a [local variable](#variables) is used as an\n-[rvalue](#lvalues,-rvalues-and-temporaries), the variable will be copied\n+[rvalue](#lvalues-rvalues-and-temporaries), the variable will be copied\n if its type implements `Copy`. All others are moved.\n \n ### Literal expressions\n@@ -2605,7 +2605,7 @@ value, or the unit value.\n ### Path expressions\n \n A [path](#paths) used as an expression context denotes either a local variable\n-or an item. Path expressions are [lvalues](#lvalues,-rvalues-and-temporaries).\n+or an item. Path expressions are [lvalues](#lvalues-rvalues-and-temporaries).\n \n ### Tuple expressions\n \n@@ -2718,7 +2718,7 @@ foo().x;\n (Struct {a: 10, b: 20}).a;\n ```\n \n-A field access is an [lvalue](#lvalues,-rvalues-and-temporaries) referring to\n+A field access is an [lvalue](#lvalues-rvalues-and-temporaries) referring to\n the value of that field. When the type providing the field inherits mutability,\n it can be [assigned](#assignment-expressions) to.\n \n@@ -2729,7 +2729,7 @@ fewer autoderefs to more.\n \n ### Array expressions\n \n-An [array](#array,-and-slice-types) _expression_ is written by enclosing zero\n+An [array](#array-and-slice-types) _expression_ is written by enclosing zero\n or more comma-separated expressions of uniform type in square brackets.\n \n In the `[expr ';' expr]` form, the expression after the `';'` must be a\n@@ -2745,9 +2745,9 @@ constant expression that can be evaluated at compile time, such as a\n \n ### Index expressions\n \n-[Array](#array,-and-slice-types)-typed expressions can be indexed by\n+[Array](#array-and-slice-types)-typed expressions can be indexed by\n writing a square-bracket-enclosed expression (the index) after them. When the\n-array is mutable, the resulting [lvalue](#lvalues,-rvalues-and-temporaries) can\n+array is mutable, the resulting [lvalue](#lvalues-rvalues-and-temporaries) can\n be assigned to.\n \n Indices are zero-based, and may be of any integral type. Vector access is\n@@ -2801,7 +2801,7 @@ before the expression they apply to.\n * `*`\n   : Dereference. When applied to a [pointer](#pointer-types) it denotes the\n     pointed-to location. For pointers to mutable locations, the resulting\n-    [lvalue](#lvalues,-rvalues-and-temporaries) can be assigned to.\n+    [lvalue](#lvalues-rvalues-and-temporaries) can be assigned to.\n     On non-pointer types, it calls the `deref` method of the `std::ops::Deref`\n     trait, or the `deref_mut` method of the `std::ops::DerefMut` trait (if\n     implemented by the type and required for an outer expression that will or\n@@ -2942,8 +2942,8 @@ surprising side-effects on the dynamic execution semantics.\n #### Assignment expressions\n \n An _assignment expression_ consists of an\n-[lvalue](#lvalues,-rvalues-and-temporaries) expression followed by an equals\n-sign (`=`) and an [rvalue](#lvalues,-rvalues-and-temporaries) expression.\n+[lvalue](#lvalues-rvalues-and-temporaries) expression followed by an equals\n+sign (`=`) and an [rvalue](#lvalues-rvalues-and-temporaries) expression.\n \n Evaluating an assignment expression [either copies or\n moves](#moved-and-copied-types) its right-hand operand to its left-hand\n@@ -3170,7 +3170,7 @@ stands for a *single* data field, whereas a wildcard `..` stands for *all* the\n fields of a particular variant.\n \n A `match` behaves differently depending on whether or not the head expression\n-is an [lvalue or an rvalue](#lvalues,-rvalues-and-temporaries). If the head\n+is an [lvalue or an rvalue](#lvalues-rvalues-and-temporaries). If the head\n expression is an rvalue, it is first evaluated into a temporary location, and\n the resulting value is sequentially compared to the patterns in the arms until\n a match is found. The first arm with a matching pattern is chosen as the branch\n@@ -3489,7 +3489,7 @@ enclosing `enum` or `struct` type itself. Such recursion has restrictions:\n \n * Recursive types must include a nominal type in the recursion\n   (not mere [type definitions](grammar.html#type-definitions),\n-   or other structural types such as [arrays](#array,-and-slice-types) or [tuples](#tuple-types)).\n+   or other structural types such as [arrays](#array-and-slice-types) or [tuples](#tuple-types)).\n * A recursive `enum` item must have at least one non-recursive constructor\n   (in order to give the recursion a basis case).\n * The size of a recursive type must be finite;"}, {"sha": "a17f3a5cae5cd7c869470cd31de915b7b4f19994", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=be96988cf89b116e93e2e6db87c92400809c78a3", "patch": "@@ -53,7 +53,7 @@ For sharing references across threads, Rust provides a wrapper type called\n `Arc<T>`. `Arc<T>` implements `Send` and `Sync` if and only if `T` implements\n both `Send` and `Sync`. For example, an object of type `Arc<RefCell<U>>` cannot\n be transferred across threads because\n-[`RefCell`](choosing-your-guarantees.html#refcell%3Ct%3E) does not implement\n+[`RefCell`](choosing-your-guarantees.html#refcellt) does not implement\n `Sync`, consequently `Arc<RefCell<U>>` would not implement `Send`.\n \n These two traits allow you to use the type system to make strong guarantees"}, {"sha": "a6ff75db89b88ddccbefe9f1b315df47d9e14240", "filename": "src/doc/trpl/conditional-compilation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Ftrpl%2Fconditional-compilation.md", "raw_url": "https://github.com/rust-lang/rust/raw/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Ftrpl%2Fconditional-compilation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconditional-compilation.md?ref=be96988cf89b116e93e2e6db87c92400809c78a3", "patch": "@@ -34,7 +34,7 @@ These can nest arbitrarily:\n As for how to enable or disable these switches, if you\u2019re using Cargo,\n they get set in the [`[features]` section][features] of your `Cargo.toml`:\n \n-[features]: http://doc.crates.io/manifest.html#the-%5Bfeatures%5D-section\n+[features]: http://doc.crates.io/manifest.html#the-features-section\n \n ```toml\n [features]"}, {"sha": "8d2432f285e393c42daccba3b2f1c47dc13adb64", "filename": "src/doc/trpl/dining-philosophers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md?ref=be96988cf89b116e93e2e6db87c92400809c78a3", "patch": "@@ -434,7 +434,7 @@ ownership of the values it\u2019s capturing. Primarily, the `p` variable of the\n \n Inside the thread, all we do is call `eat()` on `p`. Also note that the call to `thread::spawn` lacks a trailing semicolon, making this an expression. This distinction is important, yielding the correct return value. For more details, read [Expressions vs. Statements][es].\n \n-[es]: functions.html#expressions-vs.-statements\n+[es]: functions.html#expressions-vs-statements\n \n ```rust,ignore\n }).collect();"}, {"sha": "e538a40415dfdd523c9a4b28db9ec0c44b773712", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=be96988cf89b116e93e2e6db87c92400809c78a3", "patch": "@@ -28,7 +28,7 @@ systems may want to jump around.\n     * [The `Result` type](#the-result-type)\n         * [Parsing integers](#parsing-integers)\n         * [The `Result` type alias idiom](#the-result-type-alias-idiom)\n-    * [A brief interlude: unwrapping isn't evil](#a-brief-interlude-unwrapping-isn't-evil)\n+    * [A brief interlude: unwrapping isn't evil](#a-brief-interlude-unwrapping-isnt-evil)\n * [Working with multiple error types](#working-with-multiple-error-types)\n     * [Composing `Option` and `Result`](#composing-option-and-result)\n     * [The limits of combinators](#the-limits-of-combinators)\n@@ -1470,7 +1470,7 @@ representation. But certainly, this will vary depending on use cases.\n At a minimum, you should probably implement the\n [`Error`](../std/error/trait.Error.html)\n trait. This will give users of your library some minimum flexibility for\n-[composing errors](#the-real-try!-macro). Implementing the `Error` trait also\n+[composing errors](#the-real-try-macro). Implementing the `Error` trait also\n means that users are guaranteed the ability to obtain a string representation\n of an error (because it requires impls for both `fmt::Debug` and\n `fmt::Display`)."}, {"sha": "106d225d2d08b95ae2854bf10e07ae4fdefbdec1", "filename": "src/doc/trpl/glossary.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Ftrpl%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/be96988cf89b116e93e2e6db87c92400809c78a3/src%2Fdoc%2Ftrpl%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fglossary.md?ref=be96988cf89b116e93e2e6db87c92400809c78a3", "patch": "@@ -42,7 +42,7 @@ In the example above `x` and `y` have arity 2. `z` has arity 3.\n \n A type without a statically known size or alignment. ([more info][link])\n \n-[link]: ../nomicon/exotic-sizes.html#dynamically-sized-types-(dsts)\n+[link]: ../nomicon/exotic-sizes.html#dynamically-sized-types-dsts\n \n ### Expression\n "}]}