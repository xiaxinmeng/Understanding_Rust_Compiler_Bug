{"sha": "c9b3cd47e290d7831120b6a95767802265adfd08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YjNjZDQ3ZTI5MGQ3ODMxMTIwYjZhOTU3Njc4MDIyNjVhZGZkMDg=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-03-22T08:45:51Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-03-22T08:45:51Z"}, "message": "f Put and DerefMut", "tree": {"sha": "9b20c2294fa74d0029a24861785f2b947d91c4ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b20c2294fa74d0029a24861785f2b947d91c4ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9b3cd47e290d7831120b6a95767802265adfd08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b3cd47e290d7831120b6a95767802265adfd08", "html_url": "https://github.com/rust-lang/rust/commit/c9b3cd47e290d7831120b6a95767802265adfd08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9b3cd47e290d7831120b6a95767802265adfd08/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c21d97550336481728702ccc30522c7020e820d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c21d97550336481728702ccc30522c7020e820d8", "html_url": "https://github.com/rust-lang/rust/commit/c21d97550336481728702ccc30522c7020e820d8"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "f3ed2737c87999bae414b84ab296e82c294f0a6a", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c9b3cd47e290d7831120b6a95767802265adfd08/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b3cd47e290d7831120b6a95767802265adfd08/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=c9b3cd47e290d7831120b6a95767802265adfd08", "patch": "@@ -217,20 +217,30 @@ impl<K, V, M> Deref for FullBucket<K, V, M> where M: Deref<Target=RawTable<K, V>\n     }\n }\n \n-impl<K, V, M> DerefMut for FullBucket<K, V, M> where M: DerefMut<Target=RawTable<K, V>> {\n-    fn deref_mut(&mut self) -> &mut RawTable<K, V> {\n-        &mut self.table\n+/// `Put` is implemented for types which provide access to a table and cannot be invalidated\n+///  by filling a bucket. A similar implementation for `Take` is possible.\n+pub trait Put<K, V> {\n+    unsafe fn borrow_table_mut(&mut self) -> &mut RawTable<K, V>;\n+}\n+\n+\n+impl<'t, K, V> Put<K, V> for &'t mut RawTable<K, V> {\n+    unsafe fn borrow_table_mut(&mut self) -> &mut RawTable<K, V> {\n+        *self\n     }\n }\n \n+impl<K, V, M> Put<K, V> for Bucket<K, V, M> where M: Put<K, V> {\n+    unsafe fn borrow_table_mut(&mut self) -> &mut RawTable<K, V> {\n+        self.table.borrow_table_mut()\n+    }\n+}\n \n-/// `Put` is implemented for types which provide access to a table and cannot be invalidated\n-///  by filling a bucket. A similar implementation for `Take` is possible.\n-pub trait Put {}\n-impl<K, V> Put for RawTable<K, V> {}\n-impl<'t, K, V> Put for &'t mut RawTable<K, V> {}\n-impl<K, V, M: Put> Put for Bucket<K, V, M> {}\n-impl<K, V, M: Put> Put for FullBucket<K, V, M> {}\n+impl<K, V, M> Put<K, V> for FullBucket<K, V, M> where M: Put<K, V> {\n+    unsafe fn borrow_table_mut(&mut self) -> &mut RawTable<K, V> {\n+        self.table.borrow_table_mut()\n+    }\n+}\n \n impl<K, V, M: Deref<Target=RawTable<K, V>>> Bucket<K, V, M> {\n     pub fn new(table: M, hash: SafeHash) -> Bucket<K, V, M> {\n@@ -332,7 +342,7 @@ impl<K, V, M: Deref<Target=RawTable<K, V>>> EmptyBucket<K, V, M> {\n     }\n }\n \n-impl<K, V, M> EmptyBucket<K, V, M> where M: Deref<Target=RawTable<K, V>> + DerefMut + Put {\n+impl<K, V, M> EmptyBucket<K, V, M> where M: Put<K, V> {\n     /// Puts given key and value pair, along with the key's hash,\n     /// into this bucket in the hashtable. Note how `self` is 'moved' into\n     /// this function, because this slot will no longer be empty when\n@@ -346,9 +356,9 @@ impl<K, V, M> EmptyBucket<K, V, M> where M: Deref<Target=RawTable<K, V>> + Deref\n             *self.raw.hash = hash.inspect();\n             ptr::write(self.raw.key, key);\n             ptr::write(self.raw.val, value);\n-        }\n \n-        self.table.size += 1;\n+            self.table.borrow_table_mut().size += 1;\n+        }\n \n         FullBucket { raw: self.raw, idx: self.idx, table: self.table }\n     }\n@@ -436,7 +446,7 @@ impl<'t, K, V> FullBucket<K, V, &'t mut RawTable<K, V>> {\n     }\n }\n \n-impl<K, V, M> FullBucket<K, V, M> where M: Deref<Target=RawTable<K, V>> + DerefMut {\n+impl<K, V, M> FullBucket<K, V, M> where M: Put<K, V> {\n     pub fn replace(&mut self, h: SafeHash, k: K, v: V) -> (SafeHash, K, V) {\n         unsafe {\n             let old_hash = ptr::replace(self.raw.hash as *mut SafeHash, h);\n@@ -446,7 +456,9 @@ impl<K, V, M> FullBucket<K, V, M> where M: Deref<Target=RawTable<K, V>> + DerefM\n             (old_hash, old_key, old_val)\n         }\n     }\n+}\n \n+impl<K, V, M> FullBucket<K, V, M> where M: Deref<Target=RawTable<K, V>> + DerefMut {\n     /// Gets mutable references to the key and value at a given index.\n     pub fn read_mut(&mut self) -> (&mut K, &mut V) {\n         unsafe {"}]}