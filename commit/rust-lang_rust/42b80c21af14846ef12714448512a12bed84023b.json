{"sha": "42b80c21af14846ef12714448512a12bed84023b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYjgwYzIxYWYxNDg0NmVmMTI3MTQ0NDg1MTJhMTJiZWQ4NDAyM2I=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-05T18:11:47Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-05T18:11:47Z"}, "message": "Improve dsl", "tree": {"sha": "ef237b4d95254af6c8d7026b296aa92e954b65f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef237b4d95254af6c8d7026b296aa92e954b65f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42b80c21af14846ef12714448512a12bed84023b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42b80c21af14846ef12714448512a12bed84023b", "html_url": "https://github.com/rust-lang/rust/commit/42b80c21af14846ef12714448512a12bed84023b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42b80c21af14846ef12714448512a12bed84023b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1bb16fdc36f528e78aeb47b5a9612cbc807c844", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1bb16fdc36f528e78aeb47b5a9612cbc807c844", "html_url": "https://github.com/rust-lang/rust/commit/a1bb16fdc36f528e78aeb47b5a9612cbc807c844"}], "stats": {"total": 136, "additions": 72, "deletions": 64}, "files": [{"sha": "69d2b20284aea8cd4a3972168a90a24a039082f1", "filename": "src/intrinsics.rs", "status": "modified", "additions": 72, "deletions": 64, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/42b80c21af14846ef12714448512a12bed84023b/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b80c21af14846ef12714448512a12bed84023b/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=42b80c21af14846ef12714448512a12bed84023b", "patch": "@@ -19,23 +19,37 @@ macro_rules! intrinsic_arg {\n     };\n }\n \n+macro_rules! intrinsic_substs {\n+    ($substs:expr, $index:expr,) => {};\n+    ($substs:expr, $index:expr, $first:ident $(,$rest:ident)*) => {\n+        let $first = $substs.type_at($index);\n+        intrinsic_substs!($substs, $index+1, $($rest),*);\n+    };\n+}\n+\n macro_rules! intrinsic_match {\n-    ($fx:expr, $intrinsic:expr, $args:expr, $(\n-        $($name:tt)|+ $(if $cond:expr)?, |$($a:ident $arg:ident),*| $content:block;\n+    ($fx:expr, $intrinsic:expr, $substs:expr, $args:expr, $(\n+        $($name:tt)|+ $(if $cond:expr)?, $(<$($subst:ident),*>)? ($($a:ident $arg:ident),*) $content:block;\n     )*) => {\n         match $intrinsic {\n             $(\n                 $(intrinsic_pat!($name))|* $(if $cond)? => {\n-                    if let [$($arg),*] = *$args {\n-                        #[allow(unused_parens)]\n-                        {\n+                    #[allow(unused_parens, non_snake_case)]\n+                    {\n+                        $(\n+                            intrinsic_substs!($substs, 0, $($subst),*);\n+                        )?\n+                        if let [$($arg),*] = *$args {\n                             let ($($arg),*) = (\n                                 $(intrinsic_arg!($a $fx, $arg)),*\n                             );\n-                            $content\n+                            #[warn(unused_parens, non_snake_case)]\n+                            {\n+                                $content\n+                            }\n+                        } else {\n+                            bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n                         }\n-                    } else {\n-                        bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n                     }\n                 }\n             )*\n@@ -75,19 +89,18 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n     intrinsic_match! {\n-        fx, intrinsic, args,\n+        fx, intrinsic, substs, args,\n \n-        assume, |c _a| {};\n-        arith_offset, |v base, v offset| {\n+        assume, (c _a) {};\n+        arith_offset, (v base, v offset) {\n             let res = fx.bcx.ins().iadd(base, offset);\n             let res = CValue::ByVal(res, ret.layout());\n             ret.write_cvalue(fx, res);\n         };\n-        likely | unlikely, |c a| {\n+        likely | unlikely, (c a) {\n             ret.write_cvalue(fx, a);\n         };\n-        copy | copy_nonoverlapping, |v src, v dst, v count| {\n-            let elem_ty = substs.type_at(0);\n+        copy | copy_nonoverlapping, <elem_ty> (v src, v dst, v count) {\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n             let elem_size = fx\n                 .bcx\n@@ -102,17 +115,17 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 fx.bcx.call_memmove(fx.isa, dst, src, byte_amount);\n             }\n         };\n-        discriminant_value, |c val| {\n-            let discr = crate::base::trans_get_discriminant(fx, args[0], ret.layout());\n+        discriminant_value, (c val) {\n+            let discr = crate::base::trans_get_discriminant(fx, val, ret.layout());\n             ret.write_cvalue(fx, discr);\n         };\n-        size_of, | | {\n-            let size_of = fx.layout_of(substs.type_at(0)).size.bytes();\n+        size_of, <T> () {\n+            let size_of = fx.layout_of(T).size.bytes();\n             let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n             ret.write_cvalue(fx, size_of);\n         };\n-        size_of_val, |c ptr| {\n-            let layout = fx.layout_of(substs.type_at(0));\n+        size_of_val, <T> (c ptr) {\n+            let layout = fx.layout_of(T);\n             let size = match &layout.ty.sty {\n                 _ if !layout.is_unsized() => fx\n                     .bcx\n@@ -128,13 +141,13 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             };\n             ret.write_cvalue(fx, CValue::ByVal(size, usize_layout));\n         };\n-        min_align_of, | | {\n-            let min_align = fx.layout_of(substs.type_at(0)).align.abi();\n+        min_align_of, <T> () {\n+            let min_align = fx.layout_of(T).align.abi();\n             let min_align = CValue::const_val(fx, usize_layout.ty, min_align as i64);\n             ret.write_cvalue(fx, min_align);\n         };\n-        min_align_of_val, |c ptr| {\n-            let layout = fx.layout_of(substs.type_at(0));\n+        min_align_of_val, <T> (c ptr) {\n+            let layout = fx.layout_of(T);\n             let align = match &layout.ty.sty {\n                 _ if !layout.is_unsized() => fx\n                     .bcx\n@@ -149,12 +162,12 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             };\n             ret.write_cvalue(fx, CValue::ByVal(align, usize_layout));\n         };\n-        type_id, | | {\n-            let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n+        type_id, <T> () {\n+            let type_id = fx.tcx.type_id_hash(T);\n             let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n             ret.write_cvalue(fx, type_id);\n         };\n-        _ if intrinsic.starts_with(\"unchecked_\"), |c x, c y| {\n+        _ if intrinsic.starts_with(\"unchecked_\"), (c x, c y) {\n             let bin_op = match intrinsic {\n                 \"unchecked_div\" => BinOp::Div,\n                 \"unchecked_rem\" => BinOp::Rem,\n@@ -183,15 +196,15 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             };\n             ret.write_cvalue(fx, res);\n         };\n-        _ if intrinsic.ends_with(\"_with_overflow\"), |c x, c y| {\n+        _ if intrinsic.ends_with(\"_with_overflow\"), <T> (c x, c y) {\n             assert_eq!(x.layout().ty, y.layout().ty);\n             let bin_op = match intrinsic {\n                 \"add_with_overflow\" => BinOp::Add,\n                 \"sub_with_overflow\" => BinOp::Sub,\n                 \"mul_with_overflow\" => BinOp::Mul,\n                 _ => unimplemented!(\"intrinsic {}\", intrinsic),\n             };\n-            let res = match args[0].layout().ty.sty {\n+            let res = match T.sty {\n                 ty::Uint(_) => crate::base::trans_checked_int_binop(\n                     fx,\n                     bin_op,\n@@ -212,15 +225,15 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             };\n             ret.write_cvalue(fx, res);\n         };\n-        _ if intrinsic.starts_with(\"overflowing_\"), |c x, c y| {\n+        _ if intrinsic.starts_with(\"overflowing_\"), <T> (c x, c y) {\n             assert_eq!(x.layout().ty, y.layout().ty);\n             let bin_op = match intrinsic {\n                 \"overflowing_add\" => BinOp::Add,\n                 \"overflowing_sub\" => BinOp::Sub,\n                 \"overflowing_mul\" => BinOp::Mul,\n                 _ => unimplemented!(\"intrinsic {}\", intrinsic),\n             };\n-            let res = match x.layout().ty.sty {\n+            let res = match T.sty {\n                 ty::Uint(_) => crate::base::trans_int_binop(\n                     fx,\n                     bin_op,\n@@ -241,21 +254,18 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             };\n             ret.write_cvalue(fx, res);\n         };\n-        offset, |v base, v offset| {\n+        offset, (v base, v offset) {\n             let res = fx.bcx.ins().iadd(base, offset);\n             ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n         };\n-        transmute, |c from| {\n-            let src_ty = substs.type_at(0);\n-            let dst_ty = substs.type_at(1);\n+        transmute, <src_ty, dst_ty> (c from) {\n             assert_eq!(from.layout().ty, src_ty);\n             let addr = from.force_stack(fx);\n             let dst_layout = fx.layout_of(dst_ty);\n             ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n         };\n-        init, | | {\n-            let ty = substs.type_at(0);\n-            let layout = fx.layout_of(ty);\n+        init, <T> () {\n+            let layout = fx.layout_of(T);\n             let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n                 kind: StackSlotKind::ExplicitSlot,\n                 size: layout.size.bytes() as u32,\n@@ -266,74 +276,72 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let len_val = fx.bcx.ins().iconst(pointer_ty(fx.tcx), layout.size.bytes() as i64);\n             fx.bcx.call_memset(fx.isa, addr, zero_val, len_val);\n \n-            let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n+            let uninit_place = CPlace::from_stack_slot(fx, stack_slot, T);\n             let uninit_val = uninit_place.to_cvalue(fx);\n             ret.write_cvalue(fx, uninit_val);\n         };\n-        uninit, | | {\n-            let ty = substs.type_at(0);\n-            let layout = fx.layout_of(ty);\n+        uninit, <T> () {\n+            let layout = fx.layout_of(T);\n             let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n                 kind: StackSlotKind::ExplicitSlot,\n                 size: layout.size.bytes() as u32,\n                 offset: None,\n             });\n \n-            let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n+            let uninit_place = CPlace::from_stack_slot(fx, stack_slot, T);\n             let uninit_val = uninit_place.to_cvalue(fx);\n             ret.write_cvalue(fx, uninit_val);\n         };\n-        ctlz | ctlz_nonzero, |v arg| {\n-            let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n+        ctlz | ctlz_nonzero, <T> (v arg) {\n+            let res = CValue::ByVal(fx.bcx.ins().clz(arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n-        cttz | cttz_nonzero, |v arg| {\n-            let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n+        cttz | cttz_nonzero, <T> (v arg) {\n+            let res = CValue::ByVal(fx.bcx.ins().clz(arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n-        ctpop, |v arg| {\n-            let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n+        ctpop, <T> (v arg) {\n+            let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n-        bitreverse, |v arg| {\n-            let res = CValue::ByVal(fx.bcx.ins().bitrev(arg), args[0].layout());\n+        bitreverse, <T> (v arg) {\n+            let res = CValue::ByVal(fx.bcx.ins().bitrev(arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n-        needs_drop, | | {\n-            let ty = substs.type_at(0);\n-            let needs_drop = if ty.needs_drop(fx.tcx, ParamEnv::reveal_all()) {\n+        needs_drop, <T> () {\n+            let needs_drop = if T.needs_drop(fx.tcx, ParamEnv::reveal_all()) {\n                 1\n             } else {\n                 0\n             };\n             let needs_drop = CValue::const_val(fx, fx.tcx.types.bool, needs_drop);\n             ret.write_cvalue(fx, needs_drop);\n         };\n-        _ if intrinsic.starts_with(\"atomic_fence\"), | | {};\n-        _ if intrinsic.starts_with(\"atomic_singlethreadfence\"), | | {};\n-        _ if intrinsic.starts_with(\"atomic_load\"), |c ptr| {\n+        _ if intrinsic.starts_with(\"atomic_fence\"), () {};\n+        _ if intrinsic.starts_with(\"atomic_singlethreadfence\"), () {};\n+        _ if intrinsic.starts_with(\"atomic_load\"), (c ptr) {\n             let inner_layout =\n                 fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n             let val = CValue::ByRef(ptr.load_value(fx), inner_layout);\n             ret.write_cvalue(fx, val);\n         };\n-        _ if intrinsic.starts_with(\"atomic_store\"), |v ptr, c val| {\n+        _ if intrinsic.starts_with(\"atomic_store\"), (v ptr, c val) {\n             let dest = CPlace::Addr(ptr, None, val.layout());\n             dest.write_cvalue(fx, val);\n         };\n-        _ if intrinsic.starts_with(\"atomic_xadd\"), |v ptr, v amount| {\n-            let clif_ty = fx.cton_type(substs.type_at(0)).unwrap();\n+        _ if intrinsic.starts_with(\"atomic_xadd\"), <T> (v ptr, v amount) {\n+            let clif_ty = fx.cton_type(T).unwrap();\n             let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n             let new = fx.bcx.ins().iadd(old, amount);\n             fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n-            ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n+            ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(T)));\n         };\n-        _ if intrinsic.starts_with(\"atomic_xsub\"), |v ptr, v amount| {\n-            let clif_ty = fx.cton_type(substs.type_at(0)).unwrap();\n+        _ if intrinsic.starts_with(\"atomic_xsub\"), <T> (v ptr, v amount) {\n+            let clif_ty = fx.cton_type(T).unwrap();\n             let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n             let new = fx.bcx.ins().isub(old, amount);\n             fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n-            ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n+            ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(T)));\n         };\n     }\n "}]}