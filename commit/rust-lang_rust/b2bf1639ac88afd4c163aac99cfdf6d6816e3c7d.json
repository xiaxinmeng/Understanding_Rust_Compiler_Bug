{"sha": "b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYmYxNjM5YWM4OGFmZDRjMTYzYWFjOTljZmRmNmQ2ODE2ZTNjN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-09T13:33:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-09T13:33:36Z"}, "message": "Auto merge of #43726 - zackmdavis:extended_information_summer_block_party, r=GuillaumeGomez\n\nE05XX odyssey\n\nchipping away at the surface exposed by #43709\n\nr? @GuillaumeGomez", "tree": {"sha": "7f6f4194ad17017358060f1a1bff4b11b5be4e21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f6f4194ad17017358060f1a1bff4b11b5be4e21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d", "html_url": "https://github.com/rust-lang/rust/commit/b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2de81f4c97c8d1af685162f5a6faf8c89f6cd83", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2de81f4c97c8d1af685162f5a6faf8c89f6cd83", "html_url": "https://github.com/rust-lang/rust/commit/c2de81f4c97c8d1af685162f5a6faf8c89f6cd83"}, {"sha": "116bf07c3224301a234a3a9f4b9c137013f6164f", "url": "https://api.github.com/repos/rust-lang/rust/commits/116bf07c3224301a234a3a9f4b9c137013f6164f", "html_url": "https://github.com/rust-lang/rust/commit/116bf07c3224301a234a3a9f4b9c137013f6164f"}], "stats": {"total": 97, "additions": 92, "deletions": 5}, "files": [{"sha": "1bfa5943ee90a1849851be8459648cfa34b6018e", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d", "patch": "@@ -223,12 +223,45 @@ To fix this, add a label specifying which loop is being broken out of:\n ```\n 'foo: while break 'foo {}\n ```\n+\"##,\n+\n+E0571: r##\"\n+A `break` statement with an argument appeared in a non-`loop` loop.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0571\n+# let mut i = 1;\n+# fn satisfied(n: usize) -> bool { n % 23 == 0 }\n+let result = while true {\n+    if satisfied(i) {\n+        break 2*i; // error: `break` with value from a `while` loop\n+    }\n+    i += 1;\n+};\n+```\n+\n+The `break` statement can take an argument (which will be the value of the loop\n+expression if the `break` statement is executed) in `loop` loops, but not\n+`for`, `while`, or `while let` loops.\n+\n+Make sure `break value;` statements only occur in `loop` loops:\n+\n+```\n+# let mut i = 1;\n+# fn satisfied(n: usize) -> bool { n % 23 == 0 }\n+let result = loop { // ok!\n+    if satisfied(i) {\n+        break 2*i;\n+    }\n+    i += 1;\n+};\n+```\n \"##\n }\n \n register_diagnostics! {\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target\n     E0561, // patterns aren't allowed in function pointer types\n-    E0571, // `break` with a value in a non-`loop`-loop\n }"}, {"sha": "2ea3fe51d30b201076afabec5076af93b5f7053f", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d", "patch": "@@ -162,6 +162,63 @@ For more information about the cfg attribute, read:\n https://doc.rust-lang.org/reference.html#conditional-compilation\n \"##,\n \n+E0552: r##\"\n+A unrecognized representation attribute was used.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0552\n+#[repr(D)] // error: unrecognized representation hint\n+struct MyStruct {\n+    my_field: usize\n+}\n+```\n+\n+You can use a `repr` attribute to tell the compiler how you want a struct or\n+enum to be laid out in memory.\n+\n+Make sure you're using one of the supported options:\n+\n+```\n+#[repr(C)] // ok!\n+struct MyStruct {\n+    my_field: usize\n+}\n+```\n+\n+For more information about specifying representations, see the [\"Alternative\n+Representations\" section] of the Rustonomicon.\n+\n+[\"Alternative Representations\" section]: https://doc.rust-lang.org/nomicon/other-reprs.html\n+\"##,\n+\n+E0554: r##\"\n+Feature attributes are only allowed on the nightly release channel. Stable or\n+beta compilers will not comply.\n+\n+Example of erroneous code (on a stable compiler):\n+\n+```ignore (depends on release channel)\n+#![feature(non_ascii_idents)] // error: #![feature] may not be used on the\n+                              //        stable release channel\n+```\n+\n+If you need the feature, make sure to use a nightly release of the compiler\n+(but be warned that the feature may be removed or altered in the future).\n+\"##,\n+\n+E0557: r##\"\n+A feature attribute named a feature that has been removed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0557\n+#![feature(managed_boxes)] // error: feature has been removed\n+```\n+\n+Delete the offending feature attribute.\n+\"##,\n+\n E0558: r##\"\n The `export_name` attribute was malformed.\n \n@@ -300,11 +357,8 @@ register_diagnostics! {\n     E0549, // rustc_deprecated attribute must be paired with either stable or unstable attribute\n     E0550, // multiple deprecated attributes\n     E0551, // incorrect meta item\n-    E0552, // unrecognized representation hint\n-    E0554, // #[feature] may not be used on the [] release channel\n     E0555, // malformed feature attribute, expected #![feature(...)]\n     E0556, // malformed feature, expected just one word\n-    E0557, // feature has been removed\n     E0584, // file for module `..` found at both .. and ..\n     E0589, // invalid `repr(align)` attribute\n }"}, {"sha": "aeb574bc3af3cea34236dd90cb533643afc20ddc", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b2bf1639ac88afd4c163aac99cfdf6d6816e3c7d", "patch": "@@ -1602,7 +1602,7 @@ fn maybe_stage_features(span_handler: &Handler, krate: &ast::Crate,\n             if attr.check_name(\"feature\") {\n                 let release_channel = option_env!(\"CFG_RELEASE_CHANNEL\").unwrap_or(\"(unknown)\");\n                 span_err!(span_handler, attr.span, E0554,\n-                          \"#[feature] may not be used on the {} release channel\",\n+                          \"#![feature] may not be used on the {} release channel\",\n                           release_channel);\n             }\n         }"}]}