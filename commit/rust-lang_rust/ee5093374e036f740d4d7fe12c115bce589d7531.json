{"sha": "ee5093374e036f740d4d7fe12c115bce589d7531", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNTA5MzM3NGUwMzZmNzQwZDRkN2ZlMTJjMTE1YmNlNTg5ZDc1MzE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-10T16:31:51Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-24T20:48:36Z"}, "message": "Rename clean::Constant did fields to def_id", "tree": {"sha": "bec1fecceb6bec32e31d1ba88c33c187a6774d7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec1fecceb6bec32e31d1ba88c33c187a6774d7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee5093374e036f740d4d7fe12c115bce589d7531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5093374e036f740d4d7fe12c115bce589d7531", "html_url": "https://github.com/rust-lang/rust/commit/ee5093374e036f740d4d7fe12c115bce589d7531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee5093374e036f740d4d7fe12c115bce589d7531/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d61a1786a779c90b0d368f53ea0517b86f362ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d61a1786a779c90b0d368f53ea0517b86f362ef1", "html_url": "https://github.com/rust-lang/rust/commit/d61a1786a779c90b0d368f53ea0517b86f362ef1"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "29be2b9f37ee6f6f9ce10fce33b3fa6673ce1b15", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee5093374e036f740d4d7fe12c115bce589d7531/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5093374e036f740d4d7fe12c115bce589d7531/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ee5093374e036f740d4d7fe12c115bce589d7531", "patch": "@@ -499,8 +499,8 @@ crate fn print_inlined_const(tcx: TyCtxt<'_>, did: DefId) -> String {\n     }\n }\n \n-fn build_const(cx: &mut DocContext<'_>, did: DefId) -> clean::Constant {\n-    clean::Constant::Extern { type_: cx.tcx.type_of(did).clean(cx), did }\n+fn build_const(cx: &mut DocContext<'_>, def_id: DefId) -> clean::Constant {\n+    clean::Constant::Extern { type_: cx.tcx.type_of(def_id).clean(cx), def_id }\n }\n \n fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::Static {"}, {"sha": "3dfe1febbd33015f60545a3eb8433b0de4f5a9b9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee5093374e036f740d4d7fe12c115bce589d7531/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5093374e036f740d4d7fe12c115bce589d7531/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ee5093374e036f740d4d7fe12c115bce589d7531", "patch": "@@ -1133,7 +1133,7 @@ impl Clean<Item> for ty::AssocItem {\n             ty::AssocKind::Const => {\n                 let ty = tcx.type_of(self.def_id);\n                 let default = if self.defaultness.has_value() {\n-                    Some(inline::print_inlined_const(cx.tcx, self.def_id))\n+                    Some(inline::print_inlined_const(tcx, self.def_id))\n                 } else {\n                     None\n                 };\n@@ -1743,8 +1743,8 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n impl<'tcx> Clean<Constant> for ty::Const<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Constant {\n-        // FIXME: instead of storing `format!(\"{}\", self)`, store `self` directly instead.\n-        Constant::TyConst { type_: self.ty.clean(cx), expr: format!(\"{}\", self) }\n+        // FIXME: instead of storing the stringified expression, store `self` directly instead.\n+        Constant::TyConst { type_: self.ty.clean(cx), expr: self.to_string() }\n     }\n }\n \n@@ -1945,11 +1945,9 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                 ItemKind::Static(ty, mutability, body_id) => {\n                     StaticItem(Static { type_: ty.clean(cx), mutability, expr: Some(body_id) })\n                 }\n-                ItemKind::Const(ty, body_id) => ConstantItem(Constant::Local {\n-                    type_: ty.clean(cx),\n-                    body: body_id,\n-                    did: def_id,\n-                }),\n+                ItemKind::Const(ty, body_id) => {\n+                    ConstantItem(Constant::Local { type_: ty.clean(cx), body: body_id, def_id })\n+                }\n                 ItemKind::OpaqueTy(ref ty) => OpaqueTyItem(OpaqueTy {\n                     bounds: ty.bounds.clean(cx),\n                     generics: ty.generics.clean(cx),"}, {"sha": "a27529caf051c031729709231ad86ac41df46b64", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee5093374e036f740d4d7fe12c115bce589d7531/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5093374e036f740d4d7fe12c115bce589d7531/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ee5093374e036f740d4d7fe12c115bce589d7531", "patch": "@@ -1995,34 +1995,36 @@ crate enum Constant {\n     /// nested inside types (e.g., array lengths) or expressions (e.g., repeat counts), and also\n     /// used to define explicit discriminant values for enum variants.\n     Anonymous { type_: Type, body: BodyId },\n-    /// Inlined constant.\n-    Extern { type_: Type, did: DefId },\n+    /// A constant from a different crate.\n+    Extern { type_: Type, def_id: DefId },\n     /// const FOO: u32 = ...;\n-    Local { type_: Type, did: DefId, body: BodyId },\n+    Local { type_: Type, def_id: DefId, body: BodyId },\n }\n \n impl Constant {\n     crate fn expr(&self, tcx: TyCtxt<'_>) -> String {\n         match self {\n             Self::TyConst { expr, .. } => expr.clone(),\n-            Self::Extern { did, .. } => print_inlined_const(tcx, *did),\n+            Self::Extern { def_id, .. } => print_inlined_const(tcx, *def_id),\n             Self::Local { body, .. } | Self::Anonymous { body, .. } => print_const_expr(tcx, *body),\n         }\n     }\n \n     crate fn value(&self, tcx: TyCtxt<'_>) -> Option<String> {\n         match self {\n             Self::TyConst { .. } | Self::Anonymous { .. } => None,\n-            Self::Extern { did, .. } | Self::Local { did, .. } => print_evaluated_const(tcx, *did),\n+            Self::Extern { def_id, .. } | Self::Local { def_id, .. } => {\n+                print_evaluated_const(tcx, *def_id)\n+            }\n         }\n     }\n \n     crate fn is_literal(&self, tcx: TyCtxt<'_>) -> bool {\n         match self {\n             Self::TyConst { .. } => false,\n-            Self::Extern { did, .. } => did\n-                .as_local()\n-                .map_or(false, |did| is_literal_expr(tcx, tcx.hir().local_def_id_to_hir_id(did))),\n+            Self::Extern { def_id, .. } => def_id.as_local().map_or(false, |def_id| {\n+                is_literal_expr(tcx, tcx.hir().local_def_id_to_hir_id(def_id))\n+            }),\n             Self::Local { body, .. } | Self::Anonymous { body, .. } => {\n                 is_literal_expr(tcx, body.hir_id)\n             }"}]}