{"sha": "6366e74fe3bb07762a4c314a83af21cd1daacc98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjZlNzRmZTNiYjA3NzYyYTRjMzE0YTgzYWYyMWNkMWRhYWNjOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-14T16:59:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-14T16:59:41Z"}, "message": "auto merge of #4910 : pcwalton/rust/num-simplification, r=pcwalton\n\nSadly I could not use trait inheritance due to a type parameter substitution\r\nbug.\r\n\r\nr? @brson", "tree": {"sha": "82efe48c8a559af32567e7c2faa57e017ef69e49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82efe48c8a559af32567e7c2faa57e017ef69e49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6366e74fe3bb07762a4c314a83af21cd1daacc98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6366e74fe3bb07762a4c314a83af21cd1daacc98", "html_url": "https://github.com/rust-lang/rust/commit/6366e74fe3bb07762a4c314a83af21cd1daacc98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6366e74fe3bb07762a4c314a83af21cd1daacc98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6efa3543a8b38f0dcbe89e7bf6d14f571bad46ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/6efa3543a8b38f0dcbe89e7bf6d14f571bad46ac", "html_url": "https://github.com/rust-lang/rust/commit/6efa3543a8b38f0dcbe89e7bf6d14f571bad46ac"}, {"sha": "216e85fadf465c25fe7bc4a9f06f8162ec12b552", "url": "https://api.github.com/repos/rust-lang/rust/commits/216e85fadf465c25fe7bc4a9f06f8162ec12b552", "html_url": "https://github.com/rust-lang/rust/commit/216e85fadf465c25fe7bc4a9f06f8162ec12b552"}], "stats": {"total": 283, "additions": 165, "deletions": 118}, "files": [{"sha": "5b6c40e09ef07440538aeb5817b122f07bee4027", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -199,7 +199,7 @@ pub use vec::{OwnedVector, OwnedCopyableVector};\n pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n pub use iter::{CopyableOrderedIter, CopyableNonstrictIter, Times};\n \n-pub use num::{Num, NumCast};\n+pub use num::NumCast;\n pub use ptr::Ptr;\n pub use to_str::ToStr;\n pub use clone::Clone;"}, {"sha": "d27393fe50783c683d75d4ef3f9657592813906e", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -13,8 +13,9 @@\n use cmath;\n use cmp;\n use libc::{c_float, c_int};\n-use num;\n use num::NumCast;\n+use num;\n+use ops;\n use option::Option;\n use from_str;\n use to_str;\n@@ -271,21 +272,6 @@ impl f32 : cmp::Ord {\n     pure fn gt(&self, other: &f32) -> bool { (*self) > (*other) }\n }\n \n-impl f32: num::Num {\n-    #[inline(always)]\n-    pure fn add(&self, other: &f32) -> f32 { return *self + *other; }\n-    #[inline(always)]\n-    pure fn sub(&self, other: &f32) -> f32 { return *self - *other; }\n-    #[inline(always)]\n-    pure fn mul(&self, other: &f32) -> f32 { return *self * *other; }\n-    #[inline(always)]\n-    pure fn div(&self, other: &f32) -> f32 { return *self / *other; }\n-    #[inline(always)]\n-    pure fn modulo(&self, other: &f32) -> f32 { return *self % *other; }\n-    #[inline(always)]\n-    pure fn neg(&self)                -> f32 { return -*self;        }\n-}\n-\n impl f32: num::Zero {\n     #[inline(always)]\n     static pure fn zero() -> f32 { 0.0 }\n@@ -320,6 +306,31 @@ pub impl f32: NumCast {\n     #[inline(always)] pure fn to_float(&self) -> float { *self as float }\n }\n \n+#[cfg(notest)]\n+impl ops::Add<f32,f32> for f32 {\n+    pure fn add(&self, other: &f32) -> f32 { *self + *other }\n+}\n+#[cfg(notest)]\n+impl ops::Sub<f32,f32> for f32 {\n+    pure fn sub(&self, other: &f32) -> f32 { *self - *other }\n+}\n+#[cfg(notest)]\n+impl ops::Mul<f32,f32> for f32 {\n+    pure fn mul(&self, other: &f32) -> f32 { *self * *other }\n+}\n+#[cfg(notest)]\n+impl ops::Div<f32,f32> for f32 {\n+    pure fn div(&self, other: &f32) -> f32 { *self / *other }\n+}\n+#[cfg(notest)]\n+impl ops::Modulo<f32,f32> for f32 {\n+    pure fn modulo(&self, other: &f32) -> f32 { *self % *other }\n+}\n+#[cfg(notest)]\n+impl ops::Neg<f32> for f32 {\n+    pure fn neg(&self) -> f32 { -*self }\n+}\n+\n #[abi=\"rust-intrinsic\"]\n pub extern {\n     fn floorf32(val: f32) -> f32;"}, {"sha": "d189a0254eba8710280222b03e17b0491e0b6f92", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -14,8 +14,9 @@ use cmath;\n use cmp;\n use libc::{c_double, c_int};\n use libc;\n-use num;\n use num::NumCast;\n+use num;\n+use ops;\n use option::Option;\n use to_str;\n use from_str;\n@@ -296,21 +297,6 @@ impl f64 : cmp::Ord {\n     pure fn gt(&self, other: &f64) -> bool { (*self) > (*other) }\n }\n \n-impl f64: num::Num {\n-    #[inline(always)]\n-    pure fn add(&self, other: &f64)    -> f64 { return *self + *other; }\n-    #[inline(always)]\n-    pure fn sub(&self, other: &f64)    -> f64 { return *self - *other; }\n-    #[inline(always)]\n-    pure fn mul(&self, other: &f64)    -> f64 { return *self * *other; }\n-    #[inline(always)]\n-    pure fn div(&self, other: &f64)    -> f64 { return *self / *other; }\n-    #[inline(always)]\n-    pure fn modulo(&self, other: &f64) -> f64 { return *self % *other; }\n-    #[inline(always)]\n-    pure fn neg(&self)                -> f64 { return -*self;        }\n-}\n-\n pub impl f64: NumCast {\n     /**\n      * Cast `n` to an `f64`\n@@ -345,6 +331,31 @@ impl f64: num::One {\n     static pure fn one() -> f64 { 1.0 }\n }\n \n+#[cfg(notest)]\n+impl ops::Add<f64,f64> for f64 {\n+    pure fn add(&self, other: &f64) -> f64 { *self + *other }\n+}\n+#[cfg(notest)]\n+impl ops::Sub<f64,f64> for f64 {\n+    pure fn sub(&self, other: &f64) -> f64 { *self - *other }\n+}\n+#[cfg(notest)]\n+impl ops::Mul<f64,f64> for f64 {\n+    pure fn mul(&self, other: &f64) -> f64 { *self * *other }\n+}\n+#[cfg(notest)]\n+impl ops::Div<f64,f64> for f64 {\n+    pure fn div(&self, other: &f64) -> f64 { *self / *other }\n+}\n+#[cfg(notest)]\n+impl ops::Modulo<f64,f64> for f64 {\n+    pure fn modulo(&self, other: &f64) -> f64 { *self % *other }\n+}\n+#[cfg(notest)]\n+impl ops::Neg<f64> for f64 {\n+    pure fn neg(&self) -> f64 { -*self }\n+}\n+\n #[abi=\"rust-intrinsic\"]\n pub extern {\n     fn floorf64(val: f64) -> f64;"}, {"sha": "bbea58f5cf5dcd15700e271b00ed3c6d08e983a6", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -25,8 +25,9 @@ use m_float = f64;\n use cmp::{Eq, Ord};\n use cmp;\n use f64;\n-use num;\n use num::NumCast;\n+use num;\n+use ops;\n use option::{None, Option, Some};\n use str;\n use uint;\n@@ -404,21 +405,6 @@ impl float : Ord {\n     pure fn gt(&self, other: &float) -> bool { (*self) > (*other) }\n }\n \n-impl float: num::Num {\n-    #[inline(always)]\n-    pub pure fn add(&self, other: &float) -> float { return *self + *other; }\n-    #[inline(always)]\n-    pub pure fn sub(&self, other: &float) -> float { return *self - *other; }\n-    #[inline(always)]\n-    pub pure fn mul(&self, other: &float) -> float { return *self * *other; }\n-    #[inline(always)]\n-    pub pure fn div(&self, other: &float) -> float { return *self / *other; }\n-    #[inline(always)]\n-    pure fn modulo(&self, other: &float) -> float { return *self % *other; }\n-    #[inline(always)]\n-    pure fn neg(&self)                  -> float { return -*self;        }\n-}\n-\n impl float: num::Zero {\n     #[inline(always)]\n     static pure fn zero() -> float { 0.0 }\n@@ -486,6 +472,31 @@ impl float: num::Round {\n     }\n }\n \n+#[cfg(notest)]\n+impl ops::Add<float,float> for float {\n+    pure fn add(&self, other: &float) -> float { *self + *other }\n+}\n+#[cfg(notest)]\n+impl ops::Sub<float,float> for float {\n+    pure fn sub(&self, other: &float) -> float { *self - *other }\n+}\n+#[cfg(notest)]\n+impl ops::Mul<float,float> for float {\n+    pure fn mul(&self, other: &float) -> float { *self * *other }\n+}\n+#[cfg(notest)]\n+impl ops::Div<float,float> for float {\n+    pure fn div(&self, other: &float) -> float { *self / *other }\n+}\n+#[cfg(notest)]\n+impl ops::Modulo<float,float> for float {\n+    pure fn modulo(&self, other: &float) -> float { *self % *other }\n+}\n+#[cfg(notest)]\n+impl ops::Neg<float> for float {\n+    pure fn neg(&self) -> float { -*self }\n+}\n+\n #[test]\n pub fn test_from_str() {\n    assert from_str(~\"3\") == Some(3.);"}, {"sha": "c25938a187fda14100ec57c6cd8d56758db48739", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -166,21 +166,6 @@ impl T : Eq {\n     pure fn ne(&self, other: &T) -> bool { return (*self) != (*other); }\n }\n \n-impl T: num::Num {\n-    #[inline(always)]\n-    pure fn add(&self, other: &T)    -> T { return *self + *other; }\n-    #[inline(always)]\n-    pure fn sub(&self, other: &T)    -> T { return *self - *other; }\n-    #[inline(always)]\n-    pure fn mul(&self, other: &T)    -> T { return *self * *other; }\n-    #[inline(always)]\n-    pure fn div(&self, other: &T)    -> T { return *self / *other; }\n-    #[inline(always)]\n-    pure fn modulo(&self, other: &T) -> T { return *self % *other; }\n-    #[inline(always)]\n-    pure fn neg(&self)              -> T { return -*self;        }\n-}\n-\n impl T: num::Zero {\n     #[inline(always)]\n     static pure fn zero() -> T { 0 }\n@@ -203,6 +188,31 @@ impl T: num::Round {\n     pure fn fract(&self) -> T { 0 }\n }\n \n+#[cfg(notest)]\n+impl ops::Add<T,T> for T {\n+    pure fn add(&self, other: &T) -> T { *self + *other }\n+}\n+#[cfg(notest)]\n+impl ops::Sub<T,T> for T {\n+    pure fn sub(&self, other: &T) -> T { *self - *other }\n+}\n+#[cfg(notest)]\n+impl ops::Mul<T,T> for T {\n+    pure fn mul(&self, other: &T) -> T { *self * *other }\n+}\n+#[cfg(notest)]\n+impl ops::Div<T,T> for T {\n+    pure fn div(&self, other: &T) -> T { *self / *other }\n+}\n+#[cfg(notest)]\n+impl ops::Modulo<T,T> for T {\n+    pure fn modulo(&self, other: &T) -> T { *self % *other }\n+}\n+#[cfg(notest)]\n+impl ops::Neg<T> for T {\n+    pure fn neg(&self) -> T { -*self }\n+}\n+\n // String conversion functions and impl str -> num\n \n /// Parse a string as a number in base 10."}, {"sha": "44cd66363fb28fa4c0f9af3706c52142b70b4889", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -10,22 +10,13 @@\n \n //! An interface for numeric types\n use core::cmp::{Ord, Eq};\n+use ops::{Add, Div, Modulo, Mul, Neg, Sub};\n use option::{None, Option, Some};\n use char;\n use str;\n use kinds::Copy;\n use vec;\n \n-pub trait Num {\n-    // FIXME: Trait composition. (#2616)\n-    pure fn add(&self, other: &Self) -> Self;\n-    pure fn sub(&self, other: &Self) -> Self;\n-    pure fn mul(&self, other: &Self) -> Self;\n-    pure fn div(&self, other: &Self) -> Self;\n-    pure fn modulo(&self, other: &Self) -> Self;\n-    pure fn neg(&self) -> Self;\n-}\n-\n pub trait IntConvertible {\n     pure fn to_int(&self) -> int;\n     static pure fn from_int(n: int) -> Self;\n@@ -39,7 +30,7 @@ pub trait One {\n     static pure fn one() -> Self;\n }\n \n-pub pure fn abs<T: Ord Num Zero>(v: T) -> T {\n+pub pure fn abs<T:Ord + Zero + Neg<T>>(v: T) -> T {\n     if v < Zero::zero() { v.neg() } else { v }\n }\n \n@@ -109,7 +100,7 @@ pub trait FromStrRadix {\n /// Dynamically calculates the value `inf` (`1/0`).\n /// Can fail on integer types.\n #[inline(always)]\n-pub pure fn infinity<T: Num One Zero>() -> T {\n+pub pure fn infinity<T:One+Zero+Div<T,T>>() -> T {\n     let _0: T = Zero::zero();\n     let _1: T = One::one();\n     _1 / _0\n@@ -118,7 +109,7 @@ pub pure fn infinity<T: Num One Zero>() -> T {\n /// Dynamically calculates the value `-inf` (`-1/0`).\n /// Can fail on integer types.\n #[inline(always)]\n-pub pure fn neg_infinity<T: Num One Zero>() -> T {\n+pub pure fn neg_infinity<T:One+Zero+Div<T,T>+Neg<T>>() -> T {\n     let _0: T = Zero::zero();\n     let _1: T = One::one();\n     - _1 / _0\n@@ -127,35 +118,36 @@ pub pure fn neg_infinity<T: Num One Zero>() -> T {\n /// Dynamically calculates the value `NaN` (`0/0`).\n /// Can fail on integer types.\n #[inline(always)]\n-pub pure fn NaN<T: Num Zero>() -> T {\n+pub pure fn NaN<T:Zero+Div<T,T>>() -> T {\n     let _0: T = Zero::zero();\n     _0 / _0\n }\n \n /// Returns `true` if `num` has the value `inf` (`1/0`).\n /// Can fail on integer types.\n #[inline(always)]\n-pub pure fn is_infinity<T: Num One Zero Eq>(num: &T) -> bool {\n+pub pure fn is_infinity<T:One+Zero+Eq+Div<T,T>>(num: &T) -> bool {\n     (*num) == (infinity::<T>())\n }\n \n /// Returns `true` if `num` has the value `-inf` (`-1/0`).\n /// Can fail on integer types.\n #[inline(always)]\n-pub pure fn is_neg_infinity<T: Num One Zero Eq>(num: &T) -> bool {\n+pub pure fn is_neg_infinity<T:One+Zero+Eq+Div<T,T>+Neg<T>>(num: &T)\n+                                                            -> bool {\n     (*num) == (neg_infinity::<T>())\n }\n \n /// Returns `true` if `num` has the value `NaN` (is not equal to itself).\n #[inline(always)]\n-pub pure fn is_NaN<T: Num Eq>(num: &T) -> bool {\n+pub pure fn is_NaN<T:Eq>(num: &T) -> bool {\n     (*num) != (*num)\n }\n \n /// Returns `true` if `num` has the value `-0` (`1/num == -1/0`).\n /// Can fail on integer types.\n #[inline(always)]\n-pub pure fn is_neg_zero<T: Num One Zero Eq>(num: &T) -> bool {\n+pub pure fn is_neg_zero<T:One+Zero+Eq+Div<T,T>+Neg<T>>(num: &T) -> bool {\n     let _1: T = One::one();\n     let _0: T = Zero::zero();\n     *num == _0 && is_neg_infinity(&(_1 / *num))\n@@ -174,8 +166,8 @@ pub pure fn is_neg_zero<T: Num One Zero Eq>(num: &T) -> bool {\n  * - If code written to use this function doesn't care about it, it's\n  *   probably assuming that `x^0` always equals `1`.\n  */\n-pub pure fn pow_with_uint<T: Num NumCast One Zero Copy>(radix: uint,\n-                                                        pow: uint) -> T {\n+pub pure fn pow_with_uint<T:NumCast+One+Zero+Copy+Div<T,T>+Mul<T,T>>(\n+    radix: uint, pow: uint) -> T {\n     let _0: T = Zero::zero();\n     let _1: T = One::one();\n \n@@ -256,7 +248,8 @@ pub enum SignFormat {\n  * those special values, and `special` is `false`, because then the\n  * algorithm just does normal calculations on them.\n  */\n-pub pure fn to_str_bytes_common<T: Num NumCast Zero One Eq Ord Round Copy>(\n+pub pure fn to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Round+Copy+Div<T,T>+\n+                                  Neg<T>+Modulo<T,T>+Mul<T,T>>(\n         num: &T, radix: uint, special: bool, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits) -> (~[u8], bool) {\n     if radix as int <  2 {\n@@ -478,7 +471,8 @@ pub pure fn to_str_bytes_common<T: Num NumCast Zero One Eq Ord Round Copy>(\n  * `to_str_bytes_common()`, for details see there.\n  */\n #[inline(always)]\n-pub pure fn to_str_common<T: Num NumCast Zero One Eq Ord Round Copy>(\n+pub pure fn to_str_common<T:NumCast+Zero+One+Eq+Ord+Round+Copy+Div<T,T>+Neg<T>\n+                            +Modulo<T,T>+Mul<T,T>>(\n         num: &T, radix: uint, special: bool, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits) -> (~str, bool) {\n     let (bytes, special) = to_str_bytes_common(num, radix, special,\n@@ -533,7 +527,8 @@ priv const DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n  * - Could accept option to allow ignoring underscores, allowing for numbers\n  *   formated like `FF_AE_FF_FF`.\n  */\n-pub pure fn from_str_bytes_common<T: Num NumCast Zero One Ord Copy>(\n+pub pure fn from_str_bytes_common<T:NumCast+Zero+One+Ord+Copy+Div<T,T>+\n+                                    Mul<T,T>+Sub<T,T>+Neg<T>+Add<T,T>>(\n         buf: &[u8], radix: uint, negative: bool, fractional: bool,\n         special: bool, exponent: ExponentFormat, empty_zero: bool\n         ) -> Option<T> {\n@@ -720,7 +715,8 @@ pub pure fn from_str_bytes_common<T: Num NumCast Zero One Ord Copy>(\n  * `from_str_bytes_common()`, for details see there.\n  */\n #[inline(always)]\n-pub pure fn from_str_common<T: Num NumCast Zero One Ord Copy>(\n+pub pure fn from_str_common<T:NumCast+Zero+One+Ord+Copy+Div<T,T>+Mul<T,T>+\n+                              Sub<T,T>+Neg<T>+Add<T,T>>(\n         buf: &str, radix: uint, negative: bool, fractional: bool,\n         special: bool, exponent: ExponentFormat, empty_zero: bool\n         ) -> Option<T> {"}, {"sha": "adfd50e20e7910a06759044dc26d37ef9c810d71", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -130,21 +130,6 @@ impl T : Eq {\n     pure fn ne(&self, other: &T) -> bool { return (*self) != (*other); }\n }\n \n-impl T: num::Num {\n-    #[inline(always)]\n-    pure fn add(&self, other: &T)    -> T { return *self + *other; }\n-    #[inline(always)]\n-    pure fn sub(&self, other: &T)    -> T { return *self - *other; }\n-    #[inline(always)]\n-    pure fn mul(&self, other: &T)    -> T { return *self * *other; }\n-    #[inline(always)]\n-    pure fn div(&self, other: &T)    -> T { return *self / *other; }\n-    #[inline(always)]\n-    pure fn modulo(&self, other: &T) -> T { return *self % *other; }\n-    #[inline(always)]\n-    pure fn neg(&self)              -> T { return -*self;        }\n-}\n-\n impl T: num::Zero {\n     #[inline(always)]\n     static pure fn zero() -> T { 0 }\n@@ -167,6 +152,31 @@ impl T: num::Round {\n     pure fn fract(&self) -> T { 0 }\n }\n \n+#[cfg(notest)]\n+impl ops::Add<T,T> for T {\n+    pure fn add(&self, other: &T) -> T { *self + *other }\n+}\n+#[cfg(notest)]\n+impl ops::Sub<T,T> for T {\n+    pure fn sub(&self, other: &T) -> T { *self - *other }\n+}\n+#[cfg(notest)]\n+impl ops::Mul<T,T> for T {\n+    pure fn mul(&self, other: &T) -> T { *self * *other }\n+}\n+#[cfg(notest)]\n+impl ops::Div<T,T> for T {\n+    pure fn div(&self, other: &T) -> T { *self / *other }\n+}\n+#[cfg(notest)]\n+impl ops::Modulo<T,T> for T {\n+    pure fn modulo(&self, other: &T) -> T { *self % *other }\n+}\n+#[cfg(notest)]\n+impl ops::Neg<T> for T {\n+    pure fn neg(&self) -> T { -*self }\n+}\n+\n // String conversion functions and impl str -> num\n \n /// Parse a string as a number in base 10."}, {"sha": "b50fa265f030d5d2a60549999d77649f7c4f220d", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -29,7 +29,7 @@ pub use container::{Container, Mutable, Map, Set};\n pub use hash::Hash;\n pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n pub use iter::{CopyableOrderedIter, CopyableNonstrictIter, Times};\n-pub use num::{Num, NumCast};\n+pub use num::NumCast;\n pub use path::GenericPath;\n pub use path::Path;\n pub use path::PosixPath;"}, {"sha": "fec5c994de78094ba7e977b99d863d8121e78c25", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: binary operation + cannot be applied to type\n+// error-pattern: mismatched types\n type clam = {x: @int, y: @int};\n \n type fish = {a: @int};"}, {"sha": "df102f93c2bb7181567937c7f1bf8bd44ec1a64d", "filename": "src/test/run-pass/issue-3149.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Fissue-3149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Fissue-3149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3149.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pure fn Matrix4<T:Copy Num>(m11: T, m12: T, m13: T, m14: T,\n-                                     m21: T, m22: T, m23: T, m24: T,\n-                                     m31: T, m32: T, m33: T, m34: T,\n-                                     m41: T, m42: T, m43: T, m44: T)\n-                                  -> Matrix4<T> {\n+pure fn Matrix4<T:Copy>(m11: T, m12: T, m13: T, m14: T,\n+                        m21: T, m22: T, m23: T, m24: T,\n+                        m31: T, m32: T, m33: T, m34: T,\n+                        m41: T, m42: T, m43: T, m44: T)\n+                     -> Matrix4<T> {\n \n     Matrix4 {\n         m11: m11, m12: m12, m13: m13, m14: m14,"}, {"sha": "4e46d6b2b18b099f9cefe1d8cd03206411ac73f2", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -16,7 +16,7 @@ use num::NumCast::from;\n extern mod std;\n use std::cmp::FuzzyEq;\n \n-pub trait NumExt: Num NumCast Eq Ord {}\n+pub trait NumExt: NumCast Eq Ord {}\n \n pub trait FloatExt: NumExt FuzzyEq<Self> {}\n "}, {"sha": "03230dc39af3572ce101b3672a1e12c04b520008", "filename": "src/test/run-pass/trait-inheritance-num1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Using the real Num from core\n-\n use cmp::Ord;\n use num::NumCast::from;\n \n-pub trait NumExt: Num NumCast Ord { }\n+pub trait NumExt: NumCast Ord { }\n \n fn greater_than_one<T:NumExt>(n: &T) -> bool {\n     *n > from(1)"}, {"sha": "fb2969a839824a0c8ca9dc586cbc1b567ea93b42", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -38,7 +38,7 @@ pub impl f64: TypeExt {}\n pub impl float: TypeExt {}\n \n \n-pub trait NumExt: TypeExt Eq Ord Num NumCast {}\n+pub trait NumExt: TypeExt Eq Ord NumCast {}\n \n pub impl u8: NumExt {}\n pub impl u16: NumExt {}"}, {"sha": "30cc54230223f7803e29f6d1f2a37d1ca2520a72", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -11,12 +11,12 @@\n use cmp::{Eq, Ord};\n use num::NumCast::from;\n \n-pub trait NumExt: Eq Ord Num NumCast {}\n+pub trait NumExt: Eq Ord NumCast {}\n \n pub impl f32: NumExt {}\n \n fn num_eq_one<T:NumExt>(n: T) { io::println(fmt!(\"%?\", n == from(1))) }\n \n pub fn main() {\n     num_eq_one(1f32); // you need to actually use the function to trigger the ICE\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c2b88c59f874f977fc5b12dcec301e2f7a527b9a", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6366e74fe3bb07762a4c314a83af21cd1daacc98/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=6366e74fe3bb07762a4c314a83af21cd1daacc98", "patch": "@@ -11,7 +11,7 @@\n use cmp::{Eq, Ord};\n use num::NumCast::from;\n \n-pub trait NumExt: Eq Num NumCast {}\n+pub trait NumExt: Eq NumCast {}\n \n pub impl f32: NumExt {}\n pub impl int: NumExt {}"}]}