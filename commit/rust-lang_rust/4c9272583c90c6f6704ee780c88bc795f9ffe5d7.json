{"sha": "4c9272583c90c6f6704ee780c88bc795f9ffe5d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTI3MjU4M2M5MGM2ZjY3MDRlZTc4MGM4OGJjNzk1ZjlmZmU1ZDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-30T09:46:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-30T09:46:04Z"}, "message": "Pull options outwards", "tree": {"sha": "d170278f575bfcac859a62ccac7a534a93fe6a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d170278f575bfcac859a62ccac7a534a93fe6a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c9272583c90c6f6704ee780c88bc795f9ffe5d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9272583c90c6f6704ee780c88bc795f9ffe5d7", "html_url": "https://github.com/rust-lang/rust/commit/4c9272583c90c6f6704ee780c88bc795f9ffe5d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c9272583c90c6f6704ee780c88bc795f9ffe5d7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12297ab67533200748ee9f60da4bc86dee1133d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/12297ab67533200748ee9f60da4bc86dee1133d9", "html_url": "https://github.com/rust-lang/rust/commit/12297ab67533200748ee9f60da4bc86dee1133d9"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "c67ec39d48c0d1902de127bd484ba977a24710c0", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c9272583c90c6f6704ee780c88bc795f9ffe5d7/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9272583c90c6f6704ee780c88bc795f9ffe5d7/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=4c9272583c90c6f6704ee780c88bc795f9ffe5d7", "patch": "@@ -36,7 +36,7 @@ pub struct CheckOptions {\n #[derive(Debug)]\n pub struct CheckWatcher {\n     // XXX: drop order is significant\n-    cmd_send: Option<Sender<CheckCommand>>,\n+    cmd_send: Sender<CheckCommand>,\n     handle: Option<jod_thread::JoinHandle<()>>,\n     pub task_recv: Receiver<CheckTask>,\n }\n@@ -51,19 +51,12 @@ impl CheckWatcher {\n             let mut check = CheckWatcherThread::new(options, workspace_root);\n             check.run(&task_send, &cmd_recv);\n         });\n-        CheckWatcher { task_recv, cmd_send: Some(cmd_send), handle: Some(handle) }\n-    }\n-\n-    /// Returns a CheckWatcher that doesn't actually do anything\n-    pub fn dummy() -> CheckWatcher {\n-        CheckWatcher { task_recv: never(), cmd_send: None, handle: None }\n+        CheckWatcher { task_recv, cmd_send, handle: Some(handle) }\n     }\n \n     /// Schedule a re-start of the cargo check worker.\n     pub fn update(&self) {\n-        if let Some(cmd_send) = &self.cmd_send {\n-            cmd_send.send(CheckCommand::Update).unwrap();\n-        }\n+        self.cmd_send.send(CheckCommand::Update).unwrap();\n     }\n }\n "}, {"sha": "c899ff6774bd55ee0e0c785ded5afe1d75698e2d", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c9272583c90c6f6704ee780c88bc795f9ffe5d7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9272583c90c6f6704ee780c88bc795f9ffe5d7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=4c9272583c90c6f6704ee780c88bc795f9ffe5d7", "patch": "@@ -14,7 +14,7 @@ use std::{\n     time::{Duration, Instant},\n };\n \n-use crossbeam_channel::{select, unbounded, RecvError, Sender};\n+use crossbeam_channel::{never, select, unbounded, RecvError, Sender};\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{\n     ClientCapabilities, NumberOrString, WorkDoneProgress, WorkDoneProgressBegin,\n@@ -232,7 +232,7 @@ pub fn main_loop(\n                     Err(RecvError) => return Err(\"vfs died\".into()),\n                 },\n                 recv(libdata_receiver) -> data => Event::Lib(data.unwrap()),\n-                recv(world_state.check_watcher.task_recv) -> task => match task {\n+                recv(world_state.check_watcher.as_ref().map_or(&never(), |it| &it.task_recv)) -> task => match task {\n                     Ok(task) => Event::CheckWatcher(task),\n                     Err(RecvError) => return Err(\"check watcher died\".into()),\n                 }\n@@ -443,7 +443,9 @@ fn loop_turn(\n         && loop_state.in_flight_libraries == 0\n     {\n         loop_state.workspace_loaded = true;\n-        world_state.check_watcher.update();\n+        if let Some(check_watcher) = &world_state.check_watcher {\n+            check_watcher.update();\n+        }\n         pool.execute({\n             let subs = loop_state.subscriptions.subscriptions();\n             let snap = world_state.snapshot();\n@@ -615,7 +617,9 @@ fn on_notification(\n     };\n     let not = match notification_cast::<req::DidSaveTextDocument>(not) {\n         Ok(_params) => {\n-            state.check_watcher.update();\n+            if let Some(check_watcher) = &state.check_watcher {\n+                check_watcher.update();\n+            }\n             return Ok(());\n         }\n         Err(not) => not,"}, {"sha": "ca045f93c8424d7cf380c72ef523509af77281e3", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c9272583c90c6f6704ee780c88bc795f9ffe5d7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9272583c90c6f6704ee780c88bc795f9ffe5d7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=4c9272583c90c6f6704ee780c88bc795f9ffe5d7", "patch": "@@ -57,7 +57,7 @@ pub struct WorldState {\n     pub vfs: Arc<RwLock<Vfs>>,\n     pub task_receiver: Receiver<VfsTask>,\n     pub latest_requests: Arc<RwLock<LatestRequests>>,\n-    pub check_watcher: CheckWatcher,\n+    pub check_watcher: Option<CheckWatcher>,\n     pub diagnostics: DiagnosticCollection,\n }\n \n@@ -176,11 +176,11 @@ impl WorldState {\n             })\n             .map(|cargo| {\n                 let cargo_project_root = cargo.workspace_root().to_path_buf();\n-                CheckWatcher::new(&options.cargo_watch, cargo_project_root)\n+                Some(CheckWatcher::new(&options.cargo_watch, cargo_project_root))\n             })\n             .unwrap_or_else(|| {\n                 log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n-                CheckWatcher::dummy()\n+                None\n             });\n \n         let mut analysis_host = AnalysisHost::new(lru_capacity);"}]}