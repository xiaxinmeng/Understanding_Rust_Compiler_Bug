{"sha": "dd9028a8c43f6770bb93073fb9d1b161ab3f68d3", "node_id": "C_kwDOAAsO6NoAKGRkOTAyOGE4YzQzZjY3NzBiYjkzMDczZmI5ZDFiMTYxYWIzZjY4ZDM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-11T06:27:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-13T23:01:27Z"}, "message": "`mbe::TokenTree`: remove `Lrc` around `Delimited` and `SequenceRepetition`.", "tree": {"sha": "db1a546f63a975aeae235a33dace36cbdfafc6e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db1a546f63a975aeae235a33dace36cbdfafc6e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd9028a8c43f6770bb93073fb9d1b161ab3f68d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9028a8c43f6770bb93073fb9d1b161ab3f68d3", "html_url": "https://github.com/rust-lang/rust/commit/dd9028a8c43f6770bb93073fb9d1b161ab3f68d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd9028a8c43f6770bb93073fb9d1b161ab3f68d3/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75fd391aaa3e21c7a1e9403f20eacf23c32aa7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/75fd391aaa3e21c7a1e9403f20eacf23c32aa7c7", "html_url": "https://github.com/rust-lang/rust/commit/75fd391aaa3e21c7a1e9403f20eacf23c32aa7c7"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "a5b8571fefe54f36a83558a9e362bd7c9475f729", "filename": "compiler/rustc_expand/src/mbe.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd9028a8c43f6770bb93073fb9d1b161ab3f68d3/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9028a8c43f6770bb93073fb9d1b161ab3f68d3/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe.rs?ref=dd9028a8c43f6770bb93073fb9d1b161ab3f68d3", "patch": "@@ -13,7 +13,6 @@ crate mod transcribe;\n use metavar_expr::MetaVarExpr;\n use rustc_ast::token::{self, NonterminalKind, Token, TokenKind};\n use rustc_ast::tokenstream::DelimSpan;\n-use rustc_data_structures::sync::Lrc;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n@@ -64,13 +63,13 @@ enum KleeneOp {\n \n /// Similar to `tokenstream::TokenTree`, except that `Sequence`, `MetaVar`, `MetaVarDecl`, and\n /// `MetaVarExpr` are \"first-class\" token trees. Useful for parsing macros.\n-#[derive(Debug, Clone, PartialEq, Encodable, Decodable)]\n+#[derive(Debug, PartialEq, Encodable, Decodable)]\n enum TokenTree {\n     Token(Token),\n     /// A delimited sequence, e.g. `($e:expr)` (RHS) or `{ $e }` (LHS).\n-    Delimited(DelimSpan, Lrc<Delimited>),\n+    Delimited(DelimSpan, Delimited),\n     /// A kleene-style repetition sequence, e.g. `$($e:expr)*` (RHS) or `$($e),*` (LHS).\n-    Sequence(DelimSpan, Lrc<SequenceRepetition>),\n+    Sequence(DelimSpan, SequenceRepetition),\n     /// e.g., `$var`.\n     MetaVar(Span, Ident),\n     /// e.g., `$var:expr`. Only appears on the LHS."}, {"sha": "ef174c3c45e97760559bd17db5d11e7cc704f328", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd9028a8c43f6770bb93073fb9d1b161ab3f68d3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9028a8c43f6770bb93073fb9d1b161ab3f68d3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=dd9028a8c43f6770bb93073fb9d1b161ab3f68d3", "patch": "@@ -14,7 +14,6 @@ use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_feature::Features;\n use rustc_lint_defs::builtin::{\n@@ -407,7 +406,7 @@ pub fn compile_declarative_macro(\n     let argument_gram = vec![\n         mbe::TokenTree::Sequence(\n             DelimSpan::dummy(),\n-            Lrc::new(mbe::SequenceRepetition {\n+            mbe::SequenceRepetition {\n                 tts: vec![\n                     mbe::TokenTree::MetaVarDecl(def.span, lhs_nm, tt_spec),\n                     mbe::TokenTree::token(token::FatArrow, def.span),\n@@ -419,20 +418,20 @@ pub fn compile_declarative_macro(\n                 )),\n                 kleene: mbe::KleeneToken::new(mbe::KleeneOp::OneOrMore, def.span),\n                 num_captures: 2,\n-            }),\n+            },\n         ),\n         // to phase into semicolon-termination instead of semicolon-separation\n         mbe::TokenTree::Sequence(\n             DelimSpan::dummy(),\n-            Lrc::new(mbe::SequenceRepetition {\n+            mbe::SequenceRepetition {\n                 tts: vec![mbe::TokenTree::token(\n                     if macro_rules { token::Semi } else { token::Comma },\n                     def.span,\n                 )],\n                 separator: None,\n                 kleene: mbe::KleeneToken::new(mbe::KleeneOp::ZeroOrMore, def.span),\n                 num_captures: 0,\n-            }),\n+            },\n         ),\n     ];\n     // Convert it into `MatcherLoc` form."}, {"sha": "0bce6967a10ddb3a495b563802ba8c3af4167ed5", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dd9028a8c43f6770bb93073fb9d1b161ab3f68d3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9028a8c43f6770bb93073fb9d1b161ab3f68d3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=dd9028a8c43f6770bb93073fb9d1b161ab3f68d3", "patch": "@@ -11,8 +11,6 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::edition::Edition;\n use rustc_span::{Span, SyntaxContext};\n \n-use rustc_data_structures::sync::Lrc;\n-\n const VALID_FRAGMENT_NAMES_MSG: &str = \"valid fragment specifiers are \\\n                                         `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, \\\n                                         `literal`, `path`, `meta`, `tt`, `item` and `vis`\";\n@@ -213,12 +211,7 @@ fn parse_tree(\n                         if parsing_patterns { count_metavar_decls(&sequence) } else { 0 };\n                     TokenTree::Sequence(\n                         delim_span,\n-                        Lrc::new(SequenceRepetition {\n-                            tts: sequence,\n-                            separator,\n-                            kleene,\n-                            num_captures,\n-                        }),\n+                        SequenceRepetition { tts: sequence, separator, kleene, num_captures },\n                     )\n                 }\n \n@@ -269,10 +262,10 @@ fn parse_tree(\n         // descend into the delimited set and further parse it.\n         tokenstream::TokenTree::Delimited(span, delim, tts) => TokenTree::Delimited(\n             span,\n-            Lrc::new(Delimited {\n+            Delimited {\n                 delim,\n                 tts: parse(tts, parsing_patterns, sess, node_id, features, edition),\n-            }),\n+            },\n         ),\n     }\n }"}]}