{"sha": "bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "node_id": "C_kwDOAAsO6NoAKGJiYmQ0OGZhNmQzYzI4ZDc4MmY3MDA4ODQ2YWMyYTYwM2Y5NWIzOWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-12T21:34:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-12T21:34:30Z"}, "message": "Auto merge of #90358 - DevinR528:omitted-field-fix, r=jackh726\n\nFix exposing fields marked unstable or doc hidden\n\nCloses https://github.com/rust-lang/rust/issues/89837\n\nWork towards https://github.com/rust-lang/rust/issues/89554\n\nFilter fields that are marked `doc(hidden)` or are unstable with that feature turned off. This brings structs and enums into alignment behavior-wise when emitting warning/errors about pattern exhaustiveness/reachability.\n\ncc `@Nadrieril`", "tree": {"sha": "4e53670d4d95de3ccd914f75bbe8594e3e72e76e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e53670d4d95de3ccd914f75bbe8594e3e72e76e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "html_url": "https://github.com/rust-lang/rust/commit/bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f103b2969b0088953873dc1ac92eb3387c753596", "url": "https://api.github.com/repos/rust-lang/rust/commits/f103b2969b0088953873dc1ac92eb3387c753596", "html_url": "https://github.com/rust-lang/rust/commit/f103b2969b0088953873dc1ac92eb3387c753596"}, {"sha": "492d8d72936685726066ef0f0f0a9d935f537eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/492d8d72936685726066ef0f0f0a9d935f537eee", "html_url": "https://github.com/rust-lang/rust/commit/492d8d72936685726066ef0f0f0a9d935f537eee"}], "stats": {"total": 501, "additions": 422, "deletions": 79}, "files": [{"sha": "612bed639bfb1f383232e5a8ca2a3e8d8daaf174", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -692,11 +692,11 @@ impl<'tcx> Constructor<'tcx> {\n     }\n \n     /// Checks if the `Constructor` is a `Constructor::Variant` with a `#[doc(hidden)]`\n-    /// attribute.\n+    /// attribute from a type not local to the current crate.\n     pub(super) fn is_doc_hidden_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {\n         if let Constructor::Variant(idx) = self && let ty::Adt(adt, _) = pcx.ty.kind() {\n-            let variant_def_id = adt.variant(*idx).def_id;\n-            return pcx.cx.tcx.is_doc_hidden(variant_def_id);\n+            let variant_def_id = adt.variants()[*idx].def_id;\n+            return pcx.cx.tcx.is_doc_hidden(variant_def_id) && !variant_def_id.is_local();\n         }\n         false\n     }"}, {"sha": "a264ee5d1475d62268c9dd0d805977cc742db73b", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -11,6 +11,7 @@ use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n use rustc_hir::{HirId, Pat, PatKind};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::{self, Adt, BindingMode, Ty, TypeFoldable};\n use rustc_session::lint::builtin::NON_EXHAUSTIVE_OMITTED_PATTERNS;\n use rustc_span::hygiene::DesugaringKind;\n@@ -1308,6 +1309,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .copied()\n                 .filter(|(field, _)| {\n                     field.vis.is_accessible_from(tcx.parent_module(pat.hir_id).to_def_id(), tcx)\n+                        && !matches!(\n+                            tcx.eval_stability(field.did, None, DUMMY_SP, None),\n+                            EvalResult::Deny { .. }\n+                        )\n+                        // We only want to report the error if it is hidden and not local\n+                        && !(tcx.is_doc_hidden(field.did) && !field.did.is_local())\n                 })\n                 .collect();\n "}, {"sha": "364514ba1d3b057bc58d882b282d8fc885ea2142", "filename": "src/test/ui/pattern/usefulness/auxiliary/hidden.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Fhidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Fhidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Fhidden.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -1,6 +1,14 @@\n-pub enum Foo {\n+pub enum HiddenEnum {\n     A,\n     B,\n     #[doc(hidden)]\n     C,\n }\n+\n+#[derive(Default)]\n+pub struct HiddenStruct {\n+    pub one: u8,\n+    pub two: bool,\n+    #[doc(hidden)]\n+    pub hide: usize,\n+}"}, {"sha": "a06b3a6e4e5abbd07dce48c05309d979cb53f417", "filename": "src/test/ui/pattern/usefulness/auxiliary/unstable.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fauxiliary%2Funstable.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -2,11 +2,22 @@\n #![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n-pub enum Foo {\n+pub enum UnstableEnum {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     Stable,\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     Stable2,\n     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     Unstable,\n }\n+\n+#[derive(Default)]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+pub struct UnstableStruct {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub stable: bool,\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub stable2: usize,\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    pub unstable: u8,\n+}"}, {"sha": "4163b87dc8597f685e32acc374366938227bf782", "filename": "src/test/ui/pattern/usefulness/doc-hidden-fields.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -0,0 +1,26 @@\n+// aux-build:hidden.rs\n+\n+extern crate hidden;\n+\n+use hidden::HiddenStruct;\n+\n+struct InCrate {\n+    a: usize,\n+    b: bool,\n+    #[doc(hidden)]\n+    im_hidden: u8\n+}\n+\n+fn main() {\n+    let HiddenStruct { one, two } = HiddenStruct::default();\n+    //~^ pattern requires `..` due to inaccessible fields\n+\n+    let HiddenStruct { one } = HiddenStruct::default();\n+    //~^ pattern does not mention field `two` and inaccessible fields\n+\n+    let HiddenStruct { one, hide } = HiddenStruct::default();\n+    //~^ pattern does not mention field `two`\n+\n+    let InCrate { a, b } = InCrate { a: 0, b: false, im_hidden: 0 };\n+    //~^ pattern does not mention field `im_hidden`\n+}"}, {"sha": "f277bfbc884fbc46da61f09434f77c8e640ddfe3", "filename": "src/test/ui/pattern/usefulness/doc-hidden-fields.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -0,0 +1,59 @@\n+error: pattern requires `..` due to inaccessible fields\n+  --> $DIR/doc-hidden-fields.rs:15:9\n+   |\n+LL |     let HiddenStruct { one, two } = HiddenStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ignore the inaccessible and unused fields\n+   |\n+LL |     let HiddenStruct { one, two, .. } = HiddenStruct::default();\n+   |                                ++++\n+\n+error[E0027]: pattern does not mention field `two` and inaccessible fields\n+  --> $DIR/doc-hidden-fields.rs:18:9\n+   |\n+LL |     let HiddenStruct { one } = HiddenStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^ missing field `two` and inaccessible fields\n+   |\n+help: include the missing field in the pattern and ignore the inaccessible fields\n+   |\n+LL |     let HiddenStruct { one, two, .. } = HiddenStruct::default();\n+   |                           ~~~~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let HiddenStruct { one, .. } = HiddenStruct::default();\n+   |                           ~~~~~~\n+\n+error[E0027]: pattern does not mention field `two`\n+  --> $DIR/doc-hidden-fields.rs:21:9\n+   |\n+LL |     let HiddenStruct { one, hide } = HiddenStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `two`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     let HiddenStruct { one, hide, two } = HiddenStruct::default();\n+   |                                 ~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let HiddenStruct { one, hide, .. } = HiddenStruct::default();\n+   |                                 ~~~~~~\n+\n+error[E0027]: pattern does not mention field `im_hidden`\n+  --> $DIR/doc-hidden-fields.rs:24:9\n+   |\n+LL |     let InCrate { a, b } = InCrate { a: 0, b: false, im_hidden: 0 };\n+   |         ^^^^^^^^^^^^^^^^ missing field `im_hidden`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     let InCrate { a, b, im_hidden } = InCrate { a: 0, b: false, im_hidden: 0 };\n+   |                       ~~~~~~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let InCrate { a, b, .. } = InCrate { a: 0, b: false, im_hidden: 0 };\n+   |                       ~~~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0027`."}, {"sha": "d968c48fb1ab78b3b733363c53c9d90dc97ebd5e", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -2,29 +2,42 @@\n \n extern crate hidden;\n \n-use hidden::Foo;\n+use hidden::HiddenEnum;\n+\n+enum InCrate {\n+    A,\n+    B,\n+    #[doc(hidden)]\n+    C,\n+}\n \n fn main() {\n-    match Foo::A {\n-        Foo::A => {}\n-        Foo::B => {}\n+    match HiddenEnum::A {\n+        HiddenEnum::A => {}\n+        HiddenEnum::B => {}\n     }\n     //~^^^^ non-exhaustive patterns: `_` not covered\n \n-    match Foo::A {\n-        Foo::A => {}\n-        Foo::C => {}\n+    match HiddenEnum::A {\n+        HiddenEnum::A => {}\n+        HiddenEnum::C => {}\n     }\n     //~^^^^ non-exhaustive patterns: `B` not covered\n \n-    match Foo::A {\n-        Foo::A => {}\n+    match HiddenEnum::A {\n+        HiddenEnum::A => {}\n     }\n     //~^^^ non-exhaustive patterns: `B` and `_` not covered\n \n     match None {\n         None => {}\n-        Some(Foo::A) => {}\n+        Some(HiddenEnum::A) => {}\n     }\n     //~^^^^ non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n+\n+    match InCrate::A {\n+        InCrate::A => {}\n+        InCrate::B => {}\n+    }\n+    //~^^^^ non-exhaustive patterns: `C` not covered\n }"}, {"sha": "296465eb81838f6056d6dd75b3701d356a028ec1", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 47, "deletions": 26, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -1,81 +1,81 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/doc-hidden-non-exhaustive.rs:8:11\n+  --> $DIR/doc-hidden-non-exhaustive.rs:15:11\n    |\n-LL |     match Foo::A {\n-   |           ^^^^^^ pattern `_` not covered\n+LL |     match HiddenEnum::A {\n+   |           ^^^^^^^^^^^^^ pattern `_` not covered\n    |\n-note: `Foo` defined here\n+note: `HiddenEnum` defined here\n   --> $DIR/auxiliary/hidden.rs:1:1\n    |\n-LL | / pub enum Foo {\n+LL | / pub enum HiddenEnum {\n LL | |     A,\n LL | |     B,\n LL | |     #[doc(hidden)]\n LL | |     C,\n LL | | }\n    | |_^\n-   = note: the matched value is of type `Foo`\n+   = note: the matched value is of type `HiddenEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         Foo::B => {}\n+LL ~         HiddenEnum::B => {}\n LL +         _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n-  --> $DIR/doc-hidden-non-exhaustive.rs:14:11\n+  --> $DIR/doc-hidden-non-exhaustive.rs:21:11\n    |\n-LL |     match Foo::A {\n-   |           ^^^^^^ pattern `B` not covered\n+LL |     match HiddenEnum::A {\n+   |           ^^^^^^^^^^^^^ pattern `B` not covered\n    |\n-note: `Foo` defined here\n+note: `HiddenEnum` defined here\n   --> $DIR/auxiliary/hidden.rs:3:5\n    |\n-LL | / pub enum Foo {\n+LL | / pub enum HiddenEnum {\n LL | |     A,\n LL | |     B,\n    | |     ^ not covered\n LL | |     #[doc(hidden)]\n LL | |     C,\n LL | | }\n    | |_-\n-   = note: the matched value is of type `Foo`\n+   = note: the matched value is of type `HiddenEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         Foo::C => {}\n+LL ~         HiddenEnum::C => {}\n LL +         B => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `B` and `_` not covered\n-  --> $DIR/doc-hidden-non-exhaustive.rs:20:11\n+  --> $DIR/doc-hidden-non-exhaustive.rs:27:11\n    |\n-LL |     match Foo::A {\n-   |           ^^^^^^ patterns `B` and `_` not covered\n+LL |     match HiddenEnum::A {\n+   |           ^^^^^^^^^^^^^ patterns `B` and `_` not covered\n    |\n-note: `Foo` defined here\n+note: `HiddenEnum` defined here\n   --> $DIR/auxiliary/hidden.rs:3:5\n    |\n-LL | / pub enum Foo {\n+LL | / pub enum HiddenEnum {\n LL | |     A,\n LL | |     B,\n    | |     ^ not covered\n LL | |     #[doc(hidden)]\n LL | |     C,\n LL | | }\n    | |_-\n-   = note: the matched value is of type `Foo`\n+   = note: the matched value is of type `HiddenEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n-LL ~         Foo::A => {}\n+LL ~         HiddenEnum::A => {}\n LL +         B | _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n-  --> $DIR/doc-hidden-non-exhaustive.rs:25:11\n+  --> $DIR/doc-hidden-non-exhaustive.rs:32:11\n    |\n LL |     match None {\n    |           ^^^^ patterns `Some(B)` and `Some(_)` not covered\n    |\n-note: `Option<Foo>` defined here\n+note: `Option<HiddenEnum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL | / pub enum Option<T> {\n@@ -87,13 +87,34 @@ LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    | |     ^^^^ not covered\n LL | | }\n    | |_-\n-   = note: the matched value is of type `Option<Foo>`\n+   = note: the matched value is of type `Option<HiddenEnum>`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n-LL ~         Some(Foo::A) => {}\n+LL ~         Some(HiddenEnum::A) => {}\n LL +         Some(B) | Some(_) => todo!()\n    |\n \n-error: aborting due to 4 previous errors\n+error[E0004]: non-exhaustive patterns: `C` not covered\n+  --> $DIR/doc-hidden-non-exhaustive.rs:38:11\n+   |\n+LL |     match InCrate::A {\n+   |           ^^^^^^^^^^ pattern `C` not covered\n+   |\n+note: `InCrate` defined here\n+  --> $DIR/doc-hidden-non-exhaustive.rs:11:5\n+   |\n+LL | enum InCrate {\n+   |      -------\n+...\n+LL |     C,\n+   |     ^ not covered\n+   = note: the matched value is of type `InCrate`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n+   |\n+LL ~         InCrate::B => {}\n+LL +         C => todo!()\n+   |\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "90f40a8d629628ff37ab5766ce7e83e7a11fec5d", "filename": "src/test/ui/pattern/usefulness/stable-gated-fields.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-fields.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:unstable.rs\n+\n+extern crate unstable;\n+\n+use unstable::UnstableStruct;\n+\n+fn main() {\n+    let UnstableStruct { stable } = UnstableStruct::default();\n+    //~^ pattern does not mention field `stable2` and inaccessible fields\n+\n+    let UnstableStruct { stable, stable2 } = UnstableStruct::default();\n+    //~^ pattern requires `..` due to inaccessible fields\n+\n+    // OK: stable field is matched\n+    let UnstableStruct { stable, stable2, .. } = UnstableStruct::default();\n+}"}, {"sha": "cf98c51a2b41ebf3cfb2314d7da524522c421aa3", "filename": "src/test/ui/pattern/usefulness/stable-gated-fields.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-fields.stderr?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -0,0 +1,29 @@\n+error[E0027]: pattern does not mention field `stable2` and inaccessible fields\n+  --> $DIR/stable-gated-fields.rs:8:9\n+   |\n+LL |     let UnstableStruct { stable } = UnstableStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `stable2` and inaccessible fields\n+   |\n+help: include the missing field in the pattern and ignore the inaccessible fields\n+   |\n+LL |     let UnstableStruct { stable, stable2, .. } = UnstableStruct::default();\n+   |                                ~~~~~~~~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let UnstableStruct { stable, .. } = UnstableStruct::default();\n+   |                                ~~~~~~\n+\n+error: pattern requires `..` due to inaccessible fields\n+  --> $DIR/stable-gated-fields.rs:11:9\n+   |\n+LL |     let UnstableStruct { stable, stable2 } = UnstableStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ignore the inaccessible and unused fields\n+   |\n+LL |     let UnstableStruct { stable, stable2, .. } = UnstableStruct::default();\n+   |                                         ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0027`."}, {"sha": "ff1c472e24fd6292a06845e9c7bae9c3f4ecc388", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -2,17 +2,17 @@\n \n extern crate unstable;\n \n-use unstable::Foo;\n+use unstable::UnstableEnum;\n \n fn main() {\n-    match Foo::Stable {\n-        Foo::Stable => {}\n+    match UnstableEnum::Stable {\n+        UnstableEnum::Stable => {}\n     }\n     //~^^^ non-exhaustive patterns: `Stable2` and `_` not covered\n \n-    match Foo::Stable {\n-        Foo::Stable => {}\n-        Foo::Stable2 => {}\n+    match UnstableEnum::Stable {\n+        UnstableEnum::Stable => {}\n+        UnstableEnum::Stable2 => {}\n     }\n     //~^^^^ non-exhaustive patterns: `_` not covered\n }"}, {"sha": "559539178cbe3931f486006010b19f2612d1f877", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -1,13 +1,13 @@\n error[E0004]: non-exhaustive patterns: `Stable2` and `_` not covered\n   --> $DIR/stable-gated-patterns.rs:8:11\n    |\n-LL |     match Foo::Stable {\n-   |           ^^^^^^^^^^^ patterns `Stable2` and `_` not covered\n+LL |     match UnstableEnum::Stable {\n+   |           ^^^^^^^^^^^^^^^^^^^^ patterns `Stable2` and `_` not covered\n    |\n-note: `Foo` defined here\n+note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:9:5\n    |\n-LL | / pub enum Foo {\n+LL | / pub enum UnstableEnum {\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n LL | |     Stable,\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n@@ -17,34 +17,34 @@ LL | |     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n LL | |     Unstable,\n LL | | }\n    | |_-\n-   = note: the matched value is of type `Foo`\n+   = note: the matched value is of type `UnstableEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n-LL ~         Foo::Stable => {}\n+LL ~         UnstableEnum::Stable => {}\n LL +         Stable2 | _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/stable-gated-patterns.rs:13:11\n    |\n-LL |     match Foo::Stable {\n-   |           ^^^^^^^^^^^ pattern `_` not covered\n+LL |     match UnstableEnum::Stable {\n+   |           ^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n    |\n-note: `Foo` defined here\n+note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:5:1\n    |\n-LL | / pub enum Foo {\n+LL | / pub enum UnstableEnum {\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n LL | |     Stable,\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n ...  |\n LL | |     Unstable,\n LL | | }\n    | |_^\n-   = note: the matched value is of type `Foo`\n+   = note: the matched value is of type `UnstableEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         Foo::Stable2 => {}\n+LL ~         UnstableEnum::Stable2 => {}\n LL +         _ => todo!()\n    |\n "}, {"sha": "2b473ae989bbea5fdbbfebd53ecb2ad742914fb4", "filename": "src/test/ui/pattern/usefulness/unstable-gated-fields.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-fields.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -0,0 +1,18 @@\n+#![feature(unstable_test_feature)]\n+\n+// aux-build:unstable.rs\n+\n+extern crate unstable;\n+\n+use unstable::UnstableStruct;\n+\n+fn main() {\n+    let UnstableStruct { stable, stable2, } = UnstableStruct::default();\n+    //~^ pattern does not mention field `unstable`\n+\n+    let UnstableStruct { stable, unstable, } = UnstableStruct::default();\n+    //~^ pattern does not mention field `stable2`\n+\n+    // OK: stable field is matched\n+    let UnstableStruct { stable, stable2, unstable } = UnstableStruct::default();\n+}"}, {"sha": "e4f5fa06b3ff5cfc8ebe0513350d8d665ef8f91a", "filename": "src/test/ui/pattern/usefulness/unstable-gated-fields.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-fields.stderr?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -0,0 +1,33 @@\n+error[E0027]: pattern does not mention field `unstable`\n+  --> $DIR/unstable-gated-fields.rs:10:9\n+   |\n+LL |     let UnstableStruct { stable, stable2, } = UnstableStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `unstable`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     let UnstableStruct { stable, stable2, unstable } = UnstableStruct::default();\n+   |                                         ~~~~~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let UnstableStruct { stable, stable2, .. } = UnstableStruct::default();\n+   |                                         ~~~~~~\n+\n+error[E0027]: pattern does not mention field `stable2`\n+  --> $DIR/unstable-gated-fields.rs:13:9\n+   |\n+LL |     let UnstableStruct { stable, unstable, } = UnstableStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `stable2`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     let UnstableStruct { stable, unstable, stable2 } = UnstableStruct::default();\n+   |                                          ~~~~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let UnstableStruct { stable, unstable, .. } = UnstableStruct::default();\n+   |                                          ~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0027`."}, {"sha": "bdab327fd57ac71dfee91b905da810e49c429465", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -4,19 +4,19 @@\n \n extern crate unstable;\n \n-use unstable::Foo;\n+use unstable::UnstableEnum;\n \n fn main() {\n-    match Foo::Stable {\n-        Foo::Stable => {}\n-        Foo::Stable2 => {}\n+    match UnstableEnum::Stable {\n+        UnstableEnum::Stable => {}\n+        UnstableEnum::Stable2 => {}\n     }\n     //~^^^^ non-exhaustive patterns: `Unstable` not covered\n \n     // Ok: all variants are explicitly matched\n-    match Foo::Stable {\n-        Foo::Stable => {}\n-        Foo::Stable2 => {}\n-        Foo::Unstable => {}\n+    match UnstableEnum::Stable {\n+        UnstableEnum::Stable => {}\n+        UnstableEnum::Stable2 => {}\n+        UnstableEnum::Unstable => {}\n     }\n }"}, {"sha": "b5f1805deef118b893f06a5e4d331eed07837ae1", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -1,13 +1,13 @@\n error[E0004]: non-exhaustive patterns: `Unstable` not covered\n   --> $DIR/unstable-gated-patterns.rs:10:11\n    |\n-LL |     match Foo::Stable {\n-   |           ^^^^^^^^^^^ pattern `Unstable` not covered\n+LL |     match UnstableEnum::Stable {\n+   |           ^^^^^^^^^^^^^^^^^^^^ pattern `Unstable` not covered\n    |\n-note: `Foo` defined here\n+note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:11:5\n    |\n-LL | / pub enum Foo {\n+LL | / pub enum UnstableEnum {\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n LL | |     Stable,\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n@@ -16,10 +16,10 @@ LL | |     Unstable,\n    | |     ^^^^^^^^ not covered\n LL | | }\n    | |_-\n-   = note: the matched value is of type `Foo`\n+   = note: the matched value is of type `UnstableEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         Foo::Stable2 => {}\n+LL ~         UnstableEnum::Stable2 => {}\n LL +         Unstable => todo!()\n    |\n "}, {"sha": "11df44461e36bb36a1f5fc698db649c9b7453c2d", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/unstable.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Funstable.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -27,3 +27,34 @@ impl OnlyUnstableEnum {\n         Self::Unstable\n     }\n }\n+\n+#[derive(Default)]\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+#[non_exhaustive]\n+pub struct UnstableStruct {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub stable: bool,\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub stable2: usize,\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    pub unstable: u8,\n+}\n+\n+#[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+#[non_exhaustive]\n+pub struct OnlyUnstableStruct {\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    pub unstable: u8,\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n+    pub unstable2: bool,\n+}\n+\n+impl OnlyUnstableStruct {\n+    #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n+    pub fn new() -> Self {\n+        Self {\n+            unstable: 0,\n+            unstable2: false,\n+        }\n+    }\n+}"}, {"sha": "d8f07bb8f24d1b44f165421fc86739b09884c772", "filename": "src/test/ui/rfc-2008-non-exhaustive/omitted-patterns.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -13,7 +13,7 @@ use enums::{\n     EmptyNonExhaustiveEnum, NestedNonExhaustive, NonExhaustiveEnum, NonExhaustiveSingleVariant,\n     VariantNonExhaustive,\n };\n-use unstable::{UnstableEnum, OnlyUnstableEnum};\n+use unstable::{UnstableEnum, OnlyUnstableEnum, UnstableStruct, OnlyUnstableStruct};\n use structs::{FunctionalRecord, MixedVisFields, NestedStruct, NormalStruct};\n \n #[non_exhaustive]\n@@ -145,6 +145,7 @@ fn main() {\n     }\n     //~^^ some variants are not matched explicitly\n \n+    // Ok: the feature is on and all variants are matched\n     #[deny(non_exhaustive_omitted_patterns)]\n     match UnstableEnum::Stable {\n         UnstableEnum::Stable => {}\n@@ -167,4 +168,20 @@ fn main() {\n         _ => {}\n     }\n     //~^^ some variants are not matched explicitly\n+\n+    #[warn(non_exhaustive_omitted_patterns)]\n+    let OnlyUnstableStruct { unstable, .. } = OnlyUnstableStruct::new();\n+    //~^ some fields are not explicitly listed\n+\n+    // OK: both unstable fields are matched with feature on\n+    #[warn(non_exhaustive_omitted_patterns)]\n+    let OnlyUnstableStruct { unstable, unstable2, .. } = OnlyUnstableStruct::new();\n+\n+    #[warn(non_exhaustive_omitted_patterns)]\n+    let UnstableStruct { stable, stable2, .. } = UnstableStruct::default();\n+    //~^ some fields are not explicitly listed\n+\n+    // OK: both unstable and stable fields are matched with feature on\n+    #[warn(non_exhaustive_omitted_patterns)]\n+    let UnstableStruct { stable, stable2, unstable, .. } = UnstableStruct::default();\n }"}, {"sha": "a9885449f3f0297fb3f506a20a9c95e8389858c7", "filename": "src/test/ui/rfc-2008-non-exhaustive/omitted-patterns.stderr", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -49,6 +49,34 @@ LL |     let NestedStruct { bar: NormalStruct { first_field, .. }, .. } = Nested\n    = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n    = note: the pattern is of type `NestedStruct` and the `non_exhaustive_omitted_patterns` attribute was found\n \n+warning: some fields are not explicitly listed\n+  --> $DIR/omitted-patterns.rs:173:9\n+   |\n+LL |     let OnlyUnstableStruct { unstable, .. } = OnlyUnstableStruct::new();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `unstable2` not listed\n+   |\n+note: the lint level is defined here\n+  --> $DIR/omitted-patterns.rs:172:12\n+   |\n+LL |     #[warn(non_exhaustive_omitted_patterns)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n+   = note: the pattern is of type `OnlyUnstableStruct` and the `non_exhaustive_omitted_patterns` attribute was found\n+\n+warning: some fields are not explicitly listed\n+  --> $DIR/omitted-patterns.rs:181:9\n+   |\n+LL |     let UnstableStruct { stable, stable2, .. } = UnstableStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `unstable` not listed\n+   |\n+note: the lint level is defined here\n+  --> $DIR/omitted-patterns.rs:180:12\n+   |\n+LL |     #[warn(non_exhaustive_omitted_patterns)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n+   = note: the pattern is of type `UnstableStruct` and the `non_exhaustive_omitted_patterns` attribute was found\n+\n error: some variants are not matched explicitly\n   --> $DIR/omitted-patterns.rs:58:9\n    |\n@@ -143,18 +171,18 @@ LL |         #[deny(non_exhaustive_omitted_patterns)]\n    = note: the matched value is of type `UnstableEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n error: some variants are not matched explicitly\n-  --> $DIR/omitted-patterns.rs:167:9\n+  --> $DIR/omitted-patterns.rs:168:9\n    |\n LL |         _ => {}\n    |         ^ pattern `Unstable2` not covered\n    |\n note: the lint level is defined here\n-  --> $DIR/omitted-patterns.rs:164:12\n+  --> $DIR/omitted-patterns.rs:165:12\n    |\n LL |     #[deny(non_exhaustive_omitted_patterns)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `OnlyUnstableEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n-error: aborting due to 8 previous errors; 4 warnings emitted\n+error: aborting due to 8 previous errors; 6 warnings emitted\n "}, {"sha": "82ee68687ed00b12127aeb4a13ce707f080f1e4f", "filename": "src/test/ui/rfc-2008-non-exhaustive/stable-omitted-patterns.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.rs?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -6,7 +6,7 @@\n // aux-build:unstable.rs\n extern crate unstable;\n \n-use unstable::{UnstableEnum, OnlyUnstableEnum};\n+use unstable::{UnstableEnum, OnlyUnstableEnum, UnstableStruct, OnlyUnstableStruct};\n \n fn main() {\n     // OK: this matches all the stable variants\n@@ -30,4 +30,16 @@ fn main() {\n     match OnlyUnstableEnum::new() {\n         _ => {}\n     }\n+\n+    // Ok: Same as the above enum (no fields can be matched on)\n+    #[warn(non_exhaustive_omitted_patterns)]\n+    let OnlyUnstableStruct { .. } = OnlyUnstableStruct::new();\n+\n+    #[warn(non_exhaustive_omitted_patterns)]\n+    let UnstableStruct { stable, .. } = UnstableStruct::default();\n+    //~^ some fields are not explicitly listed\n+\n+    // OK: stable field is matched\n+    #[warn(non_exhaustive_omitted_patterns)]\n+    let UnstableStruct { stable, stable2, .. } = UnstableStruct::default();\n }"}, {"sha": "7cce178988aa9f069bbb1f1f7f63771b6ceae3ea", "filename": "src/test/ui/rfc-2008-non-exhaustive/stable-omitted-patterns.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbbd48fa6d3c28d782f7008846ac2a603f95b39a/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.stderr?ref=bbbd48fa6d3c28d782f7008846ac2a603f95b39a", "patch": "@@ -1,3 +1,17 @@\n+warning: some fields are not explicitly listed\n+  --> $DIR/stable-omitted-patterns.rs:39:9\n+   |\n+LL |     let UnstableStruct { stable, .. } = UnstableStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `stable2` not listed\n+   |\n+note: the lint level is defined here\n+  --> $DIR/stable-omitted-patterns.rs:38:12\n+   |\n+LL |     #[warn(non_exhaustive_omitted_patterns)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: ensure that all fields are mentioned explicitly by adding the suggested fields\n+   = note: the pattern is of type `UnstableStruct` and the `non_exhaustive_omitted_patterns` attribute was found\n+\n error: some variants are not matched explicitly\n   --> $DIR/stable-omitted-patterns.rs:23:9\n    |\n@@ -12,5 +26,5 @@ LL |         #[deny(non_exhaustive_omitted_patterns)]\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `UnstableEnum` and the `non_exhaustive_omitted_patterns` attribute was found\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n "}]}