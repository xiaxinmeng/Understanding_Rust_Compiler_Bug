{"sha": "5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "node_id": "C_kwDOAAsO6NoAKDVlYzdkMWRhZDZkZWFkOTQ5YTQ5Yzc2YzhjYTA0MjVhNmU0NmEyMjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-06T16:25:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-06T16:25:00Z"}, "message": "Auto merge of #90559 - rusticstuff:optimize-bidi-detection, r=davidtwco\n\nOptimize bidi character detection.\n\nShould fix most of the performance regression of the bidi character detection (#90514), to be confirmed with a perf run.", "tree": {"sha": "7803255a0dab41cad43dd8908ecd0d37c54c5930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7803255a0dab41cad43dd8908ecd0d37c54c5930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "html_url": "https://github.com/rust-lang/rust/commit/5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3326f19e8982ce033e04c163ddc520a76e42c737", "url": "https://api.github.com/repos/rust-lang/rust/commits/3326f19e8982ce033e04c163ddc520a76e42c737", "html_url": "https://github.com/rust-lang/rust/commit/3326f19e8982ce033e04c163ddc520a76e42c737"}, {"sha": "39110beab03ed74d1cb97df77721c0ad2fcb165b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39110beab03ed74d1cb97df77721c0ad2fcb165b", "html_url": "https://github.com/rust-lang/rust/commit/39110beab03ed74d1cb97df77721c0ad2fcb165b"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "b9db2a7e089de1416d8667ffce0eb08322b50969", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "patch": "@@ -16,6 +16,7 @@\n #![feature(nll)]\n #![feature(min_specialization)]\n #![recursion_limit = \"256\"]\n+#![feature(slice_internals)]\n \n #[macro_use]\n extern crate rustc_macros;\n@@ -25,6 +26,7 @@ pub mod util {\n     pub mod comments;\n     pub mod literal;\n     pub mod parser;\n+    pub mod unicode;\n }\n \n pub mod ast;"}, {"sha": "f009f7b300ce0d7d1cf107f5ee9a4aba89473e95", "filename": "compiler/rustc_ast/src/util/unicode.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/compiler%2Frustc_ast%2Fsrc%2Futil%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/compiler%2Frustc_ast%2Fsrc%2Futil%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Funicode.rs?ref=5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "patch": "@@ -0,0 +1,35 @@\n+pub const TEXT_FLOW_CONTROL_CHARS: &[char] = &[\n+    '\\u{202A}', '\\u{202B}', '\\u{202D}', '\\u{202E}', '\\u{2066}', '\\u{2067}', '\\u{2068}', '\\u{202C}',\n+    '\\u{2069}',\n+];\n+\n+#[inline]\n+pub fn contains_text_flow_control_chars(s: &str) -> bool {\n+    // Char   - UTF-8\n+    // U+202A - E2 80 AA\n+    // U+202B - E2 80 AB\n+    // U+202C - E2 80 AC\n+    // U+202D - E2 80 AD\n+    // U+202E - E2 80 AE\n+    // U+2066 - E2 81 A6\n+    // U+2067 - E2 81 A7\n+    // U+2068 - E2 81 A8\n+    // U+2069 - E2 81 A9\n+    let mut bytes = s.as_bytes();\n+    loop {\n+        match core::slice::memchr::memchr(0xE2, &bytes) {\n+            Some(idx) => {\n+                // bytes are valid UTF-8 -> E2 must be followed by two bytes\n+                let ch = &bytes[idx..idx + 3];\n+                match ch {\n+                    [_, 0x80, 0xAA..=0xAE] | [_, 0x81, 0xA6..=0xA9] => break true,\n+                    _ => {}\n+                }\n+                bytes = &bytes[idx + 3..];\n+            }\n+            None => {\n+                break false;\n+            }\n+        }\n+    }\n+}"}, {"sha": "4c936dec6f2cd3a72af9c3ca199a98708768009b", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "patch": "@@ -16,9 +16,9 @@\n \n use self::TargetLint::*;\n \n-use crate::hidden_unicode_codepoints::UNICODE_TEXT_FLOW_CHARS;\n use crate::levels::{is_known_lint_tool, LintLevelsBuilder};\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n+use ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n@@ -602,7 +602,7 @@ pub trait LintContext: Sized {\n                     let spans: Vec<_> = content\n                         .char_indices()\n                         .filter_map(|(i, c)| {\n-                            UNICODE_TEXT_FLOW_CHARS.contains(&c).then(|| {\n+                            TEXT_FLOW_CONTROL_CHARS.contains(&c).then(|| {\n                                 let lo = span.lo() + BytePos(2 + i as u32);\n                                 (c, span.with_lo(lo).with_hi(lo + BytePos(c.len_utf8() as u32)))\n                             })"}, {"sha": "fde84be9a7c30f8d3589c7e8c5fbe30db5cce875", "filename": "compiler/rustc_lint/src/hidden_unicode_codepoints.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs?ref=5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "patch": "@@ -1,4 +1,5 @@\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n+use ast::util::unicode::{contains_text_flow_control_chars, TEXT_FLOW_CONTROL_CHARS};\n use rustc_ast as ast;\n use rustc_errors::{Applicability, SuggestionStyle};\n use rustc_span::{BytePos, Span, Symbol};\n@@ -37,11 +38,6 @@ declare_lint! {\n \n declare_lint_pass!(HiddenUnicodeCodepoints => [TEXT_DIRECTION_CODEPOINT_IN_LITERAL]);\n \n-crate const UNICODE_TEXT_FLOW_CHARS: &[char] = &[\n-    '\\u{202A}', '\\u{202B}', '\\u{202D}', '\\u{202E}', '\\u{2066}', '\\u{2067}', '\\u{2068}', '\\u{202C}',\n-    '\\u{2069}',\n-];\n-\n impl HiddenUnicodeCodepoints {\n     fn lint_text_direction_codepoint(\n         &self,\n@@ -57,7 +53,7 @@ impl HiddenUnicodeCodepoints {\n             .as_str()\n             .char_indices()\n             .filter_map(|(i, c)| {\n-                UNICODE_TEXT_FLOW_CHARS.contains(&c).then(|| {\n+                TEXT_FLOW_CONTROL_CHARS.contains(&c).then(|| {\n                     let lo = span.lo() + BytePos(i as u32 + padding);\n                     (c, span.with_lo(lo).with_hi(lo + BytePos(c.len_utf8() as u32)))\n                 })\n@@ -131,7 +127,7 @@ impl HiddenUnicodeCodepoints {\n impl EarlyLintPass for HiddenUnicodeCodepoints {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n         if let ast::AttrKind::DocComment(_, comment) = attr.kind {\n-            if comment.as_str().contains(UNICODE_TEXT_FLOW_CHARS) {\n+            if contains_text_flow_control_chars(&comment.as_str()) {\n                 self.lint_text_direction_codepoint(cx, comment, attr.span, 0, false, \"doc comment\");\n             }\n         }\n@@ -142,7 +138,7 @@ impl EarlyLintPass for HiddenUnicodeCodepoints {\n         let (text, span, padding) = match &expr.kind {\n             ast::ExprKind::Lit(ast::Lit { token, kind, span }) => {\n                 let text = token.symbol;\n-                if !text.as_str().contains(UNICODE_TEXT_FLOW_CHARS) {\n+                if !contains_text_flow_control_chars(&text.as_str()) {\n                     return;\n                 }\n                 let padding = match kind {"}, {"sha": "cf35c3cd53b2fb146abf8d69f28d1423dca85db6", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec7d1dad6dead949a49c76c8ca0425a6e46a223/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=5ec7d1dad6dead949a49c76c8ca0425a6e46a223", "patch": "@@ -1,6 +1,7 @@\n use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n use rustc_ast::tokenstream::{Spacing, TokenStream};\n+use rustc_ast::util::unicode::contains_text_flow_control_chars;\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_lexer::unescape::{self, Mode};\n use rustc_lexer::{Base, DocStyle, RawStrError};\n@@ -137,12 +138,8 @@ impl<'a> StringReader<'a> {\n         // Opening delimiter of the length 2 is not included into the comment text.\n         let content_start = start + BytePos(2);\n         let content = self.str_from(content_start);\n-        let span = self.mk_sp(start, self.pos);\n-        const UNICODE_TEXT_FLOW_CHARS: &[char] = &[\n-            '\\u{202A}', '\\u{202B}', '\\u{202D}', '\\u{202E}', '\\u{2066}', '\\u{2067}', '\\u{2068}',\n-            '\\u{202C}', '\\u{2069}',\n-        ];\n-        if content.contains(UNICODE_TEXT_FLOW_CHARS) {\n+        if contains_text_flow_control_chars(content) {\n+            let span = self.mk_sp(start, self.pos);\n             self.sess.buffer_lint_with_diagnostic(\n                 &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,\n                 span,"}]}