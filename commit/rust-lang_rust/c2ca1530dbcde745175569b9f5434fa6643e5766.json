{"sha": "c2ca1530dbcde745175569b9f5434fa6643e5766", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyY2ExNTMwZGJjZGU3NDUxNzU1NjliOWY1NDM0ZmE2NjQzZTU3NjY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-18T12:43:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:34Z"}, "message": "Fix rebase + address comments", "tree": {"sha": "e85834e234310f22763c0d6b3efde8ba5eff7a1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e85834e234310f22763c0d6b3efde8ba5eff7a1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2ca1530dbcde745175569b9f5434fa6643e5766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ca1530dbcde745175569b9f5434fa6643e5766", "html_url": "https://github.com/rust-lang/rust/commit/c2ca1530dbcde745175569b9f5434fa6643e5766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2ca1530dbcde745175569b9f5434fa6643e5766/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1", "html_url": "https://github.com/rust-lang/rust/commit/5f9ef3c8b28c9a25be74bc2e41399a4c684f07b1"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "0b1d9e8d8f69efd321523bef3c35df7b3b61e623", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=c2ca1530dbcde745175569b9f5434fa6643e5766", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n                 self.insert_def_id(def.struct_variant().field_named(name).did);\n             }\n-            _ => span_bug!(lhs.span, \"named field access on non-struct\"),\n+            _ => span_bug!(lhs.span, \"named field access on non-struct/union\"),\n         }\n     }\n "}, {"sha": "aea1ee8d82401d76ca83caaaad91fe30727b0aeb", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c2ca1530dbcde745175569b9f5434fa6643e5766", "patch": "@@ -565,7 +565,7 @@ pub fn check_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, e: &hir::Expr,\n                     def.struct_variant().field_named(field.node).did\n                 }\n                 _ => span_bug!(e.span,\n-                               \"stability::check_expr: named field access on non-struct\")\n+                               \"stability::check_expr: named field access on non-struct/union\")\n             }\n         }\n         hir::ExprTupField(ref base_e, ref field) => {\n@@ -601,7 +601,7 @@ pub fn check_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, e: &hir::Expr,\n                 _ => {\n                     span_bug!(e.span,\n                               \"stability::check_expr: struct construction \\\n-                               of non-struct, type {:?}\",\n+                               of non-struct/union, type {:?}\",\n                               type_);\n                 }\n             }"}, {"sha": "d45fde925c511deeec73f01867428368d39bee01", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c2ca1530dbcde745175569b9f5434fa6643e5766", "patch": "@@ -112,7 +112,7 @@ pub enum TypeVariants<'tcx> {\n     /// That is, even after substitution it is possible that there are type\n     /// variables. This happens when the `TyEnum` corresponds to an enum\n     /// definition and not a concrete use of it. This is true for `TyStruct`\n-    /// as well.\n+    /// and `TyUnion` as well.\n     TyEnum(AdtDef<'tcx>, &'tcx Substs<'tcx>),\n \n     /// A structure type, defined with `struct`."}, {"sha": "b55cad58e2fe407e4ad03b69b4a94e61b8d7fb62", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c2ca1530dbcde745175569b9f5434fa6643e5766", "patch": "@@ -475,8 +475,7 @@ impl LateLintPass for MissingCopyImplementations {\n                     return;\n                 }\n                 let def = cx.tcx.lookup_adt_def(cx.tcx.map.local_def_id(item.id));\n-                (def, cx.tcx.mk_union(def,\n-                                      cx.tcx.mk_substs(Substs::empty())))\n+                (def, cx.tcx.mk_union(def, Substs::empty(cx.tcx)))\n             }\n             hir::ItemEnum(_, ref ast_generics) => {\n                 if ast_generics.is_parameterized() {"}, {"sha": "e4ea9bb407d96e26332a74f3ef93d8324e3c89ae", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c2ca1530dbcde745175569b9f5434fa6643e5766", "patch": "@@ -166,7 +166,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     for (ty, _) in self.autoderef(span, rcvr_ty) {\n                         match ty.sty {\n                             ty::TyStruct(def, substs) | ty::TyUnion(def, substs) => {\n-                                if let Some(field) = def.struct_variant().find_field_named(item_name) {\n+                                if let Some(field) = def.struct_variant().\n+                                                         find_field_named(item_name) {\n                                     let snippet = tcx.sess.codemap().span_to_snippet(expr.span);\n                                     let expr_string = match snippet {\n                                         Ok(expr_string) => expr_string,\n@@ -179,8 +180,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                                     if self.is_fn_ty(&field_ty, span) {\n                                         err.span_note(span, &format!(\n-                                            \"use `({0}.{1})(...)` if you meant to call the function \\\n-                                             stored in the `{1}` field\",\n+                                            \"use `({0}.{1})(...)` if you meant to call the \\\n+                                             function stored in the `{1}` field\",\n                                             expr_string, item_name));\n                                     } else {\n                                         err.span_note(span, &format!("}, {"sha": "a100c919d6f4e88489359c76a8a11c38cf39a911", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c2ca1530dbcde745175569b9f5434fa6643e5766", "patch": "@@ -1587,6 +1587,11 @@ fn type_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                         let substs = mk_item_substs(&ccx.icx(generics), item.span, def_id);\n                         ccx.tcx.mk_struct(def, substs)\n                     }\n+                    ItemUnion(ref un, ref generics) => {\n+                        let def = convert_union_def(ccx, item, un);\n+                        let substs = mk_item_substs(&ccx.icx(generics), item.span, def_id);\n+                        ccx.tcx.mk_union(def, substs)\n+                    }\n                     ItemDefaultImpl(..) |\n                     ItemTrait(..) |\n                     ItemImpl(..) |"}, {"sha": "b7e371e23f3237eebe145ab55a1f1d22955cb635", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c2ca1530dbcde745175569b9f5434fa6643e5766", "patch": "@@ -227,7 +227,7 @@ fn build_union<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     clean::Union {\n         struct_type: doctree::Plain,\n-        generics: (&t.generics, &predicates, subst::TypeSpace).clean(cx),\n+        generics: (t.generics, &predicates).clean(cx),\n         fields: variant.fields.clean(cx),\n         fields_stripped: false,\n     }"}, {"sha": "b93dc17dbdd7de51bae9cb8094088a7d4ba58b66", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=c2ca1530dbcde745175569b9f5434fa6643e5766", "patch": "@@ -133,6 +133,7 @@ impl ItemType {\n     pub fn name_space(&self) -> NameSpace {\n         match *self {\n             ItemType::Struct |\n+            ItemType::Union |\n             ItemType::Enum |\n             ItemType::Module |\n             ItemType::Typedef |"}, {"sha": "6f66ce88df7a5e44e2406b275ecd7b3d0727163b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ca1530dbcde745175569b9f5434fa6643e5766/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c2ca1530dbcde745175569b9f5434fa6643e5766", "patch": "@@ -2565,10 +2565,8 @@ fn render_union(w: &mut fmt::Formatter, it: &clean::Item,\n            if structhead {\"union \"} else {\"\"},\n            it.name.as_ref().unwrap())?;\n     if let Some(g) = g {\n-        write!(w, \"{}\", g)?\n-    }\n-    if let Some(g) = g {\n-        write!(w, \"{}\", WhereClause(g))?\n+        write!(w, \"{}\", g)?;\n+        write!(w, \"{}\", WhereClause(g))?;\n     }\n \n     write!(w, \" {{\\n{}\", tab)?;"}]}