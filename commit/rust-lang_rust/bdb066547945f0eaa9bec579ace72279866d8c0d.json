{"sha": "bdb066547945f0eaa9bec579ace72279866d8c0d", "node_id": "C_kwDOAAsO6NoAKGJkYjA2NjU0Nzk0NWYwZWFhOWJlYzU3OWFjZTcyMjc5ODY2ZDhjMGQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-09T10:35:52Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-10T09:26:01Z"}, "message": "Avoid spurious visible_parent_map query invocation", "tree": {"sha": "418eaca9265b13d2e2fdb97f19a9a7c96104ccc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/418eaca9265b13d2e2fdb97f19a9a7c96104ccc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdb066547945f0eaa9bec579ace72279866d8c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb066547945f0eaa9bec579ace72279866d8c0d", "html_url": "https://github.com/rust-lang/rust/commit/bdb066547945f0eaa9bec579ace72279866d8c0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdb066547945f0eaa9bec579ace72279866d8c0d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbf39002e62777d044006710bac6b082c0c52ee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf39002e62777d044006710bac6b082c0c52ee7", "html_url": "https://github.com/rust-lang/rust/commit/bbf39002e62777d044006710bac6b082c0c52ee7"}], "stats": {"total": 68, "additions": 27, "deletions": 41}, "files": [{"sha": "b92a8ee0ec129ac555f6adb23d402c1d8a912542", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 27, "deletions": 41, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bdb066547945f0eaa9bec579ace72279866d8c0d/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb066547945f0eaa9bec579ace72279866d8c0d/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=bdb066547945f0eaa9bec579ace72279866d8c0d", "patch": "@@ -22,7 +22,7 @@ pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n use rustc_middle::ty::layout::HasParamEnv;\n-use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n@@ -640,47 +640,33 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         sym::assert_inhabited | sym::assert_zero_valid | sym::assert_mem_uninitialized_valid => {\n             intrinsic_args!(fx, args => (); intrinsic);\n \n-            let layout = fx.layout_of(substs.type_at(0));\n-            if layout.abi.is_uninhabited() {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty),\n-                        source_info,\n-                    )\n-                });\n-                return;\n-            }\n-\n-            if intrinsic == sym::assert_zero_valid\n-                && !fx.tcx.permits_zero_init(fx.param_env().and(layout))\n-            {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\n-                            \"attempted to zero-initialize type `{}`, which is invalid\",\n-                            layout.ty\n-                        ),\n-                        source_info,\n-                    );\n-                });\n-                return;\n-            }\n-\n-            if intrinsic == sym::assert_mem_uninitialized_valid\n-                && !fx.tcx.permits_uninit_init(fx.param_env().and(layout))\n-            {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\n-                            \"attempted to leave type `{}` uninitialized, which is invalid\",\n-                            layout.ty\n-                        ),\n-                        source_info,\n-                    )\n+            let ty = substs.type_at(0);\n+            let layout = fx.layout_of(ty);\n+            let do_panic = match intrinsic {\n+                sym::assert_inhabited => layout.abi.is_uninhabited(),\n+                sym::assert_zero_valid => !fx.tcx.permits_zero_init(fx.param_env().and(layout)),\n+                sym::assert_mem_uninitialized_valid => {\n+                    !fx.tcx.permits_uninit_init(fx.param_env().and(layout))\n+                }\n+                _ => unreachable!(),\n+            };\n+            if do_panic {\n+                let msg_str = with_no_visible_paths!({\n+                    with_no_trimmed_paths!({\n+                        if layout.abi.is_uninhabited() {\n+                            // Use this error even for the other intrinsics as it is more precise.\n+                            format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n+                        } else if intrinsic == sym::assert_zero_valid {\n+                            format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n+                        } else {\n+                            format!(\n+                                \"attempted to leave type `{}` uninitialized, which is invalid\",\n+                                ty\n+                            )\n+                        }\n+                    })\n                 });\n+                crate::base::codegen_panic_nounwind(fx, &msg_str, source_info);\n                 return;\n             }\n         }"}]}