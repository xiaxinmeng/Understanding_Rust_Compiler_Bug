{"sha": "625c4d70ffa53e36d2b724d191f759937a131bff", "node_id": "C_kwDOAAsO6NoAKDYyNWM0ZDcwZmZhNTNlMzZkMmI3MjRkMTkxZjc1OTkzN2ExMzFiZmY", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-26T16:55:40Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-08-03T13:17:26Z"}, "message": "Rustdoc-Json: Extract `convert_lifetime` to function", "tree": {"sha": "60f2b22734a78f535d81509cd8f10a38b60c6c52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60f2b22734a78f535d81509cd8f10a38b60c6c52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/625c4d70ffa53e36d2b724d191f759937a131bff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/625c4d70ffa53e36d2b724d191f759937a131bff", "html_url": "https://github.com/rust-lang/rust/commit/625c4d70ffa53e36d2b724d191f759937a131bff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/625c4d70ffa53e36d2b724d191f759937a131bff/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a856e57f6cc8ba8bb83c5abadce338f589df6b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/a856e57f6cc8ba8bb83c5abadce338f589df6b10", "html_url": "https://github.com/rust-lang/rust/commit/a856e57f6cc8ba8bb83c5abadce338f589df6b10"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "8d63c3409c2709bc877c48210a696c265d694d78", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/625c4d70ffa53e36d2b724d191f759937a131bff/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625c4d70ffa53e36d2b724d191f759937a131bff/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=625c4d70ffa53e36d2b724d191f759937a131bff", "patch": "@@ -145,7 +145,7 @@ impl FromWithTcx<clean::GenericArg> for GenericArg {\n     fn from_tcx(arg: clean::GenericArg, tcx: TyCtxt<'_>) -> Self {\n         use clean::GenericArg::*;\n         match arg {\n-            Lifetime(l) => GenericArg::Lifetime(l.0.to_string()),\n+            Lifetime(l) => GenericArg::Lifetime(convert_lifetime(l)),\n             Type(t) => GenericArg::Type(t.into_tcx(tcx)),\n             Const(box c) => GenericArg::Const(c.into_tcx(tcx)),\n             Infer => GenericArg::Infer,\n@@ -347,6 +347,10 @@ fn convert_abi(a: RustcAbi) -> Abi {\n     }\n }\n \n+fn convert_lifetime(l: clean::Lifetime) -> String {\n+    l.0.to_string()\n+}\n+\n impl FromWithTcx<clean::Generics> for Generics {\n     fn from_tcx(generics: clean::Generics, tcx: TyCtxt<'_>) -> Self {\n         Generics {\n@@ -374,7 +378,7 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n         use clean::GenericParamDefKind::*;\n         match kind {\n             Lifetime { outlives } => GenericParamDefKind::Lifetime {\n-                outlives: outlives.into_iter().map(|lt| lt.0.to_string()).collect(),\n+                outlives: outlives.into_iter().map(convert_lifetime).collect(),\n             },\n             Type { did: _, bounds, default, synthetic } => GenericParamDefKind::Type {\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n@@ -405,7 +409,7 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n                     .collect(),\n             },\n             RegionPredicate { lifetime, bounds } => WherePredicate::RegionPredicate {\n-                lifetime: lifetime.0.to_string(),\n+                lifetime: convert_lifetime(lifetime)\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             },\n             EqPredicate { lhs, rhs } => {\n@@ -428,7 +432,7 @@ impl FromWithTcx<clean::GenericBound> for GenericBound {\n                     modifier: from_trait_bound_modifier(modifier),\n                 }\n             }\n-            Outlives(lifetime) => GenericBound::Outlives(lifetime.0.to_string()),\n+            Outlives(lifetime) => GenericBound::Outlives(convert_lifetime(lifetime)),\n         }\n     }\n }\n@@ -459,7 +463,7 @@ impl FromWithTcx<clean::Type> for Type {\n                 param_names: Vec::new(),\n             },\n             clean::Type::DynTrait(bounds, lt) => Type::DynTrait(DynTrait {\n-                lifetime: lt.map(|lt| lt.0.to_string()),\n+                lifetime: lt.map(convert_lifetime),\n                 traits: bounds.into_iter().map(|t| t.into_tcx(tcx)).collect(),\n             }),\n             Generic(s) => Type::Generic(s.to_string()),\n@@ -475,7 +479,7 @@ impl FromWithTcx<clean::Type> for Type {\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },\n             BorrowedRef { lifetime, mutability, type_ } => Type::BorrowedRef {\n-                lifetime: lifetime.map(|l| l.0.to_string()),\n+                lifetime: lifetime.map(convert_lifetime),\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },"}]}