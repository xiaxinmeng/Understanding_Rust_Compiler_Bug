{"sha": "1b4f3fad1e6036b3d7cb17cc80ac1c204e1f11a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNGYzZmFkMWU2MDM2YjNkN2NiMTdjYzgwYWMxYzIwNGUxZjExYTI=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-01-08T08:24:06Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-13T22:37:59Z"}, "message": "Correct (I hope) amd64 ABI handling for empty structs", "tree": {"sha": "62f24afc844154caee2d9aa3d46f88d374227a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62f24afc844154caee2d9aa3d46f88d374227a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b4f3fad1e6036b3d7cb17cc80ac1c204e1f11a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4f3fad1e6036b3d7cb17cc80ac1c204e1f11a2", "html_url": "https://github.com/rust-lang/rust/commit/1b4f3fad1e6036b3d7cb17cc80ac1c204e1f11a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b4f3fad1e6036b3d7cb17cc80ac1c204e1f11a2/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd01ecfe1329d90584d35d775f2a645abba61811", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd01ecfe1329d90584d35d775f2a645abba61811", "html_url": "https://github.com/rust-lang/rust/commit/cd01ecfe1329d90584d35d775f2a645abba61811"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "06383cfa228f9a5133bb36169f3780c96a9b6736", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1b4f3fad1e6036b3d7cb17cc80ac1c204e1f11a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4f3fad1e6036b3d7cb17cc80ac1c204e1f11a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=1b4f3fad1e6036b3d7cb17cc80ac1c204e1f11a2", "patch": "@@ -94,6 +94,9 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     fn struct_tys(ty: TypeRef) -> ~[TypeRef] {\n         unsafe {\n             let n = llvm::LLVMCountStructElementTypes(ty);\n+        if (n == 0) {\n+            return ~[];\n+        }\n             let mut elts = vec::from_elem(n as uint, ptr::null());\n             llvm::LLVMGetStructElementTypes(ty,\n                 ptr::to_mut_unsafe_ptr(&mut elts[0]));\n@@ -111,7 +114,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                 Float => 4,\n                 Double => 8,\n                 Struct => {\n-                  do vec::foldl(0, struct_tys(ty)) |a, t| {\n+                  do vec::foldl(1, struct_tys(ty)) |a, t| {\n                       uint::max(a, ty_align(*t))\n                   }\n                 }\n@@ -184,15 +187,11 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     fn classify_struct(tys: &[TypeRef],\n                        cls: &[mut x86_64_reg_class], i: uint,\n                        off: uint) {\n-        if vec::is_empty(tys) {\n-            classify(T_i64(), cls, i, off);\n-        } else {\n-            let mut field_off = off;\n-            for vec::each(tys) |ty| {\n-                field_off = align(field_off, *ty);\n-                classify(*ty, cls, i, field_off);\n-                field_off += ty_size(*ty);\n-            }\n+        let mut field_off = off;\n+        for vec::each(tys) |ty| {\n+            field_off = align(field_off, *ty);\n+            classify(*ty, cls, i, field_off);\n+            field_off += ty_size(*ty);\n         }\n     }\n \n@@ -378,13 +377,14 @@ fn x86_64_tys(atys: &[TypeRef],\n     }\n \n     fn is_pass_byval(cls: &[x86_64_reg_class]) -> bool {\n-        return cls[0] == memory_class ||\n-            cls[0] == x87_class ||\n-            cls[0] == complex_x87_class;\n+        return cls.len() > 0 &&\n+            (cls[0] == memory_class ||\n+             cls[0] == x87_class ||\n+             cls[0] == complex_x87_class);\n     }\n \n     fn is_ret_bysret(cls: &[x86_64_reg_class]) -> bool {\n-        return cls[0] == memory_class;\n+        return cls.len() > 0 && cls[0] == memory_class;\n     }\n \n     fn x86_64_ty(ty: TypeRef,"}]}