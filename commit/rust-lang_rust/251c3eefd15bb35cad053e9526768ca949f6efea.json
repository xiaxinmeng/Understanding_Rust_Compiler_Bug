{"sha": "251c3eefd15bb35cad053e9526768ca949f6efea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MWMzZWVmZDE1YmIzNWNhZDA1M2U5NTI2NzY4Y2E5NDlmNmVmZWE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-14T21:03:30Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-15T19:35:41Z"}, "message": "Use `span_suggestion` in `STRING_LIT_AS_BYTES`", "tree": {"sha": "ebf5939e755b2233efb17e6c75c6761ce19f0529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebf5939e755b2233efb17e6c75c6761ce19f0529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/251c3eefd15bb35cad053e9526768ca949f6efea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/251c3eefd15bb35cad053e9526768ca949f6efea", "html_url": "https://github.com/rust-lang/rust/commit/251c3eefd15bb35cad053e9526768ca949f6efea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/251c3eefd15bb35cad053e9526768ca949f6efea/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d4e1bd73d080476a371b904d99827f2a056c6d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4e1bd73d080476a371b904d99827f2a056c6d2", "html_url": "https://github.com/rust-lang/rust/commit/6d4e1bd73d080476a371b904d99827f2a056c6d2"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "aa9cdcce50cbd1afdcb534e886812a76ee2a9b18", "filename": "src/strings.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/251c3eefd15bb35cad053e9526768ca949f6efea/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251c3eefd15bb35cad053e9526768ca949f6efea/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=251c3eefd15bb35cad053e9526768ca949f6efea", "patch": "@@ -8,7 +8,7 @@ use rustc_front::hir::*;\n use syntax::codemap::Spanned;\n use utils::STRING_PATH;\n use utils::SpanlessEq;\n-use utils::{match_type, span_lint, walk_ptrs_ty, get_parent_expr};\n+use utils::{match_type, span_lint, span_lint_and_then, walk_ptrs_ty, get_parent_expr};\n \n /// **What it does:** This lint matches code of the form `x = x + y` (without `let`!).\n ///\n@@ -141,11 +141,18 @@ impl LateLintPass for StringLitAsBytes {\n                 if let ExprLit(ref lit) = args[0].node {\n                     if let LitKind::Str(ref lit_content, _) = lit.node {\n                         if lit_content.chars().all(|c| c.is_ascii()) && !in_macro(cx, args[0].span) {\n-                            let msg = format!(\"calling `as_bytes()` on a string literal. \\\n-                                               Consider using a byte string literal instead: \\\n-                                               `b{}`\",\n-                                              snippet(cx, args[0].span, r#\"\"foo\"\"#));\n-                            span_lint(cx, STRING_LIT_AS_BYTES, e.span, &msg);\n+                            span_lint_and_then(cx,\n+                                               STRING_LIT_AS_BYTES,\n+                                               e.span,\n+                                               \"calling `as_bytes()` on a string literal\",\n+                                               |db| {\n+                                                   let sugg = format!(\"b{}\",\n+                                                                      snippet(cx, args[0].span, r#\"\"foo\"\"#));\n+                                                   db.span_suggestion(e.span,\n+                                                                      \"consider using a byte string literal instead\",\n+                                                                      sugg);\n+                                               });\n+\n                         }\n                     }\n                 }"}, {"sha": "656349ba621848c1845413c59d25f1898921c5df", "filename": "tests/compile-fail/strings.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/251c3eefd15bb35cad053e9526768ca949f6efea/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251c3eefd15bb35cad053e9526768ca949f6efea/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=251c3eefd15bb35cad053e9526768ca949f6efea", "patch": "@@ -47,9 +47,15 @@ fn both() {\n #[allow(dead_code, unused_variables)]\n #[deny(string_lit_as_bytes)]\n fn str_lit_as_bytes() {\n-    let bs = \"hello there\".as_bytes(); //~ERROR calling `as_bytes()`\n+    let bs = \"hello there\".as_bytes();\n+    //~^ERROR calling `as_bytes()`\n+    //~|HELP byte string literal\n+    //~|SUGGESTION b\"hello there\"\n+\n     // no warning, because this cannot be written as a byte string literal:\n     let ubs = \"\u2603\".as_bytes();\n+\n+    let strify = stringify!(foobar).as_bytes();\n }\n \n fn main() {"}]}