{"sha": "888157b52eace7a4dbf4138ad48926a78ed1d0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ODE1N2I1MmVhY2U3YTRkYmY0MTM4YWQ0ODkyNmE3OGVkMWQwZTE=", "commit": {"author": {"name": "ironyman", "email": "ironyman@users.noreply.github.com", "date": "2019-06-24T04:05:50Z"}, "committer": {"name": "ironyman", "email": "ironyman@users.noreply.github.com", "date": "2019-06-24T04:05:50Z"}, "message": "fill_match_arm works with trivial arm", "tree": {"sha": "37d0b48de4caae7167fad10020843b8eb1bccc51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d0b48de4caae7167fad10020843b8eb1bccc51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/888157b52eace7a4dbf4138ad48926a78ed1d0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/888157b52eace7a4dbf4138ad48926a78ed1d0e1", "html_url": "https://github.com/rust-lang/rust/commit/888157b52eace7a4dbf4138ad48926a78ed1d0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/888157b52eace7a4dbf4138ad48926a78ed1d0e1/comments", "author": {"login": "ironyman", "id": 502496, "node_id": "MDQ6VXNlcjUwMjQ5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/502496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ironyman", "html_url": "https://github.com/ironyman", "followers_url": "https://api.github.com/users/ironyman/followers", "following_url": "https://api.github.com/users/ironyman/following{/other_user}", "gists_url": "https://api.github.com/users/ironyman/gists{/gist_id}", "starred_url": "https://api.github.com/users/ironyman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ironyman/subscriptions", "organizations_url": "https://api.github.com/users/ironyman/orgs", "repos_url": "https://api.github.com/users/ironyman/repos", "events_url": "https://api.github.com/users/ironyman/events{/privacy}", "received_events_url": "https://api.github.com/users/ironyman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ironyman", "id": 502496, "node_id": "MDQ6VXNlcjUwMjQ5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/502496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ironyman", "html_url": "https://github.com/ironyman", "followers_url": "https://api.github.com/users/ironyman/followers", "following_url": "https://api.github.com/users/ironyman/following{/other_user}", "gists_url": "https://api.github.com/users/ironyman/gists{/gist_id}", "starred_url": "https://api.github.com/users/ironyman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ironyman/subscriptions", "organizations_url": "https://api.github.com/users/ironyman/orgs", "repos_url": "https://api.github.com/users/ironyman/repos", "events_url": "https://api.github.com/users/ironyman/events{/privacy}", "received_events_url": "https://api.github.com/users/ironyman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d79be32801036c39507fe96f87ed316e3934662", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d79be32801036c39507fe96f87ed316e3934662", "html_url": "https://github.com/rust-lang/rust/commit/7d79be32801036c39507fe96f87ed316e3934662"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "a0e0f110faf1bdf0587a2c1071e1b425003c635f", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/888157b52eace7a4dbf4138ad48926a78ed1d0e1/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888157b52eace7a4dbf4138ad48926a78ed1d0e1/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=888157b52eace7a4dbf4138ad48926a78ed1d0e1", "patch": "@@ -8,13 +8,39 @@ use ra_syntax::ast::{self, AstNode};\n \n use crate::{AssistCtx, Assist, AssistId};\n \n+fn is_trivial_arm(arm: &ast::MatchArm) -> bool {\n+    for (i, p) in arm.pats().enumerate() {\n+        if i > 0 {\n+            return false;\n+        }\n+\n+        match p.kind() {\n+            ast::PatKind::PlaceholderPat(_) => {}\n+            _ => {\n+                return false;\n+            }\n+        };\n+    }\n+    return true;\n+}\n+\n pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_expr = ctx.node_at_offset::<ast::MatchExpr>()?;\n \n     // We already have some match arms, so we don't provide any assists.\n+    // Unless if there is only one trivial match arm possibly created\n+    // by match postfix complete. Trivial match arm is the catch all arm.\n     match match_expr.match_arm_list() {\n-        Some(arm_list) if arm_list.arms().count() > 0 => {\n-            return None;\n+        Some(arm_list) => {\n+            for (i, a) in arm_list.arms().enumerate() {\n+                if i > 0 {\n+                    return None;\n+                }\n+\n+                if !is_trivial_arm(a) {\n+                    return None;\n+                }\n+            }\n         }\n         _ => {}\n     }\n@@ -228,4 +254,30 @@ mod tests {\n             \"match E::X {}\",\n         );\n     }\n+\n+    #[test]\n+    fn fill_match_arms_trivial_arm() {\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            enum E { X, Y }\n+\n+            fn main() {\n+                match E::X {\n+                    <|>_ => {},\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            enum E { X, Y }\n+\n+            fn main() {\n+                match <|>E::X {\n+                    E::X => (),\n+                    E::Y => (),\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n }"}]}