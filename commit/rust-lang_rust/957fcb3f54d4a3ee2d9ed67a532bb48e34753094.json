{"sha": "957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1N2ZjYjNmNTRkNGEzZWUyZDllZDY3YTUzMmJiNDhlMzQ3NTMwOTQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-12T19:41:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-13T20:54:01Z"}, "message": "Add some missing Show implementations in libstd", "tree": {"sha": "2fa9ee5589b0c98416e0765fcbc81e1aa4b0a8a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fa9ee5589b0c98416e0765fcbc81e1aa4b0a8a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "html_url": "https://github.com/rust-lang/rust/commit/957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5b938b3bb408c24f0f1d6fbd6bd0ba011f60a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5b938b3bb408c24f0f1d6fbd6bd0ba011f60a1", "html_url": "https://github.com/rust-lang/rust/commit/8a5b938b3bb408c24f0f1d6fbd6bd0ba011f60a1"}], "stats": {"total": 213, "additions": 193, "deletions": 20}, "files": [{"sha": "eb0b4597e30077778b936dd88ea450e235cff4ee", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "patch": "@@ -342,7 +342,9 @@ impl Clean<Item> for ast::Method {\n             _ => self.decl.inputs.slice_from(1)\n         };\n         let decl = FnDecl {\n-            inputs: inputs.iter().map(|x| x.clean()).collect(),\n+            inputs: Arguments {\n+                values: inputs.iter().map(|x| x.clean()).collect(),\n+            },\n             output: (self.decl.output.clean()),\n             cf: self.decl.cf.clean(),\n             attrs: ~[]\n@@ -378,7 +380,9 @@ impl Clean<Item> for ast::TypeMethod {\n             _ => self.decl.inputs.slice_from(1)\n         };\n         let decl = FnDecl {\n-            inputs: inputs.iter().map(|x| x.clean()).collect(),\n+            inputs: Arguments {\n+                values: inputs.iter().map(|x| x.clean()).collect(),\n+            },\n             output: (self.decl.output.clean()),\n             cf: self.decl.cf.clean(),\n             attrs: ~[]\n@@ -472,16 +476,23 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct FnDecl {\n-    inputs: ~[Argument],\n+    inputs: Arguments,\n     output: Type,\n     cf: RetStyle,\n     attrs: ~[Attribute]\n }\n \n+#[deriving(Clone, Encodable, Decodable)]\n+pub struct Arguments {\n+    values: ~[Argument],\n+}\n+\n impl Clean<FnDecl> for ast::FnDecl {\n     fn clean(&self) -> FnDecl {\n         FnDecl {\n-            inputs: self.inputs.iter().map(|x| x.clean()).collect(),\n+            inputs: Arguments {\n+                values: self.inputs.iter().map(|x| x.clean()).collect(),\n+            },\n             output: (self.output.clean()),\n             cf: self.cf.clean(),\n             attrs: ~[]"}, {"sha": "3e5afc399b962749a4128f80bd2ca751e71fd953", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "patch": "@@ -404,6 +404,19 @@ impl fmt::Show for clean::Type {\n     }\n }\n \n+impl fmt::Show for clean::Arguments {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        for (i, input) in self.values.iter().enumerate() {\n+            if i > 0 { if_ok!(write!(f.buf, \", \")); }\n+            if input.name.len() > 0 {\n+                if_ok!(write!(f.buf, \"{}: \", input.name));\n+            }\n+            if_ok!(write!(f.buf, \"{}\", input.type_));\n+        }\n+        Ok(())\n+    }\n+}\n+\n impl fmt::Show for clean::FnDecl {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f.buf, \"({args}){arrow, select, yes{ -&gt; {ret}} other{}}\",\n@@ -413,20 +426,6 @@ impl fmt::Show for clean::FnDecl {\n     }\n }\n \n-impl fmt::Show for ~[clean::Argument] {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let mut args = ~\"\";\n-        for (i, input) in self.iter().enumerate() {\n-            if i > 0 { args.push_str(\", \"); }\n-            if input.name.len() > 0 {\n-                args.push_str(format!(\"{}: \", input.name));\n-            }\n-            args.push_str(format!(\"{}\", input.type_));\n-        }\n-        f.buf.write(args.as_bytes())\n-    }\n-}\n-\n impl<'a> fmt::Show for Method<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let Method(selfty, d) = *self;\n@@ -448,7 +447,7 @@ impl<'a> fmt::Show for Method<'a> {\n                 args.push_str(\"&amp;self\");\n             }\n         }\n-        for (i, input) in d.inputs.iter().enumerate() {\n+        for (i, input) in d.inputs.values.iter().enumerate() {\n             if i > 0 || args.len() > 0 { args.push_str(\", \"); }\n             if input.name.len() > 0 {\n                 args.push_str(format!(\"{}: \", input.name));"}, {"sha": "3f14db14882ec54a271aef7733a16af2df4dd88b", "filename": "src/libstd/any.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "patch": "@@ -21,6 +21,7 @@\n //! extension traits (`*Ext`) for the full details.\n \n use cast::transmute;\n+use fmt;\n use option::{Option, Some, None};\n use result::{Result, Ok, Err};\n use to_str::ToStr;\n@@ -158,6 +159,18 @@ impl<'a> ToStr for &'a Any {\n     fn to_str(&self) -> ~str { ~\"&Any\" }\n }\n \n+impl fmt::Show for ~Any {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"~Any\")\n+    }\n+}\n+\n+impl<'a> fmt::Show for &'a Any {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"&Any\")\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::*;\n@@ -377,4 +390,17 @@ mod tests {\n         assert!(a.move::<~Test>().is_err());\n         assert!(b.move::<~uint>().is_err());\n     }\n+\n+    #[test]\n+    fn test_show() {\n+        let a = ~8u as ~Any;\n+        let b = ~Test as ~Any;\n+        assert_eq!(format!(\"{}\", a), ~\"~Any\");\n+        assert_eq!(format!(\"{}\", b), ~\"~Any\");\n+\n+        let a = &8u as &Any;\n+        let b = &Test as &Any;\n+        assert_eq!(format!(\"{}\", a), ~\"&Any\");\n+        assert_eq!(format!(\"{}\", b), ~\"&Any\");\n+    }\n }"}, {"sha": "651d364dd1b9702e191354cdb8e6d4eeb017ea2f", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "patch": "@@ -17,6 +17,7 @@ use str::StrSlice;\n use str::OwnedStr;\n use container::Container;\n use cast;\n+use fmt;\n use iter::Iterator;\n use vec::{ImmutableVector, MutableVector, Vector};\n use to_bytes::IterBytes;\n@@ -134,6 +135,12 @@ impl ToStr for Ascii {\n     }\n }\n \n+impl<'a> fmt::Show for Ascii {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        (self.chr as char).fmt(f)\n+    }\n+}\n+\n /// Trait for converting into an ascii type.\n pub trait AsciiCast<T> {\n     /// Convert to an ascii type, fail on non-ASCII input.\n@@ -698,5 +705,9 @@ mod tests {\n         assert_eq!(s, ~\"t\");\n     }\n \n-\n+    #[test]\n+    fn test_show() {\n+        let c = Ascii { chr: 't' as u8 };\n+        assert_eq!(format!(\"{}\", c), ~\"t\");\n+    }\n }"}, {"sha": "c49294a095f292d4cf05e556c7c72b9ff4eab5f3", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "patch": "@@ -56,6 +56,7 @@ use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use clone::Clone;\n use cmp::{Eq, Equiv};\n use default::Default;\n+#[cfg(not(stage0))] use fmt;\n use hash::Hash;\n use iter;\n use iter::{Iterator, FromIterator, Extendable};\n@@ -65,6 +66,7 @@ use num;\n use option::{None, Option, Some};\n use rand::Rng;\n use rand;\n+#[cfg(not(stage0))] use result::{Ok, Err};\n use vec::{ImmutableVector, MutableVector, OwnedVector, Items, MutItems};\n use vec_ng;\n use vec_ng::Vec;\n@@ -595,6 +597,23 @@ impl<K:Hash + Eq + Clone,V:Clone> Clone for HashMap<K,V> {\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl<A: fmt::Show + Hash + Eq, B: fmt::Show> fmt::Show for HashMap<A, B> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if_ok!(write!(f.buf, r\"\\{\"))\n+        let mut first = true;\n+        for (key, value) in self.iter() {\n+            if first {\n+                first = false;\n+            } else {\n+                if_ok!(write!(f.buf, \", \"));\n+            }\n+            if_ok!(write!(f.buf, \"{}: {}\", *key, *value));\n+        }\n+        write!(f.buf, r\"\\}\")\n+    }\n+}\n+\n /// HashMap iterator\n #[deriving(Clone)]\n pub struct Entries<'a, K, V> {\n@@ -857,6 +876,23 @@ impl<T:Hash + Eq + Clone> Clone for HashSet<T> {\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl<A: fmt::Show + Hash + Eq> fmt::Show for HashSet<A> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if_ok!(write!(f.buf, r\"\\{\"))\n+        let mut first = true;\n+        for x in self.iter() {\n+            if first {\n+                first = false;\n+            } else {\n+                if_ok!(write!(f.buf, \", \"));\n+            }\n+            if_ok!(write!(f.buf, \"{}\", *x));\n+        }\n+        write!(f.buf, r\"\\}\")\n+    }\n+}\n+\n impl<K: Eq + Hash> FromIterator<K> for HashSet<K> {\n     fn from_iterator<T: Iterator<K>>(iter: &mut T) -> HashSet<K> {\n         let (lower, _) = iter.size_hint();\n@@ -890,6 +926,7 @@ pub type SetAlgebraItems<'a, T> =\n mod test_map {\n     use prelude::*;\n     use super::*;\n+    use fmt;\n \n     #[test]\n     fn test_create_capacity_zero() {\n@@ -1121,6 +1158,30 @@ mod test_map {\n             assert_eq!(map.find(&k), Some(&v));\n         }\n     }\n+\n+    struct ShowableStruct {\n+        value: int,\n+    }\n+\n+    impl fmt::Show for ShowableStruct {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            write!(f.buf, r\"s{}\", self.value)\n+        }\n+    }\n+\n+    #[test]\n+    fn test_show() {\n+        let mut table: HashMap<int, ShowableStruct> = HashMap::new();\n+        let empty: HashMap<int, ShowableStruct> = HashMap::new();\n+\n+        table.insert(3, ShowableStruct { value: 4 });\n+        table.insert(1, ShowableStruct { value: 2 });\n+\n+        let table_str = format!(\"{}\", table);\n+\n+        assert!(table_str == ~\"{1: s2, 3: s4}\" || table_str == ~\"{3: s4, 1: s2}\");\n+        assert_eq!(format!(\"{}\", empty), ~\"{}\");\n+    }\n }\n \n #[cfg(test)]\n@@ -1346,4 +1407,18 @@ mod test_set {\n \n         assert_eq!(s1, s2);\n     }\n+\n+    #[test]\n+    fn test_show() {\n+        let mut set: HashSet<int> = HashSet::new();\n+        let empty: HashSet<int> = HashSet::new();\n+\n+        set.insert(1);\n+        set.insert(2);\n+\n+        let set_str = format!(\"{}\", set);\n+\n+        assert!(set_str == ~\"{1, 2}\" || set_str == ~\"{2, 1}\");\n+        assert_eq!(format!(\"{}\", empty), ~\"{}\");\n+    }\n }"}, {"sha": "4daa3f8a36ad2b8f289511c5c9ff1f847d6a7234", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "patch": "@@ -4164,13 +4164,15 @@ mod tests {\n         assert_eq!(s.len(), 5);\n         assert_eq!(s.as_slice(), \"abcde\");\n         assert_eq!(s.to_str(), ~\"abcde\");\n+        assert_eq!(format!(\"{}\", s), ~\"abcde\");\n         assert!(s.lt(&Owned(~\"bcdef\")));\n         assert_eq!(Slice(\"\"), Default::default());\n \n         let o = Owned(~\"abcde\");\n         assert_eq!(o.len(), 5);\n         assert_eq!(o.as_slice(), \"abcde\");\n         assert_eq!(o.to_str(), ~\"abcde\");\n+        assert_eq!(format!(\"{}\", o), ~\"abcde\");\n         assert!(o.lt(&Slice(\"bcdef\")));\n         assert_eq!(Owned(~\"\"), Default::default());\n "}, {"sha": "b23dafbca697062e602dc4b800e91cea13ecf920", "filename": "src/libstd/unit.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funit.rs?ref=957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "patch": "@@ -14,6 +14,7 @@\n use default::Default;\n #[cfg(not(test))]\n use cmp::{Eq, Equal, Ord, Ordering, TotalEq, TotalOrd};\n+use fmt;\n \n #[cfg(not(test))]\n impl Eq for () {\n@@ -46,3 +47,9 @@ impl Default for () {\n     #[inline]\n     fn default() -> () { () }\n }\n+\n+impl fmt::Show for () {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"()\")\n+    }\n+}"}, {"sha": "75993cdada24d9ae0bd665b2910bbd59556af075", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957fcb3f54d4a3ee2d9ed67a532bb48e34753094/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "patch": "@@ -108,13 +108,15 @@ use container::{Container, Mutable};\n use cmp::{Eq, TotalOrd, Ordering, Less, Equal, Greater};\n use cmp;\n use default::Default;\n+#[cfg(not(stage0))] use fmt;\n use iter::*;\n use num::{Integer, CheckedAdd, Saturating, checked_next_power_of_two};\n use option::{None, Option, Some};\n use ptr::to_unsafe_ptr;\n use ptr;\n use ptr::RawPtr;\n use rt::global_heap::{malloc_raw, realloc_raw, exchange_free};\n+#[cfg(not(stage0))] use result::{Ok, Err};\n use mem;\n use mem::size_of;\n use kinds::marker;\n@@ -2640,6 +2642,30 @@ impl<A: DeepClone> DeepClone for ~[A] {\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl<'a, T: fmt::Show> fmt::Show for &'a [T] {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if_ok!(write!(f.buf, \"[\"));\n+        let mut is_first = true;\n+        for x in self.iter() {\n+            if is_first {\n+                is_first = false;\n+            } else {\n+                if_ok!(write!(f.buf, \", \"));\n+            }\n+            if_ok!(write!(f.buf, \"{}\", *x))\n+        }\n+        write!(f.buf, \"]\")\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl<T: fmt::Show> fmt::Show for ~[T] {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.as_slice().fmt(f)\n+    }\n+}\n+\n // This works because every lifetime is a sub-lifetime of 'static\n impl<'a, A> Default for &'a [A] {\n     fn default() -> &'a [A] { &'a [] }\n@@ -4049,6 +4075,22 @@ mod tests {\n         assert_eq!(values, [1,4,3,2,5]);\n     }\n \n+    #[test]\n+    fn test_show() {\n+        macro_rules! test_show_vec(\n+            ($x:expr, $x_str:expr) => ({\n+                let (x, x_str) = ($x, $x_str);\n+                assert_eq!(format!(\"{}\", x), x_str);\n+                assert_eq!(format!(\"{}\", x.as_slice()), x_str);\n+            })\n+        )\n+        let empty: ~[int] = ~[];\n+        test_show_vec!(empty, ~\"[]\");\n+        test_show_vec!(~[1], ~\"[1]\");\n+        test_show_vec!(~[1, 2, 3], ~\"[1, 2, 3]\");\n+        test_show_vec!(~[~[], ~[1u], ~[1u, 1u]], ~\"[[], [1], [1, 1]]\");\n+    }\n+\n     #[test]\n     fn test_vec_default() {\n         use default::Default;"}]}