{"sha": "a5e56b62c5bef0b171785d5b20b3fd4e714db528", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZTU2YjYyYzViZWYwYjE3MTc4NWQ1YjIwYjNmZDRlNzE0ZGI1Mjg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-03-10T02:05:06Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-03T17:39:16Z"}, "message": "Permit constructing Builder without executing", "tree": {"sha": "73a517bb87dc21591478143d54bb6ff28b08d365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a517bb87dc21591478143d54bb6ff28b08d365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5e56b62c5bef0b171785d5b20b3fd4e714db528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e56b62c5bef0b171785d5b20b3fd4e714db528", "html_url": "https://github.com/rust-lang/rust/commit/a5e56b62c5bef0b171785d5b20b3fd4e714db528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5e56b62c5bef0b171785d5b20b3fd4e714db528/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84b5b340216dc1f086d5de2c7d234aa5883cdce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/84b5b340216dc1f086d5de2c7d234aa5883cdce8", "html_url": "https://github.com/rust-lang/rust/commit/84b5b340216dc1f086d5de2c7d234aa5883cdce8"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "6ae19ac394eec182393e2be1eacd5270ca27ab4e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a5e56b62c5bef0b171785d5b20b3fd4e714db528/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e56b62c5bef0b171785d5b20b3fd4e714db528/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=a5e56b62c5bef0b171785d5b20b3fd4e714db528", "patch": "@@ -42,6 +42,7 @@ pub struct Builder<'a> {\n     cache: Cache,\n     stack: RefCell<Vec<Box<Any>>>,\n     time_spent_on_dependencies: Cell<Duration>,\n+    pub paths: Vec<PathBuf>,\n }\n \n impl<'a> Deref for Builder<'a> {\n@@ -351,6 +352,7 @@ impl<'a> Builder<'a> {\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n             time_spent_on_dependencies: Cell::new(Duration::new(0, 0)),\n+            paths: vec![],\n         };\n \n         let builder = &builder;\n@@ -367,7 +369,7 @@ impl<'a> Builder<'a> {\n         Some(help)\n     }\n \n-    pub fn run(build: &Build) {\n+    pub fn new(build: &Build) -> Builder {\n         let (kind, paths) = match build.config.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n             Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n@@ -379,28 +381,27 @@ impl<'a> Builder<'a> {\n             Subcommand::Clean { .. } => panic!(),\n         };\n \n-        if let Some(path) = paths.get(0) {\n-            if path == Path::new(\"nonexistent/path/to/trigger/cargo/metadata\") {\n-                return;\n-            }\n-        }\n-\n         let builder = Builder {\n             build,\n             top_stage: build.config.stage.unwrap_or(2),\n             kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n             time_spent_on_dependencies: Cell::new(Duration::new(0, 0)),\n+            paths: paths.to_owned(),\n         };\n \n         if kind == Kind::Dist {\n-            assert!(!build.config.test_miri, \"Do not distribute with miri enabled.\\n\\\n+            assert!(!builder.config.test_miri, \"Do not distribute with miri enabled.\\n\\\n                 The distributed libraries would include all MIR (increasing binary size).\n                 The distributed MIR would include validation statements.\");\n         }\n \n-        StepDescription::run(&Builder::get_step_descriptions(builder.kind), &builder, paths);\n+        builder\n+    }\n+\n+    pub fn execute_cli(&self) {\n+        StepDescription::run(&Builder::get_step_descriptions(self.kind), self, &self.paths);\n     }\n \n     pub fn default_doc(&self, paths: Option<&[PathBuf]>) {"}, {"sha": "cbe19aeb63353b3f9c7de56665dd1fbbc91c6b80", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5e56b62c5bef0b171785d5b20b3fd4e714db528/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e56b62c5bef0b171785d5b20b3fd4e714db528/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a5e56b62c5bef0b171785d5b20b3fd4e714db528", "patch": "@@ -394,7 +394,13 @@ impl Build {\n         self.verbose(\"learning about cargo\");\n         metadata::build(self);\n \n-        builder::Builder::run(&self);\n+        let builder = builder::Builder::new(&self);\n+        if let Some(path) = builder.paths.get(0) {\n+            if path == Path::new(\"nonexistent/path/to/trigger/cargo/metadata\") {\n+                return;\n+            }\n+        }\n+        builder.execute_cli();\n \n         // Check for postponed failures from `test --no-fail-fast`.\n         let failures = self.delayed_failures.borrow();"}]}