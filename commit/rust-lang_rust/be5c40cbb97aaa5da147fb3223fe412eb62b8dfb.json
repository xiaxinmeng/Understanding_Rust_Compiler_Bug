{"sha": "be5c40cbb97aaa5da147fb3223fe412eb62b8dfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNWM0MGNiYjk3YWFhNWRhMTQ3ZmIzMjIzZmU0MTJlYjYyYjhkZmI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-24T10:45:22Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-05T09:00:36Z"}, "message": "Handle very long struct", "tree": {"sha": "e15c976d81546d8cab0284bec6bb1a4d497de3cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15c976d81546d8cab0284bec6bb1a4d497de3cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be5c40cbb97aaa5da147fb3223fe412eb62b8dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be5c40cbb97aaa5da147fb3223fe412eb62b8dfb", "html_url": "https://github.com/rust-lang/rust/commit/be5c40cbb97aaa5da147fb3223fe412eb62b8dfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be5c40cbb97aaa5da147fb3223fe412eb62b8dfb/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "332cc97986e37ec33ef8f21c75be9feb8470b70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/332cc97986e37ec33ef8f21c75be9feb8470b70d", "html_url": "https://github.com/rust-lang/rust/commit/332cc97986e37ec33ef8f21c75be9feb8470b70d"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "844ebf7f13bdc5d048f6486d8984e45d12ee9193", "filename": "src/items.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/be5c40cbb97aaa5da147fb3223fe412eb62b8dfb/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5c40cbb97aaa5da147fb3223fe412eb62b8dfb/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=be5c40cbb97aaa5da147fb3223fe412eb62b8dfb", "patch": "@@ -392,7 +392,8 @@ impl<'a> FmtVisitor<'a> {\n         generics: &ast::Generics,\n         span: Span,\n     ) {\n-        self.buffer.push_str(&format_header(\"enum \", ident, vis));\n+        let enum_header = format_header(\"enum \", ident, vis);\n+        self.buffer.push_str(&enum_header);\n \n         let enum_snippet = self.snippet(span);\n         let brace_pos = enum_snippet.find_uncommented(\"{\").unwrap();\n@@ -406,6 +407,7 @@ impl<'a> FmtVisitor<'a> {\n             enum_def.variants.is_empty(),\n             self.block_indent,\n             mk_sp(span.lo, body_start),\n+            last_line_width(&enum_header),\n         ).unwrap();\n         self.buffer.push_str(&generics_str);\n \n@@ -1071,19 +1073,38 @@ fn format_struct_struct(\n                 fields.is_empty(),\n                 offset,\n                 mk_sp(span.lo, body_lo),\n+                last_line_width(&result),\n             ))\n         }\n         None => {\n-            if context.config.item_brace_style() == BraceStyle::AlwaysNextLine &&\n-                !fields.is_empty()\n+            // 3 = ` {}`, 2 = ` {`.\n+            let overhead = if fields.is_empty() { 3 } else { 2 };\n+            if (context.config.item_brace_style() == BraceStyle::AlwaysNextLine &&\n+                    !fields.is_empty()) ||\n+                context\n+                    .config\n+                    .max_width()\n+                    .checked_sub(result.len())\n+                    .unwrap_or(0) < overhead\n             {\n                 format!(\"\\n{}{{\", offset.block_only().to_string(context.config))\n             } else {\n                 \" {\".to_owned()\n             }\n         }\n     };\n-    result.push_str(&generics_str);\n+    // 1 = `}`\n+    let overhead = if fields.is_empty() { 1 } else { 0 };\n+    let max_len = context.config.max_width() - offset.width();\n+    if !generics_str.contains('\\n') && result.len() + generics_str.len() + overhead > max_len {\n+        result.push('\\n');\n+        result.push_str(&offset\n+            .block_indent(context.config)\n+            .to_string(context.config));\n+        result.push_str(&generics_str.trim_left());\n+    } else {\n+        result.push_str(&generics_str);\n+    }\n \n     if fields.is_empty() {\n         let snippet = context.snippet(mk_sp(body_lo, span.hi - BytePos(1)));\n@@ -1147,16 +1168,13 @@ fn format_tuple_struct(\n \n     let where_clause_str = match generics {\n         Some(generics) => {\n-            let shape = Shape::indented(offset + last_line_width(&header_str), context.config);\n+            let budget = context.budget(last_line_width(&header_str));\n+            let shape = Shape::legacy(budget, offset);\n             let g_span = mk_sp(span.lo, body_lo);\n             let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n             result.push_str(&generics_str);\n \n-            let where_budget = context\n-                .config\n-                .max_width()\n-                .checked_sub(last_line_width(&result))\n-                .unwrap_or(0);\n+            let where_budget = context.budget(last_line_width(&result));\n             try_opt!(rewrite_where_clause(\n                 context,\n                 &generics.where_clause,\n@@ -1173,6 +1191,18 @@ fn format_tuple_struct(\n     };\n \n     if fields.is_empty() {\n+        // 3 = `();`\n+        let used_width = if result.contains('\\n') {\n+            last_line_width(&result) + 3\n+        } else {\n+            offset.width() + result.len() + 3\n+        };\n+        if used_width > context.config.max_width() {\n+            result.push('\\n');\n+            result.push_str(&offset\n+                .block_indent(context.config)\n+                .to_string(context.config))\n+        }\n         result.push('(');\n         let snippet = context.snippet(mk_sp(body_lo, context.codemap.span_before(span, \")\")));\n         if snippet.is_empty() {"}]}