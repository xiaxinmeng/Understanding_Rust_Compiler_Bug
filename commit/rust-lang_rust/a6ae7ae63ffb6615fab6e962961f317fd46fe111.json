{"sha": "a6ae7ae63ffb6615fab6e962961f317fd46fe111", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YWU3YWU2M2ZmYjY2MTVmYWI2ZTk2Mjk2MWYzMTdmZDQ2ZmUxMTE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-15T23:07:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-15T23:07:47Z"}, "message": "Rollup merge of #65293 - tmandry:turbo-expander, r=matthewjasper\n\nOptimize `try_expand_impl_trait_type`\n\nA lot of time was being spent expanding some large `impl Future` types in fuchsia. This PR takes the number of types being visited in one expansion from >3 billion to about a thousand, and eliminates the compile time regression in https://github.com/rust-lang/rust/issues/65147 (in fact, compile times are better than they were before).\n\nThanks to @Mark-Simulacrum for helping identify the issue and to @matthewjasper for suggesting this change.\n\nFixes #65147.\nr? @matthewjasper,@nikomatsakis", "tree": {"sha": "fa7044b1b573c4c56dea0a1d4fae8eb0742f1246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa7044b1b573c4c56dea0a1d4fae8eb0742f1246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6ae7ae63ffb6615fab6e962961f317fd46fe111", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdplFDCRBK7hj4Ov3rIwAAdHIIAE8IjTOYCGdZb7z2Fe3VYfx6\nQIhOfXJnyxm3BArYCAW0xJEgrKWqOSJ19czSPZJF6Y5xCMJWiSz7iVqA5GYzxz0I\nuDqAdKHiqcKlRaZQnJKgMYyNS2PvoW6timgVqh7f4GjYW0Gl1syBGPUYAbPKYjaw\n0B3QCUrZz6HrLJ2Jh3AhYSFFT1spS4BRoPZ8Ob+PGmFodidg1iBHRVRVFgNpI445\nM6/gfMSLMBM5iqVFoscrb6cEt5g4A9FIi0L5LIH/WsCriZ6e4AhTNkdKyUHgV2Wn\nJE8nA496kXLPduZhNRv1VYiaBH06FMBzaOpxhkKZh42eSv7cirrdpPqFwWUz3X4=\n=rbqo\n-----END PGP SIGNATURE-----\n", "payload": "tree fa7044b1b573c4c56dea0a1d4fae8eb0742f1246\nparent 8f09085bb067778b709faaded348c4627c8498ab\nparent 802554f4274f6514cd2f8f618cae567adf18128f\nauthor Tyler Mandry <tmandry@gmail.com> 1571180867 -0700\ncommitter GitHub <noreply@github.com> 1571180867 -0700\n\nRollup merge of #65293 - tmandry:turbo-expander, r=matthewjasper\n\nOptimize `try_expand_impl_trait_type`\n\nA lot of time was being spent expanding some large `impl Future` types in fuchsia. This PR takes the number of types being visited in one expansion from >3 billion to about a thousand, and eliminates the compile time regression in https://github.com/rust-lang/rust/issues/65147 (in fact, compile times are better than they were before).\n\nThanks to @Mark-Simulacrum for helping identify the issue and to @matthewjasper for suggesting this change.\n\nFixes #65147.\nr? @matthewjasper,@nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ae7ae63ffb6615fab6e962961f317fd46fe111", "html_url": "https://github.com/rust-lang/rust/commit/a6ae7ae63ffb6615fab6e962961f317fd46fe111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6ae7ae63ffb6615fab6e962961f317fd46fe111/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f09085bb067778b709faaded348c4627c8498ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f09085bb067778b709faaded348c4627c8498ab", "html_url": "https://github.com/rust-lang/rust/commit/8f09085bb067778b709faaded348c4627c8498ab"}, {"sha": "802554f4274f6514cd2f8f618cae567adf18128f", "url": "https://api.github.com/repos/rust-lang/rust/commits/802554f4274f6514cd2f8f618cae567adf18128f", "html_url": "https://github.com/rust-lang/rust/commit/802554f4274f6514cd2f8f618cae567adf18128f"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "5dbb7abc58255b1f08d9b2eccc258a07dba173af", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a6ae7ae63ffb6615fab6e962961f317fd46fe111/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ae7ae63ffb6615fab6e962961f317fd46fe111/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=a6ae7ae63ffb6615fab6e962961f317fd46fe111", "patch": "@@ -697,6 +697,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             // that type, and when we finish expanding that type we remove the\n             // its DefId.\n             seen_opaque_tys: FxHashSet<DefId>,\n+            // Cache of all expansions we've seen so far. This is a critical\n+            // optimization for some large types produced by async fn trees.\n+            expanded_cache: FxHashMap<(DefId, SubstsRef<'tcx>), Ty<'tcx>>,\n             primary_def_id: DefId,\n             found_recursion: bool,\n             tcx: TyCtxt<'tcx>,\n@@ -713,9 +716,16 @@ impl<'tcx> TyCtxt<'tcx> {\n                 }\n                 let substs = substs.fold_with(self);\n                 if self.seen_opaque_tys.insert(def_id) {\n-                    let generic_ty = self.tcx.type_of(def_id);\n-                    let concrete_ty = generic_ty.subst(self.tcx, substs);\n-                    let expanded_ty = self.fold_ty(concrete_ty);\n+                    let expanded_ty = match self.expanded_cache.get(&(def_id, substs)) {\n+                        Some(expanded_ty) => expanded_ty,\n+                        None => {\n+                            let generic_ty = self.tcx.type_of(def_id);\n+                            let concrete_ty = generic_ty.subst(self.tcx, substs);\n+                            let expanded_ty = self.fold_ty(concrete_ty);\n+                            self.expanded_cache.insert((def_id, substs), expanded_ty);\n+                            expanded_ty\n+                        }\n+                    };\n                     self.seen_opaque_tys.remove(&def_id);\n                     Some(expanded_ty)\n                 } else {\n@@ -735,14 +745,17 @@ impl<'tcx> TyCtxt<'tcx> {\n             fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n                 if let ty::Opaque(def_id, substs) = t.kind {\n                     self.expand_opaque_ty(def_id, substs).unwrap_or(t)\n-                } else {\n+                } else if t.has_projections() {\n                     t.super_fold_with(self)\n+                } else {\n+                    t\n                 }\n             }\n         }\n \n         let mut visitor = OpaqueTypeExpander {\n             seen_opaque_tys: FxHashSet::default(),\n+            expanded_cache: FxHashMap::default(),\n             primary_def_id: def_id,\n             found_recursion: false,\n             tcx: self,"}]}