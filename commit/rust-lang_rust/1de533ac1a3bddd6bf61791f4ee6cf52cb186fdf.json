{"sha": "1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZTUzM2FjMWEzYmRkZDZiZjYxNzkxZjRlZTZjZjUyY2IxODZmZGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-19T07:02:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-19T07:15:03Z"}, "message": "first determine if the variant is a niche-variant, then compute absolute variant", "tree": {"sha": "cd5a06afa851bb7ffd6186476b4b843d8ce9cc60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd5a06afa851bb7ffd6186476b4b843d8ce9cc60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf", "html_url": "https://github.com/rust-lang/rust/commit/1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21622cd6cc6c88cc6760e76ba1442aee1e2b9a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21622cd6cc6c88cc6760e76ba1442aee1e2b9a8", "html_url": "https://github.com/rust-lang/rust/commit/b21622cd6cc6c88cc6760e76ba1442aee1e2b9a8"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "dd214c4a031f7f9b2ff52f13e65e51669d0dc8b8", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf", "patch": "@@ -1,7 +1,7 @@\n //! Functions concerning immediate values and operands, and reading from operands.\n //! All high-level functions to read from memory work on operands as sources.\n \n-use std::convert::TryInto;\n+use std::convert::{TryInto, TryFrom};\n \n use rustc::{mir, ty};\n use rustc::ty::layout::{\n@@ -671,8 +671,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 ref niche_variants,\n                 niche_start,\n             } => {\n-                let variants_start = niche_variants.start().as_u32() as u128;\n-                let variants_end = niche_variants.end().as_u32() as u128;\n+                let variants_start = niche_variants.start().as_u32();\n+                let variants_end = niche_variants.end().as_u32();\n                 let raw_discr = raw_discr.not_undef().map_err(|_| {\n                     err_unsup!(InvalidDiscriminant(ScalarMaybeUndef::Undef))\n                 })?;\n@@ -687,7 +687,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         (dataful_variant.as_u32() as u128, dataful_variant)\n                     },\n                     Ok(raw_discr) => {\n-                        // We need to use machine arithmetic to get the relative variant idx.\n+                        // We need to use machine arithmetic to get the relative variant idx:\n+                        // variant_index_relative = discr_val - niche_start_val\n                         let discr_layout = self.layout_of(discr_layout.value.to_int_ty(*self.tcx))?;\n                         let discr_val = ImmTy::from_uint(raw_discr, discr_layout);\n                         let niche_start_val = ImmTy::from_uint(niche_start, discr_layout);\n@@ -699,21 +700,21 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         let variant_index_relative = variant_index_relative_val\n                             .to_scalar()?\n                             .assert_bits(discr_val.layout.size);\n-                        // Then computing the absolute variant idx should not overflow any more.\n-                        let variant_index = variants_start\n-                            .checked_add(variant_index_relative)\n-                            .expect(\"oveflow computing absolute variant idx\");\n                         // Check if this is in the range that indicates an actual discriminant.\n-                        if variants_start <= variant_index && variant_index <= variants_end {\n-                            let index = variant_index as usize;\n-                            assert_eq!(index as u128, variant_index);\n-                            assert!(index < rval.layout.ty\n+                        if variant_index_relative <= u128::from(variants_end - variants_start) {\n+                            let variant_index_relative = u32::try_from(variant_index_relative)\n+                                .expect(\"we checked that this fits into a u32\");\n+                            // Then computing the absolute variant idx should not overflow any more.\n+                            let variant_index = variants_start\n+                                .checked_add(variant_index_relative)\n+                                .expect(\"oveflow computing absolute variant idx\");\n+                            assert!((variant_index as usize) < rval.layout.ty\n                                 .ty_adt_def()\n                                 .expect(\"tagged layout for non adt\")\n                                 .variants.len());\n-                            (variant_index, VariantIdx::from_usize(index))\n+                            (u128::from(variant_index), VariantIdx::from_u32(variant_index))\n                         } else {\n-                            (dataful_variant.as_u32() as u128, dataful_variant)\n+                            (u128::from(dataful_variant.as_u32()), dataful_variant)\n                         }\n                     },\n                 }"}, {"sha": "c3660fb7a2e28ffe07758838cbd994fb904ece10", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=1de533ac1a3bddd6bf61791f4ee6cf52cb186fdf", "patch": "@@ -1064,7 +1064,8 @@ where\n                     let variant_index_relative = variant_index.as_u32()\n                         .checked_sub(variants_start)\n                         .expect(\"overflow computing relative variant idx\");\n-                    // We need to use machine arithmetic when taking into account `niche_start`.\n+                    // We need to use machine arithmetic when taking into account `niche_start`:\n+                    // discr_val = variant_index_relative + niche_start_val\n                     let discr_layout = self.layout_of(discr_layout.value.to_int_ty(*self.tcx))?;\n                     let niche_start_val = ImmTy::from_uint(niche_start, discr_layout);\n                     let variant_index_relative_val ="}]}