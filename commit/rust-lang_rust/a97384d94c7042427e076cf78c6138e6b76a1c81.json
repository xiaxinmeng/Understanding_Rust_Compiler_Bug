{"sha": "a97384d94c7042427e076cf78c6138e6b76a1c81", "node_id": "C_kwDOAAsO6NoAKGE5NzM4NGQ5NGM3MDQyNDI3ZTA3NmNmNzhjNjEzOGU2Yjc2YTFjODE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-16T16:23:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-16T16:23:13Z"}, "message": "Rollup merge of #92001 - fee1-dead:dmbic-xcrate-fix, r=oli-obk\n\nFix default_method_body_is_const when used across crates\n\nr? `@oli-obk`\n\nunblocks #91439.", "tree": {"sha": "6eaf225f9512edf318e843eb07b92a021c2ab811", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eaf225f9512edf318e843eb07b92a021c2ab811"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a97384d94c7042427e076cf78c6138e6b76a1c81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhu2fxCRBK7hj4Ov3rIwAAEx4IAE+yceW0FwdLmVEsAbpCqJ0i\nJGw5VSj0+C/db7fs6dC0aanq3wyUuyK+gmJ/xwW7VXeNbVcPlWJRLaADeThkStp+\nWf2HVEp/uMlJIZwnDDHVcdXd3HTcBtJ1nUE/aU3ek3CqdC5mUtBkh2ugQA8Wv75O\nyhVoAyFyUSgUoA7LK1iRLeQ7rwos9RxU4StkluIFtfAxbCsM4ICziSkDAnlZmY7a\n2C9cB6c8B7TabKr9nBqlS9FSz4vp5SGjTiLaTE7g6HrTG3eJ/cMpAMzYJV7oLWVk\nq5CU80ZqkE/ovnQmZtemHHVzn9C9F76mMKydtQq8XiriMa4K/bbP+lScwAR/2bk=\n=+BRu\n-----END PGP SIGNATURE-----\n", "payload": "tree 6eaf225f9512edf318e843eb07b92a021c2ab811\nparent 176fb183fa10e9a6962e7a2e10cffcd8cea088b7\nparent 4bb65e1c79a79fadce297a41d15003c82cabf61b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639671793 +0100\ncommitter GitHub <noreply@github.com> 1639671793 +0100\n\nRollup merge of #92001 - fee1-dead:dmbic-xcrate-fix, r=oli-obk\n\nFix default_method_body_is_const when used across crates\n\nr? `@oli-obk`\n\nunblocks #91439.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a97384d94c7042427e076cf78c6138e6b76a1c81", "html_url": "https://github.com/rust-lang/rust/commit/a97384d94c7042427e076cf78c6138e6b76a1c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a97384d94c7042427e076cf78c6138e6b76a1c81/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176fb183fa10e9a6962e7a2e10cffcd8cea088b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/176fb183fa10e9a6962e7a2e10cffcd8cea088b7", "html_url": "https://github.com/rust-lang/rust/commit/176fb183fa10e9a6962e7a2e10cffcd8cea088b7"}, {"sha": "4bb65e1c79a79fadce297a41d15003c82cabf61b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb65e1c79a79fadce297a41d15003c82cabf61b", "html_url": "https://github.com/rust-lang/rust/commit/4bb65e1c79a79fadce297a41d15003c82cabf61b"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "7500df896e9711a7e1f122cf183bf98c8a74aa8a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a97384d94c7042427e076cf78c6138e6b76a1c81/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97384d94c7042427e076cf78c6138e6b76a1c81/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a97384d94c7042427e076cf78c6138e6b76a1c81", "patch": "@@ -870,8 +870,9 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n             let needs_inline = (generics.requires_monomorphization(tcx)\n                 || tcx.codegen_fn_attrs(def_id).requests_inline())\n                 && tcx.sess.opts.output_types.should_codegen();\n-            // Only check the presence of the `const` modifier.\n-            let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id());\n+            // The function has a `const` modifier or is annotated with `default_method_body_is_const`.\n+            let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())\n+                || tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const);\n             let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;\n             (is_const_fn, needs_inline || always_encode_mir)\n         }"}, {"sha": "2d049277d7fcf44e1950d2e0fd9804e98f20f1c4", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/cross-crate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a97384d94c7042427e076cf78c6138e6b76a1c81/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97384d94c7042427e076cf78c6138e6b76a1c81/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs?ref=a97384d94c7042427e076cf78c6138e6b76a1c81", "patch": "@@ -1,6 +1,9 @@\n+#![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n \n pub trait MyTrait {\n+    #[default_method_body_is_const]\n+    fn defaulted_func(&self) {}\n     fn func(self);\n }\n "}, {"sha": "c0f90c116e459d09a77afcbe9ab24f0e90790982", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-default-method-body-is-const.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a97384d94c7042427e076cf78c6138e6b76a1c81/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-default-method-body-is-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97384d94c7042427e076cf78c6138e6b76a1c81/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-default-method-body-is-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-default-method-body-is-const.rs?ref=a97384d94c7042427e076cf78c6138e6b76a1c81", "patch": "@@ -0,0 +1,18 @@\n+// This tests that `default_method_body_is_const` methods can\n+// be called from a const context when used across crates.\n+//\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+\n+// aux-build: cross-crate.rs\n+extern crate cross_crate;\n+\n+use cross_crate::*;\n+\n+const _: () = {\n+    Const.func();\n+    Const.defaulted_func();\n+};\n+\n+fn main() {}"}]}