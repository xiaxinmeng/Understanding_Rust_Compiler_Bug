{"sha": "a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1N2YxYzljOTU1MTc3ZTJhNzU2M2RkNTlmOWUzYTcwNDU4ZTJiZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-04T16:34:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-04T16:34:27Z"}, "message": "Auto merge of #54666 - matthewjasper:mir-function-spans, r=pnkfelix\n\n[NLL] Improve \"borrow later used here\" messages\n\n* In the case of two conflicting borrows, the later used message says which borrow it's referring to\n* If the later use is a function call (from the users point of view) say that the later use is for the call. Point just to the function.\n\nr? @pnkfelix\nCloses #48643", "tree": {"sha": "f09383537c54a27ecb4e0899738373ffedb3725e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f09383537c54a27ecb4e0899738373ffedb3725e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "html_url": "https://github.com/rust-lang/rust/commit/a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5de52817c43fcb767ab3c7ecf051872cad6d0df2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5de52817c43fcb767ab3c7ecf051872cad6d0df2", "html_url": "https://github.com/rust-lang/rust/commit/5de52817c43fcb767ab3c7ecf051872cad6d0df2"}, {"sha": "bc4f9b848d745022ededdfaa3099158a766e8faa", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4f9b848d745022ededdfaa3099158a766e8faa", "html_url": "https://github.com/rust-lang/rust/commit/bc4f9b848d745022ededdfaa3099158a766e8faa"}], "stats": {"total": 1318, "additions": 665, "deletions": 653}, "files": [{"sha": "656f5795e18bd18a5a317308322b68533e3712d2", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -194,11 +194,13 @@ for mir::TerminatorKind<'gcx> {\n             mir::TerminatorKind::Call { ref func,\n                                         ref args,\n                                         ref destination,\n-                                        cleanup } => {\n+                                        cleanup,\n+                                        from_hir_call, } => {\n                 func.hash_stable(hcx, hasher);\n                 args.hash_stable(hcx, hasher);\n                 destination.hash_stable(hcx, hasher);\n                 cleanup.hash_stable(hcx, hasher);\n+                from_hir_call.hash_stable(hcx, hasher);\n             }\n             mir::TerminatorKind::Assert { ref cond,\n                                           expected,"}, {"sha": "aec6bb7c3c1ffc38e542a961886e61ad5df461e0", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1044,6 +1044,9 @@ pub enum TerminatorKind<'tcx> {\n         destination: Option<(Place<'tcx>, BasicBlock)>,\n         /// Cleanups to be done if the call unwinds.\n         cleanup: Option<BasicBlock>,\n+        /// Whether this is from a call in HIR, rather than from an overloaded\n+        /// operator. True for overloaded function call.\n+        from_hir_call: bool,\n     },\n \n     /// Jump to the target if the condition has the expected value,\n@@ -2805,6 +2808,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 ref args,\n                 ref destination,\n                 cleanup,\n+                from_hir_call,\n             } => {\n                 let dest = destination\n                     .as_ref()\n@@ -2815,6 +2819,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                     args: args.fold_with(folder),\n                     destination: dest,\n                     cleanup,\n+                    from_hir_call,\n                 }\n             }\n             Assert {"}, {"sha": "cbfbed90c905e358469b150afa003de075a88d89", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -468,7 +468,8 @@ macro_rules! make_mir_visitor {\n                     TerminatorKind::Call { ref $($mutability)* func,\n                                            ref $($mutability)* args,\n                                            ref $($mutability)* destination,\n-                                           cleanup } => {\n+                                           cleanup,\n+                                           from_hir_call: _, } => {\n                         self.visit_operand(func, source_location);\n                         for arg in args {\n                             self.visit_operand(arg, source_location);"}, {"sha": "db95b46c38ebeee537e0948fb2bcd5d39a1589a6", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -412,7 +412,13 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 bug!(\"undesugared DropAndReplace in codegen: {:?}\", terminator);\n             }\n \n-            mir::TerminatorKind::Call { ref func, ref args, ref destination, cleanup } => {\n+            mir::TerminatorKind::Call {\n+                ref func,\n+                ref args,\n+                ref destination,\n+                cleanup,\n+                from_hir_call: _\n+            } => {\n                 // Create the callee. This is a fn ptr or zero-sized and hence a kind of scalar.\n                 let callee = self.codegen_operand(&bx, func);\n "}, {"sha": "260e6ee5e2be81863ff2ab74696da9bf03359b9d", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 47, "deletions": 38, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -15,9 +15,9 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::region::ScopeTree;\n use rustc::mir::{\n-    self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, FakeReadCause, Field, Local,\n-    LocalDecl, LocalKind, Location, Operand, Place, PlaceProjection, ProjectionElem, Rvalue,\n-    Statement, StatementKind, TerminatorKind, VarBindingForm,\n+    self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, Field, Local,\n+    LocalDecl, LocalKind, Location, Operand, Place, PlaceProjection, ProjectionElem,\n+    Rvalue, Statement, StatementKind, TerminatorKind, VarBindingForm,\n };\n use rustc::ty;\n use rustc::util::ppaux::with_highlight_region_for_bound_region;\n@@ -262,7 +262,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         move_spans.var_span_label(&mut err, \"move occurs due to use in closure\");\n \n         self.explain_why_borrow_contains_point(context, borrow, None)\n-            .emit(self.infcx.tcx, &mut err);\n+            .emit(self.infcx.tcx, &mut err, String::new());\n         err.buffer(&mut self.errors_buffer);\n     }\n \n@@ -299,7 +299,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         });\n \n         self.explain_why_borrow_contains_point(context, borrow, None)\n-            .emit(self.infcx.tcx, &mut err);\n+            .emit(self.infcx.tcx, &mut err, String::new());\n         err.buffer(&mut self.errors_buffer);\n     }\n \n@@ -319,6 +319,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let desc_place = self.describe_place(place).unwrap_or(\"_\".to_owned());\n         let tcx = self.infcx.tcx;\n \n+        let first_borrow_desc;\n+\n         // FIXME: supply non-\"\" `opt_via` when appropriate\n         let mut err = match (\n             gen_borrow_kind,\n@@ -328,8 +330,23 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             \"immutable\",\n             \"mutable\",\n         ) {\n-            (BorrowKind::Shared, lft, _, BorrowKind::Mut { .. }, _, rgt)\n-            | (BorrowKind::Mut { .. }, _, lft, BorrowKind::Shared, rgt, _) => {\n+            (BorrowKind::Shared, lft, _, BorrowKind::Mut { .. }, _, rgt) => {\n+                first_borrow_desc = \"mutable \";\n+                tcx.cannot_reborrow_already_borrowed(\n+                    span,\n+                    &desc_place,\n+                    \"\",\n+                    lft,\n+                    issued_span,\n+                    \"it\",\n+                    rgt,\n+                    \"\",\n+                    None,\n+                    Origin::Mir,\n+                )\n+            }\n+            (BorrowKind::Mut { .. }, _, lft, BorrowKind::Shared, rgt, _) => {\n+                first_borrow_desc = \"immutable \";\n                 tcx.cannot_reborrow_already_borrowed(\n                     span,\n                     &desc_place,\n@@ -345,6 +362,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n \n             (BorrowKind::Mut { .. }, _, _, BorrowKind::Mut { .. }, _, _) => {\n+                first_borrow_desc = \"first \";\n                 tcx.cannot_mutably_borrow_multiply(\n                     span,\n                     &desc_place,\n@@ -357,6 +375,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n \n             (BorrowKind::Unique, _, _, BorrowKind::Unique, _, _) => {\n+                first_borrow_desc = \"first \";\n                 tcx.cannot_uniquely_borrow_by_two_closures(\n                     span,\n                     &desc_place,\n@@ -384,18 +403,22 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 return;\n             }\n \n-            (BorrowKind::Unique, _, _, _, _, _) => tcx.cannot_uniquely_borrow_by_one_closure(\n-                span,\n-                &desc_place,\n-                \"\",\n-                issued_span,\n-                \"it\",\n-                \"\",\n-                None,\n-                Origin::Mir,\n-            ),\n+            (BorrowKind::Unique, _, _, _, _, _) => {\n+                first_borrow_desc = \"first \";\n+                tcx.cannot_uniquely_borrow_by_one_closure(\n+                    span,\n+                    &desc_place,\n+                    \"\",\n+                    issued_span,\n+                    \"it\",\n+                    \"\",\n+                    None,\n+                    Origin::Mir,\n+                )\n+            },\n \n             (BorrowKind::Shared, lft, _, BorrowKind::Unique, _, _) => {\n+                first_borrow_desc = \"first \";\n                 tcx.cannot_reborrow_already_uniquely_borrowed(\n                     span,\n                     &desc_place,\n@@ -409,6 +432,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n \n             (BorrowKind::Mut { .. }, _, lft, BorrowKind::Unique, _, _) => {\n+                first_borrow_desc = \"first \";\n                 tcx.cannot_reborrow_already_uniquely_borrowed(\n                     span,\n                     &desc_place,\n@@ -459,7 +483,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n \n         self.explain_why_borrow_contains_point(context, issued_borrow, None)\n-            .emit(self.infcx.tcx, &mut err);\n+            .emit(self.infcx.tcx, &mut err, first_borrow_desc.to_string());\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -614,7 +638,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             if let BorrowExplanation::MustBeValidFor(..) = explanation {\n             } else {\n-                explanation.emit(self.infcx.tcx, &mut err);\n+                explanation.emit(self.infcx.tcx, &mut err, String::new());\n             }\n         } else {\n             err.span_label(borrow_span, \"borrowed value does not live long enough\");\n@@ -625,7 +649,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             borrow_spans.args_span_label(&mut err, \"value captured here\");\n \n-            explanation.emit(self.infcx.tcx, &mut err);\n+            explanation.emit(self.infcx.tcx, &mut err, String::new());\n         }\n \n         err\n@@ -685,7 +709,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             _ => {}\n         }\n \n-        explanation.emit(self.infcx.tcx, &mut err);\n+        explanation.emit(self.infcx.tcx, &mut err, String::new());\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -752,7 +776,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n             _ => {}\n         }\n-        explanation.emit(self.infcx.tcx, &mut err);\n+        explanation.emit(self.infcx.tcx, &mut err, String::new());\n \n         borrow_spans.args_span_label(&mut err, \"value captured here\");\n \n@@ -889,7 +913,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         loan_spans.var_span_label(&mut err, \"borrow occurs due to use in closure\");\n \n         self.explain_why_borrow_contains_point(context, loan, None)\n-            .emit(self.infcx.tcx, &mut err);\n+            .emit(self.infcx.tcx, &mut err, String::new());\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -1262,21 +1286,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Returns the `FakeReadCause` at this location if it is a `FakeRead` statement.\n-    pub(super) fn retrieve_fake_read_cause_for_location(\n-        &self,\n-        location: &Location,\n-    ) -> Option<FakeReadCause> {\n-        let stmt = self.mir.basic_blocks()[location.block]\n-            .statements\n-            .get(location.statement_index)?;\n-        if let StatementKind::FakeRead(cause, _) = stmt.kind {\n-            Some(cause)\n-        } else {\n-            None\n-        }\n-    }\n-\n     fn classify_drop_access_kind(&self, place: &Place<'tcx>) -> StorageDeadOrDrop<'tcx> {\n         let tcx = self.infcx.tcx;\n         match place {"}, {"sha": "103cb3b2a318271080f142c00f501b2a1b25e0a4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -667,6 +667,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 ref args,\n                 ref destination,\n                 cleanup: _,\n+                from_hir_call: _,\n             } => {\n                 self.consume_operand(ContextKind::CallOperator.new(loc), (func, span), flow_state);\n                 for arg in args {"}, {"sha": "6b5c9f0333e3e8e0578b07146cc40d3993110c1f", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 77, "deletions": 24, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -9,53 +9,69 @@\n // except according to those terms.\n \n use borrow_check::borrow_set::BorrowData;\n+use borrow_check::error_reporting::UseSpans;\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n use rustc::ty::{Region, TyCtxt};\n-use rustc::mir::{FakeReadCause, Location, Place, TerminatorKind};\n+use rustc::mir::{FakeReadCause, Location, Operand, Place, StatementKind, TerminatorKind};\n use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n \n mod find_use;\n \n pub(in borrow_check) enum BorrowExplanation<'tcx> {\n-    UsedLater(bool, Option<FakeReadCause>, Span),\n-    UsedLaterInLoop(bool, Span),\n+    UsedLater(LaterUseKind, Span),\n+    UsedLaterInLoop(LaterUseKind, Span),\n     UsedLaterWhenDropped(Span, Symbol, bool),\n     MustBeValidFor(Region<'tcx>),\n     Unexplained,\n }\n \n+#[derive(Clone, Copy)]\n+pub(in borrow_check) enum LaterUseKind {\n+    ClosureCapture,\n+    Call,\n+    FakeLetRead,\n+    Other,\n+}\n+\n impl<'tcx> BorrowExplanation<'tcx> {\n     pub(in borrow_check) fn emit<'cx, 'gcx>(\n         &self,\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-        err: &mut DiagnosticBuilder<'_>\n+        err: &mut DiagnosticBuilder<'_>,\n+        borrow_desc: String,\n     ) {\n         match *self {\n-            BorrowExplanation::UsedLater(is_in_closure, fake_read_cause, var_or_use_span) => {\n-                let message = if is_in_closure {\n-                    \"borrow later captured here by closure\"\n-                } else if let Some(FakeReadCause::ForLet) = fake_read_cause {\n-                    \"borrow later stored here\"\n-                } else {\n-                    \"borrow later used here\"\n+            BorrowExplanation::UsedLater(later_use_kind, var_or_use_span) => {\n+                let message = borrow_desc + match later_use_kind {\n+                    LaterUseKind::ClosureCapture => \"borrow later captured here by closure\",\n+                    LaterUseKind::Call =>  \"borrow later used by call\",\n+                    LaterUseKind::FakeLetRead => \"borrow later stored here\",\n+                    LaterUseKind::Other => \"borrow later used here\",\n                 };\n                 err.span_label(var_or_use_span, message);\n             },\n-            BorrowExplanation::UsedLaterInLoop(is_in_closure, var_or_use_span) => {\n-                let message = if is_in_closure {\n-                    \"borrow captured here by closure, in later iteration of loop\"\n-                } else {\n-                    \"borrow used here, in later iteration of loop\"\n+            BorrowExplanation::UsedLaterInLoop(later_use_kind, var_or_use_span) => {\n+                let message = borrow_desc + match later_use_kind {\n+                    LaterUseKind::ClosureCapture => {\n+                        \"borrow captured here by closure, in later iteration of loop\"\n+                    },\n+                    LaterUseKind::Call =>  \"borrow used by call, in later iteration of loop\",\n+                    LaterUseKind::FakeLetRead => \"borrow later stored here\",\n+                    LaterUseKind::Other => \"borrow used here, in later iteration of loop\",\n                 };\n                 err.span_label(var_or_use_span, message);\n             },\n             BorrowExplanation::UsedLaterWhenDropped(span, local_name, should_note_order) => {\n                 err.span_label(\n                     span,\n-                    format!(\"borrow later used here, when `{}` is dropped\", local_name),\n+                    format!(\n+                        \"{}borrow later used here, when `{}` is dropped\",\n+                        borrow_desc,\n+                        local_name,\n+                    ),\n                 );\n \n                 if should_note_order {\n@@ -68,7 +84,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n             BorrowExplanation::MustBeValidFor(region) => {\n                 tcx.note_and_explain_free_region(\n                     err,\n-                    \"borrowed value must be valid for \",\n+                    &(borrow_desc + \"borrowed value must be valid for \"),\n                     region,\n                     \"...\",\n                 );\n@@ -127,16 +143,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     .or_else(|| self.borrow_spans(span, location));\n \n                 if self.is_borrow_location_in_loop(context.loc) {\n-                    BorrowExplanation::UsedLaterInLoop(spans.for_closure(), spans.var_or_use())\n+                    let later_use = self.later_use_kind(spans, location);\n+                    BorrowExplanation::UsedLaterInLoop(later_use.0, later_use.1)\n                 } else {\n                     // Check if the location represents a `FakeRead`, and adapt the error\n                     // message to the `FakeReadCause` it is from: in particular,\n                     // the ones inserted in optimized `let var = <expr>` patterns.\n-                    BorrowExplanation::UsedLater(\n-                        spans.for_closure(),\n-                        self.retrieve_fake_read_cause_for_location(&location),\n-                        spans.var_or_use()\n-                    )\n+                    let later_use = self.later_use_kind(spans, location);\n+                    BorrowExplanation::UsedLater(later_use.0, later_use.1)\n                 }\n             }\n \n@@ -246,4 +260,43 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         false\n     }\n+\n+    fn later_use_kind(&self, use_spans: UseSpans, location: Location) -> (LaterUseKind, Span) {\n+        use self::LaterUseKind::*;\n+\n+        let block = &self.mir.basic_blocks()[location.block];\n+        match use_spans {\n+            UseSpans::ClosureUse { var_span, .. } => (LaterUseKind::ClosureCapture, var_span),\n+            UseSpans::OtherUse(span) => {\n+                (if let Some(stmt) = block.statements.get(location.statement_index) {\n+                    match stmt.kind {\n+                        StatementKind::FakeRead(FakeReadCause::ForLet, _) => FakeLetRead,\n+                        _ => Other,\n+                    }\n+                } else {\n+                    assert_eq!(location.statement_index, block.statements.len());\n+                    match block.terminator().kind {\n+                        TerminatorKind::Call { ref func, from_hir_call: true, .. } => {\n+                            // Just point to the function, to reduce the chance\n+                            // of overlapping spans.\n+                            let function_span = match func {\n+                                Operand::Constant(c) => c.span,\n+                                Operand::Copy(Place::Local(l)) | Operand::Move(Place::Local(l)) => {\n+                                    let local_decl = &self.mir.local_decls[*l];\n+                                    if local_decl.name.is_none() {\n+                                        local_decl.source_info.span\n+                                    } else {\n+                                        span\n+                                    }\n+                                },\n+                                _ => span,\n+                            };\n+                            return (Call, function_span);\n+                        },\n+                        _ => Other,\n+                    }\n+                }, span)\n+            }\n+        }\n+    }\n }"}, {"sha": "a9b5531bae519141a6f830bbfc5b78d7618fb190", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -203,6 +203,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                 ref args,\n                 ref destination,\n                 cleanup: _,\n+                from_hir_call: _,\n             } => {\n                 self.consume_operand(ContextKind::CallOperator.new(location), func);\n                 for arg in args {"}, {"sha": "f85e37a6ca57b6d27aea2b846693f1dd4f449dff", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 );\n                 exit_block.unit()\n             }\n-            ExprKind::Call { ty, fun, args } => {\n+            ExprKind::Call { ty, fun, args, from_hir_call } => {\n                 // FIXME(canndrew): This is_never should probably be an is_uninhabited\n                 let diverges = expr.ty.is_never();\n                 let intrinsic = match ty.sty {\n@@ -326,6 +326,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             } else {\n                                 Some((destination.clone(), success))\n                             },\n+                            from_hir_call,\n                         },\n                     );\n                     success.unit()"}, {"sha": "a8713286f18ecc721e8f31f7393acce2ccd77f85", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -361,6 +361,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         args: vec![val, expect],\n                         destination: Some((eq_result.clone(), eq_block)),\n                         cleanup: Some(cleanup),\n+                        from_hir_call: false,\n                     });\n \n                     // check the result"}, {"sha": "da4bd780eb4faa9b78eb2ad4ca5102eb9e943184", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -795,7 +795,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n                     self.propagate_bits_into_entry_set_for(in_out, *target, dirty_list);\n                 }\n             }\n-            mir::TerminatorKind::Call { cleanup, ref destination, func: _, args: _ } => {\n+            mir::TerminatorKind::Call { cleanup, ref destination, .. } => {\n                 if let Some(unwind) = cleanup {\n                     if !self.dead_unwinds.contains(bb) {\n                         self.propagate_bits_into_entry_set_for(in_out, unwind, dirty_list);"}, {"sha": "32b1187011672cbb5cbd8662c8bee9c21ea0bea4", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -380,7 +380,13 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                 self.gather_operand(value);\n                 self.gather_init(location, InitKind::Deep);\n             }\n-            TerminatorKind::Call { ref func, ref args, ref destination, cleanup: _ } => {\n+            TerminatorKind::Call {\n+                ref func,\n+                ref args,\n+                ref destination,\n+                cleanup: _,\n+                from_hir_call: _,\n+            } => {\n                 self.gather_operand(func);\n                 for arg in args {\n                     self.gather_operand(arg);"}, {"sha": "8d50fbbdc6b35dd3d23ebd1591d61193986a0344", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -21,6 +21,7 @@ use rustc::ty::cast::CastKind as TyCastKind;\n use rustc::hir;\n use rustc::hir::def_id::LocalDefId;\n use rustc::mir::{BorrowKind};\n+use syntax_pos::Span;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     type Output = Expr<'tcx>;\n@@ -232,16 +233,17 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n     let kind = match expr.node {\n         // Here comes the interesting stuff:\n-        hir::ExprKind::MethodCall(.., ref args) => {\n+        hir::ExprKind::MethodCall(_, method_span, ref args) => {\n             // Rewrite a.b(c) into UFCS form like Trait::b(a, c)\n-            let expr = method_callee(cx, expr, None);\n+            let expr = method_callee(cx, expr, method_span,None);\n             let args = args.iter()\n                 .map(|e| e.to_ref())\n                 .collect();\n             ExprKind::Call {\n                 ty: expr.ty,\n                 fun: expr.to_ref(),\n                 args,\n+                from_hir_call: true,\n             }\n         }\n \n@@ -254,7 +256,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n                 // rewrite f(u, v) into FnOnce::call_once(f, (u, v))\n \n-                let method = method_callee(cx, expr, None);\n+                let method = method_callee(cx, expr, fun.span,None);\n \n                 let arg_tys = args.iter().map(|e| cx.tables().expr_ty_adjusted(e));\n                 let tupled_args = Expr {\n@@ -268,6 +270,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     ty: method.ty,\n                     fun: method.to_ref(),\n                     args: vec![fun.to_ref(), tupled_args.to_ref()],\n+                    from_hir_call: true,\n                 }\n             } else {\n                 let adt_data = if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) =\n@@ -321,6 +324,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         ty: cx.tables().node_id_to_type(fun.hir_id),\n                         fun: fun.to_ref(),\n                         args: args.to_ref(),\n+                        from_hir_call: true,\n                     }\n                 }\n             }\n@@ -828,6 +832,7 @@ fn user_annotated_ty_for_adt(\n fn method_callee<'a, 'gcx, 'tcx>(\n     cx: &mut Cx<'a, 'gcx, 'tcx>,\n     expr: &hir::Expr,\n+    span: Span,\n     overloaded_callee: Option<(DefId, &'tcx Substs<'tcx>)>,\n ) -> Expr<'tcx> {\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n@@ -848,7 +853,7 @@ fn method_callee<'a, 'gcx, 'tcx>(\n     Expr {\n         temp_lifetime,\n         ty,\n-        span: expr.span,\n+        span,\n         kind: ExprKind::Literal {\n             literal: ty::Const::zero_sized(cx.tcx(), ty),\n             user_ty,\n@@ -1109,11 +1114,12 @@ fn overloaded_operator<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                        expr: &'tcx hir::Expr,\n                                        args: Vec<ExprRef<'tcx>>)\n                                        -> ExprKind<'tcx> {\n-    let fun = method_callee(cx, expr, None);\n+    let fun = method_callee(cx, expr, expr.span, None);\n     ExprKind::Call {\n         ty: fun.ty,\n         fun: fun.to_ref(),\n         args,\n+        from_hir_call: false,\n     }\n }\n \n@@ -1148,7 +1154,7 @@ fn overloaded_place<'a, 'gcx, 'tcx>(\n     // construct the complete expression `foo()` for the overloaded call,\n     // which will yield the &T type\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n-    let fun = method_callee(cx, expr, overloaded_callee);\n+    let fun = method_callee(cx, expr, expr.span, overloaded_callee);\n     let ref_expr = Expr {\n         temp_lifetime,\n         ty: ref_ty,\n@@ -1157,6 +1163,7 @@ fn overloaded_place<'a, 'gcx, 'tcx>(\n             ty: fun.ty,\n             fun: fun.to_ref(),\n             args,\n+            from_hir_call: false,\n         },\n     };\n "}, {"sha": "eb73a2021484b0f7a5ad60b20b38ff130b50dd05", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -150,6 +150,9 @@ pub enum ExprKind<'tcx> {\n         ty: Ty<'tcx>,\n         fun: ExprRef<'tcx>,\n         args: Vec<ExprRef<'tcx>>,\n+        // Whether this is from a call in HIR, rather than from an overloaded\n+        // operator. True for overloaded function call.\n+        from_hir_call: bool,\n     },\n     Deref {\n         arg: ExprRef<'tcx>,"}, {"sha": "6c3dd0ea3cc377ceb93a4eec2c9fb82f92a9d997", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -468,6 +468,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             args: vec![Operand::Move(ref_loc)],\n             destination: Some((dest, next)),\n             cleanup: Some(cleanup),\n+            from_hir_call: true,\n         }, false);\n     }\n \n@@ -766,7 +767,8 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             Some(BasicBlock::new(3))\n         } else {\n             None\n-        }\n+        },\n+        from_hir_call: true,\n     }, false);\n \n     if let Adjustment::RefMut = rcvr_adjustment {"}, {"sha": "bd7d9d367618be73f1bc77ce12513fae40d64087", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -121,6 +121,7 @@ impl Lower128Bit {\n                             args: vec![lhs, rhs],\n                             destination: Some((place, bb)),\n                             cleanup: None,\n+                            from_hir_call: false,\n                         },\n                     });\n             }"}, {"sha": "f4efe33da7080f07cd086649baa0f03c2f3432b1", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             };\n \n             match terminator.kind {\n-                TerminatorKind::Call { mut func, mut args, .. } => {\n+                TerminatorKind::Call { mut func, mut args, from_hir_call, .. } => {\n                     self.visit_operand(&mut func, loc);\n                     for arg in &mut args {\n                         self.visit_operand(arg, loc);\n@@ -272,7 +272,8 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             func,\n                             args,\n                             cleanup: None,\n-                            destination: Some((Place::Local(new_temp), new_target))\n+                            destination: Some((Place::Local(new_temp), new_target)),\n+                            from_hir_call,\n                         },\n                         ..terminator\n                     };"}, {"sha": "aa559c96ec6682b179c1c976f151aefb52e776ad", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -318,6 +318,7 @@ fn check_terminator(\n         TerminatorKind::Call {\n             func,\n             args,\n+            from_hir_call: _,\n             destination: _,\n             cleanup: _,\n         } => {"}, {"sha": "1dca367ffdf5f621b04a8f02f9d9a29ee790f1f3", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -545,8 +545,9 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                     args: vec![Operand::Move(Place::Local(ref_place))],\n                     destination: Some((unit_temp, succ)),\n                     cleanup: unwind.into_option(),\n+                    from_hir_call: true,\n                 },\n-                source_info: self.source_info\n+                source_info: self.source_info,\n             }),\n             is_cleanup: unwind.is_cleanup(),\n         };\n@@ -903,7 +904,8 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             func: Operand::function_handle(tcx, free_func, substs, self.source_info.span),\n             args: args,\n             destination: Some((unit_temp, target)),\n-            cleanup: None\n+            cleanup: None,\n+            from_hir_call: false,\n         }; // FIXME(#43234)\n         let free_block = self.new_block(unwind, call);\n "}, {"sha": "72fda9079d636282fe834afcb0c3287ecc693449", "filename": "src/test/ui/E0501.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2FE0501.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2FE0501.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.ast.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -10,7 +10,7 @@ LL |     outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable beca\n    |                       ^ borrow occurs here\n ...\n LL |     drop(bar);\n-   |          --- borrow later used here\n+   |          --- first borrow later used here\n \n error[E0501]: cannot borrow `*a` as immutable because previous closure requires unique access\n   --> $DIR/E0501.rs:31:23\n@@ -24,7 +24,7 @@ LL |     outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable be\n    |                       ^ borrow occurs here\n ...\n LL |     drop(bar);\n-   |          --- borrow later used here\n+   |          --- first borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "72fda9079d636282fe834afcb0c3287ecc693449", "filename": "src/test/ui/E0501.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2FE0501.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2FE0501.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.mir.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -10,7 +10,7 @@ LL |     outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable beca\n    |                       ^ borrow occurs here\n ...\n LL |     drop(bar);\n-   |          --- borrow later used here\n+   |          --- first borrow later used here\n \n error[E0501]: cannot borrow `*a` as immutable because previous closure requires unique access\n   --> $DIR/E0501.rs:31:23\n@@ -24,7 +24,7 @@ LL |     outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable be\n    |                       ^ borrow occurs here\n ...\n LL |     drop(bar);\n-   |          --- borrow later used here\n+   |          --- first borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "545a60f6770d9471d24ffd0230fc4c8c0de8c17a", "filename": "src/test/ui/binop/binop-move-semantics.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -44,7 +44,7 @@ LL | |     +\n LL | |     &f;  //~ ERROR: cannot borrow `f` as immutable because it is also borrowed as mutable\n    | |     ^-\n    | |_____||\n-   |       |borrow later used here\n+   |       |mutable borrow later used here\n    |       immutable borrow occurs here\n \n error[E0502]: cannot borrow `f` as mutable because it is also borrowed as immutable\n@@ -59,7 +59,7 @@ LL | |     +\n LL | |     &mut f;  //~ ERROR: cannot borrow `f` as mutable because it is also borrowed as immutable\n    | |     ^^^^^-\n    | |_____|____|\n-   |       |    borrow later used here\n+   |       |    immutable borrow later used here\n    |       mutable borrow occurs here\n \n error: aborting due to 6 previous errors"}, {"sha": "873581d91057dd8017fbf8937c76233edd7f4a6b", "filename": "src/test/ui/borrowck/borrow-tuple-fields.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -17,7 +17,7 @@ LL |     let a = &x.0;\n LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n    |             ^^^^^^^^ mutable borrow occurs here\n LL |     a.use_ref();\n-   |     - borrow later used here\n+   |     - immutable borrow later used here\n \n error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n   --> $DIR/borrow-tuple-fields.rs:33:13\n@@ -27,7 +27,7 @@ LL |     let a = &mut x.0;\n LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     a.use_ref();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/borrow-tuple-fields.rs:38:13\n@@ -47,7 +47,7 @@ LL |     let a = &x.0;\n LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n    |             ^^^^^^^^ mutable borrow occurs here\n LL |     a.use_ref();\n-   |     - borrow later used here\n+   |     - immutable borrow later used here\n \n error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n   --> $DIR/borrow-tuple-fields.rs:48:13\n@@ -57,7 +57,7 @@ LL |     let a = &mut x.0;\n LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     a.use_mut();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "4d61840d9e84a7feb9207bc6d212c3cc944315d6", "filename": "src/test/ui/borrowck/borrowck-anon-fields-struct.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,7 +8,7 @@ LL |         Y(ref mut b, _) => b //~ ERROR cannot borrow\n    |           ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *a += 1;\n-   |     ------- borrow later used here\n+   |     ------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "f36741e9a02270de4f6930fb81bfa415d2d074ad", "filename": "src/test/ui/borrowck/borrowck-anon-fields-tuple.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,7 +8,7 @@ LL |         (ref mut b, _) => b //~ ERROR cannot borrow\n    |          ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *a += 1;\n-   |     ------- borrow later used here\n+   |     ------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "17722bf226d82992f403f2493ca45280f0f52743", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,7 +8,7 @@ LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n    |              ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *a += 1;\n-   |     ------- borrow later used here\n+   |     ------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "2dda17b38bbf325fb21eadd23dc8f69855a510a7", "filename": "src/test/ui/borrowck/borrowck-assign-comp-idx.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,19 +8,19 @@ LL |     p[0] = 5; //~ ERROR cannot borrow\n    |     ^ mutable borrow occurs here\n LL | \n LL |     println!(\"{}\", *q);\n-   |                    -- borrow later used here\n+   |                    -- immutable borrow later used here\n \n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-assign-comp-idx.rs:37:9\n    |\n-LL | /     borrow(\n-LL | |         &p,\n-   | |         -- immutable borrow occurs here\n-LL | |         || p[0] = 5); //~ ERROR cannot borrow `p` as mutable\n-   | |_________^^_-_______- borrow later used here\n-   |           |  |\n-   |           |  second borrow occurs due to use of `p` in closure\n-   |           mutable borrow occurs here\n+LL |     borrow(\n+   |     ------ immutable borrow later used by call\n+LL |         &p,\n+   |         -- immutable borrow occurs here\n+LL |         || p[0] = 5); //~ ERROR cannot borrow `p` as mutable\n+   |         ^^ - second borrow occurs due to use of `p` in closure\n+   |         |\n+   |         mutable borrow occurs here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f4ae5eaba16f8c322047370710a04c2f099b0c88", "filename": "src/test/ui/borrowck/borrowck-autoref-3261.nll.stderr", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,21 +1,15 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-autoref-3261.rs:25:9\n    |\n-LL |       (&mut x).with(\n-   |       --------\n-   |       |\n-   |  _____first mutable borrow occurs here\n-   | |\n-LL | |         |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n-   | |         ^^^^^ second mutable borrow occurs here\n-LL | |             match opt {\n-LL | |                 &Either::Right(ref f) => {\n-LL | |                     x = X(Either::Left((0, 0)));\n-   | |                     - second borrow occurs due to use of `x` in closure\n-...  |\n-LL | |             }\n-LL | |         })\n-   | |__________- borrow later used here\n+LL |     (&mut x).with(\n+   |     -------- ---- first borrow later used by call\n+   |     |\n+   |     first mutable borrow occurs here\n+LL |         |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n+   |         ^^^^^ second mutable borrow occurs here\n+...\n+LL |                     x = X(Either::Left((0, 0)));\n+   |                     - second borrow occurs due to use of `x` in closure\n \n error: aborting due to previous error\n "}, {"sha": "77c637b7b4e97b844fdcdfb418b83b6bce3b5dc2", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-free.nll.stderr", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,24 +1,22 @@\n error[E0502]: cannot borrow `a` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-bad-nested-calls-free.rs:35:17\n    |\n-LL | /     add(\n-LL | |         &*a,\n-   | |         --- immutable borrow occurs here\n-LL | |         rewrite(&mut a)); //~ ERROR cannot borrow\n-   | |_________________^^^^^^_- borrow later used here\n-   |                   |\n-   |                   mutable borrow occurs here\n+LL |     add(\n+   |     --- immutable borrow later used by call\n+LL |         &*a,\n+   |         --- immutable borrow occurs here\n+LL |         rewrite(&mut a)); //~ ERROR cannot borrow\n+   |                 ^^^^^^ mutable borrow occurs here\n \n error[E0502]: cannot borrow `a` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-bad-nested-calls-free.rs:42:17\n    |\n-LL | /     add(\n-LL | |         &*a,\n-   | |         --- immutable borrow occurs here\n-LL | |         rewrite(&mut a)); //~ ERROR cannot borrow\n-   | |_________________^^^^^^_- borrow later used here\n-   |                   |\n-   |                   mutable borrow occurs here\n+LL |     add(\n+   |     --- immutable borrow later used by call\n+LL |         &*a,\n+   |         --- immutable borrow occurs here\n+LL |         rewrite(&mut a)); //~ ERROR cannot borrow\n+   |                 ^^^^^^ mutable borrow occurs here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d3ee9b2b2b2b54674fad99c5a9a984fd859ea740", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-move.nll.stderr", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,24 +1,22 @@\n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/borrowck-bad-nested-calls-move.rs:35:9\n    |\n-LL | /     add(\n-LL | |         &*a,\n-   | |         --- borrow of `*a` occurs here\n-LL | |         a); //~ ERROR cannot move\n-   | |_________^- borrow later used here\n-   |           |\n-   |           move out of `a` occurs here\n+LL |     add(\n+   |     --- borrow later used by call\n+LL |         &*a,\n+   |         --- borrow of `*a` occurs here\n+LL |         a); //~ ERROR cannot move\n+   |         ^ move out of `a` occurs here\n \n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/borrowck-bad-nested-calls-move.rs:42:9\n    |\n-LL | /     add(\n-LL | |         &*a,\n-   | |         --- borrow of `*a` occurs here\n-LL | |         a); //~ ERROR cannot move\n-   | |_________^- borrow later used here\n-   |           |\n-   |           move out of `a` occurs here\n+LL |     add(\n+   |     --- borrow later used by call\n+LL |         &*a,\n+   |         --- borrow of `*a` occurs here\n+LL |         a); //~ ERROR cannot move\n+   |         ^ move out of `a` occurs here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a368ef5b254af875ef3bec63c41e4aadda2da729", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let bar1 = &mut foo.bar1;\n LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- first borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:36:17\n@@ -16,7 +16,7 @@ LL |     let bar1 = &mut foo.bar1;\n LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n    |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- mutable borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:43:17\n@@ -26,7 +26,7 @@ LL |     let bar1 = &foo.bar1;\n LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- immutable borrow later used here\n \n error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:73:21\n@@ -38,7 +38,7 @@ LL |         Foo { bar1: ref mut _bar1, bar2: _ } => {}\n    |                     ^^^^^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- first borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:82:17\n@@ -49,7 +49,7 @@ LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- mutable borrow later used here\n \n error[E0502]: cannot borrow `*foo` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:83:17\n@@ -60,7 +60,7 @@ LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n    |                 ^^^^^ immutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- mutable borrow later used here\n \n error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:90:17\n@@ -70,7 +70,7 @@ LL |     let bar1 = &mut foo.bar1.int1;\n LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- first borrow later used here\n \n error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:97:17\n@@ -80,7 +80,7 @@ LL |     let bar1 = &mut foo.bar1.int1;\n LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- first borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:104:17\n@@ -90,7 +90,7 @@ LL |     let bar1 = &foo.bar1.int1;\n LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- immutable borrow later used here\n \n error[E0502]: cannot borrow `*foo` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:111:17\n@@ -100,7 +100,7 @@ LL |     let bar1 = &foo.bar1.int1;\n LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- immutable borrow later used here\n \n error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as mutable\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:132:16"}, {"sha": "d02cf6381d264199eaeaa900a0ceb1006218b80f", "filename": "src/test/ui/borrowck/borrowck-borrow-from-stack-variable.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let bar1 = &mut foo.bar1;\n LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- first borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:35:17\n@@ -16,7 +16,7 @@ LL |     let bar1 = &mut foo.bar1;\n LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n    |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- mutable borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:42:17\n@@ -26,7 +26,7 @@ LL |     let bar1 = &foo.bar1;\n LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- immutable borrow later used here\n \n error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:71:21\n@@ -38,7 +38,7 @@ LL |         Foo { bar1: ref mut _bar1, bar2: _ } => {} //\n    |                     ^^^^^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- first borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:80:17\n@@ -49,7 +49,7 @@ LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     let _foo2 = &foo; //~ ERROR cannot borrow\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- mutable borrow later used here\n \n error[E0502]: cannot borrow `foo` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:81:17\n@@ -60,7 +60,7 @@ LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n LL |     let _foo2 = &foo; //~ ERROR cannot borrow\n    |                 ^^^^ immutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- mutable borrow later used here\n \n error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:88:17\n@@ -70,7 +70,7 @@ LL |     let bar1 = &mut foo.bar1.int1;\n LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- first borrow later used here\n \n error[E0499]: cannot borrow `foo` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:95:17\n@@ -80,7 +80,7 @@ LL |     let bar1 = &mut foo.bar1.int1;\n LL |     let _foo2 = &mut foo; //~ ERROR cannot borrow\n    |                 ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- first borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:102:17\n@@ -90,7 +90,7 @@ LL |     let bar1 = &foo.bar1.int1;\n LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- immutable borrow later used here\n \n error[E0502]: cannot borrow `foo` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:109:17\n@@ -100,7 +100,7 @@ LL |     let bar1 = &foo.bar1.int1;\n LL |     let _foo2 = &mut foo; //~ ERROR cannot borrow\n    |                 ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-   |     ----- borrow later used here\n+   |     ----- immutable borrow later used here\n \n error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as mutable\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:130:16"}, {"sha": "fb04b3b93dc5d95fdae64e36e9230cc2cb468330", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -15,7 +15,7 @@ LL |     let t1 = &mut *t0;\n LL |     let p: &isize = &**t0; //~ ERROR cannot borrow\n    |                     ^^^^^ immutable borrow occurs here\n LL |     **t1 = 22;\n-   |     --------- borrow later used here\n+   |     --------- mutable borrow later used here\n \n error[E0596]: cannot borrow `**t0` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:29:26"}, {"sha": "65c4a392887da3b54c028a91cd12c72787c47cf7", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let y = x.f1();\n LL |     x.f2(); //~ ERROR cannot borrow `*x` as mutable\n    |     ^ second mutable borrow occurs here\n LL |     y.use_ref();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "814fb7bbedc7156ec0367bf58af6ee95049494ca", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.ast.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -11,7 +11,7 @@ LL |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n    |              immutable borrow occurs here\n LL |     //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n LL |     drop(c1);\n-   |          -- borrow later used here\n+   |          -- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-closures-mut-and-imm.rs:39:14\n@@ -26,7 +26,7 @@ LL |     let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`\n    |              immutable borrow occurs here\n LL |                          //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n LL |     drop(c1);\n-   |          -- borrow later used here\n+   |          -- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-closures-mut-and-imm.rs:47:14\n@@ -41,7 +41,7 @@ LL |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n    |              immutable borrow occurs here\n LL |                        //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n LL |     drop(c1);\n-   |          -- borrow later used here\n+   |          -- mutable borrow later used here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/borrowck-closures-mut-and-imm.rs:55:5\n@@ -108,7 +108,7 @@ LL |     let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable\n    |              mutable borrow occurs here\n LL |                           //[mir]~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable\n LL |     drop(c1);\n-   |          -- borrow later used here\n+   |          -- immutable borrow later used here\n \n error: aborting due to 8 previous errors\n "}, {"sha": "814fb7bbedc7156ec0367bf58af6ee95049494ca", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.mir.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -11,7 +11,7 @@ LL |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n    |              immutable borrow occurs here\n LL |     //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n LL |     drop(c1);\n-   |          -- borrow later used here\n+   |          -- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-closures-mut-and-imm.rs:39:14\n@@ -26,7 +26,7 @@ LL |     let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`\n    |              immutable borrow occurs here\n LL |                          //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n LL |     drop(c1);\n-   |          -- borrow later used here\n+   |          -- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-closures-mut-and-imm.rs:47:14\n@@ -41,7 +41,7 @@ LL |     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n    |              immutable borrow occurs here\n LL |                        //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n LL |     drop(c1);\n-   |          -- borrow later used here\n+   |          -- mutable borrow later used here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/borrowck-closures-mut-and-imm.rs:55:5\n@@ -108,7 +108,7 @@ LL |     let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable\n    |              mutable borrow occurs here\n LL |                           //[mir]~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable\n LL |     drop(c1);\n-   |          -- borrow later used here\n+   |          -- immutable borrow later used here\n \n error: aborting due to 8 previous errors\n "}, {"sha": "fea61420b19387855af7b701eae807fc32606631", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -10,7 +10,7 @@ LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable mo\n    |                        |\n    |                        second mutable borrow occurs here\n LL |     c1;\n-   |     -- borrow later used here\n+   |     -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut-fail.rs:37:24\n@@ -24,7 +24,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        |\n    |                        second mutable borrow occurs here\n LL |     c1;\n-   |     -- borrow later used here\n+   |     -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut-fail.rs:44:24\n@@ -38,7 +38,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        |\n    |                        second mutable borrow occurs here\n LL |     c1;\n-   |     -- borrow later used here\n+   |     -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut-fail.rs:51:24\n@@ -53,7 +53,7 @@ LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nes\n    |                        second mutable borrow occurs here\n LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n LL |     c1;\n-   |     -- borrow later used here\n+   |     -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut-fail.rs:63:24\n@@ -68,7 +68,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        second mutable borrow occurs here\n LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n LL |     c1;\n-   |     -- borrow later used here\n+   |     -- first borrow later used here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "bbfe37702364e276c164849aced70439df0c2778", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -86,7 +86,7 @@ LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable mo\n    |                        second mutable borrow occurs here\n LL |     //~| ERROR cannot borrow `x` as mutable more than once\n LL |     drop((c1, c2));\n-   |           -- borrow later used here\n+   |           -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n   --> $DIR/borrowck-closures-two-mut.rs:36:24\n@@ -101,7 +101,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        second mutable borrow occurs here\n LL |     //~| ERROR cannot borrow `x` as mutable more than once\n LL |     drop((c1, c2));\n-   |           -- borrow later used here\n+   |           -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n   --> $DIR/borrowck-closures-two-mut.rs:44:24\n@@ -116,7 +116,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        second mutable borrow occurs here\n LL |     //~| ERROR cannot borrow `x` as mutable more than once\n LL |     drop((c1, c2));\n-   |           -- borrow later used here\n+   |           -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n   --> $DIR/borrowck-closures-two-mut.rs:52:24\n@@ -131,7 +131,7 @@ LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nes\n    |                        second mutable borrow occurs here\n ...\n LL |     drop((c1, c2));\n-   |           -- borrow later used here\n+   |           -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n   --> $DIR/borrowck-closures-two-mut.rs:65:24\n@@ -146,7 +146,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        second mutable borrow occurs here\n ...\n LL |     drop((c1, c2));\n-   |           -- borrow later used here\n+   |           -- first borrow later used here\n \n error: aborting due to 10 previous errors\n "}, {"sha": "aca4f309257e7effc23086a08d73788c4a660e1c", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |         let p = &this.x;\n LL |         &mut this.x; //~ ERROR cannot borrow\n    |         ^^^^^^^^^^^ mutable borrow occurs here\n LL |         p.use_ref();\n-   |         - borrow later used here\n+   |         - immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "231ae53fe82bf97484dfbf112c1372e557d6b38a", "filename": "src/test/ui/borrowck/borrowck-closures-unique.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -10,7 +10,7 @@ LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n    |              |\n    |              closure construction occurs here\n LL |     c1;\n-   |     -- borrow later used here\n+   |     -- first borrow later used here\n \n error[E0500]: closure requires unique access to `x` but it is already borrowed\n   --> $DIR/borrowck-closures-unique.rs:42:14\n@@ -24,7 +24,7 @@ LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique acce\n    |              |\n    |              closure construction occurs here\n LL |     c1;\n-   |     -- borrow later used here\n+   |     -- first borrow later used here\n \n error[E0524]: two closures require unique access to `x` at the same time\n   --> $DIR/borrowck-closures-unique.rs:48:14\n@@ -38,7 +38,7 @@ LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x`\n    |              |\n    |              second closure is constructed here\n LL |     c1;\n-   |     -- borrow later used here\n+   |     -- first borrow later used here\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/borrowck-closures-unique.rs:57:38"}, {"sha": "90eb7fda0263cbad2be05a15ea187ffec03f3749", "filename": "src/test/ui/borrowck/borrowck-closures-use-after-free.nll.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,10 +7,9 @@ LL |     ptr = box Foo { x: ptr.x + 1 };\n    |     --- first borrow occurs due to use of `ptr` in closure\n LL |   };\n LL |   test(&*ptr); //~ ERROR cannot borrow `*ptr`\n-   |   -----^^^^^-\n-   |   |    |\n-   |   |    immutable borrow occurs here\n-   |   borrow later used here\n+   |   ---- ^^^^^ immutable borrow occurs here\n+   |   |\n+   |   mutable borrow later used by call\n \n error: aborting due to previous error\n "}, {"sha": "ac6cfac2a165f61a4822904969b3c39263d74227", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |             &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than\n    |             ^^^^^^ second mutable borrow occurs here\n LL |                     //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n LL |             *y = 1;\n-   |             ------ borrow later used here\n+   |             ------ first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-describe-lvalue.rs:307:20\n@@ -18,7 +18,7 @@ LL |                    &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable mo\n    |                    ^^^^^^ second mutable borrow occurs here\n LL |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n LL |                    *y = 1;\n-   |                    ------ borrow later used here\n+   |                    ------ first borrow later used here\n \n error: unsatisfied lifetime constraints\n   --> $DIR/borrowck-describe-lvalue.rs:305:16\n@@ -269,7 +269,7 @@ LL |             E::A(ref ax) =>\n    |                  ^^^^^^ immutable borrow occurs here\n ...\n LL |         drop(x);\n-   |              - borrow later used here\n+   |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `e.x` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:207:23\n@@ -281,7 +281,7 @@ LL |             E::B { x: ref bx } =>\n    |                       ^^^^^^ immutable borrow occurs here\n ...\n LL |         drop(x);\n-   |              - borrow later used here\n+   |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:221:22\n@@ -293,7 +293,7 @@ LL |             S  { y: (ref y0, _), .. } =>\n    |                      ^^^^^^ immutable borrow occurs here\n ...\n LL |         drop(x);\n-   |              - borrow later used here\n+   |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:228:28\n@@ -305,7 +305,7 @@ LL |             S  { x: F { y: ref x0, .. }, .. } =>\n    |                            ^^^^^^ immutable borrow occurs here\n ...\n LL |         drop(x);\n-   |              - borrow later used here\n+   |              - mutable borrow later used here\n \n error[E0503]: cannot use `*v` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:271:9\n@@ -339,7 +339,7 @@ LL |             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n    |                        ^^^^^^ immutable borrow occurs here\n ...\n LL |         drop(x);\n-   |              - borrow later used here\n+   |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:245:29\n@@ -350,7 +350,7 @@ LL |             let p: &'a u8 = &*block.current;\n    |                             ^^^^^^^^^^^^^^^ immutable borrow occurs here\n ...\n LL |             drop(x);\n-   |                  - borrow later used here\n+   |                  - mutable borrow later used here\n \n error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:260:33\n@@ -361,7 +361,7 @@ LL |             let p : *const u8 = &*(*block).current;\n    |                                 ^^^^^^^^^^^^^^^^^^ immutable borrow occurs here\n ...\n LL |             drop(x);\n-   |                  - borrow later used here\n+   |                  - mutable borrow later used here\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-describe-lvalue.rs:318:22"}, {"sha": "ac6cfac2a165f61a4822904969b3c39263d74227", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.mir.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |             &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than\n    |             ^^^^^^ second mutable borrow occurs here\n LL |                     //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n LL |             *y = 1;\n-   |             ------ borrow later used here\n+   |             ------ first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-describe-lvalue.rs:307:20\n@@ -18,7 +18,7 @@ LL |                    &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable mo\n    |                    ^^^^^^ second mutable borrow occurs here\n LL |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n LL |                    *y = 1;\n-   |                    ------ borrow later used here\n+   |                    ------ first borrow later used here\n \n error: unsatisfied lifetime constraints\n   --> $DIR/borrowck-describe-lvalue.rs:305:16\n@@ -269,7 +269,7 @@ LL |             E::A(ref ax) =>\n    |                  ^^^^^^ immutable borrow occurs here\n ...\n LL |         drop(x);\n-   |              - borrow later used here\n+   |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `e.x` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:207:23\n@@ -281,7 +281,7 @@ LL |             E::B { x: ref bx } =>\n    |                       ^^^^^^ immutable borrow occurs here\n ...\n LL |         drop(x);\n-   |              - borrow later used here\n+   |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:221:22\n@@ -293,7 +293,7 @@ LL |             S  { y: (ref y0, _), .. } =>\n    |                      ^^^^^^ immutable borrow occurs here\n ...\n LL |         drop(x);\n-   |              - borrow later used here\n+   |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:228:28\n@@ -305,7 +305,7 @@ LL |             S  { x: F { y: ref x0, .. }, .. } =>\n    |                            ^^^^^^ immutable borrow occurs here\n ...\n LL |         drop(x);\n-   |              - borrow later used here\n+   |              - mutable borrow later used here\n \n error[E0503]: cannot use `*v` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:271:9\n@@ -339,7 +339,7 @@ LL |             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n    |                        ^^^^^^ immutable borrow occurs here\n ...\n LL |         drop(x);\n-   |              - borrow later used here\n+   |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:245:29\n@@ -350,7 +350,7 @@ LL |             let p: &'a u8 = &*block.current;\n    |                             ^^^^^^^^^^^^^^^ immutable borrow occurs here\n ...\n LL |             drop(x);\n-   |                  - borrow later used here\n+   |                  - mutable borrow later used here\n \n error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:260:33\n@@ -361,7 +361,7 @@ LL |             let p : *const u8 = &*(*block).current;\n    |                                 ^^^^^^^^^^^^^^^^^^ immutable borrow occurs here\n ...\n LL |             drop(x);\n-   |                  - borrow later used here\n+   |                  - mutable borrow later used here\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-describe-lvalue.rs:318:22"}, {"sha": "6ac5fef1416afd277ba6fa8d036fd4e2907ce6a3", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -62,7 +62,7 @@ LL |     let p = &mut x.a;\n LL |     let q = &mut x.a; //~ ERROR cannot borrow `x.a` as mutable more than once at a time\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     drop(*p);\n-   |          -- borrow later used here\n+   |          -- first borrow later used here\n \n error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:66:10"}, {"sha": "a6487ede6f838ba64e5974fc8d1318df7af2f97b", "filename": "src/test/ui/borrowck/borrowck-for-loop-head-linkage.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -5,7 +5,7 @@ LL |     for &x in &vector {\n    |               -------\n    |               |\n    |               immutable borrow occurs here\n-   |               borrow used here, in later iteration of loop\n+   |               immutable borrow used here, in later iteration of loop\n LL |         let cap = vector.capacity();\n LL |         vector.extend(repeat(0));      //~ ERROR cannot borrow\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n@@ -17,7 +17,7 @@ LL |     for &x in &vector {\n    |               -------\n    |               |\n    |               immutable borrow occurs here\n-   |               borrow used here, in later iteration of loop\n+   |               immutable borrow used here, in later iteration of loop\n ...\n LL |         vector[1] = 5;   //~ ERROR cannot borrow\n    |         ^^^^^^ mutable borrow occurs here"}, {"sha": "123d475f1c09f7f6fdb6e67635416b42255f4080", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.nll.stderr", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,34 +1,28 @@\n error[E0501]: cannot borrow `*f` as mutable because previous closure requires unique access\n   --> $DIR/borrowck-insert-during-each.rs:26:3\n    |\n-LL |      f.foo(\n-   |   ___^\n-   |  |___|\n-   | ||\n-LL | ||         |a| { //~ ERROR closure requires unique access to `f`\n-   | ||         --- closure construction occurs here\n-LL | ||             f.n.insert(*a);\n-   | ||             - first borrow occurs due to use of `f` in closure\n-LL | ||         })\n-   | ||          ^\n-   | ||__________|\n-   | |___________borrow occurs here\n-   |             borrow later used here\n-\n-error[E0500]: closure requires unique access to `f` but it is already borrowed\n-  --> $DIR/borrowck-insert-during-each.rs:27:9\n-   |\n LL |     f.foo(\n-   |     -\n-   |     |\n-   |  ___borrow occurs here\n+   |     ^ --- first borrow later used by call\n+   |  ___|\n    | |\n LL | |         |a| { //~ ERROR closure requires unique access to `f`\n-   | |         ^^^ closure construction occurs here\n+   | |         --- closure construction occurs here\n LL | |             f.n.insert(*a);\n-   | |             - second borrow occurs due to use of `f` in closure\n+   | |             - first borrow occurs due to use of `f` in closure\n LL | |         })\n-   | |__________- borrow later used here\n+   | |__________^ borrow occurs here\n+\n+error[E0500]: closure requires unique access to `f` but it is already borrowed\n+  --> $DIR/borrowck-insert-during-each.rs:27:9\n+   |\n+LL |   f.foo(\n+   |   - --- first borrow later used by call\n+   |   |\n+   |   borrow occurs here\n+LL |         |a| { //~ ERROR closure requires unique access to `f`\n+   |         ^^^ closure construction occurs here\n+LL |             f.n.insert(*a);\n+   |             - second borrow occurs due to use of `f` in closure\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f1c33a596cbbab1802e286d7c8a07e1ff3e2ecdd", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     }\n LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n    |                ^^^^^^^ mutable borrow occurs here\n LL |     _w.use_ref();\n-   |     -- borrow later used here\n+   |     -- immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "388fc9c5fa8acd976911a2ebb7180eb76cd7dd23", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,13 +8,13 @@ LL |         borrow(&*v); //~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n LL |     }\n LL |     *x = box 5;\n-   |     -- borrow used here, in later iteration of loop\n+   |     -- mutable borrow used here, in later iteration of loop\n \n error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-lend-flow-loop.rs:109:16\n    |\n LL |         **x += 1;\n-   |         -------- borrow used here, in later iteration of loop\n+   |         -------- mutable borrow used here, in later iteration of loop\n LL |         borrow(&*v); //~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n LL |         if cond2 {"}, {"sha": "e97ba68cd5cf6fb95e3f5302d2c92478f0f7860e", "filename": "src/test/ui/borrowck/borrowck-lend-flow.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let _w = &v;\n LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n    |                ^^^^^^^ mutable borrow occurs here\n LL |     _w.use_ref();\n-   |     -- borrow later used here\n+   |     -- immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "b181fcf8b540330577363f0e8767aa5f493f8184", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-mut-uniq.nll.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,18 +1,14 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-loan-blocks-mut-uniq.rs:20:12\n    |\n-LL |       borrow(&*v,\n-   |       -      --- immutable borrow occurs here\n-   |  _____|\n-   | |\n-LL | |            |w| { //~ ERROR cannot borrow `v` as mutable\n-   | |            ^^^ mutable borrow occurs here\n-LL | |             v = box 4;\n-   | |             - second borrow occurs due to use of `v` in closure\n-LL | |             assert_eq!(*v, 3);\n-LL | |             assert_eq!(*w, 4);\n-LL | |         })\n-   | |__________- borrow later used here\n+LL |     borrow(&*v,\n+   |     ------ --- immutable borrow occurs here\n+   |     |\n+   |     immutable borrow later used by call\n+LL |            |w| { //~ ERROR cannot borrow `v` as mutable\n+   |            ^^^ mutable borrow occurs here\n+LL |             v = box 4;\n+   |             - second borrow occurs due to use of `v` in closure\n \n error: aborting due to previous error\n "}, {"sha": "6f08c13caa4082d812044788ebd56708516bcbf6", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr-overloaded-op.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -20,7 +20,7 @@ LL |     p.times(3); //~ ERROR cannot borrow `p`\n    |     ^ immutable borrow occurs here\n LL | \n LL |     *q + 3; // OK to use the new alias `q`\n-   |     -- borrow later used here\n+   |     -- mutable borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "18c2d67f6b01e23e099f8957713649984f4d8749", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.nll.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,15 +1,13 @@\n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-loan-rcvr.rs:34:14\n    |\n-LL |       p.blockm(|| { //~ ERROR cannot borrow `p` as mutable\n-   |       -        ^^ mutable borrow occurs here\n-   |       |\n-   |  _____immutable borrow occurs here\n-   | |\n-LL | |         p.x = 10;\n-   | |         - second borrow occurs due to use of `p` in closure\n-LL | |     })\n-   | |______- borrow later used here\n+LL |     p.blockm(|| { //~ ERROR cannot borrow `p` as mutable\n+   |     - ------ ^^ mutable borrow occurs here\n+   |     | |\n+   |     | immutable borrow later used by call\n+   |     immutable borrow occurs here\n+LL |         p.x = 10;\n+   |         - second borrow occurs due to use of `p` in closure\n \n error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-loan-rcvr.rs:45:5\n@@ -20,7 +18,7 @@ LL |     p.impurem(); //~ ERROR cannot borrow\n    |     ^ immutable borrow occurs here\n LL | \n LL |     l.x += 1;\n-   |     -------- borrow later used here\n+   |     -------- mutable borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2b22a125d3f43a55ca4c47ba4bacf1f37962a954", "filename": "src/test/ui/borrowck/borrowck-loan-vec-content.nll.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,15 +1,14 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-loan-vec-content.rs:28:9\n    |\n-LL | /     takes_imm_elt(\n-LL | |         &v[0],\n-   | |          - immutable borrow occurs here\n-LL | |         || { //~ ERROR cannot borrow `v` as mutable\n-   | |         ^^ mutable borrow occurs here\n-LL | |             v[1] = 4;\n-   | |             - second borrow occurs due to use of `v` in closure\n-LL | |         })\n-   | |__________- borrow later used here\n+LL |     takes_imm_elt(\n+   |     ------------- immutable borrow later used by call\n+LL |         &v[0],\n+   |          - immutable borrow occurs here\n+LL |         || { //~ ERROR cannot borrow `v` as mutable\n+   |         ^^ mutable borrow occurs here\n+LL |             v[1] = 4;\n+   |             - second borrow occurs due to use of `v` in closure\n \n error: aborting due to previous error\n "}, {"sha": "5301ee7a403fe4c13f9d2aac66b63dbb3003273e", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.ast.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n    |                    ----      ^^^^^^ second mutable borrow occurs here\n    |                    |\n-   |                    borrow used here, in later iteration of loop\n+   |                    first borrow used here, in later iteration of loop\n ...\n LL |             _ => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n    |                              ------ first mutable borrow occurs here\n@@ -13,7 +13,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:25:30\n    |\n LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n-   |                    ---- borrow used here, in later iteration of loop\n+   |                    ---- first borrow used here, in later iteration of loop\n LL |             //[mir]~^ ERROR [E0499]\n LL |             2 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n    |                              ^^^^^^ second mutable borrow occurs here"}, {"sha": "5301ee7a403fe4c13f9d2aac66b63dbb3003273e", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.mir.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n    |                    ----      ^^^^^^ second mutable borrow occurs here\n    |                    |\n-   |                    borrow used here, in later iteration of loop\n+   |                    first borrow used here, in later iteration of loop\n ...\n LL |             _ => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n    |                              ------ first mutable borrow occurs here\n@@ -13,7 +13,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-linear-errors.rs:25:30\n    |\n LL |             1 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n-   |                    ---- borrow used here, in later iteration of loop\n+   |                    ---- first borrow used here, in later iteration of loop\n LL |             //[mir]~^ ERROR [E0499]\n LL |             2 => { addr.push(&mut x); } //[ast]~ ERROR [E0499]\n    |                              ^^^^^^ second mutable borrow occurs here"}, {"sha": "57f9a2c1778d36f077bed6139e0393d5bc5b169e", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     let mut t2 = &mut t0;   //~ ERROR cannot borrow `t0`\n    |                  ^^^^^^^ mutable borrow occurs here\n LL |     **t2 += 1;              // Mutates `*t0`\n LL |     p.use_ref();\n-   |     - borrow later used here\n+   |     - immutable borrow later used here\n \n error[E0499]: cannot borrow `t0` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-of-mut-base-ptr.rs:29:18\n@@ -18,7 +18,7 @@ LL |     let mut t2 = &mut t0;       //~ ERROR cannot borrow `t0`\n    |                  ^^^^^^^ second mutable borrow occurs here\n LL |     **t2 += 1;                  // Mutates `*t0` but not through `*p`\n LL |     p.use_mut();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8a9aaa9d8958c049c7d75732443713ed480a48af", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let y = x.borrowed();\n LL |     let z = x.mut_borrowed(); //~ ERROR cannot borrow\n    |             ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n-   |     - borrow later used here\n+   |     - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-object-lifetime.rs:36:13\n@@ -16,7 +16,7 @@ LL |     let y = x.borrowed();\n LL |     let z = &mut x; //~ ERROR cannot borrow\n    |             ^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n-   |     - borrow later used here\n+   |     - immutable borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fd4c380ea05d29c0c9075ad0617943d0d9fec09e", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-autoderef.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let p = &mut f[&s];\n LL |     let q = &f[&s]; //~ ERROR cannot borrow\n    |              ^ immutable borrow occurs here\n LL |     p.use_mut();\n-   |     - borrow later used here\n+   |     - mutable borrow later used here\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:53:18\n@@ -16,7 +16,7 @@ LL |     let p = &mut f[&s];\n LL |     let q = &mut f[&s]; //~ ERROR cannot borrow\n    |                  ^ second mutable borrow occurs here\n LL |     p.use_mut();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error[E0499]: cannot borrow `f.foo` as mutable more than once at a time\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:63:18\n@@ -26,7 +26,7 @@ LL |     let p = &mut f.foo[&s];\n LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n    |                  ^^^^^ second mutable borrow occurs here\n LL |     p.use_mut();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error[E0502]: cannot borrow `f.foo` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:75:18\n@@ -36,7 +36,7 @@ LL |     let p = &f.foo[&s];\n LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n    |                  ^^^^^ mutable borrow occurs here\n LL |     p.use_ref();\n-   |     - borrow later used here\n+   |     - immutable borrow later used here\n \n error[E0506]: cannot assign to `f.foo` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:81:5"}, {"sha": "7ff9285bcc0bba8aa913ee66a65b562481d5d6b6", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-ref-index.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-ref-index.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-ref-index.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-ref-index.ast.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     println!(\"{}\", f[&s]);\n    |                      ^^ immutable borrow occurs here\n ...\n LL |     drop(rs);\n-   |          -- borrow later used here\n+   |          -- mutable borrow later used here\n \n error[E0502]: cannot borrow `s` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-overloaded-index-ref-index.rs:65:7\n@@ -19,7 +19,7 @@ LL |     f[&s] = 10;\n    |       ^^ immutable borrow occurs here\n ...\n LL |     drop(rs);\n-   |          -- borrow later used here\n+   |          -- mutable borrow later used here\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-overloaded-index-ref-index.rs:71:5"}, {"sha": "7ff9285bcc0bba8aa913ee66a65b562481d5d6b6", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-ref-index.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-ref-index.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-ref-index.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-ref-index.mir.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     println!(\"{}\", f[&s]);\n    |                      ^^ immutable borrow occurs here\n ...\n LL |     drop(rs);\n-   |          -- borrow later used here\n+   |          -- mutable borrow later used here\n \n error[E0502]: cannot borrow `s` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-overloaded-index-ref-index.rs:65:7\n@@ -19,7 +19,7 @@ LL |     f[&s] = 10;\n    |       ^^ immutable borrow occurs here\n ...\n LL |     drop(rs);\n-   |          -- borrow later used here\n+   |          -- mutable borrow later used here\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-overloaded-index-ref-index.rs:71:5"}, {"sha": "a089f6d90f8752cef36e341c4e735712d4d11f95", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,7 +8,7 @@ LL |     let z = &x; //~ ERROR cannot borrow\n    |             ^^ immutable borrow occurs here\n ...\n LL |     y.use_mut();\n-   |     - borrow later used here\n+   |     - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-report-with-custom-diagnostic.rs:30:21\n@@ -20,7 +20,7 @@ LL |             let z = &mut x; //~ ERROR cannot borrow\n    |                     ^^^^^^ mutable borrow occurs here\n ...\n LL |             y.use_ref();\n-   |             - borrow later used here\n+   |             - immutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-report-with-custom-diagnostic.rs:45:17\n@@ -32,7 +32,7 @@ LL |         let z = &mut x; //~ ERROR cannot borrow\n    |                 ^^^^^^ second mutable borrow occurs here\n ...\n LL |         y.use_mut();\n-   |         - borrow later used here\n+   |         - first borrow later used here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7f260910ab87a45bf2c7addc5ee93f5b5c0c7b28", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     if let [ref first, ref second, ..] = *s {\n LL |         if let [_, ref mut  second2, ref mut third, ..] = *s { //~ERROR\n    |                    ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second, second2, third]);\n-   |                          ------ borrow later used here\n+   |                          ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan.rs:44:21\n@@ -16,7 +16,7 @@ LL |     if let [.., ref fourth, ref third, _, ref first] = *s {\n LL |         if let [.., ref mut third2, _, _] = *s { //~ERROR\n    |                     ^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, third, third2, fourth]);\n-   |                          ----- borrow later used here\n+   |                          ----- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan.rs:55:20\n@@ -27,7 +27,7 @@ LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n LL |         if let [_, ref mut from_begin1, ..] = *s { //~ERROR\n    |                    ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin1, from_end1, from_end3, from_end4]);\n-   |                                                      --------- borrow later used here\n+   |                                                      --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan.rs:58:23\n@@ -38,7 +38,7 @@ LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n LL |         if let [_, _, ref mut from_begin2, ..] = *s { //~ERROR\n    |                       ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin2, from_end1, from_end3, from_end4]);\n-   |                                           --------- borrow later used here\n+   |                                           --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan.rs:61:26\n@@ -49,7 +49,7 @@ LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n LL |         if let [_, _, _, ref mut from_begin3, ..] = *s { //~ERROR\n    |                          ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin3, from_end1, from_end3, from_end4]);\n-   |                                           --------- borrow later used here\n+   |                                           --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan.rs:69:21\n@@ -60,7 +60,7 @@ LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] =\n LL |         if let [.., ref mut from_end2, _] = *s { //~ERROR\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end2]);\n-   |                                             ----------- borrow later used here\n+   |                                             ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan.rs:72:21\n@@ -71,7 +71,7 @@ LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] =\n LL |         if let [.., ref mut from_end3, _,  _] = *s { //~ERROR\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end3]);\n-   |                                             ----------- borrow later used here\n+   |                                             ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan.rs:75:21\n@@ -82,7 +82,7 @@ LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] =\n LL |         if let [.., ref mut from_end4, _, _, _] = *s { //~ERROR\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end4]);\n-   |                                ----------- borrow later used here\n+   |                                ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan.rs:92:20\n@@ -92,7 +92,7 @@ LL |     if let [ref first, ref second, ..] = *s {\n LL |         if let [_, ref mut tail..] = *s { //~ERROR\n    |                    ^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second]);\n-   |                          ------ borrow later used here\n+   |                          ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan.rs:110:17\n@@ -102,7 +102,7 @@ LL |     if let [.., ref second, ref first] = *s {\n LL |         if let [ref mut tail.., _] = *s { //~ERROR\n    |                 ^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second]);\n-   |                          ------ borrow later used here\n+   |                          ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan.rs:119:17\n@@ -112,7 +112,7 @@ LL |     if let [_, _, _, ref s1..] = *s {\n LL |         if let [ref mut s2.., _, _, _] = *s { //~ERROR\n    |                 ^^^^^^^^^^ mutable borrow occurs here\n LL |             nop_subslice(s1);\n-   |                          -- borrow later used here\n+   |                          -- immutable borrow later used here\n \n error: aborting due to 11 previous errors\n "}, {"sha": "4fad30fd40d9d01bb0c02ed3891532080c62894e", "filename": "src/test/ui/borrowck/borrowck-swap-mut-base-ptr.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     swap(&mut t0, &mut t1); //~ ERROR cannot borrow `t0`\n    |          ^^^^^^^ mutable borrow occurs here\n LL |     *t1 = 22;\n LL |     p.use_ref();\n-   |     - borrow later used here\n+   |     - immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "781d693d5659711f6f63405a72364a6216279d98", "filename": "src/test/ui/borrowck/borrowck-union-borrow.ast.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.ast.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |             let rma = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutab\n    |                       ^^^^^^^^ mutable borrow occurs here\n LL |                                 //[mir]~^ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n LL |             drop(ra);\n-   |                  -- borrow later used here\n+   |                  -- immutable borrow later used here\n \n error[E0506]: cannot assign to `u.a` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:43:13\n@@ -29,7 +29,7 @@ LL |             let rmb = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`\n    |                       ^^^^^^^^ mutable borrow occurs here\n LL |                                 //[mir]~^ ERROR cannot borrow `u.b` as mutable because it is also borrowed as immutable\n LL |             drop(ra);\n-   |                  -- borrow later used here\n+   |                  -- immutable borrow later used here\n \n error[E0506]: cannot assign to `u.b` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:66:13\n@@ -51,7 +51,7 @@ LL |             let ra = &u.a; //[ast]~ ERROR cannot borrow `u.a` as immutable\n    |                      ^^^^ immutable borrow occurs here\n LL |                          //[mir]~^ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n LL |             drop(rma);\n-   |                  --- borrow later used here\n+   |                  --- mutable borrow later used here\n \n error[E0503]: cannot use `u.a` because it was mutably borrowed\n   --> $DIR/borrowck-union-borrow.rs:79:21\n@@ -73,7 +73,7 @@ LL |             let rma2 = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as muta\n    |                        ^^^^^^^^ second mutable borrow occurs here\n LL |                                  //[mir]~^ ERROR cannot borrow `u.a` as mutable more than once at a time\n LL |             drop(rma);\n-   |                  --- borrow later used here\n+   |                  --- first borrow later used here\n \n error[E0506]: cannot assign to `u.a` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:91:13\n@@ -95,7 +95,7 @@ LL |             let rb = &u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as\n    |                      ^^^^ immutable borrow occurs here\n LL |                            //[mir]~^ ERROR cannot borrow `u.b` as immutable because it is also borrowed as mutable\n LL |             drop(rma);\n-   |                  --- borrow later used here\n+   |                  --- mutable borrow later used here\n \n error[E0503]: cannot use `u.b` because it was mutably borrowed\n   --> $DIR/borrowck-union-borrow.rs:104:21\n@@ -117,7 +117,7 @@ LL |             let rmb2 = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b\n    |                        ^^^^^^^^ second mutable borrow occurs here\n LL |                                  //[mir]~^ ERROR cannot borrow `u.b` as mutable more than once at a time\n LL |             drop(rma);\n-   |                  --- borrow later used here\n+   |                  --- first borrow later used here\n \n error[E0506]: cannot assign to `u.b` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:117:13"}, {"sha": "781d693d5659711f6f63405a72364a6216279d98", "filename": "src/test/ui/borrowck/borrowck-union-borrow.mir.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.mir.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |             let rma = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutab\n    |                       ^^^^^^^^ mutable borrow occurs here\n LL |                                 //[mir]~^ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n LL |             drop(ra);\n-   |                  -- borrow later used here\n+   |                  -- immutable borrow later used here\n \n error[E0506]: cannot assign to `u.a` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:43:13\n@@ -29,7 +29,7 @@ LL |             let rmb = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`\n    |                       ^^^^^^^^ mutable borrow occurs here\n LL |                                 //[mir]~^ ERROR cannot borrow `u.b` as mutable because it is also borrowed as immutable\n LL |             drop(ra);\n-   |                  -- borrow later used here\n+   |                  -- immutable borrow later used here\n \n error[E0506]: cannot assign to `u.b` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:66:13\n@@ -51,7 +51,7 @@ LL |             let ra = &u.a; //[ast]~ ERROR cannot borrow `u.a` as immutable\n    |                      ^^^^ immutable borrow occurs here\n LL |                          //[mir]~^ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n LL |             drop(rma);\n-   |                  --- borrow later used here\n+   |                  --- mutable borrow later used here\n \n error[E0503]: cannot use `u.a` because it was mutably borrowed\n   --> $DIR/borrowck-union-borrow.rs:79:21\n@@ -73,7 +73,7 @@ LL |             let rma2 = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as muta\n    |                        ^^^^^^^^ second mutable borrow occurs here\n LL |                                  //[mir]~^ ERROR cannot borrow `u.a` as mutable more than once at a time\n LL |             drop(rma);\n-   |                  --- borrow later used here\n+   |                  --- first borrow later used here\n \n error[E0506]: cannot assign to `u.a` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:91:13\n@@ -95,7 +95,7 @@ LL |             let rb = &u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as\n    |                      ^^^^ immutable borrow occurs here\n LL |                            //[mir]~^ ERROR cannot borrow `u.b` as immutable because it is also borrowed as mutable\n LL |             drop(rma);\n-   |                  --- borrow later used here\n+   |                  --- mutable borrow later used here\n \n error[E0503]: cannot use `u.b` because it was mutably borrowed\n   --> $DIR/borrowck-union-borrow.rs:104:21\n@@ -117,7 +117,7 @@ LL |             let rmb2 = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b\n    |                        ^^^^^^^^ second mutable borrow occurs here\n LL |                                  //[mir]~^ ERROR cannot borrow `u.b` as mutable more than once at a time\n LL |             drop(rma);\n-   |                  --- borrow later used here\n+   |                  --- first borrow later used here\n \n error[E0506]: cannot assign to `u.b` because it is borrowed\n   --> $DIR/borrowck-union-borrow.rs:117:13"}, {"sha": "29e079ee3330bde180364d5c4946e90726f79f1d", "filename": "src/test/ui/borrowck/borrowck-uniq-via-lend.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let w = &mut v;\n LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n    |            ^^^ immutable borrow occurs here\n LL |     w.use_mut();\n-   |     - borrow later used here\n+   |     - mutable borrow later used here\n \n error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-uniq-via-lend.rs:63:12\n@@ -16,7 +16,7 @@ LL |     x = &mut v;\n LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n    |            ^^^ immutable borrow occurs here\n LL |     x.use_mut();\n-   |     - borrow later used here\n+   |     - mutable borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4614c5cf5a6f3feb1b4464d7a6657bcb62bf0c56", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-loan-from-mut.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -5,7 +5,7 @@ LL |     let vb: &mut [isize] = &mut v;\n    |                            ------ first mutable borrow occurs here\n ...\n LL |             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow\n-   |             ^      ------- borrow later used here\n+   |             ^      ------- first borrow later used here\n    |             |\n    |             second mutable borrow occurs here\n "}, {"sha": "71e965777971ebcfe7ed41cd5213888ad2c5bb00", "filename": "src/test/ui/borrowck/issue-51117.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |         Some(baz) => {\n LL |             bar.take(); //~ ERROR cannot borrow\n    |             ^^^ second mutable borrow occurs here\n LL |             drop(baz);\n-   |                  --- borrow later used here\n+   |                  --- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "c6aa243b6cff7d26da06554bde3743acb0b99964", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n LL |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the impl at 17:6...\n+note: first borrowed value must be valid for the lifetime 'a as defined on the impl at 17:6...\n   --> $DIR/mut-borrow-in-loop.rs:17:6\n    |\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n@@ -16,7 +16,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n LL |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the impl at 17:6...\n+note: first borrowed value must be valid for the lifetime 'a as defined on the impl at 17:6...\n   --> $DIR/mut-borrow-in-loop.rs:17:6\n    |\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {\n@@ -28,7 +28,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n LL |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the impl at 17:6...\n+note: first borrowed value must be valid for the lifetime 'a as defined on the impl at 17:6...\n   --> $DIR/mut-borrow-in-loop.rs:17:6\n    |\n LL | impl<'a, T : 'a> FuncWrapper<'a, T> {"}, {"sha": "fd201d75106b4704e7659c0da09aef00d40077b8", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let first = &mut void;\n LL |     let second = &mut void; //~ ERROR cannot borrow\n    |                  ^^^^^^^^^ second mutable borrow occurs here\n LL |     first.use_mut();\n-   |     ----- borrow later used here\n+   |     ----- first borrow later used here\n \n error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n   --> $DIR/mut-borrow-outside-loop.rs:25:28\n@@ -17,7 +17,7 @@ LL |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n    |                            ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |         inner_second.use_mut();\n LL |         inner_first.use_mut();\n-   |         ----------- borrow used here, in later iteration of loop\n+   |         ----------- first borrow used here, in later iteration of loop\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ad1dc439c6d1555bba1001465db190ef0c4a82df", "filename": "src/test/ui/borrowck/two-phase-activation-sharing-interference.nll_target.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     { let z = &x; read(z); }\n    |               ^^ immutable borrow occurs here\n LL |     //[nll_target]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n LL |     *y += 1;\n-   |     ------- borrow later used here\n+   |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-activation-sharing-interference.rs:50:13\n@@ -18,7 +18,7 @@ LL |     let z = &x;\n    |             ^^ immutable borrow occurs here\n LL |     //[nll_target]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n LL |     *y += 1;\n-   |     ------- borrow later used here\n+   |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-activation-sharing-interference.rs:61:13\n@@ -29,7 +29,7 @@ LL |     let z = &x;\n    |             ^^ immutable borrow occurs here\n ...\n LL |     *y += 1;\n-   |     ------- borrow later used here\n+   |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-activation-sharing-interference.rs:72:14\n@@ -40,7 +40,7 @@ LL |     let _z = &x;\n    |              ^^ immutable borrow occurs here\n LL |     //[nll_target]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n LL |     *y += 1;\n-   |     ------- borrow later used here\n+   |     ------- mutable borrow later used here\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a3d3da94d54aae23d733c2fe5266ffdc9433abc1", "filename": "src/test/ui/borrowck/two-phase-cannot-nest-mut-self-calls.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,19 +1,13 @@\n error[E0502]: cannot borrow `vec` as mutable because it is also borrowed as immutable\n   --> $DIR/two-phase-cannot-nest-mut-self-calls.rs:26:9\n    |\n-LL |       vec.get({\n-   |       ---\n-   |       |\n-   |  _____immutable borrow occurs here\n-   | |\n-LL | |\n-LL | |         vec.push(2);\n-   | |         ^^^^^^^^^^^ mutable borrow occurs here\n-LL | |         //~^ ERROR cannot borrow `vec` as mutable because it is also borrowed as immutable\n-LL | |\n-LL | |         0\n-LL | |     });\n-   | |______- borrow later used here\n+LL |     vec.get({\n+   |     --- --- immutable borrow later used by call\n+   |     |\n+   |     immutable borrow occurs here\n+LL | \n+LL |         vec.push(2);\n+   |         ^^^^^^^^^^^ mutable borrow occurs here\n \n error: aborting due to previous error\n "}, {"sha": "a6d311a7b1de7d383cd8c56ebe20306a987878c0", "filename": "src/test/ui/borrowck/two-phase-multi-mut.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -2,21 +2,20 @@ error[E0499]: cannot borrow `foo` as mutable more than once at a time\n   --> $DIR/two-phase-multi-mut.rs:23:5\n    |\n LL |     foo.method(&mut foo);\n-   |     ^^^^^^^^^^^--------^\n-   |     |          |\n-   |     |          first mutable borrow occurs here\n+   |     ^^^^------^--------^\n+   |     |   |      |\n+   |     |   |      first mutable borrow occurs here\n+   |     |   first borrow later used by call\n    |     second mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `foo` as mutable more than once at a time\n   --> $DIR/two-phase-multi-mut.rs:23:16\n    |\n LL |     foo.method(&mut foo);\n-   |     -----------^^^^^^^^-\n-   |     |          |\n-   |     |          second mutable borrow occurs here\n+   |     --- ------ ^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a272d2cf019a7f7c92ff0911cfe36a0c818ac1f1", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.ast.nll.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -2,11 +2,10 @@ error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:70:11\n    |\n LL |         f(f(10));\n-   |         --^-----\n-   |         | |\n-   |         | second mutable borrow occurs here\n+   |         - ^ second mutable borrow occurs here\n+   |         |\n    |         first mutable borrow occurs here\n-   |         borrow later used here\n+   |         first borrow later used by call\n \n error[E0382]: use of moved value: `*f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:79:11\n@@ -20,11 +19,10 @@ error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:86:11\n    |\n LL |         f(f(10));\n-   |         --^-----\n-   |         | |\n-   |         | second mutable borrow occurs here\n+   |         - ^ second mutable borrow occurs here\n+   |         |\n    |         first mutable borrow occurs here\n-   |         borrow later used here\n+   |         first borrow later used by call\n \n error[E0161]: cannot move a value of type dyn std::ops::FnOnce(i32) -> i32: the size of dyn std::ops::FnOnce(i32) -> i32 cannot be statically determined\n   --> $DIR/two-phase-nonrecv-autoref.rs:95:9\n@@ -50,11 +48,10 @@ error[E0502]: cannot borrow `a` as immutable because it is also borrowed as muta\n   --> $DIR/two-phase-nonrecv-autoref.rs:139:27\n    |\n LL |     double_access(&mut a, &a);\n-   |     ----------------------^^-\n-   |     |             |       |\n-   |     |             |       immutable borrow occurs here\n+   |     ------------- ------  ^^ immutable borrow occurs here\n+   |     |             |\n    |     |             mutable borrow occurs here\n-   |     borrow later used here\n+   |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-nonrecv-autoref.rs:167:7\n@@ -64,7 +61,7 @@ LL |     i[i[3]] = 4;\n    |     | |\n    |     | immutable borrow occurs here\n    |     mutable borrow occurs here\n-   |     borrow later used here\n+   |     mutable borrow later used here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-nonrecv-autoref.rs:173:7\n@@ -74,7 +71,7 @@ LL |     i[i[3]] = i[4];\n    |     | |\n    |     | immutable borrow occurs here\n    |     mutable borrow occurs here\n-   |     borrow later used here\n+   |     mutable borrow later used here\n \n error: aborting due to 9 previous errors\n "}, {"sha": "a272d2cf019a7f7c92ff0911cfe36a0c818ac1f1", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -2,11 +2,10 @@ error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:70:11\n    |\n LL |         f(f(10));\n-   |         --^-----\n-   |         | |\n-   |         | second mutable borrow occurs here\n+   |         - ^ second mutable borrow occurs here\n+   |         |\n    |         first mutable borrow occurs here\n-   |         borrow later used here\n+   |         first borrow later used by call\n \n error[E0382]: use of moved value: `*f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:79:11\n@@ -20,11 +19,10 @@ error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:86:11\n    |\n LL |         f(f(10));\n-   |         --^-----\n-   |         | |\n-   |         | second mutable borrow occurs here\n+   |         - ^ second mutable borrow occurs here\n+   |         |\n    |         first mutable borrow occurs here\n-   |         borrow later used here\n+   |         first borrow later used by call\n \n error[E0161]: cannot move a value of type dyn std::ops::FnOnce(i32) -> i32: the size of dyn std::ops::FnOnce(i32) -> i32 cannot be statically determined\n   --> $DIR/two-phase-nonrecv-autoref.rs:95:9\n@@ -50,11 +48,10 @@ error[E0502]: cannot borrow `a` as immutable because it is also borrowed as muta\n   --> $DIR/two-phase-nonrecv-autoref.rs:139:27\n    |\n LL |     double_access(&mut a, &a);\n-   |     ----------------------^^-\n-   |     |             |       |\n-   |     |             |       immutable borrow occurs here\n+   |     ------------- ------  ^^ immutable borrow occurs here\n+   |     |             |\n    |     |             mutable borrow occurs here\n-   |     borrow later used here\n+   |     mutable borrow later used by call\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-nonrecv-autoref.rs:167:7\n@@ -64,7 +61,7 @@ LL |     i[i[3]] = 4;\n    |     | |\n    |     | immutable borrow occurs here\n    |     mutable borrow occurs here\n-   |     borrow later used here\n+   |     mutable borrow later used here\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-nonrecv-autoref.rs:173:7\n@@ -74,7 +71,7 @@ LL |     i[i[3]] = i[4];\n    |     | |\n    |     | immutable borrow occurs here\n    |     mutable borrow occurs here\n-   |     borrow later used here\n+   |     mutable borrow later used here\n \n error: aborting due to 9 previous errors\n "}, {"sha": "21f54881b004ab1cd0465e4f5100b3548b1af1db", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference.nll_target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.nll_target.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,7 +8,7 @@ LL |         delay = &mut vec;\n    |                 ^^^^^^^^ mutable borrow occurs here\n ...\n LL |         shared[0];\n-   |         ------ borrow later used here\n+   |         ------ immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "4847f6cec86c9936d68dc45a6f850723967b4118", "filename": "src/test/ui/borrowck/two-phase-sneaky.nll.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,19 +1,13 @@\n error[E0499]: cannot borrow `v` as mutable more than once at a time\n   --> $DIR/two-phase-sneaky.rs:22:9\n    |\n-LL |       v[0].push_str({\n-   |       -\n-   |       |\n-   |  _____first mutable borrow occurs here\n-   | |\n-LL | |\n-LL | |         v.push(format!(\"foo\"));\n-   | |         ^ second mutable borrow occurs here\n-LL | |         //~^   ERROR cannot borrow `v` as mutable more than once at a time [E0499]\n-LL | |\n-LL | |         \"World!\"\n-LL | |     });\n-   | |______- borrow later used here\n+LL |     v[0].push_str({\n+   |     -    -------- first borrow later used by call\n+   |     |\n+   |     first mutable borrow occurs here\n+LL | \n+LL |         v.push(format!(\"foo\"));\n+   |         ^ second mutable borrow occurs here\n \n error: aborting due to previous error\n "}, {"sha": "b1f947aceb5c86961c48d39b53ea88f4727ec5d2", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.nll.stderr", "status": "modified", "additions": 43, "deletions": 50, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -13,61 +13,57 @@ error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as im\n   --> $DIR/two-phase-surprise-no-conflict.rs:79:17\n    |\n LL |                 self.hash_expr(&self.cx_mut.body(eid).value);\n-   |                 ^^^^^^^^^^^^^^^^-----------^^^^^^^^^^^^^^^^^\n-   |                 |               |\n-   |                 |               immutable borrow occurs here\n+   |                 ^^^^^---------^^-----------^^^^^^^^^^^^^^^^^\n+   |                 |    |          |\n+   |                 |    |          immutable borrow occurs here\n+   |                 |    immutable borrow later used by call\n    |                 mutable borrow occurs here\n-   |                 borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:151:51\n    |\n LL |     reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n-   |     ----------------------------------------------^^^^^^^^^^^^^^^^^---\n-   |     |                                             |\n-   |     |                                             second mutable borrow occurs here\n+   |     --- ---------------                           ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:156:54\n    |\n LL |     reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n-   |     -------------------------------------------------^^^^^^^^^^^^^^^^^---\n-   |     |                                                |\n-   |     |                                                second mutable borrow occurs here\n+   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:161:53\n    |\n LL |     reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n-   |     ------------------------------------------------^^^^^^^^^^^^^^^^^---\n-   |     |                                               |\n-   |     |                                               second mutable borrow occurs here\n+   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:166:44\n    |\n LL |     reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n-   |     ---------------------------------------^^^^^^^^^^^^^^^^^--\n-   |     |                                      |\n-   |     |                                      second mutable borrow occurs here\n+   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:178:5\n    |\n LL |     reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n-   |     |                                            |\n-   |     |                                            immutable borrow occurs here\n+   |     ^^^^--------------^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n+   |     |   |                                        |\n+   |     |   |                                        immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n    |     mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:183:5\n@@ -78,7 +74,7 @@ LL |     reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n    |     |                                           immutable borrow occurs here\n    |     mutable borrow occurs here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 122:21...\n+note: immutable borrowed value must be valid for the lifetime 'a as defined on the function body at 122:21...\n   --> $DIR/two-phase-surprise-no-conflict.rs:122:21\n    |\n LL | fn register_plugins<'a>(mk_reg: impl Fn() -> &'a mut Registry<'a>) {\n@@ -88,31 +84,30 @@ error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as imm\n   --> $DIR/two-phase-surprise-no-conflict.rs:188:5\n    |\n LL |     reg.register_ref(&CapturePass::new(&reg.sess_mut));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^\n-   |     |                                  |\n-   |     |                                  immutable borrow occurs here\n+   |     ^^^^------------^^^^^^^^^^^^^^^^^^^-------------^^\n+   |     |   |                              |\n+   |     |   |                              immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n    |     mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:200:5\n    |\n LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n-   |     |                                                |\n-   |     |                                                first mutable borrow occurs here\n+   |     ^^^^--------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n+   |     |   |                                            |\n+   |     |   |                                            first mutable borrow occurs here\n+   |     |   first borrow later used by call\n    |     second mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:200:54\n    |\n LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     -------------------------------------------------^^^^^^^^^^^^^^^^^---\n-   |     |                                                |\n-   |     |                                                second mutable borrow occurs here\n+   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:206:5\n@@ -123,7 +118,7 @@ LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n    |     |                                               first mutable borrow occurs here\n    |     second mutable borrow occurs here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 122:21...\n+note: first borrowed value must be valid for the lifetime 'a as defined on the function body at 122:21...\n   --> $DIR/two-phase-surprise-no-conflict.rs:122:21\n    |\n LL | fn register_plugins<'a>(mk_reg: impl Fn() -> &'a mut Registry<'a>) {\n@@ -133,31 +128,29 @@ error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:206:53\n    |\n LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     ------------------------------------------------^^^^^^^^^^^^^^^^^---\n-   |     |                                               |\n-   |     |                                               second mutable borrow occurs here\n+   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:212:5\n    |\n LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^\n-   |     |                                      |\n-   |     |                                      first mutable borrow occurs here\n+   |     ^^^^------------^^^^^^^^^^^^^^^^^^^^^^^-----------------^^\n+   |     |   |                                  |\n+   |     |   |                                  first mutable borrow occurs here\n+   |     |   first borrow later used by call\n    |     second mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:212:44\n    |\n LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n-   |     ---------------------------------------^^^^^^^^^^^^^^^^^--\n-   |     |                                      |\n-   |     |                                      second mutable borrow occurs here\n+   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error: aborting due to 15 previous errors\n "}, {"sha": "06ac92b18e1b2716b672f4b81bd367c81a10f75e", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.no2pb.stderr", "status": "modified", "additions": 48, "deletions": 64, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.no2pb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.no2pb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.no2pb.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -13,161 +13,145 @@ error[E0502]: cannot borrow `*self.cx` as immutable because it is also borrowed\n   --> $DIR/two-phase-surprise-no-conflict.rs:64:33\n    |\n LL |                 self.hash_expr(&self.cx.body(eid).value);\n-   |                 ----------------^^^^^^^-----------------\n-   |                 |               |\n-   |                 |               immutable borrow occurs here\n+   |                 ---- ---------  ^^^^^^^ immutable borrow occurs here\n+   |                 |    |\n+   |                 |    mutable borrow later used by call\n    |                 mutable borrow occurs here\n-   |                 borrow later used here\n \n error[E0502]: cannot borrow `*self.cx_mut` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:79:33\n    |\n LL |                 self.hash_expr(&self.cx_mut.body(eid).value);\n-   |                 ----------------^^^^^^^^^^^-----------------\n-   |                 |               |\n-   |                 |               immutable borrow occurs here\n+   |                 ---- ---------  ^^^^^^^^^^^ immutable borrow occurs here\n+   |                 |    |\n+   |                 |    mutable borrow later used by call\n    |                 mutable borrow occurs here\n-   |                 borrow later used here\n \n error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:131:51\n    |\n LL |     reg.register_static(Box::new(TrivialPass::new(&reg.sess_mut)));\n-   |     ----------------------------------------------^^^^^^^^^^^^^---\n-   |     |                                             |\n-   |     |                                             immutable borrow occurs here\n+   |     --- ---------------                           ^^^^^^^^^^^^^ immutable borrow occurs here\n+   |     |   |\n+   |     |   mutable borrow later used by call\n    |     mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:135:50\n    |\n LL |     reg.register_bound(Box::new(TrivialPass::new(&reg.sess_mut)));\n-   |     ---------------------------------------------^^^^^^^^^^^^^---\n-   |     |                                            |\n-   |     |                                            immutable borrow occurs here\n+   |     --- --------------                           ^^^^^^^^^^^^^ immutable borrow occurs here\n+   |     |   |\n+   |     |   mutable borrow later used by call\n    |     mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:139:49\n    |\n LL |     reg.register_univ(Box::new(TrivialPass::new(&reg.sess_mut)));\n-   |     --------------------------------------------^^^^^^^^^^^^^---\n-   |     |                                           |\n-   |     |                                           immutable borrow occurs here\n+   |     --- -------------                           ^^^^^^^^^^^^^ immutable borrow occurs here\n+   |     |   |\n+   |     |   mutable borrow later used by call\n    |     mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:143:40\n    |\n LL |     reg.register_ref(&TrivialPass::new(&reg.sess_mut));\n-   |     -----------------------------------^^^^^^^^^^^^^--\n-   |     |                                  |\n-   |     |                                  immutable borrow occurs here\n+   |     --- ------------                   ^^^^^^^^^^^^^ immutable borrow occurs here\n+   |     |   |\n+   |     |   mutable borrow later used by call\n    |     mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:151:51\n    |\n LL |     reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n-   |     ----------------------------------------------^^^^^^^^^^^^^^^^^---\n-   |     |                                             |\n-   |     |                                             second mutable borrow occurs here\n+   |     --- ---------------                           ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:156:54\n    |\n LL |     reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n-   |     -------------------------------------------------^^^^^^^^^^^^^^^^^---\n-   |     |                                                |\n-   |     |                                                second mutable borrow occurs here\n+   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:161:53\n    |\n LL |     reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n-   |     ------------------------------------------------^^^^^^^^^^^^^^^^^---\n-   |     |                                               |\n-   |     |                                               second mutable borrow occurs here\n+   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:166:44\n    |\n LL |     reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n-   |     ---------------------------------------^^^^^^^^^^^^^^^^^--\n-   |     |                                      |\n-   |     |                                      second mutable borrow occurs here\n+   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:178:50\n    |\n LL |     reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n-   |     ---------------------------------------------^^^^^^^^^^^^^---\n-   |     |                                            |\n-   |     |                                            immutable borrow occurs here\n+   |     --- --------------                           ^^^^^^^^^^^^^ immutable borrow occurs here\n+   |     |   |\n+   |     |   mutable borrow later used by call\n    |     mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:183:49\n    |\n LL |     reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n-   |     --------------------------------------------^^^^^^^^^^^^^---\n-   |     |                                           |\n-   |     |                                           immutable borrow occurs here\n+   |     --- -------------                           ^^^^^^^^^^^^^ immutable borrow occurs here\n+   |     |   |\n+   |     |   mutable borrow later used by call\n    |     mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-surprise-no-conflict.rs:188:40\n    |\n LL |     reg.register_ref(&CapturePass::new(&reg.sess_mut));\n-   |     -----------------------------------^^^^^^^^^^^^^--\n-   |     |                                  |\n-   |     |                                  immutable borrow occurs here\n+   |     --- ------------                   ^^^^^^^^^^^^^ immutable borrow occurs here\n+   |     |   |\n+   |     |   mutable borrow later used by call\n    |     mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:200:54\n    |\n LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     -------------------------------------------------^^^^^^^^^^^^^^^^^---\n-   |     |                                                |\n-   |     |                                                second mutable borrow occurs here\n+   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:206:53\n    |\n LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     ------------------------------------------------^^^^^^^^^^^^^^^^^---\n-   |     |                                               |\n-   |     |                                               second mutable borrow occurs here\n+   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:212:44\n    |\n LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n-   |     ---------------------------------------^^^^^^^^^^^^^^^^^--\n-   |     |                                      |\n-   |     |                                      second mutable borrow occurs here\n+   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error: aborting due to 17 previous errors\n "}, {"sha": "76ed3bc31370e94827cb80532189ef79bafc0fe0", "filename": "src/test/ui/codemap_tests/issue-11715.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     let z = &mut x; //~ ERROR cannot borrow\n    |             ^^^^^^ second mutable borrow occurs here\n LL |     z.use_mut();\n LL |     y.use_mut();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "d79405e9a59b2d2a5c96652c971fa084e93402ce", "filename": "src/test/ui/codemap_tests/one_line.nll.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -2,11 +2,10 @@ error[E0499]: cannot borrow `v` as mutable more than once at a time\n   --> $DIR/one_line.rs:13:12\n    |\n LL |     v.push(v.pop().unwrap()); //~ ERROR cannot borrow\n-   |     -------^----------------\n-   |     |      |\n-   |     |      second mutable borrow occurs here\n+   |     - ---- ^ second mutable borrow occurs here\n+   |     | |\n+   |     | first borrow later used by call\n    |     first mutable borrow occurs here\n-   |     borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "60584e481c125f4724b799cf1fbd5cad99375be8", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef.ast.nll.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.ast.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     let z = borrow_mut(x);\n    |                        ^ second mutable borrow occurs here\n ...\n LL |     drop((y, z));\n-   |           - borrow later used here\n+   |           - first borrow later used here\n \n error[E0506]: cannot assign to `**x` because it is borrowed\n   --> $DIR/coerce-overloaded-autoderef.rs:31:5\n@@ -25,21 +25,20 @@ error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/coerce-overloaded-autoderef.rs:38:20\n    |\n LL |     borrow_mut2(x, x);\n-   |     ---------------^-\n-   |     |           |  |\n-   |     |           |  second mutable borrow occurs here\n+   |     ----------- -  ^ second mutable borrow occurs here\n+   |     |           |\n    |     |           first mutable borrow occurs here\n-   |     borrow later used here\n+   |     first borrow later used by call\n \n error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n   --> $DIR/coerce-overloaded-autoderef.rs:44:5\n    |\n LL |     borrow2(x, x);\n-   |     ^^^^^^^^^^^-^\n+   |     -------^^^^-^\n    |     |          |\n    |     |          immutable borrow occurs here\n    |     mutable borrow occurs here\n-   |     borrow later used here\n+   |     immutable borrow later used by call\n \n error: aborting due to 4 previous errors\n "}, {"sha": "60584e481c125f4724b799cf1fbd5cad99375be8", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef.mir.nll.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.mir.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.mir.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.mir.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     let z = borrow_mut(x);\n    |                        ^ second mutable borrow occurs here\n ...\n LL |     drop((y, z));\n-   |           - borrow later used here\n+   |           - first borrow later used here\n \n error[E0506]: cannot assign to `**x` because it is borrowed\n   --> $DIR/coerce-overloaded-autoderef.rs:31:5\n@@ -25,21 +25,20 @@ error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/coerce-overloaded-autoderef.rs:38:20\n    |\n LL |     borrow_mut2(x, x);\n-   |     ---------------^-\n-   |     |           |  |\n-   |     |           |  second mutable borrow occurs here\n+   |     ----------- -  ^ second mutable borrow occurs here\n+   |     |           |\n    |     |           first mutable borrow occurs here\n-   |     borrow later used here\n+   |     first borrow later used by call\n \n error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n   --> $DIR/coerce-overloaded-autoderef.rs:44:5\n    |\n LL |     borrow2(x, x);\n-   |     ^^^^^^^^^^^-^\n+   |     -------^^^^-^\n    |     |          |\n    |     |          immutable borrow occurs here\n    |     mutable borrow occurs here\n-   |     borrow later used here\n+   |     immutable borrow later used by call\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0ca752b5ff9d36a583538b6bbba03571bbd5da83", "filename": "src/test/ui/coercion/coerce-overloaded-autoderef.mir.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-overloaded-autoderef.mir.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     let z = borrow_mut(x);\n    |                        ^ second mutable borrow occurs here\n ...\n LL |     drop((y, z));\n-   |           - borrow later used here\n+   |           - first borrow later used here\n \n error[E0506]: cannot assign to `**x` because it is borrowed\n   --> $DIR/coerce-overloaded-autoderef.rs:31:5\n@@ -25,21 +25,19 @@ error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/coerce-overloaded-autoderef.rs:38:20\n    |\n LL |     borrow_mut2(x, x);\n-   |     ---------------^-\n-   |     |           |  |\n-   |     |           |  second mutable borrow occurs here\n+   |     ----------- -  ^ second mutable borrow occurs here\n+   |     |           |\n    |     |           first mutable borrow occurs here\n-   |     borrow later used here\n+   |     first borrow later used by call\n \n error[E0502]: cannot borrow `*x` as immutable because it is also borrowed as mutable\n   --> $DIR/coerce-overloaded-autoderef.rs:44:16\n    |\n LL |     borrow2(x, x);\n-   |     -----------^-\n-   |     |       |  |\n-   |     |       |  immutable borrow occurs here\n+   |     ------- -  ^ immutable borrow occurs here\n+   |     |       |\n    |     |       mutable borrow occurs here\n-   |     borrow later used here\n+   |     mutable borrow later used by call\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8e29dccb8a709ee0f489bc6a65a96e31e0d238bf", "filename": "src/test/ui/did_you_mean/issue-34126.nll.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -11,11 +11,10 @@ error[E0502]: cannot borrow `self` as mutable because it is also borrowed as imm\n   --> $DIR/issue-34126.rs:16:18\n    |\n LL |         self.run(&mut self); //~ ERROR cannot borrow\n-   |         ---------^^^^^^^^^-\n-   |         |        |\n-   |         |        mutable borrow occurs here\n+   |         ---- --- ^^^^^^^^^ mutable borrow occurs here\n+   |         |    |\n+   |         |    immutable borrow later used by call\n    |         immutable borrow occurs here\n-   |         borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "39815ac6f1766f5c5ee0266bb36cfbf32297e350", "filename": "src/test/ui/error-codes/E0499.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0499.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     let mut a = &mut i; //~ ERROR E0499\n    |                 ^^^^^^ second mutable borrow occurs here\n LL |     a.use_mut();\n LL |     x.use_mut();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "ce0827102469800fa9b9700a6132ab516ea5141f", "filename": "src/test/ui/error-codes/E0502.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let ref y = a;\n LL |     bar(a); //~ ERROR E0502\n    |     ^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n-   |     - borrow later used here\n+   |     - immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "d332df6e4ba4667bc7465d19853d3abe447596a8", "filename": "src/test/ui/generator/yield-while-iterating.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -19,7 +19,7 @@ LL | |     };\n LL |       println!(\"{}\", x[0]); //~ ERROR\n    |                      ^ immutable borrow occurs here\n LL |       b.resume();\n-   |       - borrow later used here\n+   |       - mutable borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b5c392c51ece5cb77b2627f5d3ed020c4f64e954", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -11,7 +11,7 @@ LL | |     };\n LL |       println!(\"{}\", x); //~ ERROR\n    |                      ^ borrow occurs here\n LL |       b.resume();\n-   |       - borrow later used here\n+   |       - first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "61a28bfd17b2e8a5ff2c8df648d6f34eea6fb9cc", "filename": "src/test/ui/hashmap-iter-value-lifetime.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-iter-value-lifetime.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,7 +8,7 @@ LL |     my_stuff.clear(); //~ ERROR cannot borrow\n    |     ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL | \n LL |     println!(\"{}\", *thing);\n-   |                    ------ borrow later used here\n+   |                    ------ immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "4cf87ee8dc75b7af983d75844b90ca8476c7ce02", "filename": "src/test/ui/hashmap-lifetimes.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let mut it = my_stuff.iter();\n LL |     my_stuff.insert(1, 43); //~ ERROR cannot borrow\n    |     ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     it;\n-   |     -- borrow later used here\n+   |     -- immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "10d028b05a78beae3b43141118cfa9cf656c3122", "filename": "src/test/ui/hrtb/hrtb-debruijn-in-receiver.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-debruijn-in-receiver.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-debruijn-in-receiver.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-debruijn-in-receiver.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     foo.insert(); //~ ERROR cannot borrow\n    |     ^^^\n    |     |\n    |     second mutable borrow occurs here\n-   |     borrow later used here\n+   |     first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "4130ad7639fe288d215154256a6b4fff7291059d", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |     let S { 0: ref mut borrow2 } = s;\n    |                ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     borrow1.use_mut();\n-   |     ------- borrow later used here\n+   |     ------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "4d4320083e4a47a25732116cc896c4d7147adf0d", "filename": "src/test/ui/issues/issue-11192.nll.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-11192.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-11192.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11192.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,10 +8,9 @@ LL |         ptr = box Foo { x: ptr.x + 1 };\n    |         --- first borrow occurs due to use of `ptr` in closure\n ...\n LL |     test(&*ptr);\n-   |     -----^^^^^-\n-   |     |    |\n-   |     |    immutable borrow occurs here\n-   |     borrow later used here\n+   |     ---- ^^^^^ immutable borrow occurs here\n+   |     |\n+   |     mutable borrow later used by call\n \n error: aborting due to previous error\n "}, {"sha": "c815ad9049f4ecefda9ad1236f1c82a94c15dffe", "filename": "src/test/ui/issues/issue-18566.nll.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-18566.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-18566.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18566.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -2,11 +2,10 @@ error[E0499]: cannot borrow `*s` as mutable more than once at a time\n   --> $DIR/issue-18566.rs:33:19\n    |\n LL |     MyPtr(s).poke(s);\n-   |     --------------^-\n-   |     |     |       |\n-   |     |     |       second mutable borrow occurs here\n-   |     |     first mutable borrow occurs here\n-   |     borrow later used here\n+   |           -  ---- ^ second mutable borrow occurs here\n+   |           |  |\n+   |           |  first borrow later used by call\n+   |           first mutable borrow occurs here\n \n error: aborting due to previous error\n "}, {"sha": "2531279f7508b70a3bb323d9b7bee4de1d02f4b5", "filename": "src/test/ui/issues/issue-18783.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18783.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -11,7 +11,7 @@ LL |     c.push(Box::new(|| y = 0));\n    |                     second mutable borrow occurs here\n LL | //~^ ERROR cannot borrow `y` as mutable more than once at a time\n LL | }\n-   | - borrow later used here, when `c` is dropped\n+   | - first borrow later used here, when `c` is dropped\n \n error[E0499]: cannot borrow `y` as mutable more than once at a time\n   --> $DIR/issue-18783.rs:26:29\n@@ -26,7 +26,7 @@ LL |     Push::push(&c, Box::new(|| y = 0));\n    |                             second mutable borrow occurs here\n LL | //~^ ERROR cannot borrow `y` as mutable more than once at a time\n LL | }\n-   | - borrow later used here, when `c` is dropped\n+   | - first borrow later used here, when `c` is dropped\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f3d855feca2dc4cee09db0b9de6b8a2a3dcda68c", "filename": "src/test/ui/issues/issue-25793.nll.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-25793.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-25793.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25793.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,10 +7,9 @@ LL |         $this.width.unwrap()\n LL |         let r = &mut *self;\n    |                 ---------- borrow of `*self` occurs here\n LL |         r.get_size(width!(self))\n-   |         ------------------------\n-   |         |          |\n-   |         |          in this macro invocation\n-   |         borrow later used here\n+   |           -------- ------------ in this macro invocation\n+   |           |\n+   |           borrow later used by call\n \n error: aborting due to previous error\n "}, {"sha": "5750b1761e5cc74b4f7c4e03f85625fa67c0edb4", "filename": "src/test/ui/issues/issue-42106.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-42106.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-42106.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42106.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let _a = &collection;\n LL |     collection.swap(1, 2); //~ ERROR also borrowed as immutable\n    |     ^^^^^^^^^^ mutable borrow occurs here\n LL |     _a.use_ref();\n-   |     -- borrow later used here\n+   |     -- immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "1512ea53a076550c6244b739d540d9aa41c11a3a", "filename": "src/test/ui/issues/issue-45157.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45157.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,7 +8,7 @@ LL |         let nref = &u.z.c;\n    |                    ^^^^^^ immutable borrow occurs here\n LL |         //~^ ERROR cannot borrow `u.z.c` as immutable because it is also borrowed as mutable [E0502]\n LL |         println!(\"{} {}\", mref, nref)\n-   |                           ---- borrow later used here\n+   |                           ---- mutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "df2902c0674efaf7cf3fa93a4848f215f8db6760", "filename": "src/test/ui/methods/method-self-arg-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let y = &mut x;\n LL |     Foo::bar(&x); //~ERROR cannot borrow `x`\n    |              ^^ immutable borrow occurs here\n LL |     y.use_mut();\n-   |     - borrow later used here\n+   |     - mutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/method-self-arg-2.rs:30:14\n@@ -16,7 +16,7 @@ LL |     let y = &mut x;\n LL |     Foo::baz(&mut x); //~ERROR cannot borrow `x`\n    |              ^^^^^^ second mutable borrow occurs here\n LL |     y.use_mut();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3fc4fa3cac81fda1c6272627c623a6b9c324b3b0", "filename": "src/test/ui/moves/moves-based-on-type-no-recursive-stack-closure.nll.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -2,11 +2,10 @@ error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/moves-based-on-type-no-recursive-stack-closure.rs:30:27\n    |\n LL |                     (f.c)(f, true);\n-   |                     ------^-------\n-   |                     |     |\n-   |                     |     second mutable borrow occurs here\n+   |                     ----- ^ second mutable borrow occurs here\n+   |                     |\n    |                     first mutable borrow occurs here\n-   |                     borrow later used here\n+   |                     first borrow later used by call\n \n error[E0382]: borrow of moved value: `f`\n   --> $DIR/moves-based-on-type-no-recursive-stack-closure.rs:42:5"}, {"sha": "7b5a63b267fd82a2ac0de912ee165affe3f07fee", "filename": "src/test/ui/mut/mut-cant-alias.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -6,7 +6,7 @@ LL |     let b1 = &mut *b;\n LL |     let b2 = &mut *b; //~ ERROR cannot borrow\n    |                    ^ second mutable borrow occurs here\n LL |     b1.use_mut();\n-   |     -- borrow later used here\n+   |     -- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "4da597791ef572e4edc3ebdb2866ac0fa48bb11a", "filename": "src/test/ui/nll/borrowed-local-error.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,16 +1,14 @@\n error[E0597]: `v` does not live long enough\n   --> $DIR/borrowed-local-error.rs:20:9\n    |\n-LL |       let x = gimme({\n-   |  _____________-\n-LL | |         let v = (22,);\n-LL | |         &v\n-   | |         ^^ borrowed value does not live long enough\n-LL | |         //~^ ERROR `v` does not live long enough [E0597]\n-LL | |     });\n-   | |_____-- borrow later used here\n-   |       |\n-   |       `v` dropped here while still borrowed\n+LL |     let x = gimme({\n+   |             ----- borrow later used by call\n+LL |         let v = (22,);\n+LL |         &v\n+   |         ^^ borrowed value does not live long enough\n+LL |         //~^ ERROR `v` does not live long enough [E0597]\n+LL |     });\n+   |     - `v` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "ff8a83024f12ad4ffd678fa783d4281918c561de", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,7 +8,7 @@ LL |     let p: &'a u8 = &*block.current;\n    |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n LL |     //~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n LL |     drop(x);\n-   |          - borrow later used here\n+   |          - mutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "9306926bf387bb41e511f4dbaff83d7e48124937", "filename": "src/test/ui/nll/closure-access-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -8,7 +8,7 @@ LL |     || x; //~ ERROR\n    |     |\n    |     immutable borrow occurs here\n LL |     r.use_mut();\n-   |     - borrow later used here\n+   |     - mutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/closure-access-spans.rs:23:5\n@@ -20,7 +20,7 @@ LL |     || x = 2; //~ ERROR\n    |     |\n    |     second mutable borrow occurs here\n LL |     r.use_mut();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error[E0500]: closure requires unique access to `x` but it is already borrowed\n   --> $DIR/closure-access-spans.rs:29:5\n@@ -32,7 +32,7 @@ LL |     || *x = 2; //~ ERROR\n    |     |\n    |     closure construction occurs here\n LL |     r.use_mut();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/closure-access-spans.rs:35:13"}, {"sha": "3e423dadd192c430e1d270428ac8b1a6e074d952", "filename": "src/test/ui/nll/closure-borrow-spans.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -20,7 +20,7 @@ LL |     let f = || x;\n LL |     let y = &mut x; //~ ERROR\n    |             ^^^^^^ mutable borrow occurs here\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     - immutable borrow later used here\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/closure-borrow-spans.rs:31:16\n@@ -68,7 +68,7 @@ LL |     let f = || x = 0;\n LL |     let y = &x; //~ ERROR\n    |             ^^ immutable borrow occurs here\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     - mutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/closure-borrow-spans.rs:56:13\n@@ -80,7 +80,7 @@ LL |     let f = || x = 0;\n LL |     let y = &mut x; //~ ERROR\n    |             ^^^^^^ second mutable borrow occurs here\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/closure-borrow-spans.rs:64:16\n@@ -128,7 +128,7 @@ LL |     let f = || *x = 0;\n LL |     let y = &x; //~ ERROR\n    |             ^^ borrow occurs here\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error[E0501]: cannot borrow `x` as mutable because previous closure requires unique access\n   --> $DIR/closure-borrow-spans.rs:89:13\n@@ -140,7 +140,7 @@ LL |     let f = || *x = 0;\n LL |     let y = &mut x; //~ ERROR\n    |             ^^^^^^ borrow occurs here\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     - first borrow later used here\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/closure-borrow-spans.rs:98:17"}, {"sha": "a22f3032f304986cc826cf2e7b63c6fdbf72a972", "filename": "src/test/ui/nll/get_default.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -43,7 +43,7 @@ LL |         match map.get() {\n LL |                 map.set(String::new()); // Ideally, this would not error.\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n    |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 26:1...\n+note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 26:1...\n   --> $DIR/get_default.rs:26:1\n    |\n LL | / fn ok(map: &mut Map) -> &String {\n@@ -64,7 +64,7 @@ LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n    |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n+note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n   --> $DIR/get_default.rs:41:1\n    |\n LL | / fn err(map: &mut Map) -> &String {\n@@ -85,7 +85,7 @@ LL |         match map.get() {\n LL |                 map.set(String::new()); // Ideally, just AST would error here\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n    |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n+note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n   --> $DIR/get_default.rs:41:1\n    |\n LL | / fn err(map: &mut Map) -> &String {"}, {"sha": "8c93eb059e8cdd80c59e2cc4eee358ec8b8b59b3", "filename": "src/test/ui/nll/get_default.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -43,7 +43,7 @@ LL |         match map.get() {\n LL |                 map.set(String::new()); // Ideally, this would not error.\n    |                 ^^^ mutable borrow occurs here\n    |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 26:1...\n+note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 26:1...\n   --> $DIR/get_default.rs:26:1\n    |\n LL | / fn ok(map: &mut Map) -> &String {\n@@ -64,7 +64,7 @@ LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n    |                 ^^^ mutable borrow occurs here\n    |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n+note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n   --> $DIR/get_default.rs:41:1\n    |\n LL | / fn err(map: &mut Map) -> &String {\n@@ -85,7 +85,7 @@ LL |         match map.get() {\n LL |                 map.set(String::new()); // Ideally, just AST would error here\n    |                 ^^^ mutable borrow occurs here\n    |\n-note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n+note: immutable borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 41:1...\n   --> $DIR/get_default.rs:41:1\n    |\n LL | / fn err(map: &mut Map) -> &String {"}, {"sha": "44f7c52d2573253502ffec326ee34b7e6c470463", "filename": "src/test/ui/nll/issue-51268.stderr", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51268.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,19 +1,16 @@\n error[E0502]: cannot borrow `self.thing` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-51268.rs:28:9\n    |\n-LL |            self.thing.bar(|| {\n-   |            ^              -- immutable borrow occurs here\n-   |   _________|\n-   |  |_________|\n-   | ||\n-LL | ||         //~^ ERROR cannot borrow `self.thing` as mutable because it is also borrowed as immutable [E0502]\n-LL | ||             &self.number;\n-   | ||              ---- first borrow occurs due to use of `self` in closure\n-LL | ||         });\n-   | ||          ^\n-   | ||__________|\n-   | |___________mutable borrow occurs here\n-   |             borrow later used here\n+LL |           self.thing.bar(|| {\n+   |           ^          --- -- immutable borrow occurs here\n+   |           |          |\n+   |  _________|          immutable borrow later used by call\n+   | |\n+LL | |         //~^ ERROR cannot borrow `self.thing` as mutable because it is also borrowed as immutable [E0502]\n+LL | |             &self.number;\n+   | |              ---- first borrow occurs due to use of `self` in closure\n+LL | |         });\n+   | |__________^ mutable borrow occurs here\n \n error: aborting due to previous error\n "}, {"sha": "2869035c3f3ed3fa97246cd7158b48f75f206acb", "filename": "src/test/ui/nll/loan_ends_mid_block_vec.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -80,7 +80,7 @@ LL |     data.push('d');\n    |     ^^^^ second mutable borrow occurs here\n ...\n LL |     capitalize(slice);\n-   |                ----- borrow later used here\n+   |                ----- first borrow later used here\n \n error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n   --> $DIR/loan_ends_mid_block_vec.rs:27:5\n@@ -92,7 +92,7 @@ LL |     data.push('e');\n    |     ^^^^ second mutable borrow occurs here\n ...\n LL |     capitalize(slice);\n-   |                ----- borrow later used here\n+   |                ----- first borrow later used here\n \n error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n   --> $DIR/loan_ends_mid_block_vec.rs:30:5\n@@ -104,7 +104,7 @@ LL |     data.push('f');\n    |     ^^^^ second mutable borrow occurs here\n ...\n LL |     capitalize(slice);\n-   |                ----- borrow later used here\n+   |                ----- first borrow later used here\n \n error: aborting due to 9 previous errors\n "}, {"sha": "c1bfa4bffc03cc236aac951c3be465e38fa27da7", "filename": "src/test/ui/nll/region-ends-after-if-condition.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -32,7 +32,7 @@ LL |         my_struct.field.push_str(\"Hello, world!\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n ...\n LL |     drop(value);\n-   |          ----- borrow later used here\n+   |          ----- immutable borrow later used here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "eaa5e815de8243552a7ff81a121026b75fac2c1e", "filename": "src/test/ui/nll/region-ends-after-if-condition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -32,7 +32,7 @@ LL |         my_struct.field.push_str(\"Hello, world!\");\n    |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n ...\n LL |     drop(value);\n-   |          ----- borrow later used here\n+   |          ----- immutable borrow later used here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d631bb58af62fb13004c30a99f5f2bb78f69f929", "filename": "src/test/ui/nll/return_from_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -32,7 +32,7 @@ LL |         my_struct.field.push_str(\"Hello, world!\");\n    |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |         value.len();\n-   |         ----- borrow later used here\n+   |         ----- first borrow later used here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f11cc77bbeaa12d871f7b3f957cbe8d1343262e6", "filename": "src/test/ui/regions/region-bound-on-closure-outlives-call.nll.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -2,12 +2,11 @@ error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/region-bound-on-closure-outlives-call.rs:12:25\n    |\n LL |     (|x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n-   |     --------------------^--\n-   |     ||   |              |\n-   |     ||   |              move out of `f` occurs here\n+   |     ----------          ^ move out of `f` occurs here\n+   |     ||   |\n    |     ||   borrow occurs due to use in closure\n    |     |borrow of `f` occurs here\n-   |     borrow later used here\n+   |     borrow later used by call\n \n error: aborting due to previous error\n "}, {"sha": "fa963714849b66f9836b2544ac15e62800682ccf", "filename": "src/test/ui/regions/regions-adjusted-lvalue-op.nll.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fregions%2Fregions-adjusted-lvalue-op.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fregions%2Fregions-adjusted-lvalue-op.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-adjusted-lvalue-op.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -2,21 +2,19 @@ error[E0502]: cannot borrow `v` as immutable because it is also borrowed as muta\n   --> $DIR/regions-adjusted-lvalue-op.rs:24:16\n    |\n LL |     v[0].oh_no(&v); //~ ERROR cannot borrow `v` as immutable because\n-   |     -----------^^-\n-   |     |          |\n-   |     |          immutable borrow occurs here\n+   |     -    ----- ^^ immutable borrow occurs here\n+   |     |    |\n+   |     |    mutable borrow later used by call\n    |     mutable borrow occurs here\n-   |     borrow later used here\n \n error[E0502]: cannot borrow `v` as immutable because it is also borrowed as mutable\n   --> $DIR/regions-adjusted-lvalue-op.rs:25:16\n    |\n LL |     (*v).oh_no(&v); //~ ERROR cannot borrow `v` as immutable because\n-   |     -----------^^-\n-   |     | |        |\n-   |     | |        immutable borrow occurs here\n-   |     | mutable borrow occurs here\n-   |     borrow later used here\n+   |       -  ----- ^^ immutable borrow occurs here\n+   |       |  |\n+   |       |  mutable borrow later used by call\n+   |       mutable borrow occurs here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "84cd097e33ca9fcb011226933197616c511fc8a2", "filename": "src/test/ui/rfc-2005-default-binding-mode/borrowck-issue-49631.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -7,7 +7,7 @@ LL |         foo.mutate();\n    |         ^^^^^^^^^^^^ mutable borrow occurs here\n LL |         //~^ ERROR cannot borrow `foo` as mutable\n LL |         println!(\"foo={:?}\", *string);\n-   |                              ------- borrow used here, in later iteration of loop\n+   |                              ------- immutable borrow used here, in later iteration of loop\n \n error: aborting due to previous error\n "}, {"sha": "978ca66a0890c16953ef9aeaa7a3fb5bd18b377e", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -1,16 +1,14 @@\n error[E0499]: cannot borrow `f` as mutable more than once at a time\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:22:16\n    |\n-LL |       f(Box::new(|| {\n-   |       -          ^^ second mutable borrow occurs here\n-   |       |\n-   |  _____first mutable borrow occurs here\n-   | |\n-LL | |     //~^ ERROR: cannot borrow `f` as mutable more than once\n-LL | |         f((Box::new(|| {})))\n-   | |         - second borrow occurs due to use of `f` in closure\n-LL | |     }));\n-   | |_______- borrow later used here\n+LL |     f(Box::new(|| {\n+   |     -          ^^ second mutable borrow occurs here\n+   |     |\n+   |     first mutable borrow occurs here\n+   |     first borrow later used by call\n+LL |     //~^ ERROR: cannot borrow `f` as mutable more than once\n+LL |         f((Box::new(|| {})))\n+   |         - second borrow occurs due to use of `f` in closure\n \n error[E0596]: cannot borrow `*f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:35:5\n@@ -40,17 +38,13 @@ LL |         foo(f);\n error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:65:16\n    |\n-LL |       f(Box::new(|a| {\n-   |       -          ^^^ move out of `f` occurs here\n-   |       |\n-   |  _____borrow of `f` occurs here\n-   | |\n-LL | |         foo(f);\n-   | |             - move occurs due to use in closure\n-LL | |         //~^ ERROR cannot move `f` into closure because it is borrowed\n-LL | |         //~| ERROR cannot move out of captured outer variable in an `FnMut` closure\n-LL | |     }), 3);\n-   | |__________- borrow later used here\n+LL |     f(Box::new(|a| {\n+   |     -          ^^^ move out of `f` occurs here\n+   |     |\n+   |     borrow of `f` occurs here\n+   |     borrow later used by call\n+LL |         foo(f);\n+   |             - move occurs due to use in closure\n \n error: aborting due to 5 previous errors\n "}, {"sha": "652a93e610f7e5a17014d5cd6a6945c2604219df", "filename": "src/test/ui/unboxed-closures/unboxed-closures-recursive-fn-using-fn-mut.nll.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-recursive-fn-using-fn-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-recursive-fn-using-fn-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-recursive-fn-using-fn-mut.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -2,11 +2,10 @@ error[E0499]: cannot borrow `*self` as mutable more than once at a time\n   --> $DIR/unboxed-closures-recursive-fn-using-fn-mut.rs:32:21\n    |\n LL |         (self.func)(self, arg)\n-   |         ------------^^^^------\n-   |         |           |\n-   |         |           second mutable borrow occurs here\n+   |         ----------- ^^^^ second mutable borrow occurs here\n+   |         |\n    |         first mutable borrow occurs here\n-   |         borrow later used here\n+   |         first borrow later used by call\n \n error: aborting due to previous error\n "}, {"sha": "a5c6e5f1110e1e0b860a7e5afb83a9b7e0600cf3", "filename": "src/test/ui/vec/vec-mut-iter-borrow.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fvec%2Fvec-mut-iter-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57f1c9c955177e2a7563dd59f9e3a70458e2be1/src%2Ftest%2Fui%2Fvec%2Fvec-mut-iter-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-mut-iter-borrow.nll.stderr?ref=a57f1c9c955177e2a7563dd59f9e3a70458e2be1", "patch": "@@ -5,7 +5,7 @@ LL |     for x in &mut xs {\n    |              -------\n    |              |\n    |              first mutable borrow occurs here\n-   |              borrow used here, in later iteration of loop\n+   |              first borrow used here, in later iteration of loop\n LL |         xs.push(1) //~ ERROR cannot borrow `xs`\n    |         ^^ second mutable borrow occurs here\n "}]}