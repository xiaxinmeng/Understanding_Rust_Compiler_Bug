{"sha": "5276b2967060d749e20674a08a2438a24f0f7b07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNzZiMjk2NzA2MGQ3NDllMjA2NzRhMDhhMjQzOGEyNGYwZjdiMDc=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-06-14T01:38:04Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-07-27T17:58:51Z"}, "message": "change confusing wording about discriminant", "tree": {"sha": "431fa4ed77362e8fca7db2be27a3ba746c5ff1e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/431fa4ed77362e8fca7db2be27a3ba746c5ff1e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5276b2967060d749e20674a08a2438a24f0f7b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5276b2967060d749e20674a08a2438a24f0f7b07", "html_url": "https://github.com/rust-lang/rust/commit/5276b2967060d749e20674a08a2438a24f0f7b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5276b2967060d749e20674a08a2438a24f0f7b07/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fae33352721c4b4d6fbdc66520043ae721121d77", "url": "https://api.github.com/repos/rust-lang/rust/commits/fae33352721c4b4d6fbdc66520043ae721121d77", "html_url": "https://github.com/rust-lang/rust/commit/fae33352721c4b4d6fbdc66520043ae721121d77"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "e63516e58ccfdb213128a59b028273b86c5b2536", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5276b2967060d749e20674a08a2438a24f0f7b07/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/5276b2967060d749e20674a08a2438a24f0f7b07/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=5276b2967060d749e20674a08a2438a24f0f7b07", "patch": "@@ -581,9 +581,9 @@ However, the language provides a workaround.\n As a special case, an `enum` is eligible for the \"nullable pointer optimization\" if it\n contains exactly two variants, one of which contains no data and the other contains\n a field of one of the non-nullable types listed above (or a struct containing such a type).\n-This means it is represented as a single pointer, and the non-data variant is represented as a\n-null pointer. This is called an \"optimization\", but unlike other optimizations it is guaranteed\n-to apply to eligible types.\n+This means no extra space is required for a discriminant; rather, the empty variant is represented\n+by putting a `null` value into the non-nullable field. This is called an \"optimization\", but unlike\n+other optimizations it is guaranteed to apply to eligible types.\n \n The most common type that takes advantage of the nullable pointer optimization is `Option<T>`,\n where `None` corresponds to `null`. So `Option<extern \"C\" fn(c_int) -> c_int>` is a correct way"}]}