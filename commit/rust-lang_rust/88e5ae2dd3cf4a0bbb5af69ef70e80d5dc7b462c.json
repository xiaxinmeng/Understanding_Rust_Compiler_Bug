{"sha": "88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "node_id": "C_kwDOAAsO6NoAKDg4ZTVhZTJkZDNjZjRhMGJiYjVhZjY5ZWY3MGU4MGQ1ZGM3YjQ2MmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-31T12:20:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-31T12:20:05Z"}, "message": "Rollup merge of #89786 - jkugelman:must-use-len-and-is_empty, r=joshtriplett\n\nAdd #[must_use] to len and is_empty\n\nParent issue: #89692\n\nr? `@joshtriplett`", "tree": {"sha": "2b75ed54b12905fbfd24ed552d20956ded93847f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b75ed54b12905fbfd24ed552d20956ded93847f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhfon2CRBK7hj4Ov3rIwAAtUMIAAygHZunPyLW6zaRhd7wQpHQ\ndwCEu2vLw6HfvQStvEVBBGs0RT32j+lijgLJnVyBstK9Ks6x6az9zIGlEeeHhoqS\nXhSFCE7FhFPxknMp+f9K4IRfNR3KnrdNmID7uX4eiR7L8SpcnCFqdry0swHY4aK9\nDGVYJcWgMvVZTjW4imOuHdDQIJ8xi4pR+o0a17WJlIhwuKFlZUQaO6DzlF+H6/ov\na5FCnF1IUGnxIYfKTEar/Qfgji9X5uA6ZLyA8bfau2gPyq//LeCyUifF9ZhwkZKP\np8KtPPjoL+WsbsF9Binx4dLptPj/WG5YIfxAXVVra8gpqWsHTDk/NxnrGpZXkv0=\n=fjgG\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b75ed54b12905fbfd24ed552d20956ded93847f\nparent 6c5aa765fb64758825fae0371b54ef07c3589e7a\nparent 6745e8da06e1fd313d2ff20ff9fe8d8dc4714479\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635682805 +0100\ncommitter GitHub <noreply@github.com> 1635682805 +0100\n\nRollup merge of #89786 - jkugelman:must-use-len-and-is_empty, r=joshtriplett\n\nAdd #[must_use] to len and is_empty\n\nParent issue: #89692\n\nr? `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "html_url": "https://github.com/rust-lang/rust/commit/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c5aa765fb64758825fae0371b54ef07c3589e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5aa765fb64758825fae0371b54ef07c3589e7a", "html_url": "https://github.com/rust-lang/rust/commit/6c5aa765fb64758825fae0371b54ef07c3589e7a"}, {"sha": "6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "url": "https://api.github.com/repos/rust-lang/rust/commits/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479", "html_url": "https://github.com/rust-lang/rust/commit/6745e8da06e1fd313d2ff20ff9fe8d8dc4714479"}], "stats": {"total": 100, "additions": 60, "deletions": 40}, "files": [{"sha": "7fb7686a6e29790a5320cddb774adcf73e92d91a", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -1052,6 +1052,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// assert_eq!(heap.len(), 2);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.data.len()\n@@ -1075,6 +1076,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// assert!(!heap.is_empty());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0"}, {"sha": "2ff7b0fbb759c0c64cbb46210b749bc142afc94f", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -2212,6 +2212,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// a.insert(1, \"a\");\n     /// assert_eq!(a.len(), 1);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {\n@@ -2232,6 +2233,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// a.insert(1, \"a\");\n     /// assert!(!a.is_empty());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn is_empty(&self) -> bool {"}, {"sha": "0322cabccde4b0f830acaf9f423de435cc36f9db", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -1046,6 +1046,7 @@ impl<T> BTreeSet<T> {\n     /// v.insert(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {\n@@ -1064,6 +1065,7 @@ impl<T> BTreeSet<T> {\n     /// v.insert(1);\n     /// assert!(!v.is_empty());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn is_empty(&self) -> bool {"}, {"sha": "2fc17a7c8603fc0b32afab1a79058d9043554d95", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -610,8 +610,8 @@ fn test_send() {\n #[test]\n fn test_ord_absence() {\n     fn set<K>(mut set: BTreeSet<K>) {\n-        set.is_empty();\n-        set.len();\n+        let _ = set.is_empty();\n+        let _ = set.len();\n         set.clear();\n         let _ = set.iter();\n         let _ = set.into_iter();"}, {"sha": "e4913b16adbe7722b14e755f25e5954ecda47168", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -583,6 +583,7 @@ impl<T> LinkedList<T> {\n     /// assert!(!dl.is_empty());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.head.is_none()\n@@ -609,6 +610,7 @@ impl<T> LinkedList<T> {\n     /// assert_eq!(dl.len(), 3);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.len"}, {"sha": "906b0187f7babf540932b2cd408f71b88b308782", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -1547,6 +1547,7 @@ impl String {\n     /// assert_eq!(fancy_f.chars().count(), 3);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.vec.len()\n@@ -1566,6 +1567,7 @@ impl String {\n     /// assert!(!v.is_empty());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0"}, {"sha": "58110b068094381e9ac2e74130dab235c9608bf2", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -449,6 +449,7 @@ impl<T> NonNull<[T]> {\n     /// ```\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n+    #[must_use]\n     #[inline]\n     pub const fn len(self) -> usize {\n         self.as_ptr().len()"}, {"sha": "cd5ed35be79ba6769938b11624d94b99d941e7c8", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -140,6 +140,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn len(&self) -> usize {\n         self.as_bytes().len()\n@@ -158,9 +159,10 @@ impl str {\n     /// let s = \"not empty\";\n     /// assert!(!s.is_empty());\n     /// ```\n-    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]\n+    #[must_use]\n+    #[inline]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "d7587e85c66841dc71e07144fb54dafba32808f8", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -669,6 +669,7 @@ impl OsStr {\n     /// assert!(!os_str.is_empty());\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_empty(&self) -> bool {\n         self.inner.inner.is_empty()\n@@ -700,6 +701,7 @@ impl OsStr {\n     /// assert_eq!(os_str.len(), 3);\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn len(&self) -> usize {\n         self.inner.inner.len()"}, {"sha": "69eca507c7117206539066a7e6565bdf8111b508", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -1080,6 +1080,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> u64 {\n         self.0.size()"}, {"sha": "353bf2f11665ab520409a081b2e31001c6eb7e56", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -431,12 +431,14 @@ impl<'a> SocketAncillary<'a> {\n     }\n \n     /// Returns `true` if the ancillary data is empty.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn is_empty(&self) -> bool {\n         self.length == 0\n     }\n \n     /// Returns the number of used bytes.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn len(&self) -> usize {\n         self.length"}, {"sha": "90a6eef75261f505c6fd517b1280c548581f2d8e", "filename": "src/tools/clippy/tests/ui/iter_count.fixed", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.fixed?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -33,6 +33,7 @@ impl HasIter {\n     }\n }\n \n+#[allow(unused_must_use)]\n fn main() {\n     let mut vec = vec![0, 1, 2, 3];\n     let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n@@ -50,7 +51,7 @@ fn main() {\n     linked_list.push_back(1);\n     binary_heap.push(1);\n \n-    let _ = &vec[..].len();\n+    &vec[..].len();\n     vec.len();\n     boxed_slice.len();\n     vec_deque.len();\n@@ -62,13 +63,13 @@ fn main() {\n     binary_heap.len();\n \n     vec.len();\n-    let _ = &vec[..].len();\n+    &vec[..].len();\n     vec_deque.len();\n     hash_map.len();\n     b_tree_map.len();\n     linked_list.len();\n \n-    let _ = &vec[..].len();\n+    &vec[..].len();\n     vec.len();\n     vec_deque.len();\n     hash_set.len();"}, {"sha": "6681a480a28c817472eb5bdb1976bb5a948cd61b", "filename": "src/tools/clippy/tests/ui/iter_count.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.rs?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -33,6 +33,7 @@ impl HasIter {\n     }\n }\n \n+#[allow(unused_must_use)]\n fn main() {\n     let mut vec = vec![0, 1, 2, 3];\n     let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n@@ -50,7 +51,7 @@ fn main() {\n     linked_list.push_back(1);\n     binary_heap.push(1);\n \n-    let _ = &vec[..].iter().count();\n+    &vec[..].iter().count();\n     vec.iter().count();\n     boxed_slice.iter().count();\n     vec_deque.iter().count();\n@@ -62,13 +63,13 @@ fn main() {\n     binary_heap.iter().count();\n \n     vec.iter_mut().count();\n-    let _ = &vec[..].iter_mut().count();\n+    &vec[..].iter_mut().count();\n     vec_deque.iter_mut().count();\n     hash_map.iter_mut().count();\n     b_tree_map.iter_mut().count();\n     linked_list.iter_mut().count();\n \n-    let _ = &vec[..].into_iter().count();\n+    &vec[..].into_iter().count();\n     vec.into_iter().count();\n     vec_deque.into_iter().count();\n     hash_set.into_iter().count();"}, {"sha": "2e3d7fc35de9c0de17d3f712bbc87a892c90dbad", "filename": "src/tools/clippy/tests/ui/iter_count.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.stderr?ref=88e5ae2dd3cf4a0bbb5af69ef70e80d5dc7b462c", "patch": "@@ -1,151 +1,151 @@\n error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:53:14\n+  --> $DIR/iter_count.rs:54:6\n    |\n-LL |     let _ = &vec[..].iter().count();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     &vec[..].iter().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n    |\n    = note: `-D clippy::iter-count` implied by `-D warnings`\n \n error: called `.iter().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:54:5\n+  --> $DIR/iter_count.rs:55:5\n    |\n LL |     vec.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:55:5\n+  --> $DIR/iter_count.rs:56:5\n    |\n LL |     boxed_slice.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `boxed_slice.len()`\n \n error: called `.iter().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:56:5\n+  --> $DIR/iter_count.rs:57:5\n    |\n LL |     vec_deque.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n error: called `.iter().count()` on a `HashSet`\n-  --> $DIR/iter_count.rs:57:5\n+  --> $DIR/iter_count.rs:58:5\n    |\n LL |     hash_set.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n \n error: called `.iter().count()` on a `HashMap`\n-  --> $DIR/iter_count.rs:58:5\n+  --> $DIR/iter_count.rs:59:5\n    |\n LL |     hash_map.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n \n error: called `.iter().count()` on a `BTreeMap`\n-  --> $DIR/iter_count.rs:59:5\n+  --> $DIR/iter_count.rs:60:5\n    |\n LL |     b_tree_map.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n \n error: called `.iter().count()` on a `BTreeSet`\n-  --> $DIR/iter_count.rs:60:5\n+  --> $DIR/iter_count.rs:61:5\n    |\n LL |     b_tree_set.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_set.len()`\n \n error: called `.iter().count()` on a `LinkedList`\n-  --> $DIR/iter_count.rs:61:5\n+  --> $DIR/iter_count.rs:62:5\n    |\n LL |     linked_list.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n \n error: called `.iter().count()` on a `BinaryHeap`\n-  --> $DIR/iter_count.rs:62:5\n+  --> $DIR/iter_count.rs:63:5\n    |\n LL |     binary_heap.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `binary_heap.len()`\n \n error: called `.iter_mut().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:64:5\n+  --> $DIR/iter_count.rs:65:5\n    |\n LL |     vec.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter_mut().count()` on a `slice`\n-  --> $DIR/iter_count.rs:65:14\n+  --> $DIR/iter_count.rs:66:6\n    |\n-LL |     let _ = &vec[..].iter_mut().count();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     &vec[..].iter_mut().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.iter_mut().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:66:5\n+  --> $DIR/iter_count.rs:67:5\n    |\n LL |     vec_deque.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n error: called `.iter_mut().count()` on a `HashMap`\n-  --> $DIR/iter_count.rs:67:5\n+  --> $DIR/iter_count.rs:68:5\n    |\n LL |     hash_map.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n \n error: called `.iter_mut().count()` on a `BTreeMap`\n-  --> $DIR/iter_count.rs:68:5\n+  --> $DIR/iter_count.rs:69:5\n    |\n LL |     b_tree_map.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n \n error: called `.iter_mut().count()` on a `LinkedList`\n-  --> $DIR/iter_count.rs:69:5\n+  --> $DIR/iter_count.rs:70:5\n    |\n LL |     linked_list.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n \n error: called `.into_iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:71:14\n+  --> $DIR/iter_count.rs:72:6\n    |\n-LL |     let _ = &vec[..].into_iter().count();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     &vec[..].into_iter().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.into_iter().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:72:5\n+  --> $DIR/iter_count.rs:73:5\n    |\n LL |     vec.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.into_iter().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:73:5\n+  --> $DIR/iter_count.rs:74:5\n    |\n LL |     vec_deque.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n error: called `.into_iter().count()` on a `HashSet`\n-  --> $DIR/iter_count.rs:74:5\n+  --> $DIR/iter_count.rs:75:5\n    |\n LL |     hash_set.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n \n error: called `.into_iter().count()` on a `HashMap`\n-  --> $DIR/iter_count.rs:75:5\n+  --> $DIR/iter_count.rs:76:5\n    |\n LL |     hash_map.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n \n error: called `.into_iter().count()` on a `BTreeMap`\n-  --> $DIR/iter_count.rs:76:5\n+  --> $DIR/iter_count.rs:77:5\n    |\n LL |     b_tree_map.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n \n error: called `.into_iter().count()` on a `BTreeSet`\n-  --> $DIR/iter_count.rs:77:5\n+  --> $DIR/iter_count.rs:78:5\n    |\n LL |     b_tree_set.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_set.len()`\n \n error: called `.into_iter().count()` on a `LinkedList`\n-  --> $DIR/iter_count.rs:78:5\n+  --> $DIR/iter_count.rs:79:5\n    |\n LL |     linked_list.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n \n error: called `.into_iter().count()` on a `BinaryHeap`\n-  --> $DIR/iter_count.rs:79:5\n+  --> $DIR/iter_count.rs:80:5\n    |\n LL |     binary_heap.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `binary_heap.len()`"}]}