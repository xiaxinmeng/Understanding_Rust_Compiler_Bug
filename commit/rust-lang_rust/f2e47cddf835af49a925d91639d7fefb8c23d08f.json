{"sha": "f2e47cddf835af49a925d91639d7fefb8c23d08f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZTQ3Y2RkZjgzNWFmNDlhOTI1ZDkxNjM5ZDdmZWZiOGMyM2QwOGY=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-03-06T20:38:13Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-03-29T17:53:00Z"}, "message": "change to parsing using tts\n\nalso, updates test cases a bit", "tree": {"sha": "62981d328a127ee25ea41164605d41e36acefebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62981d328a127ee25ea41164605d41e36acefebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2e47cddf835af49a925d91639d7fefb8c23d08f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2e47cddf835af49a925d91639d7fefb8c23d08f", "html_url": "https://github.com/rust-lang/rust/commit/f2e47cddf835af49a925d91639d7fefb8c23d08f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2e47cddf835af49a925d91639d7fefb8c23d08f/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "556143c488f8b8b2ac25ac29efdf030017cba7d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/556143c488f8b8b2ac25ac29efdf030017cba7d7", "html_url": "https://github.com/rust-lang/rust/commit/556143c488f8b8b2ac25ac29efdf030017cba7d7"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "1f463a1614d23394dc8bd44c0fec804d7d36cca7", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2e47cddf835af49a925d91639d7fefb8c23d08f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e47cddf835af49a925d91639d7fefb8c23d08f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=f2e47cddf835af49a925d91639d7fefb8c23d08f", "patch": "@@ -150,7 +150,7 @@ pub fn parse_input(sess: Session, +cfg: ast::crate_cfg, input: input)\n     -> @ast::crate {\n     match input {\n       file_input(ref file) => {\n-        parse::parse_crate_from_file(&(*file), cfg, sess.parse_sess)\n+        parse::parse_crate_from_file_using_tts(&(*file), cfg, sess.parse_sess)\n       }\n       str_input(ref src) => {\n         // FIXME (#2319): Don't really want to box the source string"}, {"sha": "10d3de4acee81e7aca27d270be6111c15f9543d9", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f2e47cddf835af49a925d91639d7fefb8c23d08f/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e47cddf835af49a925d91639d7fefb8c23d08f/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f2e47cddf835af49a925d91639d7fefb8c23d08f", "patch": "@@ -94,6 +94,19 @@ pub fn parse_crate_from_file(\n     // why is there no p.abort_if_errors here?\n }\n \n+pub fn parse_crate_from_file_using_tts(\n+    input: &Path,\n+    cfg: ast::crate_cfg,\n+    sess: @mut ParseSess\n+) -> @ast::crate {\n+    let p = new_parser_from_file(sess, /*bad*/ copy cfg, input);\n+    let tts = p.parse_all_token_trees();\n+    new_parser_from_tts(sess,cfg,tts).parse_crate_mod(/*bad*/ copy cfg)\n+    // why is there no p.abort_if_errors here?\n+}\n+\n+\n+\n pub fn parse_crate_from_source_str(\n     name: ~str,\n     source: @~str,\n@@ -317,17 +330,46 @@ mod test {\n     use std;\n     use core::io;\n     use core::option::None;\n+    use ast;\n \n     #[test] fn to_json_str<E : Encodable<std::json::Encoder>>(val: @E) -> ~str {\n         do io::with_str_writer |writer| {\n             val.encode(~std::json::Encoder(writer));\n         }\n     }\n \n+    fn string_to_crate (source_str : @~str) -> @ast::crate {\n+        parse_crate_from_source_str(\n+            ~\"bogofile\",\n+            source_str,\n+            ~[],\n+            new_parse_sess(None))\n+    }\n+\n+    fn string_to_tt_to_crate (source_str : @~str) -> @ast::crate {\n+        let tts = parse_tts_from_source_str(\n+            ~\"bogofile\",\n+           source_str,\n+           ~[],\n+           new_parse_sess(None));\n+        new_parser_from_tts(new_parse_sess(None),~[],tts)\n+            .parse_crate_mod(~[])\n+    }\n+\n+    // make sure that parsing from TTs produces the same result\n+    // as parsing from strings\n+    #[test] fn tts_produce_the_same_result () {\n+        let source_str = @~\"fn foo (x : int) { x; }\";\n+        assert_eq!(string_to_tt_to_crate(source_str),\n+                     string_to_crate(source_str));\n+    }\n+\n+    // check the contents of the tt manually:\n     #[test] fn alltts () {\n+        let source_str = @~\"fn foo (x : int) { x; }\";\n         let tts = parse_tts_from_source_str(\n             ~\"bogofile\",\n-            @~\"fn foo (x : int) { x; }\",\n+            source_str,\n             ~[],\n             new_parse_sess(None));\n         assert_eq!("}]}