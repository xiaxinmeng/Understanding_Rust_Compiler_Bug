{"sha": "e450646e97b09bda61c48cdfa902d1310fd8dc47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NTA2NDZlOTdiMDliZGE2MWM0OGNkZmE5MDJkMTMxMGZkOGRjNDc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-05T23:07:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-05T23:07:28Z"}, "message": "Rollup merge of #73973 - Nadrieril:fix-71977, r=matthewjasper\n\nUse `Span`s to identify unreachable subpatterns in or-patterns\n\nFixes #71977", "tree": {"sha": "3bde3507aab5602c134979d1bdb246b6000b3585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bde3507aab5602c134979d1bdb246b6000b3585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e450646e97b09bda61c48cdfa902d1310fd8dc47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfAl0xCRBK7hj4Ov3rIwAAdHIIAI2QEN/xh4inC1g9fUOtJskX\ngjD82sq7cn4TdqYGyZ34WjL/A/k+mJCMCKqIXop9yjDy7QCoxOItvc0rg8/NYvN3\n/XTI5II/nxOff6QbSflIuqlzDbKP1+yRIhMhI2SnAY7qezQfeWQvBLwPDBLmHQrC\n8RB6119sx4YElqj/xdimK5Rh/XnGXi8a42dLligCRYmlHELA/mU1ItqBTQ27imEV\nQnyvHigPukIEtgQOdEW2NWW5ce8PNBphUGZh3ctKyRpTWX//rZTgO+5Ag7R+CDYB\nZxD1aB4cjJrtaU5vzC1i9rAFsQ8byIpNWv8sc3IuPOp6/C8jqlSUZ4wp02mi1aY=\n=/pmJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 3bde3507aab5602c134979d1bdb246b6000b3585\nparent a1ac4d66d34ddd460aa432c904127f85cf5e6eae\nparent 3cb31b6699558737b1a4650537f0facdc8cb7852\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593990448 -0700\ncommitter GitHub <noreply@github.com> 1593990448 -0700\n\nRollup merge of #73973 - Nadrieril:fix-71977, r=matthewjasper\n\nUse `Span`s to identify unreachable subpatterns in or-patterns\n\nFixes #71977\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e450646e97b09bda61c48cdfa902d1310fd8dc47", "html_url": "https://github.com/rust-lang/rust/commit/e450646e97b09bda61c48cdfa902d1310fd8dc47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e450646e97b09bda61c48cdfa902d1310fd8dc47/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ac4d66d34ddd460aa432c904127f85cf5e6eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ac4d66d34ddd460aa432c904127f85cf5e6eae", "html_url": "https://github.com/rust-lang/rust/commit/a1ac4d66d34ddd460aa432c904127f85cf5e6eae"}, {"sha": "3cb31b6699558737b1a4650537f0facdc8cb7852", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb31b6699558737b1a4650537f0facdc8cb7852", "html_url": "https://github.com/rust-lang/rust/commit/3cb31b6699558737b1a4650537f0facdc8cb7852"}], "stats": {"total": 115, "additions": 90, "deletions": 25}, "files": [{"sha": "372cb783f503f7c7b16c5cd7cb2b61450da86f50", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e450646e97b09bda61c48cdfa902d1310fd8dc47/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e450646e97b09bda61c48cdfa902d1310fd8dc47/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=e450646e97b09bda61c48cdfa902d1310fd8dc47", "patch": "@@ -276,6 +276,7 @@ use self::Usefulness::*;\n use self::WitnessPreference::*;\n \n use rustc_data_structures::captures::Captures;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_index::vec::Idx;\n \n use super::{compare_const_vals, PatternFoldable, PatternFolder};\n@@ -1246,15 +1247,15 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n }\n \n #[derive(Clone, Debug)]\n-crate enum Usefulness<'tcx, 'p> {\n+crate enum Usefulness<'tcx> {\n     /// Carries a list of unreachable subpatterns. Used only in the presence of or-patterns.\n-    Useful(Vec<&'p Pat<'tcx>>),\n+    Useful(Vec<Span>),\n     /// Carries a list of witnesses of non-exhaustiveness.\n     UsefulWithWitness(Vec<Witness<'tcx>>),\n     NotUseful,\n }\n \n-impl<'tcx, 'p> Usefulness<'tcx, 'p> {\n+impl<'tcx> Usefulness<'tcx> {\n     fn new_useful(preference: WitnessPreference) -> Self {\n         match preference {\n             ConstructWitness => UsefulWithWitness(vec![Witness(vec![])]),\n@@ -1269,7 +1270,7 @@ impl<'tcx, 'p> Usefulness<'tcx, 'p> {\n         }\n     }\n \n-    fn apply_constructor(\n+    fn apply_constructor<'p>(\n         self,\n         cx: &MatchCheckCtxt<'p, 'tcx>,\n         ctor: &Constructor<'tcx>,\n@@ -1828,7 +1829,7 @@ crate fn is_useful<'p, 'tcx>(\n     hir_id: HirId,\n     is_under_guard: bool,\n     is_top_level: bool,\n-) -> Usefulness<'tcx, 'p> {\n+) -> Usefulness<'tcx> {\n     let &Matrix(ref rows) = matrix;\n     debug!(\"is_useful({:#?}, {:#?})\", matrix, v);\n \n@@ -1852,16 +1853,35 @@ crate fn is_useful<'p, 'tcx>(\n         // We need to push the already-seen patterns into the matrix in order to detect redundant\n         // branches like `Some(_) | Some(0)`. We also keep track of the unreachable subpatterns.\n         let mut matrix = matrix.clone();\n-        let mut unreachable_pats = Vec::new();\n+        // `Vec` of all the unreachable branches of the current or-pattern.\n+        let mut unreachable_branches = Vec::new();\n+        // Subpatterns that are unreachable from all branches. E.g. in the following case, the last\n+        // `true` is unreachable only from one branch, so it is overall reachable.\n+        // ```\n+        // match (true, true) {\n+        //     (true, true) => {}\n+        //     (false | true, false | true) => {}\n+        // }\n+        // ```\n+        let mut unreachable_subpats = FxHashSet::default();\n+        // Whether any branch at all is useful.\n         let mut any_is_useful = false;\n+\n         for v in vs {\n             let res = is_useful(cx, &matrix, &v, witness_preference, hir_id, is_under_guard, false);\n             match res {\n                 Useful(pats) => {\n-                    any_is_useful = true;\n-                    unreachable_pats.extend(pats);\n+                    if !any_is_useful {\n+                        any_is_useful = true;\n+                        // Initialize with the first set of unreachable subpatterns encountered.\n+                        unreachable_subpats = pats.into_iter().collect();\n+                    } else {\n+                        // Keep the patterns unreachable from both this and previous branches.\n+                        unreachable_subpats =\n+                            pats.into_iter().filter(|p| unreachable_subpats.contains(p)).collect();\n+                    }\n                 }\n-                NotUseful => unreachable_pats.push(v.head()),\n+                NotUseful => unreachable_branches.push(v.head().span),\n                 UsefulWithWitness(_) => {\n                     bug!(\"Encountered or-pat in `v` during exhaustiveness checking\")\n                 }\n@@ -1871,7 +1891,13 @@ crate fn is_useful<'p, 'tcx>(\n                 matrix.push(v);\n             }\n         }\n-        return if any_is_useful { Useful(unreachable_pats) } else { NotUseful };\n+        if any_is_useful {\n+            // Collect all the unreachable patterns.\n+            unreachable_branches.extend(unreachable_subpats);\n+            return Useful(unreachable_branches);\n+        } else {\n+            return NotUseful;\n+        }\n     }\n \n     // FIXME(Nadrieril): Hack to work around type normalization issues (see #72476).\n@@ -2014,7 +2040,7 @@ fn is_useful_specialized<'p, 'tcx>(\n     witness_preference: WitnessPreference,\n     hir_id: HirId,\n     is_under_guard: bool,\n-) -> Usefulness<'tcx, 'p> {\n+) -> Usefulness<'tcx> {\n     debug!(\"is_useful_specialized({:#?}, {:#?}, {:?})\", v, ctor, ty);\n \n     // We cache the result of `Fields::wildcards` because it is used a lot."}, {"sha": "2ae20f551be414defa7aa5be8eee6fe60a0e98bb", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e450646e97b09bda61c48cdfa902d1310fd8dc47/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e450646e97b09bda61c48cdfa902d1310fd8dc47/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=e450646e97b09bda61c48cdfa902d1310fd8dc47", "patch": "@@ -393,8 +393,8 @@ fn check_arms<'p, 'tcx>(\n                 }\n             }\n             Useful(unreachable_subpatterns) => {\n-                for pat in unreachable_subpatterns {\n-                    unreachable_pattern(cx.tcx, pat.span, id, None);\n+                for span in unreachable_subpatterns {\n+                    unreachable_pattern(cx.tcx, span, id, None);\n                 }\n             }\n             UsefulWithWitness(_) => bug!(),"}, {"sha": "a1147cb5cfc9c4d567b85c419e351b0db7cdb3b9", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e450646e97b09bda61c48cdfa902d1310fd8dc47/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e450646e97b09bda61c48cdfa902d1310fd8dc47/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs?ref=e450646e97b09bda61c48cdfa902d1310fd8dc47", "patch": "@@ -29,6 +29,9 @@ fn main() {\n         (1, 4 | 5) => {} //~ ERROR unreachable pattern\n         _ => {}\n     }\n+    match (true, true) {\n+        (false | true, false | true) => (),\n+    }\n     match (Some(0u8),) {\n         (None | Some(1 | 2),) => {}\n         (Some(1),) => {} //~ ERROR unreachable pattern\n@@ -67,4 +70,29 @@ fn main() {\n              | 1) => {}\n         _ => {}\n     }\n+\n+    // A subpattern that is only unreachable in one branch is overall reachable.\n+    match (true, true) {\n+        (true, true) => {}\n+        (false | true, false | true) => {}\n+    }\n+    match (true, true) {\n+        (true, false) => {}\n+        (false, true) => {}\n+        (false | true, false | true) => {}\n+    }\n+    // A subpattern that is unreachable in all branches is overall unreachable.\n+    match (true, true) {\n+        (false, true) => {}\n+        (true, true) => {}\n+        (false | true, false\n+            | true) => {} //~ ERROR unreachable\n+    }\n+    match (true, true) {\n+        (true, false) => {}\n+        (true, true) => {}\n+        (false\n+            | true, //~ ERROR unreachable\n+            false | true) => {}\n+    }\n }"}, {"sha": "d92b545a8694f8332488d1ab9c46822474f423aa", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.stderr", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e450646e97b09bda61c48cdfa902d1310fd8dc47/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e450646e97b09bda61c48cdfa902d1310fd8dc47/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr?ref=e450646e97b09bda61c48cdfa902d1310fd8dc47", "patch": "@@ -53,52 +53,64 @@ LL |         (1, 4 | 5) => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:34:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:37:9\n    |\n LL |         (Some(1),) => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:35:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:38:9\n    |\n LL |         (None,) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:40:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:43:9\n    |\n LL |         ((1..=4,),) => {}\n    |         ^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:45:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:48:14\n    |\n LL |         (1 | 1,) => {}\n    |              ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:52:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:53:15\n    |\n-LL |             | 0] => {}\n+LL |             | 0\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:50:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:55:15\n    |\n-LL |             | 0\n+LL |             | 0] => {}\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:60:10\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:63:10\n    |\n LL |         [1\n    |          ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:66:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:69:14\n    |\n LL |         Some(0\n    |              ^\n \n-error: aborting due to 16 previous errors\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:89:15\n+   |\n+LL |             | true) => {}\n+   |               ^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:95:15\n+   |\n+LL |             | true,\n+   |               ^^^^\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "067e617373a630c6a494418bdb185afdcd036bde", "filename": "src/test/ui/or-patterns/search-via-bindings.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e450646e97b09bda61c48cdfa902d1310fd8dc47/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e450646e97b09bda61c48cdfa902d1310fd8dc47/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs?ref=e450646e97b09bda61c48cdfa902d1310fd8dc47", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![feature(or_patterns)]\n-#![allow(unreachable_patterns)] // FIXME(or-patterns) this shouldn't trigger\n \n fn search(target: (bool, bool, bool)) -> u32 {\n     let x = ((false, true), (false, true), (false, true));"}]}