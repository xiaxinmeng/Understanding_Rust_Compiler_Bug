{"sha": "93e51b185a62c4a552e721461f0752f28c08fc53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZTUxYjE4NWE2MmM0YTU1MmU3MjE0NjFmMDc1MmYyOGMwOGZjNTM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-22T23:02:49Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-23T02:30:30Z"}, "message": "rustdoc: Fix visibility of trait and impl items", "tree": {"sha": "90bdfd43f78b985ad053d0293c97702a9fce8763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90bdfd43f78b985ad053d0293c97702a9fce8763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93e51b185a62c4a552e721461f0752f28c08fc53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93e51b185a62c4a552e721461f0752f28c08fc53", "html_url": "https://github.com/rust-lang/rust/commit/93e51b185a62c4a552e721461f0752f28c08fc53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93e51b185a62c4a552e721461f0752f28c08fc53/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22ddcd1a13082b7be0fc99b720677efd2b733816", "url": "https://api.github.com/repos/rust-lang/rust/commits/22ddcd1a13082b7be0fc99b720677efd2b733816", "html_url": "https://github.com/rust-lang/rust/commit/22ddcd1a13082b7be0fc99b720677efd2b733816"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "a116ed686d90e745609ffd49e18e2c1e521e4f20", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93e51b185a62c4a552e721461f0752f28c08fc53/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e51b185a62c4a552e721461f0752f28c08fc53/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=93e51b185a62c4a552e721461f0752f28c08fc53", "patch": "@@ -1096,7 +1096,10 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     AssocTypeItem(bounds.clean(cx), default.clean(cx))\n                 }\n             };\n-            Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n+            let what_rustc_thinks =\n+                Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n+            // Trait items always inherit the trait's visibility -- we don't want to show `pub`.\n+            Item { visibility: Inherited, ..what_rustc_thinks }\n         })\n     }\n }\n@@ -1131,7 +1134,21 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                     )\n                 }\n             };\n-            Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n+\n+            let what_rustc_thinks =\n+                Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n+            let parent_item = cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(self.hir_id));\n+            if let hir::ItemKind::Impl(impl_) = &parent_item.kind {\n+                if impl_.of_trait.is_some() {\n+                    // Trait impl items always inherit the impl's visibility --\n+                    // we don't want to show `pub`.\n+                    Item { visibility: Inherited, ..what_rustc_thinks }\n+                } else {\n+                    what_rustc_thinks\n+                }\n+            } else {\n+                panic!(\"found impl item with non-impl parent {:?}\", parent_item);\n+            }\n         })\n     }\n }"}, {"sha": "beb638406c4bed54cc3683ead73f57ee53bb15ca", "filename": "src/test/rustdoc/visibility.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/93e51b185a62c4a552e721461f0752f28c08fc53/src%2Ftest%2Frustdoc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e51b185a62c4a552e721461f0752f28c08fc53/src%2Ftest%2Frustdoc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fvisibility.rs?ref=93e51b185a62c4a552e721461f0752f28c08fc53", "patch": "@@ -42,3 +42,35 @@ mod a {\n         struct FooBPriv;\n     }\n }\n+\n+// @has 'foo/trait.PubTrait.html' '//pre' 'pub trait PubTrait'\n+//\n+// @has 'foo/trait.PubTrait.html' '//pre' 'type Type;'\n+// @!has 'foo/trait.PubTrait.html' '//pre' 'pub type Type;'\n+//\n+// @has 'foo/trait.PubTrait.html' '//pre' 'const CONST: usize;'\n+// @!has 'foo/trait.PubTrait.html' '//pre' 'pub const CONST: usize;'\n+//\n+// @has 'foo/trait.PubTrait.html' '//pre' 'fn function();'\n+// @!has 'foo/trait.PubTrait.html' '//pre' 'pub fn function();'\n+\n+pub trait PubTrait {\n+    type Type;\n+    const CONST: usize;\n+    fn function();\n+}\n+\n+// @has 'foo/struct.FooPublic.html' '//code' 'type Type'\n+// @!has 'foo/struct.FooPublic.html' '//code' 'pub type Type'\n+//\n+// @has 'foo/struct.FooPublic.html' '//code' 'const CONST: usize'\n+// @!has 'foo/struct.FooPublic.html' '//code' 'pub const CONST: usize'\n+//\n+// @has 'foo/struct.FooPublic.html' '//code' 'fn function()'\n+// @!has 'foo/struct.FooPublic.html' '//code' 'pub fn function()'\n+\n+impl PubTrait for FooPublic {\n+    type Type = usize;\n+    const CONST: usize = 0;\n+    fn function() {}\n+}"}]}