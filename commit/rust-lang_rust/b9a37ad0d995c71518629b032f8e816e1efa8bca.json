{"sha": "b9a37ad0d995c71518629b032f8e816e1efa8bca", "node_id": "C_kwDOAAsO6NoAKGI5YTM3YWQwZDk5NWM3MTUxODYyOWIwMzJmOGU4MTZlMWVmYThiY2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-11T10:37:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-11T10:37:52Z"}, "message": "Auto merge of #91776 - matthiaskrgr:rollup-tlb4bw1, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #91127 (Add `<*{const|mut} T>::{to|from}_bits`)\n - #91310 (Add --out-dir flag for rustdoc)\n - #91373 (Add needs-unwind to tests that depend on panicking)\n - #91426 (Make IdFunctor::try_map_id panic-safe)\n - #91515 (Add rsplit_array variants to slices and arrays)\n - #91553 (socket ancillary data implementation for dragonflybsd.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "57b8f04dfb65960fab67fea155d939ab6a8f8886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57b8f04dfb65960fab67fea155d939ab6a8f8886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9a37ad0d995c71518629b032f8e816e1efa8bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a37ad0d995c71518629b032f8e816e1efa8bca", "html_url": "https://github.com/rust-lang/rust/commit/b9a37ad0d995c71518629b032f8e816e1efa8bca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9a37ad0d995c71518629b032f8e816e1efa8bca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a66a704b2c3d30ff07d89380ebb9ba3de3b3182", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a66a704b2c3d30ff07d89380ebb9ba3de3b3182", "html_url": "https://github.com/rust-lang/rust/commit/4a66a704b2c3d30ff07d89380ebb9ba3de3b3182"}, {"sha": "5da73311be4c6cefc557c8615d39b0e44ef8de95", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da73311be4c6cefc557c8615d39b0e44ef8de95", "html_url": "https://github.com/rust-lang/rust/commit/5da73311be4c6cefc557c8615d39b0e44ef8de95"}], "stats": {"total": 600, "additions": 561, "deletions": 39}, "files": [{"sha": "a3d3f988344c6e0663c6f980494da10354b4725e", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -34,38 +34,43 @@ impl<T> IdFunctor for Vec<T> {\n     type Inner = T;\n \n     #[inline]\n-    fn try_map_id<F, E>(mut self, mut f: F) -> Result<Self, E>\n+    fn try_map_id<F, E>(self, mut f: F) -> Result<Self, E>\n     where\n         F: FnMut(Self::Inner) -> Result<Self::Inner, E>,\n     {\n-        // FIXME: We don't really care about panics here and leak\n-        // far more than we should, but that should be fine for now.\n-        let len = self.len();\n-        unsafe {\n-            self.set_len(0);\n-            let start = self.as_mut_ptr();\n-            for i in 0..len {\n-                let p = start.add(i);\n-                match f(p.read()) {\n-                    Ok(val) => p.write(val),\n-                    Err(err) => {\n-                        // drop all other elements in self\n-                        // (current element was \"moved\" into the call to f)\n-                        for j in (0..i).chain(i + 1..len) {\n-                            start.add(j).drop_in_place();\n-                        }\n+        struct HoleVec<T> {\n+            vec: Vec<mem::ManuallyDrop<T>>,\n+            hole: Option<usize>,\n+        }\n \n-                        // returning will drop self, releasing the allocation\n-                        // (len is 0 so elements will not be re-dropped)\n-                        return Err(err);\n+        impl<T> Drop for HoleVec<T> {\n+            fn drop(&mut self) {\n+                unsafe {\n+                    for (index, slot) in self.vec.iter_mut().enumerate() {\n+                        if self.hole != Some(index) {\n+                            mem::ManuallyDrop::drop(slot);\n+                        }\n                     }\n                 }\n             }\n-            // Even if we encountered an error, set the len back\n-            // so we don't leak memory.\n-            self.set_len(len);\n         }\n-        Ok(self)\n+\n+        unsafe {\n+            let (ptr, length, capacity) = self.into_raw_parts();\n+            let vec = Vec::from_raw_parts(ptr.cast(), length, capacity);\n+            let mut hole_vec = HoleVec { vec, hole: None };\n+\n+            for (index, slot) in hole_vec.vec.iter_mut().enumerate() {\n+                hole_vec.hole = Some(index);\n+                let original = mem::ManuallyDrop::take(slot);\n+                let mapped = f(original)?;\n+                *slot = mem::ManuallyDrop::new(mapped);\n+                hole_vec.hole = None;\n+            }\n+\n+            mem::forget(hole_vec);\n+            Ok(Vec::from_raw_parts(ptr, length, capacity))\n+        }\n     }\n }\n "}, {"sha": "181e5180d53d5b67da9a50b8b0f8af8aa7d7134a", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -23,6 +23,7 @@\n #![feature(once_cell)]\n #![feature(test)]\n #![feature(thread_id_value)]\n+#![feature(vec_into_raw_parts)]\n #![allow(rustc::default_hash_types)]\n #![deny(unaligned_references)]\n "}, {"sha": "5e295ffbff7409815866a0b967ad163de077d69f", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -645,6 +645,84 @@ impl<T, const N: usize> [T; N] {\n     pub fn split_array_mut<const M: usize>(&mut self) -> (&mut [T; M], &mut [T]) {\n         (&mut self[..]).split_array_mut::<M>()\n     }\n+\n+    /// Divides one array reference into two at an index from the end.\n+    ///\n+    /// The first will contain all indices from `[0, N - M)` (excluding\n+    /// the index `N - M` itself) and the second will contain all\n+    /// indices from `[N - M, N)` (excluding the index `N` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `M > N`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let v = [1, 2, 3, 4, 5, 6];\n+    ///\n+    /// {\n+    ///    let (left, right) = v.rsplit_array_ref::<0>();\n+    ///    assert_eq!(left, &[1, 2, 3, 4, 5, 6]);\n+    ///    assert_eq!(right, &[]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.rsplit_array_ref::<2>();\n+    ///     assert_eq!(left, &[1, 2, 3, 4]);\n+    ///     assert_eq!(right, &[5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.rsplit_array_ref::<6>();\n+    ///     assert_eq!(left, &[]);\n+    ///     assert_eq!(right, &[1, 2, 3, 4, 5, 6]);\n+    /// }\n+    /// ```\n+    #[unstable(\n+        feature = \"split_array\",\n+        reason = \"return type should have array as 2nd element\",\n+        issue = \"90091\"\n+    )]\n+    #[inline]\n+    pub fn rsplit_array_ref<const M: usize>(&self) -> (&[T], &[T; M]) {\n+        (&self[..]).rsplit_array_ref::<M>()\n+    }\n+\n+    /// Divides one mutable array reference into two at an index from the end.\n+    ///\n+    /// The first will contain all indices from `[0, N - M)` (excluding\n+    /// the index `N - M` itself) and the second will contain all\n+    /// indices from `[N - M, N)` (excluding the index `N` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `M > N`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let mut v = [1, 0, 3, 0, 5, 6];\n+    /// let (left, right) = v.rsplit_array_mut::<4>();\n+    /// assert_eq!(left, &mut [1, 0]);\n+    /// assert_eq!(right, &mut [3, 0, 5, 6][..]);\n+    /// left[1] = 2;\n+    /// right[1] = 4;\n+    /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);\n+    /// ```\n+    #[unstable(\n+        feature = \"split_array\",\n+        reason = \"return type should have array as 2nd element\",\n+        issue = \"90091\"\n+    )]\n+    #[inline]\n+    pub fn rsplit_array_mut<const M: usize>(&mut self) -> (&mut [T], &mut [T; M]) {\n+        (&mut self[..]).rsplit_array_mut::<M>()\n+    }\n }\n \n /// Pulls `N` items from `iter` and returns them as an array. If the iterator"}, {"sha": "3c716672113e5a405fe0bf8e4cec9973fc397630", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -48,6 +48,54 @@ impl<T: ?Sized> *const T {\n         self as _\n     }\n \n+    /// Casts a pointer to its raw bits.\n+    ///\n+    /// This is equivalent to `as usize`, but is more specific to enhance readability.\n+    /// The inverse method is [`from_bits`](#method.from_bits).\n+    ///\n+    /// In particular, `*p as usize` and `p as usize` will both compile for\n+    /// pointers to numeric types but do very different things, so using this\n+    /// helps emphasize that reading the bits was intentional.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// let array = [13, 42];\n+    /// let p0: *const i32 = &array[0];\n+    /// assert_eq!(<*const _>::from_bits(p0.to_bits()), p0);\n+    /// let p1: *const i32 = &array[1];\n+    /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn to_bits(self) -> usize\n+    where\n+        T: Sized,\n+    {\n+        self as usize\n+    }\n+\n+    /// Creates a pointer from its raw bits.\n+    ///\n+    /// This is equivalent to `as *const T`, but is more specific to enhance readability.\n+    /// The inverse method is [`to_bits`](#method.to_bits).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// use std::ptr::NonNull;\n+    /// let dangling: *const u8 = NonNull::dangling().as_ptr();\n+    /// assert_eq!(<*const u8>::from_bits(1), dangling);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn from_bits(bits: usize) -> Self\n+    where\n+        T: Sized,\n+    {\n+        bits as Self\n+    }\n+\n     /// Decompose a (possibly wide) pointer into its address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts`]."}, {"sha": "5d4e37641ee84fc719f5abcca5ccfbd9da601fdd", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -47,6 +47,55 @@ impl<T: ?Sized> *mut T {\n         self as _\n     }\n \n+    /// Casts a pointer to its raw bits.\n+    ///\n+    /// This is equivalent to `as usize`, but is more specific to enhance readability.\n+    /// The inverse method is [`from_bits`](#method.from_bits-1).\n+    ///\n+    /// In particular, `*p as usize` and `p as usize` will both compile for\n+    /// pointers to numeric types but do very different things, so using this\n+    /// helps emphasize that reading the bits was intentional.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// let mut array = [13, 42];\n+    /// let mut it = array.iter_mut();\n+    /// let p0: *mut i32 = it.next().unwrap();\n+    /// assert_eq!(<*mut _>::from_bits(p0.to_bits()), p0);\n+    /// let p1: *mut i32 = it.next().unwrap();\n+    /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn to_bits(self) -> usize\n+    where\n+        T: Sized,\n+    {\n+        self as usize\n+    }\n+\n+    /// Creates a pointer from its raw bits.\n+    ///\n+    /// This is equivalent to `as *mut T`, but is more specific to enhance readability.\n+    /// The inverse method is [`to_bits`](#method.to_bits-1).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// use std::ptr::NonNull;\n+    /// let dangling: *mut u8 = NonNull::dangling().as_ptr();\n+    /// assert_eq!(<*mut u8>::from_bits(1), dangling);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn from_bits(bits: usize) -> Self\n+    where\n+        T: Sized,\n+    {\n+        bits as Self\n+    }\n+\n     /// Decompose a (possibly wide) pointer into its address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts_mut`]."}, {"sha": "f9ea99ea8aa5c089b2682f61e2566269cadc40bb", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1705,6 +1705,84 @@ impl<T> [T] {\n         unsafe { (&mut *(a.as_mut_ptr() as *mut [T; N]), b) }\n     }\n \n+    /// Divides one slice into an array and a remainder slice at an index from\n+    /// the end.\n+    ///\n+    /// The slice will contain all indices from `[0, len - N)` (excluding\n+    /// the index `len - N` itself) and the array will contain all\n+    /// indices from `[len - N, len)` (excluding the index `len` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N > len`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let v = &[1, 2, 3, 4, 5, 6][..];\n+    ///\n+    /// {\n+    ///    let (left, right) = v.rsplit_array_ref::<0>();\n+    ///    assert_eq!(left, [1, 2, 3, 4, 5, 6]);\n+    ///    assert_eq!(right, &[]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.rsplit_array_ref::<2>();\n+    ///     assert_eq!(left, [1, 2, 3, 4]);\n+    ///     assert_eq!(right, &[5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.rsplit_array_ref::<6>();\n+    ///     assert_eq!(left, []);\n+    ///     assert_eq!(right, &[1, 2, 3, 4, 5, 6]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"split_array\", reason = \"new API\", issue = \"90091\")]\n+    #[inline]\n+    pub fn rsplit_array_ref<const N: usize>(&self) -> (&[T], &[T; N]) {\n+        assert!(N <= self.len());\n+        let (a, b) = self.split_at(self.len() - N);\n+        // SAFETY: b points to [T; N]? Yes it's [T] of length N (checked by split_at)\n+        unsafe { (a, &*(b.as_ptr() as *const [T; N])) }\n+    }\n+\n+    /// Divides one mutable slice into an array and a remainder slice at an\n+    /// index from the end.\n+    ///\n+    /// The slice will contain all indices from `[0, len - N)` (excluding\n+    /// the index `N` itself) and the array will contain all\n+    /// indices from `[len - N, len)` (excluding the index `len` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N > len`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(split_array)]\n+    ///\n+    /// let mut v = &mut [1, 0, 3, 0, 5, 6][..];\n+    /// let (left, right) = v.rsplit_array_mut::<4>();\n+    /// assert_eq!(left, [1, 0]);\n+    /// assert_eq!(right, &mut [3, 0, 5, 6]);\n+    /// left[1] = 2;\n+    /// right[1] = 4;\n+    /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);\n+    /// ```\n+    #[unstable(feature = \"split_array\", reason = \"new API\", issue = \"90091\")]\n+    #[inline]\n+    pub fn rsplit_array_mut<const N: usize>(&mut self) -> (&mut [T], &mut [T; N]) {\n+        assert!(N <= self.len());\n+        let (a, b) = self.split_at_mut(self.len() - N);\n+        // SAFETY: b points to [T; N]? Yes it's [T] of length N (checked by split_at_mut)\n+        unsafe { (a, &mut *(b.as_mut_ptr() as *mut [T; N])) }\n+    }\n+\n     /// Returns an iterator over subslices separated by elements that match\n     /// `pred`. The matched element is not contained in the subslices.\n     ///"}, {"sha": "8524a0bf8dd6a8ed86d22e33d046962e6d3fbcad", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -459,6 +459,23 @@ fn array_split_array_mut() {\n     }\n }\n \n+#[test]\n+fn array_rsplit_array_mut() {\n+    let mut v = [1, 2, 3, 4, 5, 6];\n+\n+    {\n+        let (left, right) = v.rsplit_array_mut::<0>();\n+        assert_eq!(left, &mut [1, 2, 3, 4, 5, 6]);\n+        assert_eq!(right, &mut []);\n+    }\n+\n+    {\n+        let (left, right) = v.rsplit_array_mut::<6>();\n+        assert_eq!(left, &mut []);\n+        assert_eq!(right, &mut [1, 2, 3, 4, 5, 6]);\n+    }\n+}\n+\n #[should_panic]\n #[test]\n fn array_split_array_ref_out_of_bounds() {\n@@ -475,6 +492,22 @@ fn array_split_array_mut_out_of_bounds() {\n     v.split_array_mut::<7>();\n }\n \n+#[should_panic]\n+#[test]\n+fn array_rsplit_array_ref_out_of_bounds() {\n+    let v = [1, 2, 3, 4, 5, 6];\n+\n+    v.rsplit_array_ref::<7>();\n+}\n+\n+#[should_panic]\n+#[test]\n+fn array_rsplit_array_mut_out_of_bounds() {\n+    let mut v = [1, 2, 3, 4, 5, 6];\n+\n+    v.rsplit_array_mut::<7>();\n+}\n+\n #[test]\n fn array_intoiter_advance_by() {\n     use std::cell::Cell;"}, {"sha": "20e2d8d47c0f5196d5482e4f117a8b41547064eb", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -2219,6 +2219,23 @@ fn slice_split_array_mut() {\n     }\n }\n \n+#[test]\n+fn slice_rsplit_array_mut() {\n+    let v = &mut [1, 2, 3, 4, 5, 6][..];\n+\n+    {\n+        let (left, right) = v.rsplit_array_mut::<0>();\n+        assert_eq!(left, [1, 2, 3, 4, 5, 6]);\n+        assert_eq!(right, &mut []);\n+    }\n+\n+    {\n+        let (left, right) = v.rsplit_array_mut::<6>();\n+        assert_eq!(left, []);\n+        assert_eq!(right, &mut [1, 2, 3, 4, 5, 6]);\n+    }\n+}\n+\n #[should_panic]\n #[test]\n fn slice_split_array_ref_out_of_bounds() {\n@@ -2235,6 +2252,22 @@ fn slice_split_array_mut_out_of_bounds() {\n     v.split_array_mut::<7>();\n }\n \n+#[should_panic]\n+#[test]\n+fn slice_rsplit_array_ref_out_of_bounds() {\n+    let v = &[1, 2, 3, 4, 5, 6][..];\n+\n+    v.rsplit_array_ref::<7>();\n+}\n+\n+#[should_panic]\n+#[test]\n+fn slice_rsplit_array_mut_out_of_bounds() {\n+    let v = &mut [1, 2, 3, 4, 5, 6][..];\n+\n+    v.rsplit_array_mut::<7>();\n+}\n+\n macro_rules! take_tests {\n     (slice: &[], $($tts:tt)*) => {\n         take_tests!(ty: &[()], slice: &[], $($tts)*);"}, {"sha": "a29008140f784fbde78e86c5926e732498728c79", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -16,6 +16,8 @@ mod libc {\n     pub use libc::c_int;\n     pub struct ucred;\n     pub struct cmsghdr;\n+    #[cfg(target_os = \"dragonfly\")]\n+    pub struct cmsgcred;\n     pub type pid_t = i32;\n     pub type gid_t = u32;\n     pub type uid_t = u32;\n@@ -183,6 +185,11 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n #[derive(Clone)]\n pub struct SocketCred(libc::ucred);\n \n+#[cfg(target_os = \"dragonfly\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+#[derive(Clone)]\n+pub struct SocketCred(libc::cmsgcred);\n+\n #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n impl SocketCred {\n     /// Create a Unix credential struct.\n@@ -234,6 +241,57 @@ impl SocketCred {\n     }\n }\n \n+#[cfg(target_os = \"dragonfly\")]\n+impl SocketCred {\n+    /// Create a Unix credential struct.\n+    ///\n+    /// PID, UID and GID is set to 0.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    #[must_use]\n+    pub fn new() -> SocketCred {\n+        SocketCred(libc::cmsgcred { cmsgcred_pid: 0, cmsgcred_uid: 0, cmsgcred_gid: 0 })\n+    }\n+\n+    /// Set the PID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_pid(&mut self, pid: libc::pid_t) {\n+        self.0.cmsgcred_pid = pid;\n+    }\n+\n+    /// Get the current PID.\n+    #[must_use]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_pid(&self) -> libc::pid_t {\n+        self.0.cmsgcred_pid\n+    }\n+\n+    /// Set the UID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_uid(&mut self, uid: libc::uid_t) {\n+        self.0.cmsgcred_uid = uid;\n+    }\n+\n+    /// Get the current UID.\n+    #[must_use]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_uid(&self) -> libc::uid_t {\n+        self.0.cmsgcred_uid\n+    }\n+\n+    /// Set the GID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_gid(&mut self, gid: libc::gid_t) {\n+        self.0.cmsgcred_gid = gid;\n+    }\n+\n+    /// Get the current GID.\n+    #[must_use]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_gid(&self) -> libc::gid_t {\n+        self.0.cmsgcred_gid\n+    }\n+}\n+\n /// This control message contains file descriptors.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_RIGHTS`.\n@@ -256,7 +314,11 @@ impl<'a> Iterator for ScmRights<'a> {\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(target_os = \"dragonfly\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::cmsgcred>);\n+\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n@@ -300,7 +362,7 @@ impl<'a> AncillaryData<'a> {\n     /// # Safety\n     ///\n     /// `data` must contain a valid control message and the control message must be type of\n-    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDENTIALS`.\n+    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDS`.\n     #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     unsafe fn as_credentials(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n@@ -320,6 +382,9 @@ impl<'a> AncillaryData<'a> {\n                     libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n                     #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n+                    #[cfg(target_os = \"dragonfly\")]\n+                    libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n+\n                     cmsg_type => {\n                         Err(AncillaryError::Unknown { cmsg_level: libc::SOL_SOCKET, cmsg_type })\n                     }\n@@ -544,6 +609,19 @@ impl<'a> SocketAncillary<'a> {\n         )\n     }\n \n+    #[cfg(target_os = \"dragonfly\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n+        self.truncated = false;\n+        add_to_ancillary_data(\n+            &mut self.buffer,\n+            &mut self.length,\n+            creds,\n+            libc::SOL_SOCKET,\n+            libc::SCM_CREDS,\n+        )\n+    }\n+\n     /// Clears the ancillary data, removing all values.\n     ///\n     /// # Example"}, {"sha": "f23f8f94a242fdbd777e012424894201433b0af2", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -854,8 +854,14 @@ impl UnixDatagram {\n     ///\n     /// # Examples\n     ///\n-    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n-    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n+    #[cfg_attr(\n+        any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\"),\n+        doc = \"```no_run\"\n+    )]\n+    #[cfg_attr(\n+        not(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\")),\n+        doc = \"```ignore\"\n+    )]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n@@ -865,7 +871,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -877,7 +883,7 @@ impl UnixDatagram {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixDatagram::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "15d0dbe07fe7ec52f13e92b1896b9f320689c657", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -408,12 +408,12 @@ impl Socket {\n         Ok(raw != 0)\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         setsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED, passcred as libc::c_int)\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n     pub fn passcred(&self) -> io::Result<bool> {\n         let passcred: libc::c_int = getsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED)?;\n         Ok(passcred != 0)"}, {"sha": "9de2e733de7c722a7aa323e42725dabf4525ad6c", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -57,13 +57,13 @@ release: 1.17.0\n LLVM version: 3.9\n ```\n \n-## `-o`/`--output`: output path\n+## `-o`/`--out-dir`: output directory path\n \n Using this flag looks like this:\n \n ```bash\n $ rustdoc src/lib.rs -o target/doc\n-$ rustdoc src/lib.rs --output target/doc\n+$ rustdoc src/lib.rs --out-dir target/doc\n ```\n \n By default, `rustdoc`'s output appears in a directory named `doc` in"}, {"sha": "ee19567be102fe14169f6b41eb077bc2927031e3", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -504,8 +504,18 @@ impl Options {\n             return Err(1);\n         }\n \n-        let output =\n-            matches.opt_str(\"o\").map(|s| PathBuf::from(&s)).unwrap_or_else(|| PathBuf::from(\"doc\"));\n+        let out_dir = matches.opt_str(\"out-dir\").map(|s| PathBuf::from(&s));\n+        let output = matches.opt_str(\"output\").map(|s| PathBuf::from(&s));\n+        let output = match (out_dir, output) {\n+            (Some(_), Some(_)) => {\n+                diag.struct_err(\"cannot use both 'out-dir' and 'output' at once\").emit();\n+                return Err(1);\n+            }\n+            (Some(out_dir), None) => out_dir,\n+            (None, Some(output)) => output,\n+            (None, None) => PathBuf::from(\"doc\"),\n+        };\n+\n         let cfgs = matches.opt_strs(\"cfg\");\n \n         let extension_css = matches.opt_str(\"e\").map(|s| PathBuf::from(&s));"}, {"sha": "8699ab20b19d4f34873b37a076777cd93bc2753b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -278,7 +278,16 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optopt(\"r\", \"input-format\", \"the input type of the specified file\", \"[rust]\")\n         }),\n         stable(\"w\", |o| o.optopt(\"w\", \"output-format\", \"the output type to write\", \"[html]\")),\n-        stable(\"o\", |o| o.optopt(\"o\", \"output\", \"where to place the output\", \"PATH\")),\n+        stable(\"output\", |o| {\n+            o.optopt(\n+                \"\",\n+                \"output\",\n+                \"Which directory to place the output. \\\n+                 This option is deprecated, use --out-dir instead.\",\n+                \"PATH\",\n+            )\n+        }),\n+        stable(\"o\", |o| o.optopt(\"o\", \"out-dir\", \"which directory to place the output\", \"PATH\")),\n         stable(\"crate-name\", |o| {\n             o.optopt(\"\", \"crate-name\", \"specify the name of this crate\", \"NAME\")\n         }),"}, {"sha": "f79fce8eeeae1e1813e61a66b8872f10504c95f6", "filename": "src/test/run-make/rustdoc-with-out-dir-option/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-out-dir-option%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-out-dir-option%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-with-out-dir-option%2FMakefile?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -0,0 +1,8 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+OUTPUT_DIR := \"$(TMPDIR)/rustdoc\"\n+\n+all:\n+\t$(RUSTDOC) src/lib.rs --crate-name foobar --crate-type lib --out-dir $(OUTPUT_DIR)\n+\n+\t$(HTMLDOCCK) $(OUTPUT_DIR) src/lib.rs"}, {"sha": "044bb6acb19b80654f2d093b90f438d928c3358d", "filename": "src/test/run-make/rustdoc-with-out-dir-option/src/lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-out-dir-option%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-out-dir-option%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-with-out-dir-option%2Fsrc%2Flib.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -0,0 +1,2 @@\n+// @has foobar/fn.ok.html\n+pub fn ok() {}"}, {"sha": "654f9672588ed09dbf918c08b27a07397cb9e82e", "filename": "src/test/run-make/rustdoc-with-output-option/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-output-option%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-output-option%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-with-output-option%2FMakefile?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -0,0 +1,8 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+OUTPUT_DIR := \"$(TMPDIR)/rustdoc\"\n+\n+all:\n+\t$(RUSTDOC) src/lib.rs --crate-name foobar --crate-type lib --output $(OUTPUT_DIR)\n+\n+\t$(HTMLDOCCK) $(OUTPUT_DIR) src/lib.rs"}, {"sha": "044bb6acb19b80654f2d093b90f438d928c3358d", "filename": "src/test/run-make/rustdoc-with-output-option/src/lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-output-option%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-output-option%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-with-output-option%2Fsrc%2Flib.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -0,0 +1,2 @@\n+// @has foobar/fn.ok.html\n+pub fn ok() {}"}, {"sha": "1e9ba71de26496860ee22f31c47484648cbe885e", "filename": "src/test/run-make/rustdoc-with-short-out-dir-option/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-short-out-dir-option%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-short-out-dir-option%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-with-short-out-dir-option%2FMakefile?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -0,0 +1,8 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+OUTPUT_DIR := \"$(TMPDIR)/rustdoc\"\n+\n+all:\n+\t$(RUSTDOC) src/lib.rs --crate-name foobar --crate-type lib -o $(OUTPUT_DIR)\n+\n+\t$(HTMLDOCCK) $(OUTPUT_DIR) src/lib.rs"}, {"sha": "044bb6acb19b80654f2d093b90f438d928c3358d", "filename": "src/test/run-make/rustdoc-with-short-out-dir-option/src/lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-short-out-dir-option%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frun-make%2Frustdoc-with-short-out-dir-option%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-with-short-out-dir-option%2Fsrc%2Flib.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -0,0 +1,2 @@\n+// @has foobar/fn.ok.html\n+pub fn ok() {}"}, {"sha": "5037043f19ade2e540f7b94f5fc0775388f44124", "filename": "src/test/rustdoc-ui/use_both_out_dir_and_output_options.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frustdoc-ui%2Fuse_both_out_dir_and_output_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frustdoc-ui%2Fuse_both_out_dir_and_output_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fuse_both_out_dir_and_output_options.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -0,0 +1 @@\n+// compile-flags: --output ./foo"}, {"sha": "96d2295ac3e44a6aed2e9606758f48c13b2c47f7", "filename": "src/test/rustdoc-ui/use_both_out_dir_and_output_options.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frustdoc-ui%2Fuse_both_out_dir_and_output_options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Frustdoc-ui%2Fuse_both_out_dir_and_output_options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fuse_both_out_dir_and_output_options.stderr?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -0,0 +1,2 @@\n+error: cannot use both 'out-dir' and 'output' at once\n+"}, {"sha": "2b3ece67b34a0d537ffe3527b5e9d892b42b5b9d", "filename": "src/test/ui/array-slice-vec/box-of-array-of-drop-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n #![allow(overflowing_literals)]\n \n // Test that we cleanup a fixed size Box<[D; k]> properly when D has a"}, {"sha": "c0ca458750776770f06e4661634cbc8806b58168", "filename": "src/test/ui/array-slice-vec/box-of-array-of-drop-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n #![allow(overflowing_literals)]\n \n // Test that we cleanup dynamic sized Box<[D]> properly when D has a"}, {"sha": "b3ae683a8a61a297457486fda4c1b13b854c21df", "filename": "src/test/ui/array-slice-vec/nested-vec-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Farray-slice-vec%2Fnested-vec-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Farray-slice-vec%2Fnested-vec-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fnested-vec-3.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n #![allow(overflowing_literals)]\n \n // ignore-emscripten no threads support"}, {"sha": "3829078aba59253ff91c533e868b11da6ac65e35", "filename": "src/test/ui/array-slice-vec/slice-panic-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-1.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n \n // ignore-emscripten no threads support\n "}, {"sha": "d83c611d3bb5537ed8d972f069911ffa9e22c693", "filename": "src/test/ui/array-slice-vec/slice-panic-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-2.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n \n // ignore-emscripten no threads support\n "}, {"sha": "5e71229beb5f9d91ba078d0bca010416db4b2f5a", "filename": "src/test/ui/async-await/issues/issue-65419/issue-65419-async-fn-resume-after-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-async-fn-resume-after-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-async-fn-resume-after-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-async-fn-resume-after-panic.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -2,6 +2,7 @@\n // be talking about `async fn`s instead. Should also test what happens when it panics.\n \n // run-fail\n+// needs-unwind\n // error-pattern: thread 'main' panicked at '`async fn` resumed after panicking'\n // edition:2018\n // ignore-wasm no panic or subprocess support"}, {"sha": "684172ca61cca9259af30c3eb490c7850eccf8ce", "filename": "src/test/ui/binding/fn-arg-incomplete-pattern-drop-order.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // Check that partially moved from function parameters are dropped after the\n // named bindings that move from them.\n "}, {"sha": "3623c4a4dd05d8fce605726558c5da69d49855d8", "filename": "src/test/ui/builtin-clone-unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n \n #![allow(unused_variables)]\n #![allow(unused_imports)]"}, {"sha": "b31b5cab5b724aeaffb98b13f376ca6dbde1cad4", "filename": "src/test/ui/catch-unwind-bang.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n \n fn worker() -> ! {"}, {"sha": "6cd3781b76055437a24abc9418942207a7c23db4", "filename": "src/test/ui/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n \n #![allow(unused_must_use)]\n #![allow(dead_code)]"}, {"sha": "89f3931418dac1358d37994b96f48b03b3f0e9e1", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// needs-unwind\n \n #![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here"}, {"sha": "6b0b10521740e6dbb1c2ee6c8b62922defa8776d", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// needs-unwind\n \n #![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here"}, {"sha": "6594ec316532a997acd8a2dd0d68aa0197e8e937", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,5 +1,5 @@\n error: changes to closure capture in Rust 2021 will affect which traits the closure implements\n-  --> $DIR/mir_calls_to_shims.rs:20:38\n+  --> $DIR/mir_calls_to_shims.rs:21:38\n    |\n LL |     let result = panic::catch_unwind(move || {\n    |                                      ^^^^^^^\n@@ -11,7 +11,7 @@ LL |         f.0()\n    |         --- in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.0`\n    |\n note: the lint level is defined here\n-  --> $DIR/mir_calls_to_shims.rs:3:9\n+  --> $DIR/mir_calls_to_shims.rs:4:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d2b77650a9d5c5db8601b6a9a2d13acfc1f624c5", "filename": "src/test/ui/drop/drop-trait-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fdrop%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fdrop%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop-trait-enum.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -3,6 +3,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n // ignore-emscripten no threads support\n+// needs-unwind\n \n use std::thread;\n use std::sync::mpsc::{channel, Sender};"}, {"sha": "13bd71ecb3389977adc7786579916a2e200f790c", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -4,6 +4,7 @@\n // * Dropping one of the values panics while dropping the future.\n \n // run-pass\n+// needs-unwind\n // edition:2018\n // ignore-wasm32-bare compiled with panic=abort by default\n "}, {"sha": "736123ed1198f76dfe22c93818840e2c41aa03b5", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]"}, {"sha": "66f267aa7c7d8d71c8ab115dc52bd2d3551b03d2", "filename": "src/test/ui/drop/terminate-in-initializer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fdrop%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fdrop%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fterminate-in-initializer.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-emscripten no threads support\n \n // Issue #787"}, {"sha": "7a91cbdc2f5d4f3773103cc7e72986d01f9dba81", "filename": "src/test/ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // ignore-emscripten no threads support\n "}, {"sha": "e84ff41b344a776de2bf9dbc84a2414ca41333b3", "filename": "src/test/ui/extern/issue-64655-extern-rust-must-allow-unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fextern%2Fissue-64655-extern-rust-must-allow-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fextern%2Fissue-64655-extern-rust-must-allow-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-64655-extern-rust-must-allow-unwind.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // ignore-emscripten no threads support\n "}, {"sha": "f2e67f1f750cca8a6ed0c49dc20eb9419bc9226c", "filename": "src/test/ui/generator/generator-resume-after-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-resume-after-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-resume-after-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-resume-after-panic.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-fail\n+// needs-unwind\n // error-pattern:generator resumed after panicking\n // ignore-emscripten no processes\n "}, {"sha": "8d8eb6a97b15a25812dd73e41a94708ba5813d61", "filename": "src/test/ui/generator/panic-drops-resume.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops-resume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops-resume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops-resume.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,6 +1,7 @@\n //! Tests that panics inside a generator will correctly drop the initial resume argument.\n \n // run-pass\n+// needs-unwind\n // ignore-wasm       no unwind support\n // ignore-emscripten no unwind support\n "}, {"sha": "a9de4e7fc7d2526168303531e1ff44f0da7d660b", "filename": "src/test/ui/generator/panic-drops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n \n // ignore-wasm32-bare compiled with panic=abort by default\n "}, {"sha": "14a0c8dbaf1daff7f9d68f46c88cdbae8c2c55da", "filename": "src/test/ui/generator/panic-safe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n \n // ignore-wasm32-bare compiled with panic=abort by default\n "}, {"sha": "538609b981adf5a965712c6ec12ef2d99f79783b", "filename": "src/test/ui/generator/resume-after-return.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n \n // ignore-wasm32-bare compiled with panic=abort by default\n "}, {"sha": "a1cfee944c8bd3f6299a87325b90a7726c929470", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // revisions: mir thir\n // [thir]compile-flags: -Zthir-unsafeck"}, {"sha": "aaef2aab9fc7699f91a70b09fcef881117532823", "filename": "src/test/ui/issues/issue-14875.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n \n // Check that values are not leaked when a dtor panics (#14875)"}, {"sha": "0f0f78623a212a7fd2546cbafb3473f765e17e43", "filename": "src/test/ui/issues/issue-25089.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-25089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-25089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25089.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-emscripten no threads support\n \n use std::thread;"}, {"sha": "cb386c908a4893042b9a851268c9c35d7f7b67a8", "filename": "src/test/ui/issues/issue-26655.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-26655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-26655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26655.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-emscripten no threads support\n \n // Check that the destructors of simple enums are run on unwinding"}, {"sha": "8d58ee6d92c4be11eb1606056c7c555ee511392d", "filename": "src/test/ui/issues/issue-29485.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-29485.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-29485.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29485.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![allow(unused_attributes)]\n // aux-build:issue-29485.rs\n+// needs-unwind\n // ignore-emscripten no threads\n \n #[feature(recover)]"}, {"sha": "01c3ec64861fec9358462faa9a31a09d07cdcabe", "filename": "src/test/ui/issues/issue-29948.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n \n use std::panic;"}, {"sha": "cba3055a22111631bcf59fa1f1cec66d4b73aa55", "filename": "src/test/ui/issues/issue-30018-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-30018-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-30018-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30018-panic.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -4,6 +4,7 @@\n // spawned thread to isolate the expected error result from the\n // SIGTRAP injected by the drop-flag consistency checking.\n \n+// needs-unwind\n // ignore-emscripten no threads support\n \n struct Foo;"}, {"sha": "3162c091c8786f22831f8846becf29cfaf2a0618", "filename": "src/test/ui/issues/issue-43853.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n \n use std::panic;"}, {"sha": "9bd3c0948517bf9f379d66849f572ca84f06e333", "filename": "src/test/ui/issues/issue-46519.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // compile-flags:--test -O\n \n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #[test]"}, {"sha": "15f25f1ca53733febd6cc6dd3c786da49fb5dbd9", "filename": "src/test/ui/iterators/iter-count-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // only-32bit too impatient for 2\u2076\u2074 items\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n "}, {"sha": "65124c282412c7de182ceaaf41f931f7eb2dc86e", "filename": "src/test/ui/iterators/iter-position-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // only-32bit too impatient for 2\u2076\u2074 items\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n "}, {"sha": "e16f984de79a6627e3589c3f13705ee48d374321", "filename": "src/test/ui/iterators/iter-step-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes\n "}, {"sha": "d8ce43848a77ea511b484c59bba8f731ffb29579", "filename": "src/test/ui/iterators/iter-sum-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes\n "}, {"sha": "bc8dcbdbb0e03d1b8f5e570eda3892fa89d4c1c9", "filename": "src/test/ui/iterators/iter-sum-overflow-overflow-checks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C overflow-checks\n "}, {"sha": "dfd58b25d089d83a4681e8488791446a529264e0", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n #![allow(unused_imports)]\n // Ideally, any macro call with a trailing comma should behave\n // identically to a call without the comma."}, {"sha": "42eaab77da9f1ea789088b350b8f314ffd450cf5", "filename": "src/test/ui/mir/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]"}, {"sha": "853efb0fed2b9aec13cfeaa421d1f80753199b13", "filename": "src/test/ui/mir/mir_drop_order.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n \n use std::cell::RefCell;"}, {"sha": "b4093d704150aa5ce564813eb3ed55d1f9791a75", "filename": "src/test/ui/mir/mir_drop_panics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fmir%2Fmir_drop_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fmir%2Fmir_drop_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_drop_panics.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-fail\n+// needs-unwind\n // error-pattern:panic 1\n // error-pattern:drop 2\n // ignore-emscripten no processes"}, {"sha": "2bcd9fac55cd5845be7fa03b6043f2b5935a8012", "filename": "src/test/ui/mir/mir_dynamic_drops_3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_3.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-fail\n+// needs-unwind\n // error-pattern:unwind happens\n // error-pattern:drop 3\n // error-pattern:drop 2"}, {"sha": "d63ba8cb03e9a069b855553ad26e151df620712e", "filename": "src/test/ui/numbers-arithmetic/int-abs-overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fint-abs-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fint-abs-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fint-abs-overflow.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // compile-flags: -C overflow-checks=on\n // ignore-emscripten no threads support\n+// needs-unwind\n \n use std::thread;\n "}, {"sha": "f857d4f4c7f2725e868d9b702825785724976ff2", "filename": "src/test/ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // compile-flags: -C debug_assertions=yes\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // ignore-emscripten dies with an LLVM error\n "}, {"sha": "73d6e790dff5727bfef261f195c948a9aad45cc5", "filename": "src/test/ui/panics/panic-handler-chain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-chain.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n #![allow(stable_features)]\n \n // ignore-emscripten no threads support"}, {"sha": "679dc7de87abab2f77d490d1ef9ed9d40f9eb94b", "filename": "src/test/ui/panics/panic-handler-flail-wildly.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-flail-wildly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-flail-wildly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-flail-wildly.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n \n #![allow(stable_features)]\n #![allow(unused_must_use)]"}, {"sha": "2744530209026d605bfd8445016ed8dc8dc5754a", "filename": "src/test/ui/panics/panic-handler-set-twice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-set-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-set-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-handler-set-twice.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n #![allow(unused_variables)]\n #![allow(stable_features)]\n "}, {"sha": "c0963aa3114dc7728fb5f3380a7ce59f5721a1bf", "filename": "src/test/ui/panics/panic-in-dtor-drops-fields.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fpanics%2Fpanic-in-dtor-drops-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fpanics%2Fpanic-in-dtor-drops-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-in-dtor-drops-fields.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n #![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n "}, {"sha": "e110d94b65614f488f79592f3c06be476c4f356f", "filename": "src/test/ui/panics/panic-recover-propagate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fpanics%2Fpanic-recover-propagate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fpanics%2Fpanic-recover-propagate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-recover-propagate.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-emscripten no threads support\n \n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "1c91541e642293c1faa197b8c46022332c808f3a", "filename": "src/test/ui/privacy/reachable-unnameable-items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fprivacy%2Freachable-unnameable-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fprivacy%2Freachable-unnameable-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Freachable-unnameable-items.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n // aux-build:reachable-unnameable-items.rs\n \n extern crate reachable_unnameable_items;"}, {"sha": "21a4547d11e1c8af93557ca6478b4adc2dbdc83b", "filename": "src/test/ui/proc-macro/expand-with-a-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // aux-build:expand-with-a-macro.rs\n \n // ignore-wasm32-bare compiled with panic=abort by default"}, {"sha": "cd57d9bca9429bfee6073d188e96d60781720349", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: --test\n // run-pass\n+// needs-unwind\n \n // ignore-wasm32-bare compiled with panic=abort by default\n "}, {"sha": "b067994a5c6d8febde5cd9d9a3e17065efd0c8ee", "filename": "src/test/ui/rfc-2091-track-caller/std-panic-locations.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // revisions: default mir-opt\n //[mir-opt] compile-flags: -Zmir-opt-level=4"}, {"sha": "243b7fb6fadec6729060c1de5093a9f71edc5815", "filename": "src/test/ui/rfcs/rfc1857-drop-order.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![allow(dead_code, unreachable_code)]"}, {"sha": "eb5bf8f67a84976ce04eb880254f840f863b746d", "filename": "src/test/ui/runtime/rt-explody-panic-payloads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fruntime%2Frt-explody-panic-payloads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fruntime%2Frt-explody-panic-payloads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fruntime%2Frt-explody-panic-payloads.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-wasm32-bare no unwinding panic"}, {"sha": "a59e25a273e7078c6f846f99d1ae77f4317475f1", "filename": "src/test/ui/sepcomp/sepcomp-unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-unwind.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n #![allow(dead_code)]\n // compile-flags: -C codegen-units=3\n // ignore-emscripten no threads support"}, {"sha": "1e9c269a4d3756148ccf14935ef060ed55b7ac6c", "filename": "src/test/ui/structs-enums/unit-like-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fstructs-enums%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fstructs-enums%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Funit-like-struct-drop-run.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-emscripten no threads support\n \n // Make sure the destructor is run for unit-like structs."}, {"sha": "3260b6938f07db0de3dc234c7be29f106c584165", "filename": "src/test/ui/test-attrs/test-should-fail-good-message.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: --test\n #[test]"}, {"sha": "68d226ffbaee310fff9aa7110bd971c613d762ac", "filename": "src/test/ui/threads-sendsync/task-stderr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // ignore-emscripten no threads support\n+// needs-unwind\n \n #![feature(internal_output_capture)]\n "}, {"sha": "6950a9c40d27d488f156dbd4b2b649980353120a", "filename": "src/test/ui/threads-sendsync/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fthreads-sendsync%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Fthreads-sendsync%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Funwind-resource.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n \n #![allow(non_camel_case_types)]\n // ignore-emscripten no threads support"}, {"sha": "50ecf751a86dbe18590117c16dac5677e3bee88b", "filename": "src/test/ui/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a37ad0d995c71518629b032f8e816e1efa8bca/src%2Ftest%2Fui%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-unique.rs?ref=b9a37ad0d995c71518629b032f8e816e1efa8bca", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-emscripten no threads support\n \n use std::thread;"}]}