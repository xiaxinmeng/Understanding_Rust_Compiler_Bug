{"sha": "e1643a8968753226dab7ab3c9fee826f097550f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNjQzYTg5Njg3NTMyMjZkYWI3YWIzYzlmZWU4MjZmMDk3NTUwZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-09T10:15:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-09T10:15:44Z"}, "message": "Auto merge of #54757 - nikomatsakis:nll-issue-54573-user-annot, r=pnkfelix\n\nuser annotations in patterns\n\nFixes https://github.com/rust-lang/rust/issues/54573\n\nr? @pnkfelix", "tree": {"sha": "47923832365dfd597748cd44b3ef4e72df319c63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47923832365dfd597748cd44b3ef4e72df319c63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1643a8968753226dab7ab3c9fee826f097550f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1643a8968753226dab7ab3c9fee826f097550f2", "html_url": "https://github.com/rust-lang/rust/commit/e1643a8968753226dab7ab3c9fee826f097550f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1643a8968753226dab7ab3c9fee826f097550f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607243b6f9b3890b01d5aa4bbea75be728a371be", "url": "https://api.github.com/repos/rust-lang/rust/commits/607243b6f9b3890b01d5aa4bbea75be728a371be", "html_url": "https://github.com/rust-lang/rust/commit/607243b6f9b3890b01d5aa4bbea75be728a371be"}, {"sha": "ccba716099c61816734f8daa7459001f6fdea0af", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccba716099c61816734f8daa7459001f6fdea0af", "html_url": "https://github.com/rust-lang/rust/commit/ccba716099c61816734f8daa7459001f6fdea0af"}], "stats": {"total": 464, "additions": 387, "deletions": 77}, "files": [{"sha": "d2b0a6a37a74ac5a6bd8bd31ab275c1c0bd80c9c", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -214,7 +214,7 @@ macro_rules! make_mir_visitor {\n                 self.super_ty(ty);\n             }\n \n-            fn visit_canonical_ty(&mut self, ty: & $($mutability)* CanonicalTy<'tcx>) {\n+            fn visit_user_ty(&mut self, ty: & $($mutability)* CanonicalTy<'tcx>) {\n                 self.super_canonical_ty(ty);\n             }\n \n@@ -640,7 +640,7 @@ macro_rules! make_mir_visitor {\n                                      c_ty: & $($mutability)* CanonicalTy<'tcx>,\n                                      location: Location) {\n                 self.visit_place(place, PlaceContext::Validate, location);\n-                self.visit_canonical_ty(c_ty);\n+                self.visit_user_ty(c_ty);\n             }\n \n             fn super_place(&mut self,\n@@ -736,7 +736,7 @@ macro_rules! make_mir_visitor {\n                     source_info: *source_info,\n                 });\n                 if let Some(user_ty) = user_ty {\n-                    self.visit_canonical_ty(user_ty);\n+                    self.visit_user_ty(user_ty);\n                 }\n                 self.visit_source_info(source_info);\n                 self.visit_source_scope(visibility_scope);"}, {"sha": "15a60badc93e2b50ec4ae8e84585c31ec5a46459", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::ty::subst::Substs;\n use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n-use rustc::mir::{BasicBlock, Location, Mir, Place, Statement, StatementKind};\n+use rustc::mir::{BasicBlock, Location, Mir, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n \n@@ -65,6 +65,14 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n     }\n \n+    fn visit_user_ty(&mut self, _ty: &mut CanonicalTy<'tcx>) {\n+        // `user_ty` annotations represent the types that the user\n+        // wrote in the progarm. We don't want to erase the regions\n+        // from these types: rather, we want to add them as\n+        // constraints at type-check time.\n+        debug!(\"visit_user_ty: skipping renumber\");\n+    }\n+\n     fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, location: Location) {\n         debug!(\"visit_substs(substs={:?}, location={:?})\", substs, location);\n \n@@ -112,19 +120,6 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_closure_substs: substs={:?}\", substs);\n     }\n \n-    fn visit_ascribe_user_ty(\n-        &mut self,\n-        _place: &mut Place<'tcx>,\n-        _variance: &mut ty::Variance,\n-        _c_ty: &mut CanonicalTy<'tcx>,\n-        _location: Location,\n-    ) {\n-        // User-assert-ty statements represent types that the user added explicitly.\n-        // We don't want to erase the regions from these types: rather, we want to\n-        // add them as constraints at type-check time.\n-        debug!(\"visit_user_assert_ty: skipping renumber\");\n-    }\n-\n     fn visit_statement(\n         &mut self,\n         block: BasicBlock,"}, {"sha": "c2a7172d54cca22cf2a105366bf4d27a510d2c67", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -1307,6 +1307,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     ) {\n         for ascription in ascriptions {\n             let source_info = self.source_info(ascription.span);\n+\n+            debug!(\n+                \"adding user ascription at span {:?} of place {:?} and {:?}\",\n+                source_info.span,\n+                ascription.source,\n+                ascription.user_ty,\n+            );\n+\n             self.cfg.push(\n                 block,\n                 Statement {"}, {"sha": "c969a3ef3485ff1fabe2c221add74a8473b596ca", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -13,6 +13,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use hair::cx::Cx;\n use hair::cx::block;\n use hair::cx::to_ref::ToRef;\n+use hair::util::UserAnnotatedTyHelpers;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::mir::interpret::GlobalId;\n use rustc::ty::{self, AdtKind, Ty};\n@@ -475,7 +476,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 adt_def: adt,\n                                 variant_index: 0,\n                                 substs,\n-                                user_ty: user_annotated_ty_for_adt(cx, expr.hir_id, adt),\n+                                user_ty: cx.user_substs_applied_to_adt(expr.hir_id, adt),\n                                 fields: field_refs(cx, fields),\n                                 base: base.as_ref().map(|base| {\n                                     FruInfo {\n@@ -501,7 +502,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                         adt_def: adt,\n                                         variant_index: index,\n                                         substs,\n-                                        user_ty: user_annotated_ty_for_adt(cx, expr.hir_id, adt),\n+                                        user_ty: cx.user_substs_applied_to_adt(expr.hir_id, adt),\n                                         fields: field_refs(cx, fields),\n                                         base: None,\n                                     }\n@@ -787,48 +788,17 @@ fn user_annotated_ty_for_def(\n         // user.\n         Def::StructCtor(_def_id, CtorKind::Const) |\n         Def::VariantCtor(_def_id, CtorKind::Const) =>\n-            match &cx.tables().node_id_to_type(hir_id).sty {\n-                ty::Adt(adt_def, _) => user_annotated_ty_for_adt(cx, hir_id, adt_def),\n-                sty => bug!(\"unexpected sty: {:?}\", sty),\n-            },\n+            cx.user_substs_applied_to_ty_of_hir_id(hir_id),\n \n         // `Self` is used in expression as a tuple struct constructor or an unit struct constructor\n-        Def::SelfCtor(_) => {\n-            let sty = &cx.tables().node_id_to_type(hir_id).sty;\n-            match sty {\n-                ty::FnDef(ref def_id, _) => {\n-                    Some(cx.tables().user_substs(hir_id)?.unchecked_map(|user_substs| {\n-                        // Here, we just pair a `DefId` with the\n-                        // `user_substs`, so no new types etc are introduced.\n-                        cx.tcx().mk_fn_def(*def_id, user_substs)\n-                    }))\n-                }\n-                ty::Adt(ref adt_def, _) => {\n-                    user_annotated_ty_for_adt(cx, hir_id, adt_def)\n-                }\n-                _ => {\n-                    bug!(\"unexpected sty: {:?}\", sty)\n-                }\n-            }\n-        }\n+        Def::SelfCtor(_) =>\n+            cx.user_substs_applied_to_ty_of_hir_id(hir_id),\n+\n         _ =>\n             bug!(\"user_annotated_ty_for_def: unexpected def {:?} at {:?}\", def, hir_id)\n     }\n }\n \n-fn user_annotated_ty_for_adt(\n-    cx: &mut Cx<'a, 'gcx, 'tcx>,\n-    hir_id: hir::HirId,\n-    adt_def: &'tcx AdtDef,\n-) -> Option<CanonicalTy<'tcx>> {\n-    let user_substs = cx.tables().user_substs(hir_id)?;\n-    Some(user_substs.unchecked_map(|user_substs| {\n-        // Here, we just pair an `AdtDef` with the\n-        // `user_substs`, so no new types etc are introduced.\n-        cx.tcx().mk_adt(adt_def, user_substs)\n-    }))\n-}\n-\n fn method_callee<'a, 'gcx, 'tcx>(\n     cx: &mut Cx<'a, 'gcx, 'tcx>,\n     expr: &hir::Expr,\n@@ -943,7 +913,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         adt_def,\n                         variant_index: adt_def.variant_index_with_id(def_id),\n                         substs,\n-                        user_ty: user_annotated_ty_for_adt(cx, expr.hir_id, adt_def),\n+                        user_ty: cx.user_substs_applied_to_adt(expr.hir_id, adt_def),\n                         fields: vec![],\n                         base: None,\n                     }"}, {"sha": "5f798135966d49c25068313a533e628e215dc51f", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -15,6 +15,7 @@\n //!\n \n use hair::*;\n+use hair::util::UserAnnotatedTyHelpers;\n \n use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n@@ -272,6 +273,16 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     }\n }\n \n+impl UserAnnotatedTyHelpers<'gcx, 'tcx> for Cx<'_, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'_, 'gcx, 'tcx> {\n+        self.tcx()\n+    }\n+\n+    fn tables(&self) -> &ty::TypeckTables<'tcx> {\n+        self.tables()\n+    }\n+}\n+\n fn lint_level_for_hir_id(tcx: TyCtxt, mut id: ast::NodeId) -> ast::NodeId {\n     // Right now we insert a `with_ignore` node in the dep graph here to\n     // ignore the fact that `lint_levels` below depends on the entire crate."}, {"sha": "e4f88e4fcc3ba2e6238314ee14aa63d813707ca8", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -29,6 +29,8 @@ pub mod cx;\n pub mod pattern;\n pub use self::pattern::{BindingMode, Pattern, PatternKind, FieldPattern};\n \n+mod util;\n+\n #[derive(Copy, Clone, Debug)]\n pub enum LintLevel {\n     Inherited,"}, {"sha": "04090e5087ffc47c21a579d03e231bc195909447", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -18,6 +18,8 @@ pub(crate) use self::check_match::check_match;\n \n use const_eval::{const_field, const_variant_index};\n \n+use hair::util::UserAnnotatedTyHelpers;\n+\n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n use rustc::ty::{self, CanonicalTy, TyCtxt, AdtDef, Ty, Region};\n@@ -529,8 +531,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                        field: Field::new(i),\n                                        pattern: self.lower_pattern(field),\n                                    })\n-                                   .collect();\n-                self.lower_variant_or_leaf(def, pat.span, ty, subpatterns)\n+                    .collect();\n+\n+                self.lower_variant_or_leaf(def, pat.hir_id, pat.span, ty, subpatterns)\n             }\n \n             PatKind::Struct(ref qpath, ref fields, _) => {\n@@ -546,7 +549,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                           })\n                           .collect();\n \n-                self.lower_variant_or_leaf(def, pat.span, ty, subpatterns)\n+                self.lower_variant_or_leaf(def, pat.hir_id, pat.span, ty, subpatterns)\n             }\n         };\n \n@@ -637,12 +640,12 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     fn lower_variant_or_leaf(\n         &mut self,\n         def: Def,\n+        hir_id: hir::HirId,\n         span: Span,\n         ty: Ty<'tcx>,\n-        subpatterns: Vec<FieldPattern<'tcx>>)\n-        -> PatternKind<'tcx>\n-    {\n-        match def {\n+        subpatterns: Vec<FieldPattern<'tcx>>,\n+    ) -> PatternKind<'tcx> {\n+        let mut kind = match def {\n             Def::Variant(variant_id) | Def::VariantCtor(variant_id, ..) => {\n                 let enum_id = self.tcx.parent_def_id(variant_id).unwrap();\n                 let adt_def = self.tcx.adt_def(enum_id);\n@@ -675,7 +678,24 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 self.errors.push(PatternError::NonConstPath(span));\n                 PatternKind::Wild\n             }\n+        };\n+\n+        if let Some(user_ty) = self.user_substs_applied_to_ty_of_hir_id(hir_id) {\n+            let subpattern = Pattern {\n+                span,\n+                ty,\n+                kind: Box::new(kind),\n+            };\n+\n+            debug!(\"pattern user_ty = {:?} for pattern at {:?}\", user_ty, span);\n+\n+            kind = PatternKind::AscribeUserType {\n+                subpattern,\n+                user_ty,\n+            };\n         }\n+\n+        kind\n     }\n \n     /// Takes a HIR Path. If the path is a constant, evaluates it and feeds\n@@ -729,7 +749,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     },\n                 }\n             }\n-            _ => self.lower_variant_or_leaf(def, span, ty, vec![]),\n+            _ => self.lower_variant_or_leaf(def, id, span, ty, vec![]),\n         };\n \n         Pattern {\n@@ -894,6 +914,17 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     }\n }\n \n+impl UserAnnotatedTyHelpers<'tcx, 'tcx> for PatternContext<'_, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'_, 'tcx, 'tcx> {\n+        self.tcx\n+    }\n+\n+    fn tables(&self) -> &ty::TypeckTables<'tcx> {\n+        self.tables\n+    }\n+}\n+\n+\n pub trait PatternFoldable<'tcx> : Sized {\n     fn fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.super_fold_with(folder)"}, {"sha": "48a2e67a3dcc3a5dbd2d5c4d718731fcf9e7c37d", "filename": "src/librustc_mir/hair/util.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir;\n+use rustc::ty::{self, AdtDef, CanonicalTy, TyCtxt};\n+\n+crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'_, 'gcx, 'tcx>;\n+\n+    fn tables(&self) -> &ty::TypeckTables<'tcx>;\n+\n+    fn user_substs_applied_to_adt(\n+        &self,\n+        hir_id: hir::HirId,\n+        adt_def: &'tcx AdtDef,\n+    ) -> Option<CanonicalTy<'tcx>> {\n+        let user_substs = self.tables().user_substs(hir_id)?;\n+        Some(user_substs.unchecked_map(|user_substs| {\n+            // Here, we just pair an `AdtDef` with the\n+            // `user_substs`, so no new types etc are introduced.\n+            self.tcx().mk_adt(adt_def, user_substs)\n+        }))\n+    }\n+\n+    /// Looks up the type associated with this hir-id and applies the\n+    /// user-given substitutions; the hir-id must map to a suitable\n+    /// type.\n+    fn user_substs_applied_to_ty_of_hir_id(&self, hir_id: hir::HirId) -> Option<CanonicalTy<'tcx>> {\n+        let user_substs = self.tables().user_substs(hir_id)?;\n+        match &self.tables().node_id_to_type(hir_id).sty {\n+            ty::Adt(adt_def, _) => Some(user_substs.unchecked_map(|user_substs| {\n+                // Ok to call `unchecked_map` because we just pair an\n+                // `AdtDef` with the `user_substs`, so no new types\n+                // etc are introduced.\n+                self.tcx().mk_adt(adt_def, user_substs)\n+            })),\n+            ty::FnDef(def_id, _) => Some(user_substs.unchecked_map(|user_substs| {\n+                // Here, we just pair a `DefId` with the\n+                // `user_substs`, so no new types etc are introduced.\n+                self.tcx().mk_fn_def(*def_id, user_substs)\n+            })),\n+            sty => bug!(\n+                \"sty: {:?} should not have user-substs {:?} recorded \",\n+                sty,\n+                user_substs\n+            ),\n+        }\n+    }\n+}"}, {"sha": "e4ad02595d107df0f8f0499283db6f0dfa3ca042", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -402,21 +402,44 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     }\n \n     /// Creates the relevant generic argument substitutions\n-    /// corresponding to a set of generic parameters.\n-    pub fn create_substs_for_generic_args<'a, 'b, A, P, I>(\n+    /// corresponding to a set of generic parameters. This is a\n+    /// rather complex little function. Let me try to explain the\n+    /// role of each of its parameters:\n+    ///\n+    /// To start, we are given the `def_id` of the thing we are\n+    /// creating the substitutions for, and a partial set of\n+    /// substitutions `parent_substs`. In general, the substitutions\n+    /// for an item begin with substitutions for all the \"parents\" of\n+    /// that item -- so e.g. for a method it might include the\n+    /// parameters from the impl.\n+    ///\n+    /// Therefore, the method begins by walking down these parents,\n+    /// starting with the outermost parent and proceed inwards until\n+    /// it reaches `def_id`. For each parent P, it will check `parent_substs`\n+    /// first to see if the parent's substitutions are listed in there. If so,\n+    /// we can append those and move on. Otherwise, it invokes the\n+    /// three callback functions:\n+    ///\n+    /// - `args_for_def_id`: given the def-id P, supplies back the\n+    ///   generic arguments that were given to that parent from within\n+    ///   the path; so e.g. if you have `<T as Foo>::Bar`, the def-id\n+    ///   might refer to the trait `Foo`, and the arguments might be\n+    ///   `[T]`. The boolean value indicates whether to infer values\n+    ///   for arguments whose values were not explicitly provided.\n+    /// - `provided_kind`: given the generic parameter and the value from `args_for_def_id`,\n+    ///   instantiate a `Kind`\n+    /// - `inferred_kind`: if no parameter was provided, and inference is enabled, then\n+    ///   creates a suitable inference variable.\n+    pub fn create_substs_for_generic_args<'a, 'b>(\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         def_id: DefId,\n         parent_substs: &[Kind<'tcx>],\n         has_self: bool,\n         self_ty: Option<Ty<'tcx>>,\n-        args_for_def_id: A,\n-        provided_kind: P,\n-        inferred_kind: I,\n-    ) -> &'tcx Substs<'tcx> where\n-        A: Fn(DefId) -> (Option<&'b GenericArgs>, bool),\n-        P: Fn(&GenericParamDef, &GenericArg) -> Kind<'tcx>,\n-        I: Fn(Option<&[Kind<'tcx>]>, &GenericParamDef, bool) -> Kind<'tcx>\n-    {\n+        args_for_def_id: impl Fn(DefId) -> (Option<&'b GenericArgs>, bool),\n+        provided_kind: impl Fn(&GenericParamDef, &GenericArg) -> Kind<'tcx>,\n+        inferred_kind: impl Fn(Option<&[Kind<'tcx>]>, &GenericParamDef, bool) -> Kind<'tcx>,\n+    ) -> &'tcx Substs<'tcx> {\n         // Collect the segments of the path: we need to substitute arguments\n         // for parameters throughout the entire path (wherever there are\n         // generic parameters)."}, {"sha": "be8b16dd2f577ca2deb5e1ccda5259434b3fc835", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -2164,6 +2164,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// occurred**, so that annotations like `Vec<_>` are preserved\n     /// properly.\n     pub fn write_user_substs_from_substs(&self, hir_id: hir::HirId, substs: &'tcx Substs<'tcx>) {\n+        debug!(\n+            \"write_user_substs_from_substs({:?}, {:?}) in fcx {}\",\n+            hir_id,\n+            substs,\n+            self.tag(),\n+        );\n+\n         if !substs.is_noop() {\n             let user_substs = self.infcx.canonicalize_response(&substs);\n             debug!(\"instantiate_value_path: user_substs = {:?}\", user_substs);\n@@ -3752,6 +3759,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         expected: Expectation<'tcx>,\n         needs: Needs\n     ) -> Ty<'tcx> {\n+        debug!(\n+            \"check_expr_kind(expr={:?}, expected={:?}, needs={:?})\",\n+            expr,\n+            expected,\n+            needs,\n+        );\n+\n         let tcx = self.tcx;\n         let id = expr.id;\n         match expr.node {\n@@ -4981,10 +4995,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   span: Span,\n                                   node_id: ast::NodeId)\n                                   -> (Ty<'tcx>, Def) {\n-        debug!(\"instantiate_value_path(path={:?}, def={:?}, node_id={})\",\n-               segments,\n-               def,\n-               node_id);\n+        debug!(\n+            \"instantiate_value_path(segments={:?}, self_ty={:?}, def={:?}, node_id={})\",\n+            segments,\n+            self_ty,\n+            def,\n+            node_id,\n+        );\n \n         let path_segs = self.def_ids_for_path_segments(segments, def);\n \n@@ -5194,6 +5211,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n         self.write_substs(hir_id, substs);\n \n+        debug!(\n+            \"instantiate_value_path: id={:?} substs={:?}\",\n+            node_id,\n+            substs,\n+        );\n         self.write_user_substs_from_substs(hir_id, substs);\n \n         (ty_substituted, new_def)"}, {"sha": "526134b6e4b3c2ae22e26744a8a501e0cefa3e09", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_enum_variant.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -0,0 +1,24 @@\n+#![feature(nll)]\n+\n+enum Foo<'a> {\n+    Bar { field: &'a u32 }\n+}\n+\n+fn in_let() {\n+    let y = 22;\n+    let foo = Foo::Bar { field: &y };\n+    //~^ ERROR `y` does not live long enough\n+    let Foo::Bar::<'static> { field: _z } = foo;\n+}\n+\n+fn in_match() {\n+    let y = 22;\n+    let foo = Foo::Bar { field: &y };\n+    //~^ ERROR `y` does not live long enough\n+    match foo {\n+        Foo::Bar::<'static> { field: _z } => {\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "5dbbf7c5b4811d388413e20b7b4d06bb74312bb7", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_enum_variant.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_enum_variant.stderr?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_brace_enum_variant.rs:9:33\n+   |\n+LL |     let foo = Foo::Bar { field: &y };\n+   |                                 ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_brace_enum_variant.rs:16:33\n+   |\n+LL |     let foo = Foo::Bar { field: &y };\n+   |                                 ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "1c92858eb3a08cd9d8c1c5c58f4a60129de7b5ae", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_struct.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -0,0 +1,22 @@\n+#![feature(nll)]\n+\n+struct Foo<'a> { field: &'a u32 }\n+\n+fn in_let() {\n+    let y = 22;\n+    let foo = Foo { field: &y };\n+    //~^ ERROR `y` does not live long enough\n+    let Foo::<'static> { field: _z } = foo;\n+}\n+\n+fn in_main() {\n+    let y = 22;\n+    let foo = Foo { field: &y };\n+    //~^ ERROR `y` does not live long enough\n+    match foo {\n+        Foo::<'static> { field: _z } => {\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "0108a185b1f3ea9b20eec34a01f0acf347229b6e", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_brace_struct.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_brace_struct.stderr?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_brace_struct.rs:7:28\n+   |\n+LL |     let foo = Foo { field: &y };\n+   |                            ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_brace_struct.rs:14:28\n+   |\n+LL |     let foo = Foo { field: &y };\n+   |                            ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d6c364f8e3f0c83afc4b14f08ceb155aac72e591", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_enum_variant.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -0,0 +1,24 @@\n+#![feature(nll)]\n+\n+enum Foo<'a> {\n+    Bar(&'a u32)\n+}\n+\n+fn in_let() {\n+    let y = 22;\n+    let foo = Foo::Bar(&y);\n+    //~^ ERROR `y` does not live long enough\n+    let Foo::Bar::<'static>(_z) = foo;\n+}\n+\n+fn in_match() {\n+    let y = 22;\n+    let foo = Foo::Bar(&y);\n+    //~^ ERROR `y` does not live long enough\n+    match foo {\n+        Foo::Bar::<'static>(_z) => {\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "b18fdc30ac2d62a551e07da0ea56db657b82bac4", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_enum_variant.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_enum_variant.stderr?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_tuple_enum_variant.rs:9:24\n+   |\n+LL |     let foo = Foo::Bar(&y);\n+   |                        ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_tuple_enum_variant.rs:16:24\n+   |\n+LL |     let foo = Foo::Bar(&y);\n+   |                        ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "626ca908797876dfb9a1bd067f45f4b28df4aafe", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_struct.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.rs?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -0,0 +1,22 @@\n+#![feature(nll)]\n+\n+struct Foo<'a>(&'a u32);\n+\n+fn in_let() {\n+    let y = 22;\n+    let foo = Foo(&y);\n+    //~^ ERROR `y` does not live long enough\n+    let Foo::<'static>(_z) = foo;\n+}\n+\n+fn in_match() {\n+    let y = 22;\n+    let foo = Foo(&y);\n+    //~^ ERROR `y` does not live long enough\n+    match foo {\n+        Foo::<'static>(_z) => {\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "b72fda955801c65068486cdc645b5a163a4bb1c4", "filename": "src/test/ui/nll/user-annotations/pattern_substs_on_tuple_struct.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1643a8968753226dab7ab3c9fee826f097550f2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpattern_substs_on_tuple_struct.stderr?ref=e1643a8968753226dab7ab3c9fee826f097550f2", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_tuple_struct.rs:7:19\n+   |\n+LL |     let foo = Foo(&y);\n+   |                   ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/pattern_substs_on_tuple_struct.rs:14:19\n+   |\n+LL |     let foo = Foo(&y);\n+   |                   ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}]}