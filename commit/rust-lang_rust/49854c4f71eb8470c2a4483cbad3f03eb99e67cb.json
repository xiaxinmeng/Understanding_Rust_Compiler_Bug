{"sha": "49854c4f71eb8470c2a4483cbad3f03eb99e67cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ODU0YzRmNzFlYjg0NzBjMmE0NDgzY2JhZDNmMDNlYjk5ZTY3Y2I=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-16T14:37:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-16T14:37:44Z"}, "message": "avoid #[cfg] in favor of cfg!", "tree": {"sha": "a44fe70f92420ec6cd7b48471ad08f40461fbf38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a44fe70f92420ec6cd7b48471ad08f40461fbf38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49854c4f71eb8470c2a4483cbad3f03eb99e67cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49854c4f71eb8470c2a4483cbad3f03eb99e67cb", "html_url": "https://github.com/rust-lang/rust/commit/49854c4f71eb8470c2a4483cbad3f03eb99e67cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49854c4f71eb8470c2a4483cbad3f03eb99e67cb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dac0a158eb78419e3593fa888f9cf1ab81153030", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac0a158eb78419e3593fa888f9cf1ab81153030", "html_url": "https://github.com/rust-lang/rust/commit/dac0a158eb78419e3593fa888f9cf1ab81153030"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "28fb40244043e5aa46e534b9b3a1131060d9b66a", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/49854c4f71eb8470c2a4483cbad3f03eb99e67cb/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49854c4f71eb8470c2a4483cbad3f03eb99e67cb/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=49854c4f71eb8470c2a4483cbad3f03eb99e67cb", "patch": "@@ -17,8 +17,7 @@ use crate::ptr;\n use crate::raw;\n use crate::sys::stdio::panic_output;\n use crate::sys_common::rwlock::RWLock;\n-use crate::sys_common::thread_info;\n-use crate::sys_common::util;\n+use crate::sys_common::{thread_info, util, backtrace};\n use crate::thread;\n \n #[cfg(not(test))]\n@@ -157,20 +156,18 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n }\n \n fn default_hook(info: &PanicInfo<'_>) {\n-    #[cfg(feature = \"backtrace\")]\n-    use crate::sys_common::{backtrace as backtrace_mod};\n-\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    #[cfg(feature = \"backtrace\")]\n-    let log_backtrace = {\n+    let log_backtrace = if cfg!(feature = \"backtrace\") {\n         let panics = update_panic_count(0);\n \n         if panics >= 2 {\n             Some(backtrace_rs::PrintFmt::Full)\n         } else {\n-            backtrace_mod::log_enabled()\n+            backtrace::log_enabled()\n         }\n+    } else {\n+        None\n     };\n \n     // The current implementation always returns `Some`.\n@@ -190,14 +187,13 @@ fn default_hook(info: &PanicInfo<'_>) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\",\n                          name, msg, location);\n \n-        #[cfg(feature = \"backtrace\")]\n-        {\n+        if cfg!(feature = \"backtrace\") {\n             use crate::sync::atomic::{AtomicBool, Ordering};\n \n             static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n             if let Some(format) = log_backtrace {\n-                let _ = backtrace_mod::print(err, format);\n+                let _ = backtrace::print(err, format);\n             } else if FIRST_PANIC.compare_and_swap(true, false, Ordering::SeqCst) {\n                 let _ = writeln!(err, \"note: run with `RUST_BACKTRACE=1` \\\n                                        environment variable to display a backtrace.\");"}, {"sha": "01711d415d86c28f6655d2f49956bc4685a65eb2", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49854c4f71eb8470c2a4483cbad3f03eb99e67cb/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49854c4f71eb8470c2a4483cbad3f03eb99e67cb/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=49854c4f71eb8470c2a4483cbad3f03eb99e67cb", "patch": "@@ -33,7 +33,6 @@ pub fn lock() -> impl Drop {\n }\n \n /// Prints the current backtrace.\n-#[cfg(feature = \"backtrace\")]\n pub fn print(w: &mut dyn Write, format: PrintFmt) -> io::Result<()> {\n     // There are issues currently linking libbacktrace into tests, and in\n     // general during libstd's own unit tests we're not testing this path. In\n@@ -129,7 +128,6 @@ where\n \n // For now logging is turned off by default, and this function checks to see\n // whether the magical environment variable is present to see if it's turned on.\n-#[cfg(feature = \"backtrace\")]\n pub fn log_enabled() -> Option<PrintFmt> {\n     use crate::sync::atomic::{self, Ordering};\n "}]}