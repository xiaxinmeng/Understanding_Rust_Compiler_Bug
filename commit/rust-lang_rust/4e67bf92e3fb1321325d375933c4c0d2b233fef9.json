{"sha": "4e67bf92e3fb1321325d375933c4c0d2b233fef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNjdiZjkyZTNmYjEzMjEzMjVkMzc1OTMzYzRjMGQyYjIzM2ZlZjk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-05T17:45:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-05T17:45:12Z"}, "message": "Rollup merge of #39526 - canndrew:uninhabited-while-let-fix, r=arielb1\n\nUninhabited while-let pattern fix\n\nThis fix makes it so while-let with an unsatisfiable pattern raises a correct warning rather than an incorrect error.", "tree": {"sha": "4a166ae2d41de164050e4d4e1178269e365fd359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a166ae2d41de164050e4d4e1178269e365fd359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e67bf92e3fb1321325d375933c4c0d2b233fef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e67bf92e3fb1321325d375933c4c0d2b233fef9", "html_url": "https://github.com/rust-lang/rust/commit/4e67bf92e3fb1321325d375933c4c0d2b233fef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e67bf92e3fb1321325d375933c4c0d2b233fef9/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13b8e4b4161dc0c4587ab8dadc31df252fb492cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b8e4b4161dc0c4587ab8dadc31df252fb492cd", "html_url": "https://github.com/rust-lang/rust/commit/13b8e4b4161dc0c4587ab8dadc31df252fb492cd"}, {"sha": "7135d0ab944f0bfa5ef4cecfd1dfdd8a79647c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/7135d0ab944f0bfa5ef4cecfd1dfdd8a79647c53", "html_url": "https://github.com/rust-lang/rust/commit/7135d0ab944f0bfa5ef4cecfd1dfdd8a79647c53"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "6f33b4fad769f20d9e7d06b053a0a014fafbb5c3", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4e67bf92e3fb1321325d375933c4c0d2b233fef9/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e67bf92e3fb1321325d375933c4c0d2b233fef9/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=4e67bf92e3fb1321325d375933c4c0d2b233fef9", "patch": "@@ -273,7 +273,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     let mut seen = Matrix::empty();\n     let mut catchall = None;\n     let mut printed_if_let_err = false;\n-    for &(ref pats, guard) in arms {\n+    for (arm_index, &(ref pats, guard)) in arms.iter().enumerate() {\n         for &(pat, hir_pat) in pats {\n             let v = vec![pat];\n \n@@ -302,10 +302,27 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                             let &(ref first_arm_pats, _) = &arms[0];\n                             let first_pat = &first_arm_pats[0];\n                             let span = first_pat.0.span;\n-                            struct_span_err!(cx.tcx.sess, span, E0165,\n-                                             \"irrefutable while-let pattern\")\n-                                .span_label(span, &format!(\"irrefutable pattern\"))\n-                                .emit();\n+\n+                            // check which arm we're on.\n+                            match arm_index {\n+                                // The arm with the user-specified pattern.\n+                                0 => {\n+                                    let mut diagnostic = Diagnostic::new(Level::Warning,\n+                                                                         \"unreachable pattern\");\n+                                    diagnostic.set_span(pat.span);\n+                                    cx.tcx.sess.add_lint_diagnostic(\n+                                            lint::builtin::UNREACHABLE_PATTERNS,\n+                                            hir_pat.id, diagnostic);\n+                                },\n+                                // The arm with the wildcard pattern.\n+                                1 => {\n+                                    struct_span_err!(cx.tcx.sess, span, E0165,\n+                                                     \"irrefutable while-let pattern\")\n+                                        .span_label(span, &format!(\"irrefutable pattern\"))\n+                                        .emit();\n+                                },\n+                                _ => bug!(),\n+                            }\n                         },\n \n                         hir::MatchSource::ForLoopDesugar |"}, {"sha": "4c894b0bdd3dd2b7724978159332ca00bc61ec28", "filename": "src/test/compile-fail/uninhabited-patterns.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e67bf92e3fb1321325d375933c4c0d2b233fef9/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e67bf92e3fb1321325d375933c4c0d2b233fef9/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs?ref=4e67bf92e3fb1321325d375933c4c0d2b233fef9", "patch": "@@ -24,6 +24,10 @@ struct NotSoSecretlyEmpty {\n     _priv: !,\n }\n \n+fn foo() -> Option<NotSoSecretlyEmpty> {\n+    None\n+}\n+\n fn main() {\n     let x: &[!] = &[];\n \n@@ -45,5 +49,9 @@ fn main() {\n         Err(Err(_y)) => (),\n         Err(Ok(_y)) => (),  //~ ERROR unreachable pattern\n     }\n+\n+    while let Some(_y) = foo() {\n+        //~^ ERROR unreachable pattern\n+    }\n }\n "}]}