{"sha": "e080298e35b6eb9f34a64e450eb08dc17cf1a21b", "node_id": "C_kwDOAAsO6NoAKGUwODAyOThlMzViNmViOWYzNGE2NGU0NTBlYjA4ZGMxN2NmMWEyMWI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T18:30:14Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T18:30:14Z"}, "message": "Replace calls to lower_generics with calls to add_implicit_generics", "tree": {"sha": "4ec1f4f6d76aa3232a633a590ac900e19fd910fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ec1f4f6d76aa3232a633a590ac900e19fd910fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e080298e35b6eb9f34a64e450eb08dc17cf1a21b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmKWXrYACgkQgTGiTgx5\n7690TA//Zb8WgiTtvWIHqmABtLGxG47nJX8BWjUrNH8BXlqoVD+mIP25WUWUmBjC\nu5ut7Qxn1+eCEt0AJHzJsQkqBPhlFaFrUXPele36ze645UEMRI8QQ21qyqLo7N0M\nIcmZNB10EpBTnaFy4kh9/YBIoo2k/GbY9guiUIlTHemfUhS1jXBtRsXmR8QDrcn/\nqxNNB9Y/OIZHAqxwaTHacVZFN/NZwuS6xvnNV0Hbbwv+xD8PK+Xj/Z1C+2agH/7D\ntwXfnOs683ZV8t3PfPYLkYQ2InuyiA+h1eUmTYId4cjORj3bnKQ+tonTc23tVSdw\nfs5SNcEG2VNyDAUOgjMK4u0Gao1D0bxQ4Ch4uwWHmCrAoQY9a1gSVVpJDV7Be1V8\nm+/4TyC8K6WYqPMVgz+n/CML/XgqQLtWixdNL5sfVB0iIBToASKShi5QS/X8lCTl\n2v+6u7WdQ3F2xGnyAYuEhICwYKqRJTsFzwqo1gbyPF35c2Gwv/42EwNY870cgCK9\njRyErIKSrTSqJjBVBfmeEpydF4Ppy8OtvKBDQ+NOhrN18lKZ3pYULblmPnpoVkWQ\nXHgi2ouh7HSbSG09Pu1410l+AnDdvc8G3XDmzjIGAUu2pE945pR19KpHzViAqD2O\n6aKeCIz60+vi5ui26NI/RrCOsm3O/WHc/Td/m82Qp3IVQfxUpKw=\n=o/qp\n-----END PGP SIGNATURE-----", "payload": "tree 4ec1f4f6d76aa3232a633a590ac900e19fd910fe\nparent 190b4a71528a1eb83d43119db6877d7051cf8add\nauthor Santiago Pastorino <spastorino@gmail.com> 1654021814 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1654021814 -0300\n\nReplace calls to lower_generics with calls to add_implicit_generics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e080298e35b6eb9f34a64e450eb08dc17cf1a21b", "html_url": "https://github.com/rust-lang/rust/commit/e080298e35b6eb9f34a64e450eb08dc17cf1a21b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e080298e35b6eb9f34a64e450eb08dc17cf1a21b/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190b4a71528a1eb83d43119db6877d7051cf8add", "url": "https://api.github.com/repos/rust-lang/rust/commits/190b4a71528a1eb83d43119db6877d7051cf8add", "html_url": "https://github.com/rust-lang/rust/commit/190b4a71528a1eb83d43119db6877d7051cf8add"}], "stats": {"total": 176, "additions": 87, "deletions": 89}, "files": [{"sha": "2a8769c8fa093fd3ed45d017d1811fe0b18e7001", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 87, "deletions": 89, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/e080298e35b6eb9f34a64e450eb08dc17cf1a21b/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e080298e35b6eb9f34a64e450eb08dc17cf1a21b/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=e080298e35b6eb9f34a64e450eb08dc17cf1a21b", "patch": "@@ -309,57 +309,59 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 //\n                 // type Foo = Foo1\n                 // opaque type Foo1: Trait\n-                let ty = self.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy);\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, where_clauses, true);\n-                let generics = self.lower_generics(\n+                let (generics, ty) = self.add_implicit_generics(\n                     &generics,\n+                    id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    |this| this.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n             ItemKind::TyAlias(box TyAlias {\n                 ref generics, ref where_clauses, ty: None, ..\n             }) => {\n-                let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, *where_clauses, true);\n-                let generics = self.lower_generics(\n+                let (generics, ty) = self.add_implicit_generics(\n                     &generics,\n+                    id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    |this| this.arena.alloc(this.ty(span, hir::TyKind::Err)),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n-            ItemKind::Enum(ref enum_definition, ref generics) => hir::ItemKind::Enum(\n-                hir::EnumDef {\n-                    variants: self.arena.alloc_from_iter(\n-                        enum_definition.variants.iter().map(|x| self.lower_variant(x)),\n-                    ),\n-                },\n-                self.lower_generics(\n+            ItemKind::Enum(ref enum_definition, ref generics) => {\n+                let (generics, variants) = self.add_implicit_generics(\n                     generics,\n+                    id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                ),\n-            ),\n+                    |this| {\n+                        this.arena.alloc_from_iter(\n+                            enum_definition.variants.iter().map(|x| this.lower_variant(x)),\n+                        )\n+                    },\n+                );\n+                hir::ItemKind::Enum(hir::EnumDef { variants }, generics)\n+            }\n             ItemKind::Struct(ref struct_def, ref generics) => {\n-                let struct_def = self.lower_variant_data(hir_id, struct_def);\n-                hir::ItemKind::Struct(\n-                    struct_def,\n-                    self.lower_generics(\n-                        generics,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    ),\n-                )\n+                let (generics, struct_def) = self.add_implicit_generics(\n+                    generics,\n+                    id,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    |this| this.lower_variant_data(hir_id, struct_def),\n+                );\n+                hir::ItemKind::Struct(struct_def, generics)\n             }\n             ItemKind::Union(ref vdata, ref generics) => {\n-                let vdata = self.lower_variant_data(hir_id, vdata);\n-                hir::ItemKind::Union(\n-                    vdata,\n-                    self.lower_generics(\n-                        generics,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    ),\n-                )\n+                let (generics, vdata) = self.add_implicit_generics(\n+                    generics,\n+                    id,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    |this| this.lower_variant_data(hir_id, vdata),\n+                );\n+                hir::ItemKind::Union(vdata, generics)\n             }\n             ItemKind::Impl(box Impl {\n                 unsafety,\n@@ -431,34 +433,38 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ref bounds,\n                 ref items,\n             }) => {\n-                let bounds = self.lower_param_bounds(\n-                    bounds,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                let (generics, (unsafety, items, bounds)) = self.add_implicit_generics(\n+                    generics,\n+                    id,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    |this| {\n+                        let bounds = this.lower_param_bounds(\n+                            bounds,\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                        );\n+                        let items = this.arena.alloc_from_iter(\n+                            items.iter().map(|item| this.lower_trait_item_ref(item)),\n+                        );\n+                        let unsafety = this.lower_unsafety(unsafety);\n+                        (unsafety, items, bounds)\n+                    },\n                 );\n-                let items = self\n-                    .arena\n-                    .alloc_from_iter(items.iter().map(|item| self.lower_trait_item_ref(item)));\n-                hir::ItemKind::Trait(\n-                    is_auto,\n-                    self.lower_unsafety(unsafety),\n-                    self.lower_generics(\n-                        generics,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    ),\n-                    bounds,\n-                    items,\n-                )\n+                hir::ItemKind::Trait(is_auto, unsafety, generics, bounds, items)\n             }\n-            ItemKind::TraitAlias(ref generics, ref bounds) => hir::ItemKind::TraitAlias(\n-                self.lower_generics(\n+            ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                let (generics, bounds) = self.add_implicit_generics(\n                     generics,\n+                    id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                ),\n-                self.lower_param_bounds(\n-                    bounds,\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n-                ),\n-            ),\n+                    |this| {\n+                        this.lower_param_bounds(\n+                            bounds,\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                        )\n+                    },\n+                );\n+                hir::ItemKind::TraitAlias(generics, bounds)\n+            }\n             ItemKind::MacroDef(MacroDef { ref body, macro_rules }) => {\n                 let body = P(self.lower_mac_args(body));\n                 let macro_kind = self.resolver.decl_macro_kind(self.resolver.local_def_id(id));\n@@ -789,24 +795,25 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ref ty,\n                 ..\n             }) => {\n-                let ty = ty.as_ref().map(|x| {\n-                    self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n-                });\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, where_clauses, false);\n-                let generics = self.lower_generics(\n+                self.add_implicit_generics(\n                     &generics,\n+                    i.id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                );\n-                let kind = hir::TraitItemKind::Type(\n-                    self.lower_param_bounds(\n-                        bounds,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    ),\n-                    ty,\n-                );\n-\n-                (generics, kind)\n+                    |this| {\n+                        let ty = ty.as_ref().map(|x| {\n+                            this.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                        });\n+                        hir::TraitItemKind::Type(\n+                            this.lower_param_bounds(\n+                                bounds,\n+                                ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                            ),\n+                            ty,\n+                        )\n+                    },\n+                )\n             }\n             AssocItemKind::MacCall(..) => panic!(\"macro item shouldn't exist at this point\"),\n         };\n@@ -876,21 +883,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::TyAlias(box TyAlias { generics, where_clauses, ty, .. }) => {\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, *where_clauses, false);\n-                let generics = self.lower_generics(\n+                self.add_implicit_generics(\n                     &generics,\n+                    i.id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                );\n-                let kind = match ty {\n-                    None => {\n-                        let ty = self.arena.alloc(self.ty(i.span, hir::TyKind::Err));\n-                        hir::ImplItemKind::TyAlias(ty)\n-                    }\n-                    Some(ty) => {\n-                        let ty = self.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy);\n-                        hir::ImplItemKind::TyAlias(ty)\n-                    }\n-                };\n-                (generics, kind)\n+                    |this| match ty {\n+                        None => {\n+                            let ty = this.arena.alloc(this.ty(i.span, hir::TyKind::Err));\n+                            hir::ImplItemKind::TyAlias(ty)\n+                        }\n+                        Some(ty) => {\n+                            let ty = this.lower_ty(ty, ImplTraitContext::TypeAliasesOpaqueTy);\n+                            hir::ImplItemKind::TyAlias(ty)\n+                        }\n+                    },\n+                )\n             }\n             AssocItemKind::MacCall(..) => panic!(\"`TyMac` should have been expanded by now\"),\n         };\n@@ -1370,15 +1377,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    pub(super) fn lower_generics(\n-        &mut self,\n-        generics: &Generics,\n-        itctx: ImplTraitContext,\n-    ) -> &'hir hir::Generics<'hir> {\n-        let generics_ctor = self.lower_generics_mut(generics, itctx);\n-        generics_ctor.into_generics(self.arena)\n-    }\n-\n     pub(super) fn lower_generic_bound_predicate(\n         &mut self,\n         ident: Ident,"}]}