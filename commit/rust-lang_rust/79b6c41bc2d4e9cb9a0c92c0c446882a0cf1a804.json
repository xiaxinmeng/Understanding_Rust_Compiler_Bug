{"sha": "79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YjZjNDFiYzJkNGU5Y2I5YTBjOTJjMGM0NDY4ODJhMGNmMWE4MDQ=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-01T14:09:02Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-13T11:28:43Z"}, "message": "Use a dummy outlives requirement for `where Type:,` (see #53696)\nA `WF(Type)` predicate was used previously, which did not play\nwell with implied bounds in chalk.", "tree": {"sha": "946cb4e9aba39535602dea511fd4e180be47a541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/946cb4e9aba39535602dea511fd4e180be47a541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804", "html_url": "https://github.com/rust-lang/rust/commit/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "156a932eef5eff43850167151023b58f96f13a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/156a932eef5eff43850167151023b58f96f13a10", "html_url": "https://github.com/rust-lang/rust/commit/156a932eef5eff43850167151023b58f96f13a10"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "471c0e7abbca6711a8144ca0531debd6b4d849cf", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804", "patch": "@@ -113,13 +113,14 @@ impl<'tcx> Lower<PolyDomainGoal<'tcx>> for ty::Predicate<'tcx> {\n             Predicate::RegionOutlives(predicate) => predicate.lower(),\n             Predicate::TypeOutlives(predicate) => predicate.lower(),\n             Predicate::Projection(predicate) => predicate.lower(),\n-            Predicate::WellFormed(ty) => {\n-                ty::Binder::dummy(DomainGoal::WellFormed(WellFormed::Ty(*ty)))\n+\n+            Predicate::WellFormed(..) |\n+            Predicate::ObjectSafe(..) |\n+            Predicate::ClosureKind(..) |\n+            Predicate::Subtype(..) |\n+            Predicate::ConstEvaluatable(..) => {\n+                bug!(\"unexpected predicate {}\", self)\n             }\n-            Predicate::ObjectSafe(..)\n-            | Predicate::ClosureKind(..)\n-            | Predicate::Subtype(..)\n-            | Predicate::ConstEvaluatable(..) => unimplemented!(),\n         }\n     }\n }"}, {"sha": "d2dc226aca2501fd9e14da18b08cd795770e1365", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804", "patch": "@@ -1857,8 +1857,9 @@ fn explicit_predicates_of<'a, 'tcx>(\n             &hir::WherePredicate::BoundPredicate(ref bound_pred) => {\n                 let ty = icx.to_ty(&bound_pred.bounded_ty);\n \n-                // Keep the type around in a WF predicate, in case of no bounds.\n-                // That way, `where Ty:` is not a complete noop (see #53696).\n+                // Keep the type around in a dummy predicate, in case of no bounds.\n+                // That way, `where Ty:` is not a complete noop (see #53696) and `Ty`\n+                // is still checked for WF.\n                 if bound_pred.bounds.is_empty() {\n                     if let ty::Param(_) = ty.sty {\n                         // This is a `where T:`, which can be in the HIR from the\n@@ -1869,7 +1870,10 @@ fn explicit_predicates_of<'a, 'tcx>(\n                         // compiler/tooling bugs from not handling WF predicates.\n                     } else {\n                         let span = bound_pred.bounded_ty.span;\n-                        predicates.push((ty::Predicate::WellFormed(ty), span));\n+                        let predicate = ty::OutlivesPredicate(ty, tcx.mk_region(ty::ReEmpty));\n+                        predicates.push(\n+                            (ty::Predicate::TypeOutlives(ty::Binder::dummy(predicate)), span)\n+                        );\n                     }\n                 }\n "}, {"sha": "77782c19b725238b881eedc0290a3bbf878b934b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804", "patch": "@@ -1325,15 +1325,10 @@ impl<'a> Clean<WherePredicate> for ty::Predicate<'a> {\n             Predicate::RegionOutlives(ref pred) => pred.clean(cx),\n             Predicate::TypeOutlives(ref pred) => pred.clean(cx),\n             Predicate::Projection(ref pred) => pred.clean(cx),\n-            Predicate::WellFormed(ty) => {\n-                // This comes from `where Ty:` (i.e. no bounds) (see #53696).\n-                WherePredicate::BoundPredicate {\n-                    ty: ty.clean(cx),\n-                    bounds: vec![],\n-                }\n-            }\n-            Predicate::ObjectSafe(_) => panic!(\"not user writable\"),\n-            Predicate::ClosureKind(..) => panic!(\"not user writable\"),\n+\n+            Predicate::WellFormed(..) |\n+            Predicate::ObjectSafe(..) |\n+            Predicate::ClosureKind(..) |\n             Predicate::ConstEvaluatable(..) => panic!(\"not user writable\"),\n         }\n     }"}, {"sha": "fcd516c89ba3326ede1278e5a9ee42259bd6c7d9", "filename": "src/test/ui/chalkify/lower_trait_where_clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr?ref=79b6c41bc2d4e9cb9a0c92c0c446882a0cf1a804", "patch": "@@ -8,8 +8,8 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: forall<'a, 'b, Self, T, U> { Implemented(Self: Foo<'a, 'b, T, U>) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n    = note: forall<'a, 'b, Self, T, U> { RegionOutlives('a: 'b) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n    = note: forall<'a, 'b, Self, T, U> { TypeOutlives(U: 'b) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n-   = note: forall<'a, 'b, Self, T, U> { WellFormed(Self: Foo<'a, 'b, T, U>) :- Implemented(Self: Foo<'a, 'b, T, U>), WellFormed(T: std::borrow::Borrow<U>), TypeOutlives(U: 'b), RegionOutlives('a: 'b), WellFormed(std::boxed::Box<T>). }\n-   = note: forall<'a, 'b, Self, T, U> { WellFormed(std::boxed::Box<T>) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n+   = note: forall<'a, 'b, Self, T, U> { TypeOutlives(std::boxed::Box<T>: '<empty>) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n+   = note: forall<'a, 'b, Self, T, U> { WellFormed(Self: Foo<'a, 'b, T, U>) :- Implemented(Self: Foo<'a, 'b, T, U>), WellFormed(T: std::borrow::Borrow<U>), TypeOutlives(U: 'b), RegionOutlives('a: 'b), TypeOutlives(std::boxed::Box<T>: '<empty>). }\n \n error: aborting due to previous error\n "}]}