{"sha": "3d5471f6ab90c1e0904c6f7eb34b01d2603534bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNTQ3MWY2YWI5MGMxZTA5MDRjNmY3ZWIzNGIwMWQyNjAzNTM0YmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T05:40:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T23:21:55Z"}, "message": "Fix some remaining rpath bugs", "tree": {"sha": "6878a11ad3bfdeea0f2850847c12bc48c06d4fad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6878a11ad3bfdeea0f2850847c12bc48c06d4fad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d5471f6ab90c1e0904c6f7eb34b01d2603534bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5471f6ab90c1e0904c6f7eb34b01d2603534bc", "html_url": "https://github.com/rust-lang/rust/commit/3d5471f6ab90c1e0904c6f7eb34b01d2603534bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d5471f6ab90c1e0904c6f7eb34b01d2603534bc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82ef8519c3ce9c2bf1176a6319cccbb3a5376bd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ef8519c3ce9c2bf1176a6319cccbb3a5376bd2", "html_url": "https://github.com/rust-lang/rust/commit/82ef8519c3ce9c2bf1176a6319cccbb3a5376bd2"}], "stats": {"total": 75, "additions": 59, "deletions": 16}, "files": [{"sha": "4e903af1951cf8f84da7d0ab3ece4ee6e63b7d8c", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d5471f6ab90c1e0904c6f7eb34b01d2603534bc/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5471f6ab90c1e0904c6f7eb34b01d2603534bc/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=3d5471f6ab90c1e0904c6f7eb34b01d2603534bc", "patch": "@@ -576,6 +576,7 @@ fn link_binary(sess: session::session,\n \n     gcc_args += rpath::get_rpath_flags(sess, saved_out_filename);\n \n+    log #fmt(\"gcc link args: %s\", str::connect(gcc_args, \" \"));\n     // We run 'gcc' here\n     let err_code = run::run_program(prog, gcc_args);\n     if 0 != err_code {"}, {"sha": "3e6fab37919d4b8bf9083aa42d51ef2b2fcf7983", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3d5471f6ab90c1e0904c6f7eb34b01d2603534bc/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5471f6ab90c1e0904c6f7eb34b01d2603534bc/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=3d5471f6ab90c1e0904c6f7eb34b01d2603534bc", "patch": "@@ -13,20 +13,17 @@ export get_rpath_flags, test;\n \n #[cfg(target_os=\"linux\")]\n #[cfg(target_os=\"macos\")]\n-fn get_rpath_flags(_sess: session::session, _out_filename: str) -> [str] {\n+fn get_rpath_flags(sess: session::session, out_filename: str) -> [str] {\n     log \"preparing the RPATH!\";\n \n-    // FIXME\n-    /*\n     let cwd = os::getcwd();\n     let sysroot = sess.filesearch().sysroot();\n     let output = out_filename;\n     let libs = cstore::get_used_crate_files(sess.get_cstore());\n     let target_triple = sess.get_opts().target_triple;\n     let rpaths = get_rpaths(cwd, sysroot, output, libs, target_triple);\n-    */\n-    let rpaths = [];\n-    rpaths_to_flags(rpaths)\n+    rpaths_to_flags(rpaths);\n+    [] // FIXME: activate RPATH!\n }\n \n #[cfg(target_os=\"win32\")]\n@@ -53,14 +50,27 @@ fn get_rpaths(cwd: fs::path, sysroot: fs::path,\n     // Use relative paths to the libraries. Binaries can be moved\n     // as long as they maintain the relative relationship to the\n     // crates they depend on.\n-    let rpaths = get_rpaths_relative_to_output(cwd, output, libs);\n+    let rel_rpaths = get_rpaths_relative_to_output(cwd, output, libs);\n \n     // Make backup absolute paths to the libraries. Binaries can\n     // be moved as long as the crates they link against don't move.\n-    rpaths += get_absolute_rpaths(cwd, libs);\n+    let abs_rpaths = get_absolute_rpaths(cwd, libs);\n \n     // And a final backup rpath to the global library location.\n-    rpaths += [get_install_prefix_rpath(target_triple)];\n+    let fallback_rpaths = [get_install_prefix_rpath(target_triple)];\n+\n+    fn log_rpaths(desc: str, rpaths: [str]) {\n+        log #fmt(\"%s rpaths:\", desc);\n+        for rpath in rpaths {\n+            log #fmt(\"    %s\", rpath);\n+        }\n+    }\n+\n+    log_rpaths(\"relative\", rel_rpaths);\n+    log_rpaths(\"absolute\", abs_rpaths);\n+    log_rpaths(\"fallback\", fallback_rpaths);\n+\n+    let rpaths = rel_rpaths + abs_rpaths + fallback_rpaths;\n \n     // Remove duplicates\n     let rpaths = minimize_rpaths(rpaths);\n@@ -85,6 +95,8 @@ fn get_rpath_relative_to_output(cwd: fs::path,\n fn get_relative_to(abs1: fs::path, abs2: fs::path) -> fs::path {\n     assert fs::path_is_absolute(abs1);\n     assert fs::path_is_absolute(abs2);\n+    log #fmt(\"finding relative path from %s to %s\",\n+             abs1, abs2);\n     let normal1 = fs::normalize(abs1);\n     let normal2 = fs::normalize(abs2);\n     let split1 = str::split(normal1, os_fs::path_sep as u8);\n@@ -109,16 +121,19 @@ fn get_relative_to(abs1: fs::path, abs2: fs::path) -> fs::path {\n \n     path += vec::slice(split2, start_idx, len2 - 1u);\n \n-    check vec::is_not_empty(path);\n-    ret fs::connect_many(path);\n+    if check vec::is_not_empty(path) {\n+        ret fs::connect_many(path);\n+    } else {\n+        ret \".\";\n+    }\n }\n \n fn get_absolute_rpaths(cwd: fs::path, libs: [fs::path]) -> [str] {\n     vec::map(bind get_absolute_rpath(cwd, _), libs)\n }\n \n fn get_absolute_rpath(cwd: fs::path, lib: fs::path) -> str {\n-    get_absolute(cwd, lib)\n+    fs::dirname(get_absolute(cwd, lib))\n }\n \n fn get_absolute(cwd: fs::path, lib: fs::path) -> fs::path {\n@@ -144,9 +159,13 @@ fn get_install_prefix_rpath(target_triple: str) -> str {\n \n fn minimize_rpaths(rpaths: [str]) -> [str] {\n     let set = map::new_str_hash::<()>();\n-    for rpath in rpaths { set.insert(rpath, ()); }\n     let minimized = [];\n-    for each rpath in set.keys() { minimized += [rpath]; }\n+    for rpath in rpaths {\n+        if !set.contains_key(rpath) {\n+            minimized += [rpath];\n+            set.insert(rpath, ());\n+        }\n+    }\n     ret minimized;\n }\n \n@@ -182,11 +201,18 @@ mod test {\n     }\n \n     #[test]\n-    fn test_minimize() {\n+    fn test_minimize1() {\n         let res = minimize_rpaths([\"rpath1\", \"rpath2\", \"rpath1\"]);\n         assert res == [\"rpath1\", \"rpath2\"];\n     }\n \n+    #[test]\n+    fn test_minimize2() {\n+        let res = minimize_rpaths([\"1a\", \"2\", \"2\", \"1a\", \"4a\",\n+                                   \"1a\", \"2\", \"3\", \"4a\", \"3\"]);\n+        assert res == [\"1a\", \"2\", \"4a\", \"3\"];\n+    }\n+\n     #[test]\n     fn test_relative_to1() {\n         let p1 = \"/usr/bin/rustc\";\n@@ -243,10 +269,26 @@ mod test {\n         assert res == \"..\";\n     }\n \n+    #[test]\n+    fn test_relative_to8() {\n+        let p1 = \"/home/brian/Dev/rust/build/\"\n+            + \"stage2/lib/rustc/i686-unknown-linux-gnu/lib/librustc.so\";\n+        let p2 = \"/home/brian/Dev/rust/build/stage2/bin/..\"\n+            + \"/lib/rustc/i686-unknown-linux-gnu/lib/libstd.so\";\n+        let res = get_relative_to(p1, p2);\n+        assert res == \".\";\n+    }\n+\n     #[test]\n     fn test_rpath_relative() {\n         let res = get_rpath_relative_to_output(\n             \"/usr\", \"bin/rustc\", \"lib/libstd.so\");\n         assert res == \"$ORIGIN/../lib\";\n     }\n+\n+    #[test]\n+    fn test_get_absolute_rpath() {\n+        let res = get_absolute_rpath(\"/usr\", \"lib/libstd.so\");\n+        assert res == \"/usr/lib\";\n+    }\n }"}, {"sha": "d6f058ab1ca6a67cd018683dccaa5a5b78287dc5", "filename": "src/comp/util/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d5471f6ab90c1e0904c6f7eb34b01d2603534bc/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5471f6ab90c1e0904c6f7eb34b01d2603534bc/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=3d5471f6ab90c1e0904c6f7eb34b01d2603534bc", "patch": "@@ -88,7 +88,7 @@ fn make_target_lib_path(sysroot: fs::path,\n \n fn get_default_sysroot() -> fs::path {\n     alt os::get_exe_path() {\n-      option::some(p) { fs::connect(p, \"..\") }\n+      option::some(p) { fs::normalize(fs::connect(p, \"..\")) }\n       option::none. {\n         fail \"can't determine value for sysroot\";\n       }"}]}