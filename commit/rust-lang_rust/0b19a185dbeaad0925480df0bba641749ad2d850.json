{"sha": "0b19a185dbeaad0925480df0bba641749ad2d850", "node_id": "C_kwDOAAsO6NoAKDBiMTlhMTg1ZGJlYWFkMDkyNTQ4MGRmMGJiYTY0MTc0OWFkMmQ4NTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-16T04:05:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-16T04:05:57Z"}, "message": "Rollup merge of #100460 - cuviper:drop-llvm-12, r=nagisa\n\nUpdate the minimum external LLVM to 13\n\nWith this change, we'll have stable support for LLVM 13 through 15 (pending release).\nFor reference, the previous increase to LLVM 12 was #90175.\n\nr? `@nagisa`", "tree": {"sha": "d8f3a2b92bb06513fc8dda38390a193e039ee4dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8f3a2b92bb06513fc8dda38390a193e039ee4dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b19a185dbeaad0925480df0bba641749ad2d850", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+xelCRBK7hj4Ov3rIwAAgQwIAIC+ZtPPYCGlOof3+OgMVNyh\nU6Ww6Qf6uvq9uvD3vi0LrJOMO+X7nrP3VjdWK3Rb6gfCpuEOwHkzgcQUCUAVN/QV\nQj0evhiERfxCqi/nH9mzsLoK1SaiGdJICuS7KrxbpNjWzJ20GlPnklU3D1iuKr5e\nY9eurdIIhZIB/WTgYQhGLkgk82BTXgceL9ZdztrR6uBJa4FJ8X+dvjp3NwMx4nym\nbDb9zRteUtiAhh86VunvjgLqXFhTUqRKR8kE43J/Hs2l+HkI6s6lZEd5C0j0my6H\nKKoHaiWR73Nq7yxUkEsH5Gzvvly5Bu1sUBkaBVPfUBXRtRrrOIHj3SujZHxwjOY=\n=Ud/k\n-----END PGP SIGNATURE-----\n", "payload": "tree d8f3a2b92bb06513fc8dda38390a193e039ee4dc\nparent f347c424613ba34a95120908612b91440f3093c2\nparent 2970ad8aeeaa94ad5af5fc49150c14bcf86bf7c9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660622757 +0200\ncommitter GitHub <noreply@github.com> 1660622757 +0200\n\nRollup merge of #100460 - cuviper:drop-llvm-12, r=nagisa\n\nUpdate the minimum external LLVM to 13\n\nWith this change, we'll have stable support for LLVM 13 through 15 (pending release).\nFor reference, the previous increase to LLVM 12 was #90175.\n\nr? `@nagisa`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b19a185dbeaad0925480df0bba641749ad2d850", "html_url": "https://github.com/rust-lang/rust/commit/0b19a185dbeaad0925480df0bba641749ad2d850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b19a185dbeaad0925480df0bba641749ad2d850/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f347c424613ba34a95120908612b91440f3093c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f347c424613ba34a95120908612b91440f3093c2", "html_url": "https://github.com/rust-lang/rust/commit/f347c424613ba34a95120908612b91440f3093c2"}, {"sha": "2970ad8aeeaa94ad5af5fc49150c14bcf86bf7c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2970ad8aeeaa94ad5af5fc49150c14bcf86bf7c9", "html_url": "https://github.com/rust-lang/rust/commit/2970ad8aeeaa94ad5af5fc49150c14bcf86bf7c9"}], "stats": {"total": 335, "additions": 46, "deletions": 289}, "files": [{"sha": "7eb41fec36aba9615db2496eb479ad96106abbd0", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -43,7 +43,7 @@ jobs:\n           - name: mingw-check\n             os: ubuntu-20.04-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-12\n+          - name: x86_64-gnu-llvm-13\n             os: ubuntu-20.04-xl\n             env: {}\n           - name: x86_64-gnu-tools\n@@ -274,11 +274,11 @@ jobs:\n           - name: x86_64-gnu-distcheck\n             os: ubuntu-20.04-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-12\n+          - name: x86_64-gnu-llvm-13\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-20.04-xl\n-          - name: x86_64-gnu-llvm-12-stage1\n+          - name: x86_64-gnu-llvm-13-stage1\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-20.04-xl"}, {"sha": "2a6612eb86f12c62b41f516b41dfe18c5cd40806", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -3,7 +3,6 @@ use crate::builder::Builder;\n use crate::common::Funclet;\n use crate::context::CodegenCx;\n use crate::llvm;\n-use crate::llvm_util;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -419,13 +418,6 @@ pub(crate) fn inline_asm_call<'ll>(\n         let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons.as_ptr().cast(), cons.len());\n         debug!(\"constraint verification result: {:?}\", constraints_ok);\n         if constraints_ok {\n-            if unwind && llvm_util::get_version() < (13, 0, 0) {\n-                bx.cx.sess().span_fatal(\n-                    line_spans[0],\n-                    \"unwinding from inline assembly is only supported on llvm >= 13.\",\n-                );\n-            }\n-\n             let v = llvm::LLVMRustInlineAsm(\n                 fty,\n                 asm.as_ptr().cast(),"}, {"sha": "740a68d0772c1632ba54061cc8bb783591eecfd6", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -5,7 +5,7 @@ use crate::back::profiling::{\n use crate::base;\n use crate::common;\n use crate::consts;\n-use crate::llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n+use crate::llvm::{self, DiagnosticInfo, PassManager};\n use crate::llvm_util;\n use crate::type_::Type;\n use crate::LlvmCodegenBackend;\n@@ -304,17 +304,14 @@ impl<'a> DiagnosticHandlers<'a> {\n                 remark_passes.as_ptr(),\n                 remark_passes.len(),\n             );\n-            llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, data.cast());\n             DiagnosticHandlers { data, llcx, old_handler }\n         }\n     }\n }\n \n impl<'a> Drop for DiagnosticHandlers<'a> {\n     fn drop(&mut self) {\n-        use std::ptr::null_mut;\n         unsafe {\n-            llvm::LLVMRustSetInlineAsmDiagnosticHandler(self.llcx, inline_asm_handler, null_mut());\n             llvm::LLVMRustContextSetDiagnosticHandler(self.llcx, self.old_handler);\n             drop(Box::from_raw(self.data));\n         }\n@@ -342,16 +339,6 @@ fn report_inline_asm(\n     cgcx.diag_emitter.inline_asm_error(cookie as u32, msg, level, source);\n }\n \n-unsafe extern \"C\" fn inline_asm_handler(diag: &SMDiagnostic, user: *const c_void, cookie: c_uint) {\n-    if user.is_null() {\n-        return;\n-    }\n-    let (cgcx, _) = *(user as *const (&CodegenContext<LlvmCodegenBackend>, &Handler));\n-\n-    let smdiag = llvm::diagnostic::SrcMgrDiagnostic::unpack(diag);\n-    report_inline_asm(cgcx, smdiag.message, smdiag.level, cookie, smdiag.source);\n-}\n-\n unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void) {\n     if user.is_null() {\n         return;"}, {"sha": "073feecb1647f1b37236479ff828f9c6ae938f09", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 25, "deletions": 54, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -3,7 +3,6 @@ use crate::common::Funclet;\n use crate::context::CodegenCx;\n use crate::llvm::{self, BasicBlock, False};\n use crate::llvm::{AtomicOrdering, AtomicRmwBinOp, SynchronizationScope};\n-use crate::llvm_util;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -1038,25 +1037,11 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         dst: &'ll Value,\n         cmp: &'ll Value,\n         src: &'ll Value,\n-        mut order: rustc_codegen_ssa::common::AtomicOrdering,\n+        order: rustc_codegen_ssa::common::AtomicOrdering,\n         failure_order: rustc_codegen_ssa::common::AtomicOrdering,\n         weak: bool,\n     ) -> &'ll Value {\n         let weak = if weak { llvm::True } else { llvm::False };\n-        if llvm_util::get_version() < (13, 0, 0) {\n-            use rustc_codegen_ssa::common::AtomicOrdering::*;\n-            // Older llvm has the pre-C++17 restriction on\n-            // success and failure memory ordering,\n-            // requiring the former to be at least as strong as the latter.\n-            // So, for llvm 12, we upgrade the success ordering to a stronger\n-            // one if necessary.\n-            match (order, failure_order) {\n-                (Relaxed, Acquire) => order = Acquire,\n-                (Release, Acquire) => order = AcquireRelease,\n-                (_, SequentiallyConsistent) => order = SequentiallyConsistent,\n-                _ => {}\n-            }\n-        }\n         unsafe {\n             llvm::LLVMRustBuildAtomicCmpXchg(\n                 self.llbuilder,\n@@ -1444,51 +1429,37 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn fptoint_sat_broken_in_llvm(&self) -> bool {\n-        match self.tcx.sess.target.arch.as_ref() {\n-            // FIXME - https://bugs.llvm.org/show_bug.cgi?id=50083\n-            \"riscv64\" => llvm_util::get_version() < (13, 0, 0),\n-            _ => false,\n-        }\n-    }\n-\n     fn fptoint_sat(\n         &mut self,\n         signed: bool,\n         val: &'ll Value,\n         dest_ty: &'ll Type,\n     ) -> Option<&'ll Value> {\n-        if !self.fptoint_sat_broken_in_llvm() {\n-            let src_ty = self.cx.val_ty(val);\n-            let (float_ty, int_ty, vector_length) = if self.cx.type_kind(src_ty) == TypeKind::Vector\n-            {\n-                assert_eq!(self.cx.vector_length(src_ty), self.cx.vector_length(dest_ty));\n-                (\n-                    self.cx.element_type(src_ty),\n-                    self.cx.element_type(dest_ty),\n-                    Some(self.cx.vector_length(src_ty)),\n-                )\n-            } else {\n-                (src_ty, dest_ty, None)\n-            };\n-            let float_width = self.cx.float_width(float_ty);\n-            let int_width = self.cx.int_width(int_ty);\n-\n-            let instr = if signed { \"fptosi\" } else { \"fptoui\" };\n-            let name = if let Some(vector_length) = vector_length {\n-                format!(\n-                    \"llvm.{}.sat.v{}i{}.v{}f{}\",\n-                    instr, vector_length, int_width, vector_length, float_width\n-                )\n-            } else {\n-                format!(\"llvm.{}.sat.i{}.f{}\", instr, int_width, float_width)\n-            };\n-            let f =\n-                self.declare_cfn(&name, llvm::UnnamedAddr::No, self.type_func(&[src_ty], dest_ty));\n-            Some(self.call(self.type_func(&[src_ty], dest_ty), f, &[val], None))\n+        let src_ty = self.cx.val_ty(val);\n+        let (float_ty, int_ty, vector_length) = if self.cx.type_kind(src_ty) == TypeKind::Vector {\n+            assert_eq!(self.cx.vector_length(src_ty), self.cx.vector_length(dest_ty));\n+            (\n+                self.cx.element_type(src_ty),\n+                self.cx.element_type(dest_ty),\n+                Some(self.cx.vector_length(src_ty)),\n+            )\n         } else {\n-            None\n-        }\n+            (src_ty, dest_ty, None)\n+        };\n+        let float_width = self.cx.float_width(float_ty);\n+        let int_width = self.cx.int_width(int_ty);\n+\n+        let instr = if signed { \"fptosi\" } else { \"fptoui\" };\n+        let name = if let Some(vector_length) = vector_length {\n+            format!(\n+                \"llvm.{}.sat.v{}i{}.v{}f{}\",\n+                instr, vector_length, int_width, vector_length, float_width\n+            )\n+        } else {\n+            format!(\"llvm.{}.sat.i{}.f{}\", instr, int_width, float_width)\n+        };\n+        let f = self.declare_cfn(&name, llvm::UnnamedAddr::No, self.type_func(&[src_ty], dest_ty));\n+        Some(self.call(self.type_func(&[src_ty], dest_ty), f, &[val], None))\n     }\n \n     pub(crate) fn landing_pad("}, {"sha": "d4d84147239068184b0f54bb68c34bfa6df4c3ac", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -142,17 +142,6 @@ pub unsafe fn create_module<'ll>(\n \n     let mut target_data_layout = sess.target.data_layout.to_string();\n     let llvm_version = llvm_util::get_version();\n-    if llvm_version < (13, 0, 0) {\n-        if sess.target.arch == \"powerpc64\" {\n-            target_data_layout = target_data_layout.replace(\"-S128\", \"\");\n-        }\n-        if sess.target.arch == \"wasm32\" {\n-            target_data_layout = \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string();\n-        }\n-        if sess.target.arch == \"wasm64\" {\n-            target_data_layout = \"e-m:e-p:64:64-i64:64-n32:64-S128\".to_string();\n-        }\n-    }\n     if llvm_version < (14, 0, 0) {\n         if sess.target.llvm_target == \"i686-pc-windows-msvc\"\n             || sess.target.llvm_target == \"i586-pc-windows-msvc\""}, {"sha": "4ca3dd78caedec2f22e9cb679f44c36451ff62b7", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -2424,12 +2424,6 @@ extern \"C\" {\n         cookie_out: &mut c_uint,\n     ) -> &'a SMDiagnostic;\n \n-    pub fn LLVMRustSetInlineAsmDiagnosticHandler(\n-        C: &Context,\n-        H: InlineAsmDiagHandlerTy,\n-        CX: *mut c_void,\n-    );\n-\n     #[allow(improper_ctypes)]\n     pub fn LLVMRustUnpackSMDiagnostic(\n         d: &SMDiagnostic,"}, {"sha": "f5d676c44e3428b83677bd237daf7e5ad9ca2782", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -92,16 +92,6 @@ unsafe fn configure_llvm(sess: &Session) {\n             add(\"-generate-arange-section\", false);\n         }\n \n-        // Disable the machine outliner by default in LLVM versions 11 and LLVM\n-        // version 12, where it leads to miscompilation.\n-        //\n-        // Ref:\n-        // - https://github.com/rust-lang/rust/issues/85351\n-        // - https://reviews.llvm.org/D103167\n-        if llvm_util::get_version() < (13, 0, 0) {\n-            add(\"-enable-machine-outliner=never\", false);\n-        }\n-\n         match sess.opts.unstable_opts.merge_functions.unwrap_or(sess.target.merge_functions) {\n             MergeFunctions::Disabled | MergeFunctions::Trampolines => {}\n             MergeFunctions::Aliases => {"}, {"sha": "7da6ab71309ddff57b11120ed1f0450616c97b5f", "filename": "compiler/rustc_llvm/llvm-wrapper/CoverageMappingWrapper.cpp", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -24,17 +24,10 @@ extern \"C\" void LLVMRustCoverageWriteFilenamesSectionToBuffer(\n     const char* const Filenames[],\n     size_t FilenamesLen,\n     RustStringRef BufferOut) {\n-#if LLVM_VERSION_GE(13,0)\n   SmallVector<std::string,32> FilenameRefs;\n   for (size_t i = 0; i < FilenamesLen; i++) {\n     FilenameRefs.push_back(std::string(Filenames[i]));\n   }\n-#else\n-  SmallVector<StringRef,32> FilenameRefs;\n-  for (size_t i = 0; i < FilenamesLen; i++) {\n-    FilenameRefs.push_back(StringRef(Filenames[i]));\n-  }\n-#endif\n   auto FilenamesWriter = coverage::CoverageFilenamesSectionWriter(\n     makeArrayRef(FilenameRefs));\n   RawRustStringOstream OS(BufferOut);\n@@ -109,9 +102,5 @@ extern \"C\" void LLVMRustCoverageWriteMappingVarNameToString(RustStringRef Str) {\n }\n \n extern \"C\" uint32_t LLVMRustCoverageMappingVersion() {\n-#if LLVM_VERSION_GE(13, 0)\n   return coverage::CovMapVersion::Version6;\n-#else\n-  return coverage::CovMapVersion::Version5;\n-#endif\n }"}, {"sha": "b4314223722fce0aee8a975a23b7427a8506bef3", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -870,19 +870,11 @@ LLVMRustOptimizeWithNewPassManager(\n                         PGOOptions::NoCSAction, DebugInfoForProfiling);\n   }\n \n-#if LLVM_VERSION_GE(13, 0)\n   PassBuilder PB(TM, PTO, PGOOpt, &PIC);\n   LoopAnalysisManager LAM;\n   FunctionAnalysisManager FAM;\n   CGSCCAnalysisManager CGAM;\n   ModuleAnalysisManager MAM;\n-#else\n-  PassBuilder PB(DebugPassManager, TM, PTO, PGOOpt, &PIC);\n-  LoopAnalysisManager LAM(DebugPassManager);\n-  FunctionAnalysisManager FAM(DebugPassManager);\n-  CGSCCAnalysisManager CGAM(DebugPassManager);\n-  ModuleAnalysisManager MAM(DebugPassManager);\n-#endif\n \n   FAM.registerPass([&] { return PB.buildDefaultAAPipeline(); });\n \n@@ -1019,11 +1011,7 @@ LLVMRustOptimizeWithNewPassManager(\n     }\n   }\n \n-#if LLVM_VERSION_GE(13, 0)\n   ModulePassManager MPM;\n-#else\n-  ModulePassManager MPM(DebugPassManager);\n-#endif\n   bool NeedThinLTOBufferPasses = UseThinLTOBuffers;\n   if (!NoPrepopulatePasses) {\n     // The pre-link pipelines don't support O0 and require using budilO0DefaultPipeline() instead.\n@@ -1438,17 +1426,13 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n     Ret->ResolvedODR[ModuleIdentifier][GUID] = NewLinkage;\n   };\n \n-#if LLVM_VERSION_GE(13,0)\n   // Uses FromPrevailing visibility scheme which works for many binary\n   // formats. We probably could and should use ELF visibility scheme for many of\n   // our targets, however.\n   lto::Config conf;\n   thinLTOResolvePrevailingInIndex(conf, Ret->Index, isPrevailing, recordNewLinkage,\n                                   Ret->GUIDPreservedSymbols);\n-#else\n-  thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage,\n-                                  Ret->GUIDPreservedSymbols);\n-#endif\n+\n   // Here we calculate an `ExportedGUIDs` set for use in the `isExported`\n   // callback below. This callback below will dictate the linkage for all\n   // summaries in the index, and we basically just only want to ensure that dead"}, {"sha": "931ce78721cb862b7b83d28352bd3bdbbfc6ff15", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -413,18 +413,12 @@ LLVMRustBuildAtomicCmpXchg(LLVMBuilderRef B, LLVMValueRef Target,\n                            LLVMValueRef Old, LLVMValueRef Source,\n                            LLVMAtomicOrdering Order,\n                            LLVMAtomicOrdering FailureOrder, LLVMBool Weak) {\n-#if LLVM_VERSION_GE(13,0)\n   // Rust probably knows the alignment of the target value and should be able to\n   // specify something more precise than MaybeAlign here. See also\n   // https://reviews.llvm.org/D97224 which may be a useful reference.\n   AtomicCmpXchgInst *ACXI = unwrap(B)->CreateAtomicCmpXchg(\n       unwrap(Target), unwrap(Old), unwrap(Source), llvm::MaybeAlign(), fromRust(Order),\n       fromRust(FailureOrder));\n-#else\n-  AtomicCmpXchgInst *ACXI = unwrap(B)->CreateAtomicCmpXchg(\n-      unwrap(Target), unwrap(Old), unwrap(Source), fromRust(Order),\n-      fromRust(FailureOrder));\n-#endif\n   ACXI->setWeak(Weak);\n   return wrap(ACXI);\n }\n@@ -472,19 +466,11 @@ LLVMRustInlineAsm(LLVMTypeRef Ty, char *AsmString, size_t AsmStringLen,\n                   char *Constraints, size_t ConstraintsLen,\n                   LLVMBool HasSideEffects, LLVMBool IsAlignStack,\n                   LLVMRustAsmDialect Dialect, LLVMBool CanThrow) {\n-#if LLVM_VERSION_GE(13, 0)\n   return wrap(InlineAsm::get(unwrap<FunctionType>(Ty),\n                              StringRef(AsmString, AsmStringLen),\n                              StringRef(Constraints, ConstraintsLen),\n                              HasSideEffects, IsAlignStack,\n                              fromRust(Dialect), CanThrow));\n-#else\n-  return wrap(InlineAsm::get(unwrap<FunctionType>(Ty),\n-                             StringRef(AsmString, AsmStringLen),\n-                             StringRef(Constraints, ConstraintsLen),\n-                             HasSideEffects, IsAlignStack,\n-                             fromRust(Dialect)));\n-#endif\n }\n \n extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty, char *Constraints,\n@@ -1274,10 +1260,8 @@ static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n     return LLVMRustDiagnosticKind::Linker;\n   case DK_Unsupported:\n     return LLVMRustDiagnosticKind::Unsupported;\n-#if LLVM_VERSION_GE(13, 0)\n   case DK_SrcMgr:\n     return LLVMRustDiagnosticKind::SrcMgr;\n-#endif\n   default:\n     return (Kind >= DK_FirstRemark && Kind <= DK_LastRemark)\n                ? LLVMRustDiagnosticKind::OptimizationRemarkOther\n@@ -1351,30 +1335,11 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n \n DEFINE_SIMPLE_CONVERSION_FUNCTIONS(SMDiagnostic, LLVMSMDiagnosticRef)\n \n-#if LLVM_VERSION_LT(13, 0)\n-using LLVMInlineAsmDiagHandlerTy = LLVMContext::InlineAsmDiagHandlerTy;\n-#else\n-using LLVMInlineAsmDiagHandlerTy = void*;\n-#endif\n-\n-extern \"C\" void LLVMRustSetInlineAsmDiagnosticHandler(\n-    LLVMContextRef C, LLVMInlineAsmDiagHandlerTy H, void *CX) {\n-  // Diagnostic handlers were unified in LLVM change 5de2d189e6ad, so starting\n-  // with LLVM 13 this function is gone.\n-#if LLVM_VERSION_LT(13, 0)\n-  unwrap(C)->setInlineAsmDiagnosticHandler(H, CX);\n-#endif\n-}\n-\n extern \"C\" LLVMSMDiagnosticRef LLVMRustGetSMDiagnostic(\n     LLVMDiagnosticInfoRef DI, unsigned *Cookie) {\n-#if LLVM_VERSION_GE(13, 0)\n   llvm::DiagnosticInfoSrcMgr *SM = static_cast<llvm::DiagnosticInfoSrcMgr *>(unwrap(DI));\n   *Cookie = SM->getLocCookie();\n   return wrap(&SM->getSMDiag());\n-#else\n-  report_fatal_error(\"Shouldn't get called on older versions\");\n-#endif\n }\n \n extern \"C\" bool LLVMRustUnpackSMDiagnostic(LLVMSMDiagnosticRef DRef,"}, {"sha": "171f49022369a8544a15a70e5bbf61b2611ca426", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1139,11 +1139,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn le(&self, other: &Rhs) -> bool {\n-        // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.\n-        // FIXME: The root cause was fixed upstream in LLVM with:\n-        // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775\n-        // Revert this workaround once support for LLVM 12 gets dropped.\n-        !matches!(self.partial_cmp(other), None | Some(Greater))\n+        matches!(self.partial_cmp(other), Some(Less | Equal))\n     }\n \n     /// This method tests greater than (for `self` and `other`) and is used by the `>` operator."}, {"sha": "1bba5e68be446be6cd88c931dfa0a13d84f1dd86", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -515,11 +515,11 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     let version = output(cmd.arg(\"--version\"));\n     let mut parts = version.split('.').take(2).filter_map(|s| s.parse::<u32>().ok());\n     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n-        if major >= 12 {\n+        if major >= 13 {\n             return;\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=12.0\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=13.0\\n\\n\", version)\n }\n \n fn configure_cmake("}, {"sha": "21891c1244d7c9a75d2300c93756a32df7bf9d14", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-13-stage1/Dockerfile", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:20.04\n+FROM ubuntu:22.04\n \n ARG DEBIAN_FRONTEND=noninteractive\n RUN apt-get update && apt-get install -y --no-install-recommends \\\n@@ -14,8 +14,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n     cmake \\\n     sudo \\\n     gdb \\\n-    llvm-12-tools \\\n-    llvm-12-dev \\\n+    llvm-13-tools \\\n+    llvm-13-dev \\\n     libedit-dev \\\n     libssl-dev \\\n     pkg-config \\\n@@ -29,7 +29,7 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n     --build=x86_64-unknown-linux-gnu \\\n-    --llvm-root=/usr/lib/llvm-12 \\\n+    --llvm-root=/usr/lib/llvm-13 \\\n     --enable-llvm-link-shared \\\n     --set rust.thin-lto-import-instr-limit=10\n \n@@ -41,4 +41,4 @@ ENV SCRIPT python2.7 ../x.py --stage 1 test --exclude src/tools/tidy && \\\n     # It will also detect tests lacking `// EMIT_MIR_FOR_EACH_BIT_WIDTH`,\n     # despite having different output on 32-bit vs 64-bit targets.\n     python2.7 ../x.py --stage 1 test src/test/mir-opt \\\n-    --host='' --target=i686-unknown-linux-gnu\n\\ No newline at end of file\n+    --host='' --target=i686-unknown-linux-gnu", "previous_filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-12-stage1/Dockerfile"}, {"sha": "5f3af2f47caec7205dcf777a14bba9dcc566a2e4", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-13/Dockerfile", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13%2FDockerfile?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:20.04\n+FROM ubuntu:22.04\n \n ARG DEBIAN_FRONTEND=noninteractive\n \n@@ -17,8 +17,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-12-tools \\\n-  llvm-12-dev \\\n+  llvm-13-tools \\\n+  llvm-13-dev \\\n   libedit-dev \\\n   libssl-dev \\\n   pkg-config \\\n@@ -40,7 +40,7 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-12 \\\n+      --llvm-root=/usr/lib/llvm-13 \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n ", "previous_filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-12/Dockerfile"}, {"sha": "91204eb0b05725e7d89f8a74f220dd086c8f98b3", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -284,7 +284,7 @@ jobs:\n           - name: mingw-check\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-12\n+          - name: x86_64-gnu-llvm-13\n             <<: *job-linux-xl\n             \n           - name: x86_64-gnu-tools\n@@ -431,12 +431,12 @@ jobs:\n           - name: x86_64-gnu-distcheck\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-12\n+          - name: x86_64-gnu-llvm-13\n             env:\n               RUST_BACKTRACE: 1\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-12-stage1\n+          - name: x86_64-gnu-llvm-13-stage1\n             env:\n               RUST_BACKTRACE: 1\n             <<: *job-linux-xl"}, {"sha": "da14cd026780a0dba968ddb1205e52140d4c130a", "filename": "src/test/assembly/aarch64-pointer-auth.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,6 +1,5 @@\n // Test that PAC instructions are emitted when branch-protection is specified.\n \n-// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target aarch64-unknown-linux-gnu\n // compile-flags: -Z branch-protection=pac-ret,leaf"}, {"sha": "ffdc8f2e351dd0b1ab5256080e7dea03f3b83bcd", "filename": "src/test/assembly/asm/avr-modifiers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fasm%2Favr-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fasm%2Favr-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Favr-modifiers.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 13.0\n // assembly-output: emit-asm\n // compile-flags: --target avr-unknown-gnu-atmega328\n // needs-llvm-components: avr"}, {"sha": "58bf1ad9e35eb1429e43c0f2308e91689610e269", "filename": "src/test/assembly/asm/avr-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fasm%2Favr-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fasm%2Favr-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Favr-types.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 13.0\n // assembly-output: emit-asm\n // compile-flags: --target avr-unknown-gnu-atmega328\n // needs-llvm-components: avr"}, {"sha": "f894644cc20ee50cab09aff52b2770c9541124ae", "filename": "src/test/assembly/asm/bpf-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 13.0\n // assembly-output: emit-asm\n // compile-flags: --target bpfel-unknown-none -C target_feature=+alu32\n // needs-llvm-components: bpf"}, {"sha": "4fa2e8081f816bbf32fb28a964ee2cb84c0c9219", "filename": "src/test/assembly/asm/msp430-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fasm%2Fmsp430-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fasm%2Fmsp430-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmsp430-types.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 13.0\n // assembly-output: emit-asm\n // compile-flags: --target msp430-none-elf\n // needs-llvm-components: msp430"}, {"sha": "0ca8908497ad7b74f2ae23dab7420aedcbb35c29", "filename": "src/test/assembly/asm/powerpc-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0.1\n // revisions: powerpc powerpc64\n // assembly-output: emit-asm\n //[powerpc] compile-flags: --target powerpc-unknown-linux-gnu"}, {"sha": "2fb62e93ea36c0909f699aa2be526809afabc334", "filename": "src/test/assembly/stack-protector/stack-protector-target-support.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fstack-protector%2Fstack-protector-target-support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fassembly%2Fstack-protector%2Fstack-protector-target-support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fstack-protector%2Fstack-protector-target-support.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -156,7 +156,6 @@\n // [r74] needs-llvm-components: x86\n // [r75] compile-flags:--target x86_64-fortanix-unknown-sgx\n // [r75] needs-llvm-components: x86\n-// [r75] min-llvm-version: 11.0.0\n // [r76] compile-flags:--target x86_64-fuchsia\n // [r76] needs-llvm-components: x86\n // [r77] compile-flags:--target x86_64-linux-android"}, {"sha": "c97933035d101898a690d27ab9c62388d2649422", "filename": "src/test/codegen/asm-may_unwind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fcodegen%2Fasm-may_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fcodegen%2Fasm-may_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-may_unwind.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 13.0.0\n // compile-flags: -O\n // only-x86_64\n "}, {"sha": "bd4c63dcff1d726033c7ece216065f7beb583a44", "filename": "src/test/codegen/atomic-operations-llvm-12.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f347c424613ba34a95120908612b91440f3093c2/src%2Ftest%2Fcodegen%2Fatomic-operations-llvm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f347c424613ba34a95120908612b91440f3093c2/src%2Ftest%2Fcodegen%2Fatomic-operations-llvm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fatomic-operations-llvm-12.rs?ref=f347c424613ba34a95120908612b91440f3093c2", "patch": "@@ -1,84 +0,0 @@\n-// Code generation of atomic operations for LLVM 12\n-// ignore-llvm-version: 13 - 99\n-// compile-flags: -O\n-#![crate_type = \"lib\"]\n-\n-use std::sync::atomic::{AtomicI32, Ordering::*};\n-\n-// CHECK-LABEL: @compare_exchange\n-#[no_mangle]\n-pub fn compare_exchange(a: &AtomicI32) {\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 10 monotonic monotonic\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 11 acquire acquire\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 12 seq_cst seq_cst\n-    let _ = a.compare_exchange(0, 10, Relaxed, Relaxed);\n-    let _ = a.compare_exchange(0, 11, Relaxed, Acquire);\n-    let _ = a.compare_exchange(0, 12, Relaxed, SeqCst);\n-\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 20 release monotonic\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 21 acq_rel acquire\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 22 seq_cst seq_cst\n-    let _ = a.compare_exchange(0, 20, Release, Relaxed);\n-    let _ = a.compare_exchange(0, 21, Release, Acquire);\n-    let _ = a.compare_exchange(0, 22, Release, SeqCst);\n-\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 30 acquire monotonic\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 31 acquire acquire\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 32 seq_cst seq_cst\n-    let _ = a.compare_exchange(0, 30, Acquire, Relaxed);\n-    let _ = a.compare_exchange(0, 31, Acquire, Acquire);\n-    let _ = a.compare_exchange(0, 32, Acquire, SeqCst);\n-\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 40 acq_rel monotonic\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 41 acq_rel acquire\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 42 seq_cst seq_cst\n-    let _ = a.compare_exchange(0, 40, AcqRel, Relaxed);\n-    let _ = a.compare_exchange(0, 41, AcqRel, Acquire);\n-    let _ = a.compare_exchange(0, 42, AcqRel, SeqCst);\n-\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 50 seq_cst monotonic\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 51 seq_cst acquire\n-    // CHECK: cmpxchg i32* %{{.*}}, i32 0, i32 52 seq_cst seq_cst\n-    let _ = a.compare_exchange(0, 50, SeqCst, Relaxed);\n-    let _ = a.compare_exchange(0, 51, SeqCst, Acquire);\n-    let _ = a.compare_exchange(0, 52, SeqCst, SeqCst);\n-}\n-\n-// CHECK-LABEL: @compare_exchange_weak\n-#[no_mangle]\n-pub fn compare_exchange_weak(w: &AtomicI32) {\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 10 monotonic monotonic\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 11 acquire acquire\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 12 seq_cst seq_cst\n-    let _ = w.compare_exchange_weak(1, 10, Relaxed, Relaxed);\n-    let _ = w.compare_exchange_weak(1, 11, Relaxed, Acquire);\n-    let _ = w.compare_exchange_weak(1, 12, Relaxed, SeqCst);\n-\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 20 release monotonic\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 21 acq_rel acquire\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 22 seq_cst seq_cst\n-    let _ = w.compare_exchange_weak(1, 20, Release, Relaxed);\n-    let _ = w.compare_exchange_weak(1, 21, Release, Acquire);\n-    let _ = w.compare_exchange_weak(1, 22, Release, SeqCst);\n-\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 30 acquire monotonic\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 31 acquire acquire\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 32 seq_cst seq_cst\n-    let _ = w.compare_exchange_weak(1, 30, Acquire, Relaxed);\n-    let _ = w.compare_exchange_weak(1, 31, Acquire, Acquire);\n-    let _ = w.compare_exchange_weak(1, 32, Acquire, SeqCst);\n-\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 40 acq_rel monotonic\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 41 acq_rel acquire\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 42 seq_cst seq_cst\n-    let _ = w.compare_exchange_weak(1, 40, AcqRel, Relaxed);\n-    let _ = w.compare_exchange_weak(1, 41, AcqRel, Acquire);\n-    let _ = w.compare_exchange_weak(1, 42, AcqRel, SeqCst);\n-\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 50 seq_cst monotonic\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 51 seq_cst acquire\n-    // CHECK: cmpxchg weak i32* %{{.*}}, i32 1, i32 52 seq_cst seq_cst\n-    let _ = w.compare_exchange_weak(1, 50, SeqCst, Relaxed);\n-    let _ = w.compare_exchange_weak(1, 51, SeqCst, Acquire);\n-    let _ = w.compare_exchange_weak(1, 52, SeqCst, SeqCst);\n-}"}, {"sha": "d2bc618dfc528f35318a093ee892b6e421c2b26c", "filename": "src/test/codegen/atomic-operations.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fcodegen%2Fatomic-operations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fcodegen%2Fatomic-operations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fatomic-operations.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,5 +1,4 @@\n // Code generation of atomic operations.\n-// min-llvm-version: 13.0\n // compile-flags: -O\n #![crate_type = \"lib\"]\n "}, {"sha": "994c71b261982e599b51721d8134f04aea4878dc", "filename": "src/test/codegen/branch-protection.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fcodegen%2Fbranch-protection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fcodegen%2Fbranch-protection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbranch-protection.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,7 +1,6 @@\n // Test that the correct module flags are emitted with different branch protection flags.\n \n // revisions: BTI PACRET LEAF BKEY NONE\n-// min-llvm-version: 12.0.0\n // needs-llvm-components: aarch64\n // [BTI] compile-flags: -Z branch-protection=bti\n // [PACRET] compile-flags: -Z branch-protection=pac-ret"}, {"sha": "8e8fe5c964d3c9b15f8895b7ed5c5d13636e6ad1", "filename": "src/test/codegen/merge-functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fcodegen%2Fmerge-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fcodegen%2Fmerge-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmerge-functions.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,3 +1,4 @@\n+// min-llvm-version: 14.0\n // revisions: O Os\n //[Os] compile-flags: -Copt-level=s\n //[O] compile-flags: -O"}, {"sha": "ad8f9398e7f3c06237103c385fef64ca7c34e39b", "filename": "src/test/mir-opt/asm_unwind_panic_abort.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fmir-opt%2Fasm_unwind_panic_abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fmir-opt%2Fasm_unwind_panic_abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fasm_unwind_panic_abort.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,7 +1,6 @@\n //! Tests that unwinding from an asm block is caught and forced to abort\n //! when `-C panic=abort`.\n \n-// min-llvm-version: 13.0.0\n // only-x86_64\n // compile-flags: -C panic=abort\n // no-prefer-dynamic"}, {"sha": "dfd891b4212d53eb2fdfc527d44541d2cf4d4486", "filename": "src/test/ui/asm/aarch64/may_unwind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 13.0.0\n // only-aarch64\n // run-pass\n // needs-asm-support"}, {"sha": "b9479c44bf11d7ab4a93d2b95364c053938cc097", "filename": "src/test/ui/asm/may_unwind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fasm%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fasm%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fmay_unwind.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 13.0.0\n // run-pass\n // needs-asm-support\n "}, {"sha": "badc4fec82248cc09dfb0983a13485799163b467", "filename": "src/test/ui/asm/x86_64/may_unwind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 13.0.0\n // only-x86_64\n // run-pass\n // needs-asm-support"}, {"sha": "447e11e6eabcae9abc64b54db92371ce4dfe7886", "filename": "src/test/ui/asm/x86_64/sym.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0.1\n // only-x86_64\n // only-linux\n // needs-asm-support"}, {"sha": "8a4ff16694bdb0c787c4f389bc356b4d9d9eb852", "filename": "src/test/ui/ptr_ops/issue-80309-safe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309-safe.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// min-llvm-version: 13.0\n // compile-flags: -O\n \n // Regression test for issue #80309"}, {"sha": "c13ce3c9cd2c1d2f21e677cbf412efd03e246ccf", "filename": "src/test/ui/ptr_ops/issue-80309.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b19a185dbeaad0925480df0bba641749ad2d850/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309.rs?ref=0b19a185dbeaad0925480df0bba641749ad2d850", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// min-llvm-version: 13.0\n // compile-flags: -O\n \n // Regression test for issue #80309"}]}