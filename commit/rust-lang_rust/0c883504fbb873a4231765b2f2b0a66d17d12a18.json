{"sha": "0c883504fbb873a4231765b2f2b0a66d17d12a18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjODgzNTA0ZmJiODczYTQyMzE3NjViMmYyYjBhNjZkMTdkMTJhMTg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T22:23:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T17:51:37Z"}, "message": "Access attrs directly from HirId in rustc_incremental::assert_dep_graph.", "tree": {"sha": "b7643b87bf0277b6a7312e05731bc2be91100ff7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7643b87bf0277b6a7312e05731bc2be91100ff7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c883504fbb873a4231765b2f2b0a66d17d12a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c883504fbb873a4231765b2f2b0a66d17d12a18", "html_url": "https://github.com/rust-lang/rust/commit/0c883504fbb873a4231765b2f2b0a66d17d12a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c883504fbb873a4231765b2f2b0a66d17d12a18/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b1dd1a9e87981e98aae5e43604a913fba1491c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1dd1a9e87981e98aae5e43604a913fba1491c3", "html_url": "https://github.com/rust-lang/rust/commit/7b1dd1a9e87981e98aae5e43604a913fba1491c3"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "89a5836d6dfe71b12d62e4c512215ed29e85a72a", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c883504fbb873a4231765b2f2b0a66d17d12a18/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c883504fbb873a4231765b2f2b0a66d17d12a18/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=0c883504fbb873a4231765b2f2b0a66d17d12a18", "patch": "@@ -68,7 +68,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n         let (if_this_changed, then_this_would_need) = {\n             let mut visitor =\n                 IfThisChanged { tcx, if_this_changed: vec![], then_this_would_need: vec![] };\n-            visitor.process_attrs(hir::CRATE_HIR_ID, &tcx.hir().krate().item.attrs);\n+            visitor.process_attrs(hir::CRATE_HIR_ID);\n             tcx.hir().krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n             (visitor.if_this_changed, visitor.then_this_would_need)\n         };\n@@ -113,9 +113,10 @@ impl IfThisChanged<'tcx> {\n         value\n     }\n \n-    fn process_attrs(&mut self, hir_id: hir::HirId, attrs: &[ast::Attribute]) {\n+    fn process_attrs(&mut self, hir_id: hir::HirId) {\n         let def_id = self.tcx.hir().local_def_id(hir_id);\n         let def_path_hash = self.tcx.def_path_hash(def_id.to_def_id());\n+        let attrs = self.tcx.hir().attrs(hir_id);\n         for attr in attrs {\n             if self.tcx.sess.check_name(attr, sym::rustc_if_this_changed) {\n                 let dep_node_interned = self.argument(attr);\n@@ -167,22 +168,22 @@ impl Visitor<'tcx> for IfThisChanged<'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        self.process_attrs(item.hir_id(), &item.attrs);\n+        self.process_attrs(item.hir_id());\n         intravisit::walk_item(self, item);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        self.process_attrs(trait_item.hir_id(), &trait_item.attrs);\n+        self.process_attrs(trait_item.hir_id());\n         intravisit::walk_trait_item(self, trait_item);\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        self.process_attrs(impl_item.hir_id(), &impl_item.attrs);\n+        self.process_attrs(impl_item.hir_id());\n         intravisit::walk_impl_item(self, impl_item);\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n-        self.process_attrs(s.hir_id, &s.attrs);\n+        self.process_attrs(s.hir_id);\n         intravisit::walk_struct_field(self, s);\n     }\n }"}]}