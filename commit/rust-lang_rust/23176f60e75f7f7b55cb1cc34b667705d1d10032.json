{"sha": "23176f60e75f7f7b55cb1cc34b667705d1d10032", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMTc2ZjYwZTc1ZjdmN2I1NWNiMWNjMzRiNjY3NzA1ZDFkMTAwMzI=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-15T15:16:21Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-25T12:51:56Z"}, "message": "Change how edition based future compatibility warnings are handled", "tree": {"sha": "69b36601b21b5bd44052bb719c2edf1c04e29ef3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69b36601b21b5bd44052bb719c2edf1c04e29ef3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23176f60e75f7f7b55cb1cc34b667705d1d10032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23176f60e75f7f7b55cb1cc34b667705d1d10032", "html_url": "https://github.com/rust-lang/rust/commit/23176f60e75f7f7b55cb1cc34b667705d1d10032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23176f60e75f7f7b55cb1cc34b667705d1d10032/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117799b73ccf434f588528d97596392062535e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/117799b73ccf434f588528d97596392062535e3f", "html_url": "https://github.com/rust-lang/rust/commit/117799b73ccf434f588528d97596392062535e3f"}], "stats": {"total": 920, "additions": 380, "deletions": 540}, "files": [{"sha": "dc6ba8ebac5b9666cbca26d4a8e5916d80fbc160", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -3,7 +3,8 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n-use rustc_session::lint::FutureBreakage;\n+use rustc_session::lint::FutureIncompatibilityReason;\n+use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n \n declare_lint! {\n@@ -37,10 +38,8 @@ declare_lint! {\n     \"detects calling `into_iter` on arrays\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #66145 <https://github.com/rust-lang/rust/issues/66145>\",\n-        edition: None,\n-        future_breakage: Some(FutureBreakage {\n-            date: None\n-        })\n+        reason: FutureIncompatibilityReason::EditionSemanticsChange(Edition::Edition2021),\n+        custom_explanation: Some(\"This will continue to compile in Rust 2021 but it will behave slightly differently!\")\n     };\n }\n "}, {"sha": "5479af1dc30994a1165e461d85d64066edc40eda", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -47,6 +47,7 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, layout::LayoutError, Ty, TyCtxt};\n+use rustc_session::lint::FutureIncompatibilityReason;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n@@ -874,7 +875,7 @@ declare_lint! {\n     \"detects anonymous parameters\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n-        edition: Some(Edition::Edition2018),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2018),\n     };\n }\n \n@@ -1663,7 +1664,7 @@ declare_lint! {\n     \"`...` range patterns are deprecated\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #80165 <https://github.com/rust-lang/rust/issues/80165>\",\n-        edition: Some(Edition::Edition2021),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }\n \n@@ -1891,7 +1892,7 @@ declare_lint! {\n     \"detects edition keywords being used as an identifier\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #49716 <https://github.com/rust-lang/rust/issues/49716>\",\n-        edition: Some(Edition::Edition2018),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2018),\n     };\n }\n "}, {"sha": "2dc04d57d1e66de4edd05e224ec152df106196a8", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -209,8 +209,8 @@ impl LintStore {\n                 bug!(\"duplicate specification of lint {}\", lint.name_lower())\n             }\n \n-            if let Some(FutureIncompatibleInfo { edition, .. }) = lint.future_incompatible {\n-                if let Some(edition) = edition {\n+            if let Some(FutureIncompatibleInfo { reason, .. }) = lint.future_incompatible {\n+                if let Some(edition) = reason.edition() {\n                     self.lint_groups\n                         .entry(edition.lint_name())\n                         .or_insert(LintGroup {"}, {"sha": "2ddb196dd08d56071178f24e2a0fa0eca538249f", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -6,7 +6,7 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::{declare_lint, declare_lint_pass, FutureBreakage};\n+use crate::{declare_lint, declare_lint_pass, FutureBreakage, FutureIncompatibilityReason};\n use rustc_span::edition::Edition;\n \n declare_lint! {\n@@ -41,7 +41,6 @@ declare_lint! {\n     \"applying forbid to lint-groups\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #81670 <https://github.com/rust-lang/rust/issues/81670>\",\n-        edition: None,\n     };\n }\n \n@@ -77,7 +76,6 @@ declare_lint! {\n     \"ill-formed attribute inputs that were previously accepted and used in practice\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n-        edition: None,\n     };\n     crate_level_only\n }\n@@ -114,7 +112,6 @@ declare_lint! {\n     \"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #68585 <https://github.com/rust-lang/rust/issues/68585>\",\n-        edition: None,\n     };\n }\n \n@@ -293,7 +290,6 @@ declare_lint! {\n     \"constant evaluation encountered erroneous expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #71800 <https://github.com/rust-lang/rust/issues/71800>\",\n-        edition: None,\n     };\n     report_in_external_macro\n }\n@@ -900,7 +896,6 @@ declare_lint! {\n     \"detect private items in public interfaces not caught by the old implementation\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-        edition: None,\n     };\n }\n \n@@ -980,7 +975,6 @@ declare_lint! {\n     \"detect public re-exports of private extern crates\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-        edition: None,\n     };\n }\n \n@@ -1010,7 +1004,6 @@ declare_lint! {\n     \"type parameter default erroneously allowed in invalid location\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n-        edition: None,\n     };\n }\n \n@@ -1078,7 +1071,6 @@ declare_lint! {\n     \"detects unaligned references to fields of packed structs\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #82523 <https://github.com/rust-lang/rust/issues/82523>\",\n-        edition: None,\n     };\n     report_in_external_macro\n }\n@@ -1200,7 +1192,6 @@ declare_lint! {\n     \"patterns in functions without body were erroneously allowed\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n-        edition: None,\n     };\n }\n \n@@ -1244,7 +1235,6 @@ declare_lint! {\n     \"detects missing fragment specifiers in unused `macro_rules!` patterns\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n-        edition: None,\n     };\n }\n \n@@ -1286,7 +1276,6 @@ declare_lint! {\n     \"detects generic lifetime arguments in path segments with late bound lifetime parameters\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n-        edition: None,\n     };\n }\n \n@@ -1322,7 +1311,6 @@ declare_lint! {\n     \"trait-object types were treated as different depending on marker-trait order\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #56484 <https://github.com/rust-lang/rust/issues/56484>\",\n-        edition: None,\n     };\n }\n \n@@ -1362,7 +1350,6 @@ declare_lint! {\n     \"distinct impls distinguished only by the leak-check code\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #56105 <https://github.com/rust-lang/rust/issues/56105>\",\n-        edition: None,\n     };\n }\n \n@@ -1554,7 +1541,7 @@ declare_lint! {\n     \"raw pointer to an inference variable\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n-        edition: Some(Edition::Edition2018),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2018),\n     };\n }\n \n@@ -1621,7 +1608,7 @@ declare_lint! {\n     \"suggest using `dyn Trait` for trait objects\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #80165 <https://github.com/rust-lang/rust/issues/80165>\",\n-        edition: Some(Edition::Edition2021),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }\n \n@@ -1676,7 +1663,7 @@ declare_lint! {\n      instead of `crate`, `self`, or an extern crate name\",\n      @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #53130 <https://github.com/rust-lang/rust/issues/53130>\",\n-        edition: Some(Edition::Edition2018),\n+        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2018),\n      };\n }\n \n@@ -1725,7 +1712,6 @@ declare_lint! {\n     \"floating-point literals cannot be used in patterns\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n-        edition: None,\n     };\n }\n \n@@ -1769,7 +1755,6 @@ declare_lint! {\n     \"detects name collision with an existing but unstable method\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #48919 <https://github.com/rust-lang/rust/issues/48919>\",\n-        edition: None,\n         // Note: this item represents future incompatibility of all unstable functions in the\n         //       standard library, and thus should never be removed or changed to an error.\n     };\n@@ -1873,7 +1858,6 @@ declare_lint! {\n     \"checks the object safety of where clauses\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #51443 <https://github.com/rust-lang/rust/issues/51443>\",\n-        edition: None,\n     };\n }\n \n@@ -1940,7 +1924,6 @@ declare_lint! {\n     \"detects proc macro derives using inaccessible names from parent modules\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #83583 <https://github.com/rust-lang/rust/issues/83583>\",\n-        edition: None,\n     };\n }\n \n@@ -1983,7 +1966,6 @@ declare_lint! {\n     /// macros in that external crate to be brought into the prelude of the\n     /// crate, making the macros in scope everywhere. As part of the efforts\n     /// to simplify handling of dependencies in the [2018 edition], the use of\n-    /// `extern crate` is being phased out. To bring macros from extern crates\n     /// into scope, it is recommended to use a [`use` import].\n     ///\n     /// This lint is \"allow\" by default because this is a stylistic choice\n@@ -2043,7 +2025,6 @@ declare_lint! {\n      cannot be referred to by absolute paths\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #52234 <https://github.com/rust-lang/rust/issues/52234>\",\n-        edition: None,\n     };\n     crate_level_only\n }\n@@ -2134,7 +2115,6 @@ declare_lint! {\n     \"constant used in pattern contains value of non-structural-match type in a field or a variant\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/62411>\",\n-        edition: None,\n     };\n }\n \n@@ -2190,7 +2170,6 @@ declare_lint! {\n     \"pointers are not structural-match\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/70861>\",\n-        edition: None,\n     };\n }\n \n@@ -2229,7 +2208,6 @@ declare_lint! {\n     expression contains values of non-structural-match types\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #73448 <https://github.com/rust-lang/rust/issues/73448>\",\n-        edition: None,\n     };\n }\n \n@@ -2287,7 +2265,6 @@ declare_lint! {\n     \"ambiguous associated items\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #57644 <https://github.com/rust-lang/rust/issues/57644>\",\n-        edition: None,\n     };\n }\n \n@@ -2318,7 +2295,6 @@ declare_lint! {\n     \"reservation of a two-phased borrow conflicts with other shared borrows\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n-        edition: None,\n     };\n }\n \n@@ -2360,7 +2336,6 @@ declare_lint! {\n     \"a feature gate that doesn't break dependent crates\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #64266 <https://github.com/rust-lang/rust/issues/64266>\",\n-        edition: None,\n     };\n }\n \n@@ -2589,7 +2564,6 @@ declare_lint! {\n     \"a C-like enum implementing Drop is cast\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #73333 <https://github.com/rust-lang/rust/issues/73333>\",\n-        edition: None,\n     };\n }\n \n@@ -2629,7 +2603,6 @@ declare_lint! {\n     \"detects a generic constant is used in a type without a emitting a warning\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #76200 <https://github.com/rust-lang/rust/issues/76200>\",\n-        edition: None,\n     };\n }\n \n@@ -2688,7 +2661,6 @@ declare_lint! {\n     \"uninhabited static\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #74840 <https://github.com/rust-lang/rust/issues/74840>\",\n-        edition: None,\n     };\n }\n \n@@ -2758,7 +2730,6 @@ declare_lint! {\n     \"unsupported naked function definitions\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #32408 <https://github.com/rust-lang/rust/issues/32408>\",\n-        edition: None,\n     };\n }\n \n@@ -2831,7 +2802,6 @@ declare_lint! {\n     \"trailing semicolon in macro body used as expression\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #79813 <https://github.com/rust-lang/rust/issues/79813>\",\n-        edition: None,\n     };\n }\n \n@@ -3154,7 +3124,6 @@ declare_lint! {\n     \"detects invalid `#[doc(...)]` attributes\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #82730 <https://github.com/rust-lang/rust/issues/82730>\",\n-        edition: None,\n     };\n }\n \n@@ -3201,7 +3170,6 @@ declare_lint! {\n     \"detects usage of old versions of certain proc-macro crates\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #83125 <https://github.com/rust-lang/rust/issues/83125>\",\n-        edition: None,\n         future_breakage: Some(FutureBreakage {\n             date: None\n         })"}, {"sha": "185284039e934219c787261ec74f92a78a07795d", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -142,13 +142,39 @@ pub struct Lint {\n pub struct FutureIncompatibleInfo {\n     /// e.g., a URL for an issue/PR/RFC or error code\n     pub reference: &'static str,\n-    /// If this is an edition fixing lint, the edition in which\n-    /// this lint becomes obsolete\n-    pub edition: Option<Edition>,\n+    /// The reason for the lint used by diagnostics to provide\n+    /// the right help message\n+    pub reason: FutureIncompatibilityReason,\n     /// Information about a future breakage, which will\n     /// be emitted in JSON messages to be displayed by Cargo\n     /// for upstream deps\n     pub future_breakage: Option<FutureBreakage>,\n+    /// Provide a custom explanation message for diagnostics\n+    /// if the default explanation message is not appropriate\n+    pub custom_explanation: Option<&'static str>,\n+}\n+\n+/// The reason for future incompatibility\n+#[derive(Copy, Clone, Debug)]\n+pub enum FutureIncompatibilityReason {\n+    /// We're fixing a bug which will impact all editions\n+    BugFix,\n+    /// Previously accepted code that will become an\n+    /// error in the provided edition\n+    EditionError(Edition),\n+    /// Code that changes meaning in some way in\n+    /// the provided edition\n+    EditionSemanticsChange(Edition),\n+}\n+\n+impl FutureIncompatibilityReason {\n+    pub fn edition(self) -> Option<Edition> {\n+        match self {\n+            Self::EditionError(e) => Some(e),\n+            Self::EditionSemanticsChange(e) => Some(e),\n+            _ => None,\n+        }\n+    }\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -158,7 +184,12 @@ pub struct FutureBreakage {\n \n impl FutureIncompatibleInfo {\n     pub const fn default_fields_for_macro() -> Self {\n-        FutureIncompatibleInfo { reference: \"\", edition: None, future_breakage: None }\n+        FutureIncompatibleInfo {\n+            reference: \"\",\n+            reason: FutureIncompatibilityReason::BugFix,\n+            future_breakage: None,\n+            custom_explanation: None,\n+        }\n     }\n }\n "}, {"sha": "c0a92891f7bbc0570bb743c3541e5eb0975815d6", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n-    Level, Lint, LintId,\n+    FutureIncompatibilityReason, Level, Lint, LintId,\n };\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n@@ -292,7 +292,7 @@ pub fn struct_lint_level<'s, 'd>(\n             // if this lint occurs in the expansion of a macro from an external crate,\n             // allow individual lints to opt-out from being reported.\n             let not_future_incompatible =\n-                future_incompatible.map(|f| f.edition.is_some()).unwrap_or(true);\n+                future_incompatible.map(|f| f.reason.edition().is_some()).unwrap_or(true);\n             if not_future_incompatible && !lint.report_in_external_macro {\n                 err.cancel();\n                 // Don't continue further, since we don't want to have\n@@ -373,9 +373,6 @@ pub fn struct_lint_level<'s, 'd>(\n         err.code(DiagnosticId::Lint { name, has_future_breakage });\n \n         if let Some(future_incompatible) = future_incompatible {\n-            const STANDARD_MESSAGE: &str = \"this was previously accepted by the compiler but is being phased out; \\\n-                 it will become a hard error\";\n-\n             let explanation = if lint_id == LintId::of(builtin::UNSTABLE_NAME_COLLISIONS) {\n                 \"once this associated item is added to the standard library, the ambiguity may \\\n                  cause an error or change in behavior!\"\n@@ -384,10 +381,22 @@ pub fn struct_lint_level<'s, 'd>(\n                 \"this borrowing pattern was not meant to be accepted, and may become a hard error \\\n                  in the future\"\n                     .to_owned()\n-            } else if let Some(edition) = future_incompatible.edition {\n-                format!(\"{} in the {} edition!\", STANDARD_MESSAGE, edition)\n+            } else if let FutureIncompatibilityReason::EditionError(edition) =\n+                future_incompatible.reason\n+            {\n+                let current_edition = sess.edition();\n+                format!(\n+                    \"this is valid in the current edition (Rust {}) but is not accepted in the Rust {} edition!\",\n+                    current_edition, edition\n+                )\n+            } else if let FutureIncompatibilityReason::EditionSemanticsChange(edition) =\n+                future_incompatible.reason\n+            {\n+                format!(\"this changes meaning in Rust {}\", edition)\n             } else {\n-                format!(\"{} in a future release!\", STANDARD_MESSAGE)\n+                \"this was previously accepted by the compiler but is being phased out; \\\n+                 it will become a hard error in a future release!\"\n+                    .to_owned()\n             };\n             let citation = format!(\"for more information, see {}\", future_incompatible.reference);\n             err.warn(&explanation);"}, {"sha": "54862c1de9754ed2f05254a48807b8a606052002", "filename": "src/test/ui/anon-params/anon-params-deprecated.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -7,13 +7,13 @@\n \n trait T {\n     fn foo(_: i32); //~ WARNING anonymous parameters are deprecated\n-                 //~| WARNING hard error\n+                 //~| WARNING this is valid in the current edition\n \n     fn bar_with_default_impl(_: String, _: String) {}\n     //~^ WARNING anonymous parameters are deprecated\n-    //~| WARNING hard error\n+    //~| WARNING this is valid in the current edition\n     //~| WARNING anonymous parameters are deprecated\n-    //~| WARNING hard error\n+    //~| WARNING this is valid in the current edition\n }\n \n fn main() {}"}, {"sha": "7014d2f545d089d50ffcf7f2e631ed6d44341a3e", "filename": "src/test/ui/anon-params/anon-params-deprecated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -7,13 +7,13 @@\n \n trait T {\n     fn foo(i32); //~ WARNING anonymous parameters are deprecated\n-                 //~| WARNING hard error\n+                 //~| WARNING this is valid in the current edition\n \n     fn bar_with_default_impl(String, String) {}\n     //~^ WARNING anonymous parameters are deprecated\n-    //~| WARNING hard error\n+    //~| WARNING this is valid in the current edition\n     //~| WARNING anonymous parameters are deprecated\n-    //~| WARNING hard error\n+    //~| WARNING this is valid in the current edition\n }\n \n fn main() {}"}, {"sha": "0d280c728319f5697da718f8419d864e9c170243", "filename": "src/test/ui/anon-params/anon-params-deprecated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(anonymous_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: anonymous parameters are deprecated and will be removed in the next edition.\n@@ -18,7 +18,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn bar_with_default_impl(String, String) {}\n    |                              ^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: String`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: anonymous parameters are deprecated and will be removed in the next edition.\n@@ -27,7 +27,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn bar_with_default_impl(String, String) {}\n    |                                      ^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: String`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: 3 warnings emitted"}, {"sha": "f10cff240335f85405c0576e080065ee9ca212eb", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -3,36 +3,36 @@\n \n mod outer_mod {\n     pub mod await { //~ ERROR `await` is a keyword in the 2018 edition\n-    //~^ WARN this was previously accepted by the compiler\n+    //~^ WARN this is valid in the current edition\n         pub struct await; //~ ERROR `await` is a keyword in the 2018 edition\n-        //~^ WARN this was previously accepted by the compiler\n+        //~^ WARN this is valid in the current edition\n     }\n }\n use outer_mod::await::await; //~ ERROR `await` is a keyword in the 2018 edition\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this was previously accepted by the compiler\n-//~^^^ WARN this was previously accepted by the compiler\n+//~^^ WARN this is valid in the current edition\n+//~^^^ WARN this is valid in the current edition\n \n struct Foo { await: () }\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this was previously accepted by the compiler\n+//~^^ WARN this is valid in the current edition\n \n impl Foo { fn await() {} }\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this was previously accepted by the compiler\n+//~^^ WARN this is valid in the current edition\n \n macro_rules! await {\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this was previously accepted by the compiler\n+//~^^ WARN this is valid in the current edition\n     () => {}\n }\n \n fn main() {\n     await!(); //~ ERROR `await` is a keyword in the 2018 edition\n-    //~^ WARN this was previously accepted by the compiler\n+    //~^ WARN this is valid in the current edition\n \n     match await { await => {} } //~ ERROR `await` is a keyword in the 2018 edition\n     //~^ ERROR `await` is a keyword in the 2018 edition\n-    //~^^ WARN this was previously accepted by the compiler\n-    //~^^^ WARN this was previously accepted by the compiler\n+    //~^^ WARN this is valid in the current edition\n+    //~^^^ WARN this is valid in the current edition\n }"}, {"sha": "bb285744f139e3f58cf894ae5c148b2161cc5d31", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `await` is a keyword in the 2018 edition\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `await` is a keyword in the 2018 edition\n LL | struct Foo { await: () }\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `await` is a keyword in the 2018 edition\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -63,7 +63,7 @@ error: `await` is a keyword in the 2018 edition\n LL | macro_rules! await {\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -72,7 +72,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     await!();\n    |     ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -81,7 +81,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -90,7 +90,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 10 previous errors"}, {"sha": "55938c3801b5a4185b242ba5f88cb931c01cfd13", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -6,22 +6,22 @@\n mod outer_mod {\n     pub mod r#await {\n //~^ ERROR `await` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n         pub struct r#await;\n //~^ ERROR `await` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n     }\n }\n use outer_mod::r#await::r#await;\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN was previously accepted\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n+//~| WARN this is valid in the current edition\n \n fn main() {\n     match r#await { r#await => {} }\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN was previously accepted\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n+//~| WARN this is valid in the current edition\n }"}, {"sha": "7432506155d14449da39e232edba06d6de0afeef", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -6,22 +6,22 @@\n mod outer_mod {\n     pub mod await {\n //~^ ERROR `await` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n         pub struct await;\n //~^ ERROR `await` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n     }\n }\n use outer_mod::await::await;\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN was previously accepted\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n+//~| WARN this is valid in the current edition\n \n fn main() {\n     match await { await => {} }\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN was previously accepted\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n+//~| WARN this is valid in the current edition\n }"}, {"sha": "31f6b49b43d9b12f427653b1b46d540be1af6351", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `await` is a keyword in the 2018 edition\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 6 previous errors"}, {"sha": "de30f2b366cc77899bb1b0e9f026c628c6ff0503", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -13,7 +13,7 @@ fn b() {\n     //~| ERROR expected trait, found constant `BAR`\n     //~| ERROR type provided when a constant was expected\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n }\n fn c() {\n     foo::<3 + 3>(); //~ ERROR expressions must be enclosed in braces"}, {"sha": "3f3d939e94b4b5a773c2c381ec9cb1471d1a3fa3", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -138,7 +138,7 @@ LL |     foo::<BAR + BAR>();\n    |           ^^^^^^^^^ help: use `dyn`: `dyn BAR + BAR`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0747]: type provided when a constant was expected"}, {"sha": "bd5c1844f155cc3c3571c378f304cd23f2625f30", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.fixed", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -13,27 +13,27 @@\n mod outer_mod {\n     pub mod r#dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n         pub struct r#dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n     }\n }\n use outer_mod::r#dyn::r#dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n \n fn main() {\n     match r#dyn { r#dyn => {} }\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n     macro_defn::r#dyn();\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n \n     macro_defn::boxed();\n }\n@@ -43,31 +43,31 @@ mod macro_defn {\n \n     macro_rules! r#dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n \n         // Note that we do not lint nor fix occurrences under macros\n         ($dyn:tt) => { (Box<dyn Trait>, Box<$dyn Trait>) }\n     }\n \n     pub fn r#dyn() -> ::outer_mod::r#dyn::r#dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n         ::outer_mod::r#dyn::r#dyn\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n     }\n \n \n \n     pub fn boxed() -> r#dyn!(\n         //~^ ERROR `dyn` is a keyword\n-        //~| WARN was previously accepted\n+        //~| WARN this is valid in the current edition\n \n             // Note that we do not lint nor fix occurrences under macros\n             dyn"}, {"sha": "352d32aa9f0320e95c87d1ebd6ada51381bddcae", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -13,27 +13,27 @@\n mod outer_mod {\n     pub mod dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n         pub struct dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n     }\n }\n use outer_mod::dyn::dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n \n fn main() {\n     match dyn { dyn => {} }\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n     macro_defn::dyn();\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n \n     macro_defn::boxed();\n }\n@@ -43,31 +43,31 @@ mod macro_defn {\n \n     macro_rules! dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n \n         // Note that we do not lint nor fix occurrences under macros\n         ($dyn:tt) => { (Box<dyn Trait>, Box<$dyn Trait>) }\n     }\n \n     pub fn dyn() -> ::outer_mod::dyn::dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n         ::outer_mod::dyn::dyn\n //~^ ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN was previously accepted\n+//~| WARN this is valid in the current edition\n     }\n \n \n \n     pub fn boxed() -> dyn!(\n         //~^ ERROR `dyn` is a keyword\n-        //~| WARN was previously accepted\n+        //~| WARN this is valid in the current edition\n \n             // Note that we do not lint nor fix occurrences under macros\n             dyn"}, {"sha": "446db957d9e30896b09264e7140831e00cb63252", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |         pub struct dyn;\n    |                    ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL | use outer_mod::dyn::dyn;\n    |                ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL | use outer_mod::dyn::dyn;\n    |                     ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     match dyn { dyn => {} }\n    |           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     match dyn { dyn => {} }\n    |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -63,7 +63,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     macro_defn::dyn();\n    |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -72,7 +72,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     macro_rules! dyn {\n    |                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -81,7 +81,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |            ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -90,7 +90,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |                                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -99,7 +99,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |                                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -108,7 +108,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |         ::outer_mod::dyn::dyn\n    |                      ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -117,7 +117,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |         ::outer_mod::dyn::dyn\n    |                           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -126,7 +126,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn boxed() -> dyn!(\n    |                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 14 previous errors"}, {"sha": "adaa1780dc2d9648190acc8dfd8b0e7631c838a6", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -3,12 +3,12 @@\n \n fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n     //~| ERROR trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n     let _x: &SomeTrait = todo!();\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n }\n \n trait SomeTrait {}"}, {"sha": "29b46c6a501cbbf977de5ccacd60537a5b092ed6", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #[deny(bare_trait_objects)]\n    |        ^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2018) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -18,7 +18,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |                                   ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2018) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -27,7 +27,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL |     let _x: &SomeTrait = todo!();\n    |              ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2018) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 3 previous errors"}, {"sha": "b0b4136a0037d85934d027c02ebec45e9cfcec2c", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let y = &x as *const _;\n     let _ = y.is_null();\n     //~^ error: type annotations needed [tyvar_behind_raw_pointer]\n-    //~^^ warning: this was previously accepted\n+    //~^^ warning: this is valid in the current edition\n }"}, {"sha": "42e6b26750dd0db2b956d9815a0068eaf31005e3", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(tyvar_behind_raw_pointer)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n \n error: aborting due to previous error"}, {"sha": "a456d6e4069305039aebf4df2ecea44c1f71c2e7", "filename": "src/test/ui/future-incompatible-lint-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -2,7 +2,7 @@\n \n trait Tr {\n     fn f(u8) {} //~ ERROR anonymous parameters are deprecated\n-                //~^ WARN this was previously accepted\n+                //~^ WARN this is valid in the current edition\n }\n \n fn main() {}"}, {"sha": "956f259cd3028304047b348af354f6f1f3f00726", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(future_incompatible)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    = note: `#[deny(anonymous_parameters)]` implied by `#[deny(future_incompatible)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n error: aborting due to previous error"}, {"sha": "018d2811103abb0c8568216ff029f94a548a3d2e", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -11,6 +11,6 @@ fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n   //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n   //~| WARNING: trait objects without an explicit `dyn` are deprecated\n-  //~| WARNING: this was previously accepted by the compiler\n+  //~| WARNING: this is valid in the current edition\n \n fn main() {}"}, {"sha": "5752ee33d35759842059cf28a125b2103f5d9a62", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -26,7 +26,7 @@ LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                             ^^ help: use `dyn`: `dyn 'a`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied"}, {"sha": "2408fbcc559ec82da91b991719be2a7c578b2bf0", "filename": "src/test/ui/inference/inference-variable-behind-raw-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let _ = &data as *const *const ();\n     if data.is_null() {}\n     //~^ WARNING type annotations needed\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this is valid in the current edition\n }"}, {"sha": "179f008c05a2ae432fec1aaea04f5258ee0bf1a4", "filename": "src/test/ui/inference/inference-variable-behind-raw-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,7 +5,7 @@ LL |     if data.is_null() {}\n    |             ^^^^^^^\n    |\n    = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n \n warning: 1 warning emitted"}, {"sha": "546052817d242f359cf2796b340c89b3498be566", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -13,11 +13,11 @@ fn main() {\n     // which we continue to support for compatibility.\n     let _: Iter<'_, i32> = array.into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     let _: Iter<'_, i32> = Box::new(array).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     // The `array_into_iter` lint doesn't cover other wrappers that deref to an array.\n     let _: Iter<'_, i32> = Rc::new(array).into_iter();"}, {"sha": "82596c6f022e032ea8a05f33656014154f643b70", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,7 +5,7 @@ LL |     let _: Iter<'_, i32> = array.into_iter();\n    |                                  ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = note: `#[warn(array_into_iter)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -14,29 +14,8 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n    |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: 2 warnings emitted\n \n-Future incompatibility report: Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-2018.rs:14:34\n-   |\n-LL |     let _: Iter<'_, i32> = array.into_iter();\n-   |                                  ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = note: `#[warn(array_into_iter)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-2018.rs:18:44\n-   |\n-LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n-   |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-"}, {"sha": "ede96d7cea16c4a60a6a4c07231de88720402d7f", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -8,42 +8,42 @@ fn main() {\n     // Expressions that should trigger the lint\n     small.iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     [1, 2].iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     big.iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     [0u8; 33].iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     Box::new(small).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new([1, 2]).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(big).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new([0u8; 33]).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     Box::new(Box::new(small)).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new([1, 2])).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new(big)).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new([0u8; 33])).iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     // Expressions that should not\n     (&[1, 2]).into_iter();"}, {"sha": "3a0cb75ed152ddd7bad1444ebf066ae122ae1e64", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -8,42 +8,42 @@ fn main() {\n     // Expressions that should trigger the lint\n     small.into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     [1, 2].into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     big.into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     [0u8; 33].into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     Box::new(small).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new([1, 2]).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(big).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new([0u8; 33]).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     Box::new(Box::new(small)).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new([1, 2])).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new(big)).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n     Box::new(Box::new([0u8; 33])).into_iter();\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n-    //~| WARNING this was previously accepted by the compiler but is being phased out\n+    //~| WARNING this changes meaning\n \n     // Expressions that should not\n     (&[1, 2]).into_iter();"}, {"sha": "1f33a5c659b5dba1c973fe810303b4b7d643dff0", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 12, "deletions": 148, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,7 +5,7 @@ LL |     small.into_iter();\n    |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = note: `#[warn(array_into_iter)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -14,7 +14,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     [1, 2].into_iter();\n    |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -23,7 +23,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     big.into_iter();\n    |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -32,7 +32,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     [0u8; 33].into_iter();\n    |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -41,7 +41,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(small).into_iter();\n    |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -50,7 +50,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new([1, 2]).into_iter();\n    |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -59,7 +59,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(big).into_iter();\n    |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -68,7 +68,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new([0u8; 33]).into_iter();\n    |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -77,7 +77,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(Box::new(small)).into_iter();\n    |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -86,7 +86,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(Box::new([1, 2])).into_iter();\n    |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -95,7 +95,7 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(Box::new(big)).into_iter();\n    |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n@@ -104,144 +104,8 @@ warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into\n LL |     Box::new(Box::new([0u8; 33])).into_iter();\n    |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: 12 warnings emitted\n \n-Future incompatibility report: Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:9:11\n-   |\n-LL |     small.into_iter();\n-   |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = note: `#[warn(array_into_iter)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:12:12\n-   |\n-LL |     [1, 2].into_iter();\n-   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:15:9\n-   |\n-LL |     big.into_iter();\n-   |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:18:15\n-   |\n-LL |     [0u8; 33].into_iter();\n-   |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:22:21\n-   |\n-LL |     Box::new(small).into_iter();\n-   |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:25:22\n-   |\n-LL |     Box::new([1, 2]).into_iter();\n-   |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:28:19\n-   |\n-LL |     Box::new(big).into_iter();\n-   |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:31:25\n-   |\n-LL |     Box::new([0u8; 33]).into_iter();\n-   |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:35:31\n-   |\n-LL |     Box::new(Box::new(small)).into_iter();\n-   |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:38:32\n-   |\n-LL |     Box::new(Box::new([1, 2])).into_iter();\n-   |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:41:29\n-   |\n-LL |     Box::new(Box::new(big)).into_iter();\n-   |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:44:35\n-   |\n-LL |     Box::new(Box::new([0u8; 33])).into_iter();\n-   |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-\n-Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:60:12\n-   |\n-LL |     [0, 1].into_iter();\n-   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/into-iter-on-arrays-lint.rs:59:13\n-   |\n-LL |     #[allow(array_into_iter)]\n-   |             ^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-"}, {"sha": "b56fca35d5ea8a45b69e43044e282f1e7db60d74", "filename": "src/test/ui/lint/bare-trait-objects-path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -13,12 +13,12 @@ impl Assoc for dyn Dyn {}\n fn main() {\n     Dyn::func();\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     ::Dyn::func();\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     Dyn::CONST;\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     let _: Dyn::Ty; //~ ERROR ambiguous associated type\n }"}, {"sha": "11e33b8b7a057c5969f6b42cdbbce04504b59f51", "filename": "src/test/ui/lint/bare-trait-objects-path.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -11,7 +11,7 @@ LL |     Dyn::func();\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -20,7 +20,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     ::Dyn::func();\n    |     ^^^^^ help: use `dyn`: `<dyn (::Dyn)>`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -29,7 +29,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     Dyn::CONST;\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 3 warnings emitted"}, {"sha": "535a7e15a9ec1ddb52d4d82c3467de919e31b9b8", "filename": "src/test/ui/lint/force-warn/force-lint-in-allowed-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -7,6 +7,6 @@ pub trait SomeTrait {}\n \n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this was previously accepted by the compiler\n+//~| WARN this is valid in the current edition\n \n fn main() {}"}, {"sha": "6f8cef9730188f75b26967c8ea03b618025bb1a4", "filename": "src/test/ui/lint/force-warn/force-lint-in-allowed-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = note: warning forced by `force-warns` commandline option\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 1 warning emitted"}, {"sha": "15de01e764652ba6f66004612eafb8b3b166415e", "filename": "src/test/ui/lint/force-warn/force-warn-group-allow-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -7,6 +7,6 @@ pub trait SomeTrait {}\n \n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this was previously accepted by the compiler\n+//~| WARN this is valid in the current edition\n \n fn main() {}"}, {"sha": "a67cfe8d19c8cc0c5ff94312da751a24b21a2027", "filename": "src/test/ui/lint/force-warn/force-warn-group-allow-warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = note: warning forced by `force-warns` commandline option\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 1 warning emitted"}, {"sha": "ee3e23b079047298f3ae856175e6feea7119b712", "filename": "src/test/ui/lint/force-warn/force-warn-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -7,6 +7,6 @@ pub trait SomeTrait {}\n \n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this was previously accepted by the compiler\n+//~| WARN this is valid in the current edition\n \n fn main() {}"}, {"sha": "9e37039520933aa4e907c1622d6cf697b926cc15", "filename": "src/test/ui/lint/force-warn/force-warn-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = note: warning forced by `force-warns` commandline option\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 1 warning emitted"}, {"sha": "defafe2f41006ac6d4df197d37180d53a84d7d00", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -8,14 +8,14 @@ fn main() {\n     match despondency {\n         1..=2 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is valid in the current edition\n         _ => {}\n     }\n \n     match &despondency {\n         &(1..=2) => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is valid in the current edition\n         _ => {}\n     }\n }"}, {"sha": "2d14896d7ecfe2da7fe67bce4917188cf573d819", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -8,14 +8,14 @@ fn main() {\n     match despondency {\n         1...2 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is valid in the current edition\n         _ => {}\n     }\n \n     match &despondency {\n         &1...2 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is valid in the current edition\n         _ => {}\n     }\n }"}, {"sha": "7739e7d7c499cad5c471735ffa0e97e43de0c0f5", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: `...` range patterns are deprecated\n@@ -18,7 +18,7 @@ warning: `...` range patterns are deprecated\n LL |         &1...2 => {}\n    |         ^^^^^^ help: use `..=` for an inclusive range: `&(1..=2)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 2 warnings emitted"}, {"sha": "79958ba90d409c9f8eb4af66051261dea3b5eef8", "filename": "src/test/ui/lint/issue-78660-cap-lints-future-compat.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/117799b73ccf434f588528d97596392062535e3f/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/117799b73ccf434f588528d97596392062535e3f/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.stderr?ref=117799b73ccf434f588528d97596392062535e3f", "patch": "@@ -1,11 +0,0 @@\n-Future incompatibility report: Future breakage date: None, diagnostic:\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/issue-78660-cap-lints-future-compat.rs:9:12\n-   |\n-LL |     [\"hi\"].into_iter();\n-   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n-   |\n-   = note: `-D array-into-iter` implied by `-D warnings`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n-"}, {"sha": "20753dd2df8710ef0fbff070b921dea40588b131", "filename": "src/test/ui/lint/lint-pre-expansion-extern-module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,7 +5,7 @@ LL | pub fn try() {}\n    |        ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n    |\n    = note: `-W keyword-idents` implied by `-W rust-2018-compatibility`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: 1 warning emitted"}, {"sha": "bbfc716393d6e0488b0ca4f6b6fe50b161ffb7f7", "filename": "src/test/ui/parser/issue-68890-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -4,4 +4,4 @@ type X<'a> = (?'a) +;\n //~^ ERROR `?` may only modify trait bounds, not lifetime bounds\n //~| ERROR at least one trait is required for an object type\n //~| WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this was previously accepted by the compiler\n+//~| WARN this is valid in the current edition"}, {"sha": "e6749a999691ed882163ef14560658060bada6a9", "filename": "src/test/ui/parser/issue-68890-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -11,7 +11,7 @@ LL | type X<'a> = (?'a) +;\n    |              ^^^^^^^ help: use `dyn`: `dyn (?'a) +`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type"}, {"sha": "5ba2dbcc2f61a36a15a8da0da35e91f847f900a3", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -14,10 +14,10 @@ mac!('a);\n fn y<'a>(y: &mut 'a + Send) {\n     //~^ ERROR expected a path on the left-hand side of `+`, not `&mut 'a`\n     //~| WARNING trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     //~| ERROR at least one trait is required for an object type\n     let z = y as &mut 'a + Send;\n     //~^ ERROR expected value, found trait `Send`\n     //~| WARNING trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n }"}, {"sha": "da68c417ca77436285b0d2ec22e8236b066373a0", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -34,7 +34,7 @@ LL | fn y<'a>(y: &mut 'a + Send) {\n    |                  ^^ help: use `dyn`: `dyn 'a`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -43,7 +43,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let z = y as &mut 'a + Send;\n    |                       ^^ help: use `dyn`: `dyn 'a`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type"}, {"sha": "f899316220255b94ab5f5c2c5ae42ac549cd1d3a", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     //~^ ERROR lifetime in trait object type must be followed by `+`\n     //~| ERROR at least one trait is required for an object type\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n }"}, {"sha": "eecfe93db94b1ae37330ab3942b29970b10758c4", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -11,7 +11,7 @@ LL |     m!('static);\n    |        ^^^^^^^ help: use `dyn`: `dyn 'static`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type"}, {"sha": "e5a414765411f895cfee8ccc2f7d42bf0b69aedb", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -41,30 +41,30 @@ fn inclusive_from_to() {\n fn inclusive2_from_to() {\n     if let 0...3 = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     if let 0...Y = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     if let X...3 = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     if let X...Y = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     if let true...Y = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     if let X...true = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     if let .0...Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     //~| ERROR `...` range patterns are deprecated\n     if let X... .0 = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR `...` range patterns are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n }\n \n fn exclusive_from() {\n@@ -137,7 +137,7 @@ fn with_macro_expr_var() {\n             let $e1..$e2;\n             let $e1...$e2;\n             //~^ ERROR `...` range patterns are deprecated\n-            //~| WARN this was previously accepted by the compiler\n+            //~| WARN this is valid in the current edition\n             let $e1..=$e2;\n         }\n     }"}, {"sha": "dd987c9462d7c45212b6fdbfcd428d626b62badd", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -204,7 +204,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -213,7 +213,7 @@ error: `...` range patterns are deprecated\n LL |     if let 0...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -222,7 +222,7 @@ error: `...` range patterns are deprecated\n LL |     if let X...3 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -231,7 +231,7 @@ error: `...` range patterns are deprecated\n LL |     if let X...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -240,7 +240,7 @@ error: `...` range patterns are deprecated\n LL |     if let true...Y = 0 {}\n    |                ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -249,7 +249,7 @@ error: `...` range patterns are deprecated\n LL |     if let X...true = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -258,7 +258,7 @@ error: `...` range patterns are deprecated\n LL |     if let .0...Y = 0 {}\n    |              ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -267,7 +267,7 @@ error: `...` range patterns are deprecated\n LL |     if let X... .0 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -279,7 +279,7 @@ LL |             let $e1...$e2;\n LL |     mac2!(0, 1);\n    |     ------------ in this macro invocation\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n    = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "f887da6d4bb562767cc00f004d9737c6af67c1b7", "filename": "src/test/ui/parser/trait-object-trait-parens.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,15 +9,15 @@ fn main() {\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n }"}, {"sha": "53dc2f733214ed503523cd657d41789c270faf55", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -23,7 +23,7 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -32,7 +32,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn ?Sized + (for<'a> Trait<'a>) + (Obj)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -41,7 +41,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> Trait<'a> + (Obj) + (?Sized)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object"}, {"sha": "721409064fedf2a961fe26a8317a1ab80324db11", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -10,7 +10,7 @@ pub fn main() {\n     match &12 {\n         &(0..=9) => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is valid in the current edition\n         //~| HELP use `..=` for an inclusive range\n         &(10 ..=15) => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "5fcb9294b42cde1bfc6869974e3834739e8cfe0b", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -10,7 +10,7 @@ pub fn main() {\n     match &12 {\n         &0...9 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is valid in the current edition\n         //~| HELP use `..=` for an inclusive range\n         &10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "48613e35d9aad3e0d4dc390f55b712979e7fbfac", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "338dd79aa407cf67b4f2f1c3e15ef325b31962a2", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ fn main() {\n         // FIXME: can we add suggestions like `&(0..=9)`?\n         box 0...9 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this was previously accepted by the compiler\n+        //~| WARN this is valid in the current edition\n         //~| HELP use `..=` for an inclusive range\n         box 10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "99322f9dd91d72b29f8ecad9dec1670d98e7cae8", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "0770486e046480a973445a1613397b86048367c1", "filename": "src/test/ui/rust-2018/async-ident-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -7,5 +7,5 @@\n \n fn main() {\n     let async = 3; //~ ERROR: is a keyword\n-    //~^ WARN previously accepted\n+    //~^ WARN this is valid in the current edition\n }"}, {"sha": "9994b7aff533f8efae22d63f1bac3eb3162e2c96", "filename": "src/test/ui/rust-2018/async-ident-allowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[deny(keyword_idents)]` implied by `#[deny(rust_2018_compatibility)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to previous error"}, {"sha": "02f494eea7d3e5c9e6e8e4e34e8f7937c7394284", "filename": "src/test/ui/rust-2018/async-ident.fixed", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,20 +5,20 @@\n // run-rustfix\n \n fn r#async() {} //~ ERROR async\n-//~^ WARN hard error in the 2018 edition\n+//~^ WARN this is valid in the current edition\n \n macro_rules! foo {\n     ($foo:ident) => {};\n     ($r#async:expr, r#async) => {};\n     //~^ ERROR async\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n+    //~| WARN this is valid in the current edition\n }\n \n foo!(r#async);\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n \n mod dont_lint_raw {\n     fn r#async() {}\n@@ -27,53 +27,53 @@ mod dont_lint_raw {\n mod async_trait {\n     trait r#async {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n     struct MyStruct;\n     impl r#async for MyStruct {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }\n \n mod async_static {\n     static r#async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }\n \n mod async_const {\n     const r#async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }\n \n struct Foo;\n impl Foo { fn r#async() {} }\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n \n fn main() {\n     struct r#async {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n     let r#async: r#async = r#async {};\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }\n \n #[macro_export]\n macro_rules! produces_async {\n     () => (pub fn r#async() {})\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }\n \n #[macro_export]\n macro_rules! consumes_async {\n     (r#async) => (1)\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }"}, {"sha": "88346200344b7b9e2ea8d471ceeef85dadfcdc40", "filename": "src/test/ui/rust-2018/async-ident.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,20 +5,20 @@\n // run-rustfix\n \n fn async() {} //~ ERROR async\n-//~^ WARN hard error in the 2018 edition\n+//~^ WARN this is valid in the current edition\n \n macro_rules! foo {\n     ($foo:ident) => {};\n     ($async:expr, async) => {};\n     //~^ ERROR async\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n+    //~| WARN this is valid in the current edition\n }\n \n foo!(async);\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n \n mod dont_lint_raw {\n     fn r#async() {}\n@@ -27,53 +27,53 @@ mod dont_lint_raw {\n mod async_trait {\n     trait async {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n     struct MyStruct;\n     impl async for MyStruct {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }\n \n mod async_static {\n     static async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }\n \n mod async_const {\n     const async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }\n \n struct Foo;\n impl Foo { fn async() {} }\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n \n fn main() {\n     struct async {}\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n     let async: async = async {};\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n     //~| ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }\n \n #[macro_export]\n macro_rules! produces_async {\n     () => (pub fn async() {})\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }\n \n #[macro_export]\n macro_rules! consumes_async {\n     (async) => (1)\n     //~^ ERROR async\n-    //~| WARN hard error in the 2018 edition\n+    //~| WARN this is valid in the current edition\n }"}, {"sha": "f7a4f3c39034933f09d4222f9a075888e5bbc0ed", "filename": "src/test/ui/rust-2018/async-ident.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     ($async:expr, async) => {};\n    |       ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     ($async:expr, async) => {};\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `async` is a keyword in the 2018 edition\n LL | foo!(async);\n    |      ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     trait async {}\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     impl async for MyStruct {}\n    |          ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -63,7 +63,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     static async: u32 = 0;\n    |            ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -72,7 +72,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     const async: u32 = 0;\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -81,7 +81,7 @@ error: `async` is a keyword in the 2018 edition\n LL | impl Foo { fn async() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -90,7 +90,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     struct async {}\n    |            ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -99,7 +99,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     let async: async = async {};\n    |         ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -108,7 +108,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     let async: async = async {};\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -117,7 +117,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     let async: async = async {};\n    |                        ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -126,7 +126,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     () => (pub fn async() {})\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -135,7 +135,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     (async) => (1)\n    |      ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 15 previous errors"}, {"sha": "85baee74b86c2574656cd0840108c125cadeffb0", "filename": "src/test/ui/rust-2018/dyn-keyword.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -6,5 +6,5 @@\n \n fn main() {\n     let r#dyn = (); //~ ERROR dyn\n-    //~^ WARN hard error in the 2018 edition\n+    //~^ WARN this is valid in the current edition\n }"}, {"sha": "128dc35edf3eedfd53365d5192ef8455b188b802", "filename": "src/test/ui/rust-2018/dyn-keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -6,5 +6,5 @@\n \n fn main() {\n     let dyn = (); //~ ERROR dyn\n-    //~^ WARN hard error in the 2018 edition\n+    //~^ WARN this is valid in the current edition\n }"}, {"sha": "cb688b312623f893a587a1f424891acfba67e31b", "filename": "src/test/ui/rust-2018/dyn-keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to previous error"}, {"sha": "bf19f5897b06032872d65f090bdaf810e030aa39", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -19,9 +19,9 @@ mod foo {\n fn main() {\n     let _: <foo::Baz as crate::foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this was previously accepted\n+    //~| this is valid in the current edition\n \n     let _: <crate::foo::Baz as foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this was previously accepted\n+    //~| this is valid in the current edition\n }"}, {"sha": "3143de8796eaf4af12a0ec7ff083e82aadf81a5a", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -19,9 +19,9 @@ mod foo {\n fn main() {\n     let _: <foo::Baz as ::foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this was previously accepted\n+    //~| this is valid in the current edition\n \n     let _: <::foo::Baz as foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this was previously accepted\n+    //~| this is valid in the current edition\n }"}, {"sha": "01cf86a8fa6675da3504f9874c7b34ae5275652d", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -18,7 +18,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL |     let _: <::foo::Baz as foo::Foo>::Bar = ();\n    |             ^^^^^^^^^^ help: use `crate`: `crate::foo::Baz`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 2 previous errors"}, {"sha": "1bf41b4f5de253df8501f816fcfe6a76d3007db1", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -16,15 +16,15 @@ crate mod foo {\n \n use crate::foo::{bar::{baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is valid in the current edition\n \n use crate::foo::{bar::{XX, baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is valid in the current edition\n \n use crate::foo::{bar::{baz::{}, baz1::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is valid in the current edition\n \n fn main() {\n }"}, {"sha": "677ef878490e98c455eb3888e367f8a5fa472cfd", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -16,15 +16,15 @@ crate mod foo {\n \n use foo::{bar::{baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is valid in the current edition\n \n use foo::{bar::{XX, baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is valid in the current edition\n \n use foo::{bar::{baz::{}, baz1::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this was previously accepted\n+//~| WARN this is valid in the current edition\n \n fn main() {\n }"}, {"sha": "f7ecf2448ab54cc7bcc0c24956bc6b635fbd6faa", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -18,7 +18,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL | use foo::{bar::{XX, baz::{}}};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{XX, baz::{}}}`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -27,7 +27,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL | use foo::{bar::{baz::{}, baz1::{}}};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{baz::{}, baz1::{}}}`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 3 previous errors"}, {"sha": "90e779e197f9f67a484c6856d10209be584dbabb", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,7 +5,7 @@\n \n use crate::foo::{a, b};\n //~^ ERROR absolute paths must start with\n-//~| this was previously accepted\n+//~| this is valid in the current edition\n \n mod foo {\n     crate fn a() {}\n@@ -20,7 +20,7 @@ fn main() {\n     {\n         use crate::foo::{self as x, c};\n         //~^ ERROR absolute paths must start with\n-        //~| this was previously accepted\n+        //~| this is valid in the current edition\n         x::a();\n         c();\n     }"}, {"sha": "5737915d624e5a681b8775d0683d662748a54647", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,7 +5,7 @@\n \n use foo::{a, b};\n //~^ ERROR absolute paths must start with\n-//~| this was previously accepted\n+//~| this is valid in the current edition\n \n mod foo {\n     crate fn a() {}\n@@ -20,7 +20,7 @@ fn main() {\n     {\n         use foo::{self as x, c};\n         //~^ ERROR absolute paths must start with\n-        //~| this was previously accepted\n+        //~| this is valid in the current edition\n         x::a();\n         c();\n     }"}, {"sha": "1650b93c3389ff5bb0a32c94fff5d80056a47703", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -18,7 +18,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL |         use foo::{self as x, c};\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{self as x, c}`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 2 previous errors"}, {"sha": "94f014e153600f78f96129e92611aa69f27e4b49", "filename": "src/test/ui/rust-2018/edition-lint-paths.fixed", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -11,18 +11,18 @@ pub mod foo {\n     use edition_lint_paths;\n     use crate::bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n     use super::bar::Bar2;\n     use crate::bar::Bar3;\n \n     use crate::bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n     use crate::{bar as something_else};\n \n     use crate::{Bar as SomethingElse, main};\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n \n     use crate::{Bar as SomethingElse2, main as another_main};\n \n@@ -34,7 +34,7 @@ pub mod foo {\n \n use crate::bar::Bar;\n //~^ ERROR absolute\n-//~| WARN this was previously accepted\n+//~| WARN this is valid in the current edition\n \n pub mod bar {\n     use edition_lint_paths as foo;\n@@ -46,17 +46,17 @@ pub mod bar {\n mod baz {\n     use crate::*;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n }\n \n impl crate::foo::SomeTrait for u32 { }\n //~^ ERROR absolute\n-//~| WARN this was previously accepted\n+//~| WARN this is valid in the current edition\n \n fn main() {\n     let x = crate::bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n     let x = bar::Bar;\n     let x = crate::bar::Bar;\n     let x = self::bar::Bar;"}, {"sha": "dc7c65f95e01e19f2a831e7571bac0ae0c39560d", "filename": "src/test/ui/rust-2018/edition-lint-paths.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -11,18 +11,18 @@ pub mod foo {\n     use edition_lint_paths;\n     use ::bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n     use super::bar::Bar2;\n     use crate::bar::Bar3;\n \n     use bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n     use crate::{bar as something_else};\n \n     use {Bar as SomethingElse, main};\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n \n     use crate::{Bar as SomethingElse2, main as another_main};\n \n@@ -34,7 +34,7 @@ pub mod foo {\n \n use bar::Bar;\n //~^ ERROR absolute\n-//~| WARN this was previously accepted\n+//~| WARN this is valid in the current edition\n \n pub mod bar {\n     use edition_lint_paths as foo;\n@@ -46,17 +46,17 @@ pub mod bar {\n mod baz {\n     use *;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n }\n \n impl ::foo::SomeTrait for u32 { }\n //~^ ERROR absolute\n-//~| WARN this was previously accepted\n+//~| WARN this is valid in the current edition\n \n fn main() {\n     let x = ::bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this was previously accepted\n+    //~| WARN this is valid in the current edition\n     let x = bar::Bar;\n     let x = crate::bar::Bar;\n     let x = self::bar::Bar;"}, {"sha": "eec04a03385713355cb2d0e99a91b93f3b183970", "filename": "src/test/ui/rust-2018/edition-lint-paths.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -18,7 +18,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL |     use bar;\n    |         ^^^ help: use `crate`: `crate::bar`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -27,7 +27,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL |     use {Bar as SomethingElse, main};\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::{Bar as SomethingElse, main}`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -36,7 +36,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL | use bar::Bar;\n    |     ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -45,7 +45,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL |     use *;\n    |         ^ help: use `crate`: `crate::*`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -54,7 +54,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL | impl ::foo::SomeTrait for u32 { }\n    |      ^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::SomeTrait`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -63,7 +63,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL |     let x = ::bar::Bar;\n    |             ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 7 previous errors"}, {"sha": "b713489099802f3f9ed835810e6a21ca0ce163e5", "filename": "src/test/ui/rust-2018/extern-crate-rename.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -11,7 +11,7 @@ extern crate edition_lint_paths as my_crate;\n \n use crate::my_crate::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this was previously accepted\n+//~| WARNING this is valid in the current edition\n \n fn main() {\n     foo();"}, {"sha": "93378c14146a3b290da1d92df764abcb8afb63d1", "filename": "src/test/ui/rust-2018/extern-crate-rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -11,7 +11,7 @@ extern crate edition_lint_paths as my_crate;\n \n use my_crate::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this was previously accepted\n+//~| WARNING this is valid in the current edition\n \n fn main() {\n     foo();"}, {"sha": "818dfd8c17e953e41e123a5042a1f8a5d78e16e9", "filename": "src/test/ui/rust-2018/extern-crate-rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to previous error"}, {"sha": "e3603e17f22e26226dba2acf45cf75448005b903", "filename": "src/test/ui/rust-2018/extern-crate-submod.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -18,7 +18,7 @@ mod m {\n // *could* rewrite it to `use edition_lint_paths::foo`\n use crate::m::edition_lint_paths::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this was previously accepted\n+//~| WARNING this is valid in the current edition\n \n fn main() {\n     foo();"}, {"sha": "30baa5e315b1678266f22413e3d2644e53271e08", "filename": "src/test/ui/rust-2018/extern-crate-submod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -18,7 +18,7 @@ mod m {\n // *could* rewrite it to `use edition_lint_paths::foo`\n use m::edition_lint_paths::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this was previously accepted\n+//~| WARNING this is valid in the current edition\n \n fn main() {\n     foo();"}, {"sha": "105d9ea4f11660b4164eace67b5aa8d1da4ec303", "filename": "src/test/ui/rust-2018/extern-crate-submod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to previous error"}, {"sha": "d25cb20057ed41c0c3db6a8fdbf66c1ae636e458", "filename": "src/test/ui/rust-2018/try-ident.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -6,10 +6,10 @@\n fn main() {\n     r#try();\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING it will become a hard error in the 2018 edition!\n+    //~| WARNING this is valid in the current edition\n }\n \n fn r#try() {\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING it will become a hard error in the 2018 edition!\n+    //~| WARNING this is valid in the current edition\n }"}, {"sha": "ca676f31ea02f5157e2b3afaf19ee4fcdbd81b5e", "filename": "src/test/ui/rust-2018/try-ident.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -6,10 +6,10 @@\n fn main() {\n     try();\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING it will become a hard error in the 2018 edition!\n+    //~| WARNING this is valid in the current edition\n }\n \n fn try() {\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING it will become a hard error in the 2018 edition!\n+    //~| WARNING this is valid in the current edition\n }"}, {"sha": "cf7bddf7a1270cc7164c666c677af52c6812e722", "filename": "src/test/ui/rust-2018/try-ident.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(keyword_idents)]` implied by `#[warn(rust_2018_compatibility)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: `try` is a keyword in the 2018 edition\n@@ -19,7 +19,7 @@ warning: `try` is a keyword in the 2018 edition\n LL | fn try() {\n    |    ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: 2 warnings emitted"}, {"sha": "037661bdc0d0d4f1f5e6acd75bf281f68b9d5e29", "filename": "src/test/ui/rust-2018/try-macro.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -11,7 +11,7 @@ fn foo() -> Result<usize, ()> {\n     let x: Result<usize, ()> = Ok(22);\n     r#try!(x);\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING this was previously accepted\n+    //~| WARNING this is valid in the current edition\n     Ok(44)\n }\n "}, {"sha": "00525fc46707fb4d6cea03058242a2db90531ece", "filename": "src/test/ui/rust-2018/try-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -11,7 +11,7 @@ fn foo() -> Result<usize, ()> {\n     let x: Result<usize, ()> = Ok(22);\n     try!(x);\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING this was previously accepted\n+    //~| WARNING this is valid in the current edition\n     Ok(44)\n }\n "}, {"sha": "46641a01a788c3d6382db6890baac6f276cfe5c1", "filename": "src/test/ui/rust-2018/try-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(keyword_idents)]` implied by `#[warn(rust_2018_compatibility)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: 1 warning emitted"}, {"sha": "a5965b9e451154a9e2cc7a5f2745028473ad5c43", "filename": "src/test/ui/suggestions/issue-61963.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -17,11 +17,11 @@ pub struct Qux<T>(T);\n #[dom_struct]\n pub struct Foo {\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n     qux: Qux<Qux<Baz>>,\n     bar: Box<Bar>,\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n }\n \n fn main() {}"}, {"sha": "987b4db4e2a9b45bdfabe1f4f892e7d69434656c", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -18,7 +18,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL | pub struct Foo {\n    | ^^^ help: use `dyn`: `dyn pub`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 2 previous errors"}, {"sha": "4bea34bf1a0c3d75078d544c16ce91b25c957d80", "filename": "src/test/ui/traits/bound/not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -7,7 +7,7 @@ trait Foo {\n fn foo(_x: Foo + Send) {\n     //~^ ERROR the size for values of type\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this was previously accepted by the compiler\n+    //~| WARN this is valid in the current edition\n }\n \n fn main() {}"}, {"sha": "70fb5500f20ef1394a55245c3f041e37d2a6ded4", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23176f60e75f7f7b55cb1cc34b667705d1d10032/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=23176f60e75f7f7b55cb1cc34b667705d1d10032", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(_x: Foo + Send) {\n    |            ^^^^^^^^^^ help: use `dyn`: `dyn Foo + Send`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time"}]}