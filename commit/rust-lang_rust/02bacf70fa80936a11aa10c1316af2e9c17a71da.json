{"sha": "02bacf70fa80936a11aa10c1316af2e9c17a71da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYmFjZjcwZmE4MDkzNmExMWFhMTBjMTMxNmFmMmU5YzE3YTcxZGE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-03T07:32:59Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-03T07:32:59Z"}, "message": "Merge #727\n\n727: Fix macro_rules separator parsing. r=matklad a=jrmuizel\n\nmacro_rules rules are separated by ';' including an optional ';' at the end\n\nCo-authored-by: Jeff Muizelaar <jrmuizel@gmail.com>", "tree": {"sha": "1c3a292f4322a97eaa608e6807385714c2a69e2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c3a292f4322a97eaa608e6807385714c2a69e2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02bacf70fa80936a11aa10c1316af2e9c17a71da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02bacf70fa80936a11aa10c1316af2e9c17a71da", "html_url": "https://github.com/rust-lang/rust/commit/02bacf70fa80936a11aa10c1316af2e9c17a71da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02bacf70fa80936a11aa10c1316af2e9c17a71da/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "e351ff0542a4d97d6c2d7ce8610778cb81af1f07", "url": "https://api.github.com/repos/rust-lang/rust/commits/e351ff0542a4d97d6c2d7ce8610778cb81af1f07", "html_url": "https://github.com/rust-lang/rust/commit/e351ff0542a4d97d6c2d7ce8610778cb81af1f07"}, {"sha": "0bb8456e7d7b6994c9e5efa9d5962f003ffa0a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb8456e7d7b6994c9e5efa9d5962f003ffa0a1e", "html_url": "https://github.com/rust-lang/rust/commit/0bb8456e7d7b6994c9e5efa9d5962f003ffa0a1e"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "922256c03b10a40fc155ca673653b397ec1fa17a", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/02bacf70fa80936a11aa10c1316af2e9c17a71da/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02bacf70fa80936a11aa10c1316af2e9c17a71da/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=02bacf70fa80936a11aa10c1316af2e9c17a71da", "patch": "@@ -160,4 +160,50 @@ impl_froms!(TokenTree: Leaf, Subtree);\n          impl From < Subtree > for TokenTree {fn from (it : Subtree) -> TokenTree {TokenTree :: Subtree (it)}}\"\n     )\n     }\n+\n+    fn assert_expansion(rules: &MacroRules, invocation: &str, expansion: &str) {\n+        let source_file = ast::SourceFile::parse(invocation);\n+        let macro_invocation = source_file\n+            .syntax()\n+            .descendants()\n+            .find_map(ast::MacroCall::cast)\n+            .unwrap();\n+\n+        let invocation_tt = ast_to_token_tree(macro_invocation.token_tree().unwrap()).unwrap();\n+\n+        let expaned = rules.expand(&invocation_tt).unwrap();\n+        assert_eq!(expaned.to_string(), expansion);\n+    }\n+\n+    #[test]\n+    fn test_fail_match_pattern_by_token() {\n+        let macro_definition = r#\"\n+        macro_rules! foo {\n+            ($ i:ident) => (\n+                mod $ i {}\n+            );\n+            (= $ i:ident) => (\n+                fn $ i() {}\n+            );\n+            (+ $ i:ident) => (\n+                struct $ i;\n+            )\n+        }\n+\"#;\n+\n+        let source_file = ast::SourceFile::parse(macro_definition);\n+        let macro_definition = source_file\n+            .syntax()\n+            .descendants()\n+            .find_map(ast::MacroCall::cast)\n+            .unwrap();\n+\n+        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        let rules = crate::MacroRules::parse(&definition_tt).unwrap();\n+\n+        assert_expansion(&rules, \"foo! { foo }\", \"mod foo {}\");\n+        assert_expansion(&rules, \"foo! { = bar }\", \"fn bar () {}\");\n+        assert_expansion(&rules, \"foo! { + Baz }\", \"struct Baz ;\");\n+    }\n+\n }"}, {"sha": "abad2e8c80d01dfec1ff6489dc8ca00907a21187", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02bacf70fa80936a11aa10c1316af2e9c17a71da/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02bacf70fa80936a11aa10c1316af2e9c17a71da/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=02bacf70fa80936a11aa10c1316af2e9c17a71da", "patch": "@@ -7,7 +7,13 @@ pub(crate) fn parse(tt: &tt::Subtree) -> Option<crate::MacroRules> {\n     let mut parser = TtCursor::new(tt);\n     let mut rules = Vec::new();\n     while !parser.is_eof() {\n-        rules.push(parse_rule(&mut parser)?)\n+        rules.push(parse_rule(&mut parser)?);\n+        if parser.expect_char(';') == None {\n+            if !parser.is_eof() {\n+                return None;\n+            }\n+            break;\n+        }\n     }\n     Some(crate::MacroRules { rules })\n }"}]}