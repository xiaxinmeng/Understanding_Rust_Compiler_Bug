{"sha": "f38561dfd603c5a39dc1c31b0165589da6a2f5b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzODU2MWRmZDYwM2M1YTM5ZGMxYzMxYjAxNjU1ODlkYTZhMmY1YjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T03:07:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:25Z"}, "message": "librustc: De-`@mut` `CrateDebugContext::composite_types_completed`", "tree": {"sha": "2d6f0e1186a3ea5f44feae400ae60402d35322eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d6f0e1186a3ea5f44feae400ae60402d35322eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f38561dfd603c5a39dc1c31b0165589da6a2f5b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f38561dfd603c5a39dc1c31b0165589da6a2f5b3", "html_url": "https://github.com/rust-lang/rust/commit/f38561dfd603c5a39dc1c31b0165589da6a2f5b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f38561dfd603c5a39dc1c31b0165589da6a2f5b3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed45bb595571495e4d9165ace5c604523d13b97", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed45bb595571495e4d9165ace5c604523d13b97", "html_url": "https://github.com/rust-lang/rust/commit/3ed45bb595571495e4d9165ace5c604523d13b97"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "56edec9ae260b2a17f5bb2c8e5ef299d6cda6120", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f38561dfd603c5a39dc1c31b0165589da6a2f5b3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38561dfd603c5a39dc1c31b0165589da6a2f5b3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=f38561dfd603c5a39dc1c31b0165589da6a2f5b3", "patch": "@@ -181,7 +181,7 @@ pub struct CrateDebugContext {\n     priv namespace_map: RefCell<HashMap<~[ast::Ident], @NamespaceTreeNode>>,\n     // This collection is used to assert that composite types (structs, enums, ...) have their\n     // members only set once:\n-    priv composite_types_completed: HashSet<DIType>,\n+    priv composite_types_completed: RefCell<HashSet<DIType>>,\n }\n \n impl CrateDebugContext {\n@@ -198,7 +198,7 @@ impl CrateDebugContext {\n             created_files: RefCell::new(HashMap::new()),\n             created_types: RefCell::new(HashMap::new()),\n             namespace_map: RefCell::new(HashMap::new()),\n-            composite_types_completed: HashSet::new(),\n+            composite_types_completed: RefCell::new(HashSet::new()),\n         };\n     }\n }\n@@ -1646,11 +1646,16 @@ fn set_members_of_composite_type(cx: &mut CrateContext,\n     // used instead of a new one created in create_struct_stub. This would cause a hard to trace\n     // assertion in DICompositeType::SetTypeArray(). The following check makes sure that we get a\n     // better error message if this should happen again due to some regression.\n-    if debug_context(cx).composite_types_completed.contains(&composite_type_metadata) {\n-        cx.sess.span_bug(definition_span, \"debuginfo::set_members_of_composite_type() - Already \\\n-                                           completed forward declaration re-encountered.\");\n-    } else {\n-        debug_context(cx).composite_types_completed.insert(composite_type_metadata);\n+    {\n+        let mut composite_types_completed =\n+            debug_context(cx).composite_types_completed.borrow_mut();\n+        if composite_types_completed.get().contains(&composite_type_metadata) {\n+            cx.sess.span_bug(definition_span, \"debuginfo::set_members_of_composite_type() - \\\n+                                               Already completed forward declaration \\\n+                                               re-encountered.\");\n+        } else {\n+            composite_types_completed.get().insert(composite_type_metadata);\n+        }\n     }\n \n     let loc = span_start(cx, definition_span);"}]}