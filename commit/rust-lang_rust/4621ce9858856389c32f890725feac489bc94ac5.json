{"sha": "4621ce9858856389c32f890725feac489bc94ac5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MjFjZTk4NTg4NTYzODljMzJmODkwNzI1ZmVhYzQ4OWJjOTRhYzU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-19T15:50:36Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-31T00:02:15Z"}, "message": "Update into-iter-on-arrays test to check future-incompat-report", "tree": {"sha": "7889399f95811accfd55e278cfa308d2bb2b9f82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7889399f95811accfd55e278cfa308d2bb2b9f82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4621ce9858856389c32f890725feac489bc94ac5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+cqYcACgkQtAh+UQ6Y\nsWTkoQ/+KCaBk78PlmSLN6PmPyIRtqe0WxfFLtrAG8Nt/C0F74eSeJUSbgddtByO\n16PLA2Q7+ZcwBmgIARz1U58OJrxBV0hTJJ+rnZboFLDuh/fNjV1KMPpA/5X8HFOo\nIkTIY60WB1dfH+7YPZ+hY99fPiPIjrR8Vitw3KY5iVcg1L6Ytb49ak4iCOER0RSt\nCn02VXoUUsc0e2zNojFp70k9xKw6Ft6xV9+/uGiVHDVGFDWQA4B+FRKtVR/mvunv\n4IkSZqnD5l5WPvcjmZbtqN9NyX/FXJSjK5IF3flnt2mjYpSbIPnEa8eke1sM0+QV\nm0abUErr5sW1z1zvwPMzKdHmWXp2/BDC6vBAlE8u0Za5GG0m1XtHKK7h16RAOSDM\n9EN5IYd1Tg4uj8S/LDnafpBcVRKKrhCtLLBO57E9qvI50/M6NpsCMBw8jXYjg1rz\nL4dWr82TQOZ1OrYx9jxLqdOVnoT1tFEFupROtvv/poFLsH88WrmDXyt8jXZzSX1O\nOSO4YOzyhRTI/iU2RmPsfkGEgqg1vB+C0n4Z66SUnp21aYXEj50YT4bx4gBxJuZe\neCenGpCh+cIMiqnwdvLw5kKDqcuVb4h+k+0quiTJKxt0f3+O8LLCvlZK8vs2HiRs\nKJnTSw2NBJDKRvYQrn0/B5Z+vcTAaMwkTa0Vy3M2L/jk0U0qd0k=\n=PbXO\n-----END PGP SIGNATURE-----", "payload": "tree 7889399f95811accfd55e278cfa308d2bb2b9f82\nparent 4b4f84f3274e2d5662c76f52769ac4b7e6826fcf\nauthor Aaron Hill <aa1ronham@gmail.com> 1603122636 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1604102535 -0400\n\nUpdate into-iter-on-arrays test to check future-incompat-report\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4621ce9858856389c32f890725feac489bc94ac5", "html_url": "https://github.com/rust-lang/rust/commit/4621ce9858856389c32f890725feac489bc94ac5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4621ce9858856389c32f890725feac489bc94ac5/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b4f84f3274e2d5662c76f52769ac4b7e6826fcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4f84f3274e2d5662c76f52769ac4b7e6826fcf", "html_url": "https://github.com/rust-lang/rust/commit/4b4f84f3274e2d5662c76f52769ac4b7e6826fcf"}], "stats": {"total": 177, "additions": 165, "deletions": 12}, "files": [{"sha": "08df0cbe9738aded04100b12afafcbd52934bde5", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4621ce9858856389c32f890725feac489bc94ac5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4621ce9858856389c32f890725feac489bc94ac5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=4621ce9858856389c32f890725feac489bc94ac5", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // run-rustfix\n-// compiler-flags: -Z emit-future-compat-report\n+// compile-flags: -Z emit-future-incompat-report\n \n fn main() {\n     let small = [1, 2];\n@@ -56,4 +56,7 @@ fn main() {\n     (&small as &[_]).into_iter();\n     small[..].into_iter();\n     std::iter::IntoIterator::into_iter(&[1, 2]);\n+\n+    #[allow(array_into_iter)]\n+    [0, 1].into_iter();\n }"}, {"sha": "cd12698da7edf9582f96879d1d851cbfbefafa22", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4621ce9858856389c32f890725feac489bc94ac5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4621ce9858856389c32f890725feac489bc94ac5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=4621ce9858856389c32f890725feac489bc94ac5", "patch": "@@ -56,4 +56,7 @@ fn main() {\n     (&small as &[_]).into_iter();\n     small[..].into_iter();\n     std::iter::IntoIterator::into_iter(&[1, 2]);\n+\n+    #[allow(array_into_iter)]\n+    [0, 1].into_iter();\n }"}, {"sha": "87965bdda7a16efd77a32793dfa9628d18174ca2", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/4621ce9858856389c32f890725feac489bc94ac5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4621ce9858856389c32f890725feac489bc94ac5/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=4621ce9858856389c32f890725feac489bc94ac5", "patch": "@@ -109,3 +109,139 @@ LL |     Box::new(Box::new([0u8; 33])).into_iter();\n \n warning: 12 warnings emitted\n \n+Future incompatibility report: Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:10:11\n+   |\n+LL |     small.into_iter();\n+   |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = note: `#[warn(array_into_iter)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:13:12\n+   |\n+LL |     [1, 2].into_iter();\n+   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:16:9\n+   |\n+LL |     big.into_iter();\n+   |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:19:15\n+   |\n+LL |     [0u8; 33].into_iter();\n+   |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:23:21\n+   |\n+LL |     Box::new(small).into_iter();\n+   |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:26:22\n+   |\n+LL |     Box::new([1, 2]).into_iter();\n+   |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:29:19\n+   |\n+LL |     Box::new(big).into_iter();\n+   |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:32:25\n+   |\n+LL |     Box::new([0u8; 33]).into_iter();\n+   |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:36:31\n+   |\n+LL |     Box::new(Box::new(small)).into_iter();\n+   |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:39:32\n+   |\n+LL |     Box::new(Box::new([1, 2])).into_iter();\n+   |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:42:29\n+   |\n+LL |     Box::new(Box::new(big)).into_iter();\n+   |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:45:35\n+   |\n+LL |     Box::new(Box::new([0u8; 33])).into_iter();\n+   |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-lint.rs:61:12\n+   |\n+LL |     [0, 1].into_iter();\n+   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/into-iter-on-arrays-lint.rs:60:13\n+   |\n+LL |     #[allow(array_into_iter)]\n+   |             ^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+"}, {"sha": "176c3219307ca5def21a76cedf7516c37ab78190", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4621ce9858856389c32f890725feac489bc94ac5/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4621ce9858856389c32f890725feac489bc94ac5/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=4621ce9858856389c32f890725feac489bc94ac5", "patch": "@@ -38,13 +38,13 @@ struct DiagnosticSpan {\n \n #[derive(Deserialize)]\n struct FutureIncompatReport {\n-    future_incompat_report: Vec<FutureBreakageItem>\n+    future_incompat_report: Vec<FutureBreakageItem>,\n }\n \n #[derive(Deserialize)]\n struct FutureBreakageItem {\n     future_breakage_date: Option<String>,\n-    diagnostic: Diagnostic\n+    diagnostic: Diagnostic,\n }\n \n impl DiagnosticSpan {\n@@ -80,9 +80,10 @@ struct DiagnosticCode {\n }\n \n pub fn rustfix_diagnostics_only(output: &str) -> String {\n-    output.lines().filter(|line| {\n-        line.starts_with('{') && serde_json::from_str::<Diagnostic>(line).is_ok()\n-    }).collect()\n+    output\n+        .lines()\n+        .filter(|line| line.starts_with('{') && serde_json::from_str::<Diagnostic>(line).is_ok())\n+        .collect()\n }\n \n pub fn extract_rendered(output: &str) -> String {\n@@ -93,12 +94,22 @@ pub fn extract_rendered(output: &str) -> String {\n                 if let Ok(diagnostic) = serde_json::from_str::<Diagnostic>(line) {\n                     diagnostic.rendered\n                 } else if let Ok(report) = serde_json::from_str::<FutureIncompatReport>(line) {\n-                    Some(format!(\"Future incompatibility report: {}\",\n-                            report.future_incompat_report.into_iter().map(|item| {\n-                                format!(\"Future breakage date: {}, diagnostic:\\n{}\",\n-                                        item.future_breakage_date.unwrap_or_else(|| \"None\".to_string()),\n-                                        item.diagnostic.rendered.unwrap_or_else(|| \"Not rendered\".to_string()))\n-                            }).collect::<String>()))\n+                    Some(format!(\n+                        \"Future incompatibility report: {}\",\n+                        report\n+                            .future_incompat_report\n+                            .into_iter()\n+                            .map(|item| {\n+                                format!(\n+                                    \"Future breakage date: {}, diagnostic:\\n{}\",\n+                                    item.future_breakage_date.unwrap_or_else(|| \"None\".to_string()),\n+                                    item.diagnostic\n+                                        .rendered\n+                                        .unwrap_or_else(|| \"Not rendered\".to_string())\n+                                )\n+                            })\n+                            .collect::<String>()\n+                    ))\n                 } else if serde_json::from_str::<ArtifactNotification>(line).is_ok() {\n                     // Ignore the notification.\n                     None"}]}