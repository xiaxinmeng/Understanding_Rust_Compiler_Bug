{"sha": "8a0e5faec7f62e3cfd88d6625ce213d93b061305", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMGU1ZmFlYzdmNjJlM2NmZDg4ZDY2MjVjZTIxM2Q5M2IwNjEzMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-31T13:40:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-31T13:40:11Z"}, "message": "Auto merge of #58003 - nikic:saturating-add, r=nagisa\n\nUse LLVM intrinsics for saturating add/sub\n\nUse the `[su](add|sub).sat` LLVM intrinsics, if we're compiling against LLVM 8, as they should optimize and codegen better than IR based on `[su](add|sub).with.overlow`.\n\nFor the fallback for LLVM < 8 I'm using the same expansion that target lowering in LLVM uses, which is not the same as Rust currently uses (in particular due to the use of selects rather than branches).\n\nFixes #55286.\nFixes #52203.\nFixes #44500.\n\nr? @nagisa", "tree": {"sha": "efb6cef13e04799f29df92d36ce750ede096bb5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efb6cef13e04799f29df92d36ce750ede096bb5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a0e5faec7f62e3cfd88d6625ce213d93b061305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a0e5faec7f62e3cfd88d6625ce213d93b061305", "html_url": "https://github.com/rust-lang/rust/commit/8a0e5faec7f62e3cfd88d6625ce213d93b061305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a0e5faec7f62e3cfd88d6625ce213d93b061305/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "html_url": "https://github.com/rust-lang/rust/commit/d30b99f9c23f8e1d6ef993cc94da96510ad709b3"}, {"sha": "4a4186e4d1168f9faf3df019596bcf87f0a4dc2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4186e4d1168f9faf3df019596bcf87f0a4dc2b", "html_url": "https://github.com/rust-lang/rust/commit/4a4186e4d1168f9faf3df019596bcf87f0a4dc2b"}], "stats": {"total": 104, "additions": 101, "deletions": 3}, "files": [{"sha": "e927ed40d7fb7a38fa0859b4b4b96e389598a369", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a0e5faec7f62e3cfd88d6625ce213d93b061305/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a0e5faec7f62e3cfd88d6625ce213d93b061305/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=8a0e5faec7f62e3cfd88d6625ce213d93b061305", "patch": "@@ -1493,6 +1493,19 @@ extern \"rust-intrinsic\" {\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n     pub fn overflowing_mul<T>(a: T, b: T) -> T;\n \n+    /// Computes `a + b`, while saturating at numeric bounds.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `saturating_add` method. For example,\n+    /// [`std::u32::saturating_add`](../../std/primitive.u32.html#method.saturating_add)\n+    #[cfg(not(stage0))]\n+    pub fn saturating_add<T>(a: T, b: T) -> T;\n+    /// Computes `a - b`, while saturating at numeric bounds.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `saturating_sub` method. For example,\n+    /// [`std::u32::saturating_sub`](../../std/primitive.u32.html#method.saturating_sub)\n+    #[cfg(not(stage0))]\n+    pub fn saturating_sub<T>(a: T, b: T) -> T;\n+\n     /// Returns the value of the discriminant for the variant in 'v',\n     /// cast to a `u64`; if `T` has no discriminant, returns 0.\n     pub fn discriminant_value<T>(v: &T) -> u64;"}, {"sha": "f80f839282781b6f8c861337572a6d794095f08c", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a0e5faec7f62e3cfd88d6625ce213d93b061305/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a0e5faec7f62e3cfd88d6625ce213d93b061305/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8a0e5faec7f62e3cfd88d6625ce213d93b061305", "patch": "@@ -883,11 +883,16 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n             pub fn saturating_add(self, rhs: Self) -> Self {\n+                #[cfg(stage0)]\n                 match self.checked_add(rhs) {\n                     Some(x) => x,\n                     None if rhs >= 0 => Self::max_value(),\n                     None => Self::min_value(),\n                 }\n+                #[cfg(not(stage0))]\n+                {\n+                    intrinsics::saturating_add(self, rhs)\n+                }\n             }\n         }\n \n@@ -908,11 +913,16 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n             pub fn saturating_sub(self, rhs: Self) -> Self {\n+                #[cfg(stage0)]\n                 match self.checked_sub(rhs) {\n                     Some(x) => x,\n                     None if rhs >= 0 => Self::min_value(),\n                     None => Self::max_value(),\n                 }\n+                #[cfg(not(stage0))]\n+                {\n+                    intrinsics::saturating_sub(self, rhs)\n+                }\n             }\n         }\n \n@@ -2744,10 +2754,15 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n             pub fn saturating_add(self, rhs: Self) -> Self {\n+                #[cfg(stage0)]\n                 match self.checked_add(rhs) {\n                     Some(x) => x,\n                     None => Self::max_value(),\n                 }\n+                #[cfg(not(stage0))]\n+                {\n+                    intrinsics::saturating_add(self, rhs)\n+                }\n             }\n         }\n \n@@ -2766,10 +2781,15 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n             pub fn saturating_sub(self, rhs: Self) -> Self {\n+                #[cfg(stage0)]\n                 match self.checked_sub(rhs) {\n                     Some(x) => x,\n                     None => Self::min_value(),\n                 }\n+                #[cfg(not(stage0))]\n+                {\n+                    intrinsics::saturating_sub(self, rhs)\n+                }\n             }\n         }\n "}, {"sha": "f679558844198589e1fa84b7a2fd072bd66348f3", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a0e5faec7f62e3cfd88d6625ce213d93b061305/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a0e5faec7f62e3cfd88d6625ce213d93b061305/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=8a0e5faec7f62e3cfd88d6625ce213d93b061305", "patch": "@@ -757,6 +757,30 @@ impl CodegenCx<'b, 'tcx> {\n         ifn!(\"llvm.umul.with.overflow.i64\", fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n         ifn!(\"llvm.umul.with.overflow.i128\", fn(t_i128, t_i128) -> mk_struct!{t_i128, i1});\n \n+        ifn!(\"llvm.sadd.sat.i8\", fn(t_i8, t_i8) -> t_i8);\n+        ifn!(\"llvm.sadd.sat.i16\", fn(t_i16, t_i16) -> t_i16);\n+        ifn!(\"llvm.sadd.sat.i32\", fn(t_i32, t_i32) -> t_i32);\n+        ifn!(\"llvm.sadd.sat.i64\", fn(t_i64, t_i64) -> t_i64);\n+        ifn!(\"llvm.sadd.sat.i128\", fn(t_i128, t_i128) -> t_i128);\n+\n+        ifn!(\"llvm.uadd.sat.i8\", fn(t_i8, t_i8) -> t_i8);\n+        ifn!(\"llvm.uadd.sat.i16\", fn(t_i16, t_i16) -> t_i16);\n+        ifn!(\"llvm.uadd.sat.i32\", fn(t_i32, t_i32) -> t_i32);\n+        ifn!(\"llvm.uadd.sat.i64\", fn(t_i64, t_i64) -> t_i64);\n+        ifn!(\"llvm.uadd.sat.i128\", fn(t_i128, t_i128) -> t_i128);\n+\n+        ifn!(\"llvm.ssub.sat.i8\", fn(t_i8, t_i8) -> t_i8);\n+        ifn!(\"llvm.ssub.sat.i16\", fn(t_i16, t_i16) -> t_i16);\n+        ifn!(\"llvm.ssub.sat.i32\", fn(t_i32, t_i32) -> t_i32);\n+        ifn!(\"llvm.ssub.sat.i64\", fn(t_i64, t_i64) -> t_i64);\n+        ifn!(\"llvm.ssub.sat.i128\", fn(t_i128, t_i128) -> t_i128);\n+\n+        ifn!(\"llvm.usub.sat.i8\", fn(t_i8, t_i8) -> t_i8);\n+        ifn!(\"llvm.usub.sat.i16\", fn(t_i16, t_i16) -> t_i16);\n+        ifn!(\"llvm.usub.sat.i32\", fn(t_i32, t_i32) -> t_i32);\n+        ifn!(\"llvm.usub.sat.i64\", fn(t_i64, t_i64) -> t_i64);\n+        ifn!(\"llvm.usub.sat.i128\", fn(t_i128, t_i128) -> t_i128);\n+\n         ifn!(\"llvm.lifetime.start\", fn(t_i64,i8p) -> void);\n         ifn!(\"llvm.lifetime.end\", fn(t_i64, i8p) -> void);\n "}, {"sha": "58b466dbe6faabb381e36227d6279e941339ee1a", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8a0e5faec7f62e3cfd88d6625ce213d93b061305/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a0e5faec7f62e3cfd88d6625ce213d93b061305/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=8a0e5faec7f62e3cfd88d6625ce213d93b061305", "patch": "@@ -14,7 +14,7 @@ use type_::Type;\n use type_of::LayoutLlvmExt;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Primitive};\n-use rustc_codegen_ssa::common::TypeKind;\n+use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n use syntax::ast::{self, FloatTy};\n use syntax::symbol::Symbol;\n@@ -28,7 +28,7 @@ use rustc::session::Session;\n use syntax_pos::Span;\n \n use std::cmp::Ordering;\n-use std::iter;\n+use std::{iter, i128, u128};\n \n fn get_simple_intrinsic(cx: &CodegenCx<'ll, '_>, name: &str) -> Option<&'ll Value> {\n     let llvm_name = match name {\n@@ -342,7 +342,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             \"bitreverse\" | \"add_with_overflow\" | \"sub_with_overflow\" |\n             \"mul_with_overflow\" | \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n             \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" | \"exact_div\" |\n-            \"rotate_left\" | \"rotate_right\" => {\n+            \"rotate_left\" | \"rotate_right\" | \"saturating_add\" | \"saturating_sub\" => {\n                 let ty = arg_tys[0];\n                 match int_type_width_signed(ty, self) {\n                     Some((width, signed)) =>\n@@ -468,6 +468,44 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                                     self.or(shift1, shift2)\n                                 }\n                             },\n+                            \"saturating_add\" | \"saturating_sub\" => {\n+                                let is_add = name == \"saturating_add\";\n+                                let lhs = args[0].immediate();\n+                                let rhs = args[1].immediate();\n+                                if llvm_util::get_major_version() >= 8 {\n+                                    let llvm_name = &format!(\"llvm.{}{}.sat.i{}\",\n+                                                             if signed { 's' } else { 'u' },\n+                                                             if is_add { \"add\" } else { \"sub\" },\n+                                                             width);\n+                                    let llfn = self.get_intrinsic(llvm_name);\n+                                    self.call(llfn, &[lhs, rhs], None)\n+                                } else {\n+                                    let llvm_name = &format!(\"llvm.{}{}.with.overflow.i{}\",\n+                                                             if signed { 's' } else { 'u' },\n+                                                             if is_add { \"add\" } else { \"sub\" },\n+                                                             width);\n+                                    let llfn = self.get_intrinsic(llvm_name);\n+                                    let pair = self.call(llfn, &[lhs, rhs], None);\n+                                    let val = self.extract_value(pair, 0);\n+                                    let overflow = self.extract_value(pair, 1);\n+                                    let llty = self.type_ix(width);\n+\n+                                    let limit = if signed {\n+                                        let limit_lo = self.const_uint_big(\n+                                            llty, (i128::MIN >> (128 - width)) as u128);\n+                                        let limit_hi = self.const_uint_big(\n+                                            llty, (i128::MAX >> (128 - width)) as u128);\n+                                        let neg = self.icmp(\n+                                            IntPredicate::IntSLT, val, self.const_uint(llty, 0));\n+                                        self.select(neg, limit_hi, limit_lo)\n+                                    } else if is_add {\n+                                        self.const_uint_big(llty, u128::MAX >> (128 - width))\n+                                    } else {\n+                                        self.const_uint(llty, 0)\n+                                    };\n+                                    self.select(overflow, limit, val)\n+                                }\n+                            },\n                             _ => bug!(),\n                         },\n                     None => {"}, {"sha": "82d4300d99687053766e3dce5d46d71f07798db2", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a0e5faec7f62e3cfd88d6625ce213d93b061305/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a0e5faec7f62e3cfd88d6625ce213d93b061305/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=8a0e5faec7f62e3cfd88d6625ce213d93b061305", "patch": "@@ -68,6 +68,7 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n         \"size_of\" | \"min_align_of\" | \"needs_drop\" |\n         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n         \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n+        \"saturating_add\" | \"saturating_sub\" |\n         \"rotate_left\" | \"rotate_right\" |\n         \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" | \"bitreverse\"\n         => hir::Unsafety::Normal,\n@@ -307,6 +308,8 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n+            \"saturating_add\" | \"saturating_sub\" =>\n+                (1, vec![param(0), param(0)], param(0)),\n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n "}]}