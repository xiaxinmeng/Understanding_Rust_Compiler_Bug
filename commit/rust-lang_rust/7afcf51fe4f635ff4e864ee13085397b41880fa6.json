{"sha": "7afcf51fe4f635ff4e864ee13085397b41880fa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZmNmNTFmZTRmNjM1ZmY0ZTg2NGVlMTMwODUzOTdiNDE4ODBmYTY=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-06-04T20:47:24Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-06-04T20:47:24Z"}, "message": "Always quote program name in Command::spawn on Windows\n\n`CreateProcess` will interpret args as part of the binary name if it\ndoesn't find the binary using just the unquoted name. For example if\n`foo.exe` doesn't exist, `Command::new(\"foo\").arg(\"bar\").spawn()` will\ntry to launch `foo bar.exe` which is clearly not desired.", "tree": {"sha": "f8498827dc96cd05f6c448a23d404469f64f0a04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8498827dc96cd05f6c448a23d404469f64f0a04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7afcf51fe4f635ff4e864ee13085397b41880fa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7afcf51fe4f635ff4e864ee13085397b41880fa6", "html_url": "https://github.com/rust-lang/rust/commit/7afcf51fe4f635ff4e864ee13085397b41880fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7afcf51fe4f635ff4e864ee13085397b41880fa6/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da9721ab49d80bf74208e94a891b12c4a248507", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da9721ab49d80bf74208e94a891b12c4a248507", "html_url": "https://github.com/rust-lang/rust/commit/0da9721ab49d80bf74208e94a891b12c4a248507"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "0bd0ce73138d6109224070ffffbffa097078804b", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7afcf51fe4f635ff4e864ee13085397b41880fa6/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afcf51fe4f635ff4e864ee13085397b41880fa6/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=7afcf51fe4f635ff4e864ee13085397b41880fa6", "patch": "@@ -427,20 +427,22 @@ fn make_command_line(prog: &OsStr, args: &[OsString]) -> io::Result<Vec<u16>> {\n     // Encode the command and arguments in a command line string such\n     // that the spawned process may recover them using CommandLineToArgvW.\n     let mut cmd: Vec<u16> = Vec::new();\n-    append_arg(&mut cmd, prog)?;\n+    // Always quote the program name so CreateProcess doesn't interpret args as\n+    // part of the name if the binary wasn't found first time.\n+    append_arg(&mut cmd, prog, true)?;\n     for arg in args {\n         cmd.push(' ' as u16);\n-        append_arg(&mut cmd, arg)?;\n+        append_arg(&mut cmd, arg, false)?;\n     }\n     return Ok(cmd);\n \n-    fn append_arg(cmd: &mut Vec<u16>, arg: &OsStr) -> io::Result<()> {\n+    fn append_arg(cmd: &mut Vec<u16>, arg: &OsStr, force_quotes: bool) -> io::Result<()> {\n         // If an argument has 0 characters then we need to quote it to ensure\n         // that it actually gets passed through on the command line or otherwise\n         // it will be dropped entirely when parsed on the other end.\n         ensure_no_nuls(arg)?;\n         let arg_bytes = &arg.as_inner().inner.as_inner();\n-        let quote = arg_bytes.iter().any(|c| *c == b' ' || *c == b'\\t')\n+        let quote = force_quotes || arg_bytes.iter().any(|c| *c == b' ' || *c == b'\\t')\n             || arg_bytes.is_empty();\n         if quote {\n             cmd.push('\"' as u16);\n@@ -526,7 +528,7 @@ mod tests {\n \n         assert_eq!(\n             test_wrapper(\"prog\", &[\"aaa\", \"bbb\", \"ccc\"]),\n-            \"prog aaa bbb ccc\"\n+            \"\\\"prog\\\" aaa bbb ccc\"\n         );\n \n         assert_eq!(\n@@ -539,15 +541,15 @@ mod tests {\n         );\n         assert_eq!(\n             test_wrapper(\"echo\", &[\"a b c\"]),\n-            \"echo \\\"a b c\\\"\"\n+            \"\\\"echo\\\" \\\"a b c\\\"\"\n         );\n         assert_eq!(\n             test_wrapper(\"echo\", &[\"\\\" \\\\\\\" \\\\\", \"\\\\\"]),\n-            \"echo \\\"\\\\\\\" \\\\\\\\\\\\\\\" \\\\\\\\\\\" \\\\\"\n+            \"\\\"echo\\\" \\\"\\\\\\\" \\\\\\\\\\\\\\\" \\\\\\\\\\\" \\\\\"\n         );\n         assert_eq!(\n             test_wrapper(\"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\", &[]),\n-            \"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\"\n+            \"\\\"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\\\"\"\n         );\n     }\n }"}]}