{"sha": "0118278cdea7f07c2a9f7d75506a48cf554979e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTgyNzhjZGVhN2YwN2MyYTlmN2Q3NTUwNmE0OGNmNTU0OTc5ZTM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-11T02:33:05Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-22T19:42:15Z"}, "message": "Drive-by formatting", "tree": {"sha": "1cd08c85e76a6963ee1338cea240159d21bcc04c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd08c85e76a6963ee1338cea240159d21bcc04c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0118278cdea7f07c2a9f7d75506a48cf554979e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0118278cdea7f07c2a9f7d75506a48cf554979e3", "html_url": "https://github.com/rust-lang/rust/commit/0118278cdea7f07c2a9f7d75506a48cf554979e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0118278cdea7f07c2a9f7d75506a48cf554979e3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b58095f68e971b952310b5a402a287f252936d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b58095f68e971b952310b5a402a287f252936d9", "html_url": "https://github.com/rust-lang/rust/commit/5b58095f68e971b952310b5a402a287f252936d9"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "c6bb45172a973062c8f950743455e99b0fb66a09", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0118278cdea7f07c2a9f7d75506a48cf554979e3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0118278cdea7f07c2a9f7d75506a48cf554979e3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0118278cdea7f07c2a9f7d75506a48cf554979e3", "patch": "@@ -195,8 +195,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         error: &MismatchedProjectionTypes<'tcx>,\n     ) {\n-        let predicate =\n-            self.resolve_vars_if_possible(&obligation.predicate);\n+        let predicate = self.resolve_vars_if_possible(&obligation.predicate);\n \n         if predicate.references_error() {\n             return\n@@ -228,7 +227,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     &mut obligations\n                 );\n                 if let Err(error) = self.at(&obligation.cause, obligation.param_env)\n-                                        .eq(normalized_ty, data.ty) {\n+                    .eq(normalized_ty, data.ty)\n+                {\n                     values = Some(infer::ValuePairs::Types(ExpectedFound {\n                         expected: normalized_ty,\n                         found: data.ty,\n@@ -239,13 +239,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             let msg = format!(\"type mismatch resolving `{}`\", predicate);\n-            let error_id = (DiagnosticMessageId::ErrorId(271),\n-                            Some(obligation.cause.span), msg);\n+            let error_id = (\n+                DiagnosticMessageId::ErrorId(271),\n+                Some(obligation.cause.span),\n+                msg,\n+            );\n             let fresh = self.tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n             if fresh {\n                 let mut diag = struct_span_err!(\n-                    self.tcx.sess, obligation.cause.span, E0271,\n-                    \"type mismatch resolving `{}`\", predicate\n+                    self.tcx.sess,\n+                    obligation.cause.span,\n+                    E0271,\n+                    \"type mismatch resolving `{}`\",\n+                    predicate\n                 );\n                 self.note_type_err(&mut diag, &obligation.cause, None, values, err);\n                 self.note_obligation_cause(&mut diag, obligation);\n@@ -532,23 +538,33 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// whose result could not be truly determined and thus we can't say\n     /// if the program type checks or not -- and they are unusual\n     /// occurrences in any case.\n-    pub fn report_overflow_error<T>(&self,\n-                                    obligation: &Obligation<'tcx, T>,\n-                                    suggest_increasing_limit: bool) -> !\n+    pub fn report_overflow_error<T>(\n+        &self,\n+        obligation: &Obligation<'tcx, T>,\n+        suggest_increasing_limit: bool,\n+    ) -> !\n         where T: fmt::Display + TypeFoldable<'tcx>\n     {\n         let predicate =\n             self.resolve_vars_if_possible(&obligation.predicate);\n-        let mut err = struct_span_err!(self.tcx.sess, obligation.cause.span, E0275,\n-                                       \"overflow evaluating the requirement `{}`\",\n-                                       predicate);\n+        let mut err = struct_span_err!(\n+            self.tcx.sess,\n+            obligation.cause.span,\n+            E0275,\n+            \"overflow evaluating the requirement `{}`\",\n+            predicate\n+        );\n \n         if suggest_increasing_limit {\n             self.suggest_new_overflow_limit(&mut err);\n         }\n \n-        self.note_obligation_cause_code(&mut err, &obligation.predicate, &obligation.cause.code,\n-                                        &mut vec![]);\n+        self.note_obligation_cause_code(\n+            &mut err,\n+            &obligation.predicate,\n+            &obligation.cause.code,\n+            &mut vec![],\n+        );\n \n         err.emit();\n         self.tcx.sess.abort_if_errors();"}]}