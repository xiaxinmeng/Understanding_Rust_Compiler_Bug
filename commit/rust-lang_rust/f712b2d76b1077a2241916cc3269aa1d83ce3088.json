{"sha": "f712b2d76b1077a2241916cc3269aa1d83ce3088", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MTJiMmQ3NmIxMDc3YTIyNDE5MTZjYzMyNjlhYTFkODNjZTMwODg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-10T17:37:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-19T03:16:41Z"}, "message": "accept naked exprs with commas in pattern arms\n\npretty printing will use them, but indentation is slightly off\nif the expr is long", "tree": {"sha": "4c9607974f8ec81d100f90d176d140b9ee9e2936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c9607974f8ec81d100f90d176d140b9ee9e2936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f712b2d76b1077a2241916cc3269aa1d83ce3088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f712b2d76b1077a2241916cc3269aa1d83ce3088", "html_url": "https://github.com/rust-lang/rust/commit/f712b2d76b1077a2241916cc3269aa1d83ce3088", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f712b2d76b1077a2241916cc3269aa1d83ce3088/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f492ab092b6d4948a69eb20037a7409c6119d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f492ab092b6d4948a69eb20037a7409c6119d3", "html_url": "https://github.com/rust-lang/rust/commit/22f492ab092b6d4948a69eb20037a7409c6119d3"}], "stats": {"total": 82, "additions": 76, "deletions": 6}, "files": [{"sha": "6ba1e0bcfb0ccbaa415a6df1266c633d55b0f040", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=f712b2d76b1077a2241916cc3269aa1d83ce3088", "patch": "@@ -568,6 +568,13 @@ fn view_path_id(p: @view_path) -> node_id {\n     }\n }\n \n+fn lone_block_expr(blk: blk) -> option<@ast::expr> {\n+    if blk.node.view_items.len() != 0 { ret none; }\n+    if blk.node.stmts.len() != 0 { ret none; }\n+    if blk.node.rules != default_blk { ret none; }\n+    ret blk.node.expr;\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "a6bce303ee56f303bbf5e0462e62f6bda4c02966", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f712b2d76b1077a2241916cc3269aa1d83ce3088", "patch": "@@ -1509,8 +1509,25 @@ class parser {\n             let pats = self.parse_pats();\n             let mut guard = none;\n             if self.eat_keyword(~\"if\") { guard = some(self.parse_expr()); }\n-            if self.token == token::FAT_ARROW { self.bump(); }\n-            let blk = self.parse_block();\n+            let blk = if self.token != token::FAT_ARROW {\n+                self.parse_block()\n+            } else {\n+                self.bump();\n+                if self.token == token::LBRACE {\n+                    self.parse_block()\n+                } else {\n+                    let expr = self.parse_expr();\n+                    if self.token != token::RBRACE {\n+                        self.expect(token::COMMA);\n+                    }\n+                    {node: {view_items: ~[],\n+                            stmts: ~[],\n+                            expr: some(expr),\n+                            id: self.get_id(),\n+                            rules: default_blk},\n+                     span: expr.span}\n+                }\n+            };\n             vec::push(arms, {pats: pats, guard: guard, body: blk});\n         }\n         let mut hi = self.span.hi;"}, {"sha": "6b87c055f6fd6e3fdc5d14f7c83f356fd4c77b8d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f712b2d76b1077a2241916cc3269aa1d83ce3088", "patch": "@@ -6,7 +6,7 @@ import pp::{break_offset, word, printer,\n             inconsistent, eof};\n import diagnostic;\n import ast::{required, provided};\n-import ast_util::operator_prec;\n+import ast_util::{operator_prec, lone_block_expr};\n import dvec::{dvec, extensions};\n import parse::classify::*;\n \n@@ -998,7 +998,8 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         print_maybe_parens_discrim(s, expr);\n         space(s.s);\n         bopen(s);\n-        for arms.each |arm| {\n+        let len = arms.len();\n+        for arms.eachi |i, arm| {\n             space(s.s);\n             cbox(s, alt_indent_unit);\n             ibox(s, 0u);\n@@ -1014,8 +1015,19 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n               some(e) { word_space(s, ~\"if\"); print_expr(s, e); space(s.s); }\n               none { }\n             }\n-            print_possibly_embedded_block(s, arm.body, block_normal,\n-                                          alt_indent_unit);\n+            word_space(s, ~\"=>\");\n+            alt lone_block_expr(arm.body) {\n+              some(expr) => {\n+                end(s); // close the ibox for the pattern\n+                print_expr(s, expr);\n+                if i < len - 1 { word_space(s, ~\",\"); }\n+                end(s); // close enclosing cbox\n+              }\n+              none => {\n+                print_possibly_embedded_block(s, arm.body, block_normal,\n+                                              alt_indent_unit);\n+              }\n+            }\n         }\n         bclose_(s, expr.span, alt_indent_unit);\n       }"}, {"sha": "8504a50d5a14dd2a32a319ba6bd167eeabbf08aa", "filename": "src/test/pretty/alt-naked-expr-long.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Ftest%2Fpretty%2Falt-naked-expr-long.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Ftest%2Fpretty%2Falt-naked-expr-long.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Falt-naked-expr-long.rs?ref=f712b2d76b1077a2241916cc3269aa1d83ce3088", "patch": "@@ -0,0 +1,17 @@\n+// pretty-exact\n+\n+// actually this doesn't quite look how I want it to, but I can't\n+// get the prettyprinter to indent the long expr\n+\n+fn main() {\n+    let x = some(3);\n+    let y =\n+        alt x {\n+          some(_) =>\n+          \"some\" + \"very\" + \"very\" + \"very\" + \"very\" + \"very\" + \"very\" +\n+              \"very\" + \"very\" + \"long\" + \"string\",\n+\n+          none => \"none\"\n+        };\n+    assert y == \"some(_)\";\n+}"}, {"sha": "70099e46806e92b3f10d92308cf2ffdc3ec5fdb4", "filename": "src/test/pretty/alt-naked-expr-medium.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Ftest%2Fpretty%2Falt-naked-expr-medium.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Ftest%2Fpretty%2Falt-naked-expr-medium.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Falt-naked-expr-medium.rs?ref=f712b2d76b1077a2241916cc3269aa1d83ce3088", "patch": "@@ -0,0 +1,10 @@\n+// pretty-exact\n+\n+fn main() {\n+    let x = some(3);\n+    let _y =\n+        alt x {\n+          some(_) => ~[~\"some(_)\", ~\"not\", ~\"SO\", ~\"long\", ~\"string\"],\n+          none => ~[~\"none\"]\n+        };\n+}"}, {"sha": "54ed76054e46ca03edb236858b5ff69fe0de25d9", "filename": "src/test/pretty/alt-naked-expr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Ftest%2Fpretty%2Falt-naked-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f712b2d76b1077a2241916cc3269aa1d83ce3088/src%2Ftest%2Fpretty%2Falt-naked-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Falt-naked-expr.rs?ref=f712b2d76b1077a2241916cc3269aa1d83ce3088", "patch": "@@ -0,0 +1,7 @@\n+// pretty-exact\n+\n+fn main() {\n+    let x = some(3);\n+    let y = alt x { some(_) => \"some(_)\",  none => \"none\" };\n+    assert y == \"some(_)\";\n+}"}]}