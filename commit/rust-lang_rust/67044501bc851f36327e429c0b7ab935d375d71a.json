{"sha": "67044501bc851f36327e429c0b7ab935d375d71a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MDQ0NTAxYmM4NTFmMzYzMjdlNDI5YzBiN2FiOTM1ZDM3NWQ3MWE=", "commit": {"author": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2017-08-04T00:27:30Z"}, "committer": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2017-08-04T00:27:30Z"}, "message": "trans: Reuse immediate value in call to call_memset()", "tree": {"sha": "26a1e160f5159fb77fe3cdc58e932d2fc3952e9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26a1e160f5159fb77fe3cdc58e932d2fc3952e9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67044501bc851f36327e429c0b7ab935d375d71a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67044501bc851f36327e429c0b7ab935d375d71a", "html_url": "https://github.com/rust-lang/rust/commit/67044501bc851f36327e429c0b7ab935d375d71a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67044501bc851f36327e429c0b7ab935d375d71a/comments", "author": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3603f3ec669f8370fbe4bf98032527ee8f1c489", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3603f3ec669f8370fbe4bf98032527ee8f1c489", "html_url": "https://github.com/rust-lang/rust/commit/c3603f3ec669f8370fbe4bf98032527ee8f1c489"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "a23e1a0684bf4c27770058325dde9b9f132a0e77", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67044501bc851f36327e429c0b7ab935d375d71a/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67044501bc851f36327e429c0b7ab935d375d71a/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=67044501bc851f36327e429c0b7ab935d375d71a", "patch": "@@ -122,8 +122,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     if common::val_ty(v) == Type::i8(bcx.ccx) {\n                         let align = align.unwrap_or_else(|| bcx.ccx.align_of(tr_elem.ty));\n                         let align = C_i32(bcx.ccx, align as i32);\n-                        let fill = tr_elem.immediate();\n-                        base::call_memset(&bcx, base, fill, size, align, false);\n+                        base::call_memset(&bcx, base, v, size, align, false);\n                         return bcx;\n                     }\n                 }"}]}