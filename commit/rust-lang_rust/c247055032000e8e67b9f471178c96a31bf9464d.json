{"sha": "c247055032000e8e67b9f471178c96a31bf9464d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNDcwNTUwMzIwMDBlOGU2N2I5ZjQ3MTE3OGM5NmEzMWJmOTQ2NGQ=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-04-22T18:24:36Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-04-22T18:51:05Z"}, "message": "Get rid of \"[+] show undocumented items\" toggle on numeric From impls\n\nOn most From implementations, the docstring is attached to the\nfunction. This is also how people have been [recommended] to do it.\n\nScreenshots:\n\n* [before](https://user-images.githubusercontent.com/1593513/115767662-323c5480-a35e-11eb-9918-98aba83e9183.png)\n* [after](https://user-images.githubusercontent.com/1593513/115767675-35374500-a35e-11eb-964f-c28eeb6c807a.png)\n\n[recommended]: https://github.com/rust-lang/rust/issues/51430#issuecomment-398322434", "tree": {"sha": "b727912cb87f8ff5509d27987d0b07e04b4c6975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b727912cb87f8ff5509d27987d0b07e04b4c6975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c247055032000e8e67b9f471178c96a31bf9464d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c247055032000e8e67b9f471178c96a31bf9464d", "html_url": "https://github.com/rust-lang/rust/commit/c247055032000e8e67b9f471178c96a31bf9464d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c247055032000e8e67b9f471178c96a31bf9464d/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df26f897cffb2d86880544bb451c6b5f8509b2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df26f897cffb2d86880544bb451c6b5f8509b2d", "html_url": "https://github.com/rust-lang/rust/commit/6df26f897cffb2d86880544bb451c6b5f8509b2d"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "a522b7da3bd1c64df67e67a9e29557d5e06c85c5", "filename": "library/core/src/convert/num.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c247055032000e8e67b9f471178c96a31bf9464d/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c247055032000e8e67b9f471178c96a31bf9464d/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs?ref=c247055032000e8e67b9f471178c96a31bf9464d", "patch": "@@ -45,8 +45,10 @@ impl_float_to_int!(f64 => u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize);\n macro_rules! impl_from {\n     ($Small: ty, $Large: ty, #[$attr:meta], $doc: expr) => {\n         #[$attr]\n-        #[doc = $doc]\n         impl From<$Small> for $Large {\n+            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n+            // Rustdocs on functions do not.\n+            #[doc = $doc]\n             #[inline]\n             fn from(small: $Small) -> Self {\n                 small as Self\n@@ -383,8 +385,10 @@ use crate::num::NonZeroUsize;\n macro_rules! nzint_impl_from {\n     ($Small: ty, $Large: ty, #[$attr:meta], $doc: expr) => {\n         #[$attr]\n-        #[doc = $doc]\n         impl From<$Small> for $Large {\n+            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n+            // Rustdocs on functions do not.\n+            #[doc = $doc]\n             #[inline]\n             fn from(small: $Small) -> Self {\n                 // SAFETY: input type guarantees the value is non-zero\n@@ -450,10 +454,12 @@ nzint_impl_from! { NonZeroU64, NonZeroI128, #[stable(feature = \"nz_int_conv\", si\n macro_rules! nzint_impl_try_from_int {\n     ($Int: ty, $NonZeroInt: ty, #[$attr:meta], $doc: expr) => {\n         #[$attr]\n-        #[doc = $doc]\n         impl TryFrom<$Int> for $NonZeroInt {\n             type Error = TryFromIntError;\n \n+            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n+            // Rustdocs on functions do not.\n+            #[doc = $doc]\n             #[inline]\n             fn try_from(value: $Int) -> Result<Self, Self::Error> {\n                 Self::new(value).ok_or(TryFromIntError(()))\n@@ -489,10 +495,12 @@ nzint_impl_try_from_int! { isize, NonZeroIsize, #[stable(feature = \"nzint_try_fr\n macro_rules! nzint_impl_try_from_nzint {\n     ($From:ty => $To:ty, $doc: expr) => {\n         #[stable(feature = \"nzint_try_from_nzint_conv\", since = \"1.49.0\")]\n-        #[doc = $doc]\n         impl TryFrom<$From> for $To {\n             type Error = TryFromIntError;\n \n+            // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n+            // Rustdocs on functions do not.\n+            #[doc = $doc]\n             #[inline]\n             fn try_from(value: $From) -> Result<Self, Self::Error> {\n                 TryFrom::try_from(value.get()).map(|v| {"}]}