{"sha": "5f975e969b46278669940aa60e5aea50ba588531", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTc1ZTk2OWI0NjI3ODY2OTk0MGFhNjBlNWFlYTUwYmE1ODg1MzE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-26T13:54:58Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:35Z"}, "message": "Support unions in borrow checker\n\nAdd some more tests", "tree": {"sha": "f6bd2c93d0dd00ae12441fe77c2dce73b5fdee15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6bd2c93d0dd00ae12441fe77c2dce73b5fdee15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f975e969b46278669940aa60e5aea50ba588531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f975e969b46278669940aa60e5aea50ba588531", "html_url": "https://github.com/rust-lang/rust/commit/5f975e969b46278669940aa60e5aea50ba588531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f975e969b46278669940aa60e5aea50ba588531/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed", "html_url": "https://github.com/rust-lang/rust/commit/59ccb7b6dbaf3a590cf3a234661aa7dcc2188aed"}], "stats": {"total": 495, "additions": 484, "deletions": 11}, "files": [{"sha": "86f396d8982b00f2ec81003b81801fa579d8dc19", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -461,6 +461,10 @@ fn add_fragment_siblings_for_extension<'a, 'tcx>(this: &MoveData<'tcx>,\n             }\n         }\n \n+        (&ty::TyUnion(..), None) => {\n+            // Do nothing, all union fields are moved/assigned together.\n+        }\n+\n         (&ty::TyEnum(def, _), ref enum_variant_info) => {\n             let variant = match *enum_variant_info {\n                 Some((vid, ref _lp2)) => def.variant_with_id(vid),"}, {"sha": "6193157fa7b361e0e56fe0bcce54f2f787b45df5", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 self.restrict(cmt_base)\n             }\n \n-            Categorization::Interior(cmt_base, i) => {\n+            Categorization::Interior(cmt_base, interior) => {\n                 // R-Field\n                 //\n                 // Overwriting the base would not change the type of\n@@ -99,8 +99,34 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                     Categorization::Downcast(_, variant_id) => Some(variant_id),\n                     _ => None\n                 };\n+                let interior = interior.cleaned();\n+                let base_ty = cmt_base.ty;\n                 let result = self.restrict(cmt_base);\n-                self.extend(result, &cmt, LpInterior(opt_variant_id, i.cleaned()))\n+                if let ty::TyUnion(ref adt_def, _) = base_ty.sty {\n+                    match result {\n+                        RestrictionResult::Safe => RestrictionResult::Safe,\n+                        RestrictionResult::SafeIf(base_lp, mut base_vec) => {\n+                            for field in &adt_def.struct_variant().fields {\n+                                let field = InteriorKind::InteriorField(mc::NamedField(field.name));\n+                                let field_ty = if field == interior {\n+                                    cmt.ty\n+                                } else {\n+                                    self.bccx.tcx.types.err // Doesn't matter\n+                                };\n+                                let sibling_lp_kind = LpExtend(base_lp.clone(), cmt.mutbl,\n+                                                               LpInterior(opt_variant_id, field));\n+                                let sibling_lp = Rc::new(LoanPath::new(sibling_lp_kind, field_ty));\n+                                base_vec.push(sibling_lp);\n+                            }\n+\n+                            let lp = new_lp(LpExtend(base_lp, cmt.mutbl,\n+                                                     LpInterior(opt_variant_id, interior)));\n+                            RestrictionResult::SafeIf(lp, base_vec)\n+                        }\n+                    }\n+                } else {\n+                    self.extend(result, &cmt, LpInterior(opt_variant_id, interior))\n+                }\n             }\n \n             Categorization::StaticItem => {"}, {"sha": "f5e20285e0c1be9f64a4975b66414697816eeae1", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -477,8 +477,6 @@ impl<'a, 'tcx> LoanPath<'tcx> {\n                     base.common(&base2).map(|x| {\n                         let xd = x.depth();\n                         if base.depth() == xd && base2.depth() == xd {\n-                            assert_eq!(base.ty, base2.ty);\n-                            assert_eq!(self.ty, other.ty);\n                             LoanPath {\n                                 kind: LpExtend(Rc::new(x), a, LpInterior(opt_variant_id, id)),\n                                 ty: self.ty,\n@@ -495,15 +493,13 @@ impl<'a, 'tcx> LoanPath<'tcx> {\n             (_, &LpExtend(ref other, _, LpDeref(_))) => self.common(&other),\n             (&LpVar(id), &LpVar(id2)) => {\n                 if id == id2 {\n-                    assert_eq!(self.ty, other.ty);\n                     Some(LoanPath { kind: LpVar(id), ty: self.ty })\n                 } else {\n                     None\n                 }\n             }\n             (&LpUpvar(id), &LpUpvar(id2)) => {\n                 if id == id2 {\n-                    assert_eq!(self.ty, other.ty);\n                     Some(LoanPath { kind: LpUpvar(id), ty: self.ty })\n                 } else {\n                     None\n@@ -1136,7 +1132,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 out.push(')');\n             }\n \n-\n             LpExtend(ref lp_base, _, LpInterior(_, InteriorField(fname))) => {\n                 self.append_autoderefd_loan_path_to_string(&lp_base, out);\n                 match fname {"}, {"sha": "b13291b8419d4dda014d1b3fe8b81870f4ffb316", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -21,7 +21,8 @@ use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::dataflow::KillFrom;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::expr_use_visitor::MutateMode;\n-use rustc::ty::TyCtxt;\n+use rustc::middle::mem_categorization as mc;\n+use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::{FnvHashMap, NodeSet};\n \n use std::cell::RefCell;\n@@ -364,6 +365,32 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                     lp: Rc<LoanPath<'tcx>>,\n                     id: ast::NodeId,\n                     kind: MoveKind) {\n+        // Moving one union field automatically moves all its fields.\n+        if let LpExtend(ref base_lp, mutbl, LpInterior(opt_variant_id, interior)) = lp.kind {\n+            if let ty::TyUnion(ref adt_def, _) = base_lp.ty.sty {\n+                for field in &adt_def.struct_variant().fields {\n+                    let field = InteriorKind::InteriorField(mc::NamedField(field.name));\n+                    let field_ty = if field == interior {\n+                        lp.ty\n+                    } else {\n+                        tcx.types.err // Doesn't matter\n+                    };\n+                    let sibling_lp_kind = LpExtend(base_lp.clone(), mutbl,\n+                                                   LpInterior(opt_variant_id, field));\n+                    let sibling_lp = Rc::new(LoanPath::new(sibling_lp_kind, field_ty));\n+                    self.add_move_helper(tcx, sibling_lp, id, kind);\n+                }\n+                return;\n+            }\n+        }\n+\n+        self.add_move_helper(tcx, lp.clone(), id, kind);\n+    }\n+\n+    fn add_move_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                       lp: Rc<LoanPath<'tcx>>,\n+                       id: ast::NodeId,\n+                       kind: MoveKind) {\n         debug!(\"add_move(lp={:?}, id={}, kind={:?})\",\n                lp,\n                id,\n@@ -393,6 +420,34 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                           span: Span,\n                           assignee_id: ast::NodeId,\n                           mode: euv::MutateMode) {\n+        // Assigning to one union field automatically assigns to all its fields.\n+        if let LpExtend(ref base_lp, mutbl, LpInterior(opt_variant_id, interior)) = lp.kind {\n+            if let ty::TyUnion(ref adt_def, _) = base_lp.ty.sty {\n+                for field in &adt_def.struct_variant().fields {\n+                    let field = InteriorKind::InteriorField(mc::NamedField(field.name));\n+                    let field_ty = if field == interior {\n+                        lp.ty\n+                    } else {\n+                        tcx.types.err // Doesn't matter\n+                    };\n+                    let sibling_lp_kind = LpExtend(base_lp.clone(), mutbl,\n+                                                   LpInterior(opt_variant_id, field));\n+                    let sibling_lp = Rc::new(LoanPath::new(sibling_lp_kind, field_ty));\n+                    self.add_assignment_helper(tcx, sibling_lp, assign_id, span, assignee_id, mode);\n+                }\n+                return;\n+            }\n+        }\n+\n+        self.add_assignment_helper(tcx, lp.clone(), assign_id, span, assignee_id, mode);\n+    }\n+\n+    pub fn add_assignment_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                 lp: Rc<LoanPath<'tcx>>,\n+                                 assign_id: ast::NodeId,\n+                                 span: Span,\n+                                 assignee_id: ast::NodeId,\n+                                 mode: euv::MutateMode) {\n         debug!(\"add_assignment(lp={:?}, assign_id={}, assignee_id={}\",\n                lp, assign_id, assignee_id);\n "}, {"sha": "19975d79b60be3fae35df9a0e02ac06179bffcc6", "filename": "src/test/compile-fail/union-borrow-nested.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Fcompile-fail%2Funion-borrow-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Fcompile-fail%2Funion-borrow-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-borrow-nested.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+#![feature(untagged_unions)]\n+\n+#[derive(Clone, Copy)]\n+struct S {\n+    a: u8,\n+    b: u16,\n+}\n+\n+union U {\n+    s: S,\n+    c: u32,\n+}\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self { *self }\n+}\n+impl Copy for U {}\n+\n+fn main() {\n+    unsafe {\n+        {\n+            let mut u = U { s: S { a: 0, b: 1 } };\n+            let ra = &mut u.s.a;\n+            let b = u.s.b; // OK\n+        }\n+        {\n+            let mut u = U { s: S { a: 0, b: 1 } };\n+            let ra = &mut u.s.a;\n+            let b = u.c; //~ ERROR cannot use `u.c` because it was mutably borrowed\n+        }\n+    }\n+}"}, {"sha": "e8989a3c2d4998b733199b580fe9c6a8e84b6b80", "filename": "src/test/compile-fail/union-borrow.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Fcompile-fail%2Funion-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Fcompile-fail%2Funion-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-borrow.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+#![feature(untagged_unions)]\n+\n+union U {\n+    a: u8,\n+    b: u64,\n+}\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self { *self }\n+}\n+impl Copy for U {}\n+\n+fn main() {\n+    unsafe {\n+        let mut u = U { b: 0 };\n+        // Imm borrow, same field\n+        {\n+            let ra = &u.a;\n+            let ra2 = &u.a; // OK\n+        }\n+        {\n+            let ra = &u.a;\n+            let a = u.a; // OK\n+        }\n+        {\n+            let ra = &u.a;\n+            let rma = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n+        }\n+        {\n+            let ra = &u.a;\n+            u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+        }\n+        // Imm borrow, other field\n+        {\n+            let ra = &u.a;\n+            let rb = &u.b; // OK\n+        }\n+        {\n+            let ra = &u.a;\n+            let b = u.b; // OK\n+        }\n+        {\n+            let ra = &u.a;\n+            let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n+        }\n+        {\n+            let ra = &u.a;\n+            u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+        }\n+        // Mut borrow, same field\n+        {\n+            let rma = &mut u.a;\n+            let ra = &u.a; //~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n+        }\n+        {\n+            let ra = &mut u.a;\n+            let a = u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n+        }\n+        {\n+            let rma = &mut u.a;\n+            let rma2 = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable more than once at a time\n+        }\n+        {\n+            let rma = &mut u.a;\n+            u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+        }\n+        // Mut borrow, other field\n+        {\n+            let rma = &mut u.a;\n+            let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n+        }\n+        {\n+            let ra = &mut u.a;\n+            let b = u.b; //~ ERROR cannot use `u.b` because it was mutably borrowed\n+        }\n+        {\n+            let rma = &mut u.a;\n+            let rmb2 = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n+        }\n+        {\n+            let rma = &mut u.a;\n+            u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+        }\n+    }\n+}"}, {"sha": "d4d7bc6b0f7c5c5a038d2a14635b80a446cdcb24", "filename": "src/test/compile-fail/union-move-assign.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Fcompile-fail%2Funion-move-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Fcompile-fail%2Funion-move-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-move-assign.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+// Non-copy\n+struct A;\n+struct B;\n+\n+union U {\n+    a: A,\n+    b: B,\n+}\n+\n+fn main() {\n+    unsafe {\n+        {\n+            let mut u = U { a: A };\n+            let a = u.a;\n+            let a = u.a; //~ ERROR use of moved value: `u.a`\n+        }\n+        {\n+            let mut u = U { a: A };\n+            let a = u.a;\n+            u.a = A;\n+            let a = u.a; // OK\n+        }\n+        {\n+            let mut u = U { a: A };\n+            let a = u.a;\n+            u.b = B;\n+            let a = u.a; // OK\n+        }\n+    }\n+}"}, {"sha": "5320244cf43b3576a286f28a22a42606012f176e", "filename": "src/test/compile-fail/union-move.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Fcompile-fail%2Funion-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Fcompile-fail%2Funion-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-move.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -0,0 +1,96 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+#[derive(Clone, Copy)]\n+struct Copy;\n+struct NonCopy;\n+\n+union Unn {\n+    n1: NonCopy,\n+    n2: NonCopy,\n+}\n+union Ucc {\n+    c1: Copy,\n+    c2: Copy,\n+}\n+union Ucn {\n+    c: Copy,\n+    n: NonCopy,\n+}\n+\n+fn main() {\n+    unsafe {\n+        // 2 NonCopy\n+        {\n+            let mut u = Unn { n1: NonCopy };\n+            let a = u.n1;\n+            let a = u.n1; //~ ERROR use of moved value: `u.n1`\n+        }\n+        {\n+            let mut u = Unn { n1: NonCopy };\n+            let a = u.n1;\n+            let a = u; //~ ERROR use of partially moved value: `u`\n+        }\n+        {\n+            let mut u = Unn { n1: NonCopy };\n+            let a = u.n1;\n+            let a = u.n2; //~ ERROR use of moved value: `u.n2`\n+        }\n+        // 2 Copy\n+        {\n+            let mut u = Ucc { c1: Copy };\n+            let a = u.c1;\n+            let a = u.c1; // OK\n+        }\n+        {\n+            let mut u = Ucc { c1: Copy };\n+            let a = u.c1;\n+            let a = u; // OK\n+        }\n+        {\n+            let mut u = Ucc { c1: Copy };\n+            let a = u.c1;\n+            let a = u.c2; // OK\n+        }\n+        // 1 Copy, 1 NonCopy\n+        {\n+            let mut u = Ucn { c: Copy };\n+            let a = u.c;\n+            let a = u.c; // OK\n+        }\n+        {\n+            let mut u = Ucn { c: Copy };\n+            let a = u.n;\n+            let a = u.n; //~ ERROR use of moved value: `u.n`\n+        }\n+        {\n+            let mut u = Ucn { c: Copy };\n+            let a = u.n;\n+            let a = u.c; //~ ERROR use of moved value: `u.c`\n+        }\n+        {\n+            let mut u = Ucn { c: Copy };\n+            let a = u.c;\n+            let a = u.n; // OK\n+        }\n+        {\n+            let mut u = Ucn { c: Copy };\n+            let a = u.c;\n+            let a = u; // OK\n+        }\n+        {\n+            let mut u = Ucn { c: Copy };\n+            let a = u.n;\n+            let a = u; //~ ERROR use of partially moved value: `u`\n+        }\n+    }\n+}"}, {"sha": "36e062f8464e9962a0024a5555ac0b468f2496ec", "filename": "src/test/compile-fail/union-uninitialized.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Fcompile-fail%2Funion-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Fcompile-fail%2Funion-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-uninitialized.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+struct S {\n+    a: u8,\n+}\n+\n+union U {\n+    a: u8,\n+}\n+\n+fn main() {\n+    unsafe {\n+        let mut s: S;\n+        let mut u: U;\n+        s.a = 0;\n+        u.a = 0;\n+        let sa = s.a; //~ ERROR use of possibly uninitialized variable: `s.a`\n+        let ua = u.a; //~ ERROR use of possibly uninitialized variable: `u.a`\n+    }\n+}"}, {"sha": "1651aa901b966be61c1c2166fd7ebf243d66b259", "filename": "src/test/run-pass/union-basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Frun-pass%2Funion-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Frun-pass%2Funion-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-basic.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -52,8 +52,8 @@ fn main() {\n     unsafe {\n         assert_eq!(w.a, 0);\n         assert_eq!(w.b, 0);\n-        // w.a = 1;\n-        assert_eq!(w.a, 0);\n-        assert_eq!(w.b, 0);\n+        w.a = 1;\n+        assert_eq!(w.a, 1);\n+        assert_eq!(w.b, 1);\n     }\n }"}, {"sha": "0da68e43f32a1e91fb99ed4eddd7b63cc2d0bbcd", "filename": "src/test/run-pass/union-drop-assign.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Frun-pass%2Funion-drop-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Frun-pass%2Funion-drop-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-drop-assign.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Drop works for union itself.\n+\n+#![feature(untagged_unions)]\n+\n+struct S;\n+\n+union U {\n+    a: S\n+}\n+\n+impl Drop for S {\n+    fn drop(&mut self) {\n+        unsafe { CHECK += 10; }\n+    }\n+}\n+\n+impl Drop for U {\n+    fn drop(&mut self) {\n+        unsafe { CHECK += 1; }\n+    }\n+}\n+\n+static mut CHECK: u8 = 0;\n+\n+fn main() {\n+    unsafe {\n+        let mut u = U { a: S };\n+        assert_eq!(CHECK, 0);\n+        u = U { a: S };\n+        assert_eq!(CHECK, 1); // union itself is assigned, union is dropped, field is not dropped\n+        u.a = S;\n+        assert_eq!(CHECK, 11); // union field is assigned, field is dropped\n+    }\n+}"}, {"sha": "4eb66268ab8eab8fc55b20e60c6b7ed09a2db099", "filename": "src/test/run-pass/union-transmute.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Frun-pass%2Funion-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f975e969b46278669940aa60e5aea50ba588531/src%2Ftest%2Frun-pass%2Funion-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-transmute.rs?ref=5f975e969b46278669940aa60e5aea50ba588531", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_float)]\n+#![feature(float_extras)]\n+#![feature(untagged_unions)]\n+\n+extern crate core;\n+use core::num::Float;\n+\n+union U {\n+    a: (u8, u8),\n+    b: u16,\n+}\n+\n+union W {\n+    a: u32,\n+    b: f32,\n+}\n+\n+fn main() {\n+    unsafe {\n+        let mut u = U { a: (1, 1) };\n+        assert_eq!(u.b, (1 << 8) + 1);\n+        u.b = (2 << 8) + 2;\n+        assert_eq!(u.a, (2, 2));\n+\n+        let mut w = W { a: 0b0_11111111_00000000000000000000000 };\n+        assert_eq!(w.b, f32::infinity());\n+        w.b = f32::neg_infinity();\n+        assert_eq!(w.a, 0b1_11111111_00000000000000000000000);\n+    }\n+}"}]}