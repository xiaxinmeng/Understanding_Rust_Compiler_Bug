{"sha": "f7f4792f4f4492e62a9439bdf214acee797e0341", "node_id": "C_kwDOAAsO6NoAKGY3ZjQ3OTJmNGY0NDkyZTYyYTk0MzliZGYyMTRhY2VlNzk3ZTAzNDE", "commit": {"author": {"name": "Stanislav", "email": "enomado@users.noreply.github.com", "date": "2022-09-09T17:58:06Z"}, "committer": {"name": "Stanislav", "email": "enomado@users.noreply.github.com", "date": "2022-09-09T17:58:06Z"}, "message": "fixes", "tree": {"sha": "90d0bf09137801f6b0d3e0f3f6d0569020dcb173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90d0bf09137801f6b0d3e0f3f6d0569020dcb173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7f4792f4f4492e62a9439bdf214acee797e0341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f4792f4f4492e62a9439bdf214acee797e0341", "html_url": "https://github.com/rust-lang/rust/commit/f7f4792f4f4492e62a9439bdf214acee797e0341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7f4792f4f4492e62a9439bdf214acee797e0341/comments", "author": {"login": "enomado", "id": 707007, "node_id": "MDQ6VXNlcjcwNzAwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/707007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enomado", "html_url": "https://github.com/enomado", "followers_url": "https://api.github.com/users/enomado/followers", "following_url": "https://api.github.com/users/enomado/following{/other_user}", "gists_url": "https://api.github.com/users/enomado/gists{/gist_id}", "starred_url": "https://api.github.com/users/enomado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enomado/subscriptions", "organizations_url": "https://api.github.com/users/enomado/orgs", "repos_url": "https://api.github.com/users/enomado/repos", "events_url": "https://api.github.com/users/enomado/events{/privacy}", "received_events_url": "https://api.github.com/users/enomado/received_events", "type": "User", "site_admin": false}, "committer": {"login": "enomado", "id": 707007, "node_id": "MDQ6VXNlcjcwNzAwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/707007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/enomado", "html_url": "https://github.com/enomado", "followers_url": "https://api.github.com/users/enomado/followers", "following_url": "https://api.github.com/users/enomado/following{/other_user}", "gists_url": "https://api.github.com/users/enomado/gists{/gist_id}", "starred_url": "https://api.github.com/users/enomado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/enomado/subscriptions", "organizations_url": "https://api.github.com/users/enomado/orgs", "repos_url": "https://api.github.com/users/enomado/repos", "events_url": "https://api.github.com/users/enomado/events{/privacy}", "received_events_url": "https://api.github.com/users/enomado/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "773f9b38e39033576201a7901bb4b321871e8cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/773f9b38e39033576201a7901bb4b321871e8cb5", "html_url": "https://github.com/rust-lang/rust/commit/773f9b38e39033576201a7901bb4b321871e8cb5"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "5b410c454d9d5495275b87e960adf3403c00be42", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f4792f4f4492e62a9439bdf214acee797e0341/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f4792f4f4492e62a9439bdf214acee797e0341/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=f7f4792f4f4492e62a9439bdf214acee797e0341", "patch": "@@ -118,8 +118,6 @@ pub(crate) fn find_all_refs(\n }\n \n fn filter_import_references(usages: &mut UsageSearchResult) {\n-    // todo use this https://github.com/rust-lang/rust-analyzer/blob/master/crates/rust-analyzer/src/config.rs#L432\n-\n     for (_file_id, refs) in &mut usages.references {\n         refs.retain(|it| match it.name.as_name_ref() {\n             Some(name_ref) => {"}, {"sha": "835eeb144a6ab0331438f26cf161a19b95e5ab86", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7f4792f4f4492e62a9439bdf214acee797e0341/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f4792f4f4492e62a9439bdf214acee797e0341/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f7f4792f4f4492e62a9439bdf214acee797e0341", "patch": "@@ -219,10 +219,6 @@ config_data! {\n         files_excludeDirs: Vec<PathBuf> = \"[]\",\n         /// Controls file watching implementation.\n         files_watcher: FilesWatcherDef = \"\\\"client\\\"\",\n-\n-        /// Exclude imports from find-all-references.\n-        findAllRefs_excludeImports: bool = \"false\",\n-\n         /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n         /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n@@ -362,6 +358,9 @@ config_data! {\n         /// this is rust-analyzer itself, but we override this in tests).\n         procMacro_server: Option<PathBuf>          = \"null\",\n \n+        /// Exclude imports from find-all-references.\n+        references_excludeImports: bool = \"false\",\n+\n         /// Command to be executed instead of 'cargo' for runnables.\n         runnables_command: Option<String> = \"null\",\n         /// Additional arguments to be passed to cargo for runnables such as\n@@ -1151,7 +1150,7 @@ impl Config {\n     }\n \n     pub fn find_all_refs_exclude_imports(&self) -> bool {\n-        self.data.findAllRefs_excludeImports\n+        self.data.references_excludeImports\n     }\n \n     pub fn snippet_cap(&self) -> bool {"}, {"sha": "0e301e5d67d481f26449fb6b0a9bedc77faecca7", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7f4792f4f4492e62a9439bdf214acee797e0341/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/f7f4792f4f4492e62a9439bdf214acee797e0341/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=f7f4792f4f4492e62a9439bdf214acee797e0341", "patch": "@@ -262,11 +262,6 @@ also need to add the folders to Code's `files.watcherExclude`.\n --\n Controls file watching implementation.\n --\n-[[rust-analyzer.findAllRefs.excludeImports]]rust-analyzer.findAllRefs.excludeImports (default: `false`)::\n-+\n---\n-Exclude imports from find-all-references.\n---\n [[rust-analyzer.highlightRelated.breakPoints.enable]]rust-analyzer.highlightRelated.breakPoints.enable (default: `true`)::\n +\n --\n@@ -551,6 +546,11 @@ This config takes a map of crate names with the exported proc-macro names to ign\n Internal config, path to proc-macro server executable (typically,\n this is rust-analyzer itself, but we override this in tests).\n --\n+[[rust-analyzer.references.excludeImports]]rust-analyzer.references.excludeImports (default: `false`)::\n++\n+--\n+Exclude imports from find-all-references.\n+--\n [[rust-analyzer.runnables.command]]rust-analyzer.runnables.command (default: `null`)::\n +\n --"}, {"sha": "9d39c7c296bb1a14e7e06fad6e51b3f8f89b92b3", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7f4792f4f4492e62a9439bdf214acee797e0341/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/f7f4792f4f4492e62a9439bdf214acee797e0341/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=f7f4792f4f4492e62a9439bdf214acee797e0341", "patch": "@@ -706,11 +706,6 @@\n                         \"Use server-side file watching\"\n                     ]\n                 },\n-                \"rust-analyzer.findAllRefs.excludeImports\": {\n-                    \"markdownDescription\": \"Exclude imports from find-all-references.\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n-                },\n                 \"rust-analyzer.highlightRelated.breakPoints.enable\": {\n                     \"markdownDescription\": \"Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\",\n                     \"default\": true,\n@@ -1041,6 +1036,11 @@\n                         \"string\"\n                     ]\n                 },\n+                \"rust-analyzer.references.excludeImports\": {\n+                    \"markdownDescription\": \"Exclude imports from find-all-references.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.runnables.command\": {\n                     \"markdownDescription\": \"Command to be executed instead of 'cargo' for runnables.\",\n                     \"default\": null,"}]}