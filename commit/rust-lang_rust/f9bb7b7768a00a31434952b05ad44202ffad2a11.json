{"sha": "f9bb7b7768a00a31434952b05ad44202ffad2a11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YmI3Yjc3NjhhMDBhMzE0MzQ5NTJiMDVhZDQ0MjAyZmZhZDJhMTE=", "commit": {"author": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2013-03-19T23:15:57Z"}, "committer": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2013-03-21T20:33:29Z"}, "message": "Tutorial: make struct section more coherent\n\nIn struct section of tutorial, make everything more coherent and\nclear by always using \"struct Point\". Also, do not prematurely\nintroduce pointers and arrays. Fixes #5240\n\nSigned-off-by: Luca Bruno <lucab@debian.org>", "tree": {"sha": "4d13b25550a46582149356832fec177c253bd508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d13b25550a46582149356832fec177c253bd508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9bb7b7768a00a31434952b05ad44202ffad2a11", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bb7b7768a00a31434952b05ad44202ffad2a11", "html_url": "https://github.com/rust-lang/rust/commit/f9bb7b7768a00a31434952b05ad44202ffad2a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9bb7b7768a00a31434952b05ad44202ffad2a11/comments", "author": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae76b5babc48ff8d9ef76cd03da4836d3c74c64", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae76b5babc48ff8d9ef76cd03da4836d3c74c64", "html_url": "https://github.com/rust-lang/rust/commit/5ae76b5babc48ff8d9ef76cd03da4836d3c74c64"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "71d31407d24f52cf3715cec81195f5c9a224e9d8", "filename": "doc/tutorial.md", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f9bb7b7768a00a31434952b05ad44202ffad2a11/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9bb7b7768a00a31434952b05ad44202ffad2a11/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=f9bb7b7768a00a31434952b05ad44202ffad2a11", "patch": "@@ -579,21 +579,30 @@ Structs are quite similar to C structs and are even laid out the same way in\n memory (so you can read from a Rust struct in C, and vice-versa). Use the dot\n operator to access struct fields, as in `mypoint.x`.\n \n-Inherited mutability means that any field of a struct may be mutable, if the\n-struct is in a mutable slot (or a field of a struct in a mutable slot, and\n-so forth).\n-\n ~~~~\n-struct Stack {\n-    content: ~[int],\n-    head: uint\n+struct Point {\n+    x: float,\n+    y: float\n }\n ~~~~\n \n-With a value (say, `mystack`) of such a type in a mutable location, you can do\n-`mystack.head += 1`. But in an immutable location, such an assignment to a\n+Inherited mutability means that any field of a struct may be mutable, if the\n+struct is in a mutable slot (or a field of a struct in a mutable slot, and\n+so forth).\n+\n+With a value (say, `mypoint`) of such a type in a mutable location, you can do\n+`mypoint.y += 1.0`. But in an immutable location, such an assignment to a\n struct without inherited mutability would result in a type error.\n \n+~~~~ {.xfail-test}\n+# struct Point { x: float, y: float }\n+let mut mypoint = Point { x: 1.0, y: 1.0 };\n+let origin = Point { x: 0.0, y: 0.0 };\n+\n+mypoint.y += 1.0; // mypoint is mutable, and its fields as well\n+origin.y += 1.0; // ERROR: assigning to immutable field\n+~~~~\n+\n `match` patterns destructure structs. The basic syntax is\n `Name { fieldname: pattern, ... }`:\n "}]}