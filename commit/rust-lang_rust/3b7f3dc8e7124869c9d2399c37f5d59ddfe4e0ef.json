{"sha": "3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiN2YzZGM4ZTcxMjQ4NjljOWQyMzk5YzM3ZjVkNTlkZGZlNGUwZWY=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-07-31T22:58:26Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-08-03T20:11:58Z"}, "message": "WIP: Find binding or assignment within outer loop", "tree": {"sha": "7f33bb872741f9c909f2cfefada0bc07ec27d78a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f33bb872741f9c909f2cfefada0bc07ec27d78a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef", "html_url": "https://github.com/rust-lang/rust/commit/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75faed13b46d6b79a3116cd6dbd454d5bc3fef05", "url": "https://api.github.com/repos/rust-lang/rust/commits/75faed13b46d6b79a3116cd6dbd454d5bc3fef05", "html_url": "https://github.com/rust-lang/rust/commit/75faed13b46d6b79a3116cd6dbd454d5bc3fef05"}], "stats": {"total": 166, "additions": 140, "deletions": 26}, "files": [{"sha": "18759fb0a910b230aab56d07d2ad4fb7249f0f74", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef", "patch": "@@ -253,7 +253,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box shadow::Pass);\n     reg.register_late_lint_pass(box types::LetPass);\n     reg.register_late_lint_pass(box types::UnitCmp);\n-    reg.register_late_lint_pass(box loops::Pass::default());\n+    reg.register_late_lint_pass(box loops::Pass);\n     reg.register_late_lint_pass(box lifetimes::LifetimePass);\n     reg.register_late_lint_pass(box entry::HashMapLint);\n     reg.register_late_lint_pass(box ranges::StepByZero);"}, {"sha": "b4501315cd35c834c2b8dac6038bf8fae77d89d6", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 124, "deletions": 23, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef", "patch": "@@ -304,10 +304,8 @@ declare_lint! {\n     \"any loop that will always `break` or `return`\"\n }\n \n-#[derive(Copy, Clone, Default)]\n-pub struct Pass {\n-    loop_count: usize,\n-}\n+#[derive(Copy, Clone)]\n+pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n@@ -329,15 +327,6 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_expr_post(&mut self, _: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        match expr.node {\n-            ExprWhile(..) | ExprLoop(..) => {\n-                self.loop_count -= 1;\n-            },\n-            _ => (),\n-        }\n-    }\n-\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some((pat, arg, body)) = higher::for_loop(expr) {\n             check_for_loop(cx, pat, arg, body, expr);\n@@ -347,7 +336,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         match expr.node {\n             ExprWhile(_, ref block, _) |\n             ExprLoop(ref block, _, _) => {\n-                self.loop_count += 1;\n                 if never_loop(block, &expr.id) {\n                     span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\");\n                 }\n@@ -410,10 +398,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     &ExprMethodCall(ref method_path, _, ref method_args)) = (pat, &match_expr.node) {\n                 let iter_expr = &method_args[0];\n                 let lhs_constructor = last_path_segment(qpath);\n-                if self.loop_count < 2 && method_path.name == \"next\" &&\n-                   match_trait_method(cx, match_expr, &paths::ITERATOR) &&\n+                if method_path.name == \"next\" && match_trait_method(cx, match_expr, &paths::ITERATOR) &&\n                    lhs_constructor.name == \"Some\" && !is_refutable(cx, &pat_args[0]) &&\n-                   !is_iterator_used_after_while_let(cx, iter_expr) {\n+                   !is_iterator_used_after_while_let(cx, iter_expr) && !is_nested(cx, expr, &method_args[0]) {\n                     let iterator = snippet(cx, method_args[0].span, \"_\");\n                     let loop_var = snippet(cx, pat_args[0].span, \"_\");\n                     span_lint_and_sugg(cx,\n@@ -939,22 +926,29 @@ fn pat_is_wild<'tcx>(pat: &'tcx PatKind, body: &'tcx Expr) -> bool {\n     }\n }\n \n+fn match_var(expr: &Expr, var: Name) -> bool {\n+    if let ExprPath(QPath::Resolved(None, ref path)) = expr.node {\n+        if path.segments.len() == 1 && path.segments[0].name == var {\n+            return true\n+        }\n+    }\n+    false\n+}\n+\n struct UsedVisitor {\n     var: ast::Name, // var to look for\n     used: bool, // has the var been used otherwise?\n }\n \n impl<'tcx> Visitor<'tcx> for UsedVisitor {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n-        if let ExprPath(QPath::Resolved(None, ref path)) = expr.node {\n-            if path.segments.len() == 1 && path.segments[0].name == self.var {\n-                self.used = true;\n-                return;\n-            }\n+        if match_var(expr, self.var) {\n+            self.used = true;\n+            return;\n         }\n-\n         walk_expr(self, expr);\n     }\n+\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None\n     }\n@@ -1328,3 +1322,110 @@ fn is_conditional(expr: &Expr) -> bool {\n         _ => false,\n     }\n }\n+\n+fn is_nested(cx: &LateContext, match_expr: &Expr, iter_expr: &Expr) -> bool {\n+    if_let_chain! {[\n+        let Some(loop_block) = get_enclosing_block(cx, match_expr.id),\n+        let Some(map::Node::NodeExpr(loop_expr)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(loop_block.id)),\n+        let Some(scope) = get_enclosing_block(cx, loop_expr.id)\n+    ], {\n+        return is_loop_nested(cx, scope, loop_expr.id, iter_expr)\n+    }}\n+    false\n+}\n+\n+fn is_loop_nested(cx: &LateContext, scope: &Block, expr_id: NodeId, iter_expr: &Expr) -> bool {\n+    let mut b = scope;\n+    let mut e = expr_id;\n+    if let Some(name) = path_name(iter_expr) {\n+        loop {\n+            if b.stmts.iter().take_while(|stmt| !is_expr_stmt(stmt, e)).any(|stmt|\n+                    is_binding_or_assignment(stmt, name)) {\n+                return false;\n+            }\n+            if let Some(map::Node::NodeExpr(outer)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(scope.id)) {\n+                if let ExprLoop(..) = outer.node {\n+                    return true;\n+                }\n+                e = outer.id;\n+                if let Some(eb) = get_enclosing_block(cx, e) {\n+                    b = eb;\n+                } else {\n+                    return false;\n+                }\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+    true\n+}\n+\n+fn path_name(e: &Expr) -> Option<Name> {\n+    if let ExprPath(QPath::Resolved(_, ref path)) = e.node {\n+        let segments = &path.segments;\n+        if segments.len() == 1 {\n+            return Some(segments[0].name);\n+        }\n+    };\n+    None\n+}\n+\n+fn is_binding_or_assignment(stmt: &Stmt, name: Name) -> bool {\n+    match stmt.node {\n+        StmtExpr(ref e, _) | StmtSemi(ref e, _) => contains_assignment(e, name),\n+        StmtDecl(ref decl, _) => is_binding(decl, name)\n+    }\n+}\n+\n+struct AssignmentVisitor {\n+    var: ast::Name, // var to look for\n+    assigned: bool, // has the var been assigned?\n+}\n+\n+impl<'tcx> Visitor<'tcx> for AssignmentVisitor {\n+    fn visit_expr(&mut self, expr: &'tcx Expr) {\n+        match expr.node {\n+            ExprAssign(ref path, _) |\n+            ExprAssignOp(_, ref path, _) => if match_var(path, self.var) {\n+                self.assigned = true;\n+            }\n+            ExprLoop(..) |\n+            ExprIf(..) |\n+            ExprWhile(..) => (),\n+            _ => walk_expr(self, expr)\n+        }\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+fn contains_assignment(e: &Expr, name: Name) -> bool {\n+    let mut av = AssignmentVisitor { var: name, assigned: false };\n+    walk_expr(&mut av, e);\n+    av.assigned\n+}\n+\n+fn is_binding(decl: &Decl, name: Name) -> bool {\n+    match decl.node {\n+        DeclLocal(ref local) => {\n+            !local.pat.walk(&mut |p: &Pat| {\n+                if let PatKind::Binding(_, _, span_name, _) = p.node {\n+                    name == span_name.node\n+                } else {\n+                    false\n+                }\n+            })\n+        },\n+        _ => false\n+    }\n+}\n+\n+fn is_expr_stmt(stmt: &Stmt, expr_id: NodeId) -> bool {\n+    match stmt.node {\n+        StmtExpr(ref e, _) | StmtSemi(ref e, _) => e.id == expr_id,\n+        _ => false\n+    }\n+}"}, {"sha": "848735826098bc37e6632dfea66f6d1e9ddcdd6e", "filename": "tests/ui/while_loop.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef/tests%2Fui%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef/tests%2Fui%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.rs?ref=3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef", "patch": "@@ -174,7 +174,13 @@ fn refutable() {\n \n     let mut y = a.iter();\n     for _ in 0..2 {\n-        while let Some(v) = y.next() {\n+        while let Some(v) = y.next() { // y is reused, don't lint\n+        }\n+    }\n+\n+    loop {\n+        let mut y = a.iter();\n+        while let Some(v) = y.next() { // use a for loop here\n         }\n     }\n }"}, {"sha": "c31fff3b19ecbdb391afa218ab27e3ddefddcbca", "filename": "tests/ui/while_loop.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef/tests%2Fui%2Fwhile_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef/tests%2Fui%2Fwhile_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.stderr?ref=3b7f3dc8e7124869c9d2399c37f5d59ddfe4e0ef", "patch": "@@ -103,5 +103,12 @@ error: empty `loop {}` detected. You may want to either use `panic!()` or add `s\n     |\n     = note: `-D empty-loop` implied by `-D warnings`\n \n-error: aborting due to 10 previous errors\n+error: this loop could be written as a `for` loop\n+   --> while_loop.rs:177:9\n+    |\n+177 | /         while let Some(v) = y.next() {\n+178 | |         }\n+    | |_________^ help: try: `for v in y { .. }`\n+\n+error: aborting due to 11 previous errors\n "}]}