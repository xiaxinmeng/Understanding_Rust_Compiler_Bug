{"sha": "b068dc7392ed7b78dc6c9d0baafbb93b48073098", "node_id": "C_kwDOAAsO6NoAKGIwNjhkYzczOTJlZDdiNzhkYzZjOWQwYmFhZmJiOTNiNDgwNzMwOTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-21T16:42:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-21T16:42:11Z"}, "message": "Rollup merge of #99558 - fee1-dead-contrib:remap_constness_fix, r=oli-obk\n\nFix `remap_constness`\n\n`~const Drop` was renamed to `~const Destruct` and this special case should\nbe removed", "tree": {"sha": "93333053a7f13daaf4f5b673d54d3b834575b937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93333053a7f13daaf4f5b673d54d3b834575b937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b068dc7392ed7b78dc6c9d0baafbb93b48073098", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi2YHjCRBK7hj4Ov3rIwAAoIwIAD9uFc7vdFVXmPbaUUE3t9tP\ndNvMu7cRZ5kiofkfk5a/A1YhYoEu6Btqg/mXAVdWOSFtNM6519gKpA54b0IFUqRS\nAT73H1tk+d/oIEhBO/ZRZtIzQKQcgj7IKlusJeCEbijKzo9J/oGF6fKnPFvAhr8r\nhKudYTnXE+65614tiClOldEu5sB6AcbKIPinVQjmzHkB/pSv9yBOAqc7MfwnWN4a\nN6ARieml+V5BwPYH146atWw71t7QwvFyKVZJ7Qt050Z23ZYpkSZN65YgPc+bjz1J\n02rQTUr8fkvU/slQKsm0bAwSwJif1l6IxdQDYXewCRm0BCldw0XZKlbw0pByUnY=\n=z90w\n-----END PGP SIGNATURE-----\n", "payload": "tree 93333053a7f13daaf4f5b673d54d3b834575b937\nparent 14c385d3d69fcef380bc0d629c040eb63ddc15a9\nparent b7de175ffe85dd6873ac16d3315a6dceadf68c40\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658421731 +0200\ncommitter GitHub <noreply@github.com> 1658421731 +0200\n\nRollup merge of #99558 - fee1-dead-contrib:remap_constness_fix, r=oli-obk\n\nFix `remap_constness`\n\n`~const Drop` was renamed to `~const Destruct` and this special case should\nbe removed\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b068dc7392ed7b78dc6c9d0baafbb93b48073098", "html_url": "https://github.com/rust-lang/rust/commit/b068dc7392ed7b78dc6c9d0baafbb93b48073098", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b068dc7392ed7b78dc6c9d0baafbb93b48073098/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c385d3d69fcef380bc0d629c040eb63ddc15a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c385d3d69fcef380bc0d629c040eb63ddc15a9", "html_url": "https://github.com/rust-lang/rust/commit/14c385d3d69fcef380bc0d629c040eb63ddc15a9"}, {"sha": "b7de175ffe85dd6873ac16d3315a6dceadf68c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7de175ffe85dd6873ac16d3315a6dceadf68c40", "html_url": "https://github.com/rust-lang/rust/commit/b7de175ffe85dd6873ac16d3315a6dceadf68c40"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "4f39ec31a83807dc46c1d97eedf75ee75c3ea2f0", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b068dc7392ed7b78dc6c9d0baafbb93b48073098/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b068dc7392ed7b78dc6c9d0baafbb93b48073098/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b068dc7392ed7b78dc6c9d0baafbb93b48073098", "patch": "@@ -790,22 +790,15 @@ pub struct TraitPredicate<'tcx> {\n pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;\n \n impl<'tcx> TraitPredicate<'tcx> {\n-    pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {\n-        if std::intrinsics::unlikely(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {\n-            // remap without changing constness of this predicate.\n-            // this is because `T: ~const Drop` has a different meaning to `T: Drop`\n-            // FIXME(fee1-dead): remove this logic after beta bump\n-            param_env.remap_constness_with(self.constness)\n-        } else {\n-            *param_env = param_env.with_constness(self.constness.and(param_env.constness()))\n-        }\n+    pub fn remap_constness(&mut self, param_env: &mut ParamEnv<'tcx>) {\n+        *param_env = param_env.with_constness(self.constness.and(param_env.constness()))\n     }\n \n     /// Remap the constness of this predicate before emitting it for diagnostics.\n     pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {\n         // this is different to `remap_constness` that callees want to print this predicate\n         // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the\n-        // param_env is not const because we it is always satisfied in non-const contexts.\n+        // param_env is not const because it is always satisfied in non-const contexts.\n         if let hir::Constness::NotConst = param_env.constness() {\n             self.constness = ty::BoundConstness::NotConst;\n         }"}, {"sha": "17f34012d1dd3e2a2a2f23ad25b3ff4f09b6c8d5", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b068dc7392ed7b78dc6c9d0baafbb93b48073098/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b068dc7392ed7b78dc6c9d0baafbb93b48073098/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=b068dc7392ed7b78dc6c9d0baafbb93b48073098", "patch": "@@ -789,7 +789,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let mut param_env = obligation.param_env;\n \n         fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {\n-            pred.remap_constness(self.tcx(), &mut param_env);\n+            pred.remap_constness(&mut param_env);\n             pred\n         });\n \n@@ -1321,7 +1321,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n         let tcx = self.tcx();\n         let mut pred = cache_fresh_trait_pred.skip_binder();\n-        pred.remap_constness(tcx, &mut param_env);\n+        pred.remap_constness(&mut param_env);\n \n         if self.can_use_global_caches(param_env) {\n             if let Some(res) = tcx.selection_cache.get(&(param_env, pred), tcx) {\n@@ -1375,7 +1375,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.tcx();\n         let mut pred = cache_fresh_trait_pred.skip_binder();\n \n-        pred.remap_constness(tcx, &mut param_env);\n+        pred.remap_constness(&mut param_env);\n \n         if !self.can_cache_candidate(&candidate) {\n             debug!(?pred, ?candidate, \"insert_candidate_cache - candidate is not cacheable\");"}]}