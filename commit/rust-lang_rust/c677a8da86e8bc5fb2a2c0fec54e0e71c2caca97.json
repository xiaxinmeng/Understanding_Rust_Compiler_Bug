{"sha": "c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97", "node_id": "C_kwDOAAsO6NoAKGM2NzdhOGRhODZlOGJjNWZiMmEyYzBmZWM1NGUwZTcxYzJjYWNhOTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-13T21:35:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-13T21:35:05Z"}, "message": "Rollup merge of #90853 - notriddle:notriddle/option-vec, r=GuillaumeGomez\n\nrustdoc: Use an empty Vec instead of Option<Vec>", "tree": {"sha": "e1778f97cdfe1fe7e71263747be63353c9874d9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1778f97cdfe1fe7e71263747be63353c9874d9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhkC+JCRBK7hj4Ov3rIwAAh9EIAKVSVQd5BQM5tjldpNN2mVlx\nsHEeVDA/rVasraI9hwZ8WUvLd9PCJURG1EIycHVyP7poz7/4fyNyaqKQieXfhtB8\ntgPZ1K8IevZ632dSHsZ06lfyA9dN+a4/7FGIrd6msMHRNSMzO4Vsq4gNO2hGPKPf\n6JqPoxsVe9LuT1NepYIsOYQhlSY7V9mJe9DYosvhSXnaDSaXrzlvM4nO25xpdU/G\nfWzPv+w0Y/2O6dg4bDqunnNEwq/L1OmerglKoOiY0o0Wi2xbunb2tp9Po+tqtA3O\nh9qsRN8rtqN3I0l1yS/2+jDUcpHR0fQbVvgI1bSzBGbXzSE9oXv5C8Mlm0XNULk=\n=hvZO\n-----END PGP SIGNATURE-----\n", "payload": "tree e1778f97cdfe1fe7e71263747be63353c9874d9b\nparent e273fab434f6accf42b3bbcd37e900db26b36cba\nparent 688ed0a019af8ac5097ac829ef24e4c69cd8d5c8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1636839305 +0100\ncommitter GitHub <noreply@github.com> 1636839305 +0100\n\nRollup merge of #90853 - notriddle:notriddle/option-vec, r=GuillaumeGomez\n\nrustdoc: Use an empty Vec instead of Option<Vec>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97", "html_url": "https://github.com/rust-lang/rust/commit/c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e273fab434f6accf42b3bbcd37e900db26b36cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e273fab434f6accf42b3bbcd37e900db26b36cba", "html_url": "https://github.com/rust-lang/rust/commit/e273fab434f6accf42b3bbcd37e900db26b36cba"}, {"sha": "688ed0a019af8ac5097ac829ef24e4c69cd8d5c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/688ed0a019af8ac5097ac829ef24e4c69cd8d5c8", "html_url": "https://github.com/rust-lang/rust/commit/688ed0a019af8ac5097ac829ef24e4c69cd8d5c8"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "6f90695067c78604ef6fb90729814f4fc24921b2", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97", "patch": "@@ -204,7 +204,6 @@ crate fn get_index_search_type<'tcx>(\n \n     inputs.retain(|a| a.ty.name.is_some());\n     output.retain(|a| a.ty.name.is_some());\n-    let output = if output.is_empty() { None } else { Some(output) };\n \n     Some(IndexItemFunctionType { inputs, output })\n }"}, {"sha": "00e8af22b483089670103cae960ccace8c4b8c3b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=c677a8da86e8bc5fb2a2c0fec54e0e71c2caca97", "patch": "@@ -117,7 +117,7 @@ crate struct RenderType {\n #[derive(Debug)]\n crate struct IndexItemFunctionType {\n     inputs: Vec<TypeWithKind>,\n-    output: Option<Vec<TypeWithKind>>,\n+    output: Vec<TypeWithKind>,\n }\n \n impl Serialize for IndexItemFunctionType {\n@@ -126,21 +126,16 @@ impl Serialize for IndexItemFunctionType {\n         S: Serializer,\n     {\n         // If we couldn't figure out a type, just write `null`.\n-        let mut iter = self.inputs.iter();\n-        if match self.output {\n-            Some(ref output) => iter.chain(output.iter()).any(|i| i.ty.name.is_none()),\n-            None => iter.any(|i| i.ty.name.is_none()),\n-        } {\n+        let has_missing = self.inputs.iter().chain(self.output.iter()).any(|i| i.ty.name.is_none());\n+        if has_missing {\n             serializer.serialize_none()\n         } else {\n             let mut seq = serializer.serialize_seq(None)?;\n             seq.serialize_element(&self.inputs)?;\n-            if let Some(output) = &self.output {\n-                if output.len() > 1 {\n-                    seq.serialize_element(&output)?;\n-                } else {\n-                    seq.serialize_element(&output[0])?;\n-                }\n+            match self.output.as_slice() {\n+                [] => {}\n+                [one] => seq.serialize_element(one)?,\n+                all => seq.serialize_element(all)?,\n             }\n             seq.end()\n         }"}]}