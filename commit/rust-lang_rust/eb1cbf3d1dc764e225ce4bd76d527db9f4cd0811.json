{"sha": "eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMWNiZjNkMWRjNzY0ZTIyNWNlNGJkNzZkNTI3ZGI5ZjRjZDA4MTE=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-18T01:38:05Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-10-01T20:21:52Z"}, "message": "Link plugins guide from elsewhere", "tree": {"sha": "9f26a7203b68688dc09597ca606e7dbcc99d540f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f26a7203b68688dc09597ca606e7dbcc99d540f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811", "html_url": "https://github.com/rust-lang/rust/commit/eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61bf75bb5ee11eadefc7611dad3341e374c55b1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/61bf75bb5ee11eadefc7611dad3341e374c55b1d", "html_url": "https://github.com/rust-lang/rust/commit/61bf75bb5ee11eadefc7611dad3341e374c55b1d"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "c2c374d3e1f158e5460b391fbf2b13676eb0dc82", "filename": "src/doc/guide-macros.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811/src%2Fdoc%2Fguide-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811/src%2Fdoc%2Fguide-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-macros.md?ref=eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811", "patch": "@@ -526,3 +526,10 @@ tricky. Invoking the `log_syntax!` macro can help elucidate intermediate\n states, invoking `trace_macros!(true)` will automatically print those\n intermediate states out, and passing the flag `--pretty expanded` as a\n command-line argument to the compiler will show the result of expansion.\n+\n+If Rust's macro system can't do what you need, you may want to write a\n+[compiler plugin](guide-plugin.html) instead. Compared to `macro_rules!`\n+macros, this is significantly more work, the interfaces are much less stable,\n+and the warnings about debugging apply ten-fold. In exchange you get the\n+flexibility of running arbitrary Rust code within the compiler. Syntax\n+extension plugins are sometimes called \"procedural macros\" for this reason."}, {"sha": "cf422a86a6e32cb27c51df1a5b63670dadfd5b92", "filename": "src/doc/reference.md", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=eb1cbf3d1dc764e225ce4bd76d527db9f4cd0811", "patch": "@@ -598,6 +598,14 @@ names, and invoked through a consistent syntax: `name!(...)`. Examples include:\n \n All of the above extensions are expressions with values.\n \n+Users of `rustc` can define new syntax extensions in two ways:\n+\n+* [Compiler plugins](guide-plugin.html#syntax-extensions) can include arbitrary\n+  Rust code that manipulates syntax trees at compile time.\n+\n+* [Macros](guide-macros.html) define new syntax in a higher-level,\n+  declarative way.\n+\n ## Macros\n \n ```{.ebnf .gram}\n@@ -615,7 +623,7 @@ transcriber : '(' transcriber * ')' | '[' transcriber * ']'\n \n User-defined syntax extensions are called \"macros\", and the `macro_rules`\n syntax extension defines them. Currently, user-defined macros can expand to\n-expressions, statements, or items.\n+expressions, statements, items, or patterns.\n \n (A `sep_token` is any token other than `*` and `+`. A `non_special_token` is\n any token other than a delimiter or `$`.)\n@@ -1912,7 +1920,7 @@ type int8_t = i8;\n - `main` - indicates that this function should be passed to the entry point,\n   rather than the function in the crate root named `main`.\n - `plugin_registrar` - mark this function as the registration point for\n-  compiler plugins, such as loadable syntax extensions.\n+  [compiler plugins][plugin], such as loadable syntax extensions.\n - `start` - indicates that this function should be used as the entry point,\n   overriding the \"start\" language item. See the \"start\" [language\n   item](#language-items) for more details.\n@@ -1972,8 +1980,8 @@ On `struct`s:\n   align fields.\n - `phase` - on `extern crate` statements, allows specifying which \"phase\" of\n   compilation the crate should be loaded for. Currently, there are two\n-  choices: `link` and `plugin`. `link` is the default. `plugin` will load the\n-  crate at compile-time and use any syntax extensions or lints that the crate\n+  choices: `link` and `plugin`. `link` is the default. `plugin` will [load the\n+  crate at compile-time][plugin] and use any syntax extensions or lints that the crate\n   defines. They can both be specified, `#[phase(link, plugin)]` to use a crate\n   both at runtime and compiletime.\n - `simd` - on certain tuple structs, derive the arithmetic operators, which\n@@ -2061,7 +2069,8 @@ For any lint check `C`:\n * `warn(C)` warns about violations of `C` but continues compilation.\n \n The lint checks supported by the compiler can be found via `rustc -W help`,\n-along with their default settings.\n+along with their default settings.  [Compiler\n+plugins](guide-plugin.html#lint-plugins) can provide additional lint checks.\n \n ```{.ignore}\n mod m1 {\n@@ -2490,7 +2499,7 @@ The currently implemented features of the reference compiler are:\n             considered unwholesome and in need of overhaul, and it is not clear\n             what they will look like moving forward.\n \n-* `plugin_registrar` - Indicates that a crate has compiler plugins that it\n+* `plugin_registrar` - Indicates that a crate has [compiler plugins][plugin] that it\n                        wants to load. As with `phase`, the implementation is\n                        in need of a overhaul, and it is not clear that plugins\n                        defined using this will continue to work.\n@@ -4304,3 +4313,4 @@ Additional specific influences can be seen from the following languages:\n * The block syntax of Ruby.\n \n [ffi]: guide-ffi.html\n+[plugin]: guide-plugin.html"}]}