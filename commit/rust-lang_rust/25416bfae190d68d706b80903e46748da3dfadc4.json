{"sha": "25416bfae190d68d706b80903e46748da3dfadc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NDE2YmZhZTE5MGQ2OGQ3MDZiODA5MDNlNDY3NDhkYTNkZmFkYzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-20T21:22:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-20T21:22:09Z"}, "message": "rustc: Introduce ABI versioning so we can change value representations without breaking the compiler", "tree": {"sha": "31766c7eef24b3edc76a3ddceafe3bc1861170e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31766c7eef24b3edc76a3ddceafe3bc1861170e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25416bfae190d68d706b80903e46748da3dfadc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25416bfae190d68d706b80903e46748da3dfadc4", "html_url": "https://github.com/rust-lang/rust/commit/25416bfae190d68d706b80903e46748da3dfadc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25416bfae190d68d706b80903e46748da3dfadc4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f650038ad3e53d92203153eef03294a95daba41", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f650038ad3e53d92203153eef03294a95daba41", "html_url": "https://github.com/rust-lang/rust/commit/2f650038ad3e53d92203153eef03294a95daba41"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "c460e716e71018df48bc036f496c781b164c118f", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25416bfae190d68d706b80903e46748da3dfadc4/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/25416bfae190d68d706b80903e46748da3dfadc4/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=25416bfae190d68d706b80903e46748da3dfadc4", "patch": "@@ -26,6 +26,7 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/rust_shape.cpp \\\n               rt/rust_obstack.cpp \\\n               rt/rust_gc.cpp \\\n+              rt/rust_abi.cpp \\\n               rt/memory_region.cpp \\\n               rt/test/rust_test_harness.cpp \\\n               rt/test/rust_test_runtime.cpp \\"}, {"sha": "0e1e05e8be8dc202e63fcaf95e19617ee9ae4491", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25416bfae190d68d706b80903e46748da3dfadc4/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25416bfae190d68d706b80903e46748da3dfadc4/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=25416bfae190d68d706b80903e46748da3dfadc4", "patch": "@@ -112,6 +112,8 @@ const ivec_heap_elt_elems: uint = 1u;\n \n const worst_case_glue_call_args: int = 7;\n \n+const abi_version: uint = 1u;\n+\n fn memcpy_glue_name() -> str { ret \"rust_memcpy_glue\"; }\n \n fn bzero_glue_name() -> str { ret \"rust_bzero_glue\"; }"}, {"sha": "6c10ee4f35736c7f22799fc560b19eab69d72bcd", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/25416bfae190d68d706b80903e46748da3dfadc4/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25416bfae190d68d706b80903e46748da3dfadc4/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=25416bfae190d68d706b80903e46748da3dfadc4", "patch": "@@ -84,15 +84,20 @@ fn eq_res_info(a: &res_info, b: &res_info) -> bool {\n     ret a.did.crate == b.did.crate && a.did.node == b.did.node && a.t == b.t;\n }\n \n-fn mk_global(ccx: &@crate_ctxt, name: &str, llval: ValueRef) -> ValueRef {\n+fn mk_global(ccx: &@crate_ctxt, name: &str, llval: ValueRef,\n+             internal: bool) -> ValueRef {\n     let llglobal =\n         lib::llvm::llvm::LLVMAddGlobal(ccx.llmod, val_ty(llval),\n                                        str::buf(name));\n     lib::llvm::llvm::LLVMSetInitializer(llglobal, llval);\n     lib::llvm::llvm::LLVMSetGlobalConstant(llglobal, True);\n-    lib::llvm::llvm::LLVMSetLinkage(llglobal,\n-                                    lib::llvm::LLVMInternalLinkage as\n-                                        lib::llvm::llvm::Linkage);\n+\n+    if (internal) {\n+        lib::llvm::llvm::LLVMSetLinkage(llglobal,\n+                                        lib::llvm::LLVMInternalLinkage as\n+                                            lib::llvm::llvm::Linkage);\n+    }\n+\n     ret llglobal;\n }\n \n@@ -510,7 +515,7 @@ fn gen_tag_shapes(ccx: &@crate_ctxt) -> ValueRef {\n     header += data;\n     header += lv_table;\n \n-    ret mk_global(ccx, \"tag_shapes\", C_bytes(header));\n+    ret mk_global(ccx, \"tag_shapes\", C_bytes(header), true);\n }\n \n fn gen_resource_shapes(ccx: &@crate_ctxt) -> ValueRef {\n@@ -523,7 +528,7 @@ fn gen_resource_shapes(ccx: &@crate_ctxt) -> ValueRef {\n         i += 1u;\n     }\n \n-    ret mk_global(ccx, \"resource_shapes\", C_struct(dtors));\n+    ret mk_global(ccx, \"resource_shapes\", C_struct(dtors), true);\n }\n \n fn gen_shape_tables(ccx: &@crate_ctxt) {"}, {"sha": "6cfb9102db1df9e8e87e84b67c67e4053e61facf", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25416bfae190d68d706b80903e46748da3dfadc4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25416bfae190d68d706b80903e46748da3dfadc4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=25416bfae190d68d706b80903e46748da3dfadc4", "patch": "@@ -6926,6 +6926,12 @@ fn write_metadata(cx: &@crate_ctxt, crate: &@ast::crate) {\n     llvm::LLVMSetInitializer(llvm_used, C_array(t_ptr_i8, [llglobal]));\n }\n \n+// Writes the current ABI version into the crate.\n+fn write_abi_version(ccx: &@crate_ctxt) {\n+    shape::mk_global(ccx, \"rust_abi_version\", C_uint(abi::abi_version),\n+                     false);\n+}\n+\n fn trans_crate(sess: &session::session, crate: &@ast::crate, tcx: &ty::ctxt,\n                output: &str, amap: &ast_map::map) -> ModuleRef {\n     let llmod =\n@@ -7001,6 +7007,7 @@ fn trans_crate(sess: &session::session, crate: &@ast::crate, tcx: &ty::ctxt,\n     create_crate_map(ccx);\n     emit_tydescs(ccx);\n     shape::gen_shape_tables(ccx);\n+    write_abi_version(ccx);\n \n     // Translate the metadata.\n     write_metadata(cx.ccx, crate);"}, {"sha": "98b80fb41bd212134a8c0d94c6a0049b82fe3e80", "filename": "src/rt/rust_abi.cpp", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25416bfae190d68d706b80903e46748da3dfadc4/src%2Frt%2Frust_abi.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/25416bfae190d68d706b80903e46748da3dfadc4/src%2Frt%2Frust_abi.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_abi.cpp?ref=25416bfae190d68d706b80903e46748da3dfadc4", "patch": "@@ -0,0 +1,10 @@\n+#include <cstdlib>\n+#include <stdint.h>\n+#include \"rust_abi.h\"\n+\n+weak_symbol<uint32_t> abi_version(\"rust_abi_version\");\n+\n+uint32_t get_abi_version() {\n+    return (*abi_version == NULL) ? 0 : **abi_version;\n+}\n+"}, {"sha": "9c22ea3fe7eb8a9ca7c78e215fdda05f78c27b4e", "filename": "src/rt/rust_abi.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25416bfae190d68d706b80903e46748da3dfadc4/src%2Frt%2Frust_abi.h", "raw_url": "https://github.com/rust-lang/rust/raw/25416bfae190d68d706b80903e46748da3dfadc4/src%2Frt%2Frust_abi.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_abi.h?ref=25416bfae190d68d706b80903e46748da3dfadc4", "patch": "@@ -1,6 +1,8 @@\n #ifndef RUST_ABI_H\n #define RUST_ABI_H\n \n+#include <cstdlib>\n+\n #ifdef __WIN32__\n #include <windows.h>\n #else\n@@ -34,5 +36,7 @@ class weak_symbol {\n     T *&operator*() { fill(); return data; }\n };\n \n+uint32_t get_abi_version();\n+\n #endif\n "}]}