{"sha": "9578272d681c8691ca2ff3f5c4230b491bc1c694", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NzgyNzJkNjgxYzg2OTFjYTJmZjNmNWM0MjMwYjQ5MWJjMWM2OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-19T05:11:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-19T05:11:13Z"}, "message": "Auto merge of #65588 - Centril:rollup-9k55k3t, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #65174 (Fix zero-size uninitialized boxes)\n - #65252 (expand: Simplify expansion of derives)\n - #65485 (Suppress ICE when validators disagree on `LiveDrop`s in presence of `&mut`)\n - #65542 (Refer to \"associated functions\" instead of \"static methods\")\n - #65545 (More symbol cleanups)\n - #65576 (Don't add `argc` and `argv` arguments to `main` on WASI.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e79b95fd297e775f68d88839f20dd8c3dfe67ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e79b95fd297e775f68d88839f20dd8c3dfe67ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9578272d681c8691ca2ff3f5c4230b491bc1c694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9578272d681c8691ca2ff3f5c4230b491bc1c694", "html_url": "https://github.com/rust-lang/rust/commit/9578272d681c8691ca2ff3f5c4230b491bc1c694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9578272d681c8691ca2ff3f5c4230b491bc1c694/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f0ed64e306cfc232c3209985afb53fa2cadbb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f0ed64e306cfc232c3209985afb53fa2cadbb2", "html_url": "https://github.com/rust-lang/rust/commit/14f0ed64e306cfc232c3209985afb53fa2cadbb2"}, {"sha": "3e1da91349abe9e6f793f246186915b6192e2011", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1da91349abe9e6f793f246186915b6192e2011", "html_url": "https://github.com/rust-lang/rust/commit/3e1da91349abe9e6f793f246186915b6192e2011"}], "stats": {"total": 415, "additions": 282, "deletions": 133}, "files": [{"sha": "567b8ea722491edbe2c9bfe9218b1632038dbc92", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -142,6 +142,9 @@ impl<T> Box<T> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Box<mem::MaybeUninit<T>> {\n         let layout = alloc::Layout::new::<mem::MaybeUninit<T>>();\n+        if layout.size() == 0 {\n+            return Box(NonNull::dangling().into())\n+        }\n         let ptr = unsafe {\n             Global.alloc(layout)\n                 .unwrap_or_else(|_| alloc::handle_alloc_error(layout))\n@@ -182,9 +185,16 @@ impl<T> Box<[T]> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         let layout = alloc::Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n-        let ptr = unsafe { alloc::alloc(layout) };\n-        let unique = Unique::new(ptr).unwrap_or_else(|| alloc::handle_alloc_error(layout));\n-        let slice = unsafe { slice::from_raw_parts_mut(unique.cast().as_ptr(), len) };\n+        let ptr = if layout.size() == 0 {\n+            NonNull::dangling()\n+        } else {\n+            unsafe {\n+                Global.alloc(layout)\n+                    .unwrap_or_else(|_| alloc::handle_alloc_error(layout))\n+                    .cast()\n+            }\n+        };\n+        let slice = unsafe { slice::from_raw_parts_mut(ptr.as_ptr(), len) };\n         Box(Unique::from(slice))\n     }\n }"}, {"sha": "bc3d53bf30da37446fac708800e0abe71cd25962", "filename": "src/liballoc/tests/boxed.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Fliballoc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Fliballoc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fboxed.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -0,0 +1,18 @@\n+use std::ptr::NonNull;\n+use std::mem::MaybeUninit;\n+\n+#[test]\n+fn unitialized_zero_size_box() {\n+    assert_eq!(\n+        &*Box::<()>::new_uninit() as *const _,\n+        NonNull::<MaybeUninit<()>>::dangling().as_ptr(),\n+    );\n+    assert_eq!(\n+        Box::<[()]>::new_uninit_slice(4).as_ptr(),\n+        NonNull::<MaybeUninit<()>>::dangling().as_ptr(),\n+    );\n+    assert_eq!(\n+        Box::<[String]>::new_uninit_slice(0).as_ptr(),\n+        NonNull::<MaybeUninit<String>>::dangling().as_ptr(),\n+    );\n+}"}, {"sha": "676874c8b27df07666641a6fada446d60cc8bf1a", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -2,6 +2,7 @@\n #![feature(box_syntax)]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n+#![feature(new_uninit)]\n #![feature(option_flattening)]\n #![feature(pattern)]\n #![feature(trusted_len)]\n@@ -14,6 +15,7 @@ use std::collections::hash_map::DefaultHasher;\n \n mod arc;\n mod binary_heap;\n+mod boxed;\n mod btree;\n mod cow_str;\n mod fmt;"}, {"sha": "9be339be7034f2b00d1d83823d3bc79f48f10ce9", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -90,7 +90,7 @@ impl<'a> DefCollector<'a> {\n         }\n     }\n \n-    pub fn visit_macro_invoc(&mut self, id: NodeId) {\n+    fn visit_macro_invoc(&mut self, id: NodeId) {\n         self.definitions.set_invocation_parent(id.placeholder_to_expn_id(), self.parent_def);\n     }\n }"}, {"sha": "d2732c92d26887688ff7e83d79131d2d418e8106", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -111,7 +111,7 @@ pub struct Definitions {\n /// A unique identifier that we can use to lookup a definition\n /// precisely. It combines the index of the definition's parent (if\n /// any) with a `DisambiguatedDefPathData`.\n-#[derive(Clone, PartialEq, Debug, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n pub struct DefKey {\n     /// The parent path.\n     pub parent: Option<DefIndex>,\n@@ -162,13 +162,13 @@ impl DefKey {\n /// between them. This introduces some artificial ordering dependency\n /// but means that if you have, e.g., two impls for the same type in\n /// the same module, they do get distinct `DefId`s.\n-#[derive(Clone, PartialEq, Debug, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n pub struct DisambiguatedDefPathData {\n     pub data: DefPathData,\n     pub disambiguator: u32\n }\n \n-#[derive(Clone, Debug, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct DefPath {\n     /// The path leading from the crate root to the item.\n     pub data: Vec<DisambiguatedDefPathData>,"}, {"sha": "546972903e9b5fe9c9a92e4292cd33246b5d91fa", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -414,8 +414,11 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n     ) {\n-        let llfty =\n-            cx.type_func(&[cx.type_int(), cx.type_ptr_to(cx.type_i8p())], cx.type_int());\n+        let llfty = if cx.sess().target.target.options.main_needs_argc_argv {\n+            cx.type_func(&[cx.type_int(), cx.type_ptr_to(cx.type_i8p())], cx.type_int())\n+        } else {\n+            cx.type_func(&[], cx.type_int())\n+        };\n \n         let main_ret_ty = cx.tcx().fn_sig(rust_main_def_id).output();\n         // Given that `main()` has no arguments,\n@@ -445,11 +448,19 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n \n         bx.insert_reference_to_gdb_debug_scripts_section_global();\n \n-        // Params from native main() used as args for rust start function\n-        let param_argc = bx.get_param(0);\n-        let param_argv = bx.get_param(1);\n-        let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n-        let arg_argv = param_argv;\n+        let (arg_argc, arg_argv) = if cx.sess().target.target.options.main_needs_argc_argv {\n+            // Params from native main() used as args for rust start function\n+            let param_argc = bx.get_param(0);\n+            let param_argv = bx.get_param(1);\n+            let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n+            let arg_argv = param_argv;\n+            (arg_argc, arg_argv)\n+        } else {\n+            // The Rust start function doesn't need argc and argv, so just pass zeros.\n+            let arg_argc = bx.const_int(cx.type_int(), 0);\n+            let arg_argv = bx.const_null(cx.type_ptr_to(cx.type_i8p()));\n+            (arg_argc, arg_argv)\n+        };\n \n         let (start_fn, args) = if use_start_lang_item {\n             let start_def_id = cx.tcx().require_lang_item(StartFnLangItem, None);"}, {"sha": "98d5487870a4de609eb01dfc2ce466d57415198e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -14,6 +14,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(core_intrinsics)]\n #![feature(const_fn)]\n #![feature(decl_macro)]\n+#![feature(drain_filter)]\n #![feature(exhaustive_patterns)]\n #![feature(never_type)]\n #![feature(specialization)]"}, {"sha": "da1abb9747c1a7ef5cff597176234cc5c8905557", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 58, "deletions": 17, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -1024,23 +1024,12 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             new_errors.dedup();\n \n             if self.errors != new_errors {\n-                error!(\"old validator: {:?}\", self.errors);\n-                error!(\"new validator: {:?}\", new_errors);\n-\n-                // ICE on nightly if the validators do not emit exactly the same errors.\n-                // Users can supress this panic with an unstable compiler flag (hopefully after\n-                // filing an issue).\n-                let opts = &self.tcx.sess.opts;\n-                let trigger_ice = opts.unstable_features.is_nightly_build()\n-                    && !opts.debugging_opts.suppress_const_validation_back_compat_ice;\n-\n-                if trigger_ice {\n-                    span_bug!(\n-                        body.span,\n-                        \"{}\",\n-                        VALIDATOR_MISMATCH_ERR,\n-                    );\n-                }\n+                validator_mismatch(\n+                    self.tcx,\n+                    body,\n+                    std::mem::replace(&mut self.errors, vec![]),\n+                    new_errors,\n+                );\n             }\n         }\n \n@@ -1870,6 +1859,58 @@ fn args_required_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<FxHashSet<usize\n     Some(ret)\n }\n \n+fn validator_mismatch(\n+    tcx: TyCtxt<'tcx>,\n+    body: &Body<'tcx>,\n+    mut old_errors: Vec<(Span, String)>,\n+    mut new_errors: Vec<(Span, String)>,\n+) {\n+    error!(\"old validator: {:?}\", old_errors);\n+    error!(\"new validator: {:?}\", new_errors);\n+\n+    // ICE on nightly if the validators do not emit exactly the same errors.\n+    // Users can supress this panic with an unstable compiler flag (hopefully after\n+    // filing an issue).\n+    let opts = &tcx.sess.opts;\n+    let strict_validation_enabled = opts.unstable_features.is_nightly_build()\n+        && !opts.debugging_opts.suppress_const_validation_back_compat_ice;\n+\n+    if !strict_validation_enabled {\n+        return;\n+    }\n+\n+    // If this difference would cause a regression from the old to the new or vice versa, trigger\n+    // the ICE.\n+    if old_errors.is_empty() || new_errors.is_empty() {\n+        span_bug!(body.span, \"{}\", VALIDATOR_MISMATCH_ERR);\n+    }\n+\n+    // HACK: Borrows that would allow mutation are forbidden in const contexts, but they cause the\n+    // new validator to be more conservative about when a dropped local has been moved out of.\n+    //\n+    // Supress the mismatch ICE in cases where the validators disagree only on the number of\n+    // `LiveDrop` errors and both observe the same sequence of `MutBorrow`s.\n+\n+    let is_live_drop = |(_, s): &mut (_, String)| s.starts_with(\"LiveDrop\");\n+    let is_mut_borrow = |(_, s): &&(_, String)| s.starts_with(\"MutBorrow\");\n+\n+    let old_live_drops: Vec<_> = old_errors.drain_filter(is_live_drop).collect();\n+    let new_live_drops: Vec<_> = new_errors.drain_filter(is_live_drop).collect();\n+\n+    let only_live_drops_differ = old_live_drops != new_live_drops && old_errors == new_errors;\n+\n+    let old_mut_borrows = old_errors.iter().filter(is_mut_borrow);\n+    let new_mut_borrows = new_errors.iter().filter(is_mut_borrow);\n+\n+    let at_least_one_mut_borrow = old_mut_borrows.clone().next().is_some();\n+\n+    if only_live_drops_differ && at_least_one_mut_borrow && old_mut_borrows.eq(new_mut_borrows) {\n+        return;\n+    }\n+\n+    span_bug!(body.span, \"{}\", VALIDATOR_MISMATCH_ERR);\n+}\n+\n const VALIDATOR_MISMATCH_ERR: &str =\n     r\"Disagreement between legacy and dataflow-based const validators.\n     After filing an issue, use `-Zsuppress-const-validation-back-compat-ice` to compile your code.\";"}, {"sha": "34cdec229af4318f329225cbecce252b842a8e76", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -880,11 +880,11 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             self.tcx,\n             self.tcx.hir().local_def_id(md.hir_id)\n         ).unwrap();\n-        let mut module_id = self.tcx.hir().as_local_hir_id(macro_module_def_id).unwrap();\n-        if !self.tcx.hir().is_hir_id_module(module_id) {\n-            // `module_id` doesn't correspond to a `mod`, return early (#63164).\n-            return;\n-        }\n+        let mut module_id = match self.tcx.hir().as_local_hir_id(macro_module_def_id) {\n+            Some(module_id) if self.tcx.hir().is_hir_id_module(module_id) => module_id,\n+            // `module_id` doesn't correspond to a `mod`, return early (#63164, #65252).\n+            _ => return,\n+        };\n         let level = if md.vis.node.is_pub() { self.get(module_id) } else { None };\n         let new_level = self.update(md.hir_id, level);\n         if new_level.is_none() {"}, {"sha": "e261d3af61ff8c8372b7b464e1a65fe10ee6a5a3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -163,25 +163,15 @@ impl<'a> Resolver<'a> {\n         Some(ext)\n     }\n \n-    // FIXME: `extra_placeholders` should be included into the `fragment` as regular placeholders.\n     crate fn build_reduced_graph(\n         &mut self,\n         fragment: &AstFragment,\n-        extra_placeholders: &[NodeId],\n         parent_scope: ParentScope<'a>,\n     ) -> LegacyScope<'a> {\n         let mut def_collector = DefCollector::new(&mut self.definitions, parent_scope.expansion);\n         fragment.visit_with(&mut def_collector);\n-        for placeholder in extra_placeholders {\n-            def_collector.visit_macro_invoc(*placeholder);\n-        }\n-\n         let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };\n         fragment.visit_with(&mut visitor);\n-        for placeholder in extra_placeholders {\n-            visitor.parent_scope.legacy = visitor.visit_invoc(*placeholder);\n-        }\n-\n         visitor.parent_scope.legacy\n     }\n \n@@ -1064,8 +1054,17 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         None\n     }\n \n+    // Mark the given macro as unused unless its name starts with `_`.\n+    // Macro uses will remove items from this set, and the remaining\n+    // items will be reported as `unused_macros`.\n+    fn insert_unused_macro(&mut self, ident: Ident, node_id: NodeId, span: Span) {\n+        if !ident.as_str().starts_with(\"_\") {\n+            self.r.unused_macros.insert(node_id, span);\n+        }\n+    }\n+\n     fn define_macro(&mut self, item: &ast::Item) -> LegacyScope<'a> {\n-        let parent_scope = &self.parent_scope;\n+        let parent_scope = self.parent_scope;\n         let expansion = parent_scope.expansion;\n         let (ext, ident, span, is_legacy) = match &item.kind {\n             ItemKind::MacroDef(def) => {\n@@ -1105,7 +1104,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             (res, vis, span, expansion, IsMacroExport));\n             } else {\n                 self.r.check_reserved_macro_name(ident, res);\n-                self.r.unused_macros.insert(item.id, span);\n+                self.insert_unused_macro(ident, item.id, span);\n             }\n             LegacyScope::Binding(self.r.arenas.alloc_legacy_binding(LegacyBinding {\n                 parent_legacy_scope: parent_scope.legacy, binding, ident\n@@ -1114,7 +1113,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             let module = parent_scope.module;\n             let vis = self.resolve_visibility(&item.vis);\n             if vis != ty::Visibility::Public {\n-                self.r.unused_macros.insert(item.id, span);\n+                self.insert_unused_macro(ident, item.id, span);\n             }\n             self.r.define(module, ident, MacroNS, (res, vis, span, expansion));\n             self.parent_scope.legacy"}, {"sha": "cd6189c681da14db13693d9eb178bb0dcd6da050", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -1013,33 +1013,42 @@ fn h1() -> i32 {\n \"##,\n \n E0424: r##\"\n-The `self` keyword was used in a static method.\n+The `self` keyword was used inside of an associated function without a \"`self`\n+receiver\" parameter.\n \n Erroneous code example:\n \n ```compile_fail,E0424\n struct Foo;\n \n impl Foo {\n-    fn bar(self) {}\n+    // `bar` is a method, because it has a receiver parameter.\n+    fn bar(&self) {}\n \n+    // `foo` is not a method, because it has no receiver parameter.\n     fn foo() {\n-        self.bar(); // error: `self` is not available in a static method.\n+        self.bar(); // error: `self` value is a keyword only available in\n+                    //        methods with a `self` parameter\n     }\n }\n ```\n \n-Please check if the method's argument list should have contained `self`,\n-`&self`, or `&mut self` (in case you didn't want to create a static\n-method), and add it if so. Example:\n+The `self` keyword can only be used inside methods, which are associated\n+functions (functions defined inside of a `trait` or `impl` block) that have a\n+`self` receiver as its first parameter, like `self`, `&self`, `&mut self` or\n+`self: &mut Pin<Self>` (this last one is an example of an [\"abitrary `self`\n+type\"](https://github.com/rust-lang/rust/issues/44874)).\n+\n+Check if the associated function's parameter list should have contained a `self`\n+receiver for it to be a method, and add it if so. Example:\n \n ```\n struct Foo;\n \n impl Foo {\n-    fn bar(self) {}\n+    fn bar(&self) {}\n \n-    fn foo(self) {\n+    fn foo(self) { // `foo` is now a method.\n         self.bar(); // ok!\n     }\n }"}, {"sha": "73a282b1a0ec1e9e159133b675d85d3f2bdbcb66", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -345,6 +345,9 @@ struct LateResolutionVisitor<'a, 'b> {\n     /// The current self item if inside an ADT (used for better errors).\n     current_self_item: Option<NodeId>,\n \n+    /// The current enclosing funciton (used for better errors).\n+    current_function: Option<Span>,\n+\n     /// A list of labels as of yet unused. Labels will be removed from this map when\n     /// they are used (in a `break` or `continue` statement)\n     unused_labels: FxHashMap<NodeId, Span>,\n@@ -415,7 +418,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n             }\n         }\n     }\n-    fn visit_fn(&mut self, fn_kind: FnKind<'tcx>, declaration: &'tcx FnDecl, _: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fn_kind: FnKind<'tcx>, declaration: &'tcx FnDecl, sp: Span, _: NodeId) {\n+        let previous_value = replace(&mut self.current_function, Some(sp));\n         debug!(\"(resolving function) entering function\");\n         let rib_kind = match fn_kind {\n             FnKind::ItemFn(..) => FnItemRibKind,\n@@ -441,6 +445,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                 debug!(\"(resolving function) leaving function\");\n             })\n         });\n+        self.current_function = previous_value;\n     }\n \n     fn visit_generics(&mut self, generics: &'tcx Generics) {\n@@ -546,6 +551,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n             current_trait_assoc_types: Vec::new(),\n             current_self_type: None,\n             current_self_item: None,\n+            current_function: None,\n             unused_labels: Default::default(),\n             current_type_ascription: Vec::new(),\n         }"}, {"sha": "2721df4c687636d7b10924e0acae6e328a6664db", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -115,8 +115,10 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         if is_self_type(path, ns) {\n             syntax::diagnostic_used!(E0411);\n             err.code(DiagnosticId::Error(\"E0411\".into()));\n-            err.span_label(span, format!(\"`Self` is only available in impls, traits, \\\n-                                          and type definitions\"));\n+            err.span_label(\n+                span,\n+                format!(\"`Self` is only available in impls, traits, and type definitions\"),\n+            );\n             return (err, Vec::new());\n         }\n         if is_self_value(path, ns) {\n@@ -125,17 +127,16 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             syntax::diagnostic_used!(E0424);\n             err.code(DiagnosticId::Error(\"E0424\".into()));\n             err.span_label(span, match source {\n-                PathSource::Pat => {\n-                    format!(\"`self` value is a keyword \\\n-                             and may not be bound to \\\n-                             variables or shadowed\")\n-                }\n-                _ => {\n-                    format!(\"`self` value is a keyword \\\n-                             only available in methods \\\n-                             with `self` parameter\")\n-                }\n+                PathSource::Pat => format!(\n+                    \"`self` value is a keyword and may not be bound to variables or shadowed\",\n+                ),\n+                _ => format!(\n+                    \"`self` value is a keyword only available in methods with a `self` parameter\",\n+                ),\n             });\n+            if let Some(span) = &self.current_function {\n+                err.span_label(*span, \"this function doesn't have a `self` parameter\");\n+            }\n             return (err, Vec::new());\n         }\n "}, {"sha": "94fe0cc57403e7a376a5d66384839e1a484b529e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -108,15 +108,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n         });\n     }\n \n-    // FIXME: `extra_placeholders` should be included into the `fragment` as regular placeholders.\n-    fn visit_ast_fragment_with_placeholders(\n-        &mut self, expansion: ExpnId, fragment: &AstFragment, extra_placeholders: &[NodeId]\n-    ) {\n+    fn visit_ast_fragment_with_placeholders(&mut self, expansion: ExpnId, fragment: &AstFragment) {\n         // Integrate the new AST fragment into all the definition and module structures.\n         // We are inside the `expansion` now, but other parent scope components are still the same.\n         let parent_scope = ParentScope { expansion, ..self.invocation_parent_scopes[&expansion] };\n-        let output_legacy_scope =\n-            self.build_reduced_graph(fragment, extra_placeholders, parent_scope);\n+        let output_legacy_scope = self.build_reduced_graph(fragment, parent_scope);\n         self.output_legacy_scopes.insert(expansion, output_legacy_scope);\n \n         parent_scope.module.unexpanded_invocations.borrow_mut().remove(&expansion);"}, {"sha": "c5277c4f90e7ae42e908715938c4b79afbcebbcf", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -691,6 +691,9 @@ pub struct TargetOptions {\n     /// defined in libgcc. If this option is enabled, the target must provide\n     /// `eh_unwind_resume` lang item.\n     pub custom_unwind_resume: bool,\n+    /// Whether the runtime startup code requires the `main` function be passed\n+    /// `argc` and `argv` values.\n+    pub main_needs_argc_argv: bool,\n \n     /// Flag indicating whether ELF TLS (e.g., #[thread_local]) is available for\n     /// this target.\n@@ -849,6 +852,7 @@ impl Default for TargetOptions {\n             link_env_remove: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n             custom_unwind_resume: false,\n+            main_needs_argc_argv: true,\n             allow_asm: true,\n             has_elf_tls: false,\n             obj_is_bitcode: false,\n@@ -1159,6 +1163,7 @@ impl Target {\n         key!(archive_format);\n         key!(allow_asm, bool);\n         key!(custom_unwind_resume, bool);\n+        key!(main_needs_argc_argv, bool);\n         key!(has_elf_tls, bool);\n         key!(obj_is_bitcode, bool);\n         key!(no_integrated_as, bool);\n@@ -1376,6 +1381,7 @@ impl ToJson for Target {\n         target_option_val!(archive_format);\n         target_option_val!(allow_asm);\n         target_option_val!(custom_unwind_resume);\n+        target_option_val!(main_needs_argc_argv);\n         target_option_val!(has_elf_tls);\n         target_option_val!(obj_is_bitcode);\n         target_option_val!(no_integrated_as);"}, {"sha": "d5ef230dcf7d23c5da16e34a71684249c6be4bc5", "filename": "src/librustc_target/spec/wasm32_wasi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_wasi.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -101,6 +101,10 @@ pub fn target() -> Result<Target, String> {\n     // without a main function.\n     options.crt_static_allows_dylibs = true;\n \n+    // WASI's `sys::args::init` function ignores its arguments; instead,\n+    // `args::args()` makes the WASI API calls itself.\n+    options.main_needs_argc_argv = false;\n+\n     Ok(Target {\n         llvm_target: \"wasm32-wasi\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "c222e7357ac7ed39a1ea810a602547f3dc6ea8ff", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -851,8 +851,7 @@ pub trait Resolver {\n     fn next_node_id(&mut self) -> NodeId;\n \n     fn resolve_dollar_crates(&mut self);\n-    fn visit_ast_fragment_with_placeholders(&mut self, expn_id: ExpnId, fragment: &AstFragment,\n-                                            extra_placeholders: &[NodeId]);\n+    fn visit_ast_fragment_with_placeholders(&mut self, expn_id: ExpnId, fragment: &AstFragment);\n     fn register_builtin_macro(&mut self, ident: ast::Ident, ext: SyntaxExtension);\n \n     fn expansion_for_ast_pass("}, {"sha": "f03d464eafb907fd98964b5636892eeb8e6cb938", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -26,7 +26,6 @@ use errors::{Applicability, FatalError};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{Span, DUMMY_SP, FileName};\n \n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::io::ErrorKind;\n use std::{iter, mem, slice};\n@@ -75,6 +74,22 @@ macro_rules! ast_fragments {\n         }\n \n         impl AstFragment {\n+            pub fn add_placeholders(&mut self, placeholders: &[NodeId]) {\n+                if placeholders.is_empty() {\n+                    return;\n+                }\n+                match self {\n+                    $($(AstFragment::$Kind(ast) => ast.extend(placeholders.iter().flat_map(|id| {\n+                        // We are repeating through arguments with `many`, to do that we have to\n+                        // mention some macro variable from those arguments even if it's not used.\n+                        #[cfg_attr(bootstrap, allow(unused_macros))]\n+                        macro _repeating($flat_map_ast_elt) {}\n+                        placeholder(AstFragmentKind::$Kind, *id).$make_ast()\n+                    })),)?)*\n+                    _ => panic!(\"unexpected AST fragment kind\")\n+                }\n+            }\n+\n             pub fn make_opt_expr(self) -> Option<P<ast::Expr>> {\n                 match self {\n                     AstFragment::OptExpr(expr) => expr,\n@@ -342,7 +357,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         // Unresolved macros produce dummy outputs as a recovery measure.\n         invocations.reverse();\n         let mut expanded_fragments = Vec::new();\n-        let mut all_derive_placeholders: FxHashMap<ExpnId, Vec<_>> = FxHashMap::default();\n         let mut undetermined_invocations = Vec::new();\n         let (mut progress, mut force) = (false, !self.monotonic);\n         loop {\n@@ -420,9 +434,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         self.cx.resolver.add_derives(invoc.expansion_data.id, SpecialDerives::COPY);\n                     }\n \n-                    let derive_placeholders =\n-                        all_derive_placeholders.entry(invoc.expansion_data.id).or_default();\n-                    derive_placeholders.reserve(derives.len());\n+                    let mut derive_placeholders = Vec::with_capacity(derives.len());\n                     invocations.reserve(derives.len());\n                     for path in derives {\n                         let expn_id = ExpnId::fresh(None);\n@@ -438,7 +450,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     }\n                     let fragment = invoc.fragment_kind\n                         .expect_from_annotatables(::std::iter::once(item));\n-                    self.collect_invocations(fragment, derive_placeholders)\n+                    self.collect_invocations(fragment, &derive_placeholders)\n                 }\n             };\n \n@@ -457,10 +469,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let mut placeholder_expander = PlaceholderExpander::new(self.cx, self.monotonic);\n         while let Some(expanded_fragments) = expanded_fragments.pop() {\n             for (expn_id, expanded_fragment) in expanded_fragments.into_iter().rev() {\n-                let derive_placeholders =\n-                    all_derive_placeholders.remove(&expn_id).unwrap_or_else(Vec::new);\n                 placeholder_expander.add(NodeId::placeholder_from_expn_id(expn_id),\n-                                         expanded_fragment, derive_placeholders);\n+                                         expanded_fragment);\n             }\n         }\n         fragment_with_placeholders.mut_visit_with(&mut placeholder_expander);\n@@ -493,13 +503,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 monotonic: self.monotonic,\n             };\n             fragment.mut_visit_with(&mut collector);\n+            fragment.add_placeholders(extra_placeholders);\n             collector.invocations\n         };\n \n-        // FIXME: Merge `extra_placeholders` into the `fragment` as regular placeholders.\n         if self.monotonic {\n             self.cx.resolver.visit_ast_fragment_with_placeholders(\n-                self.cx.current_expansion.id, &fragment, extra_placeholders);\n+                self.cx.current_expansion.id, &fragment\n+            );\n         }\n \n         (fragment, invocations)"}, {"sha": "db292b619be39de88c7a8c31732e1b9e05c06247", "filename": "src/libsyntax_expand/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Flib.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -1,4 +1,5 @@\n #![feature(crate_visibility_modifier)]\n+#![feature(decl_macro)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]"}, {"sha": "e595888dae7d16802f2d10f66f3dd4890c72ff15", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -1,7 +1,7 @@\n use crate::base::ExtCtxt;\n use crate::expand::{AstFragment, AstFragmentKind};\n \n-use syntax::ast::{self, NodeId};\n+use syntax::ast;\n use syntax::source_map::{DUMMY_SP, dummy_spanned};\n use syntax::tokenstream::TokenStream;\n use syntax::mut_visit::*;\n@@ -171,17 +171,8 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n         }\n     }\n \n-    pub fn add(&mut self, id: ast::NodeId, mut fragment: AstFragment, placeholders: Vec<NodeId>) {\n+    pub fn add(&mut self, id: ast::NodeId, mut fragment: AstFragment) {\n         fragment.mut_visit_with(self);\n-        if let AstFragment::Items(mut items) = fragment {\n-            for placeholder in placeholders {\n-                match self.remove(placeholder) {\n-                    AstFragment::Items(derived_items) => items.extend(derived_items),\n-                    _ => unreachable!(),\n-                }\n-            }\n-            fragment = AstFragment::Items(items);\n-        }\n         self.expanded_fragments.insert(id, fragment);\n     }\n "}, {"sha": "67ef69babdc0ac3ad99f155e9e14c3ce1c40acb9", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -174,14 +174,12 @@ fn cs_clone(name: &str,\n             all_fields = af;\n             vdata = &variant.data;\n         }\n-        EnumNonMatchingCollapsed(..) => {\n-            cx.span_bug(trait_span,\n-                        &format!(\"non-matching enum variants in \\\n-                                 `derive({})`\",\n-                                 name))\n-        }\n+        EnumNonMatchingCollapsed(..) => cx.span_bug(trait_span, &format!(\n+            \"non-matching enum variants in `derive({})`\",\n+            name,\n+        )),\n         StaticEnum(..) | StaticStruct(..) => {\n-            cx.span_bug(trait_span, &format!(\"static method in `derive({})`\", name))\n+            cx.span_bug(trait_span, &format!(\"associated function in `derive({})`\", name))\n         }\n     }\n \n@@ -191,12 +189,10 @@ fn cs_clone(name: &str,\n                 .map(|field| {\n                     let ident = match field.name {\n                         Some(i) => i,\n-                        None => {\n-                            cx.span_bug(trait_span,\n-                                        &format!(\"unnamed field in normal struct in \\\n-                                                `derive({})`\",\n-                                                    name))\n-                        }\n+                        None => cx.span_bug(trait_span, &format!(\n+                            \"unnamed field in normal struct in `derive({})`\",\n+                            name,\n+                        )),\n                     };\n                     let call = subcall(cx, field);\n                     cx.field_imm(field.span, ident, call)"}, {"sha": "cfc0f3cd6cbf9afdfaccee628f9a0661b4e0bdf4", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -75,6 +75,6 @@ fn default_substructure(cx: &mut ExtCtxt<'_>,\n             // let compilation continue\n             DummyResult::raw_expr(trait_span, true)\n         }\n-        _ => cx.span_bug(trait_span, \"Non-static method in `derive(Default)`\"),\n+        _ => cx.span_bug(trait_span, \"method in `derive(Default)`\"),\n     };\n }"}, {"sha": "216338c1a8861576790caf024eae8d72886ff7e8", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -1055,9 +1055,7 @@ impl<'a> MethodDef<'a> {\n                 })\n                 .collect()\n         } else {\n-            cx.span_bug(trait_.span,\n-                        \"no self arguments to non-static method in generic \\\n-                         `derive`\")\n+            cx.span_bug(trait_.span, \"no `self` parameter for method in generic `derive`\")\n         };\n \n         // body of the inner most destructuring match"}, {"sha": "fa9567fb62c0f8487f426e5a1a693eb41706f317", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -934,19 +934,19 @@ impl Symbol {\n \n impl fmt::Debug for Symbol {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n+        self.with(|str| fmt::Debug::fmt(&str, f))\n     }\n }\n \n impl fmt::Display for Symbol {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&self.as_str(), f)\n+        self.with(|str| fmt::Display::fmt(&str, f))\n     }\n }\n \n impl Encodable for Symbol {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(&self.as_str())\n+        self.with(|string| s.emit_str(string))\n     }\n }\n \n@@ -1106,8 +1106,8 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n }\n \n /// An alternative to `Symbol` and `InternedString`, useful when the chars\n-/// within the symbol need to be accessed. It is best used for temporary\n-/// values.\n+/// within the symbol need to be accessed. It deliberately has limited\n+/// functionality and should only be used for temporary values.\n ///\n /// Because the interner outlives any thread which uses this type, we can\n /// safely treat `string` which points to interner data, as an immortal string,\n@@ -1116,7 +1116,7 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n // FIXME: ensure that the interner outlives any thread which uses\n // `LocalInternedString`, by creating a new thread right after constructing the\n // interner.\n-#[derive(Clone, Copy, Eq, PartialOrd, Ord)]\n+#[derive(Eq, PartialOrd, Ord)]\n pub struct LocalInternedString {\n     string: &'static str,\n }"}, {"sha": "298ff601de89f3f763fe9a86d6621d56a0f37915", "filename": "src/test/rustdoc/macro-in-closure.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Frustdoc%2Fmacro-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Frustdoc%2Fmacro-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro-in-closure.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -0,0 +1,9 @@\n+// Regression issue for rustdoc ICE encountered in PR #65252.\n+\n+#![feature(decl_macro)]\n+\n+fn main() {\n+    || {\n+        macro m() {}\n+    };\n+}"}, {"sha": "978e227bcc81709eed0a49a338120607bb39ad82", "filename": "src/test/ui/consts/const-eval/issue-65394.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -0,0 +1,13 @@\n+// Test for absence of validation mismatch ICE in #65394\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_mir(borrowck_graphviz_postflow=\"hello.dot\")]\n+const _: Vec<i32> = {\n+    let mut x = Vec::<i32>::new();\n+    let r = &mut x; //~ ERROR references in constants may only refer to immutable values\n+    let y = x;\n+    y\n+};\n+\n+fn main() {}"}, {"sha": "f48c551cb50f57e19da7b1851324af08d152fb9c", "filename": "src/test/ui/consts/const-eval/issue-65394.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -0,0 +1,11 @@\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/issue-65394.rs:8:13\n+   |\n+LL |     let r = &mut x;\n+   |             ^^^^^^ constants require immutable values\n+\n+[ERROR rustc_mir::transform::qualify_consts] old validator: [($DIR/issue-65394.rs:8:13: 8:19, \"MutBorrow(Mut { allow_two_phase_borrow: false })\")]\n+[ERROR rustc_mir::transform::qualify_consts] new validator: [($DIR/issue-65394.rs:8:13: 8:19, \"MutBorrow(Mut { allow_two_phase_borrow: false })\"), ($DIR/issue-65394.rs:7:9: 7:14, \"LiveDrop\")]\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0017`."}, {"sha": "567d1b3cc75f4c44447645e60e8c5fb3ee59240d", "filename": "src/test/ui/error-codes/E0424.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -1,14 +1,20 @@\n error[E0424]: expected value, found module `self`\n   --> $DIR/E0424.rs:7:9\n    |\n-LL |         self.bar();\n-   |         ^^^^ `self` value is a keyword only available in methods with `self` parameter\n+LL | /     fn foo() {\n+LL | |         self.bar();\n+   | |         ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+LL | |     }\n+   | |_____- this function doesn't have a `self` parameter\n \n error[E0424]: expected unit struct/variant or constant, found module `self`\n   --> $DIR/E0424.rs:12:9\n    |\n-LL |     let self = \"self\";\n-   |         ^^^^ `self` value is a keyword and may not be bound to variables or shadowed\n+LL | / fn main () {\n+LL | |     let self = \"self\";\n+   | |         ^^^^ `self` value is a keyword and may not be bound to variables or shadowed\n+LL | | }\n+   | |_- this function doesn't have a `self` parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "acd852103cae3d0b5219b7f1c50c5a60cd31778a", "filename": "src/test/ui/hygiene/unpretty-debug.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -17,7 +17,7 @@ fn y /* 0#0 */() { }\n /*\n Expansions:\n 0: parent: ExpnId(0), call_site_ctxt: #0, kind: Root\n-1: parent: ExpnId(0), call_site_ctxt: #0, kind: Macro(Bang, foo)\n+1: parent: ExpnId(0), call_site_ctxt: #0, kind: Macro(Bang, \"foo\")\n \n SyntaxContexts:\n #0: parent: #0, outer_mark: (ExpnId(0), Opaque)"}, {"sha": "2160df51a8375c92e8082ab2a60953b4f3a4137e", "filename": "src/test/ui/lint/redundant-semicolon/redundant-semi-proc-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -1,4 +1,4 @@\n-TokenStream [Ident { ident: \"fn\", span: #0 bytes(197..199) }, Ident { ident: \"span_preservation\", span: #0 bytes(200..217) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(217..219) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(227..230) }, Ident { ident: \"tst\", span: #0 bytes(231..234) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(235..236) }, Literal { lit: Lit { kind: Integer, symbol: 123, suffix: None }, span: Span { lo: BytePos(237), hi: BytePos(240), ctxt: #0 } }, Punct { ch: ';', spacing: Joint, span: #0 bytes(240..241) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(241..242) }, Ident { ident: \"match\", span: #0 bytes(288..293) }, Ident { ident: \"tst\", span: #0 bytes(294..297) }, Group { delimiter: Brace, stream: TokenStream [Literal { lit: Lit { kind: Integer, symbol: 123, suffix: None }, span: Span { lo: BytePos(482), hi: BytePos(485), ctxt: #0 } }, Punct { ch: '=', spacing: Joint, span: #0 bytes(486..488) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(486..488) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(489..491) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(491..492) }, Ident { ident: \"_\", span: #0 bytes(501..502) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(503..505) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(503..505) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(506..508) }], span: #0 bytes(298..514) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(514..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(516..517) }], span: #0 bytes(221..561) }]\n+TokenStream [Ident { ident: \"fn\", span: #0 bytes(197..199) }, Ident { ident: \"span_preservation\", span: #0 bytes(200..217) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(217..219) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(227..230) }, Ident { ident: \"tst\", span: #0 bytes(231..234) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(235..236) }, Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(237), hi: BytePos(240), ctxt: #0 } }, Punct { ch: ';', spacing: Joint, span: #0 bytes(240..241) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(241..242) }, Ident { ident: \"match\", span: #0 bytes(288..293) }, Ident { ident: \"tst\", span: #0 bytes(294..297) }, Group { delimiter: Brace, stream: TokenStream [Literal { lit: Lit { kind: Integer, symbol: \"123\", suffix: None }, span: Span { lo: BytePos(482), hi: BytePos(485), ctxt: #0 } }, Punct { ch: '=', spacing: Joint, span: #0 bytes(486..488) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(486..488) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(489..491) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(491..492) }, Ident { ident: \"_\", span: #0 bytes(501..502) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(503..505) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(503..505) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(506..508) }], span: #0 bytes(298..514) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(514..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(516..517) }], span: #0 bytes(221..561) }]\n error: unnecessary trailing semicolon\n   --> $DIR/redundant-semi-proc-macro.rs:9:19\n    |"}, {"sha": "329543114a610af024f2e64af610188782df3b2b", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9578272d681c8691ca2ff3f5c4230b491bc1c694/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=9578272d681c8691ca2ff3f5c4230b491bc1c694", "patch": "@@ -61,8 +61,14 @@ LL |         purr();\n error[E0424]: expected value, found module `self`\n   --> $DIR/issue-2356.rs:65:8\n    |\n-LL |     if self.whiskers > 3 {\n-   |        ^^^^ `self` value is a keyword only available in methods with `self` parameter\n+LL | /   fn meow() {\n+LL | |     if self.whiskers > 3 {\n+   | |        ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+LL | |\n+LL | |         println!(\"MEOW\");\n+LL | |     }\n+LL | |   }\n+   | |___- this function doesn't have a `self` parameter\n \n error[E0425]: cannot find function `grow_older` in this scope\n   --> $DIR/issue-2356.rs:72:5\n@@ -97,8 +103,12 @@ LL |     purr_louder();\n error[E0424]: expected value, found module `self`\n   --> $DIR/issue-2356.rs:92:5\n    |\n-LL |     self += 1;\n-   |     ^^^^ `self` value is a keyword only available in methods with `self` parameter\n+LL | / fn main() {\n+LL | |     self += 1;\n+   | |     ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+LL | |\n+LL | | }\n+   | |_- this function doesn't have a `self` parameter\n \n error: aborting due to 17 previous errors\n "}]}