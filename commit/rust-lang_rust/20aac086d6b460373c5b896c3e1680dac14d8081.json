{"sha": "20aac086d6b460373c5b896c3e1680dac14d8081", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYWFjMDg2ZDZiNDYwMzczYzViODk2YzNlMTY4MGRhYzE0ZDgwODE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-31T09:19:13Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-31T09:20:28Z"}, "message": "Simplify post-comment extraction", "tree": {"sha": "9a580e2d74cd6eec00a326374fcc95fcd473d087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a580e2d74cd6eec00a326374fcc95fcd473d087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20aac086d6b460373c5b896c3e1680dac14d8081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20aac086d6b460373c5b896c3e1680dac14d8081", "html_url": "https://github.com/rust-lang/rust/commit/20aac086d6b460373c5b896c3e1680dac14d8081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20aac086d6b460373c5b896c3e1680dac14d8081/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9df1dbe1aca8989d018ad85f66a1e84862c1032e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9df1dbe1aca8989d018ad85f66a1e84862c1032e", "html_url": "https://github.com/rust-lang/rust/commit/9df1dbe1aca8989d018ad85f66a1e84862c1032e"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "a0174c622d50846f2d901c61cacedf10a2e32dee", "filename": "src/chains.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/20aac086d6b460373c5b896c3e1680dac14d8081/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20aac086d6b460373c5b896c3e1680dac14d8081/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=20aac086d6b460373c5b896c3e1680dac14d8081", "patch": "@@ -68,7 +68,7 @@\n use comment::{rewrite_comment, CharClasses, FullCodeCharKind, RichChar};\n use config::IndentStyle;\n use expr::rewrite_call;\n-use lists::{extract_post_comment, extract_pre_comment, get_comment_end};\n+use lists::extract_pre_comment;\n use macros::convert_try_mac;\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n@@ -273,6 +273,20 @@ impl Chain {\n             s.chars().all(|c| c == '?')\n         }\n \n+        fn is_post_comment(s: &str) -> bool {\n+            let comment_start_index = s.chars().position(|c| c == '/');\n+            if comment_start_index.is_none() {\n+                return false;\n+            }\n+\n+            let newline_index = s.chars().position(|c| c == '\\n');\n+            if newline_index.is_none() {\n+                return true;\n+            }\n+\n+            comment_start_index.unwrap() < newline_index.unwrap()\n+        }\n+\n         fn handle_post_comment(\n             post_comment_span: Span,\n             post_comment_snippet: &str,\n@@ -287,25 +301,14 @@ impl Chain {\n                 // No post comment.\n                 return;\n             }\n-            // HACK: Treat `?`s as separators.\n             let trimmed_snippet = trim_tries(post_comment_snippet);\n-            let comment_end = get_comment_end(&trimmed_snippet, \"?\", \"\", false);\n-            let maybe_post_comment = extract_post_comment(&trimmed_snippet, comment_end, \"?\")\n-                .and_then(|comment| {\n-                    if comment.is_empty() {\n-                        None\n-                    } else {\n-                        Some((comment, comment_end))\n-                    }\n-                });\n-\n-            if let Some((post_comment, comment_end)) = maybe_post_comment {\n+            if is_post_comment(&trimmed_snippet) {\n                 children.push(ChainItem::comment(\n                     post_comment_span,\n-                    post_comment,\n+                    trimmed_snippet.trim().to_owned(),\n                     CommentPosition::Back,\n                 ));\n-                *prev_span_end = *prev_span_end + BytePos(comment_end as u32);\n+                *prev_span_end = post_comment_span.hi();\n             }\n         }\n "}]}