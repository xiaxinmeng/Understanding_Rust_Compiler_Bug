{"sha": "0610490c8dc71868ba886efbb8707cb77fc35928", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTA0OTBjOGRjNzE4NjhiYTg4NmVmYmI4NzA3Y2I3N2ZjMzU5Mjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-21T12:58:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-21T12:58:56Z"}, "message": "Assume constants can't fail to evaluate\n\nSee rust-lang/rust#81327 for the same change to cg_llvm", "tree": {"sha": "3c5643a07c11fa7a117f821bae0580dda67d79c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c5643a07c11fa7a117f821bae0580dda67d79c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0610490c8dc71868ba886efbb8707cb77fc35928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0610490c8dc71868ba886efbb8707cb77fc35928", "html_url": "https://github.com/rust-lang/rust/commit/0610490c8dc71868ba886efbb8707cb77fc35928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0610490c8dc71868ba886efbb8707cb77fc35928/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f39b64c8d6a1395c6029d59d50342f80cae04e", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f39b64c8d6a1395c6029d59d50342f80cae04e", "html_url": "https://github.com/rust-lang/rust/commit/74f39b64c8d6a1395c6029d59d50342f80cae04e"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "0be498172ae72d530bc29c9c9aae955bbfd63826", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0610490c8dc71868ba886efbb8707cb77fc35928/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0610490c8dc71868ba886efbb8707cb77fc35928/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=0610490c8dc71868ba886efbb8707cb77fc35928", "patch": "@@ -74,7 +74,12 @@ pub(crate) fn codegen_fn<'tcx>(\n             .is_uninhabited()\n     });\n \n-    if arg_uninhabited {\n+    if !crate::constant::check_constants(&mut fx) {\n+        fx.bcx\n+            .append_block_params_for_function_params(fx.block_map[START_BLOCK]);\n+        fx.bcx.switch_to_block(fx.block_map[START_BLOCK]);\n+        crate::trap::trap_unreachable(&mut fx, \"compilation should have been aborted\");\n+    } else if arg_uninhabited {\n         fx.bcx\n             .append_block_params_for_function_params(fx.block_map[START_BLOCK]);\n         fx.bcx.switch_to_block(fx.block_map[START_BLOCK]);\n@@ -205,8 +210,6 @@ pub(crate) fn verify_func(\n }\n \n fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Module>) {\n-    crate::constant::check_constants(fx);\n-\n     for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n         let block = fx.get_block(bb);\n         fx.bcx.switch_to_block(block);"}, {"sha": "f3e17774fdfa5184d90af8c71e117ee7c728705d", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0610490c8dc71868ba886efbb8707cb77fc35928/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0610490c8dc71868ba886efbb8707cb77fc35928/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=0610490c8dc71868ba886efbb8707cb77fc35928", "patch": "@@ -36,7 +36,8 @@ impl ConstantCx {\n     }\n }\n \n-pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, impl Module>) {\n+pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, impl Module>) -> bool {\n+    let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n         let const_ = fx.monomorphize(constant.literal);\n         match const_.val {\n@@ -46,6 +47,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, impl Module>) {\n                     fx.tcx\n                         .const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None)\n                 {\n+                    all_constants_ok = false;\n                     match err {\n                         ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {\n                             fx.tcx\n@@ -69,6 +71,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, impl Module>) {\n             | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n         }\n     }\n+    all_constants_ok\n }\n \n pub(crate) fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n@@ -134,14 +137,7 @@ pub(crate) fn codegen_constant<'tcx>(\n             {\n                 Ok(const_val) => const_val,\n                 Err(_) => {\n-                    fx.tcx\n-                        .sess\n-                        .span_err(constant.span, \"erroneous constant encountered\");\n-                    return crate::trap::trap_unreachable_ret_value(\n-                        fx,\n-                        fx.layout_of(const_.ty),\n-                        \"erroneous constant encountered\",\n-                    );\n+                    span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n                 }\n             }\n         }"}]}