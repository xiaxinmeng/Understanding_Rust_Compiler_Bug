{"sha": "4c5efea6fed6fdb30ffcbb49325c76e2856ac01d", "node_id": "C_kwDOAAsO6NoAKDRjNWVmZWE2ZmVkNmZkYjMwZmZjYmI0OTMyNWM3NmUyODU2YWMwMWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T22:56:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T22:56:11Z"}, "message": "Auto merge of #96517 - ferrocene:pa-files-related-to-test, r=Mark-Simulacrum\n\n[compiletest] Extract code to detect files related to a test into a different function\n\nIn the code that checks whether a test needs to be re-executed, compiletest checks the modification date of all the files related to the test. I need the list of files related to the test for other purposes inside compiletest, and while I could copy/paste the code `is_up_to_date` runs, that would produce incomplete results if more related files are added in the future.\n\nThis PR extracts the code to detect related files into a separate function, allowing the rest of compiletest to access the same data.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "6359f1dfd9a4372a1bb803abc60ba080e3032cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6359f1dfd9a4372a1bb803abc60ba080e3032cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c5efea6fed6fdb30ffcbb49325c76e2856ac01d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5efea6fed6fdb30ffcbb49325c76e2856ac01d", "html_url": "https://github.com/rust-lang/rust/commit/4c5efea6fed6fdb30ffcbb49325c76e2856ac01d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c5efea6fed6fdb30ffcbb49325c76e2856ac01d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dd8b420c027001e47b0d811a7e55e2fe1de1395", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd8b420c027001e47b0d811a7e55e2fe1de1395", "html_url": "https://github.com/rust-lang/rust/commit/4dd8b420c027001e47b0d811a7e55e2fe1de1395"}, {"sha": "62f984423c147189382fb0c097c52a1a13d83f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f984423c147189382fb0c097c52a1a13d83f34", "html_url": "https://github.com/rust-lang/rust/commit/62f984423c147189382fb0c097c52a1a13d83f34"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "3d11ea21acf9fccbb126c324ef6e8b10fe1248c8", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4c5efea6fed6fdb30ffcbb49325c76e2856ac01d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5efea6fed6fdb30ffcbb49325c76e2856ac01d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=4c5efea6fed6fdb30ffcbb49325c76e2856ac01d", "patch": "@@ -665,6 +665,40 @@ fn stamp(config: &Config, testpaths: &TestPaths, revision: Option<&str>) -> Path\n     output_base_dir(config, testpaths, revision).join(\"stamp\")\n }\n \n+fn files_related_to_test(\n+    config: &Config,\n+    testpaths: &TestPaths,\n+    props: &EarlyProps,\n+    revision: Option<&str>,\n+) -> Vec<PathBuf> {\n+    let mut related = vec![];\n+\n+    if testpaths.file.is_dir() {\n+        // run-make tests use their individual directory\n+        for entry in WalkDir::new(&testpaths.file) {\n+            let path = entry.unwrap().into_path();\n+            if path.is_file() {\n+                related.push(path);\n+            }\n+        }\n+    } else {\n+        related.push(testpaths.file.clone());\n+    }\n+\n+    for aux in &props.aux {\n+        let path = testpaths.file.parent().unwrap().join(\"auxiliary\").join(aux);\n+        related.push(path);\n+    }\n+\n+    // UI test files.\n+    for extension in UI_EXTENSIONS {\n+        let path = expected_output_path(testpaths, revision, &config.compare_mode, extension);\n+        related.push(path);\n+    }\n+\n+    related\n+}\n+\n fn is_up_to_date(\n     config: &Config,\n     testpaths: &TestPaths,\n@@ -686,20 +720,10 @@ fn is_up_to_date(\n \n     // Check timestamps.\n     let mut inputs = inputs.clone();\n-    // Use `add_dir` to account for run-make tests, which use their individual directory\n-    inputs.add_dir(&testpaths.file);\n-\n-    for aux in &props.aux {\n-        let path = testpaths.file.parent().unwrap().join(\"auxiliary\").join(aux);\n+    for path in files_related_to_test(config, testpaths, props, revision) {\n         inputs.add_path(&path);\n     }\n \n-    // UI test files.\n-    for extension in UI_EXTENSIONS {\n-        let path = &expected_output_path(testpaths, revision, &config.compare_mode, extension);\n-        inputs.add_path(path);\n-    }\n-\n     inputs < Stamp::from_path(&stamp_name)\n }\n "}]}