{"sha": "5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "node_id": "C_kwDOAAsO6NoAKDVkM2M2ZDZjODNlZGM0ZWYyNDVlNzczOTdjOGUzMmQzZWU0NTNiNjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-30T01:02:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-30T01:02:24Z"}, "message": "Auto merge of #98691 - matthiaskrgr:rollup-ymsa64p, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #96727 (Make TAIT behave exactly like RPIT)\n - #98681 (rustdoc-json: Make default value of blanket impl assoc types work)\n - #98682 (add tests for ICE 94432)\n - #98683 (add test for ice 68875)\n - #98685 (Replace `sort_modules_alphabetically` boolean with enum)\n - #98687 (add test for 47814)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ce333ccdb674699e75945489d85d18b87f8be9de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce333ccdb674699e75945489d85d18b87f8be9de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "html_url": "https://github.com/rust-lang/rust/commit/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf45371f262e184b4a77adea88c8ac01ac79759b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf45371f262e184b4a77adea88c8ac01ac79759b", "html_url": "https://github.com/rust-lang/rust/commit/bf45371f262e184b4a77adea88c8ac01ac79759b"}, {"sha": "943c6c74440584eb789439e96e3365ba401c0d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/943c6c74440584eb789439e96e3365ba401c0d7c", "html_url": "https://github.com/rust-lang/rust/commit/943c6c74440584eb789439e96e3365ba401c0d7c"}], "stats": {"total": 739, "additions": 475, "deletions": 264}, "files": [{"sha": "cc36d6a0a4fbef9ca772ad793972f5691332b60f", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -5,7 +5,7 @@ use hir::{HirId, OpaqueTyOrigin};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n-use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{\n@@ -44,30 +44,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n         body_id: HirId,\n         span: Span,\n-        code: ObligationCauseCode<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> InferOk<'tcx, Ty<'tcx>> {\n         if !ty.has_opaque_types() {\n             return InferOk { value: ty, obligations: vec![] };\n         }\n         let mut obligations = vec![];\n+        let replace_opaque_type = |def_id| self.opaque_type_origin(def_id, span).is_some();\n         let value = ty.fold_with(&mut ty::fold::BottomUpFolder {\n             tcx: self.tcx,\n             lt_op: |lt| lt,\n             ct_op: |ct| ct,\n             ty_op: |ty| match *ty.kind() {\n-                // Closures can't create hidden types for opaque types of their parent, as they\n-                // do not have all the outlives information available. Also `type_of` looks for\n-                // hidden types in the owner (so the closure's parent), so it would not find these\n-                // definitions.\n-                ty::Opaque(def_id, _substs)\n-                    if matches!(\n-                        self.opaque_type_origin(def_id, span),\n-                        Some(OpaqueTyOrigin::FnReturn(..))\n-                    ) =>\n-                {\n-                    let span = if span.is_dummy() { self.tcx.def_span(def_id) } else { span };\n-                    let cause = ObligationCause::new(span, body_id, code.clone());\n+                ty::Opaque(def_id, _substs) if replace_opaque_type(def_id) => {\n+                    let def_span = self.tcx.def_span(def_id);\n+                    let span = if span.contains(def_span) { def_span } else { span };\n+                    let code = traits::ObligationCauseCode::OpaqueReturnType(None);\n+                    let cause = ObligationCause::new(span, body_id, code);\n                     // FIXME(compiler-errors): We probably should add a new TypeVariableOriginKind\n                     // for opaque types, and then use that kind to fix the spans for type errors\n                     // that we see later on."}, {"sha": "6222dbb40741c1d060cb98b88b673b68c18a4d16", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -95,8 +95,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         fcx.register_infer_ok_obligations(fcx.infcx.replace_opaque_types_with_inference_vars(\n             declared_ret_ty,\n             body.value.hir_id,\n-            DUMMY_SP,\n-            traits::ObligationCauseCode::OpaqueReturnType(None),\n+            decl.output.span(),\n             param_env,\n         ));\n     // If we replaced declared_ret_ty with infer vars, then we must be infering"}, {"sha": "131e594ed94f7dcc4ae4cb099a8185bde18c34b0", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -10,12 +10,10 @@ use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_infer::infer::{InferOk, InferResult};\n-use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n-use rustc_span::DUMMY_SP;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::ArgKind;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n@@ -429,14 +427,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // in this binder we are creating.\n         assert!(!expected_sig.sig.skip_binder().has_vars_bound_above(ty::INNERMOST));\n         let bound_sig = expected_sig.sig.map_bound(|sig| {\n-            let output = self.hide_parent_opaque_types(\n-                sig.output(),\n-                expected_sig.cause_span.unwrap_or(DUMMY_SP),\n-                body.id().hir_id,\n-            );\n             self.tcx.mk_fn_sig(\n                 sig.inputs().iter().cloned(),\n-                output,\n+                sig.output(),\n                 sig.c_variadic,\n                 hir::Unsafety::Normal,\n                 Abi::RustCall,\n@@ -608,23 +601,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // function.\n                 Some(hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Fn)) => {\n                     debug!(\"closure is async fn body\");\n-                    self.deduce_future_output_from_obligations(expr_def_id).unwrap_or_else(|| {\n-                        // AFAIK, deducing the future output\n-                        // always succeeds *except* in error cases\n-                        // like #65159. I'd like to return Error\n-                        // here, but I can't because I can't\n-                        // easily (and locally) prove that we\n-                        // *have* reported an\n-                        // error. --nikomatsakis\n-                        astconv.ty_infer(None, decl.output.span())\n-                    })\n+                    self.deduce_future_output_from_obligations(expr_def_id, body.id().hir_id)\n+                        .unwrap_or_else(|| {\n+                            // AFAIK, deducing the future output\n+                            // always succeeds *except* in error cases\n+                            // like #65159. I'd like to return Error\n+                            // here, but I can't because I can't\n+                            // easily (and locally) prove that we\n+                            // *have* reported an\n+                            // error. --nikomatsakis\n+                            astconv.ty_infer(None, decl.output.span())\n+                        })\n                 }\n \n                 _ => astconv.ty_infer(None, decl.output.span()),\n             },\n         };\n-        let supplied_return =\n-            self.hide_parent_opaque_types(supplied_return, decl.output.span(), body.id().hir_id);\n \n         let result = ty::Binder::bind_with_vars(\n             self.tcx.mk_fn_sig(\n@@ -645,67 +637,75 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         result\n     }\n \n-    fn hide_parent_opaque_types(&self, ty: Ty<'tcx>, span: Span, body_id: hir::HirId) -> Ty<'tcx> {\n-        let InferOk { value, obligations } = self.replace_opaque_types_with_inference_vars(\n-            ty,\n-            body_id,\n-            span,\n-            ObligationCauseCode::MiscObligation,\n-            self.param_env,\n-        );\n-        self.register_predicates(obligations);\n-        value\n-    }\n-\n     /// Invoked when we are translating the generator that results\n     /// from desugaring an `async fn`. Returns the \"sugared\" return\n     /// type of the `async fn` -- that is, the return type that the\n     /// user specified. The \"desugared\" return type is an `impl\n     /// Future<Output = T>`, so we do this by searching through the\n     /// obligations to extract the `T`.\n     #[instrument(skip(self), level = \"debug\")]\n-    fn deduce_future_output_from_obligations(&self, expr_def_id: DefId) -> Option<Ty<'tcx>> {\n+    fn deduce_future_output_from_obligations(\n+        &self,\n+        expr_def_id: DefId,\n+        body_id: hir::HirId,\n+    ) -> Option<Ty<'tcx>> {\n         let ret_coercion = self.ret_coercion.as_ref().unwrap_or_else(|| {\n             span_bug!(self.tcx.def_span(expr_def_id), \"async fn generator outside of a fn\")\n         });\n \n         let ret_ty = ret_coercion.borrow().expected_ty();\n         let ret_ty = self.inh.infcx.shallow_resolve(ret_ty);\n-        let (def_id, substs) = match *ret_ty.kind() {\n-            ty::Opaque(def_id, substs) => (def_id, substs),\n+\n+        let get_future_output = |predicate: ty::Predicate<'tcx>, span| {\n+            // Search for a pending obligation like\n+            //\n+            // `<R as Future>::Output = T`\n+            //\n+            // where R is the return type we are expecting. This type `T`\n+            // will be our output.\n+            let bound_predicate = predicate.kind();\n+            if let ty::PredicateKind::Projection(proj_predicate) = bound_predicate.skip_binder() {\n+                self.deduce_future_output_from_projection(\n+                    span,\n+                    bound_predicate.rebind(proj_predicate),\n+                )\n+            } else {\n+                None\n+            }\n+        };\n+\n+        let output_ty = match *ret_ty.kind() {\n+            ty::Infer(ty::TyVar(ret_vid)) => {\n+                self.obligations_for_self_ty(ret_vid).find_map(|(_, obligation)| {\n+                    get_future_output(obligation.predicate, obligation.cause.span)\n+                })?\n+            }\n+            ty::Opaque(def_id, substs) => self\n+                .tcx\n+                .bound_explicit_item_bounds(def_id)\n+                .transpose_iter()\n+                .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+                .find_map(|(p, s)| get_future_output(p.subst(self.tcx, substs), s.0))?,\n             ty::Error(_) => return None,\n             _ => span_bug!(\n                 self.tcx.def_span(expr_def_id),\n                 \"async fn generator return type not an inference variable\"\n             ),\n         };\n \n-        let item_bounds = self.tcx.bound_explicit_item_bounds(def_id);\n-\n-        // Search for a pending obligation like\n-        //\n-        // `<R as Future>::Output = T`\n-        //\n-        // where R is the return type we are expecting. This type `T`\n-        // will be our output.\n-        let output_ty = item_bounds\n-            .transpose_iter()\n-            .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-            .find_map(|(predicate, span)| {\n-                let bound_predicate = predicate.subst(self.tcx, substs).kind();\n-                if let ty::PredicateKind::Projection(proj_predicate) = bound_predicate.skip_binder()\n-                {\n-                    self.deduce_future_output_from_projection(\n-                        span.0,\n-                        bound_predicate.rebind(proj_predicate),\n-                    )\n-                } else {\n-                    None\n-                }\n-            });\n+        // async fn that have opaque types in their return type need to redo the conversion to inference variables\n+        // as they fetch the still opaque version from the signature.\n+        let InferOk { value: output_ty, obligations } = self\n+            .replace_opaque_types_with_inference_vars(\n+                output_ty,\n+                body_id,\n+                self.tcx.def_span(expr_def_id),\n+                self.param_env,\n+            );\n+        self.register_predicates(obligations);\n \n         debug!(\"deduce_future_output_from_obligations: output_ty={:?}\", output_ty);\n-        output_ty\n+        Some(output_ty)\n     }\n \n     /// Given a projection like"}, {"sha": "50d154dd278a1faaf08f02864cc28a8ea1c26fe4", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -218,12 +218,9 @@ pub(crate) struct RenderOptions {\n     ///\n     /// Be aware: This option can come both from the CLI and from crate attributes!\n     pub(crate) playground_url: Option<String>,\n-    /// Whether to sort modules alphabetically on a module page instead of using declaration order.\n-    /// `true` by default.\n-    //\n-    // FIXME(misdreavus): the flag name is `--sort-modules-by-appearance` but the meaning is\n-    // inverted once read.\n-    pub(crate) sort_modules_alphabetically: bool,\n+    /// What sorting mode to use for module pages.\n+    /// `ModuleSorting::Alphabetical` by default.\n+    pub(crate) module_sorting: ModuleSorting,\n     /// List of themes to extend the docs with. Original argument name is included to assist in\n     /// displaying errors if it fails a theme check.\n     pub(crate) themes: Vec<StylePath>,\n@@ -281,6 +278,12 @@ pub(crate) struct RenderOptions {\n     pub(crate) no_emit_shared: bool,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub(crate) enum ModuleSorting {\n+    DeclarationOrder,\n+    Alphabetical,\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub(crate) enum EmitType {\n     Unversioned,\n@@ -650,7 +653,11 @@ impl Options {\n         let proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);\n         let playground_url = matches.opt_str(\"playground-url\");\n         let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n-        let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n+        let module_sorting = if matches.opt_present(\"sort-modules-by-appearance\") {\n+            ModuleSorting::DeclarationOrder\n+        } else {\n+            ModuleSorting::Alphabetical\n+        };\n         let resource_suffix = matches.opt_str(\"resource-suffix\").unwrap_or_default();\n         let enable_minification = !matches.opt_present(\"disable-minification\");\n         let markdown_no_toc = matches.opt_present(\"markdown-no-toc\");\n@@ -731,7 +738,7 @@ impl Options {\n                 external_html,\n                 id_map,\n                 playground_url,\n-                sort_modules_alphabetically,\n+                module_sorting,\n                 themes,\n                 extension_css,\n                 extern_html_root_urls,"}, {"sha": "2ed7a6f1bb144511d97aefabba047ff5423bff80", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -22,7 +22,7 @@ use super::{\n };\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate};\n-use crate::config::RenderOptions;\n+use crate::config::{ModuleSorting, RenderOptions};\n use crate::docfs::{DocFS, PathError};\n use crate::error::Error;\n use crate::formats::cache::Cache;\n@@ -95,7 +95,7 @@ pub(crate) struct SharedContext<'tcx> {\n     created_dirs: RefCell<FxHashSet<PathBuf>>,\n     /// This flag indicates whether listings of modules (in the side bar and documentation itself)\n     /// should be ordered alphabetically or in order of appearance (in the source code).\n-    pub(super) sort_modules_alphabetically: bool,\n+    pub(super) module_sorting: ModuleSorting,\n     /// Additional CSS files to be added to the generated docs.\n     pub(crate) style_files: Vec<StylePath>,\n     /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n@@ -280,10 +280,13 @@ impl<'tcx> Context<'tcx> {\n             }\n         }\n \n-        if self.shared.sort_modules_alphabetically {\n-            for items in map.values_mut() {\n-                items.sort();\n+        match self.shared.module_sorting {\n+            ModuleSorting::Alphabetical => {\n+                for items in map.values_mut() {\n+                    items.sort();\n+                }\n             }\n+            ModuleSorting::DeclarationOrder => {}\n         }\n         map\n     }\n@@ -394,7 +397,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             external_html,\n             id_map,\n             playground_url,\n-            sort_modules_alphabetically,\n+            module_sorting,\n             themes: style_files,\n             default_settings,\n             extension_css,\n@@ -476,7 +479,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             issue_tracker_base_url,\n             layout,\n             created_dirs: Default::default(),\n-            sort_modules_alphabetically,\n+            module_sorting,\n             style_files,\n             resource_suffix,\n             static_root_path,"}, {"sha": "0fe99463f1d6e2fd2fcd9236d6247809f58b8a34", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -23,6 +23,7 @@ use super::{\n     AssocItemLink, Context, ImplRenderingParameters,\n };\n use crate::clean;\n+use crate::config::ModuleSorting;\n use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n@@ -246,8 +247,11 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n         compare_names(lhs.as_str(), rhs.as_str())\n     }\n \n-    if cx.shared.sort_modules_alphabetically {\n-        indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2, cx.tcx()));\n+    match cx.shared.module_sorting {\n+        ModuleSorting::Alphabetical => {\n+            indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2, cx.tcx()));\n+        }\n+        ModuleSorting::DeclarationOrder => {}\n     }\n     // This call is to remove re-export duplicates in cases such as:\n     //"}, {"sha": "316554808c2018bed1bd196c1e09f2373b9125da", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -255,7 +255,7 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         AssocTypeItem(t, b) => ItemEnum::AssocType {\n             generics: t.generics.into_tcx(tcx),\n             bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n-            default: t.item_type.map(|ty| ty.into_tcx(tcx)),\n+            default: Some(t.item_type.unwrap_or(t.type_).into_tcx(tcx)),\n         },\n         // `convert_item` early returns `None` for striped items and keywords.\n         StrippedItem(_) | KeywordItem(_) => unreachable!(),"}, {"sha": "edf1a9fe2fcf9f89ed180ebbfa6508075afa4a3f", "filename": "src/test/rustdoc-json/blanket_impls.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Frustdoc-json%2Fblanket_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Frustdoc-json%2Fblanket_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fblanket_impls.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -0,0 +1,9 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/98658>\n+\n+#![no_std]\n+\n+// @has blanket_impls.json\n+// @has - \"$.index[*][?(@.name=='Error')].kind\" \\\"assoc_type\\\"\n+// @has - \"$.index[*][?(@.name=='Error')].inner.default.kind\" \\\"resolved_path\\\"\n+// @has - \"$.index[*][?(@.name=='Error')].inner.default.inner.name\" \\\"Infallible\\\"\n+pub struct ForBlanketTryFromImpl;"}, {"sha": "4c36289f47b857ac0e5c50ae4fa9df26d9dc7863", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -30,7 +30,7 @@ impl Thing for AssocNoCopy {\n     type Out = Box<dyn Bar<Assoc: Copy>>;\n \n     fn func() -> Self::Out {\n-        Box::new(AssocNoCopy)\n         //~^ ERROR the trait bound `String: Copy` is not satisfied\n+        Box::new(AssocNoCopy)\n     }\n }"}, {"sha": "a32ab453152a0b4663c06788b189aaba8cd23431", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:33:9\n+  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:32:18\n    |\n-LL |         Box::new(AssocNoCopy)\n-   |         ^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n-   |\n-   = note: required for the cast from `AssocNoCopy` to the object type `dyn Bar<Assoc = <AssocNoCopy as Thing>::Out::{opaque#0}>`\n+LL |     fn func() -> Self::Out {\n+   |                  ^^^^^^^^^ the trait `Copy` is not implemented for `String`\n \n error: aborting due to previous error\n "}, {"sha": "90e8a3bc2f2f4b36d5d53032d3fb2e4b12676b33", "filename": "src/test/ui/associated-types/issue-47814.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47814.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -0,0 +1,13 @@\n+struct ArpIPv4<'a> {\n+    s: &'a u8\n+}\n+\n+impl<'a> ArpIPv4<'a> {\n+    const LENGTH: usize = 20;\n+\n+    pub fn to_buffer() -> [u8; Self::LENGTH] { //~ ERROR generic `Self` types are currently not permitted in anonymous constants\n+        unimplemented!()\n+    }\n+}\n+\n+pub fn main() {}"}, {"sha": "2e4ddb81166b404ff621eb97cf57b1e532811ed5", "filename": "src/test/ui/associated-types/issue-47814.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47814.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -0,0 +1,14 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/issue-47814.rs:8:32\n+   |\n+LL |     pub fn to_buffer() -> [u8; Self::LENGTH] {\n+   |                                ^^^^\n+   |\n+note: not a concrete type\n+  --> $DIR/issue-47814.rs:5:10\n+   |\n+LL | impl<'a> ArpIPv4<'a> {\n+   |          ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1dbf5db6c32ed9bdae77c7c18787f270c9d003db", "filename": "src/test/ui/async-await/issues/issue-65159.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -6,6 +6,7 @@ async fn copy() -> Result<()>\n //~^ ERROR this enum takes 2 generic arguments\n {\n     Ok(())\n+    //~^ ERROR type annotations needed\n }\n \n fn main() { }"}, {"sha": "9918f569cbc893528d5cbc7f4f0b69bd2753d43e", "filename": "src/test/ui/async-await/issues/issue-65159.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -16,6 +16,18 @@ help: add missing generic argument\n LL | async fn copy() -> Result<(), E>\n    |                             +++\n \n-error: aborting due to previous error\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-65159.rs:8:5\n+   |\n+LL |     Ok(())\n+   |     ^^ cannot infer type of the type parameter `E` declared on the enum `Result`\n+   |\n+help: consider specifying the generic arguments\n+   |\n+LL |     Ok::<(), E>(())\n+   |       +++++++++\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0107, E0282.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "2c8a700bc2ea37cc53343d5edc97d9d7eaa116df", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -17,6 +17,7 @@ async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n     //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n     //~^^ ERROR this struct takes 1 generic argument but 0 generic arguments were supplied\n     LockedMarket(generator.lock().unwrap().buy())\n+    //~^ ERROR cannot return value referencing temporary\n }\n \n struct LockedMarket<T>(T);"}, {"sha": "4bd0667304397e0a7b8eb91280cc183c52bcf03b", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -7,7 +7,7 @@ LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_>\n    |                                                           expected 0 lifetime arguments\n    |\n note: struct defined here, with 0 lifetime parameters\n-  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:22:8\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n    |\n LL | struct LockedMarket<T>(T);\n    |        ^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_>\n    |                                                           ^^^^^^^^^^^^ expected 1 generic argument\n    |\n note: struct defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:22:8\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n    |\n LL | struct LockedMarket<T>(T);\n    |        ^^^^^^^^^^^^ -\n@@ -28,6 +28,16 @@ help: add missing generic argument\n LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_, T> {\n    |                                                                          +++\n \n-error: aborting due to 2 previous errors\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:19:5\n+   |\n+LL |     LockedMarket(generator.lock().unwrap().buy())\n+   |     ^^^^^^^^^^^^^-------------------------^^^^^^^\n+   |     |            |\n+   |     |            temporary value created here\n+   |     returns a value referencing data owned by the current function\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0107, E0515.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "f53ed53f73c4987aac37a999e5b61a39aef5ece5", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -29,13 +29,10 @@ LL |     T: Generator<ResumeTy, Yield = ()>,\n    |                            ^^^^^^^^^^ required by this bound in `std::future::from_generator`\n \n error[E0280]: the requirement `<impl Future<Output = u32> as Future>::Output == u32` is not satisfied\n-  --> $DIR/async.rs:7:29\n+  --> $DIR/async.rs:7:25\n    |\n-LL |   async fn foo(x: u32) -> u32 {\n-   |  _____________________________^\n-LL | |     x\n-LL | | }\n-   | |_^\n+LL | async fn foo(x: u32) -> u32 {\n+   |                         ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2ef7cfdbe2735f51f58f0150cfeec25d5de2f24b", "filename": "src/test/ui/const-generics/ice-68875.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fconst-generics%2Fice-68875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fconst-generics%2Fice-68875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fice-68875.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -0,0 +1,11 @@\n+// check-fail\n+\n+struct DataWrapper<'a> {\n+    data: &'a [u8; Self::SIZE], //~ ERROR generic `Self` types are currently not permitted in anonymous constants\n+}\n+\n+impl DataWrapper<'_> {\n+    const SIZE: usize = 14;\n+}\n+\n+pub fn main() {}"}, {"sha": "1db62c57fd43825e14aea2f1b2c942081e5be0df", "filename": "src/test/ui/const-generics/ice-68875.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fconst-generics%2Fice-68875.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fconst-generics%2Fice-68875.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fice-68875.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -0,0 +1,8 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/ice-68875.rs:4:20\n+   |\n+LL |     data: &'a [u8; Self::SIZE],\n+   |                    ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "50844fdc14d942785d7b567a0895c8ca84c6de39", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,10 +1,10 @@\n error[E0271]: type mismatch resolving `<Empty<_> as Stream>::Item == Repr`\n-  --> $DIR/issue-89008.rs:40:9\n+  --> $DIR/issue-89008.rs:39:43\n    |\n LL |     fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> {\n-   |                        ---- this type parameter\n-LL |         async {empty()}\n-   |         ^^^^^^^^^^^^^^^ type mismatch resolving `<Empty<_> as Stream>::Item == Repr`\n+   |                        ----               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Empty<_> as Stream>::Item == Repr`\n+   |                        |\n+   |                        this type parameter\n    |\n note: expected this to be `()`\n   --> $DIR/issue-89008.rs:18:17"}, {"sha": "d0709e2d2a46c63cf98905a1d77869234147c41f", "filename": "src/test/ui/generics/issue-94432-garbage-ice.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fgenerics%2Fissue-94432-garbage-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fgenerics%2Fissue-94432-garbage-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-94432-garbage-ice.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -0,0 +1,10 @@\n+// check-fail\n+// dont-check-compiler-stdout\n+// dont-check-compiler-stderr\n+\n+fn\ufffda<e>(){fn\ufffdp(){e}} //~ ERROR unknown start of token: \\u{fffd}\n+//~^ ERROR unknown start of token: \\u{fffd}\n+//~^^ ERROR can't use generic parameters from outer function [E0401]\n+//~^^^ WARN type parameter `e` should have an upper camel case name\n+\n+fn main(){}"}, {"sha": "22ff7ffa23cb3f9f1dea8d135b84457c27850057", "filename": "src/test/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -11,9 +11,9 @@ impl<S: Default> Bar for S {\n \n     fn foo<T: Default>() -> Self::E {\n         //~^ ERROR impl has stricter requirements than trait\n-        (S::default(), T::default())\n-        //~^ ERROR the trait bound `S: Copy` is not satisfied in `(S, T)` [E0277]\n+        //~| ERROR the trait bound `S: Copy` is not satisfied in `(S, T)` [E0277]\n         //~| ERROR the trait bound `T: Copy` is not satisfied in `(S, T)` [E0277]\n+        (S::default(), T::default())\n     }\n }\n "}, {"sha": "8912cce1b4b5ba068616f626381b6dec83655107", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -8,10 +8,10 @@ LL |     fn foo<T: Default>() -> Self::E {\n    |               ^^^^^^^ impl has extra requirement `T: Default`\n \n error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:14:9\n+  --> $DIR/issue-55872-1.rs:12:29\n    |\n-LL |         (S::default(), T::default())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n+LL |     fn foo<T: Default>() -> Self::E {\n+   |                             ^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n    |\n    = note: required because it appears within the type `(S, T)`\n help: consider further restricting this bound\n@@ -20,10 +20,10 @@ LL | impl<S: Default + std::marker::Copy> Bar for S {\n    |                 +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:14:9\n+  --> $DIR/issue-55872-1.rs:12:29\n    |\n-LL |         (S::default(), T::default())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n+LL |     fn foo<T: Default>() -> Self::E {\n+   |                             ^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n    |\n    = note: required because it appears within the type `(S, T)`\n help: consider further restricting this bound"}, {"sha": "3ffce85e61ba4fd079c86c35a587f189f3dbd781", "filename": "src/test/ui/impl-trait/issue-55872-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -12,8 +12,8 @@ pub trait Bar {\n impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n     fn foo<T>() -> Self::E {\n+    //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied [E0277]\n         async {}\n-        //~^ ERROR the trait bound `impl Future<Output = ()>: Copy` is not satisfied [E0277]\n     }\n }\n "}, {"sha": "6ab540e87516298b7f8bbfabf4facb9cb0e0eacc", "filename": "src/test/ui/impl-trait/issue-55872-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `impl Future<Output = ()>: Copy` is not satisfied\n-  --> $DIR/issue-55872-3.rs:15:9\n+  --> $DIR/issue-55872-3.rs:14:20\n    |\n-LL |         async {}\n-   |         ^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n+LL |     fn foo<T>() -> Self::E {\n+   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = ()>`\n \n error: aborting due to previous error\n "}, {"sha": "8169cfafac71127665f97b6138b61fea1188f89b", "filename": "src/test/ui/impl-trait/issues/issue-70877.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -13,7 +13,7 @@ impl Iterator for Bar {\n     type Item = FooItem;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        Some(Box::new(quux)) //~ ERROR mismatched types\n+        Some(Box::new(quux))\n     }\n }\n "}, {"sha": "8813bff3c353e3c656efc75d246b37af50949431", "filename": "src/test/ui/impl-trait/issues/issue-70877.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,17 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-70877.rs:16:9\n-   |\n-LL | type FooRet = impl std::fmt::Debug;\n-   |               -------------------- the expected opaque type\n-...\n-LL |     fn next(&mut self) -> Option<Self::Item> {\n-   |                           ------------------ expected `Option<Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> FooRet + 'static)>>` because of return type\n-LL |         Some(Box::new(quux))\n-   |         ^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found fn item\n-   |\n-   = note: expected enum `Option<Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> FooRet + 'static)>>`\n-              found enum `Option<Box<for<'r> fn(&'r (dyn ToString + 'r)) -> FooRet {quux}>>`\n-\n error: opaque type's hidden type cannot be another opaque type from the same scope\n   --> $DIR/issue-70877.rs:31:12\n    |\n@@ -29,6 +15,5 @@ note: opaque type being used as hidden type\n LL | type FooRet = impl std::fmt::Debug;\n    |               ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "002e4cde40abe62cb380982e78d1a5b00e56f312", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -7,7 +7,8 @@ type F = impl core::future::Future<Output = u8>;\n struct Bug {\n     V1: [(); {\n         fn concrete_use() -> F {\n-            async {} //~ ERROR type mismatch\n+            //~^ ERROR type mismatch\n+            async {}\n         }\n         let f: F = async { 1 };\n         //~^ ERROR `async` blocks are not allowed in constants"}, {"sha": "690d6abc76663cf7cacf3d993fa7a94c7493b846", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `async` blocks are not allowed in constants\n-  --> $DIR/issue-78722.rs:12:20\n+  --> $DIR/issue-78722.rs:13:20\n    |\n LL |         let f: F = async { 1 };\n    |                    ^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |         let f: F = async { 1 };\n    = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/issue-78722.rs:12:13\n+  --> $DIR/issue-78722.rs:13:13\n    |\n LL |         let f: F = async { 1 };\n    |             ^ constants cannot evaluate destructors\n@@ -17,10 +17,10 @@ LL |     }],\n    |     - value is dropped here\n \n error[E0271]: type mismatch resolving `<impl Future<Output = ()> as Future>::Output == u8`\n-  --> $DIR/issue-78722.rs:10:13\n+  --> $DIR/issue-78722.rs:9:30\n    |\n-LL |             async {}\n-   |             ^^^^^^^^ expected `()`, found `u8`\n+LL |         fn concrete_use() -> F {\n+   |                              ^ expected `()`, found `u8`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e76443a65dbf9ef2f82e3892796a256238d574fd", "filename": "src/test/ui/impl-trait/issues/issue-83919.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -19,8 +19,9 @@ impl Foo for Implementor {\n     type Fut = impl Future<Output=Self::Fut2>;\n \n     fn get_fut(&self) -> Self::Fut {\n+    //~^ ERROR `{integer}` is not a future\n         async move {\n-            42 //~^ ERROR `{integer}` is not a future\n+            42\n             // 42 does not impl Future and rustc does actually point out the error,\n             // but rustc used to panic.\n             // Putting a valid Future here always worked fine."}, {"sha": "d39dcf7fbf5d94ef65321e251731eeb8519901aa", "filename": "src/test/ui/impl-trait/issues/issue-83919.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,13 +1,8 @@\n error[E0277]: `{integer}` is not a future\n-  --> $DIR/issue-83919.rs:22:9\n+  --> $DIR/issue-83919.rs:21:26\n    |\n-LL | /         async move {\n-LL | |             42\n-LL | |             // 42 does not impl Future and rustc does actually point out the error,\n-LL | |             // but rustc used to panic.\n-LL | |             // Putting a valid Future here always worked fine.\n-LL | |         }\n-   | |_________^ `{integer}` is not a future\n+LL |     fn get_fut(&self) -> Self::Fut {\n+   |                          ^^^^^^^^^ `{integer}` is not a future\n    |\n    = help: the trait `Future` is not implemented for `{integer}`\n    = note: {integer} must be a future or must implement `IntoFuture` to be awaited"}, {"sha": "fcc077ec18eced86cd7f2807c85a3322bd5dcc97", "filename": "src/test/ui/impl-trait/nested-return-type2-tait2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -24,8 +24,8 @@ type Traitable = impl Trait<Assoc = Sendable>;\n // var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n // type does not implement `Duh`, even if its hidden type does. So we error out.\n fn foo() -> Traitable {\n-    || 42\n     //~^ ERROR `Sendable: Duh` is not satisfied\n+    || 42\n }\n \n fn main() {"}, {"sha": "3e19ad7b5c6cffc055fbda2f60bd31c8a8b18909", "filename": "src/test/ui/impl-trait/nested-return-type2-tait2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `Sendable: Duh` is not satisfied\n-  --> $DIR/nested-return-type2-tait2.rs:27:5\n+  --> $DIR/nested-return-type2-tait2.rs:26:13\n    |\n-LL |     || 42\n-   |     ^^^^^ the trait `Duh` is not implemented for `Sendable`\n+LL | fn foo() -> Traitable {\n+   |             ^^^^^^^^^ the trait `Duh` is not implemented for `Sendable`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait2.rs:27:5: 27:10]`\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait2.rs:28:5: 28:10]`\n   --> $DIR/nested-return-type2-tait2.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {"}, {"sha": "665c7a8cab91f66094680109c6d345570660e2f9", "filename": "src/test/ui/impl-trait/nested-return-type2-tait3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -23,8 +23,8 @@ type Traitable = impl Trait<Assoc = impl Send>;\n // var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n // type does not implement `Duh`, even if its hidden type does. So we error out.\n fn foo() -> Traitable {\n-    || 42\n     //~^ ERROR `impl Send: Duh` is not satisfied\n+    || 42\n }\n \n fn main() {"}, {"sha": "6185e4872a5e368b49c05c66d37e6fa0fb1cc188", "filename": "src/test/ui/impl-trait/nested-return-type2-tait3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `impl Send: Duh` is not satisfied\n-  --> $DIR/nested-return-type2-tait3.rs:26:5\n+  --> $DIR/nested-return-type2-tait3.rs:25:13\n    |\n-LL |     || 42\n-   |     ^^^^^ the trait `Duh` is not implemented for `impl Send`\n+LL | fn foo() -> Traitable {\n+   |             ^^^^^^^^^ the trait `Duh` is not implemented for `impl Send`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait3.rs:26:5: 26:10]`\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait3.rs:27:5: 27:10]`\n   --> $DIR/nested-return-type2-tait3.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {"}, {"sha": "95239e2e341c83dc07db154320e93d31fb82bf4a", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -7,8 +7,19 @@ fn foo(b: bool) -> Foo {\n         vec![42_i32]\n     } else {\n         std::iter::empty().collect()\n-        //~^ ERROR `Foo` cannot be built from an iterator over elements of type `_`\n     }\n }\n \n+type Bar = impl std::fmt::Debug;\n+\n+fn bar(b: bool) -> Bar {\n+    let x: Bar = if b {\n+        vec![42_i32]\n+    } else {\n+        std::iter::empty().collect()\n+        //~^ ERROR  a value of type `Bar` cannot be built from an iterator over elements of type `_`\n+    };\n+    x\n+}\n+\n fn main() {}"}, {"sha": "6b87da0c040d5ccacec4f3b544eb8af09cc48fab", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: a value of type `Foo` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/branches.rs:9:28\n+error[E0277]: a value of type `Bar` cannot be built from an iterator over elements of type `_`\n+  --> $DIR/branches.rs:19:28\n    |\n LL |         std::iter::empty().collect()\n-   |                            ^^^^^^^ value of type `Foo` cannot be built from `std::iter::Iterator<Item=_>`\n+   |                            ^^^^^^^ value of type `Bar` cannot be built from `std::iter::Iterator<Item=_>`\n    |\n-   = help: the trait `FromIterator<_>` is not implemented for `Foo`\n+   = help: the trait `FromIterator<_>` is not implemented for `Bar`\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "04218f5643d1c9a9f96550ebf9b1c6fac0a1f5e8", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches2.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,6 +1,6 @@\n #![feature(type_alias_impl_trait)]\n \n-// run-pass\n+// check-pass\n \n type Foo = impl std::iter::FromIterator<i32> + PartialEq<Vec<i32>> + std::fmt::Debug;\n "}, {"sha": "30c0af8a5dc979e2e0245096de4c33b417730fef", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches3.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -0,0 +1,36 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo = impl for<'a> FnOnce(&'a str) -> usize;\n+type Bar = impl FnOnce(&'static str) -> usize;\n+\n+fn foo() -> Foo {\n+    if true {\n+        |s| s.len() //~ ERROR type annotations needed\n+    } else {\n+        panic!()\n+    }\n+}\n+fn bar() -> Bar {\n+    if true {\n+        |s| s.len() //~ ERROR type annotations needed\n+    } else {\n+        panic!()\n+    }\n+}\n+\n+fn foo2() -> impl for<'a> FnOnce(&'a str) -> usize {\n+    if true {\n+        |s| s.len() //~ ERROR type annotations needed\n+    } else {\n+        panic!()\n+    }\n+}\n+fn bar2() -> impl FnOnce(&'static str) -> usize {\n+    if true {\n+        |s| s.len() //~ ERROR type annotations needed\n+    } else {\n+        panic!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "77ce1d48480ad70fc2fd12b7946099808d51e3f1", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches3.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -0,0 +1,51 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/branches3.rs:8:10\n+   |\n+LL |         |s| s.len()\n+   |          ^\n+   |\n+   = note: type must be known at this point\n+help: consider giving this closure parameter an explicit type\n+   |\n+LL |         |s: _| s.len()\n+   |           +++\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/branches3.rs:15:10\n+   |\n+LL |         |s| s.len()\n+   |          ^\n+   |\n+   = note: type must be known at this point\n+help: consider giving this closure parameter an explicit type\n+   |\n+LL |         |s: _| s.len()\n+   |           +++\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/branches3.rs:23:10\n+   |\n+LL |         |s| s.len()\n+   |          ^\n+   |\n+   = note: type must be known at this point\n+help: consider giving this closure parameter an explicit type\n+   |\n+LL |         |s: _| s.len()\n+   |           +++\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/branches3.rs:30:10\n+   |\n+LL |         |s| s.len()\n+   |          ^\n+   |\n+   = note: type must be known at this point\n+help: consider giving this closure parameter an explicit type\n+   |\n+LL |         |s: _| s.len()\n+   |           +++\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "6b3d9ff4cdec84712392db473addd0dcfdba7ddd", "filename": "src/test/ui/lazy-type-alias-impl-trait/recursion2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion2.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,13 +1,15 @@\n #![feature(type_alias_impl_trait)]\n \n+// check-pass\n+\n type Foo = impl std::fmt::Debug;\n \n fn foo(b: bool) -> Foo {\n     if b {\n         return vec![];\n     }\n     let x: Vec<i32> = foo(false);\n-    std::iter::empty().collect() //~ ERROR `Foo` cannot be built from an iterator\n+    std::iter::empty().collect()\n }\n \n fn bar(b: bool) -> impl std::fmt::Debug {"}, {"sha": "1f6201a8300c6dacc29aedef98bb0c9f600c1f95", "filename": "src/test/ui/lazy-type-alias-impl-trait/recursion2.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf45371f262e184b4a77adea88c8ac01ac79759b/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf45371f262e184b4a77adea88c8ac01ac79759b/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion2.stderr?ref=bf45371f262e184b4a77adea88c8ac01ac79759b", "patch": "@@ -1,16 +0,0 @@\n-error[E0277]: a value of type `Foo` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/recursion2.rs:10:24\n-   |\n-LL |     std::iter::empty().collect()\n-   |                        ^^^^^^^ value of type `Foo` cannot be built from `std::iter::Iterator<Item=_>`\n-   |\n-   = help: the trait `FromIterator<_>` is not implemented for `Foo`\n-note: required by a bound in `collect`\n-  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-   |\n-LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "12c187b9e82aa12ceda8b245dd250b946c8114ab", "filename": "src/test/ui/never_type/impl_trait_fallback2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback2.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -13,6 +13,7 @@ fn should_ret_unit() -> impl T {\n type Foo = impl T;\n \n fn a() -> Foo {\n+    //~^ ERROR `(): T` is not satisfied\n     panic!()\n }\n "}, {"sha": "78cc83bdbfadbb075e5026f83cd283db5addc2c2", "filename": "src/test/ui/never_type/impl_trait_fallback2.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback2.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -6,6 +6,14 @@ LL | fn should_ret_unit() -> impl T {\n    |\n    = help: the trait `T` is implemented for `i32`\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `(): T` is not satisfied\n+  --> $DIR/impl_trait_fallback2.rs:15:11\n+   |\n+LL | fn a() -> Foo {\n+   |           ^^^ the trait `T` is not implemented for `()`\n+   |\n+   = help: the trait `T` is implemented for `i32`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "ed645b82394a0393f9ab0a7aec06629eccfaf8bb", "filename": "src/test/ui/never_type/impl_trait_fallback3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback3.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -7,9 +7,9 @@ trait T {\n }\n \n type Foo = impl T;\n-//~^ ERROR unconstrained opaque type\n \n fn a() -> Foo {\n+    //~^ ERROR the trait bound `(): T` is not satisfied\n     // This is not a defining use, it doesn't actually constrain the opaque type.\n     panic!()\n }"}, {"sha": "5d5d216fb9bcc359c1661460349c56600e771695", "filename": "src/test/ui/never_type/impl_trait_fallback3.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fimpl_trait_fallback3.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,10 +1,9 @@\n-error: unconstrained opaque type\n-  --> $DIR/impl_trait_fallback3.rs:9:12\n+error[E0277]: the trait bound `(): T` is not satisfied\n+  --> $DIR/impl_trait_fallback3.rs:11:11\n    |\n-LL | type Foo = impl T;\n-   |            ^^^^^^\n-   |\n-   = note: `Foo` must be used in combination with a concrete type within the same module\n+LL | fn a() -> Foo {\n+   |           ^^^ the trait `T` is not implemented for `()`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7bb490bbec8183912429093fb2305a932857f131", "filename": "src/test/ui/type-alias-impl-trait/closures_in_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -4,7 +4,7 @@ type Foo = impl std::ops::FnOnce(String) -> usize;\n \n fn foo(b: bool) -> Foo {\n     if b {\n-        |x| x.len()\n+        |x| x.len() //~ ERROR type annotations needed\n     } else {\n         panic!()\n     }"}, {"sha": "b7a7871143c63c9e2c9ec16462418cef7b4c9743", "filename": "src/test/ui/type-alias-impl-trait/closures_in_branches.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,3 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/closures_in_branches.rs:7:10\n+   |\n+LL |         |x| x.len()\n+   |          ^\n+   |\n+   = note: type must be known at this point\n+help: consider giving this closure parameter an explicit type\n+   |\n+LL |         |x: _| x.len()\n+   |           +++\n+\n error[E0282]: type annotations needed\n   --> $DIR/closures_in_branches.rs:21:10\n    |\n@@ -10,6 +22,6 @@ help: consider giving this closure parameter an explicit type\n LL |         |x: _| x.len()\n    |           +++\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0282`."}, {"sha": "d8cf7d71fef7405b0181e284b28b7e1077bc09a2", "filename": "src/test/ui/type-alias-impl-trait/fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,7 +1,6 @@\n // Tests that we correctly handle opaque types being used opaquely,\n // even within their defining scope.\n //\n-// check-pass\n #![feature(type_alias_impl_trait)]\n \n type Foo = impl Copy;\n@@ -23,6 +22,7 @@ fn constrained_foo() -> Foo {\n // constraints on it.\n fn unconstrained_foo() -> Wrapper<Foo> {\n     Wrapper::Second\n+    //~^ ERROR: type annotations needed\n }\n \n fn main() {}"}, {"sha": "e009399a60abf0f9ea3f82619828cc8027c68c4f", "filename": "src/test/ui/type-alias-impl-trait/fallback.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -0,0 +1,15 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/fallback.rs:24:5\n+   |\n+LL |     Wrapper::Second\n+   |     ^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the enum `Wrapper`\n+   |\n+   = note: cannot satisfy `_: Copy`\n+help: consider specifying the generic argument\n+   |\n+LL |     Wrapper::<T>::Second\n+   |            +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "377ce85e8b221521da2d223ed81ccb67836f6ed3", "filename": "src/test/ui/type-alias-impl-trait/issue-53398-cyclic-types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -3,7 +3,8 @@\n type Foo = impl Fn() -> Foo;\n \n fn foo() -> Foo {\n-    foo //~ ERROR: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n+//~^ ERROR: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n+    foo\n }\n \n fn main() {}"}, {"sha": "d20b1cc6d851bb135b3dd00fd87cc535e20c9141", "filename": "src/test/ui/type-alias-impl-trait/issue-53398-cyclic-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n-  --> $DIR/issue-53398-cyclic-types.rs:6:5\n+  --> $DIR/issue-53398-cyclic-types.rs:5:13\n    |\n-LL |     foo\n-   |     ^^^\n+LL | fn foo() -> Foo {\n+   |             ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_53398_cyclic_types`)\n "}, {"sha": "082b0f0c30973e991a386b76d418a9fc7ca031b2", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:40\n    |\n LL |     const FUN: fn() -> Self::Item = || ();\n-   |                                        ^^ the trait `Bug` is not implemented for `()`\n+   |                                        ^ the trait `Bug` is not implemented for `()`\n    |\n    = help: the trait `Bug` is implemented for `&()`\n "}, {"sha": "97332e16d84a22588fd1551aa921928491591507", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -5,6 +5,7 @@\n type Closure = impl FnOnce();\n \n fn c() -> Closure {\n+    //~^ ERROR: expected a `FnOnce<()>` closure, found `()`\n     || -> Closure { || () }\n     //~^ ERROR: mismatched types\n     //~| ERROR: mismatched types"}, {"sha": "57fc660901cd8e428fb93972266918c898ac946e", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,5 +1,14 @@\n error[E0277]: expected a `FnOnce<()>` closure, found `()`\n-  --> $DIR/issue-63279.rs:8:11\n+  --> $DIR/issue-63279.rs:7:11\n+   |\n+LL | fn c() -> Closure {\n+   |           ^^^^^^^ expected an `FnOnce<()>` closure, found `()`\n+   |\n+   = help: the trait `FnOnce<()>` is not implemented for `()`\n+   = note: wrap the `()` in a closure with no arguments: `|| { /* code */ }`\n+\n+error[E0277]: expected a `FnOnce<()>` closure, found `()`\n+  --> $DIR/issue-63279.rs:9:11\n    |\n LL |     || -> Closure { || () }\n    |           ^^^^^^^ expected an `FnOnce<()>` closure, found `()`\n@@ -8,33 +17,32 @@ LL |     || -> Closure { || () }\n    = note: wrap the `()` in a closure with no arguments: `|| { /* code */ }`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-63279.rs:8:21\n+  --> $DIR/issue-63279.rs:9:21\n    |\n LL |     || -> Closure { || () }\n    |                     ^^^^^ expected `()`, found closure\n    |\n    = note: expected unit type `()`\n-                found closure `[closure@$DIR/issue-63279.rs:8:21: 8:26]`\n+                found closure `[closure@$DIR/issue-63279.rs:9:21: 9:26]`\n help: use parentheses to call this closure\n    |\n LL |     || -> Closure { (|| ())() }\n    |                     +     +++\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-63279.rs:8:5\n+  --> $DIR/issue-63279.rs:9:5\n    |\n-LL | type Closure = impl FnOnce();\n-   |                ------------- the expected opaque type\n-LL |\n-LL | fn c() -> Closure {\n-   |           ------- expected `Closure` because of return type\n LL |     || -> Closure { || () }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n    |\n-   = note: expected opaque type `Closure`\n-                  found closure `[closure@$DIR/issue-63279.rs:8:5: 8:28]`\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/issue-63279.rs:9:5: 9:28]`\n+help: use parentheses to call this closure\n+   |\n+LL |     (|| -> Closure { || () })()\n+   |     +                       +++\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "5ed29e0ac94ff77825ba3380e31cc2674183603c", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,17 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-74280.rs:9:5\n    |\n-LL | type Test = impl Copy;\n-   |             --------- the expected opaque type\n-LL |\n LL | fn test() -> Test {\n-   |              ---- expected `Test` because of return type\n+   |              ---- expected `_` because of return type\n LL |     let y = || -> Test { () };\n LL |     7\n    |     ^ expected `()`, found integer\n-   |\n-   = note: expected opaque type `Test`\n-                     found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "2c965b875a00b2ae36be171099137c05f9ec1fa1", "filename": "src/test/ui/type-alias-impl-trait/issue-94429.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -13,7 +13,8 @@ impl Runnable for Implementor {\n     type Gen = impl Generator<Yield = (), Return = ()>;\n \n     fn run(&mut self) -> Self::Gen {\n-        move || { //~ ERROR: type mismatch resolving\n+    //~^ ERROR: type mismatch resolving\n+        move || {\n             yield 1;\n         }\n     }"}, {"sha": "57550104087f78d73f595186218f2ff666bc6502", "filename": "src/test/ui/type-alias-impl-trait/issue-94429.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,10 +1,8 @@\n-error[E0271]: type mismatch resolving `<[generator@$DIR/issue-94429.rs:16:9: 18:10] as Generator>::Yield == ()`\n-  --> $DIR/issue-94429.rs:16:9\n+error[E0271]: type mismatch resolving `<[generator@$DIR/issue-94429.rs:17:9: 19:10] as Generator>::Yield == ()`\n+  --> $DIR/issue-94429.rs:15:26\n    |\n-LL | /         move || {\n-LL | |             yield 1;\n-LL | |         }\n-   | |_________^ expected integer, found `()`\n+LL |     fn run(&mut self) -> Self::Gen {\n+   |                          ^^^^^^^^^ expected integer, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "da845e86147b7ffb620f880936aae59069a2095f", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -7,8 +7,8 @@\n type X<A, B> = impl Into<&'static A>;\n \n fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) {\n-    (a, a)\n     //~^ ERROR the trait bound `&'static B: From<&A>` is not satisfied\n+    (a, a)\n }\n \n fn main() {"}, {"sha": "cdaae99e286212fb9bf7589770169eabfe767a39", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `&'static B: From<&A>` is not satisfied\n-  --> $DIR/multiple-def-uses-in-one-fn.rs:10:9\n+  --> $DIR/multiple-def-uses-in-one-fn.rs:9:45\n    |\n-LL |     (a, a)\n-   |         ^ the trait `From<&A>` is not implemented for `&'static B`\n+LL | fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) {\n+   |                                             ^^^^^^^^^^^^^^^^^^ the trait `From<&A>` is not implemented for `&'static B`\n    |\n    = note: required because of the requirements on the impl of `Into<&'static B>` for `&A`\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement"}, {"sha": "bbe709dccab4eb6e9404d4b5cba860ad4a7a2592", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,18 +1,15 @@\n error[E0308]: mismatched types\n   --> $DIR/multiple-def-uses-in-one-fn3.rs:14:9\n    |\n-LL | type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n-   |                                                    ------------- the expected opaque type\n-...\n LL | fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n    |      -                    - found type parameter\n    |      |\n    |      expected type parameter\n LL |     (a, b)\n    |         ^ expected type parameter `A`, found type parameter `B`\n    |\n-   = note: expected opaque type `X<A, B>`\n-           found type parameter `B`\n+   = note: expected type parameter `A`\n+              found type parameter `B`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "8781196c39fa1366c63dc22f4e1930be5fbe591d", "filename": "src/test/ui/type-alias-impl-trait/self-referential-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -4,7 +4,7 @@ type Foo = impl std::fmt::Debug;\n type Bar = impl PartialEq<Foo>;\n \n fn bar() -> Bar {\n-    42_i32 //~ ERROR can't compare `i32` with `Foo`\n+    42_i32 //~^ ERROR can't compare `i32` with `Foo`\n }\n \n fn main() {}"}, {"sha": "2b505d30730a3e2079a01e08368d12d0540e4329", "filename": "src/test/ui/type-alias-impl-trait/self-referential-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: can't compare `i32` with `Foo`\n-  --> $DIR/self-referential-2.rs:7:5\n+  --> $DIR/self-referential-2.rs:6:13\n    |\n+LL | fn bar() -> Bar {\n+   |             ^^^ no implementation for `i32 == Foo`\n LL |     42_i32\n-   |     ^^^^^^ no implementation for `i32 == Foo`\n+   |     ------ return type was inferred to be `i32` here\n    |\n    = help: the trait `PartialEq<Foo>` is not implemented for `i32`\n    = help: the following other types implement trait `PartialEq<Rhs>`:"}, {"sha": "36742c8ad57fc986907739e97328f1b62e5b062d", "filename": "src/test/ui/type-alias-impl-trait/self-referential-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -3,19 +3,19 @@\n type Bar<'a, 'b> = impl PartialEq<Bar<'b, 'static>> + std::fmt::Debug;\n \n fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n-    i //~ ERROR can't compare `&i32` with `Bar<'b, 'static>`\n+    i //~^ ERROR can't compare `&i32` with `Bar<'b, 'static>`\n }\n \n type Foo<'a, 'b> = impl PartialEq<Foo<'static, 'b>> + std::fmt::Debug;\n \n fn foo<'a, 'b>(i: &'a i32) -> Foo<'a, 'b> {\n-    i //~ ERROR can't compare `&i32` with `Foo<'static, 'b>`\n+    i //~^ ERROR can't compare `&i32` with `Foo<'static, 'b>`\n }\n \n type Moo<'a, 'b> = impl PartialEq<Moo<'static, 'a>> + std::fmt::Debug;\n \n fn moo<'a, 'b>(i: &'a i32) -> Moo<'a, 'b> {\n-    i //~ ERROR can't compare `&i32` with `Moo<'static, 'a>`\n+    i //~^ ERROR can't compare `&i32` with `Moo<'static, 'a>`\n }\n \n fn main() {"}, {"sha": "27880f792f462e6c279454d7f2806692aaf91b76", "filename": "src/test/ui/type-alias-impl-trait/self-referential-4.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: can't compare `&i32` with `Bar<'b, 'static>`\n-  --> $DIR/self-referential-4.rs:6:5\n+  --> $DIR/self-referential-4.rs:5:31\n    |\n+LL | fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+   |                               ^^^^^^^^^^^ no implementation for `&i32 == Bar<'b, 'static>`\n LL |     i\n-   |     ^ no implementation for `&i32 == Bar<'b, 'static>`\n+   |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Bar<'b, 'static>>` is not implemented for `&i32`\n    = help: the following other types implement trait `PartialEq<Rhs>`:\n@@ -17,10 +19,12 @@ LL |     i\n            and 6 others\n \n error[E0277]: can't compare `&i32` with `Foo<'static, 'b>`\n-  --> $DIR/self-referential-4.rs:12:5\n+  --> $DIR/self-referential-4.rs:11:31\n    |\n+LL | fn foo<'a, 'b>(i: &'a i32) -> Foo<'a, 'b> {\n+   |                               ^^^^^^^^^^^ no implementation for `&i32 == Foo<'static, 'b>`\n LL |     i\n-   |     ^ no implementation for `&i32 == Foo<'static, 'b>`\n+   |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Foo<'static, 'b>>` is not implemented for `&i32`\n    = help: the following other types implement trait `PartialEq<Rhs>`:\n@@ -35,10 +39,12 @@ LL |     i\n            and 6 others\n \n error[E0277]: can't compare `&i32` with `Moo<'static, 'a>`\n-  --> $DIR/self-referential-4.rs:18:5\n+  --> $DIR/self-referential-4.rs:17:31\n    |\n+LL | fn moo<'a, 'b>(i: &'a i32) -> Moo<'a, 'b> {\n+   |                               ^^^^^^^^^^^ no implementation for `&i32 == Moo<'static, 'a>`\n LL |     i\n-   |     ^ no implementation for `&i32 == Moo<'static, 'a>`\n+   |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Moo<'static, 'a>>` is not implemented for `&i32`\n    = help: the following other types implement trait `PartialEq<Rhs>`:"}, {"sha": "3ff5406a382709831bd7b753b58e760cb70b800e", "filename": "src/test/ui/type-alias-impl-trait/self-referential.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -3,19 +3,22 @@\n type Bar<'a, 'b> = impl PartialEq<Bar<'b, 'a>> + std::fmt::Debug;\n \n fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n-    i //~ ERROR can't compare `&i32` with `Bar<'b, 'a>`\n+    //~^ ERROR can't compare `&i32` with `Bar<'b, 'a>`\n+    i\n }\n \n type Foo<'a, 'b> = (i32, impl PartialEq<Foo<'a, 'b>> + std::fmt::Debug);\n \n fn foo<'a, 'b>(i: &'a i32) -> Foo<'a, 'b> {\n-    (42, i) //~ ERROR can't compare `&i32` with `(i32, &i32)`\n+    //~^ ERROR can't compare `&i32` with `(i32, &i32)`\n+    (42, i)\n }\n \n type Moo<'a, 'b> = (i32, impl PartialEq<Moo<'b, 'a>> + std::fmt::Debug);\n \n fn moo<'a, 'b>(i: &'a i32) -> Moo<'a, 'b> {\n-    (42, i) //~ ERROR can't compare `&i32` with `(i32, Moo<'b, 'a>::{opaque#0})`\n+    //~^ ERROR can't compare `&i32` with `(i32, Moo<'b, 'a>::{opaque#0})`\n+    (42, i)\n }\n \n fn main() {"}, {"sha": "97d510f6830af2ca621d5b191667081ad3af50d2", "filename": "src/test/ui/type-alias-impl-trait/self-referential.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d3c6d6c83edc4ef245e77397c8e32d3ee453b67/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr?ref=5d3c6d6c83edc4ef245e77397c8e32d3ee453b67", "patch": "@@ -1,8 +1,11 @@\n error[E0277]: can't compare `&i32` with `Bar<'b, 'a>`\n-  --> $DIR/self-referential.rs:6:5\n+  --> $DIR/self-referential.rs:5:31\n    |\n+LL | fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+   |                               ^^^^^^^^^^^ no implementation for `&i32 == Bar<'b, 'a>`\n+LL |\n LL |     i\n-   |     ^ no implementation for `&i32 == Bar<'b, 'a>`\n+   |     - return type was inferred to be `&i32` here\n    |\n    = help: the trait `PartialEq<Bar<'b, 'a>>` is not implemented for `&i32`\n    = help: the following other types implement trait `PartialEq<Rhs>`:\n@@ -17,10 +20,13 @@ LL |     i\n            and 6 others\n \n error[E0277]: can't compare `&i32` with `(i32, &i32)`\n-  --> $DIR/self-referential.rs:12:10\n+  --> $DIR/self-referential.rs:12:31\n    |\n+LL | fn foo<'a, 'b>(i: &'a i32) -> Foo<'a, 'b> {\n+   |                               ^^^^^^^^^^^ no implementation for `&i32 == (i32, &i32)`\n+LL |\n LL |     (42, i)\n-   |          ^ no implementation for `&i32 == (i32, &i32)`\n+   |     ------- return type was inferred to be `(i32, &i32)` here\n    |\n    = help: the trait `PartialEq<(i32, &i32)>` is not implemented for `&i32`\n    = help: the following other types implement trait `PartialEq<Rhs>`:\n@@ -35,10 +41,13 @@ LL |     (42, i)\n            and 6 others\n \n error[E0277]: can't compare `&i32` with `(i32, Moo<'b, 'a>::{opaque#0})`\n-  --> $DIR/self-referential.rs:18:10\n+  --> $DIR/self-referential.rs:19:31\n    |\n+LL | fn moo<'a, 'b>(i: &'a i32) -> Moo<'a, 'b> {\n+   |                               ^^^^^^^^^^^ no implementation for `&i32 == (i32, Moo<'b, 'a>::{opaque#0})`\n+LL |\n LL |     (42, i)\n-   |          ^ no implementation for `&i32 == (i32, Moo<'b, 'a>::{opaque#0})`\n+   |     ------- return type was inferred to be `(i32, &i32)` here\n    |\n    = help: the trait `PartialEq<(i32, Moo<'b, 'a>::{opaque#0})>` is not implemented for `&i32`\n    = help: the following other types implement trait `PartialEq<Rhs>`:"}]}