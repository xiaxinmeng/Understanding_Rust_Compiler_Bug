{"sha": "038ce659e346c6fc74c9de1681c6329dac74e19b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOGNlNjU5ZTM0NmM2ZmM3NGM5ZGUxNjgxYzYzMjlkYWM3NGUxOWI=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-06T07:52:35Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-06T07:52:35Z"}, "message": "expand the documentation on the `Unpin` trait\n\nprovides an overview of the Pin API which the trait is for,\nand show how it can be used in making self referencial structs\n\npart of #49150", "tree": {"sha": "b229fcaf0857a271dd7fa1e6a0d463de4aedf599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b229fcaf0857a271dd7fa1e6a0d463de4aedf599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/038ce659e346c6fc74c9de1681c6329dac74e19b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/038ce659e346c6fc74c9de1681c6329dac74e19b", "html_url": "https://github.com/rust-lang/rust/commit/038ce659e346c6fc74c9de1681c6329dac74e19b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/038ce659e346c6fc74c9de1681c6329dac74e19b/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1e6db70900cf5d11a843bc4234de0548677aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1e6db70900cf5d11a843bc4234de0548677aba", "html_url": "https://github.com/rust-lang/rust/commit/aa1e6db70900cf5d11a843bc4234de0548677aba"}], "stats": {"total": 94, "additions": 89, "deletions": 5}, "files": [{"sha": "dec3e46897ccee180683f1cdd756d32a9d97af62", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 89, "deletions": 5, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/038ce659e346c6fc74c9de1681c6329dac74e19b/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038ce659e346c6fc74c9de1681c6329dac74e19b/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=038ce659e346c6fc74c9de1681c6329dac74e19b", "patch": "@@ -603,15 +603,99 @@ unsafe impl<T: ?Sized> Freeze for *mut T {}\n unsafe impl<'a, T: ?Sized> Freeze for &'a T {}\n unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n \n-/// Types which can be moved out of a `PinMut`.\n+/// A trait that indicates that it is safe to move an object of a type implementing it.\n+/// Since that is true for most types, it is automatically implemented in most cases.\n+/// This trait is mainly used to build self referencial structs,\n+/// since moving an object with pointers to itself will invalidate them,\n+/// causing undefined behavior.\n ///\n-/// The `Unpin` trait is used to control the behavior of the [`PinMut`] type. If a\n-/// type implements `Unpin`, it is safe to move a value of that type out of the\n-/// `PinMut` pointer.\n+/// # The Pin API\n ///\n-/// This trait is automatically implemented for almost every type.\n+/// The `Unpin` trait doesn't actually change the behavior of the compiler around moves,\n+/// so code like this will compile just fine:\n+///\n+/// ```rust\n+/// #![feature(pin)]\n+/// use std::marker::Pinned;\n+///\n+/// struct Unmovable {\n+///     _pin: Pinned, // this marker type prevents Unpin from being implemented for this type\n+/// }\n+///\n+/// let unmoved = Unmovable { _pin: Pinned };\n+/// let moved = unmoved;\n+/// ```\n+///\n+/// In order to actually prevent the pinned objects from moving,\n+/// it has to be wrapped in special pointer types,\n+/// which currently include [`PinMut`] and [`PinBox`].\n+///\n+/// The way they work is by implementing [`DerefMut`] for all types that implement Unpin,\n+/// but only [`Deref`] otherwise.\n+///\n+/// This is done because, while modifying an object can be done in-place,\n+/// it might also relocate a buffer when its at full capacity,\n+/// or it might replace one object with another without logically \"moving\" them with [`swap`].\n ///\n /// [`PinMut`]: ../mem/struct.PinMut.html\n+/// [`PinBox`]: ../../alloc/boxed/struct.PinMut.html\n+/// [`DerefMut`]: ../ops/trait.DerefMut.html\n+/// [`Deref`]: ../ops/trait.Deref.html\n+/// [`swap`]: ../mem/fn.swap.html\n+///\n+/// # example\n+///\n+/// ```rust\n+/// #![feature(pin)]\n+///\n+/// use std::boxed::PinBox;\n+/// use std::marker::Pinned;\n+/// use std::ptr::NonNull;\n+///\n+/// // this is a self referencial struct since the slice field points to the data field.\n+/// // we cannot inform the compiler about that with a normal reference,\n+/// // since moving the data with it that would violate borrowing rules.\n+/// // instead we use a raw pointer, though one which is known to not be null,\n+/// // since we know its pointing at the string.\n+/// struct Unmovable {\n+///     data: String,\n+///     slice: NonNull<String>,\n+///     _pin: Pinned,\n+/// }\n+///\n+/// impl Unmovable {\n+///     // to ensure the data doesn't move when the function returns,\n+///     // we place it in the heap where it will stay for the lifetime of the object,\n+///     // and the only way to access it would be through a pointer to it\n+///     fn new(data: String) -> PinBox<Self> {\n+///         let res = Unmovable {\n+///             data,\n+///             // we only create the pointer once the data is in place\n+///             // otherwise it will have already moved before we even started\n+///             slice: NonNull::dangling(),\n+///             _pin: Pinned,\n+///         };\n+///         let mut boxed = PinBox::new(res);\n+///\n+///         let slice = NonNull::from(&boxed.data);\n+///         // we know this is safe because modifying a field doesn't move the whole struct\n+///         unsafe { PinBox::get_mut(&mut boxed).slice = slice };\n+///         boxed\n+///     }\n+/// }\n+///\n+/// let unmoved = Unmovable::new(\"hello\".to_string());\n+/// // the pointer should point to the correct location,\n+/// // so long as the struct hasn't moved.\n+/// // meanwhile, we are free to move the pointer around\n+/// let mut still_unmoved = unmoved;\n+/// assert_eq!(still_unmoved.slice, NonNull::from(&still_unmoved.data));\n+///\n+/// // now the only way to access to data (safely) is immutably,\n+/// // so this will fail to compile:\n+/// // still_unmoved.data.push_str(\" world\");\n+///\n+/// ```\n #[unstable(feature = \"pin\", issue = \"49150\")]\n pub auto trait Unpin {}\n "}]}