{"sha": "18f47d81dae6740a4b62262cf2518ea1cfe19e62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZjQ3ZDgxZGFlNjc0MGE0YjYyMjYyY2YyNTE4ZWExY2ZlMTllNjI=", "commit": {"author": {"name": "Ayush Kumar Mishra", "email": "ayush.k.mishra@xcelenergy.com", "date": "2020-08-23T05:25:15Z"}, "committer": {"name": "Ayush Kumar Mishra", "email": "ayush.k.mishra@xcelenergy.com", "date": "2020-08-23T10:26:01Z"}, "message": "Misleading documentation for derived Ord/PartialOrd implementation for enums #75620", "tree": {"sha": "4af85a46856c816b98ef9ced68976e5b6d30c9f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4af85a46856c816b98ef9ced68976e5b6d30c9f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18f47d81dae6740a4b62262cf2518ea1cfe19e62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18f47d81dae6740a4b62262cf2518ea1cfe19e62", "html_url": "https://github.com/rust-lang/rust/commit/18f47d81dae6740a4b62262cf2518ea1cfe19e62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18f47d81dae6740a4b62262cf2518ea1cfe19e62/comments", "author": null, "committer": null, "parents": [{"sha": "e482c86b9de32c6392cb83aa97d72e22425163f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e482c86b9de32c6392cb83aa97d72e22425163f9", "html_url": "https://github.com/rust-lang/rust/commit/e482c86b9de32c6392cb83aa97d72e22425163f9"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "ef691489f081c9a42b8191bd5e8ae21c02bef55e", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18f47d81dae6740a4b62262cf2518ea1cfe19e62/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f47d81dae6740a4b62262cf2518ea1cfe19e62/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=18f47d81dae6740a4b62262cf2518ea1cfe19e62", "patch": "@@ -505,7 +505,7 @@ impl<T: Ord> Ord for Reverse<T> {\n ///\n /// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n /// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n-/// When `derive`d on enums, variants are ordered by their top-to-bottom declaration order.\n+/// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n ///\n /// ## How can I implement `Ord`?\n ///\n@@ -694,7 +694,7 @@ impl PartialOrd for Ordering {\n ///\n /// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n /// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n-/// When `derive`d on enums, variants are ordered by their top-to-bottom declaration order.\n+/// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n ///\n /// ## How can I implement `PartialOrd`?\n ///"}]}