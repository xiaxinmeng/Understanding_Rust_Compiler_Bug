{"sha": "8099f195168b9aa954dd3981ab643f44f59005d4", "node_id": "C_kwDOAAsO6NoAKDgwOTlmMTk1MTY4YjlhYTk1NGRkMzk4MWFiNjQzZjQ0ZjU5MDA1ZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-18T18:05:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-18T18:05:51Z"}, "message": "Auto merge of #10667 - Alexendoo:manual-slice-size-calculation-macros, r=llogiq\n\nIgnore `manual_slice_size_calculation` in code from macro expansions\n\nchangelog: none, assuming same release as #10659", "tree": {"sha": "f6650ad47c45fd9123fd4c8742aebfc4e63873fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6650ad47c45fd9123fd4c8742aebfc4e63873fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8099f195168b9aa954dd3981ab643f44f59005d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8099f195168b9aa954dd3981ab643f44f59005d4", "html_url": "https://github.com/rust-lang/rust/commit/8099f195168b9aa954dd3981ab643f44f59005d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8099f195168b9aa954dd3981ab643f44f59005d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "203c909d04ffc0b2c22f97cb304649aac237087e", "url": "https://api.github.com/repos/rust-lang/rust/commits/203c909d04ffc0b2c22f97cb304649aac237087e", "html_url": "https://github.com/rust-lang/rust/commit/203c909d04ffc0b2c22f97cb304649aac237087e"}, {"sha": "2f4f798f9bb693543356f05afe4e03822b5c51e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4f798f9bb693543356f05afe4e03822b5c51e7", "html_url": "https://github.com/rust-lang/rust/commit/2f4f798f9bb693543356f05afe4e03822b5c51e7"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "703a6b25840b1a151cf716d26254d651ad59e1ae", "filename": "clippy_lints/src/manual_slice_size_calculation.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8099f195168b9aa954dd3981ab643f44f59005d4/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8099f195168b9aa954dd3981ab643f44f59005d4/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs?ref=8099f195168b9aa954dd3981ab643f44f59005d4", "patch": "@@ -1,4 +1,3 @@\n-// run-rustfix\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_context;\n use clippy_utils::{expr_or_init, in_constant, std_or_core};\n@@ -45,6 +44,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualSliceSizeCalculation {\n         if !in_constant(cx, expr.hir_id)\n             && let ExprKind::Binary(ref op, left, right) = expr.kind\n             && BinOpKind::Mul == op.node\n+            && !expr.span.from_expansion()\n             && let Some(receiver) = simplify(cx, left, right)\n         {\n             let ctxt = expr.span.ctxt();\n@@ -55,12 +55,12 @@ impl<'tcx> LateLintPass<'tcx> for ManualSliceSizeCalculation {\n             span_lint_and_sugg(\n                 cx,\n                 MANUAL_SLICE_SIZE_CALCULATION,\n-                    expr.span,\n-                    \"manual slice size calculation\",\n-                    \"try\",\n-                    format!(\"{sugg}::mem::size_of_val({val_name})\"),\n-                    Applicability::MachineApplicable,\n-                );\n+                expr.span,\n+                \"manual slice size calculation\",\n+                \"try\",\n+                format!(\"{sugg}::mem::size_of_val({val_name})\"),\n+                app,\n+            );\n         }\n     }\n }\n@@ -81,9 +81,9 @@ fn simplify_half<'tcx>(\n     expr1: &'tcx Expr<'tcx>,\n     expr2: &'tcx Expr<'tcx>,\n ) -> Option<&'tcx Expr<'tcx>> {\n-    if\n+    if !expr1.span.from_expansion()\n         // expr1 is `[T1].len()`?\n-        let ExprKind::MethodCall(method_path, receiver, _, _) = expr1.kind\n+        && let ExprKind::MethodCall(method_path, receiver, _, _) = expr1.kind\n         && method_path.ident.name == sym::len\n         && let receiver_ty = cx.typeck_results().expr_ty(receiver)\n         && let ty::Slice(ty1) = receiver_ty.peel_refs().kind()"}, {"sha": "71368a25e22d84d2e60bd89ad1d379b939e72d6a", "filename": "tests/ui/manual_slice_size_calculation.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8099f195168b9aa954dd3981ab643f44f59005d4/tests%2Fui%2Fmanual_slice_size_calculation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8099f195168b9aa954dd3981ab643f44f59005d4/tests%2Fui%2Fmanual_slice_size_calculation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.fixed?ref=8099f195168b9aa954dd3981ab643f44f59005d4", "patch": "@@ -1,8 +1,12 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n #![allow(unused)]\n #![warn(clippy::manual_slice_size_calculation)]\n \n+extern crate proc_macros;\n+\n use core::mem::{align_of, size_of};\n+use proc_macros::external;\n \n fn main() {\n     let v_i32 = Vec::<i32>::new();\n@@ -19,13 +23,18 @@ fn main() {\n     let _ = std::mem::size_of_val(s_i32); // WARNING\n     let _ = std::mem::size_of_val(s_i32); // WARNING\n \n+    let _ = std::mem::size_of_val(external!(&[1u64][..]));\n+\n     // True negatives:\n     let _ = size_of::<i32>() + s_i32.len(); // Ok, not a multiplication\n     let _ = size_of::<i32>() * s_i32.partition_point(|_| true); // Ok, not len()\n     let _ = size_of::<i32>() * v_i32.len(); // Ok, not a slice\n     let _ = align_of::<i32>() * s_i32.len(); // Ok, not size_of()\n     let _ = size_of::<u32>() * s_i32.len(); // Ok, different types\n \n+    let _ = external!($s_i32.len() * size_of::<i32>());\n+    let _ = external!($s_i32.len()) * size_of::<i32>();\n+\n     // False negatives:\n     let _ = 5 * size_of::<i32>() * s_i32.len(); // Ok (MISSED OPPORTUNITY)\n     let _ = size_of::<i32>() * 5 * s_i32.len(); // Ok (MISSED OPPORTUNITY)"}, {"sha": "5dd14aaede09523011a69479796c551a3aaf1f44", "filename": "tests/ui/manual_slice_size_calculation.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8099f195168b9aa954dd3981ab643f44f59005d4/tests%2Fui%2Fmanual_slice_size_calculation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8099f195168b9aa954dd3981ab643f44f59005d4/tests%2Fui%2Fmanual_slice_size_calculation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.rs?ref=8099f195168b9aa954dd3981ab643f44f59005d4", "patch": "@@ -1,8 +1,12 @@\n // run-rustfix\n+// aux-build:proc_macros.rs\n #![allow(unused)]\n #![warn(clippy::manual_slice_size_calculation)]\n \n+extern crate proc_macros;\n+\n use core::mem::{align_of, size_of};\n+use proc_macros::external;\n \n fn main() {\n     let v_i32 = Vec::<i32>::new();\n@@ -19,13 +23,18 @@ fn main() {\n     let _ = s_i32.len() * size; // WARNING\n     let _ = len * size; // WARNING\n \n+    let _ = external!(&[1u64][..]).len() * size_of::<u64>();\n+\n     // True negatives:\n     let _ = size_of::<i32>() + s_i32.len(); // Ok, not a multiplication\n     let _ = size_of::<i32>() * s_i32.partition_point(|_| true); // Ok, not len()\n     let _ = size_of::<i32>() * v_i32.len(); // Ok, not a slice\n     let _ = align_of::<i32>() * s_i32.len(); // Ok, not size_of()\n     let _ = size_of::<u32>() * s_i32.len(); // Ok, different types\n \n+    let _ = external!($s_i32.len() * size_of::<i32>());\n+    let _ = external!($s_i32.len()) * size_of::<i32>();\n+\n     // False negatives:\n     let _ = 5 * size_of::<i32>() * s_i32.len(); // Ok (MISSED OPPORTUNITY)\n     let _ = size_of::<i32>() * 5 * s_i32.len(); // Ok (MISSED OPPORTUNITY)"}, {"sha": "e09d8057a3b98ae166258de59372785e1093af75", "filename": "tests/ui/manual_slice_size_calculation.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8099f195168b9aa954dd3981ab643f44f59005d4/tests%2Fui%2Fmanual_slice_size_calculation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8099f195168b9aa954dd3981ab643f44f59005d4/tests%2Fui%2Fmanual_slice_size_calculation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.stderr?ref=8099f195168b9aa954dd3981ab643f44f59005d4", "patch": "@@ -1,40 +1,46 @@\n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:12:13\n+  --> $DIR/manual_slice_size_calculation.rs:16:13\n    |\n LL |     let _ = s_i32.len() * size_of::<i32>(); // WARNING\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n    |\n    = note: `-D clippy::manual-slice-size-calculation` implied by `-D warnings`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:13:13\n+  --> $DIR/manual_slice_size_calculation.rs:17:13\n    |\n LL |     let _ = size_of::<i32>() * s_i32.len(); // WARNING\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:14:13\n+  --> $DIR/manual_slice_size_calculation.rs:18:13\n    |\n LL |     let _ = size_of::<i32>() * s_i32.len() * 5; // WARNING\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:18:13\n+  --> $DIR/manual_slice_size_calculation.rs:22:13\n    |\n LL |     let _ = len * size_of::<i32>(); // WARNING\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:19:13\n+  --> $DIR/manual_slice_size_calculation.rs:23:13\n    |\n LL |     let _ = s_i32.len() * size; // WARNING\n    |             ^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:20:13\n+  --> $DIR/manual_slice_size_calculation.rs:24:13\n    |\n LL |     let _ = len * size; // WARNING\n    |             ^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n-error: aborting due to 6 previous errors\n+error: manual slice size calculation\n+  --> $DIR/manual_slice_size_calculation.rs:26:13\n+   |\n+LL |     let _ = external!(&[1u64][..]).len() * size_of::<u64>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(external!(&[1u64][..]))`\n+\n+error: aborting due to 7 previous errors\n "}]}