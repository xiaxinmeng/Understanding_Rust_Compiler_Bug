{"sha": "04657292e047552072bb76cdeba1fab2b4f885b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NjU3MjkyZTA0NzU1MjA3MmJiNzZjZGViYTFmYWIyYjRmODg1YjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-13T12:04:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-13T12:04:05Z"}, "message": "refresh docs", "tree": {"sha": "f7997060cc665ebeb46f8ae3c7b1a9f59bb78442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7997060cc665ebeb46f8ae3c7b1a9f59bb78442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04657292e047552072bb76cdeba1fab2b4f885b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04657292e047552072bb76cdeba1fab2b4f885b3", "html_url": "https://github.com/rust-lang/rust/commit/04657292e047552072bb76cdeba1fab2b4f885b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04657292e047552072bb76cdeba1fab2b4f885b3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe5f26239e04b156963ac8d01371847f965e359", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe5f26239e04b156963ac8d01371847f965e359", "html_url": "https://github.com/rust-lang/rust/commit/afe5f26239e04b156963ac8d01371847f965e359"}], "stats": {"total": 221, "additions": 166, "deletions": 55}, "files": [{"sha": "9ed65e631c5a2c663af3b0d43a1b0d7838f380bb", "filename": "editors/README.md", "status": "modified", "additions": 166, "deletions": 55, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/04657292e047552072bb76cdeba1fab2b4f885b3/editors%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/04657292e047552072bb76cdeba1fab2b4f885b3/editors%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2FREADME.md?ref=04657292e047552072bb76cdeba1fab2b4f885b3", "patch": "@@ -4,72 +4,96 @@ To install experimental VS Code plugin:\n $ git clone https://github.com/rust-analyzer/rust-analyzer.git --depth 1\n $ cd rust-analyzer\n $ cargo install-code\n+\n+# for stdlib support\n+$ rustup component add rust-src\n ```\n \n-This will run `cargo install --packge ra_lsp_server` to install the\n-server binary into `~/.cargo/bin`, and then will build and install\n-plugin from `editors/code`. See\n-[this](https://github.com/matklad/rust-analyzer/blob/cc76b0d31d8ba013c499dd3a4ca69b37004795e6/crates/tools/src/main.rs#L192)\n-for details\n+This will run `cargo install --packge ra_lsp_server` to install the server\n+binary into `~/.cargo/bin`, and then will build and install plugin from\n+`editors/code`. See\n+[this](https://github.com/rust-analyzer/rust-analyzer/blob/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates/tools/src/main.rs#L150)\n+for details. The installation is expected to *just work*, if it doesn't, report\n+bugs!\n \n It's better to remove existing Rust plugins to avoid interference.\n \n-### Features:\n-\n-* syntax highlighting (LSP does not have API for it, so impl is hacky\n-  and sometimes fall-backs to the horrible built-in highlighting)\n-\n-* **Go to symbol in workspace** (`ctrl+t`)\n-  - `#Foo` searches for `Foo` type in the current workspace\n-  - `#foo#` searches for `foo` function in the current workspace\n-  - `#Foo*` searches for `Foo` type among dependencies, excluding `stdlib`\n-  - Sorry for a weired UI, neither LSP, not VSCode have any sane API for filtering! :)\n-\n-* **Go to symbol in file** (`alt+shift+o`)\n-\n-* **Go to definition** (\"correct\" for `mod foo;` decls, approximate for other things).\n-\n-* commands (`ctrl+shift+p` or keybindings)\n-  - **Show Rust Syntax Tree** (use it to verify that plugin works)\n-  - **Rust Extend Selection**. Extends the current selection to the\n-    encompassing syntactic construct (expression, statement, item,\n-    module, etc). It works with multiple cursors. Do bind this command\n-    to a key, its super-useful!\n-  - **Rust Matching Brace**. If the cursor is on any brace\n-    (`<>(){}[]`) which is a part of a brace-pair, moves cursor to the\n-    matching brace.\n-  - **Rust Parent Module**. Navigate to the parent module of the current module\n-  - **Rust Join Lines**. Join selected lines into one, smartly fixing\n-    up whitespace and trailing commas.\n-  - **Run test at caret**. When cursor is inside a function marked\n-    `#[test]`, this action runs this specific test. If the cursor is\n-    outside of the test function, this re-runs the last test. Do bind\n-    this to a shortcut!\n-  - **Format document**. Formats the current file with rustfmt.\n-    Rustfmt must be installed separately with `rustup component add rustfmt`.\n-\n-* Typing assists\n-  - typing `let =` tries to smartly add `;` if `=` is followed by an existing expression.\n-  - Enter inside comments continues comment (`<|>` signifies cursor position):\n+## Rust Analyzer Specifc Features\n \n-```\n-/// Docs<|>\n-fn foo() {}\n-```\n+These features are implemented as extensions to the langauge server protocol.\n+They are more experimental in nature and work only with VS Code.\n \n-```\n-/// Docs\n-/// <|>\n-fn foo() {}\n-```\n+### Syntax highlighting\n+\n+It overrides built-in highlighting, and works only with a specific theme\n+(zenburn). `ra-lsp.highlightingOn` setting can be used to disable it.\n+\n+### Go to symbol in workspace <kbd>ctrl+t</kbd>\n+\n+It mostly works on top of the built-in LSP functionality, however `#` and `*`\n+symbols can be used to narrow down the search. Specifically,\n+\n+- `#Foo` searches for `Foo` type in the current workspace\n+- `#foo#` searches for `foo` function in the current workspace\n+- `#Foo*` searches for `Foo` type among dependencies, excluding `stdlib`\n+- `#foo#*` seaches for `foo` function among dependencies.\n+\n+That is, `#` switches from \"types\" to all symbols, `*` switches from the current\n+workspace to dependencies.\n+\n+### Commands <kbd>ctrl+shift+p</kbd>\n+\n+#### Show Rust Syntax Tree\n+\n+Shows the parse tree of the current file. It exists mostly for debugging\n+rust-analyzer itself.\n+\n+#### Extend Selection\n+\n+Extends the current selection to the encompassing syntactic construct\n+(expression, statement, item, module, etc). It works with multiple cursors. Do\n+bind this command to a key, its super-useful! Expected to be upstreamed to LSP soonish:\n+https://github.com/Microsoft/language-server-protocol/issues/613\n+\n+#### Matching Brace\n+\n+If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n+moves cursor to the matching brace. It uses the actual parser to determine\n+braces, so it won't confuse generics with comparisons.\n \n-* code actions (use `ctrl+.` to activate).\n+#### Parent Module\n \n+Navigates to the parent module of the current module.\n+\n+#### Join Lines\n+\n+Join selected lines into one, smartly fixing up whitespace and trailing commas.\n+\n+#### Run\n+\n+Shows popup suggesting to run a test/benchmark/binary **at the current cursor\n+location**. Super useful for repeatedly running just a single test. Do bind this\n+to a shortcut!\n+\n+\n+### On Typing Assists\n+\n+Some features trigger on typing certain characters:\n+\n+- typing `let =` tries to smartly add `;` if `=` is followed by an existing expression.\n+- Enter inside comments automatically inserts `///`\n+- typing `.` in a chain method call auto-indents\n+\n+\n+### Code Actions (Assists)\n+\n+These are triggered in a particular context via lightbulb. We use custom code on\n+the VS Code side to be able to position cursor.\n \n \n - Flip `,`\n \n-```\n+```rust\n // before:\n fn foo(x: usize,<|> dim: (usize, usize))\n // after:\n@@ -78,7 +102,7 @@ fn foo(dim: (usize, usize), x: usize)\n \n - Add `#[derive]`\n \n-```\n+```rust\n // before:\n struct Foo {\n     <|>x: i32\n@@ -92,7 +116,7 @@ struct Foo {\n \n - Add `impl`\n \n-```\n+```rust\n // before:\n struct Foo<'a, T: Debug> {\n     <|>t: T\n@@ -106,3 +130,90 @@ impl<'a, T: Debug> Foo<'a, T> {\n     <|>\n }\n ```\n+\n+- Change visibility\n+\n+```rust\n+// before:\n+fn<|> foo() {}\n+\n+// after\n+pub(crate) fn foo() {}\n+```\n+\n+- Introduce variable:\n+\n+```rust\n+// before:\n+fn foo() {\n+    foo(<|>1 + 1<|>);\n+}\n+\n+// after:\n+fn foo() {\n+    let var_name = 1 + 1;\n+    foo(var_name);\n+}\n+```\n+\n+- Replace if-let with match:\n+\n+```rust\n+// before:\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        if <|>let VariantData::Struct(..) = *self {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+// after:\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        <|>match *self {\n+            VariantData::Struct(..) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+```\n+\n+- Split import\n+\n+```rust\n+// before:\n+use algo:<|>:visitor::{Visitor, visit};\n+//after:\n+use algo::{<|>visitor::{Visitor, visit}};\n+```\n+\n+## LSP features\n+\n+* **Go to definition**: works correctly for local variables and some paths,\n+  falls back to heuristic name matching for other things for the time being.\n+\n+* **Completion**: completes paths, including dependencies and standard library.\n+  Does not handle glob imports and macros. Completes fields and inherent methods\n+\n+* **Outline** <kbd>alt+shift+o</kbd>\n+\n+* **Signature Info**\n+\n+* **Format document**. Formats the current file with rustfmt. Rustfmt must be\n+  installed separately with `rustup component add rustfmt`.\n+\n+* **Hover** shows types of expressions and docstings\n+\n+* **Rename** works for local variables\n+\n+* **Code Lens** for running tests\n+\n+* **Folding**\n+\n+* **Diagnostics**\n+  - missing module for `mod foo;` with a fix to create `foo.rs`.\n+  - struct field shorthand\n+  - unnessary braces in use item"}]}