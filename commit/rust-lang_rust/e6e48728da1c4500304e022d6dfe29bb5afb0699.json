{"sha": "e6e48728da1c4500304e022d6dfe29bb5afb0699", "node_id": "C_kwDOAAsO6NoAKGU2ZTQ4NzI4ZGExYzQ1MDAzMDRlMDIyZDZkZmUyOWJiNWFmYjA2OTk", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-11T12:10:25Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-11T12:21:15Z"}, "message": "Add tests for stability check in completion", "tree": {"sha": "c7914754710ee90dcc904abaeac020d1123f7a12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7914754710ee90dcc904abaeac020d1123f7a12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6e48728da1c4500304e022d6dfe29bb5afb0699", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQ1ULsACgkQ4laYqTBY\nYXEuug//dbdDn7xESnHwANgfnzXKvu//XN5fDC3H0dzvS688mR4uROMPE0ckpyDx\nKOhvnyg2rVCCErXACKxEgYE34kO2xjU8a0hpGbPwbbo4Lv2rsnQa43B10N6h4chp\npXVXzvNWvECO5ocQkYWkavjpZMsyPevZ/V4b4Nq6VpUwkxUkqkTR/ojNRf5MmFV+\nxZpdl9Xs2i9SdeZPXGvSMaBmJjc0XnWZRHybU+qFVunIbnvPXnrTS3le16Nrt3++\nNhkm8IEaj1gki2Ou4tCHnPruqhnJYFYeVthiFHO6fCfoX4R06fW/paJ6kw2OH20u\nM024x62UrowgFoNetdFh7cSlpxDKMzsXidfFavxit5uCht/lqXuFZcsT1/8vOTyV\nuhcUaatUnzFdAlDs6xwS1mv573cc1xPD9YRGZes86mmOwE9xJ4AqIBszbH9z7uLu\nqJIbiw0IoKsXIPigzQ24B1I47ZKvA7awSN3YnyCWV5EXY77YV/a0ewKbdlKOBRiH\nTdmiM+FFpUD9ll/xlhI0u57MHsEwBdrWS0/FJbl8GrMrvt3bsL2PHNzC8MzGA+Vo\nWkf5AMTvoB7DIGig2KfEvzbmzlsZSktuw+XHfihuRcgItrJWh7p0dcmjsGJMMnjv\nQidUDHprxHUnQYkvHEANY88C/CQrwO2l100TK83G7g7XVVWtosY=\n=SAUm\n-----END PGP SIGNATURE-----", "payload": "tree c7914754710ee90dcc904abaeac020d1123f7a12\nparent 0ce71dd76fb2732bf4be625d5df0fd99e56ecf78\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1681215025 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1681215675 +0900\n\nAdd tests for stability check in completion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e48728da1c4500304e022d6dfe29bb5afb0699", "html_url": "https://github.com/rust-lang/rust/commit/e6e48728da1c4500304e022d6dfe29bb5afb0699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6e48728da1c4500304e022d6dfe29bb5afb0699/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78", "html_url": "https://github.com/rust-lang/rust/commit/0ce71dd76fb2732bf4be625d5df0fd99e56ecf78"}], "stats": {"total": 443, "additions": 428, "deletions": 15}, "files": [{"sha": "ba7663401613a659cd08ad6deac239b87bf6fe0c", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=e6e48728da1c4500304e022d6dfe29bb5afb0699", "patch": "@@ -172,6 +172,43 @@ fn foo(s: S) { s.$0 }\n         );\n     }\n \n+    #[test]\n+    fn no_unstable_method_on_stable() {\n+        check(\n+            r#\"\n+//- /main.rs crate:main deps:std\n+fn foo(s: std::S) { s.$0 }\n+//- /std.rs crate:std\n+pub struct S;\n+impl S {\n+    #[unstable]\n+    pub fn bar(&self) {}\n+}\n+\"#,\n+            expect![\"\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn unstable_method_on_nightly() {\n+        check(\n+            r#\"\n+//- toolchain:nightly\n+//- /main.rs crate:main deps:std\n+fn foo(s: std::S) { s.$0 }\n+//- /std.rs crate:std\n+pub struct S;\n+impl S {\n+    #[unstable]\n+    pub fn bar(&self) {}\n+}\n+\"#,\n+            expect![[r#\"\n+                me bar() fn(&self)\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_struct_field_completion_self() {\n         check("}, {"sha": "79c1f98f3bde6c8aad37a9850507aa07c7e27844", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=e6e48728da1c4500304e022d6dfe29bb5afb0699", "patch": "@@ -23,6 +23,7 @@ mod type_pos;\n mod use_tree;\n mod visibility;\n \n+use expect_test::Expect;\n use hir::PrefixKind;\n use ide_db::{\n     base_db::{fixture::ChangeFixture, FileLoader, FilePosition},\n@@ -215,6 +216,11 @@ pub(crate) fn check_edit_with_config(\n     assert_eq_text!(&ra_fixture_after, &actual)\n }\n \n+fn check_empty(ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list(ra_fixture);\n+    expect.assert_eq(&actual);\n+}\n+\n pub(crate) fn get_all_items(\n     config: CompletionConfig,\n     code: &str,"}, {"sha": "36465be23d84db45e996db6cfba5c784ff526e91", "filename": "crates/ide-completion/src/tests/expression.rs", "status": "modified", "additions": 103, "deletions": 6, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs?ref=e6e48728da1c4500304e022d6dfe29bb5afb0699", "patch": "@@ -1,18 +1,13 @@\n //! Completion tests for expressions.\n use expect_test::{expect, Expect};\n \n-use crate::tests::{check_edit, completion_list, BASE_ITEMS_FIXTURE};\n+use crate::tests::{check_edit, check_empty, completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}{ra_fixture}\"));\n     expect.assert_eq(&actual)\n }\n \n-fn check_empty(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(ra_fixture);\n-    expect.assert_eq(&actual);\n-}\n-\n #[test]\n fn complete_literal_struct_with_a_private_field() {\n     // `FooDesc.bar` is private, the completion should not be triggered.\n@@ -997,3 +992,105 @@ fn foo() { if foo {} el$0 { let x = 92; } }\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn expr_no_unstable_item_on_stable() {\n+    check_empty(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+use std::*;\n+fn main() {\n+    $0\n+}\n+//- /std.rs crate:std\n+#[unstable]\n+pub struct UnstableThisShouldNotBeListed;\n+\"#,\n+        expect![[r#\"\n+            fn main()      fn()\n+            md std\n+            bt u32\n+            kw const\n+            kw crate::\n+            kw enum\n+            kw extern\n+            kw false\n+            kw fn\n+            kw for\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n+            kw mod\n+            kw return\n+            kw self::\n+            kw static\n+            kw struct\n+            kw trait\n+            kw true\n+            kw type\n+            kw union\n+            kw unsafe\n+            kw use\n+            kw while\n+            kw while let\n+            sn macro_rules\n+            sn pd\n+            sn ppd\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn expr_unstable_item_on_nightly() {\n+    check_empty(\n+        r#\"\n+//- toolchain:nightly\n+//- /main.rs crate:main deps:std\n+use std::*;\n+fn main() {\n+    $0\n+}\n+//- /std.rs crate:std\n+#[unstable]\n+pub struct UnstableButWeAreOnNightlyAnyway;\n+\"#,\n+        expect![[r#\"\n+            fn main()                 fn()\n+            md std\n+            st UnstableButWeAreOnNightlyAnyway\n+            bt u32\n+            kw const\n+            kw crate::\n+            kw enum\n+            kw extern\n+            kw false\n+            kw fn\n+            kw for\n+            kw if\n+            kw if let\n+            kw impl\n+            kw let\n+            kw loop\n+            kw match\n+            kw mod\n+            kw return\n+            kw self::\n+            kw static\n+            kw struct\n+            kw trait\n+            kw true\n+            kw type\n+            kw union\n+            kw unsafe\n+            kw use\n+            kw while\n+            kw while let\n+            sn macro_rules\n+            sn pd\n+            sn ppd\n+        \"#]],\n+    );\n+}"}, {"sha": "d727320b5148959002f69744bea960ca17fc30ba", "filename": "crates/ide-completion/src/tests/flyimport.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs?ref=e6e48728da1c4500304e022d6dfe29bb5afb0699", "patch": "@@ -1107,6 +1107,41 @@ fn function() {\n     );\n }\n \n+#[test]\n+fn flyimport_pattern_no_unstable_item_on_stable() {\n+    check(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+fn function() {\n+    let foo$0\n+}\n+//- /std.rs crate:std\n+#[unstable]\n+pub struct FooStruct {}\n+\"#,\n+        expect![\"\"],\n+    );\n+}\n+\n+#[test]\n+fn flyimport_pattern_unstable_item_on_nightly() {\n+    check(\n+        r#\"\n+//- toolchain:nightly\n+//- /main.rs crate:main deps:std\n+fn function() {\n+    let foo$0\n+}\n+//- /std.rs crate:std\n+#[unstable]\n+pub struct FooStruct {}\n+\"#,\n+        expect![[r#\"\n+            st FooStruct (use std::FooStruct)\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn flyimport_item_name() {\n     check("}, {"sha": "2b5b4dd773c878c9b6b7f1af041766e472be80be", "filename": "crates/ide-completion/src/tests/item_list.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=e6e48728da1c4500304e022d6dfe29bb5afb0699", "patch": "@@ -1,7 +1,7 @@\n //! Completion tests for item list position.\n use expect_test::{expect, Expect};\n \n-use crate::tests::{check_edit, completion_list, BASE_ITEMS_FIXTURE};\n+use crate::tests::{check_edit, check_empty, completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}{ra_fixture}\"));\n@@ -297,6 +297,58 @@ impl Test for () {\n     );\n }\n \n+#[test]\n+fn in_trait_impl_no_unstable_item_on_stable() {\n+    check_empty(\n+        r#\"\n+trait Test {\n+    #[unstable]\n+    type Type;\n+    #[unstable]\n+    const CONST: ();\n+    #[unstable]\n+    fn function();\n+}\n+\n+impl Test for () {\n+    $0\n+}\n+\"#,\n+        expect![[r#\"\n+            kw crate::\n+            kw self::\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn in_trait_impl_unstable_item_on_nightly() {\n+    check_empty(\n+        r#\"\n+//- toolchain:nightly\n+trait Test {\n+    #[unstable]\n+    type Type;\n+    #[unstable]\n+    const CONST: ();\n+    #[unstable]\n+    fn function();\n+}\n+\n+impl Test for () {\n+    $0\n+}\n+\"#,\n+        expect![[r#\"\n+            ct const CONST: () =\n+            fn fn function()\n+            ta type Type =\n+            kw crate::\n+            kw self::\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn after_unit_struct() {\n     check("}, {"sha": "8af6cce98f6358529d641bcd523448b94687f876", "filename": "crates/ide-completion/src/tests/pattern.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs?ref=e6e48728da1c4500304e022d6dfe29bb5afb0699", "patch": "@@ -1,12 +1,7 @@\n //! Completion tests for pattern position.\n use expect_test::{expect, Expect};\n \n-use crate::tests::{check_edit, completion_list, BASE_ITEMS_FIXTURE};\n-\n-fn check_empty(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(ra_fixture);\n-    expect.assert_eq(&actual)\n-}\n+use crate::tests::{check_edit, check_empty, completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}\\n{ra_fixture}\"));\n@@ -742,3 +737,56 @@ fn f(x: EnumAlias<u8>) {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn pat_no_unstable_item_on_stable() {\n+    check_empty(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+use std::*;\n+fn foo() {\n+    let a$0\n+}\n+//- /std.rs crate:std\n+#[unstable]\n+pub struct S;\n+#[unstable]\n+pub enum Enum {\n+    Variant\n+}\n+\"#,\n+        expect![[r#\"\n+            md std\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn pat_unstable_item_on_nightly() {\n+    check_empty(\n+        r#\"\n+//- toolchain:nightly\n+//- /main.rs crate:main deps:std\n+use std::*;\n+fn foo() {\n+    let a$0\n+}\n+//- /std.rs crate:std\n+#[unstable]\n+pub struct S;\n+#[unstable]\n+pub enum Enum {\n+    Variant\n+}\n+\"#,\n+        expect![[r#\"\n+            en Enum\n+            md std\n+            st S\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+}"}, {"sha": "789ad66345b12dd3199975ee47b4fb4daeeda127", "filename": "crates/ide-completion/src/tests/predicate.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=e6e48728da1c4500304e022d6dfe29bb5afb0699", "patch": "@@ -1,7 +1,7 @@\n //! Completion tests for predicates and bounds.\n use expect_test::{expect, Expect};\n \n-use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n+use crate::tests::{check_empty, completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}\\n{ra_fixture}\"));\n@@ -129,3 +129,43 @@ impl Record {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn pred_no_unstable_item_on_stable() {\n+    check_empty(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+use std::*;\n+struct Foo<T> where T: $0 {}\n+//- /std.rs crate:std\n+#[unstable]\n+pub trait Trait {}\n+\"#,\n+        expect![[r#\"\n+            md std\n+            kw crate::\n+            kw self::\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn pred_unstable_item_on_nightly() {\n+    check_empty(\n+        r#\"\n+//- toolchain:nightly\n+//- /main.rs crate:main deps:std\n+use std::*;\n+struct Foo<T> where T: $0 {}\n+//- /std.rs crate:std\n+#[unstable]\n+pub trait Trait {}\n+\"#,\n+        expect![[r#\"\n+            md std\n+            tt Trait\n+            kw crate::\n+            kw self::\n+        \"#]],\n+    );\n+}"}, {"sha": "8cb1ff4a125f70c66fec059923ef2bab18979ff4", "filename": "crates/ide-completion/src/tests/type_pos.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=e6e48728da1c4500304e022d6dfe29bb5afb0699", "patch": "@@ -1,7 +1,7 @@\n //! Completion tests for type position.\n use expect_test::{expect, Expect};\n \n-use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n+use crate::tests::{check_empty, completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(&format!(\"{BASE_ITEMS_FIXTURE}\\n{ra_fixture}\"));\n@@ -669,3 +669,53 @@ fn f(t: impl MyTrait<Item1 = u8, Item2 = $0\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn type_pos_no_unstable_type_on_stable() {\n+    check_empty(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+use std::*;\n+struct Foo {\n+    f: $0\n+}\n+//- /std.rs crate:std\n+#[unstable]\n+pub struct S;\n+\"#,\n+        expect![[r#\"\n+            md std\n+            sp Self\n+            st Foo\n+            bt u32\n+            kw crate::\n+            kw self::\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn type_pos_unstable_type_on_nightly() {\n+    check_empty(\n+        r#\"\n+//- toolchain:nightly\n+//- /main.rs crate:main deps:std\n+use std::*;\n+struct Foo {\n+    f: $0\n+}\n+//- /std.rs crate:std\n+#[unstable]\n+pub struct S;\n+\"#,\n+        expect![[r#\"\n+            md std\n+            sp Self\n+            st Foo\n+            st S\n+            bt u32\n+            kw crate::\n+            kw self::\n+        \"#]],\n+    )\n+}"}, {"sha": "ba2e047999ef1c17b535a088a68738ba804dc768", "filename": "crates/ide-completion/src/tests/use_tree.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e48728da1c4500304e022d6dfe29bb5afb0699/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=e6e48728da1c4500304e022d6dfe29bb5afb0699", "patch": "@@ -382,3 +382,51 @@ use self::foo::impl$0\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn use_tree_no_unstable_items_on_stable() {\n+    check(\n+        r#\"\n+//- toolchain:stable\n+//- /lib.rs crate:main deps:std\n+use std::$0\n+//- /std.rs crate:std\n+#[unstable]\n+pub mod simd {}\n+#[unstable]\n+pub struct S;\n+#[unstable]\n+pub fn foo() {}\n+#[unstable]\n+#[macro_export]\n+marco_rules! m { () => {} }\n+\"#,\n+        expect![\"\"],\n+    );\n+}\n+\n+#[test]\n+fn use_tree_unstable_items_on_nightly() {\n+    check(\n+        r#\"\n+//- toolchain:nightly\n+//- /lib.rs crate:main deps:std\n+use std::$0\n+//- /std.rs crate:std\n+#[unstable]\n+pub mod simd {}\n+#[unstable]\n+pub struct S;\n+#[unstable]\n+pub fn foo() {}\n+#[unstable]\n+#[macro_export]\n+marco_rules! m { () => {} }\n+\"#,\n+        expect![[r#\"\n+            fn foo  fn()\n+            md simd\n+            st S\n+        \"#]],\n+    );\n+}"}]}