{"sha": "498a2e416e693fa22042d3ae81c5c969fc87fe5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OGEyZTQxNmU2OTNmYTIyMDQyZDNhZTgxYzVjOTY5ZmM4N2ZlNWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T16:16:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't pub export ast::IntLitType variants", "tree": {"sha": "89ea2ea8bf0331d47b38059501df2cede6cdd5bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ea2ea8bf0331d47b38059501df2cede6cdd5bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/498a2e416e693fa22042d3ae81c5c969fc87fe5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/498a2e416e693fa22042d3ae81c5c969fc87fe5c", "html_url": "https://github.com/rust-lang/rust/commit/498a2e416e693fa22042d3ae81c5c969fc87fe5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/498a2e416e693fa22042d3ae81c5c969fc87fe5c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "url": "https://api.github.com/repos/rust-lang/rust/commits/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33", "html_url": "https://github.com/rust-lang/rust/commit/69072c4f5d18d7a1762fbfb007b0ba3d6b59ad33"}], "stats": {"total": 85, "additions": 42, "deletions": 43}, "files": [{"sha": "6650a06229adcd3ea4bb36e8b08b7999e932f97e", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -1328,14 +1328,14 @@ fn lit_to_const(sess: &Session, span: Span, lit: &ast::Lit, ty_hint: Option<Ty>)\n         }\n         ast::LitKind::Byte(n) => Uint(n as u64),\n         ast::LitKind::Char(n) => Uint(n as u64),\n-        ast::LitKind::Int(n, ast::SignedIntLit(_)) => Int(n as i64),\n-        ast::LitKind::Int(n, ast::UnsuffixedIntLit) => {\n+        ast::LitKind::Int(n, ast::LitIntType::Signed(_)) => Int(n as i64),\n+        ast::LitKind::Int(n, ast::LitIntType::Unsuffixed) => {\n             match ty_hint.map(|ty| &ty.sty) {\n                 Some(&ty::TyUint(_)) => Uint(n),\n                 _ => Int(n as i64)\n             }\n         }\n-        ast::LitKind::Int(n, ast::UnsignedIntLit(_)) => Uint(n),\n+        ast::LitKind::Int(n, ast::LitIntType::Unsigned(_)) => Uint(n),\n         ast::LitKind::Float(ref n, _) |\n         ast::LitKind::FloatUnsuffixed(ref n) => {\n             if let Ok(x) = n.parse::<f64>() {"}, {"sha": "9fe1aa15f4a0f3eb78bb620b5e8be07549a72b81", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -103,10 +103,10 @@ impl LateLintPass for TypeLimits {\n             hir::ExprUnary(hir::UnNeg, ref expr) => {\n                 if let hir::ExprLit(ref lit) = expr.node {\n                     match lit.node {\n-                        ast::LitKind::Int(_, ast::UnsignedIntLit(_)) => {\n+                        ast::LitKind::Int(_, ast::LitIntType::Unsigned(_)) => {\n                             forbid_unsigned_negation(cx, e.span);\n                         },\n-                        ast::LitKind::Int(_, ast::UnsuffixedIntLit) => {\n+                        ast::LitKind::Int(_, ast::LitIntType::Unsuffixed) => {\n                             if let ty::TyUint(_) = cx.tcx.node_id_to_type(e.id).sty {\n                                 forbid_unsigned_negation(cx, e.span);\n                             }\n@@ -159,8 +159,8 @@ impl LateLintPass for TypeLimits {\n                 match cx.tcx.node_id_to_type(e.id).sty {\n                     ty::TyInt(t) => {\n                         match lit.node {\n-                            ast::LitKind::Int(v, ast::SignedIntLit(_)) |\n-                            ast::LitKind::Int(v, ast::UnsuffixedIntLit) => {\n+                            ast::LitKind::Int(v, ast::LitIntType::Signed(_)) |\n+                            ast::LitKind::Int(v, ast::LitIntType::Unsuffixed) => {\n                                 let int_type = if let ast::IntTy::Is = t {\n                                     cx.sess().target.int_type\n                                 } else {\n@@ -312,8 +312,8 @@ impl LateLintPass for TypeLimits {\n                     let (min, max) = int_ty_range(int_ty);\n                     let lit_val: i64 = match lit.node {\n                         hir::ExprLit(ref li) => match li.node {\n-                            ast::LitKind::Int(v, ast::SignedIntLit(_)) |\n-                            ast::LitKind::Int(v, ast::UnsuffixedIntLit) => v as i64,\n+                            ast::LitKind::Int(v, ast::LitIntType::Signed(_)) |\n+                            ast::LitKind::Int(v, ast::LitIntType::Unsuffixed) => v as i64,\n                             _ => return true\n                         },\n                         _ => panic!()"}, {"sha": "e1cff76cb0fb3ae170dfa896540a4141d471e5c9", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -66,13 +66,13 @@ pub fn const_lit(cx: &CrateContext, e: &hir::Expr, lit: &ast::Lit)\n     match lit.node {\n         LitKind::Byte(b) => C_integral(Type::uint_from_ty(cx, ast::UintTy::U8), b as u64, false),\n         LitKind::Char(i) => C_integral(Type::char(cx), i as u64, false),\n-        LitKind::Int(i, ast::SignedIntLit(t)) => {\n+        LitKind::Int(i, ast::LitIntType::Signed(t)) => {\n             C_integral(Type::int_from_ty(cx, t), i, true)\n         }\n-        LitKind::Int(u, ast::UnsignedIntLit(t)) => {\n+        LitKind::Int(u, ast::LitIntType::Unsigned(t)) => {\n             C_integral(Type::uint_from_ty(cx, t), u, false)\n         }\n-        LitKind::Int(i, ast::UnsuffixedIntLit) => {\n+        LitKind::Int(i, ast::LitIntType::Unsuffixed) => {\n             let lit_int_ty = cx.tcx().node_id_to_type(e.id);\n             match lit_int_ty.sty {\n                 ty::TyInt(t) => {"}, {"sha": "f61316f1dfe71b07db32ce8094d13fcbd2361069", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -2613,9 +2613,9 @@ fn check_lit<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         }\n         ast::LitKind::Byte(_) => tcx.types.u8,\n         ast::LitKind::Char(_) => tcx.types.char,\n-        ast::LitKind::Int(_, ast::SignedIntLit(t)) => tcx.mk_mach_int(t),\n-        ast::LitKind::Int(_, ast::UnsignedIntLit(t)) => tcx.mk_mach_uint(t),\n-        ast::LitKind::Int(_, ast::UnsuffixedIntLit) => {\n+        ast::LitKind::Int(_, ast::LitIntType::Signed(t)) => tcx.mk_mach_int(t),\n+        ast::LitKind::Int(_, ast::LitIntType::Unsigned(t)) => tcx.mk_mach_uint(t),\n+        ast::LitKind::Int(_, ast::LitIntType::Unsuffixed) => {\n             let opt_ty = expected.to_option(fcx).and_then(|ty| {\n                 match ty.sty {\n                     ty::TyInt(_) | ty::TyUint(_) => Some(ty),"}, {"sha": "6ece7ed56cf49352fbb5e8114cff18b32b0db03f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -13,7 +13,6 @@\n pub use self::ForeignItem_::*;\n pub use self::Item_::*;\n pub use self::KleeneOp::*;\n-pub use self::LitIntType::*;\n pub use self::MacStmtStyle::*;\n pub use self::MetaItem_::*;\n pub use self::Mutability::*;\n@@ -1267,9 +1266,9 @@ pub type Lit = Spanned<LitKind>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum LitIntType {\n-    SignedIntLit(IntTy),\n-    UnsignedIntLit(UintTy),\n-    UnsuffixedIntLit,\n+    Signed(IntTy),\n+    Unsigned(UintTy),\n+    Unsuffixed,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}, {"sha": "7dfea4f798cdc34f6714a9131c8f947c491ecbbd", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -680,7 +680,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprKind::Lit(P(respan(sp, lit))))\n     }\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n-        self.expr_lit(span, ast::LitKind::Int(i as u64, ast::UnsignedIntLit(ast::UintTy::Us)))\n+        self.expr_lit(span, ast::LitKind::Int(i as u64, ast::LitIntType::Unsigned(ast::UintTy::Us)))\n     }\n     fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr> {\n         if i < 0 {\n@@ -689,14 +689,14 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             let lit = self.expr_lit(sp, ast::LitKind::Int(i, lit_ty));\n             self.expr_unary(sp, ast::UnOp::Neg, lit)\n         } else {\n-            self.expr_lit(sp, ast::LitKind::Int(i as u64, ast::SignedIntLit(ast::IntTy::Is)))\n+            self.expr_lit(sp, ast::LitKind::Int(i as u64, ast::LitIntType::Signed(ast::IntTy::Is)))\n         }\n     }\n     fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitKind::Int(u as u64, ast::UnsignedIntLit(ast::UintTy::U32)))\n+        self.expr_lit(sp, ast::LitKind::Int(u as u64, ast::LitIntType::Unsigned(ast::UintTy::U32)))\n     }\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitKind::Int(u as u64, ast::UnsignedIntLit(ast::UintTy::U8)))\n+        self.expr_lit(sp, ast::LitKind::Int(u as u64, ast::LitIntType::Unsigned(ast::UintTy::U8)))\n     }\n     fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Bool(value))"}, {"sha": "44ef74fcc0ce09c9b6a139cc86b73440e304dc80", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -268,7 +268,7 @@ pub mod rt {\n                     } else {\n                         *self\n                     };\n-                    let lit = ast::LitKind::Int(val as u64, ast::SignedIntLit($tag));\n+                    let lit = ast::LitKind::Int(val as u64, ast::LitIntType::Signed($tag));\n                     let lit = P(ast::Expr {\n                         id: ast::DUMMY_NODE_ID,\n                         node: ast::ExprKind::Lit(P(dummy_spanned(lit))),\n@@ -290,7 +290,7 @@ pub mod rt {\n         (unsigned, $t:ty, $tag:expr) => (\n             impl ToTokens for $t {\n                 fn to_tokens(&self, cx: &ExtCtxt) -> Vec<TokenTree> {\n-                    let lit = ast::LitKind::Int(*self as u64, ast::UnsignedIntLit($tag));\n+                    let lit = ast::LitKind::Int(*self as u64, ast::LitIntType::Unsigned($tag));\n                     dummy_spanned(lit).to_tokens(cx)\n                 }\n             }"}, {"sha": "3d68dcdc6b7a923209fa6a5def3bab384a6c4809", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -586,7 +586,7 @@ pub fn integer_lit(s: &str,\n \n     let mut base = 10;\n     let orig = s;\n-    let mut ty = ast::UnsuffixedIntLit;\n+    let mut ty = ast::LitIntType::Unsuffixed;\n \n     if char_at(s, 0) == '0' && s.len() > 1 {\n         match char_at(s, 1) {\n@@ -618,16 +618,16 @@ pub fn integer_lit(s: &str,\n     if let Some(ref suf) = suffix {\n         if suf.is_empty() { sd.span_bug(sp, \"found empty literal suffix in Some\")}\n         ty = match &**suf {\n-            \"isize\" => ast::SignedIntLit(ast::IntTy::Is),\n-            \"i8\"  => ast::SignedIntLit(ast::IntTy::I8),\n-            \"i16\" => ast::SignedIntLit(ast::IntTy::I16),\n-            \"i32\" => ast::SignedIntLit(ast::IntTy::I32),\n-            \"i64\" => ast::SignedIntLit(ast::IntTy::I64),\n-            \"usize\" => ast::UnsignedIntLit(ast::UintTy::Us),\n-            \"u8\"  => ast::UnsignedIntLit(ast::UintTy::U8),\n-            \"u16\" => ast::UnsignedIntLit(ast::UintTy::U16),\n-            \"u32\" => ast::UnsignedIntLit(ast::UintTy::U32),\n-            \"u64\" => ast::UnsignedIntLit(ast::UintTy::U64),\n+            \"isize\" => ast::LitIntType::Signed(ast::IntTy::Is),\n+            \"i8\"  => ast::LitIntType::Signed(ast::IntTy::I8),\n+            \"i16\" => ast::LitIntType::Signed(ast::IntTy::I16),\n+            \"i32\" => ast::LitIntType::Signed(ast::IntTy::I32),\n+            \"i64\" => ast::LitIntType::Signed(ast::IntTy::I64),\n+            \"usize\" => ast::LitIntType::Unsigned(ast::UintTy::Us),\n+            \"u8\"  => ast::LitIntType::Unsigned(ast::UintTy::U8),\n+            \"u16\" => ast::LitIntType::Unsigned(ast::UintTy::U16),\n+            \"u32\" => ast::LitIntType::Unsigned(ast::UintTy::U32),\n+            \"u64\" => ast::LitIntType::Unsigned(ast::UintTy::U64),\n             _ => {\n                 // i<digits> and u<digits> look like widths, so lets\n                 // give an error message along those lines"}, {"sha": "85a5b5b30687ff4d7f8c5df7a564ce42c1bf6bdd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -2014,7 +2014,7 @@ impl<'a> Parser<'a> {\n     pub fn mk_lit_u32(&mut self, i: u32, attrs: ThinAttributes) -> P<Expr> {\n         let span = &self.span;\n         let lv_lit = P(codemap::Spanned {\n-            node: LitKind::Int(i as u64, ast::UnsignedIntLit(UintTy::U32)),\n+            node: LitKind::Int(i as u64, ast::LitIntType::Unsigned(UintTy::U32)),\n             span: *span\n         });\n "}, {"sha": "8d29cb39d3a37c09fb1923c7aa9f69fac0e7dbe0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -645,14 +645,14 @@ pub trait PrintState<'a> {\n             }\n             ast::LitKind::Int(i, t) => {\n                 match t {\n-                    ast::SignedIntLit(st) => {\n+                    ast::LitIntType::Signed(st) => {\n                         word(self.writer(),\n                              &st.val_to_string(i as i64))\n                     }\n-                    ast::UnsignedIntLit(ut) => {\n+                    ast::LitIntType::Unsigned(ut) => {\n                         word(self.writer(), &ut.val_to_string(i))\n                     }\n-                    ast::UnsuffixedIntLit => {\n+                    ast::LitIntType::Unsuffixed => {\n                         word(self.writer(), &format!(\"{}\", i))\n                     }\n                 }"}, {"sha": "db731adf7943bbca07c4cdc62a28a437eadde021", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498a2e416e693fa22042d3ae81c5c969fc87fe5c/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=498a2e416e693fa22042d3ae81c5c969fc87fe5c", "patch": "@@ -37,9 +37,9 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n                     ast::LitKind::Char(c) => {\n                         accumulator.push(c);\n                     }\n-                    ast::LitKind::Int(i, ast::UnsignedIntLit(_)) |\n-                    ast::LitKind::Int(i, ast::SignedIntLit(_)) |\n-                    ast::LitKind::Int(i, ast::UnsuffixedIntLit) => {\n+                    ast::LitKind::Int(i, ast::LitIntType::Unsigned(_)) |\n+                    ast::LitKind::Int(i, ast::LitIntType::Signed(_)) |\n+                    ast::LitKind::Int(i, ast::LitIntType::Unsuffixed) => {\n                         accumulator.push_str(&format!(\"{}\", i));\n                     }\n                     ast::LitKind::Bool(b) => {"}]}