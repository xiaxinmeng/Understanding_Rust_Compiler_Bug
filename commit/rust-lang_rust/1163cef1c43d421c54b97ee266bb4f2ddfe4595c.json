{"sha": "1163cef1c43d421c54b97ee266bb4f2ddfe4595c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNjNjZWYxYzQzZDQyMWM1NGI5N2VlMjY2YmI0ZjJkZGZlNDU5NWM=", "commit": {"author": {"name": "Luke Steensen", "email": "luke.steensen@gmail.com", "date": "2015-02-09T21:10:33Z"}, "committer": {"name": "Luke Steensen", "email": "luke.steensen@gmail.com", "date": "2015-02-09T21:32:21Z"}, "message": "remove obsolete closure syntax from the guide", "tree": {"sha": "2a705d916bd3cf4bc527ab3ed10093c720f7e1cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a705d916bd3cf4bc527ab3ed10093c720f7e1cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1163cef1c43d421c54b97ee266bb4f2ddfe4595c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1163cef1c43d421c54b97ee266bb4f2ddfe4595c", "html_url": "https://github.com/rust-lang/rust/commit/1163cef1c43d421c54b97ee266bb4f2ddfe4595c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1163cef1c43d421c54b97ee266bb4f2ddfe4595c/comments", "author": {"login": "lukesteensen", "id": 333505, "node_id": "MDQ6VXNlcjMzMzUwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/333505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukesteensen", "html_url": "https://github.com/lukesteensen", "followers_url": "https://api.github.com/users/lukesteensen/followers", "following_url": "https://api.github.com/users/lukesteensen/following{/other_user}", "gists_url": "https://api.github.com/users/lukesteensen/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukesteensen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukesteensen/subscriptions", "organizations_url": "https://api.github.com/users/lukesteensen/orgs", "repos_url": "https://api.github.com/users/lukesteensen/repos", "events_url": "https://api.github.com/users/lukesteensen/events{/privacy}", "received_events_url": "https://api.github.com/users/lukesteensen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukesteensen", "id": 333505, "node_id": "MDQ6VXNlcjMzMzUwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/333505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukesteensen", "html_url": "https://github.com/lukesteensen", "followers_url": "https://api.github.com/users/lukesteensen/followers", "following_url": "https://api.github.com/users/lukesteensen/following{/other_user}", "gists_url": "https://api.github.com/users/lukesteensen/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukesteensen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukesteensen/subscriptions", "organizations_url": "https://api.github.com/users/lukesteensen/orgs", "repos_url": "https://api.github.com/users/lukesteensen/repos", "events_url": "https://api.github.com/users/lukesteensen/events{/privacy}", "received_events_url": "https://api.github.com/users/lukesteensen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ba9e1fa52627404a1e5b90f745f96a872a0c564", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba9e1fa52627404a1e5b90f745f96a872a0c564", "html_url": "https://github.com/rust-lang/rust/commit/0ba9e1fa52627404a1e5b90f745f96a872a0c564"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "8cc6be7387ca1ee1e1bc78022d2b9d4ab64abba0", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1163cef1c43d421c54b97ee266bb4f2ddfe4595c/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/1163cef1c43d421c54b97ee266bb4f2ddfe4595c/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=1163cef1c43d421c54b97ee266bb4f2ddfe4595c", "patch": "@@ -9,7 +9,7 @@ arguments, really powerful things are possible.\n Let's make a closure:\n \n ```{rust}\n-let add_one = |&: x| { 1 + x };\n+let add_one = |x| { 1 + x };\n \n println!(\"The sum of 5 plus 1 is {}.\", add_one(5));\n ```\n@@ -21,8 +21,8 @@ binding name and two parentheses, just like we would for a named function.\n Let's compare syntax. The two are pretty close:\n \n ```{rust}\n-let add_one = |&: x: i32| -> i32 { 1 + x };\n-fn  add_one      (x: i32) -> i32 { 1 + x }\n+let add_one = |x: i32| -> i32 { 1 + x };\n+fn  add_one   (x: i32) -> i32 { 1 + x }\n ```\n \n As you may have noticed, closures infer their argument and return types, so you\n@@ -37,7 +37,7 @@ this:\n fn main() {\n     let x: i32 = 5;\n \n-    let printer = |&:| { println!(\"x is: {}\", x); };\n+    let printer = || { println!(\"x is: {}\", x); };\n \n     printer(); // prints \"x is: 5\"\n }\n@@ -53,7 +53,7 @@ defined. The closure borrows any variables it uses, so this will error:\n fn main() {\n     let mut x: i32 = 5;\n \n-    let printer = |&:| { println!(\"x is: {}\", x); };\n+    let printer = || { println!(\"x is: {}\", x); };\n \n     x = 6; // error: cannot assign to `x` because it is borrowed\n }\n@@ -80,7 +80,7 @@ fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {\n }\n \n fn main() {\n-    let square = |&: x: i32| { x * x };\n+    let square = |x: i32| { x * x };\n \n     twice(5, square); // evaluates to 50\n }\n@@ -89,15 +89,15 @@ fn main() {\n Let's break the example down, starting with `main`:\n \n ```{rust}\n-let square = |&: x: i32| { x * x };\n+let square = |x: i32| { x * x };\n ```\n \n We've seen this before. We make a closure that takes an integer, and returns\n its square.\n \n ```{rust}\n # fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 { f(x) + f(x) }\n-# let square = |&: x: i32| { x * x };\n+# let square = |x: i32| { x * x };\n twice(5, square); // evaluates to 50\n ```\n \n@@ -184,8 +184,8 @@ fn compose<F, G>(x: i32, f: F, g: G) -> i32\n \n fn main() {\n     compose(5,\n-            |&: n: i32| { n + 42 },\n-            |&: n: i32| { n * 2 }); // evaluates to 94\n+            |n: i32| { n + 42 },\n+            |n: i32| { n * 2 }); // evaluates to 94\n }\n ```\n "}]}