{"sha": "1220e016bd242cf17e005943c4f2cc3e0b5de20b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMjBlMDE2YmQyNDJjZjE3ZTAwNTk0M2M0ZjJjYzNlMGI1ZGUyMGI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-10-25T21:02:15Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-10-27T14:04:43Z"}, "message": "add a recursion limit for type representation\n\nI could have added a check for explicit recursion, as irregular types\ntend to cause selection errors, but I am not sufficiently sure that\ncannot be bypassed.\n\nFixes #22919\nFixes #25639\nFixes #26548", "tree": {"sha": "521ef97d4bc4e231ddb3826c698b63142d9301b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/521ef97d4bc4e231ddb3826c698b63142d9301b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1220e016bd242cf17e005943c4f2cc3e0b5de20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1220e016bd242cf17e005943c4f2cc3e0b5de20b", "html_url": "https://github.com/rust-lang/rust/commit/1220e016bd242cf17e005943c4f2cc3e0b5de20b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1220e016bd242cf17e005943c4f2cc3e0b5de20b/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "867fd0a362c5545fcec09718a8fa60b60c23c548", "url": "https://api.github.com/repos/rust-lang/rust/commits/867fd0a362c5545fcec09718a8fa60b60c23c548", "html_url": "https://github.com/rust-lang/rust/commit/867fd0a362c5545fcec09718a8fa60b60c23c548"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "a14663483a91bfe28383ec16b82f6689c146236e", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1220e016bd242cf17e005943c4f2cc3e0b5de20b/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1220e016bd242cf17e005943c4f2cc3e0b5de20b/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=1220e016bd242cf17e005943c4f2cc3e0b5de20b", "patch": "@@ -156,6 +156,9 @@ pub struct LocalCrateContext<'tcx> {\n     /// contexts around the same size.\n     n_llvm_insns: Cell<usize>,\n \n+    /// Depth of the current type-of computation - used to bail out\n+    type_of_depth: Cell<usize>,\n+\n     trait_cache: RefCell<FnvHashMap<ty::PolyTraitRef<'tcx>,\n                                     traits::Vtable<'tcx, ()>>>,\n }\n@@ -470,6 +473,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 unwind_resume_hooked: Cell::new(false),\n                 intrinsics: RefCell::new(FnvHashMap()),\n                 n_llvm_insns: Cell::new(0),\n+                type_of_depth: Cell::new(0),\n                 trait_cache: RefCell::new(FnvHashMap()),\n             };\n \n@@ -774,6 +778,17 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n                     obj))\n     }\n \n+    pub fn enter_type_of(&self, ty: Ty<'tcx>) -> TypeOfDepthLock<'b, 'tcx> {\n+        let current_depth = self.local.type_of_depth.get();\n+        debug!(\"enter_type_of({:?}) at depth {:?}\", ty, current_depth);\n+        if current_depth > self.sess().recursion_limit.get() {\n+            self.sess().fatal(\n+                &format!(\"overflow representing the type `{}`\", ty))\n+        }\n+        self.local.type_of_depth.set(current_depth + 1);\n+        TypeOfDepthLock(self.local)\n+    }\n+\n     pub fn check_overflow(&self) -> bool {\n         self.shared.check_overflow\n     }\n@@ -790,6 +805,14 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     }\n }\n \n+pub struct TypeOfDepthLock<'a, 'tcx: 'a>(&'a LocalCrateContext<'tcx>);\n+\n+impl<'a, 'tcx> Drop for TypeOfDepthLock<'a, 'tcx> {\n+    fn drop(&mut self) {\n+        self.0.type_of_depth.set(self.0.type_of_depth.get() - 1);\n+    }\n+}\n+\n /// Declare any llvm intrinsics that you might need\n fn declare_intrinsic(ccx: &CrateContext, key: &str) -> Option<ValueRef> {\n     macro_rules! ifn {"}, {"sha": "50b9c0b5ad6d80bb94a377d26bc357772707fa3f", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1220e016bd242cf17e005943c4f2cc3e0b5de20b/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1220e016bd242cf17e005943c4f2cc3e0b5de20b/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=1220e016bd242cf17e005943c4f2cc3e0b5de20b", "patch": "@@ -184,6 +184,8 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n     }\n \n     debug!(\"sizing_type_of {:?}\", t);\n+    let _recursion_lock = cx.enter_type_of(t);\n+\n     let llsizingty = match t.sty {\n         _ if !type_is_sized(cx.tcx(), t) => {\n             Type::struct_(cx, &[Type::i8p(cx), Type::i8p(cx)], false)"}, {"sha": "8b02e8e7046ce94a16f9f37ebc949d407e19ff71", "filename": "src/test/compile-fail/issue-26548.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1220e016bd242cf17e005943c4f2cc3e0b5de20b/src%2Ftest%2Fcompile-fail%2Fissue-26548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1220e016bd242cf17e005943c4f2cc3e0b5de20b/src%2Ftest%2Fcompile-fail%2Fissue-26548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26548.rs?ref=1220e016bd242cf17e005943c4f2cc3e0b5de20b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: overflow representing the type `S`\n+\n+trait Mirror { type It; }\n+impl<T> Mirror for T { type It = Self; }\n+struct S(Option<<S as Mirror>::It>);\n+\n+fn main() {\n+    let _s = S(None);\n+}"}]}