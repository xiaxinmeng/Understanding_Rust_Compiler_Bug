{"sha": "3cf841e1bc2bf354c180dc80fb394c0e0a843965", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZjg0MWUxYmMyYmYzNTRjMTgwZGM4MGZiMzk0YzBlMGE4NDM5NjU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-30T13:13:06Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-30T13:13:06Z"}, "message": "Merge #1352\n\n1352: Builtins r=matklad a=matklad\n\ncloses #1340\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f01cf9c3589ae920c50696ce244c98b2454834b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f01cf9c3589ae920c50696ce244c98b2454834b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cf841e1bc2bf354c180dc80fb394c0e0a843965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf841e1bc2bf354c180dc80fb394c0e0a843965", "html_url": "https://github.com/rust-lang/rust/commit/3cf841e1bc2bf354c180dc80fb394c0e0a843965", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cf841e1bc2bf354c180dc80fb394c0e0a843965/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "6b88735fe6cd3b259816c7c90a2675ee057c9e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b88735fe6cd3b259816c7c90a2675ee057c9e4c", "html_url": "https://github.com/rust-lang/rust/commit/6b88735fe6cd3b259816c7c90a2675ee057c9e4c"}, {"sha": "b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "html_url": "https://github.com/rust-lang/rust/commit/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241"}], "stats": {"total": 379, "additions": 261, "deletions": 118}, "files": [{"sha": "e38fa0ff0bbcdf1974e854b6f897bc9c16c3dea8", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -1084,6 +1084,7 @@ dependencies = [\n  \"insta 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"once_cell 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\","}, {"sha": "78808e72f0d75da6c821ffeb4891d897d9bda726", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -13,6 +13,7 @@ parking_lot = \"0.8.0\"\n ena = \"0.11\"\n join_to_string = \"0.1.3\"\n either = \"1.5.2\"\n+once_cell = \"0.2\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_arena = { path = \"../ra_arena\" }"}, {"sha": "e3c76567468b672739229115e6d1f1d5613e452e", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -4,12 +4,12 @@ use ra_db::{CrateId, SourceRootId, Edition, FileId};\n use ra_syntax::{ast::{self, NameOwner, TypeAscriptionOwner}, TreeArc};\n \n use crate::{\n-    Name, AsName, AstId, Ty, HirFileId, Either,\n+    Name, AsName, AstId, Ty, HirFileId, Either, KnownName,\n     HirDatabase, DefDatabase,\n     type_ref::TypeRef,\n     nameres::{ModuleScope, Namespace, ImportId, CrateModuleId},\n     expr::{Body, BodySourceMap, validation::ExprValidator},\n-    ty::{TraitRef, InferenceResult},\n+    ty::{TraitRef, InferenceResult, primitive::{IntTy, FloatTy, Signedness, IntBitness, FloatBitness}},\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n     generics::HasGenericParams,\n     docs::{Documentation, Docs, docs_from_ast},\n@@ -75,6 +75,41 @@ pub struct Module {\n     pub(crate) module_id: CrateModuleId,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum BuiltinType {\n+    Char,\n+    Bool,\n+    Str,\n+    Int(IntTy),\n+    Float(FloatTy),\n+}\n+\n+impl BuiltinType {\n+    #[rustfmt::skip]\n+    pub(crate) const ALL: &'static [(KnownName, BuiltinType)] = &[\n+        (KnownName::Char, BuiltinType::Char),\n+        (KnownName::Bool, BuiltinType::Bool),\n+        (KnownName::Str, BuiltinType::Str),\n+\n+        (KnownName::Isize, BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::Xsize })),\n+        (KnownName::I8,    BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X8 })),\n+        (KnownName::I16,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X16 })),\n+        (KnownName::I32,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X32 })),\n+        (KnownName::I64,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X64 })),\n+        (KnownName::I128,  BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X128 })),\n+\n+        (KnownName::Usize, BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::Xsize })),\n+        (KnownName::U8,    BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X8 })),\n+        (KnownName::U16,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X16 })),\n+        (KnownName::U32,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X32 })),\n+        (KnownName::U64,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X64 })),\n+        (KnownName::U128,  BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X128 })),\n+\n+        (KnownName::F32, BuiltinType::Float(FloatTy { bitness: FloatBitness::X32 })),\n+        (KnownName::F64, BuiltinType::Float(FloatTy { bitness: FloatBitness::X64 })),\n+    ];\n+}\n+\n /// The defs which can be visible in the module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ModuleDef {\n@@ -89,6 +124,7 @@ pub enum ModuleDef {\n     Static(Static),\n     Trait(Trait),\n     TypeAlias(TypeAlias),\n+    BuiltinType(BuiltinType),\n }\n impl_froms!(\n     ModuleDef: Module,\n@@ -100,7 +136,8 @@ impl_froms!(\n     Const,\n     Static,\n     Trait,\n-    TypeAlias\n+    TypeAlias,\n+    BuiltinType\n );\n \n pub enum ModuleSource {"}, {"sha": "3e00eea26515ef011c4309c2080326e293b9f77c", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -6,7 +6,7 @@\n //! applied. So, the relation between syntax and HIR is many-to-one.\n \n macro_rules! impl_froms {\n-    ($e:ident: $($v:ident), *) => {\n+    ($e:ident: $($v:ident),*) => {\n         $(\n             impl From<$v> for $e {\n                 fn from(it: $v) -> $e {\n@@ -80,5 +80,6 @@ pub use self::code_model::{\n     Function, FnSignature,\n     StructField, FieldSource,\n     Static, Const, ConstSignature,\n-    Trait, TypeAlias, MacroDef, Container\n+    Trait, TypeAlias, MacroDef, Container,\n+    BuiltinType,\n };"}, {"sha": "e9003e00b3bdc22b5f2d41a5eef53444d05bfc2a", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -123,7 +123,7 @@ impl AsName for ra_db::Dependency {\n // const ISIZE: Name = Name::new(\"isize\")\n // ```\n // but const-fn is not that powerful yet.\n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub(crate) enum KnownName {\n     Isize,\n     I8,\n@@ -151,3 +151,31 @@ pub(crate) enum KnownName {\n \n     MacroRules,\n }\n+\n+impl AsName for KnownName {\n+    fn as_name(&self) -> Name {\n+        let s = match self {\n+            KnownName::Isize => \"isize\",\n+            KnownName::I8 => \"i8\",\n+            KnownName::I16 => \"i16\",\n+            KnownName::I32 => \"i32\",\n+            KnownName::I64 => \"i64\",\n+            KnownName::I128 => \"i128\",\n+            KnownName::Usize => \"usize\",\n+            KnownName::U8 => \"u8\",\n+            KnownName::U16 => \"u16\",\n+            KnownName::U32 => \"u32\",\n+            KnownName::U64 => \"u64\",\n+            KnownName::U128 => \"u128\",\n+            KnownName::F32 => \"f32\",\n+            KnownName::F64 => \"f64\",\n+            KnownName::Bool => \"bool\",\n+            KnownName::Char => \"char\",\n+            KnownName::Str => \"str\",\n+            KnownName::SelfType => \"Self\",\n+            KnownName::SelfParam => \"self\",\n+            KnownName::MacroRules => \"macro_rules\",\n+        };\n+        Name::new(s.into())\n+    }\n+}"}, {"sha": "aa26345b224d81f19d89c2964084c60f701faeaa", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -62,9 +62,10 @@ use ra_db::{FileId, Edition};\n use test_utils::tested_by;\n use ra_syntax::ast;\n use ra_prof::profile;\n+use once_cell::sync::Lazy;\n \n use crate::{\n-    ModuleDef, Name, Crate, Module, MacroDef,\n+    ModuleDef, Name, Crate, Module, MacroDef, AsName, BuiltinType,\n     DefDatabase, Path, PathKind, HirFileId, Trait,\n     ids::MacroDefId,\n     diagnostics::DiagnosticSink,\n@@ -140,12 +141,22 @@ pub struct ModuleScope {\n     macros: FxHashMap<Name, MacroDef>,\n }\n \n+static BUILTIN_SCOPE: Lazy<FxHashMap<Name, Resolution>> = Lazy::new(|| {\n+    BuiltinType::ALL\n+        .iter()\n+        .map(|&(known_name, ty)| {\n+            (known_name.as_name(), Resolution { def: PerNs::types(ty.into()), import: None })\n+        })\n+        .collect()\n+});\n+\n impl ModuleScope {\n     pub fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a Name, &'a Resolution)> + 'a {\n-        self.items.iter()\n+        //FIXME: shadowing\n+        self.items.iter().chain(BUILTIN_SCOPE.iter())\n     }\n     pub fn get(&self, name: &Name) -> Option<&Resolution> {\n-        self.items.get(name)\n+        self.items.get(name).or_else(|| BUILTIN_SCOPE.get(name))\n     }\n     pub fn traits<'a>(&'a self) -> impl Iterator<Item = Trait> + 'a {\n         self.items.values().filter_map(|r| match r.def.take_types() {\n@@ -154,7 +165,7 @@ impl ModuleScope {\n         })\n     }\n     fn get_item_or_macro(&self, name: &Name) -> Option<ItemOrMacro> {\n-        match (self.items.get(name), self.macros.get(name)) {\n+        match (self.get(name), self.macros.get(name)) {\n             (Some(item), _) if !item.def.is_none() => Some(Either::Left(item.def)),\n             (_, Some(macro_)) => Some(Either::Right(*macro_)),\n             _ => None,"}, {"sha": "a15e62bbe620ef2bb019bd67b07bddd6276bec64", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -1,6 +1,7 @@\n mod macros;\n mod globs;\n mod incremental;\n+mod primitives;\n \n use std::sync::Arc;\n "}, {"sha": "bc721f6e0aed5871876166314bbe752fe6db356f", "filename": "crates/ra_hir/src/nameres/tests/incremental.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -116,7 +116,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         let events = db.log_executed(|| {\n             let module = crate::source_binder::module_from_file_id(&db, pos.file_id).unwrap();\n             let decls = module.declarations(&db);\n-            assert_eq!(decls.len(), 1);\n+            assert_eq!(decls.len(), 18);\n         });\n         assert!(format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }\n@@ -126,7 +126,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         let events = db.log_executed(|| {\n             let module = crate::source_binder::module_from_file_id(&db, pos.file_id).unwrap();\n             let decls = module.declarations(&db);\n-            assert_eq!(decls.len(), 1);\n+            assert_eq!(decls.len(), 18);\n         });\n         assert!(!format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }"}, {"sha": "734744835a39d64d6b6bb0b4eb6aad41dd14687f", "filename": "crates/ra_hir/src/nameres/tests/primitives.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fprimitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fprimitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fprimitives.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -0,0 +1,24 @@\n+use super::*;\n+\n+#[test]\n+fn primitive_reexport() {\n+    let map = def_map(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+        use foo::int;\n+\n+        //- /foo.rs\n+        pub use i32 as int;\n+        \",\n+    );\n+    assert_snapshot_matches!(map, @r###\"\n+   \u22eecrate\n+   \u22eefoo: t\n+   \u22eeint: t\n+   \u22ee\n+   \u22eecrate::foo\n+   \u22eeint: t\n+    \"###\n+    );\n+}"}, {"sha": "e8ae33eadcaec1c3c0db51d926114d71bea4ec82", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -649,7 +649,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             | TypableDef::Function(_)\n             | TypableDef::Enum(_)\n             | TypableDef::Const(_)\n-            | TypableDef::Static(_) => (Ty::Unknown, None),\n+            | TypableDef::Static(_)\n+            | TypableDef::BuiltinType(_) => (Ty::Unknown, None),\n         }\n     }\n "}, {"sha": "71cd722345d2069d58b7142a48f62f3ca277b736", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -10,9 +10,8 @@ use std::iter;\n \n use crate::{\n     Function, Struct, Union, StructField, Enum, EnumVariant, Path, ModuleDef, TypeAlias, Const, Static,\n-    HirDatabase,\n+    HirDatabase, BuiltinType,\n     type_ref::TypeRef,\n-    name::KnownName,\n     nameres::Namespace,\n     resolve::{Resolver, Resolution},\n     path::{PathSegment, GenericArg},\n@@ -22,7 +21,7 @@ use crate::{\n     generics::{WherePredicate, GenericDef},\n     ty::AdtDef,\n };\n-use super::{Ty, primitive, FnSig, Substs, TypeCtor, TraitRef, GenericPredicate};\n+use super::{Ty, FnSig, Substs, TypeCtor, TraitRef, GenericPredicate};\n \n impl Ty {\n     pub(crate) fn from_hir(db: &impl HirDatabase, resolver: &Resolver, type_ref: &TypeRef) -> Self {\n@@ -65,22 +64,6 @@ impl Ty {\n     }\n \n     pub(crate) fn from_hir_path(db: &impl HirDatabase, resolver: &Resolver, path: &Path) -> Self {\n-        if let Some(name) = path.as_ident() {\n-            // FIXME handle primitive type names in resolver as well?\n-            if let Some(int_ty) = primitive::IntTy::from_type_name(name) {\n-                return Ty::simple(TypeCtor::Int(primitive::UncertainIntTy::Known(int_ty)));\n-            } else if let Some(float_ty) = primitive::FloatTy::from_type_name(name) {\n-                return Ty::simple(TypeCtor::Float(primitive::UncertainFloatTy::Known(float_ty)));\n-            } else if let Some(known) = name.as_known_name() {\n-                match known {\n-                    KnownName::Bool => return Ty::simple(TypeCtor::Bool),\n-                    KnownName::Char => return Ty::simple(TypeCtor::Char),\n-                    KnownName::Str => return Ty::simple(TypeCtor::Str),\n-                    _ => {}\n-                }\n-            }\n-        }\n-\n         // Resolve the path (in type namespace)\n         let resolution = resolver.resolve_path(db, path).take_types();\n \n@@ -128,7 +111,7 @@ impl Ty {\n             TypableDef::Enum(e) => Some(e.into()),\n             TypableDef::EnumVariant(var) => Some(var.parent_enum(db).into()),\n             TypableDef::TypeAlias(t) => Some(t.into()),\n-            TypableDef::Const(_) | TypableDef::Static(_) => None,\n+            TypableDef::Const(_) | TypableDef::Static(_) | TypableDef::BuiltinType(_) => None,\n         };\n         substs_from_path_segment(db, resolver, segment, def_generic, false)\n     }\n@@ -149,7 +132,8 @@ impl Ty {\n             | TypableDef::Enum(_)\n             | TypableDef::Const(_)\n             | TypableDef::Static(_)\n-            | TypableDef::TypeAlias(_) => last,\n+            | TypableDef::TypeAlias(_)\n+            | TypableDef::BuiltinType(_) => last,\n             TypableDef::EnumVariant(_) => {\n                 // the generic args for an enum variant may be either specified\n                 // on the segment referring to the enum, or on the segment\n@@ -299,6 +283,7 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n         (TypableDef::TypeAlias(t), Namespace::Types) => type_for_type_alias(db, t),\n         (TypableDef::Const(c), Namespace::Values) => type_for_const(db, c),\n         (TypableDef::Static(c), Namespace::Values) => type_for_static(db, c),\n+        (TypableDef::BuiltinType(t), Namespace::Types) => type_for_builtin(t),\n \n         // 'error' cases:\n         (TypableDef::Function(_), Namespace::Types) => Ty::Unknown,\n@@ -308,6 +293,7 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n         (TypableDef::TypeAlias(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::Const(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::Static(_), Namespace::Types) => Ty::Unknown,\n+        (TypableDef::BuiltinType(_), Namespace::Values) => Ty::Unknown,\n     }\n }\n \n@@ -399,6 +385,17 @@ fn type_for_static(db: &impl HirDatabase, def: Static) -> Ty {\n     Ty::from_hir(db, &resolver, signature.type_ref())\n }\n \n+/// Build the declared type of a static.\n+fn type_for_builtin(def: BuiltinType) -> Ty {\n+    Ty::simple(match def {\n+        BuiltinType::Char => TypeCtor::Char,\n+        BuiltinType::Bool => TypeCtor::Bool,\n+        BuiltinType::Str => TypeCtor::Str,\n+        BuiltinType::Int(ty) => TypeCtor::Int(ty.into()),\n+        BuiltinType::Float(ty) => TypeCtor::Float(ty.into()),\n+    })\n+}\n+\n fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n     let var_data = def.variant_data(db);\n     let fields = match var_data.fields() {\n@@ -477,8 +474,19 @@ pub enum TypableDef {\n     TypeAlias(TypeAlias),\n     Const(Const),\n     Static(Static),\n+    BuiltinType(BuiltinType),\n }\n-impl_froms!(TypableDef: Function, Struct, Union, Enum, EnumVariant, TypeAlias, Const, Static);\n+impl_froms!(\n+    TypableDef: Function,\n+    Struct,\n+    Union,\n+    Enum,\n+    EnumVariant,\n+    TypeAlias,\n+    Const,\n+    Static,\n+    BuiltinType\n+);\n \n impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {\n@@ -491,6 +499,7 @@ impl From<ModuleDef> for Option<TypableDef> {\n             ModuleDef::TypeAlias(t) => t.into(),\n             ModuleDef::Const(v) => v.into(),\n             ModuleDef::Static(v) => v.into(),\n+            ModuleDef::BuiltinType(t) => t.into(),\n             ModuleDef::Module(_) | ModuleDef::Trait(_) => return None,\n         };\n         Some(res)"}, {"sha": "62b75b764d73909c16dba587b9c6a618aabd6862", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -1,7 +1,5 @@\n use std::fmt;\n \n-use crate::{Name, KnownName};\n-\n #[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n pub enum Signedness {\n     Signed,\n@@ -30,6 +28,12 @@ pub enum UncertainIntTy {\n     Known(IntTy),\n }\n \n+impl From<IntTy> for UncertainIntTy {\n+    fn from(ty: IntTy) -> Self {\n+        UncertainIntTy::Known(ty)\n+    }\n+}\n+\n impl fmt::Display for UncertainIntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -45,6 +49,12 @@ pub enum UncertainFloatTy {\n     Known(FloatTy),\n }\n \n+impl From<FloatTy> for UncertainFloatTy {\n+    fn from(ty: FloatTy) -> Self {\n+        UncertainFloatTy::Known(ty)\n+    }\n+}\n+\n impl fmt::Display for UncertainFloatTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -138,24 +148,6 @@ impl IntTy {\n         }\n     }\n \n-    pub(crate) fn from_type_name(name: &Name) -> Option<IntTy> {\n-        match name.as_known_name()? {\n-            KnownName::Isize => Some(IntTy::isize()),\n-            KnownName::I8 => Some(IntTy::i8()),\n-            KnownName::I16 => Some(IntTy::i16()),\n-            KnownName::I32 => Some(IntTy::i32()),\n-            KnownName::I64 => Some(IntTy::i64()),\n-            KnownName::I128 => Some(IntTy::i128()),\n-            KnownName::Usize => Some(IntTy::usize()),\n-            KnownName::U8 => Some(IntTy::u8()),\n-            KnownName::U16 => Some(IntTy::u16()),\n-            KnownName::U32 => Some(IntTy::u32()),\n-            KnownName::U64 => Some(IntTy::u64()),\n-            KnownName::U128 => Some(IntTy::u128()),\n-            _ => None,\n-        }\n-    }\n-\n     pub(crate) fn from_suffix(suffix: &str) -> Option<IntTy> {\n         match suffix {\n             \"isize\" => Some(IntTy::isize()),\n@@ -208,14 +200,6 @@ impl FloatTy {\n         }\n     }\n \n-    pub(crate) fn from_type_name(name: &Name) -> Option<FloatTy> {\n-        match name.as_known_name()? {\n-            KnownName::F32 => Some(FloatTy::f32()),\n-            KnownName::F64 => Some(FloatTy::f64()),\n-            _ => None,\n-        }\n-    }\n-\n     pub(crate) fn from_suffix(suffix: &str) -> Option<FloatTy> {\n         match suffix {\n             \"f32\" => Some(FloatTy::f32()),"}, {"sha": "c34e89af71fca33b7a77fb0eb8c2ee0c12e5a41d", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -2717,6 +2717,24 @@ fn test() { (S {}).method()<|>; }\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn shadowing_primitive() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+struct i32;\n+struct Foo;\n+\n+impl i32 { fn foo(&self) -> Foo { Foo } }\n+\n+fn main() {\n+    let x: i32 = i32;\n+    x.foo()<|>;\n+}\"#,\n+    );\n+    assert_eq!(t, \"Foo\");\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}, {"sha": "99da241422912887d09d94a29c729e4e795863dc", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -17,6 +17,12 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         hir::ModuleDef::Module(module) => {\n             let module_scope = module.scope(ctx.db);\n             for (name, res) in module_scope.entries() {\n+                if let Some(hir::ModuleDef::BuiltinType(..)) = res.def.as_ref().take_types() {\n+                    if ctx.use_item_syntax.is_some() {\n+                        tested_by!(dont_complete_primitive_in_use);\n+                        continue;\n+                    }\n+                }\n                 if Some(module) == ctx.module {\n                     if let Some(import) = res.import {\n                         if let Either::A(use_tree) = module.import_source(ctx.db, import) {\n@@ -88,6 +94,20 @@ mod tests {\n         assert_eq!(completions.len(), 2);\n     }\n \n+    #[test]\n+    fn dont_complete_primitive_in_use() {\n+        covers!(dont_complete_primitive_in_use);\n+        let completions = do_completion(r\"use self::<|>;\", CompletionKind::BuiltinType);\n+        assert!(completions.is_empty());\n+    }\n+\n+    #[test]\n+    fn completes_primitives() {\n+        let completions =\n+            do_completion(r\"fn main() { let _: <|> = 92; }\", CompletionKind::BuiltinType);\n+        assert_eq!(completions.len(), 17);\n+    }\n+\n     #[test]\n     fn completes_mod_with_docs() {\n         check_reference_completion("}, {"sha": "6f2a60640eb2e32c3f16b68b77c19d6a6c67be03", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -78,6 +78,7 @@ pub enum CompletionItemKind {\n     Keyword,\n     Module,\n     Function,\n+    BuiltinType,\n     Struct,\n     Enum,\n     EnumVariant,\n@@ -102,6 +103,7 @@ pub(crate) enum CompletionKind {\n     Magic,\n     Snippet,\n     Postfix,\n+    BuiltinType,\n }\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]"}, {"sha": "d405161d63a3226f710dea140ed2b8678bb3d8b7", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -57,6 +57,7 @@ impl Completions {\n             }\n             Some(it) => it,\n         };\n+        let mut completion_kind = CompletionKind::Reference;\n         let (kind, docs) = match def {\n             Resolution::Def(Module(it)) => (CompletionItemKind::Module, it.docs(ctx.db)),\n             Resolution::Def(Function(func)) => {\n@@ -70,14 +71,18 @@ impl Completions {\n             Resolution::Def(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),\n             Resolution::Def(Trait(it)) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n             Resolution::Def(TypeAlias(it)) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n+            Resolution::Def(BuiltinType(..)) => {\n+                completion_kind = CompletionKind::BuiltinType;\n+                (CompletionItemKind::BuiltinType, None)\n+            }\n             Resolution::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n             Resolution::LocalBinding(..) => (CompletionItemKind::Binding, None),\n             Resolution::SelfType(..) => (\n                 CompletionItemKind::TypeParam, // (does this need its own kind?)\n                 None,\n             ),\n         };\n-        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), local_name)\n+        CompletionItem::new(completion_kind, ctx.source_range(), local_name)\n             .kind(kind)\n             .set_documentation(docs)\n             .add_to(self)"}, {"sha": "e19c071b08a7fdee36b4b10fb1241d45d2980ac9", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -165,8 +165,11 @@ impl NavigationTarget {\n         }\n     }\n \n-    pub(crate) fn from_def(db: &RootDatabase, module_def: hir::ModuleDef) -> NavigationTarget {\n-        match module_def {\n+    pub(crate) fn from_def(\n+        db: &RootDatabase,\n+        module_def: hir::ModuleDef,\n+    ) -> Option<NavigationTarget> {\n+        let nav = match module_def {\n             hir::ModuleDef::Module(module) => NavigationTarget::from_module(db, module),\n             hir::ModuleDef::Function(func) => NavigationTarget::from_function(db, func),\n             hir::ModuleDef::Struct(s) => {\n@@ -201,7 +204,11 @@ impl NavigationTarget {\n                 let (file_id, node) = e.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n-        }\n+            hir::ModuleDef::BuiltinType(..) => {\n+                return None;\n+            }\n+        };\n+        Some(nav)\n     }\n \n     pub(crate) fn from_impl_block("}, {"sha": "97b367115ca90a98e1b9f9241a3db31cdb427c41", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -62,7 +62,10 @@ pub(crate) fn reference_definition(\n         Some(Macro(mac)) => return Exact(NavigationTarget::from_macro_def(db, mac)),\n         Some(FieldAccess(field)) => return Exact(NavigationTarget::from_field(db, field)),\n         Some(AssocItem(assoc)) => return Exact(NavigationTarget::from_impl_item(db, assoc)),\n-        Some(Def(def)) => return Exact(NavigationTarget::from_def(db, def)),\n+        Some(Def(def)) => match NavigationTarget::from_def(db, def) {\n+            Some(nav) => return Exact(nav),\n+            None => return Approximate(vec![]),\n+        },\n         Some(SelfType(ty)) => {\n             if let Some((def_id, _)) = ty.as_adt() {\n                 return Exact(NavigationTarget::from_adt_def(db, def_id));"}, {"sha": "9cb991de5ef54e8569b38cbb94f43730b9f715f5", "filename": "crates/ra_ide_api/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -6,4 +6,5 @@ test_utils::marks!(\n     goto_definition_works_for_named_fields\n     call_info_bad_offset\n     dont_complete_current_use\n+    dont_complete_primitive_in_use\n );"}, {"sha": "3a04a51cd82ec4f206e9da971ffe37ef1cf0576d", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 38, "deletions": 50, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -30,14 +30,6 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n     }\n }\n \n-fn is_prim_type(node: &ast::NameRef) -> bool {\n-    match node.text().as_str() {\n-        \"u8\" | \"i8\" | \"u16\" | \"i16\" | \"u32\" | \"i32\" | \"u64\" | \"i64\" | \"u128\" | \"i128\" | \"usize\"\n-        | \"isize\" | \"f32\" | \"f64\" | \"bool\" | \"char\" | \"str\" => true,\n-        _ => false,\n-    }\n-}\n-\n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n     let source_file = db.parse(file_id).tree;\n@@ -71,51 +63,47 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             NAME_REF => {\n                 if let Some(name_ref) = node.as_node().and_then(ast::NameRef::cast) {\n                     // FIXME: revisit this after #1340\n-                    if is_prim_type(name_ref) {\n-                        \"type\"\n-                    } else {\n-                        use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n-                        use hir::{ModuleDef, ImplItem};\n+                    use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n+                    use hir::{ModuleDef, ImplItem};\n \n-                        // FIXME: try to reuse the SourceAnalyzers\n-                        let analyzer =\n-                            hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n-                        match classify_name_ref(db, &analyzer, name_ref) {\n-                            Some(Method(_)) => \"function\",\n-                            Some(Macro(_)) => \"macro\",\n-                            Some(FieldAccess(_)) => \"field\",\n-                            Some(AssocItem(ImplItem::Method(_))) => \"function\",\n-                            Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n-                            Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n-                            Some(Def(ModuleDef::Module(_))) => \"module\",\n-                            Some(Def(ModuleDef::Function(_))) => \"function\",\n-                            Some(Def(ModuleDef::Struct(_))) => \"type\",\n-                            Some(Def(ModuleDef::Union(_))) => \"type\",\n-                            Some(Def(ModuleDef::Enum(_))) => \"type\",\n-                            Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n-                            Some(Def(ModuleDef::Const(_))) => \"constant\",\n-                            Some(Def(ModuleDef::Static(_))) => \"constant\",\n-                            Some(Def(ModuleDef::Trait(_))) => \"type\",\n-                            Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n-                            Some(SelfType(_)) => \"type\",\n-                            Some(Pat(ptr)) => {\n-                                binding_hash = Some({\n-                                    let text = ptr\n-                                        .syntax_node_ptr()\n-                                        .to_node(&source_file.syntax())\n-                                        .text()\n-                                        .to_smol_string();\n-                                    let shadow_count =\n-                                        bindings_shadow_count.entry(text.clone()).or_default();\n-                                    calc_binding_hash(file_id, &text, *shadow_count)\n-                                });\n+                    // FIXME: try to reuse the SourceAnalyzers\n+                    let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n+                    match classify_name_ref(db, &analyzer, name_ref) {\n+                        Some(Method(_)) => \"function\",\n+                        Some(Macro(_)) => \"macro\",\n+                        Some(FieldAccess(_)) => \"field\",\n+                        Some(AssocItem(ImplItem::Method(_))) => \"function\",\n+                        Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n+                        Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n+                        Some(Def(ModuleDef::Module(_))) => \"module\",\n+                        Some(Def(ModuleDef::Function(_))) => \"function\",\n+                        Some(Def(ModuleDef::Struct(_))) => \"type\",\n+                        Some(Def(ModuleDef::Union(_))) => \"type\",\n+                        Some(Def(ModuleDef::Enum(_))) => \"type\",\n+                        Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Const(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Static(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Trait(_))) => \"type\",\n+                        Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n+                        Some(Def(ModuleDef::BuiltinType(_))) => \"type\",\n+                        Some(SelfType(_)) => \"type\",\n+                        Some(Pat(ptr)) => {\n+                            binding_hash = Some({\n+                                let text = ptr\n+                                    .syntax_node_ptr()\n+                                    .to_node(&source_file.syntax())\n+                                    .text()\n+                                    .to_smol_string();\n+                                let shadow_count =\n+                                    bindings_shadow_count.entry(text.clone()).or_default();\n+                                calc_binding_hash(file_id, &text, *shadow_count)\n+                            });\n \n-                                \"variable\"\n-                            }\n-                            Some(SelfParam(_)) => \"type\",\n-                            Some(GenericParam(_)) => \"type\",\n-                            None => \"text\",\n+                            \"variable\"\n                         }\n+                        Some(SelfParam(_)) => \"type\",\n+                        Some(GenericParam(_)) => \"type\",\n+                        None => \"text\",\n                     }\n                 } else {\n                     \"text\""}, {"sha": "1b349d02a42148b2c1b33c48547c037047da7259", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf841e1bc2bf354c180dc80fb394c0e0a843965/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=3cf841e1bc2bf354c180dc80fb394c0e0a843965", "patch": "@@ -65,6 +65,7 @@ impl Conv for CompletionItemKind {\n             CompletionItemKind::Struct => Struct,\n             CompletionItemKind::Enum => Enum,\n             CompletionItemKind::EnumVariant => EnumMember,\n+            CompletionItemKind::BuiltinType => Struct,\n             CompletionItemKind::Binding => Variable,\n             CompletionItemKind::Field => Field,\n             CompletionItemKind::Trait => Interface,"}]}