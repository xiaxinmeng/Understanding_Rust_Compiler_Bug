{"sha": "a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZDdiZGYxYzg4NGE5ZjNkZDQxNWE4ODJmYTU2NDIyYWRhZTg5YmY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:07:06Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:39Z"}, "message": "Replace Substitution::bound_vars and ::type_params_for_generics", "tree": {"sha": "8b5d2db036649ddc15c587a03e1684b3314be50b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b5d2db036649ddc15c587a03e1684b3314be50b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "html_url": "https://github.com/rust-lang/rust/commit/a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "715c178f0b52117c4c689c39a0921012bfbb2386", "url": "https://api.github.com/repos/rust-lang/rust/commits/715c178f0b52117c4c689c39a0921012bfbb2386", "html_url": "https://github.com/rust-lang/rust/commit/715c178f0b52117c4c689c39a0921012bfbb2386"}], "stats": {"total": 96, "additions": 42, "deletions": 54}, "files": [{"sha": "39e0b328d2a2036ea54158acad76f3b6442a9ca7", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, primitive,\n     to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy,\n     CallableDefId, CallableSig, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime, OpaqueTy,\n-    ProjectionTy, QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TyExt, TyKind,\n+    ProjectionTy, QuantifiedWhereClause, Scalar, TraitRef, Ty, TyExt, TyKind,\n     WhereClause,\n };\n \n@@ -592,7 +592,7 @@ impl HirDisplay for Ty {\n                         write!(f, \"{}\", param_data.name.clone().unwrap_or_else(Name::missing))?\n                     }\n                     TypeParamProvenance::ArgumentImplTrait => {\n-                        let substs = Substitution::type_params_for_generics(f.db, &generics);\n+                        let substs = generics.type_params_subst(f.db);\n                         let bounds = f\n                             .db\n                             .generic_predicates(id.parent)"}, {"sha": "1b1d4458c0c9b4fcfbbb23e44904ea3041bd13b5", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "patch": "@@ -38,7 +38,7 @@ use syntax::SmolStr;\n \n use super::{\n     traits::{DomainGoal, Guidance, Solution},\n-    InEnvironment, ProjectionTy, Substitution, TraitEnvironment, TraitRef, Ty, TypeWalk,\n+    InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty, TypeWalk,\n };\n use crate::{\n     db::HirDatabase, infer::diagnostics::InferenceDiagnostic, lower::ImplTraitLoweringMode,\n@@ -487,7 +487,7 @@ impl<'a> InferenceContext<'a> {\n             }\n             TypeNs::SelfType(impl_id) => {\n                 let generics = crate::utils::generics(self.db.upcast(), impl_id.into());\n-                let substs = Substitution::type_params_for_generics(self.db, &generics);\n+                let substs = generics.type_params_subst(self.db);\n                 let ty = self.db.impl_self_ty(impl_id).subst(&substs);\n                 match unresolved {\n                     None => {"}, {"sha": "671ea355f44befff7cb00609e75c7804a6238cd3", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "patch": "@@ -80,7 +80,7 @@ impl<'a> InferenceContext<'a> {\n             }\n             ValueNs::ImplSelf(impl_id) => {\n                 let generics = crate::utils::generics(self.db.upcast(), impl_id.into());\n-                let substs = Substitution::type_params_for_generics(self.db, &generics);\n+                let substs = generics.type_params_subst(self.db);\n                 let ty = self.db.impl_self_ty(impl_id).subst(&substs);\n                 if let Some((AdtId::StructId(struct_id), substs)) = ty.as_adt() {\n                     let ty = self.db.value_ty(struct_id.into()).subst(&substs);"}, {"sha": "6d6443ca3beeca83cf27441cbc751172521f5da8", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "patch": "@@ -41,7 +41,7 @@ use hir_def::{\n use crate::{\n     db::HirDatabase,\n     display::HirDisplay,\n-    utils::{generics, make_mut_slice, Generics},\n+    utils::{generics, make_mut_slice},\n };\n \n pub use autoderef::autoderef;\n@@ -463,34 +463,10 @@ impl Substitution {\n         Substitution(elements.into_iter().casted(interner).collect())\n     }\n \n-    /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n-    pub(crate) fn type_params_for_generics(\n-        db: &dyn HirDatabase,\n-        generic_params: &Generics,\n-    ) -> Substitution {\n-        Substitution::from_iter(\n-            &Interner,\n-            generic_params\n-                .iter()\n-                .map(|(id, _)| TyKind::Placeholder(to_placeholder_idx(db, id)).intern(&Interner)),\n-        )\n-    }\n-\n     /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n     pub fn type_params(db: &dyn HirDatabase, def: impl Into<GenericDefId>) -> Substitution {\n         let params = generics(db.upcast(), def.into());\n-        Substitution::type_params_for_generics(db, &params)\n-    }\n-\n-    /// Return Substs that replace each parameter by a bound variable.\n-    pub(crate) fn bound_vars(generic_params: &Generics, debruijn: DebruijnIndex) -> Substitution {\n-        Substitution::from_iter(\n-            &Interner,\n-            generic_params\n-                .iter()\n-                .enumerate()\n-                .map(|(idx, _)| TyKind::BoundVar(BoundVar::new(debruijn, idx)).intern(&Interner)),\n-        )\n+        params.type_params_subst(db)\n     }\n }\n "}, {"sha": "f9a721fdfb4a56676c4c79fd136ab0405eb1ba61", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "patch": "@@ -234,7 +234,7 @@ impl<'a> TyLoweringContext<'a> {\n                         let impl_trait_id = ImplTraitId::ReturnTypeImplTrait(func, idx);\n                         let opaque_ty_id = self.db.intern_impl_trait_id(impl_trait_id).into();\n                         let generics = generics(self.db.upcast(), func.into());\n-                        let parameters = Substitution::bound_vars(&generics, self.in_binders);\n+                        let parameters = generics.bound_vars_subst(self.in_binders);\n                         TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n                             opaque_ty_id,\n                             substitution: parameters,\n@@ -411,24 +411,16 @@ impl<'a> TyLoweringContext<'a> {\n             TypeNs::SelfType(impl_id) => {\n                 let generics = generics(self.db.upcast(), impl_id.into());\n                 let substs = match self.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => {\n-                        Substitution::type_params_for_generics(self.db, &generics)\n-                    }\n-                    TypeParamLoweringMode::Variable => {\n-                        Substitution::bound_vars(&generics, self.in_binders)\n-                    }\n+                    TypeParamLoweringMode::Placeholder => generics.type_params_subst(self.db),\n+                    TypeParamLoweringMode::Variable => generics.bound_vars_subst(self.in_binders),\n                 };\n                 self.db.impl_self_ty(impl_id).subst(&substs)\n             }\n             TypeNs::AdtSelfType(adt) => {\n                 let generics = generics(self.db.upcast(), adt.into());\n                 let substs = match self.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => {\n-                        Substitution::type_params_for_generics(self.db, &generics)\n-                    }\n-                    TypeParamLoweringMode::Variable => {\n-                        Substitution::bound_vars(&generics, self.in_binders)\n-                    }\n+                    TypeParamLoweringMode::Placeholder => generics.type_params_subst(self.db),\n+                    TypeParamLoweringMode::Variable => generics.bound_vars_subst(self.in_binders),\n                 };\n                 self.db.ty(adt.into()).subst(&substs)\n             }\n@@ -1060,7 +1052,7 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n /// function body.\n fn type_for_fn(db: &dyn HirDatabase, def: FunctionId) -> Binders<Ty> {\n     let generics = generics(db.upcast(), def.into());\n-    let substs = Substitution::bound_vars(&generics, DebruijnIndex::INNERMOST);\n+    let substs = generics.bound_vars_subst(DebruijnIndex::INNERMOST);\n     Binders::new(\n         substs.len(&Interner),\n         TyKind::FnDef(CallableDefId::FunctionId(def).to_chalk(db), substs).intern(&Interner),\n@@ -1105,7 +1097,7 @@ fn type_for_struct_constructor(db: &dyn HirDatabase, def: StructId) -> Binders<T\n         return type_for_adt(db, def.into());\n     }\n     let generics = generics(db.upcast(), def.into());\n-    let substs = Substitution::bound_vars(&generics, DebruijnIndex::INNERMOST);\n+    let substs = generics.bound_vars_subst(DebruijnIndex::INNERMOST);\n     Binders::new(\n         substs.len(&Interner),\n         TyKind::FnDef(CallableDefId::StructId(def).to_chalk(db), substs).intern(&Interner),\n@@ -1132,7 +1124,7 @@ fn type_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId) -\n         return type_for_adt(db, def.parent.into());\n     }\n     let generics = generics(db.upcast(), def.parent.into());\n-    let substs = Substitution::bound_vars(&generics, DebruijnIndex::INNERMOST);\n+    let substs = generics.bound_vars_subst(DebruijnIndex::INNERMOST);\n     Binders::new(\n         substs.len(&Interner),\n         TyKind::FnDef(CallableDefId::EnumVariantId(def).to_chalk(db), substs).intern(&Interner),"}, {"sha": "541e6082f2ff7a88a5511541dd5d2b2ad3badda5", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "patch": "@@ -387,7 +387,7 @@ pub(crate) fn associated_ty_data_query(\n     // Lower bounds -- we could/should maybe move this to a separate query in `lower`\n     let type_alias_data = db.type_alias_data(type_alias);\n     let generic_params = generics(db.upcast(), type_alias.into());\n-    let bound_vars = Substitution::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n+    let bound_vars = generic_params.bound_vars_subst(DebruijnIndex::INNERMOST);\n     let resolver = hir_def::resolver::HasResolver::resolver(type_alias, db.upcast());\n     let ctx = crate::TyLoweringContext::new(db, &resolver)\n         .with_type_param_mode(crate::lower::TypeParamLoweringMode::Variable);\n@@ -421,7 +421,7 @@ pub(crate) fn trait_datum_query(\n     let trait_data = db.trait_data(trait_);\n     debug!(\"trait {:?} = {:?}\", trait_id, trait_data.name);\n     let generic_params = generics(db.upcast(), trait_.into());\n-    let bound_vars = Substitution::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n+    let bound_vars = generic_params.bound_vars_subst(DebruijnIndex::INNERMOST);\n     let flags = rust_ir::TraitFlags {\n         auto: trait_data.is_auto,\n         upstream: trait_.lookup(db.upcast()).container.krate() != krate,\n@@ -490,7 +490,7 @@ pub(crate) fn struct_datum_query(\n     let upstream = adt_id.module(db.upcast()).krate() != krate;\n     let where_clauses = {\n         let generic_params = generics(db.upcast(), adt_id.into());\n-        let bound_vars = Substitution::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n+        let bound_vars = generic_params.bound_vars_subst(DebruijnIndex::INNERMOST);\n         convert_where_clauses(db, adt_id.into(), &bound_vars)\n     };\n     let flags = rust_ir::AdtFlags {\n@@ -539,7 +539,7 @@ fn impl_def_datum(\n     let impl_data = db.impl_data(impl_id);\n \n     let generic_params = generics(db.upcast(), impl_id.into());\n-    let bound_vars = Substitution::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n+    let bound_vars = generic_params.bound_vars_subst(DebruijnIndex::INNERMOST);\n     let trait_ = trait_ref.hir_trait_id();\n     let impl_type = if impl_id.lookup(db.upcast()).container.krate() == krate {\n         rust_ir::ImplType::Local\n@@ -629,7 +629,7 @@ pub(crate) fn fn_def_datum_query(\n     let callable_def: CallableDefId = from_chalk(db, fn_def_id);\n     let generic_params = generics(db.upcast(), callable_def.into());\n     let sig = db.callable_item_signature(callable_def);\n-    let bound_vars = Substitution::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n+    let bound_vars = generic_params.bound_vars_subst(DebruijnIndex::INNERMOST);\n     let where_clauses = convert_where_clauses(db, callable_def.into(), &bound_vars);\n     let bound = rust_ir::FnDefDatumBound {\n         // Note: Chalk doesn't actually use this information yet as far as I am aware, but we provide it anyway"}, {"sha": "b23e91b1b96cc22b55312acd479660469df83df9", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d7bdf1c884a9f3dd415a882fa56422adae89bf/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=a4d7bdf1c884a9f3dd415a882fa56422adae89bf", "patch": "@@ -2,7 +2,7 @@\n //! query, but can't be computed directly from `*Data` (ie, which need a `db`).\n use std::sync::Arc;\n \n-use chalk_ir::DebruijnIndex;\n+use chalk_ir::{BoundVar, DebruijnIndex};\n use hir_def::{\n     adt::VariantData,\n     db::DefDatabase,\n@@ -16,7 +16,7 @@ use hir_def::{\n };\n use hir_expand::name::{name, Name};\n \n-use crate::{db::HirDatabase, TraitRef, TypeWalk, WhereClause};\n+use crate::{db::HirDatabase, Interner, Substitution, TraitRef, TyKind, TypeWalk, WhereClause};\n \n fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n     let resolver = trait_.resolver(db);\n@@ -249,6 +249,26 @@ impl Generics {\n             self.parent_generics.as_ref().and_then(|g| g.find_param(param))\n         }\n     }\n+\n+    /// Returns a Substitution that replaces each parameter by a bound variable.\n+    pub(crate) fn bound_vars_subst(&self, debruijn: DebruijnIndex) -> Substitution {\n+        Substitution::from_iter(\n+            &Interner,\n+            self.iter()\n+                .enumerate()\n+                .map(|(idx, _)| TyKind::BoundVar(BoundVar::new(debruijn, idx)).intern(&Interner)),\n+        )\n+    }\n+\n+    /// Returns a Substitution that replaces each parameter by itself (i.e. `Ty::Param`).\n+    pub(crate) fn type_params_subst(&self, db: &dyn HirDatabase) -> Substitution {\n+        Substitution::from_iter(\n+            &Interner,\n+            self.iter().map(|(id, _)| {\n+                TyKind::Placeholder(crate::to_placeholder_idx(db, id)).intern(&Interner)\n+            }),\n+        )\n+    }\n }\n \n fn parent_generic_def(db: &dyn DefDatabase, def: GenericDefId) -> Option<GenericDefId> {"}]}