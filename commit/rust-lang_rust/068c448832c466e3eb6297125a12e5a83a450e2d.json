{"sha": "068c448832c466e3eb6297125a12e5a83a450e2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OGM0NDg4MzJjNDY2ZTNlYjYyOTcxMjVhMTJlNWE4M2E0NTBlMmQ=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-06T20:32:57Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-06T20:44:44Z"}, "message": "Add communicate field to evaluator and fix formatting", "tree": {"sha": "ce40553ccf3182faac2dbde79befcc460919a499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce40553ccf3182faac2dbde79befcc460919a499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/068c448832c466e3eb6297125a12e5a83a450e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/068c448832c466e3eb6297125a12e5a83a450e2d", "html_url": "https://github.com/rust-lang/rust/commit/068c448832c466e3eb6297125a12e5a83a450e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/068c448832c466e3eb6297125a12e5a83a450e2d/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "655f9af7fe315a9f8e881d94b7c221c965a7caae", "url": "https://api.github.com/repos/rust-lang/rust/commits/655f9af7fe315a9f8e881d94b7c221c965a7caae", "html_url": "https://github.com/rust-lang/rust/commit/655f9af7fe315a9f8e881d94b7c221c965a7caae"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "5cb938659a6cd8184618d40c80f107a219a077ef", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/068c448832c466e3eb6297125a12e5a83a450e2d/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068c448832c466e3eb6297125a12e5a83a450e2d/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=068c448832c466e3eb6297125a12e5a83a450e2d", "patch": "@@ -25,7 +25,12 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n             );\n \n             self.bencher.iter(|| {\n-                let config = miri::MiriConfig { validate: true, communicate: false, args: vec![], seed: None };\n+                let config = miri::MiriConfig {\n+                    validate: true,\n+                    communicate: false,\n+                    args: vec![],\n+                    seed: None,\n+                };\n                 eval_main(tcx, entry_def_id, config);\n             });\n         });"}, {"sha": "0cf171f52e7e60de1439a519d2e39d81768eaa8e", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/068c448832c466e3eb6297125a12e5a83a450e2d/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068c448832c466e3eb6297125a12e5a83a450e2d/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=068c448832c466e3eb6297125a12e5a83a450e2d", "patch": "@@ -48,7 +48,12 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                     fn visit_item(&mut self, i: &'hir hir::Item) {\n                         if let hir::ItemKind::Fn(.., body_id) = i.node {\n                             if i.attrs.iter().any(|attr| attr.check_name(syntax::symbol::sym::test)) {\n-                                let config = MiriConfig { validate: true, communicate: false, args: vec![], seed: None };\n+                                let config = MiriConfig {\n+                                    validate: true,\n+                                    communicate: false,\n+                                    args: vec![],\n+                                    seed: None,\n+                                };\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));\n                                 miri::eval_main(self.0, did, config);\n@@ -62,7 +67,12 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 tcx.hir().krate().visit_all_item_likes(&mut Visitor(tcx));\n             } else if let Some((entry_def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n \n-                let config = MiriConfig { validate: true, communicate: false, args: vec![], seed: None };\n+                let config = MiriConfig {\n+                    validate: true,\n+                    communicate: false,\n+                    args: vec![],\n+                    seed: None\n+                };\n                 miri::eval_main(tcx, entry_def_id, config);\n \n                 compiler.session().abort_if_errors();"}, {"sha": "e80162ec1796dc40a20f9b4aa12398df2c2be85a", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/068c448832c466e3eb6297125a12e5a83a450e2d/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068c448832c466e3eb6297125a12e5a83a450e2d/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=068c448832c466e3eb6297125a12e5a83a450e2d", "patch": "@@ -18,10 +18,11 @@ use crate::{\n #[derive(Clone)]\n pub struct MiriConfig {\n     pub validate: bool,\n+    /// Determines if communication with the host environment is enabled.\n     pub communicate: bool,\n     pub args: Vec<String>,\n \n-    // The seed to use when non-determinism is required (e.g. getrandom())\n+    /// The seed to use when non-determinism is required (e.g. getrandom())\n     pub seed: Option<u64>,\n }\n \n@@ -34,7 +35,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let mut ecx = InterpCx::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n-        Evaluator::new(),\n+        Evaluator::new(config.communicate),\n         MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate),\n     );\n "}, {"sha": "ed9a8a1c46346f320149b1a9e473cbc56e3e124a", "filename": "src/machine.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/068c448832c466e3eb6297125a12e5a83a450e2d/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068c448832c466e3eb6297125a12e5a83a450e2d/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=068c448832c466e3eb6297125a12e5a83a450e2d", "patch": "@@ -93,17 +93,21 @@ pub struct Evaluator<'tcx> {\n \n     /// TLS state.\n     pub(crate) tls: TlsData<'tcx>,\n+\n+    /// If enabled, the `env_vars` field is populated with the host env vars during initialization.\n+    pub(crate) communicate: bool,\n }\n \n impl<'tcx> Evaluator<'tcx> {\n-    pub(crate) fn new() -> Self {\n+    pub(crate) fn new(communicate: bool) -> Self {\n         Evaluator {\n             env_vars: HashMap::default(),\n             argc: None,\n             argv: None,\n             cmd_line: None,\n             last_error: 0,\n             tls: TlsData::default(),\n+            communicate,\n         }\n     }\n }"}]}