{"sha": "45eb95d40ab5b169395685519e790eedd0082d53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZWI5NWQ0MGFiNWIxNjkzOTU2ODU1MTllNzkwZWVkZDAwODJkNTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-23T20:27:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-23T20:27:22Z"}, "message": "Merge #5510\n\n5510: Lighter weight tempdir r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "16380b4c5741210e5564b0731639564767187f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16380b4c5741210e5564b0731639564767187f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45eb95d40ab5b169395685519e790eedd0082d53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGfKqCRBK7hj4Ov3rIwAAdHIIAE4l1Yhi1a8G+n4REoO/4m52\nDtDlu8QclZGUodNrf1fxssYPEX9UQO9QovIiC/YPRznL+pH3DYQ4M6DRMZB2lv/g\nsz1MG03jxRlZ+yBFn+3Akt8OYN9sTBSozwO0KdYo+fnSjk5oWJcaTUoKu0anOwvn\nNLmFSqA1UQKwRlo1Pkzc1zKpOKTiL2PQPRMl6Fa4WRSTWpyTwUg7YR+qhNNkFZcb\nxtq9U9ouwMbgyZIgMNFW1D8+DssoGiKi9j7/uiZP8QtSyoOx+Bz+mqxVfrDkoVPG\nBmLgO8RRTlPSiMuiFujQIt7Y0vmKes7uIEXrdsiXpGaY5AIrAbUnCrDoxUkLcnk=\n=68S+\n-----END PGP SIGNATURE-----\n", "payload": "tree 16380b4c5741210e5564b0731639564767187f9d\nparent bd44f3a6203b0dcd2e87cc391d652925501b7e57\nparent be06aaecdebabf5a3a60a367bbd672508a9cb8f8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595536042 +0000\ncommitter GitHub <noreply@github.com> 1595536042 +0000\n\nMerge #5510\n\n5510: Lighter weight tempdir r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45eb95d40ab5b169395685519e790eedd0082d53", "html_url": "https://github.com/rust-lang/rust/commit/45eb95d40ab5b169395685519e790eedd0082d53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45eb95d40ab5b169395685519e790eedd0082d53/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd44f3a6203b0dcd2e87cc391d652925501b7e57", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd44f3a6203b0dcd2e87cc391d652925501b7e57", "html_url": "https://github.com/rust-lang/rust/commit/bd44f3a6203b0dcd2e87cc391d652925501b7e57"}, {"sha": "be06aaecdebabf5a3a60a367bbd672508a9cb8f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/be06aaecdebabf5a3a60a367bbd672508a9cb8f8", "html_url": "https://github.com/rust-lang/rust/commit/be06aaecdebabf5a3a60a367bbd672508a9cb8f8"}], "stats": {"total": 109, "additions": 75, "deletions": 34}, "files": [{"sha": "0a35eb79329d2d0a6a25baabfc01530dcfb266f4", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45eb95d40ab5b169395685519e790eedd0082d53/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/45eb95d40ab5b169395685519e790eedd0082d53/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=45eb95d40ab5b169395685519e790eedd0082d53", "patch": "@@ -1326,15 +1326,6 @@ version = \"0.6.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"26412eb97c6b088a6997e05f69403a802a92d520de2f8e63c2b65f9e0f47c4e8\"\n \n-[[package]]\n-name = \"remove_dir_all\"\n-version = \"0.5.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\n-dependencies = [\n- \"winapi 0.3.9\",\n-]\n-\n [[package]]\n name = \"rowan\"\n version = \"0.10.0\"\n@@ -1386,7 +1377,6 @@ dependencies = [\n  \"serde\",\n  \"serde_json\",\n  \"stdx\",\n- \"tempfile\",\n  \"test_utils\",\n  \"threadpool\",\n  \"vfs\",\n@@ -1606,20 +1596,6 @@ dependencies = [\n  \"unicode-xid\",\n ]\n \n-[[package]]\n-name = \"tempfile\"\n-version = \"3.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n-dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"rand\",\n- \"redox_syscall\",\n- \"remove_dir_all\",\n- \"winapi 0.3.9\",\n-]\n-\n [[package]]\n name = \"termcolor\"\n version = \"1.1.0\""}, {"sha": "3f9c820c5d3961866e2fb3733404c61bca0d2661", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45eb95d40ab5b169395685519e790eedd0082d53/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/45eb95d40ab5b169395685519e790eedd0082d53/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=45eb95d40ab5b169395685519e790eedd0082d53", "patch": "@@ -58,7 +58,6 @@ ra_proc_macro_srv = { path = \"../ra_proc_macro_srv\" }\n winapi = \"0.3.8\"\n \n [dev-dependencies]\n-tempfile = \"3.1.0\"\n expect = { path = \"../expect\" }\n test_utils = { path = \"../test_utils\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }"}, {"sha": "28e8966487334fbc04ee952bb0f7305c4ae5ae2f", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45eb95d40ab5b169395685519e790eedd0082d53/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45eb95d40ab5b169395685519e790eedd0082d53/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=45eb95d40ab5b169395685519e790eedd0082d53", "patch": "@@ -1,3 +1,4 @@\n+mod testdir;\n mod support;\n \n use std::{collections::HashMap, path::PathBuf, time::Instant};\n@@ -12,10 +13,12 @@ use lsp_types::{\n };\n use rust_analyzer::lsp_ext::{OnEnter, Runnables, RunnablesParams};\n use serde_json::json;\n-use tempfile::TempDir;\n use test_utils::skip_slow_tests;\n \n-use crate::support::{project, Project};\n+use crate::{\n+    support::{project, Project},\n+    testdir::TestDir,\n+};\n \n const PROFILE: &str = \"\";\n // const PROFILE: &'static str = \"*@3>100\";\n@@ -308,7 +311,7 @@ fn test_missing_module_code_action_in_json_project() {\n         return;\n     }\n \n-    let tmp_dir = TempDir::new().unwrap();\n+    let tmp_dir = TestDir::new();\n \n     let path = tmp_dir.path();\n "}, {"sha": "e152264d369cf68bc6b5d874739df86535dbaf36", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/45eb95d40ab5b169395685519e790eedd0082d53/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45eb95d40ab5b169395685519e790eedd0082d53/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=45eb95d40ab5b169395685519e790eedd0082d53", "patch": "@@ -19,14 +19,15 @@ use rust_analyzer::{\n };\n use serde::Serialize;\n use serde_json::{to_string_pretty, Value};\n-use tempfile::TempDir;\n use test_utils::{find_mismatch, Fixture};\n use vfs::AbsPathBuf;\n \n+use crate::testdir::TestDir;\n+\n pub struct Project<'a> {\n     fixture: &'a str,\n     with_sysroot: bool,\n-    tmp_dir: Option<TempDir>,\n+    tmp_dir: Option<TestDir>,\n     roots: Vec<PathBuf>,\n     config: Option<Box<dyn Fn(&mut Config)>>,\n }\n@@ -36,7 +37,7 @@ impl<'a> Project<'a> {\n         Project { fixture, tmp_dir: None, roots: vec![], with_sysroot: false, config: None }\n     }\n \n-    pub fn tmp_dir(mut self, tmp_dir: TempDir) -> Project<'a> {\n+    pub fn tmp_dir(mut self, tmp_dir: TestDir) -> Project<'a> {\n         self.tmp_dir = Some(tmp_dir);\n         self\n     }\n@@ -57,7 +58,7 @@ impl<'a> Project<'a> {\n     }\n \n     pub fn server(self) -> Server {\n-        let tmp_dir = self.tmp_dir.unwrap_or_else(|| TempDir::new().unwrap());\n+        let tmp_dir = self.tmp_dir.unwrap_or_else(|| TestDir::new());\n         static INIT: Once = Once::new();\n         INIT.call_once(|| {\n             env_logger::builder().is_test(true).try_init().unwrap();\n@@ -112,11 +113,11 @@ pub struct Server {\n     _thread: jod_thread::JoinHandle<()>,\n     client: Connection,\n     /// XXX: remove the tempdir last\n-    dir: TempDir,\n+    dir: TestDir,\n }\n \n impl Server {\n-    fn new(dir: TempDir, config: Config) -> Server {\n+    fn new(dir: TestDir, config: Config) -> Server {\n         let (connection, client) = Connection::memory();\n \n         let _thread = jod_thread::Builder::new()"}, {"sha": "7487e7429473b598e14a5c3370832e8d488e68bc", "filename": "crates/rust-analyzer/tests/heavy_tests/testdir.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/45eb95d40ab5b169395685519e790eedd0082d53/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Ftestdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45eb95d40ab5b169395685519e790eedd0082d53/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Ftestdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Ftestdir.rs?ref=45eb95d40ab5b169395685519e790eedd0082d53", "patch": "@@ -0,0 +1,62 @@\n+use std::{\n+    fs, io,\n+    path::{Path, PathBuf},\n+    sync::atomic::{AtomicUsize, Ordering},\n+};\n+\n+pub struct TestDir {\n+    path: PathBuf,\n+    keep: bool,\n+}\n+\n+impl TestDir {\n+    pub fn new() -> TestDir {\n+        let base = std::env::temp_dir().join(\"testdir\");\n+        let pid = std::process::id();\n+\n+        static CNT: AtomicUsize = AtomicUsize::new(0);\n+        for _ in 0..100 {\n+            let cnt = CNT.fetch_add(1, Ordering::Relaxed);\n+            let path = base.join(format!(\"{}_{}\", pid, cnt));\n+            if path.is_dir() {\n+                continue;\n+            }\n+            fs::create_dir_all(&path).unwrap();\n+            return TestDir { path, keep: false };\n+        }\n+        panic!(\"Failed to create a temporary directory\")\n+    }\n+    #[allow(unused)]\n+    pub fn keep(mut self) -> TestDir {\n+        self.keep = true;\n+        self\n+    }\n+    pub fn path(&self) -> &Path {\n+        &self.path\n+    }\n+}\n+\n+impl Drop for TestDir {\n+    fn drop(&mut self) {\n+        if self.keep {\n+            return;\n+        }\n+        remove_dir_all(&self.path).unwrap()\n+    }\n+}\n+\n+#[cfg(not(windows))]\n+fn remove_dir_all(path: &Path) -> io::Result<()> {\n+    fs::remove_dir_all(path)\n+}\n+\n+#[cfg(windows)]\n+fn remove_dir_all(path: &Path) -> io::Result<()> {\n+    for _ in 0..99 {\n+        if fs::remove_dir_all(path).is_ok() {\n+            return Ok(());\n+        }\n+        std::thread::sleep(std::time::Duration::from_millis(10))\n+    }\n+    fs::remove_dir_all(path)\n+}"}]}