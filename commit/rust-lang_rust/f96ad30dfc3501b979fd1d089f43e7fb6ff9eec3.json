{"sha": "f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NmFkMzBkZmMzNTAxYjk3OWZkMWQwODlmNDNlN2ZiNmZmOWVlYzM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T21:19:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T21:19:17Z"}, "message": "stdlib: Make reinterpret_cast and leak unsafe", "tree": {"sha": "7e616ca46caec729c3d3ebb9656c8d57305d11b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e616ca46caec729c3d3ebb9656c8d57305d11b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "html_url": "https://github.com/rust-lang/rust/commit/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad66d72e6c0f77d7c6a094cf3fc5799b65824c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad66d72e6c0f77d7c6a094cf3fc5799b65824c87", "html_url": "https://github.com/rust-lang/rust/commit/ad66d72e6c0f77d7c6a094cf3fc5799b65824c87"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "c0e7e19c1d7fef95517ba82ca4aa8146740a23a8", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "patch": "@@ -81,7 +81,7 @@ fn IndirectBr(cx: @block_ctxt, Addr: ValueRef, NumDests: uint) {\n \n // This is a really awful way to get a zero-length c-string, but better (and a\n // lot more efficient) than doing str::as_buf(\"\", ...) every time.\n-fn noname() -> sbuf {\n+fn noname() -> sbuf unsafe {\n     const cnull: uint = 0u;\n     ret std::unsafe::reinterpret_cast(std::ptr::addr_of(cnull));\n }\n@@ -480,9 +480,11 @@ fn Phi(cx: @block_ctxt, Ty: TypeRef, vals: [ValueRef], bbs: [BasicBlockRef])\n \n fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) {\n     if llvm::LLVMIsUndef(phi) == lib::llvm::True { ret; }\n-    let valptr = std::unsafe::reinterpret_cast(std::ptr::addr_of(val));\n-    let bbptr = std::unsafe::reinterpret_cast(std::ptr::addr_of(bb));\n-    llvm::LLVMAddIncoming(phi, valptr, bbptr, 1u);\n+    unsafe {\n+        let valptr = std::unsafe::reinterpret_cast(std::ptr::addr_of(val));\n+        let bbptr = std::unsafe::reinterpret_cast(std::ptr::addr_of(bb));\n+        llvm::LLVMAddIncoming(phi, valptr, bbptr, 1u);\n+    }\n }\n \n fn _UndefReturn(Fn: ValueRef) -> ValueRef {"}, {"sha": "6682fe17284ac429a2000635d04d02b418d8327f", "filename": "src/lib/box.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbox.rs?ref=f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "patch": "@@ -11,7 +11,10 @@ Function: ptr_eq\n Determine if two shared boxes point to the same object\n */\n fn ptr_eq<T>(a: @T, b: @T) -> bool {\n-    let a_ptr: uint = unsafe::reinterpret_cast(a);\n-    let b_ptr: uint = unsafe::reinterpret_cast(b);\n-    ret a_ptr == b_ptr;\n+    // FIXME: ptr::addr_of\n+    unsafe {\n+        let a_ptr: uint = unsafe::reinterpret_cast(a);\n+        let b_ptr: uint = unsafe::reinterpret_cast(b);\n+        ret a_ptr == b_ptr;\n+    }\n }"}, {"sha": "5c376831138006a809b0a009254c415574b6561d", "filename": "src/lib/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fptr.rs?ref=f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "patch": "@@ -29,4 +29,4 @@ Function: null\n \n Create an unsafe null pointer\n */\n-fn null<T>() -> *T { ret unsafe::reinterpret_cast(0u); }\n+fn null<T>() -> *T unsafe { ret unsafe::reinterpret_cast(0u); }"}, {"sha": "c308f4957d04b6f306ea5f1bd78024eb5a3eb818", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "patch": "@@ -92,7 +92,8 @@ type program = obj {\n fn arg_vec(prog: str, args: [@str]) -> [sbuf] {\n     let argptrs = str::as_buf(prog, {|buf| [buf] });\n     for arg in args { argptrs += str::as_buf(*arg, {|buf| [buf] }); }\n-    argptrs += [unsafe::reinterpret_cast(0)];\n+    // FIXME: ptr::null instead of cast\n+    argptrs += [unsafe {unsafe::reinterpret_cast(0)}];\n     ret argptrs;\n }\n "}, {"sha": "29ee1b9340fafa95311332280dc0383ec2abb081", "filename": "src/lib/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "patch": "@@ -127,7 +127,7 @@ Function: byte_len\n \n Returns the length in bytes of a string\n */\n-fn byte_len(s: str) -> uint {\n+fn byte_len(s: str) -> uint unsafe {\n     let v: [u8] = unsafe::reinterpret_cast(s);\n     let vlen = vec::len(v);\n     unsafe::leak(v);\n@@ -141,7 +141,7 @@ Function: bytes\n \n Converts a string to a vector of bytes\n */\n-fn bytes(s: str) -> [u8] {\n+fn bytes(s: str) -> [u8] unsafe {\n     let v = unsafe::reinterpret_cast(s);\n     let vcopy = vec::slice(v, 0u, vec::len(v) - 1u);\n     unsafe::leak(v);\n@@ -154,7 +154,7 @@ Function: unsafe_from_bytes\n Converts a vector of bytes to a string. Does not verify that the\n vector contains valid UTF-8.\n */\n-fn unsafe_from_bytes(v: [mutable? u8]) -> str {\n+fn unsafe_from_bytes(v: [mutable? u8]) -> str unsafe {\n     let vcopy: [u8] = v + [0u8];\n     let scopy: str = unsafe::reinterpret_cast(vcopy);\n     unsafe::leak(vcopy);\n@@ -520,7 +520,7 @@ Failure:\n - If begin is greater than end.\n - If end is greater than the length of the string.\n */\n-fn slice(s: str, begin: uint, end: uint) -> str {\n+fn slice(s: str, begin: uint, end: uint) -> str unsafe {\n     // FIXME: Typestate precondition\n     assert (begin <= end);\n     assert (end <= byte_len(s));"}, {"sha": "304cf59f81d719e9395cb05c61bb019d87903be8", "filename": "src/lib/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "patch": "@@ -273,9 +273,9 @@ fn spawn_joinable<uniq T>(-data: T, f: fn(T)) -> joinable_task {\n \n fn spawn_inner<uniq T>(-data: T, f: fn(T),\n                           notify: option<comm::chan<task_notification>>)\n-    -> task {\n+    -> task unsafe {\n \n-    fn wrapper<uniq T>(-data: *u8, f: fn(T)) {\n+    fn wrapper<uniq T>(-data: *u8, f: fn(T)) unsafe {\n         let data: ~T = unsafe::reinterpret_cast(data);\n         f(*data);\n     }"}, {"sha": "1a6f875757635522c63cab12e23b9aba87ecac6b", "filename": "src/lib/unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3/src%2Flib%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Funsafe.rs?ref=f96ad30dfc3501b979fd1d089f43e7fb6ff9eec3", "patch": "@@ -17,7 +17,7 @@ Function: reinterpret_cast\n \n Casts the value at `src` to U. The two types must have the same length.\n */\n-fn reinterpret_cast<T, U>(src: T) -> U { ret rusti::cast(src); }\n+unsafe fn reinterpret_cast<T, U>(src: T) -> U { ret rusti::cast(src); }\n \n /*\n Function: leak\n@@ -29,4 +29,4 @@ to run any required cleanup or memory-management operations on it. This\n can be used for various acts of magick, particularly when using\n reinterpret_cast on managed pointer types.\n */\n-fn leak<T>(-thing: T) { rustrt::leak(thing); }\n+unsafe fn leak<T>(-thing: T) { rustrt::leak(thing); }"}]}