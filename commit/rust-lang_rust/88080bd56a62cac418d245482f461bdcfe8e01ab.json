{"sha": "88080bd56a62cac418d245482f461bdcfe8e01ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MDgwYmQ1NmE2MmNhYzQxOGQyNDU0ODJmNDYxYmRjZmU4ZTAxYWI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-08-28T11:39:06Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-09-13T10:55:03Z"}, "message": "Unit test for proper EndRegion emission on a cyclic reference.", "tree": {"sha": "1789eabf9045a7aefbdcb0637bad20443cca372b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1789eabf9045a7aefbdcb0637bad20443cca372b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88080bd56a62cac418d245482f461bdcfe8e01ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88080bd56a62cac418d245482f461bdcfe8e01ab", "html_url": "https://github.com/rust-lang/rust/commit/88080bd56a62cac418d245482f461bdcfe8e01ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88080bd56a62cac418d245482f461bdcfe8e01ab/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab46142bd902f697f70305499e99a172caa419a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab46142bd902f697f70305499e99a172caa419a5", "html_url": "https://github.com/rust-lang/rust/commit/ab46142bd902f697f70305499e99a172caa419a5"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "8f9dd79cd7542b5ac96fa0e5ab00e821124b30d2", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/88080bd56a62cac418d245482f461bdcfe8e01ab/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88080bd56a62cac418d245482f461bdcfe8e01ab/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=88080bd56a62cac418d245482f461bdcfe8e01ab", "patch": "@@ -0,0 +1,132 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n+// ignore-tidy-linelength\n+\n+// This test models a scenario with a cyclic reference. Rust obviously\n+// needs to handle such cases.\n+//\n+// The interesting part about this test is that such case shows that\n+// one cannot generally force all references to be dead before you hit\n+// their EndRegion; at least, not without breaking the more important\n+// property that all borrowed storage locations have their regions\n+// ended strictly before their StorageDeads. (This test was inspired\n+// by discussion on Issue #43481.)\n+\n+use std::cell::Cell;\n+\n+struct S<'a> {\n+    r: Cell<Option<&'a S<'a>>>,\n+}\n+\n+fn main() {\n+    loop {\n+        let x = S { r: Cell::new(None) };\n+        x.r.set(Some(&x));\n+        if query() { break; }\n+        x.r.set(Some(&x));\n+    }\n+}\n+\n+fn query() -> bool { true }\n+\n+// END RUST SOURCE\n+// START rustc.node16.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     scope 1 {\n+//         let _2: S<'35_0rs>;\n+//     }\n+//     let mut _1: ();\n+//     let mut _3: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>;\n+//     let mut _4: std::option::Option<&'35_0rs S<'35_0rs>>;\n+//     let mut _5: ();\n+//     let mut _6: &'16s std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>;\n+//     let mut _7: std::option::Option<&'35_0rs S<'35_0rs>>;\n+//     let mut _8: &'35_0rs S<'35_0rs>;\n+//     let mut _9: &'35_0rs S<'35_0rs>;\n+//     let mut _10: ();\n+//     let mut _11: bool;\n+//     let mut _12: !;\n+//     let mut _13: ();\n+//     let mut _14: &'33s std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>;\n+//     let mut _15: std::option::Option<&'35_0rs S<'35_0rs>>;\n+//     let mut _16: &'35_0rs S<'35_0rs>;\n+//     let mut _17: &'35_0rs S<'35_0rs>;\n+//     bb0: {\n+//         goto -> bb1;\n+//     }\n+//     bb1: {\n+//         StorageLive(_2);\n+//         StorageLive(_3);\n+//         StorageLive(_4);\n+//         _4 = std::option::Option<&'35_0rs S<'35_0rs>>::None;\n+//         _3 = const <std::cell::Cell<T>>::new(_4) -> bb2;\n+//     }\n+//     bb2: {\n+//         StorageDead(_4);\n+//         _2 = S<'35_0rs> { r: _3 };\n+//         StorageDead(_3);\n+//         StorageLive(_6);\n+//         _6 = &'16s (_2.0: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>);\n+//         StorageLive(_7);\n+//         StorageLive(_8);\n+//         StorageLive(_9);\n+//         _9 = &'35_0rs _2;\n+//         _8 = &'35_0rs (*_9);\n+//         _7 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(_8,);\n+//         StorageDead(_8);\n+//         _5 = const <std::cell::Cell<T>>::set(_6, _7) -> bb3;\n+//     }\n+//     bb3: {\n+//         EndRegion('16s);\n+//         StorageDead(_7);\n+//         StorageDead(_6);\n+//         StorageDead(_9);\n+//         StorageLive(_11);\n+//         _11 = const query() -> bb4;\n+//     }\n+//     bb4: {\n+//         switchInt(_11) -> [0u8: bb6, otherwise: bb5];\n+//     }\n+//     bb5: {\n+//         _0 = ();\n+//         StorageDead(_11);\n+//         EndRegion('35_0rs);\n+//         StorageDead(_2);\n+//         return;\n+//     }\n+//     bb6: {\n+//         _10 = ();\n+//         StorageDead(_11);\n+//         StorageLive(_14);\n+//         _14 = &'33s (_2.0: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>);\n+//         StorageLive(_15);\n+//         StorageLive(_16);\n+//         StorageLive(_17);\n+//         _17 = &'35_0rs _2;\n+//         _16 = &'35_0rs (*_17);\n+//         _15 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(_16,);\n+//         StorageDead(_16);\n+//         _13 = const <std::cell::Cell<T>>::set(_14, _15) -> bb7;\n+//     }\n+//     bb7: {\n+//         EndRegion('33s);\n+//         StorageDead(_15);\n+//         StorageDead(_14);\n+//         StorageDead(_17);\n+//         _1 = ();\n+//         EndRegion('35_0rs);\n+//         StorageDead(_2);\n+//         goto -> bb1;\n+//     }\n+// }\n+// END rustc.node16.SimplifyCfg-qualify-consts.after.mir"}]}