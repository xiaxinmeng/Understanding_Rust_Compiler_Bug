{"sha": "f540548fa11854072c449cce937bf5d1200c4bac", "node_id": "C_kwDOAAsO6NoAKGY1NDA1NDhmYTExODU0MDcyYzQ0OWNjZTkzN2JmNWQxMjAwYzRiYWM", "commit": {"author": {"name": "ripytide", "email": "james.forsterer@gmail.com", "date": "2023-04-17T10:14:09Z"}, "committer": {"name": "ripytide", "email": "james.forsterer@gmail.com", "date": "2023-04-17T10:14:09Z"}, "message": "cmp doc examples consistency improvements", "tree": {"sha": "e611a3165c8a1cf940ccbaaa4ad229789d3e464c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e611a3165c8a1cf940ccbaaa4ad229789d3e464c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f540548fa11854072c449cce937bf5d1200c4bac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEFfo9eL68IiD4PbnJsmKfnsfC/owFAmQ9G/EACgkQsmKfnsfC\n/owY5Av8D0z3R7DY803j+D6FadfpdcT78cySJTYP+vqkUggRha0JjclMrt57cQlY\nz7oeV57864qXW5zPslAv27HGGLvJgga+V13YVtk/kSgTbsC+b6iF/7z5UtTXvIx8\nV9d6TgZFeAJMjjyiK9BWPcSASaR9fjAVR131mMEC0s0/sQmD60zcsf3tYLm+yv54\ngGXgj4UE0Z9EyqMsalJI0exCjHTyA1QBg4i0FsZk2yQ2TdxcOOFXEYfeXytzJfgu\ncjhQ5A8pW5cnEKl+wvlV6ioUl5WWK545+FVpMloEGLWZiLpGnhLourWCogpfoWtw\nKbR33/MefG3TEQ8pTr4r5gOt/9E0hjwHRaudHsL0ZJLlgXyBtyxLnrwicZXP0MB7\nfOqXiVX7oHS/5xZqPdHePOAiOcvDCHF3jQz7WMfXMtDA8RzZtPF+D+xB8uvzsw7O\nFp5Sv7Vc+2HEIBToDP5zvFC6ezdOo+jN8bh64zsAqrJuDGA9gik8lsSwX8u78vSu\n8Bw2RLgA\n=McxQ\n-----END PGP SIGNATURE-----", "payload": "tree e611a3165c8a1cf940ccbaaa4ad229789d3e464c\nparent bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6\nauthor ripytide <james.forsterer@gmail.com> 1681726449 +0100\ncommitter ripytide <james.forsterer@gmail.com> 1681726449 +0100\n\ncmp doc examples consistency improvements\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f540548fa11854072c449cce937bf5d1200c4bac", "html_url": "https://github.com/rust-lang/rust/commit/f540548fa11854072c449cce937bf5d1200c4bac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f540548fa11854072c449cce937bf5d1200c4bac/comments", "author": {"login": "ripytide", "id": 62516857, "node_id": "MDQ6VXNlcjYyNTE2ODU3", "avatar_url": "https://avatars.githubusercontent.com/u/62516857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ripytide", "html_url": "https://github.com/ripytide", "followers_url": "https://api.github.com/users/ripytide/followers", "following_url": "https://api.github.com/users/ripytide/following{/other_user}", "gists_url": "https://api.github.com/users/ripytide/gists{/gist_id}", "starred_url": "https://api.github.com/users/ripytide/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ripytide/subscriptions", "organizations_url": "https://api.github.com/users/ripytide/orgs", "repos_url": "https://api.github.com/users/ripytide/repos", "events_url": "https://api.github.com/users/ripytide/events{/privacy}", "received_events_url": "https://api.github.com/users/ripytide/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ripytide", "id": 62516857, "node_id": "MDQ6VXNlcjYyNTE2ODU3", "avatar_url": "https://avatars.githubusercontent.com/u/62516857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ripytide", "html_url": "https://github.com/ripytide", "followers_url": "https://api.github.com/users/ripytide/followers", "following_url": "https://api.github.com/users/ripytide/following{/other_user}", "gists_url": "https://api.github.com/users/ripytide/gists{/gist_id}", "starred_url": "https://api.github.com/users/ripytide/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ripytide/subscriptions", "organizations_url": "https://api.github.com/users/ripytide/orgs", "repos_url": "https://api.github.com/users/ripytide/repos", "events_url": "https://api.github.com/users/ripytide/events{/privacy}", "received_events_url": "https://api.github.com/users/ripytide/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6", "html_url": "https://github.com/rust-lang/rust/commit/bdb32bd4bbcabb0d32a04a0b45e6a8ceaa5e54d6"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "828148c4e4dbbcdacb0658b158d9f141ee1e4b6a", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/f540548fa11854072c449cce937bf5d1200c4bac/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f540548fa11854072c449cce937bf5d1200c4bac/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=f540548fa11854072c449cce937bf5d1200c4bac", "patch": "@@ -324,14 +324,11 @@ pub struct AssertParamIsEq<T: Eq + ?Sized> {\n /// ```\n /// use std::cmp::Ordering;\n ///\n-/// let result = 1.cmp(&2);\n-/// assert_eq!(Ordering::Less, result);\n+/// assert_eq!(1.cmp(&2), Ordering::Less);\n ///\n-/// let result = 1.cmp(&1);\n-/// assert_eq!(Ordering::Equal, result);\n+/// assert_eq!(1.cmp(&1), Ordering::Equal);\n ///\n-/// let result = 2.cmp(&1);\n-/// assert_eq!(Ordering::Greater, result);\n+/// assert_eq!(2.cmp(&1), Ordering::Greater);\n /// ```\n #[derive(Clone, Copy, Eq, Debug, Hash)]\n #[derive_const(PartialOrd, Ord, PartialEq)]\n@@ -790,8 +787,8 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// # Examples\n     ///\n     /// ```\n-    /// assert_eq!(2, 1.max(2));\n-    /// assert_eq!(2, 2.max(2));\n+    /// assert_eq!(1.max(2), 2);\n+    /// assert_eq!(2.max(2), 2);\n     /// ```\n     #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n     #[inline]\n@@ -811,8 +808,8 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// # Examples\n     ///\n     /// ```\n-    /// assert_eq!(1, 1.min(2));\n-    /// assert_eq!(2, 2.min(2));\n+    /// assert_eq!(1.min(2), 1);\n+    /// assert_eq!(2.min(2), 2);\n     /// ```\n     #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n     #[inline]\n@@ -837,9 +834,9 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// # Examples\n     ///\n     /// ```\n-    /// assert!((-3).clamp(-2, 1) == -2);\n-    /// assert!(0.clamp(-2, 1) == 0);\n-    /// assert!(2.clamp(-2, 1) == 1);\n+    /// assert_eq!((-3).clamp(-2, 1), -2);\n+    /// assert_eq!(0.clamp(-2, 1), 0);\n+    /// assert_eq!(2.clamp(-2, 1), 1);\n     /// ```\n     #[must_use]\n     #[stable(feature = \"clamp\", since = \"1.50.0\")]\n@@ -1070,11 +1067,9 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let result = 1.0 < 2.0;\n-    /// assert_eq!(result, true);\n-    ///\n-    /// let result = 2.0 < 1.0;\n-    /// assert_eq!(result, false);\n+    /// assert_eq!(1.0 < 1.0, false);\n+    /// assert_eq!(1.0 < 2.0, true);\n+    /// assert_eq!(2.0 < 1.0, false);\n     /// ```\n     #[inline]\n     #[must_use]\n@@ -1089,11 +1084,9 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let result = 1.0 <= 2.0;\n-    /// assert_eq!(result, true);\n-    ///\n-    /// let result = 2.0 <= 2.0;\n-    /// assert_eq!(result, true);\n+    /// assert_eq!(1.0 <= 1.0, true);\n+    /// assert_eq!(1.0 <= 2.0, true);\n+    /// assert_eq!(2.0 <= 1.0, false);\n     /// ```\n     #[inline]\n     #[must_use]\n@@ -1107,11 +1100,9 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let result = 1.0 > 2.0;\n-    /// assert_eq!(result, false);\n-    ///\n-    /// let result = 2.0 > 2.0;\n-    /// assert_eq!(result, false);\n+    /// assert_eq!(1.0 > 1.0, false);\n+    /// assert_eq!(1.0 > 2.0, false);\n+    /// assert_eq!(2.0 > 1.0, true);\n     /// ```\n     #[inline]\n     #[must_use]\n@@ -1126,11 +1117,9 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let result = 2.0 >= 1.0;\n-    /// assert_eq!(result, true);\n-    ///\n-    /// let result = 2.0 >= 2.0;\n-    /// assert_eq!(result, true);\n+    /// assert_eq!(1.0 >= 1.0, true);\n+    /// assert_eq!(1.0 >= 2.0, false);\n+    /// assert_eq!(2.0 >= 1.0, true);\n     /// ```\n     #[inline]\n     #[must_use]\n@@ -1160,8 +1149,8 @@ pub macro PartialOrd($item:item) {\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(1, cmp::min(1, 2));\n-/// assert_eq!(2, cmp::min(2, 2));\n+/// assert_eq!(cmp::min(1, 2), 1);\n+/// assert_eq!(cmp::min(2, 2), 2);\n /// ```\n #[inline]\n #[must_use]\n@@ -1181,8 +1170,11 @@ pub const fn min<T: ~const Ord + ~const Destruct>(v1: T, v2: T) -> T {\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);\n-/// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);\n+/// let result = cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs()));\n+/// assert_eq!(result, 1);\n+///\n+/// let result = cmp::min_by(-2, 3, |x: &i32, y: &i32| x.abs().cmp(&y.abs()));\n+/// assert_eq!(result, -2);\n /// ```\n #[inline]\n #[must_use]\n@@ -1208,8 +1200,11 @@ where\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);\n-/// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);\n+/// let result = cmp::min_by_key(-2, 1, |x: &i32| x.abs());\n+/// assert_eq!(result, 1);\n+///\n+/// let result = cmp::min_by_key(-2, 2, |x: &i32| x.abs());\n+/// assert_eq!(result, -2);\n /// ```\n #[inline]\n #[must_use]\n@@ -1235,8 +1230,8 @@ where\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(2, cmp::max(1, 2));\n-/// assert_eq!(2, cmp::max(2, 2));\n+/// assert_eq!(cmp::max(1, 2), 2);\n+/// assert_eq!(cmp::max(2, 2), 2);\n /// ```\n #[inline]\n #[must_use]\n@@ -1256,8 +1251,11 @@ pub const fn max<T: ~const Ord + ~const Destruct>(v1: T, v2: T) -> T {\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);\n-/// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);\n+/// let result = cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs()));\n+/// assert_eq!(result, -2);\n+///\n+/// let result = cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())) ;\n+/// assert_eq!(result, 2);\n /// ```\n #[inline]\n #[must_use]\n@@ -1283,8 +1281,11 @@ where\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(cmp::max_by_key(-2, 1, |x: &i32| x.abs()), -2);\n-/// assert_eq!(cmp::max_by_key(-2, 2, |x: &i32| x.abs()), 2);\n+/// let result = cmp::max_by_key(-2, 1, |x: &i32| x.abs());\n+/// assert_eq!(result, -2);\n+///\n+/// let result = cmp::max_by_key(-2, 2, |x: &i32| x.abs());\n+/// assert_eq!(result, 2);\n /// ```\n #[inline]\n #[must_use]"}]}