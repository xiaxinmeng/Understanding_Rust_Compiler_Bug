{"sha": "245e1b533b5be5ea4a917957fb02d7f57e6b4661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NWUxYjUzM2I1YmU1ZWE0YTkxNzk1N2ZiMDJkN2Y1N2U2YjQ2NjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-02T17:54:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-02T17:54:01Z"}, "message": "Merge #6445\n\n6445: Fix coalescing of prime_caches updates r=jonas-schievink a=jonas-schievink\n\nThe previous implementation could try to create a progress bar when one\r\nwas already registered.\r\n\r\nbors r+ :robot: \n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "9aa83502a840a72e5ffc6bfe8902f5f5edcd046d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aa83502a840a72e5ffc6bfe8902f5f5edcd046d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/245e1b533b5be5ea4a917957fb02d7f57e6b4661", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfoEe5CRBK7hj4Ov3rIwAAdHIIAD7w6Bq+sg4jRtEE8jCmBw9a\nL/lwHoLu9ToRZTjQHtqew1OKLR2qUQiDbSRZnZlYpfljg7PSeRKUKfadjgTyEEG9\nT3VZaqpj0aYmdoEzUpAPZdAxLEHqQjrfwv1KhxaRXG0Ljojpjb4n91m+mOsgXHCy\nx922fLbcAp/u0SnDyagJRKobqXHuu+ppuZVFHBH0i8dK/fhoA77KOkwUCjnsBsXl\nCInpBHe22MvGX8m+k5022hS5W/XnZjkqPGraps4oDokKszFljf111y5UWcHq+CYw\nqTU/ot8rozjBdEru2/1L8IYM1kKdPX+fUPbHxvLoaJZ/v3TTofJp0TWFcGs4tSY=\n=uNhS\n-----END PGP SIGNATURE-----\n", "payload": "tree 9aa83502a840a72e5ffc6bfe8902f5f5edcd046d\nparent 173e45f8724c19e300f2cb3bdabcc37e48a48dc4\nparent 285960aa6ba1128b3e0658934f405dde81ce5f56\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604339641 +0000\ncommitter GitHub <noreply@github.com> 1604339641 +0000\n\nMerge #6445\n\n6445: Fix coalescing of prime_caches updates r=jonas-schievink a=jonas-schievink\n\nThe previous implementation could try to create a progress bar when one\r\nwas already registered.\r\n\r\nbors r+ :robot: \n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/245e1b533b5be5ea4a917957fb02d7f57e6b4661", "html_url": "https://github.com/rust-lang/rust/commit/245e1b533b5be5ea4a917957fb02d7f57e6b4661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/245e1b533b5be5ea4a917957fb02d7f57e6b4661/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "173e45f8724c19e300f2cb3bdabcc37e48a48dc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/173e45f8724c19e300f2cb3bdabcc37e48a48dc4", "html_url": "https://github.com/rust-lang/rust/commit/173e45f8724c19e300f2cb3bdabcc37e48a48dc4"}, {"sha": "285960aa6ba1128b3e0658934f405dde81ce5f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/285960aa6ba1128b3e0658934f405dde81ce5f56", "html_url": "https://github.com/rust-lang/rust/commit/285960aa6ba1128b3e0658934f405dde81ce5f56"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "d504572a83eeef7e8f1b80a110c2ca45533ec931", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/245e1b533b5be5ea4a917957fb02d7f57e6b4661/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245e1b533b5be5ea4a917957fb02d7f57e6b4661/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=245e1b533b5be5ea4a917957fb02d7f57e6b4661", "patch": "@@ -192,8 +192,7 @@ impl GlobalState {\n             },\n             Event::Task(mut task) => {\n                 let _p = profile::span(\"GlobalState::handle_event/task\");\n-                let mut prime_caches_started = false;\n-                let mut prime_caches_progress = None;\n+                let mut prime_caches_progress = Vec::new();\n                 loop {\n                     match task {\n                         Task::Response(response) => self.respond(response),\n@@ -203,13 +202,19 @@ impl GlobalState {\n                             }\n                         }\n                         Task::Workspaces(workspaces) => self.switch_workspaces(workspaces),\n-                        Task::PrimeCaches(progress) => {\n-                            if let PrimeCachesProgress::Started = progress {\n-                                prime_caches_started = true;\n+                        Task::PrimeCaches(progress) => match progress {\n+                            PrimeCachesProgress::Started => prime_caches_progress.push(progress),\n+                            PrimeCachesProgress::StartedOnCrate { .. } => {\n+                                match prime_caches_progress.last_mut() {\n+                                    Some(last @ PrimeCachesProgress::StartedOnCrate { .. }) => {\n+                                        // Coalesce subsequent update events.\n+                                        *last = progress;\n+                                    }\n+                                    _ => prime_caches_progress.push(progress),\n+                                }\n                             }\n-\n-                            prime_caches_progress = Some(progress);\n-                        }\n+                            PrimeCachesProgress::Finished => prime_caches_progress.push(progress),\n+                        },\n                     }\n                     // Coalesce multiple task events into one loop turn\n                     task = match self.task_pool.receiver.try_recv() {\n@@ -218,7 +223,7 @@ impl GlobalState {\n                     };\n                 }\n \n-                if let Some(progress) = prime_caches_progress {\n+                for progress in prime_caches_progress {\n                     let (state, message, fraction);\n                     match progress {\n                         PrimeCachesProgress::Started => {\n@@ -238,11 +243,6 @@ impl GlobalState {\n                         }\n                     };\n \n-                    if state != Progress::Begin && prime_caches_started {\n-                        // Progress indicator needs to be created first.\n-                        self.report_progress(\"indexing\", Progress::Begin, None, Some(0.0));\n-                    }\n-\n                     self.report_progress(\"indexing\", state, message, Some(fraction));\n                 }\n             }"}]}