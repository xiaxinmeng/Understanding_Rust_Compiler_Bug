{"sha": "e64c5961dc7640b4d5529608e0f321d586c027a0", "node_id": "C_kwDOAAsO6NoAKGU2NGM1OTYxZGM3NjQwYjRkNTUyOTYwOGUwZjMyMWQ1ODZjMDI3YTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-18T15:19:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-18T15:19:27Z"}, "message": "Auto merge of #10456 - samueltardieu:issue-10450, r=Manishearth\n\nIssue function modifiers in the right order in manual_async_fn lint\n\nFixes #10450\n\nchangelog: [`manual_async_fn`] output function modifiers in correct order", "tree": {"sha": "3b830d5e3bfc73a3215a537e4bbeaf3cc77aae22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b830d5e3bfc73a3215a537e4bbeaf3cc77aae22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e64c5961dc7640b4d5529608e0f321d586c027a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e64c5961dc7640b4d5529608e0f321d586c027a0", "html_url": "https://github.com/rust-lang/rust/commit/e64c5961dc7640b4d5529608e0f321d586c027a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e64c5961dc7640b4d5529608e0f321d586c027a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c8442d4d4d653c4916ec200c190073ef5d6c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c8442d4d4d653c4916ec200c190073ef5d6c7e", "html_url": "https://github.com/rust-lang/rust/commit/d3c8442d4d4d653c4916ec200c190073ef5d6c7e"}, {"sha": "afe27ba1a2fbf902ecb5bd02590871be5f46f34d", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe27ba1a2fbf902ecb5bd02590871be5f46f34d", "html_url": "https://github.com/rust-lang/rust/commit/afe27ba1a2fbf902ecb5bd02590871be5f46f34d"}], "stats": {"total": 79, "additions": 75, "deletions": 4}, "files": [{"sha": "af52090d8a47660c9e1b0819bc63861b30d9ac5e", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e64c5961dc7640b4d5529608e0f321d586c027a0/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64c5961dc7640b4d5529608e0f321d586c027a0/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=e64c5961dc7640b4d5529608e0f321d586c027a0", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound,\n-    ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n+    ImplItem, Item, ItemKind, LifetimeName, Node, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -46,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n         span: Span,\n-        _: LocalDefId,\n+        def_id: LocalDefId,\n     ) {\n         if_chain! {\n             if let Some(header) = kind.header();\n@@ -60,6 +60,8 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n             if let ExprKind::Block(block, _) = body.value.kind;\n             if block.stmts.is_empty();\n             if let Some(closure_body) = desugared_async_block(cx, block);\n+            if let Node::Item(Item {vis_span, ..}) | Node::ImplItem(ImplItem {vis_span, ..}) =\n+                cx.tcx.hir().get_by_def_id(def_id);\n             then {\n                 let header_span = span.with_hi(ret_ty.span.hi());\n \n@@ -70,15 +72,21 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                     \"this function can be simplified using the `async fn` syntax\",\n                     |diag| {\n                         if_chain! {\n+                            if let Some(vis_snip) = snippet_opt(cx, *vis_span);\n                             if let Some(header_snip) = snippet_opt(cx, header_span);\n                             if let Some(ret_pos) = position_before_rarrow(&header_snip);\n                             if let Some((ret_sugg, ret_snip)) = suggested_ret(cx, output);\n                             then {\n+                                let header_snip = if !vis_snip.is_empty() {\n+                                    format!(\"{} async {}\", vis_snip, &header_snip[vis_snip.len() + 1..ret_pos])\n+                                } else {\n+                                    format!(\"async {}\", &header_snip[..ret_pos])\n+                                };\n                                 let help = format!(\"make the function `async` and {ret_sugg}\");\n                                 diag.span_suggestion(\n                                     header_span,\n                                     help,\n-                                    format!(\"async {}{ret_snip}\", &header_snip[..ret_pos]),\n+                                    format!(\"{header_snip}{ret_snip}\"),\n                                     Applicability::MachineApplicable\n                                 );\n "}, {"sha": "5cc4a43af7e36ef6996a45a9d3a0510b29457b0d", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e64c5961dc7640b4d5529608e0f321d586c027a0/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e64c5961dc7640b4d5529608e0f321d586c027a0/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=e64c5961dc7640b4d5529608e0f321d586c027a0", "patch": "@@ -107,4 +107,10 @@ mod issue_5765 {\n     }\n }\n \n+pub async fn issue_10450() -> i32 { 42 }\n+\n+pub(crate) async fn issue_10450_2() -> i32 { 42 }\n+\n+pub(self) async fn issue_10450_3() -> i32 { 42 }\n+\n fn main() {}"}, {"sha": "ba504b8a8231f1147de9eb6966e0974c375dd0d0", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e64c5961dc7640b4d5529608e0f321d586c027a0/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64c5961dc7640b4d5529608e0f321d586c027a0/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=e64c5961dc7640b4d5529608e0f321d586c027a0", "patch": "@@ -127,4 +127,16 @@ mod issue_5765 {\n     }\n }\n \n+pub fn issue_10450() -> impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n+pub(crate) fn issue_10450_2() -> impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n+pub(self) fn issue_10450_3() -> impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n fn main() {}"}, {"sha": "f5ee3eb7cccbaae20e84b4542989dd1550fd61aa", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e64c5961dc7640b4d5529608e0f321d586c027a0/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e64c5961dc7640b4d5529608e0f321d586c027a0/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=e64c5961dc7640b4d5529608e0f321d586c027a0", "patch": "@@ -161,5 +161,50 @@ help: move the body of the async block to the enclosing function\n LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b { 42 }\n    |                                                                                    ~~~~~~\n \n-error: aborting due to 10 previous errors\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:130:1\n+   |\n+LL | pub fn issue_10450() -> impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | pub async fn issue_10450() -> i32 {\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | pub fn issue_10450() -> impl Future<Output = i32> { 42 }\n+   |                                                   ~~~~~~\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:134:1\n+   |\n+LL | pub(crate) fn issue_10450_2() -> impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | pub(crate) async fn issue_10450_2() -> i32 {\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | pub(crate) fn issue_10450_2() -> impl Future<Output = i32> { 42 }\n+   |                                                            ~~~~~~\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:138:1\n+   |\n+LL | pub(self) fn issue_10450_3() -> impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | pub(self) async fn issue_10450_3() -> i32 {\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | pub(self) fn issue_10450_3() -> impl Future<Output = i32> { 42 }\n+   |                                                           ~~~~~~\n+\n+error: aborting due to 13 previous errors\n "}]}