{"sha": "4add1e23f9b487373bd02852f3eef1ec15fdafc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZGQxZTIzZjliNDg3MzczYmQwMjg1MmYzZWVmMWVjMTVmZGFmYzM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-01-06T09:46:03Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-01-06T09:46:03Z"}, "message": "Improve `get_unwrap` suggestion\n\nHandle case where a reference is immediately dereferenced.\n\nFixes 3625", "tree": {"sha": "f7e98ba8fa2499572125dd63a871a4bffda52175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7e98ba8fa2499572125dd63a871a4bffda52175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4add1e23f9b487373bd02852f3eef1ec15fdafc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4add1e23f9b487373bd02852f3eef1ec15fdafc3", "html_url": "https://github.com/rust-lang/rust/commit/4add1e23f9b487373bd02852f3eef1ec15fdafc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4add1e23f9b487373bd02852f3eef1ec15fdafc3/comments", "author": null, "committer": null, "parents": [{"sha": "c63b6349b44019146cc2edcef8141692891b9401", "url": "https://api.github.com/repos/rust-lang/rust/commits/c63b6349b44019146cc2edcef8141692891b9401", "html_url": "https://github.com/rust-lang/rust/commit/c63b6349b44019146cc2edcef8141692891b9401"}], "stats": {"total": 122, "additions": 104, "deletions": 18}, "files": [{"sha": "afc875593ac89189fdbde04af32c2b3ab55013ef", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4add1e23f9b487373bd02852f3eef1ec15fdafc3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4add1e23f9b487373bd02852f3eef1ec15fdafc3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4add1e23f9b487373bd02852f3eef1ec15fdafc3", "patch": "@@ -1603,7 +1603,7 @@ fn lint_get_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, get_args: &[hir::\n     } else {\n         return; // not linting on a .get().unwrap() chain or variant\n     };\n-    let needs_ref;\n+    let mut needs_ref;\n     let caller_type = if derefs_to_slice(cx, &get_args[0], expr_ty).is_some() {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"slice\"\n@@ -1623,6 +1623,22 @@ fn lint_get_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, get_args: &[hir::\n         return; // caller is not a type that we want to lint\n     };\n \n+    let mut span = expr.span;\n+\n+    // Handle the case where the result is immedately dereferenced\n+    // by not requiring ref and pulling the dereference into the\n+    // suggestion.\n+    if needs_ref {\n+        if let Some(parent) = get_parent_expr(cx, expr) {\n+            if let hir::ExprKind::Unary(op, _) = parent.node {\n+                if op == hir::UnOp::UnDeref {\n+                    needs_ref = false;\n+                    span = parent.span;\n+                }\n+            }\n+        }\n+    }\n+\n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n     let borrow_str = if !needs_ref {\n         \"\"\n@@ -1631,10 +1647,11 @@ fn lint_get_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, get_args: &[hir::\n     } else {\n         \"&\"\n     };\n+\n     span_lint_and_sugg(\n         cx,\n         GET_UNWRAP,\n-        expr.span,\n+        span,\n         &format!(\n             \"called `.get{0}().unwrap()` on a {1}. Using `[]` is more clear and more concise\",\n             mut_str, caller_type"}, {"sha": "4badef1b8039e2eacfa4c8a35c0cb8e6be5d7b56", "filename": "tests/ui/get_unwrap.fixed", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4add1e23f9b487373bd02852f3eef1ec15fdafc3/tests%2Fui%2Fget_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4add1e23f9b487373bd02852f3eef1ec15fdafc3/tests%2Fui%2Fget_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.fixed?ref=4add1e23f9b487373bd02852f3eef1ec15fdafc3", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+#![allow(unused_mut)]\n+\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::VecDeque;\n+use std::iter::FromIterator;\n+\n+struct GetFalsePositive {\n+    arr: [u32; 3],\n+}\n+\n+impl GetFalsePositive {\n+    fn get(&self, pos: usize) -> Option<&u32> {\n+        self.arr.get(pos)\n+    }\n+    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> {\n+        self.arr.get_mut(pos)\n+    }\n+}\n+\n+fn main() {\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_slice = &mut [0, 1, 2, 3];\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n+    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n+\n+    {\n+        // Test `get().unwrap()`\n+        let _ = &boxed_slice[1];\n+        let _ = &some_slice[0];\n+        let _ = &some_vec[0];\n+        let _ = &some_vecdeque[0];\n+        let _ = &some_hashmap[&1];\n+        let _ = &some_btreemap[&1];\n+        let _ = false_positive.get(0).unwrap();\n+    }\n+\n+    {\n+        // Test `get_mut().unwrap()`\n+        boxed_slice[0] = 1;\n+        some_slice[0] = 1;\n+        some_vec[0] = 1;\n+        some_vecdeque[0] = 1;\n+        // Check false positives\n+        *some_hashmap.get_mut(&1).unwrap() = 'b';\n+        *some_btreemap.get_mut(&1).unwrap() = 'b';\n+        *false_positive.get_mut(0).unwrap() = 1;\n+    }\n+\n+    {\n+        // Test `get().unwrap().foo()` and `get_mut().unwrap().bar()`\n+        let _ = some_vec[0..1].to_vec();\n+        let _ = some_vec[0..1].to_vec();\n+    }\n+}"}, {"sha": "d1a32dcbda3f2ed9a671225b45552dcdd352e94d", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4add1e23f9b487373bd02852f3eef1ec15fdafc3/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4add1e23f9b487373bd02852f3eef1ec15fdafc3/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=4add1e23f9b487373bd02852f3eef1ec15fdafc3", "patch": "@@ -7,6 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n #![allow(unused_mut)]\n \n use std::collections::BTreeMap;"}, {"sha": "c947cf87d108e9774874c27c9887273b0745809c", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4add1e23f9b487373bd02852f3eef1ec15fdafc3/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4add1e23f9b487373bd02852f3eef1ec15fdafc3/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=4add1e23f9b487373bd02852f3eef1ec15fdafc3", "patch": "@@ -1,73 +1,73 @@\n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:41:17\n+  --> $DIR/get_unwrap.rs:42:17\n    |\n LL |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n    |\n    = note: `-D clippy::get-unwrap` implied by `-D warnings`\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:42:17\n+  --> $DIR/get_unwrap.rs:43:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:43:17\n+  --> $DIR/get_unwrap.rs:44:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:44:17\n+  --> $DIR/get_unwrap.rs:45:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:45:17\n+  --> $DIR/get_unwrap.rs:46:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:46:17\n+  --> $DIR/get_unwrap.rs:47:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:52:10\n+  --> $DIR/get_unwrap.rs:53:9\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut boxed_slice[0]`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:53:10\n+  --> $DIR/get_unwrap.rs:54:9\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_slice[0]`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:54:10\n+  --> $DIR/get_unwrap.rs:55:9\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vec[0]`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:55:10\n+  --> $DIR/get_unwrap.rs:56:9\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:64:17\n+  --> $DIR/get_unwrap.rs:65:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:65:17\n+  --> $DIR/get_unwrap.rs:66:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`"}]}