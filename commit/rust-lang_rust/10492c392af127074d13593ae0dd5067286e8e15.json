{"sha": "10492c392af127074d13593ae0dd5067286e8e15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNDkyYzM5MmFmMTI3MDc0ZDEzNTkzYWUwZGQ1MDY3Mjg2ZThlMTU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-16T15:12:29Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-03-02T12:18:45Z"}, "message": "Add support for json output in show-coverage option", "tree": {"sha": "d23226ada56b30901cd2e2e3d35263109ca38297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d23226ada56b30901cd2e2e3d35263109ca38297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10492c392af127074d13593ae0dd5067286e8e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10492c392af127074d13593ae0dd5067286e8e15", "html_url": "https://github.com/rust-lang/rust/commit/10492c392af127074d13593ae0dd5067286e8e15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10492c392af127074d13593ae0dd5067286e8e15/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8858d71d28d68a0063f3ccab1fbf378d69afc78b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8858d71d28d68a0063f3ccab1fbf378d69afc78b", "html_url": "https://github.com/rust-lang/rust/commit/8858d71d28d68a0063f3ccab1fbf378d69afc78b"}], "stats": {"total": 67, "additions": 64, "deletions": 3}, "files": [{"sha": "0ca5a956bdb69c3d0b4f731992f0795e8a2a6809", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/10492c392af127074d13593ae0dd5067286e8e15/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10492c392af127074d13593ae0dd5067286e8e15/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=10492c392af127074d13593ae0dd5067286e8e15", "patch": "@@ -1,11 +1,13 @@\n use crate::clean;\n+use crate::config::OutputFormat;\n use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n use crate::passes::Pass;\n \n use rustc_ast::attr;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n+use serialize::json::{ToJson, Json};\n \n use std::collections::BTreeMap;\n use std::ops;\n@@ -16,8 +18,8 @@ pub const CALCULATE_DOC_COVERAGE: Pass = Pass {\n     description: \"counts the number of items with and without documentation\",\n };\n \n-fn calculate_doc_coverage(krate: clean::Crate, _: &DocContext<'_>) -> clean::Crate {\n-    let mut calc = CoverageCalculator::default();\n+fn calculate_doc_coverage( krate: clean::Crate, ctx: &DocContext<'_>) -> clean::Crate {\n+    let mut calc = CoverageCalculator::new(ctx.renderinfo.borrow().output_format);\n     let krate = calc.fold_crate(krate);\n \n     calc.print_results();\n@@ -64,13 +66,72 @@ impl ops::AddAssign for ItemCount {\n     }\n }\n \n-#[derive(Default)]\n struct CoverageCalculator {\n     items: BTreeMap<FileName, ItemCount>,\n+    output_format: Option<OutputFormat>,\n+}\n+\n+fn limit_filename_len(filename: String) -> String {\n+    // if a filename is too long, shorten it so we don't blow out the table\n+    // FIXME(misdreavus): this needs to count graphemes, and probably also track\n+    // double-wide characters...\n+    if filename.len() > 35 {\n+        \"...\".to_string() + &filename[filename.len() - 32..]\n+    } else {\n+        filename\n+    }\n+}\n+\n+impl ToJson for CoverageCalculator {\n+    fn to_json(&self) -> Json {\n+        let mut total = ItemCount::default();\n+        let mut entries = BTreeMap::default();\n+\n+        entries.insert(\"files\".to_owned(), Json::Array(self.items\n+            .iter()\n+            .filter_map(|(file, &count)| {\n+                count.percentage().map(|percent| {\n+                    (limit_filename_len(file.to_string()), count, percent)\n+                })\n+            })\n+            .map(|(name, count, percentage)| {\n+                let mut fields = BTreeMap::default();\n+\n+                fields.insert(\"documented\".to_owned(), Json::U64(count.with_docs));\n+                fields.insert(\"total\".to_owned(), Json::U64(count.total));\n+                fields.insert(\"percentage\".to_owned(), Json::F64(percentage));\n+\n+                total += count;\n+\n+                let mut obj = BTreeMap::default();\n+                obj.insert(name, Json::Object(fields));\n+\n+                Json::Object(obj)\n+            })\n+            .collect::<Vec<_>>()));\n+        let mut fields = BTreeMap::default();\n+        fields.insert(\"documented\".to_owned(), Json::U64(total.with_docs));\n+        fields.insert(\"total\".to_owned(), Json::U64(total.total));\n+        fields.insert(\"percentage\".to_owned(), Json::F64(total.percentage().unwrap_or(0.0)));\n+\n+        entries.insert(\"total\".to_owned(), Json::Object(fields));\n+        Json::Object(entries)\n+    }\n }\n \n impl CoverageCalculator {\n+    fn new(output_format: Option<OutputFormat>) -> CoverageCalculator {\n+        CoverageCalculator {\n+            items: Default::default(),\n+            output_format,\n+        }\n+    }\n+\n     fn print_results(&self) {\n+        if self.output_format.map(|o| o.is_json()).unwrap_or_else(|| false) {\n+            println!(\"{}\", self.to_json().pretty());\n+            return;\n+        }\n         let mut total = ItemCount::default();\n \n         fn print_table_line() {"}]}