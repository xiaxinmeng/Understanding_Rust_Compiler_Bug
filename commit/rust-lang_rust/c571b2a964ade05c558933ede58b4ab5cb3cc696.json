{"sha": "c571b2a964ade05c558933ede58b4ab5cb3cc696", "node_id": "C_kwDOAAsO6NoAKGM1NzFiMmE5NjRhZGUwNWM1NTg5MzNlZGU1OGI0YWI1Y2IzY2M2OTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-19T14:35:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-19T14:35:23Z"}, "message": "Rollup merge of #104593 - compiler-errors:rpitit-object-safety-spans, r=fee1-dead\n\nImprove spans for RPITIT object-safety errors\n\nNo reason why we can't point at the `impl Trait` that causes the object-safety violation.\n\nAlso [drive-by: Add is_async fn to hir::IsAsync](https://github.com/rust-lang/rust/pull/104593/commits/c4165f3a965e258531928180195637455299c6f3), which touches clippy too.", "tree": {"sha": "115683d7c5ed84bbb0550ecf3a98a6fa9bf31bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/115683d7c5ed84bbb0550ecf3a98a6fa9bf31bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c571b2a964ade05c558933ede58b4ab5cb3cc696", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjeOmrCRBK7hj4Ov3rIwAA3LcIAJT9qx3FfBD4yYNoIa8d+1k9\nE/ee1afesOFqpxkW6dLKuQm8ETie2SsScr7/toXcNyBz1EH7FNd5rR/V1ajgSr8/\nkb+r/w7BWdEbNPygH3IdsK/e1kYuSYupfYvz2dvz5kE0rRenV5Q8gqd9QdGupOVw\nSsX1hSeOKbjHZaXD+yBh/T18roTIs8UHlJfirjb3iTSE/DUc7uODOxWimsYGw8W7\naM4x9G45SS1OG4FHQlAP1qkhe2A0MBPr9Jd06krJ7O9+O7l++QGyQ2XdYlTt4AIY\nzt+XIcOeXD7maSlF3XR1l3/CmsWKHpkkKqI9uU5PGj5CPS3U83hsQso4DrPdrY8=\n=PM7B\n-----END PGP SIGNATURE-----\n", "payload": "tree 115683d7c5ed84bbb0550ecf3a98a6fa9bf31bdc\nparent c916a8df53eb137ffbfe8dada1b0721a0bbdb43a\nparent 9a9d0f40b8f01c56407e1077231edf61ffcf14fa\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668868523 +0100\ncommitter GitHub <noreply@github.com> 1668868523 +0100\n\nRollup merge of #104593 - compiler-errors:rpitit-object-safety-spans, r=fee1-dead\n\nImprove spans for RPITIT object-safety errors\n\nNo reason why we can't point at the `impl Trait` that causes the object-safety violation.\n\nAlso [drive-by: Add is_async fn to hir::IsAsync](https://github.com/rust-lang/rust/pull/104593/commits/c4165f3a965e258531928180195637455299c6f3), which touches clippy too.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c571b2a964ade05c558933ede58b4ab5cb3cc696", "html_url": "https://github.com/rust-lang/rust/commit/c571b2a964ade05c558933ede58b4ab5cb3cc696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c571b2a964ade05c558933ede58b4ab5cb3cc696/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c916a8df53eb137ffbfe8dada1b0721a0bbdb43a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c916a8df53eb137ffbfe8dada1b0721a0bbdb43a", "html_url": "https://github.com/rust-lang/rust/commit/c916a8df53eb137ffbfe8dada1b0721a0bbdb43a"}, {"sha": "9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "html_url": "https://github.com/rust-lang/rust/commit/9a9d0f40b8f01c56407e1077231edf61ffcf14fa"}], "stats": {"total": 113, "additions": 86, "deletions": 27}, "files": [{"sha": "b90e0962ce6ad05285f2980ab8ff0d4df4b64271", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -62,7 +62,7 @@ impl<'mir, 'tcx> ConstCx<'mir, 'tcx> {\n     }\n \n     fn is_async(&self) -> bool {\n-        self.tcx.asyncness(self.def_id()) == hir::IsAsync::Async\n+        self.tcx.asyncness(self.def_id()).is_async()\n     }\n }\n "}, {"sha": "e0a3864506548f186e95c15387f8b7f7526ba1f0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -2720,6 +2720,12 @@ pub enum IsAsync {\n     NotAsync,\n }\n \n+impl IsAsync {\n+    pub fn is_async(self) -> bool {\n+        self == IsAsync::Async\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]\n pub enum Defaultness {\n     Default { has_value: bool },"}, {"sha": "e68df228c6b5186ae13871f1d88eca4c4afbae3f", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -684,9 +684,7 @@ fn report_trait_method_mismatch<'tcx>(\n                 // Suggestion to change output type. We do not suggest in `async` functions\n                 // to avoid complex logic or incorrect output.\n                 match tcx.hir().expect_impl_item(impl_m.def_id.expect_local()).kind {\n-                    ImplItemKind::Fn(ref sig, _)\n-                        if sig.header.asyncness == hir::IsAsync::NotAsync =>\n-                    {\n+                    ImplItemKind::Fn(ref sig, _) if !sig.header.asyncness.is_async() => {\n                         let msg = \"change the output type to match the trait\";\n                         let ap = Applicability::MachineApplicable;\n                         match sig.decl.output {"}, {"sha": "1890c0e24bb4419c1ec17750293b75764b4a0167", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -924,10 +924,13 @@ impl ObjectSafetyViolation {\n             }\n             ObjectSafetyViolation::Method(\n                 name,\n-                MethodViolationCode::ReferencesImplTraitInTrait,\n+                MethodViolationCode::ReferencesImplTraitInTrait(_),\n                 _,\n             ) => format!(\"method `{}` references an `impl Trait` type in its return type\", name)\n                 .into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::AsyncFn, _) => {\n+                format!(\"method `{}` is `async`\", name).into()\n+            }\n             ObjectSafetyViolation::Method(\n                 name,\n                 MethodViolationCode::WhereClauseReferencesSelf,\n@@ -1035,7 +1038,10 @@ pub enum MethodViolationCode {\n     ReferencesSelfOutput,\n \n     /// e.g., `fn foo(&self) -> impl Sized`\n-    ReferencesImplTraitInTrait,\n+    ReferencesImplTraitInTrait(Span),\n+\n+    /// e.g., `async fn foo(&self)`\n+    AsyncFn,\n \n     /// e.g., `fn foo(&self) where Self: Clone`\n     WhereClauseReferencesSelf,"}, {"sha": "9745e0137ee9f63f0dc95218d4579ac2d22fd3ad", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -375,6 +375,7 @@ fn object_safety_violation_for_method(\n         let span = match (&v, node) {\n             (MethodViolationCode::ReferencesSelfInput(Some(span)), _) => *span,\n             (MethodViolationCode::UndispatchableReceiver(Some(span)), _) => *span,\n+            (MethodViolationCode::ReferencesImplTraitInTrait(span), _) => *span,\n             (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n                 node.fn_decl().map_or(method.ident(tcx).span, |decl| decl.output.span())\n             }\n@@ -437,8 +438,8 @@ fn virtual_call_violation_for_method<'tcx>(\n     if contains_illegal_self_type_reference(tcx, trait_def_id, sig.output()) {\n         return Some(MethodViolationCode::ReferencesSelfOutput);\n     }\n-    if contains_illegal_impl_trait_in_trait(tcx, sig.output()) {\n-        return Some(MethodViolationCode::ReferencesImplTraitInTrait);\n+    if let Some(code) = contains_illegal_impl_trait_in_trait(tcx, method.def_id, sig.output()) {\n+        return Some(code);\n     }\n \n     // We can't monomorphize things like `fn foo<A>(...)`.\n@@ -864,16 +865,24 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n \n pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    fn_def_id: DefId,\n     ty: ty::Binder<'tcx, Ty<'tcx>>,\n-) -> bool {\n+) -> Option<MethodViolationCode> {\n+    // This would be caught below, but rendering the error as a separate\n+    // `async-specific` message is better.\n+    if tcx.asyncness(fn_def_id).is_async() {\n+        return Some(MethodViolationCode::AsyncFn);\n+    }\n+\n     // FIXME(RPITIT): Perhaps we should use a visitor here?\n-    ty.skip_binder().walk().any(|arg| {\n+    ty.skip_binder().walk().find_map(|arg| {\n         if let ty::GenericArgKind::Type(ty) = arg.unpack()\n             && let ty::Projection(proj) = ty.kind()\n+            && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n         {\n-            tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+            Some(MethodViolationCode::ReferencesImplTraitInTrait(tcx.def_span(proj.item_def_id)))\n         } else {\n-            false\n+            None\n         }\n     })\n }"}, {"sha": "a8bc35f7e0c59cfc0ad9944ed6b4ded6bedeb700", "filename": "src/test/ui/async-await/in-trait/object-safety.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -0,0 +1,13 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait Foo {\n+    async fn foo(&self);\n+}\n+\n+fn main() {\n+    let x: &dyn Foo = todo!();\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+}"}, {"sha": "0b318f71f395d85d4e68c25efe84c66ecd25f044", "filename": "src/test/ui/async-await/in-trait/object-safety.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/object-safety.rs:3:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:11:12\n+   |\n+LL |     let x: &dyn Foo = todo!();\n+   |            ^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:7:14\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     async fn foo(&self);\n+   |              ^^^ ...because method `foo` is `async`\n+   = help: consider moving `foo` to another trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "ca0e760ff6d35fcad92ad1fa7baca2ad132009d3", "filename": "src/test/ui/impl-trait/in-trait/object-safety.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -5,12 +5,12 @@ LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n@@ -20,12 +20,12 @@ LL |     let s = i.baz();\n    |             ^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n@@ -35,12 +35,12 @@ LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n    = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n    = note: required by cast to type `Box<dyn Foo>`"}, {"sha": "5c6a342b3d074221eaaa9296b06e4a89c9e8e1ae", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound,\n-    HirId, IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n+    HirId, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n     ) {\n         if_chain! {\n             if let Some(header) = kind.header();\n-            if header.asyncness == IsAsync::NotAsync;\n+            if !header.asyncness.is_async();\n             // Check that this function returns `impl Future`\n             if let FnRetTy::Return(ret_ty) = decl.output;\n             if let Some((trait_ref, output_lifetimes)) = future_trait_ref(cx, ret_ty);"}, {"sha": "3538bef6e06185a13eb5a17ea1e5a9fb99816a8d", "filename": "src/tools/clippy/clippy_lints/src/unused_async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, IsAsync, YieldSource};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if !span.from_expansion() && fn_kind.asyncness() == IsAsync::Async {\n+        if !span.from_expansion() && fn_kind.asyncness().is_async() {\n             let mut visitor = AsyncFnVisitor { cx, found_await: false };\n             walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), hir_id);\n             if !visitor.found_await {"}, {"sha": "bb91317d67f5add0846404f949af346aad2fe29c", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c571b2a964ade05c558933ede58b4ab5cb3cc696/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=c571b2a964ade05c558933ede58b4ab5cb3cc696", "patch": "@@ -87,10 +87,10 @@ use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness, Destination, Expr,\n-    ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n-    Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n-    TraitRef, TyKind, UnOp,\n+    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness,\n+    Destination, Expr, ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind,\n+    LangItem, Local, MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy,\n+    QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n@@ -1861,7 +1861,7 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n \n /// Checks if the given function kind is an async function.\n pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n-    matches!(kind, FnKind::ItemFn(_, _, header) if header.asyncness == IsAsync::Async)\n+    matches!(kind, FnKind::ItemFn(_, _, header) if header.asyncness.is_async())\n }\n \n /// Peels away all the compiler generated code surrounding the body of an async function,"}]}