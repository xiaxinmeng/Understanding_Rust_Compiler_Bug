{"sha": "2ed473487323bb4e5a600a3318e0981981214210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZDQ3MzQ4NzMyM2JiNGU1YTYwMGEzMzE4ZTA5ODE5ODEyMTQyMTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-06-10T20:54:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-13T20:53:34Z"}, "message": "librustc: Fix the issue with labels shadowing variable names by making\nthe leading quote part of the identifier for the purposes of hygiene.\n\nThis adopts @jbclements' solution to #14539.\n\nI'm not sure if this is a breaking change or not.\n\nCloses #12512.\n\n[breaking-change]", "tree": {"sha": "a48635d0cac054e7045be8d0fbbd506f4f50b74e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48635d0cac054e7045be8d0fbbd506f4f50b74e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ed473487323bb4e5a600a3318e0981981214210", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed473487323bb4e5a600a3318e0981981214210", "html_url": "https://github.com/rust-lang/rust/commit/2ed473487323bb4e5a600a3318e0981981214210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ed473487323bb4e5a600a3318e0981981214210/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f11f20e5e72a3b22863a9913df94303321a5ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f11f20e5e72a3b22863a9913df94303321a5ce", "html_url": "https://github.com/rust-lang/rust/commit/e7f11f20e5e72a3b22863a9913df94303321a5ce"}], "stats": {"total": 246, "additions": 158, "deletions": 88}, "files": [{"sha": "8ff5331cec2319dca978cf60064224f0dddde9c4", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'b> Visitor<Scope<'a>> for LifetimeContext<'b> {\n     fn visit_lifetime_ref(&mut self,\n                           lifetime_ref: &ast::Lifetime,\n                           scope: Scope<'a>) {\n-        if lifetime_ref.name == special_idents::statik.name {\n+        if lifetime_ref.name == special_idents::static_lifetime.name {\n             self.insert_lifetime(lifetime_ref, DefStaticRegion);\n             return;\n         }\n@@ -330,15 +330,15 @@ impl<'a> LifetimeContext<'a> {\n                                lifetime_ref: &ast::Lifetime) {\n         self.sess.span_err(\n             lifetime_ref.span,\n-            format!(\"use of undeclared lifetime name `'{}`\",\n+            format!(\"use of undeclared lifetime name `{}`\",\n                     token::get_name(lifetime_ref.name)).as_slice());\n     }\n \n     fn check_lifetime_names(&self, lifetimes: &Vec<ast::Lifetime>) {\n         for i in range(0, lifetimes.len()) {\n             let lifetime_i = lifetimes.get(i);\n \n-            let special_idents = [special_idents::statik];\n+            let special_idents = [special_idents::static_lifetime];\n             for lifetime in lifetimes.iter() {\n                 if special_idents.iter().any(|&i| i.name == lifetime.name) {\n                     self.sess.span_err(\n@@ -354,7 +354,7 @@ impl<'a> LifetimeContext<'a> {\n                 if lifetime_i.name == lifetime_j.name {\n                     self.sess.span_err(\n                         lifetime_j.span,\n-                        format!(\"lifetime name `'{}` declared twice in \\\n+                        format!(\"lifetime name `{}` declared twice in \\\n                                 the same scope\",\n                                 token::get_name(lifetime_j.name)).as_slice());\n                 }"}, {"sha": "2e02c798339eae63a5ee060e72e20545a10a0ab3", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -1505,7 +1505,8 @@ impl LifeGiver {\n     fn give_lifetime(&self) -> ast::Lifetime {\n         let mut lifetime;\n         loop {\n-            let s = num_to_str(self.counter.get());\n+            let mut s = String::from_str(\"'\");\n+            s.push_str(num_to_str(self.counter.get()).as_slice());\n             if !self.taken.contains(&s) {\n                 lifetime = name_to_dummy_lifetime(\n                                     token::str_to_ident(s.as_slice()).name);"}, {"sha": "80f3508d0cd354bd678b7fc3a8592803eba3e294", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -162,7 +162,7 @@ pub fn bound_region_to_str(cx: &ctxt,\n \n     match br {\n         BrNamed(_, name) => {\n-            format!(\"{}'{}{}\", prefix, token::get_name(name), space_str)\n+            format!(\"{}{}{}\", prefix, token::get_name(name), space_str)\n         }\n         BrAnon(_) => prefix.to_string(),\n         BrFresh(_) => prefix.to_string(),"}, {"sha": "4ef7796c454b6263e9f2fe19520a4ff2a6fc69ad", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -85,6 +85,7 @@ pub trait AstBuilder {\n                       typ: P<ast::Ty>,\n                       ex: Gc<ast::Expr>)\n                       -> Gc<ast::Stmt>;\n+    fn stmt_item(&self, sp: Span, item: Gc<ast::Item>) -> Gc<ast::Stmt>;\n \n     // blocks\n     fn block(&self, span: Span, stmts: Vec<Gc<ast::Stmt>>,\n@@ -239,6 +240,14 @@ pub trait AstBuilder {\n                 vi: Vec<ast::ViewItem>,\n                 items: Vec<Gc<ast::Item>>) -> Gc<ast::Item>;\n \n+    fn item_static(&self,\n+                   span: Span,\n+                   name: Ident,\n+                   ty: P<ast::Ty>,\n+                   mutbl: ast::Mutability,\n+                   expr: Gc<ast::Expr>)\n+                   -> Gc<ast::Item>;\n+\n     fn item_ty_poly(&self,\n                     span: Span,\n                     name: Ident,\n@@ -484,11 +493,19 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         box(GC) respan(sp, ast::StmtDecl(box(GC) decl, ast::DUMMY_NODE_ID))\n     }\n \n-    fn block(&self, span: Span, stmts: Vec<Gc<ast::Stmt>>,\n-             expr: Option<Gc<Expr>>) -> P<ast::Block> {\n+    fn block(&self,\n+             span: Span,\n+             stmts: Vec<Gc<ast::Stmt>>,\n+             expr: Option<Gc<Expr>>)\n+             -> P<ast::Block> {\n         self.block_all(span, Vec::new(), stmts, expr)\n     }\n \n+    fn stmt_item(&self, sp: Span, item: Gc<ast::Item>) -> Gc<ast::Stmt> {\n+        let decl = respan(sp, ast::DeclItem(item));\n+        box(GC) respan(sp, ast::StmtDecl(box(GC) decl, ast::DUMMY_NODE_ID))\n+    }\n+\n     fn block_expr(&self, expr: Gc<ast::Expr>) -> P<ast::Block> {\n         self.block_all(expr.span, Vec::new(), Vec::new(), Some(expr))\n     }\n@@ -942,6 +959,16 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         )\n     }\n \n+    fn item_static(&self,\n+                   span: Span,\n+                   name: Ident,\n+                   ty: P<ast::Ty>,\n+                   mutbl: ast::Mutability,\n+                   expr: Gc<ast::Expr>)\n+                   -> Gc<ast::Item> {\n+        self.item(span, name, Vec::new(), ast::ItemStatic(ty, mutbl, expr))\n+    }\n+\n     fn item_ty_poly(&self, span: Span, name: Ident, ty: P<ast::Ty>,\n                     generics: Generics) -> Gc<ast::Item> {\n         self.item(span, name, Vec::new(), ast::ItemTy(ty, generics))"}, {"sha": "b87a25d4a44a25c87baf3f2651e18265ac6d828b", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -94,6 +94,18 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     }\n \n     let e = cx.expr_vec_slice(sp, bytes);\n-    let e = quote_expr!(cx, { static BYTES: &'static [u8] = $e; BYTES});\n+    let ty = cx.ty(sp, ast::TyVec(cx.ty_ident(sp, cx.ident_of(\"u8\"))));\n+    let lifetime = cx.lifetime(sp, cx.ident_of(\"'static\").name);\n+    let item = cx.item_static(sp,\n+                              cx.ident_of(\"BYTES\"),\n+                              cx.ty_rptr(sp,\n+                                         ty,\n+                                         Some(lifetime),\n+                                         ast::MutImmutable),\n+                              ast::MutImmutable,\n+                              e);\n+    let e = cx.expr_block(cx.block(sp,\n+                                   vec!(cx.stmt_item(sp, item)),\n+                                   Some(cx.expr_ident(sp, cx.ident_of(\"BYTES\")))));\n     MacExpr::new(e)\n }"}, {"sha": "9ef7241ca24842ed38292aa1b3c27f7a563b1c85", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -43,7 +43,7 @@ pub fn expand_option_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                                                         cx.ident_of(\"str\")),\n                                                    Some(cx.lifetime(sp,\n                                                         cx.ident_of(\n-                                                            \"static\").name)),\n+                                                            \"'static\").name)),\n                                                    ast::MutImmutable))))\n       }\n       Some(s) => {"}, {"sha": "cfce4b1e0fc5eb54b775eab3860a9aeb69e80815", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -465,7 +465,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     self.ecx.ident_of(\"rt\"),\n                     self.ecx.ident_of(\"Piece\")),\n                 vec!(self.ecx.lifetime(self.fmtsp,\n-                                       self.ecx.ident_of(\"static\").name)),\n+                                       self.ecx.ident_of(\"'static\").name)),\n                 Vec::new()\n             ), None);\n         let ty = ast::TyFixedLengthVec("}, {"sha": "459cb6d31ed0aedd34b4ce3674b0c8adde516adc", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -757,19 +757,34 @@ impl<'a> StringReader<'a> {\n                 while ident_continue(self.curr) {\n                     self.bump();\n                 }\n+\n+                // Include the leading `'` in the real identifier, for macro\n+                // expansion purposes. See #12512 for the gory details of why\n+                // this is necessary.\n                 let ident = self.with_str_from(start, |lifetime_name| {\n-                    str_to_ident(lifetime_name)\n+                    str_to_ident(format!(\"'{}\", lifetime_name).as_slice())\n                 });\n-                let tok = &token::IDENT(ident, false);\n-\n-                if token::is_keyword(token::keywords::Self, tok) {\n-                    self.err_span(start, self.last_pos,\n-                               \"invalid lifetime name: 'self \\\n-                                is no longer a special lifetime\");\n-                } else if token::is_any_keyword(tok) &&\n-                    !token::is_keyword(token::keywords::Static, tok) {\n-                    self.err_span(start, self.last_pos,\n-                               \"invalid lifetime name\");\n+\n+                // Conjure up a \"keyword checking ident\" to make sure that\n+                // the lifetime name is not a keyword.\n+                let keyword_checking_ident =\n+                    self.with_str_from(start, |lifetime_name| {\n+                        str_to_ident(lifetime_name)\n+                    });\n+                let keyword_checking_token =\n+                    &token::IDENT(keyword_checking_ident, false);\n+                if token::is_keyword(token::keywords::Self,\n+                                     keyword_checking_token) {\n+                    self.err_span(start,\n+                                  self.last_pos,\n+                                  \"invalid lifetime name: 'self \\\n+                                   is no longer a special lifetime\");\n+                } else if token::is_any_keyword(keyword_checking_token) &&\n+                    !token::is_keyword(token::keywords::Static,\n+                                       keyword_checking_token) {\n+                    self.err_span(start,\n+                                  self.last_pos,\n+                                  \"invalid lifetime name\");\n                 }\n                 return token::LIFETIME(ident);\n             }\n@@ -1128,7 +1143,7 @@ mod test {\n \n     #[test] fn lifetime_name() {\n         assert_eq!(setup(&mk_sh(), \"'abc\".to_string()).next_token().tok,\n-                   token::LIFETIME(token::str_to_ident(\"abc\")));\n+                   token::LIFETIME(token::str_to_ident(\"'abc\")));\n     }\n \n     #[test] fn raw_string() {"}, {"sha": "aaedb5709550d2e32e4105920404bfe623ebc899", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -3452,7 +3452,7 @@ impl<'a> Parser<'a> {\n             match self.token {\n                 token::LIFETIME(lifetime) => {\n                     let lifetime_interned_string = token::get_ident(lifetime);\n-                    if lifetime_interned_string.equiv(&(\"static\")) {\n+                    if lifetime_interned_string.equiv(&(\"'static\")) {\n                         result.push(StaticRegionTyParamBound);\n                         if allow_any_lifetime && ret_lifetime.is_none() {\n                             ret_lifetime = Some(ast::Lifetime {"}, {"sha": "a4a022708d95e84ee1830ebe69b70250085def1c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 52, "deletions": 51, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -232,7 +232,7 @@ pub fn to_str(t: &Token) -> String {\n       /* Name components */\n       IDENT(s, _) => get_ident(s).get().to_string(),\n       LIFETIME(s) => {\n-          (format!(\"'{}\", get_ident(s))).to_string()\n+          (format!(\"{}\", get_ident(s))).to_string()\n       }\n       UNDERSCORE => \"_\".to_string(),\n \n@@ -433,71 +433,72 @@ declare_special_idents_and_keywords! {\n         (0,                          invalid,                \"\");\n         (super::SELF_KEYWORD_NAME,   self_,                  \"self\");\n         (super::STATIC_KEYWORD_NAME, statik,                 \"static\");\n+        (3,                          static_lifetime,        \"'static\");\n \n         // for matcher NTs\n-        (3,                          tt,                     \"tt\");\n-        (4,                          matchers,               \"matchers\");\n+        (4,                          tt,                     \"tt\");\n+        (5,                          matchers,               \"matchers\");\n \n         // outside of libsyntax\n-        (5,                          clownshoe_abi,          \"__rust_abi\");\n-        (6,                          opaque,                 \"<opaque>\");\n-        (7,                          unnamed_field,          \"<unnamed_field>\");\n-        (8,                          type_self,              \"Self\");\n+        (6,                          clownshoe_abi,          \"__rust_abi\");\n+        (7,                          opaque,                 \"<opaque>\");\n+        (8,                          unnamed_field,          \"<unnamed_field>\");\n+        (9,                          type_self,              \"Self\");\n     }\n \n     pub mod keywords {\n         // These ones are variants of the Keyword enum\n \n         'strict:\n-        (9,                          As,         \"as\");\n-        (10,                         Break,      \"break\");\n-        (11,                         Crate,      \"crate\");\n-        (12,                         Else,       \"else\");\n-        (13,                         Enum,       \"enum\");\n-        (14,                         Extern,     \"extern\");\n-        (15,                         False,      \"false\");\n-        (16,                         Fn,         \"fn\");\n-        (17,                         For,        \"for\");\n-        (18,                         If,         \"if\");\n-        (19,                         Impl,       \"impl\");\n-        (20,                         In,         \"in\");\n-        (21,                         Let,        \"let\");\n-        (22,                         Loop,       \"loop\");\n-        (23,                         Match,      \"match\");\n-        (24,                         Mod,        \"mod\");\n-        (25,                         Mut,        \"mut\");\n-        (26,                         Once,       \"once\");\n-        (27,                         Pub,        \"pub\");\n-        (28,                         Ref,        \"ref\");\n-        (29,                         Return,     \"return\");\n+        (10,                         As,         \"as\");\n+        (11,                         Break,      \"break\");\n+        (12,                         Crate,      \"crate\");\n+        (13,                         Else,       \"else\");\n+        (14,                         Enum,       \"enum\");\n+        (15,                         Extern,     \"extern\");\n+        (16,                         False,      \"false\");\n+        (17,                         Fn,         \"fn\");\n+        (18,                         For,        \"for\");\n+        (19,                         If,         \"if\");\n+        (20,                         Impl,       \"impl\");\n+        (21,                         In,         \"in\");\n+        (22,                         Let,        \"let\");\n+        (23,                         Loop,       \"loop\");\n+        (24,                         Match,      \"match\");\n+        (25,                         Mod,        \"mod\");\n+        (26,                         Mut,        \"mut\");\n+        (27,                         Once,       \"once\");\n+        (28,                         Pub,        \"pub\");\n+        (29,                         Ref,        \"ref\");\n+        (30,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME, Static,     \"static\");\n         (super::SELF_KEYWORD_NAME,   Self,       \"self\");\n-        (30,                         Struct,     \"struct\");\n-        (31,                         Super,      \"super\");\n-        (32,                         True,       \"true\");\n-        (33,                         Trait,      \"trait\");\n-        (34,                         Type,       \"type\");\n-        (35,                         Unsafe,     \"unsafe\");\n-        (36,                         Use,        \"use\");\n-        (37,                         Virtual,    \"virtual\");\n-        (38,                         While,      \"while\");\n-        (39,                         Continue,   \"continue\");\n-        (40,                         Proc,       \"proc\");\n-        (41,                         Box,        \"box\");\n+        (31,                         Struct,     \"struct\");\n+        (32,                         Super,      \"super\");\n+        (33,                         True,       \"true\");\n+        (34,                         Trait,      \"trait\");\n+        (35,                         Type,       \"type\");\n+        (36,                         Unsafe,     \"unsafe\");\n+        (37,                         Use,        \"use\");\n+        (38,                         Virtual,    \"virtual\");\n+        (39,                         While,      \"while\");\n+        (40,                         Continue,   \"continue\");\n+        (41,                         Proc,       \"proc\");\n+        (42,                         Box,        \"box\");\n \n         'reserved:\n-        (42,                         Alignof,    \"alignof\");\n-        (43,                         Be,         \"be\");\n-        (44,                         Const,      \"const\");\n-        (45,                         Offsetof,   \"offsetof\");\n-        (46,                         Priv,       \"priv\");\n-        (47,                         Pure,       \"pure\");\n-        (48,                         Sizeof,     \"sizeof\");\n-        (49,                         Typeof,     \"typeof\");\n-        (50,                         Unsized,    \"unsized\");\n-        (51,                         Yield,      \"yield\");\n-        (52,                         Do,         \"do\");\n+        (43,                         Alignof,    \"alignof\");\n+        (44,                         Be,         \"be\");\n+        (45,                         Const,      \"const\");\n+        (46,                         Offsetof,   \"offsetof\");\n+        (47,                         Priv,       \"priv\");\n+        (48,                         Pure,       \"pure\");\n+        (49,                         Sizeof,     \"sizeof\");\n+        (50,                         Typeof,     \"typeof\");\n+        (51,                         Unsized,    \"unsized\");\n+        (52,                         Yield,      \"yield\");\n+        (53,                         Do,         \"do\");\n     }\n }\n "}, {"sha": "77bc967b92d07070ad8c55fae92f9da18e482787", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use abi;\n-use ast::{P, StaticRegionTyParamBound, OtherRegionTyParamBound,\n-          TraitTyParamBound, UnboxedFnTyParamBound, Required, Provided};\n+use ast::{P, StaticRegionTyParamBound, OtherRegionTyParamBound};\n+use ast::{TraitTyParamBound, UnboxedFnTyParamBound, Required, Provided};\n use ast;\n use ast_util;\n use owned_slice::OwnedSlice;\n@@ -1325,7 +1325,6 @@ impl<'a> State<'a> {\n             }\n             ast::ExprForLoop(ref pat, ref iter, ref blk, opt_ident) => {\n                 for ident in opt_ident.iter() {\n-                    try!(word(&mut self.s, \"'\"));\n                     try!(self.print_ident(*ident));\n                     try!(self.word_space(\":\"));\n                 }\n@@ -1339,7 +1338,6 @@ impl<'a> State<'a> {\n             }\n             ast::ExprLoop(ref blk, opt_ident) => {\n                 for ident in opt_ident.iter() {\n-                    try!(word(&mut self.s, \"'\"));\n                     try!(self.print_ident(*ident));\n                     try!(self.word_space(\":\"));\n                 }\n@@ -1504,7 +1502,6 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \"break\"));\n                 try!(space(&mut self.s));\n                 for ident in opt_ident.iter() {\n-                    try!(word(&mut self.s, \"'\"));\n                     try!(self.print_ident(*ident));\n                     try!(space(&mut self.s));\n                 }\n@@ -1513,7 +1510,6 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \"continue\"));\n                 try!(space(&mut self.s));\n                 for ident in opt_ident.iter() {\n-                    try!(word(&mut self.s, \"'\"));\n                     try!(self.print_ident(*ident));\n                     try!(space(&mut self.s))\n                 }\n@@ -1943,7 +1939,7 @@ impl<'a> State<'a> {\n             match *region {\n                 Some(ref lt) => {\n                     let token = token::get_name(lt.name);\n-                    if token.get() != \"static\" {\n+                    if token.get() != \"'static\" {\n                         try!(self.nbsp());\n                         first = false;\n                         try!(self.print_lifetime(lt));\n@@ -1988,7 +1984,6 @@ impl<'a> State<'a> {\n \n     pub fn print_lifetime(&mut self,\n                           lifetime: &ast::Lifetime) -> IoResult<()> {\n-        try!(word(&mut self.s, \"'\"));\n         self.print_name(lifetime.name)\n     }\n "}, {"sha": "0e87dc97c2631f8e0c7ffb6d20a3be14e282f4aa", "filename": "src/test/compile-fail/hygienic-label-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Fcompile-fail%2Fhygienic-label-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Fcompile-fail%2Fhygienic-label-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-1.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -15,5 +15,5 @@ macro_rules! foo {\n }\n \n pub fn main() {\n-    'x: loop { foo!() } //~ ERROR use of undeclared label `x`\n+    'x: loop { foo!() } //~ ERROR use of undeclared label `'x`\n }"}, {"sha": "fe87e32459bb19eab3b36a75e6b15b8e27642faa", "filename": "src/test/compile-fail/hygienic-label-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Fcompile-fail%2Fhygienic-label-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Fcompile-fail%2Fhygienic-label-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-2.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -15,5 +15,5 @@ macro_rules! foo {\n }\n \n pub fn main() {\n-    foo!(break 'x); //~ ERROR use of undeclared label `x`\n+    foo!(break 'x); //~ ERROR use of undeclared label `'x`\n }"}, {"sha": "b5954ac99303b9d47b1b8be8a8e006a810c346be", "filename": "src/test/compile-fail/hygienic-label-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -16,6 +16,6 @@ macro_rules! foo {\n \n pub fn main() {\n     'x: for _ in range(0,1) {\n-        foo!() //~ ERROR use of undeclared label `x`\n+        foo!() //~ ERROR use of undeclared label `'x`\n     };\n }"}, {"sha": "67fa56b13067726de332a24298dc7e089dce3697", "filename": "src/test/compile-fail/hygienic-label-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -15,5 +15,5 @@ macro_rules! foo {\n }\n \n pub fn main() {\n-    foo!(break 'x); //~ ERROR use of undeclared label `x`\n+    foo!(break 'x); //~ ERROR use of undeclared label `'x`\n }"}, {"sha": "9f50ad3666025823bed9aa0c70c6117ab8973ae7", "filename": "src/test/compile-fail/regions-name-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo<'static> { //~ ERROR illegal lifetime parameter name: `static`\n+struct Foo<'static> { //~ ERROR illegal lifetime parameter name: `'static`\n     x: &'static int\n }\n "}, {"sha": "cfe51fe77589fd07c475917e5a530abe111bbac6", "filename": "src/test/run-pass/loop-label-shadowing.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Frun-pass%2Floop-label-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed473487323bb4e5a600a3318e0981981214210/src%2Ftest%2Frun-pass%2Floop-label-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-label-shadowing.rs?ref=2ed473487323bb4e5a600a3318e0981981214210", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #12512.\n+\n+fn main() {\n+    let mut foo = Vec::new();\n+    'foo: for i in [1, 2, 3].iter() {\n+        foo.push(i);\n+    }\n+}\n+"}]}