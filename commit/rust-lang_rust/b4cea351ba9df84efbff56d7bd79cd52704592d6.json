{"sha": "b4cea351ba9df84efbff56d7bd79cd52704592d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0Y2VhMzUxYmE5ZGY4NGVmYmZmNTZkN2JkNzljZDUyNzA0NTkyZDY=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-17T14:54:58Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-17T15:17:56Z"}, "message": "libcore: Add `IteratorUtil::fold`, `count`", "tree": {"sha": "83a7ba03f426f2b440b703c35443de6945a7364f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83a7ba03f426f2b440b703c35443de6945a7364f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4cea351ba9df84efbff56d7bd79cd52704592d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4cea351ba9df84efbff56d7bd79cd52704592d6", "html_url": "https://github.com/rust-lang/rust/commit/b4cea351ba9df84efbff56d7bd79cd52704592d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4cea351ba9df84efbff56d7bd79cd52704592d6/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02945f1cb1524f5791dd244e63a8d9bb2d61ac77", "url": "https://api.github.com/repos/rust-lang/rust/commits/02945f1cb1524f5791dd244e63a8d9bb2d61ac77", "html_url": "https://github.com/rust-lang/rust/commit/02945f1cb1524f5791dd244e63a8d9bb2d61ac77"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "58850190d8b1d3d1a918d6768338b6b2d7e399f5", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b4cea351ba9df84efbff56d7bd79cd52704592d6/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4cea351ba9df84efbff56d7bd79cd52704592d6/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=b4cea351ba9df84efbff56d7bd79cd52704592d6", "patch": "@@ -50,6 +50,8 @@ pub trait IteratorUtil<A> {\n     fn nth(&mut self, n: uint) -> A;\n     fn first(&mut self) -> A;\n     fn last(&mut self) -> A;\n+    fn fold<B>(&mut self, start: B, f: &fn(B, A) -> B) -> B;\n+    fn count(&mut self) -> uint;\n }\n \n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n@@ -184,6 +186,23 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         for self.advance |e| { elm = e; }\n         return elm;\n     }\n+\n+    /// Reduce an iterator to an accumulated value\n+    #[inline]\n+    fn fold<B>(&mut self, init: B, f: &fn(B, A) -> B) -> B {\n+        let mut accum = init;\n+        loop {\n+            match self.next() {\n+                Some(x) => { accum = f(accum, x); }\n+                None    => { break; }\n+            }\n+        }\n+        return accum;\n+    }\n+\n+    /// Count the number of an iterator elemenrs\n+    #[inline(always)]\n+    fn count(&mut self) -> uint { self.fold(0, |cnt, _x| cnt + 1) }\n }\n \n pub struct ChainIterator<T, U> {\n@@ -648,4 +667,12 @@ mod tests {\n         let v: &[uint] = &[];\n         v.iter().last();\n     }\n+\n+    #[test]\n+    fn test_iterator_count() {\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+        assert_eq!(v.slice(0, 4).iter().count(), 4);\n+        assert_eq!(v.slice(0, 10).iter().count(), 10);\n+        assert_eq!(v.slice(0, 0).iter().count(), 0);\n+    }\n }"}]}