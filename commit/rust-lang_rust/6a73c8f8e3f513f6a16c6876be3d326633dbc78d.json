{"sha": "6a73c8f8e3f513f6a16c6876be3d326633dbc78d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzNjOGY4ZTNmNTEzZjZhMTZjNjg3NmJlM2QzMjY2MzNkYmM3OGQ=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-08T10:35:26Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-08T10:35:26Z"}, "message": "--sysroot isn't necessary anymore for the outer cargo clippy call", "tree": {"sha": "4f6bde26286459e26db394fdca9bb180c89095a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f6bde26286459e26db394fdca9bb180c89095a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a73c8f8e3f513f6a16c6876be3d326633dbc78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a73c8f8e3f513f6a16c6876be3d326633dbc78d", "html_url": "https://github.com/rust-lang/rust/commit/6a73c8f8e3f513f6a16c6876be3d326633dbc78d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a73c8f8e3f513f6a16c6876be3d326633dbc78d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea1d432f663c966447ff9f2ae48f496c97dd8d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea1d432f663c966447ff9f2ae48f496c97dd8d0b", "html_url": "https://github.com/rust-lang/rust/commit/ea1d432f663c966447ff9f2ae48f496c97dd8d0b"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "dd7f912e4f6624fdfcabaa7bdfd51da7be3b8001", "filename": "src/main.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6a73c8f8e3f513f6a16c6876be3d326633dbc78d/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a73c8f8e3f513f6a16c6876be3d326633dbc78d/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=6a73c8f8e3f513f6a16c6876be3d326633dbc78d", "patch": "@@ -149,23 +149,6 @@ pub fn main() {\n \n     let dep_path = env::current_dir().expect(\"current dir is not readable\").join(\"target\").join(\"debug\").join(\"deps\");\n \n-    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    let sys_root = if let (Some(home), Some(toolchain)) = (home, toolchain) {\n-        format!(\"{}/toolchains/{}\", home, toolchain)\n-    } else {\n-        option_env!(\"SYSROOT\")\n-            .map(|s| s.to_owned())\n-            .or(Command::new(\"rustc\")\n-                .arg(\"--print\")\n-                .arg(\"sysroot\")\n-                .output()\n-                .ok()\n-                .and_then(|out| String::from_utf8(out.stdout).ok())\n-                .map(|s| s.trim().to_owned()))\n-            .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\")\n-    };\n-\n     if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n         // this arm is executed on the initial call to `cargo clippy`\n \n@@ -201,11 +184,11 @@ pub fn main() {\n             let args = std::env::args().skip(2);\n             if let Some(first) = target.kind.get(0) {\n                 if target.kind.len() > 1 || first.ends_with(\"lib\") {\n-                    if let Err(code) = process(std::iter::once(\"--lib\".to_owned()).chain(args), &dep_path, &sys_root) {\n+                    if let Err(code) = process(std::iter::once(\"--lib\".to_owned()).chain(args), &dep_path) {\n                         std::process::exit(code);\n                     }\n                 } else if [\"bin\", \"example\", \"test\", \"bench\"].contains(&&**first) {\n-                    if let Err(code) = process(vec![format!(\"--{}\", first), target.name].into_iter().chain(args), &dep_path, &sys_root) {\n+                    if let Err(code) = process(vec![format!(\"--{}\", first), target.name].into_iter().chain(args), &dep_path) {\n                         std::process::exit(code);\n                     }\n                 }\n@@ -216,6 +199,23 @@ pub fn main() {\n     } else {\n         // this arm is executed when cargo-clippy runs `cargo rustc` with the `RUSTC` env var set to itself\n \n+        let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+        let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+        let sys_root = if let (Some(home), Some(toolchain)) = (home, toolchain) {\n+            format!(\"{}/toolchains/{}\", home, toolchain)\n+        } else {\n+            option_env!(\"SYSROOT\")\n+                .map(|s| s.to_owned())\n+                .or(Command::new(\"rustc\")\n+                    .arg(\"--print\")\n+                    .arg(\"sysroot\")\n+                    .output()\n+                    .ok()\n+                    .and_then(|out| String::from_utf8(out.stdout).ok())\n+                    .map(|s| s.trim().to_owned()))\n+                .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\")\n+        };\n+\n         // this conditional check for the --sysroot flag is there so users can call `cargo-clippy` directly\n         // without having to pass --sysroot or anything\n         let mut args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n@@ -239,7 +239,7 @@ pub fn main() {\n     }\n }\n \n-fn process<P, I>(old_args: I, dep_path: P, sysroot: &str) -> Result<(), i32>\n+fn process<P, I>(old_args: I, dep_path: P) -> Result<(), i32>\n     where P: AsRef<Path>,\n           I: Iterator<Item = String>\n {\n@@ -256,8 +256,6 @@ fn process<P, I>(old_args: I, dep_path: P, sysroot: &str) -> Result<(), i32>\n     }\n     args.push(\"-L\".to_owned());\n     args.push(dep_path.as_ref().to_string_lossy().into_owned());\n-    args.push(String::from(\"--sysroot\"));\n-    args.push(sysroot.to_owned());\n     args.push(\"-Zno-trans\".to_owned());\n     args.push(\"--cfg\".to_owned());\n     args.push(r#\"feature=\"cargo-clippy\"\"#.to_owned());"}]}