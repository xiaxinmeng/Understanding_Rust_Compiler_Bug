{"sha": "e000d1db0ab047b8d2949de4ab221718905ce3b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMDBkMWRiMGFiMDQ3YjhkMjk0OWRlNGFiMjIxNzE4OTA1Y2UzYjE=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-04T00:28:44Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-04T00:29:07Z"}, "message": "add option::expect and mark option methods as pure", "tree": {"sha": "1df8b112cd2ab894cd031f5cb68259ae55f1b4fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1df8b112cd2ab894cd031f5cb68259ae55f1b4fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e000d1db0ab047b8d2949de4ab221718905ce3b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e000d1db0ab047b8d2949de4ab221718905ce3b1", "html_url": "https://github.com/rust-lang/rust/commit/e000d1db0ab047b8d2949de4ab221718905ce3b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e000d1db0ab047b8d2949de4ab221718905ce3b1/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af38333f75416e8599d6534ded7d73ae121f3207", "url": "https://api.github.com/repos/rust-lang/rust/commits/af38333f75416e8599d6534ded7d73ae121f3207", "html_url": "https://github.com/rust-lang/rust/commit/af38333f75416e8599d6534ded7d73ae121f3207"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "b97e5950f1999e5f54723822ad8b89bfc3ed5fa7", "filename": "src/libcore/option.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e000d1db0ab047b8d2949de4ab221718905ce3b1/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e000d1db0ab047b8d2949de4ab221718905ce3b1/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e000d1db0ab047b8d2949de4ab221718905ce3b1", "patch": "@@ -25,6 +25,17 @@ pure fn get<T: copy>(opt: option<T>) -> T {\n     alt opt { some(x) { ret x; } none { fail \"option none\"; } }\n }\n \n+pure fn expect<T: copy>(opt: option<T>, reason: str) -> T {\n+    #[doc = \"\n+    Gets the value out of an option, printing a specified message on failure\n+\n+    # Failure\n+\n+    Fails if the value equals `none`\n+    \"];\n+    alt opt { some(x) { x } none { fail reason; } }\n+}\n+\n pure fn map<T, U: copy>(opt: option<T>, f: fn(T) -> U) -> option<U> {\n     #[doc = \"Maps a `some` value from one type to another\"];\n \n@@ -94,18 +105,18 @@ impl extensions<T> for option<T> {\n     Update an optional value by optionally running its content through a\n     function that returns an option.\n     \"]\n-    fn chain<U>(f: fn(T) -> option<U>) -> option<U> { chain(self, f) }\n+    pure fn chain<U>(f: fn(T) -> option<U>) -> option<U> { chain(self, f) }\n     #[doc = \"Applies a function to the contained value or returns a default\"]\n-    fn map_default<U: copy>(def: U, f: fn(T) -> U) -> U\n+    pure fn map_default<U: copy>(def: U, f: fn(T) -> U) -> U\n         { map_default(self, def, f) }\n     #[doc = \"Performs an operation on the contained value or does nothing\"]\n-    fn iter(f: fn(T)) { iter(self, f) }\n+    pure fn iter(f: fn(T)) { iter(self, f) }\n     #[doc = \"Returns true if the option equals `none`\"]\n-    fn is_none() -> bool { is_none(self) }\n+    pure fn is_none() -> bool { is_none(self) }\n     #[doc = \"Returns true if the option contains some value\"]\n-    fn is_some() -> bool { is_some(self) }\n+    pure fn is_some() -> bool { is_some(self) }\n     #[doc = \"Maps a `some` value from one type to another\"]\n-    fn map<U:copy>(f: fn(T) -> U) -> option<U> { map(self, f) }\n+    pure fn map<U:copy>(f: fn(T) -> U) -> option<U> { map(self, f) }\n }\n \n impl extensions<T: copy> for option<T> {\n@@ -116,8 +127,16 @@ impl extensions<T: copy> for option<T> {\n \n     Fails if the value equals `none`\n     \"]\n-    fn get() -> T { get(self) }\n-    fn get_default(def: T) -> T { get_default(self, def) }\n+    pure fn get() -> T { get(self) }\n+    pure fn get_default(def: T) -> T { get_default(self, def) }\n+    #[doc = \"\n+    Gets the value out of an option, printing a specified message on failure\n+\n+    # Failure\n+\n+    Fails if the value equals `none`\n+    \"]\n+    pure fn expect<T: copy>(reason: str) -> T { expect(self, reason) }\n }\n \n #[test]"}]}