{"sha": "83b2152ce40ed4f1340ed541236609511fc7e89c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYjIxNTJjZTQwZWQ0ZjEzNDBlZDU0MTIzNjYwOTUxMWZjN2U4OWM=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-08-03T12:20:10Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:09Z"}, "message": "Reduced line length to pass tidy\n\nGeneralized FunctionCx\n\nAdded ValueTrait and first change\n\nGeneralize CondegenCx\n\nGeneralized the Builder struct defined in librustc_codegen_llvm/builder.rs", "tree": {"sha": "23739888dad07bb4804f075b93b2ac0f30a81548", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23739888dad07bb4804f075b93b2ac0f30a81548"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83b2152ce40ed4f1340ed541236609511fc7e89c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83b2152ce40ed4f1340ed541236609511fc7e89c", "html_url": "https://github.com/rust-lang/rust/commit/83b2152ce40ed4f1340ed541236609511fc7e89c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83b2152ce40ed4f1340ed541236609511fc7e89c/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c76fc3d804600bc4f19382576aa53269a1ec095b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c76fc3d804600bc4f19382576aa53269a1ec095b", "html_url": "https://github.com/rust-lang/rust/commit/c76fc3d804600bc4f19382576aa53269a1ec095b"}], "stats": {"total": 82, "additions": 44, "deletions": 38}, "files": [{"sha": "9e9467e3645440f837b536c817857fe8ed133a92", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -172,7 +172,7 @@ pub trait ArgTypeExt<'ll, 'tcx> {\n         &self,\n         bx: &Builder<'_, 'll, 'tcx>,\n         idx: &mut usize,\n-       dst: PlaceRef<'tcx, &'ll Value>,\n+        dst: PlaceRef<'tcx, &'ll Value>,\n     );\n }\n "}, {"sha": "927ad8aecd8440b50ab76e3ba574b0846988da47", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -26,12 +26,12 @@ use std::ptr;\n \n // All Builders must have an llfn associated with them\n #[must_use]\n-pub struct Builder<'a, 'll: 'a, 'tcx: 'll> {\n+pub struct Builder<'a, 'll: 'a, 'tcx: 'll, V: 'll = &'ll Value> {\n     pub llbuilder: &'ll mut llvm::Builder<'ll>,\n-    pub cx: &'a CodegenCx<'ll, 'tcx>,\n+    pub cx: &'a CodegenCx<'ll, 'tcx, V>,\n }\n \n-impl Drop for Builder<'a, 'll, 'tcx> {\n+impl<V> Drop for Builder<'_, '_, '_, V> {\n     fn drop(&mut self) {\n         unsafe {\n             llvm::LLVMDisposeBuilder(&mut *(self.llbuilder as *mut _));"}, {"sha": "4c405150532bd221b9b9475ee7dd2b6d48f9327d", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -45,7 +45,7 @@ use abi::Abi;\n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n /// `llvm::Context` so that several compilation units may be optimized in parallel.\n /// All other LLVM data structures in the `CodegenCx` are tied to that `llvm::Context`.\n-pub struct CodegenCx<'a, 'tcx: 'a> {\n+pub struct CodegenCx<'a, 'tcx: 'a, V = &'a Value> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub check_overflow: bool,\n     pub use_dll_storage_attrs: bool,\n@@ -57,12 +57,11 @@ pub struct CodegenCx<'a, 'tcx: 'a> {\n     pub codegen_unit: Arc<CodegenUnit<'tcx>>,\n \n     /// Cache instances of monomorphic and polymorphic items\n-    pub instances: RefCell<FxHashMap<Instance<'tcx>, &'a Value>>,\n+    pub instances: RefCell<FxHashMap<Instance<'tcx>, V>>,\n     /// Cache generated vtables\n-    pub vtables: RefCell<FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>),\n-                                   &'a Value>>,\n+    pub vtables: RefCell<FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), V>>,\n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, &'a Value>>,\n+    pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, V>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     /// Key is a Value holding a *T,\n@@ -72,20 +71,20 @@ pub struct CodegenCx<'a, 'tcx: 'a> {\n     /// when we ptrcast, and we have to ptrcast during codegen\n     /// of a [T] const because we form a slice, a (*T,usize) pair, not\n     /// a pointer to an LLVM array type. Similar for trait objects.\n-    pub const_unsized: RefCell<FxHashMap<&'a Value, &'a Value>>,\n+    pub const_unsized: RefCell<FxHashMap<V, V>>,\n \n     /// Cache of emitted const globals (value -> global)\n-    pub const_globals: RefCell<FxHashMap<&'a Value, &'a Value>>,\n+    pub const_globals: RefCell<FxHashMap<V, V>>,\n \n     /// List of globals for static variables which need to be passed to the\n     /// LLVM function ReplaceAllUsesWith (RAUW) when codegen is complete.\n     /// (We have to make sure we don't invalidate any Values referring\n     /// to constants.)\n-    pub statics_to_rauw: RefCell<Vec<(&'a Value, &'a Value)>>,\n+    pub statics_to_rauw: RefCell<Vec<(V, V)>>,\n \n     /// Statics that will be placed in the llvm.used variable\n     /// See http://llvm.org/docs/LangRef.html#the-llvm-used-global-variable for details\n-    pub used_statics: RefCell<Vec<&'a Value>>,\n+    pub used_statics: RefCell<Vec<V>>,\n \n     pub lltypes: RefCell<FxHashMap<(Ty<'tcx>, Option<VariantIdx>), &'a Type>>,\n     pub scalar_lltypes: RefCell<FxHashMap<Ty<'tcx>, &'a Type>>,\n@@ -94,11 +93,11 @@ pub struct CodegenCx<'a, 'tcx: 'a> {\n \n     pub dbg_cx: Option<debuginfo::CrateDebugContext<'a, 'tcx>>,\n \n-    eh_personality: Cell<Option<&'a Value>>,\n-    eh_unwind_resume: Cell<Option<&'a Value>>,\n-    pub rust_try_fn: Cell<Option<&'a Value>>,\n+    eh_personality: Cell<Option<V>>,\n+    eh_unwind_resume: Cell<Option<V>>,\n+    pub rust_try_fn: Cell<Option<V>>,\n \n-    intrinsics: RefCell<FxHashMap<&'static str, &'a Value>>,\n+    intrinsics: RefCell<FxHashMap<&'static str, V>>,\n \n     /// A counter that is used for generating local symbol names\n     local_gen_sym_counter: Cell<usize>,"}, {"sha": "14f48a4ab63dcd31c23dbe493371e1888c4ef5cb", "filename": "src/librustc_codegen_llvm/mir/analyze.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -21,8 +21,9 @@ use rustc::ty;\n use rustc::ty::layout::LayoutOf;\n use type_of::LayoutLlvmExt;\n use super::FunctionCx;\n+use value::Value;\n \n-pub fn non_ssa_locals(fx: &FunctionCx<'a, 'll, 'tcx>) -> BitSet<mir::Local> {\n+pub fn non_ssa_locals(fx: &FunctionCx<'a, 'll, 'tcx, &'ll Value>) -> BitSet<mir::Local> {\n     let mir = fx.mir;\n     let mut analyzer = LocalAnalyzer::new(fx);\n \n@@ -51,17 +52,17 @@ pub fn non_ssa_locals(fx: &FunctionCx<'a, 'll, 'tcx>) -> BitSet<mir::Local> {\n     analyzer.non_ssa_locals\n }\n \n-struct LocalAnalyzer<'mir, 'a: 'mir, 'll: 'a, 'tcx: 'll> {\n-    fx: &'mir FunctionCx<'a, 'll, 'tcx>,\n+struct LocalAnalyzer<'mir, 'a: 'mir, 'll: 'a, 'tcx: 'll, V: 'll> {\n+    fx: &'mir FunctionCx<'a, 'll, 'tcx, V>,\n     dominators: Dominators<mir::BasicBlock>,\n     non_ssa_locals: BitSet<mir::Local>,\n     // The location of the first visited direct assignment to each\n     // local, or an invalid location (out of bounds `block` index).\n     first_assignment: IndexVec<mir::Local, Location>\n }\n \n-impl LocalAnalyzer<'mir, 'a, 'll, 'tcx> {\n-    fn new(fx: &'mir FunctionCx<'a, 'll, 'tcx>) -> Self {\n+impl LocalAnalyzer<'mir, 'a, 'll, 'tcx, &'ll Value> {\n+    fn new(fx: &'mir FunctionCx<'a, 'll, 'tcx, &'ll Value>) -> Self {\n         let invalid_location =\n             mir::BasicBlock::new(fx.mir.basic_blocks().len()).start_location();\n         let mut analyzer = LocalAnalyzer {\n@@ -102,7 +103,7 @@ impl LocalAnalyzer<'mir, 'a, 'll, 'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'll, 'tcx> {\n+impl Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'll, 'tcx, &'ll Value> {\n     fn visit_assign(&mut self,\n                     block: mir::BasicBlock,\n                     place: &mir::Place<'tcx>,"}, {"sha": "aade88648641498bf4c8f164d45ca48c13fbf3c3", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -34,7 +34,7 @@ use super::place::PlaceRef;\n use super::operand::OperandRef;\n use super::operand::OperandValue::{Pair, Ref, Immediate};\n \n-impl FunctionCx<'a, 'll, 'tcx> {\n+impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n     pub fn codegen_block(&mut self, bb: mir::BasicBlock) {\n         let mut bx = self.build_block(bb);\n         let data = &self.mir[bb];"}, {"sha": "2c241d938e5436db54cba5b21cb86ee4788c0f65", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -139,7 +139,7 @@ pub fn codegen_static_initializer(\n     Ok((const_alloc_to_llvm(cx, alloc), alloc))\n }\n \n-impl FunctionCx<'a, 'll, 'tcx> {\n+impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n     fn fully_evaluate(\n         &mut self,\n         bx: &Builder<'a, 'll, 'tcx>,"}, {"sha": "7eda7ea0b7d7476cc87fc6f63588ac0bd64ec710", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -44,14 +44,14 @@ use rustc::mir::traversal;\n use self::operand::{OperandRef, OperandValue};\n \n /// Master context for codegenning from MIR.\n-pub struct FunctionCx<'a, 'll: 'a, 'tcx: 'll> {\n+pub struct FunctionCx<'a, 'll: 'a, 'tcx: 'll, V> {\n     instance: Instance<'tcx>,\n \n     mir: &'a mir::Mir<'tcx>,\n \n     debug_context: FunctionDebugContext<'ll>,\n \n-    llfn: &'ll Value,\n+    llfn: V,\n \n     cx: &'a CodegenCx<'ll, 'tcx>,\n \n@@ -64,7 +64,7 @@ pub struct FunctionCx<'a, 'll: 'a, 'tcx: 'll> {\n     /// don't really care about it very much. Anyway, this value\n     /// contains an alloca into which the personality is stored and\n     /// then later loaded when generating the DIVERGE_BLOCK.\n-    personality_slot: Option<PlaceRef<'tcx, &'ll Value>>,\n+    personality_slot: Option<PlaceRef<'tcx, V>>,\n \n     /// A `Block` for each MIR `BasicBlock`\n     blocks: IndexVec<mir::BasicBlock, &'ll BasicBlock>,\n@@ -73,7 +73,8 @@ pub struct FunctionCx<'a, 'll: 'a, 'tcx: 'll> {\n     cleanup_kinds: IndexVec<mir::BasicBlock, analyze::CleanupKind>,\n \n     /// When targeting MSVC, this stores the cleanup info for each funclet\n-    /// BB. This is initialized as we compute the funclets' head block in RPO.\n+    /// BB. Thisrustup component add rustfmt-preview is initialized as we compute the funclets'\n+    /// head block in RPO.\n     funclets: &'a IndexVec<mir::BasicBlock, Option<Funclet<'ll>>>,\n \n     /// This stores the landing-pad block for a given BB, computed lazily on GNU\n@@ -98,7 +99,7 @@ pub struct FunctionCx<'a, 'll: 'a, 'tcx: 'll> {\n     ///\n     /// Avoiding allocs can also be important for certain intrinsics,\n     /// notably `expect`.\n-    locals: IndexVec<mir::Local, LocalRef<'tcx, &'ll Value>>,\n+    locals: IndexVec<mir::Local, LocalRef<'tcx, V>>,\n \n     /// Debug information for MIR scopes.\n     scopes: IndexVec<mir::SourceScope, debuginfo::MirDebugScope<'ll>>,\n@@ -107,7 +108,7 @@ pub struct FunctionCx<'a, 'll: 'a, 'tcx: 'll> {\n     param_substs: &'tcx Substs<'tcx>,\n }\n \n-impl FunctionCx<'a, 'll, 'tcx> {\n+impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n     pub fn monomorphize<T>(&self, value: &T) -> T\n         where T: TypeFoldable<'tcx>\n     {\n@@ -437,7 +438,7 @@ fn create_funclets(\n /// indirect.\n fn arg_local_refs(\n     bx: &Builder<'a, 'll, 'tcx>,\n-    fx: &FunctionCx<'a, 'll, 'tcx>,\n+    fx: &FunctionCx<'a, 'll, 'tcx, &'ll Value>,\n     scopes: &IndexVec<mir::SourceScope, debuginfo::MirDebugScope<'ll>>,\n     memory_locals: &BitSet<mir::Local>,\n ) -> Vec<LocalRef<'tcx, &'ll Value>> {"}, {"sha": "32609b06952beacf40a5093b0023bcf9be52e97a", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n use base;\n use common::{CodegenCx, C_undef, C_usize};\n use builder::{Builder, MemFlags};\n-use value::Value;\n+use value::{Value, ValueTrait};\n use type_of::LayoutLlvmExt;\n use type_::Type;\n use glue;\n@@ -60,7 +60,7 @@ pub struct OperandRef<'tcx, V> {\n     pub layout: TyLayout<'tcx>,\n }\n \n-impl fmt::Debug for OperandRef<'tcx, &'ll Value> {\n+impl<Value: ?Sized> fmt::Debug for OperandRef<'tcx, &'ll Value> where Value: ValueTrait {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"OperandRef({:?} @ {:?})\", self.val, self.layout)\n     }\n@@ -344,7 +344,7 @@ impl OperandValue<&'ll Value> {\n     }\n }\n \n-impl FunctionCx<'a, 'll, 'tcx> {\n+impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n     fn maybe_codegen_consume_direct(&mut self,\n                                   bx: &Builder<'a, 'll, 'tcx>,\n                                   place: &mir::Place<'tcx>)"}, {"sha": "4dc9eeb5a9ff789c443e5d845525b88eb5c4b5f0", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -430,7 +430,7 @@ impl PlaceRef<'tcx, &'ll Value> {\n     }\n }\n \n-impl FunctionCx<'a, 'll, 'tcx> {\n+impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n     pub fn codegen_place(&mut self,\n                         bx: &Builder<'a, 'll, 'tcx>,\n                         place: &mir::Place<'tcx>)"}, {"sha": "af166fe501e7f38dafc55135090cbc57227212fa", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -32,7 +32,7 @@ use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n \n-impl FunctionCx<'a, 'll, 'tcx> {\n+impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n     pub fn codegen_rvalue(&mut self,\n                         bx: Builder<'a, 'll, 'tcx>,\n                         dest: PlaceRef<'tcx, &'ll Value>,"}, {"sha": "8fa5a8cc5510302fc44f95bb7d370b291f5c2bed", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -16,8 +16,9 @@ use builder::Builder;\n use super::FunctionCx;\n use super::LocalRef;\n use super::OperandValue;\n+use value::Value;\n \n-impl FunctionCx<'a, 'll, 'tcx> {\n+impl FunctionCx<'a, 'll, 'tcx, &'ll Value> {\n     pub fn codegen_statement(&mut self,\n                            bx: Builder<'a, 'll, 'tcx>,\n                            statement: &mir::Statement<'tcx>)"}, {"sha": "357cc8fbf80e8439f7b58b9b84761be42c303148", "filename": "src/librustc_codegen_llvm/value.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b2152ce40ed4f1340ed541236609511fc7e89c/src%2Flibrustc_codegen_llvm%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fvalue.rs?ref=83b2152ce40ed4f1340ed541236609511fc7e89c", "patch": "@@ -15,12 +15,16 @@ use llvm;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n \n+pub trait ValueTrait: fmt::Debug {}\n+\n impl PartialEq for Value {\n     fn eq(&self, other: &Self) -> bool {\n         self as *const _ == other as *const _\n     }\n }\n \n+impl ValueTrait for Value {}\n+\n impl Eq for Value {}\n \n impl Hash for Value {"}]}