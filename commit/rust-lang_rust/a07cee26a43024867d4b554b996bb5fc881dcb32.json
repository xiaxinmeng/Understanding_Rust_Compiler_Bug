{"sha": "a07cee26a43024867d4b554b996bb5fc881dcb32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwN2NlZTI2YTQzMDI0ODY3ZDRiNTU0Yjk5NmJiNWZjODgxZGNiMzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T04:38:15Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:29Z"}, "message": "librustc: De-`@mut` `FunctionContext::alloca_insert_pt`", "tree": {"sha": "5886f7be319152d96604a516287c52af824fdb5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5886f7be319152d96604a516287c52af824fdb5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a07cee26a43024867d4b554b996bb5fc881dcb32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a07cee26a43024867d4b554b996bb5fc881dcb32", "html_url": "https://github.com/rust-lang/rust/commit/a07cee26a43024867d4b554b996bb5fc881dcb32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a07cee26a43024867d4b554b996bb5fc881dcb32/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "html_url": "https://github.com/rust-lang/rust/commit/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "a69d6b9440591b939051fe339824fb8c55ba3351", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a07cee26a43024867d4b554b996bb5fc881dcb32/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07cee26a43024867d4b554b996bb5fc881dcb32/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a07cee26a43024867d4b554b996bb5fc881dcb32", "patch": "@@ -1594,7 +1594,7 @@ pub fn alloca_maybe_zeroed(cx: @Block, ty: Type, name: &str, zero: bool) -> Valu\n     let p = Alloca(cx, ty, name);\n     if zero {\n         let b = cx.fcx.ccx.builder();\n-        b.position_before(cx.fcx.alloca_insert_pt.unwrap());\n+        b.position_before(cx.fcx.alloca_insert_pt.get().unwrap());\n         memzero(&b, p, ty);\n     }\n     p\n@@ -1687,7 +1687,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n           },\n           llretptr: Cell::new(None),\n           entry_bcx: None,\n-          alloca_insert_pt: None,\n+          alloca_insert_pt: Cell::new(None),\n           llreturn: None,\n           llself: None,\n           personality: None,\n@@ -1711,7 +1711,8 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n         Load(entry_bcx, C_null(Type::i8p()));\n \n         fcx.entry_bcx = Some(entry_bcx);\n-        fcx.alloca_insert_pt = Some(llvm::LLVMGetFirstInstruction(entry_bcx.llbb));\n+        fcx.alloca_insert_pt.set(Some(\n+                llvm::LLVMGetFirstInstruction(entry_bcx.llbb)));\n     }\n \n     if !ty::type_is_voidish(ccx.tcx, substd_output_type) {"}, {"sha": "faf210c1a9ea0c373b746697055406051c2e23a4", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a07cee26a43024867d4b554b996bb5fc881dcb32/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07cee26a43024867d4b554b996bb5fc881dcb32/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=a07cee26a43024867d4b554b996bb5fc881dcb32", "patch": "@@ -314,7 +314,7 @@ pub fn Alloca(cx: &Block, Ty: Type, name: &str) -> ValueRef {\n     unsafe {\n         if cx.unreachable.get() { return llvm::LLVMGetUndef(Ty.ptr_to().to_ref()); }\n         let b = cx.fcx.ccx.builder();\n-        b.position_before(cx.fcx.alloca_insert_pt.unwrap());\n+        b.position_before(cx.fcx.alloca_insert_pt.get().unwrap());\n         b.alloca(Ty, name)\n     }\n }\n@@ -323,7 +323,7 @@ pub fn ArrayAlloca(cx: &Block, Ty: Type, Val: ValueRef) -> ValueRef {\n     unsafe {\n         if cx.unreachable.get() { return llvm::LLVMGetUndef(Ty.ptr_to().to_ref()); }\n         let b = cx.fcx.ccx.builder();\n-        b.position_before(cx.fcx.alloca_insert_pt.unwrap());\n+        b.position_before(cx.fcx.alloca_insert_pt.get().unwrap());\n         b.array_alloca(Ty, Val)\n     }\n }"}, {"sha": "79b7545b9bc46e535c47163bcc4f3311311b88db", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a07cee26a43024867d4b554b996bb5fc881dcb32/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07cee26a43024867d4b554b996bb5fc881dcb32/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=a07cee26a43024867d4b554b996bb5fc881dcb32", "patch": "@@ -221,7 +221,7 @@ pub struct FunctionContext {\n     // the function, due to LLVM's quirks.\n     // A marker for the place where we want to insert the function's static\n     // allocas, so that LLVM will coalesce them into a single alloca call.\n-    alloca_insert_pt: Option<ValueRef>,\n+    alloca_insert_pt: Cell<Option<ValueRef>>,\n     llreturn: Option<BasicBlockRef>,\n     // The 'self' value currently in use in this function, if there\n     // is one.\n@@ -291,7 +291,9 @@ impl FunctionContext {\n \n     pub fn cleanup(&mut self) {\n         unsafe {\n-            llvm::LLVMInstructionEraseFromParent(self.alloca_insert_pt.unwrap());\n+            llvm::LLVMInstructionEraseFromParent(self.alloca_insert_pt\n+                                                     .get()\n+                                                     .unwrap());\n         }\n         // Remove the cycle between fcx and bcx, so memory can be freed\n         self.entry_bcx = None;"}]}