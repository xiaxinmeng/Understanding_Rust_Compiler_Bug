{"sha": "691f022767aa5dec36635ab17bb767d5a80407db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MWYwMjI3NjdhYTVkZWMzNjYzNWFiMTdiYjc2N2Q1YTgwNDA3ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-13T01:44:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-13T01:44:36Z"}, "message": "Auto merge of #46613 - petrochenkov:absext, r=nikomatsakis\n\nResolve absolute paths as extern under a feature flag\n\ncc https://github.com/rust-lang/rust/issues/44660\nr? @nikomatsakis", "tree": {"sha": "e2d50547e9e9721d2b6d0ce401537206316f9590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2d50547e9e9721d2b6d0ce401537206316f9590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/691f022767aa5dec36635ab17bb767d5a80407db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/691f022767aa5dec36635ab17bb767d5a80407db", "html_url": "https://github.com/rust-lang/rust/commit/691f022767aa5dec36635ab17bb767d5a80407db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/691f022767aa5dec36635ab17bb767d5a80407db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442b7bd10ab1955832fac39e47671327747033c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/442b7bd10ab1955832fac39e47671327747033c6", "html_url": "https://github.com/rust-lang/rust/commit/442b7bd10ab1955832fac39e47671327747033c6"}, {"sha": "b07e26e36e370b95c5fb3db418370d45a064d9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/b07e26e36e370b95c5fb3db418370d45a064d9ea", "html_url": "https://github.com/rust-lang/rust/commit/b07e26e36e370b95c5fb3db418370d45a064d9ea"}], "stats": {"total": 321, "additions": 264, "deletions": 57}, "files": [{"sha": "914fb0670b6058d1208aa5882e35b804758242ab", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -357,6 +357,7 @@ impl CrateStore for DummyCrateStore {\n pub trait CrateLoader {\n     fn process_item(&mut self, item: &ast::Item, defs: &Definitions);\n     fn postprocess(&mut self, krate: &ast::Crate);\n+    fn resolve_crate_from_path(&mut self, name: Symbol, span: Span) -> CrateNum;\n }\n \n // This method is used when generating the command line to pass through to"}, {"sha": "58453066cf34b06e67fe42dd222b0b46eb1a0c4c", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 30, "deletions": 54, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -71,14 +71,6 @@ fn dump_crates(cstore: &CStore) {\n     });\n }\n \n-#[derive(Debug)]\n-struct ExternCrateInfo {\n-    ident: Symbol,\n-    name: Symbol,\n-    id: ast::NodeId,\n-    dep_kind: DepKind,\n-}\n-\n // Extra info about a crate loaded for plugins or exported macros.\n struct ExtensionCrate {\n     metadata: PMDSource,\n@@ -117,34 +109,6 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn extract_crate_info(&self, i: &ast::Item) -> Option<ExternCrateInfo> {\n-        match i.node {\n-            ast::ItemKind::ExternCrate(ref path_opt) => {\n-                debug!(\"resolving extern crate stmt. ident: {} path_opt: {:?}\",\n-                       i.ident, path_opt);\n-                let name = match *path_opt {\n-                    Some(name) => {\n-                        validate_crate_name(Some(self.sess), &name.as_str(),\n-                                            Some(i.span));\n-                        name\n-                    }\n-                    None => i.ident.name,\n-                };\n-                Some(ExternCrateInfo {\n-                    ident: i.ident.name,\n-                    name,\n-                    id: i.id,\n-                    dep_kind: if attr::contains_name(&i.attrs, \"no_link\") {\n-                        DepKind::UnexportedMacrosOnly\n-                    } else {\n-                        DepKind::Explicit\n-                    },\n-                })\n-            }\n-            _ => None\n-        }\n-    }\n-\n     fn existing_match(&self, name: Symbol, hash: Option<&Svh>, kind: PathKind)\n                       -> Option<CrateNum> {\n         let mut ret = None;\n@@ -478,17 +442,17 @@ impl<'a> CrateLoader<'a> {\n         })).collect()\n     }\n \n-    fn read_extension_crate(&mut self, span: Span, info: &ExternCrateInfo) -> ExtensionCrate {\n-        info!(\"read extension crate {} `extern crate {} as {}` dep_kind={:?}\",\n-              info.id, info.name, info.ident, info.dep_kind);\n+    fn read_extension_crate(&mut self, span: Span, orig_name: Symbol, rename: Symbol)\n+                            -> ExtensionCrate {\n+        info!(\"read extension crate `extern crate {} as {}`\", orig_name, rename);\n         let target_triple = &self.sess.opts.target_triple[..];\n         let is_cross = target_triple != config::host_triple();\n         let mut target_only = false;\n         let mut locate_ctxt = locator::Context {\n             sess: self.sess,\n             span,\n-            ident: info.ident,\n-            crate_name: info.name,\n+            ident: orig_name,\n+            crate_name: rename,\n             hash: None,\n             filesearch: self.sess.host_filesearch(PathKind::Crate),\n             target: &self.sess.host,\n@@ -625,12 +589,8 @@ impl<'a> CrateLoader<'a> {\n                                  span: Span,\n                                  name: &str)\n                                  -> Option<(PathBuf, CrateDisambiguator, DefIndex)> {\n-        let ekrate = self.read_extension_crate(span, &ExternCrateInfo {\n-             name: Symbol::intern(name),\n-             ident: Symbol::intern(name),\n-             id: ast::DUMMY_NODE_ID,\n-             dep_kind: DepKind::UnexportedMacrosOnly,\n-        });\n+        let name = Symbol::intern(name);\n+        let ekrate = self.read_extension_crate(span, name, name);\n \n         if ekrate.target_only {\n             // Need to abort before syntax expansion.\n@@ -1098,21 +1058,37 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n \n     fn process_item(&mut self, item: &ast::Item, definitions: &Definitions) {\n         match item.node {\n-            ast::ItemKind::ExternCrate(_) => {\n-                let info = self.extract_crate_info(item).unwrap();\n+            ast::ItemKind::ExternCrate(rename) => {\n+                debug!(\"resolving extern crate stmt. ident: {} rename: {:?}\", item.ident, rename);\n+                let rename = match rename {\n+                    Some(rename) => {\n+                        validate_crate_name(Some(self.sess), &rename.as_str(), Some(item.span));\n+                        rename\n+                    }\n+                    None => item.ident.name,\n+                };\n+                let dep_kind = if attr::contains_name(&item.attrs, \"no_link\") {\n+                    DepKind::UnexportedMacrosOnly\n+                } else {\n+                    DepKind::Explicit\n+                };\n+\n                 let (cnum, ..) = self.resolve_crate(\n-                    &None, info.ident, info.name, None, item.span, PathKind::Crate, info.dep_kind,\n+                    &None, item.ident.name, rename, None, item.span, PathKind::Crate, dep_kind,\n                 );\n \n                 let def_id = definitions.opt_local_def_id(item.id).unwrap();\n-                let len = definitions.def_path(def_id.index).data.len();\n+                let path_len = definitions.def_path(def_id.index).data.len();\n \n-                let extern_crate =\n-                    ExternCrate { def_id: def_id, span: item.span, direct: true, path_len: len };\n+                let extern_crate = ExternCrate { def_id, span: item.span, direct: true, path_len };\n                 self.update_extern_crate(cnum, extern_crate, &mut FxHashSet());\n-                self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n+                self.cstore.add_extern_mod_stmt_cnum(item.id, cnum);\n             }\n             _ => {}\n         }\n     }\n+\n+    fn resolve_crate_from_path(&mut self, name: Symbol, span: Span) -> CrateNum {\n+        self.resolve_crate(&None, name, name, None, span, PathKind::Crate, DepKind::Explicit).0\n+    }\n }"}, {"sha": "ca822faeeac01378c2d1db70cda033f19217fed9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -58,6 +58,7 @@ use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n use syntax::feature_gate::{feature_err, emit_feature_err, GateIssue};\n+use syntax::parse::token;\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -2959,6 +2960,16 @@ impl<'a> Resolver<'a> {\n                     // `$crate::a::b`\n                     module = Some(self.resolve_crate_root(ident.node.ctxt));\n                     continue\n+                } else if i == 1 && self.session.features.borrow().extern_absolute_paths &&\n+                                    path[0].node.name == keywords::CrateRoot.name() &&\n+                                    !token::Ident(ident.node).is_path_segment_keyword() {\n+                    // `::extern_crate::a::b`\n+                    let crate_id = self.crate_loader.resolve_crate_from_path(name, ident.span);\n+                    let crate_root =\n+                        self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                    self.populate_module_if_necessary(crate_root);\n+                    module = Some(crate_root);\n+                    continue\n                 }\n             }\n "}, {"sha": "2dbcbb364d86ce8888be8762dbfa3556ec266d5f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -12,14 +12,14 @@ use self::ImportDirectiveSubclass::*;\n \n use {AmbiguityError, Module, PerNS};\n use Namespace::{self, TypeNS, MacroNS};\n-use {NameBinding, NameBindingKind, PathResult, PrivacyError};\n+use {NameBinding, NameBindingKind, ToNameBinding, PathResult, PrivacyError};\n use Resolver;\n use {names_to_string, module_to_string};\n use {resolve_error, ResolutionError};\n \n use rustc::ty;\n use rustc::lint::builtin::PUB_USE_OF_PRIVATE_EXTERN_CRATE;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -602,8 +602,60 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     // If appropriate, returns an error to report.\n     fn finalize_import(&mut self, directive: &'b ImportDirective<'b>) -> Option<(Span, String)> {\n         self.current_module = directive.parent;\n-\n         let ImportDirective { ref module_path, span, .. } = *directive;\n+\n+        // Extern crate mode for absolute paths needs some\n+        // special support for single-segment imports.\n+        let extern_absolute_paths = self.session.features.borrow().extern_absolute_paths;\n+        if module_path.len() == 1 && module_path[0].node.name == keywords::CrateRoot.name() {\n+            match directive.subclass {\n+                GlobImport { .. } if extern_absolute_paths => {\n+                    return Some((directive.span,\n+                                 \"cannot glob-import all possible crates\".to_string()));\n+                }\n+                SingleImport { source, target, .. } => {\n+                    let crate_root = if source.name == keywords::Crate.name() {\n+                        if target.name == keywords::Crate.name() {\n+                            return Some((directive.span,\n+                                         \"crate root imports need to be explicitly named: \\\n+                                          `use crate as name;`\".to_string()));\n+                        } else {\n+                            Some(self.resolve_crate_root(source.ctxt.modern()))\n+                        }\n+                    } else if extern_absolute_paths &&\n+                              !token::Ident(source).is_path_segment_keyword() {\n+                        let crate_id =\n+                            self.crate_loader.resolve_crate_from_path(source.name, directive.span);\n+                        let crate_root =\n+                            self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                        self.populate_module_if_necessary(crate_root);\n+                        Some(crate_root)\n+                    } else {\n+                        None\n+                    };\n+\n+                    if let Some(crate_root) = crate_root {\n+                        let binding = (crate_root, ty::Visibility::Public, directive.span,\n+                                       directive.expansion).to_name_binding(self.arenas);\n+                        let binding = self.arenas.alloc_name_binding(NameBinding {\n+                            kind: NameBindingKind::Import {\n+                                binding,\n+                                directive,\n+                                used: Cell::new(false),\n+                                legacy_self_import: false,\n+                            },\n+                            vis: directive.vis.get(),\n+                            span: directive.span,\n+                            expansion: directive.expansion,\n+                        });\n+                        let _ = self.try_define(directive.parent, target, TypeNS, binding);\n+                        return None;\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+\n         let module_result = self.resolve_path(&module_path, None, true, span);\n         let module = match module_result {\n             PathResult::Module(module) => module,"}, {"sha": "c7bfb121f801efd59cc2705a970d1fe30137c621", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -430,6 +430,9 @@ declare_features! (\n \n     // generic associated types (RFC 1598)\n     (active, generic_associated_types, \"1.23.0\", Some(44265)),\n+\n+    // Resolve absolute paths as paths from other crates\n+    (active, extern_absolute_paths, \"1.24.0\", Some(44660)),\n );\n \n declare_features! ("}, {"sha": "c3da4a518720d4e8ccdc8efcfe7e4b254e6d93da", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/auxiliary/xcrate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fauxiliary%2Fxcrate.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Debug)]\n+pub struct S;\n+\n+#[derive(Debug)]\n+pub struct Z;"}, {"sha": "14d5d9caa317f5ed95a9ff6f5dc6144488d89e81", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-1.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_absolute_paths)]\n+\n+use xcrate::S; //~ ERROR can't find crate for `xcrate`\n+\n+fn main() {}"}, {"sha": "defd103f9e457d55d901594a566fdd1cfb4be4ad", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_absolute_paths)]\n+\n+fn main() {\n+    let s = ::xcrate::S; //~ ERROR can't find crate for `xcrate`\n+}"}, {"sha": "be1708e2b57489e333a8d68f80c517e0b74a8cb0", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/non-existent-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fnon-existent-3.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_absolute_paths)]\n+\n+use ycrate; //~ ERROR can't find crate for `ycrate`\n+\n+fn main() {}"}, {"sha": "e44465750d1ddc024999c0455e97a8c6d6a93af6", "filename": "src/test/compile-fail/rfc-2126-extern-absolute-paths/single-segment.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2126-extern-absolute-paths%2Fsingle-segment.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:xcrate.rs\n+\n+#![feature(crate_in_paths)]\n+#![feature(extern_absolute_paths)]\n+\n+use crate; //~ ERROR unresolved import `crate`\n+           //~^ NOTE crate root imports need to be explicitly named: `use crate as name;`\n+use *; //~ ERROR unresolved import `*`\n+       //~^ NOTE cannot glob-import all possible crates\n+\n+fn main() {\n+    let s = ::xcrate; //~ ERROR expected value, found module `xcrate`\n+                      //~^ NOTE not a value\n+}"}, {"sha": "7003541e86cd331bd89cca4dc8a8cf4b63029261", "filename": "src/test/run-pass/rfc-2126-crate-paths/crate-path-absolute.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-absolute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-absolute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-absolute.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -11,10 +11,12 @@\n #![feature(crate_in_paths)]\n \n use crate::m::f;\n+use crate as root;\n \n mod m {\n     pub fn f() -> u8 { 1 }\n     pub fn g() -> u8 { 2 }\n+    pub fn h() -> u8 { 3 }\n \n     // OK, visibilities are implicitly absolute like imports\n     pub(in crate::m) struct S;\n@@ -23,14 +25,17 @@ mod m {\n mod n\n {\n     use crate::m::f;\n+    use crate as root;\n     pub fn check() {\n         assert_eq!(f(), 1);\n         assert_eq!(::crate::m::g(), 2);\n+        assert_eq!(root::m::h(), 3);\n     }\n }\n \n fn main() {\n     assert_eq!(f(), 1);\n     assert_eq!(::crate::m::g(), 2);\n+    assert_eq!(root::m::h(), 3);\n     n::check();\n }"}, {"sha": "c3da4a518720d4e8ccdc8efcfe7e4b254e6d93da", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/auxiliary/xcrate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fauxiliary%2Fxcrate.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Debug)]\n+pub struct S;\n+\n+#[derive(Debug)]\n+pub struct Z;"}, {"sha": "0fa125a3e503e3d600545c39301b0cdcfb1b7e43", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/basic.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Fbasic.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:xcrate.rs\n+\n+#![feature(extern_absolute_paths)]\n+\n+use xcrate::Z;\n+\n+fn f() {\n+    use xcrate;\n+    use xcrate as ycrate;\n+    let s = xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = ycrate::Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}\n+\n+fn main() {\n+    let s = ::xcrate::S;\n+    assert_eq!(format!(\"{:?}\", s), \"S\");\n+    let z = Z;\n+    assert_eq!(format!(\"{:?}\", z), \"Z\");\n+}"}, {"sha": "40fdbf0bbdba6da225d7e962fe1c2a3ffdea59f5", "filename": "src/test/ui/feature-gate-extern_absolute_paths.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fui%2Ffeature-gate-extern_absolute_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fui%2Ffeature-gate-extern_absolute_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_absolute_paths.rs?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::default; //~ ERROR unresolved import `core`\n+\n+fn main() {\n+    let _: u8 = ::core::default::Default(); //~ ERROR failed to resolve\n+}"}, {"sha": "111cd06cb3c3e8d352927e86b80b20d9334d6c6d", "filename": "src/test/ui/feature-gate-extern_absolute_paths.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fui%2Ffeature-gate-extern_absolute_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/691f022767aa5dec36635ab17bb767d5a80407db/src%2Ftest%2Fui%2Ffeature-gate-extern_absolute_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_absolute_paths.stderr?ref=691f022767aa5dec36635ab17bb767d5a80407db", "patch": "@@ -0,0 +1,14 @@\n+error[E0432]: unresolved import `core`\n+  --> $DIR/feature-gate-extern_absolute_paths.rs:11:5\n+   |\n+11 | use core::default; //~ ERROR unresolved import `core`\n+   |     ^^^^ Maybe a missing `extern crate core;`?\n+\n+error[E0433]: failed to resolve. Maybe a missing `extern crate core;`?\n+  --> $DIR/feature-gate-extern_absolute_paths.rs:14:19\n+   |\n+14 |     let _: u8 = ::core::default::Default(); //~ ERROR failed to resolve\n+   |                   ^^^^ Maybe a missing `extern crate core;`?\n+\n+error: aborting due to 2 previous errors\n+"}]}