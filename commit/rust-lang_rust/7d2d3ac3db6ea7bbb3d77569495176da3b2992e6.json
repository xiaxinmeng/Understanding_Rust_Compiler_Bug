{"sha": "7d2d3ac3db6ea7bbb3d77569495176da3b2992e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMmQzYWMzZGI2ZWE3YmJiM2Q3NzU2OTQ5NTE3NmRhM2IyOTkyZTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T17:30:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T17:30:23Z"}, "message": "More fluent API", "tree": {"sha": "3fd74d1aa420b04f5c9e3aaf84ebb62e553ddb9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd74d1aa420b04f5c9e3aaf84ebb62e553ddb9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d2d3ac3db6ea7bbb3d77569495176da3b2992e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2d3ac3db6ea7bbb3d77569495176da3b2992e6", "html_url": "https://github.com/rust-lang/rust/commit/7d2d3ac3db6ea7bbb3d77569495176da3b2992e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d2d3ac3db6ea7bbb3d77569495176da3b2992e6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84010e246c38f868baa777e1f1fda4172d21d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84010e246c38f868baa777e1f1fda4172d21d53", "html_url": "https://github.com/rust-lang/rust/commit/c84010e246c38f868baa777e1f1fda4172d21d53"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "d88a0cf4bf50de91884d168f73a8e716dd0cc61d", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7d2d3ac3db6ea7bbb3d77569495176da3b2992e6/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2d3ac3db6ea7bbb3d77569495176da3b2992e6/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=7d2d3ac3db6ea7bbb3d77569495176da3b2992e6", "patch": "@@ -23,7 +23,7 @@ impl ast::BinExpr {\n     pub fn replace_op(&self, op: SyntaxKind) -> Option<ast::BinExpr> {\n         let op_node: SyntaxElement = self.op_details()?.0.into();\n         let to_insert: Option<SyntaxElement> = Some(make::token(op).into());\n-        Some(replace_children(self, single_node(op_node), to_insert.into_iter()))\n+        Some(replace_children(self, single_node(op_node), to_insert))\n     }\n }\n \n@@ -39,10 +39,10 @@ impl ast::FnDef {\n         } else {\n             to_insert.push(make::tokens::single_space().into());\n             to_insert.push(body.syntax().clone().into());\n-            return insert_children(self, InsertPosition::Last, to_insert.into_iter());\n+            return insert_children(self, InsertPosition::Last, to_insert);\n         };\n         to_insert.push(body.syntax().clone().into());\n-        replace_children(self, single_node(old_body_or_semi), to_insert.into_iter())\n+        replace_children(self, single_node(old_body_or_semi), to_insert)\n     }\n }\n \n@@ -75,7 +75,7 @@ impl ast::ItemList {\n         let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n         let to_insert: ArrayVec<[SyntaxElement; 2]> =\n             [ws.ws().into(), item.syntax().clone().into()].into();\n-        insert_children(self, position, to_insert.into_iter())\n+        insert_children(self, position, to_insert)\n     }\n \n     fn l_curly(&self) -> Option<SyntaxElement> {\n@@ -184,7 +184,7 @@ impl ast::RecordFieldList {\n             InsertPosition::After(anchor) => after_field!(anchor),\n         };\n \n-        insert_children(self, position, to_insert.iter().cloned())\n+        insert_children(self, position, to_insert)\n     }\n \n     fn l_curly(&self) -> Option<SyntaxElement> {\n@@ -228,9 +228,10 @@ fn strip_attrs_and_docs_inner(mut node: SyntaxNode) -> SyntaxNode {\n #[must_use]\n pub fn replace_descendants<N: AstNode, D: AstNode>(\n     parent: &N,\n-    replacement_map: impl Iterator<Item = (D, D)>,\n+    replacement_map: impl IntoIterator<Item = (D, D)>,\n ) -> N {\n     let map = replacement_map\n+        .into_iter()\n         .map(|(from, to)| (from.syntax().clone().into(), to.syntax().clone().into()))\n         .collect::<FxHashMap<SyntaxElement, _>>();\n     let new_syntax = algo::replace_descendants(parent.syntax(), &|n| map.get(n).cloned());\n@@ -344,9 +345,9 @@ fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n fn insert_children<N: AstNode>(\n     parent: &N,\n     position: InsertPosition<SyntaxElement>,\n-    mut to_insert: impl Iterator<Item = SyntaxElement>,\n+    to_insert: impl IntoIterator<Item = SyntaxElement>,\n ) -> N {\n-    let new_syntax = algo::insert_children(parent.syntax(), position, &mut to_insert);\n+    let new_syntax = algo::insert_children(parent.syntax(), position, &mut to_insert.into_iter());\n     N::cast(new_syntax).unwrap()\n }\n \n@@ -359,9 +360,10 @@ fn single_node(element: impl Into<SyntaxElement>) -> RangeInclusive<SyntaxElemen\n fn replace_children<N: AstNode>(\n     parent: &N,\n     to_replace: RangeInclusive<SyntaxElement>,\n-    mut to_insert: impl Iterator<Item = SyntaxElement>,\n+    to_insert: impl IntoIterator<Item = SyntaxElement>,\n ) -> N {\n-    let new_syntax = algo::replace_children(parent.syntax(), to_replace, &mut to_insert);\n+    let new_syntax =\n+        algo::replace_children(parent.syntax(), to_replace, &mut to_insert.into_iter());\n     N::cast(new_syntax).unwrap()\n }\n "}]}