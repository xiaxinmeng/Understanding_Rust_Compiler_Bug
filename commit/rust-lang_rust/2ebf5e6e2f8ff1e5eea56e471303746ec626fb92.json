{"sha": "2ebf5e6e2f8ff1e5eea56e471303746ec626fb92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYmY1ZTZlMmY4ZmYxZTVlZWE1NmU0NzEzMDM3NDZlYzYyNmZiOTI=", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2019-10-30T10:45:43Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2019-10-30T14:44:55Z"}, "message": "Fix doctests", "tree": {"sha": "5e7f4d5d5a7bb4092dd6dc56d46f789f77b5fdae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7f4d5d5a7bb4092dd6dc56d46f789f77b5fdae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ebf5e6e2f8ff1e5eea56e471303746ec626fb92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ebf5e6e2f8ff1e5eea56e471303746ec626fb92", "html_url": "https://github.com/rust-lang/rust/commit/2ebf5e6e2f8ff1e5eea56e471303746ec626fb92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ebf5e6e2f8ff1e5eea56e471303746ec626fb92/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60671268c897cecac8e93e667cfe48cdd848d58b", "url": "https://api.github.com/repos/rust-lang/rust/commits/60671268c897cecac8e93e667cfe48cdd848d58b", "html_url": "https://github.com/rust-lang/rust/commit/60671268c897cecac8e93e667cfe48cdd848d58b"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "60d20735db467f792fa8b82ed77f2d26dbfea93c", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2ebf5e6e2f8ff1e5eea56e471303746ec626fb92/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ebf5e6e2f8ff1e5eea56e471303746ec626fb92/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=2ebf5e6e2f8ff1e5eea56e471303746ec626fb92", "patch": "@@ -526,6 +526,7 @@ impl<T> MaybeUninit<T> {\n     /// ### Correct usage of this method:\n     ///\n     /// ```rust\n+    /// #![feature(maybe_uninit_ref)]\n     /// use ::std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n@@ -547,6 +548,7 @@ impl<T> MaybeUninit<T> {\n     /// ### *Incorrect* usages of this method:\n     ///\n     /// ```rust,no_run\n+    /// #![feature(maybe_uninit_ref)]\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n@@ -555,6 +557,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     ///\n     /// ```rust,no_run\n+    /// #![feature(maybe_uninit_ref)]\n     /// use std::{cell::Cell, mem::MaybeUninit};\n     ///\n     /// let b = MaybeUninit::<Cell<bool>>::uninit();\n@@ -589,6 +592,7 @@ impl<T> MaybeUninit<T> {\n     /// ### Correct usage of this method:\n     ///\n     /// ```rust\n+    /// #![feature(maybe_uninit_ref)]\n     /// use ::std::mem::MaybeUninit;\n     ///\n     /// # unsafe extern \"C\" fn initialize_buffer (buf: *mut [u8; 2048]) { *buf = [0; 2048] }\n@@ -599,6 +603,7 @@ impl<T> MaybeUninit<T> {\n     /// }\n     ///\n     /// let mut buf = MaybeUninit::<[u8; 2048]>::uninit();\n+    ///\n     /// // Initialize `buf`:\n     /// unsafe { initialize_buffer(buf.as_mut_ptr()); }\n     /// // Now we know that `buf` has been initialized; so we could `.assume_init()` it.\n@@ -611,16 +616,21 @@ impl<T> MaybeUninit<T> {\n     ///     //   - `buf` has been initialized.\n     ///     buf.get_mut()\n     /// };\n+    ///\n     /// // Now we can use `buf` as a normal slice:\n     /// buf.sort_unstable();\n-    /// assert!(buf.is_sorted());\n+    /// assert!(\n+    ///     buf.chunks(2).all(|chunk| chunk[0] <= chunk[1]),\n+    ///     \"buffer is sorted\",\n+    /// );\n     /// ```\n     ///\n     /// ### *Incorrect* usages of this method:\n     ///\n-    /// Do not use `.get_mut()` to initialize a value\n+    /// You cannot use `.get_mut()` to initialize a value:\n     ///\n     /// ```rust,no_run\n+    /// #![feature(maybe_uninit_ref)]\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut b = MaybeUninit::<bool>::uninit();\n@@ -631,11 +641,12 @@ impl<T> MaybeUninit<T> {\n     /// }\n     /// ```\n     ///\n-    /// For instance, you cannot [`Read`] into an uninitialized buffer.\n+    /// For instance, you cannot [`Read`] into an uninitialized buffer:\n     ///\n     /// [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n     ///\n     /// ```rust,no_run\n+    /// #![feature(maybe_uninit_ref)]\n     /// use std::{io, mem::MaybeUninit};\n     ///\n     /// fn read_chunk (reader: &'_ mut dyn io::Read) -> io::Result<[u8; 64]>\n@@ -645,22 +656,23 @@ impl<T> MaybeUninit<T> {\n     ///                             // ^^^^^^^^^^^^^^^^\n     ///                             // (mutable) reference to uninitialized memory!\n     ///                             // This is undefined behavior.\n-    ///     Ok(buffer.assume_init())\n+    ///     Ok(unsafe { buffer.assume_init() })\n     /// }\n     /// ```\n     ///\n-    /// Nor can you use direct field access to do field-by-field gradual initialization.\n+    /// Nor can you use direct field access to do field-by-field gradual initialization:\n     ///\n     /// ```rust,no_run\n-    /// use std::mem::MaybeUninit;\n+    /// #![feature(maybe_uninit_ref)]\n+    /// use std::{mem::MaybeUninit, ptr};\n     ///\n     /// struct Foo {\n     ///     a: u32,\n     ///     b: u8,\n     /// }\n     ///\n     /// let foo: Foo = unsafe {\n-    ///     let foo = MaybeUninit::<Foo>::uninit();\n+    ///     let mut foo = MaybeUninit::<Foo>::uninit();\n     ///     ptr::write(&mut foo.get_mut().a as *mut u32, 1337);\n     ///                  // ^^^^^^^^^^^^^\n     ///                  // (mutable) reference to uninitialized memory!"}]}