{"sha": "a059b4720c674b8d5f70a72d4c3b5d610774c43a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNTliNDcyMGM2NzRiOGQ1ZjcwYTcyZDRjM2I1ZDYxMDc3NGM0M2E=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-07T01:46:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-07T01:46:44Z"}, "message": "Null slots on missing init, null-check box ptrs on drop. Works around missing typestate pass. Un-XFAIL box-in-tup.rs.", "tree": {"sha": "defeb0c712e3becaee0af0ecc44bfc3f37f2bacc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/defeb0c712e3becaee0af0ecc44bfc3f37f2bacc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a059b4720c674b8d5f70a72d4c3b5d610774c43a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a059b4720c674b8d5f70a72d4c3b5d610774c43a", "html_url": "https://github.com/rust-lang/rust/commit/a059b4720c674b8d5f70a72d4c3b5d610774c43a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a059b4720c674b8d5f70a72d4c3b5d610774c43a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f9d5dab5bd3e15eddbccbb97af30523cff17142", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f9d5dab5bd3e15eddbccbb97af30523cff17142", "html_url": "https://github.com/rust-lang/rust/commit/3f9d5dab5bd3e15eddbccbb97af30523cff17142"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "001b9c2e1b0cb58a1521c96972d589461fa33535", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a059b4720c674b8d5f70a72d4c3b5d610774c43a/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a059b4720c674b8d5f70a72d4c3b5d610774c43a/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=a059b4720c674b8d5f70a72d4c3b5d610774c43a", "patch": "@@ -524,6 +524,7 @@ TEST_XFAILS_SELF := $(filter-out \\\n                         arith-2.rs \\\n                         bool-not.rs \\\n                         box.rs \\\n+                        box-in-tup.rs \\\n                         char.rs \\\n                         complex.rs \\\n                         dead-code-one-arm-if.rs \\"}, {"sha": "a95df37483bd2c692697179b5d19da7f5a6b2f14", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a059b4720c674b8d5f70a72d4c3b5d610774c43a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a059b4720c674b8d5f70a72d4c3b5d610774c43a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a059b4720c674b8d5f70a72d4c3b5d610774c43a", "patch": "@@ -524,17 +524,24 @@ fn decr_refcnt_and_if_zero(@block_ctxt cx,\n                            str inner_name,\n                            TypeRef t_else, ValueRef v_else) -> result {\n \n+    auto load_rc_cx = new_sub_block_ctxt(cx, \"load rc\");\n     auto rc_adj_cx = new_sub_block_ctxt(cx, \"rc--\");\n     auto inner_cx = new_sub_block_ctxt(cx, inner_name);\n     auto next_cx = new_sub_block_ctxt(cx, \"next\");\n \n-    auto rc_ptr = cx.build.GEP(box_ptr, vec(C_int(0),\n-                                            C_int(abi.box_rc_field_refcnt)));\n-    auto rc = cx.build.Load(rc_ptr);\n+    auto null_test = cx.build.IsNull(box_ptr);\n+    cx.build.CondBr(null_test, next_cx.llbb, load_rc_cx.llbb);\n \n-    auto const_test = cx.build.ICmp(lib.llvm.LLVMIntEQ,\n-                                    C_int(abi.const_refcount as int), rc);\n-    cx.build.CondBr(const_test, next_cx.llbb, rc_adj_cx.llbb);\n+\n+    auto rc_ptr = load_rc_cx.build.GEP(box_ptr,\n+                                       vec(C_int(0),\n+                                           C_int(abi.box_rc_field_refcnt)));\n+\n+    auto rc = load_rc_cx.build.Load(rc_ptr);\n+    auto const_test =\n+        load_rc_cx.build.ICmp(lib.llvm.LLVMIntEQ,\n+                              C_int(abi.const_refcount as int), rc);\n+    load_rc_cx.build.CondBr(const_test, next_cx.llbb, rc_adj_cx.llbb);\n \n     rc = rc_adj_cx.build.Sub(rc, C_int(1));\n     rc_adj_cx.build.Store(rc, rc_ptr);\n@@ -545,8 +552,9 @@ fn decr_refcnt_and_if_zero(@block_ctxt cx,\n     inner_res.bcx.build.Br(next_cx.llbb);\n \n     auto phi = next_cx.build.Phi(t_else,\n-                                 vec(v_else, v_else, inner_res.val),\n+                                 vec(v_else, v_else, v_else, inner_res.val),\n                                  vec(cx.llbb,\n+                                     load_rc_cx.llbb,\n                                      rc_adj_cx.llbb,\n                                      inner_res.bcx.llbb));\n \n@@ -865,7 +873,7 @@ fn copy_ty(@block_ctxt cx,\n     } else if (typeck.type_is_boxed(t)) {\n         auto r = incr_refcnt(cx, src);\n         if (! is_init) {\n-            r = drop_ty(r.bcx, dst, t);\n+            r = drop_ty(r.bcx, r.bcx.build.Load(dst), t);\n         }\n         ret res(r.bcx, r.bcx.build.Store(src, dst));\n \n@@ -1499,7 +1507,7 @@ impure fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             auto rhs_res = trans_expr(lhs_res._0.bcx, src);\n             auto t = node_ann_type(cx.fcx.ccx, ann);\n             // FIXME: calculate copy init-ness in typestate.\n-            ret copy_ty(rhs_res.bcx, true, lhs_res._0.val, rhs_res.val, t);\n+            ret copy_ty(rhs_res.bcx, false, lhs_res._0.val, rhs_res.val, t);\n         }\n \n         case (ast.expr_call(?f, ?args, _)) {\n@@ -1659,15 +1667,19 @@ impure fn trans_stmt(@block_ctxt cx, &ast.stmt s) -> result {\n                     check (cx.fcx.lllocals.contains_key(local.id));\n                     auto llptr = cx.fcx.lllocals.get(local.id);\n                     auto ty = node_ann_type(cx.fcx.ccx, local.ann);\n-                    find_scope_cx(sub.bcx).cleanups +=\n+                    find_scope_cx(cx).cleanups +=\n                         clean(bind drop_slot(_, llptr, ty));\n \n                     alt (local.init) {\n                         case (some[@ast.expr](?e)) {\n                             sub = trans_expr(cx, e);\n                             sub = copy_ty(sub.bcx, true, llptr, sub.val, ty);\n                         }\n-                        case (_) { /* fall through */  }\n+                        case (_) {\n+                            auto llty = type_of(cx.fcx.ccx, ty);\n+                            auto null = lib.llvm.llvm.LLVMConstNull(llty);\n+                            sub = res(cx, cx.build.Store(null, llptr));\n+                        }\n                     }\n                 }\n             }"}]}