{"sha": "ca70ed8c8112b97bcd721f37933a30aeaa622dc3", "node_id": "C_kwDOAAsO6NoAKGNhNzBlZDhjODExMmI5N2JjZDcyMWYzNzkzM2EzMGFlYWE2MjJkYzM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-06T09:52:27Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-06T09:52:27Z"}, "message": "remove Clean trait implementation for hir::GenericBound", "tree": {"sha": "00eee67d04b9817fc48e7c7d94219b978228b737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00eee67d04b9817fc48e7c7d94219b978228b737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca70ed8c8112b97bcd721f37933a30aeaa622dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca70ed8c8112b97bcd721f37933a30aeaa622dc3", "html_url": "https://github.com/rust-lang/rust/commit/ca70ed8c8112b97bcd721f37933a30aeaa622dc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca70ed8c8112b97bcd721f37933a30aeaa622dc3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46d17d6aaa6a4d3dfd4683927ac07245eb9e512c", "url": "https://api.github.com/repos/rust-lang/rust/commits/46d17d6aaa6a4d3dfd4683927ac07245eb9e512c", "html_url": "https://github.com/rust-lang/rust/commit/46d17d6aaa6a4d3dfd4683927ac07245eb9e512c"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "6573350d03aa37f1aef7188c719917b528a0bdd5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ca70ed8c8112b97bcd721f37933a30aeaa622dc3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca70ed8c8112b97bcd721f37933a30aeaa622dc3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ca70ed8c8112b97bcd721f37933a30aeaa622dc3", "patch": "@@ -126,40 +126,40 @@ impl<'tcx> Clean<'tcx, Item> for DocModule<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Option<GenericBound>> for hir::GenericBound<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<GenericBound> {\n-        Some(match *self {\n-            hir::GenericBound::Outlives(lt) => GenericBound::Outlives(clean_lifetime(lt, cx)),\n-            hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n-                let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n-\n-                let trait_ref = ty::TraitRef::identity(cx.tcx, def_id).skip_binder();\n-\n-                let generic_args = generic_args.clean(cx);\n-                let GenericArgs::AngleBracketed { bindings, .. } = generic_args\n-                else {\n-                    bug!(\"clean: parenthesized `GenericBound::LangItemTrait`\");\n-                };\n+fn clean_generic_bound<'tcx>(\n+    bound: &hir::GenericBound<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<GenericBound> {\n+    Some(match *bound {\n+        hir::GenericBound::Outlives(lt) => GenericBound::Outlives(clean_lifetime(lt, cx)),\n+        hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n+            let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n+\n+            let trait_ref = ty::TraitRef::identity(cx.tcx, def_id).skip_binder();\n+\n+            let generic_args = generic_args.clean(cx);\n+            let GenericArgs::AngleBracketed { bindings, .. } = generic_args\n+            else {\n+                bug!(\"clean: parenthesized `GenericBound::LangItemTrait`\");\n+            };\n \n-                let trait_ = clean_trait_ref_with_bindings(cx, trait_ref, &bindings);\n-                GenericBound::TraitBound(\n-                    PolyTrait { trait_, generic_params: vec![] },\n-                    hir::TraitBoundModifier::None,\n-                )\n+            let trait_ = clean_trait_ref_with_bindings(cx, trait_ref, &bindings);\n+            GenericBound::TraitBound(\n+                PolyTrait { trait_, generic_params: vec![] },\n+                hir::TraitBoundModifier::None,\n+            )\n+        }\n+        hir::GenericBound::Trait(ref t, modifier) => {\n+            // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n+            if modifier == hir::TraitBoundModifier::MaybeConst\n+                && cx.tcx.lang_items().destruct_trait() == Some(t.trait_ref.trait_def_id().unwrap())\n+            {\n+                return None;\n             }\n-            hir::GenericBound::Trait(ref t, modifier) => {\n-                // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n-                if modifier == hir::TraitBoundModifier::MaybeConst\n-                    && cx.tcx.lang_items().destruct_trait()\n-                        == Some(t.trait_ref.trait_def_id().unwrap())\n-                {\n-                    return None;\n-                }\n \n-                GenericBound::TraitBound(clean_poly_trait_ref(t, cx), modifier)\n-            }\n-        })\n-    }\n+            GenericBound::TraitBound(clean_poly_trait_ref(t, cx), modifier)\n+        }\n+    })\n }\n \n pub(crate) fn clean_trait_ref_with_bindings<'tcx>(\n@@ -294,14 +294,14 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for hir::WherePredicate<'tcx> {\n                     .collect();\n                 WherePredicate::BoundPredicate {\n                     ty: clean_ty(wbp.bounded_ty, cx),\n-                    bounds: wbp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                    bounds: wbp.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n                     bound_params,\n                 }\n             }\n \n             hir::WherePredicate::RegionPredicate(ref wrp) => WherePredicate::RegionPredicate {\n                 lifetime: clean_lifetime(wrp.lifetime, cx),\n-                bounds: wrp.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                bounds: wrp.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n             },\n \n             hir::WherePredicate::EqPredicate(ref wrp) => WherePredicate::EqPredicate {\n@@ -531,7 +531,7 @@ fn clean_generic_param<'tcx>(\n                     .bounds_for_param(did)\n                     .filter(|bp| bp.origin != PredicateOrigin::WhereClause)\n                     .flat_map(|bp| bp.bounds)\n-                    .filter_map(|x| x.clean(cx))\n+                    .filter_map(|x| clean_generic_bound(x, cx))\n                     .collect()\n             } else {\n                 Vec::new()\n@@ -1041,7 +1041,7 @@ fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext\n             }\n             hir::TraitItemKind::Type(bounds, Some(default)) => {\n                 let generics = enter_impl_trait(cx, |cx| trait_item.generics.clean(cx));\n-                let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n+                let bounds = bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect();\n                 let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, default), cx, None);\n                 AssocTypeItem(\n                     Box::new(Typedef {\n@@ -1054,7 +1054,7 @@ fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext\n             }\n             hir::TraitItemKind::Type(bounds, None) => {\n                 let generics = enter_impl_trait(cx, |cx| trait_item.generics.clean(cx));\n-                let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n+                let bounds = bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect();\n                 TyAssocTypeItem(Box::new(generics), bounds)\n             }\n         };\n@@ -1507,7 +1507,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n         TyKind::OpaqueDef(item_id, _) => {\n             let item = cx.tcx.hir().item(item_id);\n             if let hir::ItemKind::OpaqueTy(ref ty) = item.kind {\n-                ImplTrait(ty.bounds.iter().filter_map(|x| x.clean(cx)).collect())\n+                ImplTrait(ty.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect())\n             } else {\n                 unreachable!()\n             }\n@@ -1911,7 +1911,7 @@ fn clean_maybe_renamed_item<'tcx>(\n                 kind: ConstantKind::Local { body: body_id, def_id },\n             }),\n             ItemKind::OpaqueTy(ref ty) => OpaqueTyItem(OpaqueTy {\n-                bounds: ty.bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                bounds: ty.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n                 generics: ty.generics.clean(cx),\n             }),\n             ItemKind::TyAlias(hir_ty, generics) => {\n@@ -1929,7 +1929,7 @@ fn clean_maybe_renamed_item<'tcx>(\n             }),\n             ItemKind::TraitAlias(generics, bounds) => TraitAliasItem(TraitAlias {\n                 generics: generics.clean(cx),\n-                bounds: bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                bounds: bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n             }),\n             ItemKind::Union(ref variant_data, generics) => UnionItem(Union {\n                 generics: generics.clean(cx),\n@@ -1961,7 +1961,7 @@ fn clean_maybe_renamed_item<'tcx>(\n                     def_id,\n                     items,\n                     generics: generics.clean(cx),\n-                    bounds: bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n+                    bounds: bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n                 })\n             }\n             ItemKind::ExternCrate(orig_name) => {\n@@ -2241,7 +2241,7 @@ fn clean_type_binding<'tcx>(\n                 TypeBindingKind::Equality { term: clean_hir_term(term, cx) }\n             }\n             hir::TypeBindingKind::Constraint { bounds } => TypeBindingKind::Constraint {\n-                bounds: bounds.iter().filter_map(|b| b.clean(cx)).collect(),\n+                bounds: bounds.iter().filter_map(|b| clean_generic_bound(b, cx)).collect(),\n             },\n         },\n     }"}]}