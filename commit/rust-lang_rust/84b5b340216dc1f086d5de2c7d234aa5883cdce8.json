{"sha": "84b5b340216dc1f086d5de2c7d234aa5883cdce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YjViMzQwMjE2ZGMxZjA4NmQ1ZGUyYzdkMjM0YWE1ODgzY2RjZTg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-03-10T01:14:35Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-03T17:39:15Z"}, "message": "Stop accessing current_dir in bootstrap\n\nThis ensures that the working directory of rustbuild has no effect on\nit's run; since tests will run with a different cwd this is required for\nconsistent behavior.", "tree": {"sha": "86f29ffa614306e68836b8dc23ed7dec270c7157", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f29ffa614306e68836b8dc23ed7dec270c7157"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84b5b340216dc1f086d5de2c7d234aa5883cdce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84b5b340216dc1f086d5de2c7d234aa5883cdce8", "html_url": "https://github.com/rust-lang/rust/commit/84b5b340216dc1f086d5de2c7d234aa5883cdce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84b5b340216dc1f086d5de2c7d234aa5883cdce8/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "637ac17c5292ce723430de0e87b92271989e1436", "url": "https://api.github.com/repos/rust-lang/rust/commits/637ac17c5292ce723430de0e87b92271989e1436", "html_url": "https://github.com/rust-lang/rust/commit/637ac17c5292ce723430de0e87b92271989e1436"}], "stats": {"total": 38, "additions": 15, "deletions": 23}, "files": [{"sha": "cf54591f25cd576cd62fa204f939a95bfec1d40e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84b5b340216dc1f086d5de2c7d234aa5883cdce8/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/84b5b340216dc1f086d5de2c7d234aa5883cdce8/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=84b5b340216dc1f086d5de2c7d234aa5883cdce8", "patch": "@@ -314,7 +314,7 @@ def __init__(self):\n         self.build_dir = os.path.join(os.getcwd(), \"build\")\n         self.clean = False\n         self.config_toml = ''\n-        self.rust_root = os.path.abspath(os.path.join(__file__, '../../..'))\n+        self.rust_root = ''\n         self.use_locked_deps = ''\n         self.use_vendored_sources = ''\n         self.verbose = False\n@@ -710,6 +710,7 @@ def bootstrap(help_triggered):\n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')\n     parser.add_argument('--build')\n+    parser.add_argument('--src')\n     parser.add_argument('--clean', action='store_true')\n     parser.add_argument('-v', '--verbose', action='count', default=0)\n \n@@ -718,6 +719,7 @@ def bootstrap(help_triggered):\n \n     # Configure initial bootstrap\n     build = RustBuild()\n+    build.rust_root = args.src or os.path.abspath(os.path.join(__file__, '../../..'))\n     build.verbose = args.verbose\n     build.clean = args.clean\n \n@@ -788,6 +790,7 @@ def bootstrap(help_triggered):\n     env[\"SRC\"] = build.rust_root\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n     env[\"BOOTSTRAP_PYTHON\"] = sys.executable\n+    env[\"BUILD_DIR\"] = build.build_dir\n     run(args, env=env, verbose=build.verbose)\n \n "}, {"sha": "8df5f406619193850b349941a447423a8a0996f2", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84b5b340216dc1f086d5de2c7d234aa5883cdce8/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b5b340216dc1f086d5de2c7d234aa5883cdce8/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=84b5b340216dc1f086d5de2c7d234aa5883cdce8", "patch": "@@ -143,6 +143,7 @@ pub struct Config {\n     // These are either the stage0 downloaded binaries or the locally installed ones.\n     pub initial_cargo: PathBuf,\n     pub initial_rustc: PathBuf,\n+    pub out: PathBuf,\n }\n \n /// Per-target configuration stored in the global configuration structure.\n@@ -344,7 +345,8 @@ impl Config {\n         config.rustc_error_format = flags.rustc_error_format;\n         config.on_fail = flags.on_fail;\n         config.stage = flags.stage;\n-        config.src = flags.src;\n+        // set by bootstrap.py\n+        config.src = env::var_os(\"SRC\").map(PathBuf::from).expect(\"'SRC' to be set\");\n         config.jobs = flags.jobs;\n         config.cmd = flags.cmd;\n         config.incremental = flags.incremental;\n@@ -368,12 +370,8 @@ impl Config {\n         }).unwrap_or_else(|| TomlConfig::default());\n \n         let build = toml.build.clone().unwrap_or(Build::default());\n-        set(&mut config.build, build.build.clone().map(|x| INTERNER.intern_string(x)));\n-        set(&mut config.build, flags.build);\n-        if config.build.is_empty() {\n-            // set by bootstrap.py\n-            config.build = INTERNER.intern_str(&env::var(\"BUILD\").unwrap());\n-        }\n+        // set by bootstrap.py\n+        config.build = INTERNER.intern_str(&env::var(\"BUILD\").unwrap());\n         config.hosts.push(config.build.clone());\n         for host in build.host.iter() {\n             let host = INTERNER.intern_str(host);\n@@ -514,13 +512,13 @@ impl Config {\n                 let mut target = Target::default();\n \n                 if let Some(ref s) = cfg.llvm_config {\n-                    target.llvm_config = Some(env::current_dir().unwrap().join(s));\n+                    target.llvm_config = Some(config.src.join(s));\n                 }\n                 if let Some(ref s) = cfg.jemalloc {\n-                    target.jemalloc = Some(env::current_dir().unwrap().join(s));\n+                    target.jemalloc = Some(config.src.join(s));\n                 }\n                 if let Some(ref s) = cfg.android_ndk {\n-                    target.ndk = Some(env::current_dir().unwrap().join(s));\n+                    target.ndk = Some(config.src.join(s));\n                 }\n                 target.cc = cfg.cc.clone().map(PathBuf::from);\n                 target.cxx = cfg.cxx.clone().map(PathBuf::from);\n@@ -541,8 +539,8 @@ impl Config {\n             set(&mut config.rust_dist_src, t.src_tarball);\n         }\n \n-        let cwd = t!(env::current_dir());\n-        let out = cwd.join(\"build\");\n+        let out = env::var_os(\"BUILD_DIR\").map(PathBuf::from).expect(\"'BUILD_DIR' set\");\n+        config.out = out.clone();\n \n         let stage0_root = out.join(&config.build).join(\"stage0/bin\");\n         config.initial_rustc = match build.rustc {"}, {"sha": "60b22e35832f95ecd683fc4bb5c602d7478cce1b", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84b5b340216dc1f086d5de2c7d234aa5883cdce8/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b5b340216dc1f086d5de2c7d234aa5883cdce8/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=84b5b340216dc1f086d5de2c7d234aa5883cdce8", "patch": "@@ -33,12 +33,10 @@ pub struct Flags {\n     pub on_fail: Option<String>,\n     pub stage: Option<u32>,\n     pub keep_stage: Option<u32>,\n-    pub build: Option<Interned<String>>,\n \n     pub host: Vec<Interned<String>>,\n     pub target: Vec<Interned<String>>,\n     pub config: Option<PathBuf>,\n-    pub src: PathBuf,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n     pub incremental: bool,\n@@ -278,10 +276,6 @@ Arguments:\n             _ => { }\n         };\n         // Get any optional paths which occur after the subcommand\n-        let cwd = t!(env::current_dir());\n-        let src = matches.opt_str(\"src\").map(PathBuf::from)\n-            .or_else(|| env::var_os(\"SRC\").map(PathBuf::from))\n-            .unwrap_or(cwd.clone());\n         let paths = matches.free[1..].iter().map(|p| p.into()).collect::<Vec<PathBuf>>();\n \n         let cfg_file = matches.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n@@ -374,7 +368,6 @@ Arguments:\n             on_fail: matches.opt_str(\"on-fail\"),\n             rustc_error_format: matches.opt_str(\"error-format\"),\n             keep_stage: matches.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n-            build: matches.opt_str(\"build\").map(|s| INTERNER.intern_string(s)),\n             host: split(matches.opt_strs(\"host\"))\n                 .into_iter().map(|x| INTERNER.intern_string(x)).collect::<Vec<_>>(),\n             target: split(matches.opt_strs(\"target\"))\n@@ -385,7 +378,6 @@ Arguments:\n             incremental: matches.opt_present(\"incremental\"),\n             exclude: split(matches.opt_strs(\"exclude\"))\n                 .into_iter().map(|p| p.into()).collect::<Vec<_>>(),\n-            src,\n         }\n     }\n }"}, {"sha": "8b19bff3f6af87d160123c44b6cf8a7bdf8cd0d3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84b5b340216dc1f086d5de2c7d234aa5883cdce8/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b5b340216dc1f086d5de2c7d234aa5883cdce8/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=84b5b340216dc1f086d5de2c7d234aa5883cdce8", "patch": "@@ -309,9 +309,8 @@ impl Build {\n     ///\n     /// By default all build output will be placed in the current directory.\n     pub fn new(config: Config) -> Build {\n-        let cwd = t!(env::current_dir());\n         let src = config.src.clone();\n-        let out = cwd.join(\"build\");\n+        let out = config.out.clone();\n \n         let is_sudo = match env::var_os(\"SUDO_USER\") {\n             Some(sudo_user) => {"}]}