{"sha": "6dcdd460619d6c281387c6418e40e34032c47802", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkY2RkNDYwNjE5ZDZjMjgxMzg3YzY0MThlNDBlMzQwMzJjNDc4MDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-02T12:17:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-02T12:17:47Z"}, "message": "Auto merge of #4477 - mikerite:fix-4291, r=flip1995\n\nFix `extra_unused_lifetimes` false positive\n\nFixes #4291\n\nchangelog: Fix `extra_unused_lifetimes` false positive", "tree": {"sha": "d56f4a5a7937a02e1c14097b810aa8ac9fd3a94a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56f4a5a7937a02e1c14097b810aa8ac9fd3a94a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dcdd460619d6c281387c6418e40e34032c47802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcdd460619d6c281387c6418e40e34032c47802", "html_url": "https://github.com/rust-lang/rust/commit/6dcdd460619d6c281387c6418e40e34032c47802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dcdd460619d6c281387c6418e40e34032c47802/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3fcaee5620d458af22682097c4ffb64b57c3327", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fcaee5620d458af22682097c4ffb64b57c3327", "html_url": "https://github.com/rust-lang/rust/commit/a3fcaee5620d458af22682097c4ffb64b57c3327"}, {"sha": "2fdfd60569f57c650b2b7875a683ab6daf774faa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fdfd60569f57c650b2b7875a683ab6daf774faa", "html_url": "https://github.com/rust-lang/rust/commit/2fdfd60569f57c650b2b7875a683ab6daf774faa"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "e75e9c6541bea3f15034a32a996b209922e84dcc", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6dcdd460619d6c281387c6418e40e34032c47802/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcdd460619d6c281387c6418e40e34032c47802/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=6dcdd460619d6c281387c6418e40e34032c47802", "patch": "@@ -9,7 +9,7 @@ use syntax::source_map::Span;\n use syntax::symbol::kw;\n \n use crate::reexport::*;\n-use crate::utils::{last_path_segment, span_lint};\n+use crate::utils::{last_path_segment, span_lint, trait_ref_of_method};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for lifetime annotations which can be removed by\n@@ -60,13 +60,21 @@ declare_lint_pass!(Lifetimes => [NEEDLESS_LIFETIMES, EXTRA_UNUSED_LIFETIMES]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemKind::Fn(ref decl, _, ref generics, id) = item.node {\n-            check_fn_inner(cx, decl, Some(id), generics, item.span);\n+            check_fn_inner(cx, decl, Some(id), generics, item.span, true);\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, id) = item.node {\n-            check_fn_inner(cx, &sig.decl, Some(id), &item.generics, item.span);\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id).is_none();\n+            check_fn_inner(\n+                cx,\n+                &sig.decl,\n+                Some(id),\n+                &item.generics,\n+                item.span,\n+                report_extra_lifetimes,\n+            );\n         }\n     }\n \n@@ -76,7 +84,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n                 TraitMethod::Required(_) => None,\n                 TraitMethod::Provided(id) => Some(id),\n             };\n-            check_fn_inner(cx, &sig.decl, body, &item.generics, item.span);\n+            check_fn_inner(cx, &sig.decl, body, &item.generics, item.span, true);\n         }\n     }\n }\n@@ -95,6 +103,7 @@ fn check_fn_inner<'a, 'tcx>(\n     body: Option<BodyId>,\n     generics: &'tcx Generics,\n     span: Span,\n+    report_extra_lifetimes: bool,\n ) {\n     if in_external_macro(cx.sess(), span) || has_where_lifetimes(cx, &generics.where_clause) {\n         return;\n@@ -144,7 +153,9 @@ fn check_fn_inner<'a, 'tcx>(\n              (or replaced with `'_` if needed by type declaration)\",\n         );\n     }\n-    report_extra_lifetimes(cx, decl, generics);\n+    if report_extra_lifetimes {\n+        self::report_extra_lifetimes(cx, decl, generics);\n+    }\n }\n \n fn could_use_elision<'a, 'tcx>("}, {"sha": "ba95fd63bf9a566b40bb3e922e4869da44d064cb", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6dcdd460619d6c281387c6418e40e34032c47802/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcdd460619d6c281387c6418e40e34032c47802/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=6dcdd460619d6c281387c6418e40e34032c47802", "patch": "@@ -61,4 +61,15 @@ impl X {\n     fn explicit_self_with_lifetime<'a>(self: &'a Self) {}\n }\n \n+// Methods implementing traits must have matching lifetimes\n+mod issue4291 {\n+    trait BadTrait {\n+        fn unused_lt<'a>(x: u8) {}\n+    }\n+\n+    impl BadTrait for () {\n+        fn unused_lt<'a>(_x: u8) {}\n+    }\n+}\n+\n fn main() {}"}, {"sha": "ebdb8e749520fed2bd95045043b76e60f5829543", "filename": "tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6dcdd460619d6c281387c6418e40e34032c47802/tests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcdd460619d6c281387c6418e40e34032c47802/tests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.stderr?ref=6dcdd460619d6c281387c6418e40e34032c47802", "patch": "@@ -18,5 +18,11 @@ error: this lifetime isn't used in the function definition\n LL |     fn x<'a>(&self) {}\n    |          ^^\n \n-error: aborting due to 3 previous errors\n+error: this lifetime isn't used in the function definition\n+  --> $DIR/extra_unused_lifetimes.rs:67:22\n+   |\n+LL |         fn unused_lt<'a>(x: u8) {}\n+   |                      ^^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "f3fdd48633f80ea29ad892d05607f4f71c4f4235", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6dcdd460619d6c281387c6418e40e34032c47802/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcdd460619d6c281387c6418e40e34032c47802/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=6dcdd460619d6c281387c6418e40e34032c47802", "patch": "@@ -248,4 +248,15 @@ fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n     unimplemented!()\n }\n \n+// Make sure we still warn on implementations\n+mod issue4291 {\n+    trait BadTrait {\n+        fn needless_lt<'a>(x: &'a u8) {}\n+    }\n+\n+    impl BadTrait for () {\n+        fn needless_lt<'a>(_x: &'a u8) {}\n+    }\n+}\n+\n fn main() {}"}, {"sha": "ad55fc5f750d005e16ba5148b4a18dabff2fcb09", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6dcdd460619d6c281387c6418e40e34032c47802/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dcdd460619d6c281387c6418e40e34032c47802/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=6dcdd460619d6c281387c6418e40e34032c47802", "patch": "@@ -118,5 +118,17 @@ LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n-error: aborting due to 15 previous errors\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:254:9\n+   |\n+LL |         fn needless_lt<'a>(x: &'a u8) {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:258:9\n+   |\n+LL |         fn needless_lt<'a>(_x: &'a u8) {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 17 previous errors\n "}]}