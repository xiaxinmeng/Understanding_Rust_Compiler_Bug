{"sha": "80f92f5c5fedadd131842977c0b9b21806f3902f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZjkyZjVjNWZlZGFkZDEzMTg0Mjk3N2MwYjliMjE4MDZmMzkwMmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-10T06:20:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-12T20:39:47Z"}, "message": "std: Relax an assertion in oneshot selection\n\nThe assertion was erroneously ensuring that there was no data on the port when\nthe port had selection aborted on it. This assertion was written in error\nbecause it's possible for data to be waiting on a port, even after it was\ndisconnected. When aborting selection, if we see that there's data on the port,\nthen we return true that data is available on the port.\n\nCloses #12802", "tree": {"sha": "4775273a78be8b003119b31a57b6415c96f0eefa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4775273a78be8b003119b31a57b6415c96f0eefa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80f92f5c5fedadd131842977c0b9b21806f3902f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80f92f5c5fedadd131842977c0b9b21806f3902f", "html_url": "https://github.com/rust-lang/rust/commit/80f92f5c5fedadd131842977c0b9b21806f3902f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80f92f5c5fedadd131842977c0b9b21806f3902f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3316a0e6b2ad9352bab58e7c046ef3d212411d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/3316a0e6b2ad9352bab58e7c046ef3d212411d82", "html_url": "https://github.com/rust-lang/rust/commit/3316a0e6b2ad9352bab58e7c046ef3d212411d82"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "0f78c1971bcebea277282940528da96dfd99483d", "filename": "src/libstd/comm/oneshot.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/80f92f5c5fedadd131842977c0b9b21806f3902f/src%2Flibstd%2Fcomm%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f92f5c5fedadd131842977c0b9b21806f3902f/src%2Flibstd%2Fcomm%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Foneshot.rs?ref=80f92f5c5fedadd131842977c0b9b21806f3902f", "patch": "@@ -339,14 +339,19 @@ impl<T: Send> Packet<T> {\n             DATA => Ok(true),\n \n             // If the other end has hung up, then we have complete ownership\n-            // of the port. We need to check to see if there was an upgrade\n-            // requested, and if so, the other end needs to have its selection\n-            // aborted.\n+            // of the port. First, check if there was data waiting for us. This\n+            // is possible if the other end sent something and then hung up.\n+            //\n+            // We then need to check to see if there was an upgrade requested,\n+            // and if so, the upgraded port needs to have its selection aborted.\n             DISCONNECTED => {\n-                assert!(self.data.is_none());\n-                match mem::replace(&mut self.upgrade, SendUsed) {\n-                    GoUp(port) => Err(port),\n-                    _ => Ok(true),\n+                if self.data.is_some() {\n+                    Ok(true)\n+                } else {\n+                    match mem::replace(&mut self.upgrade, SendUsed) {\n+                        GoUp(port) => Err(port),\n+                        _ => Ok(true),\n+                    }\n                 }\n             }\n "}, {"sha": "3c6828fc14fa0c810aa8f1bb15c19309283612b5", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/80f92f5c5fedadd131842977c0b9b21806f3902f/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f92f5c5fedadd131842977c0b9b21806f3902f/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=80f92f5c5fedadd131842977c0b9b21806f3902f", "patch": "@@ -597,4 +597,56 @@ mod test {\n         unsafe { h.add(); }\n         assert_eq!(s.wait2(false), h.id);\n     })\n+\n+    test!(fn oneshot_data_waiting() {\n+        let (p, c) = Chan::new();\n+        let (p2, c2) = Chan::new();\n+        spawn(proc() {\n+            select! {\n+                () = p.recv() => {}\n+            }\n+            c2.send(());\n+        });\n+\n+        for _ in range(0, 100) { task::deschedule() }\n+        c.send(());\n+        p2.recv();\n+    })\n+\n+    test!(fn stream_data_waiting() {\n+        let (p, c) = Chan::new();\n+        let (p2, c2) = Chan::new();\n+        c.send(());\n+        c.send(());\n+        p.recv();\n+        p.recv();\n+        spawn(proc() {\n+            select! {\n+                () = p.recv() => {}\n+            }\n+            c2.send(());\n+        });\n+\n+        for _ in range(0, 100) { task::deschedule() }\n+        c.send(());\n+        p2.recv();\n+    })\n+\n+    test!(fn shared_data_waiting() {\n+        let (p, c) = Chan::new();\n+        let (p2, c2) = Chan::new();\n+        drop(c.clone());\n+        c.send(());\n+        p.recv();\n+        spawn(proc() {\n+            select! {\n+                () = p.recv() => {}\n+            }\n+            c2.send(());\n+        });\n+\n+        for _ in range(0, 100) { task::deschedule() }\n+        c.send(());\n+        p2.recv();\n+    })\n }"}]}