{"sha": "1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MThjMDc5YWJjN2NiOTdhZmUzY2JjZjVhN2ZmMWY5NDEyNzc1YmM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-02T02:06:33Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-07T01:49:54Z"}, "message": "rustc: rename -Z emit-directives to -Z emit-artifact-notifications and simplify the output.", "tree": {"sha": "a50f24236321e42afb0216596ec09993cd865c1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a50f24236321e42afb0216596ec09993cd865c1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "html_url": "https://github.com/rust-lang/rust/commit/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "html_url": "https://github.com/rust-lang/rust/commit/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea"}], "stats": {"total": 81, "additions": 38, "deletions": 43}, "files": [{"sha": "12427daa38381d2baea1549380f2458bd9589754", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "patch": "@@ -1462,8 +1462,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n          the same values as the target option of the same name\"),\n     allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n         \"only allow the listed language features to be enabled in code (space separated)\"),\n-    emit_directives: bool = (false, parse_bool, [UNTRACKED],\n-        \"emit build directives if producing JSON output\"),\n+    emit_artifact_notifications: bool = (false, parse_bool, [UNTRACKED],\n+        \"emit notifications after each artifact has been output (only in the JSON format)\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "59cbd65f05c68a4a936192e58d49da99ecd4f09a", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "patch": "@@ -16,6 +16,7 @@ use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n use std::cmp::{min, Reverse};\n+use std::path::Path;\n use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter, Ansi};\n use termcolor::{WriteColor, Color, Buffer};\n \n@@ -52,9 +53,10 @@ pub trait Emitter {\n     /// Emit a structured diagnostic.\n     fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>);\n \n-    /// Emit a JSON directive. The default is to do nothing; this should only\n-    /// be emitted with --error-format=json.\n-    fn maybe_emit_json_directive(&mut self, _directive: String) {}\n+    /// Emit a notification that an artifact has been output.\n+    /// This is currently only supported for the JSON format,\n+    /// other formats can, and will, simply ignore it.\n+    fn emit_artifact_notification(&mut self, _path: &Path) {}\n \n     /// Checks if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {"}, {"sha": "3aa87fad0717416fcf9993cdb80ab0561e86b19a", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "patch": "@@ -26,6 +26,7 @@ use std::borrow::Cow;\n use std::cell::Cell;\n use std::{error, fmt};\n use std::panic;\n+use std::path::Path;\n \n use termcolor::{ColorSpec, Color};\n \n@@ -294,16 +295,9 @@ impl error::Error for ExplicitBug {\n pub use diagnostic::{Diagnostic, SubDiagnostic, DiagnosticStyledString, DiagnosticId};\n pub use diagnostic_builder::DiagnosticBuilder;\n \n-/// A handler deals with two kinds of compiler output.\n-/// - Errors: certain errors (fatal, bug, unimpl) may cause immediate exit,\n-///   others log errors for later reporting.\n-/// - Directives: with --error-format=json, the compiler produces directives\n-///   that indicate when certain actions have completed, which are useful for\n-///   Cargo. They may change at any time and should not be considered a public\n-///   API.\n-///\n-/// This crate's name (rustc_errors) doesn't encompass the directives, because\n-/// directives were added much later.\n+/// A handler deals with errors and other compiler output.\n+/// Certain errors (fatal, bug, unimpl) may cause immediate exit,\n+/// others log errors for later reporting.\n pub struct Handler {\n     pub flags: HandlerFlags,\n \n@@ -775,8 +769,8 @@ impl Handler {\n         }\n     }\n \n-    pub fn maybe_emit_json_directive(&self, directive: String) {\n-        self.emitter.borrow_mut().maybe_emit_json_directive(directive);\n+    pub fn emit_artifact_notification(&self, path: &Path) {\n+        self.emitter.borrow_mut().emit_artifact_notification(path);\n     }\n }\n "}, {"sha": "54b3e7342056041c98664df29de120d0fc6b1dff", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "patch": "@@ -1048,14 +1048,11 @@ fn encode_and_write_metadata<'tcx>(\n                 tcx.sess.fatal(&format!(\"couldn't create a temp dir: {}\", err))\n             });\n         let metadata_filename = emit_metadata(tcx.sess, &metadata, &metadata_tmpdir);\n-        match std::fs::rename(&metadata_filename, &out_filename) {\n-            Ok(_) => {\n-                if tcx.sess.opts.debugging_opts.emit_directives {\n-                    tcx.sess.parse_sess.span_diagnostic.maybe_emit_json_directive(\n-                        format!(\"metadata file written: {}\", out_filename.display()));\n-                }\n-            }\n-            Err(e) => tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e)),\n+        if let Err(e) = fs::rename(&metadata_filename, &out_filename) {\n+            tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n+        }\n+        if tcx.sess.opts.debugging_opts.emit_artifact_notifications {\n+            tcx.sess.parse_sess.span_diagnostic.emit_artifact_notification(&out_filename);\n         }\n     }\n "}, {"sha": "2dd2ecb749300ec19853d138e18710a9f919663c", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "patch": "@@ -19,6 +19,7 @@ use errors::emitter::{Emitter, HumanReadableErrorType};\n use syntax_pos::{MacroBacktrace, Span, SpanLabel, MultiSpan};\n use rustc_data_structures::sync::{self, Lrc};\n use std::io::{self, Write};\n+use std::path::Path;\n use std::vec;\n use std::sync::{Arc, Mutex};\n \n@@ -91,15 +92,15 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n-    fn maybe_emit_json_directive(&mut self, directive: String) {\n-        let data = Directive { directive };\n+    fn emit_artifact_notification(&mut self, path: &Path) {\n+        let data = ArtifactNotification { artifact: path };\n         let result = if self.pretty {\n             writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n         } else {\n             writeln!(&mut self.dst, \"{}\", as_json(&data))\n         };\n         if let Err(e) = result {\n-            panic!(\"failed to print message: {:?}\", e);\n+            panic!(\"failed to print notification: {:?}\", e);\n         }\n     }\n }\n@@ -181,9 +182,9 @@ struct DiagnosticCode {\n }\n \n #[derive(RustcEncodable)]\n-struct Directive {\n-    /// The directive itself.\n-    directive: String,\n+struct ArtifactNotification<'a> {\n+    /// The path of the artifact.\n+    artifact: &'a Path,\n }\n \n impl Diagnostic {"}, {"sha": "347d9aeac2307934edfa68d619a7157452aa78c0", "filename": "src/test/ui/emit-artifact-notifications.nll.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.nll.stderr?ref=1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications.nll/libemit_artifact_notifications.rmeta\"}"}, {"sha": "c2c930c8b1bae39c98bae1b500c6d66515929193", "filename": "src/test/ui/emit-artifact-notifications.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.rs?ref=1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags:--emit=metadata --error-format=json -Z emit-artifact-notifications\n+// compile-pass\n+\n+// A very basic test for the emission of artifact notifications in JSON output.\n+\n+fn main() {}"}, {"sha": "56c977181ff515a8a97bd7f56a22fdee4bd1eb96", "filename": "src/test/ui/emit-artifact-notifications.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.stderr?ref=1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications/libemit_artifact_notifications.rmeta\"}"}, {"sha": "924569d3e232d7ede99f1e2c27b043a70bbe6d07", "filename": "src/test/ui/emit-directives.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Femit-directives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Femit-directives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-directives.rs?ref=f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "patch": "@@ -1,6 +0,0 @@\n-// compile-flags:--emit=metadata --error-format=json -Z emit-directives\n-// compile-pass\n-\n-// A very basic test for the emission of build directives in JSON output.\n-\n-fn main() {}"}, {"sha": "068745edb8dc0a8156b0e09451444698ac76a814", "filename": "src/test/ui/emit-directives.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Femit-directives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Femit-directives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-directives.stderr?ref=f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "patch": "@@ -1 +0,0 @@\n-{\"directive\":\"metadata file written: $TEST_BUILD_DIR/emit-directives/libemit_directives.rmeta\"}"}, {"sha": "d651b9a92b64992e3d7be575c4b20450c68be4d6", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1618c079abc7cb97afe3cbcf5a7ff1f9412775bc/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=1618c079abc7cb97afe3cbcf5a7ff1f9412775bc", "patch": "@@ -4,7 +4,7 @@\n use crate::errors::{Error, ErrorKind};\n use crate::runtest::ProcRes;\n use serde_json;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::str::FromStr;\n \n #[derive(Deserialize)]\n@@ -18,9 +18,9 @@ struct Diagnostic {\n }\n \n #[derive(Deserialize)]\n-struct Directive {\n+struct ArtifactNotification {\n     #[allow(dead_code)]\n-    directive: String,\n+    artifact: PathBuf,\n }\n \n #[derive(Deserialize, Clone)]\n@@ -75,8 +75,8 @@ pub fn extract_rendered(output: &str) -> String {\n             if line.starts_with('{') {\n                 if let Ok(diagnostic) = serde_json::from_str::<Diagnostic>(line) {\n                     diagnostic.rendered\n-                } else if let Ok(_directive) = serde_json::from_str::<Directive>(line) {\n-                    // Swallow the directive.\n+                } else if let Ok(_) = serde_json::from_str::<ArtifactNotification>(line) {\n+                    // Ignore the notification.\n                     None\n                 } else {\n                     print!("}]}