{"sha": "3bb020aaf8ae2947bbfc26e589c77967b922a215", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYjAyMGFhZjhhZTI5NDdiYmZjMjZlNTg5Yzc3OTY3YjkyMmEyMTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-14T22:16:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:23:48Z"}, "message": "Revert \"Remove the environment argument from bare functions\"\n\nThis reverts commit 1b0f1f0b79fb29d28bcabb7a8468f4a5a95c0712.", "tree": {"sha": "99066222688ec253808d4c05de8ea36b31c10d62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99066222688ec253808d4c05de8ea36b31c10d62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bb020aaf8ae2947bbfc26e589c77967b922a215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb020aaf8ae2947bbfc26e589c77967b922a215", "html_url": "https://github.com/rust-lang/rust/commit/3bb020aaf8ae2947bbfc26e589c77967b922a215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bb020aaf8ae2947bbfc26e589c77967b922a215/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "070c39ca1d4792a96f08d19c22378d5b5b019f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/070c39ca1d4792a96f08d19c22378d5b5b019f02", "html_url": "https://github.com/rust-lang/rust/commit/070c39ca1d4792a96f08d19c22378d5b5b019f02"}], "stats": {"total": 42, "additions": 7, "deletions": 35}, "files": [{"sha": "5c3d4407920b87c83884173c19c912e866e2ae19", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3bb020aaf8ae2947bbfc26e589c77967b922a215/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb020aaf8ae2947bbfc26e589c77967b922a215/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3bb020aaf8ae2947bbfc26e589c77967b922a215", "patch": "@@ -95,16 +95,7 @@ fn type_of_fn(cx: @crate_ctxt, sp: span, proto: ast::proto,\n     // Arg 1: Env (closure-bindings / self-obj)\n     if is_method {\n         atys += [T_ptr(cx.rust_object_type)];\n-    } else {\n-        alt proto {\n-          ast::proto_bare. {\n-            // Bare functions have no environment\n-          }\n-          _ {\n-            atys += [T_opaque_closure_ptr(*cx)];\n-          }\n-        }\n-    }\n+    } else { atys += [T_opaque_closure_ptr(*cx)]; }\n \n     // Args >2: ty params, if not acquired via capture...\n     if !is_method {\n@@ -3549,15 +3540,7 @@ fn trans_bind_thunk(cx: @local_ctxt, sp: span, incoming_fty: ty::t,\n     }\n \n     // Set up the three implicit arguments to the thunk.\n-    let llargs: [ValueRef] = alt ty::ty_fn_proto(ccx.tcx, outgoing_fty) {\n-      ast::proto_bare. {\n-        // Bare functions don't take an environment\n-        [llretptr]\n-      }\n-      _ {\n-        [llretptr, lltargetenv]\n-      }\n-    };\n+    let llargs: [ValueRef] = [llretptr, lltargetenv];\n \n     // Copy in the type parameters.\n     let i: uint = 0u;\n@@ -3840,12 +3823,7 @@ fn trans_args(cx: @block_ctxt, outer_cx: @block_ctxt, llenv: ValueRef,\n     } else { llargs += [llretslot]; }\n \n     // Arg 1: Env (closure-bindings / self-obj)\n-    alt ty::ty_fn_proto(tcx, fn_ty) {\n-      ast::proto_bare. { }\n-      _ {\n-        llargs += [llenv];\n-      }\n-    }\n+    llargs += [llenv];\n \n     // Args >2: ty_params ...\n     llargs += lltydescs;\n@@ -5097,7 +5075,6 @@ fn new_fn_ctxt_w_id(cx: @local_ctxt, sp: span, llfndecl: ValueRef,\n                     id: ast::node_id, rstyle: ast::ret_style)\n     -> @fn_ctxt {\n     let llbbs = mk_standard_basic_blocks(llfndecl);\n-    // FIXME: llenv is not correct for bare functions\n     ret @{llfn: llfndecl,\n           llenv: llvm::LLVMGetParam(llfndecl, 1u),\n           llretptr: llvm::LLVMGetParam(llfndecl, 0u),\n@@ -5127,13 +5104,6 @@ fn new_fn_ctxt(cx: @local_ctxt, sp: span, llfndecl: ValueRef) -> @fn_ctxt {\n     ret new_fn_ctxt_w_id(cx, sp, llfndecl, -1, ast::return_val);\n }\n \n-fn implicit_args_for_fn(proto: ast::proto) -> uint {\n-    alt proto {\n-      ast::proto_bare. { 1u }\n-      _ { 2u }\n-    }\n-}\n-\n // NB: must keep 4 fns in sync:\n //\n //  - type_of_fn\n@@ -5151,8 +5121,10 @@ fn implicit_args_for_fn(proto: ast::proto) -> uint {\n fn create_llargs_for_fn_args(cx: @fn_ctxt, proto: ast::proto,\n                              ty_self: option::t<ty::t>, ret_ty: ty::t,\n                              args: [ast::arg], ty_params: [ast::ty_param]) {\n-    // Skip the implicit arguments\n-    let arg_n = implicit_args_for_fn(proto);\n+    // Skip the implicit arguments 0, and 1.  TODO: Pull out 2u and define\n+    // it as a constant, since we're using it in several places in trans this\n+    // way.\n+    let arg_n = 2u;\n     alt ty_self {\n       some(tt) { cx.llself = some::<val_self_pair>({v: cx.llenv, t: tt}); }\n       none. {"}]}