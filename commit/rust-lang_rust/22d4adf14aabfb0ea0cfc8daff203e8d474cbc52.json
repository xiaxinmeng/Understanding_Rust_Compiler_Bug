{"sha": "22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDRhZGYxNGFhYmZiMGVhMGNmYzhkYWZmMjAzZThkNDc0Y2JjNTI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-08T00:08:12Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-13T18:41:10Z"}, "message": "Port Nomicon to mdbook\n\n1. move everything under a src directory\n2. add README.md to the SUMMARY.md", "tree": {"sha": "47e38ca93da0581bf477919da94d422e469d55ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47e38ca93da0581bf477919da94d422e469d55ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "html_url": "https://github.com/rust-lang/rust/commit/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e943e68a47dfbdd73d34f3b40e628f3031f90b6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e943e68a47dfbdd73d34f3b40e628f3031f90b6a", "html_url": "https://github.com/rust-lang/rust/commit/e943e68a47dfbdd73d34f3b40e628f3031f90b6a"}], "stats": {"total": 211, "additions": 105, "deletions": 106}, "files": [{"sha": "7d4ef9c25148c48ab432aa46bd61349a345333d0", "filename": "src/doc/nomicon/SUMMARY.md", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e943e68a47dfbdd73d34f3b40e628f3031f90b6a/src%2Fdoc%2Fnomicon%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/e943e68a47dfbdd73d34f3b40e628f3031f90b6a/src%2Fdoc%2Fnomicon%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2FSUMMARY.md?ref=e943e68a47dfbdd73d34f3b40e628f3031f90b6a", "patch": "@@ -1,53 +0,0 @@\n-# Summary\n-\n-* [Meet Safe and Unsafe](meet-safe-and-unsafe.md)\n-\t* [How Safe and Unsafe Interact](safe-unsafe-meaning.md)\n-\t* [Working with Unsafe](working-with-unsafe.md)\n-* [Data Layout](data.md)\n-\t* [repr(Rust)](repr-rust.md)\n-\t* [Exotically Sized Types](exotic-sizes.md)\n-\t* [Other reprs](other-reprs.md)\n-* [Ownership](ownership.md)\n-\t* [References](references.md)\n-\t* [Lifetimes](lifetimes.md)\n-\t* [Limits of Lifetimes](lifetime-mismatch.md)\n-\t* [Lifetime Elision](lifetime-elision.md)\n-\t* [Unbounded Lifetimes](unbounded-lifetimes.md)\n-\t* [Higher-Rank Trait Bounds](hrtb.md)\n-\t* [Subtyping and Variance](subtyping.md)\n-\t* [Drop Check](dropck.md)\n-\t* [PhantomData](phantom-data.md)\n-\t* [Splitting Borrows](borrow-splitting.md)\n-* [Type Conversions](conversions.md)\n-\t* [Coercions](coercions.md)\n-\t* [The Dot Operator](dot-operator.md)\n-\t* [Casts](casts.md)\n-\t* [Transmutes](transmutes.md)\n-* [Uninitialized Memory](uninitialized.md)\n-\t* [Checked](checked-uninit.md)\n-\t* [Drop Flags](drop-flags.md)\n-\t* [Unchecked](unchecked-uninit.md)\n-* [Ownership Based Resource Management](obrm.md)\n-\t* [Constructors](constructors.md)\n-\t* [Destructors](destructors.md)\n-\t* [Leaking](leaking.md)\n-* [Unwinding](unwinding.md)\n-\t* [Exception Safety](exception-safety.md)\n-\t* [Poisoning](poisoning.md)\n-* [Concurrency](concurrency.md)\n-\t* [Races](races.md)\n-\t* [Send and Sync](send-and-sync.md)\n-\t* [Atomics](atomics.md)\n-* [Implementing Vec](vec.md)\n-\t* [Layout](vec-layout.md)\n-\t* [Allocating](vec-alloc.md)\n-\t* [Push and Pop](vec-push-pop.md)\n-\t* [Deallocating](vec-dealloc.md)\n-\t* [Deref](vec-deref.md)\n-\t* [Insert and Remove](vec-insert-remove.md)\n-\t* [IntoIter](vec-into-iter.md)\n-\t* [RawVec](vec-raw.md)\n-\t* [Drain](vec-drain.md)\n-\t* [Handling Zero-Sized Types](vec-zsts.md)\n-\t* [Final Code](vec-final.md)\n-* [Implementing Arc and Mutex](arc-and-mutex.md)"}, {"sha": "d577d7b5cc91b4d0099dbd778ad6135f5b66e9e4", "filename": "src/doc/nomicon/src/README.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2FREADME.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% The Rustonomicon\n+# The Rustonomicon\n \n #### The Dark Arts of Advanced and Unsafe Rust Programming\n ", "previous_filename": "src/doc/nomicon/README.md"}, {"sha": "e33dcbbb4188e834798a10d9e5e1111e1e129cf4", "filename": "src/doc/nomicon/src/SUMMARY.md", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2FSUMMARY.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,3 +1,55 @@\n # Summary\n \n-- [Chapter 1](./chapter_1.md)\n+[Introduction](README.md)\n+\n+* [Meet Safe and Unsafe](meet-safe-and-unsafe.md)\n+\t* [How Safe and Unsafe Interact](safe-unsafe-meaning.md)\n+\t* [Working with Unsafe](working-with-unsafe.md)\n+* [Data Layout](data.md)\n+\t* [repr(Rust)](repr-rust.md)\n+\t* [Exotically Sized Types](exotic-sizes.md)\n+\t* [Other reprs](other-reprs.md)\n+* [Ownership](ownership.md)\n+\t* [References](references.md)\n+\t* [Lifetimes](lifetimes.md)\n+\t* [Limits of Lifetimes](lifetime-mismatch.md)\n+\t* [Lifetime Elision](lifetime-elision.md)\n+\t* [Unbounded Lifetimes](unbounded-lifetimes.md)\n+\t* [Higher-Rank Trait Bounds](hrtb.md)\n+\t* [Subtyping and Variance](subtyping.md)\n+\t* [Drop Check](dropck.md)\n+\t* [PhantomData](phantom-data.md)\n+\t* [Splitting Borrows](borrow-splitting.md)\n+* [Type Conversions](conversions.md)\n+\t* [Coercions](coercions.md)\n+\t* [The Dot Operator](dot-operator.md)\n+\t* [Casts](casts.md)\n+\t* [Transmutes](transmutes.md)\n+* [Uninitialized Memory](uninitialized.md)\n+\t* [Checked](checked-uninit.md)\n+\t* [Drop Flags](drop-flags.md)\n+\t* [Unchecked](unchecked-uninit.md)\n+* [Ownership Based Resource Management](obrm.md)\n+\t* [Constructors](constructors.md)\n+\t* [Destructors](destructors.md)\n+\t* [Leaking](leaking.md)\n+* [Unwinding](unwinding.md)\n+\t* [Exception Safety](exception-safety.md)\n+\t* [Poisoning](poisoning.md)\n+* [Concurrency](concurrency.md)\n+\t* [Races](races.md)\n+\t* [Send and Sync](send-and-sync.md)\n+\t* [Atomics](atomics.md)\n+* [Implementing Vec](vec.md)\n+\t* [Layout](vec-layout.md)\n+\t* [Allocating](vec-alloc.md)\n+\t* [Push and Pop](vec-push-pop.md)\n+\t* [Deallocating](vec-dealloc.md)\n+\t* [Deref](vec-deref.md)\n+\t* [Insert and Remove](vec-insert-remove.md)\n+\t* [IntoIter](vec-into-iter.md)\n+\t* [RawVec](vec-raw.md)\n+\t* [Drain](vec-drain.md)\n+\t* [Handling Zero-Sized Types](vec-zsts.md)\n+\t* [Final Code](vec-final.md)\n+* [Implementing Arc and Mutex](arc-and-mutex.md)"}, {"sha": "fedc7b8bd6a18dcf925ec63a1deffcc088011331", "filename": "src/doc/nomicon/src/arc-and-mutex.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Farc-and-mutex.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Farc-and-mutex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Farc-and-mutex.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Implementing Arc and Mutex\n+# Implementing Arc and Mutex\n \n Knowing the theory is all fine and good, but the *best* way to understand\n something is to use it. To better understand atomics and interior mutability,", "previous_filename": "src/doc/nomicon/arc-and-mutex.md"}, {"sha": "e9ed21a93e00a317ce6e4460115a4ffaddaf4ad6", "filename": "src/doc/nomicon/src/atomics.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fatomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fatomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fatomics.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Atomics\n+# Atomics\n \n Rust pretty blatantly just inherits C11's memory model for atomics. This is not\n due to this model being particularly excellent or easy to understand. Indeed,", "previous_filename": "src/doc/nomicon/atomics.md"}, {"sha": "28ddb507ae27d7fe6da3d8e36f87a1fe90155a89", "filename": "src/doc/nomicon/src/borrow-splitting.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fborrow-splitting.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fborrow-splitting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fborrow-splitting.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Splitting Borrows\n+# Splitting Borrows\n \n The mutual exclusion property of mutable references can be very limiting when\n working with a composite structure. The borrow checker understands some basic", "previous_filename": "src/doc/nomicon/borrow-splitting.md"}, {"sha": "31b78587245404ce78c87e3883f3a313ef967917", "filename": "src/doc/nomicon/src/casts.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fcasts.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fcasts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fcasts.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Casts\n+# Casts\n \n Casts are a superset of coercions: every coercion can be explicitly\n invoked via a cast. However some conversions require a cast.", "previous_filename": "src/doc/nomicon/casts.md"}, {"sha": "4423404fe6e9c4256b0baa8e269e7b117983d866", "filename": "src/doc/nomicon/src/checked-uninit.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fchecked-uninit.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fchecked-uninit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fchecked-uninit.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Checked Uninitialized Memory\n+# Checked Uninitialized Memory\n \n Like C, all stack variables in Rust are uninitialized until a value is\n explicitly assigned to them. Unlike C, Rust statically prevents you from ever", "previous_filename": "src/doc/nomicon/checked-uninit.md"}, {"sha": "1a51bb5a9c614db1e1ab3eea1a2553abc34f2f3f", "filename": "src/doc/nomicon/src/coercions.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fcoercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fcoercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fcoercions.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Coercions\n+# Coercions\n \n Types can implicitly be coerced to change in certain contexts. These changes are\n generally just *weakening* of types, largely focused around pointers and", "previous_filename": "src/doc/nomicon/coercions.md"}, {"sha": "6205199bfcc44fd2ea692d01d59d48bd3b31ed1a", "filename": "src/doc/nomicon/src/concurrency.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fconcurrency.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Concurrency and Parallelism\n+# Concurrency and Parallelism\n \n Rust as a language doesn't *really* have an opinion on how to do concurrency or\n parallelism. The standard library exposes OS threads and blocking sys-calls", "previous_filename": "src/doc/nomicon/concurrency.md"}, {"sha": "b79e72dbae2bf550e32cc6f07775c92cb3c5c65f", "filename": "src/doc/nomicon/src/constructors.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fconstructors.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fconstructors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fconstructors.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Constructors\n+# Constructors\n \n There is exactly one way to create an instance of a user-defined type: name it,\n and initialize all its fields at once:", "previous_filename": "src/doc/nomicon/constructors.md"}, {"sha": "388d003d9b6c21d10adb3d9ee1a127c133f1e874", "filename": "src/doc/nomicon/src/conversions.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fconversions.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fconversions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fconversions.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Type Conversions\n+# Type Conversions\n \n At the end of the day, everything is just a pile of bits somewhere, and type\n systems are just there to help us use those bits right. There are two common", "previous_filename": "src/doc/nomicon/conversions.md"}, {"sha": "bf202ada08e95a8208837a4f22194945d24e29f6", "filename": "src/doc/nomicon/src/data.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fdata.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fdata.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fdata.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Data Representation in Rust\n+# Data Representation in Rust\n \n Low-level programming cares a lot about data layout. It's a big deal. It also\n pervasively influences the rest of the language, so we're going to start by", "previous_filename": "src/doc/nomicon/data.md"}, {"sha": "8c395fe3dc947ebbf0ec40405a8f77a1732a0156", "filename": "src/doc/nomicon/src/destructors.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fdestructors.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fdestructors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fdestructors.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Destructors\n+# Destructors\n \n What the language *does* provide is full-blown automatic destructors through the\n `Drop` trait, which provides the following method:", "previous_filename": "src/doc/nomicon/destructors.md"}, {"sha": "a1fc33bdc1e33cf73d2d5081db5488fb39e00685", "filename": "src/doc/nomicon/src/dot-operator.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fdot-operator.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fdot-operator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fdot-operator.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% The Dot Operator\n+# The Dot Operator\n \n The dot operator will perform a lot of magic to convert types. It will perform\n auto-referencing, auto-dereferencing, and coercion until types match.", "previous_filename": "src/doc/nomicon/dot-operator.md"}, {"sha": "51fa9d0a3c0f1d0cc6a348d5243fe5ea613d3bcc", "filename": "src/doc/nomicon/src/drop-flags.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fdrop-flags.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fdrop-flags.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fdrop-flags.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Drop Flags\n+# Drop Flags\n \n The examples in the previous section introduce an interesting problem for Rust.\n We have seen that it's possible to conditionally initialize, deinitialize, and", "previous_filename": "src/doc/nomicon/drop-flags.md"}, {"sha": "39039694be674cf1d014269a05cf2f57596754c7", "filename": "src/doc/nomicon/src/dropck.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fdropck.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fdropck.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fdropck.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Drop Check\n+# Drop Check\n \n We have seen how lifetimes provide us some fairly simple rules for ensuring\n that we never read dangling references. However up to this point we have only ever", "previous_filename": "src/doc/nomicon/dropck.md"}, {"sha": "80e72cd5e36c94404ab2b2be8da6c3e7a20ebf02", "filename": "src/doc/nomicon/src/exception-safety.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fexception-safety.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fexception-safety.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fexception-safety.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Exception Safety\n+# Exception Safety\n \n Although programs should use unwinding sparingly, there's a lot of code that\n *can* panic. If you unwrap a None, index out of bounds, or divide by 0, your", "previous_filename": "src/doc/nomicon/exception-safety.md"}, {"sha": "9f858d11dbbb901c97a81c6898657a0ff5093eaf", "filename": "src/doc/nomicon/src/exotic-sizes.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fexotic-sizes.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fexotic-sizes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fexotic-sizes.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Exotically Sized Types\n+# Exotically Sized Types\n \n Most of the time, we think in terms of types with a fixed, positive size. This\n is not always the case, however.", "previous_filename": "src/doc/nomicon/exotic-sizes.md"}, {"sha": "645986af13ace5aae29aa8bf5f1c7a1607a8dfa0", "filename": "src/doc/nomicon/src/hrtb.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fhrtb.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fhrtb.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fhrtb.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Higher-Rank Trait Bounds (HRTBs)\n+# Higher-Rank Trait Bounds (HRTBs)\n \n Rust's `Fn` traits are a little bit magic. For instance, we can write the\n following code:", "previous_filename": "src/doc/nomicon/hrtb.md"}, {"sha": "38b70b85b576afe94b442bdffbe30e4bd1ceddf8", "filename": "src/doc/nomicon/src/leaking.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fleaking.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fleaking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fleaking.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Leaking\n+# Leaking\n \n Ownership-based resource management is intended to simplify composition. You\n acquire resources when you create the object, and you release the resources when", "previous_filename": "src/doc/nomicon/leaking.md"}, {"sha": "e92d735a01d6921aba25e49c08d23afd800ca7af", "filename": "src/doc/nomicon/src/lifetime-elision.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-elision.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-elision.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-elision.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Lifetime Elision\n+# Lifetime Elision\n \n In order to make common patterns more ergonomic, Rust allows lifetimes to be\n *elided* in function signatures.", "previous_filename": "src/doc/nomicon/lifetime-elision.md"}, {"sha": "30b4f09f9032de94c3c10e39e3ef112448524a1a", "filename": "src/doc/nomicon/src/lifetime-mismatch.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-mismatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-mismatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-mismatch.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Limits of Lifetimes\n+# Limits of Lifetimes\n \n Given the following code:\n ", "previous_filename": "src/doc/nomicon/lifetime-mismatch.md"}, {"sha": "e2f0cc86772308315519d9b3e3a04461595083f1", "filename": "src/doc/nomicon/src/lifetimes.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetimes.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Lifetimes\n+# Lifetimes\n \n Rust enforces these rules through *lifetimes*. Lifetimes are effectively\n just names for scopes somewhere in the program. Each reference,", "previous_filename": "src/doc/nomicon/lifetimes.md"}, {"sha": "d42d0b6d7255c3e1bbff94c6ef8b09855aa9c9ab", "filename": "src/doc/nomicon/src/meet-safe-and-unsafe.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fmeet-safe-and-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fmeet-safe-and-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fmeet-safe-and-unsafe.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Meet Safe and Unsafe\n+# Meet Safe and Unsafe\n \n Programmers in safe \"high-level\" languages face a fundamental dilemma. On one\n hand, it would be *really* great to just say what you want and not worry about", "previous_filename": "src/doc/nomicon/meet-safe-and-unsafe.md"}, {"sha": "19e5ec382595c212c09e5a3485ae8bac6c0505e1", "filename": "src/doc/nomicon/src/obrm.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fobrm.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fobrm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fobrm.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% The Perils Of Ownership Based Resource Management (OBRM)\n+# The Perils Of Ownership Based Resource Management (OBRM)\n \n OBRM (AKA RAII: Resource Acquisition Is Initialization) is something you'll\n interact with a lot in Rust. Especially if you use the standard library.", "previous_filename": "src/doc/nomicon/obrm.md"}, {"sha": "02f39e3c4dd2794726e1ee2e1cd6aa9b17d738b1", "filename": "src/doc/nomicon/src/other-reprs.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fother-reprs.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fother-reprs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fother-reprs.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Alternative representations\n+# Alternative representations\n \n Rust allows you to specify alternative data layout strategies from the default.\n ", "previous_filename": "src/doc/nomicon/other-reprs.md"}, {"sha": "dd9e9db244a8161a2c8b59555cad56c1efe944b0", "filename": "src/doc/nomicon/src/ownership.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fownership.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Ownership and Lifetimes\n+# Ownership and Lifetimes\n \n Ownership is the breakout feature of Rust. It allows Rust to be completely\n memory-safe and efficient, while avoiding garbage collection. Before getting", "previous_filename": "src/doc/nomicon/ownership.md"}, {"sha": "72fa2e2a77764e73319b5a0fbc024b9ad78abdb1", "filename": "src/doc/nomicon/src/phantom-data.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fphantom-data.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fphantom-data.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fphantom-data.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% PhantomData\n+# PhantomData\n \n When working with unsafe code, we can often end up in a situation where\n types or lifetimes are logically associated with a struct, but not actually", "previous_filename": "src/doc/nomicon/phantom-data.md"}, {"sha": "9b5dec3eec3843315458f8d0365d9face8c92ca6", "filename": "src/doc/nomicon/src/poisoning.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fpoisoning.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fpoisoning.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fpoisoning.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Poisoning\n+# Poisoning\n \n Although all unsafe code *must* ensure it has minimal exception safety, not all\n types ensure *maximal* exception safety. Even if the type does, your code may", "previous_filename": "src/doc/nomicon/poisoning.md"}, {"sha": "c9b8c3d01b2f856a8ec678a6c8603694bbd0ee4d", "filename": "src/doc/nomicon/src/races.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fraces.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fraces.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fraces.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Data Races and Race Conditions\n+# Data Races and Race Conditions\n \n Safe Rust guarantees an absence of data races, which are defined as:\n ", "previous_filename": "src/doc/nomicon/races.md"}, {"sha": "5d80f1edd964a7ee4249cad38be8ef67c6d1a4bd", "filename": "src/doc/nomicon/src/references.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Freferences.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Freferences.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Freferences.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% References\n+# References\n \n This section gives a high-level view of the memory model that *all* Rust\n programs must satisfy to be correct. Safe code is statically verified", "previous_filename": "src/doc/nomicon/references.md"}, {"sha": "c02cf44189f1a704354712dbed60f2b31f73fa47", "filename": "src/doc/nomicon/src/repr-rust.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Frepr-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Frepr-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Frepr-rust.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% repr(Rust)\n+# repr(Rust)\n \n First and foremost, all types have an alignment specified in bytes. The\n alignment of a type specifies what addresses are valid to store the value at. A", "previous_filename": "src/doc/nomicon/repr-rust.md"}, {"sha": "0a655a3f53a21dfe0f80e9e7312bc88d8bbbf791", "filename": "src/doc/nomicon/src/safe-unsafe-meaning.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fsafe-unsafe-meaning.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fsafe-unsafe-meaning.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fsafe-unsafe-meaning.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% How Safe and Unsafe Interact\n+# How Safe and Unsafe Interact\n \n What's the relationship between Safe Rust and Unsafe Rust? How do they\n interact?", "previous_filename": "src/doc/nomicon/safe-unsafe-meaning.md"}, {"sha": "959f870d4e6459144d42c2b8efb532ced7dd14e2", "filename": "src/doc/nomicon/src/send-and-sync.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fsend-and-sync.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fsend-and-sync.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fsend-and-sync.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Send and Sync\n+# Send and Sync\n \n Not everything obeys inherited mutability, though. Some types allow you to\n multiply alias a location in memory while mutating it. Unless these types use", "previous_filename": "src/doc/nomicon/send-and-sync.md"}, {"sha": "d771712d050134712794fbe04f8fed7577212a8e", "filename": "src/doc/nomicon/src/subtyping.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fsubtyping.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fsubtyping.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fsubtyping.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Subtyping and Variance\n+# Subtyping and Variance\n \n Although Rust doesn't have any notion of structural inheritance, it *does*\n include subtyping. In Rust, subtyping derives entirely from lifetimes. Since", "previous_filename": "src/doc/nomicon/subtyping.md"}, {"sha": "043c8fe462595cb732697edd27965b354c317635", "filename": "src/doc/nomicon/src/transmutes.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Ftransmutes.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Ftransmutes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Ftransmutes.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Transmutes\n+# Transmutes\n \n Get out of our way type system! We're going to reinterpret these bits or die\n trying! Even though this book is all about doing things that are unsafe, I", "previous_filename": "src/doc/nomicon/transmutes.md"}, {"sha": "b41cf8b4ed91490f6726dfee1e786d328037cd74", "filename": "src/doc/nomicon/src/unbounded-lifetimes.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Funbounded-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Funbounded-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Funbounded-lifetimes.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Unbounded Lifetimes\n+# Unbounded Lifetimes\n \n Unsafe code can often end up producing references or lifetimes out of thin air.\n Such lifetimes come into the world as *unbounded*. The most common source of this", "previous_filename": "src/doc/nomicon/unbounded-lifetimes.md"}, {"sha": "ef31a3535d6a07cc23f7a5d5d4456050ba68ddbd", "filename": "src/doc/nomicon/src/unchecked-uninit.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Funchecked-uninit.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Funchecked-uninit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Funchecked-uninit.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Unchecked Uninitialized Memory\n+# Unchecked Uninitialized Memory\n \n One interesting exception to this rule is working with arrays. Safe Rust doesn't\n permit you to partially initialize an array. When you initialize an array, you", "previous_filename": "src/doc/nomicon/unchecked-uninit.md"}, {"sha": "eafc67907f2af43c57b60f0b91c9664bec42f102", "filename": "src/doc/nomicon/src/uninitialized.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Funinitialized.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Funinitialized.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Funinitialized.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Working With Uninitialized Memory\n+# Working With Uninitialized Memory\n \n All runtime-allocated memory in a Rust program begins its life as\n *uninitialized*. In this state the value of the memory is an indeterminate pile", "previous_filename": "src/doc/nomicon/uninitialized.md"}, {"sha": "6dc396d5153482c392470997f7c7b400a973c091", "filename": "src/doc/nomicon/src/unwinding.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Funwinding.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Funwinding.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Funwinding.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Unwinding\n+# Unwinding\n \n Rust has a *tiered* error-handling scheme:\n ", "previous_filename": "src/doc/nomicon/unwinding.md"}, {"sha": "ef4c52793433f9ef23ee7a96ce7017f7f9d678fe", "filename": "src/doc/nomicon/src/vec-alloc.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-alloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-alloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-alloc.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Allocating Memory\n+# Allocating Memory\n \n Using Unique throws a wrench in an important feature of Vec (and indeed all of\n the std collections): an empty Vec doesn't actually allocate at all. So if we", "previous_filename": "src/doc/nomicon/vec-alloc.md"}, {"sha": "83ab5b24b02453b29395ffdebe1edfbc23a488f0", "filename": "src/doc/nomicon/src/vec-dealloc.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-dealloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-dealloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-dealloc.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Deallocating\n+# Deallocating\n \n Next we should implement Drop so that we don't massively leak tons of resources.\n The easiest way is to just call `pop` until it yields None, and then deallocate", "previous_filename": "src/doc/nomicon/vec-dealloc.md"}, {"sha": "e21542c955aeba457bc0484489786bc11883e13d", "filename": "src/doc/nomicon/src/vec-deref.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-deref.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-deref.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-deref.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Deref\n+# Deref\n \n Alright! We've got a decent minimal stack implemented. We can push, we can\n pop, and we can clean up after ourselves. However there's a whole mess of", "previous_filename": "src/doc/nomicon/vec-deref.md"}, {"sha": "5bd2bf05d8c081496d227a9465f7a65c527cf979", "filename": "src/doc/nomicon/src/vec-drain.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-drain.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-drain.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-drain.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Drain\n+# Drain\n \n Let's move on to Drain. Drain is largely the same as IntoIter, except that\n instead of consuming the Vec, it borrows the Vec and leaves its allocation", "previous_filename": "src/doc/nomicon/vec-drain.md"}, {"sha": "39746cad781f8d98cded467e771d378ece5da9c2", "filename": "src/doc/nomicon/src/vec-final.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-final.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-final.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-final.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% The Final Code\n+# The Final Code\n \n ```rust\n #![feature(unique)]", "previous_filename": "src/doc/nomicon/vec-final.md"}, {"sha": "2c14bc4522722e25bf80312f75df2b9c90c28d98", "filename": "src/doc/nomicon/src/vec-insert-remove.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-insert-remove.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-insert-remove.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-insert-remove.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Insert and Remove\n+# Insert and Remove\n \n Something *not* provided by slice is `insert` and `remove`, so let's do those\n next.", "previous_filename": "src/doc/nomicon/vec-insert-remove.md"}, {"sha": "f2f5995ec1cbfaba6f62aebb004a228dee0a3ecb", "filename": "src/doc/nomicon/src/vec-into-iter.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-into-iter.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-into-iter.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-into-iter.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% IntoIter\n+# IntoIter\n \n Let's move on to writing iterators. `iter` and `iter_mut` have already been\n written for us thanks to The Magic of Deref. However there's two interesting", "previous_filename": "src/doc/nomicon/vec-into-iter.md"}, {"sha": "1dc09aef6ad282d4c0e29516f8c20cfa2300b724", "filename": "src/doc/nomicon/src/vec-layout.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-layout.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-layout.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-layout.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Layout\n+# Layout\n \n First off, we need to come up with the struct layout. A Vec has three parts:\n a pointer to the allocation, the size of the allocation, and the number of", "previous_filename": "src/doc/nomicon/vec-layout.md"}, {"sha": "d31a74cc308d95d6b49fef3f22b7d186a94f4ed6", "filename": "src/doc/nomicon/src/vec-push-pop.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-push-pop.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-push-pop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-push-pop.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Push and Pop\n+# Push and Pop\n \n Alright. We can initialize. We can allocate. Let's actually implement some\n functionality! Let's start with `push`. All it needs to do is check if we're", "previous_filename": "src/doc/nomicon/vec-push-pop.md"}, {"sha": "20fa8ab92c24c7c2c32abada6bc5a6f4a048e730", "filename": "src/doc/nomicon/src/vec-raw.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-raw.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-raw.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-raw.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% RawVec\n+# RawVec\n \n We've actually reached an interesting situation here: we've duplicated the logic\n for specifying a buffer and freeing its memory in Vec and IntoIter. Now that", "previous_filename": "src/doc/nomicon/vec-raw.md"}, {"sha": "5ae9bdd3274733102d2aff965fc38403c9beab22", "filename": "src/doc/nomicon/src/vec-zsts.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-zsts.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-zsts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec-zsts.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Handling Zero-Sized Types\n+# Handling Zero-Sized Types\n \n It's time. We're going to fight the specter that is zero-sized types. Safe Rust\n *never* needs to care about this, but Vec is very intensive on raw pointers and", "previous_filename": "src/doc/nomicon/vec-zsts.md"}, {"sha": "ad98e45f197b351b461462e20a5a0bdbc920f087", "filename": "src/doc/nomicon/src/vec.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fvec.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Example: Implementing Vec\n+# Example: Implementing Vec\n \n To bring everything together, we're going to write `std::Vec` from scratch.\n Because all the best tools for writing unsafe code are unstable, this", "previous_filename": "src/doc/nomicon/vec.md"}, {"sha": "5724f3d09a3024277c68e211ebf8e338c400c625", "filename": "src/doc/nomicon/src/working-with-unsafe.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fworking-with-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/22d4adf14aabfb0ea0cfc8daff203e8d474cbc52/src%2Fdoc%2Fnomicon%2Fsrc%2Fworking-with-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Fworking-with-unsafe.md?ref=22d4adf14aabfb0ea0cfc8daff203e8d474cbc52", "patch": "@@ -1,4 +1,4 @@\n-% Working with Unsafe\n+# Working with Unsafe\n \n Rust generally only gives us the tools to talk about Unsafe Rust in a scoped and\n binary manner. Unfortunately, reality is significantly more complicated than", "previous_filename": "src/doc/nomicon/working-with-unsafe.md"}]}