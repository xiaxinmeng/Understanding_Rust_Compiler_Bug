{"sha": "a80e63f3fa77792e848e3b248acf4c0acda2e310", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MGU2M2YzZmE3Nzc5MmU4NDhlM2IyNDhhY2Y0YzBhY2RhMmUzMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-06T09:31:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-06T09:31:27Z"}, "message": "Auto merge of #67917 - Dylan-DPC:rollup-id05y91, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #67800 (Fix ICE involving calling `Instance.ty` during const evaluation)\n - #67873 (change remove to have a PartialEq bound)\n - #67897 (Use `as_deref()` to replace `as_ref().map(...)`)\n - #67906 (Silence `TooGeneric` error)\n - #67912 (macros: typo fix)\n - #67915 (Use Self instead of $type)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6e9574bac0128d5184af68d208b2ee8d9e98e416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e9574bac0128d5184af68d208b2ee8d9e98e416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a80e63f3fa77792e848e3b248acf4c0acda2e310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a80e63f3fa77792e848e3b248acf4c0acda2e310", "html_url": "https://github.com/rust-lang/rust/commit/a80e63f3fa77792e848e3b248acf4c0acda2e310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a80e63f3fa77792e848e3b248acf4c0acda2e310/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33640f0e03af2fb31ce380d5389d5545f24ce29a", "url": "https://api.github.com/repos/rust-lang/rust/commits/33640f0e03af2fb31ce380d5389d5545f24ce29a", "html_url": "https://github.com/rust-lang/rust/commit/33640f0e03af2fb31ce380d5389d5545f24ce29a"}, {"sha": "34716a31db9371501fe98100a7aa1566f37c1d23", "url": "https://api.github.com/repos/rust-lang/rust/commits/34716a31db9371501fe98100a7aa1566f37c1d23", "html_url": "https://github.com/rust-lang/rust/commit/34716a31db9371501fe98100a7aa1566f37c1d23"}], "stats": {"total": 223, "additions": 172, "deletions": 51}, "files": [{"sha": "c1ae67a1a339f9ae46c5c0e67abadf1fc3bdaef5", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -11,6 +11,7 @@\n #![feature(associated_type_bounds)]\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(binary_heap_drain_sorted)]\n+#![feature(vec_remove_item)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "2a9bfefc713e7aa1f47d2c59d029e1ec936b2b49", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -131,6 +131,21 @@ fn test_extend_ref() {\n     assert_eq!(v, [1, 2, 3, 4, 5, 6, 7]);\n }\n \n+#[test]\n+fn test_remove_item() {\n+    let mut v = vec![1, 2, 3];\n+    v.remove_item(&1);\n+\n+    assert_eq!(v.len(), 2);\n+    assert_eq!(v, [2, 3]);\n+\n+    let mut w = vec![1, 2, 3];\n+    w.remove_item(&4);\n+\n+    assert_eq!(w.len(), 3);\n+    w.remove_item(&4);\n+}\n+\n #[test]\n fn test_slice_from_mut() {\n     let mut values = vec![1, 2, 3, 4, 5];"}, {"sha": "a27a13847d6a2a61a4428d001c2fd472c36d3ba5", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -1688,7 +1688,9 @@ impl<T: PartialEq> Vec<T> {\n     pub fn dedup(&mut self) {\n         self.dedup_by(|a, b| a == b)\n     }\n+}\n \n+impl<T> Vec<T> {\n     /// Removes the first instance of `item` from the vector if the item exists.\n     ///\n     /// # Examples\n@@ -1702,7 +1704,10 @@ impl<T: PartialEq> Vec<T> {\n     /// assert_eq!(vec, vec![2, 3, 1]);\n     /// ```\n     #[unstable(feature = \"vec_remove_item\", reason = \"recently added\", issue = \"40062\")]\n-    pub fn remove_item(&mut self, item: &T) -> Option<T> {\n+    pub fn remove_item<V>(&mut self, item: &V) -> Option<T>\n+    where\n+        T: PartialEq<V>,\n+    {\n         let pos = self.iter().position(|x| *x == *item)?;\n         Some(self.remove(pos))\n     }"}, {"sha": "752199c94b8aed8802df0ab7997afe4e48da1183", "filename": "src/libcore/convert/num.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fnum.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -47,8 +47,8 @@ macro_rules! impl_from {\n         #[doc = $doc]\n         impl From<$Small> for $Large {\n             #[inline]\n-            fn from(small: $Small) -> $Large {\n-                small as $Large\n+            fn from(small: $Small) -> Self {\n+                small as Self\n             }\n         }\n     };\n@@ -177,7 +177,7 @@ macro_rules! try_from_unbounded {\n             /// is outside of the range of the target type.\n             #[inline]\n             fn try_from(value: $source) -> Result<Self, Self::Error> {\n-                Ok(value as $target)\n+                Ok(value as Self)\n             }\n         }\n     )*}\n@@ -194,9 +194,9 @@ macro_rules! try_from_lower_bounded {\n             /// number type. This returns an error if the source value\n             /// is outside of the range of the target type.\n             #[inline]\n-            fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n+            fn try_from(u: $source) -> Result<Self, Self::Error> {\n                 if u >= 0 {\n-                    Ok(u as $target)\n+                    Ok(u as Self)\n                 } else {\n                     Err(TryFromIntError(()))\n                 }\n@@ -216,11 +216,11 @@ macro_rules! try_from_upper_bounded {\n             /// number type. This returns an error if the source value\n             /// is outside of the range of the target type.\n             #[inline]\n-            fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n-                if u > (<$target>::max_value() as $source) {\n+            fn try_from(u: $source) -> Result<Self, Self::Error> {\n+                if u > (Self::max_value() as $source) {\n                     Err(TryFromIntError(()))\n                 } else {\n-                    Ok(u as $target)\n+                    Ok(u as Self)\n                 }\n             }\n         }\n@@ -238,13 +238,13 @@ macro_rules! try_from_both_bounded {\n             /// number type. This returns an error if the source value\n             /// is outside of the range of the target type.\n             #[inline]\n-            fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n-                let min = <$target>::min_value() as $source;\n-                let max = <$target>::max_value() as $source;\n+            fn try_from(u: $source) -> Result<Self, Self::Error> {\n+                let min = Self::min_value() as $source;\n+                let max = Self::max_value() as $source;\n                 if u < min || u > max {\n                     Err(TryFromIntError(()))\n                 } else {\n-                    Ok(u as $target)\n+                    Ok(u as Self)\n                 }\n             }\n         }\n@@ -385,10 +385,10 @@ macro_rules! nzint_impl_from {\n         #[doc = $doc]\n         impl From<$Small> for $Large {\n             #[inline]\n-            fn from(small: $Small) -> $Large {\n+            fn from(small: $Small) -> Self {\n                 // SAFETY: input type guarantees the value is non-zero\n                 unsafe {\n-                    <$Large>::new_unchecked(small.get().into())\n+                    Self::new_unchecked(small.get().into())\n                 }\n             }\n         }"}, {"sha": "d562639a6588d172c133accfd329c0d5ee74d5f9", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -24,8 +24,8 @@ trait Int:\n \n macro_rules! doit {\n     ($($t:ident)*) => ($(impl Int for $t {\n-        fn zero() -> $t { 0 }\n-        fn from_u8(u: u8) -> $t { u as $t }\n+        fn zero() -> Self { 0 }\n+        fn from_u8(u: u8) -> Self { u as Self }\n         fn to_u8(&self) -> u8 { *self as u8 }\n         fn to_u16(&self) -> u16 { *self as u16 }\n         fn to_u32(&self) -> u32 { *self as u32 }"}, {"sha": "55f30794af6522045fd9d51998a73c838373b0ed", "filename": "src/libcore/iter/traits/accum.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -44,28 +44,28 @@ macro_rules! integer_sum_product {\n     (@impls $zero:expr, $one:expr, #[$attr:meta], $($a:ty)*) => ($(\n         #[$attr]\n         impl Sum for $a {\n-            fn sum<I: Iterator<Item=$a>>(iter: I) -> $a {\n+            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {\n                 iter.fold($zero, Add::add)\n             }\n         }\n \n         #[$attr]\n         impl Product for $a {\n-            fn product<I: Iterator<Item=$a>>(iter: I) -> $a {\n+            fn product<I: Iterator<Item=Self>>(iter: I) -> Self {\n                 iter.fold($one, Mul::mul)\n             }\n         }\n \n         #[$attr]\n         impl<'a> Sum<&'a $a> for $a {\n-            fn sum<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n+            fn sum<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                 iter.fold($zero, Add::add)\n             }\n         }\n \n         #[$attr]\n         impl<'a> Product<&'a $a> for $a {\n-            fn product<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n+            fn product<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                 iter.fold($one, Mul::mul)\n             }\n         }\n@@ -84,28 +84,28 @@ macro_rules! float_sum_product {\n     ($($a:ident)*) => ($(\n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Sum for $a {\n-            fn sum<I: Iterator<Item=$a>>(iter: I) -> $a {\n+            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {\n                 iter.fold(0.0, Add::add)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Product for $a {\n-            fn product<I: Iterator<Item=$a>>(iter: I) -> $a {\n+            fn product<I: Iterator<Item=Self>>(iter: I) -> Self {\n                 iter.fold(1.0, Mul::mul)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Sum<&'a $a> for $a {\n-            fn sum<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n+            fn sum<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                 iter.fold(0.0, Add::add)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Product<&'a $a> for $a {\n-            fn product<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n+            fn product<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                 iter.fold(1.0, Mul::mul)\n             }\n         }"}, {"sha": "76e58f0cc62bcdab060c396ee46cf45bffce3e3a", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -551,7 +551,7 @@ macro_rules! unreachable {\n \n /// Indicates unimplemented code by panicking with a message of \"not implemented\".\n ///\n-/// This allows the your code to type-check, which is useful if you are prototyping or\n+/// This allows your code to type-check, which is useful if you are prototyping or\n /// implementing a trait that requires multiple methods which you don't plan of using all of.\n ///\n /// The difference between `unimplemented!` and [`todo!`](macro.todo.html) is that while `todo!`"}, {"sha": "b4b595f330e22ac556e6c245819d91c7536e7b65", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -505,15 +505,15 @@ macro_rules! impls {\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T: ?Sized> Clone for $t<T> {\n-            fn clone(&self) -> $t<T> {\n-                $t\n+            fn clone(&self) -> Self {\n+                Self\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T: ?Sized> Default for $t<T> {\n-            fn default() -> $t<T> {\n-                $t\n+            fn default() -> Self {\n+                Self\n             }\n         }\n "}, {"sha": "6f16b93d0488aa6278a24591f6a5c952e828f86d", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -455,8 +455,8 @@ macro_rules! define_bignum {\n         }\n \n         impl crate::clone::Clone for $name {\n-            fn clone(&self) -> $name {\n-                $name { size: self.size, base: self.base }\n+            fn clone(&self) -> Self {\n+                Self { size: self.size, base: self.base }\n             }\n         }\n "}, {"sha": "009e52e479a61c083293213b698bcc1fd58c8c00", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -12,6 +12,7 @@ use crate::hir::Node;\n use crate::infer::error_reporting::TypeAnnotationNeeded as ErrorCode;\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt};\n+use crate::mir::interpret::ErrorHandled;\n use crate::session::DiagnosticMessageId;\n use crate::ty::error::ExpectedFound;\n use crate::ty::fast_reject;\n@@ -1086,6 +1087,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             // already reported in the query\n             ConstEvalFailure(err) => {\n+                if let ErrorHandled::TooGeneric = err {\n+                    // Silence this error, as it can be produced during intermediate steps\n+                    // when a constant is not yet able to be evaluated (but will be later).\n+                    return;\n+                }\n                 self.tcx.sess.delay_span_bug(\n                     span,\n                     &format!(\"constant in type had an ignored error: {:?}\", err),"}, {"sha": "e315de115688b3a6f6a1a406619560de31cc953c", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -62,10 +62,35 @@ pub enum InstanceDef<'tcx> {\n }\n \n impl<'tcx> Instance<'tcx> {\n-    pub fn ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+    /// Returns the `Ty` corresponding to this `Instance`,\n+    /// with generic substitutions applied and lifetimes erased.\n+    ///\n+    /// This method can only be called when the 'substs' for this Instance\n+    /// are fully monomorphic (no `ty::Param`'s are present).\n+    /// This is usually the case (e.g. during codegen).\n+    /// However, during constant evaluation, we may want\n+    /// to try to resolve a `Instance` using generic parameters\n+    /// (e.g. when we are attempting to to do const-propagation).\n+    /// In this case, `Instance.ty_env` should be used to provide\n+    /// the `ParamEnv` for our generic context.\n+    pub fn monomorphic_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         let ty = tcx.type_of(self.def.def_id());\n+        // There shouldn't be any params - if there are, then\n+        // Instance.ty_env should have been used to provide the proper\n+        // ParamEnv\n+        if self.substs.has_param_types() {\n+            bug!(\"Instance.ty called for type {:?} with params in substs: {:?}\", ty, self.substs);\n+        }\n         tcx.subst_and_normalize_erasing_regions(self.substs, ty::ParamEnv::reveal_all(), &ty)\n     }\n+\n+    /// Like `Instance.ty`, but allows a `ParamEnv` to be specified for use during\n+    /// normalization. This method is only really useful during constant evaluation,\n+    /// where we are dealing with potentially generic types.\n+    pub fn ty_env(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Ty<'tcx> {\n+        let ty = tcx.type_of(self.def.def_id());\n+        tcx.subst_and_normalize_erasing_regions(self.substs, param_env, &ty)\n+    }\n }\n \n impl<'tcx> InstanceDef<'tcx> {"}, {"sha": "5f599034e7d4d25512c015672ce1835bbee8f77c", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -2301,7 +2301,7 @@ impl<'tcx> ty::Instance<'tcx> {\n     // or should go through `FnAbi` instead, to avoid losing any\n     // adjustments `FnAbi::of_instance` might be performing.\n     fn fn_sig_for_fn_abi(&self, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let ty = self.ty(tcx);\n+        let ty = self.monomorphic_ty(tcx);\n         match ty.kind {\n             ty::FnDef(..) |\n             // Shims currently have type FnPtr. Not sure this should remain."}, {"sha": "78dd6fc8ffe750d80f504b366a6a6b0922576606", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -36,7 +36,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n     }\n \n     let sym = tcx.symbol_name(instance).name.as_str();\n-    debug!(\"get_fn({:?}: {:?}) => {}\", instance, instance.ty(cx.tcx()), sym);\n+    debug!(\"get_fn({:?}: {:?}) => {}\", instance, instance.monomorphic_ty(cx.tcx()), sym);\n \n     let fn_abi = FnAbi::of_instance(cx, instance, &[]);\n "}, {"sha": "bccf3f5735cc871cebf7bb105e7e7e67aa2abfce", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -204,7 +204,7 @@ impl CodegenCx<'ll, 'tcx> {\n             def_id\n         );\n \n-        let ty = instance.ty(self.tcx);\n+        let ty = instance.monomorphic_ty(self.tcx);\n         let sym = self.tcx.symbol_name(instance).name;\n \n         debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n@@ -361,7 +361,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n             };\n \n             let instance = Instance::mono(self.tcx, def_id);\n-            let ty = instance.ty(self.tcx);\n+            let ty = instance.monomorphic_ty(self.tcx);\n             let llty = self.layout_of(ty).llvm_type(self);\n             let g = if val_llty == llty {\n                 g"}, {"sha": "a1e81c10b415ee90de4f813edee03b961bd1c9eb", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -2287,7 +2287,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     };\n \n     let is_local_to_unit = is_node_local_to_unit(cx, def_id);\n-    let variable_type = Instance::mono(cx.tcx, def_id).ty(cx.tcx);\n+    let variable_type = Instance::mono(cx.tcx, def_id).monomorphic_ty(cx.tcx);\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let var_name = SmallCStr::new(&tcx.item_name(def_id).as_str());\n     let linkage_name = if no_mangle {"}, {"sha": "1c7146308389aa4acb4754391308b892c84ed1f6", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -89,7 +89,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         span: Span,\n     ) {\n         let tcx = self.tcx;\n-        let callee_ty = instance.ty(tcx);\n+        let callee_ty = instance.monomorphic_ty(tcx);\n \n         let (def_id, substs) = match callee_ty.kind {\n             ty::FnDef(def_id, substs) => (def_id, substs),"}, {"sha": "681bc1f2dcb77b30af5f6954593bfe62c54dfc45", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -22,7 +22,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         symbol_name: &str,\n     ) {\n         let instance = Instance::mono(self.tcx, def_id);\n-        let ty = instance.ty(self.tcx);\n+        let ty = instance.monomorphic_ty(self.tcx);\n         let llty = self.layout_of(ty).llvm_type(self);\n \n         let g = self.define_global(symbol_name, llty).unwrap_or_else(|| {"}, {"sha": "46e76512d35fc16d4a3cd8baca22276163da4cf6", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -221,7 +221,7 @@ pub fn const_eval_validated_provider<'tcx>(\n     // We call `const_eval` for zero arg intrinsics, too, in order to cache their value.\n     // Catch such calls and evaluate them instead of trying to load a constant's MIR.\n     if let ty::InstanceDef::Intrinsic(def_id) = key.value.instance.def {\n-        let ty = key.value.instance.ty(tcx);\n+        let ty = key.value.instance.ty_env(tcx, key.param_env);\n         let substs = match ty.kind {\n             ty::FnDef(_, substs) => substs,\n             _ => bug!(\"intrinsic with type {:?}\", ty),"}, {"sha": "a28bb539fd0703f6ef8ba947b1420029e3ac84e7", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -204,7 +204,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // ABI check\n         {\n             let callee_abi = {\n-                let instance_ty = instance.ty(*self.tcx);\n+                let instance_ty = instance.ty_env(*self.tcx, self.param_env);\n                 match instance_ty.kind {\n                     ty::FnDef(..) => instance_ty.fn_sig(*self.tcx).abi(),\n                     ty::Closure(..) => Abi::RustCall,"}, {"sha": "efbbca534856a694555a5fd68f5ad82fe90c0481", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -140,7 +140,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // to determine the type.\n         let drop_instance = self.memory.get_fn(drop_fn)?.as_instance()?;\n         trace!(\"Found drop fn: {:?}\", drop_instance);\n-        let fn_sig = drop_instance.ty(*self.tcx).fn_sig(*self.tcx);\n+        let fn_sig = drop_instance.ty_env(*self.tcx, self.param_env).fn_sig(*self.tcx);\n         let fn_sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, &fn_sig);\n         // The drop function takes `*mut T` where `T` is the type being dropped, so get that.\n         let args = fn_sig.inputs();"}, {"sha": "dca850462ce2ea6d2465662961f470fe67ac5364", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -358,7 +358,7 @@ fn collect_items_rec<'tcx>(\n             // Sanity check whether this ended up being collected accidentally\n             debug_assert!(should_monomorphize_locally(tcx, &instance));\n \n-            let ty = instance.ty(tcx);\n+            let ty = instance.monomorphic_ty(tcx);\n             visit_drop_use(tcx, ty, true, &mut neighbors);\n \n             recursion_depth_reset = None;\n@@ -1002,7 +1002,8 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                             def_id_to_string(self.tcx, def_id)\n                         );\n \n-                        let ty = Instance::new(def_id, InternalSubsts::empty()).ty(self.tcx);\n+                        let ty =\n+                            Instance::new(def_id, InternalSubsts::empty()).monomorphic_ty(self.tcx);\n                         visit_drop_use(self.tcx, ty, true, self.output);\n                     }\n                 }"}, {"sha": "f8c1af038e9677062abc9795a550292b357cf1ef", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -98,7 +98,10 @@ fn enforce_impl_params_are_constrained(\n         // (#36836)\n         tcx.sess.delay_span_bug(\n             tcx.def_span(impl_def_id),\n-            \"potentially unconstrained type parameters weren't evaluated\",\n+            &format!(\n+                \"potentially unconstrained type parameters weren't evaluated: {:?}\",\n+                impl_self_ty,\n+            ),\n         );\n         return;\n     }"}, {"sha": "85661621fbaf68c1b672120cee91269bb0543d51", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -2152,7 +2152,7 @@ fn stability_tags(item: &clean::Item) -> String {\n     }\n \n     if let Some(stab) = item.stability.as_ref().filter(|s| s.level == stability::Unstable) {\n-        if stab.feature.as_ref().map(|s| &**s) == Some(\"rustc_private\") {\n+        if stab.feature.as_deref() == Some(\"rustc_private\") {\n             tags += &tag_html(\"internal\", \"Internal\");\n         } else {\n             tags += &tag_html(\"unstable\", \"Experimental\");\n@@ -2205,7 +2205,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n     }\n \n     if let Some(stab) = item.stability.as_ref().filter(|stab| stab.level == stability::Unstable) {\n-        let is_rustc_private = stab.feature.as_ref().map(|s| &**s) == Some(\"rustc_private\");\n+        let is_rustc_private = stab.feature.as_deref() == Some(\"rustc_private\");\n \n         let mut message = if is_rustc_private {\n             \"<span class='emoji'>\u2699\ufe0f</span> This is an internal compiler API.\"\n@@ -2214,7 +2214,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n         }\n         .to_owned();\n \n-        if let Some(feature) = stab.feature.as_ref() {\n+        if let Some(feature) = stab.feature.as_deref() {\n             let mut feature = format!(\"<code>{}</code>\", Escape(&feature));\n             if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, stab.issue) {\n                 feature.push_str(&format!("}, {"sha": "f3be7b56db589ab2e3c114d7e46e3113bf9a72d3", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+#[allow(dead_code)]\n+struct ArithArrayLen<const N: usize>([u32; 0 + N]); // ok\n+\n+#[derive(PartialEq, Eq)]\n+struct Config {\n+    arr_size: usize,\n+}\n+\n+struct B<const CFG: Config> {\n+    arr: [u8; CFG.arr_size], // ok\n+}\n+\n+const C: Config = Config { arr_size: 5 };\n+\n+fn main() {\n+    let b = B::<C> { arr: [1, 2, 3, 4, 5] };\n+    assert_eq!(b.arr.len(), 5);\n+}"}, {"sha": "274f97697029e1767048569bcec70c684949209e", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/array-size-in-generic-struct-param.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "3fd576a8d3580699a88c9a93a8dc5721bc34ebcf", "filename": "src/test/ui/issues/issue-8460.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Ftest%2Fui%2Fissues%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Ftest%2Fui%2Fissues%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -11,8 +11,8 @@ trait Int {\n }\n macro_rules! doit {\n     ($($t:ident)*) => ($(impl Int for $t {\n-        fn zero() -> $t { 0 }\n-        fn one() -> $t { 1 }\n+        fn zero() -> Self { 0 }\n+        fn one() -> Self { 1 }\n     })*)\n }\n doit! { i8 i16 i32 i64 isize }"}, {"sha": "21851a725254f7943d395f2bfacfeddf875c1f9f", "filename": "src/test/ui/mir/issue-67639-normalization-ice.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Ftest%2Fui%2Fmir%2Fissue-67639-normalization-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80e63f3fa77792e848e3b248acf4c0acda2e310/src%2Ftest%2Fui%2Fmir%2Fissue-67639-normalization-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-67639-normalization-ice.rs?ref=a80e63f3fa77792e848e3b248acf4c0acda2e310", "patch": "@@ -0,0 +1,34 @@\n+// compile-flags: -Z mir-opt-level=3\n+// build-pass\n+\n+// This used to ICE in const-prop due\n+// to an empty ParamEnv being used during normalization\n+// of a generic type\n+\n+\n+fn main() {\n+    join_all::<u32>();\n+}\n+\n+trait Foo {\n+    type Item;\n+}\n+\n+impl Foo for u32 {\n+    type Item = u8;\n+}\n+\n+trait Bar {\n+    type Item2;\n+}\n+\n+impl Bar for u8 {\n+    type Item2 = u64;\n+}\n+\n+fn join_all<I>()\n+where I: Foo,\n+    I::Item: Bar\n+{\n+    Vec::<<I::Item as Bar>::Item2>::new(); // ICE occurs processing this line\n+}"}]}