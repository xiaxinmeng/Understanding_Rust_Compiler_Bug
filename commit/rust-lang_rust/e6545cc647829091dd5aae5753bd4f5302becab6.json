{"sha": "e6545cc647829091dd5aae5753bd4f5302becab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NTQ1Y2M2NDc4MjkwOTFkZDVhYWU1NzUzYmQ0ZjUzMDJiZWNhYjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-30T11:05:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-30T11:06:28Z"}, "message": "add ModuleDef::BuiltInType", "tree": {"sha": "640de902fede2421a299ba22609fbd9db5b07231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/640de902fede2421a299ba22609fbd9db5b07231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6545cc647829091dd5aae5753bd4f5302becab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6545cc647829091dd5aae5753bd4f5302becab6", "html_url": "https://github.com/rust-lang/rust/commit/e6545cc647829091dd5aae5753bd4f5302becab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6545cc647829091dd5aae5753bd4f5302becab6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b88735fe6cd3b259816c7c90a2675ee057c9e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b88735fe6cd3b259816c7c90a2675ee057c9e4c", "html_url": "https://github.com/rust-lang/rust/commit/6b88735fe6cd3b259816c7c90a2675ee057c9e4c"}], "stats": {"total": 71, "additions": 61, "deletions": 10}, "files": [{"sha": "3f77850dd31335123f5f5dce0747efea89a3f381", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e6545cc647829091dd5aae5753bd4f5302becab6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6545cc647829091dd5aae5753bd4f5302becab6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=e6545cc647829091dd5aae5753bd4f5302becab6", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     type_ref::TypeRef,\n     nameres::{ModuleScope, Namespace, ImportId, CrateModuleId},\n     expr::{Body, BodySourceMap, validation::ExprValidator},\n-    ty::{TraitRef, InferenceResult},\n+    ty::{TraitRef, InferenceResult, primitive::{IntTy, FloatTy}},\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n     generics::HasGenericParams,\n     docs::{Documentation, Docs, docs_from_ast},\n@@ -75,6 +75,15 @@ pub struct Module {\n     pub(crate) module_id: CrateModuleId,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum BuiltinType {\n+    Char,\n+    Bool,\n+    Str,\n+    Int(IntTy),\n+    Float(FloatTy),\n+}\n+\n /// The defs which can be visible in the module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ModuleDef {\n@@ -89,6 +98,7 @@ pub enum ModuleDef {\n     Static(Static),\n     Trait(Trait),\n     TypeAlias(TypeAlias),\n+    BuiltinType(BuiltinType),\n }\n impl_froms!(\n     ModuleDef: Module,\n@@ -100,7 +110,8 @@ impl_froms!(\n     Const,\n     Static,\n     Trait,\n-    TypeAlias\n+    TypeAlias,\n+    BuiltinType\n );\n \n pub enum ModuleSource {"}, {"sha": "3e00eea26515ef011c4309c2080326e293b9f77c", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6545cc647829091dd5aae5753bd4f5302becab6/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6545cc647829091dd5aae5753bd4f5302becab6/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=e6545cc647829091dd5aae5753bd4f5302becab6", "patch": "@@ -6,7 +6,7 @@\n //! applied. So, the relation between syntax and HIR is many-to-one.\n \n macro_rules! impl_froms {\n-    ($e:ident: $($v:ident), *) => {\n+    ($e:ident: $($v:ident),*) => {\n         $(\n             impl From<$v> for $e {\n                 fn from(it: $v) -> $e {\n@@ -80,5 +80,6 @@ pub use self::code_model::{\n     Function, FnSignature,\n     StructField, FieldSource,\n     Static, Const, ConstSignature,\n-    Trait, TypeAlias, MacroDef, Container\n+    Trait, TypeAlias, MacroDef, Container,\n+    BuiltinType,\n };"}, {"sha": "e8ae33eadcaec1c3c0db51d926114d71bea4ec82", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6545cc647829091dd5aae5753bd4f5302becab6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6545cc647829091dd5aae5753bd4f5302becab6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=e6545cc647829091dd5aae5753bd4f5302becab6", "patch": "@@ -649,7 +649,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             | TypableDef::Function(_)\n             | TypableDef::Enum(_)\n             | TypableDef::Const(_)\n-            | TypableDef::Static(_) => (Ty::Unknown, None),\n+            | TypableDef::Static(_)\n+            | TypableDef::BuiltinType(_) => (Ty::Unknown, None),\n         }\n     }\n "}, {"sha": "c4cef2d7ce65ac82957f419894c1df7cea9ea0d5", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e6545cc647829091dd5aae5753bd4f5302becab6/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6545cc647829091dd5aae5753bd4f5302becab6/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=e6545cc647829091dd5aae5753bd4f5302becab6", "patch": "@@ -10,7 +10,7 @@ use std::iter;\n \n use crate::{\n     Function, Struct, Union, StructField, Enum, EnumVariant, Path, ModuleDef, TypeAlias, Const, Static,\n-    HirDatabase,\n+    HirDatabase, BuiltinType,\n     type_ref::TypeRef,\n     name::KnownName,\n     nameres::Namespace,\n@@ -66,7 +66,7 @@ impl Ty {\n \n     pub(crate) fn from_hir_path(db: &impl HirDatabase, resolver: &Resolver, path: &Path) -> Self {\n         if let Some(name) = path.as_ident() {\n-            // FIXME handle primitive type names in resolver as well?\n+            // TODO: remove this\n             if let Some(int_ty) = primitive::IntTy::from_type_name(name) {\n                 return Ty::simple(TypeCtor::Int(primitive::UncertainIntTy::Known(int_ty)));\n             } else if let Some(float_ty) = primitive::FloatTy::from_type_name(name) {\n@@ -128,7 +128,7 @@ impl Ty {\n             TypableDef::Enum(e) => Some(e.into()),\n             TypableDef::EnumVariant(var) => Some(var.parent_enum(db).into()),\n             TypableDef::TypeAlias(t) => Some(t.into()),\n-            TypableDef::Const(_) | TypableDef::Static(_) => None,\n+            TypableDef::Const(_) | TypableDef::Static(_) | TypableDef::BuiltinType(_) => None,\n         };\n         substs_from_path_segment(db, resolver, segment, def_generic, false)\n     }\n@@ -149,7 +149,8 @@ impl Ty {\n             | TypableDef::Enum(_)\n             | TypableDef::Const(_)\n             | TypableDef::Static(_)\n-            | TypableDef::TypeAlias(_) => last,\n+            | TypableDef::TypeAlias(_)\n+            | TypableDef::BuiltinType(_) => last,\n             TypableDef::EnumVariant(_) => {\n                 // the generic args for an enum variant may be either specified\n                 // on the segment referring to the enum, or on the segment\n@@ -299,6 +300,7 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n         (TypableDef::TypeAlias(t), Namespace::Types) => type_for_type_alias(db, t),\n         (TypableDef::Const(c), Namespace::Values) => type_for_const(db, c),\n         (TypableDef::Static(c), Namespace::Values) => type_for_static(db, c),\n+        (TypableDef::BuiltinType(t), Namespace::Types) => type_for_builtin(t),\n \n         // 'error' cases:\n         (TypableDef::Function(_), Namespace::Types) => Ty::Unknown,\n@@ -308,6 +310,7 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n         (TypableDef::TypeAlias(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::Const(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::Static(_), Namespace::Types) => Ty::Unknown,\n+        (TypableDef::BuiltinType(_), Namespace::Values) => Ty::Unknown,\n     }\n }\n \n@@ -399,6 +402,17 @@ fn type_for_static(db: &impl HirDatabase, def: Static) -> Ty {\n     Ty::from_hir(db, &resolver, signature.type_ref())\n }\n \n+/// Build the declared type of a static.\n+fn type_for_builtin(def: BuiltinType) -> Ty {\n+    Ty::simple(match def {\n+        BuiltinType::Char => TypeCtor::Char,\n+        BuiltinType::Bool => TypeCtor::Bool,\n+        BuiltinType::Str => TypeCtor::Str,\n+        BuiltinType::Int(ty) => TypeCtor::Int(ty.into()),\n+        BuiltinType::Float(ty) => TypeCtor::Float(ty.into()),\n+    })\n+}\n+\n fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n     let var_data = def.variant_data(db);\n     let fields = match var_data.fields() {\n@@ -477,8 +491,19 @@ pub enum TypableDef {\n     TypeAlias(TypeAlias),\n     Const(Const),\n     Static(Static),\n+    BuiltinType(BuiltinType),\n }\n-impl_froms!(TypableDef: Function, Struct, Union, Enum, EnumVariant, TypeAlias, Const, Static);\n+impl_froms!(\n+    TypableDef: Function,\n+    Struct,\n+    Union,\n+    Enum,\n+    EnumVariant,\n+    TypeAlias,\n+    Const,\n+    Static,\n+    BuiltinType\n+);\n \n impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {\n@@ -491,6 +516,7 @@ impl From<ModuleDef> for Option<TypableDef> {\n             ModuleDef::TypeAlias(t) => t.into(),\n             ModuleDef::Const(v) => v.into(),\n             ModuleDef::Static(v) => v.into(),\n+            ModuleDef::BuiltinType(t) => t.into(),\n             ModuleDef::Module(_) | ModuleDef::Trait(_) => return None,\n         };\n         Some(res)"}, {"sha": "e1ab16a6fb16e26563db3fe3c942627542342473", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e6545cc647829091dd5aae5753bd4f5302becab6/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6545cc647829091dd5aae5753bd4f5302becab6/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=e6545cc647829091dd5aae5753bd4f5302becab6", "patch": "@@ -30,6 +30,12 @@ pub enum UncertainIntTy {\n     Known(IntTy),\n }\n \n+impl From<IntTy> for UncertainIntTy {\n+    fn from(ty: IntTy) -> Self {\n+        UncertainIntTy::Known(ty)\n+    }\n+}\n+\n impl fmt::Display for UncertainIntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -45,6 +51,12 @@ pub enum UncertainFloatTy {\n     Known(FloatTy),\n }\n \n+impl From<FloatTy> for UncertainFloatTy {\n+    fn from(ty: FloatTy) -> Self {\n+        UncertainFloatTy::Known(ty)\n+    }\n+}\n+\n impl fmt::Display for UncertainFloatTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}]}