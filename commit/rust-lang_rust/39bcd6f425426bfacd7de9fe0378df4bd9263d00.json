{"sha": "39bcd6f425426bfacd7de9fe0378df4bd9263d00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YmNkNmY0MjU0MjZiZmFjZDdkZTlmZTAzNzhkZjRiZDkyNjNkMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-11T22:37:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-11T22:37:38Z"}, "message": "Auto merge of #41684 - jethrogb:feature/ntstatus, r=alexcrichton\n\nWindows io::Error: also format NTSTATUS error codes\n\n`NTSTATUS` errors may be encoded as `HRESULT`, see [[MS-ERREF]](https://msdn.microsoft.com/en-us/library/cc231198.aspx). These error codes can still be formatted using `FormatMessageW` but require some different parameters to be passed in.\n\nI wasn't sure if this needed a test and if so, how to test it. Presumably we wouldn't want to make our tests dependent on localization-dependent strings returned from `FormatMessageW`.\n\nUsers that get an `err: NTSTATUS` will need to do `io::Error::from_raw_os_error(err|0x1000_0000)` (the equivalent of [`HRESULT_FROM_NT`](https://msdn.microsoft.com/en-us/library/ms693780(VS.85).aspx))", "tree": {"sha": "02ae46e982f6faebac2ced6743c7afd06bdf08b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ae46e982f6faebac2ced6743c7afd06bdf08b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39bcd6f425426bfacd7de9fe0378df4bd9263d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39bcd6f425426bfacd7de9fe0378df4bd9263d00", "html_url": "https://github.com/rust-lang/rust/commit/39bcd6f425426bfacd7de9fe0378df4bd9263d00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39bcd6f425426bfacd7de9fe0378df4bd9263d00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40beb3af162e676e40704854dd6547ee8d4cf60", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40beb3af162e676e40704854dd6547ee8d4cf60", "html_url": "https://github.com/rust-lang/rust/commit/e40beb3af162e676e40704854dd6547ee8d4cf60"}, {"sha": "71de9dbe5bc823a9603318c9cf92f58d7f5eb6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/71de9dbe5bc823a9603318c9cf92f58d7f5eb6f9", "html_url": "https://github.com/rust-lang/rust/commit/71de9dbe5bc823a9603318c9cf92f58d7f5eb6f9"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "1646f8cce72326e05c778bf88933b892479f6695", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39bcd6f425426bfacd7de9fe0378df4bd9263d00/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bcd6f425426bfacd7de9fe0378df4bd9263d00/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=39bcd6f425426bfacd7de9fe0378df4bd9263d00", "patch": "@@ -199,7 +199,10 @@ pub const ERROR_TIMEOUT: DWORD = 0x5B4;\n \n pub const INVALID_HANDLE_VALUE: HANDLE = !0 as HANDLE;\n \n+pub const FACILITY_NT_BIT: DWORD = 0x1000_0000;\n+\n pub const FORMAT_MESSAGE_FROM_SYSTEM: DWORD = 0x00001000;\n+pub const FORMAT_MESSAGE_FROM_HMODULE: DWORD = 0x00000800;\n pub const FORMAT_MESSAGE_IGNORE_INSERTS: DWORD = 0x00000200;\n \n pub const TLS_OUT_OF_INDEXES: DWORD = 0xFFFFFFFF;"}, {"sha": "a51b458451e8623ff3fd397956f276cf6e5e4604", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/39bcd6f425426bfacd7de9fe0378df4bd9263d00/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39bcd6f425426bfacd7de9fe0378df4bd9263d00/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=39bcd6f425426bfacd7de9fe0378df4bd9263d00", "patch": "@@ -32,17 +32,35 @@ pub fn errno() -> i32 {\n }\n \n /// Gets a detailed string description for the given error number.\n-pub fn error_string(errnum: i32) -> String {\n+pub fn error_string(mut errnum: i32) -> String {\n     // This value is calculated from the macro\n     // MAKELANGID(LANG_SYSTEM_DEFAULT, SUBLANG_SYS_DEFAULT)\n     let langId = 0x0800 as c::DWORD;\n \n     let mut buf = [0 as c::WCHAR; 2048];\n \n     unsafe {\n-        let res = c::FormatMessageW(c::FORMAT_MESSAGE_FROM_SYSTEM |\n+        let mut module = ptr::null_mut();\n+        let mut flags = 0;\n+\n+        // NTSTATUS errors may be encoded as HRESULT, which may returned from\n+        // GetLastError. For more information about Windows error codes, see\n+        // `[MS-ERREF]`: https://msdn.microsoft.com/en-us/library/cc231198.aspx\n+        if (errnum & c::FACILITY_NT_BIT as i32) != 0 {\n+            // format according to https://support.microsoft.com/en-us/help/259693\n+            const NTDLL_DLL: &'static [u16] = &['N' as _, 'T' as _, 'D' as _, 'L' as _, 'L' as _,\n+                                                '.' as _, 'D' as _, 'L' as _, 'L' as _, 0];\n+            module = c::GetModuleHandleW(NTDLL_DLL.as_ptr());\n+\n+            if module != ptr::null_mut() {\n+                errnum ^= c::FACILITY_NT_BIT as i32;\n+                flags = c::FORMAT_MESSAGE_FROM_HMODULE;\n+            }\n+        }\n+\n+        let res = c::FormatMessageW(flags | c::FORMAT_MESSAGE_FROM_SYSTEM |\n                                         c::FORMAT_MESSAGE_IGNORE_INSERTS,\n-                                    ptr::null_mut(),\n+                                    module,\n                                     errnum as c::DWORD,\n                                     langId,\n                                     buf.as_mut_ptr(),\n@@ -299,3 +317,17 @@ pub fn home_dir() -> Option<PathBuf> {\n pub fn exit(code: i32) -> ! {\n     unsafe { c::ExitProcess(code as c::UINT) }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use io::Error;\n+    use sys::c;\n+\n+    // tests `error_string` above\n+    #[test]\n+    fn ntstatus_error() {\n+        const STATUS_UNSUCCESSFUL: u32 = 0xc000_0001;\n+        assert!(!Error::from_raw_os_error((STATUS_UNSUCCESSFUL | c::FACILITY_NT_BIT) as _)\n+            .to_string().contains(\"FormatMessageW() returned error\"));\n+    }\n+}"}]}