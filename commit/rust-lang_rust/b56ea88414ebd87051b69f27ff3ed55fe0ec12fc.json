{"sha": "b56ea88414ebd87051b69f27ff3ed55fe0ec12fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NmVhODg0MTRlYmQ4NzA1MWI2OWYyN2ZmM2VkNTVmZTBlYzEyZmM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-24T13:54:15Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-24T13:54:15Z"}, "message": "Add a system for creating diffs across multiple mir optimizations.", "tree": {"sha": "2743c57b0369c831809b29016ef81b7d1991d0e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2743c57b0369c831809b29016ef81b7d1991d0e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b56ea88414ebd87051b69f27ff3ed55fe0ec12fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b56ea88414ebd87051b69f27ff3ed55fe0ec12fc", "html_url": "https://github.com/rust-lang/rust/commit/b56ea88414ebd87051b69f27ff3ed55fe0ec12fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b56ea88414ebd87051b69f27ff3ed55fe0ec12fc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71384101ea3b030b80f7def80a37f67e148518b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/71384101ea3b030b80f7def80a37f67e148518b0", "html_url": "https://github.com/rust-lang/rust/commit/71384101ea3b030b80f7def80a37f67e148518b0"}], "stats": {"total": 850, "additions": 357, "deletions": 493}, "files": [{"sha": "2c5816c51e3e256a61921d6a5c43e7f1b243a520", "filename": "src/test/mir-opt/match-arm-scopes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b56ea88414ebd87051b69f27ff3ed55fe0ec12fc/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56ea88414ebd87051b69f27ff3ed55fe0ec12fc/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs?ref=b56ea88414ebd87051b69f27ff3ed55fe0ec12fc", "patch": "@@ -9,8 +9,7 @@\n //   all of the bindings for that scope.\n // * No drop flags are used.\n \n-// EMIT_MIR rustc.complicated_match.SimplifyCfg-initial.after.mir\n-// EMIT_MIR rustc.complicated_match.ElaborateDrops.after.mir\n+// EMIT_MIR rustc.complicated_match SimplifyCfg-initial.after ElaborateDrops.after\n fn complicated_match(cond: bool, items: (bool, bool, String)) -> i32 {\n     match items {\n         (false, a, s) | (a, false, s) if if cond { return 3 } else { a } => 1,"}, {"sha": "df6a247bb5ff6dd14c69ba3363449e9981a069ac", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.ElaborateDrops.after.mir", "status": "removed", "additions": 0, "deletions": 235, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/71384101ea3b030b80f7def80a37f67e148518b0/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/71384101ea3b030b80f7def80a37f67e148518b0/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.ElaborateDrops.after.mir?ref=71384101ea3b030b80f7def80a37f67e148518b0", "patch": "@@ -1,235 +0,0 @@\n-// MIR for `complicated_match` after ElaborateDrops\n-\n-fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n-    debug cond => _1;                    // in scope 0 at $DIR/match-arm-scopes.rs:14:22: 14:26\n-    debug items => _2;                   // in scope 0 at $DIR/match-arm-scopes.rs:14:34: 14:39\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/match-arm-scopes.rs:14:66: 14:69\n-    let mut _3: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-    let mut _4: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-    let _5: bool;                        // in scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-    let _6: &bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-    let _7: std::string::String;         // in scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-    let _8: &std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-    let mut _9: bool;                    // in scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    let mut _10: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-    let mut _11: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n-    let mut _12: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    let mut _13: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-    let mut _14: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n-    let _15: bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-    let _16: std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-    scope 1 {\n-        debug a => _5;                   // in scope 1 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        debug a => _6;                   // in scope 1 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        debug s => _7;                   // in scope 1 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        debug s => _8;                   // in scope 1 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-    }\n-    scope 2 {\n-        debug b => _15;                  // in scope 2 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-        debug t => _16;                  // in scope 2 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-    }\n-\n-    bb0: {\n-        switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n-    }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n-    }\n-\n-    bb2: {\n-        switchInt((_2.1: bool)) -> [false: bb14, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n-    }\n-\n-    bb3: {\n-        switchInt((_2.0: bool)) -> [false: bb4, otherwise: bb21]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n-    }\n-\n-    bb4: {\n-        StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n-        _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n-        StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb5: {\n-        _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match-arm-scopes.rs:16:77: 16:78\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        drop(_7) -> [return: bb19, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-    }\n-\n-    bb6: {\n-        StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-        StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_10) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb7: {\n-        _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n-        StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb8: {\n-        _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match-arm-scopes.rs:16:59: 16:60\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n-    }\n-\n-    bb9: {\n-        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n-    }\n-\n-    bb10 (cleanup): {\n-        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb11: {\n-        drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb12: {\n-        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb13: {\n-        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb14: {\n-        StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-        StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_13) -> [false: bb15, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb15: {\n-        _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n-        StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _12) -> [false: bb18, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb16: {\n-        _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match-arm-scopes.rs:16:59: 16:60\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n-    }\n-\n-    bb17: {\n-        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb18: {\n-        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        goto -> bb3;                     // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb19: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb20: {\n-        _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match-arm-scopes.rs:17:41: 17:42\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        drop(_16) -> [return: bb22, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:17:41: 17:42\n-    }\n-\n-    bb21: {\n-        StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-        _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-        StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb22: {\n-        StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:41: 17:42\n-        StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:41: 17:42\n-        goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb23: {\n-        goto -> bb29;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb24 (cleanup): {\n-        goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb25 (cleanup): {\n-        goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb26: {\n-        goto -> bb9;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb27 (cleanup): {\n-        goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb28 (cleanup): {\n-        goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb29: {\n-        goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-}"}, {"sha": "58847e1bceee66e208ec2c55c5d73600b1998d34", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "added", "additions": 313, "deletions": 0, "changes": 313, "blob_url": "https://github.com/rust-lang/rust/blob/b56ea88414ebd87051b69f27ff3ed55fe0ec12fc/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b56ea88414ebd87051b69f27ff3ed55fe0ec12fc/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=b56ea88414ebd87051b69f27ff3ed55fe0ec12fc", "patch": "@@ -0,0 +1,313 @@\n+- // MIR for `complicated_match` after SimplifyCfg-initial\n++ // MIR for `complicated_match` after ElaborateDrops\n+  \n+  fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n+      debug cond => _1;                    // in scope 0 at $DIR/match-arm-scopes.rs:13:22: 13:26\n+      debug items => _2;                   // in scope 0 at $DIR/match-arm-scopes.rs:13:34: 13:39\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/match-arm-scopes.rs:13:66: 13:69\n+      let mut _3: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+      let mut _4: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+      let _5: bool;                        // in scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+      let _6: &bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+      let _7: std::string::String;         // in scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+      let _8: &std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+      let mut _9: bool;                    // in scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+      let mut _10: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+      let mut _11: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+      let mut _12: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+      let mut _13: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+      let mut _14: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+      let _15: bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+      let _16: std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+      scope 1 {\n+          debug a => _5;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+          debug a => _6;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+          debug s => _7;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+          debug s => _8;                   // in scope 1 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+      }\n+      scope 2 {\n+          debug b => _15;                  // in scope 2 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+          debug t => _16;                  // in scope 2 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+      }\n+  \n+      bb0: {\n+-         FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+-         switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n++         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n+      }\n+  \n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/match-arm-scopes.rs:13:1: 18:2\n+      }\n+  \n+      bb2: {\n+-         falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:15:9: 15:22\n++         switchInt((_2.1: bool)) -> [false: bb14, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n+      }\n+  \n+      bb3: {\n+-         switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n++         switchInt((_2.0: bool)) -> [false: bb4, otherwise: bb21]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n+      }\n+  \n+      bb4: {\n+-         falseEdge -> [real: bb18, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:15:25: 15:38\n+-     }\n+- \n+-     bb5: {\n+-         switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n+-     }\n+- \n+-     bb6: {\n+-         falseEdge -> [real: bb26, imaginary: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:21\n+-     }\n+- \n+-     bb7: {\n+          StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n+          _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:32: 16:33\n+          StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n+          _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:35: 16:36\n+-         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+      }\n+  \n+-     bb8: {\n++     bb5: {\n+          _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/match-arm-scopes.rs:15:77: 15:78\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+-         drop(_7) -> [return: bb24, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n++         drop(_7) -> [return: bb19, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+      }\n+  \n+-     bb9: {\n++     bb6: {\n+          StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+          _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+          StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+          _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+-         _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+-         _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+          StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+          StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+          _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+-         FakeRead(ForMatchedPlace, _10);  // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+-         switchInt(_10) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(_10) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+      }\n+  \n+-     bb10: {\n+-         falseEdge -> [real: bb12, imaginary: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-     }\n+- \n+-     bb11: {\n++     bb7: {\n+          _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n+          StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+-         switchInt(move _9) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(move _9) -> [false: bb13, otherwise: bb12]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+      }\n+  \n+-     bb12: {\n++     bb8: {\n+          _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000003))\n+                                           // mir::Constant\n+                                           // + span: $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+          StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+          StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n++         goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+      }\n+  \n+-     bb13: {\n++     bb9: {\n+          return;                          // scope 0 at $DIR/match-arm-scopes.rs:18:2: 18:2\n+      }\n+  \n+-     bb14 (cleanup): {\n+-         drop(_2) -> bb1;                 // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     bb10 (cleanup): {\n++         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+      }\n+  \n+-     bb15: {\n+-         drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     bb11: {\n++         drop(_2) -> [return: bb9, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+      }\n+  \n+-     bb16: {\n++     bb12: {\n+          StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+-         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+-         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+-         FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+          StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+          _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:15:17: 15:18\n+          StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+          _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:20: 15:21\n+-         goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+      }\n+  \n+-     bb17: {\n++     bb13: {\n+          StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         falseEdge -> [real: bb3, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         goto -> bb2;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+      }\n+  \n+-     bb18: {\n++     bb14: {\n+          StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+          _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+          StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+          _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+-         _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+-         _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n+          StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+          StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+          _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+-         FakeRead(ForMatchedPlace, _13);  // scope 0 at $DIR/match-arm-scopes.rs:15:45: 15:49\n+-         switchInt(_13) -> [false: bb20, otherwise: bb19]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(_13) -> [false: bb15, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+      }\n+  \n+-     bb19: {\n+-         falseEdge -> [real: bb21, imaginary: bb20]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+-     }\n+- \n+-     bb20: {\n++     bb15: {\n+          _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:15:70: 15:71\n+          StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+-         switchInt(move _12) -> [false: bb23, otherwise: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         switchInt(move _12) -> [false: bb18, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+      }\n+  \n+-     bb21: {\n++     bb16: {\n+          _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000003))\n+                                           // mir::Constant\n+                                           // + span: $DIR/match-arm-scopes.rs:15:59: 15:60\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+          StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+          StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n++         goto -> bb11;                    // scope 0 at $DIR/match-arm-scopes.rs:15:52: 15:60\n+      }\n+  \n+-     bb22: {\n++     bb17: {\n+          StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+-         FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+-         FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+-         FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n+          StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+          _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:15:26: 15:27\n+          StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+          _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:15:36: 15:37\n+-         goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb5;                     // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+      }\n+  \n+-     bb23: {\n++     bb18: {\n+          StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         falseEdge -> [real: bb5, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n++         goto -> bb3;                     // scope 0 at $DIR/match-arm-scopes.rs:15:42: 15:73\n+      }\n+  \n+-     bb24: {\n++     bb19: {\n+          StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+          StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n+-         goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+      }\n+  \n+-     bb25: {\n++     bb20: {\n+          _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/match-arm-scopes.rs:16:41: 16:42\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+-         drop(_16) -> [return: bb27, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n++         drop(_16) -> [return: bb22, unwind: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+      }\n+  \n+-     bb26: {\n++     bb21: {\n+          StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+          _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:16: 16:17\n+          StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+          _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:19: 16:20\n+-         goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+      }\n+  \n+-     bb27: {\n++     bb22: {\n+          StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+          StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n+-         goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n++         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+      }\n+  \n+-     bb28: {\n+-         drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     bb23: {\n++         goto -> bb29;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     }\n++ \n++     bb24 (cleanup): {\n++         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     }\n++ \n++     bb25 (cleanup): {\n++         goto -> bb24;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     }\n++ \n++     bb26: {\n++         goto -> bb9;                     // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     }\n++ \n++     bb27 (cleanup): {\n++         goto -> bb1;                     // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     }\n++ \n++     bb28 (cleanup): {\n++         goto -> bb27;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n++     }\n++ \n++     bb29: {\n++         goto -> bb26;                    // scope 0 at $DIR/match-arm-scopes.rs:18:1: 18:2\n+      }\n+  }\n+  "}, {"sha": "dadbc3668cb29bf9200a64bab83ff3d0c55c9e64", "filename": "src/test/mir-opt/match-arm-scopes/rustc.complicated_match.SimplifyCfg-initial.after.mir", "status": "removed", "additions": 0, "deletions": 246, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/71384101ea3b030b80f7def80a37f67e148518b0/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/71384101ea3b030b80f7def80a37f67e148518b0/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes%2Frustc.complicated_match.SimplifyCfg-initial.after.mir?ref=71384101ea3b030b80f7def80a37f67e148518b0", "patch": "@@ -1,246 +0,0 @@\n-// MIR for `complicated_match` after SimplifyCfg-initial\n-\n-fn complicated_match(_1: bool, _2: (bool, bool, std::string::String)) -> i32 {\n-    debug cond => _1;                    // in scope 0 at $DIR/match-arm-scopes.rs:14:22: 14:26\n-    debug items => _2;                   // in scope 0 at $DIR/match-arm-scopes.rs:14:34: 14:39\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/match-arm-scopes.rs:14:66: 14:69\n-    let mut _3: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-    let mut _4: &bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-    let _5: bool;                        // in scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-    let _6: &bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-    let _7: std::string::String;         // in scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-    let _8: &std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-    let mut _9: bool;                    // in scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    let mut _10: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-    let mut _11: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n-    let mut _12: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    let mut _13: bool;                   // in scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-    let mut _14: !;                      // in scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n-    let _15: bool;                       // in scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-    let _16: std::string::String;        // in scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-    scope 1 {\n-        debug a => _5;                   // in scope 1 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        debug a => _6;                   // in scope 1 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        debug s => _7;                   // in scope 1 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        debug s => _8;                   // in scope 1 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-    }\n-    scope 2 {\n-        debug b => _15;                  // in scope 2 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-        debug t => _16;                  // in scope 2 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-    }\n-\n-    bb0: {\n-        FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:15\n-    }\n-\n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/match-arm-scopes.rs:14:1: 19:2\n-    }\n-\n-    bb2: {\n-        falseEdge -> [real: bb9, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:9: 16:22\n-    }\n-\n-    bb3: {\n-        switchInt((_2.1: bool)) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:29: 16:34\n-    }\n-\n-    bb4: {\n-        falseEdge -> [real: bb18, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:25: 16:38\n-    }\n-\n-    bb5: {\n-        switchInt((_2.0: bool)) -> [false: bb7, otherwise: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:17:10: 17:14\n-    }\n-\n-    bb6: {\n-        falseEdge -> [real: bb26, imaginary: bb7]; // scope 0 at $DIR/match-arm-scopes.rs:17:9: 17:21\n-    }\n-\n-    bb7: {\n-        StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n-        _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:32: 17:33\n-        StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:35: 17:36\n-        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb8: {\n-        _0 = const 1_i32;                // scope 1 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match-arm-scopes.rs:16:77: 16:78\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-        drop(_7) -> [return: bb24, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-    }\n-\n-    bb9: {\n-        StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        _6 = &(_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        StorageLive(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-        StorageLive(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        _10 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        FakeRead(ForMatchedPlace, _10);  // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_10) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb10: {\n-        falseEdge -> [real: bb12, imaginary: bb11]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb11: {\n-        _9 = (*_6);                      // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n-        StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _9) -> [false: bb17, otherwise: bb16]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb12: {\n-        _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match-arm-scopes.rs:16:59: 16:60\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n-    }\n-\n-    bb13: {\n-        return;                          // scope 0 at $DIR/match-arm-scopes.rs:19:2: 19:2\n-    }\n-\n-    bb14 (cleanup): {\n-        drop(_2) -> bb1;                 // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb15: {\n-        drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-\n-    bb16: {\n-        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        _5 = (_2.1: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:17: 16:18\n-        StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:20: 16:21\n-        goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb17: {\n-        StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        falseEdge -> [real: bb3, imaginary: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb18: {\n-        StorageLive(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        _6 = &(_2.0: bool);              // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        StorageLive(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        _8 = &(_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        _3 = &shallow (_2.0: bool);      // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        _4 = &shallow (_2.1: bool);      // scope 0 at $DIR/match-arm-scopes.rs:15:11: 15:16\n-        StorageLive(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-        StorageLive(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        _13 = _1;                        // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        FakeRead(ForMatchedPlace, _13);  // scope 0 at $DIR/match-arm-scopes.rs:16:45: 16:49\n-        switchInt(_13) -> [false: bb20, otherwise: bb19]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb19: {\n-        falseEdge -> [real: bb21, imaginary: bb20]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb20: {\n-        _12 = (*_6);                     // scope 0 at $DIR/match-arm-scopes.rs:16:70: 16:71\n-        StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        switchInt(move _12) -> [false: bb23, otherwise: bb22]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb21: {\n-        _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:16:59: 16:60\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match-arm-scopes.rs:16:59: 16:60\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        goto -> bb15;                    // scope 0 at $DIR/match-arm-scopes.rs:16:52: 16:60\n-    }\n-\n-    bb22: {\n-        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        FakeRead(ForMatchGuard, _3);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForMatchGuard, _4);     // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForGuardBinding, _6);   // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        FakeRead(ForGuardBinding, _8);   // scope 0 at $DIR/match-arm-scopes.rs:16:72: 16:73\n-        StorageLive(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        _5 = (_2.0: bool);               // scope 0 at $DIR/match-arm-scopes.rs:16:26: 16:27\n-        StorageLive(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        _7 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:16:36: 16:37\n-        goto -> bb8;                     // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb23: {\n-        StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        falseEdge -> [real: bb5, imaginary: bb6]; // scope 0 at $DIR/match-arm-scopes.rs:16:42: 16:73\n-    }\n-\n-    bb24: {\n-        StorageDead(_7);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:16:77: 16:78\n-        goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb25: {\n-        _0 = const 2_i32;                // scope 2 at $DIR/match-arm-scopes.rs:17:41: 17:42\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/match-arm-scopes.rs:17:41: 17:42\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        drop(_16) -> [return: bb27, unwind: bb14]; // scope 0 at $DIR/match-arm-scopes.rs:17:41: 17:42\n-    }\n-\n-    bb26: {\n-        StorageLive(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-        _15 = (_2.1: bool);              // scope 0 at $DIR/match-arm-scopes.rs:17:16: 17:17\n-        StorageLive(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        _16 = move (_2.2: std::string::String); // scope 0 at $DIR/match-arm-scopes.rs:17:19: 17:20\n-        goto -> bb25;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb27: {\n-        StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:17:41: 17:42\n-        StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:17:41: 17:42\n-        goto -> bb28;                    // scope 0 at $DIR/match-arm-scopes.rs:15:5: 18:6\n-    }\n-\n-    bb28: {\n-        drop(_2) -> [return: bb13, unwind: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:19:1: 19:2\n-    }\n-}"}, {"sha": "21fb7673ce061c9eb1b2fffd812edafde83cb576", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b56ea88414ebd87051b69f27ff3ed55fe0ec12fc/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56ea88414ebd87051b69f27ff3ed55fe0ec12fc/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b56ea88414ebd87051b69f27ff3ed55fe0ec12fc", "patch": "@@ -3135,14 +3135,47 @@ impl<'test> TestCx<'test> {\n         }\n         for l in test_file_contents.lines() {\n             if l.starts_with(\"// EMIT_MIR \") {\n-                let test_name = l.trim_start_matches(\"// EMIT_MIR \");\n-                let expected_file = test_dir.join(test_name);\n-\n-                let dumped_string = if test_name.ends_with(\".diff\") {\n-                    let test_name = test_name.trim_end_matches(\".diff\");\n-                    let before = format!(\"{}.before.mir\", test_name);\n-                    let after = format!(\"{}.after.mir\", test_name);\n-                    let before = self.get_mir_dump_dir().join(before);\n+                let test_name = l.trim_start_matches(\"// EMIT_MIR \").trim();\n+                let mut test_names = test_name.split(' ');\n+                // sometimes we specify two files so that we get a diff between the two files\n+                let test_name = test_names.next().unwrap();\n+                let expected_file;\n+                let from_file;\n+                let to_file;\n+\n+                if test_name.ends_with(\".diff\") {\n+                    let trimmed = test_name.trim_end_matches(\".diff\");\n+                    let test_against = format!(\"{}.after.mir\", trimmed);\n+                    from_file = format!(\"{}.before.mir\", trimmed);\n+                    expected_file = test_name.to_string();\n+                    assert!(\n+                        test_names.next().is_none(),\n+                        \"two mir pass names specified for MIR diff\"\n+                    );\n+                    to_file = Some(test_against);\n+                } else if let Some(first_pass) = test_names.next() {\n+                    let second_pass = test_names.next().unwrap();\n+                    assert!(\n+                        test_names.next().is_none(),\n+                        \"three mir pass names specified for MIR diff\"\n+                    );\n+                    expected_file = format!(\"{}.{}-{}.diff\", test_name, first_pass, second_pass);\n+                    let second_file = format!(\"{}.{}.mir\", test_name, second_pass);\n+                    from_file = format!(\"{}.{}.mir\", test_name, first_pass);\n+                    to_file = Some(second_file);\n+                } else {\n+                    expected_file = test_name.to_string();\n+                    from_file = test_name.to_string();\n+                    assert!(\n+                        test_names.next().is_none(),\n+                        \"two mir pass names specified for MIR dump\"\n+                    );\n+                    to_file = None;\n+                };\n+                let expected_file = test_dir.join(expected_file);\n+\n+                let dumped_string = if let Some(after) = to_file {\n+                    let before = self.get_mir_dump_dir().join(from_file);\n                     let after = self.get_mir_dump_dir().join(after);\n                     debug!(\n                         \"comparing the contents of: {} with {}\",\n@@ -3166,7 +3199,7 @@ impl<'test> TestCx<'test> {\n                 } else {\n                     let mut output_file = PathBuf::new();\n                     output_file.push(self.get_mir_dump_dir());\n-                    output_file.push(test_name);\n+                    output_file.push(&from_file);\n                     debug!(\n                         \"comparing the contents of: {} with {}\",\n                         output_file.display(),\n@@ -3179,7 +3212,7 @@ impl<'test> TestCx<'test> {\n                             output_file.parent().unwrap().display()\n                         );\n                     }\n-                    self.check_mir_test_timestamp(test_name, &output_file);\n+                    self.check_mir_test_timestamp(&from_file, &output_file);\n                     let dumped_string = fs::read_to_string(&output_file).unwrap();\n                     self.normalize_output(&dumped_string, &[])\n                 };"}]}