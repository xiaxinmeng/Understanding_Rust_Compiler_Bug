{"sha": "34024353e86e22e459a1981f563e3d4f43906432", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MDI0MzUzZTg2ZTIyZTQ1OWExOTgxZjU2M2UzZDRmNDM5MDY0MzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-03T09:42:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-03T09:42:00Z"}, "message": "Change borrow debugging so it is disabled by -O", "tree": {"sha": "b9984481268376f1858195de87e354bd3793f7f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9984481268376f1858195de87e354bd3793f7f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34024353e86e22e459a1981f563e3d4f43906432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34024353e86e22e459a1981f563e3d4f43906432", "html_url": "https://github.com/rust-lang/rust/commit/34024353e86e22e459a1981f563e3d4f43906432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34024353e86e22e459a1981f563e3d4f43906432/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bded762601e47b16bd97ef4439536fb9d7af0cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bded762601e47b16bd97ef4439536fb9d7af0cd", "html_url": "https://github.com/rust-lang/rust/commit/9bded762601e47b16bd97ef4439536fb9d7af0cd"}], "stats": {"total": 202, "additions": 129, "deletions": 73}, "files": [{"sha": "e479375401a3b8567a28a1c8ffe6d406d746b8f7", "filename": "src/libcore/rt/env.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34024353e86e22e459a1981f563e3d4f43906432/src%2Flibcore%2Frt%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34024353e86e22e459a1981f563e3d4f43906432/src%2Flibcore%2Frt%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fenv.rs?ref=34024353e86e22e459a1981f563e3d4f43906432", "patch": "@@ -33,8 +33,6 @@ pub struct Environment {\n     argv: **c_char,\n     /// Print GC debugging info (true if env var RUST_DEBUG_MEM is set)\n     debug_mem: bool,\n-    /// Track origin of `@mut` borrows (true if env var RUST_DEBUG_BORROWS is set)\n-    debug_borrows: bool\n }\n \n /// Get the global environment settings"}, {"sha": "27fc3287bdb39668b1df933841595fc920cb4da4", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 66, "deletions": 55, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/34024353e86e22e459a1981f563e3d4f43906432/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34024353e86e22e459a1981f563e3d4f43906432/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=34024353e86e22e459a1981f563e3d4f43906432", "patch": "@@ -19,7 +19,7 @@ use sys;\n use unstable::exchange_alloc;\n use cast::transmute;\n use task::rt::rust_get_task;\n-use option::{Some, None};\n+use option::{Option, Some, None};\n \n #[allow(non_camel_case_types)]\n pub type rust_task = c_void;\n@@ -79,6 +79,19 @@ struct BorrowRecord {\n     line: size_t\n }\n \n+fn try_take_task_borrow_list() -> Option<~[BorrowRecord]> {\n+    unsafe {\n+        let cur_task = rust_get_task();\n+        let ptr = rustrt::rust_take_task_borrow_list(cur_task);\n+        if ptr.is_null() {\n+            None\n+        } else {\n+            let v: ~[BorrowRecord] = transmute(ptr);\n+            Some(v)\n+        }\n+    }\n+}\n+\n fn swap_task_borrow_list(f: &fn(~[BorrowRecord]) -> ~[BorrowRecord]) {\n     unsafe {\n         let cur_task = rust_get_task();\n@@ -93,23 +106,20 @@ fn swap_task_borrow_list(f: &fn(~[BorrowRecord]) -> ~[BorrowRecord]) {\n \n pub unsafe fn clear_task_borrow_list() {\n     // pub because it is used by the box annihilator.\n-    let cur_task = rust_get_task();\n-    let ptr = rustrt::rust_take_task_borrow_list(cur_task);\n-    if !ptr.is_null() {\n-        let _: ~[BorrowRecord] = transmute(ptr);\n-    }\n+    let _ = try_take_task_borrow_list();\n }\n \n fn fail_borrowed(box: *mut BoxRepr, file: *c_char, line: size_t) {\n     debug_ptr(\"fail_borrowed: \", box);\n \n-    if !::rt::env::get().debug_borrows {\n-        let msg = \"borrowed\";\n-        do str::as_buf(msg) |msg_p, _| {\n-            fail_(msg_p as *c_char, file, line);\n+    match try_take_task_borrow_list() {\n+        None => { // not recording borrows\n+            let msg = \"borrowed\";\n+            do str::as_buf(msg) |msg_p, _| {\n+                fail_(msg_p as *c_char, file, line);\n+            }\n         }\n-    } else {\n-        do swap_task_borrow_list |borrow_list| {\n+        Some(borrow_list) => { // recording borrows\n             let mut msg = ~\"borrowed\";\n             let mut sep = \" at \";\n             for borrow_list.each_reverse |entry| {\n@@ -126,7 +136,6 @@ fn fail_borrowed(box: *mut BoxRepr, file: *c_char, line: size_t) {\n             do str::as_buf(msg) |msg_p, _| {\n                 fail_(msg_p as *c_char, file, line)\n             }\n-            borrow_list\n         }\n     }\n }\n@@ -211,34 +220,6 @@ pub unsafe fn borrow_as_imm(a: *u8) {\n     (*a).header.ref_count |= FROZEN_BIT;\n }\n \n-fn add_borrow_to_task_list(a: *mut BoxRepr, file: *c_char, line: size_t) {\n-    do swap_task_borrow_list |borrow_list| {\n-        let mut borrow_list = borrow_list;\n-        borrow_list.push(BorrowRecord {box: a, file: file, line: line});\n-        borrow_list\n-    }\n-}\n-\n-fn remove_borrow_from_task_list(a: *mut BoxRepr, file: *c_char, line: size_t) {\n-    do swap_task_borrow_list |borrow_list| {\n-        let mut borrow_list = borrow_list;\n-        let br = BorrowRecord {box: a, file: file, line: line};\n-        match borrow_list.rposition_elem(&br) {\n-            Some(idx) => {\n-                borrow_list.remove(idx);\n-                borrow_list\n-            }\n-            None => {\n-                let err = fmt!(\"no borrow found, br=%?, borrow_list=%?\",\n-                               br, borrow_list);\n-                do str::as_buf(err) |msg_p, _| {\n-                    fail_(msg_p as *c_char, file, line)\n-                }\n-            }\n-        }\n-    }\n-}\n-\n #[cfg(not(stage0))]\n #[lang=\"borrow_as_imm\"]\n #[inline(always)]\n@@ -252,12 +233,8 @@ pub unsafe fn borrow_as_imm(a: *u8, file: *c_char, line: size_t) -> uint {\n \n     if (ref_count & MUT_BIT) != 0 {\n         fail_borrowed(a, file, line);\n-    } else {\n-        (*a).header.ref_count |= FROZEN_BIT;\n-        if ::rt::env::get().debug_borrows {\n-            add_borrow_to_task_list(a, file, line);\n-        }\n     }\n+\n     ref_count\n }\n \n@@ -273,15 +250,53 @@ pub unsafe fn borrow_as_mut(a: *u8, file: *c_char, line: size_t) -> uint {\n     let ref_count = (*a).header.ref_count;\n     if (ref_count & (MUT_BIT|FROZEN_BIT)) != 0 {\n         fail_borrowed(a, file, line);\n-    } else {\n-        (*a).header.ref_count |= (MUT_BIT|FROZEN_BIT);\n-        if ::rt::env::get().debug_borrows {\n-            add_borrow_to_task_list(a, file, line);\n-        }\n     }\n     ref_count\n }\n \n+\n+#[cfg(not(stage0))]\n+#[lang=\"record_borrow\"]\n+pub unsafe fn record_borrow(a: *u8, old_ref_count: uint,\n+                            file: *c_char, line: size_t) {\n+    if (old_ref_count & ALL_BITS) == 0 {\n+        // was not borrowed before\n+        let a: *mut BoxRepr = transmute(a);\n+        do swap_task_borrow_list |borrow_list| {\n+            let mut borrow_list = borrow_list;\n+            borrow_list.push(BorrowRecord {box: a, file: file, line: line});\n+            borrow_list\n+        }\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+#[lang=\"unrecord_borrow\"]\n+pub unsafe fn unrecord_borrow(a: *u8, old_ref_count: uint,\n+                              file: *c_char, line: size_t) {\n+    if (old_ref_count & ALL_BITS) == 0 {\n+        // was not borrowed before\n+        let a: *mut BoxRepr = transmute(a);\n+        do swap_task_borrow_list |borrow_list| {\n+            let mut borrow_list = borrow_list;\n+            let br = BorrowRecord {box: a, file: file, line: line};\n+            match borrow_list.rposition_elem(&br) {\n+                Some(idx) => {\n+                    borrow_list.remove(idx);\n+                    borrow_list\n+                }\n+                None => {\n+                    let err = fmt!(\"no borrow found, br=%?, borrow_list=%?\",\n+                                   br, borrow_list);\n+                    do str::as_buf(err) |msg_p, _| {\n+                        fail_(msg_p as *c_char, file, line)\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(stage0)]\n #[lang=\"return_to_mut\"]\n #[inline(always)]\n@@ -312,10 +327,6 @@ pub unsafe fn return_to_mut(a: *u8, old_ref_count: uint,\n         debug_ptr(\"              (old) : \", old_ref_count as *());\n         debug_ptr(\"              (new) : \", ref_count as *());\n         debug_ptr(\"              (comb): \", combined as *());\n-\n-        if ::rt::env::get().debug_borrows {\n-            remove_borrow_from_task_list(a, file, line);\n-        }\n     }\n }\n "}, {"sha": "448f33796bcfd75435483592957e36471b744cf3", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34024353e86e22e459a1981f563e3d4f43906432/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34024353e86e22e459a1981f563e3d4f43906432/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=34024353e86e22e459a1981f563e3d4f43906432", "patch": "@@ -70,18 +70,20 @@ pub enum LangItem {\n     ReturnToMutFnLangItem,      // 32\n     CheckNotBorrowedFnLangItem, // 33\n     StrDupUniqFnLangItem,       // 34\n+    RecordBorrowFnLangItem,     // 35\n+    UnrecordBorrowFnLangItem,   // 36\n \n-    StartFnLangItem,            // 35\n+    StartFnLangItem,            // 37\n }\n \n pub struct LanguageItems {\n-    items: [Option<def_id>, ..36]\n+    items: [Option<def_id>, ..38]\n }\n \n pub impl LanguageItems {\n     pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..36 ]\n+            items: [ None, ..38 ]\n         }\n     }\n \n@@ -133,8 +135,10 @@ pub impl LanguageItems {\n             32 => \"return_to_mut\",\n             33 => \"check_not_borrowed\",\n             34 => \"strdup_uniq\",\n+            35 => \"record_borrow\",\n+            36 => \"unrecord_borrow\",\n \n-            35 => \"start\",\n+            37 => \"start\",\n \n             _ => \"???\"\n         }\n@@ -251,6 +255,12 @@ pub impl LanguageItems {\n     pub fn strdup_uniq_fn(&const self) -> def_id {\n         self.items[StrDupUniqFnLangItem as uint].get()\n     }\n+    pub fn record_borrow_fn(&const self) -> def_id {\n+        self.items[RecordBorrowFnLangItem as uint].get()\n+    }\n+    pub fn unrecord_borrow_fn(&const self) -> def_id {\n+        self.items[UnrecordBorrowFnLangItem as uint].get()\n+    }\n     pub fn start_fn(&const self) -> def_id {\n         self.items[StartFnLangItem as uint].get()\n     }\n@@ -302,6 +312,8 @@ fn LanguageItemCollector(crate: @crate,\n     item_refs.insert(@~\"check_not_borrowed\",\n                      CheckNotBorrowedFnLangItem as uint);\n     item_refs.insert(@~\"strdup_uniq\", StrDupUniqFnLangItem as uint);\n+    item_refs.insert(@~\"record_borrow\", RecordBorrowFnLangItem as uint);\n+    item_refs.insert(@~\"unrecord_borrow\", UnrecordBorrowFnLangItem as uint);\n     item_refs.insert(@~\"start\", StartFnLangItem as uint);\n \n     LanguageItemCollector {"}, {"sha": "2a13cf73f8bba392c4b9a361be5ac19f70a33f09", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/34024353e86e22e459a1981f563e3d4f43906432/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34024353e86e22e459a1981f563e3d4f43906432/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=34024353e86e22e459a1981f563e3d4f43906432", "patch": "@@ -489,15 +489,37 @@ pub fn add_clean_return_to_mut(bcx: block,\n             clean_temp(\n                 frozen_val_ref,\n                 |bcx| {\n+                    let mut bcx = bcx;\n+\n+                    let box_ptr =\n+                        build::Load(bcx,\n+                                    build::PointerCast(bcx,\n+                                                       frozen_val_ref,\n+                                                       T_ptr(T_ptr(T_i8()))));\n+\n+                    let bits_val =\n+                        build::Load(bcx,\n+                                    bits_val_ref);\n+\n+                    if bcx.tcx().sess.opts.optimize == session::No {\n+                        bcx = callee::trans_lang_call(\n+                            bcx,\n+                            bcx.tcx().lang_items.unrecord_borrow_fn(),\n+                            ~[\n+                                box_ptr,\n+                                bits_val,\n+                                filename_val,\n+                                line_val\n+                            ],\n+                            expr::Ignore);\n+                    }\n+\n                     callee::trans_lang_call(\n                         bcx,\n                         bcx.tcx().lang_items.return_to_mut_fn(),\n                         ~[\n-                            build::Load(bcx,\n-                                        build::PointerCast(bcx,\n-                                                           frozen_val_ref,\n-                                                           T_ptr(T_ptr(T_i8())))),\n-                            build::Load(bcx, bits_val_ref),\n+                            box_ptr,\n+                            bits_val,\n                             filename_val,\n                             line_val\n                         ],"}, {"sha": "af7165c53a7c2e4974ab73f3e7e70e6d3485a3ca", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34024353e86e22e459a1981f563e3d4f43906432/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34024353e86e22e459a1981f563e3d4f43906432/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=34024353e86e22e459a1981f563e3d4f43906432", "patch": "@@ -101,6 +101,7 @@ use middle::trans::type_of;\n use middle::ty;\n use util::common::indenter;\n use util::ppaux::ty_to_str;\n+use driver::session;\n \n use core::container::Set; // XXX: this should not be necessary\n use core::to_bytes;\n@@ -564,19 +565,34 @@ pub impl Datum {\n                     DynaMut => bcx.tcx().lang_items.borrow_as_mut_fn(),\n                 };\n \n+                let box_ptr = Load(bcx,\n+                                   PointerCast(bcx,\n+                                               scratch.val,\n+                                               T_ptr(T_ptr(T_i8()))));\n+\n                 bcx = callee::trans_lang_call(\n                     bcx,\n                     freeze_did,\n                     ~[\n-                        Load(bcx,\n-                             PointerCast(bcx,\n-                                         scratch.val,\n-                                         T_ptr(T_ptr(T_i8())))),\n+                        box_ptr,\n                         filename,\n                         line\n                     ],\n                     expr::SaveIn(scratch_bits.val));\n \n+                if bcx.tcx().sess.opts.optimize == session::No {\n+                    bcx = callee::trans_lang_call(\n+                        bcx,\n+                        bcx.tcx().lang_items.record_borrow_fn(),\n+                        ~[\n+                            box_ptr,\n+                            Load(bcx, scratch_bits.val),\n+                            filename,\n+                            line\n+                        ],\n+                        expr::Ignore);\n+                }\n+\n                 add_clean_return_to_mut(\n                     cleanup_bcx, scratch.val, scratch_bits.val,\n                     filename, line);"}, {"sha": "041b4efac52a2444c80b73d571dc99fd6698c5de", "filename": "src/rt/rust_env.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34024353e86e22e459a1981f563e3d4f43906432/src%2Frt%2Frust_env.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/34024353e86e22e459a1981f563e3d4f43906432/src%2Frt%2Frust_env.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.cpp?ref=34024353e86e22e459a1981f563e3d4f43906432", "patch": "@@ -24,7 +24,6 @@\n #define RUST_SEED \"RUST_SEED\"\n #define RUST_POISON_ON_FREE \"RUST_POISON_ON_FREE\"\n #define RUST_DEBUG_MEM \"RUST_DEBUG_MEM\"\n-#define RUST_DEBUG_BORROWS \"RUST_DEBUG_BORROWS\"\n \n #if defined(__WIN32__)\n static int\n@@ -131,7 +130,6 @@ load_env(int argc, char **argv) {\n     env->argc = argc;\n     env->argv = argv;\n     env->debug_mem = getenv(RUST_DEBUG_MEM) != NULL;\n-    env->debug_borrows = getenv(RUST_DEBUG_BORROWS) != NULL;\n     return env;\n }\n "}, {"sha": "df27f7674f265cb5c60d588c435fe131f0e99e77", "filename": "src/rt/rust_env.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34024353e86e22e459a1981f563e3d4f43906432/src%2Frt%2Frust_env.h", "raw_url": "https://github.com/rust-lang/rust/raw/34024353e86e22e459a1981f563e3d4f43906432/src%2Frt%2Frust_env.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.h?ref=34024353e86e22e459a1981f563e3d4f43906432", "patch": "@@ -28,7 +28,6 @@ struct rust_env {\n     int argc;\n     char **argv;\n     rust_bool debug_mem;\n-    rust_bool debug_borrows;\n };\n \n rust_env* load_env(int argc, char **argv);"}]}