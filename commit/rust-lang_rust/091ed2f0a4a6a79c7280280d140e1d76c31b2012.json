{"sha": "091ed2f0a4a6a79c7280280d140e1d76c31b2012", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MWVkMmYwYTRhNmE3OWM3MjgwMjgwZDE0MGUxZDc2YzMxYjIwMTI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-02-15T02:21:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-15T02:21:44Z"}, "message": "Merge pull request #2086 from jugglerchris/difflines_mode\n\nAdd a new \"modified lines\" write mode.", "tree": {"sha": "4654b4dfef3268003a8c2de6fa6c18a6ec10366f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4654b4dfef3268003a8c2de6fa6c18a6ec10366f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/091ed2f0a4a6a79c7280280d140e1d76c31b2012", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJahO64CRBK7hj4Ov3rIwAAdHIIABkTcE4JAlpbmO2+/ETtT4E0\nnHkFvpHlZQ3lhC4aRx7Udgct45PYwxtkH8fuPtQzTqNS7xclXgl0O+iH6y/ZEd5a\noQyelV57wsXtQUfFZa/w9nFJozWGTH/KjAtfSzbQzpvU5H9Yfe88xoiyu8605+oV\nW5araLy+3BKHh4lYoW8wdPpdPhUm7sk06VxPBQNPSA/7NdfaEHGMTltjN56VPbs8\nXs7b0C0BTWx98hvWrZZA6W8IfuIceeWLh0MxBl4kgis+EyvlIoErXZ++FLGk+3ZW\nO9kTmbN/GRJLnR5N2qpxIzi6Om//hnzy1tevbKSqqPHbsklMDdPyHMP6i49aPSg=\n=LFI/\n-----END PGP SIGNATURE-----\n", "payload": "tree 4654b4dfef3268003a8c2de6fa6c18a6ec10366f\nparent bf355de78ee772c1d491967cc713b9187f0db091\nparent 2a3caa7f577c0ff3e98106049df4662401c41a73\nauthor Nick Cameron <nrc@ncameron.org> 1518661304 +1300\ncommitter GitHub <noreply@github.com> 1518661304 +1300\n\nMerge pull request #2086 from jugglerchris/difflines_mode\n\nAdd a new \"modified lines\" write mode."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/091ed2f0a4a6a79c7280280d140e1d76c31b2012", "html_url": "https://github.com/rust-lang/rust/commit/091ed2f0a4a6a79c7280280d140e1d76c31b2012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/091ed2f0a4a6a79c7280280d140e1d76c31b2012/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf355de78ee772c1d491967cc713b9187f0db091", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf355de78ee772c1d491967cc713b9187f0db091", "html_url": "https://github.com/rust-lang/rust/commit/bf355de78ee772c1d491967cc713b9187f0db091"}, {"sha": "2a3caa7f577c0ff3e98106049df4662401c41a73", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3caa7f577c0ff3e98106049df4662401c41a73", "html_url": "https://github.com/rust-lang/rust/commit/2a3caa7f577c0ff3e98106049df4662401c41a73"}], "stats": {"total": 198, "additions": 191, "deletions": 7}, "files": [{"sha": "2bc9ceace87e3c8c703ae5b5f5d7c36df64a298e", "filename": "rustfmt-config/src/config_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-config%2Fsrc%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-config%2Fsrc%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Fconfig_type.rs?ref=091ed2f0a4a6a79c7280280d140e1d76c31b2012", "patch": "@@ -107,7 +107,7 @@ macro_rules! create_config {\n \n         // Macro hygiene won't allow us to make `set_$i()` methods on Config\n         // for each item, so this struct is used to give the API to set values:\n-        // `config.get().option(false)`. It's pretty ugly. Consider replacing\n+        // `config.set().option(false)`. It's pretty ugly. Consider replacing\n         // with `config.set_option(false)` if we ever get a stable/usable\n         // `concat_idents!()`.\n         pub struct ConfigSetter<'a>(&'a mut Config);"}, {"sha": "6aa3db4f3df417fbbefe6d9dd08233b236679b40", "filename": "rustfmt-config/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-config%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-config%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Foptions.rs?ref=091ed2f0a4a6a79c7280280d140e1d76c31b2012", "patch": "@@ -176,6 +176,8 @@ configuration_option_enum! { WriteMode:\n     Plain,\n     // Outputs a checkstyle XML file.\n     Checkstyle,\n+    // Output the changed lines (for internal value only)\n+    Modified,\n }\n \n configuration_option_enum! { Color:"}, {"sha": "ee2253043a12deffbfce61f0d5be66cfa3f52624", "filename": "rustfmt-core/src/filemap.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Fsrc%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Fsrc%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Ffilemap.rs?ref=091ed2f0a4a6a79c7280280d140e1d76c31b2012", "patch": "@@ -16,7 +16,7 @@ use std::path::Path;\n \n use checkstyle::{output_checkstyle_file, output_footer, output_header};\n use config::{Config, NewlineStyle, WriteMode};\n-use rustfmt_diff::{make_diff, print_diff, Mismatch};\n+use rustfmt_diff::{make_diff, output_modified, print_diff, Mismatch};\n use syntax::codemap::FileName;\n \n use FileRecord;\n@@ -164,6 +164,15 @@ where\n                 return Ok(has_diff);\n             }\n         }\n+        WriteMode::Modified => {\n+            let filename = filename_to_path();\n+            if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n+                let mismatch = make_diff(&ori, &fmt, 0);\n+                let has_diff = !mismatch.is_empty();\n+                output_modified(out, mismatch);\n+                return Ok(has_diff);\n+            }\n+        }\n         WriteMode::Checkstyle => {\n             let filename = filename_to_path();\n             let diff = create_diff(filename, text, config)?;"}, {"sha": "1b0ffa6e09931583f83239d213967ed09a1702cb", "filename": "rustfmt-core/src/lib.rs", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Flib.rs?ref=091ed2f0a4a6a79c7280280d140e1d76c31b2012", "patch": "@@ -26,7 +26,7 @@ extern crate unicode_segmentation;\n \n use std::collections::HashMap;\n use std::fmt;\n-use std::io::{self, stdout, Write};\n+use std::io::{self, stdout, BufRead, Write};\n use std::iter::repeat;\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -723,6 +723,79 @@ pub fn format_input<T: Write>(\n     }\n }\n \n+/// A single span of changed lines, with 0 or more removed lines\n+/// and a vector of 0 or more inserted lines.\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct ModifiedChunk {\n+    /// The first to be removed from the original text\n+    pub line_number_orig: u32,\n+    /// The number of lines which have been replaced\n+    pub lines_removed: u32,\n+    /// The new lines\n+    pub lines: Vec<String>,\n+}\n+\n+/// Set of changed sections of a file.\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct ModifiedLines {\n+    /// The set of changed chunks.\n+    pub chunks: Vec<ModifiedChunk>,\n+}\n+\n+/// The successful result of formatting via get_modified_lines().\n+pub struct ModifiedLinesResult {\n+    /// The high level summary details\n+    pub summary: Summary,\n+    /// The result Filemap\n+    pub filemap: FileMap,\n+    /// Map of formatting errors\n+    pub report: FormatReport,\n+    /// The sets of updated lines.\n+    pub modified_lines: ModifiedLines,\n+}\n+\n+/// Format a file and return a `ModifiedLines` data structure describing\n+/// the changed ranges of lines.\n+pub fn get_modified_lines(\n+    input: Input,\n+    config: &Config,\n+) -> Result<ModifiedLinesResult, (io::Error, Summary)> {\n+    let mut data = Vec::new();\n+\n+    let mut config = config.clone();\n+    config.set().write_mode(config::WriteMode::Modified);\n+    let (summary, filemap, formatreport) = format_input(input, &config, Some(&mut data))?;\n+\n+    let mut lines = data.lines();\n+    let mut chunks = Vec::new();\n+    while let Some(Ok(header)) = lines.next() {\n+        // Parse the header line\n+        let values: Vec<_> = header\n+            .split(' ')\n+            .map(|s| s.parse::<u32>().unwrap())\n+            .collect();\n+        assert_eq!(values.len(), 3);\n+        let line_number_orig = values[0];\n+        let lines_removed = values[1];\n+        let num_added = values[2];\n+        let mut added_lines = Vec::new();\n+        for _ in 0..num_added {\n+            added_lines.push(lines.next().unwrap().unwrap());\n+        }\n+        chunks.push(ModifiedChunk {\n+            line_number_orig,\n+            lines_removed,\n+            lines: added_lines,\n+        });\n+    }\n+    Ok(ModifiedLinesResult {\n+        summary: summary,\n+        filemap: filemap,\n+        report: formatreport,\n+        modified_lines: ModifiedLines { chunks },\n+    })\n+}\n+\n #[derive(Debug)]\n pub enum Input {\n     File(PathBuf),"}, {"sha": "f99191576209b401c52be3c9ab15c6267439afe7", "filename": "rustfmt-core/src/rustfmt_diff.rs", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Fsrc%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Fsrc%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Frustfmt_diff.rs?ref=091ed2f0a4a6a79c7280280d140e1d76c31b2012", "patch": "@@ -13,6 +13,7 @@ use diff;\n use std::collections::VecDeque;\n use std::io;\n use term;\n+use std::io::Write;\n use utils::use_colored_tty;\n \n #[derive(Debug, PartialEq)]\n@@ -24,14 +25,19 @@ pub enum DiffLine {\n \n #[derive(Debug, PartialEq)]\n pub struct Mismatch {\n+    /// The line number in the formatted version.\n     pub line_number: u32,\n+    /// The line number in the original version.\n+    pub line_number_orig: u32,\n+    /// The set of lines (context and old/new) in the mismatch.\n     pub lines: Vec<DiffLine>,\n }\n \n impl Mismatch {\n-    fn new(line_number: u32) -> Mismatch {\n+    fn new(line_number: u32, line_number_orig: u32) -> Mismatch {\n         Mismatch {\n             line_number,\n+            line_number_orig,\n             lines: Vec::new(),\n         }\n     }\n@@ -77,30 +83,38 @@ impl OutputWriter {\n // Produces a diff between the expected output and actual output of rustfmt.\n pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n     let mut line_number = 1;\n+    let mut line_number_orig = 1;\n     let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n     let mut lines_since_mismatch = context_size + 1;\n     let mut results = Vec::new();\n-    let mut mismatch = Mismatch::new(0);\n+    let mut mismatch = Mismatch::new(0, 0);\n \n     for result in diff::lines(expected, actual) {\n         match result {\n             diff::Result::Left(str) => {\n                 if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n                     results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                    mismatch = Mismatch::new(\n+                        line_number - context_queue.len() as u32,\n+                        line_number_orig - context_queue.len() as u32,\n+                    );\n                 }\n \n                 while let Some(line) = context_queue.pop_front() {\n                     mismatch.lines.push(DiffLine::Context(line.to_owned()));\n                 }\n \n                 mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n+                line_number_orig += 1;\n                 lines_since_mismatch = 0;\n             }\n             diff::Result::Right(str) => {\n                 if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n                     results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                    mismatch = Mismatch::new(\n+                        line_number - context_queue.len() as u32,\n+                        line_number_orig - context_queue.len() as u32,\n+                    );\n                 }\n \n                 while let Some(line) = context_queue.pop_front() {\n@@ -123,6 +137,7 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n                 }\n \n                 line_number += 1;\n+                line_number_orig += 1;\n                 lines_since_mismatch += 1;\n             }\n         }\n@@ -158,6 +173,42 @@ where\n     }\n }\n \n+/// Convert a Mismatch into a serialised form which just includes\n+/// enough information to modify the original file.\n+/// Each section starts with a line with three integers, space separated:\n+///     lineno num_removed num_added\n+/// followed by (num_added) lines of added text.  The line numbers are\n+/// relative to the original file.\n+pub fn output_modified<W>(mut out: W, diff: Vec<Mismatch>)\n+where\n+    W: Write,\n+{\n+    for mismatch in diff {\n+        let (num_removed, num_added) = mismatch.lines.iter().fold((0, 0), |(rem, add), line| {\n+            match *line {\n+                DiffLine::Context(_) => panic!(\"No Context expected\"),\n+                DiffLine::Expected(_) => (rem, add + 1),\n+                DiffLine::Resulting(_) => (rem + 1, add),\n+            }\n+        });\n+        // Write a header with enough information to separate the modified lines.\n+        writeln!(\n+            out,\n+            \"{} {} {}\",\n+            mismatch.line_number_orig, num_removed, num_added\n+        ).unwrap();\n+\n+        for line in mismatch.lines {\n+            match line {\n+                DiffLine::Context(_) | DiffLine::Resulting(_) => (),\n+                DiffLine::Expected(ref str) => {\n+                    writeln!(out, \"{}\", str).unwrap();\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{make_diff, Mismatch};\n@@ -173,6 +224,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 2,\n+                    line_number_orig: 2,\n                     lines: vec![\n                         Context(\"two\".to_owned()),\n                         Resulting(\"three\".to_owned()),\n@@ -194,6 +246,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 2,\n+                    line_number_orig: 2,\n                     lines: vec![\n                         Context(\"two\".to_owned()),\n                         Resulting(\"three\".to_owned()),\n@@ -203,6 +256,7 @@ mod test {\n                 },\n                 Mismatch {\n                     line_number: 5,\n+                    line_number_orig: 5,\n                     lines: vec![\n                         Resulting(\"five\".to_owned()),\n                         Expected(\"cinq\".to_owned()),\n@@ -223,6 +277,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 3,\n+                    line_number_orig: 3,\n                     lines: vec![Resulting(\"three\".to_owned()), Expected(\"trois\".to_owned())],\n                 },\n             ]\n@@ -239,6 +294,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 5,\n+                    line_number_orig: 5,\n                     lines: vec![Context(\"five\".to_owned()), Expected(\"\".to_owned())],\n                 },\n             ]"}, {"sha": "3a990ebe88c5247a31e8c4795a5750841ccb29b7", "filename": "rustfmt-core/tests/lib.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Flib.rs?ref=091ed2f0a4a6a79c7280280d140e1d76c31b2012", "patch": "@@ -143,6 +143,30 @@ fn checkstyle_test() {\n     assert_output(Path::new(filename), Path::new(expected_filename));\n }\n \n+#[test]\n+fn modified_test() {\n+    // Test \"modified\" output\n+    let filename = \"tests/writemode/source/modified.rs\";\n+    let result = get_modified_lines(Input::File(filename.into()), &Config::default()).unwrap();\n+    assert_eq!(\n+        result.modified_lines,\n+        ModifiedLines {\n+            chunks: vec![\n+                ModifiedChunk {\n+                    line_number_orig: 4,\n+                    lines_removed: 4,\n+                    lines: vec![\"fn blah() {}\".into()],\n+                },\n+                ModifiedChunk {\n+                    line_number_orig: 9,\n+                    lines_removed: 6,\n+                    lines: vec![\"#[cfg(a, b)]\".into(), \"fn main() {}\".into()],\n+                },\n+            ],\n+        }\n+    );\n+}\n+\n // Helper function for comparing the results of rustfmt\n // to a known output file generated by one of the write modes.\n fn assert_output(source: &Path, expected_filename: &Path) {\n@@ -529,6 +553,7 @@ fn rustfmt_diff_make_diff_tests() {\n         vec![\n             Mismatch {\n                 line_number: 1,\n+                line_number_orig: 1,\n                 lines: vec![\n                     DiffLine::Context(\"a\".into()),\n                     DiffLine::Resulting(\"b\".into()),"}, {"sha": "948beb348dbbf4c6f7f0ae099f84cc58763129fe", "filename": "rustfmt-core/tests/writemode/source/modified.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Ftests%2Fwritemode%2Fsource%2Fmodified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Ftests%2Fwritemode%2Fsource%2Fmodified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fwritemode%2Fsource%2Fmodified.rs?ref=091ed2f0a4a6a79c7280280d140e1d76c31b2012", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-write_mode: modified\n+// Test \"modified\" output\n+\n+fn\n+blah\n+()\n+{ }\n+\n+\n+#[cfg\n+(  a , b\n+)]\n+fn\n+main() {}"}, {"sha": "5c0539a665e6833e40d6bdfbca0147fc3f47ad2b", "filename": "rustfmt-core/tests/writemode/target/modified.txt", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Ftests%2Fwritemode%2Ftarget%2Fmodified.txt", "raw_url": "https://github.com/rust-lang/rust/raw/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-core%2Ftests%2Fwritemode%2Ftarget%2Fmodified.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fwritemode%2Ftarget%2Fmodified.txt?ref=091ed2f0a4a6a79c7280280d140e1d76c31b2012", "patch": "@@ -0,0 +1,5 @@\n+4 4 1\n+fn blah() {}\n+10 5 2\n+#[cfg(a, b)]\n+fn main() {}"}]}