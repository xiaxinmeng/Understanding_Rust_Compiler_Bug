{"sha": "348a0585054d633b50f515d95e3c42ea8721e106", "node_id": "C_kwDOAAsO6NoAKDM0OGEwNTg1MDU0ZDYzM2I1MGY1MTVkOTVlM2M0MmVhODcyMWUxMDY", "commit": {"author": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-11-08T17:53:08Z"}, "committer": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-11-28T15:47:08Z"}, "message": "Extract WStrUnits to sys_common::wstr\n\nThis commit extracts WStrUnits from sys::windows::args to sys_common::wstr. This\nallows using the same structure for other targets which use wtf8 (example UEFI).\n\nThis was originally a part of https://github.com/rust-lang/rust/pull/100316\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>", "tree": {"sha": "913d5180c3e6e3370f7a00b9048ebf4ad911d8e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/913d5180c3e6e3370f7a00b9048ebf4ad911d8e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/348a0585054d633b50f515d95e3c42ea8721e106", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE38wTHvJPLWVvpQTWBc71x4nlWnQFAmOE2BYACgkQBc71x4nl\nWnSbew//eQjYmeBheqF1YL+5ZuKN3CKnC+TKnZxPmcmdnLz4QxAYlJLzcMjDgMG7\n2oOXatQZbEVGUQ6VNaIDm+JMzADFollBk8aN8hZ/62fHL1Ih2Tks9oP4Kh9dy4HS\nE4uMZvlESMh2VzgEoCb6IlpPX1fubGqpWx/VGNhJWo7sPoBGydwvHGPHbSlIeA9S\nOlIQhZ9FWb3GFpkjDRNJop9ODHkLqJqYBnBgXQTD9cavo/1jIKVMUkaHddoarLyD\nfaPX1NG5Tjynx2BgZFxqrqO5JiYXy4D4u9iA8UnrHQyrMaGOnXN9fpwJOagSHRF6\n9B+KUeRxNJOzwrUx0BPZDp+d3y8Te5/FxVJp58twnkkErRTBhpNxcr8o6aeKHFhA\nZB8pmCq1Qs9XYWau7ZAB1eCj94/zSVW93+W/egQkQhcnEb/3oN7uaC+mfBGQx7vX\nIjgbyROXhiZ28gY7xW3/6WZCHjC7Q855Ytv1pfW1w8TixRMZkUq/4jpnXLYhF/S3\nbmfdXT488iMMojjjFVA1s5GShVsUFIYwxH4VvEHqikXA3QCUgjF6DvD/KIGGxADX\nH01q2ZmgPUMjkHM9GeKTeyqF0dbn0QQP47JNI16tHaLXsq/x322thidh/StgZK8O\nC24MCbpSwrkx/WOprSEA6oEF0jELgBk7HhM/4Uzc0tzAigItT+E=\n=mkhu\n-----END PGP SIGNATURE-----", "payload": "tree 913d5180c3e6e3370f7a00b9048ebf4ad911d8e5\nparent 57d3c58ed6e0faf89a62411f96c000ffc9fd3937\nauthor Ayush Singh <ayushsingh1325@gmail.com> 1667929988 +0530\ncommitter Ayush Singh <ayushsingh1325@gmail.com> 1669650428 +0530\n\nExtract WStrUnits to sys_common::wstr\n\nThis commit extracts WStrUnits from sys::windows::args to sys_common::wstr. This\nallows using the same structure for other targets which use wtf8 (example UEFI).\n\nThis was originally a part of https://github.com/rust-lang/rust/pull/100316\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/348a0585054d633b50f515d95e3c42ea8721e106", "html_url": "https://github.com/rust-lang/rust/commit/348a0585054d633b50f515d95e3c42ea8721e106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/348a0585054d633b50f515d95e3c42ea8721e106/comments", "author": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d3c58ed6e0faf89a62411f96c000ffc9fd3937", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d3c58ed6e0faf89a62411f96c000ffc9fd3937", "html_url": "https://github.com/rust-lang/rust/commit/57d3c58ed6e0faf89a62411f96c000ffc9fd3937"}], "stats": {"total": 114, "additions": 62, "deletions": 52}, "files": [{"sha": "6741ae46d32ddfa79c265e46053ce71680e652b6", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 2, "deletions": 52, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/348a0585054d633b50f515d95e3c42ea8721e106/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348a0585054d633b50f515d95e3c42ea8721e106/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=348a0585054d633b50f515d95e3c42ea8721e106", "patch": "@@ -9,17 +9,16 @@ mod tests;\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::io;\n-use crate::marker::PhantomData;\n use crate::num::NonZeroU16;\n use crate::os::windows::prelude::*;\n use crate::path::PathBuf;\n-use crate::ptr::NonNull;\n use crate::sys::c;\n use crate::sys::process::ensure_no_nuls;\n use crate::sys::windows::os::current_exe;\n+use crate::sys_common::wstr::WStrUnits;\n use crate::vec;\n \n-use core::iter;\n+use crate::iter;\n \n /// This is the const equivalent to `NonZeroU16::new(n).unwrap()`\n ///\n@@ -199,55 +198,6 @@ impl ExactSizeIterator for Args {\n     }\n }\n \n-/// A safe iterator over a LPWSTR\n-/// (aka a pointer to a series of UTF-16 code units terminated by a NULL).\n-struct WStrUnits<'a> {\n-    // The pointer must never be null...\n-    lpwstr: NonNull<u16>,\n-    // ...and the memory it points to must be valid for this lifetime.\n-    lifetime: PhantomData<&'a [u16]>,\n-}\n-impl WStrUnits<'_> {\n-    /// Create the iterator. Returns `None` if `lpwstr` is null.\n-    ///\n-    /// SAFETY: `lpwstr` must point to a null-terminated wide string that lives\n-    /// at least as long as the lifetime of this struct.\n-    unsafe fn new(lpwstr: *const u16) -> Option<Self> {\n-        Some(Self { lpwstr: NonNull::new(lpwstr as _)?, lifetime: PhantomData })\n-    }\n-    fn peek(&self) -> Option<NonZeroU16> {\n-        // SAFETY: It's always safe to read the current item because we don't\n-        // ever move out of the array's bounds.\n-        unsafe { NonZeroU16::new(*self.lpwstr.as_ptr()) }\n-    }\n-    /// Advance the iterator while `predicate` returns true.\n-    /// Returns the number of items it advanced by.\n-    fn advance_while<P: FnMut(NonZeroU16) -> bool>(&mut self, mut predicate: P) -> usize {\n-        let mut counter = 0;\n-        while let Some(w) = self.peek() {\n-            if !predicate(w) {\n-                break;\n-            }\n-            counter += 1;\n-            self.next();\n-        }\n-        counter\n-    }\n-}\n-impl Iterator for WStrUnits<'_> {\n-    // This can never return zero as that marks the end of the string.\n-    type Item = NonZeroU16;\n-    fn next(&mut self) -> Option<NonZeroU16> {\n-        // SAFETY: If NULL is reached we immediately return.\n-        // Therefore it's safe to advance the pointer after that.\n-        unsafe {\n-            let next = self.peek()?;\n-            self.lpwstr = NonNull::new_unchecked(self.lpwstr.as_ptr().add(1));\n-            Some(next)\n-        }\n-    }\n-}\n-\n #[derive(Debug)]\n pub(crate) enum Arg {\n     /// Add quotes (if needed)"}, {"sha": "53259e8dbbd46faa479052959d85a27ceee3f1d9", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/348a0585054d633b50f515d95e3c42ea8721e106/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348a0585054d633b50f515d95e3c42ea8721e106/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=348a0585054d633b50f515d95e3c42ea8721e106", "patch": "@@ -35,6 +35,7 @@ pub mod thread;\n pub mod thread_info;\n pub mod thread_local_dtor;\n pub mod thread_parker;\n+pub mod wstr;\n pub mod wtf8;\n \n cfg_if::cfg_if! {"}, {"sha": "b230fd1a829f72864139c173e310b6dbcde70b58", "filename": "library/std/src/sys_common/wstr.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/348a0585054d633b50f515d95e3c42ea8721e106/library%2Fstd%2Fsrc%2Fsys_common%2Fwstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348a0585054d633b50f515d95e3c42ea8721e106/library%2Fstd%2Fsrc%2Fsys_common%2Fwstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwstr.rs?ref=348a0585054d633b50f515d95e3c42ea8721e106", "patch": "@@ -0,0 +1,59 @@\n+//! This module contains constructs to work with 16-bit characters (UCS-2 or UTF-16)\n+#![allow(dead_code)]\n+\n+use crate::marker::PhantomData;\n+use crate::num::NonZeroU16;\n+use crate::ptr::NonNull;\n+\n+/// A safe iterator over a LPWSTR\n+/// (aka a pointer to a series of UTF-16 code units terminated by a NULL).\n+pub struct WStrUnits<'a> {\n+    // The pointer must never be null...\n+    lpwstr: NonNull<u16>,\n+    // ...and the memory it points to must be valid for this lifetime.\n+    lifetime: PhantomData<&'a [u16]>,\n+}\n+\n+impl WStrUnits<'_> {\n+    /// Create the iterator. Returns `None` if `lpwstr` is null.\n+    ///\n+    /// SAFETY: `lpwstr` must point to a null-terminated wide string that lives\n+    /// at least as long as the lifetime of this struct.\n+    pub unsafe fn new(lpwstr: *const u16) -> Option<Self> {\n+        Some(Self { lpwstr: NonNull::new(lpwstr as _)?, lifetime: PhantomData })\n+    }\n+\n+    pub fn peek(&self) -> Option<NonZeroU16> {\n+        // SAFETY: It's always safe to read the current item because we don't\n+        // ever move out of the array's bounds.\n+        unsafe { NonZeroU16::new(*self.lpwstr.as_ptr()) }\n+    }\n+\n+    /// Advance the iterator while `predicate` returns true.\n+    /// Returns the number of items it advanced by.\n+    pub fn advance_while<P: FnMut(NonZeroU16) -> bool>(&mut self, mut predicate: P) -> usize {\n+        let mut counter = 0;\n+        while let Some(w) = self.peek() {\n+            if !predicate(w) {\n+                break;\n+            }\n+            counter += 1;\n+            self.next();\n+        }\n+        counter\n+    }\n+}\n+\n+impl Iterator for WStrUnits<'_> {\n+    // This can never return zero as that marks the end of the string.\n+    type Item = NonZeroU16;\n+    fn next(&mut self) -> Option<NonZeroU16> {\n+        // SAFETY: If NULL is reached we immediately return.\n+        // Therefore it's safe to advance the pointer after that.\n+        unsafe {\n+            let next = self.peek()?;\n+            self.lpwstr = NonNull::new_unchecked(self.lpwstr.as_ptr().add(1));\n+            Some(next)\n+        }\n+    }\n+}"}]}