{"sha": "c3cc3612948be235577ccfd55990062829c8cfbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzY2MzNjEyOTQ4YmUyMzU1NzdjY2ZkNTU5OTAwNjI4MjljOGNmYmI=", "commit": {"author": {"name": "Robin van Dijk", "email": "robin@robinjint.nl", "date": "2020-10-05T17:27:29Z"}, "committer": {"name": "Robin van Dijk", "email": "robin@robinjint.nl", "date": "2020-10-05T17:27:29Z"}, "message": "honor content_format clientcap\n\nThis removes all markdown when the client does not support the markdown MarkupKind\n\nOtherwise the output on the editor will have some markdown boilerplate, making it less readable", "tree": {"sha": "aa9b61453868c37d784e12dde6a7d28d0188969b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9b61453868c37d784e12dde6a7d28d0188969b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3cc3612948be235577ccfd55990062829c8cfbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3cc3612948be235577ccfd55990062829c8cfbb", "html_url": "https://github.com/rust-lang/rust/commit/c3cc3612948be235577ccfd55990062829c8cfbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3cc3612948be235577ccfd55990062829c8cfbb/comments", "author": {"login": "robinvd", "id": 22073483, "node_id": "MDQ6VXNlcjIyMDczNDgz", "avatar_url": "https://avatars.githubusercontent.com/u/22073483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robinvd", "html_url": "https://github.com/robinvd", "followers_url": "https://api.github.com/users/robinvd/followers", "following_url": "https://api.github.com/users/robinvd/following{/other_user}", "gists_url": "https://api.github.com/users/robinvd/gists{/gist_id}", "starred_url": "https://api.github.com/users/robinvd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robinvd/subscriptions", "organizations_url": "https://api.github.com/users/robinvd/orgs", "repos_url": "https://api.github.com/users/robinvd/repos", "events_url": "https://api.github.com/users/robinvd/events{/privacy}", "received_events_url": "https://api.github.com/users/robinvd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robinvd", "id": 22073483, "node_id": "MDQ6VXNlcjIyMDczNDgz", "avatar_url": "https://avatars.githubusercontent.com/u/22073483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robinvd", "html_url": "https://github.com/robinvd", "followers_url": "https://api.github.com/users/robinvd/followers", "following_url": "https://api.github.com/users/robinvd/following{/other_user}", "gists_url": "https://api.github.com/users/robinvd/gists{/gist_id}", "starred_url": "https://api.github.com/users/robinvd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robinvd/subscriptions", "organizations_url": "https://api.github.com/users/robinvd/orgs", "repos_url": "https://api.github.com/users/robinvd/repos", "events_url": "https://api.github.com/users/robinvd/events{/privacy}", "received_events_url": "https://api.github.com/users/robinvd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f252ade72fee4776396122dc91a17ddc185a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f252ade72fee4776396122dc91a17ddc185a66", "html_url": "https://github.com/rust-lang/rust/commit/e5f252ade72fee4776396122dc91a17ddc185a66"}], "stats": {"total": 83, "additions": 74, "deletions": 9}, "files": [{"sha": "ba67dd9f8f388c97f234c177d0d44068ea9001aa", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c3cc3612948be235577ccfd55990062829c8cfbb/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3cc3612948be235577ccfd55990062829c8cfbb/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c3cc3612948be235577ccfd55990062829c8cfbb", "patch": "@@ -15,6 +15,7 @@ use test_utils::mark;\n use crate::{\n     display::{macro_label, ShortLabel, ToNav, TryToNav},\n     link_rewrite::{remove_links, rewrite_links},\n+    markdown_remove::remove_markdown,\n     markup::Markup,\n     runnables::runnable,\n     FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,\n@@ -27,6 +28,7 @@ pub struct HoverConfig {\n     pub debug: bool,\n     pub goto_type_def: bool,\n     pub links_in_hover: bool,\n+    pub markdown: bool,\n }\n \n impl Default for HoverConfig {\n@@ -37,6 +39,7 @@ impl Default for HoverConfig {\n             debug: true,\n             goto_type_def: true,\n             links_in_hover: true,\n+            markdown: true,\n         }\n     }\n }\n@@ -48,6 +51,7 @@ impl HoverConfig {\n         debug: false,\n         goto_type_def: false,\n         links_in_hover: true,\n+        markdown: true,\n     };\n \n     pub fn any(&self) -> bool {\n@@ -91,6 +95,7 @@ pub(crate) fn hover(\n     db: &RootDatabase,\n     position: FilePosition,\n     links_in_hover: bool,\n+    markdown: bool,\n ) -> Option<RangeInfo<HoverResult>> {\n     let sema = Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n@@ -109,7 +114,9 @@ pub(crate) fn hover(\n     };\n     if let Some(definition) = definition {\n         if let Some(markup) = hover_for_definition(db, definition) {\n-            let markup = if links_in_hover {\n+            let markup = if !markdown {\n+                remove_markdown(&markup.as_str())\n+            } else if links_in_hover {\n                 rewrite_links(db, &markup.as_str(), &definition)\n             } else {\n                 remove_links(&markup.as_str())\n@@ -147,7 +154,11 @@ pub(crate) fn hover(\n         }\n     };\n \n-    res.markup = Markup::fenced_block(&ty.display(db));\n+    res.markup = if markdown {\n+        Markup::fenced_block(&ty.display(db))\n+    } else {\n+        ty.display(db).to_string().into()\n+    };\n     let range = sema.original_range(&node).range;\n     Some(RangeInfo::new(range, res))\n }\n@@ -383,12 +394,12 @@ mod tests {\n \n     fn check_hover_no_result(ra_fixture: &str) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        assert!(analysis.hover(position, true).unwrap().is_none());\n+        assert!(analysis.hover(position, true, true).unwrap().is_none());\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, true).unwrap().unwrap();\n+        let hover = analysis.hover(position, true, true).unwrap().unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n         let hovered_element = &content[hover.range];\n@@ -399,7 +410,18 @@ mod tests {\n \n     fn check_hover_no_links(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, false).unwrap().unwrap();\n+        let hover = analysis.hover(position, false, true).unwrap().unwrap();\n+\n+        let content = analysis.db.file_text(position.file_id);\n+        let hovered_element = &content[hover.range];\n+\n+        let actual = format!(\"*{}*\\n{}\\n\", hovered_element, hover.info.markup);\n+        expect.assert_eq(&actual)\n+    }\n+\n+    fn check_hover_no_markdown(ra_fixture: &str, expect: Expect) {\n+        let (analysis, position) = fixture::position(ra_fixture);\n+        let hover = analysis.hover(position, true, false).unwrap().unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n         let hovered_element = &content[hover.range];\n@@ -410,7 +432,7 @@ mod tests {\n \n     fn check_actions(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, true).unwrap().unwrap();\n+        let hover = analysis.hover(position, true, true).unwrap().unwrap();\n         expect.assert_debug_eq(&hover.info.actions)\n     }\n \n@@ -433,6 +455,23 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn hover_remove_markdown_if_configured() {\n+        check_hover_no_markdown(\n+            r#\"\n+pub fn foo() -> u32 { 1 }\n+\n+fn main() {\n+    let foo_test = foo()<|>;\n+}\n+\"#,\n+            expect![[r#\"\n+                *foo()*\n+                u32\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn hover_shows_long_type_of_an_expression() {\n         check("}, {"sha": "57f3581b6bd013bc40686759c955600304ff44aa", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3cc3612948be235577ccfd55990062829c8cfbb/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3cc3612948be235577ccfd55990062829c8cfbb/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=c3cc3612948be235577ccfd55990062829c8cfbb", "patch": "@@ -46,6 +46,7 @@ mod syntax_highlighting;\n mod syntax_tree;\n mod typing;\n mod link_rewrite;\n+mod markdown_remove;\n \n use std::sync::Arc;\n \n@@ -376,8 +377,9 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         links_in_hover: bool,\n+        markdown: bool,\n     ) -> Cancelable<Option<RangeInfo<HoverResult>>> {\n-        self.with_db(|db| hover::hover(db, position, links_in_hover))\n+        self.with_db(|db| hover::hover(db, position, links_in_hover, markdown))\n     }\n \n     /// Computes parameter information for the given call expression."}, {"sha": "62b2aa1e7ce5fa9a73cb477f4875b100c735a6ca", "filename": "crates/ide/src/markdown_remove.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3cc3612948be235577ccfd55990062829c8cfbb/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3cc3612948be235577ccfd55990062829c8cfbb/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs?ref=c3cc3612948be235577ccfd55990062829c8cfbb", "patch": "@@ -0,0 +1,16 @@\n+use pulldown_cmark::{Event, Parser};\n+\n+pub fn remove_markdown(markdown: &str) -> String {\n+    let mut out = String::new();\n+    let parser = Parser::new(markdown);\n+\n+    for event in parser {\n+        match event {\n+            Event::Text(text) | Event::Code(text) => out.push_str(&text),\n+            Event::SoftBreak | Event::HardBreak | Event::Rule => out.push('\\n'),\n+            _ => {}\n+        }\n+    }\n+\n+    out\n+}"}, {"sha": "f6648778934e33a95c0038721b2a8f0d095e9bba", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3cc3612948be235577ccfd55990062829c8cfbb/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3cc3612948be235577ccfd55990062829c8cfbb/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c3cc3612948be235577ccfd55990062829c8cfbb", "patch": "@@ -14,7 +14,7 @@ use ide::{\n     AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig,\n     MergeBehaviour,\n };\n-use lsp_types::ClientCapabilities;\n+use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest};\n use rustc_hash::FxHashSet;\n use serde::Deserialize;\n@@ -327,13 +327,17 @@ impl Config {\n             debug: data.hoverActions_enable && data.hoverActions_debug,\n             goto_type_def: data.hoverActions_enable && data.hoverActions_gotoTypeDef,\n             links_in_hover: data.hoverActions_linksInHover,\n+            markdown: true,\n         };\n \n         log::info!(\"Config::update() = {:#?}\", self);\n     }\n \n     pub fn update_caps(&mut self, caps: &ClientCapabilities) {\n         if let Some(doc_caps) = caps.text_document.as_ref() {\n+            if let Some(value) = doc_caps.hover.as_ref().and_then(|it| it.content_format.as_ref()) {\n+                self.hover.markdown = value.contains(&MarkupKind::Markdown)\n+            }\n             if let Some(value) = doc_caps.definition.as_ref().and_then(|it| it.link_support) {\n                 self.client_caps.location_link = value;\n             }"}, {"sha": "468655f9c39e753bb6c8dfa230f8f8ee036e1e1a", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3cc3612948be235577ccfd55990062829c8cfbb/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3cc3612948be235577ccfd55990062829c8cfbb/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=c3cc3612948be235577ccfd55990062829c8cfbb", "patch": "@@ -618,7 +618,11 @@ pub(crate) fn handle_hover(\n ) -> Result<Option<lsp_ext::Hover>> {\n     let _p = profile::span(\"handle_hover\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let info = match snap.analysis.hover(position, snap.config.hover.links_in_hover)? {\n+    let info = match snap.analysis.hover(\n+        position,\n+        snap.config.hover.links_in_hover,\n+        snap.config.hover.markdown,\n+    )? {\n         None => return Ok(None),\n         Some(info) => info,\n     };"}]}