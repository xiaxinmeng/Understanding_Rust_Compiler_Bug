{"sha": "ad7a03cbaa01103fbc26ba19a7f505ddccf5316f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkN2EwM2NiYWEwMTEwM2ZiYzI2YmExOWE3ZjUwNWRkY2NmNTMxNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-25T21:48:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-25T21:48:19Z"}, "message": "Auto merge of #5951 - ThibsG:FixMacroCloneOnRefPtr2076, r=ebroto\n\nFix incorrect suggestion when `clone_on_ref_ptr` is triggered in macros\n\nIn the lint `clone_on_ref_ptr`, if the `span` is in a macro, don't expand it for suggestion.\n\nFixes: #2076\n\nchangelog: none\n\nr? @ebroto", "tree": {"sha": "31780f8f979b3ca23de1405c360254179babd99b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31780f8f979b3ca23de1405c360254179babd99b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad7a03cbaa01103fbc26ba19a7f505ddccf5316f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7a03cbaa01103fbc26ba19a7f505ddccf5316f", "html_url": "https://github.com/rust-lang/rust/commit/ad7a03cbaa01103fbc26ba19a7f505ddccf5316f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad7a03cbaa01103fbc26ba19a7f505ddccf5316f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1911510010d639cadd85b7b0fc4e3c6b5bbf05e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1911510010d639cadd85b7b0fc4e3c6b5bbf05e", "html_url": "https://github.com/rust-lang/rust/commit/e1911510010d639cadd85b7b0fc4e3c6b5bbf05e"}, {"sha": "370fc45a0a2af502d43f0e1831def314e0580a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/370fc45a0a2af502d43f0e1831def314e0580a92", "html_url": "https://github.com/rust-lang/rust/commit/370fc45a0a2af502d43f0e1831def314e0580a92"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "1ef54d285f68a3c9219203f56e8698f07b608dba", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad7a03cbaa01103fbc26ba19a7f505ddccf5316f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7a03cbaa01103fbc26ba19a7f505ddccf5316f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ad7a03cbaa01103fbc26ba19a7f505ddccf5316f", "patch": "@@ -2150,18 +2150,15 @@ fn lint_clone_on_ref_ptr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::\n             return;\n         };\n \n+        let snippet = snippet_with_macro_callsite(cx, arg.span, \"_\");\n+\n         span_lint_and_sugg(\n             cx,\n             CLONE_ON_REF_PTR,\n             expr.span,\n             \"using `.clone()` on a ref-counted pointer\",\n             \"try this\",\n-            format!(\n-                \"{}::<{}>::clone(&{})\",\n-                caller_type,\n-                subst.type_at(0),\n-                snippet(cx, arg.span, \"_\")\n-            ),\n+            format!(\"{}::<{}>::clone(&{})\", caller_type, subst.type_at(0), snippet),\n             Applicability::Unspecified, // Sometimes unnecessary ::<_> after Rc/Arc/Weak\n         );\n     }"}, {"sha": "e785ac02feb320e4c4fb1c54e671a335a4a3d3fc", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad7a03cbaa01103fbc26ba19a7f505ddccf5316f/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7a03cbaa01103fbc26ba19a7f505ddccf5316f/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=ad7a03cbaa01103fbc26ba19a7f505ddccf5316f", "patch": "@@ -90,3 +90,21 @@ mod many_derefs {\n         let _ = &encoded.clone();\n     }\n }\n+\n+mod issue2076 {\n+    use std::rc::Rc;\n+\n+    macro_rules! try_opt {\n+        ($expr: expr) => {\n+            match $expr {\n+                Some(value) => value,\n+                None => return None,\n+            }\n+        };\n+    }\n+\n+    fn func() -> Option<Rc<u8>> {\n+        let rc = Rc::new(42);\n+        Some(try_opt!(Some(rc)).clone())\n+    }\n+}"}, {"sha": "5ffa6c4fd06167ce0c7e68545fef718f97c00418", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad7a03cbaa01103fbc26ba19a7f505ddccf5316f/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad7a03cbaa01103fbc26ba19a7f505ddccf5316f/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=ad7a03cbaa01103fbc26ba19a7f505ddccf5316f", "patch": "@@ -96,5 +96,11 @@ help: or try being explicit if you are sure, that you want to clone a reference\n LL |         let _ = &<&[u8]>::clone(encoded);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: using `.clone()` on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:108:14\n+   |\n+LL |         Some(try_opt!(Some(rc)).clone())\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `Rc::<u8>::clone(&try_opt!(Some(rc)))`\n+\n+error: aborting due to 12 previous errors\n "}]}