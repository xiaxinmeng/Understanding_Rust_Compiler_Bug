{"sha": "4b6632d82d59f53f0fa71be8abdc50a8353cfda1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNjYzMmQ4MmQ1OWY1M2YwZmE3MWJlOGFiZGM1MGE4MzUzY2ZkYTE=", "commit": {"author": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-03T23:16:02Z"}, "committer": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-06T11:00:27Z"}, "message": "librustc_typeck has been updated", "tree": {"sha": "d70ac363d83625bee0e97c970d24060966c91a73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d70ac363d83625bee0e97c970d24060966c91a73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b6632d82d59f53f0fa71be8abdc50a8353cfda1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6632d82d59f53f0fa71be8abdc50a8353cfda1", "html_url": "https://github.com/rust-lang/rust/commit/4b6632d82d59f53f0fa71be8abdc50a8353cfda1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b6632d82d59f53f0fa71be8abdc50a8353cfda1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f09021b376a0cbe18a15a3bb7a5c5201573d4dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f09021b376a0cbe18a15a3bb7a5c5201573d4dc", "html_url": "https://github.com/rust-lang/rust/commit/0f09021b376a0cbe18a15a3bb7a5c5201573d4dc"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "22393a7a291992aa706061bf4c89fe2ec963d152", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b6632d82d59f53f0fa71be8abdc50a8353cfda1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6632d82d59f53f0fa71be8abdc50a8353cfda1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4b6632d82d59f53f0fa71be8abdc50a8353cfda1", "patch": "@@ -1160,12 +1160,12 @@ pub fn ast_ty_to_ty<'tcx>(\n                                                    using the syntax `<Type \\\n                                                    as {}>::{}`\",\n                                                   path_str,\n-                                                  token::get_ident(\n+                                                  &token::get_ident(\n                                                       path.segments\n                                                           .last()\n                                                           .unwrap()\n                                                           .identifier)\n-                                                  .get());\n+                                                  []);\n                         this.tcx().types.err\n                     }\n                     def::DefAssociatedPath(provenance, assoc_ident) => {"}, {"sha": "5b89954c586545f6ae23947da8ddb78ce5bd560c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b6632d82d59f53f0fa71be8abdc50a8353cfda1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6632d82d59f53f0fa71be8abdc50a8353cfda1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4b6632d82d59f53f0fa71be8abdc50a8353cfda1", "patch": "@@ -805,7 +805,7 @@ fn check_trait_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         a.check_name(\"rustc_on_unimplemented\")\n     }) {\n         if let Some(ref istring) = attr.value_str() {\n-            let parser = Parser::new(istring.get());\n+            let parser = Parser::new(&istring[]);\n             let types = &*generics.ty_params;\n             for token in parser {\n                 match token {\n@@ -3104,7 +3104,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                  tcx : &ty::ctxt<'tcx>,\n                                  skip : Vec<&str>) {\n         let ident = token::get_ident(field.node);\n-        let name = ident.get();\n+        let name = &ident[];\n         // only find fits with at least one matching letter\n         let mut best_dist = name.len();\n         let fields = ty::lookup_struct_fields(tcx, id);\n@@ -3286,7 +3286,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                     let (_, seen) = class_field_map[name];\n                     if !seen {\n                         missing_fields.push(\n-                            format!(\"`{}`\", token::get_name(name).get()))\n+                            format!(\"`{}`\", &token::get_name(name)[]))\n                     }\n                 }\n \n@@ -5223,8 +5223,8 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n \n     let tcx = ccx.tcx;\n     let name = token::get_ident(it.ident);\n-    let (n_tps, inputs, output) = if name.get().starts_with(\"atomic_\") {\n-        let split : Vec<&str> = name.get().split('_').collect();\n+    let (n_tps, inputs, output) = if name.starts_with(\"atomic_\") {\n+        let split : Vec<&str> = name.split('_').collect();\n         assert!(split.len() >= 2, \"Atomic intrinsic not correct format\");\n \n         //We only care about the operation here\n@@ -5253,10 +5253,10 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n             }\n         };\n         (n_tps, inputs, ty::FnConverging(output))\n-    } else if name.get() == \"abort\" || name.get() == \"unreachable\" {\n+    } else if &name[] == \"abort\" || &name[] == \"unreachable\" {\n         (0, Vec::new(), ty::FnDiverging)\n     } else {\n-        let (n_tps, inputs, output) = match name.get() {\n+        let (n_tps, inputs, output) = match &name[] {\n             \"breakpoint\" => (0, Vec::new(), ty::mk_nil(tcx)),\n             \"size_of\" |\n             \"pref_align_of\" | \"min_align_of\" => (1, Vec::new(), ccx.tcx.types.uint),"}, {"sha": "fca40df7aaa6af71a3a032d8bbbbbaf125d0c6e2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b6632d82d59f53f0fa71be8abdc50a8353cfda1/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6632d82d59f53f0fa71be8abdc50a8353cfda1/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=4b6632d82d59f53f0fa71be8abdc50a8353cfda1", "patch": "@@ -405,7 +405,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     let span = self.reason.span(self.tcx);\n                     span_err!(self.tcx.sess, span, E0104,\n                         \"cannot resolve lifetime for captured variable `{}`: {}\",\n-                        ty::local_var_name_str(self.tcx, upvar_id.var_id).get().to_string(),\n+                        ty::local_var_name_str(self.tcx, upvar_id.var_id).to_string(),\n                         infer::fixup_err_to_string(e));\n                 }\n "}]}