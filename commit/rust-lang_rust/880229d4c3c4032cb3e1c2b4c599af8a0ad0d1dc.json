{"sha": "880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MDIyOWQ0YzNjNDAzMmNiM2UxYzJiNGM1OTlhZjhhMGFkMGQxZGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T08:54:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T09:05:40Z"}, "message": "escape-on-cast, now ptr-deref does not change the tag at all, ever", "tree": {"sha": "dba1dfe2c4447a0198bc49579f9be2a572d786e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dba1dfe2c4447a0198bc49579f9be2a572d786e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc", "html_url": "https://github.com/rust-lang/rust/commit/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17", "html_url": "https://github.com/rust-lang/rust/commit/b7dbb5e2a71e222b984c2ef062deccb1d9dd7c17"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "a5de02f6421b7cd126d964f50e6e0648c2667be4", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc", "patch": "@@ -461,9 +461,9 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n             // No tracking\n             Ok(place.ptr)\n         } else {\n-            let ptr = place.ptr.to_ptr()?; // assert this is not a scalar\n-            let tag = ecx.tag_dereference(place, size, mutability.into())?;\n-            Ok(Scalar::Ptr(Pointer::new_with_tag(ptr.alloc_id, ptr.offset, tag)))\n+            ecx.ptr_dereference(place, size, mutability.into())?;\n+            // We never change the pointer\n+            Ok(place.ptr)\n         }\n     }\n "}, {"sha": "2726c7dccb4ffc682af93e72c8302440e062fb3b", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc", "patch": "@@ -405,12 +405,12 @@ impl<'tcx> Stacks {\n \n \n pub trait EvalContextExt<'tcx> {\n-    fn tag_dereference(\n+    fn ptr_dereference(\n         &self,\n         place: MPlaceTy<'tcx, Borrow>,\n         size: Size,\n         mutability: Option<Mutability>,\n-    ) -> EvalResult<'tcx, Borrow>;\n+    ) -> EvalResult<'tcx>;\n \n     fn tag_new_allocation(\n         &mut self,\n@@ -480,13 +480,13 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n     ///\n     /// Note that this does NOT mean that all this memory will actually get accessed/referenced!\n     /// We could be in the middle of `&(*var).1`.\n-    fn tag_dereference(\n+    fn ptr_dereference(\n         &self,\n         place: MPlaceTy<'tcx, Borrow>,\n         size: Size,\n         mutability: Option<Mutability>,\n-    ) -> EvalResult<'tcx, Borrow> {\n-        trace!(\"tag_dereference: Accessing {} reference for {:?} (pointee {})\",\n+    ) -> EvalResult<'tcx> {\n+        trace!(\"ptr_dereference: Accessing {} reference for {:?} (pointee {})\",\n             if let Some(mutability) = mutability { format!(\"{:?}\", mutability) } else { format!(\"raw\") },\n             place.ptr, place.layout.ty);\n         let ptr = place.ptr.to_ptr()?;\n@@ -497,12 +497,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n         // That can transmute a raw ptr to a (shared/mut) ref, and a mut ref to a shared one.\n         match (mutability, ptr.tag) {\n             (None, _) => {\n-                // Don't use the tag, this is a raw access!  They should happen tagless.\n-                // This is needed for `*mut` to make any sense: Writes *do* enforce the\n-                // `Uniq` tag to be up top, but we must make sure raw writes do not do that.\n-                // This does mean, however, that `&*foo` is *not* a NOP *if* `foo` is a raw ptr.\n-                // Also don't do any further validation, this is raw after all.\n-                return Ok(Borrow::default());\n+                // No further validation on raw accesses.\n+                return Ok(());\n             }\n             (Some(MutMutable), Borrow::Uniq(_)) |\n             (Some(MutImmutable), Borrow::Shr(_)) => {\n@@ -543,8 +539,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n             alloc.extra.deref(ptr, size, kind)?;\n         }\n \n-        // All is good, and do not change the tag\n-        Ok(ptr.tag)\n+        // All is good\n+        Ok(())\n     }\n \n     /// The given place may henceforth be accessed through raw pointers."}, {"sha": "e08e3bba6840de4de73cd2787d42fd9ed7567206", "filename": "tests/compile-fail-fullmir/stacked_borrows/buggy_as_mut_slice.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs?ref=880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc", "patch": "@@ -1,5 +1,3 @@\n-// error-pattern: mutable reference with frozen tag\n-\n mod safe {\n     use std::slice::from_raw_parts_mut;\n \n@@ -12,10 +10,8 @@ mod safe {\n \n fn main() {\n     let v = vec![0,1,2];\n-    let _v1 = safe::as_mut_slice(&v);\n-/*\n-    let v2 = safe::as_mut_slice(&v);\n+    let v1 = safe::as_mut_slice(&v);\n+    let _v2 = safe::as_mut_slice(&v);\n     v1[1] = 5;\n-    v1[1] = 6;\n-*/\n+    //~^ ERROR does not exist on the stack\n }"}, {"sha": "75abce3111f884bbb5a9c05c12fd5952c19102df", "filename": "tests/compile-fail-fullmir/stacked_borrows/transmute-is-no-escape.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Ftransmute-is-no-escape.rs?ref=880229d4c3c4032cb3e1c2b4c599af8a0ad0d1dc", "patch": "@@ -8,5 +8,6 @@ use std::mem;\n fn main() {\n     let mut x: i32 = 42;\n     let raw: *mut i32 = unsafe { mem::transmute(&mut x) };\n+    let raw = raw as usize as *mut i32; // make sure we killed the tag\n     unsafe { *raw = 13; } //~ ERROR does not exist on the stack\n }"}]}