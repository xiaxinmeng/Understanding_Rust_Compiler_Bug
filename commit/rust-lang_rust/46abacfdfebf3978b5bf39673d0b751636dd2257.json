{"sha": "46abacfdfebf3978b5bf39673d0b751636dd2257", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YWJhY2ZkZmViZjM5NzhiNWJmMzk2NzNkMGI3NTE2MzZkZDIyNTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-02T03:34:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-02T22:56:31Z"}, "message": "rustc: Require that vector indices are uints\n\nThis commit tightens up the restriction on types used to index slices to require\nexactly `uint` indices. Previously any integral type was accepted, but this\nleads to a few subtle problems:\n\n  * 64-bit indices don't make much sense on 32-bit systems\n  * Signed indices for slices used as negative indexing isn't implemented\n\nThis was discussed at the recent work week, and also has some discussion on\nissue #10453.\n\nCloses #10453", "tree": {"sha": "0a10d9f37cfff50cd49860b34c12e1020f6337c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a10d9f37cfff50cd49860b34c12e1020f6337c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46abacfdfebf3978b5bf39673d0b751636dd2257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46abacfdfebf3978b5bf39673d0b751636dd2257", "html_url": "https://github.com/rust-lang/rust/commit/46abacfdfebf3978b5bf39673d0b751636dd2257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46abacfdfebf3978b5bf39673d0b751636dd2257/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3786b552a6ffd2219d8e42df6f8db6cc386cce56", "url": "https://api.github.com/repos/rust-lang/rust/commits/3786b552a6ffd2219d8e42df6f8db6cc386cce56", "html_url": "https://github.com/rust-lang/rust/commit/3786b552a6ffd2219d8e42df6f8db6cc386cce56"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "e8082e149af89be7173c388142dead404dede1c5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46abacfdfebf3978b5bf39673d0b751636dd2257/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46abacfdfebf3978b5bf39673d0b751636dd2257/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=46abacfdfebf3978b5bf39673d0b751636dd2257", "patch": "@@ -2602,6 +2602,13 @@ pub fn type_is_integral(ty: t) -> bool {\n     }\n }\n \n+pub fn type_is_uint(ty: t) -> bool {\n+    match get(ty).sty {\n+      ty_infer(IntVar(_)) | ty_uint(ast::TyU) => true,\n+      _ => false\n+    }\n+}\n+\n pub fn type_is_char(ty: t) -> bool {\n     match get(ty).sty {\n         ty_char => true,"}, {"sha": "4cf3cc51cc1b64116bb6aafdcb1179f7e421cc5c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46abacfdfebf3978b5bf39673d0b751636dd2257/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46abacfdfebf3978b5bf39673d0b751636dd2257/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=46abacfdfebf3978b5bf39673d0b751636dd2257", "patch": "@@ -3151,7 +3151,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                           lvalue_pref, |base_t, _| ty::index(base_t));\n               match field_ty {\n                   Some(mt) => {\n-                      require_integral(fcx, idx.span, idx_t);\n+                      check_expr_has_type(fcx, idx, ty::mk_uint());\n                       fcx.write_ty(id, mt.ty);\n                       fcx.write_autoderef_adjustment(base.id, autoderefs);\n                   }\n@@ -3195,6 +3195,15 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n     unifier();\n }\n \n+pub fn require_uint(fcx: &FnCtxt, sp: Span, t: ty::t) {\n+    if !type_is_uint(fcx, sp, t) {\n+        fcx.type_error_message(sp, |actual| {\n+            format!(\"mismatched types: expected `uint` type but found `{}`\",\n+                 actual)\n+        }, t, None);\n+    }\n+}\n+\n pub fn require_integral(fcx: &FnCtxt, sp: Span, t: ty::t) {\n     if !type_is_integral(fcx, sp, t) {\n         fcx.type_error_message(sp, |actual| {\n@@ -3854,6 +3863,11 @@ pub fn type_is_integral(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool {\n     return ty::type_is_integral(typ_s);\n }\n \n+pub fn type_is_uint(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool {\n+    let typ_s = structurally_resolved_type(fcx, sp, typ);\n+    return ty::type_is_uint(typ_s);\n+}\n+\n pub fn type_is_scalar(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool {\n     let typ_s = structurally_resolved_type(fcx, sp, typ);\n     return ty::type_is_scalar(typ_s);"}, {"sha": "9ac4bd2566e8be73dc61b5f964bd3ce169b3dbff", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/46abacfdfebf3978b5bf39673d0b751636dd2257/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46abacfdfebf3978b5bf39673d0b751636dd2257/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=46abacfdfebf3978b5bf39673d0b751636dd2257", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure that indexing an array is only valid with a `uint`, not any other\n+// integral type.\n+\n+fn main() {\n+    fn bar<T>(_: T) {}\n+    [0][0u8]; //~ ERROR: mismatched types\n+\n+    [0][0]; // should infer to be a uint\n+\n+    let i = 0;      // i is an IntVar\n+    [0][i];         // i should be locked to uint\n+    bar::<int>(i);  // i should not be re-coerced back to an int\n+    //~^ ERROR: mismatched types\n+}\n+"}]}