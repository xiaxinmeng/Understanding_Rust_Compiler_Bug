{"sha": "15ec5b291292f87697b32f30cc31f863538959a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZWM1YjI5MTI5MmY4NzY5N2IzMmYzMGNjMzFmODYzNTM4OTU5YTI=", "commit": {"author": {"name": "Kevin Yeh", "email": "kevinyeah@utexas.edu", "date": "2015-11-20T02:11:32Z"}, "committer": {"name": "Kevin Yeh", "email": "kevinyeah@utexas.edu", "date": "2015-11-20T02:45:02Z"}, "message": "Fix empty body format, add fn_empty_single_line option, refactor block tests", "tree": {"sha": "e9f3f1e15d06591c0b33b4d72e92a3547eb5a3d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9f3f1e15d06591c0b33b4d72e92a3547eb5a3d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ec5b291292f87697b32f30cc31f863538959a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ec5b291292f87697b32f30cc31f863538959a2", "html_url": "https://github.com/rust-lang/rust/commit/15ec5b291292f87697b32f30cc31f863538959a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ec5b291292f87697b32f30cc31f863538959a2/comments", "author": {"login": "kyeah", "id": 2308368, "node_id": "MDQ6VXNlcjIzMDgzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2308368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyeah", "html_url": "https://github.com/kyeah", "followers_url": "https://api.github.com/users/kyeah/followers", "following_url": "https://api.github.com/users/kyeah/following{/other_user}", "gists_url": "https://api.github.com/users/kyeah/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyeah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyeah/subscriptions", "organizations_url": "https://api.github.com/users/kyeah/orgs", "repos_url": "https://api.github.com/users/kyeah/repos", "events_url": "https://api.github.com/users/kyeah/events{/privacy}", "received_events_url": "https://api.github.com/users/kyeah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyeah", "id": 2308368, "node_id": "MDQ6VXNlcjIzMDgzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2308368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyeah", "html_url": "https://github.com/kyeah", "followers_url": "https://api.github.com/users/kyeah/followers", "following_url": "https://api.github.com/users/kyeah/following{/other_user}", "gists_url": "https://api.github.com/users/kyeah/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyeah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyeah/subscriptions", "organizations_url": "https://api.github.com/users/kyeah/orgs", "repos_url": "https://api.github.com/users/kyeah/repos", "events_url": "https://api.github.com/users/kyeah/events{/privacy}", "received_events_url": "https://api.github.com/users/kyeah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbd1398c925fb51d72c3764133e1d35679cb53c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd1398c925fb51d72c3764133e1d35679cb53c2", "html_url": "https://github.com/rust-lang/rust/commit/fbd1398c925fb51d72c3764133e1d35679cb53c2"}], "stats": {"total": 112, "additions": 50, "deletions": 62}, "files": [{"sha": "295c1076b5fcb7c87391b242dfd9d155f26bf84f", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -269,6 +269,7 @@ create_config! {\n     newline_style: NewlineStyle, NewlineStyle::Unix, \"Unix or Windows line endings\";\n     fn_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for functions\";\n     item_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for structs and enums\";\n+    fn_empty_single_line: bool, true, \"Put empty-body functions on a single line\";\n     fn_single_line: bool, false, \"Put single-expression functions on a single line\";\n     fn_return_indent: ReturnIndent, ReturnIndent::WithArgs,\n         \"Location of return type in function declaration\";"}, {"sha": "b494cb08fccabb57fc0fc7dcd4d6005b00d3ee5f", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -705,36 +705,25 @@ fn single_line_if_else(context: &RewriteContext,\n     None\n }\n \n-// Checks that a block contains no statements, an expression and no comments.\n-fn is_simple_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n-    if !block.stmts.is_empty() || block.expr.is_none() {\n-        return false;\n-    }\n-\n+fn block_contains_comment(block: &ast::Block, codemap: &CodeMap) -> bool {\n     let snippet = codemap.span_to_snippet(block.span).unwrap();\n+    contains_comment(&snippet)\n+}\n \n-    !contains_comment(&snippet)\n+// Checks that a block contains no statements, an expression and no comments.\n+pub fn is_simple_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n+    block.stmts.is_empty() && block.expr.is_some() && !block_contains_comment(block, codemap)\n }\n \n /// Checks whether a block contains at most one statement or expression, and no comments.\n pub fn is_simple_block_stmt(block: &ast::Block, codemap: &CodeMap) -> bool {\n-    if (!block.stmts.is_empty() && block.expr.is_some()) ||\n-       (block.stmts.len() != 1 && block.expr.is_none()) {\n-        return false;\n-    }\n-\n-    let snippet = codemap.span_to_snippet(block.span).unwrap();\n-    !contains_comment(&snippet)\n+    (block.stmts.is_empty() || (block.stmts.len() == 1 && block.expr.is_none())) &&\n+    !block_contains_comment(block, codemap)\n }\n \n /// Checks whether a block contains no statements, expressions, or comments.\n pub fn is_empty_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n-    if !block.stmts.is_empty() || block.expr.is_some() {\n-        return false;\n-    }\n-\n-    let snippet = codemap.span_to_snippet(block.span).unwrap();\n-    !contains_comment(&snippet)\n+    block.stmts.is_empty() && block.expr.is_none() && !block_contains_comment(block, codemap)\n }\n \n // inter-match-arm-comment-rules:"}, {"sha": "01418a08a9ac15cf5b6bd5c43fba1c79e03c3188", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -448,20 +448,19 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     pub fn rewrite_single_line_fn(&self,\n-                                  fn_rewrite: &Option<String>,\n+                                  fn_str: &str,\n                                   block: &ast::Block)\n                                   -> Option<String> {\n \n-        let fn_str = match *fn_rewrite {\n-            Some(ref s) if !s.contains('\\n') => s,\n-            _ => return None,\n-        };\n+        if fn_str.contains('\\n') {\n+            return None;\n+        }\n \n         let codemap = self.get_context().codemap;\n \n-        if is_empty_block(block, codemap) &&\n-           self.block_indent.width() + fn_str.len() + 3 <= self.config.max_width {\n-            return Some(format!(\"{}{{ }}\", fn_str));\n+        if self.config.fn_empty_single_line && is_empty_block(block, codemap) &&\n+           self.block_indent.width() + fn_str.len() + 2 <= self.config.max_width {\n+            return Some(format!(\"{}{{}}\", fn_str));\n         }\n \n         if self.config.fn_single_line && is_simple_block_stmt(block, codemap) {\n@@ -488,7 +487,7 @@ impl<'a> FmtVisitor<'a> {\n             };\n \n             if let Some(res) = rewrite {\n-                let width = self.block_indent.width() + fn_str.len() + res.len() + 3;\n+                let width = self.block_indent.width() + fn_str.len() + res.len() + 4;\n                 if !res.contains('\\n') && width <= self.config.max_width {\n                     return Some(format!(\"{}{{ {} }}\", fn_str, res));\n                 }"}, {"sha": "b51274b4d8d3590be24f7f9598cc78c5fac6afc0", "filename": "src/visitor.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -154,16 +154,15 @@ impl<'a> FmtVisitor<'a> {\n             visit::FnKind::Closure => None,\n         };\n \n-        if let Some(ref single_line_fn) = self.rewrite_single_line_fn(&rewrite, &b) {\n-            self.format_missing_with_indent(s.lo);\n-            self.buffer.push_str(single_line_fn);\n-            self.last_pos = b.span.hi;\n-            return;\n-        }\n-\n         if let Some(fn_str) = rewrite {\n             self.format_missing_with_indent(s.lo);\n-            self.buffer.push_str(&fn_str);\n+            if let Some(ref single_line_fn) = self.rewrite_single_line_fn(&fn_str, &b) {\n+                self.buffer.push_str(single_line_fn);\n+                self.last_pos = b.span.hi;\n+                return;\n+            } else {\n+                self.buffer.push_str(&fn_str);\n+            }\n         } else {\n             self.format_missing(b.span.lo);\n         }"}, {"sha": "9317a83706571ad4f12fb86a9afea19ac6cc8dd3", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -13,7 +13,7 @@ impl Bar {\n     /// Blah blah blooo.\n     /// Blah blah blooo.\n     #[an_attribute]\n-    fn foo(&mut self) -> isize { }\n+    fn foo(&mut self) -> isize {}\n \n     /// Blah blah bing.\n     /// Blah blah bing.\n@@ -27,7 +27,7 @@ impl Bar {\n     }\n \n     #[another_attribute]\n-    fn f3(self) -> Dog { }\n+    fn f3(self) -> Dog {}\n \n     /// Blah blah bing.\n     #[attrib1]\n@@ -36,5 +36,5 @@ impl Bar {\n     // Another comment that needs rewrite because it's tooooooooooooooooooooooooooooooo\n     // loooooooooooong.\n     /// Blah blah bing.\n-    fn f4(self) -> Cat { }\n+    fn f4(self) -> Cat {}\n }"}, {"sha": "2d90d83edb69b65d0e323d3093e4c1951bc697b8", "filename": "tests/target/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -32,7 +32,7 @@ fn test() {\n }\n \n /// test123\n-fn doc_comment() { }\n+fn doc_comment() {}\n \n fn chains() {\n     foo.bar(|| {"}, {"sha": "fa607e131eaa5cdb0e5d9e0205cfad01f3045e61", "filename": "tests/target/comments-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fcomments-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fcomments-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments-fn.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -16,6 +16,6 @@ fn foo<F, G>(a: aaaaaaaaaaaaa, // A comment\n \n }\n \n-fn bar<F /* comment on F */, G /* comment on G */>() { }\n+fn bar<F /* comment on F */, G /* comment on G */>() {}\n \n-fn baz() -> Baz /* Comment after return type */ { }\n+fn baz() -> Baz /* Comment after return type */ {}"}, {"sha": "9db1c8831b60c365c145c7812d8883e1491acf76", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -28,13 +28,13 @@ fn generic<T>(arg: T) -> &SomeType\n     arg(a, b, c, d, e)\n }\n \n-fn foo() -> ! { }\n+fn foo() -> ! {}\n \n pub fn http_fetch_async(listener: Box<AsyncCORSResponseListener + Send>,\n                         script_chan: Box<ScriptChan + Send>) {\n }\n \n-fn some_func<T: Box<Trait + Bound>>(val: T) { }\n+fn some_func<T: Box<Trait + Bound>>(val: T) {}\n \n fn zzzzzzzzzzzzzzzzzzzz<Type, NodeType>(selff: Type,\n                                         mut handle: node::Handle<IdRef<'id, Node<K, V>>,"}, {"sha": "674ce1c89f9b0d164a39648004d37f4c3bc7ae70", "filename": "tests/target/fn-single-line.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Ffn-single-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Ffn-single-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-single-line.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -9,7 +9,7 @@ fn foo_decl_local() { let z = 5; }\n \n fn foo_decl_item(x: &mut i32) { x = 3; }\n \n-fn empty() { }\n+fn empty() {}\n \n fn foo_return() -> String { \"yay\" }\n \n@@ -55,9 +55,9 @@ fn lots_of_space() { 1 }\n fn mac() -> Vec<i32> { vec![] }\n \n trait CoolTypes {\n-    fn dummy(&self) { }\n+    fn dummy(&self) {}\n }\n \n trait CoolerTypes {\n-    fn dummy(&self) { }\n+    fn dummy(&self) {}\n }"}, {"sha": "0ae9fd7ef1fc871aa5166a9c25fbda2137acd2fd", "filename": "tests/target/fn.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -1,6 +1,6 @@\n // Tests different fns\n \n-fn foo(a: AAAA, b: BBB, c: CCC) -> RetType { }\n+fn foo(a: AAAA, b: BBB, c: CCC) -> RetType {}\n \n fn foo(a: AAAA, b: BBB /* some, weird, inline comment */, c: CCC) -> RetType\n     where T: Blah\n@@ -32,17 +32,17 @@ fn foo<U, T>(a: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n \n }\n \n-fn foo<U: Fn(A) -> B /* paren inside generics */>() { }\n+fn foo<U: Fn(A) -> B /* paren inside generics */>() {}\n \n impl Foo {\n     fn with_no_errors<T, F>(&mut self, f: F) -> T\n         where F: FnOnce(&mut Resolver) -> T\n     {\n     }\n \n-    fn foo(mut self, mut bar: u32) { }\n+    fn foo(mut self, mut bar: u32) {}\n \n-    fn bar(self, mut bazz: u32) { }\n+    fn bar(self, mut bazz: u32) {}\n }\n \n pub fn render<'a,\n@@ -70,9 +70,9 @@ impl Foo {\n     }\n }\n \n-fn homura<T: Deref<Target = i32>>(_: T) { }\n+fn homura<T: Deref<Target = i32>>(_: T) {}\n \n-fn issue377() -> (Box<CompositorProxy + Send>, Box<CompositorReceiver>) { }\n+fn issue377() -> (Box<CompositorProxy + Send>, Box<CompositorReceiver>) {}\n \n fn main() {\n     let _ = function(move || 5);"}, {"sha": "7b371409fba96c33557ba633d6bb99d808f1c8b7", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -26,7 +26,7 @@ mod other;\n // sfdgfffffffffffffffffffffffffffffffffffffffffffffffffffffff\n // ffffffffffffffffffffffffffffffffffffffffff\n \n-fn foo(a: isize, b: u32 /* blah blah */, c: f64) { }\n+fn foo(a: isize, b: u32 /* blah blah */, c: f64) {}\n \n fn foo() -> Box<Write + 'static>\n     where 'a: 'b,\n@@ -75,7 +75,7 @@ impl Bar {\n     }\n \n     #[an_attribute]\n-    fn f3(self) -> Dog { }\n+    fn f3(self) -> Dog {}\n }\n \n /// The `nodes` and `edges` method each return instantiations of\n@@ -115,7 +115,7 @@ pub struct Foo<'a, Y: Baz>\n     f: SomeType, // Comment beside a field\n }\n \n-fn foo(ann: &'a (PpAnn + 'a)) { }\n+fn foo(ann: &'a (PpAnn + 'a)) {}\n \n fn main() {\n     for i in 0i32..4 {"}, {"sha": "7db4572e777c0010537f78b12a52687a36032383", "filename": "tests/target/nestedmod/mod2c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fnestedmod%2Fmod2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fnestedmod%2Fmod2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fmod2c.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -1,3 +1,3 @@\n // A standard mod\n \n-fn a() { }\n+fn a() {}"}, {"sha": "ae09d8ddac0d14b172fa37ecf5cf444f1558a2f5", "filename": "tests/target/nestedmod/mymod1/mod3a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fnestedmod%2Fmymod1%2Fmod3a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fnestedmod%2Fmymod1%2Fmod3a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fmymod1%2Fmod3a.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -1,2 +1,2 @@\n // Another mod\n-fn a() { }\n+fn a() {}"}, {"sha": "120b17145e3a0879c0bb973e8d3a4fffb4f788e1", "filename": "tests/target/nestedmod/submod2/a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fnestedmod%2Fsubmod2%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fnestedmod%2Fsubmod2%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnestedmod%2Fsubmod2%2Fa.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -3,4 +3,4 @@\n \n use c::a;\n \n-fn foo() { }\n+fn foo() {}"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/target/no_new_line_beginning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fno_new_line_beginning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fno_new_line_beginning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fno_new_line_beginning.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -1 +1 @@\n-fn main() { }\n+fn main() {}"}, {"sha": "f1b142b3a5c46096e6d8d2096e17190cdd0e5ae8", "filename": "tests/target/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5b291292f87697b32f30cc31f863538959a2/tests%2Ftarget%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpaths.rs?ref=15ec5b291292f87697b32f30cc31f863538959a2", "patch": "@@ -19,4 +19,4 @@ fn main() {\n     let x: Foo<A>;\n }\n \n-fn op(foo: Bar, key: &[u8], upd: Fn(Option<&memcache::Item>, Baz) -> Result) -> MapResult { }\n+fn op(foo: Bar, key: &[u8], upd: Fn(Option<&memcache::Item>, Baz) -> Result) -> MapResult {}"}]}