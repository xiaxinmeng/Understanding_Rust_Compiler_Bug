{"sha": "b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZGUyNDRjZmRkYmFkODU4ZmU3MWY5ZGQwYzI4ZGM2ZjJiODVlNWM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-29T21:06:59Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-09-02T13:30:06Z"}, "message": "Restrict `len_without_is_empty` to exported items", "tree": {"sha": "981b6123cd37c833bb4ae37bfb9676159c00a2c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/981b6123cd37c833bb4ae37bfb9676159c00a2c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJXyX7fAAoJEF5CfHlMukXo9WIP/AzZ0TggN1JApBow/260F0IU\nAEwylnerpJEVyX0AlyZ8G7P9Yl3BIP29zOEuGGsR4xA1LfV1hPlgWBqHHAO0nFAL\nMkyesCLiY/p951Xd0iRD8zRRA1XrZh6qVmQRskvEhvdTLgHB1DtdFProXFmIOJu5\nuNOEEYJb/1F3KHkY+GKqgYNe/phqXwq675y7EhkDE07rng78TEjGqKlj7zVKZxDQ\nZNk9ermKMP9EddBhF0rGAsjHdQ9RavrRxG9GnYOZ+TIff+wBg260nEYrkvh+f1PM\nKe9Xq08EoT2ecA5Qa9RCbQWdcsnWvEYk+9maBpyIS6UpwWoVUpoqgfDXq4RX7X4r\nwhXunj2EJqAgE5bMZZdSNH5Qa2KApDLX8TamY/jIobpwwgHgDFoMPrzprC3sr/rL\n2D2iB0AFO/6N1hmYX15zPSMNKIe1D4NG5V+WLC4AwSegbpFr5zhSXzyljb5SfJjU\nA1v/oJK52+5VIeL6Y3IYcMg2Has5Ue4SC1hZ9EJVNY223HxnBkL7F0W4ijhSrxgb\nkQmHIXTFl+8gv6/2efqi1HtuLz48WbDQ2h7L9YEGZXsqa9h8hmp73ofxMMCCJT84\nAqtRv5TPENctmNgdKMz/upFUTHOAeMixQcJrN1imT/z82I2BMMWO4IUI1iuc0Gg2\nBlE+qRa6CmLfBQAoO+gV\n=qlSO\n-----END PGP SIGNATURE-----", "payload": "tree 981b6123cd37c833bb4ae37bfb9676159c00a2c7\nparent 943e9b5aeb6e80c3b6a0903eda696863b3a55b7f\nauthor mcarton <cartonmartin+git@gmail.com> 1472504819 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1472823006 +0200\n\nRestrict `len_without_is_empty` to exported items\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c", "html_url": "https://github.com/rust-lang/rust/commit/b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943e9b5aeb6e80c3b6a0903eda696863b3a55b7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/943e9b5aeb6e80c3b6a0903eda696863b3a55b7f", "html_url": "https://github.com/rust-lang/rust/commit/943e9b5aeb6e80c3b6a0903eda696863b3a55b7f"}], "stats": {"total": 110, "additions": 75, "deletions": 35}, "files": [{"sha": "83b9788fba50dc00f6109b662647e52020086273", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c", "patch": "@@ -84,7 +84,7 @@ name\n [items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)                     | allow   | blocks where an item comes after a statement\n [iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                                     | warn    | for-looping over `_.next()` which is probably not intended\n [iter_nth](https://github.com/Manishearth/rust-clippy/wiki#iter_nth)                                                 | warn    | using `.iter().nth()` on a standard library type with O(1) element access\n-[len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                         | warn    | traits and impls that have `.len()` but not `.is_empty()`\n+[len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                         | warn    | traits or impls with a public `len` method but no corresponding `is_empty` method\n [len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                                 | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n [let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                                     | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\n [let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                                     | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards"}, {"sha": "fbcae08783682bbc2cab8b323c10ff1796e4ca35", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c", "patch": "@@ -42,13 +42,13 @@ declare_lint! {\n /// **Example:**\n /// ```rust\n /// impl X {\n-///     fn len(&self) -> usize { .. }\n+///     pub fn len(&self) -> usize { .. }\n /// }\n /// ```\n declare_lint! {\n     pub LEN_WITHOUT_IS_EMPTY,\n     Warn,\n-    \"traits and impls that have `.len()` but not `.is_empty()`\"\n+    \"traits or impls with a public `len` method but no corresponding `is_empty` method\"\n }\n \n #[derive(Copy,Clone)]\n@@ -99,13 +99,12 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItem]) {\n     }\n \n     if !trait_items.iter().any(|i| is_named_self(i, \"is_empty\")) {\n-        for i in trait_items {\n-            if is_named_self(i, \"len\") {\n+        if let Some(i) = trait_items.iter().find(|i| is_named_self(i, \"len\")) {\n+            if cx.access_levels.is_exported(i.id) {\n                 span_lint(cx,\n                           LEN_WITHOUT_IS_EMPTY,\n                           i.span,\n-                          &format!(\"trait `{}` has a `.len(_: &Self)` method, but no `.is_empty(_: &Self)` method. \\\n-                                    Consider adding one\",\n+                          &format!(\"trait `{}` has a `len` method but no `is_empty` method\",\n                                    item.name));\n             }\n         }\n@@ -122,19 +121,26 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItem]) {\n         }\n     }\n \n-    if !impl_items.iter().any(|i| is_named_self(i, \"is_empty\")) {\n-        for i in impl_items {\n-            if is_named_self(i, \"len\") {\n-                let ty = cx.tcx.node_id_to_type(item.id);\n-\n-                span_lint(cx,\n-                          LEN_WITHOUT_IS_EMPTY,\n-                          i.span,\n-                          &format!(\"item `{}` has a `.len(_: &Self)` method, but no `.is_empty(_: &Self)` method. \\\n-                                    Consider adding one\",\n-                                   ty));\n-                return;\n-            }\n+    let is_empty = if let Some(is_empty) = impl_items.iter().find(|i| is_named_self(i, \"is_empty\")) {\n+        if cx.access_levels.is_exported(is_empty.id) {\n+            return;\n+        } else {\n+            \"a private\"\n+        }\n+    } else {\n+        \"no corresponding\"\n+    };\n+\n+    if let Some(i) = impl_items.iter().find(|i| is_named_self(i, \"len\")) {\n+        if cx.access_levels.is_exported(i.id) {\n+            let ty = cx.tcx.node_id_to_type(item.id);\n+\n+            span_lint(cx,\n+                      LEN_WITHOUT_IS_EMPTY,\n+                      i.span,\n+                      &format!(\"item `{}` has a public `len` method but {} `is_empty` method\",\n+                               ty,\n+                               is_empty));\n         }\n     }\n }"}, {"sha": "b640c6db3a3ceb4cdfece7f834d26308021b33fb", "filename": "tests/compile-fail/len_zero.rs", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c/tests%2Fcompile-fail%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c/tests%2Fcompile-fail%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flen_zero.rs?ref=b2de244cfddbad858fe71f9dd0c28dc6f2b85e5c", "patch": "@@ -1,18 +1,45 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#![deny(len_without_is_empty, len_zero)]\n+#![allow(dead_code, unused)]\n+\n+pub struct PubOne;\n+\n+impl PubOne {\n+    pub fn len(self: &Self) -> isize { //~ERROR item `PubOne` has a public `len` method but no corresponding `is_empty`\n+        1\n+    }\n+}\n+\n+struct NotPubOne;\n+\n+impl NotPubOne {\n+    pub fn len(self: &Self) -> isize { // no error, len is pub but `NotPubOne` is not exported anyway\n+        1\n+    }\n+}\n+\n struct One;\n \n-#[deny(len_without_is_empty)]\n impl One {\n-    fn len(self: &Self) -> isize { //~ERROR item `One` has a `.len(_: &Self)`\n+    fn len(self: &Self) -> isize { // no error, len is private, see #1085\n         1\n     }\n }\n \n-#[deny(len_without_is_empty)]\n+pub trait PubTraitsToo {\n+    fn len(self: &Self) -> isize; //~ERROR trait `PubTraitsToo` has a `len` method but no `is_empty`\n+}\n+\n+impl PubTraitsToo for One {\n+    fn len(self: &Self) -> isize {\n+        0\n+    }\n+}\n+\n trait TraitsToo {\n-    fn len(self: &Self) -> isize; //~ERROR trait `TraitsToo` has a `.len(_:\n+    fn len(self: &Self) -> isize; // no error, len is private, see #1085\n }\n \n impl TraitsToo for One {\n@@ -21,11 +48,22 @@ impl TraitsToo for One {\n     }\n }\n \n-struct HasIsEmpty;\n+struct HasPrivateIsEmpty;\n+\n+impl HasPrivateIsEmpty {\n+    pub fn len(self: &Self) -> isize {\n+        1\n+    }\n+\n+    fn is_empty(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+pub struct HasIsEmpty;\n \n-#[deny(len_without_is_empty)]\n impl HasIsEmpty {\n-    fn len(self: &Self) -> isize {\n+    pub fn len(self: &Self) -> isize { //~ERROR item `HasIsEmpty` has a public `len` method but a private `is_empty`\n         1\n     }\n \n@@ -36,8 +74,7 @@ impl HasIsEmpty {\n \n struct Wither;\n \n-#[deny(len_without_is_empty)]\n-trait WithIsEmpty {\n+pub trait WithIsEmpty {\n     fn len(self: &Self) -> isize;\n     fn is_empty(self: &Self) -> bool;\n }\n@@ -52,21 +89,18 @@ impl WithIsEmpty for Wither {\n     }\n }\n \n-struct HasWrongIsEmpty;\n+pub struct HasWrongIsEmpty;\n \n-#[deny(len_without_is_empty)]\n impl HasWrongIsEmpty {\n-    fn len(self: &Self) -> isize { //~ERROR item `HasWrongIsEmpty` has a `.len(_: &Self)`\n+    pub fn len(self: &Self) -> isize { //~ERROR item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty`\n         1\n     }\n \n-    #[allow(dead_code, unused)]\n-    fn is_empty(self: &Self, x : u32) -> bool {\n+    pub fn is_empty(self: &Self, x : u32) -> bool {\n         false\n     }\n }\n \n-#[deny(len_zero)]\n fn main() {\n     let x = [1, 2];\n     if x.len() == 0 {"}]}