{"sha": "4a2a375fbfb02abdf51e598660c44dda6032d282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMmEzNzVmYmZiMDJhYmRmNTFlNTk4NjYwYzQ0ZGRhNjAzMmQyODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-29T04:34:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-29T04:51:18Z"}, "message": "rustdoc: More pipe conversion", "tree": {"sha": "23e60e1186d37d5d45d637d32318b700c17a4f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23e60e1186d37d5d45d637d32318b700c17a4f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a2a375fbfb02abdf51e598660c44dda6032d282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a2a375fbfb02abdf51e598660c44dda6032d282", "html_url": "https://github.com/rust-lang/rust/commit/4a2a375fbfb02abdf51e598660c44dda6032d282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a2a375fbfb02abdf51e598660c44dda6032d282/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65bd40e300323f1e4806dd84834b8d71bb89c08c", "url": "https://api.github.com/repos/rust-lang/rust/commits/65bd40e300323f1e4806dd84834b8d71bb89c08c", "html_url": "https://github.com/rust-lang/rust/commit/65bd40e300323f1e4806dd84834b8d71bb89c08c"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "7f4962cf1b7c685250a35b31696ad68ec72724db", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4a2a375fbfb02abdf51e598660c44dda6032d282/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2a375fbfb02abdf51e598660c44dda6032d282/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=4a2a375fbfb02abdf51e598660c44dda6032d282", "patch": "@@ -101,19 +101,17 @@ fn pandoc_writer(\n         os::close(pipe_err.out);\n         os::close(pipe_in.out);\n \n-        let stdout_po = comm::Port();\n-        let stdout_ch = comm::Chan(&stdout_po);\n-        do task::spawn_sched(task::SingleThreaded) {\n-            comm::send(stdout_ch, readclose(pipe_out.in));\n+        let (stdout_ch, stdout_po) = pipes::stream();\n+        do task::spawn_sched(task::SingleThreaded) |move stdout_ch| {\n+            stdout_ch.send(readclose(pipe_out.in));\n         }\n-        let stdout = comm::recv(stdout_po);\n \n-        let stderr_po = comm::Port();\n-        let stderr_ch = comm::Chan(&stderr_po);\n-        do task::spawn_sched(task::SingleThreaded) {\n-            comm::send(stderr_ch, readclose(pipe_err.in));\n+        let (stderr_ch, stderr_po) = pipes::stream();\n+        do task::spawn_sched(task::SingleThreaded) |move stderr_ch| {\n+            stderr_ch.send(readclose(pipe_err.in));\n         }\n-        let stderr = comm::recv(stderr_po);\n+        let stdout = stdout_po.recv();\n+        let stderr = stderr_po.recv();\n \n         let status = run::waitpid(pid);\n         debug!(\"pandoc result: %i\", status);\n@@ -141,18 +139,23 @@ fn readclose(fd: libc::c_int) -> ~str {\n }\n \n fn generic_writer(+process: fn~(+markdown: ~str)) -> Writer {\n-    let ch = do task::spawn_listener\n-        |move process, po: comm::Port<WriteInstr>| {\n+    let (setup_ch, setup_po) = pipes::stream();\n+    do task::spawn |move process, move setup_ch| {\n+        let po: comm::Port<WriteInstr> = comm::Port();\n+        let ch = comm::Chan(&po);\n+        setup_ch.send(ch);\n+\n         let mut markdown = ~\"\";\n         let mut keep_going = true;\n         while keep_going {\n-            match comm::recv(po) {\n+            match po.recv() {\n               Write(s) => markdown += s,\n               Done => keep_going = false\n             }\n         }\n         process(move markdown);\n     };\n+    let ch = setup_po.recv();\n \n     fn~(+instr: WriteInstr) {\n         comm::send(ch, instr);\n@@ -266,15 +269,14 @@ pub fn future_writer_factory(\n     let markdown_po = comm::Port();\n     let markdown_ch = comm::Chan(&markdown_po);\n     let writer_factory = fn~(+page: doc::Page) -> Writer {\n-        let writer_po = comm::Port();\n-        let writer_ch = comm::Chan(&writer_po);\n-        do task::spawn {\n+        let (writer_ch, writer_po) = pipes::stream();\n+        do task::spawn |move writer_ch| {\n             let (writer, future) = future_writer();\n-            comm::send(writer_ch, move writer);\n+            writer_ch.send(move writer);\n             let s = future::get(&future);\n             comm::send(markdown_ch, (page, s));\n         }\n-        comm::recv(writer_po)\n+        writer_po.recv()\n     };\n \n     (move writer_factory, markdown_po)"}]}