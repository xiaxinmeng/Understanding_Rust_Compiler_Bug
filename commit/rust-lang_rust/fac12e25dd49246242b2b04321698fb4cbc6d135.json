{"sha": "fac12e25dd49246242b2b04321698fb4cbc6d135", "node_id": "C_kwDOAAsO6NoAKGZhYzEyZTI1ZGQ0OTI0NjI0MmIyYjA0MzIxNjk4ZmI0Y2JjNmQxMzU", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-09-18T22:49:49Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-09-18T23:01:57Z"}, "message": "Use LLVM C-API to build atomic cmpxchg and fence", "tree": {"sha": "c33afccb7b9f5863ca0efb561b0a1ff69eece383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c33afccb7b9f5863ca0efb561b0a1ff69eece383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fac12e25dd49246242b2b04321698fb4cbc6d135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fac12e25dd49246242b2b04321698fb4cbc6d135", "html_url": "https://github.com/rust-lang/rust/commit/fac12e25dd49246242b2b04321698fb4cbc6d135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fac12e25dd49246242b2b04321698fb4cbc6d135/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a37499ae66ec5fc52a93d71493b78fb141c32f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a37499ae66ec5fc52a93d71493b78fb141c32f6b", "html_url": "https://github.com/rust-lang/rust/commit/a37499ae66ec5fc52a93d71493b78fb141c32f6b"}], "stats": {"total": 101, "additions": 25, "deletions": 76}, "files": [{"sha": "59b1c7fb5dbd040feb5405184e4cd7dd49d8802d", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fac12e25dd49246242b2b04321698fb4cbc6d135/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac12e25dd49246242b2b04321698fb4cbc6d135/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=fac12e25dd49246242b2b04321698fb4cbc6d135", "patch": "@@ -1,14 +1,13 @@\n use crate::attributes;\n use crate::common::Funclet;\n use crate::context::CodegenCx;\n-use crate::llvm::{self, BasicBlock, False};\n-use crate::llvm::{AtomicOrdering, AtomicRmwBinOp, SynchronizationScope};\n+use crate::llvm::{self, AtomicOrdering, AtomicRmwBinOp, BasicBlock};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use cstr::cstr;\n use libc::{c_char, c_uint};\n-use rustc_codegen_ssa::common::{IntPredicate, RealPredicate, TypeKind};\n+use rustc_codegen_ssa::common::{IntPredicate, RealPredicate, SynchronizationScope, TypeKind};\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n@@ -1042,15 +1041,17 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     ) -> &'ll Value {\n         let weak = if weak { llvm::True } else { llvm::False };\n         unsafe {\n-            llvm::LLVMRustBuildAtomicCmpXchg(\n+            let value = llvm::LLVMBuildAtomicCmpXchg(\n                 self.llbuilder,\n                 dst,\n                 cmp,\n                 src,\n                 AtomicOrdering::from_generic(order),\n                 AtomicOrdering::from_generic(failure_order),\n-                weak,\n-            )\n+                llvm::False, // SingleThreaded\n+            );\n+            llvm::LLVMSetWeak(value, weak);\n+            value\n         }\n     }\n     fn atomic_rmw(\n@@ -1067,21 +1068,26 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 dst,\n                 src,\n                 AtomicOrdering::from_generic(order),\n-                False,\n+                llvm::False, // SingleThreaded\n             )\n         }\n     }\n \n     fn atomic_fence(\n         &mut self,\n         order: rustc_codegen_ssa::common::AtomicOrdering,\n-        scope: rustc_codegen_ssa::common::SynchronizationScope,\n+        scope: SynchronizationScope,\n     ) {\n+        let single_threaded = match scope {\n+            SynchronizationScope::SingleThread => llvm::True,\n+            SynchronizationScope::CrossThread => llvm::False,\n+        };\n         unsafe {\n-            llvm::LLVMRustBuildAtomicFence(\n+            llvm::LLVMBuildFence(\n                 self.llbuilder,\n                 AtomicOrdering::from_generic(order),\n-                SynchronizationScope::from_generic(scope),\n+                single_threaded,\n+                UNNAMED,\n             );\n         }\n     }"}, {"sha": "09f2c35689765b509858545a593c6391f044bac9", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fac12e25dd49246242b2b04321698fb4cbc6d135/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac12e25dd49246242b2b04321698fb4cbc6d135/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=fac12e25dd49246242b2b04321698fb4cbc6d135", "patch": "@@ -400,27 +400,6 @@ impl AtomicOrdering {\n     }\n }\n \n-/// LLVMRustSynchronizationScope\n-#[derive(Copy, Clone)]\n-#[repr(C)]\n-pub enum SynchronizationScope {\n-    SingleThread,\n-    CrossThread,\n-}\n-\n-impl SynchronizationScope {\n-    pub fn from_generic(sc: rustc_codegen_ssa::common::SynchronizationScope) -> Self {\n-        match sc {\n-            rustc_codegen_ssa::common::SynchronizationScope::SingleThread => {\n-                SynchronizationScope::SingleThread\n-            }\n-            rustc_codegen_ssa::common::SynchronizationScope::CrossThread => {\n-                SynchronizationScope::CrossThread\n-            }\n-        }\n-    }\n-}\n-\n /// LLVMRustFileType\n #[derive(Copy, Clone)]\n #[repr(C)]\n@@ -1782,16 +1761,18 @@ extern \"C\" {\n         Order: AtomicOrdering,\n     ) -> &'a Value;\n \n-    pub fn LLVMRustBuildAtomicCmpXchg<'a>(\n+    pub fn LLVMBuildAtomicCmpXchg<'a>(\n         B: &Builder<'a>,\n         LHS: &'a Value,\n         CMP: &'a Value,\n         RHS: &'a Value,\n         Order: AtomicOrdering,\n         FailureOrder: AtomicOrdering,\n-        Weak: Bool,\n+        SingleThreaded: Bool,\n     ) -> &'a Value;\n \n+    pub fn LLVMSetWeak(CmpXchgInst: &Value, IsWeak: Bool);\n+\n     pub fn LLVMBuildAtomicRMW<'a>(\n         B: &Builder<'a>,\n         Op: AtomicRmwBinOp,\n@@ -1801,11 +1782,12 @@ extern \"C\" {\n         SingleThreaded: Bool,\n     ) -> &'a Value;\n \n-    pub fn LLVMRustBuildAtomicFence(\n-        B: &Builder<'_>,\n+    pub fn LLVMBuildFence<'a>(\n+        B: &Builder<'a>,\n         Order: AtomicOrdering,\n-        Scope: SynchronizationScope,\n-    );\n+        SingleThreaded: Bool,\n+        Name: *const c_char,\n+    ) -> &'a Value;\n \n     /// Writes a module to the specified path. Returns 0 on success.\n     pub fn LLVMWriteBitcodeToFile(M: &Module, Path: *const c_char) -> c_int;"}, {"sha": "b2cfcf53c599373e31224582ce9ebb0e9663e147", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fac12e25dd49246242b2b04321698fb4cbc6d135/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fac12e25dd49246242b2b04321698fb4cbc6d135/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=fac12e25dd49246242b2b04321698fb4cbc6d135", "patch": "@@ -406,45 +406,6 @@ extern \"C\" LLVMValueRef LLVMRustBuildAtomicStore(LLVMBuilderRef B,\n   return wrap(SI);\n }\n \n-// FIXME: Use the C-API LLVMBuildAtomicCmpXchg and LLVMSetWeak\n-// once we raise our minimum support to LLVM 10.\n-extern \"C\" LLVMValueRef\n-LLVMRustBuildAtomicCmpXchg(LLVMBuilderRef B, LLVMValueRef Target,\n-                           LLVMValueRef Old, LLVMValueRef Source,\n-                           LLVMAtomicOrdering Order,\n-                           LLVMAtomicOrdering FailureOrder, LLVMBool Weak) {\n-  // Rust probably knows the alignment of the target value and should be able to\n-  // specify something more precise than MaybeAlign here. See also\n-  // https://reviews.llvm.org/D97224 which may be a useful reference.\n-  AtomicCmpXchgInst *ACXI = unwrap(B)->CreateAtomicCmpXchg(\n-      unwrap(Target), unwrap(Old), unwrap(Source), llvm::MaybeAlign(), fromRust(Order),\n-      fromRust(FailureOrder));\n-  ACXI->setWeak(Weak);\n-  return wrap(ACXI);\n-}\n-\n-enum class LLVMRustSynchronizationScope {\n-  SingleThread,\n-  CrossThread,\n-};\n-\n-static SyncScope::ID fromRust(LLVMRustSynchronizationScope Scope) {\n-  switch (Scope) {\n-  case LLVMRustSynchronizationScope::SingleThread:\n-    return SyncScope::SingleThread;\n-  case LLVMRustSynchronizationScope::CrossThread:\n-    return SyncScope::System;\n-  default:\n-    report_fatal_error(\"bad SynchronizationScope.\");\n-  }\n-}\n-\n-extern \"C\" LLVMValueRef\n-LLVMRustBuildAtomicFence(LLVMBuilderRef B, LLVMAtomicOrdering Order,\n-                         LLVMRustSynchronizationScope Scope) {\n-  return wrap(unwrap(B)->CreateFence(fromRust(Order), fromRust(Scope)));\n-}\n-\n enum class LLVMRustAsmDialect {\n   Att,\n   Intel,"}]}