{"sha": "f90033303b491bdd4c89aa892a13323cf2ba941f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDAzMzMwM2I0OTFiZGQ0Yzg5YWE4OTJhMTMzMjNjZjJiYTk0MWY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-17T17:16:59Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-17T17:16:59Z"}, "message": "Make sure the type we think is uninhabited actually is", "tree": {"sha": "1e1768ceb964609782506669783fb094842a5056", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e1768ceb964609782506669783fb094842a5056"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f90033303b491bdd4c89aa892a13323cf2ba941f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f90033303b491bdd4c89aa892a13323cf2ba941f", "html_url": "https://github.com/rust-lang/rust/commit/f90033303b491bdd4c89aa892a13323cf2ba941f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f90033303b491bdd4c89aa892a13323cf2ba941f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05067cf99e21bcb8fd5dce745d09865d1a91b189", "url": "https://api.github.com/repos/rust-lang/rust/commits/05067cf99e21bcb8fd5dce745d09865d1a91b189", "html_url": "https://github.com/rust-lang/rust/commit/05067cf99e21bcb8fd5dce745d09865d1a91b189"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "1669059a760f49d00117d2804b44722a66fbc286", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f90033303b491bdd4c89aa892a13323cf2ba941f/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90033303b491bdd4c89aa892a13323cf2ba941f/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=f90033303b491bdd4c89aa892a13323cf2ba941f", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 if intrinsic == Some(\"transmute\") {\n                     if let Some(destination_ref) = destination.as_ref() {\n                         let &(ref dest, target) = destination_ref;\n-                        self.trans_transmute(&bx, &args[0], dest);\n+                        self.codegen_transmute(&bx, &args[0], dest);\n                         funclet_br(self, bx, target);\n                     } else {\n                         // If we are trying to transmute to an uninhabited type,\n@@ -439,6 +439,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                         // we can do what we like. Here, we declare that transmuting\n                         // into an uninhabited type is impossible, so anything following\n                         // it must be unreachable.\n+                        assert_eq!(bx.cx.layout_of(sig.output()).abi, layout::Abi::Uninhabited);\n                         bx.unreachable();\n                     }\n                     return;"}]}