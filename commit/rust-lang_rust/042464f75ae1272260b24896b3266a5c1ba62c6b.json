{"sha": "042464f75ae1272260b24896b3266a5c1ba62c6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MjQ2NGY3NWFlMTI3MjI2MGIyNDg5NmIzMjY2YTVjMWJhNjJjNmI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-29T21:15:11Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:30Z"}, "message": "Fix tests and bootstrap", "tree": {"sha": "f1741138d142e2d05d4c458a70dc04916fdf3889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1741138d142e2d05d4c458a70dc04916fdf3889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/042464f75ae1272260b24896b3266a5c1ba62c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/042464f75ae1272260b24896b3266a5c1ba62c6b", "html_url": "https://github.com/rust-lang/rust/commit/042464f75ae1272260b24896b3266a5c1ba62c6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/042464f75ae1272260b24896b3266a5c1ba62c6b/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bdf723da7c465e052a1b1fc448c0014c46b9e51", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bdf723da7c465e052a1b1fc448c0014c46b9e51", "html_url": "https://github.com/rust-lang/rust/commit/2bdf723da7c465e052a1b1fc448c0014c46b9e51"}], "stats": {"total": 245, "additions": 182, "deletions": 63}, "files": [{"sha": "610c6fd7e35f8450cffb64ff0744638244797ada", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1170,8 +1170,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             // This also instantiates nested instances of `impl Trait`.\n             let predicate = self.instantiate_opaque_types_in_map(&predicate);\n \n-            let cause =\n-                traits::ObligationCause::new(span, self.body_id, traits::MiscObligation);\n+            let cause = traits::ObligationCause::new(span, self.body_id, traits::MiscObligation);\n \n             // Require that the predicate holds for the concrete type.\n             debug!(\"instantiate_opaque_types: predicate={:?}\", predicate);"}, {"sha": "9fd635c64a0f39151dca678177199a72671b3057", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -241,18 +241,27 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         traits::ObligationCause::new(self.span, self.body_id, code)\n     }\n \n-    fn normalize(&mut self) -> Vec<traits::PredicateObligation<'tcx>> {\n+    fn normalize(mut self) -> Vec<traits::PredicateObligation<'tcx>> {\n         let cause = self.cause(traits::MiscObligation);\n         let infcx = &mut self.infcx;\n         let param_env = self.param_env;\n         let mut obligations = Vec::with_capacity(self.out.len());\n-        for pred in &self.out {\n-            assert!(!pred.has_escaping_bound_vars());\n+        for mut obligation in self.out {\n+            assert!(!obligation.has_escaping_bound_vars());\n             let mut selcx = traits::SelectionContext::new(infcx);\n             let i = obligations.len();\n-            let value =\n-                traits::normalize_to(&mut selcx, param_env, cause.clone(), pred, &mut obligations);\n-            obligations.insert(i, value);\n+            // Don't normalize the whole obligation, the param env is either\n+            // already normalized, or we're currently normalizing the\n+            // param_env. Either way we should only normalize the predicate.\n+            let normalized_predicate = traits::normalize_to(\n+                &mut selcx,\n+                param_env,\n+                cause.clone(),\n+                &obligation.predicate,\n+                &mut obligations,\n+            );\n+            obligation.predicate = normalized_predicate;\n+            obligations.insert(i, obligation);\n         }\n         obligations\n     }"}, {"sha": "ee21167ff975d01eefa7d03a809a32239f6cbbec", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1256,6 +1256,7 @@ pub fn check_type_bounds<'tcx>(\n             );\n             debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n \n+            inh.register_predicates(obligations);\n             inh.register_predicate(obligation);\n         }\n "}, {"sha": "ac4abd6a51166f69d10574bc45282900dda911ec", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1787,10 +1787,22 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n                 }) => {\n                     if impl_trait_fn.is_some() {\n                         // return-position impl trait\n-                        // TODO: Investigate why we have this special case?\n+                        //\n+                        // We don't inherit predicates from the parent here:\n+                        // If we have, say `fn f<'a, T: 'a>() -> impl Sized {}`\n+                        // then the return type is `f::<'static, T>::{{opaque}}`.\n+                        //\n+                        // If we inherited the predicates of `f` then we would\n+                        // require that `T: 'static` to show that the return\n+                        // type is well-formed.\n+                        //\n+                        // The only way to have something with this opaque type\n+                        // is from the return type of the containing function,\n+                        // which will ensure that the function's predicates\n+                        // hold.\n                         return ty::GenericPredicates { parent: None, predicates: &[] };\n                     } else {\n-                        // type alias impl trait\n+                        // type-alias impl trait\n                         generics\n                     }\n                 }"}, {"sha": "a95cf776c2e0177c7ff1000f81e3db0074a7c2ba", "filename": "src/test/incremental/issue-54242.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fincremental%2Fissue-54242.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fincremental%2Fissue-54242.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-54242.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1,6 +1,6 @@\n // revisions: rpass cfail\n \n-trait Tr {\n+trait Tr where Self::Arr: Sized {\n     type Arr;\n \n     const C: usize = 0;"}, {"sha": "6ec2b98bf5b26b9938cd6f810f3016f32141d60b", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1,6 +1,6 @@\n - // MIR for `id_try` before SimplifyArmIdentity\n + // MIR for `id_try` after SimplifyArmIdentity\n-  \n+\n   fn id_try(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n       debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n       let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n@@ -42,7 +42,7 @@\n       scope 6 {\n           debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n-  \n+\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n@@ -53,7 +53,7 @@\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n           switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n-  \n+\n       bb1: {\n -         StorageLive(_10);                // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n -         _10 = ((_3 as Ok).0: u8);        // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n@@ -69,11 +69,11 @@\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n-  \n+\n       bb2: {\n           unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n       }\n-  \n+\n       bb3: {\n -         StorageLive(_6);                 // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n -         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n@@ -94,9 +94,9 @@\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n-  \n+\n       bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n   }\n-  \n+"}, {"sha": "172fb04a3cca85637b200a84669a8b1600eaafe1", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1,6 +1,6 @@\n - // MIR for `id_try` before SimplifyBranchSame\n + // MIR for `id_try` after SimplifyBranchSame\n-  \n+\n   fn id_try(_1: std::result::Result<u8, i32>) -> std::result::Result<u8, i32> {\n       debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:23:11: 23:12\n       let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:23:34: 23:49\n@@ -37,7 +37,7 @@\n       scope 6 {\n           debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n-  \n+\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:24:9: 24:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n@@ -49,28 +49,28 @@\n -         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n +         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:24:14: 24:15\n       }\n-  \n+\n       bb1: {\n           _0 = move _3;                    // scope 1 at $DIR/simplify-arm.rs:25:5: 25:10\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n -         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n +         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n-  \n+\n       bb2: {\n -         unreachable;                     // scope 0 at $DIR/simplify-arm.rs:24:13: 24:15\n -     }\n-- \n+-\n -     bb3: {\n -         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:24:15: 24:16\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:26:1: 26:2\n -         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n -     }\n-- \n+-\n -     bb4: {\n           return;                          // scope 0 at $DIR/simplify-arm.rs:26:2: 26:2\n       }\n   }\n-  \n+"}, {"sha": "12a6617cc5a278f89adda828952f1f0d94d887b3", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -25,7 +25,7 @@\n               }\n               scope 8 {\n                   debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n               }\n           }\n       }"}, {"sha": "534836eff7b2d1875e60a1eed5cc82aca063bb7c", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -29,7 +29,7 @@\n               scope 8 {\n -                 debug v => _8;           // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n +                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n               }\n           }\n       }"}, {"sha": "d2e37bf4e12ebcb10ece3686a3ac6b8c70f679fc", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -24,7 +24,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n             }\n             scope 8 {\n                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n+                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n             }\n         }\n     }"}, {"sha": "12db595ed2572aafc6ad548cb0777df1886c8dd4", "filename": "src/test/ui/associated-types/param-env-normalize-cycle.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Fassociated-types%2Fparam-env-normalize-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Fassociated-types%2Fparam-env-normalize-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fparam-env-normalize-cycle.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -0,0 +1,39 @@\n+// Minimized case from typenum that didn't compile because:\n+// - We tried to normalize the ParamEnv of the second impl\n+// - This requires trying to normalize `GrEq<Self, Square<Square<U>>>`\n+// - This requires proving `Square<Square<U>>: Sized` so that the first impl\n+//   applies\n+// - This requires Providing `Square<Square<U>>` is well-formed, so that we\n+//   can use the `Sized` bound on `Mul::Output`\n+// - This requires proving `Square<U>: Mul`\n+// - But first we tried normalizing the whole obligation, including the\n+//   ParamEnv, which leads to a cycle error.\n+\n+// check-pass\n+\n+trait PrivateSquareRoot {}\n+\n+pub trait Mul<Rhs = Self> {\n+    type Output;\n+}\n+\n+pub trait IsGreaterOrEqual<Rhs> {\n+    type Output;\n+}\n+\n+pub type Square<A> = <A as Mul>::Output;\n+pub type GrEq<A, B> = <A as IsGreaterOrEqual<B>>::Output;\n+\n+impl<A, B> IsGreaterOrEqual<B> for A {\n+    type Output = ();\n+}\n+\n+impl<U> PrivateSquareRoot for U\n+where\n+    U: Mul,\n+    Square<U>: Mul,\n+    GrEq<Self, Square<Square<U>>>: Sized,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "7dac2b26cce092e48ab253a66b2c8a53f6d8cfce", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n // compile-flags: -Zsave-analysis\n // This is also a regression test for #69415 and the above flag is needed.\n "}, {"sha": "03011bd1e32d1e3f80f2d8de646cca9da4107e52", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:15:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:16:22\n    |\n LL |     type A: Iterator<Item: Copy>;\n    |                      ^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     type A: Iterator<Item: Copy>;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:19:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:20:22\n    |\n LL |     type B: Iterator<Item: 'static>;\n    |                      ^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type B: Iterator<Item: 'static>;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:23:20\n+  --> $DIR/feature-gate-associated_type_bounds.rs:24:20\n    |\n LL | struct _St1<T: Tr1<As1: Tr2>> {\n    |                    ^^^^^^^^\n@@ -26,7 +26,7 @@ LL | struct _St1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:30:18\n+  --> $DIR/feature-gate-associated_type_bounds.rs:31:18\n    |\n LL | enum _En1<T: Tr1<As1: Tr2>> {\n    |                  ^^^^^^^^\n@@ -35,7 +35,7 @@ LL | enum _En1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:37:19\n+  --> $DIR/feature-gate-associated_type_bounds.rs:38:19\n    |\n LL | union _Un1<T: Tr1<As1: Tr2>> {\n    |                   ^^^^^^^^\n@@ -44,7 +44,7 @@ LL | union _Un1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:44:37\n+  --> $DIR/feature-gate-associated_type_bounds.rs:45:37\n    |\n LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    |                                     ^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:47:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:48:22\n    |\n LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    |                      ^^^^^^^^^\n@@ -62,7 +62,7 @@ LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:49:26\n+  --> $DIR/feature-gate-associated_type_bounds.rs:50:26\n    |\n LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    |                          ^^^^^^^^^\n@@ -71,7 +71,7 @@ LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:52:24\n+  --> $DIR/feature-gate-associated_type_bounds.rs:53:24\n    |\n LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    |                        ^^^^^^^^^\n@@ -80,7 +80,7 @@ LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:55:31\n+  --> $DIR/feature-gate-associated_type_bounds.rs:56:31\n    |\n LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    |                               ^^^^^^^^^\n@@ -89,7 +89,7 @@ LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:58:23\n+  --> $DIR/feature-gate-associated_type_bounds.rs:59:23\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |                       ^^^^^^^^^\n@@ -98,7 +98,7 @@ LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:64:24\n+  --> $DIR/feature-gate-associated_type_bounds.rs:65:24\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |                        ^^^^^^^^^\n@@ -107,7 +107,7 @@ LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:71:21\n+  --> $DIR/feature-gate-associated_type_bounds.rs:72:21\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |                     ^^^^^^^^^\n@@ -116,31 +116,31 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:58:14\n+  --> $DIR/feature-gate-associated_type_bounds.rs:59:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:64:15\n+  --> $DIR/feature-gate-associated_type_bounds.rs:65:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:71:12\n+  --> $DIR/feature-gate-associated_type_bounds.rs:72:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `<<Self as _Tr3>::A as std::iter::Iterator>::Item: std::marker::Copy` is not satisfied\n-  --> $DIR/feature-gate-associated_type_bounds.rs:15:28\n+  --> $DIR/feature-gate-associated_type_bounds.rs:16:28\n    |\n LL |     type A: Iterator<Item: Copy>;\n    |                            ^^^^ the trait `std::marker::Copy` is not implemented for `<<Self as _Tr3>::A as std::iter::Iterator>::Item`"}, {"sha": "8aca8c388d4a36b2b8fc4b456b8f6df47ff9c1fc", "filename": "src/test/ui/for/for-c-in-str.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1,14 +1,16 @@\n-// E0277 should point exclusively at line 14, not the entire for loop span\n+// E0277 should point exclusively at line 6, not the entire for loop span\n+\n+// ignore-tidy-linelength\n \n fn main() {\n     for c in \"asdf\" {\n-    //~^ ERROR `&str` is not an iterator\n-    //~| NOTE `&str` is not an iterator\n-    //~| HELP the trait `Iterator` is not implemented for `&str`\n-    //~| NOTE required by `into_iter`\n-    //~| NOTE in this expansion of desugaring of `for` loop\n-    //~| NOTE in this expansion of desugaring of `for` loop\n-    //~| NOTE in this expansion of desugaring of `for` loop\n+        //~^ ERROR `&str` is not an iterator\n+        //~| NOTE `&str` is not an iterator\n+        //~| HELP the trait `Iterator` is not implemented for `&str`\n+        //~| NOTE required by `into_iter`\n+        //~| NOTE in this expansion of desugaring of `for` loop\n+        //~| NOTE in this expansion of desugaring of `for` loop\n+        //~| NOTE in this expansion of desugaring of `for` loop\n         println!();\n     }\n }"}, {"sha": "f991e08e518cc60953e1fb3a03d4ddf168af6474", "filename": "src/test/ui/for/for-c-in-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `&str` is not an iterator\n-  --> $DIR/for-c-in-str.rs:4:14\n+  --> $DIR/for-c-in-str.rs:6:14\n    |\n LL |     for c in \"asdf\" {\n    |              ^^^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`"}, {"sha": "0e8e14852d9db9a41a23c2b9828b9dd85e8b450e", "filename": "src/test/ui/generic-associated-types/auxiliary/foo_defn.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Ffoo_defn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Ffoo_defn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Ffoo_defn.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -0,0 +1,8 @@\n+#![feature(generic_associated_types)]\n+\n+use std::{future::Future, pin::Pin};\n+\n+pub trait Foo {\n+    type Bar: AsRef<()>;\n+    fn foo(&self) -> Pin<Box<dyn Future<Output = Self::Bar> + '_>>;\n+}"}, {"sha": "4e2bab38c88a304cc0ec788680ca31793d2fae11", "filename": "src/test/ui/generic-associated-types/cross-crate-bounds.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -0,0 +1,32 @@\n+// regression test for #73816\n+// We handled bounds differently when `feature(generic_associated_types)` was enabled\n+\n+// edition:2018\n+// aux-build:foo_defn.rs\n+\n+extern crate foo_defn;\n+\n+use foo_defn::Foo;\n+use std::{future::Future, pin::Pin};\n+\n+pub struct FooImpl;\n+\n+impl Foo for FooImpl {\n+    type Bar = ();\n+    //~^ ERROR the trait bound `(): std::convert::AsRef<()>` is not satisfied\n+    fn foo(&self) -> Pin<Box<dyn Future<Output = Self::Bar> + '_>> {\n+        panic!()\n+    }\n+}\n+\n+async fn foo() {\n+    bar(&FooImpl).await;\n+}\n+\n+async fn bar<F: Foo>(foo: &F) {\n+    foo.foo().await.as_ref();\n+}\n+\n+fn main() {\n+    // futures::executor::block_on(foo());\n+}"}, {"sha": "5fd2750868fef5d70aaef5d54b8318f55ecbcf4e", "filename": "src/test/ui/generic-associated-types/cross-crate-bounds.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `(): std::convert::AsRef<()>` is not satisfied\n+  --> $DIR/cross-crate-bounds.rs:15:5\n+   |\n+LL |     type Bar = ();\n+   |     ^^^^^^^^^^^^^^ the trait `std::convert::AsRef<()>` is not implemented for `()`\n+   | \n+  ::: $DIR/auxiliary/foo_defn.rs:6:15\n+   |\n+LL |     type Bar: AsRef<()>;\n+   |               --------- required by this bound in `foo_defn::Foo::Bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ba04fd93accec2e8b417517f7b6ff36787c7207b", "filename": "src/test/ui/traits/check-trait-object-bounds-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-3.rs?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -18,4 +18,3 @@ pub fn main() {\n \n     println!(\"{}\", z)\n }\n-"}, {"sha": "ade552c4bab41a0dc45c5c500247cce82888300d", "filename": "src/test/ui/traits/check-trait-object-bounds-3.stderr", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/042464f75ae1272260b24896b3266a5c1ba62c6b/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcheck-trait-object-bounds-3.stderr?ref=042464f75ae1272260b24896b3266a5c1ba62c6b", "patch": "@@ -1,12 +1,15 @@\n-error[E0277]: the trait bound `str: std::clone::Clone` is not satisfied\n-  --> $DIR/check-trait-object-bounds-3.rs:12:5\n+error[E0597]: `s` does not live long enough\n+  --> $DIR/check-trait-object-bounds-3.rs:15:34\n    |\n-LL | fn f<T: X + ?Sized>() {\n-   |         - required by this bound in `f`\n-...\n-LL |     f::<dyn X<Y = str>>();\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `str`\n+LL |         z = f::<dyn X<Y = &str>>(&s);\n+   |             ---------------------^^-\n+   |             |                    |\n+   |             |                    borrowed value does not live long enough\n+   |             argument requires that `s` is borrowed for `'static`\n+LL |\n+LL |     }\n+   |     - `s` dropped here while still borrowed\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0597`."}]}