{"sha": "7be94a8a958750cf57c0fa41ad7797a2cd1630de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZTk0YThhOTU4NzUwY2Y1N2MwZmE0MWFkNzc5N2EyY2QxNjMwZGU=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-25T17:10:34Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-27T22:32:46Z"}, "message": "don't use .into() to convert types into identical types.\n\nexample:\n    let s: String = format!(\"hello\").into();", "tree": {"sha": "c6064989bb4e5f2795af1f71831c2bcf22b6f2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6064989bb4e5f2795af1f71831c2bcf22b6f2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be94a8a958750cf57c0fa41ad7797a2cd1630de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be94a8a958750cf57c0fa41ad7797a2cd1630de", "html_url": "https://github.com/rust-lang/rust/commit/7be94a8a958750cf57c0fa41ad7797a2cd1630de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be94a8a958750cf57c0fa41ad7797a2cd1630de/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0", "html_url": "https://github.com/rust-lang/rust/commit/49c68bd53f90e375bfb3cbba8c1c67a9e0adb9c0"}], "stats": {"total": 104, "additions": 42, "deletions": 62}, "files": [{"sha": "0d0aa8a232e69ed0290f413850a70f0f69a6470e", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -472,7 +472,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         val: ScalarMaybeUndef<Tag>,\n     ) -> InterpResult<'tcx> {\n         let ptr_size = cx.data_layout().pointer_size;\n-        self.write_scalar(cx, ptr.into(), val, ptr_size)\n+        self.write_scalar(cx, ptr, val, ptr_size)\n     }\n }\n "}, {"sha": "6a937b87645cd9ab18b0c89eb24c5712cb6c4e62", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -1519,7 +1519,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 values\n                     .iter()\n                     .map(|&u| {\n-                        ty::Const::from_scalar(tcx, Scalar::from_uint(u, size).into(), switch_ty)\n+                        ty::Const::from_scalar(tcx, Scalar::from_uint(u, size), switch_ty)\n                             .to_string()\n                             .into()\n                     })"}, {"sha": "13996a74acb3574306a70e9d59fcc8529e6d96a1", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> Rvalue<'tcx> {\n             }\n             Rvalue::AddressOf(mutability, ref place) => {\n                 let place_ty = place.ty(local_decls, tcx).ty;\n-                tcx.mk_ptr(ty::TypeAndMut { ty: place_ty, mutbl: mutability.into() })\n+                tcx.mk_ptr(ty::TypeAndMut { ty: place_ty, mutbl: mutability })\n             }\n             Rvalue::Len(..) => tcx.types.usize,\n             Rvalue::Cast(.., ty) => ty,"}, {"sha": "b05bd26f0482cf66176e09c86d0ac6f10bd1bb13", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -820,8 +820,7 @@ impl ObjectSafetyViolation {\n                 MethodViolationCode::UndispatchableReceiver,\n                 span,\n             ) => (\n-                format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name)\n-                    .into(),\n+                format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name),\n                 Some((\"&Self\".to_string(), span)),\n             ),\n             ObjectSafetyViolation::AssocConst(name, _)"}, {"sha": "d781fbde59cb7486c9dc309a3aa594f116f703ac", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -831,8 +831,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 .last()\n                 .cloned()\n                 .map(|id| Ok(self.lower_node_id(id)))\n-                .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n-                .into(),\n+                .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope)),\n         };\n         hir::Destination { label: destination.map(|(_, label)| label), target_id }\n     }\n@@ -841,7 +840,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         if self.is_in_loop_condition && opt_label.is_none() {\n             hir::Destination {\n                 label: None,\n-                target_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n+                target_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition),\n             }\n         } else {\n             self.lower_loop_destination(opt_label.map(|label| (id, label)))\n@@ -912,7 +911,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 .collect(),\n             asm: asm.asm,\n             asm_str_style: asm.asm_str_style,\n-            clobbers: asm.clobbers.clone().into(),\n+            clobbers: asm.clobbers.clone(),\n             volatile: asm.volatile,\n             alignstack: asm.alignstack,\n             dialect: asm.dialect,"}, {"sha": "af95450935caa7441b1dc826a8552f2e77ab589d", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -92,8 +92,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n                 let a = Scalar::from(Pointer::new(\n                     bx.tcx().alloc_map.lock().create_memory_alloc(data),\n                     Size::from_bytes(start as u64),\n-                ))\n-                .into();\n+                ));\n                 let a_llval = bx.scalar_to_backend(\n                     a,\n                     a_scalar,"}, {"sha": "6d0046063989b57f17a66ed82e4cb8565aab080e", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::Rvalue::AddressOf(mutability, ref place) => {\n                 let mk_ptr = move |tcx: TyCtxt<'tcx>, ty: Ty<'tcx>| {\n-                    tcx.mk_ptr(ty::TypeAndMut { ty, mutbl: mutability.into() })\n+                    tcx.mk_ptr(ty::TypeAndMut { ty, mutbl: mutability })\n                 };\n                 self.codegen_place_to_pointer(bx, place, mk_ptr)\n             }"}, {"sha": "809bbe47a6e75c6b344cb29ebc37fe18381c9d0b", "filename": "src/librustc_expand/mbe/quoted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -112,7 +112,7 @@ fn parse_tree(\n                     sess.span_diagnostic.span_err(span.entire(), &msg);\n                 }\n                 // Parse the contents of the sequence itself\n-                let sequence = parse(tts.into(), expect_matchers, sess);\n+                let sequence = parse(tts, expect_matchers, sess);\n                 // Get the Kleene operator and optional separator\n                 let (separator, kleene) = parse_sep_and_kleene_op(trees, span.entire(), sess);\n                 // Count the number of captured \"names\" (i.e., named metavars)\n@@ -159,7 +159,7 @@ fn parse_tree(\n         // descend into the delimited set and further parse it.\n         tokenstream::TokenTree::Delimited(span, delim, tts) => TokenTree::Delimited(\n             span,\n-            Lrc::new(Delimited { delim, tts: parse(tts.into(), expect_matchers, sess) }),\n+            Lrc::new(Delimited { delim, tts: parse(tts, expect_matchers, sess) }),\n         ),\n     }\n }"}, {"sha": "9e6a2c4f8f55085b26f1e10ca056288e5afb3902", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -155,8 +155,7 @@ pub(super) fn transcribe(\n                     }\n \n                     // Step back into the parent Delimited.\n-                    let tree =\n-                        TokenTree::Delimited(span, forest.delim, TokenStream::new(result).into());\n+                    let tree = TokenTree::Delimited(span, forest.delim, TokenStream::new(result));\n                     result = result_stack.pop().unwrap();\n                     result.push(tree.into());\n                 }"}, {"sha": "afaba6bf315ed6d55509941cc1246999b57d9aa3", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -60,7 +60,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n         let Token { kind, span } = match tree {\n             tokenstream::TokenTree::Delimited(span, delim, tts) => {\n                 let delimiter = Delimiter::from_internal(delim);\n-                return TokenTree::Group(Group { delimiter, stream: tts.into(), span });\n+                return TokenTree::Group(Group { delimiter, stream: tts, span });\n             }\n             tokenstream::TokenTree::Token(token) => token,\n         };\n@@ -196,12 +196,8 @@ impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n         let (ch, joint, span) = match self {\n             TokenTree::Punct(Punct { ch, joint, span }) => (ch, joint, span),\n             TokenTree::Group(Group { delimiter, stream, span }) => {\n-                return tokenstream::TokenTree::Delimited(\n-                    span,\n-                    delimiter.to_internal(),\n-                    stream.into(),\n-                )\n-                .into();\n+                return tokenstream::TokenTree::Delimited(span, delimiter.to_internal(), stream)\n+                    .into();\n             }\n             TokenTree::Ident(self::Ident { sym, is_raw, span }) => {\n                 return tokenstream::TokenTree::token(Ident(sym, is_raw), span).into();"}, {"sha": "26f855b177e8161a64b970091f6bb32e448ba675", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -669,7 +669,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         } else {\n             let var = self.canonical_var(info, const_var.into());\n             self.tcx().mk_const(ty::Const {\n-                val: ty::ConstKind::Bound(self.binder_index, var.into()),\n+                val: ty::ConstKind::Bound(self.binder_index, var),\n                 ty: self.fold_ty(const_var.ty),\n             })\n         }"}, {"sha": "08f73d2c9d2a8f1f5329fe24487f1d0e051d469e", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -140,7 +140,6 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         // Extend with bounds that we can find from the trait.\n         let trait_bounds = self\n             .projection_declared_bounds_from_trait(projection_ty)\n-            .into_iter()\n             .map(|r| VerifyBound::OutlivedBy(r));\n \n         // see the extensive comment in projection_must_outlive"}, {"sha": "4eac89138f198756e64a61c7550511eaa45bba84", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -3202,7 +3202,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     obligation.predicate.def_id(),\n                     obligation.recursion_depth + 1,\n                     a_last.expect_ty(),\n-                    &[b_last.into()],\n+                    &[b_last],\n                 ));\n             }\n "}, {"sha": "781b33bd94ce036bab4836441e86634ae81803cb", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -639,7 +639,7 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n                                     ast::GenericArg::Type(ty) => Some(ty),\n                                     _ => None,\n                                 });\n-                                any_involves_impl_trait(types.into_iter())\n+                                any_involves_impl_trait(types)\n                                     || data.constraints.iter().any(|c| match c.kind {\n                                         ast::AssocTyConstraintKind::Bound { .. } => true,\n                                         ast::AssocTyConstraintKind::Equality { ref ty } => {"}, {"sha": "ff19ac5f21a36d16456a1b157aa75db8ec0506c8", "filename": "src/librustc_mir/borrow_check/region_infer/reverse_sccs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Freverse_sccs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Freverse_sccs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Freverse_sccs.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -56,7 +56,7 @@ impl RegionInferenceContext<'_> {\n         let mut scc_regions = FxHashMap::default();\n         let mut start = 0;\n         for (scc, group) in &paired_scc_regions.into_iter().group_by(|(scc, _)| *scc) {\n-            let group_size = group.into_iter().count();\n+            let group_size = group.count();\n             scc_regions.insert(scc, start..start + group_size);\n             start += group_size;\n         }"}, {"sha": "cb6583976258bd4da1f435b1a864993893efdd45", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn const_caller_location<'tcx>(\n \n     let loc_place = ecx.alloc_caller_location(file, line, col);\n     intern_const_alloc_recursive(&mut ecx, InternKind::Constant, loc_place, false).unwrap();\n-    ConstValue::Scalar(loc_place.ptr.into())\n+    ConstValue::Scalar(loc_place.ptr)\n }\n \n // this function uses `unwrap` copiously, because an already validated constant"}, {"sha": "cd06cf01bfa8111a1537fb2acd6da72820cbbe21", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -67,7 +67,7 @@ crate fn eval_nullary_intrinsic<'tcx>(\n             };\n             ConstValue::from_machine_usize(n, &tcx)\n         }\n-        sym::type_id => ConstValue::from_u64(tcx.type_id_hash(tp_ty).into()),\n+        sym::type_id => ConstValue::from_u64(tcx.type_id_hash(tp_ty)),\n         other => bug!(\"`{}` is not a zero arg intrinsic\", other),\n     })\n }"}, {"sha": "a02a6898c1d715d45f10be7969ded44f71e6a661", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -293,7 +293,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                                 let (&untuple_arg, args) = args.split_last().unwrap();\n                                 trace!(\"eval_fn_call: Will pass last argument by untupling\");\n                                 Cow::from(args.iter().map(|&a| Ok(a))\n-                                .chain((0..untuple_arg.layout.fields.count()).into_iter()\n+                                .chain((0..untuple_arg.layout.fields.count())\n                                     .map(|i| self.operand_field(untuple_arg, i as u64))\n                                 )\n                                 .collect::<InterpResult<'_, Vec<OpTy<'tcx, M::PointerTag>>>>()?)"}, {"sha": "c9038ccf37b9edb4ca2709baf46c97f0e7afef0d", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -209,7 +209,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n \n     // We return the qualifs in the return place for every MIR body, even though it is only used\n     // when deciding to promote a reference to a `const` for now.\n-    validator.qualifs_in_return_place().into()\n+    validator.qualifs_in_return_place()\n }\n \n fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<BodyAndCache<'_>> {"}, {"sha": "927c8f6dfb29b9b834b9fc13861da047ddc977a4", "filename": "src/librustc_mir/util/aggregate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Faggregate.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -49,7 +49,6 @@ pub fn expand_aggregate<'tcx>(\n     };\n \n     operands\n-        .into_iter()\n         .enumerate()\n         .map(move |(i, (op, ty))| {\n             let lhs_field = if let AggregateKind::Array(_) = kind {"}, {"sha": "d9091f92b035d617889f91805f68aed3ab450fb6", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -1942,8 +1942,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let tcx = self.hir.tcx();\n         let debug_source_info = SourceInfo { span: source_info.span, scope: visibility_scope };\n         let binding_mode = match mode {\n-            BindingMode::ByValue => ty::BindingMode::BindByValue(mutability.into()),\n-            BindingMode::ByRef(_) => ty::BindingMode::BindByReference(mutability.into()),\n+            BindingMode::ByValue => ty::BindingMode::BindByValue(mutability),\n+            BindingMode::ByRef(_) => ty::BindingMode::BindByReference(mutability),\n         };\n         debug!(\"declare_binding: user_ty={:?}\", user_ty);\n         let local = LocalDecl::<'tcx> {"}, {"sha": "830877f713e4bb91730d6e5dd3d9973f2f46875b", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -882,7 +882,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             span: tcx_hir.span(var_id),\n                         },\n                         place: Place {\n-                            local: closure_env_arg.into(),\n+                            local: closure_env_arg,\n                             projection: tcx.intern_place_elems(&projs),\n                         },\n                     });\n@@ -927,7 +927,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         self.local_decls[local].local_info = if let Some(kind) = self_binding {\n                             LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(*kind)))\n                         } else {\n-                            let binding_mode = ty::BindingMode::BindByValue(mutability.into());\n+                            let binding_mode = ty::BindingMode::BindByValue(mutability);\n                             LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                                 VarBindingForm {\n                                     binding_mode,"}, {"sha": "66280638a2d4067121bfcc2bc6829e5b84621d40", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -327,8 +327,7 @@ impl<'a> StringReader<'a> {\n         match kind {\n             rustc_lexer::LiteralKind::Char { terminated } => {\n                 if !terminated {\n-                    self.fatal_span_(start, suffix_start, \"unterminated character literal\".into())\n-                        .raise()\n+                    self.fatal_span_(start, suffix_start, \"unterminated character literal\").raise()\n                 }\n                 let content_start = start + BytePos(1);\n                 let content_end = suffix_start - BytePos(1);\n@@ -338,12 +337,8 @@ impl<'a> StringReader<'a> {\n             }\n             rustc_lexer::LiteralKind::Byte { terminated } => {\n                 if !terminated {\n-                    self.fatal_span_(\n-                        start + BytePos(1),\n-                        suffix_start,\n-                        \"unterminated byte constant\".into(),\n-                    )\n-                    .raise()\n+                    self.fatal_span_(start + BytePos(1), suffix_start, \"unterminated byte constant\")\n+                        .raise()\n                 }\n                 let content_start = start + BytePos(2);\n                 let content_end = suffix_start - BytePos(1);\n@@ -353,7 +348,7 @@ impl<'a> StringReader<'a> {\n             }\n             rustc_lexer::LiteralKind::Str { terminated } => {\n                 if !terminated {\n-                    self.fatal_span_(start, suffix_start, \"unterminated double quote string\".into())\n+                    self.fatal_span_(start, suffix_start, \"unterminated double quote string\")\n                         .raise()\n                 }\n                 let content_start = start + BytePos(1);\n@@ -367,7 +362,7 @@ impl<'a> StringReader<'a> {\n                     self.fatal_span_(\n                         start + BytePos(1),\n                         suffix_start,\n-                        \"unterminated double quote byte string\".into(),\n+                        \"unterminated double quote byte string\",\n                     )\n                     .raise()\n                 }"}, {"sha": "4f0276225fb805ade13296508a2e614c8e00edaf", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -212,7 +212,7 @@ impl<'a> TokenTreesReader<'a> {\n                     _ => {}\n                 }\n \n-                Ok(TokenTree::Delimited(delim_span, delim, tts.into()).into())\n+                Ok(TokenTree::Delimited(delim_span, delim, tts).into())\n             }\n             token::CloseDelim(delim) => {\n                 // An unexpected closing delimiter (i.e., there is no"}, {"sha": "4cf9e4c3059720e05ee7321f371762e8d3232085", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -420,7 +420,7 @@ fn prepend_attrs(\n         builder.push(tokenstream::TokenTree::Delimited(\n             delim_span,\n             token::DelimToken::Bracket,\n-            brackets.build().into(),\n+            brackets.build(),\n         ));\n     }\n     builder.push(tokens.clone());"}, {"sha": "7b8642b01513a0a7dac59df3906af07c5208f1bd", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -263,8 +263,7 @@ impl TokenCursor {\n             ]\n             .iter()\n             .cloned()\n-            .collect::<TokenStream>()\n-            .into(),\n+            .collect::<TokenStream>(),\n         );\n \n         self.stack.push(mem::replace(\n@@ -389,7 +388,7 @@ impl<'a> Parser<'a> {\n             root_module_name: None,\n             expected_tokens: Vec::new(),\n             token_cursor: TokenCursor {\n-                frame: TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, &tokens.into()),\n+                frame: TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, &tokens),\n                 stack: Vec::new(),\n             },\n             desugar_doc_comments,\n@@ -1006,7 +1005,7 @@ impl<'a> Parser<'a> {\n                 );\n                 self.set_token(Token::new(TokenKind::CloseDelim(frame.delim), frame.span.close));\n                 self.bump();\n-                TokenTree::Delimited(frame.span, frame.delim, frame.tree_cursor.stream.into())\n+                TokenTree::Delimited(frame.span, frame.delim, frame.tree_cursor.stream)\n             }\n             token::CloseDelim(_) | token::Eof => unreachable!(),\n             _ => {"}, {"sha": "257292ae0729cd8683adf0a1d46a31e68488fb78", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -169,7 +169,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_local_mk(&mut self, lo: Span, attrs: AttrVec) -> PResult<'a, Stmt> {\n-        let local = self.parse_local(attrs.into())?;\n+        let local = self.parse_local(attrs)?;\n         Ok(self.mk_stmt(lo.to(self.prev_span), StmtKind::Local(local)))\n     }\n "}, {"sha": "2719057fb5351a7ade75e2f90ab381ecb5a2986d", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                     return;\n                 }\n \n-                let loop_id = match label.target_id.into() {\n+                let loop_id = match label.target_id {\n                     Ok(loop_id) => loop_id,\n                     Err(hir::LoopIdError::OutsideLoopScope) => hir::DUMMY_HIR_ID,\n                     Err(hir::LoopIdError::UnlabeledCfInWhileCondition) => {"}, {"sha": "44a2c5464cdb56c732c42c1369ff191cbb788b17", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -24,7 +24,6 @@ crate fn fn_ptr(\n ) -> Ty<'tcx> {\n     let inputs_and_output = tcx.mk_type_list(\n         (0..arity_and_output)\n-            .into_iter()\n             .map(|i| ty::BoundVar::from(i))\n             // DebruijnIndex(1) because we are going to inject these in a `PolyFnSig`\n             .map(|var| tcx.mk_ty(ty::Bound(ty::DebruijnIndex::from(1usize), var.into()))),\n@@ -37,7 +36,6 @@ crate fn fn_ptr(\n crate fn type_list(tcx: TyCtxt<'tcx>, arity: usize) -> SubstsRef<'tcx> {\n     tcx.mk_substs(\n         (0..arity)\n-            .into_iter()\n             .map(|i| ty::BoundVar::from(i))\n             .map(|var| tcx.mk_ty(ty::Bound(ty::INNERMOST, var.into())))\n             .map(|ty| GenericArg::from(ty)),"}, {"sha": "fcbeb5b210decad42e3dad661e0c327931944d38", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -312,6 +312,6 @@ pub fn check_explicit_predicates<'tcx>(\n \n         let predicate = outlives_predicate.subst(tcx, substs);\n         debug!(\"predicate = {:?}\", &predicate);\n-        insert_outlives_predicate(tcx, predicate.0.into(), predicate.1, span, required_predicates);\n+        insert_outlives_predicate(tcx, predicate.0, predicate.1, span, required_predicates);\n     }\n }"}, {"sha": "83f052c898ba35cae9418a1dab91ec2aae8faea0", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -287,9 +287,7 @@ impl CStringArray {\n \n fn construct_envp(env: BTreeMap<OsString, OsString>, saw_nul: &mut bool) -> CStringArray {\n     let mut result = CStringArray::with_capacity(env.len());\n-    for (k, v) in env {\n-        let mut k: OsString = k.into();\n-\n+    for (mut k, v) in env {\n         // Reserve additional space for '=' and null terminator\n         k.reserve_exact(v.len() + 2);\n         k.push(\"=\");"}, {"sha": "bc5c86b02b3c090e46e1485ef3ce3ce89bb15adb", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be94a8a958750cf57c0fa41ad7797a2cd1630de/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=7be94a8a958750cf57c0fa41ad7797a2cd1630de", "patch": "@@ -529,7 +529,7 @@ impl MetaItemKind {\n                     TokenTree::Delimited(\n                         DelimSpan::from_single(span),\n                         token::Paren,\n-                        TokenStream::new(tokens).into(),\n+                        TokenStream::new(tokens),\n                     )\n                     .into(),\n                 ]"}]}