{"sha": "f852160a99721f89a6bc206bae337291c485069e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NTIxNjBhOTk3MjFmODlhNmJjMjA2YmFlMzM3MjkxYzQ4NTA2OWU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-10T20:00:36Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-10T20:00:36Z"}, "message": "Keep existing names of regions in placeholder_error", "tree": {"sha": "5535f8c74ece71036a2729cdf7274bbbc92b80ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5535f8c74ece71036a2729cdf7274bbbc92b80ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f852160a99721f89a6bc206bae337291c485069e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f852160a99721f89a6bc206bae337291c485069e", "html_url": "https://github.com/rust-lang/rust/commit/f852160a99721f89a6bc206bae337291c485069e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f852160a99721f89a6bc206bae337291c485069e/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9337d4fde89ded13243d67bec0b03f7fc553cbf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9337d4fde89ded13243d67bec0b03f7fc553cbf9", "html_url": "https://github.com/rust-lang/rust/commit/9337d4fde89ded13243d67bec0b03f7fc553cbf9"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "4aecc2f40b8741599ee61e8966ff1de700dd8344", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f852160a99721f89a6bc206bae337291c485069e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f852160a99721f89a6bc206bae337291c485069e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=f852160a99721f89a6bc206bae337291c485069e", "patch": "@@ -118,9 +118,9 @@ impl NiceRegionError<'me, 'tcx> {\n                 sub_region @ ty::RePlaceholder(_),\n                 sup_region,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(sup_region),\n+                (!sup_region.has_name()).then_some(sup_region),\n                 cause,\n-                Some(*sub_region),\n+                Some(sub_region),\n                 None,\n                 values,\n             ),\n@@ -130,10 +130,10 @@ impl NiceRegionError<'me, 'tcx> {\n                 sub_region,\n                 sup_region @ ty::RePlaceholder(_),\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(sub_region),\n+                (!sub_region.has_name()).then_some(sub_region),\n                 cause,\n                 None,\n-                Some(*sup_region),\n+                Some(sup_region),\n                 values,\n             ),\n "}, {"sha": "da3d3249f0e7ee157cef94630c21f310d70dfb1a", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=f852160a99721f89a6bc206bae337291c485069e", "patch": "@@ -4,17 +4,17 @@ error: implementation of `Foo` is not general enough\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo` would have to be implemented for the type `&'0 OnlyFooIfStaticRef`, for any lifetime `'0`...\n-   = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:31:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n-   = note: `Foo` would have to be implemented for the type `&'0 OnlyFooIfStaticRef`, for any lifetime `'0`...\n-   = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...\n+   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:50:5"}, {"sha": "ffc83aab4af4d03dd35344ded3eba490c6b73323", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=f852160a99721f89a6bc206bae337291c485069e", "patch": "@@ -5,7 +5,7 @@ LL |     want_hrtb::<StaticInt>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Foo<&'1 isize>`, for some specific lifetime `'1`\n+   = note: ...but it actually implements `Foo<&'static isize>`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5"}, {"sha": "07ff9b96e44ff807d28eaa9571396338558acdda", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.stderr?ref=f852160a99721f89a6bc206bae337291c485069e", "patch": "@@ -5,7 +5,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n    |\n    = note: `T` must implement `Bar<&'0 isize>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Bar<&'1 isize>`, for some specific lifetime `'1`\n+   = note: ...but it actually implements `Bar<&'b isize>`\n \n error: implementation of `Bar` is not general enough\n   --> $DIR/hrtb-perfect-forwarding.rs:43:5\n@@ -14,7 +14,7 @@ LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^ implementation of `Bar` is not general enough\n    |\n    = note: `T` must implement `Bar<&'0 isize>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Bar<&'1 isize>`, for some specific lifetime `'1`\n+   = note: ...but it actually implements `Bar<&'b isize>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "521de3742b03f510782842b8028ff6bdba5c5dcf", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=f852160a99721f89a6bc206bae337291c485069e", "patch": "@@ -47,8 +47,8 @@ error: implementation of `FnOnce` is not general enough\n LL |     baz(f);\n    |     ^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: `fn(*mut &'2 u32)` must implement `FnOnce<(*mut &'1 u32,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(*mut &'2 u32,)>`, for some specific lifetime `'2`\n+   = note: `fn(*mut &'a u32)` must implement `FnOnce<(*mut &'0 u32,)>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `FnOnce<(*mut &'a u32,)>`\n \n error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n@@ -75,8 +75,8 @@ error: implementation of `FnOnce` is not general enough\n LL |     baz(f);\n    |     ^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: `fn(*mut &'2 u32)` must implement `FnOnce<(*mut &'1 u32,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(*mut &'2 u32,)>`, for some specific lifetime `'2`\n+   = note: `fn(*mut &'a u32)` must implement `FnOnce<(*mut &'0 u32,)>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `FnOnce<(*mut &'a u32,)>`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "998e178966a22a30a31f43f8dc54f056043b9942", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=f852160a99721f89a6bc206bae337291c485069e", "patch": "@@ -30,8 +30,8 @@ error: implementation of `FnOnce` is not general enough\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n+   = note: closure with signature `fn(&'static X) -> &'static X` must implement `FnOnce<(&'0 X,)>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `FnOnce<(&'static X,)>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6da46e20c09c0116b3c75818cfae55d82107f78a", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f852160a99721f89a6bc206bae337291c485069e/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=f852160a99721f89a6bc206bae337291c485069e", "patch": "@@ -4,8 +4,8 @@ error: implementation of `Bar` is not general enough\n LL |     foo(&X);\n    |     ^^^ implementation of `Bar` is not general enough\n    |\n-   = note: `Bar` would have to be implemented for the type `&'0 u32`, for any lifetime `'0`...\n-   = note: ...but `Bar` is actually implemented for the type `&'1 u32`, for some specific lifetime `'1`\n+   = note: `&'0 u32` must implement `Bar`, for any lifetime `'0`...\n+   = note: ...but `Bar` is actually implemented for the type `&'static u32`\n \n error: aborting due to previous error\n "}]}