{"sha": "b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDQ5YmE3ODUwNDA2ODIxZDFiMDVjYTRmNTVjNWViM2I3ZThhZTg=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-05-22T01:51:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-22T01:51:19Z"}, "message": "Allow overflowing rhs of unit variant (#3566)", "tree": {"sha": "8be07e467def9cbafed47adfbdbafabfb444eefc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8be07e467def9cbafed47adfbdbafabfb444eefc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5KsXCRBK7hj4Ov3rIwAAdHIIAGiSBTgCSrothpjbZNzzqVpT\n9Uaf1HDU0NOPEYn+wJsKxAsG33bpzJxjzDm2VNg84jKSUhG2OwTjNYcQ+GrkC0WX\nEsWb+C7T37J85lfJ6ogQGcBRBTtajO3ovQZ/kd+hjJ8cGAJPO5yDfTlnk6V0XYVh\nnb+PM2jJb+x3ECc0rOoasGBhyPxWS2Yj9RjXS4P6jgoFOyMBQlpb4o5Ecwz3c/C2\nYh3fX/LtVenQEoRimwzli9r7+w0H0+P5um+vRrYGPX7r1JpKI634P6quSgV55VUv\nDNzX50hrk3oHVZ7HaWX6vYkDprvG1EKOtdgyGLw9gA5rC97Yv5jH/Iv5OXL1GhI=\n=BysZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 8be07e467def9cbafed47adfbdbafabfb444eefc\nparent 72ca0e5f2c5df0801af4db14f88e7f8ea6e24002\nauthor Seiichi Uchida <seuchida@gmail.com> 1558489879 +0900\ncommitter GitHub <noreply@github.com> 1558489879 +0900\n\nAllow overflowing rhs of unit variant (#3566)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "html_url": "https://github.com/rust-lang/rust/commit/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72ca0e5f2c5df0801af4db14f88e7f8ea6e24002", "url": "https://api.github.com/repos/rust-lang/rust/commits/72ca0e5f2c5df0801af4db14f88e7f8ea6e24002", "html_url": "https://github.com/rust-lang/rust/commit/72ca0e5f2c5df0801af4db14f88e7f8ea6e24002"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "afd9465c73c90233b2dc18bd408a008e7aa298f1", "filename": "src/expr.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "patch": "@@ -1894,6 +1894,9 @@ pub(crate) enum RhsTactics {\n     Default,\n     /// Put the rhs on the next line if it uses multiple line, without extra indentation.\n     ForceNextLineWithoutIndent,\n+    /// Allow overflowing max width if neither `Default` nor `ForceNextLineWithoutIndent`\n+    /// did not work.\n+    AllowOverflow,\n }\n \n // The left hand side must contain everything up to, and including, the\n@@ -1970,6 +1973,10 @@ fn choose_rhs<R: Rewrite>(\n                     Some(format!(\"{}{}\", new_indent_str, new_rhs))\n                 }\n                 (None, Some(ref new_rhs)) => Some(format!(\"{}{}\", new_indent_str, new_rhs)),\n+                (None, None) if rhs_tactics == RhsTactics::AllowOverflow => {\n+                    let shape = shape.infinite_width();\n+                    expr.rewrite(context, shape).map(|s| format!(\" {}\", s))\n+                }\n                 (None, None) => None,\n                 (Some(orig_rhs), _) => Some(format!(\" {}\", orig_rhs)),\n             }\n@@ -1986,7 +1993,7 @@ fn shape_from_rhs_tactic(\n         RhsTactics::ForceNextLineWithoutIndent => shape\n             .with_max_width(context.config)\n             .sub_width(shape.indent.width()),\n-        RhsTactics::Default => {\n+        RhsTactics::Default | RhsTactics::AllowOverflow => {\n             Shape::indented(shape.indent.block_indent(context.config), context.config)\n                 .sub_width(shape.rhs_overhead(context.config))\n         }"}, {"sha": "d642718412ff20ea0996847c02364096a7e37f58", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "patch": "@@ -592,7 +592,13 @@ impl<'a> FmtVisitor<'a> {\n                         rewrite_ident(&context, field.node.ident),\n                         pad_discrim_ident_to\n                     );\n-                    rewrite_assign_rhs(&context, lhs, &*expr.value, shape)?\n+                    rewrite_assign_rhs_with(\n+                        &context,\n+                        lhs,\n+                        &*expr.value,\n+                        shape,\n+                        RhsTactics::AllowOverflow,\n+                    )?\n                 } else {\n                     rewrite_ident(&context, field.node.ident).to_owned()\n                 }"}, {"sha": "4376fd12b526005706f526bcc3252446f8cf74c0", "filename": "src/shape.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/src%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/src%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshape.rs?ref=b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "patch": "@@ -136,6 +136,9 @@ impl Sub<usize> for Indent {\n     }\n }\n \n+// 8096 is close enough to infinite for rustfmt.\n+const INFINITE_SHAPE_WIDTH: usize = 8096;\n+\n #[derive(Copy, Clone, Debug)]\n pub(crate) struct Shape {\n     pub(crate) width: usize,\n@@ -274,6 +277,14 @@ impl Shape {\n         offset_indent.alignment = self.offset;\n         offset_indent.to_string_inner(config, 0)\n     }\n+\n+    /// Creates a `Shape` with a virtually infinite width.\n+    pub(crate) fn infinite_width(&self) -> Shape {\n+        Shape {\n+            width: INFINITE_SHAPE_WIDTH,\n+            ..*self\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "fd563206ae581ef8c01501c00002fce6f41e6b6d", "filename": "tests/source/enum.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "patch": "@@ -195,3 +195,10 @@ pub enum QlError {\n // #2594\n enum Foo {}\n enum Bar { }\n+\n+// #3562\n+enum PublishedFileVisibility {\n+    Public = sys::ERemoteStoragePublishedFileVisibility_k_ERemoteStoragePublishedFileVisibilityPublic,\n+    FriendsOnly = sys::ERemoteStoragePublishedFileVisibility_k_ERemoteStoragePublishedFileVisibilityFriendsOnly,\n+    Private = sys::ERemoteStoragePublishedFileVisibility_k_ERemoteStoragePublishedFileVisibilityPrivate,\n+}"}, {"sha": "6af05cbed90975ac19105de3d50c42f4db07aa35", "filename": "tests/target/enum.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "patch": "@@ -264,3 +264,12 @@ pub enum QlError {\n // #2594\n enum Foo {}\n enum Bar {}\n+\n+// #3562\n+enum PublishedFileVisibility {\n+    Public =\n+        sys::ERemoteStoragePublishedFileVisibility_k_ERemoteStoragePublishedFileVisibilityPublic,\n+    FriendsOnly = sys::ERemoteStoragePublishedFileVisibility_k_ERemoteStoragePublishedFileVisibilityFriendsOnly,\n+    Private =\n+        sys::ERemoteStoragePublishedFileVisibility_k_ERemoteStoragePublishedFileVisibilityPrivate,\n+}"}]}