{"sha": "202ad1e2d9376565cb273cf085be600ed10e5a93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMmFkMWUyZDkzNzY1NjVjYjI3M2NmMDg1YmU2MDBlZDEwZTVhOTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-14T17:20:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-14T17:20:18Z"}, "message": "Merge #2552\n\n2552: fix goto definition when inbetween tokens r=matklad a=succcubbus\n\nfixes both goto_definition and goto_type_definition.\r\nbefore, when running goto between some non-trivia token and an\r\nidentifier, goto would be attempted for the non-trivia token.\r\nbut this does not make sense for e.g. L_PAREN or COLONCOLON only for\r\nIDENTs.\r\n\r\nthis resulted in goto actions not working when running them on the first\r\ncharacter of some identifier e.g. for `module::<|>method()` or\r\n`method(<|>parameter)`.\r\n\r\nnow only IDENTs will be searched for in goto actions, though i'm not sure\r\nif this is correct or if goto should also work for some other token types.  \n\nCo-authored-by: succcubbus <16743652+succcubbus@users.noreply.github.com>", "tree": {"sha": "21ef288f183f39468147972aef88617411a3fdec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21ef288f183f39468147972aef88617411a3fdec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/202ad1e2d9376565cb273cf085be600ed10e5a93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd9RnSCRBK7hj4Ov3rIwAAdHIIAFb6Mt+tZemjoIvYDkkwndmC\nlfrfVvmFKvPVkec5+e3NKlUnamWX1ubIxOyePdOItY4wOu3KZleu/Ppg3BRcGSyI\nhmF8iniNy0YXbIo+MH2H38oOELnsZYlyclRhT5114aodDp2S8xSiVEOZJXviCTNW\nqyt+SUFZ1duo1BW5NxFCSm8Qg674lU+fV/lnD7IqXH0pB8sjgSTiFpKgtd/shkbi\nBmSUf4zqXsRIHnxdhvOPb2kb5katKwqOdHx5AJK9+7pC0qRwTsRWpSzlzIssNYrk\new6p8kYQoB8QX0dwz7wQtSInhgtSqfW90keDuwjHMxAl8f4VLP6Xd6nQe3nC+SE=\n=NoZ5\n-----END PGP SIGNATURE-----\n", "payload": "tree 21ef288f183f39468147972aef88617411a3fdec\nparent 77db6177658b32f69ad7ebfdef96c1b3b2893fdd\nparent c82529a97f10b1302d2944f1946bcb3479f64e2d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576344018 +0000\ncommitter GitHub <noreply@github.com> 1576344018 +0000\n\nMerge #2552\n\n2552: fix goto definition when inbetween tokens r=matklad a=succcubbus\n\nfixes both goto_definition and goto_type_definition.\r\nbefore, when running goto between some non-trivia token and an\r\nidentifier, goto would be attempted for the non-trivia token.\r\nbut this does not make sense for e.g. L_PAREN or COLONCOLON only for\r\nIDENTs.\r\n\r\nthis resulted in goto actions not working when running them on the first\r\ncharacter of some identifier e.g. for `module::<|>method()` or\r\n`method(<|>parameter)`.\r\n\r\nnow only IDENTs will be searched for in goto actions, though i'm not sure\r\nif this is correct or if goto should also work for some other token types.  \n\nCo-authored-by: succcubbus <16743652+succcubbus@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/202ad1e2d9376565cb273cf085be600ed10e5a93", "html_url": "https://github.com/rust-lang/rust/commit/202ad1e2d9376565cb273cf085be600ed10e5a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/202ad1e2d9376565cb273cf085be600ed10e5a93/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77db6177658b32f69ad7ebfdef96c1b3b2893fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/77db6177658b32f69ad7ebfdef96c1b3b2893fdd", "html_url": "https://github.com/rust-lang/rust/commit/77db6177658b32f69ad7ebfdef96c1b3b2893fdd"}, {"sha": "c82529a97f10b1302d2944f1946bcb3479f64e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82529a97f10b1302d2944f1946bcb3479f64e2d", "html_url": "https://github.com/rust-lang/rust/commit/c82529a97f10b1302d2944f1946bcb3479f64e2d"}], "stats": {"total": 112, "additions": 106, "deletions": 6}, "files": [{"sha": "27052d72b62a65fcdb1f1d75e378ba68f6d35388", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/202ad1e2d9376565cb273cf085be600ed10e5a93/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202ad1e2d9376565cb273cf085be600ed10e5a93/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=202ad1e2d9376565cb273cf085be600ed10e5a93", "patch": "@@ -3,7 +3,9 @@\n use hir::{db::AstDatabase, InFile};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n-    match_ast, AstNode, SyntaxNode,\n+    match_ast, AstNode,\n+    SyntaxKind::*,\n+    SyntaxNode, SyntaxToken, TokenAtOffset,\n };\n \n use crate::{\n@@ -19,8 +21,7 @@ pub(crate) fn goto_definition(\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n     let file = db.parse_or_expand(position.file_id.into())?;\n-    let original_token =\n-        file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+    let original_token = pick_best(file.token_at_offset(position.offset))?;\n     let token = descend_into_macros(db, position.file_id, original_token.clone());\n \n     let nav_targets = match_ast! {\n@@ -38,6 +39,17 @@ pub(crate) fn goto_definition(\n     Some(RangeInfo::new(original_token.text_range(), nav_targets))\n }\n \n+fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n+    return tokens.max_by_key(priority);\n+    fn priority(n: &SyntaxToken) -> usize {\n+        match n.kind() {\n+            IDENT | INT_NUMBER => 2,\n+            kind if kind.is_trivia() => 0,\n+            _ => 1,\n+        }\n+    }\n+}\n+\n #[derive(Debug)]\n pub(crate) enum ReferenceResult {\n     Exact(NavigationTarget),\n@@ -234,6 +246,18 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn goto_definition_works_at_start_of_item() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo;\n+            enum E { X(<|>Foo) }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+        );\n+    }\n+\n     #[test]\n     fn goto_definition_resolves_correct_name() {\n         check_goto(\n@@ -434,6 +458,22 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn goto_for_tuple_fields() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo(u32);\n+\n+            fn bar() {\n+                let foo = Foo(0);\n+                foo.<|>0;\n+            }\n+            \",\n+            \"TUPLE_FIELD_DEF FileId(1) [11; 14)\",\n+        );\n+    }\n+\n     #[test]\n     fn goto_definition_works_for_ufcs_inherent_methods() {\n         check_goto("}, {"sha": "ce8b6c72a1ae5f5ab6c92b1b98dc90001bd7c1a4", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/202ad1e2d9376565cb273cf085be600ed10e5a93/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202ad1e2d9376565cb273cf085be600ed10e5a93/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=202ad1e2d9376565cb273cf085be600ed10e5a93", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::db::AstDatabase;\n-use ra_syntax::{ast, AstNode};\n+use ra_syntax::{ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n \n use crate::{\n     db::RootDatabase, display::ToNav, expand::descend_into_macros, FilePosition, NavigationTarget,\n@@ -13,7 +13,7 @@ pub(crate) fn goto_type_definition(\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n     let file = db.parse_or_expand(position.file_id.into())?;\n-    let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+    let token = pick_best(file.token_at_offset(position.offset))?;\n     let token = descend_into_macros(db, position.file_id, token);\n \n     let node = token.value.ancestors().find_map(|token| {\n@@ -41,6 +41,17 @@ pub(crate) fn goto_type_definition(\n     Some(RangeInfo::new(node.text_range(), vec![nav]))\n }\n \n+fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n+    return tokens.max_by_key(priority);\n+    fn priority(n: &SyntaxToken) -> usize {\n+        match n.kind() {\n+            IDENT | INT_NUMBER => 2,\n+            kind if kind.is_trivia() => 0,\n+            _ => 1,\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::mock_analysis::analysis_and_position;\n@@ -102,4 +113,32 @@ mod tests {\n             \"Foo STRUCT_DEF FileId(1) [52; 65) [59; 62)\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_type_definition_for_param() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo;\n+            fn foo(<|>f: Foo) {}\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_type_definition_for_tuple_field() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo;\n+            struct Bar(Foo);\n+            fn foo() {\n+                let bar = Bar(Foo);\n+                bar.<|>0;\n+            }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n+        );\n+    }\n }"}, {"sha": "51e32012821f500efde1f922d2506de1494c7ace", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/202ad1e2d9376565cb273cf085be600ed10e5a93/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202ad1e2d9376565cb273cf085be600ed10e5a93/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=202ad1e2d9376565cb273cf085be600ed10e5a93", "patch": "@@ -6,6 +6,8 @@ use ra_syntax::{\n     algo::find_covering_element,\n     ast::{self, DocCommentsOwner},\n     match_ast, AstNode,\n+    SyntaxKind::*,\n+    SyntaxToken, TokenAtOffset,\n };\n \n use crate::{\n@@ -156,7 +158,7 @@ fn hover_text_from_name_kind(\n \n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n     let file = db.parse_or_expand(position.file_id.into())?;\n-    let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+    let token = pick_best(file.token_at_offset(position.offset))?;\n     let token = descend_into_macros(db, position.file_id, token);\n \n     let mut res = HoverResult::new();\n@@ -218,6 +220,18 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     Some(RangeInfo::new(range, res))\n }\n \n+fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n+    return tokens.max_by_key(priority);\n+    fn priority(n: &SyntaxToken) -> usize {\n+        match n.kind() {\n+            IDENT | INT_NUMBER => 3,\n+            L_PAREN | R_PAREN => 2,\n+            kind if kind.is_trivia() => 0,\n+            _ => 1,\n+        }\n+    }\n+}\n+\n pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n     let parse = db.parse(frange.file_id);\n     let leaf_node = find_covering_element(parse.tree().syntax(), frange.range);\n@@ -504,6 +518,13 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n     }\n \n+    #[test]\n+    fn hover_for_param_edge() {\n+        let (analysis, position) = single_file_with_position(\"fn func(<|>foo: i32) {}\");\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+    }\n+\n     #[test]\n     fn test_type_of_for_function() {\n         let (analysis, range) = single_file_with_range("}]}