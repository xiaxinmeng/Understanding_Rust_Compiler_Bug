{"sha": "f0a1eff1c47b57815bda774a7e16fcc2a39eaa65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYTFlZmYxYzQ3YjU3ODE1YmRhNzc0YTdlMTZmY2MyYTM5ZWFhNjU=", "commit": {"author": {"name": "G. Endignoux", "email": "ggendx@gmail.com", "date": "2017-10-30T12:04:26Z"}, "committer": {"name": "G. Endignoux", "email": "ggendx@gmail.com", "date": "2017-10-30T12:08:09Z"}, "message": "Start working on #1590", "tree": {"sha": "23cec1061349db9b571dbeef6b8fd3dd5b048e48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23cec1061349db9b571dbeef6b8fd3dd5b048e48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0a1eff1c47b57815bda774a7e16fcc2a39eaa65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a1eff1c47b57815bda774a7e16fcc2a39eaa65", "html_url": "https://github.com/rust-lang/rust/commit/f0a1eff1c47b57815bda774a7e16fcc2a39eaa65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0a1eff1c47b57815bda774a7e16fcc2a39eaa65/comments", "author": {"login": "gendx", "id": 4346404, "node_id": "MDQ6VXNlcjQzNDY0MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4346404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gendx", "html_url": "https://github.com/gendx", "followers_url": "https://api.github.com/users/gendx/followers", "following_url": "https://api.github.com/users/gendx/following{/other_user}", "gists_url": "https://api.github.com/users/gendx/gists{/gist_id}", "starred_url": "https://api.github.com/users/gendx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gendx/subscriptions", "organizations_url": "https://api.github.com/users/gendx/orgs", "repos_url": "https://api.github.com/users/gendx/repos", "events_url": "https://api.github.com/users/gendx/events{/privacy}", "received_events_url": "https://api.github.com/users/gendx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gendx", "id": 4346404, "node_id": "MDQ6VXNlcjQzNDY0MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4346404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gendx", "html_url": "https://github.com/gendx", "followers_url": "https://api.github.com/users/gendx/followers", "following_url": "https://api.github.com/users/gendx/following{/other_user}", "gists_url": "https://api.github.com/users/gendx/gists{/gist_id}", "starred_url": "https://api.github.com/users/gendx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gendx/subscriptions", "organizations_url": "https://api.github.com/users/gendx/orgs", "repos_url": "https://api.github.com/users/gendx/repos", "events_url": "https://api.github.com/users/gendx/events{/privacy}", "received_events_url": "https://api.github.com/users/gendx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "306b6e243b384570804585499c492e80436db885", "url": "https://api.github.com/repos/rust-lang/rust/commits/306b6e243b384570804585499c492e80436db885", "html_url": "https://github.com/rust-lang/rust/commit/306b6e243b384570804585499c492e80436db885"}], "stats": {"total": 254, "additions": 161, "deletions": 93}, "files": [{"sha": "baa1b852fe11b252725f91571f8bdc859c1bc30b", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f0a1eff1c47b57815bda774a7e16fcc2a39eaa65/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a1eff1c47b57815bda774a7e16fcc2a39eaa65/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=f0a1eff1c47b57815bda774a7e16fcc2a39eaa65", "patch": "@@ -193,6 +193,24 @@ declare_lint! {\n      `map_or_else(g, f)`\"\n }\n \n+/// **What it does:** Checks for usage of `result.map(_).unwrap_or_else(_)`.\n+///\n+/// **Why is this bad?** Readability, this can be written more concisely as\n+/// `result.ok().map_or_else(_, _)`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// x.map(|a| a + 1).unwrap_or_else(some_function)\n+/// ```\n+declare_lint! {\n+    pub RESULT_MAP_UNWRAP_OR_ELSE,\n+    Allow,\n+    \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as \\\n+     `.ok().map_or_else(g, f)`\"\n+}\n+\n /// **What it does:** Checks for usage of `_.map_or(None, _)`.\n ///\n /// **Why is this bad?** Readability, this can be written more concisely as\n@@ -615,6 +633,7 @@ impl LintPass for Pass {\n             OK_EXPECT,\n             OPTION_MAP_UNWRAP_OR,\n             OPTION_MAP_UNWRAP_OR_ELSE,\n+            RESULT_MAP_UNWRAP_OR_ELSE,\n             OPTION_MAP_OR_NONE,\n             OR_FUN_CALL,\n             CHARS_NEXT_CMP,\n@@ -1241,13 +1260,25 @@ fn lint_map_unwrap_or(cx: &LateContext, expr: &hir::Expr, map_args: &[hir::Expr]\n     }\n }\n \n-/// lint use of `map().unwrap_or_else()` for `Option`s\n-fn lint_map_unwrap_or_else<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, map_args: &'tcx [hir::Expr], unwrap_args: &'tcx [hir::Expr]) {\n+/// lint use of `map().unwrap_or_else()` for `Option`s and `Result`s\n+fn lint_map_unwrap_or_else<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx hir::Expr,\n+    map_args: &'tcx [hir::Expr],\n+    unwrap_args: &'tcx [hir::Expr],\n+) {\n     // lint if the caller of `map()` is an `Option`\n-    if match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION) {\n+    let is_option = match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION);\n+    let is_result = match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::RESULT);\n+    if is_option || is_result {\n         // lint message\n-        let msg = \"called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling \\\n-                   `map_or_else(g, f)` instead\";\n+        let msg = if is_option {\n+            \"called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling \\\n+            `map_or_else(g, f)` instead\"\n+        } else {\n+            \"called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling \\\n+            `ok().map_or_else(g, f)` instead\"\n+        };\n         // get snippets for args to map() and unwrap_or_else()\n         let map_snippet = snippet(cx, map_args[1].span, \"..\");\n         let unwrap_snippet = snippet(cx, unwrap_args[1].span, \"..\");\n@@ -1258,18 +1289,32 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir\n         if same_span && !multiline {\n             span_note_and_lint(\n                 cx,\n-                OPTION_MAP_UNWRAP_OR_ELSE,\n+                if is_option {\n+                    OPTION_MAP_UNWRAP_OR_ELSE\n+                } else {\n+                    RESULT_MAP_UNWRAP_OR_ELSE\n+                },\n                 expr.span,\n                 msg,\n                 expr.span,\n                 &format!(\n-                    \"replace `map({0}).unwrap_or_else({1})` with `map_or_else({1}, {0})`\",\n+                    \"replace `map({0}).unwrap_or_else({1})` with `{2}map_or_else({1}, {0})`\",\n                     map_snippet,\n-                    unwrap_snippet\n+                    unwrap_snippet,\n+                    if is_result { \"ok().\" } else { \"\" }\n                 ),\n             );\n         } else if same_span && multiline {\n-            span_lint(cx, OPTION_MAP_UNWRAP_OR_ELSE, expr.span, msg);\n+            span_lint(\n+                cx,\n+                if is_option {\n+                    OPTION_MAP_UNWRAP_OR_ELSE\n+                } else {\n+                    RESULT_MAP_UNWRAP_OR_ELSE\n+                },\n+                expr.span,\n+                msg,\n+            );\n         };\n     }\n }"}, {"sha": "9e37c89400174485160e025acc22591e2eb92eaa", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f0a1eff1c47b57815bda774a7e16fcc2a39eaa65/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a1eff1c47b57815bda774a7e16fcc2a39eaa65/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=f0a1eff1c47b57815bda774a7e16fcc2a39eaa65", "patch": "@@ -149,6 +149,29 @@ fn option_methods() {\n                 );\n }\n \n+/// Checks implementation of the following lints:\n+/// * `RESULT_MAP_UNWRAP_OR_ELSE`\n+fn result_methods() {\n+    let res: Result<i32, ()> = Ok(1);\n+\n+    // Check RESULT_MAP_UNWRAP_OR_ELSE\n+    // single line case\n+    let _ = res.map(|x| x + 1)\n+\n+               .unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+    // multi line cases\n+    let _ = res.map(|x| {\n+                        x + 1\n+                    }\n+              ).unwrap_or_else(|e| 0);\n+    let _ = res.map(|x| x + 1)\n+               .unwrap_or_else(|e|\n+                    0\n+                );\n+    // macro case\n+    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|e| 0); // should not lint\n+}\n+\n /// Struct to generate false positives for things with .iter()\n #[derive(Copy, Clone)]\n struct HasIter;"}, {"sha": "a34b80823b96319c4fd2149c896f285f289d62b3", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 84, "deletions": 84, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/f0a1eff1c47b57815bda774a7e16fcc2a39eaa65/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0a1eff1c47b57815bda774a7e16fcc2a39eaa65/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=f0a1eff1c47b57815bda774a7e16fcc2a39eaa65", "patch": "@@ -221,251 +221,251 @@ help: try using and_then instead\n     |\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:173:24\n+   --> $DIR/methods.rs:196:24\n     |\n-173 |     fn filter(self) -> IteratorFalsePositives {\n+196 |     fn filter(self) -> IteratorFalsePositives {\n     |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:177:22\n+   --> $DIR/methods.rs:200:22\n     |\n-177 |     fn next(self) -> IteratorFalsePositives {\n+200 |     fn next(self) -> IteratorFalsePositives {\n     |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:197:32\n+   --> $DIR/methods.rs:220:32\n     |\n-197 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n+220 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:207:13\n+   --> $DIR/methods.rs:230:13\n     |\n-207 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+230 |     let _ = v.iter().filter(|&x| *x < 0).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D filter-next` implied by `-D warnings`\n     = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:210:13\n+   --> $DIR/methods.rs:233:13\n     |\n-210 |       let _ = v.iter().filter(|&x| {\n+233 |       let _ = v.iter().filter(|&x| {\n     |  _____________^\n-211 | |                                 *x < 0\n-212 | |                             }\n-213 | |                    ).next();\n+234 | |                                 *x < 0\n+235 | |                             }\n+236 | |                    ).next();\n     | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:225:13\n+   --> $DIR/methods.rs:248:13\n     |\n-225 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+248 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D search-is-some` implied by `-D warnings`\n     = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:228:13\n+   --> $DIR/methods.rs:251:13\n     |\n-228 |       let _ = v.iter().find(|&x| {\n+251 |       let _ = v.iter().find(|&x| {\n     |  _____________^\n-229 | |                               *x < 0\n-230 | |                           }\n-231 | |                    ).is_some();\n+252 | |                               *x < 0\n+253 | |                           }\n+254 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:234:13\n+   --> $DIR/methods.rs:257:13\n     |\n-234 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+257 |     let _ = v.iter().position(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:237:13\n+   --> $DIR/methods.rs:260:13\n     |\n-237 |       let _ = v.iter().position(|&x| {\n+260 |       let _ = v.iter().position(|&x| {\n     |  _____________^\n-238 | |                                   x < 0\n-239 | |                               }\n-240 | |                    ).is_some();\n+261 | |                                   x < 0\n+262 | |                               }\n+263 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:243:13\n+   --> $DIR/methods.rs:266:13\n     |\n-243 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+266 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:246:13\n+   --> $DIR/methods.rs:269:13\n     |\n-246 |       let _ = v.iter().rposition(|&x| {\n+269 |       let _ = v.iter().rposition(|&x| {\n     |  _____________^\n-247 | |                                    x < 0\n-248 | |                                }\n-249 | |                    ).is_some();\n+270 | |                                    x < 0\n+271 | |                                }\n+272 | |                    ).is_some();\n     | |______________________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:263:21\n+   --> $DIR/methods.rs:286:21\n     |\n-263 |         fn new() -> Foo { Foo }\n+286 |         fn new() -> Foo { Foo }\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:281:5\n+   --> $DIR/methods.rs:304:5\n     |\n-281 |     with_constructor.unwrap_or(make());\n+304 |     with_constructor.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-   --> $DIR/methods.rs:284:5\n+   --> $DIR/methods.rs:307:5\n     |\n-284 |     with_new.unwrap_or(Vec::new());\n+307 |     with_new.unwrap_or(Vec::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:287:5\n+   --> $DIR/methods.rs:310:5\n     |\n-287 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+310 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:290:5\n+   --> $DIR/methods.rs:313:5\n     |\n-290 |     with_err.unwrap_or(make());\n+313 |     with_err.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:293:5\n+   --> $DIR/methods.rs:316:5\n     |\n-293 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+316 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:296:5\n+   --> $DIR/methods.rs:319:5\n     |\n-296 |     with_default_trait.unwrap_or(Default::default());\n+319 |     with_default_trait.unwrap_or(Default::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:299:5\n+   --> $DIR/methods.rs:322:5\n     |\n-299 |     with_default_type.unwrap_or(u64::default());\n+322 |     with_default_type.unwrap_or(u64::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:302:5\n+   --> $DIR/methods.rs:325:5\n     |\n-302 |     with_vec.unwrap_or(vec![]);\n+325 |     with_vec.unwrap_or(vec![]);\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:307:5\n+   --> $DIR/methods.rs:330:5\n     |\n-307 |     without_default.unwrap_or(Foo::new());\n+330 |     without_default.unwrap_or(Foo::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:310:5\n+   --> $DIR/methods.rs:333:5\n     |\n-310 |     map.entry(42).or_insert(String::new());\n+333 |     map.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:313:5\n+   --> $DIR/methods.rs:336:5\n     |\n-313 |     btree.entry(42).or_insert(String::new());\n+336 |     btree.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:316:13\n+   --> $DIR/methods.rs:339:13\n     |\n-316 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+339 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:327:23\n+   --> $DIR/methods.rs:350:23\n     |\n-327 |         let bad_vec = some_vec.iter().nth(3);\n+350 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:328:26\n+   --> $DIR/methods.rs:351:26\n     |\n-328 |         let bad_slice = &some_vec[..].iter().nth(3);\n+351 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:329:31\n+   --> $DIR/methods.rs:352:31\n     |\n-329 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+352 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:330:29\n+   --> $DIR/methods.rs:353:29\n     |\n-330 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+353 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:335:23\n+   --> $DIR/methods.rs:358:23\n     |\n-335 |         let bad_vec = some_vec.iter_mut().nth(3);\n+358 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:338:26\n+   --> $DIR/methods.rs:361:26\n     |\n-338 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+361 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:341:29\n+   --> $DIR/methods.rs:364:29\n     |\n-341 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+364 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:353:13\n+   --> $DIR/methods.rs:376:13\n     |\n-353 |     let _ = some_vec.iter().skip(42).next();\n+376 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:354:13\n+   --> $DIR/methods.rs:377:13\n     |\n-354 |     let _ = some_vec.iter().cycle().skip(42).next();\n+377 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:355:13\n+   --> $DIR/methods.rs:378:13\n     |\n-355 |     let _ = (1..10).skip(10).next();\n+378 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:356:14\n+   --> $DIR/methods.rs:379:14\n     |\n-356 |     let _ = &some_vec[..].iter().skip(3).next();\n+379 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:365:13\n+   --> $DIR/methods.rs:388:13\n     |\n-365 |     let _ = opt.unwrap();\n+388 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}