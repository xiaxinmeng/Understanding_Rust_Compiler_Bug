{"sha": "6ccd14a782420d27aef9d9fcd9196949a3276427", "node_id": "C_kwDOAAsO6NoAKDZjY2QxNGE3ODI0MjBkMjdhZWY5ZDlmY2Q5MTk2OTQ5YTMyNzY0Mjc", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-11-27T19:11:21Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-12-07T17:08:43Z"}, "message": "Improve several aspects of the Rustdoc scrape-examples UI.\n* Examples take up less screen height.\n* Snippets from binary crates are prioritized.\n* toggle-all-docs does not expand \"More examples\" sections.", "tree": {"sha": "56608f31f109012632cad07581c812b5ba15592b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56608f31f109012632cad07581c812b5ba15592b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ccd14a782420d27aef9d9fcd9196949a3276427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ccd14a782420d27aef9d9fcd9196949a3276427", "html_url": "https://github.com/rust-lang/rust/commit/6ccd14a782420d27aef9d9fcd9196949a3276427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ccd14a782420d27aef9d9fcd9196949a3276427/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb", "html_url": "https://github.com/rust-lang/rust/commit/01fbc5ae789fc0c7a2da71d3cd908451f175e4eb"}], "stats": {"total": 139, "additions": 106, "deletions": 33}, "files": [{"sha": "41af4f9561b53b0c34e1524f0bebdc7e8fec3790", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -69,8 +69,8 @@ pub(crate) struct Options {\n     pub(crate) input: PathBuf,\n     /// The name of the crate being documented.\n     pub(crate) crate_name: Option<String>,\n-    /// Whether or not this is a proc-macro crate\n-    pub(crate) proc_macro_crate: bool,\n+    /// The types of the crate being documented.\n+    pub(crate) crate_types: Vec<CrateType>,\n     /// How to format errors and warnings.\n     pub(crate) error_format: ErrorOutputType,\n     /// Width of output buffer to truncate errors appropriately.\n@@ -176,7 +176,7 @@ impl fmt::Debug for Options {\n         f.debug_struct(\"Options\")\n             .field(\"input\", &self.input)\n             .field(\"crate_name\", &self.crate_name)\n-            .field(\"proc_macro_crate\", &self.proc_macro_crate)\n+            .field(\"crate_types\", &self.crate_types)\n             .field(\"error_format\", &self.error_format)\n             .field(\"libs\", &self.libs)\n             .field(\"externs\", &FmtExterns(&self.externs))\n@@ -667,7 +667,6 @@ impl Options {\n             None => OutputFormat::default(),\n         };\n         let crate_name = matches.opt_str(\"crate-name\");\n-        let proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);\n         let playground_url = matches.opt_str(\"playground-url\");\n         let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n         let module_sorting = if matches.opt_present(\"sort-modules-by-appearance\") {\n@@ -718,7 +717,7 @@ impl Options {\n             rustc_feature::UnstableFeatures::from_environment(crate_name.as_deref());\n         let options = Options {\n             input,\n-            proc_macro_crate,\n+            crate_types,\n             error_format,\n             diagnostic_width,\n             libs,"}, {"sha": "c6358874c61624d28ad19252857063aac5a882cb", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -13,7 +13,7 @@ use rustc_interface::interface;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_resolve as resolve;\n-use rustc_session::config::{self, CrateType, ErrorOutputType};\n+use rustc_session::config::{self, ErrorOutputType};\n use rustc_session::lint;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n@@ -203,7 +203,7 @@ pub(crate) fn create_config(\n     RustdocOptions {\n         input,\n         crate_name,\n-        proc_macro_crate,\n+        crate_types,\n         error_format,\n         diagnostic_width,\n         libs,\n@@ -247,8 +247,6 @@ pub(crate) fn create_config(\n         Some((lint.name_lower(), lint::Allow))\n     });\n \n-    let crate_types =\n-        if proc_macro_crate { vec![CrateType::ProcMacro] } else { vec![CrateType::Rlib] };\n     let test = scrape_examples_options.map(|opts| opts.scrape_tests).unwrap_or(false);\n     // plays with error output here!\n     let sessopts = config::Options {"}, {"sha": "b70444ec6739560c0dd8a4391742e3df8c2231c9", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_parse::parser::attr::InnerAttrPolicy;\n-use rustc_session::config::{self, CrateType, ErrorOutputType};\n+use rustc_session::config::{self, ErrorOutputType};\n use rustc_session::parse::ParseSess;\n use rustc_session::{lint, Session};\n use rustc_span::edition::Edition;\n@@ -68,8 +68,7 @@ pub(crate) fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n \n     debug!(?lint_opts);\n \n-    let crate_types =\n-        if options.proc_macro_crate { vec![CrateType::ProcMacro] } else { vec![CrateType::Rlib] };\n+    let crate_types = options.crate_types.clone();\n \n     let sessopts = config::Options {\n         maybe_sysroot: options.maybe_sysroot.clone(),"}, {"sha": "ea466c639c39e3edf6c59b6cea1378f853a464d6", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -2957,14 +2957,22 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n \n     // The call locations are output in sequence, so that sequence needs to be determined.\n     // Ideally the most \"relevant\" examples would be shown first, but there's no general algorithm\n-    // for determining relevance. Instead, we prefer the smallest examples being likely the easiest to\n-    // understand at a glance.\n+    // for determining relevance. We instead make a proxy for relevance with the following heuristics:\n+    //   1. Code written to be an example is better than code not written to be an example, e.g.\n+    //      a snippet from examples/foo.rs is better than src/lib.rs. We don't know the Cargo directory\n+    //      structure in Rustdoc, so we proxy this by prioriting code that comes from a --crate-type bin.\n+    //   2. Smaller examples are better than large examples. So we prioritize snippets that have the\n+    //      smallest line span for their enclosing item.\n+    //   3. Finally we sort by the displayed file name, which is arbitrary but prevents the ordering\n+    //      of examples from randomly changing between Rustdoc invocations.\n     let ordered_locations = {\n-        let sort_criterion = |(_, call_data): &(_, &CallData)| {\n+        fn sort_criterion<'a>(\n+            (_, call_data): &(&PathBuf, &'a CallData),\n+        ) -> (bool, u32, &'a String) {\n             // Use the first location because that's what the user will see initially\n             let (lo, hi) = call_data.locations[0].enclosing_item.byte_span;\n-            hi - lo\n-        };\n+            (!call_data.is_bin, hi - lo, &call_data.display_name)\n+        }\n \n         let mut locs = call_locations.iter().collect::<Vec<_>>();\n         locs.sort_by_key(sort_criterion);"}, {"sha": "4a8babaef755425b7d3367e00339bf4bab98f7f0", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -1901,6 +1901,10 @@ in storage.js\n \tborder-radius: 50px;\n }\n \n+.scraped-example {\n+\tposition: relative;\n+}\n+\n .scraped-example .code-wrapper {\n \tposition: relative;\n \tdisplay: flex;\n@@ -1909,16 +1913,31 @@ in storage.js\n \twidth: 100%;\n }\n \n+.scraped-example-title {\n+\tposition: absolute;\n+\tz-index: 1000;\n+\tbackground: white;\n+\tbottom: 8px;\n+\tright: 5px;\n+\tpadding: 2px 4px;\n+\tbox-shadow: 0 0 4px white;\n+}\n+\n .scraped-example:not(.expanded) .code-wrapper {\n-\tmax-height: 240px;\n+\tmax-height: 120px;\n }\n \n .scraped-example:not(.expanded) .code-wrapper pre {\n \toverflow-y: hidden;\n-\tmax-height: 240px;\n+\tmax-height: 120px;\n \tpadding-bottom: 0;\n }\n \n+.more-scraped-examples .scraped-example:not(.expanded) .code-wrapper,\n+.more-scraped-examples .scraped-example:not(.expanded) .code-wrapper pre {\n+\tmax-height: 240px;\n+}\n+\n .scraped-example .code-wrapper .next,\n .scraped-example .code-wrapper .prev,\n .scraped-example .code-wrapper .expand {"}, {"sha": "152116089c7fc2c6f1c400f7f353fb16d879e66d", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -622,7 +622,7 @@ function loadCss(cssUrl) {\n         const innerToggle = document.getElementById(toggleAllDocsId);\n         removeClass(innerToggle, \"will-expand\");\n         onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), e => {\n-            if (!hasClass(e, \"type-contents-toggle\")) {\n+            if (!hasClass(e, \"type-contents-toggle\") && !hasClass(e, \"more-examples-toggle\")) {\n                 e.open = true;\n             }\n         });"}, {"sha": "82b71ad0fca5d3a275bed6e9105a815a3ced468a", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -4,17 +4,19 @@\n \n (function() {\n     // Number of lines shown when code viewer is not expanded\n-    const MAX_LINES = 10;\n+    const DEFAULT_MAX_LINES = 5;\n+    const HIDDEN_MAX_LINES = 10;\n \n     // Scroll code block to the given code location\n-    function scrollToLoc(elt, loc) {\n+    function scrollToLoc(elt, loc, isHidden) {\n         const lines = elt.querySelector(\".src-line-numbers\");\n         let scrollOffset;\n \n         // If the block is greater than the size of the viewer,\n         // then scroll to the top of the block. Otherwise scroll\n         // to the middle of the block.\n-        if (loc[1] - loc[0] > MAX_LINES) {\n+        let maxLines = isHidden ? HIDDEN_MAX_LINES : DEFAULT_MAX_LINES;\n+        if (loc[1] - loc[0] > maxLines) {\n             const line = Math.max(0, loc[0] - 1);\n             scrollOffset = lines.children[line].offsetTop;\n         } else {\n@@ -29,7 +31,7 @@\n         elt.querySelector(\".rust\").scrollTo(0, scrollOffset);\n     }\n \n-    function updateScrapedExample(example) {\n+    function updateScrapedExample(example, isHidden) {\n         const locs = JSON.parse(example.attributes.getNamedItem(\"data-locs\").textContent);\n         let locIndex = 0;\n         const highlights = Array.prototype.slice.call(example.querySelectorAll(\".highlight\"));\n@@ -40,7 +42,7 @@\n             const onChangeLoc = changeIndex => {\n                 removeClass(highlights[locIndex], \"focus\");\n                 changeIndex();\n-                scrollToLoc(example, locs[locIndex][0]);\n+                scrollToLoc(example, locs[locIndex][0], isHidden);\n                 addClass(highlights[locIndex], \"focus\");\n \n                 const url = locs[locIndex][1];\n@@ -70,19 +72,19 @@\n             expandButton.addEventListener(\"click\", () => {\n                 if (hasClass(example, \"expanded\")) {\n                     removeClass(example, \"expanded\");\n-                    scrollToLoc(example, locs[0][0]);\n+                    scrollToLoc(example, locs[0][0], isHidden);\n                 } else {\n                     addClass(example, \"expanded\");\n                 }\n             });\n         }\n \n         // Start with the first example in view\n-        scrollToLoc(example, locs[0][0]);\n+        scrollToLoc(example, locs[0][0], isHidden);\n     }\n \n     const firstExamples = document.querySelectorAll(\".scraped-example-list > .scraped-example\");\n-    onEachLazy(firstExamples, updateScrapedExample);\n+    onEachLazy(firstExamples, el => updateScrapedExample(el, false));\n     onEachLazy(document.querySelectorAll(\".more-examples-toggle\"), toggle => {\n         // Allow users to click the left border of the <details> section to close it,\n         // since the section can be large and finding the [+] button is annoying.\n@@ -99,7 +101,7 @@\n             // depends on offsetHeight, a property that requires an element to be visible to\n             // compute correctly.\n             setTimeout(() => {\n-                onEachLazy(moreExamples, updateScrapedExample);\n+                onEachLazy(moreExamples, el => updateScrapedExample(el, true));\n             });\n         }, {once: true});\n     });"}, {"sha": "e27af61051c4f9dde54305cc0ee6cc9c7e29b972", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -774,6 +774,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n     let output_format = options.output_format;\n     let externs = options.externs.clone();\n     let scrape_examples_options = options.scrape_examples_options.clone();\n+    let crate_types = options.crate_types.clone();\n \n     let config = core::create_config(options);\n \n@@ -832,7 +833,14 @@ fn main_args(at_args: &[String]) -> MainResult {\n                 info!(\"finished with rustc\");\n \n                 if let Some(options) = scrape_examples_options {\n-                    return scrape_examples::run(krate, render_opts, cache, tcx, options);\n+                    return scrape_examples::run(\n+                        krate,\n+                        render_opts,\n+                        cache,\n+                        tcx,\n+                        options,\n+                        crate_types,\n+                    );\n                 }\n \n                 cache.crate_version = crate_version;"}, {"sha": "9adccda0e7200cce0147e9e5073bb54539ad7f80", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -20,7 +20,7 @@ use rustc_serialize::{\n     opaque::{FileEncoder, MemDecoder},\n     Decodable, Encodable,\n };\n-use rustc_session::getopts;\n+use rustc_session::{config::CrateType, getopts};\n use rustc_span::{\n     def_id::{CrateNum, DefPathHash, LOCAL_CRATE},\n     edition::Edition,\n@@ -110,6 +110,7 @@ pub(crate) struct CallData {\n     pub(crate) url: String,\n     pub(crate) display_name: String,\n     pub(crate) edition: Edition,\n+    pub(crate) is_bin: bool,\n }\n \n pub(crate) type FnCallLocations = FxHashMap<PathBuf, CallData>;\n@@ -122,6 +123,7 @@ struct FindCalls<'a, 'tcx> {\n     cx: Context<'tcx>,\n     target_crates: Vec<CrateNum>,\n     calls: &'a mut AllCallLocations,\n+    crate_types: Vec<CrateType>,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for FindCalls<'a, 'tcx>\n@@ -245,7 +247,9 @@ where\n                 let mk_call_data = || {\n                     let display_name = file_path.display().to_string();\n                     let edition = call_span.edition();\n-                    CallData { locations: Vec::new(), url, display_name, edition }\n+                    let is_bin = self.crate_types.contains(&CrateType::Executable);\n+\n+                    CallData { locations: Vec::new(), url, display_name, edition, is_bin }\n                 };\n \n                 let fn_key = tcx.def_path_hash(*def_id);\n@@ -274,6 +278,7 @@ pub(crate) fn run(\n     cache: formats::cache::Cache,\n     tcx: TyCtxt<'_>,\n     options: ScrapeExamplesOptions,\n+    crate_types: Vec<CrateType>,\n ) -> interface::Result<()> {\n     let inner = move || -> Result<(), String> {\n         // Generates source files for examples\n@@ -300,7 +305,8 @@ pub(crate) fn run(\n \n         // Run call-finder on all items\n         let mut calls = FxHashMap::default();\n-        let mut finder = FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx, target_crates };\n+        let mut finder =\n+            FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx, target_crates, crate_types };\n         tcx.hir().visit_all_item_likes_in_crate(&mut finder);\n \n         // The visitor might have found a type error, which we need to"}, {"sha": "a353504df6ad0dbfcdea07e71c1c9f2e4218152c", "filename": "src/test/rustdoc-gui/scrape-examples-button-focus.goml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-button-focus.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-button-focus.goml?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -25,3 +25,12 @@ store-property: (fullOffsetHeight, \".scraped-example-list > .scraped-example pre\n assert-property: (\".scraped-example-list > .scraped-example pre\", {\n \t\"scrollHeight\": |fullOffsetHeight|\n })\n+\n+assert-attribute-false: (\".more-examples-toggle\", {\"open\": \"\"})\n+click: \".more-examples-toggle\"\n+assert-attribute: (\".more-examples-toggle\", {\"open\": \"\"})\n+click: \"#toggle-all-docs\"\n+assert-attribute-false: (\".more-examples-toggle\", {\"open\": \"\"})\n+// After re-opening the docs, the additional examples should stay closed\n+click: \"#toggle-all-docs\"\n+assert-attribute-false: (\".more-examples-toggle\", {\"open\": \"\"})"}, {"sha": "3e69c6086ae2ed51928af3b47a919a8206fe3c8c", "filename": "src/test/rustdoc-gui/src/scrape_examples/examples/check2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ccd14a782420d27aef9d9fcd9196949a3276427/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fscrape_examples%2Fexamples%2Fcheck2.rs?ref=6ccd14a782420d27aef9d9fcd9196949a3276427", "patch": "@@ -0,0 +1,25 @@\n+fn main() {\n+    for i in 0..9 {\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+    }\n+    scrape_examples::test();\n+    for i in 0..9 {\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+        println!(\"hello world!\");\n+    }\n+}"}]}