{"sha": "5b20c6aec716abd1b1e8cd8750ae0d106db5f616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMjBjNmFlYzcxNmFiZDFiMWU4Y2Q4NzUwYWUwZDEwNmRiNWY2MTY=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-14T17:41:45Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-11-22T05:21:21Z"}, "message": "Recursive types are always non-empty", "tree": {"sha": "fe0f345e6bb5c35a09af91d199f983d52b223550", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe0f345e6bb5c35a09af91d199f983d52b223550"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b20c6aec716abd1b1e8cd8750ae0d106db5f616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b20c6aec716abd1b1e8cd8750ae0d106db5f616", "html_url": "https://github.com/rust-lang/rust/commit/5b20c6aec716abd1b1e8cd8750ae0d106db5f616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b20c6aec716abd1b1e8cd8750ae0d106db5f616/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1bdd4fae21e3053cedaa850691edd7a25a62dd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1bdd4fae21e3053cedaa850691edd7a25a62dd2", "html_url": "https://github.com/rust-lang/rust/commit/f1bdd4fae21e3053cedaa850691edd7a25a62dd2"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "f4a90876418510f0025194b412cf44b244c621e7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b20c6aec716abd1b1e8cd8750ae0d106db5f616/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b20c6aec716abd1b1e8cd8750ae0d106db5f616/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5b20c6aec716abd1b1e8cd8750ae0d106db5f616", "patch": "@@ -1397,7 +1397,7 @@ impl<'a, 'gcx, 'tcx> AdtDefData<'tcx, 'static> {\n                                   cx: TyCtxt<'a, 'gcx, 'tcx>,\n                                   substs: &'tcx Substs<'tcx>) -> bool {\n         match visited.entry((self.did, substs)) {\n-            hash_map::Entry::Occupied(_) => return true,\n+            hash_map::Entry::Occupied(_) => return false,\n             hash_map::Entry::Vacant(ve) => ve.insert(()),\n         };\n         self.variants.iter().all(|v| v.is_uninhabited_recurse(visited, cx, substs, self.is_union()))"}]}