{"sha": "84f52a716260a00c8dc6c99506b661b48397c03d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZjUyYTcxNjI2MGEwMGM4ZGM2Yzk5NTA2YjY2MWI0ODM5N2MwM2Q=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-18T09:56:04Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-18T09:56:04Z"}, "message": "Replace Build with Builder", "tree": {"sha": "8551081df610bf2ae46166900c7532dee70f12ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8551081df610bf2ae46166900c7532dee70f12ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f52a716260a00c8dc6c99506b661b48397c03d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f52a716260a00c8dc6c99506b661b48397c03d", "html_url": "https://github.com/rust-lang/rust/commit/84f52a716260a00c8dc6c99506b661b48397c03d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f52a716260a00c8dc6c99506b661b48397c03d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db9fabdf7ba45fcb5ee184254cabd696faf6414", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db9fabdf7ba45fcb5ee184254cabd696faf6414", "html_url": "https://github.com/rust-lang/rust/commit/1db9fabdf7ba45fcb5ee184254cabd696faf6414"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "e7c6ec888dfb1fa59905cab5e64e99a6561bb097", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/84f52a716260a00c8dc6c99506b661b48397c03d/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f52a716260a00c8dc6c99506b661b48397c03d/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=84f52a716260a00c8dc6c99506b661b48397c03d", "patch": "@@ -131,22 +131,21 @@ impl Step for CodegenBackend {\n     }\n \n     fn run(self, builder: &Builder) {\n-        let build = builder.build;\n-        let compiler = builder.compiler(0, build.build);\n+        let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n         let backend = self.backend;\n \n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"check\");\n-        let features = build.rustc_features().to_string();\n-        cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/librustc_trans/Cargo.toml\"));\n-        rustc_cargo_env(build, &mut cargo);\n+        let features = builder.rustc_features().to_string();\n+        cargo.arg(\"--manifest-path\").arg(builder.src.join(\"src/librustc_trans/Cargo.toml\"));\n+        rustc_cargo_env(builder, &mut cargo);\n \n         // We won't build LLVM if it's not available, as it shouldn't affect `check`.\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-rustc_trans\", compiler.stage));\n-        run_cargo(build,\n+        let _folder = builder.fold_output(|| format!(\"stage{}-rustc_trans\", compiler.stage));\n+        run_cargo(builder,\n                   cargo.arg(\"--features\").arg(features),\n-                  &codegen_backend_stamp(build, compiler, target, backend),\n+                  &codegen_backend_stamp(builder, compiler, target, backend),\n                   true);\n     }\n }\n@@ -211,10 +210,10 @@ pub fn librustc_stamp(builder: &Builder, compiler: Compiler, target: Interned<St\n \n /// Cargo's output path for librustc_trans in a given stage, compiled by a particular\n /// compiler for the specified target and backend.\n-fn codegen_backend_stamp(build: &Build,\n+fn codegen_backend_stamp(builder: &Builder,\n                          compiler: Compiler,\n                          target: Interned<String>,\n                          backend: Interned<String>) -> PathBuf {\n-    build.cargo_out(compiler, Mode::Librustc, target)\n+    builder.cargo_out(compiler, Mode::Librustc, target)\n          .join(format!(\".librustc_trans-{}-check.stamp\", backend))\n }"}, {"sha": "1248c2b50be5e8700b4fa672ced5981db5db41b8", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84f52a716260a00c8dc6c99506b661b48397c03d/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f52a716260a00c8dc6c99506b661b48397c03d/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=84f52a716260a00c8dc6c99506b661b48397c03d", "patch": "@@ -667,7 +667,7 @@ impl Step for CodegenBackend {\n                    codegen_backend.display(),\n                    f.display());\n         }\n-        let stamp = codegen_backend_stamp(build, compiler, target, backend);\n+        let stamp = codegen_backend_stamp(builder, compiler, target, backend);\n         let codegen_backend = codegen_backend.to_str().unwrap();\n         t!(t!(File::create(&stamp)).write_all(codegen_backend.as_bytes()));\n     }"}]}