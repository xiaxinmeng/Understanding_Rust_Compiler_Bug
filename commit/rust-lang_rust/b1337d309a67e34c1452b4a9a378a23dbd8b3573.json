{"sha": "b1337d309a67e34c1452b4a9a378a23dbd8b3573", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMzM3ZDMwOWE2N2UzNGMxNDUyYjRhOWEzNzhhMjNkYmQ4YjM1NzM=", "commit": {"author": {"name": "Brandon Edens", "email": "brandonedens@gmail.com", "date": "2016-03-27T19:42:47Z"}, "committer": {"name": "Brandon Edens", "email": "brandonedens@gmail.com", "date": "2016-04-29T06:08:30Z"}, "message": "Add opt-level options for optimizing for size and minimum size. This attempts\nto mimic the behavior of clang's options Os and Oz.", "tree": {"sha": "69983bbeb4cc6ccfcd65f19f010f06ad8b8ba40d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69983bbeb4cc6ccfcd65f19f010f06ad8b8ba40d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1337d309a67e34c1452b4a9a378a23dbd8b3573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1337d309a67e34c1452b4a9a378a23dbd8b3573", "html_url": "https://github.com/rust-lang/rust/commit/b1337d309a67e34c1452b4a9a378a23dbd8b3573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1337d309a67e34c1452b4a9a378a23dbd8b3573/comments", "author": {"login": "brandonedens", "id": 396449, "node_id": "MDQ6VXNlcjM5NjQ0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/396449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandonedens", "html_url": "https://github.com/brandonedens", "followers_url": "https://api.github.com/users/brandonedens/followers", "following_url": "https://api.github.com/users/brandonedens/following{/other_user}", "gists_url": "https://api.github.com/users/brandonedens/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandonedens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandonedens/subscriptions", "organizations_url": "https://api.github.com/users/brandonedens/orgs", "repos_url": "https://api.github.com/users/brandonedens/repos", "events_url": "https://api.github.com/users/brandonedens/events{/privacy}", "received_events_url": "https://api.github.com/users/brandonedens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brandonedens", "id": 396449, "node_id": "MDQ6VXNlcjM5NjQ0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/396449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandonedens", "html_url": "https://github.com/brandonedens", "followers_url": "https://api.github.com/users/brandonedens/followers", "following_url": "https://api.github.com/users/brandonedens/following{/other_user}", "gists_url": "https://api.github.com/users/brandonedens/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandonedens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandonedens/subscriptions", "organizations_url": "https://api.github.com/users/brandonedens/orgs", "repos_url": "https://api.github.com/users/brandonedens/repos", "events_url": "https://api.github.com/users/brandonedens/events{/privacy}", "received_events_url": "https://api.github.com/users/brandonedens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da2bcac5db1e091b90cceb19d0496f0f7501c88", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da2bcac5db1e091b90cceb19d0496f0f7501c88", "html_url": "https://github.com/rust-lang/rust/commit/8da2bcac5db1e091b90cceb19d0496f0f7501c88"}], "stats": {"total": 88, "additions": 69, "deletions": 19}, "files": [{"sha": "6ade74790a519bd3f30b1a36b4293d3ca02e648d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1337d309a67e34c1452b4a9a378a23dbd8b3573/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1337d309a67e34c1452b4a9a378a23dbd8b3573/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b1337d309a67e34c1452b4a9a378a23dbd8b3573", "patch": "@@ -48,7 +48,9 @@ pub enum OptLevel {\n     No, // -O0\n     Less, // -O1\n     Default, // -O2\n-    Aggressive // -O3\n+    Aggressive, // -O3\n+    Size, // -Os\n+    SizeMin, // -Oz\n }\n \n #[derive(Clone, Copy, PartialEq)]\n@@ -567,8 +569,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     debuginfo: Option<usize> = (None, parse_opt_uint,\n         \"debug info emission level, 0 = no debug info, 1 = line tables only, \\\n          2 = full debug info with variable and type information\"),\n-    opt_level: Option<usize> = (None, parse_opt_uint,\n-        \"optimize with possible levels 0-3\"),\n+    opt_level: Option<String> = (None, parse_opt_string,\n+        \"optimize with possible levels 0-3, s, or z\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool,\n         \"explicitly enable the cfg(debug_assertions) directive\"),\n     inline_threshold: Option<usize> = (None, parse_opt_uint,\n@@ -1125,15 +1127,17 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }\n             OptLevel::Default\n         } else {\n-            match cg.opt_level {\n+            match cg.opt_level.as_ref().map(String::as_ref) {\n                 None => OptLevel::No,\n-                Some(0) => OptLevel::No,\n-                Some(1) => OptLevel::Less,\n-                Some(2) => OptLevel::Default,\n-                Some(3) => OptLevel::Aggressive,\n+                Some(\"0\") => OptLevel::No,\n+                Some(\"1\") => OptLevel::Less,\n+                Some(\"2\") => OptLevel::Default,\n+                Some(\"3\") => OptLevel::Aggressive,\n+                Some(\"s\") => OptLevel::Size,\n+                Some(\"z\") => OptLevel::SizeMin,\n                 Some(arg) => {\n                     early_error(error_format, &format!(\"optimization level needs to be \\\n-                                                      between 0-3 (instead was `{}`)\",\n+                                                      between 0-3, s, or z (instead was `{}`)\",\n                                                      arg));\n                 }\n             }"}, {"sha": "ea0d8eae75d750c39cc5ea4872147aad5780fcd5", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1337d309a67e34c1452b4a9a378a23dbd8b3573/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1337d309a67e34c1452b4a9a378a23dbd8b3573/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=b1337d309a67e34c1452b4a9a378a23dbd8b3573", "patch": "@@ -44,6 +44,7 @@ pub use self::FileType::*;\n pub use self::MetadataType::*;\n pub use self::AsmDialect::*;\n pub use self::CodeGenOptLevel::*;\n+pub use self::CodeGenOptSize::*;\n pub use self::RelocMode::*;\n pub use self::CodeGenModel::*;\n pub use self::DiagnosticKind::*;\n@@ -375,6 +376,14 @@ pub enum CodeGenOptLevel {\n     CodeGenLevelAggressive = 3,\n }\n \n+#[derive(Copy, Clone, PartialEq)]\n+#[repr(C)]\n+pub enum CodeGenOptSize {\n+    CodeGenOptSizeNone = 0,\n+    CodeGenOptSizeDefault = 1,\n+    CodeGenOptSizeAggressive = 2,\n+}\n+\n #[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum RelocMode {"}, {"sha": "777245c4e0caec8be98fa61f9055d614518a8506", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b1337d309a67e34c1452b4a9a378a23dbd8b3573/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1337d309a67e34c1452b4a9a378a23dbd8b3573/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=b1337d309a67e34c1452b4a9a378a23dbd8b3573", "patch": "@@ -140,6 +140,15 @@ fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel {\n       config::OptLevel::Less => llvm::CodeGenLevelLess,\n       config::OptLevel::Default => llvm::CodeGenLevelDefault,\n       config::OptLevel::Aggressive => llvm::CodeGenLevelAggressive,\n+      _ => llvm::CodeGenLevelDefault,\n+    }\n+}\n+\n+fn get_llvm_opt_size(optimize: config::OptLevel) -> llvm::CodeGenOptSize {\n+    match optimize {\n+      config::OptLevel::Size => llvm::CodeGenOptSizeDefault,\n+      config::OptLevel::SizeMin => llvm::CodeGenOptSizeAggressive,\n+      _ => llvm::CodeGenOptSizeNone,\n     }\n }\n \n@@ -237,6 +246,9 @@ pub struct ModuleConfig {\n     /// absolutely no optimizations (used for the metadata module).\n     opt_level: Option<llvm::CodeGenOptLevel>,\n \n+    /// Some(level) to optimize binary size, or None to not affect program size.\n+    opt_size: Option<llvm::CodeGenOptSize>,\n+\n     // Flags indicating which outputs to produce.\n     emit_no_opt_bc: bool,\n     emit_bc: bool,\n@@ -268,6 +280,7 @@ impl ModuleConfig {\n             tm: tm,\n             passes: passes,\n             opt_level: None,\n+            opt_size: None,\n \n             emit_no_opt_bc: false,\n             emit_bc: false,\n@@ -637,6 +650,7 @@ pub fn run_passes(sess: &Session,\n     let mut metadata_config = ModuleConfig::new(tm, vec!());\n \n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n+    modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));\n \n     // Save all versions of the bytecode if we're saving our temporaries.\n     if sess.opts.cg.save_temps {\n@@ -991,36 +1005,48 @@ pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n     // reasonable defaults and prepare it to actually populate the pass\n     // manager.\n     let builder = llvm::LLVMPassManagerBuilderCreate();\n-    let opt = config.opt_level.unwrap_or(llvm::CodeGenLevelNone);\n+    let opt_level = config.opt_level.unwrap_or(llvm::CodeGenLevelNone);\n+    let opt_size = config.opt_size.unwrap_or(llvm::CodeGenOptSizeNone);\n     let inline_threshold = config.inline_threshold;\n \n-    llvm::LLVMRustConfigurePassManagerBuilder(builder, opt,\n+    llvm::LLVMRustConfigurePassManagerBuilder(builder, opt_level,\n                                               config.merge_functions,\n                                               config.vectorize_slp,\n                                               config.vectorize_loop);\n+    llvm::LLVMPassManagerBuilderSetSizeLevel(builder, opt_size as u32);\n+\n+    if opt_size != llvm::CodeGenOptSizeNone {\n+        llvm::LLVMPassManagerBuilderSetDisableUnrollLoops(builder, 1);\n+    }\n \n     llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod, config.no_builtins);\n \n     // Here we match what clang does (kinda). For O0 we only inline\n     // always-inline functions (but don't add lifetime intrinsics), at O1 we\n     // inline with lifetime intrinsics, and O2+ we add an inliner with a\n     // thresholds copied from clang.\n-    match (opt, inline_threshold) {\n-        (_, Some(t)) => {\n+    match (opt_level, opt_size, inline_threshold) {\n+        (_, _, Some(t)) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t as u32);\n         }\n-        (llvm::CodeGenLevelNone, _) => {\n+        (llvm::CodeGenLevelAggressive, _, _) => {\n+            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n+        }\n+        (_, llvm::CodeGenOptSizeDefault, _) => {\n+            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 75);\n+        }\n+        (_, llvm::CodeGenOptSizeAggressive, _) => {\n+            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 25);\n+        }\n+        (llvm::CodeGenLevelNone, _, _) => {\n             llvm::LLVMRustAddAlwaysInlinePass(builder, false);\n         }\n-        (llvm::CodeGenLevelLess, _) => {\n+        (llvm::CodeGenLevelLess, _, _) => {\n             llvm::LLVMRustAddAlwaysInlinePass(builder, true);\n         }\n-        (llvm::CodeGenLevelDefault, _) => {\n+        (llvm::CodeGenLevelDefault, _, _) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 225);\n         }\n-        (llvm::CodeGenLevelAggressive, _) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n-        }\n     }\n \n     f(builder);"}, {"sha": "9a4d20ca3010c2d42440cc9b338d083738c5130f", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b1337d309a67e34c1452b4a9a378a23dbd8b3573/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1337d309a67e34c1452b4a9a378a23dbd8b3573/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=b1337d309a67e34c1452b4a9a378a23dbd8b3573", "patch": "@@ -69,6 +69,17 @@ fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty:\n         llvm::SetFunctionAttribute(llfn, llvm::Attribute::NoRedZone)\n     }\n \n+    match ccx.tcx().sess.opts.cg.opt_level.as_ref().map(String::as_ref) {\n+        Some(\"s\") => {\n+            llvm::SetFunctionAttribute(llfn, llvm::Attribute::OptimizeForSize);\n+        },\n+        Some(\"z\") => {\n+            llvm::SetFunctionAttribute(llfn, llvm::Attribute::MinSize);\n+            llvm::SetFunctionAttribute(llfn, llvm::Attribute::OptimizeForSize);\n+        },\n+        _ => {},\n+    }\n+\n     llfn\n }\n "}]}