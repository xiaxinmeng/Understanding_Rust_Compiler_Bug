{"sha": "15240a361beb0572ffe6b59740ea06de77cf0dba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MjQwYTM2MWJlYjA1NzJmZmU2YjU5NzQwZWEwNmRlNzdjZjBkYmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-25T21:12:22Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-25T21:12:22Z"}, "message": "Merge pull request #224 from Manishearth/shadow\n\nName Shadowing Lint", "tree": {"sha": "eaeaaeea4424a1dd43508698521ddd0034be70f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaeaaeea4424a1dd43508698521ddd0034be70f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15240a361beb0572ffe6b59740ea06de77cf0dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15240a361beb0572ffe6b59740ea06de77cf0dba", "html_url": "https://github.com/rust-lang/rust/commit/15240a361beb0572ffe6b59740ea06de77cf0dba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15240a361beb0572ffe6b59740ea06de77cf0dba/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "544c14f3ef872e0b804fbdbddaf47ba450751c16", "url": "https://api.github.com/repos/rust-lang/rust/commits/544c14f3ef872e0b804fbdbddaf47ba450751c16", "html_url": "https://github.com/rust-lang/rust/commit/544c14f3ef872e0b804fbdbddaf47ba450751c16"}, {"sha": "9012d8f1975829a1440fde6f6fd6158a239595c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9012d8f1975829a1440fde6f6fd6158a239595c4", "html_url": "https://github.com/rust-lang/rust/commit/9012d8f1975829a1440fde6f6fd6158a239595c4"}], "stats": {"total": 330, "additions": 324, "deletions": 6}, "files": [{"sha": "66411e432c91f2c9dde3a9b327c47d877a54d093", "filename": "README.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15240a361beb0572ffe6b59740ea06de77cf0dba/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/15240a361beb0572ffe6b59740ea06de77cf0dba/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=15240a361beb0572ffe6b59740ea06de77cf0dba", "patch": "@@ -4,7 +4,7 @@\n A collection of lints that give helpful tips to newbies and catch oversights.\n \n ##Lints\n-There are 45 lints included in this crate:\n+There are 48 lints included in this crate:\n \n name                     | default | meaning\n -------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -44,6 +44,9 @@ ptr_arg                  | allow   | fn arguments of the type `&Vec<...>` or `&S\n range_step_by_zero       | warn    | using Range::step_by(0), which produces an infinite iterator\n redundant_closure        | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n result_unwrap_used       | allow   | using `Result.unwrap()`, which might be better handled\n+shadow_reuse             | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n+shadow_same              | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n+shadow_unrelated         | warn    | The name is re-bound without even using the original value\n single_match             | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n str_to_string            | warn    | using `to_string()` on a str, which should be `to_owned()`\n string_add               | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead"}, {"sha": "33788190fd3f95d0918ea753299e3170ec6b0355", "filename": "src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15240a361beb0572ffe6b59740ea06de77cf0dba/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15240a361beb0572ffe6b59740ea06de77cf0dba/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=15240a361beb0572ffe6b59740ea06de77cf0dba", "patch": "@@ -32,6 +32,7 @@ pub mod len_zero;\n pub mod attrs;\n pub mod collapsible_if;\n pub mod unicode;\n+pub mod shadow;\n pub mod strings;\n pub mod methods;\n pub mod returns;\n@@ -64,6 +65,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box strings::StringAdd as LintPassObject);\n     reg.register_lint_pass(box returns::ReturnPass as LintPassObject);\n     reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n+    reg.register_lint_pass(box shadow::ShadowPass as LintPassObject);\n     reg.register_lint_pass(box types::LetPass as LintPassObject);\n     reg.register_lint_pass(box types::UnitCmp as LintPassObject);\n     reg.register_lint_pass(box loops::LoopsPass as LintPassObject);\n@@ -73,6 +75,12 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box types::TypeComplexityPass as LintPassObject);\n     reg.register_lint_pass(box matches::MatchPass as LintPassObject);\n \n+    reg.register_lint_group(\"shadow\", vec![\n+        shadow::SHADOW_REUSE,\n+        shadow::SHADOW_SAME,\n+        shadow::SHADOW_UNRELATED,\n+    ]);\n+\n     reg.register_lint_group(\"clippy\", vec![\n         approx_const::APPROX_CONSTANT,\n         attrs::INLINE_ALWAYS,\n@@ -106,6 +114,9 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         ranges::RANGE_STEP_BY_ZERO,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n+        shadow::SHADOW_REUSE,\n+        shadow::SHADOW_SAME,\n+        shadow::SHADOW_UNRELATED,\n         strings::STRING_ADD,\n         strings::STRING_ADD_ASSIGN,\n         types::BOX_VEC,"}, {"sha": "889688cb0c702598cf8733a855afac4a9b1473cf", "filename": "src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15240a361beb0572ffe6b59740ea06de77cf0dba/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15240a361beb0572ffe6b59740ea06de77cf0dba/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=15240a361beb0572ffe6b59740ea06de77cf0dba", "patch": "@@ -11,7 +11,7 @@ declare_lint!(pub LET_AND_RETURN, Warn,\n               \"creating a let-binding and then immediately returning it like `let x = expr; x` at \\\n                the end of a function\");\n \n-#[derive(Copy,Clone)]\n+#[derive(Copy, Clone)]\n pub struct ReturnPass;\n \n impl ReturnPass {"}, {"sha": "2c16d9d78f429694fddfc573d9a135e58f47f306", "filename": "src/shadow.rs", "status": "added", "additions": 282, "deletions": 0, "changes": 282, "blob_url": "https://github.com/rust-lang/rust/blob/15240a361beb0572ffe6b59740ea06de77cf0dba/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15240a361beb0572ffe6b59740ea06de77cf0dba/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=15240a361beb0572ffe6b59740ea06de77cf0dba", "patch": "@@ -0,0 +1,282 @@\n+use std::ops::Deref;\n+use syntax::ast::*;\n+use syntax::codemap::Span;\n+use syntax::visit::FnKind;\n+\n+use rustc::lint::{Context, LintArray, LintPass};\n+use rustc::middle::def::Def::{DefVariant, DefStruct};\n+\n+use utils::{in_external_macro, snippet, span_lint};\n+\n+declare_lint!(pub SHADOW_SAME, Allow,\n+    \"rebinding a name to itself, e.g. `let mut x = &mut x`\");\n+declare_lint!(pub SHADOW_REUSE, Allow,\n+    \"rebinding a name to an expression that re-uses the original value, e.g. \\\n+    `let x = x + 1`\");\n+declare_lint!(pub SHADOW_UNRELATED, Warn,\n+    \"The name is re-bound without even using the original value\");\n+\n+#[derive(Copy, Clone)]\n+pub struct ShadowPass;\n+\n+impl LintPass for ShadowPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(SHADOW_SAME, SHADOW_REUSE, SHADOW_UNRELATED)\n+    }\n+\n+    fn check_fn(&mut self, cx: &Context, _: FnKind, decl: &FnDecl,\n+            block: &Block, _: Span, _: NodeId) {\n+        if in_external_macro(cx, block.span) { return; }\n+        check_fn(cx, decl, block);\n+    }\n+}\n+\n+fn check_fn(cx: &Context, decl: &FnDecl, block: &Block) {\n+    let mut bindings = Vec::new();\n+    for arg in &decl.inputs {\n+        if let PatIdent(_, ident, _) = arg.pat.node {\n+            bindings.push(ident.node.name)\n+        }\n+    }\n+    check_block(cx, block, &mut bindings);\n+}\n+\n+fn check_block(cx: &Context, block: &Block, bindings: &mut Vec<Name>) {\n+    let len = bindings.len();\n+    for stmt in &block.stmts {\n+        match stmt.node {\n+            StmtDecl(ref decl, _) => check_decl(cx, decl, bindings),\n+            StmtExpr(ref e, _) | StmtSemi(ref e, _) =>\n+                check_expr(cx, e, bindings),\n+            _ => ()\n+        }\n+    }\n+    if let Some(ref o) = block.expr { check_expr(cx, o, bindings); }\n+    bindings.truncate(len);\n+}\n+\n+fn check_decl(cx: &Context, decl: &Decl, bindings: &mut Vec<Name>) {\n+    if in_external_macro(cx, decl.span) { return; }\n+    if let DeclLocal(ref local) = decl.node {\n+        let Local{ ref pat, ref ty, ref init, id: _, span } = **local;\n+        if let &Some(ref t) = ty { check_ty(cx, t, bindings) }\n+        if let &Some(ref o) = init { check_expr(cx, o, bindings) }\n+        check_pat(cx, pat, init, span, bindings);\n+    }\n+}\n+\n+fn is_binding(cx: &Context, pat: &Pat) -> bool {\n+    match cx.tcx.def_map.borrow().get(&pat.id).map(|d| d.full_def()) {\n+        Some(DefVariant(..)) | Some(DefStruct(..)) => false,\n+        _ => true\n+    }\n+}\n+\n+fn check_pat<T>(cx: &Context, pat: &Pat, init: &Option<T>, span: Span,  \n+        bindings: &mut Vec<Name>) where T: Deref<Target=Expr> {\n+    //TODO: match more stuff / destructuring\n+    match pat.node {\n+        PatIdent(_, ref ident, ref inner) => {\n+            let name = ident.node.name;\n+            if is_binding(cx, pat) {\n+                if bindings.contains(&name) {\n+                    lint_shadow(cx, name, span, pat.span, init);\n+                }\n+                bindings.push(name);\n+            }\n+            if let Some(ref p) = *inner { check_pat(cx, p, init, span, bindings); }\n+        },\n+        //PatEnum(Path, Option<Vec<P<Pat>>>),\n+        //PatQPath(QSelf, Path),\n+        //PatStruct(Path, Vec<Spanned<FieldPat>>, bool),\n+        //PatTup(Vec<P<Pat>>),\n+        PatBox(ref inner) => {\n+            if let Some(ref initp) = *init {\n+                match initp.node {\n+                    ExprBox(_, ref inner_init) => \n+                        check_pat(cx, inner, &Some(&**inner_init), span, bindings),\n+                    //TODO: ExprCall on Box::new\n+                    _ => check_pat(cx, inner, init, span, bindings),\n+                }\n+            } else {\n+                check_pat(cx, inner, init, span, bindings);\n+            }\n+        },\n+        //PatRegion(P<Pat>, Mutability),\n+        //PatRange(P<Expr>, P<Expr>),\n+        //PatVec(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n+        _ => (),\n+    }\n+}\n+\n+fn lint_shadow<T>(cx: &Context, name: Name, span: Span, lspan: Span, init: \n+        &Option<T>) where T: Deref<Target=Expr> {\n+    if let &Some(ref expr) = init {\n+        if is_self_shadow(name, expr) {\n+            span_lint(cx, SHADOW_SAME, span, &format!(\n+                \"{} is shadowed by itself in {}\",\n+                snippet(cx, lspan, \"_\"),\n+                snippet(cx, expr.span, \"..\")));\n+        } else {\n+            if contains_self(name, expr) {\n+                span_lint(cx, SHADOW_REUSE, span, &format!(\n+                    \"{} is shadowed by {} which reuses the original value\",\n+                    snippet(cx, lspan, \"_\"),\n+                    snippet(cx, expr.span, \"..\")));\n+            } else {\n+                span_lint(cx, SHADOW_UNRELATED, span, &format!(\n+                    \"{} is shadowed by {} in this declaration\",\n+                    snippet(cx, lspan, \"_\"),\n+                    snippet(cx, expr.span, \"..\")));\n+            }\n+        }\n+    } else {\n+        span_lint(cx, SHADOW_UNRELATED, span, &format!(\n+            \"{} is shadowed in this declaration\", snippet(cx, lspan, \"_\")));\n+    }\n+}\n+\n+fn check_expr(cx: &Context, expr: &Expr, bindings: &mut Vec<Name>) {\n+    if in_external_macro(cx, expr.span) { return; }\n+    match expr.node {\n+        ExprUnary(_, ref e) | ExprParen(ref e) | ExprField(ref e, _) |\n+        ExprTupField(ref e, _) | ExprAddrOf(_, ref e) | ExprBox(None, ref e)\n+            => { check_expr(cx, e, bindings) },\n+        ExprBox(Some(ref place), ref e) => {\n+            check_expr(cx, place, bindings); check_expr(cx, e, bindings) }\n+        ExprBlock(ref block) | ExprLoop(ref block, _) =>\n+            { check_block(cx, block, bindings) },\n+        //ExprCall\n+        //ExprMethodCall\n+        ExprVec(ref v) | ExprTup(ref v) =>\n+            for ref e in v { check_expr(cx, e, bindings) },\n+        ExprIf(ref cond, ref then, ref otherwise) => {\n+            check_expr(cx, cond, bindings);\n+            check_block(cx, then, bindings);\n+            if let &Some(ref o) = otherwise { check_expr(cx, o, bindings); }\n+        },\n+        ExprWhile(ref cond, ref block, _) => {\n+            check_expr(cx, cond, bindings);\n+            check_block(cx, block, bindings);\n+        },\n+        ExprMatch(ref init, ref arms, _) => {\n+            check_expr(cx, init, bindings);\n+            for ref arm in arms {\n+                for ref pat in &arm.pats {\n+                    check_pat(cx, &pat, &Some(&**init), pat.span, bindings);\n+                    //TODO: This is ugly, but needed to get the right type\n+                }\n+                if let Some(ref guard) = arm.guard {\n+                    check_expr(cx, guard, bindings);\n+                }\n+                check_expr(cx, &arm.body, bindings);\n+            }\n+        },\n+        _ => ()\n+    }\n+}\n+\n+fn check_ty(cx: &Context, ty: &Ty, bindings: &mut Vec<Name>) {\n+    match ty.node {\n+        TyParen(ref sty) | TyObjectSum(ref sty, _) |\n+        TyVec(ref sty) => check_ty(cx, sty, bindings),\n+        TyFixedLengthVec(ref fty, ref expr) => {\n+            check_ty(cx, fty, bindings);\n+            check_expr(cx, expr, bindings);\n+        },\n+        TyPtr(MutTy{ ty: ref mty, .. }) |\n+        TyRptr(_, MutTy{ ty: ref mty, .. }) => check_ty(cx, mty, bindings),\n+        TyTup(ref tup) => { for ref t in tup { check_ty(cx, t, bindings) } },\n+        TyTypeof(ref expr) => check_expr(cx, expr, bindings),\n+        _ => (),\n+    }\n+}\n+\n+fn is_self_shadow(name: Name, expr: &Expr) -> bool {\n+    match expr.node {\n+        ExprBox(_, ref inner) |\n+        ExprParen(ref inner) |\n+        ExprAddrOf(_, ref inner) => is_self_shadow(name, inner),\n+        ExprBlock(ref block) => block.stmts.is_empty() && block.expr.as_ref().\n+            map_or(false, |ref e| is_self_shadow(name, e)),\n+        ExprUnary(op, ref inner) => (UnUniq == op || UnDeref == op) &&\n+            is_self_shadow(name, inner),\n+        ExprPath(_, ref path) => path_eq_name(name, path),\n+        _ => false,\n+    }\n+}\n+\n+fn path_eq_name(name: Name, path: &Path) -> bool {\n+    !path.global && path.segments.len() == 1 && \n+        path.segments[0].identifier.name == name\n+}\n+\n+fn contains_self(name: Name, expr: &Expr) -> bool {\n+    match expr.node {\n+        ExprUnary(_, ref e) | ExprParen(ref e) | ExprField(ref e, _) |\n+        ExprTupField(ref e, _) | ExprAddrOf(_, ref e) | ExprBox(_, ref e)\n+            => contains_self(name, e),\n+        ExprBinary(_, ref l, ref r) =>\n+            contains_self(name, l) || contains_self(name, r),\n+        ExprBlock(ref block) | ExprLoop(ref block, _) =>\n+            contains_block_self(name, block),\n+        ExprCall(ref fun, ref args) => contains_self(name, fun) ||\n+            args.iter().any(|ref a| contains_self(name, a)),\n+        ExprMethodCall(_, _, ref args) =>\n+            args.iter().any(|ref a| contains_self(name, a)),\n+        ExprVec(ref v) | ExprTup(ref v) =>\n+            v.iter().any(|ref e| contains_self(name, e)),\n+        ExprIf(ref cond, ref then, ref otherwise) =>\n+            contains_self(name, cond) || contains_block_self(name, then) ||\n+            otherwise.as_ref().map_or(false, |ref e| contains_self(name, e)),\n+        ExprWhile(ref e, ref block, _)  =>\n+            contains_self(name, e) || contains_block_self(name, block),\n+        ExprMatch(ref e, ref arms, _) => \n+            arms.iter().any(|ref arm| arm.pats.iter().any(|ref pat| \n+                contains_pat_self(name, pat))) || contains_self(name, e),\n+        ExprPath(_, ref path) => path_eq_name(name, path),\n+        _ => false\n+    }\n+}\n+\n+fn contains_block_self(name: Name, block: &Block) -> bool {\n+    for stmt in &block.stmts {\n+        match stmt.node {\n+            StmtDecl(ref decl, _) =>\n+            if let DeclLocal(ref local) = decl.node {\n+                //TODO: We don't currently handle the case where the name\n+                //is shadowed wiithin the block; this means code including this\n+                //degenerate pattern will get the wrong warning.\n+                if let Some(ref init) = local.init {\n+                    if contains_self(name, init) { return true; }\n+                }\n+            },\n+            StmtExpr(ref e, _) | StmtSemi(ref e, _) =>\n+                if contains_self(name, e) { return true },\n+            _ => ()\n+        }\n+    }\n+    if let Some(ref e) = block.expr { contains_self(name, e) } else { false }\n+}\n+\n+fn contains_pat_self(name: Name, pat: &Pat) -> bool {\n+    match pat.node {\n+        PatIdent(_, ref ident, ref inner) => name == ident.node.name ||\n+            inner.as_ref().map_or(false, |ref p| contains_pat_self(name, p)),\n+        PatEnum(_, ref opats) => opats.as_ref().map_or(false, \n+            |pats| pats.iter().any(|p| contains_pat_self(name, p))),\n+        PatQPath(_, ref path) => path_eq_name(name, path),\n+        PatStruct(_, ref fieldpats, _) => fieldpats.iter().any(\n+            |ref fp| contains_pat_self(name, &fp.node.pat)),\n+        PatTup(ref ps) => ps.iter().any(|ref p| contains_pat_self(name, p)),\n+        PatBox(ref p) |\n+        PatRegion(ref p, _) => contains_pat_self(name, p),\n+        PatRange(ref from, ref until) => \n+            contains_self(name, from) || contains_self(name, until),\n+        PatVec(ref pre, ref opt, ref post) =>\n+            pre.iter().any(|ref p| contains_pat_self(name, p)) || \n+                opt.as_ref().map_or(false, |ref p| contains_pat_self(name, p)) ||\n+                post.iter().any(|ref p| contains_pat_self(name, p)),\n+        _ => false,\n+    }\n+}"}, {"sha": "c71d61f81e717325cfac933b6de51ee78e8544ed", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15240a361beb0572ffe6b59740ea06de77cf0dba/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15240a361beb0572ffe6b59740ea06de77cf0dba/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=15240a361beb0572ffe6b59740ea06de77cf0dba", "patch": "@@ -93,9 +93,9 @@ pub fn snippet_block<'a>(cx: &Context, span: Span, default: &'a str) -> Cow<'a,\n /// Trim indentation from a multiline string\n /// with possibility of ignoring the first line\n pub fn trim_multiline(s: Cow<str>, ignore_first: bool) -> Cow<str> {\n-    let s = trim_multiline_inner(s, ignore_first, ' ');\n-    let s = trim_multiline_inner(s, ignore_first, '\\t');\n-    trim_multiline_inner(s, ignore_first, ' ')\n+    let s_space = trim_multiline_inner(s, ignore_first, ' ');\n+    let s_tab = trim_multiline_inner(s_space, ignore_first, '\\t');\n+    trim_multiline_inner(s_tab, ignore_first, ' ')\n }\n \n fn trim_multiline_inner(s: Cow<str>, ignore_first: bool, ch: char) -> Cow<str> {"}, {"sha": "a75cd0bf3f26a07040cf92d6b771e9e6387b520b", "filename": "tests/compile-fail/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15240a361beb0572ffe6b59740ea06de77cf0dba/tests%2Fcompile-fail%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15240a361beb0572ffe6b59740ea06de77cf0dba/tests%2Fcompile-fail%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fapprox_const.rs?ref=15240a361beb0572ffe6b59740ea06de77cf0dba", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #[deny(approx_constant)]\n-#[allow(unused)]\n+#[allow(unused, shadow_unrelated)]\n fn main() {\n     let my_e = 2.7182; //~ERROR approximate value of `f{32, 64}::E` found\n     let almost_e = 2.718; //~ERROR approximate value of `f{32, 64}::E` found"}, {"sha": "e321371721314228c94729332c4b9e7a9cd5961f", "filename": "tests/compile-fail/shadow.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/15240a361beb0572ffe6b59740ea06de77cf0dba/tests%2Fcompile-fail%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15240a361beb0572ffe6b59740ea06de77cf0dba/tests%2Fcompile-fail%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fshadow.rs?ref=15240a361beb0572ffe6b59740ea06de77cf0dba", "patch": "@@ -0,0 +1,22 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(unused_parens, unused_variables)]\n+#![deny(shadow)]\n+\n+fn id<T>(x: T) -> T { x }\n+\n+fn first(x: (isize, isize)) -> isize { x.0 }\n+\n+fn main() {\n+    let mut x = 1;\n+    let x = &mut x; //~ERROR: x is shadowed by itself in &mut x\n+    let x = { x }; //~ERROR: x is shadowed by itself in { x }\n+    let x = (&*x); //~ERROR: x is shadowed by itself in (&*x)\n+    let x = { *x + 1 }; //~ERROR: x is shadowed by { *x + 1 } which reuses\n+    let x = id(x); //~ERROR: x is shadowed by id(x) which reuses\n+    let x = (1, x); //~ERROR: x is shadowed by (1, x) which reuses\n+    let x = first(x); //~ERROR: x is shadowed by first(x) which reuses\n+    let y = 1;\n+    let x = y; //~ERROR: x is shadowed by y in this declaration\n+}"}]}