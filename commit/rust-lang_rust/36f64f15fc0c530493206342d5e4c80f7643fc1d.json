{"sha": "36f64f15fc0c530493206342d5e4c80f7643fc1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZjY0ZjE1ZmMwYzUzMDQ5MzIwNjM0MmQ1ZTRjODBmNzY0M2ZjMWQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-28T05:27:44Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: remove `ty::print::FORCE_ABSOLUTE` altogether.", "tree": {"sha": "48de3d4b5c32c301686fe9c49fa447975b9a67e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48de3d4b5c32c301686fe9c49fa447975b9a67e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36f64f15fc0c530493206342d5e4c80f7643fc1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36f64f15fc0c530493206342d5e4c80f7643fc1d", "html_url": "https://github.com/rust-lang/rust/commit/36f64f15fc0c530493206342d5e4c80f7643fc1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36f64f15fc0c530493206342d5e4c80f7643fc1d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66cc029dd78ba5df23998a1966c7f9222e5c9c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/66cc029dd78ba5df23998a1966c7f9222e5c9c1c", "html_url": "https://github.com/rust-lang/rust/commit/66cc029dd78ba5df23998a1966c7f9222e5c9c1c"}], "stats": {"total": 51, "additions": 6, "deletions": 45}, "files": [{"sha": "c27281911aa0ef196bb4ccd69e92ecb48bb7f356", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36f64f15fc0c530493206342d5e4c80f7643fc1d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f64f15fc0c530493206342d5e4c80f7643fc1d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=36f64f15fc0c530493206342d5e4c80f7643fc1d", "patch": "@@ -447,7 +447,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         use hir::def::Namespace;\n         use hir::def_id::CrateNum;\n         use ty::print::{PrintCx, Printer};\n-        use ty::subst::Substs;\n+        use ty::subst::SubstsRef;\n \n         struct AbsolutePathPrinter;\n \n@@ -481,7 +481,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 self: &mut PrintCx<'_, '_, 'tcx, Self>,\n                 path: Self::Path,\n                 _params: &[ty::GenericParamDef],\n-                _substs: &'tcx Substs<'tcx>,\n+                _substs: SubstsRef<'tcx>,\n                 _ns: Namespace,\n                 _projections: impl Iterator<Item = ty::ExistentialProjection<'tcx>>,\n             ) -> Self::Path {"}, {"sha": "0fda55423aad2454b89288999b1ffd0519b14dd3", "filename": "src/librustc/ty/print.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/36f64f15fc0c530493206342d5e4c80f7643fc1d/src%2Flibrustc%2Fty%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f64f15fc0c530493206342d5e4c80f7643fc1d/src%2Flibrustc%2Fty%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint.rs?ref=36f64f15fc0c530493206342d5e4c80f7643fc1d", "patch": "@@ -16,25 +16,10 @@ use std::iter;\n use std::ops::Deref;\n \n thread_local! {\n-    static FORCE_ABSOLUTE: Cell<bool> = Cell::new(false);\n     static FORCE_IMPL_FILENAME_LINE: Cell<bool> = Cell::new(false);\n     static SHOULD_PREFIX_WITH_CRATE: Cell<bool> = Cell::new(false);\n }\n \n-/// Enforces that def_path_str always returns an absolute path and\n-/// also enables \"type-based\" impl paths. This is used when building\n-/// symbols that contain types, where we want the crate name to be\n-/// part of the symbol.\n-pub fn with_forced_absolute_paths<F: FnOnce() -> R, R>(f: F) -> R {\n-    FORCE_ABSOLUTE.with(|force| {\n-        let old = force.get();\n-        force.set(true);\n-        let result = f();\n-        force.set(old);\n-        result\n-    })\n-}\n-\n /// Force us to name impls with just the filename/line number. We\n /// normally try to use types. But at some points, notably while printing\n /// cycle errors, this can result in extra or suboptimal error output,\n@@ -223,24 +208,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Returns a string identifying this `DefId`. This string is\n-    /// suitable for user output. It is relative to the current crate\n-    /// root, unless with_forced_absolute_paths was used.\n-    pub fn def_path_str_with_substs_and_ns(\n-        self,\n-        def_id: DefId,\n-        substs: Option<SubstsRef<'tcx>>,\n-        ns: Namespace,\n-    ) -> String {\n-        debug!(\"def_path_str: def_id={:?}, substs={:?}, ns={:?}\", def_id, substs, ns);\n-        let mut s = String::new();\n-        let _ = PrintCx::new(self, FmtPrinter { fmt: &mut s })\n-            .print_def_path(def_id, substs, ns, iter::empty());\n-        s\n-    }\n-\n-    /// Returns a string identifying this `DefId`. This string is\n-    /// suitable for user output. It is relative to the current crate\n-    /// root, unless with_forced_absolute_paths was used.\n+    /// suitable for user output.\n     pub fn def_path_str(self, def_id: DefId) -> String {\n         let ns = self.guess_def_namespace(def_id);\n         debug!(\"def_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n@@ -722,8 +690,6 @@ impl<F: fmt::Write> Printer for FmtPrinter<F> {\n         // FIXME(eddyb) avoid querying `tcx.generics_of` and `tcx.def_key`\n         // both here and in `default_print_def_path`.\n         let generics = substs.map(|_| self.tcx.generics_of(def_id));\n-        // HACK(eddyb) remove the `FORCE_ABSOLUTE` hack by bypassing `FmtPrinter`\n-        assert!(!FORCE_ABSOLUTE.with(|force| force.get()));\n         if generics.as_ref().and_then(|g| g.parent).is_none() {\n             if let Some(path) = self.try_print_visible_def_path(def_id) {\n                 let path = if let (Some(generics), Some(substs)) = (generics, substs) {\n@@ -763,9 +729,6 @@ impl<F: fmt::Write> Printer for FmtPrinter<F> {\n     }\n \n     fn path_crate(self: &mut PrintCx<'_, '_, '_, Self>, cnum: CrateNum) -> Self::Path {\n-        // HACK(eddyb) remove the `FORCE_ABSOLUTE` hack by bypassing `FmtPrinter`\n-        assert!(!FORCE_ABSOLUTE.with(|force| force.get()));\n-\n         if cnum == LOCAL_CRATE {\n             if self.tcx.sess.rust_2018() {\n                 // We add the `crate::` keyword on Rust 2018, only when desired."}, {"sha": "8f31e91fa79fcc34bfde9e744fd4f6f8695cedf6", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36f64f15fc0c530493206342d5e4c80f7643fc1d/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36f64f15fc0c530493206342d5e4c80f7643fc1d/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=36f64f15fc0c530493206342d5e4c80f7643fc1d", "patch": "@@ -225,11 +225,9 @@ fn get_symbol_hash<'a, 'tcx>(\n }\n \n fn def_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::SymbolName {\n-    ty::print::with_forced_absolute_paths(|| {\n-        let mut cx = PrintCx::new(tcx, SymbolPath::new(tcx));\n-        let _ = cx.print_def_path(def_id, None, Namespace::ValueNS, iter::empty());\n-        cx.printer.into_interned()\n-    })\n+    let mut cx = PrintCx::new(tcx, SymbolPath::new(tcx));\n+    let _ = cx.print_def_path(def_id, None, Namespace::ValueNS, iter::empty());\n+    cx.printer.into_interned()\n }\n \n fn symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance<'tcx>) -> ty::SymbolName {"}]}