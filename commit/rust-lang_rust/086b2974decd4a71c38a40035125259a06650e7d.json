{"sha": "086b2974decd4a71c38a40035125259a06650e7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NmIyOTc0ZGVjZDRhNzFjMzhhNDAwMzUxMjUyNTlhMDY2NTBlN2Q=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-16T09:22:28Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-16T09:22:28Z"}, "message": "rollup merge of #18985: alexcrichton/issue-18900", "tree": {"sha": "c8a1866092befd715f9d7136bea8586919e3bde2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8a1866092befd715f9d7136bea8586919e3bde2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/086b2974decd4a71c38a40035125259a06650e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/086b2974decd4a71c38a40035125259a06650e7d", "html_url": "https://github.com/rust-lang/rust/commit/086b2974decd4a71c38a40035125259a06650e7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/086b2974decd4a71c38a40035125259a06650e7d/comments", "author": null, "committer": null, "parents": [{"sha": "94c8bb46963c713cfbc8f46c683147dcc574b506", "url": "https://api.github.com/repos/rust-lang/rust/commits/94c8bb46963c713cfbc8f46c683147dcc574b506", "html_url": "https://github.com/rust-lang/rust/commit/94c8bb46963c713cfbc8f46c683147dcc574b506"}, {"sha": "3e0368e621047892352d1ec02d9fa6124ca28e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0368e621047892352d1ec02d9fa6124ca28e77", "html_url": "https://github.com/rust-lang/rust/commit/3e0368e621047892352d1ec02d9fa6124ca28e77"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "24fc2998ee696f49766abf41327ed3bf9a9d6b7d", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/086b2974decd4a71c38a40035125259a06650e7d/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086b2974decd4a71c38a40035125259a06650e7d/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=086b2974decd4a71c38a40035125259a06650e7d", "patch": "@@ -661,23 +661,22 @@ mod test {\n         let addr = next_test_ip4();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n+        let (tx, rx) = channel();\n         spawn(proc() {\n-            let _stream = TcpStream::connect(addr);\n-            // Close\n+            drop(TcpStream::connect(addr));\n+            tx.send(());\n         });\n \n         let mut stream = acceptor.accept();\n+        rx.recv();\n         let buf = [0];\n-        loop {\n-            match stream.write(buf) {\n-                Ok(..) => {}\n-                Err(e) => {\n-                    assert!(e.kind == ConnectionReset ||\n-                            e.kind == BrokenPipe ||\n-                            e.kind == ConnectionAborted,\n-                            \"unknown error: {}\", e);\n-                    break;\n-                }\n+        match stream.write(buf) {\n+            Ok(..) => {}\n+            Err(e) => {\n+                assert!(e.kind == ConnectionReset ||\n+                        e.kind == BrokenPipe ||\n+                        e.kind == ConnectionAborted,\n+                        \"unknown error: {}\", e);\n             }\n         }\n     }\n@@ -687,23 +686,22 @@ mod test {\n         let addr = next_test_ip6();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n+        let (tx, rx) = channel();\n         spawn(proc() {\n-            let _stream = TcpStream::connect(addr);\n-            // Close\n+            drop(TcpStream::connect(addr));\n+            tx.send(());\n         });\n \n         let mut stream = acceptor.accept();\n+        rx.recv();\n         let buf = [0];\n-        loop {\n-            match stream.write(buf) {\n-                Ok(..) => {}\n-                Err(e) => {\n-                    assert!(e.kind == ConnectionReset ||\n-                            e.kind == BrokenPipe ||\n-                            e.kind == ConnectionAborted,\n-                            \"unknown error: {}\", e);\n-                    break;\n-                }\n+        match stream.write(buf) {\n+            Ok(..) => {}\n+            Err(e) => {\n+                assert!(e.kind == ConnectionReset ||\n+                        e.kind == BrokenPipe ||\n+                        e.kind == ConnectionAborted,\n+                        \"unknown error: {}\", e);\n             }\n         }\n     }"}]}