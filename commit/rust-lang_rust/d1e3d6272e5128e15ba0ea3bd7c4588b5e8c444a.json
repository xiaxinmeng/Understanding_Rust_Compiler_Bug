{"sha": "d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZTNkNjI3MmU1MTI4ZTE1YmEwZWEzYmQ3YzQ1ODhiNWU4YzQ0NGE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-28T01:45:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-01T00:07:32Z"}, "message": "Add the `after_expand` entry point between import resolution and the rest of name resolution", "tree": {"sha": "e862e8fe7a779723b6afddeaa4136b10449e7671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e862e8fe7a779723b6afddeaa4136b10449e7671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "html_url": "https://github.com/rust-lang/rust/commit/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eec73820c2656b25ac513d6362e75f0c4171b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eec73820c2656b25ac513d6362e75f0c4171b3b", "html_url": "https://github.com/rust-lang/rust/commit/9eec73820c2656b25ac513d6362e75f0c4171b3b"}], "stats": {"total": 114, "additions": 75, "deletions": 39}, "files": [{"sha": "7fd4e3643be57a429992a7e4c02d3b595eb213ce", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "patch": "@@ -116,8 +116,16 @@ pub fn compile_input(sess: &Session,\n         let outputs = build_output_filenames(input, outdir, output, &krate.attrs, sess);\n         let id = link::find_crate_name(Some(sess), &krate.attrs, input);\n         let ExpansionResult { expanded_crate, defs, analysis, resolutions, mut hir_forest } = {\n-            let make_glob_map = control.make_glob_map;\n-            phase_2_configure_and_expand(sess, &cstore, krate, &id, addl_plugins, make_glob_map)?\n+            phase_2_configure_and_expand(\n+                sess, &cstore, krate, &id, addl_plugins, control.make_glob_map,\n+                |expanded_crate| {\n+                    let mut state = CompileState::state_after_expand(\n+                        input, sess, outdir, output, &cstore, expanded_crate, &id,\n+                    );\n+                    controller_entry_point!(after_expand, sess, state, Ok(()));\n+                    Ok(())\n+                }\n+            )?\n         };\n \n         write_out_deps(sess, &outputs, &id);\n@@ -262,6 +270,7 @@ pub fn source_name(input: &Input) -> String {\n /// Expect more entry points to be added in the future.\n pub struct CompileController<'a> {\n     pub after_parse: PhaseController<'a>,\n+    pub after_expand: PhaseController<'a>,\n     pub after_hir_lowering: PhaseController<'a>,\n     pub after_analysis: PhaseController<'a>,\n     pub after_llvm: PhaseController<'a>,\n@@ -273,6 +282,7 @@ impl<'a> CompileController<'a> {\n     pub fn basic() -> CompileController<'a> {\n         CompileController {\n             after_parse: PhaseController::basic(),\n+            after_expand: PhaseController::basic(),\n             after_hir_lowering: PhaseController::basic(),\n             after_analysis: PhaseController::basic(),\n             after_llvm: PhaseController::basic(),\n@@ -363,6 +373,23 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n         }\n     }\n \n+    fn state_after_expand(input: &'a Input,\n+                          session: &'ast Session,\n+                          out_dir: &'a Option<PathBuf>,\n+                          out_file: &'a Option<PathBuf>,\n+                          cstore: &'a CStore,\n+                          expanded_crate: &'a ast::Crate,\n+                          crate_name: &'a str)\n+                          -> CompileState<'a, 'b, 'ast, 'tcx> {\n+        CompileState {\n+            crate_name: Some(crate_name),\n+            cstore: Some(cstore),\n+            expanded_crate: Some(expanded_crate),\n+            out_file: out_file.as_ref().map(|s| &**s),\n+            ..CompileState::empty(input, session, out_dir)\n+        }\n+    }\n+\n     fn state_after_hir_lowering(input: &'a Input,\n                                 session: &'ast Session,\n                                 out_dir: &'a Option<PathBuf>,\n@@ -496,13 +523,16 @@ pub struct ExpansionResult<'a> {\n /// standard library and prelude, and name resolution.\n ///\n /// Returns `None` if we're aborting after handling -W help.\n-pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n-                                        cstore: &CStore,\n-                                        mut krate: ast::Crate,\n-                                        crate_name: &'a str,\n-                                        addl_plugins: Option<Vec<String>>,\n-                                        make_glob_map: MakeGlobMap)\n-                                        -> Result<ExpansionResult<'a>, usize> {\n+pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n+                                           cstore: &CStore,\n+                                           mut krate: ast::Crate,\n+                                           crate_name: &'a str,\n+                                           addl_plugins: Option<Vec<String>>,\n+                                           make_glob_map: MakeGlobMap,\n+                                           after_expand: F)\n+                                           -> Result<ExpansionResult<'a>, usize>\n+    where F: FnOnce(&ast::Crate) -> CompileResult,\n+{\n     let time_passes = sess.time_passes();\n \n     // strip before anything else because crate metadata may use #[cfg_attr]\n@@ -685,9 +715,23 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n          \"AST validation\",\n          || ast_validation::check_crate(sess, &krate));\n \n-    time(sess.time_passes(), \"name resolution\", || {\n+    time(sess.time_passes(), \"name resolution\", || -> CompileResult {\n+        // Currently, we ignore the name resolution data structures for the purposes of dependency\n+        // tracking. Instead we will run name resolution and include its output in the hash of each\n+        // item, much like we do for macro expansion. In other words, the hash reflects not just\n+        // its contents but the results of name resolution on those contents. Hopefully we'll push\n+        // this back at some point.\n+        let _ignore = sess.dep_graph.in_ignore();\n+        resolver.build_reduced_graph(&krate);\n+        resolver.resolve_imports();\n+\n+        // Since import resolution will eventually happen in expansion,\n+        // don't perform `after_expand` until after import resolution.\n+        after_expand(&krate)?;\n+\n         resolver.resolve_crate(&krate);\n-    });\n+        Ok(())\n+    })?;\n \n     // Lower ast -> hir.\n     let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {"}, {"sha": "15a0ab0f284b3efdde3be345078029b4be4446af", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "patch": "@@ -116,9 +116,11 @@ fn test_env<F>(source_string: &str,\n         input: source_string.to_string(),\n     };\n     let krate = driver::phase_1_parse_input(&sess, krate_config, &input).unwrap();\n-    let driver::ExpansionResult { defs, resolutions, mut hir_forest, .. } =\n-        driver::phase_2_configure_and_expand(&sess, &cstore, krate, \"test\", None, MakeGlobMap::No)\n-            .expect(\"phase 2 aborted\");\n+    let driver::ExpansionResult { defs, resolutions, mut hir_forest, .. } = {\n+        driver::phase_2_configure_and_expand(\n+            &sess, &cstore, krate, \"test\", None, MakeGlobMap::No, |_| Ok(()),\n+        ).expect(\"phase 2 aborted\")\n+    };\n     let _ignore = dep_graph.in_ignore();\n \n     let arenas = ty::CtxtArenas::new();"}, {"sha": "66b0d663424aa829a95c673de86b76e27b63ae8e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "patch": "@@ -1167,18 +1167,6 @@ impl<'a> Resolver<'a> {\n \n     /// Entry point to crate resolution.\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n-        // Currently, we ignore the name resolution data structures for\n-        // the purposes of dependency tracking. Instead we will run name\n-        // resolution and include its output in the hash of each item,\n-        // much like we do for macro expansion. In other words, the hash\n-        // reflects not just its contents but the results of name\n-        // resolution on those contents. Hopefully we'll push this back at\n-        // some point.\n-        let _ignore = self.session.dep_graph.in_ignore();\n-\n-        self.build_reduced_graph(krate);\n-        resolve_imports::resolve_imports(self);\n-\n         self.current_module = self.graph_root;\n         visit::walk_crate(self, krate);\n "}, {"sha": "16a59fbb800024afcd24c43de94a8b15307da684", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "patch": "@@ -30,6 +30,12 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use std::cell::{Cell, RefCell};\n \n+impl<'a> Resolver<'a> {\n+    pub fn resolve_imports(&mut self) {\n+        ImportResolver { resolver: self }.resolve_imports();\n+    }\n+}\n+\n /// Contains data for specific types of import directives.\n #[derive(Clone, Debug)]\n pub enum ImportDirectiveSubclass {\n@@ -722,8 +728,3 @@ fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass) -> St\n         GlobImport { .. } => \"*\".to_string(),\n     }\n }\n-\n-pub fn resolve_imports(resolver: &mut Resolver) {\n-    let mut import_resolver = ImportResolver { resolver: resolver };\n-    import_resolver.resolve_imports();\n-}"}, {"sha": "85ea94e02e8d794014a13263b2d9db970337abe6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "patch": "@@ -149,9 +149,9 @@ pub fn run_core(search_paths: SearchPaths,\n     let name = link::find_crate_name(Some(&sess), &krate.attrs, &input);\n \n     let driver::ExpansionResult { defs, analysis, resolutions, mut hir_forest, .. } = {\n-        let make_glob_map = resolve::MakeGlobMap::No;\n-        driver::phase_2_configure_and_expand(&sess, &cstore, krate, &name, None, make_glob_map)\n-            .expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n+        driver::phase_2_configure_and_expand(\n+            &sess, &cstore, krate, &name, None, resolve::MakeGlobMap::No, |_| Ok(()),\n+        ).expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n     };\n \n     let arenas = ty::CtxtArenas::new();"}, {"sha": "e3bc8037d13b67b0395baeb7560bb6b964a8c283", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "patch": "@@ -95,9 +95,9 @@ pub fn run(input: &str,\n     cfg.extend(config::parse_cfgspecs(cfgs.clone()));\n     let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, &input));\n     let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n-        let make_glob_map = MakeGlobMap::No;\n-        phase_2_configure_and_expand(&sess, &cstore, krate, \"rustdoc-test\", None, make_glob_map)\n-            .expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n+        phase_2_configure_and_expand(\n+            &sess, &cstore, krate, \"rustdoc-test\", None, MakeGlobMap::No, |_| Ok(())\n+        ).expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n     };\n \n     let dep_graph = DepGraph::new(false);"}, {"sha": "21e1463b6ef955efdf9929e42acf2f4944c7deaa", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=d1e3d6272e5128e15ba0ea3bd7c4588b5e8c444a", "patch": "@@ -241,8 +241,9 @@ fn compile_program(input: &str, sysroot: PathBuf)\n         let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, &input));\n \n         let driver::ExpansionResult { defs, analysis, resolutions, mut hir_forest, .. } = {\n-            driver::phase_2_configure_and_expand(&sess, &cstore, krate, &id, None, MakeGlobMap::No)\n-                .expect(\"phase_2 returned `None`\")\n+            driver::phase_2_configure_and_expand(\n+                &sess, &cstore, krate, &id, None, MakeGlobMap::No, |_| Ok(()),\n+            ).expect(\"phase_2 returned `None`\")\n         };\n \n         let arenas = ty::CtxtArenas::new();"}]}