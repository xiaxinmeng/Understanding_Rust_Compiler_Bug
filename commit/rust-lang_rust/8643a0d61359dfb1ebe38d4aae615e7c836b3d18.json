{"sha": "8643a0d61359dfb1ebe38d4aae615e7c836b3d18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NDNhMGQ2MTM1OWRmYjFlYmUzOGQ0YWFlNjE1ZTdjODM2YjNkMTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T14:32:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-30T15:33:53Z"}, "message": "green: Prevent runtime corruption on spawn failure\n\nLike with libnative, when a green task failed to spawn it would leave the world\nin a corrupt state where the local scheduler had been dropped as well as the\nlocal task. Also like libnative, this patch sets up a \"bomb\" which when it goes\noff will restore the state of the world.", "tree": {"sha": "cc656602f919f34db3faaa7f2d72e58b94250499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc656602f919f34db3faaa7f2d72e58b94250499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8643a0d61359dfb1ebe38d4aae615e7c836b3d18", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8643a0d61359dfb1ebe38d4aae615e7c836b3d18", "html_url": "https://github.com/rust-lang/rust/commit/8643a0d61359dfb1ebe38d4aae615e7c836b3d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8643a0d61359dfb1ebe38d4aae615e7c836b3d18/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "355c798ac3eba15bb2d53a6c553c6149391f9615", "url": "https://api.github.com/repos/rust-lang/rust/commits/355c798ac3eba15bb2d53a6c553c6149391f9615", "html_url": "https://github.com/rust-lang/rust/commit/355c798ac3eba15bb2d53a6c553c6149391f9615"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "12d7b75569782f18ff52408d5b880e31e45aee2c", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8643a0d61359dfb1ebe38d4aae615e7c836b3d18/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8643a0d61359dfb1ebe38d4aae615e7c836b3d18/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=8643a0d61359dfb1ebe38d4aae615e7c836b3d18", "patch": "@@ -442,15 +442,30 @@ impl Runtime for GreenTask {\n                      f: proc():Send) {\n         self.put_task(cur_task);\n \n+        // First, set up a bomb which when it goes off will restore the local\n+        // task unless its disarmed. This will allow us to gracefully fail from\n+        // inside of `configure` which allocates a new task.\n+        struct Bomb { inner: Option<Box<GreenTask>> }\n+        impl Drop for Bomb {\n+            fn drop(&mut self) {\n+                let _ = self.inner.take().map(|task| task.put());\n+            }\n+        }\n+        let mut bomb = Bomb { inner: Some(self) };\n+\n         // Spawns a task into the current scheduler. We allocate the new task's\n         // stack from the scheduler's stack pool, and then configure it\n         // accordingly to `opts`. Afterwards we bootstrap it immediately by\n         // switching to it.\n         //\n         // Upon returning, our task is back in TLS and we're good to return.\n-        let mut sched = self.sched.take_unwrap();\n-        let sibling = GreenTask::configure(&mut sched.stack_pool, opts, f);\n-        sched.run_task(self, sibling)\n+        let sibling = {\n+            let sched = bomb.inner.get_mut_ref().sched.get_mut_ref();\n+            GreenTask::configure(&mut sched.stack_pool, opts, f)\n+        };\n+        let mut me = bomb.inner.take().unwrap();\n+        let sched = me.sched.take().unwrap();\n+        sched.run_task(me, sibling)\n     }\n \n     // Local I/O is provided by the scheduler's event loop"}, {"sha": "dc96aecff8017c7c858934ad3ebb56668f4fb79e", "filename": "src/librustrt/bookkeeping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8643a0d61359dfb1ebe38d4aae615e7c836b3d18/src%2Flibrustrt%2Fbookkeeping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8643a0d61359dfb1ebe38d4aae615e7c836b3d18/src%2Flibrustrt%2Fbookkeeping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fbookkeeping.rs?ref=8643a0d61359dfb1ebe38d4aae615e7c836b3d18", "patch": "@@ -26,7 +26,7 @@ use mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n static mut TASK_COUNT: atomics::AtomicUint = atomics::INIT_ATOMIC_UINT;\n static mut TASK_LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n \n-pub struct Token(());\n+pub struct Token { _private: () }\n \n impl Drop for Token {\n     fn drop(&mut self) { decrement() }\n@@ -36,7 +36,7 @@ impl Drop for Token {\n /// the count when dropped.\n pub fn increment() -> Token {\n     let _ = unsafe { TASK_COUNT.fetch_add(1, atomics::SeqCst) };\n-    Token(())\n+    Token { _private: () }\n }\n \n pub fn decrement() {"}, {"sha": "e3d9b7d136ec2e05b6b16816e89dbb29d35418d9", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8643a0d61359dfb1ebe38d4aae615e7c836b3d18/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8643a0d61359dfb1ebe38d4aae615e7c836b3d18/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=8643a0d61359dfb1ebe38d4aae615e7c836b3d18", "patch": "@@ -663,6 +663,6 @@ mod test {\n     fn block_and_wake() {\n         let task = box Task::new();\n         let mut task = BlockedTask::block(task).wake().unwrap();\n-        task.destroy();\n+        task.drop();\n     }\n }"}, {"sha": "e1c4a480d1cc17e7ec6ff46bed0893b163e522fd", "filename": "src/test/run-pass/spawn-stack-too-big.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8643a0d61359dfb1ebe38d4aae615e7c836b3d18/src%2Ftest%2Frun-pass%2Fspawn-stack-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8643a0d61359dfb1ebe38d4aae615e7c836b3d18/src%2Ftest%2Frun-pass%2Fspawn-stack-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-stack-too-big.rs?ref=8643a0d61359dfb1ebe38d4aae615e7c836b3d18", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-macos apparently gargantuan mmap requests are ok?\n+\n+#![feature(phase)]\n+\n+#[phase(plugin)]\n+extern crate green;\n+extern crate native;\n+\n+use std::task::TaskBuilder;\n+use native::NativeTaskBuilder;\n+\n+green_start!(main)\n+\n+fn main() {\n+    test();\n+\n+    let (tx, rx) = channel();\n+    TaskBuilder::new().native().spawn(proc() {\n+        tx.send(test());\n+    });\n+    rx.recv();\n+}\n+\n+#[cfg(not(target_word_size = \"64\"))]\n+fn test() {}\n+\n+#[cfg(target_word_size = \"64\")]\n+fn test() {\n+    let (tx, rx) = channel();\n+    spawn(proc() {\n+        TaskBuilder::new().stack_size(1024 * 1024 * 1024 * 64).spawn(proc() {\n+        });\n+        tx.send(());\n+    });\n+\n+    assert!(rx.recv_opt().is_err());\n+}"}]}