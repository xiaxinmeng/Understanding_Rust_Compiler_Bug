{"sha": "c2c1910d69086827629d37deb5ce6a2febdb36fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzE5MTBkNjkwODY4Mjc2MjlkMzdkZWI1Y2U2YTJmZWJkYjM2ZmQ=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2017-10-23T21:21:00Z"}, "committer": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2017-10-25T18:07:13Z"}, "message": "Implement Hash for raw pointers to unsized types", "tree": {"sha": "a6ab98463b450e4b2ecb6a369e56a65bfd123be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6ab98463b450e4b2ecb6a369e56a65bfd123be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c1910d69086827629d37deb5ce6a2febdb36fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c1910d69086827629d37deb5ce6a2febdb36fd", "html_url": "https://github.com/rust-lang/rust/commit/c2c1910d69086827629d37deb5ce6a2febdb36fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c1910d69086827629d37deb5ce6a2febdb36fd/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c053db233d69519b548e5b8ed7192d0783e582a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c053db233d69519b548e5b8ed7192d0783e582a", "html_url": "https://github.com/rust-lang/rust/commit/4c053db233d69519b548e5b8ed7192d0783e582a"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "b3c11ed1b5ac4d245ee0f0c1e462dbe4b20fbd70", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c2c1910d69086827629d37deb5ce6a2febdb36fd/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c1910d69086827629d37deb5ce6a2febdb36fd/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=c2c1910d69086827629d37deb5ce6a2febdb36fd", "patch": "@@ -665,16 +665,36 @@ mod impls {\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T> Hash for *const T {\n+    impl<T: ?Sized> Hash for *const T {\n         fn hash<H: Hasher>(&self, state: &mut H) {\n-            state.write_usize(*self as usize)\n+            if mem::size_of::<Self>() == mem::size_of::<usize>() {\n+                // Thin pointer\n+                state.write_usize(*self as *const () as usize);\n+            } else {\n+                // Fat pointer\n+                let (a, b) = unsafe {\n+                    *(self as *const Self as *const (usize, usize))\n+                };\n+                state.write_usize(a);\n+                state.write_usize(b);\n+            }\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T> Hash for *mut T {\n+    impl<T: ?Sized> Hash for *mut T {\n         fn hash<H: Hasher>(&self, state: &mut H) {\n-            state.write_usize(*self as usize)\n+            if mem::size_of::<Self>() == mem::size_of::<usize>() {\n+                // Thin pointer\n+                state.write_usize(*self as *const () as usize);\n+            } else {\n+                // Fat pointer\n+                let (a, b) = unsafe {\n+                    *(self as *const Self as *const (usize, usize))\n+                };\n+                state.write_usize(a);\n+                state.write_usize(b);\n+            }\n         }\n     }\n }"}, {"sha": "8716421b424deb3106639ead19edc26954838fd3", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2c1910d69086827629d37deb5ce6a2febdb36fd/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c1910d69086827629d37deb5ce6a2febdb36fd/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=c2c1910d69086827629d37deb5ce6a2febdb36fd", "patch": "@@ -79,6 +79,14 @@ fn test_writer_hasher() {\n \n     let ptr = 5_usize as *mut i32;\n     assert_eq!(hash(&ptr), 5);\n+\n+    let cs: &mut [u8] = &mut [1, 2, 3];\n+    let ptr = cs.as_ptr();\n+    let slice_ptr = cs as *const [u8];\n+    assert_eq!(hash(&slice_ptr), hash(&ptr) + cs.len() as u64);\n+\n+    let slice_ptr = cs as *mut [u8];\n+    assert_eq!(hash(&slice_ptr), hash(&ptr) + cs.len() as u64);\n }\n \n struct Custom { hash: u64 }"}]}