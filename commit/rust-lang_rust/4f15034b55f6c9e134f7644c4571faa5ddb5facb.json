{"sha": "4f15034b55f6c9e134f7644c4571faa5ddb5facb", "node_id": "C_kwDOAAsO6NoAKDRmMTUwMzRiNTVmNmM5ZTEzNGY3NjQ0YzQ1NzFmYWE1ZGRiNWZhY2I", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T06:53:11Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T17:48:22Z"}, "message": "hack: don't normalize xform_ret_ty for trait/object candidates unless needed", "tree": {"sha": "a4a972b5a50603f9ec4e1a03a9e5ba65b809a31c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4a972b5a50603f9ec4e1a03a9e5ba65b809a31c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f15034b55f6c9e134f7644c4571faa5ddb5facb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f15034b55f6c9e134f7644c4571faa5ddb5facb", "html_url": "https://github.com/rust-lang/rust/commit/4f15034b55f6c9e134f7644c4571faa5ddb5facb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f15034b55f6c9e134f7644c4571faa5ddb5facb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "url": "https://api.github.com/repos/rust-lang/rust/commits/2600d6245bbc0d04e57e4ce561a6c07bf6b55951", "html_url": "https://github.com/rust-lang/rust/commit/2600d6245bbc0d04e57e4ce561a6c07bf6b55951"}], "stats": {"total": 81, "additions": 42, "deletions": 39}, "files": [{"sha": "02b4d5bb2fbe6a3573e108ad4a680a30a242a66e", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4f15034b55f6c9e134f7644c4571faa5ddb5facb/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f15034b55f6c9e134f7644c4571faa5ddb5facb/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=4f15034b55f6c9e134f7644c4571faa5ddb5facb", "patch": "@@ -1523,29 +1523,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             };\n \n             let mut result = ProbeResult::Match;\n-            let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-\n-            let xform_ret_ty = if let Some(xform_ret_ty) = probe.xform_ret_ty {\n-                // `xform_ret_ty` hasn't been normalized yet, only `xform_self_ty`,\n-                // see the reasons mentioned in the comments in `assemble_inherent_impl_probe`\n-                // for why this is necessary\n-                let InferOk {\n-                    value: normalized_xform_ret_ty,\n-                    obligations: normalization_obligations,\n-                } = self.fcx.at(&cause, self.param_env).normalize(xform_ret_ty);\n-                debug!(\"xform_ret_ty after normalization: {:?}\", normalized_xform_ret_ty);\n-\n-                for o in normalization_obligations {\n-                    if !self.predicate_may_hold(&o) {\n-                        possibly_unsatisfied_predicates.push((o.predicate, None, Some(o.cause)));\n-                        result = ProbeResult::NoMatch;\n-                    }\n-                }\n+            let mut xform_ret_ty = probe.xform_ret_ty;\n+            debug!(?xform_ret_ty);\n \n-                Some(normalized_xform_ret_ty)\n-            } else {\n-                None\n-            };\n+            let cause = traits::ObligationCause::misc(self.span, self.body_id);\n \n             let mut parent_pred = None;\n \n@@ -1555,6 +1536,16 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             // don't have enough information to fully evaluate).\n             match probe.kind {\n                 InherentImplCandidate(ref substs, ref ref_obligations) => {\n+                    // `xform_ret_ty` hasn't been normalized yet, only `xform_self_ty`,\n+                    // see the reasons mentioned in the comments in `assemble_inherent_impl_probe`\n+                    // for why this is necessary\n+                    let InferOk {\n+                        value: normalized_xform_ret_ty,\n+                        obligations: normalization_obligations,\n+                    } = self.fcx.at(&cause, self.param_env).normalize(xform_ret_ty);\n+                    xform_ret_ty = normalized_xform_ret_ty;\n+                    debug!(\"xform_ret_ty after normalization: {:?}\", xform_ret_ty);\n+\n                     // Check whether the impl imposes obligations we have to worry about.\n                     let impl_def_id = probe.item.container_id(self.tcx);\n                     let impl_bounds = self.tcx.predicates_of(impl_def_id);\n@@ -1572,7 +1563,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n                     let candidate_obligations = impl_obligations\n                         .chain(norm_obligations.into_iter())\n-                        .chain(ref_obligations.iter().cloned());\n+                        .chain(ref_obligations.iter().cloned())\n+                        .chain(normalization_obligations.into_iter());\n \n                     // Evaluate those obligations to see if they might possibly hold.\n                     for o in candidate_obligations {\n@@ -1668,8 +1660,33 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n             if let ProbeResult::Match = result\n                 && let Some(return_ty) = self.return_type\n-                && let Some(xform_ret_ty) = xform_ret_ty\n+                && let Some(mut xform_ret_ty) = xform_ret_ty\n             {\n+                // `xform_ret_ty` has only been normalized for `InherentImplCandidate`.\n+                // We don't normalize the other candidates for perf/backwards-compat reasons...\n+                // but `self.return_type` is only set on the diagnostic-path, so we\n+                // should be okay doing it here.\n+                if !matches!(probe.kind, InherentImplCandidate(..)) {\n+                    let InferOk {\n+                        value: normalized_xform_ret_ty,\n+                        obligations: normalization_obligations,\n+                    } = self.fcx.at(&cause, self.param_env).normalize(xform_ret_ty);\n+                    xform_ret_ty = normalized_xform_ret_ty;\n+                    debug!(\"xform_ret_ty after normalization: {:?}\", xform_ret_ty);\n+                    // Evaluate those obligations to see if they might possibly hold.\n+                    for o in normalization_obligations {\n+                        let o = self.resolve_vars_if_possible(o);\n+                        if !self.predicate_may_hold(&o) {\n+                            result = ProbeResult::NoMatch;\n+                            possibly_unsatisfied_predicates.push((\n+                                o.predicate,\n+                                None,\n+                                Some(o.cause),\n+                            ));\n+                        }\n+                    }\n+                }\n+\n                 debug!(\n                     \"comparing return_ty {:?} with xform ret ty {:?}\",\n                     return_ty, xform_ret_ty\n@@ -1681,7 +1698,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     .sup(return_ty, xform_ret_ty)\n                     .is_err()\n                 {\n-                    return ProbeResult::BadReturnType;\n+                    result = ProbeResult::BadReturnType;\n                 }\n             }\n "}, {"sha": "543ceac8e917876e9934c7d9e853af806f5ddcb6", "filename": "src/test/ui/trait-bounds/impl-derived-implicit-sized-bound-2.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f15034b55f6c9e134f7644c4571faa5ddb5facb/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-derived-implicit-sized-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f15034b55f6c9e134f7644c4571faa5ddb5facb/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-derived-implicit-sized-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-derived-implicit-sized-bound-2.stderr?ref=4f15034b55f6c9e134f7644c4571faa5ddb5facb", "patch": "@@ -17,13 +17,6 @@ LL | impl<'a, T: Perpetrator /*+ ?Sized*/> VictimTrait for Victim<'a, T> {\n    |          ^                            -----------     -------------\n    |          |\n    |          unsatisfied trait bound introduced here\n-   = note: the following trait bounds were not satisfied:\n-           `&Victim<'_, Self>: VictimTrait`\n-           `&mut Victim<'_, Self>: VictimTrait`\n-help: consider relaxing the type parameter's implicit `Sized` bound\n-   |\n-LL | impl<'a, T: ?Sized + Perpetrator /*+ ?Sized*/> VictimTrait for Victim<'a, T> {\n-   |             ++++++++\n help: consider relaxing the type parameter's implicit `Sized` bound\n    |\n LL | impl<'a, T: ?Sized + Perpetrator /*+ ?Sized*/> VictimTrait for Victim<'a, T> {"}, {"sha": "f08d685836ec1a67aa47eff25ebf63e5b8c990c1", "filename": "src/test/ui/trait-bounds/impl-derived-implicit-sized-bound.stderr", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f15034b55f6c9e134f7644c4571faa5ddb5facb/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-derived-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f15034b55f6c9e134f7644c4571faa5ddb5facb/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-derived-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fimpl-derived-implicit-sized-bound.stderr?ref=4f15034b55f6c9e134f7644c4571faa5ddb5facb", "patch": "@@ -17,13 +17,6 @@ LL | impl<'a, T: Perpetrator /*+ ?Sized*/> VictimTrait for Victim<'a, T> {\n    |          ^                            -----------     -------------\n    |          |\n    |          unsatisfied trait bound introduced here\n-   = note: the following trait bounds were not satisfied:\n-           `&Victim<'_, Self>: VictimTrait`\n-           `&mut Victim<'_, Self>: VictimTrait`\n-help: consider relaxing the type parameter's implicit `Sized` bound\n-   |\n-LL | impl<'a, T: ?Sized + Perpetrator /*+ ?Sized*/> VictimTrait for Victim<'a, T> {\n-   |             ++++++++\n help: consider relaxing the type parameter's implicit `Sized` bound\n    |\n LL | impl<'a, T: ?Sized + Perpetrator /*+ ?Sized*/> VictimTrait for Victim<'a, T> {"}]}