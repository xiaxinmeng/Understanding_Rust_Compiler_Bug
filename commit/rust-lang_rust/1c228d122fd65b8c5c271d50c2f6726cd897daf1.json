{"sha": "1c228d122fd65b8c5c271d50c2f6726cd897daf1", "node_id": "C_kwDOAAsO6NoAKDFjMjI4ZDEyMmZkNjViOGM1YzI3MWQ1MGMyZjY3MjZjZDg5N2RhZjE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-15T21:55:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-15T21:55:22Z"}, "message": "Rollup merge of #110347 - est31:size_of_links, r=jyn514\n\nAdd intra-doc links to size_of_* functions\n\nAlso some smaller doc improvements.", "tree": {"sha": "b6ca7e9738eb7c89de014a73e2c18775c8d8a824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6ca7e9738eb7c89de014a73e2c18775c8d8a824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c228d122fd65b8c5c271d50c2f6726cd897daf1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkOx1KCRBK7hj4Ov3rIwAACOoIADYkYSAUn5tixkY4SZNcMh9X\ncEa/QN6j57AshbH9yavVmUbrXNhAPpPm6YWioQbKitXdZMW0VG/crOb3Ca7h2sdg\nowFvDM3akPSZv00G9BSYCbVeYvvofyJhQqmEgGLp19MusYpd2VNdlh7Hcl6f9w3d\n/thq/oCgX6NFnTu+O8+vsCfrGJeCZ8uwMjpbyRO6eP/DRCHS2pQLAasghloC8RIk\nMEgHw4DD2NSN2JPtI32MGqpsA1w0PDEozPV05zACth/6d23vlh2AKLooJ1ZTLRy1\nR7Hsj+FJlWgaWMJrgjHqX+GHWh22Hy3ycP48NoxXvlQiyADV2EKHLBgH1ER7tno=\n=mmFZ\n-----END PGP SIGNATURE-----\n", "payload": "tree b6ca7e9738eb7c89de014a73e2c18775c8d8a824\nparent a484f22078eb113fa5a22249cba4be90b66e706a\nparent 504a47b16d3195e8c857a064a850bbb28912db5e\nauthor Yuki Okushi <jtitor@2k36.org> 1681595722 +0900\ncommitter GitHub <noreply@github.com> 1681595722 +0900\n\nRollup merge of #110347 - est31:size_of_links, r=jyn514\n\nAdd intra-doc links to size_of_* functions\n\nAlso some smaller doc improvements.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c228d122fd65b8c5c271d50c2f6726cd897daf1", "html_url": "https://github.com/rust-lang/rust/commit/1c228d122fd65b8c5c271d50c2f6726cd897daf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c228d122fd65b8c5c271d50c2f6726cd897daf1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a484f22078eb113fa5a22249cba4be90b66e706a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a484f22078eb113fa5a22249cba4be90b66e706a", "html_url": "https://github.com/rust-lang/rust/commit/a484f22078eb113fa5a22249cba4be90b66e706a"}, {"sha": "504a47b16d3195e8c857a064a850bbb28912db5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/504a47b16d3195e8c857a064a850bbb28912db5e", "html_url": "https://github.com/rust-lang/rust/commit/504a47b16d3195e8c857a064a850bbb28912db5e"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "30ec73cabf8492b1d17986b716aa2f4223d234b6", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1c228d122fd65b8c5c271d50c2f6726cd897daf1/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c228d122fd65b8c5c271d50c2f6726cd897daf1/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=1c228d122fd65b8c5c271d50c2f6726cd897daf1", "patch": "@@ -170,7 +170,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n ///\n /// The following table gives the size for primitives.\n ///\n-/// Type | size_of::\\<Type>()\n+/// Type | `size_of::<Type>()`\n /// ---- | ---------------\n /// () | 0\n /// bool | 1\n@@ -190,8 +190,8 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n ///\n /// Furthermore, `usize` and `isize` have the same size.\n ///\n-/// The types `*const T`, `&T`, `Box<T>`, `Option<&T>`, and `Option<Box<T>>` all have\n-/// the same size. If `T` is Sized, all of those types have the same size as `usize`.\n+/// The types [`*const T`], `&T`, [`Box<T>`], [`Option<&T>`], and `Option<Box<T>>` all have\n+/// the same size. If `T` is `Sized`, all of those types have the same size as `usize`.\n ///\n /// The mutability of a pointer does not change its size. As such, `&T` and `&mut T`\n /// have the same size. Likewise for `*const T` and `*mut T`.\n@@ -203,7 +203,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n ///\n /// ## Size of Structs\n ///\n-/// For `structs`, the size is determined by the following algorithm.\n+/// For `struct`s, the size is determined by the following algorithm.\n ///\n /// For each field in the struct ordered by declaration order:\n ///\n@@ -299,6 +299,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n /// ```\n ///\n /// [alignment]: align_of\n+/// [`*const T`]: primitive@pointer\n+/// [`Box<T>`]: ../../std/boxed/struct.Box.html\n+/// [`Option<&T>`]: crate::option::Option\n+///\n #[inline(always)]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -311,7 +315,7 @@ pub const fn size_of<T>() -> usize {\n \n /// Returns the size of the pointed-to value in bytes.\n ///\n-/// This is usually the same as `size_of::<T>()`. However, when `T` *has* no\n+/// This is usually the same as [`size_of::<T>()`]. However, when `T` *has* no\n /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n /// then `size_of_val` can be used to get the dynamically-known size.\n ///\n@@ -328,6 +332,8 @@ pub const fn size_of<T>() -> usize {\n /// let y: &[u8] = &x;\n /// assert_eq!(13, mem::size_of_val(y));\n /// ```\n+///\n+/// [`size_of::<T>()`]: size_of\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -340,7 +346,7 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n \n /// Returns the size of the pointed-to value in bytes.\n ///\n-/// This is usually the same as `size_of::<T>()`. However, when `T` *has* no\n+/// This is usually the same as [`size_of::<T>()`]. However, when `T` *has* no\n /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n /// then `size_of_val_raw` can be used to get the dynamically-known size.\n ///\n@@ -363,6 +369,7 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n ///       [`size_of_val`] on a reference to a type with an extern type tail.\n ///     - otherwise, it is conservatively not allowed to call this function.\n ///\n+/// [`size_of::<T>()`]: size_of\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n ///"}]}