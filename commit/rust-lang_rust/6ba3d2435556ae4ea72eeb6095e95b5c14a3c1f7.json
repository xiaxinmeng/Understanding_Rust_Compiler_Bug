{"sha": "6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYTNkMjQzNTU1NmFlNGVhNzJlZWI2MDk1ZTk1YjVjMTRhM2MxZjc=", "commit": {"author": {"name": "Paul Woolcock", "email": "pwoolcoc+github@gmail.com", "date": "2012-01-30T16:40:54Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-30T17:21:19Z"}, "message": "Remove ternary operator\n\n`expr_ternary`, `ternary_to_if`, and all parses & lexer definitions have\nbeen removed.", "tree": {"sha": "31aa2e040ad356b1d6c2dc34dadbd4970d39eaea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31aa2e040ad356b1d6c2dc34dadbd4970d39eaea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "html_url": "https://github.com/rust-lang/rust/commit/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/comments", "author": null, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a02493b96919bae8c27a2508a08709dbabdfc744", "url": "https://api.github.com/repos/rust-lang/rust/commits/a02493b96919bae8c27a2508a08709dbabdfc744", "html_url": "https://github.com/rust-lang/rust/commit/a02493b96919bae8c27a2508a08709dbabdfc744"}], "stats": {"total": 87, "additions": 5, "deletions": 82}, "files": [{"sha": "1c36bfee610e9d5d118b12e6be8a4093990538fd", "filename": "doc/tutorial.md", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -473,13 +473,6 @@ The comparison operators are the traditional `==`, `!=`, `<`, `>`,\n `<=`, and `>=`. Short-circuiting (lazy) boolean operators are written\n `&&` (and) and `||` (or).\n \n-Rust has a ternary conditional operator `?:`, as in:\n-\n-~~~~\n-let badness = 12;\n-let message = badness < 10 ? \"error\" : \"FATAL ERROR\";\n-~~~~\n-\n For type casting, Rust uses the binary `as` operator, which has a\n precedence between the bitwise combination operators (`&`, `|`, `^`)\n and the comparison operators. It takes an expression on the left side,"}, {"sha": "9c3796a7e0195fe1bcf66abf87d31de154fb867a", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -188,7 +188,6 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n           none {}\n         }\n       }\n-      expr_ternary(_, a, b) { maybe_copy(cx, a); maybe_copy(cx, b); }\n       expr_fn(_, _, _, cap_clause) {\n         check_fn_cap_clause(cx, e.id, *cap_clause);\n       }"}, {"sha": "190e88deae674a56fba33db48cc8c9da8c5e7569", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -88,9 +88,6 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         v.visit_expr(coll, cx, v);\n         visit_block(loop, cx) {|| visit::visit_block(blk, cx, v);}\n       }\n-      expr_ternary(_, _, _) {\n-        v.visit_expr(ast_util::ternary_to_if(ex), cx, v);\n-      }\n       expr_alt(input, arms) {\n         v.visit_expr(input, cx, v);\n         let before = cx.current, sets = [];"}, {"sha": "a0439f10fae22c1148fb63f496a6f275d5d2ef29", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -3478,9 +3478,6 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n       ast::expr_if(cond, thn, els) | ast::expr_if_check(cond, thn, els) {\n         ret trans_if(bcx, cond, thn, els, dest);\n       }\n-      ast::expr_ternary(_, _, _) {\n-        ret trans_expr(bcx, ast_util::ternary_to_if(e), dest);\n-      }\n       ast::expr_alt(expr, arms) {\n           //          tcx.sess.span_note(e.span, \"about to call trans_alt\");\n         ret alt::trans_alt(bcx, expr, arms, dest);"}, {"sha": "987bbb4d81d14b8330c0bbd9bda4fdb0b30d5ac4", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -415,7 +415,6 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n       expr_if(antec, conseq, maybe_alt) {\n         join_then_else(fcx, antec, conseq, maybe_alt, e.id, plain_if);\n       }\n-      expr_ternary(_, _, _) { find_pre_post_expr(fcx, ternary_to_if(e)); }\n       expr_binary(bop, l, r) {\n         if lazy_binop(bop) {\n             find_pre_post_expr(fcx, l);"}, {"sha": "a125c00d63bffb458c1e9a1fbae143a44b268329", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -466,9 +466,6 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         ret join_then_else(fcx, antec, conseq, maybe_alt, e.id, plain_if,\n                            pres);\n       }\n-      expr_ternary(_, _, _) {\n-        ret find_pre_post_state_expr(fcx, pres, ternary_to_if(e));\n-      }\n       expr_binary(bop, l, r) {\n         if lazy_binop(bop) {\n             let changed = find_pre_post_state_expr(fcx, pres, l);"}, {"sha": "de467009750391f232d8a46e9f14881b9a793501", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -1921,9 +1921,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             check_pred_expr(fcx, cond) |\n                 check_then_else(fcx, thn, elsopt, id, expr.span);\n       }\n-      ast::expr_ternary(_, _, _) {\n-        bot = check_expr(fcx, ast_util::ternary_to_if(expr));\n-      }\n       ast::expr_assert(e) {\n         bot = check_expr_with(fcx, e, ty::mk_bool(tcx));\n         write_nil(tcx, id);"}, {"sha": "ee93a3e0e2958e57bd6a4963a08e5b1b7e62a94e", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -213,7 +213,6 @@ enum expr_ {\n     expr_lit(@lit),\n     expr_cast(@expr, @ty),\n     expr_if(@expr, blk, option::t<@expr>),\n-    expr_ternary(@expr, @expr, @expr),\n     expr_while(@expr, blk),\n     expr_for(@local, @expr, blk),\n     expr_do_while(blk, @expr),"}, {"sha": "68b157cecb8da2fbd1559481a433ac4ad9ab2be0", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -205,23 +205,6 @@ fn default_block(stmts1: [@stmt], expr1: option::t<@expr>, id1: node_id) ->\n     {view_items: [], stmts: stmts1, expr: expr1, id: id1, rules: default_blk}\n }\n \n-// This is a convenience function to transfor ternary expressions to if\n-// expressions so that they can be treated the same\n-fn ternary_to_if(e: @expr) -> @expr {\n-    alt e.node {\n-      expr_ternary(cond, then, els) {\n-        let then_blk = block_from_expr(then);\n-        let els_blk = block_from_expr(els);\n-        let els_expr =\n-            @{id: els.id, node: expr_block(els_blk), span: els.span};\n-        ret @{id: e.id,\n-              node: expr_if(cond, then_blk, option::some(els_expr)),\n-              span: e.span};\n-      }\n-      _ { fail; }\n-    }\n-}\n-\n // FIXME this doesn't handle big integer/float literals correctly (nor does\n // the rest of our literal handling)\n enum const_val {"}, {"sha": "a6e10d183c36f88083f6e3b4ffdd48e3385ac212", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -352,10 +352,6 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n             expr_if(fld.fold_expr(cond), fld.fold_block(tr),\n                     option::map(fl, fld.fold_expr))\n           }\n-          expr_ternary(cond, tr, fl) {\n-            expr_ternary(fld.fold_expr(cond), fld.fold_expr(tr),\n-                         fld.fold_expr(fl))\n-          }\n           expr_while(cond, body) {\n             expr_while(fld.fold_expr(cond), fld.fold_block(body))\n           }"}, {"sha": "ae31f1b3434ea9378652e6062277c6bec7b8b580", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -328,10 +328,6 @@ fn next_token_inner(rdr: reader) -> token::token {\n \n \n       // One-byte tokens.\n-      '?' {\n-        rdr.bump();\n-        ret token::QUES;\n-      }\n       ';' { rdr.bump(); ret token::SEMI; }\n       ',' { rdr.bump(); ret token::COMMA; }\n       '.' {"}, {"sha": "272d65707ddc395d8b5b681d2a3bf2ae15f309b6", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -1097,18 +1097,6 @@ fn parse_prefix_expr(p: parser) -> pexpr {\n     ret mk_pexpr(p, lo, hi, ex);\n }\n \n-fn parse_ternary(p: parser) -> @ast::expr {\n-    let cond_expr = parse_binops(p);\n-    if p.token == token::QUES {\n-        p.bump();\n-        let then_expr = parse_expr(p);\n-        expect(p, token::COLON);\n-        let else_expr = parse_expr(p);\n-        ret mk_expr(p, cond_expr.span.lo, else_expr.span.hi,\n-                    ast::expr_ternary(cond_expr, then_expr, else_expr));\n-    } else { ret cond_expr; }\n-}\n-\n type op_spec = {tok: token::token, op: ast::binop, prec: int};\n \n \n@@ -1143,7 +1131,6 @@ fn parse_binops(p: parser) -> @ast::expr {\n const unop_prec: int = 100;\n \n const as_prec: int = 5;\n-const ternary_prec: int = 0;\n \n fn parse_more_binops(p: parser, plhs: pexpr, min_prec: int) ->\n    @ast::expr {\n@@ -1174,7 +1161,7 @@ fn parse_more_binops(p: parser, plhs: pexpr, min_prec: int) ->\n \n fn parse_assign_expr(p: parser) -> @ast::expr {\n     let lo = p.span.lo;\n-    let lhs = parse_ternary(p);\n+    let lhs = parse_binops(p);\n     alt p.token {\n       token::EQ {\n         p.bump();"}, {"sha": "3b38f314ecf33010ce5532da11438d0f6e853c57", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -43,7 +43,6 @@ enum token {\n     SEMI,\n     COLON,\n     MOD_SEP,\n-    QUES,\n     RARROW,\n     LARROW,\n     DARROW,\n@@ -114,7 +113,6 @@ fn to_str(r: reader, t: token) -> str {\n       SEMI { ret \";\"; }\n       COLON { ret \":\"; }\n       MOD_SEP { ret \"::\"; }\n-      QUES { ret \"?\"; }\n       RARROW { ret \"->\"; }\n       LARROW { ret \"<-\"; }\n       DARROW { ret \"<->\"; }"}, {"sha": "94095b6ab4012ede511ed475d57646ebf1abe9fa", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -855,15 +855,6 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n       ast::expr_if_check(test, blk, elseopt) {\n         print_if(s, test, blk, elseopt, true);\n       }\n-      ast::expr_ternary(test, then, els) {\n-        print_expr(s, test);\n-        space(s.s);\n-        word_space(s, \"?\");\n-        print_expr(s, then);\n-        space(s.s);\n-        word_space(s, \":\");\n-        print_expr(s, els);\n-      }\n       ast::expr_while(test, blk) {\n         head(s, \"while\");\n         print_maybe_parens_discrim(s, test);\n@@ -1044,8 +1035,8 @@ fn print_expr_parens_if_not_bot(s: ps, ex: @ast::expr) {\n     let parens = alt ex.node {\n       ast::expr_fail(_) | ast::expr_ret(_) |\n       ast::expr_binary(_, _, _) | ast::expr_unary(_, _) |\n-      ast::expr_ternary(_, _, _) | ast::expr_move(_, _) |\n-      ast::expr_copy(_) | ast::expr_assign(_, _) | ast::expr_be(_) |\n+      ast::expr_move(_, _) | ast::expr_copy(_) |\n+      ast::expr_assign(_, _) | ast::expr_be(_) |\n       ast::expr_assign_op(_, _, _) | ast::expr_swap(_, _) |\n       ast::expr_log(_, _, _) | ast::expr_assert(_) |\n       ast::expr_call(_, _, true) |\n@@ -1395,7 +1386,6 @@ fn need_parens(expr: @ast::expr, outer_prec: int) -> bool {\n     alt expr.node {\n       ast::expr_binary(op, _, _) { operator_prec(op) < outer_prec }\n       ast::expr_cast(_, _) { parse::parser::as_prec < outer_prec }\n-      ast::expr_ternary(_, _, _) { parse::parser::ternary_prec < outer_prec }\n       // This may be too conservative in some cases\n       ast::expr_assign(_, _) { true }\n       ast::expr_move(_, _) { true }\n@@ -1757,8 +1747,8 @@ fn ends_in_lit_int(ex: @ast::expr) -> bool {\n     alt ex.node {\n       ast::expr_lit(@{node: ast::lit_int(_, ast::ty_i), _}) { true }\n       ast::expr_binary(_, _, sub) | ast::expr_unary(_, sub) |\n-      ast::expr_ternary(_, _, sub) | ast::expr_move(_, sub) |\n-      ast::expr_copy(sub) | ast::expr_assign(_, sub) | ast::expr_be(sub) |\n+      ast::expr_move(_, sub) | ast::expr_copy(sub) |\n+      ast::expr_assign(_, sub) | ast::expr_be(sub) |\n       ast::expr_assign_op(_, _, sub) | ast::expr_swap(_, sub) |\n       ast::expr_log(_, _, sub) | ast::expr_assert(sub) |\n       ast::expr_check(_, sub) { ends_in_lit_int(sub) }"}, {"sha": "1fb6991256e1013d0c947a01d23dc1de7c5e0a3c", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=6ba3d2435556ae4ea72eeb6095e95b5c14a3c1f7", "patch": "@@ -312,11 +312,6 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         v.visit_block(b, e, v);\n         visit_expr_opt(eo, e, v);\n       }\n-      expr_ternary(c, t, el) {\n-        v.visit_expr(c, e, v);\n-        v.visit_expr(t, e, v);\n-        v.visit_expr(el, e, v);\n-      }\n       expr_while(x, b) { v.visit_expr(x, e, v); v.visit_block(b, e, v); }\n       expr_for(dcl, x, b) {\n         v.visit_local(dcl, e, v);"}]}