{"sha": "8b24a96e1734d4fc028dfeebf5b13760790a9ac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMjRhOTZlMTczNGQ0ZmMwMjhkZmVlYmY1YjEzNzYwNzkwYTlhYzQ=", "commit": {"author": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-06-01T08:27:30Z"}, "committer": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-06-01T08:30:22Z"}, "message": "compiletest: runtest.rs cleanup", "tree": {"sha": "4066abb81e3cc378711c7482b47c4261731b3b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4066abb81e3cc378711c7482b47c4261731b3b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b24a96e1734d4fc028dfeebf5b13760790a9ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b24a96e1734d4fc028dfeebf5b13760790a9ac4", "html_url": "https://github.com/rust-lang/rust/commit/8b24a96e1734d4fc028dfeebf5b13760790a9ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b24a96e1734d4fc028dfeebf5b13760790a9ac4/comments", "author": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c28c495414d8d5bec83ca4c7e2781c1a7cc8d489", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28c495414d8d5bec83ca4c7e2781c1a7cc8d489", "html_url": "https://github.com/rust-lang/rust/commit/c28c495414d8d5bec83ca4c7e2781c1a7cc8d489"}], "stats": {"total": 145, "additions": 30, "deletions": 115}, "files": [{"sha": "8ae4f7c37931f2759365077be4fd31814cd4ecff", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 30, "deletions": 115, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/8b24a96e1734d4fc028dfeebf5b13760790a9ac4/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b24a96e1734d4fc028dfeebf5b13760790a9ac4/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=8b24a96e1734d4fc028dfeebf5b13760790a9ac4", "patch": "@@ -755,147 +755,62 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n \n     logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n \n-   \n     let mut runargs = ~[];\n-    let mut exitcode : int = 1;\n-    let mut maxtry = 10;\n-\n-    // sometimes code generates exit code 1 which is \"1 : General unknown error\"\n-    // in this case, force to retry\n-//    while exitcode == 1 && maxtry > 0 {\n-        // since adb shell doesnot forward internal result (exit code) and \n-        // distingush stderr and stdout, adb_run_wrapper is used\n-\n-        runargs.push(~\"shell\");\n-        runargs.push(fmt!(\"%s/adb_run_wrapper.sh\", config.adb_test_dir));\n-        runargs.push(fmt!(\"%s\", config.adb_test_dir));\n-        runargs.push(fmt!(\"%s\", prog_short));\n-\n-        for args.args.each |tv| {\n-            runargs.push(tv.to_owned());\n-        }\n-\n-        procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")], Some(~\"\"));\n \n-        // get exitcode of result\n-        runargs = ~[];\n+    // run test via adb_run_wrapper\n+    runargs.push(~\"shell\");\n+    runargs.push(fmt!(\"%s/adb_run_wrapper.sh\", config.adb_test_dir));\n+    runargs.push(fmt!(\"%s\", config.adb_test_dir));\n+    runargs.push(fmt!(\"%s\", prog_short));\n \n-        runargs.push(~\"shell\");\n-        runargs.push(~\"cat\");\n-        runargs.push(fmt!(\"%s/%s.exitcode\", config.adb_test_dir, prog_short));\n+    for args.args.each |tv| {\n+        runargs.push(tv.to_owned());\n+    }\n \n-        let procsrv::Result{ out: exitcode_out, err: exitcode_err, status: exitcode_status } =\n-            procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")],\n-                         Some(~\"\"));\n+    procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")], Some(~\"\"));\n \n-        exitcode = 0;\n-        for str::each_char(exitcode_out) |c| {\n-            if !char::is_digit(c) { break; }\n-            exitcode = exitcode * 10 + match c {\n-                '0' .. '9' => c as int - ('0' as int),\n-                _ => 0,\n-            }\n+    // get exitcode of result\n+    runargs = ~[];\n+    runargs.push(~\"shell\");\n+    runargs.push(~\"cat\");\n+    runargs.push(fmt!(\"%s/%s.exitcode\", config.adb_test_dir, prog_short));\n+\n+    let procsrv::Result{ out: exitcode_out, err: _, status: _ } =\n+        procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")],\n+                     Some(~\"\"));\n+\n+    let mut exitcode : int = 0;\n+    for str::each_char(exitcode_out) |c| {\n+        if !char::is_digit(c) { break; }\n+        exitcode = exitcode * 10 + match c {\n+            '0' .. '9' => c as int - ('0' as int),\n+            _ => 101,\n         }\n-//        maxtry = maxtry - 1;\n-//        unsafe { libc::sleep(1); }\n-//    }\n+    }\n \n     // get stdout of result\n     runargs = ~[]; \n     runargs.push(~\"shell\");\n     runargs.push(~\"cat\");\n     runargs.push(fmt!(\"%s/%s.stdout\", config.adb_test_dir, prog_short));\n \n-    let procsrv::Result{ out: stdout_out, err: stdout_err, status: stdout_status } =\n-            procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")],\n-                         Some(~\"\"));\n+    let procsrv::Result{ out: stdout_out, err: _, status: _ } =\n+        procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")], Some(~\"\"));\n \n     // get stderr of result\n     runargs = ~[]; \n     runargs.push(~\"shell\");\n     runargs.push(~\"cat\");\n     runargs.push(fmt!(\"%s/%s.stderr\", config.adb_test_dir, prog_short));\n \n-    let procsrv::Result{ out: stderr_out, err: stderr_err, status: stderr_status } =\n-            procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")],\n-                         Some(~\"\"));\n+    let procsrv::Result{ out: stderr_out, err: _, status: _ } =\n+        procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")], Some(~\"\"));\n \n     dump_output(config, testfile, stdout_out, stderr_out);\n \n     ProcRes {status: exitcode, stdout: stdout_out, stderr: stderr_out, cmdline: cmdline }\n }\n \n-fn _arm_exec_compiled_test2(config: &config, props: &TestProps,\n-                      testfile: &Path) -> ProcRes {\n-\n-    let args = make_run_args(config, props, testfile);\n-    let cmdline = make_cmdline(\"\", args.prog, args.args);\n-\n-    // get bare program string\n-    let mut tvec = ~[];\n-    for str::each_split_char(args.prog, '/') |ts| { tvec.push(ts.to_owned()) }\n-    let prog_short = tvec.pop();\n-\n-    // copy to target\n-    let copy_result = procsrv::run(\"\", config.adb_path,\n-        [~\"push\", copy args.prog, copy config.adb_test_dir],\n-        ~[(~\"\",~\"\")], Some(~\"\"));\n-\n-    if config.verbose {\n-        io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n-            config.target, args.prog,\n-            copy_result.out, copy_result.err));\n-    }\n-\n-    // execute program\n-    logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n-\n-    // adb shell dose not forward stdout and stderr of internal result\n-    // to stdout and stderr separately but to stdout only\n-    let mut newargs_out = ~[];\n-    let mut newargs_err = ~[];\n-    newargs_out.push(~\"shell\");\n-    newargs_err.push(~\"shell\");\n-\n-    let mut newcmd_out = ~\"\";\n-    let mut newcmd_err = ~\"\";\n-\n-    newcmd_out.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n-        config.adb_test_dir, config.adb_test_dir, prog_short));\n-\n-    newcmd_err.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n-        config.adb_test_dir, config.adb_test_dir, prog_short));\n-\n-    for args.args.each |tv| {\n-        newcmd_out.push_str(\" \");\n-        newcmd_err.push_str(\" \");\n-        newcmd_out.push_str(*tv);\n-        newcmd_err.push_str(*tv);\n-    }\n-\n-    newcmd_out.push_str(\" 2>/dev/null\");\n-    newcmd_err.push_str(\" 1>/dev/null\");\n-\n-    newargs_out.push(newcmd_out);\n-    newargs_err.push(newcmd_err);\n-\n-    let procsrv::Result{ out: out_out, err: _out_err, status: out_status } =\n-            procsrv::run(\"\", config.adb_path, newargs_out, ~[(~\"\",~\"\")],\n-                         Some(~\"\"));\n-    let procsrv::Result{ out: err_out, err: _err_err, status: _err_status } =\n-            procsrv::run(\"\", config.adb_path, newargs_err, ~[(~\"\",~\"\")],\n-                         Some(~\"\"));\n-\n-    dump_output(config, testfile, out_out, err_out);\n-\n-    match err_out {\n-        ~\"\" => ProcRes {status: out_status, stdout: out_out,\n-            stderr: err_out, cmdline: cmdline },\n-        _   => ProcRes {status: 101, stdout: out_out,\n-            stderr: err_out, cmdline: cmdline }\n-    }\n-}\n-\n fn _dummy_exec_compiled_test(config: &config, props: &TestProps,\n                       testfile: &Path) -> ProcRes {\n "}]}