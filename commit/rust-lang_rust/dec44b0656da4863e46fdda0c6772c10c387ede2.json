{"sha": "dec44b0656da4863e46fdda0c6772c10c387ede2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzQ0YjA2NTZkYTQ4NjNlNDZmZGRhMGM2NzcyYzEwYzM4N2VkZTI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-17T15:52:05Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:24:36Z"}, "message": "Resolve rebase errors", "tree": {"sha": "5b6613cfcdd50e3fe87cee65bb1dbf3ed3bebc87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b6613cfcdd50e3fe87cee65bb1dbf3ed3bebc87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec44b0656da4863e46fdda0c6772c10c387ede2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec44b0656da4863e46fdda0c6772c10c387ede2", "html_url": "https://github.com/rust-lang/rust/commit/dec44b0656da4863e46fdda0c6772c10c387ede2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec44b0656da4863e46fdda0c6772c10c387ede2/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "828b661ae0eea533d950ea4dcc7a1c931c5c35c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/828b661ae0eea533d950ea4dcc7a1c931c5c35c4", "html_url": "https://github.com/rust-lang/rust/commit/828b661ae0eea533d950ea4dcc7a1c931c5c35c4"}], "stats": {"total": 74, "additions": 36, "deletions": 38}, "files": [{"sha": "2f695b4f3bd298ae64b164490f2319ecb986e085", "filename": "src/Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dec44b0656da4863e46fdda0c6772c10c387ede2/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dec44b0656da4863e46fdda0c6772c10c387ede2/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=dec44b0656da4863e46fdda0c6772c10c387ede2", "patch": "@@ -137,8 +137,8 @@ dependencies = [\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -156,8 +156,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n- \"serde 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n "}, {"sha": "fdbc821de55accdd759fe9c8be49e7db60ccb81e", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dec44b0656da4863e46fdda0c6772c10c387ede2/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec44b0656da4863e46fdda0c6772c10c387ede2/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=dec44b0656da4863e46fdda0c6772c10c387ede2", "patch": "@@ -222,7 +222,7 @@ impl Step for Cargo {\n         _host: Interned<String>,\n         target: Interned<String>,\n     ) {\n-        builder.ensure(Cargotest {\n+        builder.ensure(Cargo {\n             stage: builder.top_stage,\n             host: target,\n         });\n@@ -233,81 +233,79 @@ impl Step for Cargo {\n         let build = builder.build;\n         let compiler = builder.compiler(self.stage, self.host);\n \n-        // Configure PATH to find the right rustc. NB. we have to use PATH\n-        // and not RUSTC because the Cargo test suite has tests that will\n-        // fail if rustc is not spelled `rustc`.\n-        let path = builder.sysroot(compiler).join(\"bin\");\n-        let old_path = env::var_os(\"PATH\").unwrap_or_default();\n-        let newpath = env::join_paths(\n-            iter::once(path).chain(env::split_paths(&old_path))\n-        ).expect(\"\");\n-\n         let mut cargo = builder.cargo(compiler, Mode::Tool, self.host, \"test\");\n         cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n         if !build.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n \n-        let compiler = &Compiler::new(stage, host);\n-\n-        let mut cargo = build.cargo(compiler, Mode::Tool, host, \"test\");\n-        cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n-        if !build.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-\n         // Don't build tests dynamically, just a pain to work with\n         cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n \n         // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n         // available.\n         cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n \n-        try_run(build, cargo.env(\"PATH\", &path_for_cargo(build, compiler)));\n+        try_run(build, cargo.env(\"PATH\", &path_for_cargo(builder, compiler)));\n     }\n }\n \n-#[derive(Serialize)]\n-pub struct Rls<'a> {\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Rls {\n     stage: u32,\n-    host: &'a str,\n+    host: Interned<String>,\n }\n \n-impl<'a> Step<'a> for Rls<'a> {\n+//    rules.test(\"check-rls\", \"src/tools/rls\")\n+//         .dep(|s| s.name(\"tool-rls\"))\n+//         .host(true)\n+//         .run(move |s| check::rls(build, s.stage, s.target));\n+impl Step for Rls {\n     type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(_builder: &Builder, path: &Path) -> bool {\n+        path.ends_with(\"src/tools/rls\")\n+    }\n+\n+    fn make_run(\n+        builder: &Builder,\n+        _path: Option<&Path>,\n+        _host: Interned<String>,\n+        target: Interned<String>,\n+    ) {\n+        builder.ensure(Rls {\n+            stage: builder.top_stage,\n+            host: target,\n+        });\n+    }\n \n     /// Runs `cargo test` for the rls.\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n         let stage = self.stage;\n         let host = self.host;\n-        let compiler = &Compiler::new(stage, host);\n+        let compiler = builder.compiler(stage, host);\n \n-        let mut cargo = build.cargo(compiler, Mode::Tool, host, \"test\");\n+        let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n         cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/rls/Cargo.toml\"));\n \n         // Don't build tests dynamically, just a pain to work with\n         cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n \n-        build.add_rustc_lib_path(compiler, &mut cargo);\n+        builder.add_rustc_lib_path(compiler, &mut cargo);\n \n         try_run(build, &mut cargo);\n     }\n }\n \n-fn path_for_cargo(build: &Build, compiler: &Compiler) -> OsString {\n+fn path_for_cargo(builder: &Builder, compiler: Compiler) -> OsString {\n     // Configure PATH to find the right rustc. NB. we have to use PATH\n     // and not RUSTC because the Cargo test suite has tests that will\n     // fail if rustc is not spelled `rustc`.\n-    let path = build.sysroot(compiler).join(\"bin\");\n+    let path = builder.sysroot(compiler).join(\"bin\");\n     let old_path = env::var_os(\"PATH\").unwrap_or_default();\n     env::join_paths(iter::once(path).chain(env::split_paths(&old_path))).expect(\"\")\n-||||||| parent of adabe3889e... Move code into Step trait implementations.\n-    try_run(build, cargo.env(\"PATH\", newpath));\n-=======\n-        try_run(build, cargo.env(\"PATH\", newpath));\n-    }\n->>>>>>> adabe3889e... Move code into Step trait implementations.\n }\n \n //rules.test(\"check-tidy\", \"src/tools/tidy\")"}]}