{"sha": "3109c931b495f72fb9758bef15d38aeedc354ca1", "node_id": "C_kwDOAAsO6NoAKDMxMDljOTMxYjQ5NWY3MmZiOTc1OGJlZjE1ZDM4YWVlZGMzNTRjYTE", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-27T02:02:07Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-04-04T21:06:35Z"}, "message": "Refer to the TraitRef::identity in the message to be clearer", "tree": {"sha": "105b07d3e51519c4cba267b7fa7e0bfe640d5835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/105b07d3e51519c4cba267b7fa7e0bfe640d5835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3109c931b495f72fb9758bef15d38aeedc354ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3109c931b495f72fb9758bef15d38aeedc354ca1", "html_url": "https://github.com/rust-lang/rust/commit/3109c931b495f72fb9758bef15d38aeedc354ca1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3109c931b495f72fb9758bef15d38aeedc354ca1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "html_url": "https://github.com/rust-lang/rust/commit/ef91519b45d2bbf0ce8c0180118160562eaaa0ca"}], "stats": {"total": 142, "additions": 71, "deletions": 71}, "files": [{"sha": "88a4b6ee06d3a17a9e27b8e6f87cc619c90add97", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -1763,13 +1763,12 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             if candidates.len() == 0 {\n                 return false;\n             }\n-            let trait_ref = candidates[0];\n             if candidates.len() == 1 {\n                 err.highlighted_help(vec![\n                     (\n                         format!(\n                             \"the trait `{}` is implemented for `\",\n-                            trait_ref.print_only_trait_path()\n+                            candidates[0].print_only_trait_path()\n                         ),\n                         Style::NoStyle,\n                     ),\n@@ -1778,6 +1777,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 ]);\n                 return true;\n             }\n+            let trait_ref = TraitRef::identity(self.tcx, candidates[0].def_id);\n             // Check if the trait is the same in all cases. If so, we'll only show the type.\n             // FIXME: there *has* to be a better way!\n             let mut traits: Vec<_> = candidates"}, {"sha": "21c490965b14740a4e3b5cd08bc093ca7fc37b98", "filename": "src/test/ui/binop/binop-mul-i32-f32.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -5,7 +5,7 @@ LL |     x * y\n    |       ^ no implementation for `i32 * f32`\n    |\n    = help: the trait `Mul<f32>` is not implemented for `i32`\n-   = help: the following other types implement trait `Mul`:\n+   = help: the following other types implement trait `Mul<Rhs>`:\n              <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>"}, {"sha": "38db66f86b46115c20d1e8e20a7b966888bf53ed", "filename": "src/test/ui/binop/shift-various-bad-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -5,7 +5,7 @@ LL |     22 >> p.char;\n    |        ^^ no implementation for `{integer} >> char`\n    |\n    = help: the trait `Shr<char>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `Shr`:\n+   = help: the following other types implement trait `Shr<Rhs>`:\n              <&'a i128 as Shr<i128>>\n              <&'a i128 as Shr<i16>>\n              <&'a i128 as Shr<i32>>\n@@ -23,7 +23,7 @@ LL |     22 >> p.str;\n    |        ^^ no implementation for `{integer} >> &str`\n    |\n    = help: the trait `Shr<&str>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `Shr`:\n+   = help: the following other types implement trait `Shr<Rhs>`:\n              <&'a i128 as Shr<i128>>\n              <&'a i128 as Shr<i16>>\n              <&'a i128 as Shr<i32>>\n@@ -41,7 +41,7 @@ LL |     22 >> p;\n    |        ^^ no implementation for `{integer} >> &Panolpy`\n    |\n    = help: the trait `Shr<&Panolpy>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `Shr`:\n+   = help: the following other types implement trait `Shr<Rhs>`:\n              <&'a i128 as Shr<i128>>\n              <&'a i128 as Shr<i16>>\n              <&'a i128 as Shr<i32>>"}, {"sha": "1fb6b38e4a68fb7f3e4346c5768a83fc4f6bc1bb", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -25,7 +25,7 @@ error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n    |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n    |\n-   = help: the following other types implement trait `Traitor<N, 2_u8>`:\n+   = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>\n              <u64 as Traitor<1_u8, 2_u8>>\n \n@@ -50,7 +50,7 @@ error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n LL | fn owo() -> impl Traitor {\n    |             ^^^^^^^^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n    |\n-   = help: the following other types implement trait `Traitor<N, 2_u8>`:\n+   = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>\n              <u64 as Traitor<1_u8, 2_u8>>\n "}, {"sha": "9c1b086f4da9ae8c9140ba295d93610ca4f3d16d", "filename": "src/test/ui/const-generics/exhaustive-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `(): Foo<N>` is not satisfied\n LL |     <() as Foo<N>>::test()\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `Foo<N>` is not implemented for `()`\n    |\n-   = help: the following other types implement trait `Foo<0_u8>`:\n+   = help: the following other types implement trait `Foo<N>`:\n              <() as Foo<0_u8>>\n              <() as Foo<100_u8>>\n              <() as Foo<101_u8>>"}, {"sha": "0e6be6d01ed69f3883a7725098d501a94b86d09f", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -11,7 +11,7 @@ LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                    ^ no implementation for `i8 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i8`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "4fa017e04e97b1c098549265ddaaac8756399ba2", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -11,7 +11,7 @@ LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                            ^ no implementation for `i8 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i8`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "8de61fcfb7330cc36fc1039076f90bdb18278435", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -21,7 +21,7 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |                              ^^ no implementation for `[{integer}; _] == [{integer}; 0]`\n    |\n    = help: the trait `PartialEq<[{integer}; 0]>` is not implemented for `[{integer}; _]`\n-   = help: the following other types implement trait `PartialEq<[B; N]>`:\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n              <&[B] as PartialEq<[A; N]>>\n              <&[T] as PartialEq<Vec<U, A>>>\n              <&mut [B] as PartialEq<[A; N]>>"}, {"sha": "26764bc0ee5cca431355fc6856b5780d298de731", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n LL |     f1.foo(1usize);\n    |        ^^^ the trait `Foo<usize>` is not implemented for `Bar`\n    |\n-   = help: the following other types implement trait `Foo<i32>`:\n+   = help: the following other types implement trait `Foo<A>`:\n              <Bar as Foo<i32>>\n              <Bar as Foo<u8>>\n "}, {"sha": "bb175367e1f9e0772ad8d07bfe4520285a1a3733", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n LL |     f1.foo(1usize);\n    |        ^^^ the trait `Foo<usize>` is not implemented for `Bar`\n    |\n-   = help: the following other types implement trait `Foo<i8>`:\n+   = help: the following other types implement trait `Foo<A>`:\n              <Bar as Foo<i16>>\n              <Bar as Foo<i32>>\n              <Bar as Foo<i8>>"}, {"sha": "d27b05fe7f7df721b5a41733fc2f7cbf6e49ec87", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -6,7 +6,7 @@ LL |     Foo::<i32>::bar(&1i8);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following other types implement trait `Foo<bool>`:\n+   = help: the following other types implement trait `Foo<B>`:\n              <i8 as Foo<bool>>\n              <i8 as Foo<u16>>\n              <i8 as Foo<u32>>\n@@ -25,7 +25,7 @@ LL |     Foo::<i32>::bar(&1u8);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following other types implement trait `Foo<bool>`:\n+   = help: the following other types implement trait `Foo<B>`:\n              <i8 as Foo<bool>>\n              <i8 as Foo<u16>>\n              <i8 as Foo<u32>>\n@@ -44,7 +44,7 @@ LL |     Foo::<i32>::bar(&true);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following other types implement trait `Foo<bool>`:\n+   = help: the following other types implement trait `Foo<B>`:\n              <bool as Foo<bool>>\n              <bool as Foo<i8>>\n              <bool as Foo<u16>>"}, {"sha": "26986684f0c0a0a2d19f5df67e1b528b6957f532", "filename": "src/test/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -22,7 +22,7 @@ LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\n    |                                                     ^ no implementation for `{float} - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `{float}`\n-   = help: the following other types implement trait `Sub`:\n+   = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>"}, {"sha": "f14b447b077300d58756493fece8e5223610e492", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -24,7 +24,7 @@ LL |         n + sum_to(n - 1)\n    |           ^ no implementation for `u32 + impl Foo`\n    |\n    = help: the trait `Add<impl Foo>` is not implemented for `u32`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "161fce4b0315c9dc8ad998ea636bcc66c6ff40e2", "filename": "src/test/ui/issues/issue-11771.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -5,7 +5,7 @@ LL |     1 +\n    |       ^ no implementation for `{integer} + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n@@ -23,7 +23,7 @@ LL |     1 +\n    |       ^ no implementation for `{integer} + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "118f37f6971eff4856d69a966797b6d169059f67", "filename": "src/test/ui/issues/issue-24352.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -5,7 +5,7 @@ LL |     1.0f64 - 1\n    |            ^ no implementation for `f64 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n-   = help: the following other types implement trait `Sub`:\n+   = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>"}, {"sha": "3d527eb6b4e4a56ec09a7536af60d3cf364bda5b", "filename": "src/test/ui/issues/issue-50582.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -14,7 +14,7 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    |                  ^ no implementation for `{integer} + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "afef0cb603485712c74f5c556b68508b2ecd3da9", "filename": "src/test/ui/lexer/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -38,7 +38,7 @@ LL |     if x == y {}\n    |          ^^ no implementation for `&str == char`\n    |\n    = help: the trait `PartialEq<char>` is not implemented for `&str`\n-   = help: the following other types implement trait `PartialEq<Cow<'a, str>>`:\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n              <&'a str as PartialEq<OsString>>\n              <&'a str as PartialEq<String>>\n              <&'b str as PartialEq<Cow<'a, str>>>\n@@ -64,7 +64,7 @@ LL |     if x == z {}\n    |          ^^ no implementation for `&str == char`\n    |\n    = help: the trait `PartialEq<char>` is not implemented for `&str`\n-   = help: the following other types implement trait `PartialEq<Cow<'a, str>>`:\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n              <&'a str as PartialEq<OsString>>\n              <&'a str as PartialEq<String>>\n              <&'b str as PartialEq<Cow<'a, str>>>"}, {"sha": "3de652d87ec543e27b11ffc2fb7a8e0b35667d0b", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -5,7 +5,7 @@ LL |     1 + Some(1);\n    |       ^ no implementation for `{integer} + Option<{integer}>`\n    |\n    = help: the trait `Add<Option<{integer}>>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n@@ -23,7 +23,7 @@ LL |     2 as usize - Some(1);\n    |                ^ no implementation for `usize - Option<{integer}>`\n    |\n    = help: the trait `Sub<Option<{integer}>>` is not implemented for `usize`\n-   = help: the following other types implement trait `Sub`:\n+   = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n@@ -41,7 +41,7 @@ LL |     3 * ();\n    |       ^ no implementation for `{integer} * ()`\n    |\n    = help: the trait `Mul<()>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `Mul`:\n+   = help: the following other types implement trait `Mul<Rhs>`:\n              <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n@@ -59,7 +59,7 @@ LL |     4 / \"\";\n    |       ^ no implementation for `{integer} / &str`\n    |\n    = help: the trait `Div<&str>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `Div`:\n+   = help: the following other types implement trait `Div<Rhs>`:\n              <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n@@ -77,7 +77,7 @@ LL |     5 < String::new();\n    |       ^ no implementation for `{integer} < String` and `{integer} > String`\n    |\n    = help: the trait `PartialOrd<String>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `PartialOrd`:\n+   = help: the following other types implement trait `PartialOrd<Rhs>`:\n              f32\n              f64\n              i128\n@@ -95,7 +95,7 @@ LL |     6 == Ok(1);\n    |       ^^ no implementation for `{integer} == Result<{integer}, _>`\n    |\n    = help: the trait `PartialEq<Result<{integer}, _>>` is not implemented for `{integer}`\n-   = help: the following other types implement trait `PartialEq`:\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n              f32\n              f64\n              i128"}, {"sha": "fed780e68957f903a1ca1cb77e8308e627354620", "filename": "src/test/ui/never_type/issue-13352.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -5,7 +5,7 @@ LL |     2_usize + (loop {});\n    |             ^ no implementation for `usize + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `usize`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "6aa1ad8dd899f906dbcc5d85ae64b0f299b1b3c3", "filename": "src/test/ui/numbers-arithmetic/not-suggest-float-literal.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -5,7 +5,7 @@ LL |     x + 100.0\n    |       ^ no implementation for `u8 + {float}`\n    |\n    = help: the trait `Add<{float}>` is not implemented for `u8`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n@@ -23,7 +23,7 @@ LL |     x + \"foo\"\n    |       ^ no implementation for `f64 + &str`\n    |\n    = help: the trait `Add<&str>` is not implemented for `f64`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n@@ -41,7 +41,7 @@ LL |     x + y\n    |       ^ no implementation for `f64 + {integer}`\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f64`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n@@ -59,7 +59,7 @@ LL |     x - 100.0\n    |       ^ no implementation for `u8 - {float}`\n    |\n    = help: the trait `Sub<{float}>` is not implemented for `u8`\n-   = help: the following other types implement trait `Sub`:\n+   = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n@@ -77,7 +77,7 @@ LL |     x - \"foo\"\n    |       ^ no implementation for `f64 - &str`\n    |\n    = help: the trait `Sub<&str>` is not implemented for `f64`\n-   = help: the following other types implement trait `Sub`:\n+   = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n@@ -95,7 +95,7 @@ LL |     x - y\n    |       ^ no implementation for `f64 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n-   = help: the following other types implement trait `Sub`:\n+   = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n@@ -113,7 +113,7 @@ LL |     x * 100.0\n    |       ^ no implementation for `u8 * {float}`\n    |\n    = help: the trait `Mul<{float}>` is not implemented for `u8`\n-   = help: the following other types implement trait `Mul`:\n+   = help: the following other types implement trait `Mul<Rhs>`:\n              <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n@@ -131,7 +131,7 @@ LL |     x * \"foo\"\n    |       ^ no implementation for `f64 * &str`\n    |\n    = help: the trait `Mul<&str>` is not implemented for `f64`\n-   = help: the following other types implement trait `Mul`:\n+   = help: the following other types implement trait `Mul<Rhs>`:\n              <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n@@ -149,7 +149,7 @@ LL |     x * y\n    |       ^ no implementation for `f64 * {integer}`\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f64`\n-   = help: the following other types implement trait `Mul`:\n+   = help: the following other types implement trait `Mul<Rhs>`:\n              <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n@@ -167,7 +167,7 @@ LL |     x / 100.0\n    |       ^ no implementation for `u8 / {float}`\n    |\n    = help: the trait `Div<{float}>` is not implemented for `u8`\n-   = help: the following other types implement trait `Div`:\n+   = help: the following other types implement trait `Div<Rhs>`:\n              <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n@@ -185,7 +185,7 @@ LL |     x / \"foo\"\n    |       ^ no implementation for `f64 / &str`\n    |\n    = help: the trait `Div<&str>` is not implemented for `f64`\n-   = help: the following other types implement trait `Div`:\n+   = help: the following other types implement trait `Div<Rhs>`:\n              <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n@@ -203,7 +203,7 @@ LL |     x / y\n    |       ^ no implementation for `f64 / {integer}`\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f64`\n-   = help: the following other types implement trait `Div`:\n+   = help: the following other types implement trait `Div<Rhs>`:\n              <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>"}, {"sha": "988379e582a3476779d295890e952c1eca0c752a", "filename": "src/test/ui/numbers-arithmetic/suggest-float-literal.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -5,7 +5,7 @@ LL |     x + 100\n    |       ^ no implementation for `f32 + {integer}`\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f32`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n@@ -27,7 +27,7 @@ LL |     x + 100\n    |       ^ no implementation for `f64 + {integer}`\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f64`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n@@ -49,7 +49,7 @@ LL |     x - 100\n    |       ^ no implementation for `f32 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f32`\n-   = help: the following other types implement trait `Sub`:\n+   = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n@@ -71,7 +71,7 @@ LL |     x - 100\n    |       ^ no implementation for `f64 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n-   = help: the following other types implement trait `Sub`:\n+   = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n@@ -93,7 +93,7 @@ LL |     x * 100\n    |       ^ no implementation for `f32 * {integer}`\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f32`\n-   = help: the following other types implement trait `Mul`:\n+   = help: the following other types implement trait `Mul<Rhs>`:\n              <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n@@ -115,7 +115,7 @@ LL |     x * 100\n    |       ^ no implementation for `f64 * {integer}`\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f64`\n-   = help: the following other types implement trait `Mul`:\n+   = help: the following other types implement trait `Mul<Rhs>`:\n              <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n@@ -137,7 +137,7 @@ LL |     x / 100\n    |       ^ no implementation for `f32 / {integer}`\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f32`\n-   = help: the following other types implement trait `Div`:\n+   = help: the following other types implement trait `Div<Rhs>`:\n              <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n@@ -159,7 +159,7 @@ LL |     x / 100\n    |       ^ no implementation for `f64 / {integer}`\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f64`\n-   = help: the following other types implement trait `Div`:\n+   = help: the following other types implement trait `Div<Rhs>`:\n              <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>"}, {"sha": "06e1a222af88135cf3ea809c22ad22c2e73c2a86", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -7,7 +7,7 @@ LL |     Index::index(&[] as &[i32], 2u32);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Foo<usize>>`:\n+   = help: the following other types implement trait `Index<Idx>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n@@ -20,7 +20,7 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Foo<usize>>`:\n+   = help: the following other types implement trait `Index<Idx>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n@@ -33,7 +33,7 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Foo<usize>>`:\n+   = help: the following other types implement trait `Index<Idx>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n@@ -44,7 +44,7 @@ LL |     Index::index(&[] as &[i32], 2u32);\n    |     ^^^^^^^^^^^^ trait message\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Foo<usize>>`:\n+   = help: the following other types implement trait `Index<Idx>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n@@ -55,7 +55,7 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     ^^^^^^^^^^^^ on impl for Foo\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Foo<usize>>`:\n+   = help: the following other types implement trait `Index<Idx>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n@@ -66,7 +66,7 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     ^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Foo<usize>>`:\n+   = help: the following other types implement trait `Index<Idx>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n "}, {"sha": "ae7d2e1d8239330fd53b61f7f63a89b82366d4a6", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -15,7 +15,7 @@ LL |     x[..1i32];\n    |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `RangeTo<i32>`\n-   = help: the following other types implement trait `SliceIndex<str>`:\n+   = help: the following other types implement trait `SliceIndex<T>`:\n              <RangeTo<usize> as SliceIndex<[T]>>\n              <RangeTo<usize> as SliceIndex<str>>\n    = note: required because of the requirements on the impl of `Index<RangeTo<i32>>` for `[i32]`"}, {"sha": "c0d9a8634e487db79f1e17eadda101baae793f1a", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -5,7 +5,7 @@ LL |     foo(1 as u32 +\n    |                  ^ no implementation for `u32 + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `u32`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "8ae5c84794734d1d2adf00f8a7b1d3a54ed51937", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -7,7 +7,7 @@ LL |     foo(String::new());\n    |     required by a bound introduced by this call\n    |\n    = note: to coerce a `String` into a `&str`, use `&*` as a prefix\n-   = help: the following other types implement trait `From<char>`:\n+   = help: the following other types implement trait `From<T>`:\n              <String as From<&String>>\n              <String as From<&mut str>>\n              <String as From<&str>>"}, {"sha": "383f40d47fa44ebf04de0947723d6bd43397e724", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `&[i8]: From<&[u8]>` is not satisfied\n LL |     let _: &[i8] = data.into();\n    |                         ^^^^ the trait `From<&[u8]>` is not implemented for `&[i8]`\n    |\n-   = help: the following other types implement trait `From<Mask<T, LANES>>`:\n+   = help: the following other types implement trait `From<T>`:\n              <[T; LANES] as From<Simd<T, LANES>>>\n              <[bool; LANES] as From<Mask<T, LANES>>>\n    = note: required because of the requirements on the impl of `Into<&[i8]>` for `&[u8]`"}, {"sha": "cab0ccdf710da0c6af89c23b9d5ba1f08a0c36f7", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n    |\n-   = help: the following other types implement trait `CompareTo<i64>`:\n+   = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>\n              <i64 as CompareTo<u64>>\n \n@@ -25,7 +25,7 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n LL |     <dyn CompareToInts>::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n    |\n-   = help: the following other types implement trait `CompareTo<i64>`:\n+   = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>\n              <i64 as CompareTo<u64>>\n \n@@ -46,7 +46,7 @@ error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n LL |     assert_eq!(22_i64.same_as(22), true);\n    |                       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `i64`\n    |\n-   = help: the following other types implement trait `CompareTo<i64>`:\n+   = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>\n              <i64 as CompareTo<u64>>\n "}, {"sha": "1a4105231dc7501664eee87d446a7e2ac920c0bd", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -7,7 +7,7 @@ LL |     Ok(Err(123_i32)?)\n    |                    ^ the trait `From<i32>` is not implemented for `u8`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = help: the following other types implement trait `From<bool>`:\n+   = help: the following other types implement trait `From<T>`:\n              <f32 as From<i16>>\n              <f32 as From<i8>>\n              <f32 as From<u16>>"}, {"sha": "9a3fd2f4005f3115330dc5f7509953975b174b84", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n LL | fn foo() -> impl Foo<FooX> {\n    |             ^^^^^^^^^^^^^^ the trait `Foo<FooX>` is not implemented for `()`\n    |\n-   = help: the following other types implement trait `Foo<u32>`:\n+   = help: the following other types implement trait `Foo<A>`:\n              <() as Foo<()>>\n              <() as Foo<u32>>\n "}, {"sha": "f292877f30ea2a9d6f0dbcedf4ad608baec9f320", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -65,7 +65,7 @@ LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    |                                                                  ^^^^^^^ no implementation for `i32 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i32`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "9658288ac8b28df9abe531e7d20220a8bcd7708a", "filename": "src/test/ui/typeck/issue-81293.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -20,7 +20,7 @@ LL |     a = c + b * 5;\n    |           ^ no implementation for `usize + u16`\n    |\n    = help: the trait `Add<u16>` is not implemented for `usize`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "ab9a72edfe98df74e042af7a6c71f5cc3791b8de", "filename": "src/test/ui/typeck/issue-90101.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -6,7 +6,7 @@ LL |     func(Path::new(\"hello\").to_path_buf().to_string_lossy(), \"world\")\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following other types implement trait `From<Box<Path>>`:\n+   = help: the following other types implement trait `From<T>`:\n              <PathBuf as From<&T>>\n              <PathBuf as From<Box<Path>>>\n              <PathBuf as From<Cow<'a, Path>>>"}, {"sha": "74766d9fdd1b12559e50bda4cf02579761cddc48", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3109c931b495f72fb9758bef15d38aeedc354ca1/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=3109c931b495f72fb9758bef15d38aeedc354ca1", "patch": "@@ -5,7 +5,7 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n-   = help: the following other types implement trait `Add`:\n+   = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}]}