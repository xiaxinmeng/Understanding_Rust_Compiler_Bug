{"sha": "0c17893d498d30f8a86a97bbc1227852d5e926cd", "node_id": "C_kwDOAAsO6NoAKDBjMTc4OTNkNDk4ZDMwZjhhODZhOTdiYmMxMjI3ODUyZDVlOTI2Y2Q", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-25T14:35:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-25T14:35:52Z"}, "message": "Rename `TypedArenaChunk` as `ArenaChunk`.\n\nBecause it's used within both `TypedArena` and `DroplessArena`.\n\nThe commit also makes `<u8>` the default parameter.", "tree": {"sha": "1671cc26872f5b5487b881ce1a67a48024805b42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1671cc26872f5b5487b881ce1a67a48024805b42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c17893d498d30f8a86a97bbc1227852d5e926cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c17893d498d30f8a86a97bbc1227852d5e926cd", "html_url": "https://github.com/rust-lang/rust/commit/0c17893d498d30f8a86a97bbc1227852d5e926cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c17893d498d30f8a86a97bbc1227852d5e926cd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84322efad553c7a79c80189f2d1b9197c1aa005f", "url": "https://api.github.com/repos/rust-lang/rust/commits/84322efad553c7a79c80189f2d1b9197c1aa005f", "html_url": "https://github.com/rust-lang/rust/commit/84322efad553c7a79c80189f2d1b9197c1aa005f"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "fb93fa152ace88271ee04a5218c995728c72cfd0", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c17893d498d30f8a86a97bbc1227852d5e926cd/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c17893d498d30f8a86a97bbc1227852d5e926cd/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=0c17893d498d30f8a86a97bbc1227852d5e926cd", "patch": "@@ -45,24 +45,24 @@ pub struct TypedArena<T> {\n     end: Cell<*mut T>,\n \n     /// A vector of arena chunks.\n-    chunks: RefCell<Vec<TypedArenaChunk<T>>>,\n+    chunks: RefCell<Vec<ArenaChunk<T>>>,\n \n     /// Marker indicating that dropping the arena causes its owned\n     /// instances of `T` to be dropped.\n     _own: PhantomData<T>,\n }\n \n-struct TypedArenaChunk<T> {\n+struct ArenaChunk<T = u8> {\n     /// The raw storage for the arena chunk.\n     storage: Box<[MaybeUninit<T>]>,\n     /// The number of valid entries in the chunk.\n     entries: usize,\n }\n \n-impl<T> TypedArenaChunk<T> {\n+impl<T> ArenaChunk<T> {\n     #[inline]\n-    unsafe fn new(capacity: usize) -> TypedArenaChunk<T> {\n-        TypedArenaChunk { storage: Box::new_uninit_slice(capacity), entries: 0 }\n+    unsafe fn new(capacity: usize) -> ArenaChunk<T> {\n+        ArenaChunk { storage: Box::new_uninit_slice(capacity), entries: 0 }\n     }\n \n     /// Destroys this arena chunk.\n@@ -272,7 +272,7 @@ impl<T> TypedArena<T> {\n             // Also ensure that this chunk can fit `additional`.\n             new_cap = cmp::max(additional, new_cap);\n \n-            let mut chunk = TypedArenaChunk::<T>::new(new_cap);\n+            let mut chunk = ArenaChunk::<T>::new(new_cap);\n             self.ptr.set(chunk.start());\n             self.end.set(chunk.end());\n             chunks.push(chunk);\n@@ -281,7 +281,7 @@ impl<T> TypedArena<T> {\n \n     // Drops the contents of the last chunk. The last chunk is partially empty, unlike all other\n     // chunks.\n-    fn clear_last_chunk(&self, last_chunk: &mut TypedArenaChunk<T>) {\n+    fn clear_last_chunk(&self, last_chunk: &mut ArenaChunk<T>) {\n         // Determine how much was filled.\n         let start = last_chunk.start() as usize;\n         // We obtain the value of the pointer to the first uninitialized element.\n@@ -340,7 +340,7 @@ pub struct DroplessArena {\n     end: Cell<*mut u8>,\n \n     /// A vector of arena chunks.\n-    chunks: RefCell<Vec<TypedArenaChunk<u8>>>,\n+    chunks: RefCell<Vec<ArenaChunk>>,\n }\n \n unsafe impl Send for DroplessArena {}\n@@ -378,7 +378,7 @@ impl DroplessArena {\n             // Also ensure that this chunk can fit `additional`.\n             new_cap = cmp::max(additional, new_cap);\n \n-            let mut chunk = TypedArenaChunk::<u8>::new(new_cap);\n+            let mut chunk = ArenaChunk::new(new_cap);\n             self.start.set(chunk.start());\n             self.end.set(chunk.end());\n             chunks.push(chunk);"}]}