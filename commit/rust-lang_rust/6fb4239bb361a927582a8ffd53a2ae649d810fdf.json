{"sha": "6fb4239bb361a927582a8ffd53a2ae649d810fdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjQyMzliYjM2MWE5Mjc1ODJhOGZmZDUzYTJhZTY0OWQ4MTBmZGY=", "commit": {"author": {"name": "Nick Desaulniers", "email": "ndesaulniers@mozilla.com", "date": "2013-02-01T01:51:01Z"}, "committer": {"name": "Nick Desaulniers", "email": "ndesaulniers@mozilla.com", "date": "2013-02-01T06:25:12Z"}, "message": "Replace most invocations of fail keyword with die! macro", "tree": {"sha": "9d0d7284aa54be4b26fc21a38a270904c1159693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d0d7284aa54be4b26fc21a38a270904c1159693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb4239bb361a927582a8ffd53a2ae649d810fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb4239bb361a927582a8ffd53a2ae649d810fdf", "html_url": "https://github.com/rust-lang/rust/commit/6fb4239bb361a927582a8ffd53a2ae649d810fdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb4239bb361a927582a8ffd53a2ae649d810fdf/comments", "author": null, "committer": null, "parents": [{"sha": "adb9d0e8a13131ff3efab6dbb1878774588100fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/adb9d0e8a13131ff3efab6dbb1878774588100fd", "html_url": "https://github.com/rust-lang/rust/commit/adb9d0e8a13131ff3efab6dbb1878774588100fd"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "0f3e1e1fc7793697d71a329b41ebcaacfa966cfa", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -460,7 +460,7 @@ pub fn parse_source(name: ~str, j: &json::Json) -> @Source {\n         json::Object(j) => {\n             let mut url = match j.find(&~\"url\") {\n                 Some(&json::String(u)) => copy u,\n-                _ => fail ~\"needed 'url' field in source\"\n+                _ => die!(~\"needed 'url' field in source\")\n             };\n             let method = match j.find(&~\"method\") {\n                 Some(&json::String(u)) => copy u,"}, {"sha": "2fd7d71a7fc5d15c77fbf1703edf27b90768c550", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -179,7 +179,7 @@ impl<A> DVec<A> {\n             let mut data = cast::reinterpret_cast(&null::<()>());\n             data <-> self.data;\n             let data_ptr: *() = cast::reinterpret_cast(&data);\n-            if data_ptr.is_null() { fail ~\"Recursive use of dvec\"; }\n+            if data_ptr.is_null() { die!(~\"Recursive use of dvec\"); }\n             self.data = move ~[move t];\n             self.data.push_all_move(move data);\n         }"}, {"sha": "adb16a9290553191a1dc2d5ff7532ff8cc7e217e", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -386,7 +386,7 @@ pub mod linear {\n         pure fn get(&self, k: &K) -> &self/V {\n             match self.find(k) {\n                 Some(v) => v,\n-                None => fail fmt!(\"No entry found for key: %?\", k),\n+                None => die!(fmt!(\"No entry found for key: %?\", k)),\n             }\n         }\n     }"}, {"sha": "15d118a9a7f947fe3189fd1668f1ec78c904a7f1", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -1020,7 +1020,7 @@ impl<T:Owned,Tbuffer:Owned> SendPacketBuffered<T,Tbuffer> {\n             //forget(packet);\n             header\n           },\n-          None => fail ~\"packet already consumed\"\n+          None => die!(~\"packet already consumed\")\n         }\n     }\n "}, {"sha": "d276f0c6ea9e2250f4048d29710304e037548cf3", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -733,7 +733,7 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n         can_not_copy: None,\n         .. b0\n     };\n-    do b1.spawn { fail; }\n+    do b1.spawn { die!(); }\n     po.recv(); // We should get punted awake\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -760,7 +760,7 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n     let (po, _ch) = stream::<()>();\n     // Default options are to spawn linked & unsupervised.\n-    do spawn { fail; }\n+    do spawn { die!(); }\n     po.recv(); // We should get punted awake\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]"}, {"sha": "ce95cdd020500e9cd77dddfe4f4dabe07e54b5a6", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -646,25 +646,25 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n \n     fn new_task_in_sched(opts: SchedOpts) -> *rust_task {\n         if opts.foreign_stack_size != None {\n-            fail ~\"foreign_stack_size scheduler option unimplemented\";\n+            die!(~\"foreign_stack_size scheduler option unimplemented\");\n         }\n \n         let num_threads = match opts.mode {\n-          DefaultScheduler\n-          | CurrentScheduler\n-          | ExistingScheduler(*)\n-          | PlatformThread => 0u, /* Won't be used */\n-          SingleThreaded => 1u,\n-          ThreadPerCore => unsafe { rt::rust_num_threads() },\n-          ThreadPerTask => {\n-            fail ~\"ThreadPerTask scheduling mode unimplemented\"\n-          }\n-          ManualThreads(threads) => {\n-            if threads == 0u {\n-                fail ~\"can not create a scheduler with no threads\";\n+            DefaultScheduler\n+            | CurrentScheduler\n+            | ExistingScheduler(*)\n+            | PlatformThread => 0u, /* Won't be used */\n+            SingleThreaded => 1u,\n+            ThreadPerCore => unsafe { rt::rust_num_threads() },\n+            ThreadPerTask => {\n+                die!(~\"ThreadPerTask scheduling mode unimplemented\")\n+            }\n+            ManualThreads(threads) => {\n+                if threads == 0u {\n+                    die!(~\"can not create a scheduler with no threads\");\n+                }\n+                threads\n             }\n-            threads\n-          }\n         };\n \n         unsafe {"}, {"sha": "33879237ffb492a4868fc1e2cfb33150dbacfccc", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -886,7 +886,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                         encode_info_for_item(ecx, ebml_w, i,\n                                              index, *pt);\n                     }\n-                    _ => fail ~\"bad item\"\n+                    _ => die!(~\"bad item\")\n                 }\n             }\n         },\n@@ -901,7 +901,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                                                      abi);\n                     }\n                     // case for separate item and foreign-item tables\n-                    _ => fail ~\"bad foreign item\"\n+                    _ => die!(~\"bad foreign item\")\n                 }\n             }\n         },"}, {"sha": "5a5644fefb97a986e80808bb748d4f206a3032eb", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -265,7 +265,8 @@ pub fn trans_method_callee(bcx: block,\n                                mentry.explicit_self)\n         }\n         typeck::method_self(*) | typeck::method_super(*) => {\n-            fail ~\"method_self or method_super should have been handled above\"\n+            die!(~\"method_self or method_super should have been handled \\\n+                above\")\n         }\n     }\n }"}, {"sha": "db5ddfb9257708bdfdf8abc5d87a89e963d31daa", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -2868,7 +2868,8 @@ pub fn ty_region(ty: t) -> Region {\n       ty_rptr(r, _) => r,\n       ty_evec(_, vstore_slice(r)) => r,\n       ty_estr(vstore_slice(r)) => r,\n-      ref s => fail fmt!(\"ty_region() invoked on in appropriate ty: %?\", (*s))\n+      ref s => die!(fmt!(\"ty_region() invoked on in appropriate ty: %?\",\n+          (*s)))\n     }\n }\n "}, {"sha": "c3524e0740d84a566b87d6f48fd23de38402df39", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -1233,7 +1233,7 @@ pub impl LookupContext {\n         let span = if did.crate == ast::local_crate {\n             match self.tcx().items.find(did.node) {\n               Some(ast_map::node_method(m, _, _)) => m.span,\n-              _ => fail fmt!(\"report_static_candidate: bad item %?\", did)\n+              _ => die!(fmt!(\"report_static_candidate: bad item %?\", did))\n             }\n         } else {\n             self.expr.span"}, {"sha": "4abd1f18f388ed36ab09934ac72a1264e23be86f", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -118,7 +118,7 @@ fn parse_item_attrs<T:Owned>(\n         let attrs = match ctxt.ast_map.get(id) {\n           ast_map::node_item(item, _) => copy item.attrs,\n           ast_map::node_foreign_item(item, _, _) => copy item.attrs,\n-          _ => fail ~\"parse_item_attrs: not an item\"\n+          _ => die!(~\"parse_item_attrs: not an item\")\n         };\n         parse_attrs(attrs)\n     }\n@@ -182,9 +182,9 @@ fn fold_enum(\n                                 copy ast_variant.node.attrs)\n                         }\n                         _ => {\n-                            fail fmt!(\"Enum variant %s has id that's \\\n+                            die!(fmt!(\"Enum variant %s has id that's \\\n                                        not bound to an enum item\",\n-                                      variant.name)\n+                                      variant.name))\n                         }\n                     }\n                 }"}, {"sha": "ff6b745612dee6346cee26652e26580e4a729001", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -192,6 +192,6 @@ impl OmNomNomy: TheShunnedHouse {\n     }\n \n     fn construct(&self) -> bool {\n-        fail;\n+        die!();\n     }\n }"}, {"sha": "92db56b40af0754927e55f50a960ad9016ae3e74", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -112,7 +112,7 @@ fn fold_const(\n                     }, _) => {\n                         pprust::ty_to_str(ty, extract::interner())\n                     }\n-                    _ => fail ~\"fold_const: id not bound to a const item\"\n+                    _ => die!(~\"fold_const: id not bound to a const item\")\n                 }\n             }}),\n         .. doc\n@@ -149,7 +149,7 @@ fn fold_enum(\n                             pprust::variant_to_str(\n                                 ast_variant, extract::interner())\n                         }\n-                        _ => fail ~\"enum variant not bound to an enum item\"\n+                        _ => die!(~\"enum variant not bound to an enum item\")\n                     }\n                 }\n             };\n@@ -281,7 +281,7 @@ fn fold_impl(\n                      Some(pprust::ty_to_str(\n                          self_ty, extract::interner())))\n                 }\n-                _ => fail ~\"expected impl\"\n+                _ => die!(~\"expected impl\")\n             }\n         }\n     };\n@@ -344,7 +344,7 @@ fn fold_type(\n                                               extract::interner())\n                         ))\n                     }\n-                    _ => fail ~\"expected type\"\n+                    _ => die!(~\"expected type\")\n                 }\n             }\n         },\n@@ -374,7 +374,7 @@ fn fold_struct(\n                         Some(pprust::item_to_str(item,\n                                                  extract::interner()))\n                     }\n-                    _ => fail ~\"not an item\"\n+                    _ => die!(~\"not an item\")\n                 }\n             }\n         },"}, {"sha": "0104e72764f69a64997cbc55e43bee22a7e0d9f6", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -245,7 +245,7 @@ impl BigUint : Modulo<BigUint, BigUint> {\n }\n \n impl BigUint : Neg<BigUint> {\n-    pure fn neg(&self) -> BigUint { fail }\n+    pure fn neg(&self) -> BigUint { die!() }\n }\n \n impl BigUint : IntConvertible {"}, {"sha": "b86286a198da94be5132a1e584bc37fbaccbbe76", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -940,7 +940,7 @@ impl TcpSocketBuf: io::Reader {\n               } else {\n                   debug!(\"ERROR sock_buf as io::reader.read err %? %?\",\n                          err_data.err_name, err_data.err_msg);\n-                  fail\n+                  die!()\n               }\n           }\n           else {"}, {"sha": "5a2693a42c143af6fc535be5808ec7a8df75d25a", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -446,7 +446,7 @@ mod tests {\n \n     #[test]\n     pub fn do_not_run_ignored_tests() {\n-        fn f() { fail; }\n+        fn f() { die!(); }\n         let desc = TestDesc {\n             name: ~\"whatever\",\n             testfn: f,\n@@ -479,7 +479,7 @@ mod tests {\n     #[test]\n     #[ignore(cfg(windows))]\n     pub fn test_should_fail() {\n-        fn f() { fail; }\n+        fn f() { die!(); }\n         let desc = TestDesc {\n             name: ~\"whatever\",\n             testfn: f,"}, {"sha": "736954f6b222f36f868b73920aa7ebf0a1c18629", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -185,14 +185,12 @@ mod test {\n                         let start_status = ll::timer_start(timer_ptr,\n                                                            simple_timer_cb,\n                                                            1u, 0u);\n-                        if(start_status == 0i32) {\n-                        }\n-                        else {\n-                            fail ~\"failure on ll::timer_start()\";\n+                        if(start_status != 0i32) {\n+                            die!(~\"failure on ll::timer_start()\");\n                         }\n                     }\n                     else {\n-                        fail ~\"failure on ll::timer_init()\";\n+                        die!(~\"failure on ll::timer_init()\");\n                     }\n                 }\n             };"}, {"sha": "ef74b61f93aea138470b27eb19278f2ce1dfd3f9", "filename": "src/test/auxiliary/issue_2723_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub unsafe fn f(xs: ~[int]) {\n-    xs.map(|_x| { unsafe fn q() { fail; } });\n+    xs.map(|_x| { unsafe fn q() { die!(); } });\n }"}, {"sha": "06b46eab7598b0905338dbb0a6ca3d9a184de0ce", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -68,7 +68,7 @@ fn parse_opts(argv: ~[~str]) -> Config {\n       Ok(ref m) => {\n           return Config {stress: getopts::opt_present(m, ~\"stress\")}\n       }\n-      Err(_) => { fail; }\n+      Err(_) => { die!(); }\n     }\n }\n "}, {"sha": "940677002707b2eff0d1728b6d37587f8d50c5c9", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -2,7 +2,7 @@ fn a() -> &[int] {\n     let vec = [1, 2, 3, 4];\n     let tail = match vec { //~ ERROR illegal borrow\n         [_a, ..tail] => tail,\n-        _ => fail ~\"foo\"\n+        _ => die!(~\"foo\")\n     };\n     move tail\n }"}, {"sha": "64bb571b2dcdc63c5e2ac746d28dc10bed7f9509", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -2,7 +2,7 @@ fn a() -> &int {\n     let vec = [1, 2, 3, 4];\n     let tail = match vec { //~ ERROR illegal borrow\n         [_a, ..tail] => &tail[0],\n-        _ => fail ~\"foo\"\n+        _ => die!(~\"foo\")\n     };\n     move tail\n }"}, {"sha": "0b36977d9b558447ffdbf2e6a8f6b14fee78b8d4", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb4239bb361a927582a8ffd53a2ae649d810fdf/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=6fb4239bb361a927582a8ffd53a2ae649d810fdf", "patch": "@@ -21,5 +21,5 @@ fn main() {\n     // We shouldn't be able to get past this recv since there's no\n     // message available\n     let i: int = po.recv();\n-    fail ~\"badfail\";\n+    die!(~\"badfail\");\n }"}]}