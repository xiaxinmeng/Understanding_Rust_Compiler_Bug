{"sha": "e505857914795dd2171acb4193a010f9d09ebc7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MDU4NTc5MTQ3OTVkZDIxNzFhY2I0MTkzYTAxMGY5ZDA5ZWJjN2M=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-22T10:46:14Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-15T15:23:50Z"}, "message": "rustc_metadata: remove now-redundant length from the start of the encoding.", "tree": {"sha": "f07bb97d4611ebd902f4307a1e2ed04b0144ea2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f07bb97d4611ebd902f4307a1e2ed04b0144ea2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e505857914795dd2171acb4193a010f9d09ebc7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e505857914795dd2171acb4193a010f9d09ebc7c", "html_url": "https://github.com/rust-lang/rust/commit/e505857914795dd2171acb4193a010f9d09ebc7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e505857914795dd2171acb4193a010f9d09ebc7c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437ca55f23b7ed0051334a7e38ecabd83a173b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/437ca55f23b7ed0051334a7e38ecabd83a173b53", "html_url": "https://github.com/rust-lang/rust/commit/437ca55f23b7ed0051334a7e38ecabd83a173b53"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "8db7a51700bce87ad4c7ee2d23d02eba458432bb", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e505857914795dd2171acb4193a010f9d09ebc7c/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e505857914795dd2171acb4193a010f9d09ebc7c/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=e505857914795dd2171acb4193a010f9d09ebc7c", "patch": "@@ -110,12 +110,8 @@ impl Index<'tcx> {\n \n     crate fn write_index(&self, buf: &mut Encoder) -> Lazy<[Self]> {\n         let pos = buf.position();\n-\n-        // First we write the length of the lower range ...\n-        buf.emit_raw_bytes(&(self.positions.len() as u32 / 4).to_le_bytes());\n-        // ... then the values.\n         buf.emit_raw_bytes(&self.positions);\n-        Lazy::from_position_and_meta(pos as usize, self.positions.len() / 4 + 1)\n+        Lazy::from_position_and_meta(pos as usize, self.positions.len() / 4)\n     }\n }\n \n@@ -124,12 +120,12 @@ impl Lazy<[Index<'tcx>]> {\n     /// DefIndex (if any).\n     #[inline(never)]\n     crate fn lookup(&self, bytes: &[u8], def_index: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n-        let bytes = &bytes[self.position..];\n         debug!(\"Index::lookup: index={:?} len={:?}\",\n                def_index,\n                self.meta);\n \n-        let position = u32::read_from_bytes_at(bytes, 1 + def_index.index());\n+        let bytes = &bytes[self.position..][..self.meta * 4];\n+        let position = u32::read_from_bytes_at(bytes, def_index.index());\n         if position == u32::MAX {\n             debug!(\"Index::lookup: position=u32::MAX\");\n             None"}]}