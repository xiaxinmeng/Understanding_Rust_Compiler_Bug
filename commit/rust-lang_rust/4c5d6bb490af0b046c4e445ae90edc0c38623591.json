{"sha": "4c5d6bb490af0b046c4e445ae90edc0c38623591", "node_id": "C_kwDOAAsO6NoAKDRjNWQ2YmI0OTBhZjBiMDQ2YzRlNDQ1YWU5MGVkYzBjMzg2MjM1OTE", "commit": {"author": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-10-07T08:22:01Z"}, "committer": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-10-07T12:31:12Z"}, "message": "Ensure the correct tombstone file is opened", "tree": {"sha": "717ab8dd280c8cfdea351a6dc48300cd07589aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/717ab8dd280c8cfdea351a6dc48300cd07589aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c5d6bb490af0b046c4e445ae90edc0c38623591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5d6bb490af0b046c4e445ae90edc0c38623591", "html_url": "https://github.com/rust-lang/rust/commit/4c5d6bb490af0b046c4e445ae90edc0c38623591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c5d6bb490af0b046c4e445ae90edc0c38623591/comments", "author": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53caa9fafbf199c8dd1b312203045a618e1c38dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/53caa9fafbf199c8dd1b312203045a618e1c38dc", "html_url": "https://github.com/rust-lang/rust/commit/53caa9fafbf199c8dd1b312203045a618e1c38dc"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "6d4d24922253d112720cc54e916cb58f75fc5760", "filename": "src/test/ui/process/process-panic-after-fork.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4c5d6bb490af0b046c4e445ae90edc0c38623591/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5d6bb490af0b046c4e445ae90edc0c38623591/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs?ref=4c5d6bb490af0b046c4e445ae90edc0c38623591", "patch": "@@ -89,29 +89,29 @@ fn expect_aborted(status: ExitStatus) {\n         assert!(signal == libc::SIGSEGV);\n \n         // Additional checks performed:\n-        // 1. Crash is from same executable (path) as we are (must be because of fork):\n+        // 1. Find last tombstone (similar to coredump but in text format) from the\n+        //    same executable (path) as we are (must be because of usage of fork):\n         //    This ensures that we look into the correct tombstone.\n         // 2. Cause of crash is a SIGSEGV with address 0xdeadbaad.\n         // 3. libc::abort call is in one of top two functions on callstack.\n         // The last two steps distinguish between a normal SIGSEGV and one caused\n         // by libc::abort.\n \n-        let tombstone_name = (0..100)\n+        let this_exe = std::env::current_exe().unwrap().into_os_string().into_string().unwrap();\n+        let exe_string = format!(\">>> {this_exe} <<<\");\n+        let tombstone = (0..100)\n             .map(|n| format!(\"/data/tombstones/tombstone_{n:02}\"))\n             .filter(|f| std::path::Path::new(&f).exists())\n+            .map(|f| std::fs::read_to_string(&f).expect(\"Cannot read tombstone file\"))\n+            .filter(|f| f.contains(&exe_string))\n             .last()\n             .expect(\"no tombstone found\");\n \n-        let tombstone =\n-            std::fs::read_to_string(&tombstone_name).expect(\"Cannot read tombstone file\");\n-        println!(\"Content of {tombstone_name}:\\n{tombstone}\");\n+        println!(\"Content of tombstone:\\n{tombstone}\");\n \n-        // If the next assert fails sporadically we might have an issue with parallel crashing apps\n-        assert!(tombstone\n-            .contains(&std::env::current_exe().unwrap().into_os_string().into_string().unwrap()));\n-        assert!(tombstone.contains(\n-            \"signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr deadbaad\"\n-        ));\n+        assert!(\n+            tombstone.contains(\"signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr deadbaad\")\n+        );\n         let abort_on_top = tombstone\n             .lines()\n             .skip_while(|l| !l.contains(\"backtrace:\"))"}]}