{"sha": "1138f88f82bec4612535e0bcf3e019604b27a4d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMzhmODhmODJiZWM0NjEyNTM1ZTBiY2YzZTAxOTYwNGIyN2E0ZDk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-10T17:05:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-10T17:05:17Z"}, "message": "rollup merge of #22144: pnkfelix/fru-privacy-rfc-736", "tree": {"sha": "1a090fa8798e72c36c721d6d837c5a49fd1f64fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a090fa8798e72c36c721d6d837c5a49fd1f64fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1138f88f82bec4612535e0bcf3e019604b27a4d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1138f88f82bec4612535e0bcf3e019604b27a4d9", "html_url": "https://github.com/rust-lang/rust/commit/1138f88f82bec4612535e0bcf3e019604b27a4d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1138f88f82bec4612535e0bcf3e019604b27a4d9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08cbb4a5af25bc39bb49bc328dd4a4ff5ba231ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/08cbb4a5af25bc39bb49bc328dd4a4ff5ba231ee", "html_url": "https://github.com/rust-lang/rust/commit/08cbb4a5af25bc39bb49bc328dd4a4ff5ba231ee"}, {"sha": "3f5af9f34d282cde910c0a1dc6b9c595227701c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5af9f34d282cde910c0a1dc6b9c595227701c3", "html_url": "https://github.com/rust-lang/rust/commit/3f5af9f34d282cde910c0a1dc6b9c595227701c3"}], "stats": {"total": 74, "additions": 60, "deletions": 14}, "files": [{"sha": "96e146fc894f98cddc149c6f850e45546b3519c6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1138f88f82bec4612535e0bcf3e019604b27a4d9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1138f88f82bec4612535e0bcf3e019604b27a4d9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=1138f88f82bec4612535e0bcf3e019604b27a4d9", "patch": "@@ -390,8 +390,8 @@ enum PrivacyResult {\n \n enum FieldName {\n     UnnamedField(uint), // index\n-    // FIXME #6993: change type (and name) from Ident to Name\n-    NamedField(ast::Ident),\n+    // (Name, not Ident, because struct fields are not macro-hygienic)\n+    NamedField(ast::Name),\n }\n \n impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n@@ -665,9 +665,9 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                    name: FieldName) {\n         let fields = ty::lookup_struct_fields(self.tcx, id);\n         let field = match name {\n-            NamedField(ident) => {\n-                debug!(\"privacy - check named field {} in struct {:?}\", ident.name, id);\n-                fields.iter().find(|f| f.name == ident.name).unwrap()\n+            NamedField(f_name) => {\n+                debug!(\"privacy - check named field {} in struct {:?}\", f_name, id);\n+                fields.iter().find(|f| f.name == f_name).unwrap()\n             }\n             UnnamedField(idx) => &fields[idx]\n         };\n@@ -686,7 +686,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n         };\n         let msg = match name {\n             NamedField(name) => format!(\"field `{}` of {} is private\",\n-                                        token::get_ident(name), struct_desc),\n+                                        token::get_name(name), struct_desc),\n             UnnamedField(idx) => format!(\"field #{} of {} is private\",\n                                          idx + 1, struct_desc),\n         };\n@@ -873,7 +873,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n         match expr.node {\n             ast::ExprField(ref base, ident) => {\n                 if let ty::ty_struct(id, _) = ty::expr_ty_adjusted(self.tcx, &**base).sty {\n-                    self.check_field(expr.span, id, NamedField(ident.node));\n+                    self.check_field(expr.span, id, NamedField(ident.node.name));\n                 }\n             }\n             ast::ExprTupField(ref base, idx) => {\n@@ -897,18 +897,22 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n             }\n             ast::ExprStruct(_, ref fields, _) => {\n                 match ty::expr_ty(self.tcx, expr).sty {\n-                    ty::ty_struct(id, _) => {\n-                        for field in &(*fields) {\n-                            self.check_field(expr.span, id,\n-                                             NamedField(field.ident.node));\n+                    ty::ty_struct(ctor_id, _) => {\n+                        // RFC 736: ensure all unmentioned fields are visible.\n+                        // Rather than computing the set of unmentioned fields\n+                        // (i.e. `all_fields - fields`), just check them all.\n+                        let all_fields = ty::lookup_struct_fields(self.tcx, ctor_id);\n+                        for field in all_fields {\n+                            self.check_field(expr.span, ctor_id,\n+                                             NamedField(field.name));\n                         }\n                     }\n                     ty::ty_enum(_, _) => {\n                         match self.tcx.def_map.borrow()[expr.id].clone() {\n                             def::DefVariant(_, variant_id, _) => {\n                                 for field in fields {\n                                     self.check_field(expr.span, variant_id,\n-                                                     NamedField(field.ident.node));\n+                                                     NamedField(field.ident.node.name));\n                                 }\n                             }\n                             _ => self.tcx.sess.span_bug(expr.span,\n@@ -973,15 +977,15 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                     ty::ty_struct(id, _) => {\n                         for field in fields {\n                             self.check_field(pattern.span, id,\n-                                             NamedField(field.node.ident));\n+                                             NamedField(field.node.ident.name));\n                         }\n                     }\n                     ty::ty_enum(_, _) => {\n                         match self.tcx.def_map.borrow().get(&pattern.id) {\n                             Some(&def::DefVariant(_, variant_id, _)) => {\n                                 for field in fields {\n                                     self.check_field(pattern.span, variant_id,\n-                                                     NamedField(field.node.ident));\n+                                                     NamedField(field.node.ident.name));\n                                 }\n                             }\n                             _ => self.tcx.sess.span_bug(pattern.span,"}, {"sha": "51e23a689a1ad148266a61102aa82a54ec66191d", "filename": "src/test/compile-fail/functional-struct-update-respects-privacy.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1138f88f82bec4612535e0bcf3e019604b27a4d9/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-respects-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1138f88f82bec4612535e0bcf3e019604b27a4d9/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-respects-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-respects-privacy.rs?ref=1138f88f82bec4612535e0bcf3e019604b27a4d9", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// RFC 736 (and Issue 21407): functional struct update should respect privacy.\n+\n+// The `foo` module attempts to maintains an invariant that each `S`\n+// has a unique `u64` id.\n+use self::foo::S;\n+mod foo {\n+    use std::cell::{UnsafeCell};\n+\n+    static mut count : UnsafeCell<u64> = UnsafeCell { value: 1 };\n+\n+    pub struct S { pub a: u8, pub b: String, secret_uid: u64 }\n+\n+    pub fn make_secrets(a: u8, b: String) -> S {\n+        let val = unsafe { let p = count.get(); let val = *p; *p = val + 1; val };\n+        println!(\"creating {}, uid {}\", b, val);\n+        S { a: a, b: b, secret_uid: val }\n+    }\n+\n+    impl Drop for S {\n+        fn drop(&mut self) {\n+            println!(\"dropping {}, uid {}\", self.b, self.secret_uid);\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let s_1 = foo::make_secrets(3, format!(\"ess one\"));\n+    let s_2 = foo::S { b: format!(\"ess two\"), ..s_1 }; // FRU ...\n+    //~^ ERROR field `secret_uid` of struct `foo::S` is private\n+    println!(\"main forged an S named: {}\", s_2.b);\n+    // at end of scope, ... both s_1 *and* s_2 get dropped.  Boom!\n+}"}]}