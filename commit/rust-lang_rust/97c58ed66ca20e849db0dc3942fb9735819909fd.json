{"sha": "97c58ed66ca20e849db0dc3942fb9735819909fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YzU4ZWQ2NmNhMjBlODQ5ZGIwZGMzOTQyZmI5NzM1ODE5OTA5ZmQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-07T18:06:55Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-10T15:46:31Z"}, "message": "avoid passing the gen/kill bits to `start_block_effects`\n\nIf the gen/kill bits are set there, the effects of `start_block_effects`\nwill not be seen when using `FlowAtLocation` etc. to go over the MIR.\n\nEverInitializedLvals is the only pass that got this wrong, but this\nfixes the footgun for everyone.", "tree": {"sha": "ed52564723bdc03c84732c5c0f046b3b8446fac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed52564723bdc03c84732c5c0f046b3b8446fac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c58ed66ca20e849db0dc3942fb9735819909fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c58ed66ca20e849db0dc3942fb9735819909fd", "html_url": "https://github.com/rust-lang/rust/commit/97c58ed66ca20e849db0dc3942fb9735819909fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c58ed66ca20e849db0dc3942fb9735819909fd/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "733e95444fea30235c18076736d26b0f57adda9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/733e95444fea30235c18076736d26b0f57adda9e", "html_url": "https://github.com/rust-lang/rust/commit/733e95444fea30235c18076736d26b0f57adda9e"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "b3299b943ba55f07a88a52c4a6593f202b25223e", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97c58ed66ca20e849db0dc3942fb9735819909fd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c58ed66ca20e849db0dc3942fb9735819909fd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=97c58ed66ca20e849db0dc3942fb9735819909fd", "patch": "@@ -213,7 +213,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n     fn bits_per_block(&self) -> usize {\n         self.borrows.len()\n     }\n-    fn start_block_effect(&self, _sets: &mut BlockSets<BorrowIndex>)  {\n+    fn start_block_effect(&self, _sets: &mut IdxSet<BorrowIndex>)  {\n         // no borrows of code region_scopes have been taken prior to\n         // function execution, so this method has no effect on\n         // `_sets`."}, {"sha": "033d2a3212f8c1610990c86a40407218c7829294", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/97c58ed66ca20e849db0dc3942fb9735819909fd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c58ed66ca20e849db0dc3942fb9735819909fd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=97c58ed66ca20e849db0dc3942fb9735819909fd", "patch": "@@ -331,13 +331,12 @@ impl<'a, 'gcx, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'gcx, 'tcx> {\n         self.move_data().move_paths.len()\n     }\n \n-    fn start_block_effect(&self, sets: &mut BlockSets<MovePathIndex>)\n-    {\n+    fn start_block_effect(&self, entry_set: &mut IdxSet<MovePathIndex>) {\n         drop_flag_effects_for_function_entry(\n             self.tcx, self.mir, self.mdpe,\n             |path, s| {\n                 assert!(s == DropFlagState::Present);\n-                sets.on_entry.add(&path);\n+                entry_set.add(&path);\n             });\n     }\n \n@@ -384,15 +383,15 @@ impl<'a, 'gcx, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'gcx, 'tcx> {\n     }\n \n     // sets on_entry bits for Arg places\n-    fn start_block_effect(&self, sets: &mut BlockSets<MovePathIndex>) {\n+    fn start_block_effect(&self, entry_set: &mut IdxSet<MovePathIndex>) {\n         // set all bits to 1 (uninit) before gathering counterevidence\n-        for e in sets.on_entry.words_mut() { *e = !0; }\n+        for e in entry_set.words_mut() { *e = !0; }\n \n         drop_flag_effects_for_function_entry(\n             self.tcx, self.mir, self.mdpe,\n             |path, s| {\n                 assert!(s == DropFlagState::Present);\n-                sets.on_entry.remove(&path);\n+                entry_set.remove(&path);\n             });\n     }\n \n@@ -439,14 +438,14 @@ impl<'a, 'gcx, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'gcx, 'tcx\n     }\n \n     // sets on_entry bits for Arg places\n-    fn start_block_effect(&self, sets: &mut BlockSets<MovePathIndex>) {\n-        for e in sets.on_entry.words_mut() { *e = 0; }\n+    fn start_block_effect(&self, entry_set: &mut IdxSet<MovePathIndex>) {\n+        for e in entry_set.words_mut() { *e = 0; }\n \n         drop_flag_effects_for_function_entry(\n             self.tcx, self.mir, self.mdpe,\n             |path, s| {\n                 assert!(s == DropFlagState::Present);\n-                sets.on_entry.add(&path);\n+                entry_set.add(&path);\n             });\n     }\n \n@@ -492,10 +491,11 @@ impl<'a, 'gcx, 'tcx> BitDenotation for MovingOutStatements<'a, 'gcx, 'tcx> {\n         self.move_data().moves.len()\n     }\n \n-    fn start_block_effect(&self, _sets: &mut BlockSets<MoveOutIndex>) {\n+    fn start_block_effect(&self, _sets: &mut IdxSet<MoveOutIndex>) {\n         // no move-statements have been executed prior to function\n         // execution, so this method has no effect on `_sets`.\n     }\n+\n     fn statement_effect(&self,\n                         sets: &mut BlockSets<MoveOutIndex>,\n                         location: Location) {\n@@ -568,9 +568,12 @@ impl<'a, 'gcx, 'tcx> BitDenotation for EverInitializedLvals<'a, 'gcx, 'tcx> {\n         self.move_data().inits.len()\n     }\n \n-    fn start_block_effect(&self, sets: &mut BlockSets<InitIndex>) {\n-        sets.gen_all((0..self.mir.arg_count).map(InitIndex::new));\n+    fn start_block_effect(&self, entry_set: &mut IdxSet<InitIndex>) {\n+        for arg_init in 0..self.mir.arg_count {\n+            entry_set.add(&InitIndex::new(arg_init));\n+        }\n     }\n+\n     fn statement_effect(&self,\n                         sets: &mut BlockSets<InitIndex>,\n                         location: Location) {"}, {"sha": "9e5a71683781b740678801ef3d9065de75c1d97d", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97c58ed66ca20e849db0dc3942fb9735819909fd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c58ed66ca20e849db0dc3942fb9735819909fd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=97c58ed66ca20e849db0dc3942fb9735819909fd", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> BitDenotation for MaybeStorageLive<'a, 'tcx> {\n         self.mir.local_decls.len()\n     }\n \n-    fn start_block_effect(&self, _sets: &mut BlockSets<Local>) {\n+    fn start_block_effect(&self, _sets: &mut IdxSet<Local>) {\n         // Nothing is live on function entry\n     }\n "}, {"sha": "2136b41e46222a169604230ebc7732890336aefb", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97c58ed66ca20e849db0dc3942fb9735819909fd/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c58ed66ca20e849db0dc3942fb9735819909fd/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=97c58ed66ca20e849db0dc3942fb9735819909fd", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation\n \n         {\n             let sets = &mut self.flow_state.sets.for_block(mir::START_BLOCK.index());\n-            self.flow_state.operator.start_block_effect(sets);\n+            self.flow_state.operator.start_block_effect(&mut sets.on_entry);\n         }\n \n         for (bb, data) in self.mir.basic_blocks().iter_enumerated() {\n@@ -556,16 +556,13 @@ pub trait BitDenotation: DataflowOperator {\n     /// Size of each bitvector allocated for each block in the analysis.\n     fn bits_per_block(&self) -> usize;\n \n-    /// Mutates the block-sets (the flow sets for the given\n-    /// basic block) according to the effects that have been\n-    /// established *prior* to entering the start block.\n+    /// Mutates the entry set according to the effects that\n+    /// have been established *prior* to entering the start\n+    /// block. This can't access the gen/kill sets, because\n+    /// these won't be accounted for correctly.\n     ///\n     /// (For example, establishing the call arguments.)\n-    ///\n-    /// (Typically this should only modify `sets.on_entry`, since the\n-    /// gen and kill sets should reflect the effects of *executing*\n-    /// the start block itself.)\n-    fn start_block_effect(&self, sets: &mut BlockSets<Self::Idx>);\n+    fn start_block_effect(&self, entry_set: &mut IdxSet<Self::Idx>);\n \n     /// Mutates the block-sets (the flow sets for the given\n     /// basic block) according to the effects of evaluating statement."}]}