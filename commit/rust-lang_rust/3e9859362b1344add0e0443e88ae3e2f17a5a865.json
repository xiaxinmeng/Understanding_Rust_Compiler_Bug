{"sha": "3e9859362b1344add0e0443e88ae3e2f17a5a865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOTg1OTM2MmIxMzQ0YWRkMGUwNDQzZTg4YWUzZTJmMTdhNWE4NjU=", "commit": {"author": {"name": "Magnus Auvinen", "email": "magnus.auvinen@gmail.com", "date": "2012-02-07T18:50:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-07T23:08:54Z"}, "message": "made leak an intrinsic to avoid a c-call. added memmove and memcpy intrinsics", "tree": {"sha": "aaa7d44ceb251fab658444931fdfef6301edf674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaa7d44ceb251fab658444931fdfef6301edf674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e9859362b1344add0e0443e88ae3e2f17a5a865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9859362b1344add0e0443e88ae3e2f17a5a865", "html_url": "https://github.com/rust-lang/rust/commit/3e9859362b1344add0e0443e88ae3e2f17a5a865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e9859362b1344add0e0443e88ae3e2f17a5a865/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a63780afcee53489e2f1640245d3b7c496dbe071", "url": "https://api.github.com/repos/rust-lang/rust/commits/a63780afcee53489e2f1640245d3b7c496dbe071", "html_url": "https://github.com/rust-lang/rust/commit/a63780afcee53489e2f1640245d3b7c496dbe071"}], "stats": {"total": 105, "additions": 100, "deletions": 5}, "files": [{"sha": "e844dcda36a55fc7b42e002cc37c2c2297239aae", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3e9859362b1344add0e0443e88ae3e2f17a5a865/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9859362b1344add0e0443e88ae3e2f17a5a865/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=3e9859362b1344add0e0443e88ae3e2f17a5a865", "patch": "@@ -7,6 +7,8 @@ Unsafe pointer utility functions\n native mod rusti {\n     fn addr_of<T>(val: T) -> *T;\n     fn ptr_offset<T>(ptr: *T, count: ctypes::uintptr_t) -> *T;\n+    fn memcpy<T>(dst: *T, src: *T, count: ctypes::uintptr_t);\n+    fn memmove<T>(dst: *T, src: *T, count: ctypes::uintptr_t);\n }\n \n /*\n@@ -51,6 +53,20 @@ Create an unsafe null pointer\n */\n fn null<T>() -> *T unsafe { ret unsafe::reinterpret_cast(0u); }\n \n+/*\n+Function: memcpy\n+\n+Copies data from one src to dst that is not overlapping each other.\n+*/\n+fn memcpy<T>(dst: *T, src: *T, count: uint) unsafe { rusti::memcpy(dst, src, count); }\n+\n+/*\n+Function: memmove\n+\n+Copies data from one src to dst, overlap between the two pointers may occur.\n+*/\n+fn memmove<T>(dst: *T, src: *T, count: uint) unsafe { rusti::memcpy(dst, src, count); }\n+\n #[test]\n fn test() unsafe {\n     type pair = {mutable fst: int, mutable snd: int};\n@@ -66,4 +82,14 @@ fn test() unsafe {\n     assert (*iptr == 50);\n     assert (p.fst == 50);\n     assert (p.snd == 60);\n+\n+    let v0 = [32000u16, 32001u16, 32002u16];\n+    let v1 = [0u16, 0u16, 0u16];\n+    \n+    ptr::memcpy(ptr::offset(vec::unsafe::to_ptr(v1), 1u), ptr::offset(vec::unsafe::to_ptr(v0), 1u), 1u);\n+    assert (v1[0] == 0u16 && v1[1] == 32001u16 && v1[2] == 0u16);\n+    ptr::memcpy(vec::unsafe::to_ptr(v1), ptr::offset(vec::unsafe::to_ptr(v0), 2u), 1u);\n+    assert (v1[0] == 32002u16 && v1[1] == 32001u16 && v1[2] == 0u16);\n+    ptr::memcpy(ptr::offset(vec::unsafe::to_ptr(v1), 2u), vec::unsafe::to_ptr(v0), 1u);\n+    assert (v1[0] == 32002u16 && v1[1] == 32001u16 && v1[2] == 32000u16);\n }\n\\ No newline at end of file"}, {"sha": "b534d8264a60f1b50d38112f537f63c13a2067e4", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e9859362b1344add0e0443e88ae3e2f17a5a865/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9859362b1344add0e0443e88ae3e2f17a5a865/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=3e9859362b1344add0e0443e88ae3e2f17a5a865", "patch": "@@ -9,10 +9,6 @@ export reinterpret_cast, leak;\n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n     fn cast<T, U>(src: T) -> U;\n-}\n-\n-#[abi = \"cdecl\"]\n-native mod rustrt {\n     fn leak<T>(-thing: T);\n }\n \n@@ -40,7 +36,7 @@ to run any required cleanup or memory-management operations on it. This\n can be used for various acts of magick, particularly when using\n reinterpret_cast on managed pointer types.\n */\n-unsafe fn leak<T>(-thing: T) { rustrt::leak(thing); }\n+unsafe fn leak<T>(-thing: T) { rusti::leak(thing); }\n \n #[cfg(test)]\n mod tests {"}, {"sha": "8955215db571ce97e5cbce9c66c6f673fe6ea1b9", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3e9859362b1344add0e0443e88ae3e2f17a5a865/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3e9859362b1344add0e0443e88ae3e2f17a5a865/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=3e9859362b1344add0e0443e88ae3e2f17a5a865", "patch": "@@ -83,3 +83,32 @@ rust_intrinsic_task_yield(void **retptr,\n     rust_task_yield(task, killed);\n }\n \n+extern \"C\" void\n+rust_intrinsic_memmove(void *retptr,\n+                    void *env,\n+                    type_desc *ty,\n+                    void *dst,\n+                    void *src,\n+                    uintptr_t count)\n+{\n+    memmove(dst, src, ty->size * count);\n+}\n+\n+extern \"C\" void\n+rust_intrinsic_memcpy(void *retptr,\n+                    void *env,\n+                    type_desc *ty,\n+                    void *dst,\n+                    void *src,\n+                    uintptr_t count)\n+{\n+    memcpy(dst, src, ty->size * count);\n+}\n+\n+extern \"C\" void\n+rust_intrinsic_leak(void *retptr,\n+                    void *env,\n+                    type_desc *ty,\n+                    void *thing)\n+{\n+}"}, {"sha": "73fdeab3ba9f0c2119aba1faebdebd80f0c9babb", "filename": "src/rt/intrinsics/intrinsics.i386.ll.in", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e9859362b1344add0e0443e88ae3e2f17a5a865/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/3e9859362b1344add0e0443e88ae3e2f17a5a865/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in?ref=3e9859362b1344add0e0443e88ae3e2f17a5a865", "patch": "@@ -120,6 +120,28 @@ entry:\n \n declare void @rust_task_yield(%struct.rust_task*, i8*)\n \n+define void @rust_intrinsic_memmove(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* nocapture %dst, i8* nocapture %src, i32 %count) nounwind {\n+  %1 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n+  %2 = load i32* %1, align 4, !tbaa !3\n+  %3 = mul i32 %2, %count\n+  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %dst, i8* %src, i32 %3, i32 1, i1 false)\n+  ret void\n+}\n+\n+define void @rust_intrinsic_memcpy(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* nocapture %dst, i8* nocapture %src, i32 %count) nounwind {\n+  %1 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n+  %2 = load i32* %1, align 4, !tbaa !3\n+  %3 = mul i32 %2, %count\n+  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %dst, i8* %src, i32 %3, i32 1, i1 false)\n+  ret void\n+}\n+\n+declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind\n+\n+define void @rust_intrinsic_leak(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* nocapture %thing) nounwind readnone {\n+  ret void\n+}\n+\n !0 = metadata !{metadata !\"any pointer\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}\n !2 = metadata !{metadata !\"Simple C/C++ TBAA\", null}"}, {"sha": "09936598f83368c377c63a2e738aee37add36237", "filename": "src/rt/intrinsics/intrinsics.x86_64.ll.in", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e9859362b1344add0e0443e88ae3e2f17a5a865/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/3e9859362b1344add0e0443e88ae3e2f17a5a865/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in?ref=3e9859362b1344add0e0443e88ae3e2f17a5a865", "patch": "@@ -120,6 +120,28 @@ entry:\n \n declare void @rust_task_yield(%struct.rust_task*, i8*)\n \n+define void @rust_intrinsic_memmove(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* nocapture %dst, i8* nocapture %src, i64 %count) nounwind uwtable {\n+  %1 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n+  %2 = load i64* %1, align 8, !tbaa !3\n+  %3 = mul i64 %2, %count\n+  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %dst, i8* %src, i64 %3, i32 1, i1 false)\n+  ret void\n+}\n+\n+define void @rust_intrinsic_memcpy(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* nocapture %dst, i8* nocapture %src, i64 %count) nounwind uwtable {\n+  %1 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n+  %2 = load i64* %1, align 8, !tbaa !3\n+  %3 = mul i64 %2, %count\n+  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %dst, i8* %src, i64 %3, i32 1, i1 false)\n+  ret void\n+}\n+\n+declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind\n+\n+define void @rust_intrinsic_leak(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* nocapture %thing) nounwind uwtable readnone {\n+  ret void\n+}\n+\n !0 = metadata !{metadata !\"any pointer\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}\n !2 = metadata !{metadata !\"Simple C/C++ TBAA\", null}"}]}