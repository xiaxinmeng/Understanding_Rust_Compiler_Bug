{"sha": "3135b7877a66e72ac4833588eb8654aa155876e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMzViNzg3N2E2NmU3MmFjNDgzMzU4OGViODY1NGFhMTU1ODc2ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-01T00:40:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-01T00:40:39Z"}, "message": "Auto merge of #36177 - jonathandturner:rollup, r=jonathandturner\n\nRollup of 13 pull requests\n\n- Successful merges: #35773, #35786, #35911, #35927, #36083, #36087, #36098, #36114, #36118, #36123, #36129, #36152, #36169\n- Failed merges:", "tree": {"sha": "c00e4dec0c818393a7a1f81e0c36d9609b96342e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c00e4dec0c818393a7a1f81e0c36d9609b96342e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3135b7877a66e72ac4833588eb8654aa155876e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3135b7877a66e72ac4833588eb8654aa155876e8", "html_url": "https://github.com/rust-lang/rust/commit/3135b7877a66e72ac4833588eb8654aa155876e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3135b7877a66e72ac4833588eb8654aa155876e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c01bb885108c436adae2006632ff6dfc0a5f2cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c01bb885108c436adae2006632ff6dfc0a5f2cd", "html_url": "https://github.com/rust-lang/rust/commit/2c01bb885108c436adae2006632ff6dfc0a5f2cd"}, {"sha": "5c9710005871edda567d7f84a1dbca00680fd77b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9710005871edda567d7f84a1dbca00680fd77b", "html_url": "https://github.com/rust-lang/rust/commit/5c9710005871edda567d7f84a1dbca00680fd77b"}], "stats": {"total": 397, "additions": 309, "deletions": 88}, "files": [{"sha": "1656255956191f4d730519feedf75d82a2d02805", "filename": "man/rustc.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -1,4 +1,4 @@\n-.TH RUSTC \"1\" \"August 2016\" \"rustc 1.12.0\" \"User Commands\"\n+.TH RUSTC \"1\" \"September 2016\" \"rustc 1.13.0\" \"User Commands\"\n .SH NAME\n rustc \\- The Rust compiler\n .SH SYNOPSIS"}, {"sha": "4d885bd14363fc7eb233ae846cefe6fbcba2c957", "filename": "man/rustdoc.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/man%2Frustdoc.1", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/man%2Frustdoc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustdoc.1?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -1,4 +1,4 @@\n-.TH RUSTDOC \"1\" \"August 2016\" \"rustdoc 1.12.0\" \"User Commands\"\n+.TH RUSTDOC \"1\" \"September 2016\" \"rustdoc 1.13.0\" \"User Commands\"\n .SH NAME\n rustdoc \\- generate documentation from Rust source code\n .SH SYNOPSIS"}, {"sha": "dbf29cda49212aabdea508447caec450dd8de063", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -528,7 +528,7 @@ impl Build {\n             let path = Path::new(line[1..].split(' ').skip(1).next().unwrap());\n             let state = if line.starts_with('-') {\n                 State::NotInitialized\n-            } else if line.starts_with('*') {\n+            } else if line.starts_with('+') {\n                 State::OutOfSync\n             } else if line.starts_with(' ') {\n                 State::MaybeDirty"}, {"sha": "5191cd76010649caa6b1e942916606bab6d18831", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -42,17 +42,23 @@\n \n /// A cheap, reference-to-reference conversion.\n ///\n-/// `AsRef` is very similar to, but different than, `Borrow`. See\n+/// `AsRef` is very similar to, but different than, [`Borrow`]. See\n /// [the book][book] for more.\n ///\n /// [book]: ../../book/borrow-and-asref.html\n+/// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// returns an `Option<T>` or a `Result<T, E>`.\n+/// returns an [`Option<T>`] or a [`Result<T, E>`].\n+///\n+/// [`Option<T>`]: ../../std/option/enum.Option.html\n+/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n ///\n /// # Examples\n ///\n-/// Both `String` and `&str` implement `AsRef<str>`:\n+/// Both [`String`] and `&str` implement `AsRef<str>`:\n+///\n+/// [`String`]: ../../std/string/struct.String.html\n ///\n /// ```\n /// fn is_hello<T: AsRef<str>>(s: T) {\n@@ -81,7 +87,10 @@ pub trait AsRef<T: ?Sized> {\n /// A cheap, mutable reference-to-mutable reference conversion.\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// returns an `Option<T>` or a `Result<T, E>`.\n+/// returns an [`Option<T>`] or a [`Result<T, E>`].\n+///\n+/// [`Option<T>`]: ../../std/option/enum.Option.html\n+/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n ///\n /// # Generic Impls\n ///\n@@ -97,16 +106,16 @@ pub trait AsMut<T: ?Sized> {\n \n /// A conversion that consumes `self`, which may or may not be expensive.\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use `TryInto` or a dedicated\n-/// method which returns an `Option<T>` or a `Result<T, E>`.\n+/// **Note: this trait must not fail**. If the conversion can fail, use [`TryInto`] or a dedicated\n+/// method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n /// Library authors should not directly implement this trait, but should prefer implementing\n-/// the `From` trait, which offers greater flexibility and provides an equivalent `Into`\n+/// the [`From`][From] trait, which offers greater flexibility and provides an equivalent `Into`\n /// implementation for free, thanks to a blanket implementation in the standard library.\n ///\n /// # Examples\n ///\n-/// `String` implements `Into<Vec<u8>>`:\n+/// [`String`] implements `Into<Vec<u8>>`:\n ///\n /// ```\n /// fn is_hello<T: Into<Vec<u8>>>(s: T) {\n@@ -120,9 +129,15 @@ pub trait AsMut<T: ?Sized> {\n ///\n /// # Generic Impls\n ///\n-/// - `From<T> for U` implies `Into<U> for T`\n-/// - `into()` is reflexive, which means that `Into<T> for T` is implemented\n+/// - `[From<T>][From] for U` implies `Into<U> for T`\n+/// - [`into()`] is reflexive, which means that `Into<T> for T` is implemented\n ///\n+/// [`TryInto`]: trait.TryInto.html\n+/// [`Option<T>`]: ../../std/option/enum.Option.html\n+/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`String`]: ../../std/string/struct.String.html\n+/// [From]: trait.From.html\n+/// [`into()`]: trait.Into.html#tymethod.into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n     /// Performs the conversion.\n@@ -132,12 +147,12 @@ pub trait Into<T>: Sized {\n \n /// Construct `Self` via a conversion.\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use `TryFrom` or a dedicated\n-/// method which returns an `Option<T>` or a `Result<T, E>`.\n+/// **Note: this trait must not fail**. If the conversion can fail, use [`TryFrom`] or a dedicated\n+/// method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n /// # Examples\n ///\n-/// `String` implements `From<&str>`:\n+/// [`String`] implements `From<&str>`:\n ///\n /// ```\n /// let string = \"hello\".to_string();\n@@ -147,9 +162,15 @@ pub trait Into<T>: Sized {\n /// ```\n /// # Generic impls\n ///\n-/// - `From<T> for U` implies `Into<U> for T`\n-/// - `from()` is reflexive, which means that `From<T> for T` is implemented\n+/// - `From<T> for U` implies `[Into<U>] for T`\n+/// - [`from()`] is reflexive, which means that `From<T> for T` is implemented\n ///\n+/// [`TryFrom`]: trait.TryFrom.html\n+/// [`Option<T>`]: ../../std/option/enum.Option.html\n+/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`String`]: ../../std/string/struct.String.html\n+/// [Into<U>]: trait.Into.html\n+/// [`from()`]: trait.From.html#tymethod.from\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n@@ -160,8 +181,10 @@ pub trait From<T>: Sized {\n /// An attempted conversion that consumes `self`, which may or may not be expensive.\n ///\n /// Library authors should not directly implement this trait, but should prefer implementing\n-/// the `TryFrom` trait, which offers greater flexibility and provides an equivalent `TryInto`\n+/// the [`TryFrom`] trait, which offers greater flexibility and provides an equivalent `TryInto`\n /// implementation for free, thanks to a blanket implementation in the standard library.\n+///\n+/// [`TryFrom`]: trait.TryFrom.html\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error."}, {"sha": "2bb0c3c04e02c845d630e0dc189bec1e536dcac1", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -1564,24 +1564,66 @@ rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `BitAndAssign`. When `Foo &= Foo` happens, it ends up\n-/// calling `bitand_assign`, and therefore, `main` prints `Bitwise And-ing!`.\n+/// In this example, the `&=` operator is lifted to a trivial `Scalar` type.\n ///\n /// ```\n /// use std::ops::BitAndAssign;\n ///\n-/// struct Foo;\n+/// #[derive(Debug, PartialEq)]\n+/// struct Scalar(bool);\n ///\n-/// impl BitAndAssign for Foo {\n-///     fn bitand_assign(&mut self, _rhs: Foo) {\n-///         println!(\"Bitwise And-ing!\");\n+/// impl BitAndAssign for Scalar {\n+///     // rhs is the \"right-hand side\" of the expression `a &= b`\n+///     fn bitand_assign(&mut self, rhs: Self) {\n+///         *self = Scalar(self.0 & rhs.0)\n ///     }\n /// }\n ///\n-/// # #[allow(unused_assignments)]\n /// fn main() {\n-///     let mut foo = Foo;\n-///     foo &= Foo;\n+///     let mut scalar = Scalar(true);\n+///     scalar &= Scalar(true);\n+///     assert_eq!(scalar, Scalar(true));\n+///\n+///     let mut scalar = Scalar(true);\n+///     scalar &= Scalar(false);\n+///     assert_eq!(scalar, Scalar(false));\n+///\n+///     let mut scalar = Scalar(false);\n+///     scalar &= Scalar(true);\n+///     assert_eq!(scalar, Scalar(false));\n+///\n+///     let mut scalar = Scalar(false);\n+///     scalar &= Scalar(false);\n+///     assert_eq!(scalar, Scalar(false));\n+/// }\n+/// ```\n+///\n+/// In this example, the `BitAndAssign` trait is implemented for a\n+/// `BooleanVector` struct.\n+///\n+/// ```\n+/// use std::ops::BitAndAssign;\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// struct BooleanVector(Vec<bool>);\n+///\n+/// impl BitAndAssign for BooleanVector {\n+///     // rhs is the \"right-hand side\" of the expression `a &= b`\n+///     fn bitand_assign(&mut self, rhs: Self) {\n+///         assert_eq!(self.0.len(), rhs.0.len());\n+///         *self = BooleanVector(self.0\n+///                                   .iter()\n+///                                   .zip(rhs.0.iter())\n+///                                   .map(|(x, y)| *x && *y)\n+///                                   .collect());\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     let mut bv = BooleanVector(vec![true, true, false, false]);\n+///     bv &= BooleanVector(vec![true, false, true, false]);\n+///     let expected = BooleanVector(vec![true, false, false, false]);\n+///     assert_eq!(bv, expected);\n /// }\n /// ```\n #[lang = \"bitand_assign\"]"}, {"sha": "f7fe61896f85e84e03ca00f2c81052a61fe71a31", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -173,12 +173,16 @@ fn test_unsized_unique() {\n }\n \n #[test]\n-fn test_variadic_fnptr() {\n+#[allow(warnings)]\n+// Have a symbol for the test below. It doesn\u2019t need to be an actual variadic function, match the\n+// ABI, or even point to an actual executable code, because the function itself is never invoked.\n+#[no_mangle]\n+pub fn test_variadic_fnptr() {\n     use core::hash::{Hash, SipHasher};\n-    extern \"C\" {\n-        fn printf(_: *const u8, ...);\n+    extern {\n+        fn test_variadic_fnptr(_: u64, ...) -> f64;\n     }\n-    let p: unsafe extern \"C\" fn(*const u8, ...) = printf;\n+    let p: unsafe extern fn(u64, ...) -> f64 = test_variadic_fnptr;\n     let q = p.clone();\n     assert_eq!(p, q);\n     assert!(!(p < q));"}, {"sha": "91e0fd636c9c153d41bc5cfc67df4726a95524c8", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -27,7 +27,7 @@\n //!\n //! extern crate rustc;\n //!\n-//! use rustc::plugin::Registry;\n+//! use rustc_plugin::Registry;\n //!\n //! #[plugin_registrar]\n //! pub fn plugin_registrar(reg: &mut Registry) {"}, {"sha": "54efc4ae30a605b3e08a66f4f1de46ee25119ca7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -3349,7 +3349,11 @@ impl<'a> Resolver<'a> {\n         };\n \n         let mut err = match (old_binding.is_extern_crate(), binding.is_extern_crate()) {\n-            (true, true) => struct_span_err!(self.session, span, E0259, \"{}\", msg),\n+            (true, true) => {\n+                let mut e = struct_span_err!(self.session, span, E0259, \"{}\", msg);\n+                e.span_label(span, &format!(\"`{}` was already imported\", name));\n+                e\n+            },\n             (true, _) | (_, true) if binding.is_import() || old_binding.is_import() => {\n                 let mut e = struct_span_err!(self.session, span, E0254, \"{}\", msg);\n                 e.span_label(span, &\"already imported\");"}, {"sha": "e04bd581f4648d404fd1be3f06334e628515721d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -515,12 +515,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 // defaults. This will lead to an ICE if we are not\n                 // careful!\n                 if default_needs_object_self(def) {\n-                    span_err!(tcx.sess, span, E0393,\n-                              \"the type parameter `{}` must be explicitly specified \\\n-                               in an object type because its default value `{}` references \\\n-                               the type `Self`\",\n-                              def.name,\n-                              default);\n+                    struct_span_err!(tcx.sess, span, E0393,\n+                                     \"the type parameter `{}` must be explicitly specified\",\n+                                     def.name)\n+                        .span_label(span, &format!(\"missing reference to `{}`\", def.name))\n+                        .note(&format!(\"because of the default `Self` reference, \\\n+                                        type parameters must be specified on object types\"))\n+                        .emit();\n                     tcx.types.err\n                 } else {\n                     // This is a default type parameter."}, {"sha": "0782601e1796e21179de6e5a1f29503f0e08b956", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -3592,7 +3592,6 @@ mod tests {\n         }\n     }\n     #[test]\n-    #[cfg_attr(target_pointer_width = \"32\", ignore)] // FIXME(#14064)\n     fn test_streaming_parser() {\n         assert_stream_equal(\n             r#\"{ \"foo\":\"bar\", \"array\" : [0, 1, 2, 3, 4, 5], \"idents\":[null,true,false]}\"#,\n@@ -3631,7 +3630,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg_attr(target_pointer_width = \"32\", ignore)] // FIXME(#14064)\n     fn test_read_object_streaming() {\n         assert_eq!(last_event(\"{ \"),      Error(SyntaxError(EOFWhileParsingObject, 1, 3)));\n         assert_eq!(last_event(\"{1\"),      Error(SyntaxError(KeyMustBeAString,      1, 2)));\n@@ -3715,7 +3713,6 @@ mod tests {\n         );\n     }\n     #[test]\n-    #[cfg_attr(target_pointer_width = \"32\", ignore)] // FIXME(#14064)\n     fn test_read_array_streaming() {\n         assert_stream_equal(\n             \"[]\","}, {"sha": "698ec4f1b7389cbc3cabddb22b34a14001400d69", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -1510,8 +1510,11 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n \n /// Returns an iterator over the entries within a directory.\n ///\n-/// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n-/// be encountered after an iterator is initially constructed.\n+/// The iterator will yield instances of [`io::Result`]`<`[`DirEntry`]`>`.\n+/// New errors may be encountered after an iterator is initially constructed.\n+///\n+/// [`io::Result`]: ../io/type.Result.html\n+/// [`DirEntry`]: struct.DirEntry.html\n ///\n /// # Platform-specific behavior\n ///"}, {"sha": "ddf0030858eda548072670c6413dec6fdfbf5980", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -79,7 +79,7 @@ struct Custom {\n /// It is used with the [`io::Error`] type.\n ///\n /// [`io::Error`]: struct.Error.html\n-#[derive(Copy, PartialEq, Eq, Clone, Debug)]\n+#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n pub enum ErrorKind {\n@@ -161,7 +161,8 @@ pub enum ErrorKind {\n     #[stable(feature = \"read_exact\", since = \"1.6.0\")]\n     UnexpectedEof,\n \n-    /// Any I/O error not part of this list.\n+    /// A marker variant that tells the compiler that users of this enum cannot\n+    /// match it exhaustively.\n     #[unstable(feature = \"io_error_internals\",\n                reason = \"better expressed through extensible enums that this \\\n                          enum cannot be exhaustively matched against\","}, {"sha": "9a5b1da0f08f4122f3b6b7b8613eaf822dcce50b", "filename": "src/libstd/path.rs", "status": "modified", "additions": 144, "deletions": 32, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -1028,11 +1028,16 @@ impl<'a> cmp::Ord for Components<'a> {\n // Basic types and traits\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// An owned, mutable path (akin to `String`).\n+/// An owned, mutable path (akin to [`String`]).\n ///\n-/// This type provides methods like `push` and `set_extension` that mutate the\n-/// path in place. It also implements `Deref` to `Path`, meaning that all\n-/// methods on `Path` slices are available on `PathBuf` values as well.\n+/// This type provides methods like [`push`] and [`set_extension`] that mutate\n+/// the path in place. It also implements [`Deref`] to [`Path`], meaning that\n+/// all methods on [`Path`] slices are available on `PathBuf` values as well.\n+///\n+/// [`String`]: ../string/struct.String.html\n+/// [`Path`]: struct.Path.html\n+/// [`push`]: struct.PathBuf.html#method.push\n+/// [`set_extension`]: struct.PathBuf.html#method.set_extension\n ///\n /// More details about the overall approach can be found in\n /// the module documentation.\n@@ -1059,12 +1064,31 @@ impl PathBuf {\n     }\n \n     /// Allocates an empty `PathBuf`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let path = PathBuf::new();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> PathBuf {\n         PathBuf { inner: OsString::new() }\n     }\n \n-    /// Coerces to a `Path` slice.\n+    /// Coerces to a [`Path`] slice.\n+    ///\n+    /// [`Path`]: struct.Path.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::{Path, PathBuf};\n+    ///\n+    /// let p = PathBuf::from(\"/test\");\n+    /// assert_eq!(Path::new(\"/test\"), p.as_path());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_path(&self) -> &Path {\n         self\n@@ -1129,10 +1153,26 @@ impl PathBuf {\n         self.inner.push(path);\n     }\n \n-    /// Truncate `self` to `self.parent()`.\n+    /// Truncate `self` to [`self.parent()`].\n     ///\n-    /// Returns false and does nothing if `self.file_name()` is `None`.\n+    /// Returns false and does nothing if [`self.file_name()`] is `None`.\n     /// Otherwise, returns `true`.\n+    ///\n+    /// [`self.parent()`]: struct.PathBuf.html#method.parent\n+    /// [`self.file_name()`]: struct.PathBuf.html#method.file_name\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::{Path, PathBuf};\n+    ///\n+    /// let mut p = PathBuf::from(\"/test/test.rs\");\n+    ///\n+    /// p.pop();\n+    /// assert_eq!(Path::new(\"/test\"), p.as_path());\n+    /// p.pop();\n+    /// assert_eq!(Path::new(\"/\"), p.as_path());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pop(&mut self) -> bool {\n         match self.parent().map(|p| p.as_u8_slice().len()) {\n@@ -1144,11 +1184,13 @@ impl PathBuf {\n         }\n     }\n \n-    /// Updates `self.file_name()` to `file_name`.\n+    /// Updates [`self.file_name()`] to `file_name`.\n     ///\n-    /// If `self.file_name()` was `None`, this is equivalent to pushing\n+    /// If [`self.file_name()`] was `None`, this is equivalent to pushing\n     /// `file_name`.\n     ///\n+    /// [`self.file_name()`]: struct.PathBuf.html#method.file_name\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1175,12 +1217,29 @@ impl PathBuf {\n         self.push(file_name);\n     }\n \n-    /// Updates `self.extension()` to `extension`.\n+    /// Updates [`self.extension()`] to `extension`.\n+    ///\n+    /// If [`self.file_name()`] is `None`, does nothing and returns `false`.\n+    ///\n+    /// Otherwise, returns `true`; if [`self.extension()`] is `None`, the\n+    /// extension is added; otherwise it is replaced.\n+    ///\n+    /// [`self.file_name()`]: struct.PathBuf.html#method.file_name\n+    /// [`self.extension()`]: struct.PathBuf.html#method.extension\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::{Path, PathBuf};\n     ///\n-    /// If `self.file_name()` is `None`, does nothing and returns `false`.\n+    /// let mut p = PathBuf::from(\"/feel/the\");\n     ///\n-    /// Otherwise, returns `true`; if `self.extension()` is `None`, the extension\n-    /// is added; otherwise it is replaced.\n+    /// p.set_extension(\"force\");\n+    /// assert_eq!(Path::new(\"/feel/the.force\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"dark_side\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark_side\"), p.as_path());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool {\n         self._set_extension(extension.as_ref())\n@@ -1205,7 +1264,18 @@ impl PathBuf {\n         true\n     }\n \n-    /// Consumes the `PathBuf`, yielding its internal `OsString` storage.\n+    /// Consumes the `PathBuf`, yielding its internal [`OsString`] storage.\n+    ///\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let p = PathBuf::from(\"/the/head\");\n+    /// let os_str = p.into_os_string();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_os_string(self) -> OsString {\n         self.inner\n@@ -1343,7 +1413,7 @@ impl Into<OsString> for PathBuf {\n     }\n }\n \n-/// A slice of a path (akin to `str`).\n+/// A slice of a path (akin to [`str`]).\n ///\n /// This type supports a number of operations for inspecting a path, including\n /// breaking the path into its components (separated by `/` or `\\`, depending on\n@@ -1352,7 +1422,10 @@ impl Into<OsString> for PathBuf {\n /// the module documentation.\n ///\n /// This is an *unsized* type, meaning that it must always be used behind a\n-/// pointer like `&` or `Box`.\n+/// pointer like `&` or [`Box`].\n+///\n+/// [`str`]: ../primitive.str.html\n+/// [`Box`]: ../boxed/struct.Box.html\n ///\n /// # Examples\n ///\n@@ -1414,7 +1487,9 @@ impl Path {\n         unsafe { mem::transmute(s.as_ref()) }\n     }\n \n-    /// Yields the underlying `OsStr` slice.\n+    /// Yields the underlying [`OsStr`] slice.\n+    ///\n+    /// [`OsStr`]: ../ffi/struct.OsStr.html\n     ///\n     /// # Examples\n     ///\n@@ -1429,10 +1504,12 @@ impl Path {\n         &self.inner\n     }\n \n-    /// Yields a `&str` slice if the `Path` is valid unicode.\n+    /// Yields a [`&str`] slice if the `Path` is valid unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity.\n     ///\n+    /// [`&str`]: ../primitive.str.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1446,10 +1523,12 @@ impl Path {\n         self.inner.to_str()\n     }\n \n-    /// Converts a `Path` to a `Cow<str>`.\n+    /// Converts a `Path` to a [`Cow<str>`].\n     ///\n     /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n     ///\n+    /// [`Cow<str>`]: ../borrow/enum.Cow.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1463,7 +1542,9 @@ impl Path {\n         self.inner.to_string_lossy()\n     }\n \n-    /// Converts a `Path` to an owned `PathBuf`.\n+    /// Converts a `Path` to an owned [`PathBuf`].\n+    ///\n+    /// [`PathBuf`]: struct.PathBuf.html\n     ///\n     /// # Examples\n     ///\n@@ -1611,6 +1692,18 @@ impl Path {\n     ///\n     /// If `base` is not a prefix of `self` (i.e. `starts_with`\n     /// returns `false`), returns `Err`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::path::Path;\n+    ///\n+    /// let path = Path::new(\"/test/haha/foo.txt\");\n+    ///\n+    /// assert_eq!(path.strip_prefix(\"/test\"), Ok(Path::new(\"haha/foo.txt\")));\n+    /// assert_eq!(path.strip_prefix(\"test\").is_ok(), false);\n+    /// assert_eq!(path.strip_prefix(\"/haha\").is_ok(), false);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"path_strip_prefix\")]\n     pub fn strip_prefix<'a, P: ?Sized>(&'a self, base: &'a P)\n                                        -> Result<&'a Path, StripPrefixError>\n@@ -1672,7 +1765,9 @@ impl Path {\n         iter_after(self.components().rev(), child.components().rev()).is_some()\n     }\n \n-    /// Extracts the stem (non-extension) portion of `self.file_name()`.\n+    /// Extracts the stem (non-extension) portion of [`self.file_name()`].\n+    ///\n+    /// [`self.file_name()`]: struct.Path.html#method.file_name\n     ///\n     /// The stem is:\n     ///\n@@ -1695,7 +1790,9 @@ impl Path {\n         self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.or(after))\n     }\n \n-    /// Extracts the extension of `self.file_name()`, if possible.\n+    /// Extracts the extension of [`self.file_name()`], if possible.\n+    ///\n+    /// [`self.file_name()`]: struct.Path.html#method.file_name\n     ///\n     /// The extension is:\n     ///\n@@ -1718,9 +1815,12 @@ impl Path {\n         self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.and(after))\n     }\n \n-    /// Creates an owned `PathBuf` with `path` adjoined to `self`.\n+    /// Creates an owned [`PathBuf`] with `path` adjoined to `self`.\n+    ///\n+    /// See [`PathBuf::push`] for more details on what it means to adjoin a path.\n     ///\n-    /// See `PathBuf::push` for more details on what it means to adjoin a path.\n+    /// [`PathBuf`]: struct.PathBuf.html\n+    /// [`PathBuf::push`]: struct.PathBuf.html#method.push\n     ///\n     /// # Examples\n     ///\n@@ -1740,9 +1840,12 @@ impl Path {\n         buf\n     }\n \n-    /// Creates an owned `PathBuf` like `self` but with the given file name.\n+    /// Creates an owned [`PathBuf`] like `self` but with the given file name.\n     ///\n-    /// See `PathBuf::set_file_name` for more details.\n+    /// See [`PathBuf::set_file_name`] for more details.\n+    ///\n+    /// [`PathBuf`]: struct.PathBuf.html\n+    /// [`PathBuf::set_file_name`]: struct.PathBuf.html#method.set_file_name\n     ///\n     /// # Examples\n     ///\n@@ -1763,9 +1866,12 @@ impl Path {\n         buf\n     }\n \n-    /// Creates an owned `PathBuf` like `self` but with the given extension.\n+    /// Creates an owned [`PathBuf`] like `self` but with the given extension.\n+    ///\n+    /// See [`PathBuf::set_extension`] for more details.\n     ///\n-    /// See `PathBuf::set_extension` for more details.\n+    /// [`PathBuf`]: struct.PathBuf.html\n+    /// [`PathBuf::set_extension`]: struct.PathBuf.html#method.set_extension\n     ///\n     /// # Examples\n     ///\n@@ -1813,7 +1919,9 @@ impl Path {\n         }\n     }\n \n-    /// Produce an iterator over the path's components viewed as `OsStr` slices.\n+    /// Produce an iterator over the path's components viewed as [`OsStr`] slices.\n+    ///\n+    /// [`OsStr`]: ../ffi/struct.OsStr.html\n     ///\n     /// # Examples\n     ///\n@@ -1832,9 +1940,11 @@ impl Path {\n         Iter { inner: self.components() }\n     }\n \n-    /// Returns an object that implements `Display` for safely printing paths\n+    /// Returns an object that implements [`Display`] for safely printing paths\n     /// that may contain non-Unicode data.\n     ///\n+    /// [`Display`]: ../fmt/trait.Display.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1896,11 +2006,13 @@ impl Path {\n \n     /// Returns an iterator over the entries within a directory.\n     ///\n-    /// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n-    /// be encountered after an iterator is initially constructed.\n+    /// The iterator will yield instances of [`io::Result`]`<`[`DirEntry`]`>`. New\n+    /// errors may be encountered after an iterator is initially constructed.\n     ///\n     /// This is an alias to [`fs::read_dir`].\n     ///\n+    /// [`io::Result`]: ../io/type.Result.html\n+    /// [`DirEntry`]: ../fs/struct.DirEntry.html\n     /// [`fs::read_dir`]: ../fs/fn.read_dir.html\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn read_dir(&self) -> io::Result<fs::ReadDir> {"}, {"sha": "d3e876e2527fe4b2f6132a7c8dd5a7f22ef5c446", "filename": "src/test/compile-fail/E0259.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0259.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -9,6 +9,10 @@\n // except according to those terms.\n \n extern crate collections;\n-extern crate libc as collections; //~ ERROR E0259\n+//~^ NOTE previous import of `collections` here\n+\n+extern crate libc as collections;\n+//~^ ERROR E0259\n+//~| NOTE `collections` was already imported\n \n fn main() {}"}, {"sha": "f045e873519cd44f6d8286737040676974a5fdee", "filename": "src/test/compile-fail/E0393.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2FE0393.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2FE0393.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0393.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -10,7 +10,10 @@\n \n trait A<T=Self> {}\n \n-fn together_we_will_rule_the_galaxy(son: &A) {} //~ ERROR E0393\n+fn together_we_will_rule_the_galaxy(son: &A) {}\n+//~^ ERROR E0393\n+//~| NOTE missing reference to `T`\n+//~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n \n fn main() {\n }"}, {"sha": "935f3480db24abfd6cd3d845e1e757fcbc06f679", "filename": "src/test/compile-fail/issue-21950.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2Fissue-21950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2Fissue-21950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21950.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -15,6 +15,9 @@ use std::ops::Add;\n fn main() {\n     let x = &10 as\n             &Add;\n-            //~^ ERROR the type parameter `RHS` must be explicitly specified in an object type because its default value `Self` references the type `Self`\n-            //~| ERROR the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n+            //~^ ERROR E0393\n+            //~| NOTE missing reference to `RHS`\n+            //~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n+            //~| ERROR E0191\n+            //~| NOTE missing associated type `Output` value\n }"}, {"sha": "51f342e3f0a435dc79a650a955ed204babe18cfa", "filename": "src/test/compile-fail/issue-22370.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2Fissue-22370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2Fissue-22370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22370.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -13,6 +13,8 @@\n trait A<T=Self> {}\n \n fn f(a: &A) {}\n-//~^ ERROR the type parameter `T` must be explicitly specified in an object type because its default value `Self` references the type `Self`\n+//~^ ERROR E0393\n+//~| NOTE missing reference to `T`\n+//~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n \n fn main() {}"}, {"sha": "45b110bf5631ddcb251bae2f69f6bfd517be8997", "filename": "src/test/compile-fail/issue-22560.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -13,9 +13,13 @@\n use std::ops::{Add, Sub};\n \n type Test = Add +\n-            //~^ ERROR the type parameter `RHS` must be explicitly specified in an object type because its default value `Self` references the type `Self`\n-            //~^^ ERROR the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified [E0191]\n+            //~^ ERROR E0393\n+            //~| NOTE missing reference to `RHS`\n+            //~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n+            //~| ERROR E0191\n+            //~| NOTE missing associated type `Output` value\n             Sub;\n-            //~^ ERROR only the builtin traits can be used as closure or object bounds\n+            //~^ ERROR E0225\n+            //~| NOTE non-builtin trait used as bounds\n \n fn main() { }"}, {"sha": "13ce41f4dcc543f8a210d9ee948a72271c4b77fd", "filename": "src/test/compile-fail/issue-28324.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28324.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    static error_message_count: u32;\n+}\n+\n+pub static BAZ: u32 = *&error_message_count;\n+//~^ ERROR cannot refer to other statics by value\n+\n+fn main() {}"}, {"sha": "8a2bbc83c424e3eb952b4a0e20a125379d92f01f", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3135b7877a66e72ac4833588eb8654aa155876e8/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=3135b7877a66e72ac4833588eb8654aa155876e8", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n     let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 && args[1] == \"signal\" {\n         // Raise a segfault.\n-        unsafe { *(0 as *mut isize) = 0; }\n+        unsafe { *(1 as *mut isize) = 0; }\n     } else {\n         let status = Command::new(&args[0]).arg(\"signal\").status().unwrap();\n         assert!(status.code().is_none());"}]}