{"sha": "a9c14dc440aaf096cd4d69ede55799383b0f0a1e", "node_id": "C_kwDOAAsO6NoAKGE5YzE0ZGM0NDBhYWYwOTZjZDRkNjllZGU1NTc5OTM4M2IwZjBhMWU", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-23T15:34:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-13T17:42:53Z"}, "message": "rustdoc: Use `Visibility::is_public` more", "tree": {"sha": "d939df1721db4f6f7384cf7a6736e229a103da85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d939df1721db4f6f7384cf7a6736e229a103da85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9c14dc440aaf096cd4d69ede55799383b0f0a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c14dc440aaf096cd4d69ede55799383b0f0a1e", "html_url": "https://github.com/rust-lang/rust/commit/a9c14dc440aaf096cd4d69ede55799383b0f0a1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9c14dc440aaf096cd4d69ede55799383b0f0a1e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7689857884c8d74f25517373f2d3d4c6fe055614", "url": "https://api.github.com/repos/rust-lang/rust/commits/7689857884c8d74f25517373f2d3d4c6fe055614", "html_url": "https://github.com/rust-lang/rust/commit/7689857884c8d74f25517373f2d3d4c6fe055614"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "09463ec85a23b38d15431792384a4b4eedacea01", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9c14dc440aaf096cd4d69ede55799383b0f0a1e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9c14dc440aaf096cd4d69ede55799383b0f0a1e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=a9c14dc440aaf096cd4d69ede55799383b0f0a1e", "patch": "@@ -134,24 +134,21 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n                 // using privacy, private traits and impls from other crates are never documented in\n                 // the current crate, and links in their doc comments are not resolved.\n                 for &def_id in &all_traits {\n-                    if self.resolver.cstore().visibility_untracked(def_id) == Visibility::Public {\n+                    if self.resolver.cstore().visibility_untracked(def_id).is_public() {\n                         self.resolve_doc_links_extern_impl(def_id, false);\n                     }\n                 }\n                 for &(trait_def_id, impl_def_id, simplified_self_ty) in &all_trait_impls {\n-                    if self.resolver.cstore().visibility_untracked(trait_def_id)\n-                        == Visibility::Public\n+                    if self.resolver.cstore().visibility_untracked(trait_def_id).is_public()\n                         && simplified_self_ty.and_then(|ty| ty.def()).map_or(true, |ty_def_id| {\n-                            self.resolver.cstore().visibility_untracked(ty_def_id)\n-                                == Visibility::Public\n+                            self.resolver.cstore().visibility_untracked(ty_def_id).is_public()\n                         })\n                     {\n                         self.resolve_doc_links_extern_impl(impl_def_id, false);\n                     }\n                 }\n                 for (ty_def_id, impl_def_id) in all_inherent_impls {\n-                    if self.resolver.cstore().visibility_untracked(ty_def_id) == Visibility::Public\n-                    {\n+                    if self.resolver.cstore().visibility_untracked(ty_def_id).is_public() {\n                         self.resolve_doc_links_extern_impl(impl_def_id, true);\n                     }\n                 }\n@@ -178,8 +175,7 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n             self.resolver.cstore().associated_item_def_ids_untracked(def_id, self.sess),\n         );\n         for assoc_def_id in assoc_item_def_ids {\n-            if !is_inherent\n-                || self.resolver.cstore().visibility_untracked(assoc_def_id) == Visibility::Public\n+            if !is_inherent || self.resolver.cstore().visibility_untracked(assoc_def_id).is_public()\n             {\n                 self.resolve_doc_links_extern_outer(assoc_def_id, def_id);\n             }\n@@ -279,7 +275,7 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n \n         for child in self.resolver.module_children_or_reexports(module_id) {\n             // This condition should give a superset of `denied` from `fn clean_use_statement`.\n-            if child.vis == Visibility::Public\n+            if child.vis.is_public()\n                 || self.document_private_items\n                     && child.vis != Visibility::Restricted(module_id)\n                     && module_id.is_local()"}]}