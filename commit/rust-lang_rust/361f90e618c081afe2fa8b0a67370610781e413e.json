{"sha": "361f90e618c081afe2fa8b0a67370610781e413e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MWY5MGU2MThjMDgxYWZlMmZhOGIwYTY3MzcwNjEwNzgxZTQxM2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T22:51:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T22:51:09Z"}, "message": "rustdoc: Sort the items so modules are printed last", "tree": {"sha": "5e8115b759ee0a35f14a11f606c852385decd9e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e8115b759ee0a35f14a11f606c852385decd9e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/361f90e618c081afe2fa8b0a67370610781e413e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/361f90e618c081afe2fa8b0a67370610781e413e", "html_url": "https://github.com/rust-lang/rust/commit/361f90e618c081afe2fa8b0a67370610781e413e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/361f90e618c081afe2fa8b0a67370610781e413e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ac2e1043c3a4e9ba0058f0b67798821d0118ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ac2e1043c3a4e9ba0058f0b67798821d0118ee", "html_url": "https://github.com/rust-lang/rust/commit/07ac2e1043c3a4e9ba0058f0b67798821d0118ee"}], "stats": {"total": 90, "additions": 81, "deletions": 9}, "files": [{"sha": "a67e43525a41cfc4c1a923cd7773a28a99569cac", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 80, "deletions": 8, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/361f90e618c081afe2fa8b0a67370610781e413e/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361f90e618c081afe2fa8b0a67370610781e413e/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=361f90e618c081afe2fa8b0a67370610781e413e", "patch": "@@ -5,16 +5,65 @@ import std::io::writer_util;\n \n export mk_pass;\n \n+// FIXME: This is a really convoluted interface to work around trying\n+// to get a writer into a unique closure and then being able to test\n+// what was written afterward\n fn mk_pass(\n-    writer: fn~() -> io::writer\n+    give_writer: fn~(fn(io::writer))\n ) -> pass {\n-    ret fn~(\n-        _srv: astsrv::srv,\n+    fn~(\n+        srv: astsrv::srv,\n         doc: doc::cratedoc\n     ) -> doc::cratedoc {\n-        write_markdown(doc, writer());\n+\n+        fn mods_last(item1: doc::itemtag, item2: doc::itemtag) -> bool {\n+            fn is_mod(item: doc::itemtag) -> bool {\n+                alt item {\n+                  doc::modtag(_) { true }\n+                  _ { false }\n+                }\n+            }\n+\n+            let lteq = !is_mod(item1) || is_mod(item2);\n+            lteq\n+        }\n+\n+        give_writer {|writer|\n+            // Sort the items so mods come last. All mods will be\n+            // output at the same header level so sorting mods last\n+            // makes the headers come out nested correctly.\n+            let sorted_doc = sort_pass::mk_pass(mods_last)(srv, doc);\n+\n+            write_markdown(sorted_doc, writer);\n+        }\n         doc\n-    };\n+    }\n+}\n+\n+#[test]\n+fn should_write_modules_last() {\n+    /*\n+    Because the markdown pass writes all modules at the same level of\n+    indentation (it doesn't 'nest' them), we need to make sure that we\n+    write all of the modules contained in each module after all other\n+    types of items, or else the header nesting will end up wrong, with\n+    modules appearing to contain items that they do not.\n+    */\n+    let markdown = test::render(\n+        \"mod a { }\\\n+         fn b() { }\\\n+         mod c { }\\\n+         fn d() { }\"\n+    );\n+\n+    let idx_a = str::find(markdown, \"# Module `a`\");\n+    let idx_b = str::find(markdown, \"## Function `b`\");\n+    let idx_c = str::find(markdown, \"# Module `c`\");\n+    let idx_d = str::find(markdown, \"## Function `d`\");\n+\n+    assert idx_b < idx_d;\n+    assert idx_d < idx_a;\n+    assert idx_a < idx_c;\n }\n \n type ctxt = {\n@@ -487,13 +536,13 @@ fn should_write_resource_args() {\n #[cfg(test)]\n mod test {\n     fn render(source: str) -> str {\n-        let doc = create_doc(source);\n-        let markdown = write_markdown_str(doc);\n+        let (srv, doc) = create_doc_srv(source);\n+        let markdown = write_markdown_str_srv(srv, doc);\n         #debug(\"markdown: %s\", markdown);\n         markdown\n     }\n \n-    fn create_doc(source: str) -> doc::cratedoc {\n+    fn create_doc_srv(source: str) -> (astsrv::srv, doc::cratedoc) {\n         let srv = astsrv::mk_srv_from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         #debug(\"doc (extract): %?\", doc);\n@@ -503,6 +552,11 @@ mod test {\n         #debug(\"doc (path): %?\", doc);\n         let doc = attr_pass::mk_pass()(srv, doc);\n         #debug(\"doc (attr): %?\", doc);\n+        (srv, doc)\n+    }\n+\n+    fn create_doc(source: str) -> doc::cratedoc {\n+        let (_, doc) = create_doc_srv(source);\n         doc\n     }\n \n@@ -515,6 +569,24 @@ mod test {\n         ret io::mem_buffer_str(buffer);\n     }\n \n+    fn write_markdown_str_srv(\n+        srv: astsrv::srv,\n+        doc: doc::cratedoc\n+    ) -> str {\n+        let port = comm::port();\n+        let chan = comm::chan(port);\n+\n+        let pass = mk_pass {|f|\n+            let buffer = io::mk_mem_buffer();\n+            let writer = io::mem_buffer_writer(buffer);\n+            f(writer);\n+            let result = io::mem_buffer_str(buffer);\n+            comm::send(chan, result);\n+        };\n+        pass(srv, doc);\n+        ret comm::recv(port);\n+    }\n+\n     #[test]\n     fn write_markdown_should_write_crate_header() {\n         let srv = astsrv::mk_srv_from_str(\"\");"}, {"sha": "a27cd67486345767c30d69f9a5c8eb7f017eb6cb", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361f90e618c081afe2fa8b0a67370610781e413e/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361f90e618c081afe2fa8b0a67370610781e413e/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=361f90e618c081afe2fa8b0a67370610781e413e", "patch": "@@ -105,6 +105,6 @@ fn run(source_file: str) {\n         desc_to_brief_pass::mk_pass(),\n         trim_pass::mk_pass(),\n         unindent_pass::mk_pass(),\n-        markdown_pass::mk_pass {|| std::io:: stdout()}\n+        markdown_pass::mk_pass {|f| f(std::io:: stdout()) }\n     ]);\n }\n\\ No newline at end of file"}]}