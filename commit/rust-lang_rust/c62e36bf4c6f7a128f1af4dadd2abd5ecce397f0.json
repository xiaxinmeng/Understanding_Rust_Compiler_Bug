{"sha": "c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MmUzNmJmNGM2ZjdhMTI4ZjFhZjRkYWRkMmFiZDVlY2NlMzk3ZjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-20T16:48:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-20T16:48:03Z"}, "message": "make rustc_layout also work for type definitions", "tree": {"sha": "194641ff8cff76197837d95c5269a7b9048d318d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/194641ff8cff76197837d95c5269a7b9048d318d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0", "html_url": "https://github.com/rust-lang/rust/commit/c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9f60bcf67ea175ab3298608d8a94563e1ac0f6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f60bcf67ea175ab3298608d8a94563e1ac0f6d", "html_url": "https://github.com/rust-lang/rust/commit/d9f60bcf67ea175ab3298608d8a94563e1ac0f6d"}], "stats": {"total": 248, "additions": 238, "deletions": 10}, "files": [{"sha": "32561c6bd87e79f28077579cc5f852b573226810", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0", "patch": "@@ -29,12 +29,18 @@ impl ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         let item_def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n-        if let ItemKind::TyAlias(..) = item.kind {\n-            for attr in self.tcx.get_attrs(item_def_id).iter() {\n-                if attr.check_name(sym::rustc_layout) {\n-                    self.dump_layout_of(item_def_id, item, attr);\n+        match item.kind {\n+            ItemKind::TyAlias(..) |\n+            ItemKind::Enum(..) |\n+            ItemKind::Struct(..) |\n+            ItemKind::Union(..) => {\n+                for attr in self.tcx.get_attrs(item_def_id).iter() {\n+                    if attr.check_name(sym::rustc_layout) {\n+                        self.dump_layout_of(item_def_id, item, attr);\n+                    }\n                 }\n             }\n+            _ => {}\n         }\n     }\n "}, {"sha": "047002c9c99e2ae94f536d681a8179d57b3757ae", "filename": "src/test/ui/layout/debug.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.rs?ref=c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0", "patch": "@@ -1,7 +1,14 @@\n #![feature(never_type, rustc_attrs)]\n #![crate_type = \"lib\"]\n \n-enum E { Foo, Bar(!, i32, i32) }\n+#[rustc_layout(debug)]\n+enum E { Foo, Bar(!, i32, i32) } //~ ERROR: layout debugging\n+\n+#[rustc_layout(debug)]\n+struct S { f1: i32, f2: (), f3: i32 } //~ ERROR: layout debugging\n+\n+#[rustc_layout(debug)]\n+union U { f1: (i32, i32), f3: i32 } //~ ERROR: layout debugging\n \n #[rustc_layout(debug)]\n-type Test = E; //~ ERROR: layout debugging\n+type Test = Result<i32, i32>; //~ ERROR: layout debugging"}, {"sha": "6e704528c4130bb01a33f7bf830e51b31128a523", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 219, "deletions": 4, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=c62e36bf4c6f7a128f1af4dadd2abd5ecce397f0", "patch": "@@ -111,10 +111,225 @@ error: layout debugging: LayoutDetails {\n         raw: 12,\n     },\n }\n-  --> $DIR/debug.rs:7:1\n+  --> $DIR/debug.rs:5:1\n    |\n-LL | type Test = E;\n-   | ^^^^^^^^^^^^^^\n+LL | enum E { Foo, Bar(!, i32, i32) }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: layout debugging: LayoutDetails {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+            Size {\n+                raw: 0,\n+            },\n+            Size {\n+                raw: 4,\n+            },\n+        ],\n+        memory_index: [\n+            1,\n+            0,\n+            2,\n+        ],\n+    },\n+    variants: Single {\n+        index: 0,\n+    },\n+    abi: ScalarPair(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 0..=4294967295,\n+        },\n+        Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 0..=4294967295,\n+        },\n+    ),\n+    largest_niche: None,\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: Align {\n+            pow2: 3,\n+        },\n+    },\n+    size: Size {\n+        raw: 8,\n+    },\n+}\n+  --> $DIR/debug.rs:8:1\n+   |\n+LL | struct S { f1: i32, f2: (), f3: i32 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout debugging: LayoutDetails {\n+    fields: Union(\n+        2,\n+    ),\n+    variants: Single {\n+        index: 0,\n+    },\n+    abi: Aggregate {\n+        sized: true,\n+    },\n+    largest_niche: None,\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: Align {\n+            pow2: 3,\n+        },\n+    },\n+    size: Size {\n+        raw: 8,\n+    },\n+}\n+  --> $DIR/debug.rs:11:1\n+   |\n+LL | union U { f1: (i32, i32), f3: i32 }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout debugging: LayoutDetails {\n+    fields: Arbitrary {\n+        offsets: [\n+            Size {\n+                raw: 0,\n+            },\n+        ],\n+        memory_index: [\n+            0,\n+        ],\n+    },\n+    variants: Multiple {\n+        discr: Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 0..=1,\n+        },\n+        discr_kind: Tag,\n+        discr_index: 0,\n+        variants: [\n+            LayoutDetails {\n+                fields: Arbitrary {\n+                    offsets: [\n+                        Size {\n+                            raw: 4,\n+                        },\n+                    ],\n+                    memory_index: [\n+                        0,\n+                    ],\n+                },\n+                variants: Single {\n+                    index: 0,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: Align {\n+                        pow2: 3,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 8,\n+                },\n+            },\n+            LayoutDetails {\n+                fields: Arbitrary {\n+                    offsets: [\n+                        Size {\n+                            raw: 4,\n+                        },\n+                    ],\n+                    memory_index: [\n+                        0,\n+                    ],\n+                },\n+                variants: Single {\n+                    index: 1,\n+                },\n+                abi: Aggregate {\n+                    sized: true,\n+                },\n+                largest_niche: None,\n+                align: AbiAndPrefAlign {\n+                    abi: Align {\n+                        pow2: 2,\n+                    },\n+                    pref: Align {\n+                        pow2: 3,\n+                    },\n+                },\n+                size: Size {\n+                    raw: 8,\n+                },\n+            },\n+        ],\n+    },\n+    abi: ScalarPair(\n+        Scalar {\n+            value: Int(\n+                I32,\n+                false,\n+            ),\n+            valid_range: 0..=1,\n+        },\n+        Scalar {\n+            value: Int(\n+                I32,\n+                true,\n+            ),\n+            valid_range: 0..=4294967295,\n+        },\n+    ),\n+    largest_niche: Some(\n+        Niche {\n+            offset: Size {\n+                raw: 0,\n+            },\n+            scalar: Scalar {\n+                value: Int(\n+                    I32,\n+                    false,\n+                ),\n+                valid_range: 0..=1,\n+            },\n+        },\n+    ),\n+    align: AbiAndPrefAlign {\n+        abi: Align {\n+            pow2: 2,\n+        },\n+        pref: Align {\n+            pow2: 3,\n+        },\n+    },\n+    size: Size {\n+        raw: 8,\n+    },\n+}\n+  --> $DIR/debug.rs:14:1\n+   |\n+LL | type Test = Result<i32, i32>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}]}