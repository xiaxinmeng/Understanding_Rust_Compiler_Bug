{"sha": "6a06bfc2520e94d1220e7828964034617a2ba922", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMDZiZmMyNTIwZTk0ZDEyMjBlNzgyODk2NDAzNDYxN2EyYmE5MjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-19T07:56:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-19T08:41:51Z"}, "message": "enable align_to tests in Miri", "tree": {"sha": "f8a86e6053ad653f8eab7c0f3524be8760773428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8a86e6053ad653f8eab7c0f3524be8760773428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a06bfc2520e94d1220e7828964034617a2ba922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a06bfc2520e94d1220e7828964034617a2ba922", "html_url": "https://github.com/rust-lang/rust/commit/6a06bfc2520e94d1220e7828964034617a2ba922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a06bfc2520e94d1220e7828964034617a2ba922/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c03c213daf5fe3b52c768b4f145e45d8994d87ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/c03c213daf5fe3b52c768b4f145e45d8994d87ea", "html_url": "https://github.com/rust-lang/rust/commit/c03c213daf5fe3b52c768b4f145e45d8994d87ea"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "0b97508394789d9628e1a1d4866f29c8fb8502cb", "filename": "library/core/tests/ascii.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a06bfc2520e94d1220e7828964034617a2ba922/library%2Fcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a06bfc2520e94d1220e7828964034617a2ba922/library%2Fcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fascii.rs?ref=6a06bfc2520e94d1220e7828964034617a2ba922", "patch": "@@ -361,10 +361,8 @@ fn test_is_ascii_align_size_thoroughly() {\n         repeat(b0).take(l).chain(repeat(b1).take(l)).collect()\n     }\n \n-    // Miri is too slow for much of this, and in miri `align_offset` always\n-    // returns `usize::max_value()` anyway (at the moment), so we just test\n-    // lightly.\n-    let iter = if cfg!(miri) { 0..5 } else { 0..100 };\n+    // Miri is too slow\n+    let iter = if cfg!(miri) { 0..20 } else { 0..100 };\n \n     for i in iter {\n         #[cfg(not(miri))]\n@@ -379,7 +377,7 @@ fn test_is_ascii_align_size_thoroughly() {\n         ];\n \n         #[cfg(miri)]\n-        let cases = &[repeat_concat(b'a', 0x80u8, i)];\n+        let cases = &[b\"a\".repeat(i), b\"\\x80\".repeat(i), repeat_concat(b'a', 0x80u8, i)];\n \n         for case in cases {\n             for pos in 0..=case.len() {"}, {"sha": "bf977c141cbf861e0f0e64dff04beea4c5aa54c7", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a06bfc2520e94d1220e7828964034617a2ba922/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a06bfc2520e94d1220e7828964034617a2ba922/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=6a06bfc2520e94d1220e7828964034617a2ba922", "patch": "@@ -300,7 +300,6 @@ fn write_unaligned_drop() {\n }\n \n #[test]\n-#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_zst() {\n     // For pointers of stride = 0, the pointer is already aligned or it cannot be aligned at\n     // all, because no amount of elements will align the pointer.\n@@ -315,7 +314,6 @@ fn align_offset_zst() {\n }\n \n #[test]\n-#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_stride1() {\n     // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n     // number of bytes.\n@@ -337,7 +335,6 @@ fn align_offset_stride1() {\n }\n \n #[test]\n-#[cfg_attr(miri, ignore)] // Miri is too slow\n fn align_offset_weird_strides() {\n     #[repr(packed)]\n     struct A3(u16, u8);\n@@ -384,7 +381,9 @@ fn align_offset_weird_strides() {\n     // implementation\n     let mut align = 1;\n     let mut x = false;\n-    while align < 1024 {\n+    // Miri is too slow\n+    let limit = if cfg!(miri) { 32 } else { 1024 };\n+    while align < limit {\n         for ptr in 1usize..4 * align {\n             unsafe {\n                 x |= test_weird_stride::<A3>(ptr as *const A3, align);"}, {"sha": "5650c98f9c7407ef5ac32e7aef5ce823b9c3d351", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a06bfc2520e94d1220e7828964034617a2ba922/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a06bfc2520e94d1220e7828964034617a2ba922/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=6a06bfc2520e94d1220e7828964034617a2ba922", "patch": "@@ -1630,7 +1630,6 @@ pub mod memchr {\n }\n \n #[test]\n-#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_simple() {\n     let bytes = [1u8, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<u16>() };\n@@ -1660,7 +1659,6 @@ fn test_align_to_zst() {\n }\n \n #[test]\n-#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_non_trivial() {\n     #[repr(align(8))]\n     struct U64(u64, u64);"}]}