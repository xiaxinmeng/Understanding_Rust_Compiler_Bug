{"sha": "aa589d3dc77802a42cc931244325e936b65f4dd7", "node_id": "C_kwDOAAsO6NoAKGFhNTg5ZDNkYzc3ODAyYTQyY2M5MzEyNDQzMjVlOTM2YjY1ZjRkZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T23:43:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T23:43:51Z"}, "message": "Auto merge of #2145 - saethlin:zero-size-creation, r=RalfJung\n\nSave a created event for zero-size reborrows\n\nCurrently, we don't save a created event for zero-sized reborrows. Attempting to use something from a zero-sized reborrow is surprisingly common, for example on `minimal-lexical==0.2.1` we previously just emit this:\n```\nUndefined Behavior: attempting a write access using <187021> at alloc72933[0x0], but that tag does not exist in the borrow stack for this location\n    --> /root/rust/library/core/src/ptr/mod.rs:1287:9\n     |\n1287 |         copy_nonoverlapping(&src as *const T, dst, 1);\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |         |\n     |         attempting a write access using <187021> at alloc72933[0x0], but that tag does not exist in the borrow stack for this location\n     |         this error occurs as part of an access at alloc72933[0x0..0x8]\n     |\n     = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n     = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n\n     = note: inside `std::ptr::write::<u64>` at /root/rust/library/core/src/ptr/mod.rs:1287:9\nnote: inside `minimal_lexical::stackvec::StackVec::push_unchecked` at /root/build/src/stackvec.rs:82:13\n    --> /root/build/src/stackvec.rs:82:13\n     |\n82   |             ptr::write(self.as_mut_ptr().add(self.len()), value);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n... backtrace continues...\n```\nWhich leaves us with the question \"where did we make this pointer?\" because for every other diagnostic you get a \"was created by\" note, so I suspect people might be tempted to think there is a Miri bug here. I certainly was.\n\n---\nThis code duplication is so awful, I'm going to take a look at cleaning it up later. The fact that `ptr_get_alloc_id` can fail in this situation makes things annoying.", "tree": {"sha": "7b1dbc981ba3d2e5a41075e7937d98624b39145c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b1dbc981ba3d2e5a41075e7937d98624b39145c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa589d3dc77802a42cc931244325e936b65f4dd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa589d3dc77802a42cc931244325e936b65f4dd7", "html_url": "https://github.com/rust-lang/rust/commit/aa589d3dc77802a42cc931244325e936b65f4dd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa589d3dc77802a42cc931244325e936b65f4dd7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10cb09c9071b9b7aa701a8646cb6d5dbb779998b", "url": "https://api.github.com/repos/rust-lang/rust/commits/10cb09c9071b9b7aa701a8646cb6d5dbb779998b", "html_url": "https://github.com/rust-lang/rust/commit/10cb09c9071b9b7aa701a8646cb6d5dbb779998b"}, {"sha": "9a1475dbe2f19eb01eaa9a02b4fd93063713b648", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1475dbe2f19eb01eaa9a02b4fd93063713b648", "html_url": "https://github.com/rust-lang/rust/commit/9a1475dbe2f19eb01eaa9a02b4fd93063713b648"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "2eba35118388e70b9a10e81488fd4c11f11930b5", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aa589d3dc77802a42cc931244325e936b65f4dd7/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa589d3dc77802a42cc931244325e936b65f4dd7/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=aa589d3dc77802a42cc931244325e936b65f4dd7", "patch": "@@ -706,7 +706,26 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         if size == Size::ZERO {\n-            // Nothing to do for zero-sized accesses.\n+            // Don't update any stacks for a zero-sized access; borrow stacks are per-byte and this\n+            // touches no bytes so there is no stack to put this tag in.\n+            // However, if the pointer for this operation points at a real allocation we still\n+            // record where it was created so that we can issue a helpful diagnostic if there is an\n+            // attempt to use it for a non-zero-sized access.\n+            // Dangling slices are a common case here; it's valid to get their length but with raw\n+            // pointer tagging for example all calls to get_unchecked on them are invalid.\n+            if let Ok((alloc_id, base_offset, orig_tag)) = this.ptr_try_get_alloc_id(place.ptr) {\n+                let extra = this.get_alloc_extra(alloc_id)?;\n+                let stacked_borrows =\n+                    extra.stacked_borrows.as_ref().expect(\"we should have Stacked Borrows data\");\n+                let mut alloc_history = stacked_borrows.history.borrow_mut();\n+                alloc_history.log_creation(\n+                    Some(orig_tag),\n+                    new_tag,\n+                    alloc_range(base_offset, Size::ZERO),\n+                    &mut this.machine.current_span(),\n+                );\n+            }\n+\n             trace!(\n                 \"reborrow of size 0: {} reference {:?} derived from {:?} (pointee {})\",\n                 kind,"}, {"sha": "c6b4dc16b797b0b7e6660f3897f701434fa7a3da", "filename": "tests/compile-fail/stacked_borrows/zst_slice.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa589d3dc77802a42cc931244325e936b65f4dd7/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa589d3dc77802a42cc931244325e936b65f4dd7/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.stderr?ref=aa589d3dc77802a42cc931244325e936b65f4dd7", "patch": "@@ -2,7 +2,11 @@ error: Undefined Behavior: trying to reborrow <TAG> for SharedReadOnly permissio\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-           \n+help: <TAG> was created by a retag at offsets [0x0..0x0]\n+  --> $DIR/zst_slice.rs:LL:CC\n+   |\n+LL |         assert_eq!(*s.get_unchecked(1), 2);\n+   |                     ^^^^^^^^^^^^^^^^^^\n    = note: inside `core::slice::<impl [i32]>::get_unchecked::<usize>` at rustc_src/src/slice/mod.rs:LL:CC\n note: inside `main` at $DIR/zst_slice.rs:LL:CC\n   --> $DIR/zst_slice.rs:LL:CC"}]}