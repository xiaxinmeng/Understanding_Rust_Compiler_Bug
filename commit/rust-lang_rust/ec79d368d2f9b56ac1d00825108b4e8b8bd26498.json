{"sha": "ec79d368d2f9b56ac1d00825108b4e8b8bd26498", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNzlkMzY4ZDJmOWI1NmFjMWQwMDgyNTEwOGI0ZThiOGJkMjY0OTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-31T15:13:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-31T20:05:12Z"}, "message": "Test fixes from the rollup\n\nCloses #16097 (fix variable name in tutorial)\nCloses #16100 (More defailbloating)\nCloses #16104 (Fix deprecation commment on `core::cmp::lexical_ordering`)\nCloses #16105 (fix formatting in pointer guide table)\nCloses #16107 (remove serialize::ebml, add librbml)\nCloses #16108 (Fix heading levels in pointer guide)\nCloses #16109 (rustrt: Don't conditionally init the at_exit QUEUE)\nCloses #16111 (hexfloat: Deprecate to move out of the repo)\nCloses #16113 (Add examples for GenericPath methods.)\nCloses #16115 (Byte literals!)\nCloses #16116 (Add a non-regression test for issue #8372)\nCloses #16120 (Deprecate semver)\nCloses #16124 (Deprecate uuid)\nCloses #16126 (Deprecate fourcc)\nCloses #16127 (Remove incorrect example)\nCloses #16129 (Add note about production deployments.)\nCloses #16131 (librustc: Don't ICE when trying to subst regions in destructor call.)\nCloses #16133 (librustc: Don't ICE with struct exprs where the name is not a valid struct.)\nCloses #16136 (Implement slice::Vector for Option<T> and CVec<T>)\nCloses #16137 (alloc, arena, test, url, uuid: Elide lifetimes.)", "tree": {"sha": "4d2e1575805cb3a7b5f4481202b13c956a5c05f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d2e1575805cb3a7b5f4481202b13c956a5c05f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec79d368d2f9b56ac1d00825108b4e8b8bd26498", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec79d368d2f9b56ac1d00825108b4e8b8bd26498", "html_url": "https://github.com/rust-lang/rust/commit/ec79d368d2f9b56ac1d00825108b4e8b8bd26498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec79d368d2f9b56ac1d00825108b4e8b8bd26498/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f86184869a95199a2e0da844ad257c67f1aac97a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f86184869a95199a2e0da844ad257c67f1aac97a", "html_url": "https://github.com/rust-lang/rust/commit/f86184869a95199a2e0da844ad257c67f1aac97a"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "5873c8273e790f16a47f15c94e2cca9ce9d0d80c", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec79d368d2f9b56ac1d00825108b4e8b8bd26498/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec79d368d2f9b56ac1d00825108b4e8b8bd26498/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=ec79d368d2f9b56ac1d00825108b4e8b8bd26498", "patch": "@@ -649,7 +649,7 @@ mod test {\n     #[should_fail]\n     fn test_begin_unwind() {\n         use std::rt::unwind::begin_unwind;\n-        begin_unwind(\"cause\", file!(), line!())\n+        begin_unwind(\"cause\", &(file!(), line!()))\n     }\n \n     #[test]"}, {"sha": "2ffed792abd4683dbb379920a7877a0d29c13fcf", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec79d368d2f9b56ac1d00825108b4e8b8bd26498/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec79d368d2f9b56ac1d00825108b4e8b8bd26498/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=ec79d368d2f9b56ac1d00825108b4e8b8bd26498", "patch": "@@ -29,6 +29,8 @@ unlikely.\n To create a new random (V4) UUID and print it out in hexadecimal form:\n \n ```rust\n+# #![allow(deprecated)]\n+# extern crate uuid;\n use uuid::Uuid;\n \n fn main() {"}, {"sha": "5723b59a60b95c3bb3b89184c37f73fd9562229e", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec79d368d2f9b56ac1d00825108b4e8b8bd26498/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec79d368d2f9b56ac1d00825108b4e8b8bd26498/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=ec79d368d2f9b56ac1d00825108b4e8b8bd26498", "patch": "@@ -12,7 +12,7 @@\n #![feature(lang_items)]\n \n #[lang=\"fail_\"]\n-fn fail(_: &'static str, _: &'static str, _: uint) -> ! { loop {} }\n+fn fail(_: &(&'static str, &'static str, uint)) -> ! { loop {} }\n \n #[lang = \"stack_exhausted\"]\n extern fn stack_exhausted() {}"}, {"sha": "0e4be12aa456d581f093b6e783cedfee35d36380", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec79d368d2f9b56ac1d00825108b4e8b8bd26498/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec79d368d2f9b56ac1d00825108b4e8b8bd26498/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=ec79d368d2f9b56ac1d00825108b4e8b8bd26498", "patch": "@@ -24,7 +24,10 @@ fn start(argc: int, argv: *const *const u8) -> int {\n \n #[inline(never)]\n fn foo() {\n-    fail!()\n+    let _v = vec![1i, 2, 3];\n+    if os::getenv(\"IS_TEST\").is_some() {\n+        fail!()\n+    }\n }\n \n #[inline(never)]\n@@ -37,32 +40,35 @@ fn double() {\n }\n \n fn runtest(me: &str) {\n+    let mut template = Command::new(me);\n+    template.env(\"IS_TEST\", \"1\");\n+\n     // Make sure that the stack trace is printed\n-    let mut p = Command::new(me).arg(\"fail\").env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n+    let p = template.clone().arg(\"fail\").env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n     let s = str::from_utf8(out.error.as_slice()).unwrap();\n     assert!(s.contains(\"stack backtrace\") && s.contains(\"foo::h\"),\n             \"bad output: {}\", s);\n \n     // Make sure the stack trace is *not* printed\n-    let mut p = Command::new(me).arg(\"fail\").spawn().unwrap();\n+    let p = template.clone().arg(\"fail\").spawn().unwrap();\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n     let s = str::from_utf8(out.error.as_slice()).unwrap();\n     assert!(!s.contains(\"stack backtrace\") && !s.contains(\"foo::h\"),\n             \"bad output2: {}\", s);\n \n     // Make sure a stack trace is printed\n-    let mut p = Command::new(me).arg(\"double-fail\").spawn().unwrap();\n+    let p = template.clone().arg(\"double-fail\").spawn().unwrap();\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n     let s = str::from_utf8(out.error.as_slice()).unwrap();\n     assert!(s.contains(\"stack backtrace\") && s.contains(\"double::h\"),\n             \"bad output3: {}\", s);\n \n     // Make sure a stack trace isn't printed too many times\n-    let mut p = Command::new(me).arg(\"double-fail\")\n+    let p = template.clone().arg(\"double-fail\")\n                                 .env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());"}]}