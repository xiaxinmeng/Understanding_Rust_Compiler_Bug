{"sha": "a6809d00aed27db9ac99841d2bd34060a77d2708", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ODA5ZDAwYWVkMjdkYjlhYzk5ODQxZDJiZDM0MDYwYTc3ZDI3MDg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-14T15:54:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-14T15:54:47Z"}, "message": "Rollup merge of #81914 - kper:fixing-81885, r=estebank\n\nFixing bad suggestion for `_` in `const` type when a function #81885\n\nCloses #81885\n\n```\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\n  --> $DIR/typeck_type_placeholder_item_help.rs:13:22\n   |\nLL | const TEST4: fn() -> _ = 42;\n   |                      ^\n   |                      |\n   |                      not allowed in type signatures\n   |                      help: use type parameters instead: `T`\n```\n\nDo not show the suggestion `help: use type parameters instead: T` when `fn`", "tree": {"sha": "a94621efcee625e1699086d48da838f5060e9ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a94621efcee625e1699086d48da838f5060e9ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6809d00aed27db9ac99841d2bd34060a77d2708", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKUfICRBK7hj4Ov3rIwAAdHIIAGhvoIMbkPpAO73oEGheprUq\nzv5dCKOEf5I+t6qMOgSUpPVp3tZcudakqW3LpMsz25JEKj6Gdm9O8ncfagloQe9H\nzi65qqG/7OsQa+PYYZb5fhHIBlAisty2HWgPL1eJR0YqlQw+4Vjzf5/vjJdkKLLf\n/I1Gx3Gys0Fj7DlRgSewqbvgbruVu96uXifkzvrdbP88UYEiwsv7AU0iyLMkBCe4\n0LDA4qbBXqFXH+Qa/empNs4RXdUPjBZnjkh9lI7BZT40SVIUavxCH/4NtvElk6Wi\nBloCoJeWuZVoZ1LeJymfOh4z3caUsXTKoLPYxTjVE35YtiCPhkiRVaO/CYiEZJI=\n=ivCw\n-----END PGP SIGNATURE-----\n", "payload": "tree a94621efcee625e1699086d48da838f5060e9ba3\nparent 25315635ef50e57e70cc680a0f70926ec24ed0db\nparent 1adc6be23f93c2a348cbf568fb89dc546319e199\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613318087 +0100\ncommitter GitHub <noreply@github.com> 1613318087 +0100\n\nRollup merge of #81914 - kper:fixing-81885, r=estebank\n\nFixing bad suggestion for `_` in `const` type when a function #81885\n\nCloses #81885\n\n```\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\n  --> $DIR/typeck_type_placeholder_item_help.rs:13:22\n   |\nLL | const TEST4: fn() -> _ = 42;\n   |                      ^\n   |                      |\n   |                      not allowed in type signatures\n   |                      help: use type parameters instead: `T`\n```\n\nDo not show the suggestion `help: use type parameters instead: T` when `fn`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6809d00aed27db9ac99841d2bd34060a77d2708", "html_url": "https://github.com/rust-lang/rust/commit/a6809d00aed27db9ac99841d2bd34060a77d2708", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6809d00aed27db9ac99841d2bd34060a77d2708/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25315635ef50e57e70cc680a0f70926ec24ed0db", "url": "https://api.github.com/repos/rust-lang/rust/commits/25315635ef50e57e70cc680a0f70926ec24ed0db", "html_url": "https://github.com/rust-lang/rust/commit/25315635ef50e57e70cc680a0f70926ec24ed0db"}, {"sha": "1adc6be23f93c2a348cbf568fb89dc546319e199", "url": "https://api.github.com/repos/rust-lang/rust/commits/1adc6be23f93c2a348cbf568fb89dc546319e199", "html_url": "https://github.com/rust-lang/rust/commit/1adc6be23f93c2a348cbf568fb89dc546319e199"}], "stats": {"total": 114, "additions": 93, "deletions": 21}, "files": [{"sha": "c9cc47b83e3d675f6503e72f336bf9ddf6023055", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6809d00aed27db9ac99841d2bd34060a77d2708/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6809d00aed27db9ac99841d2bd34060a77d2708/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=a6809d00aed27db9ac99841d2bd34060a77d2708", "patch": "@@ -2191,12 +2191,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             hir::TyKind::BareFn(ref bf) => {\n                 require_c_abi_if_c_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);\n+\n                 tcx.mk_fn_ptr(self.ty_of_fn(\n                     bf.unsafety,\n                     bf.abi,\n                     &bf.decl,\n                     &hir::Generics::empty(),\n                     None,\n+                    Some(ast_ty),\n                 ))\n             }\n             hir::TyKind::TraitObject(ref bounds, ref lifetime) => {\n@@ -2336,6 +2338,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         decl: &hir::FnDecl<'_>,\n         generics: &hir::Generics<'_>,\n         ident_span: Option<Span>,\n+        hir_ty: Option<&hir::Ty<'_>>,\n     ) -> ty::PolyFnSig<'tcx> {\n         debug!(\"ty_of_fn\");\n \n@@ -2367,12 +2370,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // only want to emit an error complaining about them if infer types (`_`) are not\n             // allowed. `allow_ty_infer` gates this behavior. We check for the presence of\n             // `ident_span` to not emit an error twice when we have `fn foo(_: fn() -> _)`.\n+\n             crate::collect::placeholder_type_error(\n                 tcx,\n                 ident_span.map(|sp| sp.shrink_to_hi()),\n                 &generics.params[..],\n                 visitor.0,\n                 true,\n+                hir_ty,\n             );\n         }\n "}, {"sha": "fce7ae8119e17a55efd888adcaae97ae87b5ee7d", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6809d00aed27db9ac99841d2bd34060a77d2708/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6809d00aed27db9ac99841d2bd34060a77d2708/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=a6809d00aed27db9ac99841d2bd34060a77d2708", "patch": "@@ -502,6 +502,7 @@ fn typeck_with_fallback<'tcx>(\n                     decl,\n                     &hir::Generics::empty(),\n                     None,\n+                    None,\n                 )\n             } else {\n                 tcx.fn_sig(def_id)"}, {"sha": "e24aa7d76f1942e71eabd506330d4717f44fa7a1", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 60, "deletions": 13, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a6809d00aed27db9ac99841d2bd34060a77d2708/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6809d00aed27db9ac99841d2bd34060a77d2708/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a6809d00aed27db9ac99841d2bd34060a77d2708", "patch": "@@ -143,6 +143,7 @@ crate fn placeholder_type_error(\n     generics: &[hir::GenericParam<'_>],\n     placeholder_types: Vec<Span>,\n     suggest: bool,\n+    hir_ty: Option<&hir::Ty<'_>>,\n ) {\n     if placeholder_types.is_empty() {\n         return;\n@@ -173,12 +174,40 @@ crate fn placeholder_type_error(\n     }\n \n     let mut err = bad_placeholder_type(tcx, placeholder_types);\n+\n+    // Suggest, but only if it is not a function in const or static\n     if suggest {\n-        err.multipart_suggestion(\n-            \"use type parameters instead\",\n-            sugg,\n-            Applicability::HasPlaceholders,\n-        );\n+        let mut is_fn = false;\n+        let mut is_const = false;\n+        let mut is_static = false;\n+\n+        if let Some(hir_ty) = hir_ty {\n+            if let hir::TyKind::BareFn(_) = hir_ty.kind {\n+                is_fn = true;\n+\n+                // Check if parent is const or static\n+                let parent_id = tcx.hir().get_parent_node(hir_ty.hir_id);\n+                let parent_node = tcx.hir().get(parent_id);\n+\n+                if let hir::Node::Item(item) = parent_node {\n+                    if let hir::ItemKind::Const(_, _) = item.kind {\n+                        is_const = true;\n+                    } else if let hir::ItemKind::Static(_, _, _) = item.kind {\n+                        is_static = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        // if function is wrapped around a const or static,\n+        // then don't show the suggestion\n+        if !(is_fn && (is_const || is_static)) {\n+            err.multipart_suggestion(\n+                \"use type parameters instead\",\n+                sugg,\n+                Applicability::HasPlaceholders,\n+            );\n+        }\n     }\n     err.emit();\n }\n@@ -200,7 +229,14 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n     let mut visitor = PlaceholderHirTyCollector::default();\n     visitor.visit_item(item);\n \n-    placeholder_type_error(tcx, Some(generics.span), &generics.params[..], visitor.0, suggest);\n+    placeholder_type_error(\n+        tcx,\n+        Some(generics.span),\n+        &generics.params[..],\n+        visitor.0,\n+        suggest,\n+        None,\n+    );\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n@@ -682,6 +718,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n     let it = tcx.hir().expect_item(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id);\n     let def_id = tcx.hir().local_def_id(item_id);\n+\n     match it.kind {\n         // These don't define types.\n         hir::ItemKind::ExternCrate(_)\n@@ -787,7 +824,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n             // Account for `const C: _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n-            placeholder_type_error(tcx, None, &[], visitor.0, false);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n         }\n \n         hir::TraitItemKind::Type(_, Some(_)) => {\n@@ -796,7 +833,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n             // Account for `type T = _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n-            placeholder_type_error(tcx, None, &[], visitor.0, false);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n         }\n \n         hir::TraitItemKind::Type(_, None) => {\n@@ -805,7 +842,8 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n             // even if there is no concrete type.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n-            placeholder_type_error(tcx, None, &[], visitor.0, false);\n+\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n         }\n     };\n \n@@ -826,7 +864,8 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n             // Account for `type T = _;`\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_impl_item(impl_item);\n-            placeholder_type_error(tcx, None, &[], visitor.0, false);\n+\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n         }\n         hir::ImplItemKind::Const(..) => {}\n     }\n@@ -1654,6 +1693,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     &sig.decl,\n                     &generics,\n                     Some(ident.span),\n+                    None,\n                 ),\n             }\n         }\n@@ -1663,9 +1703,15 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             ident,\n             generics,\n             ..\n-        }) => {\n-            AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl, &generics, Some(ident.span))\n-        }\n+        }) => AstConv::ty_of_fn(\n+            &icx,\n+            header.unsafety,\n+            header.abi,\n+            decl,\n+            &generics,\n+            Some(ident.span),\n+            None,\n+        ),\n \n         ForeignItem(&hir::ForeignItem {\n             kind: ForeignItemKind::Fn(ref fn_decl, _, _),\n@@ -2335,6 +2381,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n         decl,\n         &hir::Generics::empty(),\n         Some(ident.span),\n+        None,\n     );\n \n     // Feature gate SIMD types in FFI, since I am not sure that the"}, {"sha": "e602425059e1b893cbd25d921e4e9b9d5f2c0e1d", "filename": "src/test/ui/issues/issue-74086.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6809d00aed27db9ac99841d2bd34060a77d2708/src%2Ftest%2Fui%2Fissues%2Fissue-74086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6809d00aed27db9ac99841d2bd34060a77d2708/src%2Ftest%2Fui%2Fissues%2Fissue-74086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74086.stderr?ref=a6809d00aed27db9ac99841d2bd34060a77d2708", "patch": "@@ -2,10 +2,7 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/issue-74086.rs:2:20\n    |\n LL |     static BUG: fn(_) -> u8 = |_| 8;\n-   |                    ^\n-   |                    |\n-   |                    not allowed in type signatures\n-   |                    help: use type parameters instead: `T`\n+   |                    ^ not allowed in type signatures\n \n error: aborting due to previous error\n "}, {"sha": "86c39d4a48c05cc037a834432b6fb2cf04973098", "filename": "src/test/ui/issues/issue-81885.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6809d00aed27db9ac99841d2bd34060a77d2708/src%2Ftest%2Fui%2Fissues%2Fissue-81885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6809d00aed27db9ac99841d2bd34060a77d2708/src%2Ftest%2Fui%2Fissues%2Fissue-81885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-81885.rs?ref=a6809d00aed27db9ac99841d2bd34060a77d2708", "patch": "@@ -0,0 +1,10 @@\n+const TEST4: fn() -> _ = 42;\n+                  //~^ ERROR the type placeholder `_` is not allowed within types on item\n+                  //signatures\n+\n+fn main() {\n+    const TEST5: fn() -> _ = 42;\n+                      //~^ ERROR the type placeholder `_` is not allowed within types on item\n+                      //signatures\n+\n+}"}, {"sha": "955b4283874421015017af2163978d0d4a4f5718", "filename": "src/test/ui/issues/issue-81885.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a6809d00aed27db9ac99841d2bd34060a77d2708/src%2Ftest%2Fui%2Fissues%2Fissue-81885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6809d00aed27db9ac99841d2bd34060a77d2708/src%2Ftest%2Fui%2Fissues%2Fissue-81885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-81885.stderr?ref=a6809d00aed27db9ac99841d2bd34060a77d2708", "patch": "@@ -0,0 +1,15 @@\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/issue-81885.rs:1:22\n+   |\n+LL | const TEST4: fn() -> _ = 42;\n+   |                      ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/issue-81885.rs:6:26\n+   |\n+LL |     const TEST5: fn() -> _ = 42;\n+   |                          ^ not allowed in type signatures\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "f868c8d483486f30f267bf540fbeda84688e8f5a", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a6809d00aed27db9ac99841d2bd34060a77d2708/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6809d00aed27db9ac99841d2bd34060a77d2708/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=a6809d00aed27db9ac99841d2bd34060a77d2708", "patch": "@@ -29,10 +29,7 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item_help.rs:13:22\n    |\n LL | const TEST4: fn() -> _ = 42;\n-   |                      ^\n-   |                      |\n-   |                      not allowed in type signatures\n-   |                      help: use type parameters instead: `T`\n+   |                      ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item_help.rs:17:18"}]}