{"sha": "8602a7d89843dcd7d41d2bb569817ddb760dbf7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MDJhN2Q4OTg0M2RjZDdkNDFkMmJiNTY5ODE3ZGRiNzYwZGJmN2U=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-26T05:17:43Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-08-04T23:05:07Z"}, "message": "Update and add test case\n\nTest case from here: https://github.com/freebroccolo/rust/commit/9e93fef3c0e61836a8b56f727eb7a2e94bb4ca09", "tree": {"sha": "9ca93f9ac0db3af71b79a0134deee6f73c6f00fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca93f9ac0db3af71b79a0134deee6f73c6f00fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8602a7d89843dcd7d41d2bb569817ddb760dbf7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8602a7d89843dcd7d41d2bb569817ddb760dbf7e", "html_url": "https://github.com/rust-lang/rust/commit/8602a7d89843dcd7d41d2bb569817ddb760dbf7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8602a7d89843dcd7d41d2bb569817ddb760dbf7e/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fb11fe9f21051f4f03da55f949de402e78a95d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb11fe9f21051f4f03da55f949de402e78a95d5", "html_url": "https://github.com/rust-lang/rust/commit/9fb11fe9f21051f4f03da55f949de402e78a95d5"}], "stats": {"total": 91, "additions": 89, "deletions": 2}, "files": [{"sha": "99f375c32868e295398c9b453ebc7b507ae569fe", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8602a7d89843dcd7d41d2bb569817ddb760dbf7e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8602a7d89843dcd7d41d2bb569817ddb760dbf7e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8602a7d89843dcd7d41d2bb569817ddb760dbf7e", "patch": "@@ -1663,7 +1663,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n             this.ty_infer(None, None, None, ast_ty.span)\n         }\n         ast::TyMac(_) => {\n-            tcx.sess.span_bug(m.span, \"unexpanded type macro found conversion\")\n+            tcx.sess.span_bug(ast_ty.span, \"unexpanded type macro found conversion\")\n         }\n     };\n "}, {"sha": "1b5dcf64833466c6e8230400a348498aae54330d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8602a7d89843dcd7d41d2bb569817ddb760dbf7e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8602a7d89843dcd7d41d2bb569817ddb760dbf7e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8602a7d89843dcd7d41d2bb569817ddb760dbf7e", "patch": "@@ -416,19 +416,22 @@ impl DummyResult {\n \n     pub fn raw_ty(sp: Span) -> P<ast::Ty> {\n         P(ast::Ty {\n-            id: ast:DUMMY_NODE_ID,\n+            id: ast::DUMMY_NODE_ID,\n             node: ast::TyInfer,\n             span: sp\n         })\n+    }\n }\n \n impl MacResult for DummyResult {\n     fn make_expr(self: Box<DummyResult>) -> Option<P<ast::Expr>> {\n         Some(DummyResult::raw_expr(self.span))\n     }\n+\n     fn make_pat(self: Box<DummyResult>) -> Option<P<ast::Pat>> {\n         Some(P(DummyResult::raw_pat(self.span)))\n     }\n+\n     fn make_items(self: Box<DummyResult>) -> Option<SmallVector<P<ast::Item>>> {\n         // this code needs a comment... why not always just return the Some() ?\n         if self.expr_only {\n@@ -437,13 +440,15 @@ impl MacResult for DummyResult {\n             Some(SmallVector::zero())\n         }\n     }\n+\n     fn make_impl_items(self: Box<DummyResult>) -> Option<SmallVector<P<ast::ImplItem>>> {\n         if self.expr_only {\n             None\n         } else {\n             Some(SmallVector::zero())\n         }\n     }\n+\n     fn make_stmts(self: Box<DummyResult>) -> Option<SmallVector<P<ast::Stmt>>> {\n         Some(SmallVector::one(P(\n             codemap::respan(self.span,"}, {"sha": "3ca3be8efed4b600da67ec0823741fdc64f8705f", "filename": "src/test/run-pass/type-macros.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8602a7d89843dcd7d41d2bb569817ddb760dbf7e/src%2Ftest%2Frun-pass%2Ftype-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8602a7d89843dcd7d41d2bb569817ddb760dbf7e/src%2Ftest%2Frun-pass%2Ftype-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-macros.rs?ref=8602a7d89843dcd7d41d2bb569817ddb760dbf7e", "patch": "@@ -0,0 +1,82 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::*;\n+\n+#[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+struct Nil; // empty HList\n+#[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+struct Cons<H, T: HList>(H, T); // cons cell of HList\n+\n+// trait to classify valid HLists\n+trait HList {}\n+impl HList for Nil {}\n+impl<H, T: HList> HList for Cons<H, T> {}\n+\n+// term-level macro for HLists\n+macro_rules! hlist {\n+        {} => { Nil };\n+            { $head:expr } => { Cons($head, Nil) };\n+                { $head:expr, $($tail:expr),* } => { Cons($head, hlist!($($tail),*)) };\n+}\n+\n+// type-level macro for HLists\n+macro_rules! HList {\n+        {} => { Nil };\n+            { $head:ty } => { Cons<$head, Nil> };\n+                { $head:ty, $($tail:ty),* } => { Cons<$head, HList!($($tail),*)> };\n+}\n+\n+// nil case for HList append\n+impl<Ys: HList> Add<Ys> for Nil {\n+        type Output = Ys;\n+\n+            fn add(self, rhs: Ys) -> Ys {\n+                        rhs\n+                                }\n+}\n+\n+// cons case for HList append\n+impl<Rec: HList + Sized, X, Xs: HList, Ys: HList> Add<Ys> for Cons<X, Xs> where\n+    Xs: Add<Ys, Output = Rec>,\n+{\n+        type Output = Cons<X, Rec>;\n+\n+            fn add(self, rhs: Ys) -> Cons<X, Rec> {\n+                        Cons(self.0, self.1 + rhs)\n+                                }\n+}\n+\n+// type macro Expr allows us to expand the + operator appropriately\n+macro_rules! Expr {\n+        { ( $($LHS:tt)+ ) } => { Expr!($($LHS)+) };\n+            { HList ! [ $($LHS:tt)* ] + $($RHS:tt)+ } => { <Expr!(HList![$($LHS)*]) as Add<Expr!($($RHS)+)>>::Output };\n+                { $LHS:tt + $($RHS:tt)+ } => { <Expr!($LHS) as Add<Expr!($($RHS)+)>>::Output };\n+                    { $LHS:ty } => { $LHS };\n+}\n+\n+// test demonstrating term level `xs + ys` and type level `Expr!(Xs + Ys)`\n+fn main() {\n+    fn aux<Xs: HList, Ys: HList>(xs: Xs, ys: Ys) -> Expr!(Xs + Ys)\n+        where Xs: Add<Ys> {\n+            xs + ys\n+        }\n+\n+    let xs: HList![&str, bool, Vec<u64>] = hlist![\"foo\", false, vec![]];\n+    let ys: HList![u64, [u8; 3], ()] = hlist![0, [0, 1, 2], ()];\n+\n+    // demonstrate recursive expansion of Expr!\n+    let zs: Expr!((HList![&str] + HList![bool] + HList![Vec<u64>]) +\n+                  (HList![u64] + HList![[u8; 3], ()]) +\n+                  HList![])\n+        = aux(xs, ys);\n+    assert_eq!(zs, hlist![\"foo\", false, vec![], 0, [0, 1, 2], ()])\n+}\n+"}]}