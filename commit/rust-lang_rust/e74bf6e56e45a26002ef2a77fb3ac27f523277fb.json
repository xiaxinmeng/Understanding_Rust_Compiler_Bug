{"sha": "e74bf6e56e45a26002ef2a77fb3ac27f523277fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NGJmNmU1NmU0NWEyNjAwMmVmMmE3N2ZiM2FjMjdmNTIzMjc3ZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-20T19:15:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-20T19:15:03Z"}, "message": "mark module queries as cacelable", "tree": {"sha": "f96443bfde82dc64bbccd01f78d80eccea2c8b63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f96443bfde82dc64bbccd01f78d80eccea2c8b63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e74bf6e56e45a26002ef2a77fb3ac27f523277fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e74bf6e56e45a26002ef2a77fb3ac27f523277fb", "html_url": "https://github.com/rust-lang/rust/commit/e74bf6e56e45a26002ef2a77fb3ac27f523277fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e74bf6e56e45a26002ef2a77fb3ac27f523277fb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fb41716de095fa365eecedab3427af7b5001644", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb41716de095fa365eecedab3427af7b5001644", "html_url": "https://github.com/rust-lang/rust/commit/9fb41716de095fa365eecedab3427af7b5001644"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "df5aacb2dc04051cfed67db1a1e585d20c390870", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e74bf6e56e45a26002ef2a77fb3ac27f523277fb/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74bf6e56e45a26002ef2a77fb3ac27f523277fb/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=e74bf6e56e45a26002ef2a77fb3ac27f523277fb", "patch": "@@ -159,7 +159,7 @@ impl AnalysisImpl {\n     }\n     pub fn parent_module(&self, file_id: FileId) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let root = self.root(file_id);\n-        let module_tree = root.module_tree();\n+        let module_tree = root.module_tree()?;\n         let res = module_tree\n             .parent_modules(file_id)\n             .iter()\n@@ -177,8 +177,8 @@ impl AnalysisImpl {\n             .collect();\n         Ok(res)\n     }\n-    pub fn crate_for(&self, file_id: FileId) -> Vec<CrateId> {\n-        let module_tree = self.root(file_id).module_tree();\n+    pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n+        let module_tree = self.root(file_id).module_tree()?;\n         let crate_graph = &self.data.crate_graph;\n         let mut res = Vec::new();\n         let mut work = VecDeque::new();\n@@ -196,7 +196,7 @@ impl AnalysisImpl {\n                 .filter(|&id| visited.insert(id));\n             work.extend(parents);\n         }\n-        res\n+        Ok(res)\n     }\n     pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n         self.data.crate_graph.crate_roots[&crate_id]\n@@ -205,9 +205,9 @@ impl AnalysisImpl {\n         &self,\n         file_id: FileId,\n         offset: TextUnit,\n-    ) -> Vec<(FileId, FileSymbol)> {\n+    ) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let root = self.root(file_id);\n-        let module_tree = root.module_tree();\n+        let module_tree = root.module_tree()?;\n         let file = root.syntax(file_id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n@@ -223,10 +223,10 @@ impl AnalysisImpl {\n                     },\n                 ));\n \n-                return vec;\n+                return Ok(vec);\n             } else {\n                 // If that fails try the index based approach.\n-                return self.index_resolve(name_ref);\n+                return Ok(self.index_resolve(name_ref));\n             }\n         }\n         if let Some(name) = find_node_at_offset::<ast::Name>(syntax, offset) {\n@@ -250,11 +250,11 @@ impl AnalysisImpl {\n                         })\n                         .collect();\n \n-                    return res;\n+                    return Ok(res);\n                 }\n             }\n         }\n-        vec![]\n+        Ok(vec![])\n     }\n \n     pub fn find_all_refs(&self, file_id: FileId, offset: TextUnit) -> Vec<(FileId, TextRange)> {\n@@ -289,9 +289,9 @@ impl AnalysisImpl {\n         ret\n     }\n \n-    pub fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n+    pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n         let root = self.root(file_id);\n-        let module_tree = root.module_tree();\n+        let module_tree = root.module_tree()?;\n         let syntax = root.syntax(file_id);\n \n         let mut res = ra_editor::diagnostics(&syntax)\n@@ -346,7 +346,7 @@ impl AnalysisImpl {\n             };\n             res.push(diag)\n         }\n-        res\n+        Ok(res)\n     }\n \n     pub fn assists(&self, file_id: FileId, range: TextRange) -> Vec<SourceChange> {"}, {"sha": "6ce32894a73e1e75d3d8fdadf4d852f0f3f18c02", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e74bf6e56e45a26002ef2a77fb3ac27f523277fb/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74bf6e56e45a26002ef2a77fb3ac27f523277fb/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=e74bf6e56e45a26002ef2a77fb3ac27f523277fb", "patch": "@@ -37,7 +37,7 @@ pub use ra_editor::{\n     RunnableKind, StructureNode,\n };\n \n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct Cancel;\n \n pub type Cancelable<T> = Result<T, Cancel>;\n@@ -231,8 +231,8 @@ impl Analysis {\n         file_id: FileId,\n         offset: TextUnit\n     ) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n-        Ok(self.imp\n-            .approximately_resolve_symbol(file_id, offset))\n+        self.imp\n+            .approximately_resolve_symbol(file_id, offset)\n     }\n     pub fn find_all_refs(&self, file_id: FileId, offset: TextUnit, ) -> Cancelable<Vec<(FileId, TextRange)>> {\n         Ok(self.imp.find_all_refs(file_id, offset))\n@@ -241,7 +241,7 @@ impl Analysis {\n         self.imp.parent_module(file_id)\n     }\n     pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n-        Ok(self.imp.crate_for(file_id))\n+        self.imp.crate_for(file_id)\n     }\n     pub fn crate_root(&self, crate_id: CrateId) -> Cancelable<FileId> {\n         Ok(self.imp.crate_root(crate_id))\n@@ -262,7 +262,7 @@ impl Analysis {\n         Ok(self.imp.assists(file_id, range))\n     }\n     pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n-        Ok(self.imp.diagnostics(file_id))\n+        self.imp.diagnostics(file_id)\n     }\n     pub fn resolve_callable(\n         &self,"}, {"sha": "0c413becd85aa35230d8bc67c37acf31b634ea98", "filename": "crates/ra_analysis/src/module_map.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e74bf6e56e45a26002ef2a77fb3ac27f523277fb/crates%2Fra_analysis%2Fsrc%2Fmodule_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74bf6e56e45a26002ef2a77fb3ac27f523277fb/crates%2Fra_analysis%2Fsrc%2Fmodule_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmodule_map.rs?ref=e74bf6e56e45a26002ef2a77fb3ac27f523277fb", "patch": "@@ -1,4 +1,5 @@\n use crate::{\n+    Cancelable,\n     db::SyntaxDatabase,\n     descriptors::{ModuleDescriptor, ModuleTreeDescriptor},\n     FileId,\n@@ -8,30 +9,30 @@ use std::sync::Arc;\n \n salsa::query_group! {\n     pub(crate) trait ModulesDatabase: SyntaxDatabase {\n-        fn module_tree() -> Arc<ModuleTreeDescriptor> {\n+        fn module_tree() -> Cancelable<Arc<ModuleTreeDescriptor>> {\n             type ModuleTreeQuery;\n         }\n-        fn module_descriptor(file_id: FileId) -> Arc<ModuleDescriptor> {\n+        fn module_descriptor(file_id: FileId) -> Cancelable<Arc<ModuleDescriptor>> {\n             type ModuleDescriptorQuery;\n         }\n     }\n }\n \n-fn module_descriptor(db: &impl ModulesDatabase, file_id: FileId) -> Arc<ModuleDescriptor> {\n+fn module_descriptor(db: &impl ModulesDatabase, file_id: FileId) -> Cancelable<Arc<ModuleDescriptor>> {\n     let file = db.file_syntax(file_id);\n-    Arc::new(ModuleDescriptor::new(file.ast()))\n+    Ok(Arc::new(ModuleDescriptor::new(file.ast())))\n }\n \n-fn module_tree(db: &impl ModulesDatabase) -> Arc<ModuleTreeDescriptor> {\n+fn module_tree(db: &impl ModulesDatabase) -> Cancelable<Arc<ModuleTreeDescriptor>> {\n     let file_set = db.file_set();\n     let mut files = Vec::new();\n     for &file_id in file_set.files.iter() {\n-        let module_descr = db.module_descriptor(file_id);\n+        let module_descr = db.module_descriptor(file_id)?;\n         files.push((file_id, module_descr));\n     }\n     let res = ModuleTreeDescriptor::new(\n         files.iter().map(|(file_id, descr)| (*file_id, &**descr)),\n         &file_set.resolver,\n     );\n-    Arc::new(res)\n+    Ok(Arc::new(res))\n }"}, {"sha": "e950a75e24e634c50dbef5bddadc026ecce3f0be", "filename": "crates/ra_analysis/src/roots.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e74bf6e56e45a26002ef2a77fb3ac27f523277fb/crates%2Fra_analysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e74bf6e56e45a26002ef2a77fb3ac27f523277fb/crates%2Fra_analysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Froots.rs?ref=e74bf6e56e45a26002ef2a77fb3ac27f523277fb", "patch": "@@ -8,6 +8,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use salsa::Database;\n \n use crate::{\n+    Cancelable,\n     db::{self, FilesDatabase, SyntaxDatabase},\n     descriptors::{ModuleDescriptor, ModuleTreeDescriptor},\n     imp::FileResolverImp,\n@@ -18,7 +19,7 @@ use crate::{\n \n pub(crate) trait SourceRoot {\n     fn contains(&self, file_id: FileId) -> bool;\n-    fn module_tree(&self) -> Arc<ModuleTreeDescriptor>;\n+    fn module_tree(&self) -> Cancelable<Arc<ModuleTreeDescriptor>>;\n     fn lines(&self, file_id: FileId) -> Arc<LineIndex>;\n     fn syntax(&self, file_id: FileId) -> File;\n     fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>);\n@@ -64,7 +65,7 @@ impl WritableSourceRoot {\n }\n \n impl SourceRoot for WritableSourceRoot {\n-    fn module_tree(&self) -> Arc<ModuleTreeDescriptor> {\n+    fn module_tree(&self) -> Cancelable<Arc<ModuleTreeDescriptor>> {\n         self.db.module_tree()\n     }\n     fn contains(&self, file_id: FileId) -> bool {\n@@ -167,8 +168,8 @@ impl ReadonlySourceRoot {\n }\n \n impl SourceRoot for ReadonlySourceRoot {\n-    fn module_tree(&self) -> Arc<ModuleTreeDescriptor> {\n-        Arc::clone(&self.module_tree)\n+    fn module_tree(&self) -> Cancelable<Arc<ModuleTreeDescriptor>> {\n+        Ok(Arc::clone(&self.module_tree))\n     }\n     fn contains(&self, file_id: FileId) -> bool {\n         self.file_map.contains_key(&file_id)"}]}