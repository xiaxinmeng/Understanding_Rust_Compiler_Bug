{"sha": "a3fa1161d22f5055e28340cd6c00d1451e4d9572", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZmExMTYxZDIyZjUwNTVlMjgzNDBjZDZjMDBkMTQ1MWU0ZDk1NzI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-02T14:58:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T16:17:12Z"}, "message": "Remove const_{fat_ptr,array,vector,bytes} from cg_ssa", "tree": {"sha": "b1d15f3cb18735d95f70ed08135e08b1b66c2353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1d15f3cb18735d95f70ed08135e08b1b66c2353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3fa1161d22f5055e28340cd6c00d1451e4d9572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fa1161d22f5055e28340cd6c00d1451e4d9572", "html_url": "https://github.com/rust-lang/rust/commit/a3fa1161d22f5055e28340cd6c00d1451e4d9572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3fa1161d22f5055e28340cd6c00d1451e4d9572/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0056333f12ae3b916fbd0a14c1b641460140797", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0056333f12ae3b916fbd0a14c1b641460140797", "html_url": "https://github.com/rust-lang/rust/commit/a0056333f12ae3b916fbd0a14c1b641460140797"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "aab0d8ac6027125b9ecdab250db65d357f55b104", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a3fa1161d22f5055e28340cd6c00d1451e4d9572/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fa1161d22f5055e28340cd6c00d1451e4d9572/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=a3fa1161d22f5055e28340cd6c00d1451e4d9572", "patch": "@@ -93,6 +93,34 @@ impl BackendTypes for CodegenCx<'ll, 'tcx> {\n     type DIScope = &'ll llvm::debuginfo::DIScope;\n }\n \n+impl CodegenCx<'ll, 'tcx> {\n+    pub fn const_fat_ptr(\n+        &self,\n+        ptr: &'ll Value,\n+        meta: &'ll Value\n+    ) -> &'ll Value {\n+        assert_eq!(abi::FAT_PTR_ADDR, 0);\n+        assert_eq!(abi::FAT_PTR_EXTRA, 1);\n+        self.const_struct(&[ptr, meta], false)\n+    }\n+\n+    pub fn const_array(&self, ty: &'ll Type, elts: &[&'ll Value]) -> &'ll Value {\n+        unsafe {\n+            return llvm::LLVMConstArray(ty, elts.as_ptr(), elts.len() as c_uint);\n+        }\n+    }\n+\n+    pub fn const_vector(&self, elts: &[&'ll Value]) -> &'ll Value {\n+        unsafe {\n+            return llvm::LLVMConstVector(elts.as_ptr(), elts.len() as c_uint);\n+        }\n+    }\n+\n+    pub fn const_bytes(&self, bytes: &[u8]) -> &'ll Value {\n+        bytes_in_context(self.llcx, bytes)\n+    }\n+}\n+\n impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn const_null(&self, t: &'ll Type) -> &'ll Value {\n         unsafe {\n@@ -189,16 +217,6 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         self.const_fat_ptr(cs, self.const_usize(len as u64))\n     }\n \n-    fn const_fat_ptr(\n-        &self,\n-        ptr: &'ll Value,\n-        meta: &'ll Value\n-    ) -> &'ll Value {\n-        assert_eq!(abi::FAT_PTR_ADDR, 0);\n-        assert_eq!(abi::FAT_PTR_EXTRA, 1);\n-        self.const_struct(&[ptr, meta], false)\n-    }\n-\n     fn const_struct(\n         &self,\n         elts: &[&'ll Value],\n@@ -207,22 +225,6 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         struct_in_context(self.llcx, elts, packed)\n     }\n \n-    fn const_array(&self, ty: &'ll Type, elts: &[&'ll Value]) -> &'ll Value {\n-        unsafe {\n-            return llvm::LLVMConstArray(ty, elts.as_ptr(), elts.len() as c_uint);\n-        }\n-    }\n-\n-    fn const_vector(&self, elts: &[&'ll Value]) -> &'ll Value {\n-        unsafe {\n-            return llvm::LLVMConstVector(elts.as_ptr(), elts.len() as c_uint);\n-        }\n-    }\n-\n-    fn const_bytes(&self, bytes: &[u8]) -> &'ll Value {\n-        bytes_in_context(self.llcx, bytes)\n-    }\n-\n     fn const_get_elt(&self, v: &'ll Value, idx: u64) -> &'ll Value {\n         unsafe {\n             assert_eq!(idx as c_uint as u64, idx);"}, {"sha": "61db94d53d88169d39373c63809beddeefafd049", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3fa1161d22f5055e28340cd6c00d1451e4d9572/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fa1161d22f5055e28340cd6c00d1451e4d9572/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=a3fa1161d22f5055e28340cd6c00d1451e4d9572", "patch": "@@ -24,11 +24,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_cstr(&self, s: LocalInternedString, null_terminated: bool) -> Self::Value;\n \n     fn const_str_slice(&self, s: LocalInternedString) -> Self::Value;\n-    fn const_fat_ptr(&self, ptr: Self::Value, meta: Self::Value) -> Self::Value;\n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n-    fn const_array(&self, ty: Self::Type, elts: &[Self::Value]) -> Self::Value;\n-    fn const_vector(&self, elts: &[Self::Value]) -> Self::Value;\n-    fn const_bytes(&self, bytes: &[u8]) -> Self::Value;\n \n     fn const_get_elt(&self, v: Self::Value, idx: u64) -> Self::Value;\n     fn const_get_real(&self, v: Self::Value) -> Option<(f64, bool)>;"}]}