{"sha": "6321a323cc4af032b7e34c1b09a71eefdb369ac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMjFhMzIzY2M0YWYwMzJiN2UzNGMxYjA5YTcxZWVmZGIzNjlhYzQ=", "commit": {"author": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-04-16T08:10:04Z"}, "committer": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-04-16T08:10:04Z"}, "message": "refactor Adjustment to use new PointerCast enum", "tree": {"sha": "2d1b5dfde1419722d4561cc86bd5e1b920abba7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d1b5dfde1419722d4561cc86bd5e1b920abba7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6321a323cc4af032b7e34c1b09a71eefdb369ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6321a323cc4af032b7e34c1b09a71eefdb369ac4", "html_url": "https://github.com/rust-lang/rust/commit/6321a323cc4af032b7e34c1b09a71eefdb369ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6321a323cc4af032b7e34c1b09a71eefdb369ac4/comments", "author": null, "committer": null, "parents": [{"sha": "5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "html_url": "https://github.com/rust-lang/rust/commit/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf"}], "stats": {"total": 169, "additions": 85, "deletions": 84}, "files": [{"sha": "8fffef1c64eb87ac6c70fb69958620a7dd56e587", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -705,11 +705,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             debug!(\"walk_adjustment expr={:?} adj={:?}\", expr, adjustment);\n             match adjustment.kind {\n                 adjustment::Adjust::NeverToAny |\n-                adjustment::Adjust::ReifyFnPointer |\n-                adjustment::Adjust::UnsafeFnPointer |\n-                adjustment::Adjust::ClosureFnPointer(_) |\n-                adjustment::Adjust::MutToConstPointer |\n-                adjustment::Adjust::Unsize => {\n+                adjustment::Adjust::Pointer(_)  => {\n                     // Creating a closure/fn-pointer or unsizing consumes\n                     // the input and stores it into the resulting rvalue.\n                     self.delegate_consume(expr.hir_id, expr.span, &cmt);"}, {"sha": "b3683f8e65acc7f1f243d4f3429b7a07b16930cd", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -619,12 +619,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n \n             adjustment::Adjust::NeverToAny |\n-            adjustment::Adjust::ReifyFnPointer |\n-            adjustment::Adjust::UnsafeFnPointer |\n-            adjustment::Adjust::ClosureFnPointer(_) |\n-            adjustment::Adjust::MutToConstPointer |\n-            adjustment::Adjust::Borrow(_) |\n-            adjustment::Adjust::Unsize => {\n+            adjustment::Adjust::Pointer(_) |\n+            adjustment::Adjust::Borrow(_) => {\n                 // Result is an rvalue.\n                 Ok(self.cat_rvalue_node(expr.hir_id, expr.span, target))\n             }"}, {"sha": "0843a3a55fc4103a2f0ac8be4cdb48a58f742b83", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -7,10 +7,29 @@ use rustc_macros::HashStable;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum PointerCast {\n+    /// Go from a fn-item type to a fn-pointer type.\n     ReifyFnPointer,\n+\n+    /// Go from a safe fn pointer to an unsafe fn pointer.\n     UnsafeFnPointer,\n+\n+    /// Go from a non-capturing closure to an fn pointer or an unsafe fn pointer.\n+    /// It cannot convert a closure that requires unsafe.\n     ClosureFnPointer(hir::Unsafety),\n+\n+    /// Go from a mut raw pointer to a const raw pointer.\n     MutToConstPointer,\n+\n+    /// Unsize a pointer/reference value, e.g., `&[T; n]` to\n+    /// `&[T]`. Note that the source could be a thin or fat pointer.\n+    /// This will do things like convert thin pointers to fat\n+    /// pointers, or convert structs containing thin pointers to\n+    /// structs containing fat pointers, or convert between fat\n+    /// pointers. We don't store the details of how the transform is\n+    /// done (in fact, we don't know that, because it might depend on\n+    /// the precise type parameters). We just store the target\n+    /// type. Codegen backends and miri figure out what has to be done\n+    /// based on the precise source/target type at hand.\n     Unsize,\n }\n \n@@ -65,36 +84,13 @@ pub enum Adjust<'tcx> {\n     /// Go from ! to any type.\n     NeverToAny,\n \n-    /// Go from a fn-item type to a fn-pointer type.\n-    ReifyFnPointer,\n-\n-    /// Go from a safe fn pointer to an unsafe fn pointer.\n-    UnsafeFnPointer,\n-\n-    /// Go from a non-capturing closure to an fn pointer or an unsafe fn pointer.\n-    /// It cannot convert a closure that requires unsafe.\n-    ClosureFnPointer(hir::Unsafety),\n-\n-    /// Go from a mut raw pointer to a const raw pointer.\n-    MutToConstPointer,\n-\n     /// Dereference once, producing a place.\n     Deref(Option<OverloadedDeref<'tcx>>),\n \n     /// Take the address and produce either a `&` or `*` pointer.\n     Borrow(AutoBorrow<'tcx>),\n \n-    /// Unsize a pointer/reference value, e.g., `&[T; n]` to\n-    /// `&[T]`. Note that the source could be a thin or fat pointer.\n-    /// This will do things like convert thin pointers to fat\n-    /// pointers, or convert structs containing thin pointers to\n-    /// structs containing fat pointers, or convert between fat\n-    /// pointers. We don't store the details of how the transform is\n-    /// done (in fact, we don't know that, because it might depend on\n-    /// the precise type parameters). We just store the target\n-    /// type. Codegen backends and miri figure out what has to be done\n-    /// based on the precise source/target type at hand.\n-    Unsize,\n+    Pointer(PointerCast),\n }\n \n /// An overloaded autoderef step, representing a `Deref(Mut)::deref(_mut)`"}, {"sha": "fe7ea775fdff614ac8f37255c21ed36b1b2b39c0", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -7,6 +7,7 @@ use crate::hir::def::Namespace;\n use crate::mir::ProjectionKind;\n use crate::mir::interpret::ConstValue;\n use crate::ty::{self, Lift, Ty, TyCtxt, ConstVid};\n+use crate::ty::adjustment::{PointerCast};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -626,16 +627,16 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjust<'a> {\n         match *self {\n             ty::adjustment::Adjust::NeverToAny =>\n                 Some(ty::adjustment::Adjust::NeverToAny),\n-            ty::adjustment::Adjust::ReifyFnPointer =>\n-                Some(ty::adjustment::Adjust::ReifyFnPointer),\n-            ty::adjustment::Adjust::UnsafeFnPointer =>\n-                Some(ty::adjustment::Adjust::UnsafeFnPointer),\n-            ty::adjustment::Adjust::ClosureFnPointer(unsafety) =>\n-                Some(ty::adjustment::Adjust::ClosureFnPointer(unsafety)),\n-            ty::adjustment::Adjust::MutToConstPointer =>\n-                Some(ty::adjustment::Adjust::MutToConstPointer),\n-            ty::adjustment::Adjust::Unsize =>\n-                Some(ty::adjustment::Adjust::Unsize),\n+            ty::adjustment::Adjust::Pointer(PointerCast::ReifyFnPointer) =>\n+                Some(ty::adjustment::Adjust::Pointer(PointerCast::ReifyFnPointer)),\n+            ty::adjustment::Adjust::Pointer(PointerCast::UnsafeFnPointer) =>\n+                Some(ty::adjustment::Adjust::Pointer(PointerCast::UnsafeFnPointer)),\n+            ty::adjustment::Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety)) =>\n+                Some(ty::adjustment::Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety))),\n+            ty::adjustment::Adjust::Pointer(PointerCast::MutToConstPointer) =>\n+                Some(ty::adjustment::Adjust::Pointer(PointerCast::MutToConstPointer)),\n+            ty::adjustment::Adjust::Pointer(PointerCast::Unsize) =>\n+                Some(ty::adjustment::Adjust::Pointer(PointerCast::Unsize)),\n             ty::adjustment::Adjust::Deref(ref overloaded) => {\n                 tcx.lift(overloaded).map(ty::adjustment::Adjust::Deref)\n             }\n@@ -1185,16 +1186,22 @@ BraceStructTypeFoldableImpl! {\n EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::Adjust<'tcx> {\n         (ty::adjustment::Adjust::NeverToAny),\n-        (ty::adjustment::Adjust::ReifyFnPointer),\n-        (ty::adjustment::Adjust::UnsafeFnPointer),\n-        (ty::adjustment::Adjust::ClosureFnPointer)(a),\n-        (ty::adjustment::Adjust::MutToConstPointer),\n-        (ty::adjustment::Adjust::Unsize),\n+        (ty::adjustment::Adjust::Pointer)(a),\n         (ty::adjustment::Adjust::Deref)(a),\n         (ty::adjustment::Adjust::Borrow)(a),\n     }\n }\n \n+EnumTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::PointerCast {\n+        (ty::adjustment::PointerCast::ReifyFnPointer),\n+        (ty::adjustment::PointerCast::UnsafeFnPointer),\n+        (ty::adjustment::PointerCast::ClosureFnPointer)(a),\n+        (ty::adjustment::PointerCast::MutToConstPointer),\n+        (ty::adjustment::PointerCast::Unsize),\n+    }\n+}\n+\n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::OverloadedDeref<'tcx> {\n         region, mutbl,"}, {"sha": "2133cd26e13ac7422adb8c72e92b5e81e155eddf", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def::{CtorOf, Def, CtorKind};\n use rustc::mir::interpret::{GlobalId, ErrorHandled, ConstValue};\n use rustc::ty::{self, AdtKind, Ty};\n-use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n+use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability, PointerCast};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::hir;\n use rustc::hir::def_id::LocalDefId;\n@@ -75,19 +75,19 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     -> Expr<'tcx> {\n     let Expr { temp_lifetime, mut span, .. } = expr;\n     let kind = match adjustment.kind {\n-        Adjust::ReifyFnPointer => {\n+        Adjust::Pointer(PointerCast::ReifyFnPointer) => {\n             ExprKind::ReifyFnPointer { source: expr.to_ref() }\n         }\n-        Adjust::UnsafeFnPointer => {\n+        Adjust::Pointer(PointerCast::UnsafeFnPointer) => {\n             ExprKind::UnsafeFnPointer { source: expr.to_ref() }\n         }\n-        Adjust::ClosureFnPointer(unsafety) => {\n+        Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety)) => {\n             ExprKind::ClosureFnPointer { source: expr.to_ref(), unsafety }\n         }\n         Adjust::NeverToAny => {\n             ExprKind::NeverToAny { source: expr.to_ref() }\n         }\n-        Adjust::MutToConstPointer => {\n+        Adjust::Pointer(PointerCast::MutToConstPointer) => {\n             ExprKind::MutToConstPointer { source: expr.to_ref() }\n         }\n         Adjust::Deref(None) => {\n@@ -187,7 +187,7 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             // since they get rid of a borrow implicitly.\n             ExprKind::Use { source: cast_expr.to_ref() }\n         }\n-        Adjust::Unsize => {\n+        Adjust::Pointer(PointerCast::Unsize) => {\n             // See the above comment for Adjust::Deref\n             if let ExprKind::Block { body } = expr.kind {\n                 if let Some(ref last_expr) = body.expr {"}, {"sha": "3e34524b55644d1d52d851cc42ef316c12d51c0f", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -12,7 +12,7 @@ use rustc_target::spec::abi::Abi;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::traits::{self, TraitEngine};\n-use rustc::ty::{self, TyCtxt, Ty, TypeFoldable, adjustment::{PointerCast}};\n+use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n use rustc::ty::query::Providers;\n use rustc::mir::*;\n@@ -1106,11 +1106,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             Rvalue::UnaryOp(UnOp::Not, _) |\n             Rvalue::NullaryOp(NullOp::SizeOf, _) |\n             Rvalue::CheckedBinaryOp(..) |\n-            Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), ..) |\n-            Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), ..) |\n-            Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), ..) |\n-            Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), ..) |\n-            Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), ..) |\n+            Rvalue::Cast(CastKind::Pointer(_), ..) |\n             Rvalue::Discriminant(..) |\n             Rvalue::Len(_) |\n             Rvalue::Ref(..) |"}, {"sha": "ba60fdc0273129e886649160a911feb673b09403", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -584,12 +584,8 @@ fn check_adjustments<'a, 'tcx>(\n     while let Some(adjustment) = adjustments.next() {\n         match adjustment.kind {\n             Adjust::NeverToAny |\n-            Adjust::ReifyFnPointer |\n-            Adjust::UnsafeFnPointer |\n-            Adjust::ClosureFnPointer(_) |\n-            Adjust::MutToConstPointer |\n-            Adjust::Borrow(_) |\n-            Adjust::Unsize => {}\n+            Adjust::Pointer(_) |\n+            Adjust::Borrow(_) => {}\n \n             Adjust::Deref(_) => {\n                 if let Some(next_adjustment) = adjustments.peek() {"}, {"sha": "85eb0f9d499669fd27424fd81ccb24cd6352d736", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -57,7 +57,9 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk};\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n-use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n+use rustc::ty::adjustment::{\n+    Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast\n+};\n use rustc::ty::{self, TypeAndMut, Ty, ClosureSubsts};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n@@ -512,7 +514,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         let coerce_target = self.next_ty_var(origin);\n         let mut coercion = self.unify_and(coerce_target, target, |target| {\n             let unsize = Adjustment {\n-                kind: Adjust::Unsize,\n+                kind: Adjust::Pointer(PointerCast::Unsize),\n                 target\n             };\n             match reborrow {\n@@ -661,7 +663,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         debug!(\"coerce_from_fn_pointer(a={:?}, b={:?})\", a, b);\n \n         self.coerce_from_safe_fn(a, fn_ty_a, b,\n-            simple(Adjust::UnsafeFnPointer), identity)\n+            simple(Adjust::Pointer(PointerCast::UnsafeFnPointer)), identity)\n     }\n \n     fn coerce_from_fn_item(&self,\n@@ -687,11 +689,17 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                     b,\n                     |unsafe_ty| {\n                         vec![\n-                            Adjustment { kind: Adjust::ReifyFnPointer, target: a_fn_pointer },\n-                            Adjustment { kind: Adjust::UnsafeFnPointer, target: unsafe_ty },\n+                            Adjustment {\n+                                kind: Adjust::Pointer(PointerCast::ReifyFnPointer),\n+                                target: a_fn_pointer\n+                            },\n+                            Adjustment {\n+                                kind: Adjust::Pointer(PointerCast::UnsafeFnPointer),\n+                                target: unsafe_ty\n+                            },\n                         ]\n                     },\n-                    simple(Adjust::ReifyFnPointer)\n+                    simple(Adjust::Pointer(PointerCast::ReifyFnPointer))\n                 )?;\n \n                 obligations.extend(o2);\n@@ -727,7 +735,9 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 let pointer_ty = self.tcx.coerce_closure_fn_ty(sig, unsafety);\n                 debug!(\"coerce_closure_to_fn(a={:?}, b={:?}, pty={:?})\",\n                        a, b, pointer_ty);\n-                self.unify_and(pointer_ty, b, simple(Adjust::ClosureFnPointer(unsafety)))\n+                self.unify_and(pointer_ty, b, simple(\n+                    Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety))\n+                ))\n             }\n             _ => self.unify_and(a, b, identity),\n         }\n@@ -766,7 +776,9 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 }]\n             })\n         } else if mt_a.mutbl != mutbl_b {\n-            self.unify_and(a_unsafe, b, simple(Adjust::MutToConstPointer))\n+            self.unify_and(\n+                a_unsafe, b, simple(Adjust::Pointer(PointerCast::MutToConstPointer))\n+            )\n         } else {\n             self.unify_and(a_unsafe, b, identity)\n         }\n@@ -857,7 +869,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // The only adjustment that can produce an fn item is\n                 // `NeverToAny`, so this should always be valid.\n                 self.apply_adjustments(expr, vec![Adjustment {\n-                    kind: Adjust::ReifyFnPointer,\n+                    kind: Adjust::Pointer(PointerCast::ReifyFnPointer),\n                     target: fn_ptr\n                 }]);\n             }"}, {"sha": "f93d5449e8b7892e0895cf3a93a1cb57685b540d", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -7,7 +7,7 @@ use crate::hir::def_id::DefId;\n use rustc::ty::subst::{Subst, SubstsRef};\n use rustc::traits;\n use rustc::ty::{self, Ty, GenericParamDefKind};\n-use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref};\n+use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref, PointerCast};\n use rustc::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::infer::{self, InferOk};\n@@ -179,7 +179,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                     ty: unsize_target\n                 });\n                 adjustments.push(Adjustment {\n-                    kind: Adjust::Unsize,\n+                    kind: Adjust::Pointer(PointerCast::Unsize),\n                     target\n                 });\n             }\n@@ -565,7 +565,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             // If we have an autoref followed by unsizing at the end, fix the unsize target.\n             match adjustments[..] {\n                 [.., Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(..)), .. },\n-                 Adjustment { kind: Adjust::Unsize, ref mut target }] => {\n+                 Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), ref mut target }] => {\n                     *target = method.sig.inputs()[0];\n                 }\n                 _ => {}"}, {"sha": "748e3d643a1e9f43edbd5d88c95bdbbf81bd672c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -106,7 +106,9 @@ use rustc::ty::{\n     self, AdtKind, CanonicalUserType, Ty, TyCtxt, GenericParamDefKind, Visibility,\n     ToPolyTraitRef, ToPredicate, RegionKind, UserType\n };\n-use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n+use rustc::ty::adjustment::{\n+    Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast\n+};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{UnpackedKind, Subst, InternalSubsts, SubstsRef, UserSelfTy, UserSubsts};\n@@ -2664,7 +2666,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 if unsize {\n                     adjustments.push(Adjustment {\n-                        kind: Adjust::Unsize,\n+                        kind: Adjust::Pointer(PointerCast::Unsize),\n                         target: method.sig.inputs()[0]\n                     });\n                 }"}, {"sha": "d9df4672f14782a3f513f870d81831de034747dc", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6321a323cc4af032b7e34c1b09a71eefdb369ac4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=6321a323cc4af032b7e34c1b09a71eefdb369ac4", "patch": "@@ -8,7 +8,7 @@ use rustc::hir;\n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::InferCtxt;\n-use rustc::ty::adjustment::{Adjust, Adjustment};\n+use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder};\n use rustc::ty::subst::UnpackedKind;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -197,7 +197,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                             // Since this is \"after\" the other adjustment to be\n                             // discarded, we do an extra `pop()`\n                             Some(Adjustment {\n-                                kind: Adjust::Unsize,\n+                                kind: Adjust::Pointer(PointerCast::Unsize),\n                                 ..\n                             }) => {\n                                 // So the borrow discard actually happens here"}]}