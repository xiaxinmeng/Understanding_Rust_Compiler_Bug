{"sha": "a60ffa06aebeb87acfd6c3226a91ed508b124e21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MGZmYTA2YWViZWI4N2FjZmQ2YzMyMjZhOTFlZDUwOGIxMjRlMjE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-27T19:16:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-27T19:16:46Z"}, "message": "Rollup merge of #46249 - estebank:suggest-slice, r=arielb1\n\nSuggest using slice when encountering `let x = \"\"[..];`\n\nFix #26319.", "tree": {"sha": "629a74176b58c1acf0800857cf6596f3221cbe0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/629a74176b58c1acf0800857cf6596f3221cbe0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a60ffa06aebeb87acfd6c3226a91ed508b124e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a60ffa06aebeb87acfd6c3226a91ed508b124e21", "html_url": "https://github.com/rust-lang/rust/commit/a60ffa06aebeb87acfd6c3226a91ed508b124e21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a60ffa06aebeb87acfd6c3226a91ed508b124e21/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "840e6c12ba0b6ab500040b65c10b611ef201f8af", "url": "https://api.github.com/repos/rust-lang/rust/commits/840e6c12ba0b6ab500040b65c10b611ef201f8af", "html_url": "https://github.com/rust-lang/rust/commit/840e6c12ba0b6ab500040b65c10b611ef201f8af"}, {"sha": "fa44927d2c017359a7d4b14a31e96ee35472b406", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa44927d2c017359a7d4b14a31e96ee35472b406", "html_url": "https://github.com/rust-lang/rust/commit/fa44927d2c017359a7d4b14a31e96ee35472b406"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "5703c5c870e88efd5813a0072f4c1754533086ac", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a60ffa06aebeb87acfd6c3226a91ed508b124e21/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60ffa06aebeb87acfd6c3226a91ed508b124e21/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=a60ffa06aebeb87acfd6c3226a91ed508b124e21", "patch": "@@ -581,6 +581,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                      trait_ref.self_ty()));\n                         }\n \n+                        self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n+\n                         // Try to report a help message\n                         if !trait_ref.has_infer_types() &&\n                             self.predicate_can_apply(obligation.param_env, trait_ref) {\n@@ -821,6 +823,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         err.emit();\n     }\n \n+    /// When encountering an assignment of an unsized trait, like `let x = \"\"[..];`, provide a\n+    /// suggestion to borrow the initializer in order to use have a slice instead.\n+    fn suggest_borrow_on_unsized_slice(&self,\n+                                       code: &ObligationCauseCode<'tcx>,\n+                                       err: &mut DiagnosticBuilder<'tcx>) {\n+        if let &ObligationCauseCode::VariableType(node_id) = code {\n+            let parent_node = self.tcx.hir.get_parent_node(node_id);\n+            if let Some(hir::map::NodeLocal(ref local)) = self.tcx.hir.find(parent_node) {\n+                if let Some(ref expr) = local.init {\n+                    if let hir::ExprIndex(_, _) = expr.node {\n+                        if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n+                            err.span_suggestion(expr.span,\n+                                                \"consider borrowing here\",\n+                                                format!(\"&{}\", snippet));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     fn report_arg_count_mismatch(\n         &self,\n         span: Span,"}, {"sha": "6c7f4852a4ae53be89734cf1668c0b728334f9b8", "filename": "src/test/ui/suggestions/str-array-assignment.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a60ffa06aebeb87acfd6c3226a91ed508b124e21/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60ffa06aebeb87acfd6c3226a91ed508b124e21/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs?ref=a60ffa06aebeb87acfd6c3226a91ed508b124e21", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() { //~ NOTE expected `()` because of default return type\n+  let s = \"abc\";\n+  let t = if true { s[..2] } else { s };\n+  //~^ ERROR if and else have incompatible types\n+  //~| NOTE expected str, found &str\n+  //~| NOTE expected type\n+  let u: &str = if true { s[..2] } else { s };\n+  //~^ ERROR mismatched types\n+  //~| NOTE expected &str, found str\n+  //~| NOTE expected type\n+  let v = s[..2];\n+  //~^ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+  //~| HELP consider borrowing here\n+  //~| NOTE `str` does not have a constant size known at compile-time\n+  //~| HELP the trait `std::marker::Sized` is not implemented for `str`\n+  //~| NOTE all local variables must have a statically known size\n+  let w: &str = s[..2];\n+  //~^ ERROR mismatched types\n+  //~| NOTE expected &str, found str\n+  //~| NOTE expected type\n+  //~| HELP try with `&s[..2]`\n+}"}, {"sha": "14b744c2e469c3e8d67d714e48d5e6e002436401", "filename": "src/test/ui/suggestions/str-array-assignment.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a60ffa06aebeb87acfd6c3226a91ed508b124e21/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a60ffa06aebeb87acfd6c3226a91ed508b124e21/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr?ref=a60ffa06aebeb87acfd6c3226a91ed508b124e21", "patch": "@@ -0,0 +1,44 @@\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/str-array-assignment.rs:13:11\n+   |\n+13 |   let t = if true { s[..2] } else { s };\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found &str\n+   |\n+   = note: expected type `str`\n+              found type `&str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/str-array-assignment.rs:17:27\n+   |\n+11 | fn main() { //~ NOTE expected `()` because of default return type\n+   |           - expected `()` because of default return type\n+...\n+17 |   let u: &str = if true { s[..2] } else { s };\n+   |                           ^^^^^^ expected &str, found str\n+   |\n+   = note: expected type `&str`\n+              found type `str`\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/str-array-assignment.rs:21:7\n+   |\n+21 |   let v = s[..2];\n+   |       ^   ------ help: consider borrowing here: `&s[..2]`\n+   |       |\n+   |       `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: all local variables must have a statically known size\n+\n+error[E0308]: mismatched types\n+  --> $DIR/str-array-assignment.rs:27:17\n+   |\n+27 |   let w: &str = s[..2];\n+   |                 ^^^^^^ expected &str, found str\n+   |\n+   = note: expected type `&str`\n+              found type `str`\n+   = help: try with `&s[..2]`\n+\n+error: aborting due to 4 previous errors\n+"}]}