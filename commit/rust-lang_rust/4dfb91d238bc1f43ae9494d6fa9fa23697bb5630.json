{"sha": "4dfb91d238bc1f43ae9494d6fa9fa23697bb5630", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZmI5MWQyMzhiYzFmNDNhZTk0OTRkNmZhOWZhMjM2OTdiYjU2MzA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-14T12:09:05Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-14T12:09:05Z"}, "message": "Always run rustc in a thread", "tree": {"sha": "4343fc17b94b804bdc6503a12fe9b91ff38a8606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4343fc17b94b804bdc6503a12fe9b91ff38a8606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dfb91d238bc1f43ae9494d6fa9fa23697bb5630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dfb91d238bc1f43ae9494d6fa9fa23697bb5630", "html_url": "https://github.com/rust-lang/rust/commit/4dfb91d238bc1f43ae9494d6fa9fa23697bb5630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dfb91d238bc1f43ae9494d6fa9fa23697bb5630/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "664ede88faf57b8fc09715fc66cd9e46490ce64d", "url": "https://api.github.com/repos/rust-lang/rust/commits/664ede88faf57b8fc09715fc66cd9e46490ce64d", "html_url": "https://github.com/rust-lang/rust/commit/664ede88faf57b8fc09715fc66cd9e46490ce64d"}], "stats": {"total": 66, "additions": 5, "deletions": 61}, "files": [{"sha": "cec0f31819d7d89ebf9b52601efb3faf5b606bb9", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 61, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4dfb91d238bc1f43ae9494d6fa9fa23697bb5630/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfb91d238bc1f43ae9494d6fa9fa23697bb5630/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4dfb91d238bc1f43ae9494d6fa9fa23697bb5630", "patch": "@@ -1482,69 +1482,13 @@ pub fn in_named_rustc_thread<F, R>(name: String, f: F) -> Result<R, Box<dyn Any\n     where F: FnOnce() -> R + Send + 'static,\n           R: Send + 'static,\n {\n-    #[cfg(all(unix, not(target_os = \"haiku\")))]\n-    let spawn_thread = unsafe {\n-        // Fetch the current resource limits\n-        let mut rlim = libc::rlimit {\n-            rlim_cur: 0,\n-            rlim_max: 0,\n-        };\n-        if libc::getrlimit(libc::RLIMIT_STACK, &mut rlim) != 0 {\n-            let err = io::Error::last_os_error();\n-            error!(\"in_rustc_thread: error calling getrlimit: {}\", err);\n-            true\n-        } else if rlim.rlim_max < STACK_SIZE as libc::rlim_t {\n-            true\n-        } else if rlim.rlim_cur < STACK_SIZE as libc::rlim_t {\n-            std::rt::deinit_stack_guard();\n-            rlim.rlim_cur = STACK_SIZE as libc::rlim_t;\n-            if libc::setrlimit(libc::RLIMIT_STACK, &mut rlim) != 0 {\n-                let err = io::Error::last_os_error();\n-                error!(\"in_rustc_thread: error calling setrlimit: {}\", err);\n-                std::rt::update_stack_guard();\n-                true\n-            } else {\n-                std::rt::update_stack_guard();\n-                false\n-            }\n-        } else {\n-            false\n-        }\n-    };\n-\n-    // We set the stack size at link time. See src/rustc/rustc.rs.\n-    #[cfg(windows)]\n-    let spawn_thread = false;\n-\n-    #[cfg(target_os = \"haiku\")]\n-    let spawn_thread = unsafe {\n-        // Haiku does not have setrlimit implemented for the stack size.\n-        // By default it does have the 16 MB stack limit, but we check this in\n-        // case the minimum STACK_SIZE changes or Haiku's defaults change.\n-        let mut rlim = libc::rlimit {\n-            rlim_cur: 0,\n-            rlim_max: 0,\n-        };\n-        if libc::getrlimit(libc::RLIMIT_STACK, &mut rlim) != 0 {\n-            let err = io::Error::last_os_error();\n-            error!(\"in_rustc_thread: error calling getrlimit: {}\", err);\n-            true\n-        } else if rlim.rlim_cur >= STACK_SIZE {\n-            false\n-        } else {\n-            true\n-        }\n-    };\n-\n-    #[cfg(not(any(windows, unix)))]\n-    let spawn_thread = true;\n-\n-    // The or condition is added from backward compatibility.\n-    if spawn_thread || env::var_os(\"RUST_MIN_STACK\").is_some() {\n+    // We need a thread for soundness of thread local storage in rustc. For debugging purposes\n+    // we allow an escape hatch where everything runs on the main thread.\n+    if env::var_os(\"RUSTC_UNSTABLE_NO_MAIN_THREAD\").is_none() {\n         let mut cfg = thread::Builder::new().name(name);\n \n-        // FIXME: Hacks on hacks. If the env is trying to override the stack size\n-        // then *don't* set it explicitly.\n+        // If the env is trying to override the stack size then *don't* set it explicitly.\n+        // The libstd thread impl will fetch the `RUST_MIN_STACK` env var itself.\n         if env::var_os(\"RUST_MIN_STACK\").is_none() {\n             cfg = cfg.stack_size(STACK_SIZE);\n         }"}]}