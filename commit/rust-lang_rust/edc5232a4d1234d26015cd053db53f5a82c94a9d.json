{"sha": "edc5232a4d1234d26015cd053db53f5a82c94a9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYzUyMzJhNGQxMjM0ZDI2MDE1Y2QwNTNkYjUzZjVhODJjOTRhOWQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-10T18:32:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-22T19:01:48Z"}, "message": "Retire impl_stable_hash_for.", "tree": {"sha": "696d4b6226dc4681b198c5dbfd6e2ec877a53415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/696d4b6226dc4681b198c5dbfd6e2ec877a53415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc5232a4d1234d26015cd053db53f5a82c94a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc5232a4d1234d26015cd053db53f5a82c94a9d", "html_url": "https://github.com/rust-lang/rust/commit/edc5232a4d1234d26015cd053db53f5a82c94a9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc5232a4d1234d26015cd053db53f5a82c94a9d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c86a7994733db6d405e33404afa09c63c0bef4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c86a7994733db6d405e33404afa09c63c0bef4d", "html_url": "https://github.com/rust-lang/rust/commit/8c86a7994733db6d405e33404afa09c63c0bef4d"}], "stats": {"total": 123, "additions": 6, "deletions": 117}, "files": [{"sha": "6e03056283235bba934f00be6906b1227dec3541", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/edc5232a4d1234d26015cd053db53f5a82c94a9d/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc5232a4d1234d26015cd053db53f5a82c94a9d/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=edc5232a4d1234d26015cd053db53f5a82c94a9d", "patch": "@@ -18,7 +18,12 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n impl<'ctx> rustc_target::StableHashingContextLike for StableHashingContext<'ctx> {}\n \n-impl_stable_hash_for!(struct ::syntax::ast::Lifetime { id, ident });\n+impl<'a> HashStable<StableHashingContext<'a>> for ast::Lifetime {\n+    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n+        self.id.hash_stable(hcx, hasher);\n+        self.ident.hash_stable(hcx, hasher);\n+    }\n+}\n \n impl<'a> HashStable<StableHashingContext<'a>> for [ast::Attribute] {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "2bda0c0bef02daf5fa589bf033e29f85120dc51d", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/edc5232a4d1234d26015cd053db53f5a82c94a9d/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc5232a4d1234d26015cd053db53f5a82c94a9d/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=edc5232a4d1234d26015cd053db53f5a82c94a9d", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n macro_rules! enum_from_u32 {\n     ($(#[$attr:meta])* pub enum $name:ident {\n         $($variant:ident = $e:expr,)*\n@@ -52,120 +50,6 @@ macro_rules! span_bug {\n     })\n }\n \n-#[macro_export]\n-macro_rules! __impl_stable_hash_field {\n-    ($field:ident, $ctx:expr, $hasher:expr) => ($field.hash_stable($ctx, $hasher));\n-    ($field:ident, $ctx:expr, $hasher:expr, _) => ({ let _ = $field; });\n-    ($field:ident, $ctx:expr, $hasher:expr, $delegate:expr) => ($delegate.hash_stable($ctx, $hasher));\n-}\n-\n-#[macro_export]\n-macro_rules! impl_stable_hash_for {\n-    // Enums\n-    (enum $enum_name:path {\n-        $( $variant:ident\n-           // this incorrectly allows specifying both tuple-like and struct-like fields, as in `Variant(a,b){c,d}`,\n-           // when it should be only one or the other\n-           $( ( $($field:ident $(-> $delegate:tt)?),* ) )?\n-           $( { $($named_field:ident $(-> $named_delegate:tt)?),* } )?\n-        ),* $(,)?\n-    }) => {\n-        impl_stable_hash_for!(\n-            impl<> for enum $enum_name [ $enum_name ] { $( $variant\n-                $( ( $($field $(-> $delegate)?),* ) )?\n-                $( { $($named_field $(-> $named_delegate)?),* } )?\n-            ),* }\n-        );\n-    };\n-    // We want to use the enum name both in the `impl ... for $enum_name` as well as for\n-    // importing all the variants. Unfortunately it seems we have to take the name\n-    // twice for this purpose\n-    (impl<$($T:ident),* $(,)?>\n-        for enum $enum_name:path\n-        [ $enum_path:path ]\n-    {\n-        $( $variant:ident\n-           // this incorrectly allows specifying both tuple-like and struct-like fields, as in `Variant(a,b){c,d}`,\n-           // when it should be only one or the other\n-           $( ( $($field:ident $(-> $delegate:tt)?),* ) )?\n-           $( { $($named_field:ident $(-> $named_delegate:tt)?),* } )?\n-        ),* $(,)?\n-    }) => {\n-        impl<$($T,)*>\n-            ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>\n-            for $enum_name\n-            where $($T: ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>),*\n-        {\n-            #[inline]\n-            fn hash_stable(&self,\n-                           __ctx: &mut $crate::ich::StableHashingContext<'a>,\n-                           __hasher: &mut ::rustc_data_structures::stable_hasher::StableHasher) {\n-                use $enum_path::*;\n-                ::std::mem::discriminant(self).hash_stable(__ctx, __hasher);\n-\n-                match *self {\n-                    $(\n-                        $variant $( ( $(ref $field),* ) )? $( { $(ref $named_field),* } )? => {\n-                            $($( __impl_stable_hash_field!($field, __ctx, __hasher $(, $delegate)?) );*)?\n-                            $($( __impl_stable_hash_field!($named_field, __ctx, __hasher $(, $named_delegate)?) );*)?\n-                        }\n-                    )*\n-                }\n-            }\n-        }\n-    };\n-    // Structs\n-    (struct $struct_name:path { $($field:ident $(-> $delegate:tt)?),* $(,)? }) => {\n-        impl_stable_hash_for!(\n-            impl<> for struct $struct_name { $($field $(-> $delegate)?),* }\n-        );\n-    };\n-    (impl<$($T:ident),* $(,)?> for struct $struct_name:path {\n-        $($field:ident $(-> $delegate:tt)?),* $(,)?\n-    }) => {\n-        impl<$($T,)*>\n-            ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>> for $struct_name\n-            where $($T: ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>),*\n-        {\n-            #[inline]\n-            fn hash_stable(&self,\n-                           __ctx: &mut $crate::ich::StableHashingContext<'a>,\n-                           __hasher: &mut ::rustc_data_structures::stable_hasher::StableHasher) {\n-                let $struct_name {\n-                    $(ref $field),*\n-                } = *self;\n-\n-                $( __impl_stable_hash_field!($field, __ctx, __hasher $(, $delegate)?) );*\n-            }\n-        }\n-    };\n-    // Tuple structs\n-    // We cannot use normal parentheses here, the parser won't allow it\n-    (tuple_struct $struct_name:path { $($field:ident $(-> $delegate:tt)?),*  $(,)? }) => {\n-        impl_stable_hash_for!(\n-            impl<> for tuple_struct $struct_name { $($field $(-> $delegate)?),* }\n-        );\n-    };\n-    (impl<$($T:ident),* $(,)?>\n-     for tuple_struct $struct_name:path { $($field:ident $(-> $delegate:tt)?),*  $(,)? }) => {\n-        impl<$($T,)*>\n-            ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>> for $struct_name\n-            where $($T: ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>),*\n-        {\n-            #[inline]\n-            fn hash_stable(&self,\n-                           __ctx: &mut $crate::ich::StableHashingContext<'a>,\n-                           __hasher: &mut ::rustc_data_structures::stable_hasher::StableHasher) {\n-                let $struct_name (\n-                    $(ref $field),*\n-                ) = *self;\n-\n-                $( __impl_stable_hash_field!($field, __ctx, __hasher $(, $delegate)?) );*\n-            }\n-        }\n-    };\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // Lift and TypeFoldable macros\n //"}]}