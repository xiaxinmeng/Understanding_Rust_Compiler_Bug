{"sha": "c55b68aaef5dc8f6717a16459a337c6266c36b56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NWI2OGFhZWY1ZGM4ZjY3MTdhMTY0NTlhMzM3YzYyNjZjMzZiNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-05T03:39:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-05T03:39:16Z"}, "message": "Auto merge of #60508 - varkor:const-generics-fold-ct-err, r=petrochenkov\n\nFix substs issues for const errors\n\nFixes https://github.com/rust-lang/rust/issues/60503.", "tree": {"sha": "971452345e0976a21498dc180a39edc1558fb90a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/971452345e0976a21498dc180a39edc1558fb90a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c55b68aaef5dc8f6717a16459a337c6266c36b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c55b68aaef5dc8f6717a16459a337c6266c36b56", "html_url": "https://github.com/rust-lang/rust/commit/c55b68aaef5dc8f6717a16459a337c6266c36b56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c55b68aaef5dc8f6717a16459a337c6266c36b56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a823fa4fa814dc7b556123270dd4a3fb7128a567", "url": "https://api.github.com/repos/rust-lang/rust/commits/a823fa4fa814dc7b556123270dd4a3fb7128a567", "html_url": "https://github.com/rust-lang/rust/commit/a823fa4fa814dc7b556123270dd4a3fb7128a567"}, {"sha": "3e6787cb4cadc036cab3dfee5f7e25f553e6ab24", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24", "html_url": "https://github.com/rust-lang/rust/commit/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24"}], "stats": {"total": 142, "additions": 106, "deletions": 36}, "files": [{"sha": "8d51fbc174a045cba9e5678189a026dfcd30ef4e", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=c55b68aaef5dc8f6717a16459a337c6266c36b56", "patch": "@@ -550,17 +550,32 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n         let opt_ty = self.substs.get(p.idx as usize).map(|k| k.unpack());\n         let ty = match opt_ty {\n             Some(UnpackedKind::Type(ty)) => ty,\n-            _ => {\n+            Some(kind) => {\n                 let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n                     span,\n-                    \"Type parameter `{:?}` ({:?}/{}) out of range \\\n+                    \"expected type for `{:?}` ({:?}/{}) but found {:?} \\\n                      when substituting (root type={:?}) substs={:?}\",\n                     p,\n                     source_ty,\n                     p.idx,\n+                    kind,\n                     self.root_ty,\n-                    self.substs);\n+                    self.substs,\n+                );\n+            }\n+            None => {\n+                let span = self.span.unwrap_or(DUMMY_SP);\n+                span_bug!(\n+                    span,\n+                    \"type parameter `{:?}` ({:?}/{}) out of range \\\n+                     when substituting (root type={:?}) substs={:?}\",\n+                    p,\n+                    source_ty,\n+                    p.idx,\n+                    self.root_ty,\n+                    self.substs,\n+                );\n             }\n         };\n \n@@ -570,29 +585,41 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n     fn const_for_param(\n         &self,\n         p: ParamConst,\n-        source_cn: &'tcx ty::Const<'tcx>\n+        source_ct: &'tcx ty::Const<'tcx>\n     ) -> &'tcx ty::Const<'tcx> {\n         // Look up the const in the substitutions. It really should be in there.\n-        let opt_cn = self.substs.get(p.index as usize).map(|k| k.unpack());\n-        let cn = match opt_cn {\n-            Some(UnpackedKind::Const(cn)) => cn,\n-            _ => {\n+        let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());\n+        let ct = match opt_ct {\n+            Some(UnpackedKind::Const(ct)) => ct,\n+            Some(kind) => {\n                 let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n                     span,\n-                    \"Const parameter `{:?}` ({:?}/{}) out of range \\\n-                     when substituting (root type={:?}) substs={:?}\",\n+                    \"expected const for `{:?}` ({:?}/{}) but found {:?} \\\n+                     when substituting substs={:?}\",\n                     p,\n-                    source_cn,\n+                    source_ct,\n+                    p.index,\n+                    kind,\n+                    self.substs,\n+                );\n+            }\n+            None => {\n+                let span = self.span.unwrap_or(DUMMY_SP);\n+                span_bug!(\n+                    span,\n+                    \"const parameter `{:?}` ({:?}/{}) out of range \\\n+                     when substituting substs={:?}\",\n+                    p,\n+                    source_ct,\n                     p.index,\n-                    self.root_ty,\n                     self.substs,\n                 );\n             }\n         };\n \n         // FIXME(const_generics): shift const through binders\n-        cn\n+        ct\n     }\n \n     /// It is sometimes necessary to adjust the De Bruijn indices during substitution. This occurs"}, {"sha": "6cb3161382af2102ccdeb604436d360e388988b0", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=c55b68aaef5dc8f6717a16459a337c6266c36b56", "patch": "@@ -21,7 +21,7 @@ use syntax::visit::{self, Visitor};\n use syntax::{span_err, struct_span_err, walk_list};\n use syntax_ext::proc_macro_decls::is_proc_macro_attr;\n use syntax_pos::{Span, MultiSpan};\n-use errors::Applicability;\n+use errors::{Applicability, FatalError};\n use log::debug;\n \n #[derive(Copy, Clone, Debug)]\n@@ -368,6 +368,8 @@ fn validate_generics_order<'a>(\n     let mut max_param: Option<ParamKindOrd> = None;\n     let mut out_of_order = FxHashMap::default();\n     let mut param_idents = vec![];\n+    let mut found_type = false;\n+    let mut found_const = false;\n \n     for (kind, bounds, span, ident) in generics {\n         if let Some(ident) = ident {\n@@ -381,6 +383,11 @@ fn validate_generics_order<'a>(\n             }\n             Some(_) | None => *max_param = Some(kind),\n         };\n+        match kind {\n+            ParamKindOrd::Type => found_type = true,\n+            ParamKindOrd::Const => found_const = true,\n+            _ => {}\n+        }\n     }\n \n     let mut ordered_params = \"<\".to_string();\n@@ -408,8 +415,8 @@ fn validate_generics_order<'a>(\n         GenericPosition::Arg => \"argument\",\n     };\n \n-    for (param_ord, (max_param, spans)) in out_of_order {\n-        let mut err = handler.struct_span_err(spans,\n+    for (param_ord, (max_param, spans)) in &out_of_order {\n+        let mut err = handler.struct_span_err(spans.clone(),\n             &format!(\n                 \"{} {pos}s must be declared prior to {} {pos}s\",\n                 param_ord,\n@@ -430,6 +437,13 @@ fn validate_generics_order<'a>(\n         }\n         err.emit();\n     }\n+\n+    // FIXME(const_generics): we shouldn't have to abort here at all, but we currently get ICEs\n+    // if we don't. Const parameters and type parameters can currently conflict if they\n+    // are out-of-order.\n+    if !out_of_order.is_empty() && found_type && found_const {\n+        FatalError.raise();\n+    }\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {"}, {"sha": "16033c6c50fd0c91c143eac552b20aaeb20e5c5f", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c55b68aaef5dc8f6717a16459a337c6266c36b56", "patch": "@@ -553,7 +553,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         tcx.intern_substs(&substs)\n     }\n \n-    /// Given the type/region arguments provided to some path (along with\n+    /// Given the type/lifetime/const arguments provided to some path (along with\n     /// an implicit `Self`, if this is a trait reference) returns the complete\n     /// set of substitutions. This may involve applying defaulted type parameters.\n     ///\n@@ -678,7 +678,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     GenericParamDefKind::Const => {\n                         // FIXME(const_generics:defaults)\n                         // We've already errored above about the mismatch.\n-                        tcx.types.err.into()\n+                        tcx.consts.err.into()\n                     }\n                 }\n             },"}, {"sha": "1420c66c73ea3ca6849d0f172601d39caab897e3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c55b68aaef5dc8f6717a16459a337c6266c36b56", "patch": "@@ -421,8 +421,8 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n     return_ty: Option<Ty<'tcx>>,\n ) {\n     let predicates = fcx.tcx.predicates_of(def_id);\n-\n     let generics = tcx.generics_of(def_id);\n+\n     let is_our_default = |def: &ty::GenericParamDef| {\n         match def.kind {\n             GenericParamDefKind::Type { has_default, .. } => {\n@@ -465,6 +465,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n                 // All regions are identity.\n                 fcx.tcx.mk_param_from_def(param)\n             }\n+\n             GenericParamDefKind::Type { .. } => {\n                 // If the param has a default,\n                 if is_our_default(param) {\n@@ -478,25 +479,24 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n                 // Mark unwanted params as err.\n                 fcx.tcx.types.err.into()\n             }\n+\n             GenericParamDefKind::Const => {\n                 // FIXME(const_generics:defaults)\n-                fcx.tcx.types.err.into()\n+                fcx.tcx.consts.err.into()\n             }\n         }\n     });\n+\n     // Now we build the substituted predicates.\n     let default_obligations = predicates.predicates.iter().flat_map(|&(pred, _)| {\n         #[derive(Default)]\n         struct CountParams { params: FxHashSet<u32> }\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-                match t.sty {\n-                    ty::Param(p) => {\n-                        self.params.insert(p.idx);\n-                        t.super_visit_with(self)\n-                    }\n-                    _ => t.super_visit_with(self)\n+                if let ty::Param(param) = t.sty {\n+                    self.params.insert(param.idx);\n                 }\n+                t.super_visit_with(self)\n             }\n \n             fn visit_region(&mut self, _: ty::Region<'tcx>) -> bool {"}, {"sha": "2c81681b85e7ddfb6cc9e07e530e67e77dcf9b76", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=c55b68aaef5dc8f6717a16459a337c6266c36b56", "patch": "@@ -1,12 +1,12 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-fn foo<const X: (), T>(_: &T) {\n-    //~^ ERROR type parameters must be declared prior to const parameters\n-}\n-\n fn bar<const X: (), 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters\n }\n \n+fn foo<const X: (), T>(_: &T) {\n+    //~^ ERROR type parameters must be declared prior to const parameters\n+}\n+\n fn main() {}"}, {"sha": "33f981d1eba9b38c684b1dbd60095d35b90fa588", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=c55b68aaef5dc8f6717a16459a337c6266c36b56", "patch": "@@ -4,17 +4,17 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n \n-error: type parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:4:21\n    |\n-LL | fn foo<const X: (), T>(_: &T) {\n-   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n+LL | fn bar<const X: (), 'a>(_: &'a ()) {\n+   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n \n-error: lifetime parameters must be declared prior to const parameters\n+error: type parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:8:21\n    |\n-LL | fn bar<const X: (), 'a>(_: &'a ()) {\n-   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n+LL | fn foo<const X: (), T>(_: &T) {\n+   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8a81bcc1a80c840ac338d274a3c0e1d1cf6ffeec", "filename": "src/test/ui/const-generics/const-param-in-trait-ungated.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.rs?ref=c55b68aaef5dc8f6717a16459a337c6266c36b56", "patch": "@@ -0,0 +1,3 @@\n+trait Trait<const T: ()> {} //~ ERROR const generics are unstable\n+\n+fn main() {}"}, {"sha": "53bc973841416d705a8e351f4c5b29ef39f9f133", "filename": "src/test/ui/const-generics/const-param-in-trait-ungated.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr?ref=c55b68aaef5dc8f6717a16459a337c6266c36b56", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: const generics are unstable\n+  --> $DIR/const-param-in-trait-ungated.rs:1:19\n+   |\n+LL | trait Trait<const T: ()> {}\n+   |                   ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = help: add #![feature(const_generics)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6e4f65fe6cac0bf3bcf622dc0c36c9dbb8975859", "filename": "src/test/ui/const-generics/const-param-in-trait.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs?ref=c55b68aaef5dc8f6717a16459a337c6266c36b56", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+trait Trait<const T: ()> {}\n+\n+fn main() {}"}, {"sha": "a48eefddaa844f7179f1b66b56b9619209b4f181", "filename": "src/test/ui/const-generics/const-param-in-trait.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55b68aaef5dc8f6717a16459a337c6266c36b56/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr?ref=c55b68aaef5dc8f6717a16459a337c6266c36b56", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-param-in-trait.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}]}