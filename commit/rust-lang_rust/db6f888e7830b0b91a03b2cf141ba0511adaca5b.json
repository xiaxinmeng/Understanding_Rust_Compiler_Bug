{"sha": "db6f888e7830b0b91a03b2cf141ba0511adaca5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNmY4ODhlNzgzMGIwYjkxYTAzYjJjZjE0MWJhMDUxMWFkYWNhNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-03T10:59:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-03T10:59:47Z"}, "message": "Auto merge of #31375 - nagisa:path-docs, r=alexcrichton", "tree": {"sha": "e0e614ba24ff57bd2ab303ad58055f10e07874df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0e614ba24ff57bd2ab303ad58055f10e07874df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db6f888e7830b0b91a03b2cf141ba0511adaca5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db6f888e7830b0b91a03b2cf141ba0511adaca5b", "html_url": "https://github.com/rust-lang/rust/commit/db6f888e7830b0b91a03b2cf141ba0511adaca5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db6f888e7830b0b91a03b2cf141ba0511adaca5b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb", "html_url": "https://github.com/rust-lang/rust/commit/8c77ffb484ada2c8f10bf2da5bbe6a9f82f935bb"}, {"sha": "1a886bc3c93a40090cda155fe2bfdcc8bd8e0e69", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a886bc3c93a40090cda155fe2bfdcc8bd8e0e69", "html_url": "https://github.com/rust-lang/rust/commit/1a886bc3c93a40090cda155fe2bfdcc8bd8e0e69"}], "stats": {"total": 80, "additions": 51, "deletions": 29}, "files": [{"sha": "10ecaed3aefd6b6db9c771eba0da51e1ed753763", "filename": "src/libstd/path.rs", "status": "modified", "additions": 51, "deletions": 29, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/db6f888e7830b0b91a03b2cf141ba0511adaca5b/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6f888e7830b0b91a03b2cf141ba0511adaca5b/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=db6f888e7830b0b91a03b2cf141ba0511adaca5b", "patch": "@@ -1823,76 +1823,98 @@ impl Path {\n     }\n \n \n-    /// Gets information on the file, directory, etc at this path.\n+    /// Query the file system to get information about a file, directory, etc.\n     ///\n-    /// Consult the `fs::metadata` documentation for more info.\n+    /// This function will traverse symbolic links to query information about the\n+    /// destination file.\n     ///\n-    /// This call preserves identical runtime/error semantics with\n-    /// `fs::metadata`.\n+    /// This is an alias to `fs::metadata`.\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn metadata(&self) -> io::Result<fs::Metadata> {\n         fs::metadata(self)\n     }\n \n-    /// Gets information on the file, directory, etc at this path.\n+    /// Query the metadata about a file without following symlinks.\n     ///\n-    /// Consult the `fs::symlink_metadata` documentation for more info.\n-    ///\n-    /// This call preserves identical runtime/error semantics with\n-    /// `fs::symlink_metadata`.\n+    /// This is an alias to `fs::symlink_metadata`.\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn symlink_metadata(&self) -> io::Result<fs::Metadata> {\n         fs::symlink_metadata(self)\n     }\n \n-    /// Returns the canonical form of a path, normalizing all components and\n-    /// eliminate all symlinks.\n+    /// Returns the canonical form of the path with all intermediate components\n+    /// normalized and symbolic links resolved.\n     ///\n-    /// This call preserves identical runtime/error semantics with\n-    /// `fs::canonicalize`.\n+    /// This is an alias to `fs::canonicalize`.\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn canonicalize(&self) -> io::Result<PathBuf> {\n         fs::canonicalize(self)\n     }\n \n-    /// Reads the symlink at this path.\n+    /// Reads a symbolic link, returning the file that the link points to.\n     ///\n-    /// For more information see `fs::read_link`.\n+    /// This is an alias to `fs::read_link`.\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn read_link(&self) -> io::Result<PathBuf> {\n         fs::read_link(self)\n     }\n \n-    /// Reads the directory at this path.\n+    /// Returns an iterator over the entries within a directory.\n+    ///\n+    /// The iterator will yield instances of `io::Result<DirEntry>`. New errors may\n+    /// be encountered after an iterator is initially constructed.\n     ///\n-    /// For more information see `fs::read_dir`.\n+    /// This is an alias to `fs::read_dir`.\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn read_dir(&self) -> io::Result<fs::ReadDir> {\n         fs::read_dir(self)\n     }\n \n-    /// Boolean value indicator whether the underlying file exists on the local\n-    /// filesystem. Returns false in exactly the cases where `fs::metadata`\n-    /// fails.\n+    /// Returns whether the path points at an existing entity.\n+    ///\n+    /// This function will traverse symbolic links to query information about the\n+    /// destination file. In case of broken symbolic links this will return `false`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::path::Path;\n+    /// assert_eq!(Path::new(\"does_not_exist.txt\").exists(), false);\n+    /// ```\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn exists(&self) -> bool {\n         fs::metadata(self).is_ok()\n     }\n \n-    /// Whether the underlying implementation (be it a file path, or something\n-    /// else) points at a \"regular file\" on the FS. Will return false for paths\n-    /// to non-existent locations or directories or other non-regular files\n-    /// (named pipes, etc). Follows links when making this determination.\n+    /// Returns whether the path is pointing at a regular file.\n+    ///\n+    /// This function will traverse symbolic links to query information about the\n+    /// destination file. In case of broken symbolic links this will return `false`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::path::Path;\n+    /// assert_eq!(Path::new(\"./is_a_directory/\").is_file(), false);\n+    /// assert_eq!(Path::new(\"a_file.txt\").is_file(), true);\n+    /// ```\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn is_file(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)\n     }\n \n-    /// Whether the underlying implementation (be it a file path, or something\n-    /// else) is pointing at a directory in the underlying FS. Will return\n-    /// false for paths to non-existent locations or if the item is not a\n-    /// directory (eg files, named pipes, etc). Follows links when making this\n-    /// determination.\n+    /// Returns whether the path is pointing at a directory.\n+    ///\n+    /// This function will traverse symbolic links to query information about the\n+    /// destination file. In case of broken symbolic links this will return `false`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::path::Path;\n+    /// assert_eq!(Path::new(\"./is_a_directory/\").is_dir(), true);\n+    /// assert_eq!(Path::new(\"a_file.txt\").is_dir(), false);\n+    /// ```\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n     pub fn is_dir(&self) -> bool {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)"}]}