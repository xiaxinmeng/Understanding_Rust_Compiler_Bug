{"sha": "b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMDJmNjliN2M1YjFiOTY2ZWMzZjg2Mzc3NjFlY2I4NjdlM2JjY2E=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-09-13T02:24:19Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-09-15T14:37:05Z"}, "message": "Update chalk to 0.27 and adapt to chalk changes.", "tree": {"sha": "66db8284220a7b4ace2f5541a94396231a67db43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66db8284220a7b4ace2f5541a94396231a67db43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "html_url": "https://github.com/rust-lang/rust/commit/b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f514965c519521246696365e3ca2227c31d3cf08", "url": "https://api.github.com/repos/rust-lang/rust/commits/f514965c519521246696365e3ca2227c31d3cf08", "html_url": "https://github.com/rust-lang/rust/commit/f514965c519521246696365e3ca2227c31d3cf08"}], "stats": {"total": 154, "additions": 113, "deletions": 41}, "files": [{"sha": "72ec6862460f0f01a5aca0f1bf3963f2896e73a8", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -162,9 +162,9 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.25.0\"\n+version = \"0.27.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"624e14d3f029186e6ffd97081ffa082f98ddd5df20655b6f0e8efb83dd8ac8b4\"\n+checksum = \"d5444ff2a211fe2a863e44d16a368c3d8a314d489de21b8eeb6879f14dd5d4a8\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -174,19 +174,19 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.25.0\"\n+version = \"0.27.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"118c68eccdda5604af50bbef84c94550f3854f76989cb03c36ffd36cc2ffe958\"\n+checksum = \"e39c3db1dd4abfaa7658faaa62e5fe998a982a592b710bd971fad5b6adfcfdef\"\n dependencies = [\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-recursive\"\n-version = \"0.25.0\"\n+version = \"0.27.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5130de3065e3cdfd2ab6d7d70b02b917bafbc096f270c9a643c23da249053606\"\n+checksum = \"3bfae328eff80ca54dcd0d731725bbb56136ac21c59261b68f1e5498e056b306\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -197,9 +197,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.25.0\"\n+version = \"0.27.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"45b235a1f568b28707f117b2d30eabbee9cbcfccaa0d6e9697300400c8ca0996\"\n+checksum = \"a673abe3077adc25f8ee0894198aed494a5bb0ce50ee993900d0ee1a44e1948a\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\","}, {"sha": "52abb8e7f16c4de76f661749763331615d69de07", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -592,6 +592,7 @@ pub struct TypeAlias {\n     pub bounds: Box<[TypeBound]>,\n     pub generic_params: GenericParamsId,\n     pub type_ref: Option<TypeRef>,\n+    pub is_extern: bool,\n     pub ast_id: FileAstId<ast::TypeAlias>,\n }\n "}, {"sha": "d93377c3bd41eed07dfbbbcaf6b476a30a270bad", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -364,6 +364,7 @@ impl Ctx {\n             generic_params,\n             type_ref,\n             ast_id,\n+            is_extern: false,\n         };\n         Some(id(self.data().type_aliases.alloc(res)))\n     }\n@@ -558,8 +559,9 @@ impl Ctx {\n                             statik.into()\n                         }\n                         ast::ExternItem::TypeAlias(ty) => {\n-                            let id = self.lower_type_alias(&ty)?;\n-                            id.into()\n+                            let foreign_ty = self.lower_type_alias(&ty)?;\n+                            self.data().type_aliases[foreign_ty.index].is_extern = true;\n+                            foreign_ty.into()\n                         }\n                         ast::ExternItem::MacroCall(_) => return None,\n                     };"}, {"sha": "eed3d0d6ff416d6b15aa679e27e832268e684deb", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -236,7 +236,7 @@ fn smoke() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]\n             Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<syntax::ast::generated::nodes::Trait>(2) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_ty\"))] }, input: None }]) }]\n-            > TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParamsId(4294967295), type_ref: None, ast_id: FileAstId::<syntax::ast::generated::nodes::TypeAlias>(8) }\n+            > TypeAlias { name: Name(Text(\"AssocTy\")), visibility: RawVisibilityId(\"pub(self)\"), bounds: [Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Tr\"))] }, generic_args: [Some(GenericArgs { args: [Type(Tuple([]))], has_self_type: false, bindings: [] })] })], generic_params: GenericParamsId(4294967295), type_ref: None, is_extern: false, ast_id: FileAstId::<syntax::ast::generated::nodes::TypeAlias>(8) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_const\"))] }, input: None }]) }]\n             > Const { name: Some(Name(Text(\"CONST\"))), visibility: RawVisibilityId(\"pub(self)\"), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<syntax::ast::generated::nodes::Const>(9) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_method\"))] }, input: None }]) }]"}, {"sha": "bc86df2b1687004b80d7ccae63f588342c43049f", "filename": "crates/hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2FCargo.toml?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -17,9 +17,9 @@ ena = \"0.14.0\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n scoped-tls = \"1\"\n-chalk-solve = { version = \"0.25.0\" }\n-chalk-ir = { version = \"0.25.0\" }\n-chalk-recursive = { version = \"0.25.0\" }\n+chalk-solve = { version = \"0.27.0\" }\n+chalk-ir = { version = \"0.27.0\" }\n+chalk-recursive = { version = \"0.27.0\" }\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n hir_def = { path = \"../hir_def\", version = \"0.0.0\" }"}, {"sha": "f389c5a4b3467ddc6e49899452dd9f259b6f1d0a", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -380,6 +380,15 @@ impl HirDisplay for ApplicationTy {\n                     write!(f, \">\")?;\n                 }\n             }\n+            TypeCtor::ForeignType(type_alias) => {\n+                let type_alias = f.db.type_alias_data(type_alias);\n+                write!(f, \"{}\", type_alias.name)?;\n+                if self.parameters.len() > 0 {\n+                    write!(f, \"<\")?;\n+                    f.write_joined(&*self.parameters.0, \", \")?;\n+                    write!(f, \">\")?;\n+                }\n+            }\n             TypeCtor::OpaqueType(opaque_ty_id) => {\n                 match opaque_ty_id {\n                     OpaqueTyId::ReturnTypeImplTrait(func, idx) => {"}, {"sha": "768d95effa2ea0cce2c25c1f13c5d34404c61ff0", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -134,6 +134,9 @@ pub enum TypeCtor {\n     /// representing the Future::Output type.\n     OpaqueType(OpaqueTyId),\n \n+    /// Represents a foreign type declared in external blocks.\n+    ForeignType(TypeAliasId),\n+\n     /// The type of a specific closure.\n     ///\n     /// The closure signature is stored in a `FnPtr` type in the first type\n@@ -168,6 +171,10 @@ impl TypeCtor {\n                 let generic_params = generics(db.upcast(), type_alias.into());\n                 generic_params.len()\n             }\n+            TypeCtor::ForeignType(type_alias) => {\n+                let generic_params = generics(db.upcast(), type_alias.into());\n+                generic_params.len()\n+            }\n             TypeCtor::OpaqueType(opaque_ty_id) => {\n                 match opaque_ty_id {\n                     OpaqueTyId::ReturnTypeImplTrait(func, _) => {\n@@ -204,6 +211,9 @@ impl TypeCtor {\n             TypeCtor::AssociatedType(type_alias) => {\n                 Some(type_alias.lookup(db.upcast()).module(db.upcast()).krate)\n             }\n+            TypeCtor::ForeignType(type_alias) => {\n+                Some(type_alias.lookup(db.upcast()).module(db.upcast()).krate)\n+            }\n             TypeCtor::OpaqueType(opaque_ty_id) => match opaque_ty_id {\n                 OpaqueTyId::ReturnTypeImplTrait(func, _) => {\n                     Some(func.lookup(db.upcast()).module(db.upcast()).krate)\n@@ -231,6 +241,7 @@ impl TypeCtor {\n             TypeCtor::Adt(adt) => Some(adt.into()),\n             TypeCtor::FnDef(callable) => Some(callable.into()),\n             TypeCtor::AssociatedType(type_alias) => Some(type_alias.into()),\n+            TypeCtor::ForeignType(type_alias) => Some(type_alias.into()),\n             TypeCtor::OpaqueType(_impl_trait_id) => None,\n         }\n     }"}, {"sha": "27f0ed628fe5dd8dfa67745fd5d2eb81a4342ae6", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -23,7 +23,8 @@ use crate::{\n     ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n };\n use mapping::{\n-    convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,\n+    convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsAssocType,\n+    TypeAliasAsValue,\n };\n \n pub use self::interner::*;\n@@ -340,7 +341,7 @@ pub(crate) fn associated_ty_data_query(\n     id: AssocTypeId,\n ) -> Arc<AssociatedTyDatum> {\n     debug!(\"associated_ty_data {:?}\", id);\n-    let type_alias: TypeAliasId = from_chalk(db, id);\n+    let type_alias: TypeAliasId = from_chalk::<TypeAliasAsAssocType, _>(db, id).0;\n     let trait_ = match type_alias.lookup(db.upcast()).container {\n         AssocContainerId::TraitId(t) => t,\n         _ => panic!(\"associated type not in trait\"),\n@@ -394,8 +395,10 @@ pub(crate) fn trait_datum_query(\n         fundamental: false,\n     };\n     let where_clauses = convert_where_clauses(db, trait_.into(), &bound_vars);\n-    let associated_ty_ids =\n-        trait_data.associated_types().map(|type_alias| type_alias.to_chalk(db)).collect();\n+    let associated_ty_ids = trait_data\n+        .associated_types()\n+        .map(|type_alias| TypeAliasAsAssocType(type_alias).to_chalk(db))\n+        .collect();\n     let trait_datum_bound = rust_ir::TraitDatumBound { where_clauses };\n     let well_known =\n         lang_attr(db.upcast(), trait_).and_then(|name| well_known_trait_from_lang_attr(&name));\n@@ -433,6 +436,7 @@ fn lang_attr_from_well_known_trait(attr: WellKnownTrait) -> &'static str {\n         WellKnownTrait::FnMut => \"fn_mut\",\n         WellKnownTrait::Fn => \"fn\",\n         WellKnownTrait::Unsize => \"unsize\",\n+        WellKnownTrait::Unpin => \"unpin\",\n     }\n }\n \n@@ -576,7 +580,7 @@ fn type_alias_associated_ty_value(\n     let value_bound = rust_ir::AssociatedTyValueBound { ty: ty.value.to_chalk(db) };\n     let value = rust_ir::AssociatedTyValue {\n         impl_id: impl_id.to_chalk(db),\n-        associated_ty_id: assoc_ty.to_chalk(db),\n+        associated_ty_id: TypeAliasAsAssocType(assoc_ty).to_chalk(db),\n         value: make_binders(value_bound, ty.num_binders),\n     };\n     Arc::new(value)\n@@ -611,9 +615,11 @@ pub(crate) fn fn_def_datum_query(\n     };\n     let datum = FnDefDatum {\n         id: fn_def_id,\n-        abi: (),\n-        safety: chalk_ir::Safety::Safe,\n-        variadic: sig.value.is_varargs,\n+        sig: chalk_ir::FnSig {\n+            abi: (),\n+            safety: chalk_ir::Safety::Safe,\n+            variadic: sig.value.is_varargs,\n+        },\n         binders: make_binders(bound, sig.num_binders),\n     };\n     Arc::new(datum)"}, {"sha": "f9304b7d0c8bd5c7a8ba4da33bd5c0614573fb24", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -12,6 +12,7 @@ pub struct Interner;\n \n pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n pub type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n+pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n pub type TraitId = chalk_ir::TraitId<Interner>;\n pub type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n pub type AdtId = chalk_ir::AdtId<Interner>;"}, {"sha": "d42f4bba9e570efc51568fd0839fc8197e446242", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 53, "deletions": 16, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -34,9 +34,11 @@ impl ToChalk for Ty {\n                     let substitution = apply_ty.parameters.to_chalk(db).shifted_in(&Interner);\n                     chalk_ir::TyData::Function(chalk_ir::FnPointer {\n                         num_binders: 0,\n-                        abi: (),\n-                        safety: chalk_ir::Safety::Safe,\n-                        variadic: is_varargs,\n+                        sig: chalk_ir::FnSig {\n+                            abi: (),\n+                            safety: chalk_ir::Safety::Safe,\n+                            variadic: is_varargs,\n+                        },\n                         substitution,\n                     })\n                     .intern(&Interner)\n@@ -48,7 +50,7 @@ impl ToChalk for Ty {\n                 }\n             },\n             Ty::Projection(proj_ty) => {\n-                let associated_ty_id = proj_ty.associated_ty.to_chalk(db);\n+                let associated_ty_id = TypeAliasAsAssocType(proj_ty.associated_ty).to_chalk(db);\n                 let substitution = proj_ty.parameters.to_chalk(db);\n                 chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n                     associated_ty_id,\n@@ -114,7 +116,8 @@ impl ToChalk for Ty {\n                 Ty::Placeholder(db.lookup_intern_type_param_id(interned_id))\n             }\n             chalk_ir::TyData::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n-                let associated_ty = from_chalk(db, proj.associated_ty_id);\n+                let associated_ty =\n+                    from_chalk::<TypeAliasAsAssocType, _>(db, proj.associated_ty_id).0;\n                 let parameters = from_chalk(db, proj.substitution);\n                 Ty::Projection(ProjectionTy { associated_ty, parameters })\n             }\n@@ -125,7 +128,7 @@ impl ToChalk for Ty {\n             }\n             chalk_ir::TyData::Function(chalk_ir::FnPointer {\n                 num_binders,\n-                variadic,\n+                sig: chalk_ir::FnSig { variadic, .. },\n                 substitution,\n                 ..\n             }) => {\n@@ -290,15 +293,22 @@ impl ToChalk for TypeCtor {\n     fn to_chalk(self, db: &dyn HirDatabase) -> TypeName<Interner> {\n         match self {\n             TypeCtor::AssociatedType(type_alias) => {\n-                let type_id = type_alias.to_chalk(db);\n-                TypeName::AssociatedType(type_id)\n+                let assoc_type = TypeAliasAsAssocType(type_alias);\n+                let assoc_type_id = assoc_type.to_chalk(db);\n+                TypeName::AssociatedType(assoc_type_id)\n             }\n \n             TypeCtor::OpaqueType(impl_trait_id) => {\n                 let id = impl_trait_id.to_chalk(db);\n                 TypeName::OpaqueType(id)\n             }\n \n+            TypeCtor::ForeignType(type_alias) => {\n+                let foreign_type = TypeAliasAsForeignType(type_alias);\n+                let foreign_type_id = foreign_type.to_chalk(db);\n+                TypeName::Foreign(foreign_type_id)\n+            }\n+\n             TypeCtor::Bool => TypeName::Scalar(Scalar::Bool),\n             TypeCtor::Char => TypeName::Scalar(Scalar::Char),\n             TypeCtor::Int(int_ty) => TypeName::Scalar(int_ty_to_chalk(int_ty)),\n@@ -339,7 +349,9 @@ impl ToChalk for TypeCtor {\n     fn from_chalk(db: &dyn HirDatabase, type_name: TypeName<Interner>) -> TypeCtor {\n         match type_name {\n             TypeName::Adt(struct_id) => TypeCtor::Adt(struct_id.0),\n-            TypeName::AssociatedType(type_id) => TypeCtor::AssociatedType(from_chalk(db, type_id)),\n+            TypeName::AssociatedType(type_id) => {\n+                TypeCtor::AssociatedType(from_chalk::<TypeAliasAsAssocType, _>(db, type_id).0)\n+            }\n             TypeName::OpaqueType(opaque_type_id) => {\n                 TypeCtor::OpaqueType(from_chalk(db, opaque_type_id))\n             }\n@@ -379,6 +391,10 @@ impl ToChalk for TypeCtor {\n                 TypeCtor::Closure { def, expr }\n             }\n \n+            TypeName::Foreign(foreign_def_id) => {\n+                TypeCtor::ForeignType(from_chalk::<TypeAliasAsForeignType, _>(db, foreign_def_id).0)\n+            }\n+\n             TypeName::Error => {\n                 // this should not be reached, since we don't represent TypeName::Error with TypeCtor\n                 unreachable!()\n@@ -488,15 +504,31 @@ impl ToChalk for CallableDefId {\n     }\n }\n \n-impl ToChalk for TypeAliasId {\n+pub struct TypeAliasAsAssocType(pub TypeAliasId);\n+\n+impl ToChalk for TypeAliasAsAssocType {\n     type Chalk = AssocTypeId;\n \n     fn to_chalk(self, _db: &dyn HirDatabase) -> AssocTypeId {\n-        chalk_ir::AssocTypeId(self.as_intern_id())\n+        chalk_ir::AssocTypeId(self.0.as_intern_id())\n+    }\n+\n+    fn from_chalk(_db: &dyn HirDatabase, assoc_type_id: AssocTypeId) -> TypeAliasAsAssocType {\n+        TypeAliasAsAssocType(InternKey::from_intern_id(assoc_type_id.0))\n+    }\n+}\n+\n+pub struct TypeAliasAsForeignType(pub TypeAliasId);\n+\n+impl ToChalk for TypeAliasAsForeignType {\n+    type Chalk = ForeignDefId;\n+\n+    fn to_chalk(self, _db: &dyn HirDatabase) -> ForeignDefId {\n+        chalk_ir::ForeignDefId(self.0.as_intern_id())\n     }\n \n-    fn from_chalk(_db: &dyn HirDatabase, type_alias_id: AssocTypeId) -> TypeAliasId {\n-        InternKey::from_intern_id(type_alias_id.0)\n+    fn from_chalk(_db: &dyn HirDatabase, foreign_def_id: ForeignDefId) -> TypeAliasAsForeignType {\n+        TypeAliasAsForeignType(InternKey::from_intern_id(foreign_def_id.0))\n     }\n }\n \n@@ -580,7 +612,7 @@ impl ToChalk for ProjectionTy {\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::ProjectionTy<Interner> {\n         chalk_ir::ProjectionTy {\n-            associated_ty_id: self.associated_ty.to_chalk(db),\n+            associated_ty_id: TypeAliasAsAssocType(self.associated_ty).to_chalk(db),\n             substitution: self.parameters.to_chalk(db),\n         }\n     }\n@@ -590,7 +622,11 @@ impl ToChalk for ProjectionTy {\n         projection_ty: chalk_ir::ProjectionTy<Interner>,\n     ) -> ProjectionTy {\n         ProjectionTy {\n-            associated_ty: from_chalk(db, projection_ty.associated_ty_id),\n+            associated_ty: from_chalk::<TypeAliasAsAssocType, _>(\n+                db,\n+                projection_ty.associated_ty_id,\n+            )\n+            .0,\n             parameters: from_chalk(db, projection_ty.substitution),\n         }\n     }\n@@ -789,7 +825,8 @@ pub(super) fn generic_predicate_to_inline_bound(\n             let alias_eq_bound = rust_ir::AliasEqBound {\n                 value: proj.ty.clone().to_chalk(db),\n                 trait_bound: rust_ir::TraitBound { trait_id: trait_.to_chalk(db), args_no_self },\n-                associated_ty_id: proj.projection_ty.associated_ty.to_chalk(db),\n+                associated_ty_id: TypeAliasAsAssocType(proj.projection_ty.associated_ty)\n+                    .to_chalk(db),\n                 parameters: Vec::new(), // FIXME we don't support generic associated types yet\n             };\n             Some(rust_ir::InlineBound::AliasEqBound(alias_eq_bound))"}, {"sha": "b4568cff64349418aaa02d6df132d3f02d6f221f", "filename": "crates/hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f69b7c5b1b966ec3f8637761ecb867e3bcca/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=b302f69b7c5b1b966ec3f8637761ecb867e3bcca", "patch": "@@ -4,7 +4,7 @@ use std::fmt;\n use chalk_ir::{AliasTy, GenericArg, Goal, Goals, Lifetime, ProgramClauseImplication, TypeName};\n use itertools::Itertools;\n \n-use super::{from_chalk, Interner};\n+use super::{from_chalk, Interner, TypeAliasAsAssocType};\n use crate::{db::HirDatabase, CallableDefId, TypeCtor};\n use hir_def::{AdtId, AssocContainerId, DefWithBodyId, Lookup, TypeAliasId};\n \n@@ -77,6 +77,10 @@ impl DebugContext<'_> {\n                     write!(f, \"{{impl trait of async block {} of {:?}}}\", idx.into_raw(), def)?;\n                 }\n             },\n+            TypeCtor::ForeignType(type_alias) => {\n+                let name = self.0.type_alias_data(type_alias).name.clone();\n+                write!(f, \"{}\", name)?;\n+            }\n             TypeCtor::Closure { def, expr } => {\n                 write!(f, \"{{closure {:?} in \", expr.into_raw())?;\n                 match def {\n@@ -119,7 +123,7 @@ impl DebugContext<'_> {\n         id: super::AssocTypeId,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let type_alias: TypeAliasId = from_chalk(self.0, id);\n+        let type_alias: TypeAliasId = from_chalk::<TypeAliasAsAssocType, _>(self.0, id).0;\n         let type_alias_data = self.0.type_alias_data(type_alias);\n         let trait_ = match type_alias.lookup(self.0.upcast()).container {\n             AssocContainerId::TraitId(t) => t,\n@@ -153,7 +157,8 @@ impl DebugContext<'_> {\n         projection_ty: &chalk_ir::ProjectionTy<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let type_alias: TypeAliasId = from_chalk(self.0, projection_ty.associated_ty_id);\n+        let type_alias: TypeAliasId =\n+            from_chalk::<TypeAliasAsAssocType, _>(self.0, projection_ty.associated_ty_id).0;\n         let type_alias_data = self.0.type_alias_data(type_alias);\n         let trait_ = match type_alias.lookup(self.0.upcast()).container {\n             AssocContainerId::TraitId(t) => t,"}]}