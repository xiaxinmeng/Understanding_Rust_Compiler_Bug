{"sha": "a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZjY3YWQ5NDkwZWFhN2RlN2U0M2UzZWRhNmNhMzhkMTRjYzJjZWI=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2019-11-13T16:00:47Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2019-11-13T16:00:47Z"}, "message": "Revert \"Auto merge of #65134 - davidtwco:issue-19834-improper-ctypes-in-extern-C-fn, r=rkruppe\"\n\nThis reverts commit 3f0e16473de5ec010f44290a8c3ea1d90e0ad7a2, reversing\nchanges made to 61a551b4939ec1d5596e585351038b8fbd0124ba.", "tree": {"sha": "56b6939f259ba115bcfd033382778c3ebb41ea09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b6939f259ba115bcfd033382778c3ebb41ea09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "html_url": "https://github.com/rust-lang/rust/commit/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/comments", "author": null, "committer": null, "parents": [{"sha": "374ad1b0063963060a00a3110e44d76e7105d059", "url": "https://api.github.com/repos/rust-lang/rust/commits/374ad1b0063963060a00a3110e44d76e7105d059", "html_url": "https://github.com/rust-lang/rust/commit/374ad1b0063963060a00a3110e44d76e7105d059"}], "stats": {"total": 558, "additions": 37, "deletions": 521}, "files": [{"sha": "5509f47bc8858ccdc5a668f71cf9f4f001ab32ff", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -21,7 +21,6 @@\n // Rust's \"try\" function, but if we're aborting on panics we just call the\n // function as there's nothing else we need to do here.\n #[rustc_std_internal_symbol]\n-#[allow(improper_ctypes)]\n pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n                                               data: *mut u8,\n                                               _data_ptr: *mut usize,"}, {"sha": "d97a7a8a87d8d20ae244cc0585d9614e6bd6218f", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -72,7 +72,6 @@ mod dwarf;\n // hairy and tightly coupled, for more information see the compiler's\n // implementation of this.\n #[no_mangle]\n-#[allow(improper_ctypes)]\n pub unsafe extern \"C\" fn __rust_maybe_catch_panic(f: fn(*mut u8),\n                                                   data: *mut u8,\n                                                   data_ptr: *mut usize,"}, {"sha": "fa14ce7b03c8ca69a215187cceefe170609f3d9f", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -240,7 +240,9 @@ impl<'a> Drop for DiagnosticHandlers<'a> {\n     }\n }\n \n-fn report_inline_asm(cgcx: &CodegenContext<LlvmCodegenBackend>, msg: &str, cookie: c_uint) {\n+unsafe extern \"C\" fn report_inline_asm(cgcx: &CodegenContext<LlvmCodegenBackend>,\n+                                       msg: &str,\n+                                       cookie: c_uint) {\n     cgcx.diag_emitter.inline_asm_error(cookie as u32, msg.to_owned());\n }\n "}, {"sha": "57815933af02b2961b52bc79a87cc84199a3ae07", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -87,7 +87,6 @@ pub struct RustString {\n }\n \n /// Appending to a Rust string -- used by RawRustStringOstream.\n-#[allow(improper_ctypes)]\n #[no_mangle]\n pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(sr: &RustString,\n                                                  ptr: *const c_char,"}, {"sha": "9a4e981081fcfcd309411795bc7370dfc324e101", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 33, "deletions": 69, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::{ExprKind, Node};\n use crate::hir::def_id::DefId;\n use rustc::hir::lowering::is_range_literal;\n use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, VariantIdx, SizeSkeleton};\n use rustc::{lint, util};\n use rustc_index::vec::Idx;\n@@ -837,13 +837,16 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::Array(ty, _) => self.check_type_for_ffi(cache, ty),\n \n             ty::FnPtr(sig) => {\n-                if self.is_internal_abi(sig.abi()) {\n-                    return FfiUnsafe {\n-                        ty,\n-                        reason: \"this function pointer has Rust-specific calling convention\",\n-                        help: Some(\"consider using an `extern fn(...) -> ...` \\\n-                                    function pointer instead\"),\n-                    };\n+                match sig.abi() {\n+                    Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic | Abi::RustCall => {\n+                        return FfiUnsafe {\n+                            ty,\n+                            reason: \"this function pointer has Rust-specific calling convention\",\n+                            help: Some(\"consider using an `extern fn(...) -> ...` \\\n+                                        function pointer instead\"),\n+                        }\n+                    }\n+                    _ => {}\n                 }\n \n                 let sig = cx.erase_late_bound_regions(&sig);\n@@ -870,10 +873,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n             ty::Foreign(..) => FfiSafe,\n \n-            // `extern \"C\" fn` functions can have type parameters, which may or may not be FFI-safe,\n-            //  so they are currently ignored for the purposes of this lint, see #65134.\n-            ty::Param(..) | ty::Projection(..) => FfiSafe,\n-\n+            ty::Param(..) |\n             ty::Infer(..) |\n             ty::Bound(..) |\n             ty::Error |\n@@ -882,6 +882,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::GeneratorWitness(..) |\n             ty::Placeholder(..) |\n             ty::UnnormalizedProjection(..) |\n+            ty::Projection(..) |\n             ty::Opaque(..) |\n             ty::FnDef(..) => bug!(\"unexpected type in foreign function: {:?}\", ty),\n         }\n@@ -893,16 +894,11 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         sp: Span,\n         note: &str,\n         help: Option<&str>,\n-        is_foreign_item: bool,\n     ) {\n         let mut diag = self.cx.struct_span_lint(\n             IMPROPER_CTYPES,\n             sp,\n-            &format!(\n-                \"`extern` {} uses type `{}`, which is not FFI-safe\",\n-                if is_foreign_item { \"block\" } else { \"fn\" },\n-                ty,\n-            ),\n+            &format!(\"`extern` block uses type `{}`, which is not FFI-safe\", ty),\n         );\n         diag.span_label(sp, \"not FFI-safe\");\n         if let Some(help) = help {\n@@ -917,7 +913,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         diag.emit();\n     }\n \n-    fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>, is_foreign_item: bool) -> bool {\n+    fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n+        use crate::rustc::ty::TypeFoldable;\n+\n         struct ProhibitOpaqueTypes<'tcx> {\n             ty: Option<Ty<'tcx>>,\n         };\n@@ -941,81 +939,70 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 sp,\n                 \"opaque types have no C equivalent\",\n                 None,\n-                is_foreign_item,\n             );\n             true\n         } else {\n             false\n         }\n     }\n \n-    fn check_type_for_ffi_and_report_errors(\n-        &mut self,\n-        sp: Span,\n-        ty: Ty<'tcx>,\n-        is_foreign_item: bool,\n-    ) {\n+    fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n         // We have to check for opaque types before `normalize_erasing_regions`,\n         // which will replace opaque types with their underlying concrete type.\n-        if self.check_for_opaque_ty(sp, ty, is_foreign_item) {\n+        if self.check_for_opaque_ty(sp, ty) {\n             // We've already emitted an error due to an opaque type.\n             return;\n         }\n \n-        let ty = self.cx.tcx.normalize_erasing_regions(self.cx.param_env, ty);\n+        // it is only OK to use this function because extern fns cannot have\n+        // any generic types right now:\n+        let ty = self.cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n+\n         match self.check_type_for_ffi(&mut FxHashSet::default(), ty) {\n             FfiResult::FfiSafe => {}\n             FfiResult::FfiPhantom(ty) => {\n-                self.emit_ffi_unsafe_type_lint(\n-                    ty, sp, \"composed only of `PhantomData`\", None, is_foreign_item);\n+                self.emit_ffi_unsafe_type_lint(ty, sp, \"composed only of `PhantomData`\", None);\n             }\n             FfiResult::FfiUnsafe { ty, reason, help } => {\n-                self.emit_ffi_unsafe_type_lint(\n-                    ty, sp, reason, help, is_foreign_item);\n+                self.emit_ffi_unsafe_type_lint(ty, sp, reason, help);\n             }\n         }\n     }\n \n-    fn check_foreign_fn(&mut self, id: hir::HirId, decl: &hir::FnDecl, is_foreign_item: bool) {\n+    fn check_foreign_fn(&mut self, id: hir::HirId, decl: &hir::FnDecl) {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n         let sig = self.cx.tcx.fn_sig(def_id);\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n \n         for (input_ty, input_hir) in sig.inputs().iter().zip(&decl.inputs) {\n-            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty, is_foreign_item);\n+            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty);\n         }\n \n         if let hir::Return(ref ret_hir) = decl.output {\n             let ret_ty = sig.output();\n             if !ret_ty.is_unit() {\n-                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty, is_foreign_item);\n+                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty);\n             }\n         }\n     }\n \n     fn check_foreign_static(&mut self, id: hir::HirId, span: Span) {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n         let ty = self.cx.tcx.type_of(def_id);\n-        self.check_type_for_ffi_and_report_errors(span, ty, true);\n-    }\n-\n-    fn is_internal_abi(&self, abi: Abi) -> bool {\n-        if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n-            true\n-        } else {\n-            false\n-        }\n+        self.check_type_for_ffi_and_report_errors(span, ty);\n     }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem) {\n         let mut vis = ImproperCTypesVisitor { cx };\n         let abi = cx.tcx.hir().get_foreign_abi(it.hir_id);\n-        if !vis.is_internal_abi(abi) {\n+        if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n+            // Don't worry about types in internal ABIs.\n+        } else {\n             match it.kind {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {\n-                    vis.check_foreign_fn(it.hir_id, decl, true);\n+                    vis.check_foreign_fn(it.hir_id, decl);\n                 }\n                 hir::ForeignItemKind::Static(ref ty, _) => {\n                     vis.check_foreign_static(it.hir_id, ty.span);\n@@ -1024,29 +1011,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n             }\n         }\n     }\n-\n-    fn check_fn(\n-        &mut self,\n-        cx: &LateContext<'a, 'tcx>,\n-        kind: hir::intravisit::FnKind<'tcx>,\n-        decl: &'tcx hir::FnDecl,\n-        _: &'tcx hir::Body,\n-        _: Span,\n-        hir_id: hir::HirId,\n-    ) {\n-        use hir::intravisit::FnKind;\n-\n-        let abi = match kind {\n-            FnKind::ItemFn(_, _, header, ..) => (header.abi),\n-            FnKind::Method(_, sig, ..) => (sig.header.abi),\n-            _ => return,\n-        };\n-\n-        let mut vis = ImproperCTypesVisitor { cx };\n-        if !vis.is_internal_abi(abi) {\n-            vis.check_foreign_fn(hir_id, decl, false);\n-        }\n-    }\n }\n \n declare_lint_pass!(VariantSizeDifferences => [VARIANT_SIZE_DIFFERENCES]);"}, {"sha": "0f107de83f062c76fbea80edeb6ede41429ee79f", "filename": "src/libstd/sys/sgx/abi/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -53,7 +53,6 @@ unsafe extern \"C\" fn tcs_init(secondary: bool) {\n // (main function exists). If this is a library, the crate author should be\n // able to specify this\n #[cfg(not(test))]\n-#[allow(improper_ctypes)]\n #[no_mangle]\n extern \"C\" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64) -> (u64, u64) {\n     // FIXME: how to support TLS in library mode?"}, {"sha": "e2f94b1d928e10db38416f8c874fd88fb08c652d", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -172,7 +172,6 @@ const EINVAL: i32 = 22;\n \n #[cfg(not(test))]\n #[no_mangle]\n-#[allow(improper_ctypes)]\n pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RWLock) -> i32 {\n     if p.is_null() {\n         return EINVAL;\n@@ -182,7 +181,6 @@ pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RWLock) -> i32 {\n }\n \n #[cfg(not(test))]\n-#[allow(improper_ctypes)]\n #[no_mangle]\n pub unsafe extern \"C\" fn __rust_rwlock_wrlock(p: *mut RWLock) -> i32 {\n     if p.is_null() {\n@@ -192,7 +190,6 @@ pub unsafe extern \"C\" fn __rust_rwlock_wrlock(p: *mut RWLock) -> i32 {\n     return 0;\n }\n #[cfg(not(test))]\n-#[allow(improper_ctypes)]\n #[no_mangle]\n pub unsafe extern \"C\" fn __rust_rwlock_unlock(p: *mut RWLock) -> i32 {\n     if p.is_null() {"}, {"sha": "0c7e2d906b7c1d67e1c0bbc2ff2cfa9b92822589", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -33,7 +33,6 @@ pub extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,\n \n // this struct contains 8 i64's, while only 6 can be passed in registers.\n #[cfg(target_arch = \"x86_64\")]\n-#[repr(C)]\n #[derive(PartialEq, Eq, Debug)]\n pub struct LargeStruct(i64, i64, i64, i64, i64, i64, i64, i64);\n "}, {"sha": "09abe4fbf7e095f96d245879ecd47a4e4f8d4bb7", "filename": "src/test/ui/align-with-extern-c-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -7,7 +7,7 @@\n \n #![feature(repr_align)]\n \n-#[repr(align(16), C)]\n+#[repr(align(16))]\n pub struct A(i64);\n \n pub extern \"C\" fn foo(x: A) {}"}, {"sha": "bae3813f9da951b01997de7073d3c21c9837d694", "filename": "src/test/ui/issues/issue-16441.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fissues%2Fissue-16441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fissues%2Fissue-16441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16441.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -5,7 +5,6 @@\n struct Empty;\n \n // This used to cause an ICE\n-#[allow(improper_ctypes)]\n extern \"C\" fn ice(_a: Empty) {}\n \n fn main() {"}, {"sha": "f6d349a38f52338729d6880a785d64298c3f5720", "filename": "src/test/ui/issues/issue-26997.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -6,7 +6,6 @@ pub struct Foo {\n }\n \n impl Foo {\n-    #[allow(improper_ctypes)]\n     pub extern fn foo_new() -> Foo {\n         Foo { x: 21, y: 33 }\n     }"}, {"sha": "3bbe4ae29bdd69a45bf47919d3978eda55096291", "filename": "src/test/ui/issues/issue-28600.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -4,7 +4,6 @@\n struct Test;\n \n impl Test {\n-    #[allow(improper_ctypes)]\n     #[allow(dead_code)]\n     #[allow(unused_variables)]\n     pub extern fn test(val: &str) {"}, {"sha": "6e6de09225f571f8391b37ab45e191c4f813411f", "filename": "src/test/ui/issues/issue-38763.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fissues%2Fissue-38763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fissues%2Fissue-38763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38763.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -4,7 +4,6 @@\n #[repr(C)]\n pub struct Foo(i128);\n \n-#[allow(improper_ctypes)]\n #[no_mangle]\n pub extern \"C\" fn foo(x: Foo) -> Foo { x }\n "}, {"sha": "3691fe19117746649fa1fa33fdf88c16a8e207f9", "filename": "src/test/ui/issues/issue-51907.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -6,9 +6,7 @@ trait Foo {\n \n struct Bar;\n impl Foo for Bar {\n-    #[allow(improper_ctypes)]\n     extern fn borrow(&self) {}\n-    #[allow(improper_ctypes)]\n     extern fn take(self: Box<Self>) {}\n }\n "}, {"sha": "2daac70fedf0a4115b67f9dea64da69c3136b20a", "filename": "src/test/ui/lint/lint-ctypes-fn.rs", "status": "removed", "additions": 0, "deletions": 186, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/374ad1b0063963060a00a3110e44d76e7105d059/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/374ad1b0063963060a00a3110e44d76e7105d059/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs?ref=374ad1b0063963060a00a3110e44d76e7105d059", "patch": "@@ -1,186 +0,0 @@\n-#![feature(rustc_private)]\n-\n-#![allow(private_in_public)]\n-#![deny(improper_ctypes)]\n-\n-extern crate libc;\n-\n-use std::default::Default;\n-use std::marker::PhantomData;\n-\n-trait Mirror { type It: ?Sized; }\n-\n-impl<T: ?Sized> Mirror for T { type It = Self; }\n-\n-#[repr(C)]\n-pub struct StructWithProjection(*mut <StructWithProjection as Mirror>::It);\n-\n-#[repr(C)]\n-pub struct StructWithProjectionAndLifetime<'a>(\n-    &'a mut <StructWithProjectionAndLifetime<'a> as Mirror>::It\n-);\n-\n-pub type I32Pair = (i32, i32);\n-\n-#[repr(C)]\n-pub struct ZeroSize;\n-\n-pub type RustFn = fn();\n-\n-pub type RustBadRet = extern fn() -> Box<u32>;\n-\n-pub type CVoidRet = ();\n-\n-pub struct Foo;\n-\n-#[repr(transparent)]\n-pub struct TransparentI128(i128);\n-\n-#[repr(transparent)]\n-pub struct TransparentStr(&'static str);\n-\n-#[repr(transparent)]\n-pub struct TransparentBadFn(RustBadRet);\n-\n-#[repr(transparent)]\n-pub struct TransparentInt(u32);\n-\n-#[repr(transparent)]\n-pub struct TransparentRef<'a>(&'a TransparentInt);\n-\n-#[repr(transparent)]\n-pub struct TransparentLifetime<'a>(*const u8, PhantomData<&'a ()>);\n-\n-#[repr(transparent)]\n-pub struct TransparentUnit<U>(f32, PhantomData<U>);\n-\n-#[repr(transparent)]\n-pub struct TransparentCustomZst(i32, ZeroSize);\n-\n-#[repr(C)]\n-pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n-\n-pub extern \"C\" fn ptr_type1(size: *const Foo) { }\n-//~^ ERROR: uses type `Foo`\n-\n-pub extern \"C\" fn ptr_type2(size: *const Foo) { }\n-//~^ ERROR: uses type `Foo`\n-\n-pub extern \"C\" fn slice_type(p: &[u32]) { }\n-//~^ ERROR: uses type `[u32]`\n-\n-pub extern \"C\" fn str_type(p: &str) { }\n-//~^ ERROR: uses type `str`\n-\n-pub extern \"C\" fn box_type(p: Box<u32>) { }\n-//~^ ERROR uses type `std::boxed::Box<u32>`\n-\n-pub extern \"C\" fn char_type(p: char) { }\n-//~^ ERROR uses type `char`\n-\n-pub extern \"C\" fn i128_type(p: i128) { }\n-//~^ ERROR uses type `i128`\n-\n-pub extern \"C\" fn u128_type(p: u128) { }\n-//~^ ERROR uses type `u128`\n-\n-pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n-//~^ ERROR uses type `(i32, i32)`\n-\n-pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n-//~^ ERROR uses type `(i32, i32)`\n-\n-pub extern \"C\" fn zero_size(p: ZeroSize) { }\n-//~^ ERROR uses type `ZeroSize`\n-\n-pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n-//~^ ERROR uses type `ZeroSizeWithPhantomData`\n-\n-pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n-//~^ ERROR uses type `std::marker::PhantomData<bool>`\n-    Default::default()\n-}\n-\n-pub extern \"C\" fn fn_type(p: RustFn) { }\n-//~^ ERROR uses type `fn()`\n-\n-pub extern \"C\" fn fn_type2(p: fn()) { }\n-//~^ ERROR uses type `fn()`\n-\n-pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n-//~^ ERROR: uses type `std::boxed::Box<u32>`\n-\n-pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n-//~^ ERROR: uses type `i128`\n-\n-pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n-//~^ ERROR: uses type `str`\n-\n-pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n-//~^ ERROR: uses type `std::boxed::Box<u32>`\n-\n-pub extern \"C\" fn good3(fptr: Option<extern fn()>) { }\n-\n-pub extern \"C\" fn good4(aptr: &[u8; 4 as usize]) { }\n-\n-pub extern \"C\" fn good5(s: StructWithProjection) { }\n-\n-pub extern \"C\" fn good6(s: StructWithProjectionAndLifetime) { }\n-\n-pub extern \"C\" fn good7(fptr: extern fn() -> ()) { }\n-\n-pub extern \"C\" fn good8(fptr: extern fn() -> !) { }\n-\n-pub extern \"C\" fn good9() -> () { }\n-\n-pub extern \"C\" fn good10() -> CVoidRet { }\n-\n-pub extern \"C\" fn good11(size: isize) { }\n-\n-pub extern \"C\" fn good12(size: usize) { }\n-\n-pub extern \"C\" fn good13(n: TransparentInt) { }\n-\n-pub extern \"C\" fn good14(p: TransparentRef) { }\n-\n-pub extern \"C\" fn good15(p: TransparentLifetime) { }\n-\n-pub extern \"C\" fn good16(p: TransparentUnit<ZeroSize>) { }\n-\n-pub extern \"C\" fn good17(p: TransparentCustomZst) { }\n-\n-#[allow(improper_ctypes)]\n-pub extern \"C\" fn good18(_: &String) { }\n-\n-#[cfg(not(target_arch = \"wasm32\"))]\n-pub extern \"C\" fn good1(size: *const libc::c_int) { }\n-\n-#[cfg(not(target_arch = \"wasm32\"))]\n-pub extern \"C\" fn good2(size: *const libc::c_uint) { }\n-\n-pub extern \"C\" fn unused_generic1<T>(size: *const Foo) { }\n-//~^ ERROR: uses type `Foo`\n-\n-pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n-//~^ ERROR uses type `std::marker::PhantomData<bool>`\n-    Default::default()\n-}\n-\n-pub extern \"C\" fn used_generic1<T>(x: T) { }\n-\n-pub extern \"C\" fn used_generic2<T>(x: T, size: *const Foo) { }\n-//~^ ERROR: uses type `Foo`\n-\n-pub extern \"C\" fn used_generic3<T: Default>() -> T {\n-    Default::default()\n-}\n-\n-pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n-//~^ ERROR: uses type `std::vec::Vec<T>`\n-\n-pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n-//~^ ERROR: uses type `std::vec::Vec<T>`\n-    Default::default()\n-}\n-\n-fn main() {}"}, {"sha": "59bd6bfc5afd2930da217ae07a016b7471e3dd1a", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "removed", "additions": 0, "deletions": 247, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/374ad1b0063963060a00a3110e44d76e7105d059/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/374ad1b0063963060a00a3110e44d76e7105d059/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=374ad1b0063963060a00a3110e44d76e7105d059", "patch": "@@ -1,247 +0,0 @@\n-error: `extern` fn uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:63:35\n-   |\n-LL | pub extern \"C\" fn ptr_type1(size: *const Foo) { }\n-   |                                   ^^^^^^^^^^ not FFI-safe\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-ctypes-fn.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-note: type defined here\n-  --> $DIR/lint-ctypes-fn.rs:34:1\n-   |\n-LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n-\n-error: `extern` fn uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:66:35\n-   |\n-LL | pub extern \"C\" fn ptr_type2(size: *const Foo) { }\n-   |                                   ^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-note: type defined here\n-  --> $DIR/lint-ctypes-fn.rs:34:1\n-   |\n-LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n-\n-error: `extern` fn uses type `[u32]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:69:33\n-   |\n-LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n-   |                                 ^^^^^^ not FFI-safe\n-   |\n-   = help: consider using a raw pointer instead\n-   = note: slices have no C equivalent\n-\n-error: `extern` fn uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:72:31\n-   |\n-LL | pub extern \"C\" fn str_type(p: &str) { }\n-   |                               ^^^^ not FFI-safe\n-   |\n-   = help: consider using `*const u8` and a length instead\n-   = note: string slices have no C equivalent\n-\n-error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:75:31\n-   |\n-LL | pub extern \"C\" fn box_type(p: Box<u32>) { }\n-   |                               ^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-\n-error: `extern` fn uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:78:32\n-   |\n-LL | pub extern \"C\" fn char_type(p: char) { }\n-   |                                ^^^^ not FFI-safe\n-   |\n-   = help: consider using `u32` or `libc::wchar_t` instead\n-   = note: the `char` type has no C equivalent\n-\n-error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:81:32\n-   |\n-LL | pub extern \"C\" fn i128_type(p: i128) { }\n-   |                                ^^^^ not FFI-safe\n-   |\n-   = note: 128-bit integers don't currently have a known stable ABI\n-\n-error: `extern` fn uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:84:32\n-   |\n-LL | pub extern \"C\" fn u128_type(p: u128) { }\n-   |                                ^^^^ not FFI-safe\n-   |\n-   = note: 128-bit integers don't currently have a known stable ABI\n-\n-error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:87:33\n-   |\n-LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n-   |                                 ^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider using a struct instead\n-   = note: tuples have unspecified layout\n-\n-error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:90:34\n-   |\n-LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n-   |                                  ^^^^^^^ not FFI-safe\n-   |\n-   = help: consider using a struct instead\n-   = note: tuples have unspecified layout\n-\n-error: `extern` fn uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:93:32\n-   |\n-LL | pub extern \"C\" fn zero_size(p: ZeroSize) { }\n-   |                                ^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a member to this struct\n-   = note: this struct has no fields\n-note: type defined here\n-  --> $DIR/lint-ctypes-fn.rs:26:1\n-   |\n-LL | pub struct ZeroSize;\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:96:40\n-   |\n-LL | pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-   = note: composed only of `PhantomData`\n-note: type defined here\n-  --> $DIR/lint-ctypes-fn.rs:61:1\n-   |\n-LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:99:51\n-   |\n-LL | pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n-   |                                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-   = note: composed only of `PhantomData`\n-\n-error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:104:30\n-   |\n-LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n-   |                              ^^^^^^ not FFI-safe\n-   |\n-   = help: consider using an `extern fn(...) -> ...` function pointer instead\n-   = note: this function pointer has Rust-specific calling convention\n-\n-error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:107:31\n-   |\n-LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n-   |                               ^^^^ not FFI-safe\n-   |\n-   = help: consider using an `extern fn(...) -> ...` function pointer instead\n-   = note: this function pointer has Rust-specific calling convention\n-\n-error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:110:35\n-   |\n-LL | pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n-   |                                   ^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-\n-error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:113:39\n-   |\n-LL | pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n-   |                                       ^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-   = note: 128-bit integers don't currently have a known stable ABI\n-\n-error: `extern` fn uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:116:38\n-   |\n-LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n-   |                                      ^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider using `*const u8` and a length instead\n-   = note: string slices have no C equivalent\n-\n-error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:119:37\n-   |\n-LL | pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n-   |                                     ^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-\n-error: `extern` fn uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:161:44\n-   |\n-LL | pub extern \"C\" fn unused_generic1<T>(size: *const Foo) { }\n-   |                                            ^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-note: type defined here\n-  --> $DIR/lint-ctypes-fn.rs:34:1\n-   |\n-LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n-\n-error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:164:43\n-   |\n-LL | pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n-   |                                           ^^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-   = note: composed only of `PhantomData`\n-\n-error: `extern` fn uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:171:48\n-   |\n-LL | pub extern \"C\" fn used_generic2<T>(x: T, size: *const Foo) { }\n-   |                                                ^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-note: type defined here\n-  --> $DIR/lint-ctypes-fn.rs:34:1\n-   |\n-LL | pub struct Foo;\n-   | ^^^^^^^^^^^^^^^\n-\n-error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:178:39\n-   |\n-LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n-   |                                       ^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-\n-error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:181:41\n-   |\n-LL | pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n-   |                                         ^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-\n-error: aborting due to 24 previous errors\n-"}, {"sha": "69fd64c1c092c262e52dfa631a3889d9036fdaef", "filename": "src/test/ui/mir/mir_cast_fn_ret.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fmir%2Fmir_cast_fn_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fmir%2Fmir_cast_fn_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_cast_fn_ret.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -1,10 +1,8 @@\n // run-pass\n-#[allow(improper_ctypes)]\n pub extern \"C\" fn tuple2() -> (u16, u8) {\n     (1, 2)\n }\n \n-#[allow(improper_ctypes)]\n pub extern \"C\" fn tuple3() -> (u8, u8, u8) {\n     (1, 2, 3)\n }"}, {"sha": "fc0db03e3a96894350a9611f398c150de1afebe3", "filename": "src/test/ui/mir/mir_codegen_calls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs?ref=a1f67ad9490eaa7de7e43e3eda6ca38d14cc2ceb", "patch": "@@ -74,7 +74,6 @@ fn test8() -> isize {\n     Two::two()\n }\n \n-#[allow(improper_ctypes)]\n extern fn simple_extern(x: u32, y: (u32, u32)) -> u32 {\n     x + y.0 * y.1\n }"}]}