{"sha": "fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNGVmNGQ3ODViMDBhNDg4MGUxNWRhNWRhYTRlODI1MTViNTVlNmU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-07-16T18:56:38Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-07-16T18:56:38Z"}, "message": "Merge pull request #139 from nrc/todo-sorry\n\nDon't apologise if its not our fault in warnings", "tree": {"sha": "dfebd76b6268f16d4d445e0757397a097a884d30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfebd76b6268f16d4d445e0757397a097a884d30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "html_url": "https://github.com/rust-lang/rust/commit/fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a6f96d704d01d4301fa9e9b6f632318e4c57c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a6f96d704d01d4301fa9e9b6f632318e4c57c4", "html_url": "https://github.com/rust-lang/rust/commit/e4a6f96d704d01d4301fa9e9b6f632318e4c57c4"}, {"sha": "f2bcee9d873adaf31dfdc5aee06ff89c0373e2b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2bcee9d873adaf31dfdc5aee06ff89c0373e2b3", "html_url": "https://github.com/rust-lang/rust/commit/f2bcee9d873adaf31dfdc5aee06ff89c0373e2b3"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "7110d508d5d2130c9f4a17dd6d82b31ae26cdb63", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "patch": "@@ -315,7 +315,9 @@ fn rewrite_binary_op(context: &RewriteContext,\n \n     // 1 = space between lhs expr and operator\n     let mut result =\n-        try_opt!(lhs.rewrite(context, context.config.max_width - offset - 1 - operator_str.len(), offset));\n+        try_opt!(lhs.rewrite(context,\n+                             context.config.max_width - offset - 1 - operator_str.len(),\n+                             offset));\n \n     result.push(' ');\n     result.push_str(&operator_str);"}, {"sha": "4b473dff4baa0269b9f3695bde342afab0fead63", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "patch": "@@ -467,8 +467,9 @@ impl<'a> FmtVisitor<'a> {\n \n                     // Make sure we do not exceed column limit\n                     // 4 = \" = ,\"\n-                    assert!(self.config.max_width >= vis.len() + name.len() + expr_snippet.len() + 4,\n-                            \"Enum variant exceeded column limit\");\n+                    assert!(\n+                        self.config.max_width >= vis.len() + name.len() + expr_snippet.len() + 4,\n+                        \"Enum variant exceeded column limit\");\n                 }\n \n                 result\n@@ -768,7 +769,8 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    // TODO we farm this out, but this could spill over the column limit, so we ought to handle it properly\n+    // TODO we farm this out, but this could spill over the column limit, so we\n+    // ought to handle it properly.\n     fn rewrite_fn_input(&self, arg: &ast::Arg) -> String {\n         format!(\"{}: {}\",\n                 pprust::pat_to_string(&arg.pat),"}, {"sha": "c296b3cda00037ea9b031e99b335249e751f71e4", "filename": "src/lib.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "patch": "@@ -125,13 +125,13 @@ impl fmt::Display for ErrorKind {\n         match *self {\n             ErrorKind::LineOverflow => {\n                 write!(fmt, \"line exceeded maximum length\")\n-            },\n+            }\n             ErrorKind::TrailingWhitespace => {\n                 write!(fmt, \"left behind trailing whitespace\")\n-            },\n+            }\n             ErrorKind::BadIssue(issue) => {\n                 write!(fmt, \"found {}\", issue)\n-            },\n+            }\n         }\n     }\n }\n@@ -142,6 +142,24 @@ struct FormattingError {\n     kind: ErrorKind,\n }\n \n+impl FormattingError {\n+    fn msg_prefix(&self) -> &str {\n+        match self.kind {\n+            ErrorKind::LineOverflow |\n+            ErrorKind::TrailingWhitespace => \"Rustfmt failed at\",\n+            ErrorKind::BadIssue(_) => \"WARNING:\",\n+        }\n+    }\n+\n+    fn msg_suffix(&self) -> &str {\n+        match self.kind {\n+            ErrorKind::LineOverflow |\n+            ErrorKind::TrailingWhitespace => \"(sorry)\",\n+            ErrorKind::BadIssue(_) => \"\",\n+        }\n+    }\n+}\n+\n struct FormatReport {\n     // Maps stringified file paths to their associated formatting errors\n     file_error_map: HashMap<String, Vec<FormattingError>>,\n@@ -153,10 +171,12 @@ impl fmt::Display for FormatReport {\n         for (file, errors) in self.file_error_map.iter() {\n             for error in errors {\n                 try!(write!(fmt,\n-                            \"Rustfmt failed at {}:{}: {} (sorry)\\n\",\n+                            \"{} {}:{}: {} {}\\n\",\n+                            error.msg_prefix(),\n                             file,\n                             error.line,\n-                            error.kind));\n+                            error.kind,\n+                            error.msg_suffix()));\n             }\n         }\n         Ok(())"}, {"sha": "3ac82ae27ee1e1cbecd480de5b34a516f13bc43b", "filename": "src/types.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "patch": "@@ -25,22 +25,26 @@ impl<'a> FmtVisitor<'a> {\n                                                                           ..}) => {\n                 if bound_lifetimes.len() > 0 {\n                     format!(\"for<{}> {}: {}\",\n-                            bound_lifetimes.iter().map(|l| self.rewrite_lifetime_def(l)).collect::<Vec<_>>().connect(\", \"),\n+                            bound_lifetimes.iter().map(|l| self.rewrite_lifetime_def(l))\n+                                .collect::<Vec<_>>().connect(\", \"),\n                             pprust::ty_to_string(bounded_ty),\n-                            bounds.iter().map(|b| self.rewrite_ty_bound(b)).collect::<Vec<_>>().connect(\" + \"))\n+                            bounds.iter().map(|b| self.rewrite_ty_bound(b))\n+                                .collect::<Vec<_>>().connect(\" + \"))\n \n                 } else {\n                     format!(\"{}: {}\",\n                             pprust::ty_to_string(bounded_ty),\n-                            bounds.iter().map(|b| self.rewrite_ty_bound(b)).collect::<Vec<_>>().connect(\" + \"))\n+                            bounds.iter().map(|b| self.rewrite_ty_bound(b))\n+                                .collect::<Vec<_>>().connect(\" + \"))\n                 }\n             }\n             &ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n                                                                             ref bounds,\n                                                                             ..}) => {\n                 format!(\"{}: {}\",\n                         pprust::lifetime_to_string(lifetime),\n-                        bounds.iter().map(|l| pprust::lifetime_to_string(l)).collect::<Vec<_>>().connect(\" + \"))\n+                        bounds.iter().map(|l| pprust::lifetime_to_string(l))\n+                            .collect::<Vec<_>>().connect(\" + \"))\n             }\n             &ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ref path, ref ty, ..}) => {\n                 format!(\"{} = {}\", pprust::path_to_string(path), pprust::ty_to_string(ty))\n@@ -55,7 +59,8 @@ impl<'a> FmtVisitor<'a> {\n \n         format!(\"{}: {}\",\n                 pprust::lifetime_to_string(&lifetime.lifetime),\n-                lifetime.bounds.iter().map(|l| pprust::lifetime_to_string(l)).collect::<Vec<_>>().connect(\" + \"))\n+                lifetime.bounds.iter().map(|l| pprust::lifetime_to_string(l))\n+                    .collect::<Vec<_>>().connect(\" + \"))\n     }\n \n     pub fn rewrite_ty_bound(&self, bound: &ast::TyParamBound) -> String {\n@@ -77,7 +82,8 @@ impl<'a> FmtVisitor<'a> {\n         result.push_str(&token::get_ident(ty_param.ident));\n         if ty_param.bounds.len() > 0 {\n             result.push_str(\": \");\n-            result.push_str(&ty_param.bounds.iter().map(|b| self.rewrite_ty_bound(b)).collect::<Vec<_>>().connect(\" + \"));\n+            result.push_str(&ty_param.bounds.iter().map(|b| self.rewrite_ty_bound(b))\n+                                .collect::<Vec<_>>().connect(\" + \"));\n         }\n         if let Some(ref def) = ty_param.default {\n             result.push_str(\" = \");\n@@ -90,7 +96,8 @@ impl<'a> FmtVisitor<'a> {\n     fn rewrite_poly_trait_ref(&self, t: &ast::PolyTraitRef) -> String {\n         if t.bound_lifetimes.len() > 0 {\n             format!(\"for<{}> {}\",\n-                    t.bound_lifetimes.iter().map(|l| self.rewrite_lifetime_def(l)).collect::<Vec<_>>().connect(\", \"),\n+                    t.bound_lifetimes.iter().map(|l| self.rewrite_lifetime_def(l))\n+                        .collect::<Vec<_>>().connect(\", \"),\n                     pprust::path_to_string(&t.trait_ref.path))\n \n         } else {"}, {"sha": "eb3c4be80f76227234c9d0643f7c068a2e84cbd8", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4ef4d785b00a4880e15da5daa4e82515b55e6e/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=fa4ef4d785b00a4880e15da5daa4e82515b55e6e", "patch": "@@ -380,7 +380,9 @@ impl<'a> FmtVisitor<'a> {\n             }\n             Some(open_brace) => {\n                 debug!(\"FmtVisitor::format_mod: internal mod\");\n-                debug!(\"... open_brace: {}, str: {:?}\", open_brace, self.codemap.span_to_snippet(s));\n+                debug!(\"... open_brace: {}, str: {:?}\",\n+                       open_brace,\n+                       self.codemap.span_to_snippet(s));\n                 // Format everything until opening brace\n                 // TODO Shoud rewrite properly\n                 self.format_missing(s.lo + BytePos(open_brace as u32));"}]}