{"sha": "85cda15b62b6b3c0d633eee1458b01a8abc759e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1Y2RhMTViNjJiNmIzYzBkNjMzZWVlMTQ1OGIwMWE4YWJjNzU5ZTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-28T13:15:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-28T13:15:28Z"}, "message": "Merge #6384\n\n6384: add doctest runnables on struct r=lnicola a=bnjjj\n\nI will check for how to do the same on trait implementation on another PR.\r\n\r\n#6356\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "3bf5ef60d5a213a41e57b31f51b1f4bee6eeaf3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bf5ef60d5a213a41e57b31f51b1f4bee6eeaf3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85cda15b62b6b3c0d633eee1458b01a8abc759e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmW7wCRBK7hj4Ov3rIwAAdHIIAAFZ941oPxBJtvkDMSBLf5jG\n2mf1APiIibcZ8QiG80AeXtcCVEkmm6OcdpRZN6gyB0Bcxca13pNJ2/fvmVAPUlOI\nIaxruFnUhqeDTLPK8Bpi7c7Guk21FubaYaSM48gVajHZ0DtJa2V7A4KWZW51qpHP\nFwu6UkHhDKZ646mZmipc+0LRww/cuzSs0sw4VFaXjg9zicLAjWKyy5zNeY1eSvw8\n2uBImOKQMeCP1fXJx8o8ebLCJEhUbQqei3U/tAAbqGonllnktpaQGv+ynCGdmokh\nYx8+zOHmyOH00GtdwqJK5Si92GDuZ2HlV6lRcASPDB9xeIvapdW3XnW/lUNsEX8=\n=UKwp\n-----END PGP SIGNATURE-----\n", "payload": "tree 3bf5ef60d5a213a41e57b31f51b1f4bee6eeaf3b\nparent a9b60b8478d19ea6118e6aee816bb25c2f88a3bf\nparent 3bbc2e95e43e72612a1abbd3d8916b9761686aab\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603890928 +0000\ncommitter GitHub <noreply@github.com> 1603890928 +0000\n\nMerge #6384\n\n6384: add doctest runnables on struct r=lnicola a=bnjjj\n\nI will check for how to do the same on trait implementation on another PR.\r\n\r\n#6356\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85cda15b62b6b3c0d633eee1458b01a8abc759e6", "html_url": "https://github.com/rust-lang/rust/commit/85cda15b62b6b3c0d633eee1458b01a8abc759e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85cda15b62b6b3c0d633eee1458b01a8abc759e6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9b60b8478d19ea6118e6aee816bb25c2f88a3bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b60b8478d19ea6118e6aee816bb25c2f88a3bf", "html_url": "https://github.com/rust-lang/rust/commit/a9b60b8478d19ea6118e6aee816bb25c2f88a3bf"}, {"sha": "3bbc2e95e43e72612a1abbd3d8916b9761686aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbc2e95e43e72612a1abbd3d8916b9761686aab", "html_url": "https://github.com/rust-lang/rust/commit/3bbc2e95e43e72612a1abbd3d8916b9761686aab"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "2bd0e86e5489c516954768ba762e8cab2cab2659", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/85cda15b62b6b3c0d633eee1458b01a8abc759e6/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cda15b62b6b3c0d633eee1458b01a8abc759e6/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=85cda15b62b6b3c0d633eee1458b01a8abc759e6", "patch": "@@ -102,6 +102,7 @@ pub(crate) fn runnable(\n ) -> Option<Runnable> {\n     match_ast! {\n         match item {\n+            ast::Struct(it) => runnable_struct(sema, it, file_id),\n             ast::Fn(it) => runnable_fn(sema, it, file_id),\n             ast::Module(it) => runnable_mod(sema, it, file_id),\n             _ => None,\n@@ -182,6 +183,43 @@ fn runnable_fn(\n     Some(Runnable { nav, kind, cfg })\n }\n \n+fn runnable_struct(\n+    sema: &Semantics<RootDatabase>,\n+    struct_def: ast::Struct,\n+    file_id: FileId,\n+) -> Option<Runnable> {\n+    if !has_runnable_doc_test(&struct_def) {\n+        return None;\n+    }\n+    let name_string = struct_def.name()?.text().to_string();\n+\n+    let attrs =\n+        Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &struct_def));\n+    let cfg = attrs.cfg();\n+\n+    let test_id = match sema.to_def(&struct_def).map(|def| def.module(sema.db)) {\n+        Some(module) => {\n+            let path_iter = module\n+                .path_to_root(sema.db)\n+                .into_iter()\n+                .rev()\n+                .filter_map(|it| it.name(sema.db))\n+                .map(|name| name.to_string());\n+            let path = path_iter.chain(std::iter::once(name_string)).join(\"::\");\n+\n+            TestId::Path(path)\n+        }\n+        None => TestId::Name(name_string),\n+    };\n+\n+    let nav = NavigationTarget::from_doc_commented(\n+        sema.db,\n+        InFile::new(file_id.into(), &struct_def),\n+        InFile::new(file_id.into(), &struct_def),\n+    );\n+    Some(Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg })\n+}\n+\n #[derive(Debug, Copy, Clone)]\n pub struct TestAttr {\n     pub ignore: bool,\n@@ -215,8 +253,8 @@ const RUSTDOC_FENCE: &str = \"```\";\n const RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUNNABLE: &[&str] =\n     &[\"\", \"rust\", \"should_panic\", \"edition2015\", \"edition2018\"];\n \n-fn has_runnable_doc_test(fn_def: &ast::Fn) -> bool {\n-    fn_def.doc_comment_text().map_or(false, |comments_text| {\n+fn has_runnable_doc_test(def: &dyn DocCommentsOwner) -> bool {\n+    def.doc_comment_text().map_or(false, |comments_text| {\n         let mut in_code_block = false;\n \n         for line in comments_text.lines() {\n@@ -487,8 +525,14 @@ fn should_have_no_runnable_5() {}\n /// let z = 55;\n /// ```\n fn should_have_no_runnable_6() {}\n+\n+/// ```\n+/// let x = 5;\n+/// ```\n+struct StructWithRunnable(String);\n+\n \"#,\n-            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST],\n+            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -569,6 +613,26 @@ fn should_have_no_runnable_6() {}\n                         },\n                         cfg: None,\n                     },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 756..821,\n+                            focus_range: None,\n+                            name: \"StructWithRunnable\",\n+                            kind: STRUCT,\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"StructWithRunnable\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n                 ]\n             \"#]],\n         );"}]}