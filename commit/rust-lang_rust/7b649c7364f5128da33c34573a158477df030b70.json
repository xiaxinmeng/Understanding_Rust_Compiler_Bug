{"sha": "7b649c7364f5128da33c34573a158477df030b70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNjQ5YzczNjRmNTEyOGRhMzNjMzQ1NzNhMTU4NDc3ZGYwMzBiNzA=", "commit": {"author": {"name": "Marko Mijalkovic", "email": "marko.mijalkovic97@gmail.com", "date": "2020-05-10T21:39:57Z"}, "committer": {"name": "Marko Mijalkovic", "email": "marko.mijalkovic97@gmail.com", "date": "2020-05-10T21:39:57Z"}, "message": "Renamed lld_link_script to link_script and support all GNU-like linkers", "tree": {"sha": "ed62c3df6e9b57e8a4258e93605ead79b1a07ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed62c3df6e9b57e8a4258e93605ead79b1a07ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b649c7364f5128da33c34573a158477df030b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b649c7364f5128da33c34573a158477df030b70", "html_url": "https://github.com/rust-lang/rust/commit/7b649c7364f5128da33c34573a158477df030b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b649c7364f5128da33c34573a158477df030b70/comments", "author": {"login": "overdrivenpotato", "id": 5241210, "node_id": "MDQ6VXNlcjUyNDEyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5241210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/overdrivenpotato", "html_url": "https://github.com/overdrivenpotato", "followers_url": "https://api.github.com/users/overdrivenpotato/followers", "following_url": "https://api.github.com/users/overdrivenpotato/following{/other_user}", "gists_url": "https://api.github.com/users/overdrivenpotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/overdrivenpotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/overdrivenpotato/subscriptions", "organizations_url": "https://api.github.com/users/overdrivenpotato/orgs", "repos_url": "https://api.github.com/users/overdrivenpotato/repos", "events_url": "https://api.github.com/users/overdrivenpotato/events{/privacy}", "received_events_url": "https://api.github.com/users/overdrivenpotato/received_events", "type": "User", "site_admin": false}, "committer": {"login": "overdrivenpotato", "id": 5241210, "node_id": "MDQ6VXNlcjUyNDEyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5241210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/overdrivenpotato", "html_url": "https://github.com/overdrivenpotato", "followers_url": "https://api.github.com/users/overdrivenpotato/followers", "following_url": "https://api.github.com/users/overdrivenpotato/following{/other_user}", "gists_url": "https://api.github.com/users/overdrivenpotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/overdrivenpotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/overdrivenpotato/subscriptions", "organizations_url": "https://api.github.com/users/overdrivenpotato/orgs", "repos_url": "https://api.github.com/users/overdrivenpotato/repos", "events_url": "https://api.github.com/users/overdrivenpotato/events{/privacy}", "received_events_url": "https://api.github.com/users/overdrivenpotato/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e62240801cc5f7aa70300fb0f92f54370eabea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e62240801cc5f7aa70300fb0f92f54370eabea6", "html_url": "https://github.com/rust-lang/rust/commit/7e62240801cc5f7aa70300fb0f92f54370eabea6"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "dca9f12df09b3800c7381b0d2b7f23b5dd70baff", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7b649c7364f5128da33c34573a158477df030b70/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b649c7364f5128da33c34573a158477df030b70/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=7b649c7364f5128da33c34573a158477df030b70", "patch": "@@ -1179,20 +1179,19 @@ fn add_pre_link_args(\n     cmd.args(&sess.opts.debugging_opts.pre_link_args);\n }\n \n-/// Add an LLD link script embedded in the target, if applicable.\n-fn add_lld_link_script(\n+/// Add a link script embedded in the target, if applicable.\n+fn add_link_script(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n-    flavor: LinkerFlavor,\n     tmpdir: &Path,\n     crate_type: CrateType,\n ) {\n-    match (flavor, crate_type, &sess.target.target.options.lld_link_script) {\n-        (\n-            LinkerFlavor::Lld(LldFlavor::Ld),\n-            CrateType::Cdylib | CrateType::Executable,\n-            Some(script),\n-        ) => {\n+    match (crate_type, &sess.target.target.options.link_script) {\n+        (CrateType::Cdylib | CrateType::Executable, Some(script)) => {\n+            if !sess.target.target.options.linker_is_gnu {\n+                sess.fatal(\"can only use link script when linking with GNU-like linker\");\n+            }\n+\n             let file_name = [\"rustc\", &sess.target.target.llvm_target, \"linkfile.ld\"].join(\"-\");\n \n             let path = tmpdir.join(file_name);\n@@ -1450,7 +1449,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     add_pre_link_args(cmd, sess, flavor, crate_type);\n \n     // NO-OPT-OUT\n-    add_lld_link_script(cmd, sess, flavor, tmpdir, crate_type);\n+    add_link_script(cmd, sess, tmpdir, crate_type);\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.target.options.is_like_fuchsia {"}, {"sha": "0c74454d0c5fe66dafc189266e2c637350613a56", "filename": "src/librustc_target/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b649c7364f5128da33c34573a158477df030b70/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b649c7364f5128da33c34573a158477df030b70/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_sony_psp.rs?ref=7b649c7364f5128da33c34573a158477df030b70", "patch": "@@ -27,6 +27,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips2\".to_string(),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n+            linker_is_gnu: true,\n             relocation_model: RelocModel::Static,\n \n             // PSP FPU only supports single precision floats.\n@@ -35,7 +36,7 @@ pub fn target() -> TargetResult {\n             // PSP does not support trap-on-condition instructions.\n             llvm_args: vec![\"-mno-check-zero-division\".to_string()],\n             pre_link_args,\n-            lld_link_script: Some(LINKER_SCRIPT.to_string()),\n+            link_script: Some(LINKER_SCRIPT.to_string()),\n             ..Default::default()\n         },\n     })"}, {"sha": "00088a0d0404ac6bb78861a14055a08ce614a40b", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b649c7364f5128da33c34573a158477df030b70/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b649c7364f5128da33c34573a158477df030b70/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=7b649c7364f5128da33c34573a158477df030b70", "patch": "@@ -668,9 +668,10 @@ pub struct TargetOptions {\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n-    /// Optional LLD link script applied to `dylib` and `executable` crate\n-    /// types. This is a string containing the script, not a path.\n-    pub lld_link_script: Option<String>,\n+    /// Optional link script applied to `dylib` and `executable` crate types.\n+    /// This is a string containing the script, not a path. Can only be applied\n+    /// to linkers where `linker_is_gnu` is true.\n+    pub link_script: Option<String>,\n \n     /// Environment variables to be set for the linker invocation.\n     pub link_env: Vec<(String, String)>,\n@@ -900,7 +901,7 @@ impl Default for TargetOptions {\n             pre_link_args: LinkArgs::new(),\n             pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n-            lld_link_script: None,\n+            link_script: None,\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n             features: String::new(),\n@@ -1250,7 +1251,7 @@ impl Target {\n         key!(post_link_objects, list);\n         key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n-        key!(lld_link_script, optional);\n+        key!(link_script, optional);\n         key!(link_env, env);\n         key!(link_env_remove, list);\n         key!(asm_args, list);\n@@ -1480,7 +1481,7 @@ impl ToJson for Target {\n         target_option_val!(post_link_objects);\n         target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);\n-        target_option_val!(lld_link_script);\n+        target_option_val!(link_script);\n         target_option_val!(env - link_env);\n         target_option_val!(link_env_remove);\n         target_option_val!(asm_args);"}]}