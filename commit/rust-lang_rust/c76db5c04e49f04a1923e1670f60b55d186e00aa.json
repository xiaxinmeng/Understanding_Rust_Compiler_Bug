{"sha": "c76db5c04e49f04a1923e1670f60b55d186e00aa", "node_id": "C_kwDOAAsO6NoAKGM3NmRiNWMwNGU0OWYwNGExOTIzZTE2NzBmNjBiNTVkMTg2ZTAwYWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-25T15:19:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-25T15:19:41Z"}, "message": "Auto merge of #9243 - Jarcho:std_core, r=Manishearth\n\nDon't lint `std_instead_of_core` on `std::env`\n\nfixes #9239\n\nThis also reorders the execution of the lint to do as little as possible in the case where the path doesn't start with `std` or `alloc`.\n\nchangelog: [`std_instead_of_core`](https://rust-lang.github.io/rust-clippy/master/#std_instead_of_core): Don't lint on `use std::env`\nchangelog: [`std_instead_of_alloc`](https://rust-lang.github.io/rust-clippy/master/#std_instead_of_alloc): Don't lint `use std::vec` twice", "tree": {"sha": "d3f6ba1175b06565ddb22ed481b70748ff5b05d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f6ba1175b06565ddb22ed481b70748ff5b05d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c76db5c04e49f04a1923e1670f60b55d186e00aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c76db5c04e49f04a1923e1670f60b55d186e00aa", "html_url": "https://github.com/rust-lang/rust/commit/c76db5c04e49f04a1923e1670f60b55d186e00aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c76db5c04e49f04a1923e1670f60b55d186e00aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cce0477e456981d983c109fb1adb5068e64bf1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cce0477e456981d983c109fb1adb5068e64bf1f", "html_url": "https://github.com/rust-lang/rust/commit/1cce0477e456981d983c109fb1adb5068e64bf1f"}, {"sha": "6bc024df188526a984827d9ecca978414df0afff", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc024df188526a984827d9ecca978414df0afff", "html_url": "https://github.com/rust-lang/rust/commit/6bc024df188526a984827d9ecca978414df0afff"}], "stats": {"total": 130, "additions": 79, "deletions": 51}, "files": [{"sha": "91865b6b0f2ac53530d14bd34242366372ab2aad", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c76db5c04e49f04a1923e1670f60b55d186e00aa/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76db5c04e49f04a1923e1670f60b55d186e00aa/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c76db5c04e49f04a1923e1670f60b55d186e00aa", "patch": "@@ -918,7 +918,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move || Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n-    store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports));\n+    store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports::default()));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "ffd63cc687a11e660e15ee35d6223f9c5d322303", "filename": "clippy_lints/src/std_instead_of_core.rs", "status": "modified", "additions": 54, "deletions": 40, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/c76db5c04e49f04a1923e1670f60b55d186e00aa/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76db5c04e49f04a1923e1670f60b55d186e00aa/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs?ref=c76db5c04e49f04a1923e1670f60b55d186e00aa", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::{def::Res, HirId, Path, PathSegment};\n-use rustc_lint::{LateContext, LateLintPass, Lint};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{sym, symbol::kw, Symbol};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{sym, symbol::kw, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -81,39 +81,55 @@ declare_clippy_lint! {\n     \"type is imported from alloc when available in core\"\n }\n \n-declare_lint_pass!(StdReexports => [STD_INSTEAD_OF_CORE, STD_INSTEAD_OF_ALLOC, ALLOC_INSTEAD_OF_CORE]);\n+#[derive(Default)]\n+pub struct StdReexports {\n+    // Paths which can be either a module or a macro (e.g. `std::env`) will cause this check to happen\n+    // twice. First for the mod, second for the macro. This is used to avoid the lint reporting for the macro\n+    // when the path could be also be used to access the module.\n+    prev_span: Span,\n+}\n+impl_lint_pass!(StdReexports => [STD_INSTEAD_OF_CORE, STD_INSTEAD_OF_ALLOC, ALLOC_INSTEAD_OF_CORE]);\n \n impl<'tcx> LateLintPass<'tcx> for StdReexports {\n     fn check_path(&mut self, cx: &LateContext<'tcx>, path: &Path<'tcx>, _: HirId) {\n-        // std_instead_of_core\n-        check_path(cx, path, sym::std, sym::core, STD_INSTEAD_OF_CORE);\n-        // std_instead_of_alloc\n-        check_path(cx, path, sym::std, sym::alloc, STD_INSTEAD_OF_ALLOC);\n-        // alloc_instead_of_core\n-        check_path(cx, path, sym::alloc, sym::core, ALLOC_INSTEAD_OF_CORE);\n-    }\n-}\n-\n-fn check_path(cx: &LateContext<'_>, path: &Path<'_>, krate: Symbol, suggested_crate: Symbol, lint: &'static Lint) {\n-    if_chain! {\n-        // check if path resolves to the suggested crate.\n-        if let Res::Def(_, def_id) = path.res;\n-        if suggested_crate == cx.tcx.crate_name(def_id.krate);\n-\n-        // check if the first segment of the path is the crate we want to identify\n-        if let Some(path_root_segment) = get_first_segment(path);\n-\n-        // check if the path matches the crate we want to suggest the other path for.\n-        if krate == path_root_segment.ident.name;\n-        then {\n-            span_lint_and_help(\n-                cx,\n-                lint,\n-                path.span,\n-                &format!(\"used import from `{}` instead of `{}`\", krate, suggested_crate),\n-                None,\n-                &format!(\"consider importing the item from `{}`\", suggested_crate),\n-            );\n+        if let Res::Def(_, def_id) = path.res\n+            && let Some(first_segment) = get_first_segment(path)\n+        {\n+            let (lint, msg, help) = match first_segment.ident.name {\n+                sym::std => match cx.tcx.crate_name(def_id.krate) {\n+                    sym::core => (\n+                        STD_INSTEAD_OF_CORE,\n+                        \"used import from `std` instead of `core`\",\n+                        \"consider importing the item from `core`\",\n+                    ),\n+                    sym::alloc => (\n+                        STD_INSTEAD_OF_ALLOC,\n+                        \"used import from `std` instead of `alloc`\",\n+                        \"consider importing the item from `alloc`\",\n+                    ),\n+                    _ => {\n+                        self.prev_span = path.span;\n+                        return;\n+                    },\n+                },\n+                sym::alloc => {\n+                    if cx.tcx.crate_name(def_id.krate) == sym::core {\n+                        (\n+                            ALLOC_INSTEAD_OF_CORE,\n+                            \"used import from `alloc` instead of `core`\",\n+                            \"consider importing the item from `core`\",\n+                        )\n+                    } else {\n+                        self.prev_span = path.span;\n+                        return;\n+                    }\n+                },\n+                _ => return,\n+            };\n+            if path.span != self.prev_span {\n+                span_lint_and_help(cx, lint, path.span, msg, None, help);\n+                self.prev_span = path.span;\n+            }\n         }\n     }\n }\n@@ -123,12 +139,10 @@ fn check_path(cx: &LateContext<'_>, path: &Path<'_>, krate: Symbol, suggested_cr\n /// If this is a global path (such as `::std::fmt::Debug`), then the segment after [`kw::PathRoot`]\n /// is returned.\n fn get_first_segment<'tcx>(path: &Path<'tcx>) -> Option<&'tcx PathSegment<'tcx>> {\n-    let segment = path.segments.first()?;\n-\n-    // A global path will have PathRoot as the first segment. In this case, return the segment after.\n-    if segment.ident.name == kw::PathRoot {\n-        path.segments.get(1)\n-    } else {\n-        Some(segment)\n+    match path.segments {\n+        // A global path will have PathRoot as the first segment. In this case, return the segment after.\n+        [x, y, ..] if x.ident.name == kw::PathRoot => Some(y),\n+        [x, ..] => Some(x),\n+        _ => None,\n     }\n }"}, {"sha": "6b27475de4c87f84fecf66d74878eaa60348564c", "filename": "tests/ui/std_instead_of_core.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c76db5c04e49f04a1923e1670f60b55d186e00aa/tests%2Fui%2Fstd_instead_of_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76db5c04e49f04a1923e1670f60b55d186e00aa/tests%2Fui%2Fstd_instead_of_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstd_instead_of_core.rs?ref=c76db5c04e49f04a1923e1670f60b55d186e00aa", "patch": "@@ -9,6 +9,8 @@ fn std_instead_of_core() {\n     use std::hash::Hasher;\n     // Absolute path\n     use ::std::hash::Hash;\n+    // Don't lint on `env` macro\n+    use std::env;\n \n     // Multiple imports\n     use std::fmt::{Debug, Result};\n@@ -20,10 +22,14 @@ fn std_instead_of_core() {\n     // Types\n     let cell = std::cell::Cell::new(8u32);\n     let cell_absolute = ::std::cell::Cell::new(8u32);\n+\n+    let _ = std::env!(\"PATH\");\n }\n \n #[warn(clippy::std_instead_of_alloc)]\n fn std_instead_of_alloc() {\n+    // Only lint once.\n+    use std::vec;\n     use std::vec::Vec;\n }\n "}, {"sha": "bc49dabf5868ac44b0f9c26cab047c55d0e54427", "filename": "tests/ui/std_instead_of_core.stderr", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c76db5c04e49f04a1923e1670f60b55d186e00aa/tests%2Fui%2Fstd_instead_of_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c76db5c04e49f04a1923e1670f60b55d186e00aa/tests%2Fui%2Fstd_instead_of_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstd_instead_of_core.stderr?ref=c76db5c04e49f04a1923e1670f60b55d186e00aa", "patch": "@@ -16,70 +16,78 @@ LL |     use ::std::hash::Hash;\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:14:20\n+  --> $DIR/std_instead_of_core.rs:16:20\n    |\n LL |     use std::fmt::{Debug, Result};\n    |                    ^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:14:27\n+  --> $DIR/std_instead_of_core.rs:16:27\n    |\n LL |     use std::fmt::{Debug, Result};\n    |                           ^^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:17:15\n+  --> $DIR/std_instead_of_core.rs:19:15\n    |\n LL |     let ptr = std::ptr::null::<u32>();\n    |               ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:18:19\n+  --> $DIR/std_instead_of_core.rs:20:19\n    |\n LL |     let ptr_mut = ::std::ptr::null_mut::<usize>();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:21:16\n+  --> $DIR/std_instead_of_core.rs:23:16\n    |\n LL |     let cell = std::cell::Cell::new(8u32);\n    |                ^^^^^^^^^^^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:22:25\n+  --> $DIR/std_instead_of_core.rs:24:25\n    |\n LL |     let cell_absolute = ::std::cell::Cell::new(8u32);\n    |                         ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `alloc`\n-  --> $DIR/std_instead_of_core.rs:27:9\n+  --> $DIR/std_instead_of_core.rs:32:9\n+   |\n+LL |     use std::vec;\n+   |         ^^^^^^^^\n+   |\n+   = note: `-D clippy::std-instead-of-alloc` implied by `-D warnings`\n+   = help: consider importing the item from `alloc`\n+\n+error: used import from `std` instead of `alloc`\n+  --> $DIR/std_instead_of_core.rs:33:9\n    |\n LL |     use std::vec::Vec;\n    |         ^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::std-instead-of-alloc` implied by `-D warnings`\n    = help: consider importing the item from `alloc`\n \n error: used import from `alloc` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:32:9\n+  --> $DIR/std_instead_of_core.rs:38:9\n    |\n LL |     use alloc::slice::from_ref;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::alloc-instead-of-core` implied by `-D warnings`\n    = help: consider importing the item from `core`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 11 previous errors\n "}]}