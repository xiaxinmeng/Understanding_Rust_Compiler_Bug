{"sha": "c7a8240f024830c35b247ad954fd2a29475c7c73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YTgyNDBmMDI0ODMwYzM1YjI0N2FkOTU0ZmQyYTI5NDc1YzdjNzM=", "commit": {"author": {"name": "Jonathan S", "email": "gereeter@gmail.com", "date": "2014-12-30T18:52:51Z"}, "committer": {"name": "Jonathan S", "email": "gereeter@gmail.com", "date": "2014-12-30T18:52:51Z"}, "message": "Removed a bunch of unnecessary .clone()s from build_reduced_graph", "tree": {"sha": "74860d8378f84ba4da5383b02693662b43392cac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74860d8378f84ba4da5383b02693662b43392cac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7a8240f024830c35b247ad954fd2a29475c7c73", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a8240f024830c35b247ad954fd2a29475c7c73", "html_url": "https://github.com/rust-lang/rust/commit/c7a8240f024830c35b247ad954fd2a29475c7c73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7a8240f024830c35b247ad954fd2a29475c7c73/comments", "author": null, "committer": null, "parents": [{"sha": "096df4e134b3ed4e7f6152d7c8326e38dfbd7309", "url": "https://api.github.com/repos/rust-lang/rust/commits/096df4e134b3ed4e7f6152d7c8326e38dfbd7309", "html_url": "https://github.com/rust-lang/rust/commit/096df4e134b3ed4e7f6152d7c8326e38dfbd7309"}], "stats": {"total": 168, "additions": 69, "deletions": 99}, "files": [{"sha": "7dbcc810b571b521a0b1435ea109eef9df387e25", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 69, "deletions": 99, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/c7a8240f024830c35b247ad954fd2a29475c7c73/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a8240f024830c35b247ad954fd2a29475c7c73/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c7a8240f024830c35b247ad954fd2a29475c7c73", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     /// a block.\n     fn add_child(&self,\n                  name: Name,\n-                 parent: Rc<Module>,\n+                 parent: &Rc<Module>,\n                  duplicate_checking_mode: DuplicateCheckingMode,\n                  // For printing errors\n                  sp: Span)\n@@ -139,7 +139,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         // child name directly. Otherwise, we create or reuse an anonymous\n         // module and add the child to that.\n \n-        self.check_for_conflicts_between_external_crates_and_items(&*parent,\n+        self.check_for_conflicts_between_external_crates_and_items(&**parent,\n                                                                    name,\n                                                                    sp);\n \n@@ -265,26 +265,20 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         return false;\n     }\n \n-    fn get_parent_link(&mut self, parent: Rc<Module>, name: Name)\n-                       -> ParentLink {\n+    fn get_parent_link(&mut self, parent: &Rc<Module>, name: Name) -> ParentLink {\n         ModuleParentLink(parent.downgrade(), name)\n     }\n \n     /// Constructs the reduced graph for one item.\n-    fn build_reduced_graph_for_item(&mut self,\n-                                    item: &Item,\n-                                    parent: Rc<Module>)\n-                                    -> Rc<Module>\n-    {\n+    fn build_reduced_graph_for_item(&mut self, item: &Item, parent: &Rc<Module>) -> Rc<Module> {\n         let name = item.ident.name;\n         let sp = item.span;\n         let is_public = item.vis == ast::Public;\n         let modifiers = if is_public { PUBLIC } else { DefModifiers::empty() } | IMPORTABLE;\n \n         match item.node {\n             ItemMod(..) => {\n-                let name_bindings =\n-                    self.add_child(name, parent.clone(), ForbidDuplicateModules, sp);\n+                let name_bindings = self.add_child(name, parent, ForbidDuplicateModules, sp);\n \n                 let parent_link = self.get_parent_link(parent, name);\n                 let def_id = DefId { krate: 0, node: item.id };\n@@ -298,57 +292,45 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 name_bindings.get_module()\n             }\n \n-            ItemForeignMod(..) => parent,\n+            ItemForeignMod(..) => parent.clone(),\n \n             // These items live in the value namespace.\n             ItemStatic(_, m, _) => {\n-                let name_bindings =\n-                    self.add_child(name, parent.clone(), ForbidDuplicateValues, sp);\n+                let name_bindings = self.add_child(name, parent, ForbidDuplicateValues, sp);\n                 let mutbl = m == ast::MutMutable;\n \n-                name_bindings.define_value\n-                    (DefStatic(local_def(item.id), mutbl), sp, modifiers);\n-                parent\n+                name_bindings.define_value(DefStatic(local_def(item.id), mutbl), sp, modifiers);\n+                parent.clone()\n             }\n             ItemConst(_, _) => {\n-                self.add_child(name, parent.clone(), ForbidDuplicateValues, sp)\n-                    .define_value(DefConst(local_def(item.id)),\n-                                  sp, modifiers);\n-                parent\n+                self.add_child(name, parent, ForbidDuplicateValues, sp)\n+                    .define_value(DefConst(local_def(item.id)), sp, modifiers);\n+                parent.clone()\n             }\n             ItemFn(_, _, _, _, _) => {\n-                let name_bindings =\n-                    self.add_child(name, parent.clone(), ForbidDuplicateValues, sp);\n+                let name_bindings = self.add_child(name, parent, ForbidDuplicateValues, sp);\n \n                 let def = DefFn(local_def(item.id), false);\n                 name_bindings.define_value(def, sp, modifiers);\n-                parent\n+                parent.clone()\n             }\n \n             // These items live in the type namespace.\n             ItemTy(..) => {\n                 let name_bindings =\n-                    self.add_child(name,\n-                                   parent.clone(),\n-                                   ForbidDuplicateTypesAndModules,\n-                                   sp);\n-\n-                name_bindings.define_type\n-                    (DefTy(local_def(item.id), false), sp, modifiers);\n-                parent\n+                    self.add_child(name, parent, ForbidDuplicateTypesAndModules, sp);\n+\n+                name_bindings.define_type(DefTy(local_def(item.id), false), sp, modifiers);\n+                parent.clone()\n             }\n \n             ItemEnum(ref enum_definition, _) => {\n                 let name_bindings =\n-                    self.add_child(name,\n-                                   parent.clone(),\n-                                   ForbidDuplicateTypesAndModules,\n-                                   sp);\n+                    self.add_child(name, parent, ForbidDuplicateTypesAndModules, sp);\n \n-                name_bindings.define_type\n-                    (DefTy(local_def(item.id), true), sp, modifiers);\n+                name_bindings.define_type(DefTy(local_def(item.id), true), sp, modifiers);\n \n-                let parent_link = self.get_parent_link(parent.clone(), name);\n+                let parent_link = self.get_parent_link(parent, name);\n                 // We want to make sure the module type is EnumModuleKind\n                 // even if there's already an ImplModuleKind module defined,\n                 // since that's how we prevent duplicate enum definitions\n@@ -359,13 +341,15 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                               is_public,\n                                               sp);\n \n+                let module = name_bindings.get_module();\n+\n                 for variant in (*enum_definition).variants.iter() {\n                     self.build_reduced_graph_for_variant(\n                         &**variant,\n                         local_def(item.id),\n-                        name_bindings.get_module());\n+                        &module);\n                 }\n-                parent\n+                parent.clone()\n             }\n \n             // These items live in both the type and value namespaces.\n@@ -376,19 +360,15 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     None            => (ForbidDuplicateTypesAndModules, None)\n                 };\n \n-                let name_bindings = self.add_child(name, parent.clone(), forbid, sp);\n+                let name_bindings = self.add_child(name, parent, forbid, sp);\n \n                 // Define a name in the type namespace.\n                 name_bindings.define_type(DefTy(local_def(item.id), false), sp, modifiers);\n \n                 // If this is a newtype or unit-like struct, define a name\n                 // in the value namespace as well\n-                match ctor_id {\n-                    Some(cid) => {\n-                        name_bindings.define_value(DefStruct(local_def(cid)),\n-                                                   sp, modifiers);\n-                    }\n-                    None => {}\n+                if let Some(cid) = ctor_id {\n+                    name_bindings.define_value(DefStruct(local_def(cid)), sp, modifiers);\n                 }\n \n                 // Record the def ID and fields of this struct.\n@@ -400,7 +380,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 }).collect();\n                 self.structs.insert(local_def(item.id), named_fields);\n \n-                parent\n+                parent.clone()\n             }\n \n             ItemImpl(_, _, None, ref ty, ref impl_items) => {\n@@ -455,13 +435,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                             // Create the module\n                             _ => {\n                                 let name_bindings =\n-                                    self.add_child(mod_name,\n-                                                   parent.clone(),\n-                                                   ForbidDuplicateModules,\n-                                                   sp);\n+                                    self.add_child(mod_name, parent, ForbidDuplicateModules, sp);\n \n-                                let parent_link =\n-                                    self.get_parent_link(parent.clone(), name);\n+                                let parent_link = self.get_parent_link(parent, name);\n                                 let def_id = local_def(item.id);\n                                 let ns = TypeNS;\n                                 let is_public =\n@@ -487,7 +463,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                     let name = method.pe_ident().name;\n                                     let method_name_bindings =\n                                         self.add_child(name,\n-                                                       new_parent.clone(),\n+                                                       &new_parent,\n                                                        ForbidDuplicateValues,\n                                                        method.span);\n                                     let def = match method.pe_explicit_self()\n@@ -524,7 +500,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                     let typedef_name_bindings =\n                                         self.add_child(\n                                             name,\n-                                            new_parent.clone(),\n+                                            &new_parent,\n                                             ForbidDuplicateTypesAndModules,\n                                             typedef.span);\n                                     let def = DefAssociatedTy(local_def(\n@@ -545,20 +521,17 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     }\n                 }\n \n-                parent\n+                parent.clone()\n             }\n \n-            ItemImpl(_, _, Some(_), _, _) => parent,\n+            ItemImpl(_, _, Some(_), _, _) => parent.clone(),\n \n             ItemTrait(_, _, _, ref items) => {\n                 let name_bindings =\n-                    self.add_child(name,\n-                                   parent.clone(),\n-                                   ForbidDuplicateTypesAndModules,\n-                                   sp);\n+                    self.add_child(name, parent, ForbidDuplicateTypesAndModules, sp);\n \n                 // Add all the items within to a new module.\n-                let parent_link = self.get_parent_link(parent.clone(), name);\n+                let parent_link = self.get_parent_link(parent, name);\n                 name_bindings.define_module(parent_link,\n                                             Some(local_def(item.id)),\n                                             TraitModuleKind,\n@@ -599,7 +572,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                             let method_name_bindings =\n                                 self.add_child(name,\n-                                               module_parent.clone(),\n+                                               &module_parent,\n                                                ForbidDuplicateTypesAndValues,\n                                                ty_m.span);\n                             // NB: not IMPORTABLE\n@@ -615,7 +588,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                             let name_bindings =\n                                 self.add_child(associated_type.ty_param.ident.name,\n-                                               module_parent.clone(),\n+                                               &module_parent,\n                                                ForbidDuplicateTypesAndValues,\n                                                associated_type.ty_param.span);\n                             // NB: not IMPORTABLE\n@@ -631,9 +604,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 }\n \n                 name_bindings.define_type(DefTrait(def_id), sp, modifiers);\n-                parent\n+                parent.clone()\n             }\n-            ItemMac(..) => parent\n+            ItemMac(..) => parent.clone()\n         }\n     }\n \n@@ -642,7 +615,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     fn build_reduced_graph_for_variant(&mut self,\n                                        variant: &Variant,\n                                        item_id: DefId,\n-                                       parent: Rc<Module>) {\n+                                       parent: &Rc<Module>) {\n         let name = variant.node.name.name;\n         let is_exported = match variant.node.kind {\n             TupleVariantKind(_) => false,\n@@ -668,7 +641,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n     /// Constructs the reduced graph for one 'view item'. View items consist\n     /// of imports and use directives.\n-    fn build_reduced_graph_for_view_item(&mut self, view_item: &ViewItem, parent: Rc<Module>) {\n+    fn build_reduced_graph_for_view_item(&mut self, view_item: &ViewItem, parent: &Rc<Module>) {\n         match view_item.node {\n             ViewItemUse(ref view_path) => {\n                 // Extract and intern the module part of the path. For\n@@ -715,7 +688,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                         let subclass = SingleImport(binding.name,\n                                                     source_name);\n-                        self.build_import_directive(&*parent,\n+                        self.build_import_directive(&**parent,\n                                                     module_path,\n                                                     subclass,\n                                                     view_path.span,\n@@ -757,7 +730,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                 }\n                             };\n                             self.build_import_directive(\n-                                &*parent,\n+                                &**parent,\n                                 module_path,\n                                 SingleImport(name, name),\n                                 source_item.span,\n@@ -767,7 +740,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         }\n                     }\n                     ViewPathGlob(_, id) => {\n-                        self.build_import_directive(&*parent,\n+                        self.build_import_directive(&**parent,\n                                                     module_path,\n                                                     GlobImport,\n                                                     view_path.span,\n@@ -793,12 +766,12 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     debug!(\"(build reduced graph for item) found extern `{}`\",\n                             self.module_to_string(&*external_module));\n                     self.check_for_conflicts_between_external_crates(\n-                        &*parent,\n+                        &**parent,\n                         name.name,\n                         view_item.span);\n                     parent.external_module_children.borrow_mut()\n                           .insert(name.name, external_module.clone());\n-                    self.build_reduced_graph_for_external_crate(external_module);\n+                    self.build_reduced_graph_for_external_crate(&external_module);\n                 }\n             }\n         }\n@@ -807,7 +780,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     /// Constructs the reduced graph for one foreign item.\n     fn build_reduced_graph_for_foreign_item<F>(&mut self,\n                                                foreign_item: &ForeignItem,\n-                                               parent: Rc<Module>,\n+                                               parent: &Rc<Module>,\n                                                f: F) where\n         F: FnOnce(&mut Resolver),\n     {\n@@ -839,7 +812,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn build_reduced_graph_for_block(&mut self, block: &Block, parent: Rc<Module>) -> Rc<Module> {\n+    fn build_reduced_graph_for_block(&mut self, block: &Block, parent: &Rc<Module>) -> Rc<Module> {\n         if self.block_needs_anonymous_module(block) {\n             let block_id = block.id;\n \n@@ -856,7 +829,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             parent.anonymous_children.borrow_mut().insert(block_id, new_module.clone());\n             new_module\n         } else {\n-            parent\n+            parent.clone()\n         }\n     }\n \n@@ -866,7 +839,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                            child_name_bindings: &NameBindings,\n                            final_ident: &str,\n                            name: Name,\n-                           new_parent: Rc<Module>) {\n+                           new_parent: &Rc<Module>) {\n         debug!(\"(building reduced graph for \\\n                 external crate) building external def, priv {}\",\n                vis);\n@@ -900,7 +873,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 debug!(\"(building reduced graph for \\\n                         external crate) building module \\\n                         {}\", final_ident);\n-                let parent_link = self.get_parent_link(new_parent.clone(), name);\n+                let parent_link = self.get_parent_link(new_parent, name);\n \n                 child_name_bindings.define_module(parent_link,\n                                                   Some(def_id),\n@@ -1019,7 +992,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_def(&mut self,\n-                                                  root: Rc<Module>,\n+                                                  root: &Rc<Module>,\n                                                   def_like: DefLike,\n                                                   name: Name,\n                                                   visibility: Visibility) {\n@@ -1036,7 +1009,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                      child_name,\n                                                      vis| {\n                             self.build_reduced_graph_for_external_crate_def(\n-                                root.clone(),\n+                                root,\n                                 def_like,\n                                 child_name,\n                                 vis)\n@@ -1045,7 +1018,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     _ => {\n                         let child_name_bindings =\n                             self.add_child(name,\n-                                           root.clone(),\n+                                           root,\n                                            OverwriteDuplicates,\n                                            DUMMY_SP);\n \n@@ -1075,7 +1048,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                 let child_name_bindings =\n                                     self.add_child(\n                                         final_name,\n-                                        root.clone(),\n+                                        root,\n                                         OverwriteDuplicates,\n                                         DUMMY_SP);\n \n@@ -1123,7 +1096,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                                     let method_name_bindings =\n                                         self.add_child(name,\n-                                                       new_parent.clone(),\n+                                                       &new_parent,\n                                                        OverwriteDuplicates,\n                                                        DUMMY_SP);\n                                     let def = DefFn(method_info.def_id, false);\n@@ -1153,9 +1126,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     }\n \n     /// Builds the reduced graph rooted at the given external module.\n-    fn populate_external_module(&mut self, module: Rc<Module>) {\n+    fn populate_external_module(&mut self, module: &Rc<Module>) {\n         debug!(\"(populating external module) attempting to populate {}\",\n-               self.module_to_string(&*module));\n+               self.module_to_string(&**module));\n \n         let def_id = match module.def_id.get() {\n             None => {\n@@ -1170,7 +1143,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                     |def_like, child_name, visibility| {\n             debug!(\"(populating external module) ... found ident: {}\",\n                    token::get_name(child_name));\n-            self.build_reduced_graph_for_external_crate_def(module.clone(),\n+            self.build_reduced_graph_for_external_crate_def(module,\n                                                             def_like,\n                                                             child_name,\n                                                             visibility)\n@@ -1182,24 +1155,21 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     /// is built, building it if it is not.\n     fn populate_module_if_necessary(&mut self, module: &Rc<Module>) {\n         if !module.populated.get() {\n-            self.populate_external_module(module.clone())\n+            self.populate_external_module(module)\n         }\n         assert!(module.populated.get())\n     }\n \n     /// Builds the reduced graph rooted at the 'use' directive for an external\n     /// crate.\n-    fn build_reduced_graph_for_external_crate(&mut self, root: Rc<Module>) {\n+    fn build_reduced_graph_for_external_crate(&mut self, root: &Rc<Module>) {\n         csearch::each_top_level_item_of_crate(&self.session.cstore,\n                                               root.def_id\n                                                   .get()\n                                                   .unwrap()\n                                                   .krate,\n                                               |def_like, name, visibility| {\n-            self.build_reduced_graph_for_external_crate_def(root.clone(),\n-                                                            def_like,\n-                                                            name,\n-                                                            visibility)\n+            self.build_reduced_graph_for_external_crate_def(root, def_like, name, visibility)\n         });\n     }\n \n@@ -1268,16 +1238,16 @@ struct BuildReducedGraphVisitor<'a, 'b:'a, 'tcx:'b> {\n \n impl<'a, 'b, 'v, 'tcx> Visitor<'v> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n-        let p = self.builder.build_reduced_graph_for_item(item, self.parent.clone());\n+        let p = self.builder.build_reduced_graph_for_item(item, &self.parent);\n         let old_parent = replace(&mut self.parent, p);\n         visit::walk_item(self, item);\n         self.parent = old_parent;\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n-        let parent = self.parent.clone();\n+        let parent = &self.parent;\n         self.builder.build_reduced_graph_for_foreign_item(foreign_item,\n-                                                          parent.clone(),\n+                                                          parent,\n                                                           |r| {\n             let mut v = BuildReducedGraphVisitor {\n                 builder: GraphBuilder { resolver: r },\n@@ -1288,11 +1258,11 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n     }\n \n     fn visit_view_item(&mut self, view_item: &ViewItem) {\n-        self.builder.build_reduced_graph_for_view_item(view_item, self.parent.clone());\n+        self.builder.build_reduced_graph_for_view_item(view_item, &self.parent);\n     }\n \n     fn visit_block(&mut self, block: &Block) {\n-        let np = self.builder.build_reduced_graph_for_block(block, self.parent.clone());\n+        let np = self.builder.build_reduced_graph_for_block(block, &self.parent);\n         let old_parent = replace(&mut self.parent, np);\n         visit::walk_block(self, block);\n         self.parent = old_parent;"}]}