{"sha": "9750763a70681070a1dd953bb7760e16ef1b30b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NTA3NjNhNzA2ODEwNzBhMWRkOTUzYmI3NzYwZTE2ZWYxYjMwYjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T23:56:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T23:56:52Z"}, "message": "test: Fix compilation of benchmarks for moves-based-on-type. rs=bustage", "tree": {"sha": "9d289f06ae0f57ce6eaef38408936d19d4436074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d289f06ae0f57ce6eaef38408936d19d4436074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9750763a70681070a1dd953bb7760e16ef1b30b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9750763a70681070a1dd953bb7760e16ef1b30b1", "html_url": "https://github.com/rust-lang/rust/commit/9750763a70681070a1dd953bb7760e16ef1b30b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9750763a70681070a1dd953bb7760e16ef1b30b1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40550013886d5da17b0be5e5103606cc8693defc", "url": "https://api.github.com/repos/rust-lang/rust/commits/40550013886d5da17b0be5e5103606cc8693defc", "html_url": "https://github.com/rust-lang/rust/commit/40550013886d5da17b0be5e5103606cc8693defc"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "22fd1be434947fd81c74cb4d46ba3abcc5f5de76", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=9750763a70681070a1dd953bb7760e16ef1b30b1", "patch": "@@ -407,7 +407,7 @@ fn main() {\n                                  vec::len(edges), stop - start));\n \n     let start = time::precise_time_s();\n-    let graph = make_graph(1 << scale, edges);\n+    let graph = make_graph(1 << scale, copy edges);\n     let stop = time::precise_time_s();\n \n     let mut total_edges = 0;"}, {"sha": "b849ceb080cf01e7b274e1a0c2a790809b44db6f", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=9750763a70681070a1dd953bb7760e16ef1b30b1", "patch": "@@ -36,7 +36,7 @@ fn select_random(r: u32, genelist: ~[aminoacids]) -> char {\n             } else { return bisect(v, mid, hi, target); }\n         } else { return v[hi].ch; }\n     }\n-    return bisect(genelist, 0u, vec::len::<aminoacids>(genelist) - 1u, r);\n+    return bisect(copy genelist, 0, vec::len::<aminoacids>(genelist) - 1, r);\n }\n \n fn make_random_fasta(wr: io::Writer, id: ~str, desc: ~str, genelist: ~[aminoacids], n: int) {"}, {"sha": "2e8dda511d0592c5aade541b053c16d22071b80d", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=9750763a70681070a1dd953bb7760e16ef1b30b1", "patch": "@@ -25,7 +25,7 @@ fn main() {\n     };\n     let n = int::from_str(args[1]).get();\n     let bodies: ~[Body::props] = NBodySystem::make();\n-    io::println(fmt!(\"%f\", NBodySystem::energy(bodies)));\n+    io::println(fmt!(\"%f\", NBodySystem::energy(copy bodies)));\n     let mut i = 0;\n     while i < n { NBodySystem::advance(bodies, 0.01); i += 1; }\n     io::println(fmt!(\"%f\", NBodySystem::energy(bodies)));"}, {"sha": "7a48a3aed7c0b3b1e1b11f23027c6ef75033784a", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=9750763a70681070a1dd953bb7760e16ef1b30b1", "patch": "@@ -90,7 +90,7 @@ fn main() {\n         args\n     };\n \n-    let opts = parse_opts(args);\n+    let opts = parse_opts(copy args);\n \n     if opts.stress {\n         stress(2);"}, {"sha": "58d996612f8db9ffce13ab6db611109e5a85ebfb", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=9750763a70681070a1dd953bb7760e16ef1b30b1", "patch": "@@ -6,7 +6,7 @@ fn eval_A(i: uint, j: uint) -> float {\n     1.0/(((i+j)*(i+j+1u)/2u+i+1u) as float)\n }\n \n-fn eval_A_times_u(u: ~[const float], Au: ~[mut float]) {\n+fn eval_A_times_u(u: &[const float], Au: &[mut float]) {\n     let N = vec::len(u);\n     let mut i = 0u;\n     while i < N {\n@@ -20,7 +20,7 @@ fn eval_A_times_u(u: ~[const float], Au: ~[mut float]) {\n     }\n }\n \n-fn eval_At_times_u(u: ~[const float], Au: ~[mut float]) {\n+fn eval_At_times_u(u: &[const float], Au: &[mut float]) {\n     let N = vec::len(u);\n     let mut i = 0u;\n     while i < N {\n@@ -34,7 +34,7 @@ fn eval_At_times_u(u: ~[const float], Au: ~[mut float]) {\n     }\n }\n \n-fn eval_AtA_times_u(u: ~[const float], AtAu: ~[mut float]) {\n+fn eval_AtA_times_u(u: &[const float], AtAu: &[mut float]) {\n     let v = vec::to_mut(vec::from_elem(vec::len(u), 0.0));\n     eval_A_times_u(u, v);\n     eval_At_times_u(v, AtAu);"}, {"sha": "6811250f6a1614e992188ae45f84b0013f6138dd", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=9750763a70681070a1dd953bb7760e16ef1b30b1", "patch": "@@ -56,7 +56,7 @@ fn solve_grid(g: grid_t) {\n             }\n \n             // drop colors already in use in neighbourhood\n-            drop_colors(g, avail, row, col);\n+            drop_colors(copy g, copy avail, row, col);\n \n             // find first remaining color that is available\n             for uint::range(1u, 10u) |i| {\n@@ -77,7 +77,7 @@ fn solve_grid(g: grid_t) {\n             if color != 0u8 { colors.set(color as uint, false); }\n         }\n \n-        let it = |a,b| drop_color(g, avail, a, b);\n+        let it = |a,b| drop_color(copy g, copy avail, a, b);\n \n         for u8::range(0u8, 9u8) |idx| {\n             it(idx, col); /* check same column fields */\n@@ -105,7 +105,7 @@ fn solve_grid(g: grid_t) {\n     while (ptr < end) {\n         let (row, col) = work[ptr];\n         // is there another color to try?\n-        if next_color(*g, row, col, (*g)[row][col] + (1 as u8)) {\n+        if next_color(copy *g, row, col, (*g)[row][col] + (1 as u8)) {\n             //  yes: advance work list\n             ptr = ptr + 1u;\n         } else {\n@@ -163,7 +163,7 @@ fn main() {\n     } else {\n         read_grid(io::stdin())\n     };\n-    solve_grid(grid);\n+    solve_grid(copy grid);\n     write_grid(io::stdout(), grid);\n }\n "}, {"sha": "2c8b2352408af0093a89a5615a2425fbaca42d8c", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=9750763a70681070a1dd953bb7760e16ef1b30b1", "patch": "@@ -75,7 +75,7 @@ fn recurse_or_fail(depth: int, st: Option<st>) {\n           }\n           Some(st) => {\n             let fn_box = st.fn_box;\n-            let fn_unique = st.fn_unique;\n+            let fn_unique = copy st.fn_unique;\n \n             st_({\n                 box: @Cons((), st.box),"}, {"sha": "e5d28dc382da7dad73783d4a7098b6c94baa2376", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750763a70681070a1dd953bb7760e16ef1b30b1/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=9750763a70681070a1dd953bb7760e16ef1b30b1", "patch": "@@ -270,8 +270,10 @@ mod map_reduce {\n                     // log(error, \"creating new reducer for \" + k);\n                     let p = Port();\n                     let ch = Chan(&p);\n-                    let r = reduce, kk = k;\n-                    tasks.push(spawn_joinable(|move r| reduce_task(~r, kk, ch) ));\n+                    let r = copy reduce, kk = k;\n+                    tasks.push(spawn_joinable(|move r|\n+                        reduce_task(~copy r, kk, ch)\n+                    ));\n                     c = recv(p);\n                     reducers.insert(k, c);\n                   }"}]}