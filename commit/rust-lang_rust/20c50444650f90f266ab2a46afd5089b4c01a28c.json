{"sha": "20c50444650f90f266ab2a46afd5089b4c01a28c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYzUwNDQ0NjUwZjkwZjI2NmFiMmE0NmFmZDUwODliNGMwMWEyOGM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-08-10T19:27:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-08-10T21:08:04Z"}, "message": "Introduce `rustc_lexer::is_ident` and use it in couple of places", "tree": {"sha": "bcf475fbf1a72a63140c117e0410b68961ee6c65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcf475fbf1a72a63140c117e0410b68961ee6c65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20c50444650f90f266ab2a46afd5089b4c01a28c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20c50444650f90f266ab2a46afd5089b4c01a28c", "html_url": "https://github.com/rust-lang/rust/commit/20c50444650f90f266ab2a46afd5089b4c01a28c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20c50444650f90f266ab2a46afd5089b4c01a28c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "html_url": "https://github.com/rust-lang/rust/commit/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "0b545a6347be64f65455f70c107747f45cb28daa", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20c50444650f90f266ab2a46afd5089b4c01a28c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/20c50444650f90f266ab2a46afd5089b4c01a28c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=20c50444650f90f266ab2a46afd5089b4c01a28c", "patch": "@@ -3257,6 +3257,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n+ \"rustc_lexer\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_session\","}, {"sha": "35bdf747f08d7d3e2be12f99fec0c32a6bdec0bc", "filename": "src/librustc_attr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20c50444650f90f266ab2a46afd5089b4c01a28c/src%2Flibrustc_attr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/20c50444650f90f266ab2a46afd5089b4c01a28c/src%2Flibrustc_attr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2FCargo.toml?ref=20c50444650f90f266ab2a46afd5089b4c01a28c", "patch": "@@ -16,6 +16,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n+rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "5f131fae385b08c7d5b3a2c7186f6c5de608d4da", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20c50444650f90f266ab2a46afd5089b4c01a28c/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c50444650f90f266ab2a46afd5089b4c01a28c/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=20c50444650f90f266ab2a46afd5089b4c01a28c", "patch": "@@ -20,6 +20,7 @@ enum AttrError {\n     MultipleItem(String),\n     UnknownMetaItem(String, &'static [&'static str]),\n     MissingSince,\n+    NonIdentFeature,\n     MissingFeature,\n     MultipleStabilityLevels,\n     UnsupportedLiteral(&'static str, /* is_bytestr */ bool),\n@@ -40,6 +41,9 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n         AttrError::MissingSince => {\n             struct_span_err!(diag, span, E0542, \"missing 'since'\").emit();\n         }\n+        AttrError::NonIdentFeature => {\n+            struct_span_err!(diag, span, E0546, \"'feature' is not an identifier\").emit();\n+        }\n         AttrError::MissingFeature => {\n             struct_span_err!(diag, span, E0546, \"missing 'feature'\").emit();\n         }\n@@ -344,6 +348,14 @@ where\n \n                     match (feature, reason, issue) {\n                         (Some(feature), reason, Some(_)) => {\n+                            if !rustc_lexer::is_ident(&feature.as_str()) {\n+                                handle_errors(\n+                                    &sess.parse_sess,\n+                                    attr.span,\n+                                    AttrError::NonIdentFeature,\n+                                );\n+                                continue;\n+                            }\n                             let level = Unstable { reason, issue: issue_num, is_soft };\n                             if sym::unstable == meta_name {\n                                 stab = Some(Stability { level, feature });"}, {"sha": "83a650443bcba59c6cffc07f204d5109fbad7459", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20c50444650f90f266ab2a46afd5089b4c01a28c/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c50444650f90f266ab2a46afd5089b4c01a28c/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=20c50444650f90f266ab2a46afd5089b4c01a28c", "patch": "@@ -319,18 +319,10 @@ pub struct Ident {\n }\n \n impl Ident {\n-    fn is_valid(string: &str) -> bool {\n-        let mut chars = string.chars();\n-        if let Some(start) = chars.next() {\n-            rustc_lexer::is_id_start(start) && chars.all(rustc_lexer::is_id_continue)\n-        } else {\n-            false\n-        }\n-    }\n     fn new(sess: &ParseSess, sym: Symbol, is_raw: bool, span: Span) -> Ident {\n         let sym = nfc_normalize(&sym.as_str());\n         let string = sym.as_str();\n-        if !Self::is_valid(&string) {\n+        if !rustc_lexer::is_ident(&string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n         }\n         if is_raw && !sym.can_be_raw() {"}, {"sha": "7949a232b9b35a8c535c20ae8e05f8ff5c7eed9f", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20c50444650f90f266ab2a46afd5089b4c01a28c/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c50444650f90f266ab2a46afd5089b4c01a28c/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=20c50444650f90f266ab2a46afd5089b4c01a28c", "patch": "@@ -274,6 +274,16 @@ pub fn is_id_continue(c: char) -> bool {\n         || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n }\n \n+/// The passed string is lexically an identifier.\n+pub fn is_ident(string: &str) -> bool {\n+    let mut chars = string.chars();\n+    if let Some(start) = chars.next() {\n+        is_id_start(start) && chars.all(is_id_continue)\n+    } else {\n+        false\n+    }\n+}\n+\n impl Cursor<'_> {\n     /// Parses a token from the input string.\n     fn advance_token(&mut self) -> Token {"}]}