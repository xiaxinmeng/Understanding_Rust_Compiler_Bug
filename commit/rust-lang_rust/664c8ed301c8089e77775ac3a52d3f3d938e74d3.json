{"sha": "664c8ed301c8089e77775ac3a52d3f3d938e74d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NGM4ZWQzMDFjODA4OWU3Nzc3NWFjM2E1MmQzZjNkOTM4ZTc0ZDM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-12T16:12:49Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-12T16:12:49Z"}, "message": "Always use the stronger outlives version for opaque types", "tree": {"sha": "1fd764715b3367327247a8321613a10786e68547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fd764715b3367327247a8321613a10786e68547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664c8ed301c8089e77775ac3a52d3f3d938e74d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664c8ed301c8089e77775ac3a52d3f3d938e74d3", "html_url": "https://github.com/rust-lang/rust/commit/664c8ed301c8089e77775ac3a52d3f3d938e74d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664c8ed301c8089e77775ac3a52d3f3d938e74d3/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e356ebdfa42b754c1497f1c58caacbe2f25d03", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e356ebdfa42b754c1497f1c58caacbe2f25d03", "html_url": "https://github.com/rust-lang/rust/commit/16e356ebdfa42b754c1497f1c58caacbe2f25d03"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "6bf23ab864abddc9bb305d2736f22b2b9773887f", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/664c8ed301c8089e77775ac3a52d3f3d938e74d3/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c8ed301c8089e77775ac3a52d3f3d938e74d3/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=664c8ed301c8089e77775ac3a52d3f3d938e74d3", "patch": "@@ -284,18 +284,40 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"constrain_opaque_type: def_id={:?}\", def_id);\n         debug!(\"constrain_opaque_type: opaque_defn={:#?}\", opaque_defn);\n \n+        let tcx = self.tcx;\n+\n         let concrete_ty = self.resolve_type_vars_if_possible(&opaque_defn.concrete_ty);\n \n         debug!(\"constrain_opaque_type: concrete_ty={:?}\", concrete_ty);\n \n-        let abstract_type_generics = self.tcx.generics_of(def_id);\n+        let abstract_type_generics = tcx.generics_of(def_id);\n \n-        let span = self.tcx.def_span(def_id);\n+        let span = tcx.def_span(def_id);\n \n-        // If there are required region bounds, we can just skip\n-        // ahead.  There will already be a registered region\n-        // obligation related `concrete_ty` to those regions.\n+        // If there are required region bounds, we can use them.\n         if opaque_defn.has_required_region_bounds {\n+            let predicates_of = tcx.predicates_of(def_id);\n+            debug!(\n+                \"constrain_opaque_type: predicates: {:#?}\",\n+                predicates_of,\n+            );\n+            let bounds = predicates_of.instantiate(tcx, opaque_defn.substs);\n+            debug!(\"constrain_opaque_type: bounds={:#?}\", bounds);\n+            let opaque_type = tcx.mk_opaque(def_id, opaque_defn.substs);\n+\n+            let required_region_bounds = tcx.required_region_bounds(\n+                opaque_type,\n+                bounds.predicates.clone(),\n+            );\n+            debug_assert!(!required_region_bounds.is_empty());\n+\n+            for region in required_region_bounds {\n+                concrete_ty.visit_with(&mut OpaqueTypeOutlivesVisitor {\n+                    infcx: self,\n+                    least_region: region,\n+                    span,\n+                });\n+            }\n             return;\n         }\n \n@@ -371,7 +393,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        let least_region = least_region.unwrap_or(self.tcx.lifetimes.re_static);\n+        let least_region = least_region.unwrap_or(tcx.lifetimes.re_static);\n         debug!(\"constrain_opaque_types: least_region={:?}\", least_region);\n \n         concrete_ty.visit_with(&mut OpaqueTypeOutlivesVisitor {"}, {"sha": "90a7519074b53bebbda8c04bc9f7d3197aa34af6", "filename": "src/test/ui/impl-trait/can-return-unconstrained-closure.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664c8ed301c8089e77775ac3a52d3f3d938e74d3/src%2Ftest%2Fui%2Fimpl-trait%2Fcan-return-unconstrained-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c8ed301c8089e77775ac3a52d3f3d938e74d3/src%2Ftest%2Fui%2Fimpl-trait%2Fcan-return-unconstrained-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fcan-return-unconstrained-closure.rs?ref=664c8ed301c8089e77775ac3a52d3f3d938e74d3", "patch": "@@ -16,4 +16,8 @@ fn make_identity() -> impl Sized {\n     |x: &'static i32| x\n }\n \n+fn make_identity_static() -> impl Sized + 'static {\n+    |x: &'static i32| x\n+}\n+\n fn main() {}"}, {"sha": "11f1a392239dcdeb491afbe0b5615ad47e49398e", "filename": "src/test/ui/impl-trait/issue-57464-unexpected-regions.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/664c8ed301c8089e77775ac3a52d3f3d938e74d3/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57464-unexpected-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c8ed301c8089e77775ac3a52d3f3d938e74d3/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57464-unexpected-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57464-unexpected-regions.rs?ref=664c8ed301c8089e77775ac3a52d3f3d938e74d3", "patch": "@@ -17,6 +17,13 @@ fn wrapped_closure() -> impl Sized {\n     A(f)\n }\n \n+fn wrapped_closure_with_bound() -> impl Sized + 'static {\n+    let f = |x| x;\n+    f(&0);\n+    A(f)\n+}\n+\n fn main() {\n     let x: Box<dyn Send> = Box::new(wrapped_closure());\n+    let y: Box<dyn Send> = Box::new(wrapped_closure_with_bound());\n }"}]}