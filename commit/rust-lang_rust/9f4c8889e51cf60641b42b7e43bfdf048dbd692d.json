{"sha": "9f4c8889e51cf60641b42b7e43bfdf048dbd692d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNGM4ODg5ZTUxY2Y2MDY0MWI0MmI3ZTQzYmZkZjA0OGRiZDY5MmQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-22T23:16:00Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-23T22:17:59Z"}, "message": "Fully qualify the path to DepKind.\n\nThis is needed since `middle::cstore` defines another type named\n`DepKind`, and we should not rely on shadowing to get the right one.", "tree": {"sha": "17fa73d93fe4339133ec9611fcd4155394f54877", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17fa73d93fe4339133ec9611fcd4155394f54877"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f4c8889e51cf60641b42b7e43bfdf048dbd692d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4c8889e51cf60641b42b7e43bfdf048dbd692d", "html_url": "https://github.com/rust-lang/rust/commit/9f4c8889e51cf60641b42b7e43bfdf048dbd692d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f4c8889e51cf60641b42b7e43bfdf048dbd692d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f7b897bad6e5ff4a011cccc0326bdc886e9e73", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73", "html_url": "https://github.com/rust-lang/rust/commit/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "b45b3b3f539eafeae96a7936036c8c8151eb90ee", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f4c8889e51cf60641b42b7e43bfdf048dbd692d/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4c8889e51cf60641b42b7e43bfdf048dbd692d/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=9f4c8889e51cf60641b42b7e43bfdf048dbd692d", "patch": "@@ -150,8 +150,6 @@ rustc_query_append! { [define_queries!][<'tcx>] }\n /// add it to the \"We don't have enough information to reconstruct...\" group in\n /// the match below.\n pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool {\n-    use crate::dep_graph::DepKind;\n-\n     // We must avoid ever having to call `force_from_dep_node()` for a\n     // `DepNode::codegen_unit`:\n     // Since we cannot reconstruct the query key of a `DepNode::codegen_unit`, we\n@@ -166,7 +164,7 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n     // hit the cache instead of having to go through `force_from_dep_node`.\n     // This assertion makes sure, we actually keep applying the solution above.\n     debug_assert!(\n-        dep_node.kind != DepKind::codegen_unit,\n+        dep_node.kind != crate::dep_graph::DepKind::codegen_unit,\n         \"calling force_from_dep_node() on DepKind::codegen_unit\"\n     );\n \n@@ -177,14 +175,14 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n     rustc_dep_node_force!([dep_node, tcx]\n         // These are inputs that are expected to be pre-allocated and that\n         // should therefore always be red or green already.\n-        DepKind::CrateMetadata |\n+        crate::dep_graph::DepKind::CrateMetadata |\n \n         // These are anonymous nodes.\n-        DepKind::TraitSelect |\n+        crate::dep_graph::DepKind::TraitSelect |\n \n         // We don't have enough information to reconstruct the query key of\n         // these.\n-        DepKind::CompileCodegenUnit => {\n+        crate::dep_graph::DepKind::CompileCodegenUnit => {\n             bug!(\"force_from_dep_node: encountered {:?}\", dep_node)\n         }\n     );\n@@ -193,7 +191,5 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n }\n \n pub(crate) fn try_load_from_on_disk_cache<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) {\n-    use crate::dep_graph::DepKind;\n-\n     rustc_dep_node_try_load_from_on_disk_cache!(dep_node, tcx)\n }"}, {"sha": "e7005f2f5ba775578e5fcd5ffa3c69f0d77246e9", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f4c8889e51cf60641b42b7e43bfdf048dbd692d/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4c8889e51cf60641b42b7e43bfdf048dbd692d/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=9f4c8889e51cf60641b42b7e43bfdf048dbd692d", "patch": "@@ -429,7 +429,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 });\n \n                 try_load_from_on_disk_cache_stream.extend(quote! {\n-                    DepKind::#name => {\n+                    ::rustc::dep_graph::DepKind::#name => {\n                         if <#arg as DepNodeParams<TyCtxt<'_>>>::CAN_RECONSTRUCT_QUERY_KEY {\n                             debug_assert!($tcx.dep_graph\n                                             .node_color($dep_node)\n@@ -486,7 +486,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n \n             // Add a match arm to force the query given the dep node\n             dep_node_force_stream.extend(quote! {\n-                DepKind::#name => {\n+                ::rustc::dep_graph::DepKind::#name => {\n                     if <#arg as DepNodeParams<TyCtxt<'_>>>::CAN_RECONSTRUCT_QUERY_KEY {\n                         if let Some(key) = <#arg as DepNodeParams<TyCtxt<'_>>>::recover($tcx, $dep_node) {\n                             $tcx.force_query::<crate::ty::query::queries::#name<'_>>(\n@@ -509,7 +509,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     }\n \n     dep_node_force_stream.extend(quote! {\n-        DepKind::Null => {\n+        ::rustc::dep_graph::DepKind::Null => {\n             bug!(\"Cannot force dep node: {:?}\", $dep_node)\n         }\n     });"}]}