{"sha": "710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e", "node_id": "C_kwDOAAsO6NoAKDcxMGJkMjNkZjFkNGI5ZTg3YTBlYTE1YmI1MWNhOWRlOGM0ZWVhNGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-15T18:11:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-15T18:11:32Z"}, "message": "Rollup merge of #100031 - GoldsteinE:try-removing-the-field, r=michaelwoerister\n\nimprove \"try ignoring the field\" diagnostic\n\nCloses #95795", "tree": {"sha": "78165c905e45c7f4ae5f0656bd8d84095a7bcf9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78165c905e45c7f4ae5f0656bd8d84095a7bcf9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+oxUCRBK7hj4Ov3rIwAANRgIAFnU1vTwjXOPYpKmHhVVKYxT\n30QGM5HSjV9jgd2qu8lG7CqOoKB7BJV4B5QechbMeIHnTgd5ahIe9k3S3At478+k\nPUNx0mWWVzhncyA0qkyX4ALOso3wVBKJIvsfGePTi95m07LCIBgJSkVo3hrIce+J\nYLDtprA261rfCuWGgtQ+pi4bTcQOwokM7Sm5c7i5lxLdE5+R6VIn1+w95UvTLCiw\n/d/upGrKPeZxn8xb7WkXMSM+DopuhWtq/VNtQrF6axaXrU4XtVEC4N3yNzV34uFz\njRAy+6xVaeo1XYKes36KoKAUYgroDZnXkMcD178XOEdSiVs3bCDDj4R3lJ41YnI=\n=8U/d\n-----END PGP SIGNATURE-----\n", "payload": "tree 78165c905e45c7f4ae5f0656bd8d84095a7bcf9d\nparent 9b4ea391a132ec5f5de40079597ab7ff2fd691ad\nparent 3e0df4b5d743a5247a8d3174a3a4a55f635847a6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660587092 +0200\ncommitter GitHub <noreply@github.com> 1660587092 +0200\n\nRollup merge of #100031 - GoldsteinE:try-removing-the-field, r=michaelwoerister\n\nimprove \"try ignoring the field\" diagnostic\n\nCloses #95795\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e", "html_url": "https://github.com/rust-lang/rust/commit/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4ea391a132ec5f5de40079597ab7ff2fd691ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4ea391a132ec5f5de40079597ab7ff2fd691ad", "html_url": "https://github.com/rust-lang/rust/commit/9b4ea391a132ec5f5de40079597ab7ff2fd691ad"}, {"sha": "3e0df4b5d743a5247a8d3174a3a4a55f635847a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0df4b5d743a5247a8d3174a3a4a55f635847a6", "html_url": "https://github.com/rust-lang/rust/commit/3e0df4b5d743a5247a8d3174a3a4a55f635847a6"}], "stats": {"total": 92, "additions": 89, "deletions": 3}, "files": [{"sha": "7124b84bfef3893414cc39da5c93d41da1134446", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e", "patch": "@@ -98,7 +98,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, RootVariableMinCaptureList, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span};\n \n use std::collections::VecDeque;\n use std::io;\n@@ -1549,23 +1549,27 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                 .or_insert_with(|| (ln, var, vec![id_and_sp]));\n         });\n \n+        let can_remove = matches!(&pat.kind, hir::PatKind::Struct(_, _, true));\n+\n         for (_, (ln, var, hir_ids_and_spans)) in vars {\n             if self.used_on_entry(ln, var) {\n                 let id = hir_ids_and_spans[0].0;\n                 let spans =\n                     hir_ids_and_spans.into_iter().map(|(_, _, ident_span)| ident_span).collect();\n                 on_used_on_entry(spans, id, ln, var);\n             } else {\n-                self.report_unused(hir_ids_and_spans, ln, var);\n+                self.report_unused(hir_ids_and_spans, ln, var, can_remove);\n             }\n         }\n     }\n \n+    #[tracing::instrument(skip(self), level = \"INFO\")]\n     fn report_unused(\n         &self,\n         hir_ids_and_spans: Vec<(HirId, Span, Span)>,\n         ln: LiveNode,\n         var: Variable,\n+        can_remove: bool,\n     ) {\n         let first_hir_id = hir_ids_and_spans[0].0;\n \n@@ -1590,6 +1594,32 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                             .emit();\n                     },\n                 )\n+            } else if can_remove {\n+                self.ir.tcx.struct_span_lint_hir(\n+                    lint::builtin::UNUSED_VARIABLES,\n+                    first_hir_id,\n+                    hir_ids_and_spans.iter().map(|(_, pat_span, _)| *pat_span).collect::<Vec<_>>(),\n+                    |lint| {\n+                        let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n+                        err.multipart_suggestion(\n+                            \"try removing the field\",\n+                            hir_ids_and_spans\n+                                .iter()\n+                                .map(|(_, pat_span, _)| {\n+                                    let span = self\n+                                        .ir\n+                                        .tcx\n+                                        .sess\n+                                        .source_map()\n+                                        .span_extend_to_next_char(*pat_span, ',', true);\n+                                    (span.with_hi(BytePos(span.hi().0 + 1)), String::new())\n+                                })\n+                                .collect(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.emit();\n+                    },\n+                );\n             } else {\n                 let (shorthands, non_shorthands): (Vec<_>, Vec<_>) =\n                     hir_ids_and_spans.iter().copied().partition(|(hir_id, _, ident_span)| {"}, {"sha": "ad9f5ba85a1912d23d50aa413de0d3e8bdcf8f2c", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e", "patch": "@@ -722,7 +722,7 @@ impl SourceMap {\n         })\n     }\n \n-    /// Extends the given `Span` to just after the next occurrence of `c`.\n+    /// Extends the given `Span` to just before the next occurrence of `c`.\n     pub fn span_extend_to_next_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(next_source) = self.span_to_next_source(sp) {\n             let next_source = next_source.split(c).next().unwrap_or(\"\");"}, {"sha": "948aa2b94d9656dffa72ed6b022038bc93743269", "filename": "src/test/ui/suggestions/dont-try-removing-the-field.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-try-removing-the-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-try-removing-the-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-try-removing-the-field.rs?ref=710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![allow(dead_code)]\n+\n+struct Foo {\n+    foo: i32,\n+    bar: i32,\n+    baz: (),\n+}\n+\n+fn use_foo(x: Foo) -> (i32, i32) {\n+    let Foo { foo, bar, baz } = x; //~ WARNING unused variable: `baz`\n+                                   //~| help: try ignoring the field\n+    return (foo, bar);\n+}\n+\n+fn main() {}"}, {"sha": "263171a4ac456d13d06b8e589c4347efebccc90e", "filename": "src/test/ui/suggestions/dont-try-removing-the-field.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-try-removing-the-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-try-removing-the-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-try-removing-the-field.stderr?ref=710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e", "patch": "@@ -0,0 +1,10 @@\n+warning: unused variable: `baz`\n+  --> $DIR/dont-try-removing-the-field.rs:12:25\n+   |\n+LL |     let Foo { foo, bar, baz } = x;\n+   |                         ^^^ help: try ignoring the field: `baz: _`\n+   |\n+   = note: `#[warn(unused_variables)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "9d0573ca2554d536b610bcb5b57e84fc43684e45", "filename": "src/test/ui/suggestions/try-removing-the-field.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/src%2Ftest%2Fui%2Fsuggestions%2Ftry-removing-the-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/src%2Ftest%2Fui%2Fsuggestions%2Ftry-removing-the-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-removing-the-field.rs?ref=710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![allow(dead_code)]\n+\n+struct Foo {\n+    foo: i32,\n+    bar: (),\n+    baz: (),\n+}\n+\n+fn use_foo(x: Foo) -> i32 {\n+    let Foo { foo, bar, .. } = x; //~ WARNING unused variable: `bar`\n+                                  //~| help: try removing the field\n+    return foo;\n+}\n+\n+fn main() {}"}, {"sha": "448a2c3d2ec27a8be9663a575f51ded43a2cf9b4", "filename": "src/test/ui/suggestions/try-removing-the-field.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/src%2Ftest%2Fui%2Fsuggestions%2Ftry-removing-the-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e/src%2Ftest%2Fui%2Fsuggestions%2Ftry-removing-the-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-removing-the-field.stderr?ref=710bd23df1d4b9e87a0ea15bb51ca9de8c4eea4e", "patch": "@@ -0,0 +1,12 @@\n+warning: unused variable: `bar`\n+  --> $DIR/try-removing-the-field.rs:12:20\n+   |\n+LL |     let Foo { foo, bar, .. } = x;\n+   |                    ^^^-\n+   |                    |\n+   |                    help: try removing the field\n+   |\n+   = note: `#[warn(unused_variables)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}