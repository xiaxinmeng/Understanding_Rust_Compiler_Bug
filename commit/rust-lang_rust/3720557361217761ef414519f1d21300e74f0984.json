{"sha": "3720557361217761ef414519f1d21300e74f0984", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MjA1NTczNjEyMTc3NjFlZjQxNDUxOWYxZDIxMzAwZTc0ZjA5ODQ=", "commit": {"author": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-08-27T21:25:31Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-08-31T07:46:57Z"}, "message": "Implement backwards compatibility for tool_lints", "tree": {"sha": "2183e7bf7870be3d74e7e4c7212a3dcdff9f22c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2183e7bf7870be3d74e7e4c7212a3dcdff9f22c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3720557361217761ef414519f1d21300e74f0984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3720557361217761ef414519f1d21300e74f0984", "html_url": "https://github.com/rust-lang/rust/commit/3720557361217761ef414519f1d21300e74f0984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3720557361217761ef414519f1d21300e74f0984/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce173c12e6416b1afa4aa460076d7c807fdcdccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce173c12e6416b1afa4aa460076d7c807fdcdccf", "html_url": "https://github.com/rust-lang/rust/commit/ce173c12e6416b1afa4aa460076d7c807fdcdccf"}], "stats": {"total": 127, "additions": 103, "deletions": 24}, "files": [{"sha": "0d99aa2f7dd9888124d07473a71c41a59dba892d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3720557361217761ef414519f1d21300e74f0984/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720557361217761ef414519f1d21300e74f0984/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=3720557361217761ef414519f1d21300e74f0984", "patch": "@@ -139,7 +139,7 @@ pub enum CheckLintNameResult<'a> {\n     /// compiled with the tool and therefore the lint was never\n     /// added to the `LintStore`. Otherwise the `LintId` will be\n     /// returned as if it where a rustc lint.\n-    Tool(Option<&'a [LintId]>),\n+    Tool(Result<&'a [LintId], (Option<&'a [LintId]>, String)>),\n }\n \n impl LintStore {\n@@ -353,34 +353,79 @@ impl LintStore {\n         } else {\n             lint_name.to_string()\n         };\n+        // If the lint was scoped with `tool::` check if the tool lint exists\n         if let Some(_) = tool_name {\n             match self.by_name.get(&complete_name) {\n                 None => match self.lint_groups.get(&*complete_name) {\n-                    None => return CheckLintNameResult::Tool(None),\n-                    Some(ids) => return CheckLintNameResult::Tool(Some(&ids.0)),\n+                    None => return CheckLintNameResult::Tool(Err((None, String::new()))),\n+                    Some(ids) => return CheckLintNameResult::Tool(Ok(&ids.0)),\n                 },\n-                Some(&Id(ref id)) => return CheckLintNameResult::Tool(Some(slice::from_ref(id))),\n+                Some(&Id(ref id)) => return CheckLintNameResult::Tool(Ok(slice::from_ref(id))),\n                 // If the lint was registered as removed or renamed by the lint tool, we don't need\n                 // to treat tool_lints and rustc lints different and can use the code below.\n                 _ => {}\n             }\n         }\n         match self.by_name.get(&complete_name) {\n             Some(&Renamed(ref new_name, _)) => CheckLintNameResult::Warning(\n-                format!(\"lint `{}` has been renamed to `{}`\", lint_name, new_name),\n+                format!(\n+                    \"lint `{}` has been renamed to `{}`\",\n+                    complete_name, new_name\n+                ),\n                 Some(new_name.to_owned()),\n             ),\n             Some(&Removed(ref reason)) => CheckLintNameResult::Warning(\n-                format!(\"lint `{}` has been removed: `{}`\", lint_name, reason),\n+                format!(\"lint `{}` has been removed: `{}`\", complete_name, reason),\n                 None,\n             ),\n             None => match self.lint_groups.get(&*complete_name) {\n-                None => CheckLintNameResult::NoLint,\n-                Some(ids) => CheckLintNameResult::Ok(&ids.0),\n+                // If neither the lint, nor the lint group exists check if there is a `clippy::`\n+                // variant of this lint\n+                None => self.check_tool_name_for_backwards_compat(&complete_name, \"clippy\"),\n+                Some(ids) => {\n+                    // Check if the lint group name is deprecated\n+                    if let Some(new_name) = ids.2 {\n+                        let lint_ids = self.lint_groups.get(new_name).unwrap();\n+                        return CheckLintNameResult::Tool(Err((\n+                            Some(&lint_ids.0),\n+                            new_name.to_string(),\n+                        )));\n+                    }\n+                    CheckLintNameResult::Ok(&ids.0)\n+                }\n             },\n             Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n         }\n     }\n+\n+    fn check_tool_name_for_backwards_compat(\n+        &self,\n+        lint_name: &str,\n+        tool_name: &str,\n+    ) -> CheckLintNameResult {\n+        let complete_name = format!(\"{}::{}\", tool_name, lint_name);\n+        match self.by_name.get(&complete_name) {\n+            None => match self.lint_groups.get(&*complete_name) {\n+                // Now we are sure, that this lint exists nowhere\n+                None => CheckLintNameResult::NoLint,\n+                Some(ids) => {\n+                    // Reaching this would be weird, but lets cover this case anyway\n+                    if let Some(new_name) = ids.2 {\n+                        let lint_ids = self.lint_groups.get(new_name).unwrap();\n+                        return CheckLintNameResult::Tool(Err((\n+                            Some(&lint_ids.0),\n+                            new_name.to_string(),\n+                        )));\n+                    }\n+                    CheckLintNameResult::Tool(Ok(&ids.0))\n+                }\n+            },\n+            Some(&Id(ref id)) => {\n+                CheckLintNameResult::Tool(Err((Some(slice::from_ref(id)), complete_name)))\n+            }\n+            _ => CheckLintNameResult::NoLint,\n+        }\n+    }\n }\n \n /// Context for lint checking after type checking."}, {"sha": "36c28a6227338a0e0c08bb9ebd7bbb68fda4f0c4", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3720557361217761ef414519f1d21300e74f0984/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720557361217761ef414519f1d21300e74f0984/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=3720557361217761ef414519f1d21300e74f0984", "patch": "@@ -231,12 +231,13 @@ impl<'a> LintLevelsBuilder<'a> {\n                     let gate_feature = !self.sess.features_untracked().tool_lints;\n                     let known_tool = attr::is_known_lint_tool(lint_tool);\n                     if gate_feature {\n-                        feature_gate::emit_feature_err(&sess.parse_sess,\n-                                                       \"tool_lints\",\n-                                                       word.span,\n-                                                       feature_gate::GateIssue::Language,\n-                                                       &format!(\"scoped lint `{}` is experimental\",\n-                                                                word.ident));\n+                        feature_gate::emit_feature_err(\n+                            &sess.parse_sess,\n+                            \"tool_lints\",\n+                            word.span,\n+                            feature_gate::GateIssue::Language,\n+                            &format!(\"scoped lint `{}` is experimental\", word.ident),\n+                        );\n                     }\n                     if !known_tool {\n                         span_err!(\n@@ -249,7 +250,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                     }\n \n                     if gate_feature || !known_tool {\n-                        continue\n+                        continue;\n                     }\n \n                     Some(lint_tool.as_str())\n@@ -266,17 +267,50 @@ impl<'a> LintLevelsBuilder<'a> {\n                     }\n \n                     CheckLintNameResult::Tool(result) => {\n-                        if let Some(ids) = result {\n-                            let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n-                            let src = LintSource::Node(Symbol::intern(complete_name), li.span);\n-                            for id in ids {\n-                                specs.insert(*id, (level, src));\n+                        match result {\n+                            Ok(ids) => {\n+                                let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n+                                let src = LintSource::Node(Symbol::intern(complete_name), li.span);\n+                                for id in ids {\n+                                    specs.insert(*id, (level, src));\n+                                }\n+                            }\n+                            Err((Some(ids), new_lint_name)) => {\n+                                let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n+                                let (lvl, src) =\n+                                    self.sets\n+                                        .get_lint_level(lint, self.cur, Some(&specs), &sess);\n+                                let mut err = lint::struct_lint_level(\n+                                    self.sess,\n+                                    lint,\n+                                    lvl,\n+                                    src,\n+                                    Some(li.span.into()),\n+                                    &format!(\n+                                        \"lint name `{}` is deprecated \\\n+                                         and may not have an effect in the future\",\n+                                        name\n+                                    ),\n+                                );\n+                                err.span_suggestion_with_applicability(\n+                                    li.span,\n+                                    \"change it to\",\n+                                    new_lint_name.to_string(),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                                err.emit();\n+                                let src = LintSource::Node(Symbol::intern(&new_lint_name), li.span);\n+                                for id in ids {\n+                                    specs.insert(*id, (level, src));\n+                                }\n+                            }\n+                            Err((None, _)) => {\n+                                // If Tool(Err(None, _)) is returned, then either the lint does not\n+                                // exist in the tool or the code was not compiled with the tool and\n+                                // therefore the lint was never added to the `LintStore`. To detect\n+                                // this is the responsibility of the lint tool.\n                             }\n                         }\n-                        // If Tool(None) is returned, then either the lint does not exist in the\n-                        // tool or the code was not compiled with the tool and therefore the lint\n-                        // was never added to the `LintStore`. To detect this is the responsibility\n-                        // of the lint tool.\n                     }\n \n                     _ if !self.warn_about_weird_lints => {}"}]}