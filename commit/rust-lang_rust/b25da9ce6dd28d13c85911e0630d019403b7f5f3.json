{"sha": "b25da9ce6dd28d13c85911e0630d019403b7f5f3", "node_id": "C_kwDOAAsO6NoAKGIyNWRhOWNlNmRkMjhkMTNjODU5MTFlMDYzMGQwMTk0MDNiN2Y1ZjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-12T23:54:39Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-04T00:56:05Z"}, "message": "layout_of: `T: Thin` implies `sizeof(&T) == sizeof(usize)`", "tree": {"sha": "4b52425698e3d4667415153eab332b27db540012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b52425698e3d4667415153eab332b27db540012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b25da9ce6dd28d13c85911e0630d019403b7f5f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b25da9ce6dd28d13c85911e0630d019403b7f5f3", "html_url": "https://github.com/rust-lang/rust/commit/b25da9ce6dd28d13c85911e0630d019403b7f5f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b25da9ce6dd28d13c85911e0630d019403b7f5f3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7572670a1302f5c7e245d069200e22da9df0316", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7572670a1302f5c7e245d069200e22da9df0316", "html_url": "https://github.com/rust-lang/rust/commit/c7572670a1302f5c7e245d069200e22da9df0316"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "6aa016133ca598926fffa1b2823962b11332da92", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b25da9ce6dd28d13c85911e0630d019403b7f5f3/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25da9ce6dd28d13c85911e0630d019403b7f5f3/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=b25da9ce6dd28d13c85911e0630d019403b7f5f3", "patch": "@@ -155,17 +155,37 @@ fn layout_of_uncached<'tcx>(\n             }\n \n             let unsized_part = tcx.struct_tail_erasing_lifetimes(pointee, param_env);\n-            let metadata = match unsized_part.kind() {\n-                ty::Foreign(..) => {\n+\n+            let metadata = if let Some(metadata_def_id) = tcx.lang_items().metadata_type() {\n+                let metadata_ty = tcx.normalize_erasing_regions(\n+                    param_env,\n+                    tcx.mk_projection(metadata_def_id, [pointee]),\n+                );\n+                let metadata_layout = cx.layout_of(metadata_ty)?;\n+                // If the metadata is a 1-zst, then the pointer is thin.\n+                if metadata_layout.is_zst() && metadata_layout.align.abi.bytes() == 1 {\n                     return Ok(tcx.intern_layout(LayoutS::scalar(cx, data_ptr)));\n                 }\n-                ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),\n-                ty::Dynamic(..) => {\n-                    let mut vtable = scalar_unit(Pointer);\n-                    vtable.valid_range_mut().start = 1;\n-                    vtable\n+\n+                let Abi::Scalar(metadata) = metadata_layout.abi else {\n+                    return Err(LayoutError::Unknown(unsized_part));\n+                };\n+                metadata\n+            } else {\n+                match unsized_part.kind() {\n+                    ty::Foreign(..) => {\n+                        return Ok(tcx.intern_layout(LayoutS::scalar(cx, data_ptr)));\n+                    }\n+                    ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),\n+                    ty::Dynamic(..) => {\n+                        let mut vtable = scalar_unit(Pointer);\n+                        vtable.valid_range_mut().start = 1;\n+                        vtable\n+                    }\n+                    _ => {\n+                        return Err(LayoutError::Unknown(unsized_part));\n+                    }\n                 }\n-                _ => return Err(LayoutError::Unknown(unsized_part)),\n             };\n \n             // Effectively a (ptr, meta) tuple."}, {"sha": "972579ea8be0d7dba6ef17e0fe2f4a96ac7f70e1", "filename": "src/test/ui/layout/thin-meta-implies-thin-ptr.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b25da9ce6dd28d13c85911e0630d019403b7f5f3/src%2Ftest%2Fui%2Flayout%2Fthin-meta-implies-thin-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25da9ce6dd28d13c85911e0630d019403b7f5f3/src%2Ftest%2Fui%2Flayout%2Fthin-meta-implies-thin-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthin-meta-implies-thin-ptr.rs?ref=b25da9ce6dd28d13c85911e0630d019403b7f5f3", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+#![feature(ptr_metadata)]\n+\n+use std::ptr::Thin;\n+\n+fn main() {}\n+\n+fn foo<T: ?Sized + Thin>(t: *const T) -> *const () {\n+    unsafe { std::mem::transmute(t) }\n+}"}]}