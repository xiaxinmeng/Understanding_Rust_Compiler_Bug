{"sha": "3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNDJhMTU4Nzg3OTU1ZmY5ZjJlODFiZTQzNDc5ZGJlOGYyYjFiYjY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-05T18:09:48Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-05T18:09:48Z"}, "message": "Merge #438\n\n438: show types in local variable hovers r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f6e9e68520bb793276a1a1ad8384b53096d1f390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e9e68520bb793276a1a1ad8384b53096d1f390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "html_url": "https://github.com/rust-lang/rust/commit/3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e42a158787955ff9f2e81be43479dbe8f2b1bb6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "cc53e9e7d17871c03fa9d88c709873e20690ca84", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc53e9e7d17871c03fa9d88c709873e20690ca84", "html_url": "https://github.com/rust-lang/rust/commit/cc53e9e7d17871c03fa9d88c709873e20690ca84"}, {"sha": "01cf32c46e152058b81a11f3fe429be2d76cff98", "url": "https://api.github.com/repos/rust-lang/rust/commits/01cf32c46e152058b81a11f3fe429be2d76cff98", "html_url": "https://github.com/rust-lang/rust/commit/01cf32c46e152058b81a11f3fe429be2d76cff98"}], "stats": {"total": 165, "additions": 76, "deletions": 89}, "files": [{"sha": "2cf79eebf1b5b5999c6d072f46e220cd74092177", "filename": "crates/ra_analysis/src/hover.rs", "status": "modified", "additions": 75, "deletions": 10, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3e42a158787955ff9f2e81be43479dbe8f2b1bb6/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e42a158787955ff9f2e81be43479dbe8f2b1bb6/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhover.rs?ref=3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "patch": "@@ -14,23 +14,28 @@ pub(crate) fn hover(\n ) -> Cancelable<Option<RangeInfo<String>>> {\n     let file = db.source_file(position.file_id);\n     let mut res = Vec::new();\n-    let range = if let Some(name_ref) =\n-        find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)\n-    {\n+\n+    let mut range = None;\n+    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n         let navs = crate::goto_defenition::reference_defenition(db, position.file_id, name_ref)?;\n         for nav in navs {\n             res.extend(doc_text_for(db, nav)?)\n         }\n-        name_ref.syntax().range()\n-    } else {\n+        if !res.is_empty() {\n+            range = Some(name_ref.syntax().range())\n+        }\n+    }\n+    if range.is_none() {\n         let expr: ast::Expr = ctry!(find_node_at_offset(file.syntax(), position.offset));\n         let frange = FileRange {\n             file_id: position.file_id,\n             range: expr.syntax().range(),\n         };\n         res.extend(type_of(db, frange)?);\n-        expr.syntax().range()\n+        range = Some(expr.syntax().range());\n     };\n+\n+    let range = ctry!(range);\n     if res.is_empty() {\n         return Ok(None);\n     }\n@@ -41,7 +46,13 @@ pub(crate) fn hover(\n pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Cancelable<Option<String>> {\n     let file = db.source_file(frange.file_id);\n     let syntax = file.syntax();\n-    let node = find_covering_node(syntax, frange.range);\n+    let leaf_node = find_covering_node(syntax, frange.range);\n+    // if we picked identifier, expand to pattern/expression\n+    let node = leaf_node\n+        .ancestors()\n+        .take_while(|it| it.range() == leaf_node.range())\n+        .find(|&it| ast::Expr::cast(it).is_some() || ast::Pat::cast(it).is_some())\n+        .unwrap_or(leaf_node);\n     let parent_fn = ctry!(node.ancestors().find_map(ast::FnDef::cast));\n     let function = ctry!(hir::source_binder::function_from_source(\n         db,\n@@ -156,8 +167,7 @@ impl NavigationTarget {\n #[cfg(test)]\n mod tests {\n     use ra_syntax::TextRange;\n-\n-    use crate::mock_analysis::single_file_with_position;\n+    use crate::mock_analysis::{single_file_with_position, single_file_with_range};\n \n     #[test]\n     fn hover_shows_type_of_an_expression() {\n@@ -168,10 +178,65 @@ mod tests {\n             fn main() {\n                 let foo_test = foo()<|>;\n             }\n-        \",\n+            \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(hover.range, TextRange::from_to(95.into(), 100.into()));\n         assert_eq!(hover.info, \"u32\");\n     }\n+\n+    #[test]\n+    fn hover_for_local_variable() {\n+        let (analysis, position) = single_file_with_position(\"fn func(foo: i32) { fo<|>o; }\");\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(hover.info, \"i32\");\n+    }\n+\n+    #[test]\n+    fn test_type_of_for_function() {\n+        let (analysis, range) = single_file_with_range(\n+            \"\n+            pub fn foo() -> u32 { 1 };\n+\n+            fn main() {\n+                let foo_test = <|>foo()<|>;\n+            }\n+            \",\n+        );\n+\n+        let type_name = analysis.type_of(range).unwrap().unwrap();\n+        assert_eq!(\"u32\", &type_name);\n+    }\n+\n+    // FIXME: improve type_of to make this work\n+    #[test]\n+    fn test_type_of_for_expr_1() {\n+        let (analysis, range) = single_file_with_range(\n+            \"\n+            fn main() {\n+                let foo = <|>1 + foo_test<|>;\n+            }\n+            \",\n+        );\n+\n+        let type_name = analysis.type_of(range).unwrap().unwrap();\n+        assert_eq!(\"[unknown]\", &type_name);\n+    }\n+\n+    // FIXME: improve type_of to make this work\n+    #[test]\n+    fn test_type_of_for_expr_2() {\n+        let (analysis, range) = single_file_with_range(\n+            \"\n+            fn main() {\n+                let foo: usize = 1;\n+                let bar = <|>1 + foo_test<|>;\n+            }\n+            \",\n+        );\n+\n+        let type_name = analysis.type_of(range).unwrap().unwrap();\n+        assert_eq!(\"[unknown]\", &type_name);\n+    }\n+\n }"}, {"sha": "390c31c3fa0d95996558444498b0177f738ecdf0", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e42a158787955ff9f2e81be43479dbe8f2b1bb6/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e42a158787955ff9f2e81be43479dbe8f2b1bb6/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "patch": "@@ -228,7 +228,7 @@ impl Query {\n ///\n /// Typically, a `NavigationTarget` corresponds to some element in the source\n /// code, like a function or a struct, but this is not strictly required.\n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct NavigationTarget {\n     file_id: FileId,\n     name: SmolStr,"}, {"sha": "26da7c10c96e562bc111ec514ea5024160e1f576", "filename": "crates/ra_analysis/tests/test/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e42a158787955ff9f2e81be43479dbe8f2b1bb6/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e42a158787955ff9f2e81be43479dbe8f2b1bb6/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftest%2Fmain.rs?ref=3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "patch": "@@ -1,5 +1,4 @@\n mod runnables;\n-mod type_of;\n \n use ra_syntax::TextRange;\n use test_utils::{assert_eq_dbg, assert_eq_text};"}, {"sha": "9d15b52a889d5fa4048633bcb9825e39e6456c19", "filename": "crates/ra_analysis/tests/test/type_of.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/cc53e9e7d17871c03fa9d88c709873e20690ca84/crates%2Fra_analysis%2Ftests%2Ftest%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc53e9e7d17871c03fa9d88c709873e20690ca84/crates%2Fra_analysis%2Ftests%2Ftest%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftest%2Ftype_of.rs?ref=cc53e9e7d17871c03fa9d88c709873e20690ca84", "patch": "@@ -1,77 +0,0 @@\n-use ra_analysis::mock_analysis::single_file_with_range;\n-\n-#[test]\n-fn test_type_of_for_function() {\n-    let (analysis, range) = single_file_with_range(\n-        \"\n-        pub fn foo() -> u32 { 1 };\n-\n-        fn main() {\n-            let foo_test = <|>foo()<|>;\n-        }\n-        \",\n-    );\n-\n-    let type_name = analysis.type_of(range).unwrap().unwrap();\n-    assert_eq!(\"u32\", &type_name);\n-}\n-\n-// FIXME: improve type_of to make this work\n-#[test]\n-fn test_type_of_for_num() {\n-    let (analysis, range) = single_file_with_range(\n-        r#\"\n-        fn main() {\n-            let foo_test = <|>\"foo\"<|>;\n-        }\n-        \"#,\n-    );\n-\n-    assert!(analysis.type_of(range).unwrap().is_none());\n-}\n-// FIXME: improve type_of to make this work\n-#[test]\n-fn test_type_of_for_binding() {\n-    let (analysis, range) = single_file_with_range(\n-        \"\n-        pub fn foo() -> u32 { 1 };\n-\n-        fn main() {\n-            let <|>foo_test<|> = foo();\n-        }\n-        \",\n-    );\n-\n-    assert!(analysis.type_of(range).unwrap().is_none());\n-}\n-\n-// FIXME: improve type_of to make this work\n-#[test]\n-fn test_type_of_for_expr_1() {\n-    let (analysis, range) = single_file_with_range(\n-        \"\n-        fn main() {\n-            let foo = <|>1 + foo_test<|>;\n-        }\n-        \",\n-    );\n-\n-    let type_name = analysis.type_of(range).unwrap().unwrap();\n-    assert_eq!(\"[unknown]\", &type_name);\n-}\n-\n-// FIXME: improve type_of to make this work\n-#[test]\n-fn test_type_of_for_expr_2() {\n-    let (analysis, range) = single_file_with_range(\n-        \"\n-        fn main() {\n-            let foo: usize = 1;\n-            let bar = <|>1 + foo_test<|>;\n-        }\n-        \",\n-    );\n-\n-    let type_name = analysis.type_of(range).unwrap().unwrap();\n-    assert_eq!(\"[unknown]\", &type_name);\n-}"}]}