{"sha": "6f82dea299e7a8c4aa149196545917043f66af2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODJkZWEyOTllN2E4YzRhYTE0OTE5NjU0NTkxNzA0M2Y2NmFmMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-29T06:18:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-29T06:18:23Z"}, "message": "Auto merge of #44059 - oli-obk:ok_suggestion, r=nikomatsakis\n\nSuggest `Ok(())` when encountering `Result::<(), E>::Ok()`", "tree": {"sha": "ec8cc80ba03809e8a68cea0b605645f6a49cab6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec8cc80ba03809e8a68cea0b605645f6a49cab6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f82dea299e7a8c4aa149196545917043f66af2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f82dea299e7a8c4aa149196545917043f66af2f", "html_url": "https://github.com/rust-lang/rust/commit/6f82dea299e7a8c4aa149196545917043f66af2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f82dea299e7a8c4aa149196545917043f66af2f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2d50691aadfb9e25c8c3d9a1d71a8c79607c5b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d50691aadfb9e25c8c3d9a1d71a8c79607c5b2", "html_url": "https://github.com/rust-lang/rust/commit/d2d50691aadfb9e25c8c3d9a1d71a8c79607c5b2"}, {"sha": "0b72497307207995e22237e4523be24e60f0d3c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b72497307207995e22237e4523be24e60f0d3c1", "html_url": "https://github.com/rust-lang/rust/commit/0b72497307207995e22237e4523be24e60f0d3c1"}], "stats": {"total": 119, "additions": 101, "deletions": 18}, "files": [{"sha": "5411ae0257a4b050be7a05cf9b0b19189808eb86", "filename": "src/librustc_data_structures/unify/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f82dea299e7a8c4aa149196545917043f66af2f/src%2Flibrustc_data_structures%2Funify%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f82dea299e7a8c4aa149196545917043f66af2f/src%2Flibrustc_data_structures%2Funify%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Funify%2Fmod.rs?ref=6f82dea299e7a8c4aa149196545917043f66af2f", "patch": "@@ -119,10 +119,10 @@ impl<K: UnifyKey> VarValue<K> {\n     }\n }\n \n-// We can't use V:LatticeValue, much as I would like to,\n-// because frequently the pattern is that V=Option<U> for some\n-// other type parameter U, and we have no way to say\n-// Option<U>:LatticeValue.\n+/// We can't use V:LatticeValue, much as I would like to,\n+/// because frequently the pattern is that V=Option<U> for some\n+/// other type parameter U, and we have no way to say\n+/// Option<U>:LatticeValue.\n \n impl<K: UnifyKey> UnificationTable<K> {\n     pub fn new() -> UnificationTable<K> {\n@@ -249,7 +249,7 @@ impl<K: UnifyKey> sv::SnapshotVecDelegate for Delegate<K> {\n     fn reverse(_: &mut Vec<VarValue<K>>, _: ()) {}\n }\n \n-// # Base union-find algorithm, where we are just making sets\n+/// # Base union-find algorithm, where we are just making sets\n \n impl<'tcx, K: UnifyKey> UnificationTable<K>\n     where K::Value: Combine\n@@ -281,11 +281,11 @@ impl<'tcx, K: UnifyKey> UnificationTable<K>\n     }\n }\n \n-// # Non-subtyping unification\n-//\n-// Code to handle keys which carry a value, like ints,\n-// floats---anything that doesn't have a subtyping relationship we\n-// need to worry about.\n+/// # Non-subtyping unification\n+///\n+/// Code to handle keys which carry a value, like ints,\n+/// floats---anything that doesn't have a subtyping relationship we\n+/// need to worry about.\n \n impl<'tcx, K, V> UnificationTable<K>\n     where K: UnifyKey<Value = Option<V>>,"}, {"sha": "5b9d4af08e0694303e89d64bd281d627e54bf9bf", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f82dea299e7a8c4aa149196545917043f66af2f/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f82dea299e7a8c4aa149196545917043f66af2f/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=6f82dea299e7a8c4aa149196545917043f66af2f", "patch": "@@ -38,6 +38,7 @@ pub fn check_legal_trait_for_method_call(tcx: TyCtxt, span: Span, trait_id: DefI\n enum CallStep<'tcx> {\n     Builtin(Ty<'tcx>),\n     DeferredClosure(ty::FnSig<'tcx>),\n+    /// e.g. enum variant constructors\n     Overloaded(MethodCallee<'tcx>),\n }\n "}, {"sha": "0427727269607b00175ed38ce7dd516e398d35c6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6f82dea299e7a8c4aa149196545917043f66af2f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f82dea299e7a8c4aa149196545917043f66af2f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6f82dea299e7a8c4aa149196545917043f66af2f", "patch": "@@ -2472,7 +2472,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         fn parameter_count_error<'tcx>(sess: &Session, sp: Span, expected_count: usize,\n                                        arg_count: usize, error_code: &str, variadic: bool,\n-                                       def_span: Option<Span>) {\n+                                       def_span: Option<Span>, sugg_unit: bool) {\n             let mut err = sess.struct_span_err_with_code(sp,\n                 &format!(\"this function takes {}{} parameter{} but {} parameter{} supplied\",\n                     if variadic {\"at least \"} else {\"\"},\n@@ -2482,13 +2482,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if arg_count == 1 {\" was\"} else {\"s were\"}),\n                 error_code);\n \n-            err.span_label(sp, format!(\"expected {}{} parameter{}\",\n-                                        if variadic {\"at least \"} else {\"\"},\n-                                        expected_count,\n-                                        if expected_count == 1 {\"\"} else {\"s\"}));\n             if let Some(def_s) = def_span {\n                 err.span_label(def_s, \"defined here\");\n             }\n+            if sugg_unit {\n+                let mut sugg_span = sp.end_point();\n+                // remove closing `)` from the span\n+                sugg_span.hi = sugg_span.lo;\n+                err.span_suggestion(\n+                    sugg_span,\n+                    \"expected the unit value `()`. You can create one with a pair of parenthesis\",\n+                    String::from(\"()\"));\n+            } else {\n+                err.span_label(sp, format!(\"expected {}{} parameter{}\",\n+                                            if variadic {\"at least \"} else {\"\"},\n+                                            expected_count,\n+                                            if expected_count == 1 {\"\"} else {\"s\"}));\n+            }\n             err.emit();\n         }\n \n@@ -2497,7 +2507,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             match tuple_type.sty {\n                 ty::TyTuple(arg_types, _) if arg_types.len() != args.len() => {\n                     parameter_count_error(tcx.sess, sp_args, arg_types.len(), args.len(),\n-                                          \"E0057\", false, def_span);\n+                                          \"E0057\", false, def_span, false);\n                     expected_arg_tys = &[];\n                     self.err_args(args.len())\n                 }\n@@ -2526,13 +2536,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 fn_inputs.to_vec()\n             } else {\n                 parameter_count_error(tcx.sess, sp_args, expected_arg_count,\n-                                      supplied_arg_count, \"E0060\", true, def_span);\n+                                      supplied_arg_count, \"E0060\", true, def_span, false);\n                 expected_arg_tys = &[];\n                 self.err_args(supplied_arg_count)\n             }\n         } else {\n+            // is the missing argument of type `()`?\n+            let sugg_unit = if expected_arg_tys.len() == 1 && supplied_arg_count == 0 {\n+                self.resolve_type_vars_if_possible(&expected_arg_tys[0]).is_nil()\n+            } else if fn_inputs.len() == 1 && supplied_arg_count == 0 {\n+                self.resolve_type_vars_if_possible(&fn_inputs[0]).is_nil()\n+            } else {\n+                false\n+            };\n             parameter_count_error(tcx.sess, sp_args, expected_arg_count,\n-                                  supplied_arg_count, \"E0061\", false, def_span);\n+                                  supplied_arg_count, \"E0061\", false, def_span, sugg_unit);\n             expected_arg_tys = &[];\n             self.err_args(supplied_arg_count)\n         };"}, {"sha": "2cdab5bedc49ab1c7ca0034f61fcede41d574e5e", "filename": "src/test/ui/span/missing-unit-argument.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f82dea299e7a8c4aa149196545917043f66af2f/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f82dea299e7a8c4aa149196545917043f66af2f/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs?ref=6f82dea299e7a8c4aa149196545917043f66af2f", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(():(), ():()) {}\n+fn bar(():()) {}\n+\n+fn main() {\n+    let _: Result<(), String> = Ok();\n+    foo();\n+    foo(());\n+    bar();\n+}"}, {"sha": "e508a30d1826ca801ce4591798aa4f2e01c6c76c", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6f82dea299e7a8c4aa149196545917043f66af2f/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f82dea299e7a8c4aa149196545917043f66af2f/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=6f82dea299e7a8c4aa149196545917043f66af2f", "patch": "@@ -0,0 +1,45 @@\n+error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/missing-unit-argument.rs:15:33\n+   |\n+15 |     let _: Result<(), String> = Ok();\n+   |                                 ^^^^\n+   |\n+help: expected the unit value `()`. You can create one with a pair of parenthesis\n+   |\n+15 |     let _: Result<(), String> = Ok(());\n+   |                                    ^^\n+\n+error[E0061]: this function takes 2 parameters but 0 parameters were supplied\n+  --> $DIR/missing-unit-argument.rs:16:5\n+   |\n+11 | fn foo(():(), ():()) {}\n+   | ----------------------- defined here\n+...\n+16 |     foo();\n+   |     ^^^^^ expected 2 parameters\n+\n+error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+  --> $DIR/missing-unit-argument.rs:17:9\n+   |\n+11 | fn foo(():(), ():()) {}\n+   | ----------------------- defined here\n+...\n+17 |     foo(());\n+   |         ^^ expected 2 parameters\n+\n+error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+  --> $DIR/missing-unit-argument.rs:18:5\n+   |\n+12 | fn bar(():()) {}\n+   | ---------------- defined here\n+...\n+18 |     bar();\n+   |     ^^^^^\n+   |\n+help: expected the unit value `()`. You can create one with a pair of parenthesis\n+   |\n+18 |     bar(());\n+   |         ^^\n+\n+error: aborting due to 4 previous errors\n+"}]}