{"sha": "8ddd286ea4ba4384a0dc9eae393ed515460a986e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZGQyODZlYTRiYTQzODRhMGRjOWVhZTM5M2VkNTE1NDYwYTk4NmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-09T12:21:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-09T12:21:29Z"}, "message": "auto merge of #15540 : Gankro/rust/master, r=huonw\n\nRemoving recursion from TreeMap implementation, because we don't have TCO. No need to add ```O(logn)``` extra stack frames to search in a tree.\r\n\r\nI find it curious that ```find_mut``` and ```find``` basically duplicated the same logic, but in different ways (iterative vs recursive), possibly to maneuvre around mutability rules, but that's a more fundamental issue to deal with elsewhere.\r\n\r\nThanks to acrichto for the magic trick to appease borrowck (another issue to deal with elsewhere).", "tree": {"sha": "e3d6bcecee0895bb203382107f8ee73241295302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3d6bcecee0895bb203382107f8ee73241295302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ddd286ea4ba4384a0dc9eae393ed515460a986e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ddd286ea4ba4384a0dc9eae393ed515460a986e", "html_url": "https://github.com/rust-lang/rust/commit/8ddd286ea4ba4384a0dc9eae393ed515460a986e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ddd286ea4ba4384a0dc9eae393ed515460a986e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b53f3e7ddb07fce91aafa6f2bb2db896cbc23992", "url": "https://api.github.com/repos/rust-lang/rust/commits/b53f3e7ddb07fce91aafa6f2bb2db896cbc23992", "html_url": "https://github.com/rust-lang/rust/commit/b53f3e7ddb07fce91aafa6f2bb2db896cbc23992"}, {"sha": "03981b54f6a24893399a1c4521d2405b85986102", "url": "https://api.github.com/repos/rust-lang/rust/commits/03981b54f6a24893399a1c4521d2405b85986102", "html_url": "https://github.com/rust-lang/rust/commit/03981b54f6a24893399a1c4521d2405b85986102"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "4a7fcd6786fa050cc80bf09a13fbde037c76a8c5", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ddd286ea4ba4384a0dc9eae393ed515460a986e/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ddd286ea4ba4384a0dc9eae393ed515460a986e/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=8ddd286ea4ba4384a0dc9eae393ed515460a986e", "patch": "@@ -89,7 +89,7 @@ impl<K: Ord, V> Mutable for TreeMap<K, V> {\n \n impl<K: Ord, V> Map<K, V> for TreeMap<K, V> {\n     fn find<'a>(&'a self, key: &K) -> Option<&'a V> {\n-        let mut current: &'a Option<Box<TreeNode<K, V>>> = &self.root;\n+        let mut current = &self.root;\n         loop {\n             match *current {\n               Some(ref r) => {\n@@ -108,7 +108,20 @@ impl<K: Ord, V> Map<K, V> for TreeMap<K, V> {\n impl<K: Ord, V> MutableMap<K, V> for TreeMap<K, V> {\n     #[inline]\n     fn find_mut<'a>(&'a mut self, key: &K) -> Option<&'a mut V> {\n-        find_mut(&mut self.root, key)\n+        let mut current = &mut self.root;\n+        loop {\n+            let temp = current; // hack to appease borrowck\n+            match *temp {\n+              Some(ref mut r) => {\n+                match key.cmp(&r.key) {\n+                  Less => current = &mut r.left,\n+                  Greater => current = &mut r.right,\n+                  Equal => return Some(&mut r.value)\n+                }\n+              }\n+              None => return None\n+            }\n+        }\n     }\n \n     fn swap(&mut self, key: K, value: V) -> Option<V> {\n@@ -840,21 +853,6 @@ fn split<K: Ord, V>(node: &mut Box<TreeNode<K, V>>) {\n     }\n }\n \n-fn find_mut<'r, K: Ord, V>(node: &'r mut Option<Box<TreeNode<K, V>>>,\n-                                key: &K)\n-                             -> Option<&'r mut V> {\n-    match *node {\n-      Some(ref mut x) => {\n-        match key.cmp(&x.key) {\n-          Less => find_mut(&mut x.left, key),\n-          Greater => find_mut(&mut x.right, key),\n-          Equal => Some(&mut x.value),\n-        }\n-      }\n-      None => None\n-    }\n-}\n-\n fn insert<K: Ord, V>(node: &mut Option<Box<TreeNode<K, V>>>,\n                           key: K, value: V) -> Option<V> {\n     match *node {"}]}