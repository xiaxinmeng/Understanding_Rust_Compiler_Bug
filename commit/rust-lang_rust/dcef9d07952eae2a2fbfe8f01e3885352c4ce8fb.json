{"sha": "dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZWY5ZDA3OTUyZWFlMmEyZmJmZThmMDFlMzg4NTM1MmM0Y2U4ZmI=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-10-11T22:36:40Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-10-11T22:42:22Z"}, "message": "Fix `stutter` lints", "tree": {"sha": "33c30762702e62608a7c5994fd54355418e2b304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33c30762702e62608a7c5994fd54355418e2b304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb", "html_url": "https://github.com/rust-lang/rust/commit/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9afd8abbe345095ee8755e2872a33cc7666e7790", "url": "https://api.github.com/repos/rust-lang/rust/commits/9afd8abbe345095ee8755e2872a33cc7666e7790", "html_url": "https://github.com/rust-lang/rust/commit/9afd8abbe345095ee8755e2872a33cc7666e7790"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "314ca41ba21caffe84381c3eb6621c2e17821396", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb", "patch": "@@ -40,6 +40,7 @@ declare_clippy_lint! {\n     \"unnecessary double comparisons that can be simplified\"\n }\n \n+#[allow(clippy::stutter)]\n pub struct DoubleComparisonPass;\n \n impl LintPass for DoubleComparisonPass {"}, {"sha": "16d1e40484d0b7507923df7ab620d10208c22805", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb", "patch": "@@ -16,7 +16,7 @@ use crate::syntax::ast::*;\n use crate::syntax::source_map::Span;\n use crate::syntax::symbol::LocalInternedString;\n use crate::utils::{span_help_and_lint, span_lint};\n-use crate::utils::{camel_case_from, camel_case_until, in_macro};\n+use crate::utils::{camel_case, in_macro};\n \n /// **What it does:** Detects enumeration variants that are prefixed or suffixed\n /// by the same characters.\n@@ -184,19 +184,19 @@ fn check_variant(\n         }\n     }\n     let first = var2str(&def.variants[0]);\n-    let mut pre = &first[..camel_case_until(&*first)];\n-    let mut post = &first[camel_case_from(&*first)..];\n+    let mut pre = &first[..camel_case::until(&*first)];\n+    let mut post = &first[camel_case::from(&*first)..];\n     for var in &def.variants {\n         let name = var2str(var);\n \n         let pre_match = partial_match(pre, &name);\n         pre = &pre[..pre_match];\n-        let pre_camel = camel_case_until(pre);\n+        let pre_camel = camel_case::until(pre);\n         pre = &pre[..pre_camel];\n         while let Some((next, last)) = name[pre.len()..].chars().zip(pre.chars().rev()).next() {\n             if next.is_lowercase() {\n                 let last = pre.len() - last.len_utf8();\n-                let last_camel = camel_case_until(&pre[..last]);\n+                let last_camel = camel_case::until(&pre[..last]);\n                 pre = &pre[..last_camel];\n             } else {\n                 break;\n@@ -206,7 +206,7 @@ fn check_variant(\n         let post_match = partial_rmatch(post, &name);\n         let post_end = post.len() - post_match;\n         post = &post[post_end..];\n-        let post_camel = camel_case_from(post);\n+        let post_camel = camel_case::from(post);\n         post = &post[post_camel..];\n     }\n     let (what, value) = match (pre.is_empty(), post.is_empty()) {"}, {"sha": "93a40e13540f8532489976406fdd6ff28343dc5b", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb", "patch": "@@ -44,6 +44,7 @@ declare_clippy_lint!{\n     \"checks for expressions that could be replaced by the question mark operator\"\n }\n \n+#[allow(clippy::stutter)]\n #[derive(Copy, Clone)]\n pub struct QuestionMarkPass;\n "}, {"sha": "5ce1e08d8b53347b403c9776db9d8aadcbf621f4", "filename": "clippy_lints/src/utils/camel_case.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/clippy_lints%2Fsrc%2Futils%2Fcamel_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/clippy_lints%2Fsrc%2Futils%2Fcamel_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcamel_case.rs?ref=dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb", "patch": "@@ -10,7 +10,7 @@\n \n /// Return the index of the character after the first camel-case component of\n /// `s`.\n-pub fn camel_case_until(s: &str) -> usize {\n+pub fn until(s: &str) -> usize {\n     let mut iter = s.char_indices();\n     if let Some((_, first)) = iter.next() {\n         if !first.is_uppercase() {\n@@ -43,7 +43,7 @@ pub fn camel_case_until(s: &str) -> usize {\n }\n \n /// Return index of the last camel-case component of `s`.\n-pub fn camel_case_from(s: &str) -> usize {\n+pub fn from(s: &str) -> usize {\n     let mut iter = s.char_indices().rev();\n     if let Some((_, first)) = iter.next() {\n         if !first.is_lowercase() {\n@@ -73,52 +73,52 @@ pub fn camel_case_from(s: &str) -> usize {\n \n #[cfg(test)]\n mod test {\n-    use super::{camel_case_from, camel_case_until};\n+    use super::{from, until};\n \n     #[test]\n     fn from_full() {\n-        assert_eq!(camel_case_from(\"AbcDef\"), 0);\n-        assert_eq!(camel_case_from(\"Abc\"), 0);\n+        assert_eq!(from(\"AbcDef\"), 0);\n+        assert_eq!(from(\"Abc\"), 0);\n     }\n \n     #[test]\n     fn from_partial() {\n-        assert_eq!(camel_case_from(\"abcDef\"), 3);\n-        assert_eq!(camel_case_from(\"aDbc\"), 1);\n+        assert_eq!(from(\"abcDef\"), 3);\n+        assert_eq!(from(\"aDbc\"), 1);\n     }\n \n     #[test]\n     fn from_not() {\n-        assert_eq!(camel_case_from(\"AbcDef_\"), 7);\n-        assert_eq!(camel_case_from(\"AbcDD\"), 5);\n+        assert_eq!(from(\"AbcDef_\"), 7);\n+        assert_eq!(from(\"AbcDD\"), 5);\n     }\n \n     #[test]\n     fn from_caps() {\n-        assert_eq!(camel_case_from(\"ABCD\"), 4);\n+        assert_eq!(from(\"ABCD\"), 4);\n     }\n \n     #[test]\n     fn until_full() {\n-        assert_eq!(camel_case_until(\"AbcDef\"), 6);\n-        assert_eq!(camel_case_until(\"Abc\"), 3);\n+        assert_eq!(until(\"AbcDef\"), 6);\n+        assert_eq!(until(\"Abc\"), 3);\n     }\n \n     #[test]\n     fn until_not() {\n-        assert_eq!(camel_case_until(\"abcDef\"), 0);\n-        assert_eq!(camel_case_until(\"aDbc\"), 0);\n+        assert_eq!(until(\"abcDef\"), 0);\n+        assert_eq!(until(\"aDbc\"), 0);\n     }\n \n     #[test]\n     fn until_partial() {\n-        assert_eq!(camel_case_until(\"AbcDef_\"), 6);\n-        assert_eq!(camel_case_until(\"CallTypeC\"), 8);\n-        assert_eq!(camel_case_until(\"AbcDD\"), 3);\n+        assert_eq!(until(\"AbcDef_\"), 6);\n+        assert_eq!(until(\"CallTypeC\"), 8);\n+        assert_eq!(until(\"AbcDD\"), 3);\n     }\n \n     #[test]\n     fn until_caps() {\n-        assert_eq!(camel_case_until(\"ABCD\"), 0);\n+        assert_eq!(until(\"ABCD\"), 0);\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "05356f8d3856f7d6c4f93f8d16d1b9afbbc54217", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=dcef9d07952eae2a2fbfe8f01e3885352c4ce8fb", "patch": "@@ -33,8 +33,7 @@ use crate::syntax::source_map::{Span, DUMMY_SP};\n use crate::syntax::errors::DiagnosticBuilder;\n use crate::syntax::symbol::keywords;\n \n-mod camel_case;\n-pub use self::camel_case::{camel_case_from, camel_case_until};\n+pub mod camel_case;\n \n pub mod comparisons;\n pub mod conf;"}]}