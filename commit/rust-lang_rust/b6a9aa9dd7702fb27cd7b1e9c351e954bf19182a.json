{"sha": "b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YTlhYTlkZDc3MDJmYjI3Y2Q3YjFlOWMzNTFlOTU0YmYxOTE4MmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-02-12T09:55:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-12T09:55:34Z"}, "message": "Rollup merge of #67695 - gilescope:truth, r=centril\n\nAdded dyn and true keyword docs\n\nr? @Centril", "tree": {"sha": "3d17ce3fd3cdac1d7bf3aaf1cab28fc01ea44141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d17ce3fd3cdac1d7bf3aaf1cab28fc01ea44141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQ8uWCRBK7hj4Ov3rIwAAdHIIAGohbtS2DqMO1fnZsWHSNBzI\n4xdYBnewuOBmq/19b0/w/u9YXUUnCZYd51gS+UMhDmaNRK0SYX6qtq9aJgkQmR2r\nhtZUr0E8Y7lUpBRHrJ0DMexmu2NJDtavJjBgKfQlOtmlrA2hR/AkAnqFq1Fnmf0p\nfopEilY3SXI4F375lOuYURcepzdfKJDkua3cr1tP+KD4UgdX59yFLzyrCcc/9cyh\nu1UtCsBOV5S6NKtVVNRpse/lFTQ+JrzB/rPB8tyZtjdw8bI3en/oAviwawLZ7Kae\nekpwHr9InqkO7+y59SWOuwm1XkjwLL1wZ4Hza7H6OsLLc+ceo6yw9zJRNXw72so=\n=bV7g\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d17ce3fd3cdac1d7bf3aaf1cab28fc01ea44141\nparent e6db6697fa84271695a96570370f3f194785699a\nparent 8e26ad0c2c5c755f927ac971a3c1ab51de45f64f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1581501334 +0900\ncommitter GitHub <noreply@github.com> 1581501334 +0900\n\nRollup merge of #67695 - gilescope:truth, r=centril\n\nAdded dyn and true keyword docs\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a", "html_url": "https://github.com/rust-lang/rust/commit/b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6db6697fa84271695a96570370f3f194785699a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6db6697fa84271695a96570370f3f194785699a", "html_url": "https://github.com/rust-lang/rust/commit/e6db6697fa84271695a96570370f3f194785699a"}, {"sha": "8e26ad0c2c5c755f927ac971a3c1ab51de45f64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e26ad0c2c5c755f927ac971a3c1ab51de45f64f", "html_url": "https://github.com/rust-lang/rust/commit/8e26ad0c2c5c755f927ac971a3c1ab51de45f64f"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "58f4e76cd30b3d91285fdcf9655365e634be197e", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=b6a9aa9dd7702fb27cd7b1e9c351e954bf19182a", "patch": "@@ -1100,10 +1100,28 @@ mod trait_keyword {}\n //\n /// A value of type [`bool`] representing logical **true**.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// Logically `true` is not equal to [`false`].\n+///\n+/// ## Control structures that check for **true**\n+///\n+/// Several of Rust's control structures will check for a `bool` condition evaluating to **true**.\n+///\n+///   * The condition in an [`if`] expression must be of type `bool`.\n+///     Whenever that condition evaluates to **true**, the `if` expression takes\n+///     on the value of the first block. If however, the condition evaluates\n+///     to `false`, the expression takes on value of the `else` block if there is one.\n ///\n+///   * [`while`] is another control flow construct expecting a `bool`-typed condition.\n+///     As long as the condition evaluates to **true**, the `while` loop will continually\n+///     evaluate its associated block.\n+///\n+///   * [`match`] arms can have guard clauses on them.\n+///\n+/// [`if`]: keyword.if.html\n+/// [`while`]: keyword.while.html\n+/// [`match`]: ../reference/expressions/match-expr.html#match-guards\n+/// [`false`]: keyword.false.html\n /// [`bool`]: primitive.bool.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod true_keyword {}\n \n #[doc(keyword = \"type\")]\n@@ -1186,12 +1204,33 @@ mod await_keyword {}\n \n #[doc(keyword = \"dyn\")]\n //\n-/// Name the type of a [trait object].\n+/// `dyn` is a prefix of a [trait object]'s type.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// The `dyn` keyword is used to highlight that calls to methods on the associated `Trait`\n+/// are dynamically dispatched. To use the trait this way, it must be 'object safe'.\n+///\n+/// Unlike generic parameters or `impl Trait`, the compiler does not know the concrete type that\n+/// is being passed. That is, the type has been [erased].\n+/// As such, a `dyn Trait` reference contains _two_ pointers.\n+/// One pointer goes to the data (e.g., an instance of a struct).\n+/// Another pointer goes to a map of method call names to function pointers\n+/// (known as a virtual method table or vtable).\n+///\n+/// At run-time, when a method needs to be called on the `dyn Trait`, the vtable is consulted to get\n+/// the function pointer and then that function pointer is called.\n+///\n+/// ## Trade-offs\n+///\n+/// The above indirection is the additional runtime cost of calling a function on a `dyn Trait`.\n+/// Methods called by dynamic dispatch generally cannot be inlined by the compiler.\n+///\n+/// However, `dyn Trait` is likely to produce smaller code than `impl Trait` / generic parameters as\n+/// the method won't be duplicated for each concrete type.\n+///\n+/// Read more about `object safety` and [trait object]s.\n ///\n /// [trait object]: ../book/ch17-02-trait-objects.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// [erased]: https://en.wikipedia.org/wiki/Type_erasure\n mod dyn_keyword {}\n \n #[doc(keyword = \"union\")]"}]}