{"sha": "28afaeec17058b632219027f2bbb83e6655409e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YWZhZWVjMTcwNThiNjMyMjE5MDI3ZjJiYmI4M2U2NjU1NDA5ZTY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T20:06:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-01T19:03:55Z"}, "message": "Make is_private_dep a query.", "tree": {"sha": "840936e24c99b52ff20b3320951208077afcb5f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/840936e24c99b52ff20b3320951208077afcb5f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28afaeec17058b632219027f2bbb83e6655409e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28afaeec17058b632219027f2bbb83e6655409e6", "html_url": "https://github.com/rust-lang/rust/commit/28afaeec17058b632219027f2bbb83e6655409e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28afaeec17058b632219027f2bbb83e6655409e6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f9ab0300cd66f6f616e03ea90b2d71af474bf28", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9ab0300cd66f6f616e03ea90b2d71af474bf28", "html_url": "https://github.com/rust-lang/rust/commit/7f9ab0300cd66f6f616e03ea90b2d71af474bf28"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "3c05efd6a5eb65bdec7f739b30814063cba65ab5", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28afaeec17058b632219027f2bbb83e6655409e6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28afaeec17058b632219027f2bbb83e6655409e6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=28afaeec17058b632219027f2bbb83e6655409e6", "patch": "@@ -155,6 +155,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }\n \n     dylib_dependency_formats => { cdata.get_dylib_dependency_formats(tcx) }\n+    is_private_dep => { cdata.private_dep }\n     is_panic_runtime => { cdata.root.panic_runtime }\n     is_compiler_builtins => { cdata.root.compiler_builtins }\n     has_global_allocator => { cdata.root.has_global_allocator }\n@@ -250,6 +251,10 @@ pub fn provide(providers: &mut Providers) {\n         is_statically_included_foreign_item: |tcx, id| {\n             matches!(tcx.native_library_kind(id), Some(NativeLibKind::Static { .. }))\n         },\n+        is_private_dep: |_tcx, cnum| {\n+            assert_eq!(cnum, LOCAL_CRATE);\n+            false\n+        },\n         native_library_kind: |tcx, id| {\n             tcx.native_libraries(id.krate)\n                 .iter()\n@@ -477,10 +482,6 @@ impl CrateStore for CStore {\n         self.get_crate_data(cnum).root.name\n     }\n \n-    fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool {\n-        self.get_crate_data(cnum).private_dep\n-    }\n-\n     fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId {\n         self.get_crate_data(cnum).root.stable_crate_id\n     }"}, {"sha": "8476929eaeced2b1d230e5e6f6d964e2e7d2a088", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28afaeec17058b632219027f2bbb83e6655409e6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28afaeec17058b632219027f2bbb83e6655409e6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=28afaeec17058b632219027f2bbb83e6655409e6", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 17);\n+static_assert_size!(DepNode, 18);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "dd3b0a40d69462fc90792fdde723c47c40d851d5", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28afaeec17058b632219027f2bbb83e6655409e6/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28afaeec17058b632219027f2bbb83e6655409e6/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=28afaeec17058b632219027f2bbb83e6655409e6", "patch": "@@ -199,7 +199,6 @@ pub trait CrateStore {\n \n     // \"queries\" used in resolve that aren't tracked for incremental compilation\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n-    fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool;\n     fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n "}, {"sha": "cad0dc683ecbd4ad0929c354b183fd2d836a337a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28afaeec17058b632219027f2bbb83e6655409e6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28afaeec17058b632219027f2bbb83e6655409e6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=28afaeec17058b632219027f2bbb83e6655409e6", "patch": "@@ -1415,6 +1415,12 @@ rustc_queries! {\n         eval_always\n         desc { \"generating a postorder list of CrateNums\" }\n     }\n+    /// Returns whether or not the crate with CrateNum 'cnum'\n+    /// is marked as a private dependency\n+    query is_private_dep(c: CrateNum) -> bool {\n+        eval_always\n+        desc { \"check whether crate {} is a private dependency\", c }\n+    }\n \n     query upvars_mentioned(def_id: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n         desc { |tcx| \"collecting upvars mentioned in `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "aa414c49e9b7f2959e7f141b75e79b79ed5b1173", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28afaeec17058b632219027f2bbb83e6655409e6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28afaeec17058b632219027f2bbb83e6655409e6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=28afaeec17058b632219027f2bbb83e6655409e6", "patch": "@@ -1275,12 +1275,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Returns whether or not the crate with CrateNum 'cnum'\n-    /// is marked as a private dependency\n-    pub fn is_private_dep(self, cnum: CrateNum) -> bool {\n-        if cnum == LOCAL_CRATE { false } else { self.cstore.crate_is_private_dep_untracked(cnum) }\n-    }\n-\n     #[inline]\n     pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {\n         if let Some(def_id) = def_id.as_local() {"}]}