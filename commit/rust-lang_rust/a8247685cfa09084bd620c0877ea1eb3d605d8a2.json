{"sha": "a8247685cfa09084bd620c0877ea1eb3d605d8a2", "node_id": "C_kwDOAAsO6NoAKGE4MjQ3Njg1Y2ZhMDkwODRiZDYyMGMwODc3ZWExZWIzZDYwNWQ4YTI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-03T20:23:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-03T20:23:14Z"}, "message": "Merge #10686\n\n10686: internal: Add `Semantics::original_ast_node` for upmapping nodes out of macro files r=Veykril a=Veykril\n\nFixes trying to insert imports into macro expanded files which then do text edits on very wrong text ranges.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "31cdfec459326b5004a3f4a428d482943cc5f6f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31cdfec459326b5004a3f4a428d482943cc5f6f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8247685cfa09084bd620c0877ea1eb3d605d8a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhgu+yCRBK7hj4Ov3rIwAAPZUIACVXgFGrGkufJur3si4vpnAI\nI/euXPlWdUhds4bWhqh90TW2SzKMfZ9oc/qOstK5BJWFhUpUse2ZhVBAtZQzrwvI\nSv2kn7pdyqdg+DCQl8ObMEsIM6m0pO4MRPP2QStBMfNirSPJXvAXkMnSUSPPDUsj\nnb14SkNbz+0NogTeS0Gr2+q+CbZcRgTF2yhu4RqbXNoSXpkXnJNkQD+f8JwLF3ni\nTuSmvhWuBN0A+DsbPJct4eR/CF8RR6kM035LuQ5bnQo3DCHMcFyOoeA8c5blzeqj\nE6AkQDhyYPSsq+6azdMIxfPuM8DWHhaKd6ykP49ZGhstoFK44yzKdRGchhbuWss=\n=pOMZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 31cdfec459326b5004a3f4a428d482943cc5f6f4\nparent 9ee855bcc5448036181b9b7b43f58690869d2d87\nparent 96db0d8bddc14f1551e0abe7b201422e5dc73774\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635970994 +0000\ncommitter GitHub <noreply@github.com> 1635970994 +0000\n\nMerge #10686\n\n10686: internal: Add `Semantics::original_ast_node` for upmapping nodes out of macro files r=Veykril a=Veykril\n\nFixes trying to insert imports into macro expanded files which then do text edits on very wrong text ranges.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8247685cfa09084bd620c0877ea1eb3d605d8a2", "html_url": "https://github.com/rust-lang/rust/commit/a8247685cfa09084bd620c0877ea1eb3d605d8a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8247685cfa09084bd620c0877ea1eb3d605d8a2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee855bcc5448036181b9b7b43f58690869d2d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee855bcc5448036181b9b7b43f58690869d2d87", "html_url": "https://github.com/rust-lang/rust/commit/9ee855bcc5448036181b9b7b43f58690869d2d87"}, {"sha": "96db0d8bddc14f1551e0abe7b201422e5dc73774", "url": "https://api.github.com/repos/rust-lang/rust/commits/96db0d8bddc14f1551e0abe7b201422e5dc73774", "html_url": "https://github.com/rust-lang/rust/commit/96db0d8bddc14f1551e0abe7b201422e5dc73774"}], "stats": {"total": 230, "additions": 182, "deletions": 48}, "files": [{"sha": "4f481613dd8f3398a7fdfe7272056a2efec101db", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -208,6 +208,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.original_range_opt(node)\n     }\n \n+    pub fn original_ast_node<N: AstNode>(&self, node: N) -> Option<N> {\n+        self.imp.original_ast_node(node)\n+    }\n+\n     pub fn diagnostics_display_range(&self, diagnostics: InFile<SyntaxNodePtr>) -> FileRange {\n         self.imp.diagnostics_display_range(diagnostics)\n     }\n@@ -660,6 +664,11 @@ impl<'db> SemanticsImpl<'db> {\n         node.as_ref().original_file_range_opt(self.db.upcast())\n     }\n \n+    fn original_ast_node<N: AstNode>(&self, node: N) -> Option<N> {\n+        let file = self.find_file(node.syntax().clone());\n+        file.with_value(node).original_ast_node(self.db.upcast()).map(|it| it.value)\n+    }\n+\n     fn diagnostics_display_range(&self, src: InFile<SyntaxNodePtr>) -> FileRange {\n         let root = self.db.parse_or_expand(src.file_id).unwrap();\n         let node = src.value.to_node(&root);"}, {"sha": "4742cb089eb578c833b4bc990db48a5563f5b8ae", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -24,9 +24,9 @@ use std::{hash::Hash, iter, sync::Arc};\n \n use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange};\n use syntax::{\n-    algo::skip_trivia_token,\n+    algo::{self, skip_trivia_token},\n     ast::{self, AstNode, HasAttrs},\n-    Direction, SyntaxNode, SyntaxToken, TextRange,\n+    Direction, SyntaxNode, SyntaxToken,\n };\n \n use crate::{\n@@ -600,13 +600,15 @@ impl<'a> InFile<&'a SyntaxNode> {\n \n     /// Attempts to map the syntax node back up its macro calls.\n     pub fn original_file_range_opt(self, db: &dyn db::AstDatabase) -> Option<FileRange> {\n-        match original_range_opt(db, self) {\n-            Some(range) => {\n-                let original_file = range.file_id.original_file(db);\n-                if range.file_id != original_file.into() {\n+        match ascend_node_border_tokens(db, self) {\n+            Some(InFile { file_id, value: (first, last) }) => {\n+                let original_file = file_id.original_file(db);\n+                let range = first.text_range().cover(last.text_range());\n+                if file_id != original_file.into() {\n                     tracing::error!(\"Failed mapping up more for {:?}\", range);\n+                    return None;\n                 }\n-                Some(FileRange { file_id: original_file, range: range.value })\n+                Some(FileRange { file_id: original_file, range })\n             }\n             _ if !self.file_id.is_macro() => Some(FileRange {\n                 file_id: self.file_id.original_file(db),\n@@ -617,28 +619,29 @@ impl<'a> InFile<&'a SyntaxNode> {\n     }\n }\n \n-fn original_range_opt(\n+fn ascend_node_border_tokens(\n     db: &dyn db::AstDatabase,\n-    node: InFile<&SyntaxNode>,\n-) -> Option<InFile<TextRange>> {\n-    let expansion = node.file_id.expansion_info(db)?;\n+    InFile { file_id, value: node }: InFile<&SyntaxNode>,\n+) -> Option<InFile<(SyntaxToken, SyntaxToken)>> {\n+    let expansion = file_id.expansion_info(db)?;\n \n     // the input node has only one token ?\n-    let single = skip_trivia_token(node.value.first_token()?, Direction::Next)?\n-        == skip_trivia_token(node.value.last_token()?, Direction::Prev)?;\n+    let first = skip_trivia_token(node.first_token()?, Direction::Next)?;\n+    let last = skip_trivia_token(node.last_token()?, Direction::Prev)?;\n+    let is_single_token = first == last;\n \n-    node.value.descendants().find_map(|it| {\n+    node.descendants().find_map(|it| {\n         let first = skip_trivia_token(it.first_token()?, Direction::Next)?;\n-        let first = ascend_call_token(db, &expansion, node.with_value(first))?;\n+        let first = ascend_call_token(db, &expansion, InFile::new(file_id, first))?;\n \n         let last = skip_trivia_token(it.last_token()?, Direction::Prev)?;\n-        let last = ascend_call_token(db, &expansion, node.with_value(last))?;\n+        let last = ascend_call_token(db, &expansion, InFile::new(file_id, last))?;\n \n-        if (!single && first == last) || (first.file_id != last.file_id) {\n+        if (!is_single_token && first == last) || (first.file_id != last.file_id) {\n             return None;\n         }\n \n-        Some(first.with_value(first.value.text_range().cover(last.value.text_range())))\n+        Some(InFile::new(first.file_id, (first.value, last.value)))\n     })\n }\n \n@@ -674,6 +677,23 @@ impl<N: AstNode> InFile<N> {\n         self.value.syntax().descendants().filter_map(T::cast).map(move |n| self.with_value(n))\n     }\n \n+    pub fn original_ast_node(self, db: &dyn db::AstDatabase) -> Option<InFile<N>> {\n+        match ascend_node_border_tokens(db, self.syntax()) {\n+            Some(InFile { file_id, value: (first, last) }) => {\n+                let original_file = file_id.original_file(db);\n+                if file_id != original_file.into() {\n+                    let range = first.text_range().cover(last.text_range());\n+                    tracing::error!(\"Failed mapping up more for {:?}\", range);\n+                    return None;\n+                }\n+                let anc = algo::least_common_ancestor(&first.parent()?, &last.parent()?)?;\n+                Some(InFile::new(file_id, anc.ancestors().find_map(N::cast)?))\n+            }\n+            _ if !self.file_id.is_macro() => Some(self),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn syntax(&self) -> InFile<&SyntaxNode> {\n         self.with_value(self.value.syntax())\n     }"}, {"sha": "cac736ff850a0f8fe41fbd11b355fdde577c4885", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         NodeOrToken::Token(token) => token.text_range(),\n     };\n     let group_label = group_label(import_assets.import_candidate());\n-    let scope = ImportScope::find_insert_use_container_with_macros(\n+    let scope = ImportScope::find_insert_use_container(\n         &match syntax_under_caret {\n             NodeOrToken::Node(it) => it,\n             NodeOrToken::Token(it) => it.parent()?,\n@@ -164,6 +164,60 @@ mod tests {\n \n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n+    #[test]\n+    fn not_applicable_if_scope_inside_macro() {\n+        check_assist_not_applicable(\n+            auto_import,\n+            r\"\n+mod bar {\n+    pub struct Baz;\n+}\n+macro_rules! foo {\n+    ($it:ident) => {\n+        mod __ {\n+            fn __(x: $it) {}\n+        }\n+    };\n+}\n+foo! {\n+    Baz$0\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn applicable_in_attributes() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+//- proc_macros: identity\n+#[proc_macros::identity]\n+mod foo {\n+    mod bar {\n+        const _: Baz$0 = ();\n+    }\n+}\n+mod baz {\n+    pub struct Baz;\n+}\n+\",\n+            r\"\n+#[proc_macros::identity]\n+mod foo {\n+    mod bar {\n+        use crate::baz::Baz;\n+\n+        const _: Baz = ();\n+    }\n+}\n+mod baz {\n+    pub struct Baz;\n+}\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn applicable_when_found_an_import_partial() {\n         check_assist("}, {"sha": "3a334efe0ab9385ce9b2a26ff5f9cb4b12e0bd4b", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -91,7 +91,7 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n     let target_range = body.text_range();\n \n-    let scope = ImportScope::find_insert_use_container_with_macros(&node, &ctx.sema)?;\n+    let scope = ImportScope::find_insert_use_container(&node, &ctx.sema)?;\n \n     acc.add(\n         AssistId(\"extract_function\", crate::AssistKind::RefactorExtract),"}, {"sha": "8e28f0443d6cd293b71924d083cfb7d38c91ec8c", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -314,7 +314,7 @@ fn process_references(\n                 if let Some(mut mod_path) = mod_path {\n                     mod_path.pop_segment();\n                     mod_path.push_segment(variant_hir_name.clone());\n-                    let scope = ImportScope::find_insert_use_container(&scope_node)?;\n+                    let scope = ImportScope::find_insert_use_container(&scope_node, &ctx.sema)?;\n                     visited_modules.insert(module);\n                     return Some((segment, scope_node, Some((scope, mod_path))));\n                 }"}, {"sha": "8df8c4b726fed662a5515ecfef4565c46447d30c", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -70,7 +70,7 @@ pub(crate) fn replace_qualified_name_with_use(\n         })\n         .flatten();\n \n-    let scope = ImportScope::find_insert_use_container_with_macros(path.syntax(), &ctx.sema)?;\n+    let scope = ImportScope::find_insert_use_container(path.syntax(), &ctx.sema)?;\n     let target = path.syntax().text_range();\n     acc.add(\n         AssistId(\"replace_qualified_name_with_use\", AssistKind::RefactorRewrite),"}, {"sha": "5a79979533322fc3186608e856bcf448979471a9", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -2,7 +2,7 @@ mod sourcegen;\n mod generated;\n \n use expect_test::expect;\n-use hir::Semantics;\n+use hir::{db::DefDatabase, Semantics};\n use ide_db::{\n     base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt},\n     helpers::{\n@@ -117,7 +117,8 @@ enum ExpectedResult<'a> {\n \n #[track_caller]\n fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label: Option<&str>) {\n-    let (db, file_with_caret_id, range_or_offset) = RootDatabase::with_range_or_offset(before);\n+    let (mut db, file_with_caret_id, range_or_offset) = RootDatabase::with_range_or_offset(before);\n+    db.set_enable_proc_attr_macros(true);\n     let text_without_caret = db.file_text(file_with_caret_id).to_string();\n \n     let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };"}, {"sha": "33b8481932507193fe9359665f88b6369b643b36", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -98,7 +98,7 @@ fn flyimport_attribute(ctx: &CompletionContext, acc: &mut Completions) -> Option\n         &ctx.sema,\n         parent.clone(),\n     )?;\n-    let import_scope = ImportScope::find_insert_use_container_with_macros(&parent, &ctx.sema)?;\n+    let import_scope = ImportScope::find_insert_use_container(&parent, &ctx.sema)?;\n     acc.add_all(\n         import_assets\n             .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind)"}, {"sha": "956411f1a3bfa85e9a9e2f8fdbf598827db72378", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -129,7 +129,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n \n     let user_input_lowercased = potential_import_name.to_lowercase();\n     let import_assets = import_assets(ctx, potential_import_name)?;\n-    let import_scope = ImportScope::find_insert_use_container_with_macros(\n+    let import_scope = ImportScope::find_insert_use_container(\n         &position_for_import(ctx, Some(import_assets.import_candidate()))?,\n         &ctx.sema,\n     )?;"}, {"sha": "c239401e4874d3db21624e87c556ff7f9994058b", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -244,8 +244,7 @@ fn add_custom_postfix_completions(\n     postfix_snippet: impl Fn(&str, &str, &str) -> Builder,\n     receiver_text: &str,\n ) -> Option<()> {\n-    let import_scope =\n-        ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n+    let import_scope = ImportScope::find_insert_use_container(&ctx.token.parent()?, &ctx.sema)?;\n     ctx.config.postfix_snippets().filter(|(_, snip)| snip.scope == SnippetScope::Expr).for_each(\n         |(trigger, snippet)| {\n             let imports = match snippet.imports(ctx, &import_scope) {"}, {"sha": "12bccfae11d975283e75224fd7019e0e0f690705", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -102,8 +102,7 @@ fn add_custom_completions(\n     cap: SnippetCap,\n     scope: SnippetScope,\n ) -> Option<()> {\n-    let import_scope =\n-        ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n+    let import_scope = ImportScope::find_insert_use_container(&ctx.token.parent()?, &ctx.sema)?;\n     ctx.config.prefix_snippets().filter(|(_, snip)| snip.scope == scope).for_each(\n         |(trigger, snip)| {\n             let imports = match snip.imports(ctx, &import_scope) {"}, {"sha": "d9618642c456f867a5b8993aa5b8a0b71add83c8", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -183,7 +183,7 @@ pub fn resolve_completion_edits(\n     let _p = profile::span(\"resolve_completion_edits\");\n     let ctx = CompletionContext::new(db, position, config)?;\n     let position_for_import = &position_for_import(&ctx, None)?;\n-    let scope = ImportScope::find_insert_use_container_with_macros(position_for_import, &ctx.sema)?;\n+    let scope = ImportScope::find_insert_use_container(position_for_import, &ctx.sema)?;\n \n     let current_module = ctx.sema.scope(position_for_import).module()?;\n     let current_crate = current_module.krate();"}, {"sha": "1f3e3c55bf37dc235ed52112faf582d58a2c8791", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -8,7 +8,7 @@ use hir::Semantics;\n use syntax::{\n     algo,\n     ast::{self, make, AstNode, HasAttrs, HasModuleItem, HasVisibility, PathSegmentKind},\n-    match_ast, ted, AstToken, Direction, NodeOrToken, SyntaxNode, SyntaxToken,\n+    ted, AstToken, Direction, NodeOrToken, SyntaxNode, SyntaxToken,\n };\n \n use crate::{\n@@ -50,7 +50,10 @@ pub enum ImportScope {\n }\n \n impl ImportScope {\n+    // FIXME: Remove this?\n+    #[cfg(test)]\n     fn from(syntax: SyntaxNode) -> Option<Self> {\n+        use syntax::match_ast;\n         fn contains_cfg_attr(attrs: &dyn HasAttrs) -> bool {\n             attrs\n                 .attrs()\n@@ -76,16 +79,60 @@ impl ImportScope {\n     }\n \n     /// Determines the containing syntax node in which to insert a `use` statement affecting `position`.\n-    pub fn find_insert_use_container_with_macros(\n+    /// Returns the original source node inside attributes.\n+    pub fn find_insert_use_container(\n         position: &SyntaxNode,\n         sema: &Semantics<'_, RootDatabase>,\n     ) -> Option<Self> {\n-        sema.ancestors_with_macros(position.clone()).find_map(Self::from)\n-    }\n+        fn contains_cfg_attr(attrs: &dyn HasAttrs) -> bool {\n+            attrs\n+                .attrs()\n+                .any(|attr| attr.as_simple_call().map_or(false, |(ident, _)| ident == \"cfg\"))\n+        }\n \n-    /// Determines the containing syntax node in which to insert a `use` statement affecting `position`.\n-    pub fn find_insert_use_container(position: &SyntaxNode) -> Option<Self> {\n-        std::iter::successors(Some(position.clone()), SyntaxNode::parent).find_map(Self::from)\n+        // Walk up the ancestor tree searching for a suitable node to do insertions on\n+        // with special handling on cfg-gated items, in which case we want to insert imports locally\n+        // or FIXME: annotate inserted imports with the same cfg\n+        for syntax in sema.ancestors_with_macros(position.clone()) {\n+            if let Some(file) = ast::SourceFile::cast(syntax.clone()) {\n+                return Some(ImportScope::File(file));\n+            } else if let Some(item) = ast::Item::cast(syntax) {\n+                return match item {\n+                    ast::Item::Const(konst) if contains_cfg_attr(&konst) => {\n+                        // FIXME: Instead of bailing out with None, we should note down that\n+                        // this import needs an attribute added\n+                        match sema.original_ast_node(konst)?.body()? {\n+                            ast::Expr::BlockExpr(block) => block,\n+                            _ => return None,\n+                        }\n+                        .stmt_list()\n+                        .map(ImportScope::Block)\n+                    }\n+                    ast::Item::Fn(func) if contains_cfg_attr(&func) => {\n+                        // FIXME: Instead of bailing out with None, we should note down that\n+                        // this import needs an attribute added\n+                        sema.original_ast_node(func)?.body()?.stmt_list().map(ImportScope::Block)\n+                    }\n+                    ast::Item::Static(statik) if contains_cfg_attr(&statik) => {\n+                        // FIXME: Instead of bailing out with None, we should note down that\n+                        // this import needs an attribute added\n+                        match sema.original_ast_node(statik)?.body()? {\n+                            ast::Expr::BlockExpr(block) => block,\n+                            _ => return None,\n+                        }\n+                        .stmt_list()\n+                        .map(ImportScope::Block)\n+                    }\n+                    ast::Item::Module(module) => {\n+                        // early return is important here, if we can't find the original module\n+                        // in the input there is no way for us to insert an import anywhere.\n+                        sema.original_ast_node(module)?.item_list().map(ImportScope::Module)\n+                    }\n+                    _ => continue,\n+                };\n+            }\n+        }\n+        None\n     }\n \n     pub fn as_syntax_node(&self) -> &SyntaxNode {"}, {"sha": "34a6900e2673e619e33b3983d0fc575decf1b0a2", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8247685cfa09084bd620c0877ea1eb3d605d8a2/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=a8247685cfa09084bd620c0877ea1eb3d605d8a2", "patch": "@@ -1,5 +1,7 @@\n+use base_db::fixture::WithFixture;\n use hir::PrefixKind;\n-use test_utils::{assert_eq_text, extract_range_or_offset, CURSOR_MARKER};\n+use stdx::trim_indent;\n+use test_utils::{assert_eq_text, CURSOR_MARKER};\n \n use super::*;\n \n@@ -865,17 +867,20 @@ fn check_with_config(\n     ra_fixture_after: &str,\n     config: &InsertUseConfig,\n ) {\n-    let (text, pos) = if ra_fixture_before.contains(CURSOR_MARKER) {\n-        let (range_or_offset, text) = extract_range_or_offset(ra_fixture_before);\n-        (text, Some(range_or_offset))\n+    let (db, file_id, pos) = if ra_fixture_before.contains(CURSOR_MARKER) {\n+        let (db, file_id, range_or_offset) = RootDatabase::with_range_or_offset(ra_fixture_before);\n+        (db, file_id, Some(range_or_offset))\n     } else {\n-        (ra_fixture_before.to_owned(), None)\n+        let (db, file_id) = RootDatabase::with_single_file(ra_fixture_before);\n+        (db, file_id, None)\n     };\n-    let syntax = ast::SourceFile::parse(&text).tree().syntax().clone_for_update();\n+    let sema = &Semantics::new(&db);\n+    let source_file = sema.parse(file_id);\n+    let syntax = source_file.syntax().clone_for_update();\n     let file = pos\n         .and_then(|pos| syntax.token_at_offset(pos.expect_offset()).next()?.parent())\n-        .and_then(|it| super::ImportScope::find_insert_use_container(&it))\n-        .or_else(|| super::ImportScope::from(syntax))\n+        .and_then(|it| ImportScope::find_insert_use_container(&it, sema))\n+        .or_else(|| ImportScope::from(syntax))\n         .unwrap();\n     let path = ast::SourceFile::parse(&format!(\"use {};\", path))\n         .tree()\n@@ -886,7 +891,7 @@ fn check_with_config(\n \n     insert_use(&file, path, config);\n     let result = file.as_syntax_node().ancestors().last().unwrap().to_string();\n-    assert_eq_text!(ra_fixture_after, &result);\n+    assert_eq_text!(&trim_indent(ra_fixture_after), &result);\n }\n \n fn check(\n@@ -942,6 +947,6 @@ fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehavior\n \n fn check_guess(ra_fixture: &str, expected: ImportGranularityGuess) {\n     let syntax = ast::SourceFile::parse(ra_fixture).tree().syntax().clone();\n-    let file = super::ImportScope::from(syntax).unwrap();\n+    let file = ImportScope::from(syntax).unwrap();\n     assert_eq!(super::guess_granularity_from_scope(&file), expected);\n }"}]}