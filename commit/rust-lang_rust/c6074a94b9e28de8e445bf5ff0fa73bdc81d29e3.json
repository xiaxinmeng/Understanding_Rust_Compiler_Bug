{"sha": "c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MDc0YTk0YjllMjhkZThlNDQ1YmY1ZmYwZmE3M2JkYzgxZDI5ZTM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-08-31T04:17:11Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-08-31T04:17:11Z"}, "message": "Merge branch 'master' into fix-3078", "tree": {"sha": "af313be2b8d32515facb8e06c452692be3c6063a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af313be2b8d32515facb8e06c452692be3c6063a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3", "html_url": "https://github.com/rust-lang/rust/commit/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/comments", "author": null, "committer": null, "parents": [{"sha": "daacac6b9700bc581c0aced4c4f17b30aa01d15d", "url": "https://api.github.com/repos/rust-lang/rust/commits/daacac6b9700bc581c0aced4c4f17b30aa01d15d", "html_url": "https://github.com/rust-lang/rust/commit/daacac6b9700bc581c0aced4c4f17b30aa01d15d"}, {"sha": "43c629ebac9809749800337e7aa89296d4be332a", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c629ebac9809749800337e7aa89296d4be332a", "html_url": "https://github.com/rust-lang/rust/commit/43c629ebac9809749800337e7aa89296d4be332a"}], "stats": {"total": 328, "additions": 114, "deletions": 214}, "files": [{"sha": "d368b71d9935fa9a1ab577bc3b69b1753f5826e7", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3", "patch": "@@ -59,9 +59,5 @@ derive-new = \"0.5\"\n # for more information.\n rustc-workspace-hack = \"1.0.0\"\n \n-[build-dependencies]\n-rustc_version = \"0.2.2\"\n-ansi_term = \"0.11\"\n-\n [features]\n debugging = []"}, {"sha": "3b9f217c8848fa968dd5a70092ad2284c0f7ad78", "filename": "build.rs", "status": "modified", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3", "patch": "@@ -13,98 +13,11 @@\n //! This build script was originally taken from the Rocket web framework:\n //! https://github.com/SergioBenitez/Rocket\n \n-use ansi_term::Colour::Red;\n-use rustc_version::{version_meta, version_meta_for, Channel, Version, VersionMeta};\n use std::env;\n \n fn main() {\n-    check_rustc_version();\n-\n     // Forward the profile to the main compilation\n     println!(\"cargo:rustc-env=PROFILE={}\", env::var(\"PROFILE\").unwrap());\n     // Don't rebuild even if nothing changed\n     println!(\"cargo:rerun-if-changed=build.rs\");\n }\n-\n-fn check_rustc_version() {\n-    let string = include_str!(\"min_version.txt\");\n-    let min_version_meta = version_meta_for(string).expect(\"Could not parse version string in min_version.txt\");\n-    let current_version_meta = version_meta().expect(\"Could not retrieve current rustc version information from ENV\");\n-\n-    let min_version = min_version_meta.clone().semver;\n-    let min_date_str = min_version_meta\n-        .clone()\n-        .commit_date\n-        .expect(\"min_version.txt does not contain a rustc commit date\");\n-\n-    // Dev channel (rustc built from git) does not have any date or commit information in rustc -vV\n-    // `current_version_meta.commit_date` would crash, so we return early here.\n-    if current_version_meta.channel == Channel::Dev {\n-        return;\n-    }\n-\n-    let current_version = current_version_meta.clone().semver;\n-    let current_date_str = current_version_meta\n-        .clone()\n-        .commit_date\n-        .expect(\"current rustc version information does not contain a rustc commit date\");\n-\n-    let print_version_err = |version: &Version, date: &str| {\n-        eprintln!(\n-            \"> {} {}. {} {}.\\n\",\n-            \"Installed rustc version is:\",\n-            format!(\"{} ({})\", version, date),\n-            \"Minimum required rustc version:\",\n-            format!(\"{} ({})\", min_version, min_date_str)\n-        );\n-    };\n-\n-    if !correct_channel(&current_version_meta) {\n-        eprintln!(\n-            \"\\n{} {}\",\n-            Red.bold().paint(\"error:\"),\n-            \"Clippy requires a nightly version of Rust.\"\n-        );\n-        print_version_err(&current_version, &*current_date_str);\n-        eprintln!(\n-            \"{}{}{}\",\n-            \"See the README (\", \"https://github.com/rust-lang-nursery/rust-clippy#usage\", \") for more information.\"\n-        );\n-        panic!(\"Aborting compilation due to incompatible compiler.\")\n-    }\n-\n-    let current_date = str_to_ymd(&current_date_str).unwrap();\n-    let min_date = str_to_ymd(&min_date_str).unwrap();\n-\n-    if current_date < min_date {\n-        eprintln!(\n-            \"\\n{} {}\",\n-            Red.bold().paint(\"error:\"),\n-            \"Clippy does not support this version of rustc nightly.\"\n-        );\n-        eprintln!(\n-            \"> {}{}{}\",\n-            \"Use `\", \"rustup update\", \"` or your preferred method to update Rust.\"\n-        );\n-        print_version_err(&current_version, &*current_date_str);\n-        panic!(\"Aborting compilation due to incompatible compiler.\")\n-    }\n-}\n-\n-fn correct_channel(version_meta: &VersionMeta) -> bool {\n-    match version_meta.channel {\n-        Channel::Stable | Channel::Beta => false,\n-        Channel::Nightly | Channel::Dev => true,\n-    }\n-}\n-\n-/// Convert a string of %Y-%m-%d to a single u32 maintaining ordering.\n-fn str_to_ymd(ymd: &str) -> Option<u32> {\n-    let ymd: Vec<u32> = ymd.split(\"-\").filter_map(|s| s.parse::<u32>().ok()).collect();\n-    if ymd.len() != 3 {\n-        return None;\n-    }\n-\n-    let (y, m, d) = (ymd[0], ymd[1], ymd[2]);\n-    Some((y << 9) | (m << 5) | d)\n-}"}, {"sha": "84db58b89719002f8ff6b0526c49e02ec19f9add", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3", "patch": "@@ -7,7 +7,6 @@\n #![feature(range_contains)]\n #![allow(unknown_lints, shadow_reuse, missing_docs_in_private_items)]\n #![recursion_limit = \"256\"]\n-#![feature(iterator_find_map)]\n #![feature(macro_at_most_once_rep)]\n #![warn(rust_2018_idioms)]\n \n@@ -635,6 +634,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         question_mark::QUESTION_MARK,\n         ranges::ITERATOR_STEP_BY_ZERO,\n         ranges::RANGE_MINUS_ONE,\n+        ranges::RANGE_PLUS_ONE,\n         ranges::RANGE_ZIP_WITH_LEN,\n         redundant_field_names::REDUNDANT_FIELD_NAMES,\n         reference::DEREF_ADDROF,\n@@ -756,7 +756,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         ptr::CMP_NULL,\n         ptr::PTR_ARG,\n         question_mark::QUESTION_MARK,\n-        ranges::RANGE_MINUS_ONE,\n         redundant_field_names::REDUNDANT_FIELD_NAMES,\n         regex::REGEX_MACRO,\n         regex::TRIVIAL_REGEX,\n@@ -816,6 +815,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n         precedence::PRECEDENCE,\n+        ranges::RANGE_MINUS_ONE,\n+        ranges::RANGE_PLUS_ONE,\n         ranges::RANGE_ZIP_WITH_LEN,\n         reference::DEREF_ADDROF,\n         reference::REF_IN_DEREF,\n@@ -921,7 +922,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         fallible_impl_from::FALLIBLE_IMPL_FROM,\n         mutex_atomic::MUTEX_INTEGER,\n         needless_borrow::NEEDLESS_BORROW,\n-        ranges::RANGE_PLUS_ONE,\n         unwrap::PANICKING_UNWRAP,\n         unwrap::UNNECESSARY_UNWRAP,\n     ]);"}, {"sha": "820e76f886ef48a999757c938e19374cf6ce4e03", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3", "patch": "@@ -21,7 +21,7 @@ use crate::utils::sugg::DiagnosticBuilderExt;\n ///\n /// **Example:**\n ///\n-/// ```rust,ignore\n+/// ```rust\n /// struct Foo(Bar);\n ///\n /// impl Foo {\n@@ -63,7 +63,7 @@ declare_clippy_lint! {\n ///\n /// **Example:**\n ///\n-/// ```rust,ignore\n+/// ```rust\n /// struct Foo;\n ///\n /// impl Foo {"}, {"sha": "ba25e50d7c01d2cf633e8eceed962223e769ac46", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3", "patch": "@@ -57,7 +57,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub RANGE_PLUS_ONE,\n-    nursery,\n+    complexity,\n     \"`x..(y+1)` reads better as `x..=y`\"\n }\n \n@@ -75,7 +75,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub RANGE_MINUS_ONE,\n-    style,\n+    complexity,\n     \"`x..=(y-1)` reads better as `x..y`\"\n }\n "}, {"sha": "bd6a57973fc5a29484ba2305a0575f5bf0dfe498", "filename": "min_version.txt", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/daacac6b9700bc581c0aced4c4f17b30aa01d15d/min_version.txt", "raw_url": "https://github.com/rust-lang/rust/raw/daacac6b9700bc581c0aced4c4f17b30aa01d15d/min_version.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/min_version.txt?ref=daacac6b9700bc581c0aced4c4f17b30aa01d15d", "patch": "@@ -1,7 +0,0 @@\n-rustc 1.28.0-nightly (e3bf634e0 2018-06-28)\n-binary: rustc\n-commit-hash: e3bf634e060bc2f8665878288bcea02008ca346e\n-commit-date: 2018-06-28\n-host: x86_64-unknown-linux-gnu\n-release: 1.28.0-nightly\n-LLVM version: 6.0"}, {"sha": "6854ccbbddc0bada7cc54c58b6d14b6c644e2205", "filename": "src/driver.rs", "status": "modified", "additions": 107, "deletions": 109, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=c6074a94b9e28de8e445bf5ff0fa73bdc81d29e3", "patch": "@@ -13,125 +13,123 @@ fn show_version() {\n }\n \n pub fn main() {\n-    use std::env;\n+    exit(rustc_driver::run(move || {\n+        use std::env;\n \n-    if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n-        show_version();\n-        return;\n-    }\n+        if std::env::args().any(|a| a == \"--version\" || a == \"-V\") {\n+            show_version();\n+            exit(0);\n+        }\n \n-    let sys_root = option_env!(\"SYSROOT\")\n-        .map(String::from)\n-        .or_else(|| std::env::var(\"SYSROOT\").ok())\n-        .or_else(|| {\n-            let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-            let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-            home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n-        })\n-        .or_else(|| {\n-            Command::new(\"rustc\")\n-                .arg(\"--print\")\n-                .arg(\"sysroot\")\n-                .output()\n-                .ok()\n-                .and_then(|out| String::from_utf8(out.stdout).ok())\n-                .map(|s| s.trim().to_owned())\n-        })\n-        .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n+        let sys_root = option_env!(\"SYSROOT\")\n+            .map(String::from)\n+            .or_else(|| std::env::var(\"SYSROOT\").ok())\n+            .or_else(|| {\n+                let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+                let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+                home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n+            })\n+            .or_else(|| {\n+                Command::new(\"rustc\")\n+                    .arg(\"--print\")\n+                    .arg(\"sysroot\")\n+                    .output()\n+                    .ok()\n+                    .and_then(|out| String::from_utf8(out.stdout).ok())\n+                    .map(|s| s.trim().to_owned())\n+            })\n+            .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n-    // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n-    // We're invoking the compiler programmatically, so we ignore this/\n-    let mut orig_args: Vec<String> = env::args().collect();\n-    if orig_args.len() <= 1 {\n-        std::process::exit(1);\n-    }\n-    if orig_args[1] == \"rustc\" {\n-        // we still want to be able to invoke it normally though\n-        orig_args.remove(1);\n-    }\n-    // this conditional check for the --sysroot flag is there so users can call\n-    // `clippy_driver` directly\n-    // without having to pass --sysroot or anything\n-    let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n-        orig_args.clone()\n-    } else {\n-        orig_args\n-            .clone()\n-            .into_iter()\n-            .chain(Some(\"--sysroot\".to_owned()))\n-            .chain(Some(sys_root))\n-            .collect()\n-    };\n+        // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n+        // We're invoking the compiler programmatically, so we ignore this/\n+        let mut orig_args: Vec<String> = env::args().collect();\n+        if orig_args.len() <= 1 {\n+            std::process::exit(1);\n+        }\n+        if orig_args[1] == \"rustc\" {\n+            // we still want to be able to invoke it normally though\n+            orig_args.remove(1);\n+        }\n+        // this conditional check for the --sysroot flag is there so users can call\n+        // `clippy_driver` directly\n+        // without having to pass --sysroot or anything\n+        let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n+            orig_args.clone()\n+        } else {\n+            orig_args\n+                .clone()\n+                .into_iter()\n+                .chain(Some(\"--sysroot\".to_owned()))\n+                .chain(Some(sys_root))\n+                .collect()\n+        };\n \n-    // this check ensures that dependencies are built but not linted and the final\n-    // crate is\n-    // linted but not built\n-    let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n-        || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n+        // this check ensures that dependencies are built but not linted and the final\n+        // crate is\n+        // linted but not built\n+        let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n+            || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n \n-    if clippy_enabled {\n-        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n-        if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n-            args.extend(\n-                extra_args\n-                    .split(\"__CLIPPY_HACKERY__\")\n-                    .filter(|s| !s.is_empty())\n-                    .map(str::to_owned),\n-            );\n+        if clippy_enabled {\n+            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+            if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n+                args.extend(\n+                    extra_args\n+                        .split(\"__CLIPPY_HACKERY__\")\n+                        .filter(|s| !s.is_empty())\n+                        .map(str::to_owned),\n+                );\n+            }\n         }\n-    }\n \n-    let mut controller = CompileController::basic();\n-    if clippy_enabled {\n-        controller.after_parse.callback = Box::new(move |state| {\n-            let mut registry = rustc_plugin::registry::Registry::new(\n-                state.session,\n-                state\n-                    .krate\n-                    .as_ref()\n-                    .expect(\n-                        \"at this compilation stage \\\n-                         the crate must be parsed\",\n-                    )\n-                    .span,\n-            );\n-            registry.args_hidden = Some(Vec::new());\n+        let mut controller = CompileController::basic();\n+        if clippy_enabled {\n+            controller.after_parse.callback = Box::new(move |state| {\n+                let mut registry = rustc_plugin::registry::Registry::new(\n+                    state.session,\n+                    state\n+                        .krate\n+                        .as_ref()\n+                        .expect(\n+                            \"at this compilation stage \\\n+                            the crate must be parsed\",\n+                        )\n+                        .span,\n+                );\n+                registry.args_hidden = Some(Vec::new());\n \n-            let conf = clippy_lints::read_conf(&registry);\n-            clippy_lints::register_plugins(&mut registry, &conf);\n+                let conf = clippy_lints::read_conf(&registry);\n+                clippy_lints::register_plugins(&mut registry, &conf);\n \n-            let rustc_plugin::registry::Registry {\n-                early_lint_passes,\n-                late_lint_passes,\n-                lint_groups,\n-                llvm_passes,\n-                attributes,\n-                ..\n-            } = registry;\n-            let sess = &state.session;\n-            let mut ls = sess.lint_store.borrow_mut();\n-            for pass in early_lint_passes {\n-                ls.register_early_pass(Some(sess), true, pass);\n-            }\n-            for pass in late_lint_passes {\n-                ls.register_late_pass(Some(sess), true, pass);\n-            }\n+                let rustc_plugin::registry::Registry {\n+                    early_lint_passes,\n+                    late_lint_passes,\n+                    lint_groups,\n+                    llvm_passes,\n+                    attributes,\n+                    ..\n+                } = registry;\n+                let sess = &state.session;\n+                let mut ls = sess.lint_store.borrow_mut();\n+                for pass in early_lint_passes {\n+                    ls.register_early_pass(Some(sess), true, pass);\n+                }\n+                for pass in late_lint_passes {\n+                    ls.register_late_pass(Some(sess), true, pass);\n+                }\n \n-            for (name, to) in lint_groups {\n-                ls.register_group(Some(sess), true, name, to);\n-            }\n-            clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n+                for (name, to) in lint_groups {\n+                    ls.register_group(Some(sess), true, name, to);\n+                }\n+                clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n \n-            sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n-            sess.plugin_attributes.borrow_mut().extend(attributes);\n-        });\n-    }\n-    controller.compilation_done.stop = Compilation::Stop;\n+                sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n+                sess.plugin_attributes.borrow_mut().extend(attributes);\n+            });\n+        }\n+        controller.compilation_done.stop = Compilation::Stop;\n \n-    if rustc_driver::run_compiler(&args, Box::new(controller), None, None)\n-        .0\n-        .is_err()\n-    {\n-        exit(101);\n-    }\n+        let args = args;\n+        rustc_driver::run_compiler(&args, Box::new(controller), None, None)\n+    }) as i32)\n }"}]}