{"sha": "54d0f50677660874d4efa70df7f87bc00bda9eaf", "node_id": "C_kwDOAAsO6NoAKDU0ZDBmNTA2Nzc2NjA4NzRkNGVmYTcwZGY3Zjg3YmMwMGJkYTllYWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-23T04:55:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-23T04:55:24Z"}, "message": "Rollup merge of #100565 - TaKO8Ki:suggest-adding-missing-semicolon-before-item, r=compiler-errors\n\nSuggest adding a missing semicolon before an item\n\nfixes #100533", "tree": {"sha": "a9d6f3195bf9d5ee3de9bfd22808cccc0464d8f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9d6f3195bf9d5ee3de9bfd22808cccc0464d8f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54d0f50677660874d4efa70df7f87bc00bda9eaf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBF28CRBK7hj4Ov3rIwAAoiUIACh5i16RzTtOON1g2wT8llBe\n+ASFMqtAb55N1JxxfmJx15tEHoYm6q6FmQLSspvLV2WcqvUBEhq54HtU/A4usVzu\nFyaniAILq83VStmpLZDBXhpRBIvCxhS8L26OXcV6O0T606fgRPKRSWqfWzR1RQKA\nYgJQB3oMjebpFQL9yOFrDZOyDFN4pSlpRS15XvG7UL8T9BPJ5hnISXXOvVTp/2+q\nwQwc1pgfSvfWPRBqLaXInnrJQ88p1jAWmvJlbmL/hF42F/wrEWG/njzsoeqKeEY1\nTkhbTKj8TFXUB0KZVhG5C5y5Sqo8ReGeYkY6U4+gFENnur5AiWKw2PbTvEwBgE0=\n=jFux\n-----END PGP SIGNATURE-----\n", "payload": "tree a9d6f3195bf9d5ee3de9bfd22808cccc0464d8f3\nparent e568cb45fefd580cb22f3ae0ed45f8598ba7cda1\nparent 40dcf89a26bde41734f6c3eb71d9eb6420e45ef8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661230524 +0200\ncommitter GitHub <noreply@github.com> 1661230524 +0200\n\nRollup merge of #100565 - TaKO8Ki:suggest-adding-missing-semicolon-before-item, r=compiler-errors\n\nSuggest adding a missing semicolon before an item\n\nfixes #100533\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54d0f50677660874d4efa70df7f87bc00bda9eaf", "html_url": "https://github.com/rust-lang/rust/commit/54d0f50677660874d4efa70df7f87bc00bda9eaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54d0f50677660874d4efa70df7f87bc00bda9eaf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e568cb45fefd580cb22f3ae0ed45f8598ba7cda1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1", "html_url": "https://github.com/rust-lang/rust/commit/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1"}, {"sha": "40dcf89a26bde41734f6c3eb71d9eb6420e45ef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/40dcf89a26bde41734f6c3eb71d9eb6420e45ef8", "html_url": "https://github.com/rust-lang/rust/commit/40dcf89a26bde41734f6c3eb71d9eb6420e45ef8"}], "stats": {"total": 235, "additions": 233, "deletions": 2}, "files": [{"sha": "dd98946b4cc5e8833b77f64645702d26cde6f5a1", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/54d0f50677660874d4efa70df7f87bc00bda9eaf/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d0f50677660874d4efa70df7f87bc00bda9eaf/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=54d0f50677660874d4efa70df7f87bc00bda9eaf", "patch": "@@ -436,6 +436,30 @@ impl Token {\n             || self == &OpenDelim(Delimiter::Parenthesis)\n     }\n \n+    /// Returns `true` if the token can appear at the start of an item.\n+    pub fn can_begin_item(&self) -> bool {\n+        match self.kind {\n+            Ident(name, _) => [\n+                kw::Fn,\n+                kw::Use,\n+                kw::Struct,\n+                kw::Enum,\n+                kw::Pub,\n+                kw::Trait,\n+                kw::Extern,\n+                kw::Impl,\n+                kw::Unsafe,\n+                kw::Static,\n+                kw::Union,\n+                kw::Macro,\n+                kw::Mod,\n+                kw::Type,\n+            ]\n+            .contains(&name),\n+            _ => false,\n+        }\n+    }\n+\n     /// Returns `true` if the token is any literal.\n     pub fn is_lit(&self) -> bool {\n         matches!(self.kind, Literal(..))"}, {"sha": "b8884dd32d621c5fa1faa01fc43de9000b68c60a", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54d0f50677660874d4efa70df7f87bc00bda9eaf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d0f50677660874d4efa70df7f87bc00bda9eaf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=54d0f50677660874d4efa70df7f87bc00bda9eaf", "patch": "@@ -927,10 +927,12 @@ impl<'a> Parser<'a> {\n                 return Ok(true);\n             } else if self.look_ahead(0, |t| {\n                 t == &token::CloseDelim(Delimiter::Brace)\n-                    || (t.can_begin_expr() && t != &token::Semi && t != &token::Pound)\n+                    || ((t.can_begin_expr() || t.can_begin_item())\n+                        && t != &token::Semi\n+                        && t != &token::Pound)\n                     // Avoid triggering with too many trailing `#` in raw string.\n                     || (sm.is_multiline(\n-                        self.prev_token.span.shrink_to_hi().until(self.token.span.shrink_to_lo())\n+                        self.prev_token.span.shrink_to_hi().until(self.token.span.shrink_to_lo()),\n                     ) && t == &token::Pound)\n             }) && !expected.contains(&TokenType::Token(token::Comma))\n             {"}, {"sha": "0be17e69e8ff72fe0add93c5476b1cb0ed90e3a8", "filename": "src/test/ui/parser/recover-missing-semi-before-item.fixed", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/54d0f50677660874d4efa70df7f87bc00bda9eaf/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi-before-item.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/54d0f50677660874d4efa70df7f87bc00bda9eaf/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi-before-item.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi-before-item.fixed?ref=54d0f50677660874d4efa70df7f87bc00bda9eaf", "patch": "@@ -0,0 +1,61 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, dead_code)]\n+\n+fn for_struct() {\n+    let foo = 3; //~ ERROR expected `;`, found keyword `struct`\n+    struct Foo;\n+}\n+\n+fn for_union() {\n+    let foo = 3; //~ ERROR expected `;`, found `union`\n+    union Foo {\n+        foo: usize,\n+    }\n+}\n+\n+fn for_enum() {\n+    let foo = 3; //~ ERROR expected `;`, found keyword `enum`\n+    enum Foo {\n+        Bar,\n+    }\n+}\n+\n+fn for_fn() {\n+    let foo = 3; //~ ERROR expected `;`, found keyword `fn`\n+    fn foo() {}\n+}\n+\n+fn for_extern() {\n+    let foo = 3; //~ ERROR expected `;`, found keyword `extern`\n+    extern fn foo() {}\n+}\n+\n+fn for_impl() {\n+    struct Foo;\n+    let foo = 3; //~ ERROR expected `;`, found keyword `impl`\n+    impl Foo {}\n+}\n+\n+fn for_use() {\n+    let foo = 3; //~ ERROR expected `;`, found keyword `pub`\n+    pub use bar::Bar;\n+}\n+\n+fn for_mod() {\n+    let foo = 3; //~ ERROR expected `;`, found keyword `mod`\n+    mod foo {}\n+}\n+\n+fn for_type() {\n+    let foo = 3; //~ ERROR expected `;`, found keyword `type`\n+    type Foo = usize;\n+}\n+\n+mod bar {\n+    pub struct Bar;\n+}\n+\n+const X: i32 = 123; //~ ERROR expected `;`, found keyword `fn`\n+\n+fn main() {}"}, {"sha": "867b7b749bb1f318a99cdeeb5b4df3f314dcc569", "filename": "src/test/ui/parser/recover-missing-semi-before-item.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/54d0f50677660874d4efa70df7f87bc00bda9eaf/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi-before-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d0f50677660874d4efa70df7f87bc00bda9eaf/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi-before-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi-before-item.rs?ref=54d0f50677660874d4efa70df7f87bc00bda9eaf", "patch": "@@ -0,0 +1,61 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, dead_code)]\n+\n+fn for_struct() {\n+    let foo = 3 //~ ERROR expected `;`, found keyword `struct`\n+    struct Foo;\n+}\n+\n+fn for_union() {\n+    let foo = 3 //~ ERROR expected `;`, found `union`\n+    union Foo {\n+        foo: usize,\n+    }\n+}\n+\n+fn for_enum() {\n+    let foo = 3 //~ ERROR expected `;`, found keyword `enum`\n+    enum Foo {\n+        Bar,\n+    }\n+}\n+\n+fn for_fn() {\n+    let foo = 3 //~ ERROR expected `;`, found keyword `fn`\n+    fn foo() {}\n+}\n+\n+fn for_extern() {\n+    let foo = 3 //~ ERROR expected `;`, found keyword `extern`\n+    extern fn foo() {}\n+}\n+\n+fn for_impl() {\n+    struct Foo;\n+    let foo = 3 //~ ERROR expected `;`, found keyword `impl`\n+    impl Foo {}\n+}\n+\n+fn for_use() {\n+    let foo = 3 //~ ERROR expected `;`, found keyword `pub`\n+    pub use bar::Bar;\n+}\n+\n+fn for_mod() {\n+    let foo = 3 //~ ERROR expected `;`, found keyword `mod`\n+    mod foo {}\n+}\n+\n+fn for_type() {\n+    let foo = 3 //~ ERROR expected `;`, found keyword `type`\n+    type Foo = usize;\n+}\n+\n+mod bar {\n+    pub struct Bar;\n+}\n+\n+const X: i32 = 123 //~ ERROR expected `;`, found keyword `fn`\n+\n+fn main() {}"}, {"sha": "61c43f2f189989a2bf9a3ca99d32832da7fb0916", "filename": "src/test/ui/parser/recover-missing-semi-before-item.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/54d0f50677660874d4efa70df7f87bc00bda9eaf/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi-before-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54d0f50677660874d4efa70df7f87bc00bda9eaf/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi-before-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi-before-item.stderr?ref=54d0f50677660874d4efa70df7f87bc00bda9eaf", "patch": "@@ -0,0 +1,83 @@\n+error: expected `;`, found keyword `struct`\n+  --> $DIR/recover-missing-semi-before-item.rs:6:16\n+   |\n+LL |     let foo = 3\n+   |                ^ help: add `;` here\n+LL |     struct Foo;\n+   |     ------ unexpected token\n+\n+error: expected `;`, found `union`\n+  --> $DIR/recover-missing-semi-before-item.rs:11:16\n+   |\n+LL |     let foo = 3\n+   |                ^ help: add `;` here\n+LL |     union Foo {\n+   |     ----- unexpected token\n+\n+error: expected `;`, found keyword `enum`\n+  --> $DIR/recover-missing-semi-before-item.rs:18:16\n+   |\n+LL |     let foo = 3\n+   |                ^ help: add `;` here\n+LL |     enum Foo {\n+   |     ---- unexpected token\n+\n+error: expected `;`, found keyword `fn`\n+  --> $DIR/recover-missing-semi-before-item.rs:25:16\n+   |\n+LL |     let foo = 3\n+   |                ^ help: add `;` here\n+LL |     fn foo() {}\n+   |     -- unexpected token\n+\n+error: expected `;`, found keyword `extern`\n+  --> $DIR/recover-missing-semi-before-item.rs:30:16\n+   |\n+LL |     let foo = 3\n+   |                ^ help: add `;` here\n+LL |     extern fn foo() {}\n+   |     ------ unexpected token\n+\n+error: expected `;`, found keyword `impl`\n+  --> $DIR/recover-missing-semi-before-item.rs:36:16\n+   |\n+LL |     let foo = 3\n+   |                ^ help: add `;` here\n+LL |     impl Foo {}\n+   |     ---- unexpected token\n+\n+error: expected `;`, found keyword `pub`\n+  --> $DIR/recover-missing-semi-before-item.rs:41:16\n+   |\n+LL |     let foo = 3\n+   |                ^ help: add `;` here\n+LL |     pub use bar::Bar;\n+   |     --- unexpected token\n+\n+error: expected `;`, found keyword `mod`\n+  --> $DIR/recover-missing-semi-before-item.rs:46:16\n+   |\n+LL |     let foo = 3\n+   |                ^ help: add `;` here\n+LL |     mod foo {}\n+   |     --- unexpected token\n+\n+error: expected `;`, found keyword `type`\n+  --> $DIR/recover-missing-semi-before-item.rs:51:16\n+   |\n+LL |     let foo = 3\n+   |                ^ help: add `;` here\n+LL |     type Foo = usize;\n+   |     ---- unexpected token\n+\n+error: expected `;`, found keyword `fn`\n+  --> $DIR/recover-missing-semi-before-item.rs:59:19\n+   |\n+LL | const X: i32 = 123\n+   |                   ^ help: add `;` here\n+LL |\n+LL | fn main() {}\n+   | -- unexpected token\n+\n+error: aborting due to 10 previous errors\n+"}]}