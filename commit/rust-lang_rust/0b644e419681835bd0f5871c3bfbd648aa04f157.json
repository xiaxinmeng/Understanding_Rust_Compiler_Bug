{"sha": "0b644e419681835bd0f5871c3bfbd648aa04f157", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNjQ0ZTQxOTY4MTgzNWJkMGY1ODcxYzNiZmJkNjQ4YWEwNGYxNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-26T19:43:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-26T19:43:12Z"}, "message": "Auto merge of #79045 - oli-obk:dont_rely_on_alloc_happening_for_soundness, r=TimDiekmann\n\nDocument that heap allocations are not guaranteed to happen, even if explicitly performed in the code\n\ncc `@RalfJung`", "tree": {"sha": "b2c3d8c89624362a71434a8bda4aaaeaf63b18fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2c3d8c89624362a71434a8bda4aaaeaf63b18fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b644e419681835bd0f5871c3bfbd648aa04f157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b644e419681835bd0f5871c3bfbd648aa04f157", "html_url": "https://github.com/rust-lang/rust/commit/0b644e419681835bd0f5871c3bfbd648aa04f157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b644e419681835bd0f5871c3bfbd648aa04f157/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89524d0f8e28080197a85e06d143b7d6f131b67e", "url": "https://api.github.com/repos/rust-lang/rust/commits/89524d0f8e28080197a85e06d143b7d6f131b67e", "html_url": "https://github.com/rust-lang/rust/commit/89524d0f8e28080197a85e06d143b7d6f131b67e"}, {"sha": "efcd8a96c469bf7b9eb3bb302217d7b9fa749968", "url": "https://api.github.com/repos/rust-lang/rust/commits/efcd8a96c469bf7b9eb3bb302217d7b9fa749968", "html_url": "https://github.com/rust-lang/rust/commit/efcd8a96c469bf7b9eb3bb302217d7b9fa749968"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "6ec0f0b5ffc5b6200d0b0d23f9c3160da582eeb0", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0b644e419681835bd0f5871c3bfbd648aa04f157/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b644e419681835bd0f5871c3bfbd648aa04f157/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=0b644e419681835bd0f5871c3bfbd648aa04f157", "patch": "@@ -53,6 +53,27 @@ use crate::ptr;\n /// * `Layout` queries and calculations in general must be correct. Callers of\n ///   this trait are allowed to rely on the contracts defined on each method,\n ///   and implementors must ensure such contracts remain true.\n+///\n+/// * You may not rely on allocations actually happening, even if there are explicit\n+///   heap allocations in the source. The optimizer may detect unused allocations that it can either\n+///   eliminate entirely or move to the stack and thus never invoke the allocator. The\n+///   optimizer may further assume that allocation is infallible, so code that used to fail due\n+///   to allocator failures may now suddenly work because the optimizer worked around the\n+///   need for an allocation. More concretely, the following code example is unsound, irrespective\n+///   of whether your custom allocator allows counting how many allocations have happened.\n+///\n+///   ```rust,ignore (unsound and has placeholders)\n+///   drop(Box::new(42));\n+///   let number_of_heap_allocs = /* call private allocator API */;\n+///   unsafe { std::intrinsics::assume(number_of_heap_allocs > 0); }\n+///   ```\n+///\n+///   Note that the optimizations mentioned above are not the only\n+///   optimization that can be applied. You may generally not rely on heap allocations\n+///   happening if they can be removed without changing program behavior.\n+///   Whether allocations happen or not is not part of the program behavior, even if it\n+///   could be detected via an allocator that tracks allocations by printing or otherwise\n+///   having side effects.\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n pub unsafe trait GlobalAlloc {\n     /// Allocate memory as described by the given `layout`."}]}