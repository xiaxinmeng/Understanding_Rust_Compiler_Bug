{"sha": "5237c4d83db0a04a0119918b174ee642acd82d9c", "node_id": "C_kwDOAAsO6NoAKDUyMzdjNGQ4M2RiMGEwNGEwMTE5OTE4YjE3NGVlNjQyYWNkODJkOWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T12:52:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T12:52:17Z"}, "message": "Auto merge of #102674 - CastilloDel:master, r=oli-obk\n\nRemove allow(rustc::potential_query_instability) in rustc_const_eval\n\nThe use of FxHashMap has been replaced with FxIndexMap.\n\nRelated to #84447", "tree": {"sha": "a5792342e3e1ad18e0b741a0f548888beccfcbde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5792342e3e1ad18e0b741a0f548888beccfcbde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5237c4d83db0a04a0119918b174ee642acd82d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5237c4d83db0a04a0119918b174ee642acd82d9c", "html_url": "https://github.com/rust-lang/rust/commit/5237c4d83db0a04a0119918b174ee642acd82d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5237c4d83db0a04a0119918b174ee642acd82d9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ef10019fd3be6e03afb4b213368f4af1917f9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ef10019fd3be6e03afb4b213368f4af1917f9b", "html_url": "https://github.com/rust-lang/rust/commit/a9ef10019fd3be6e03afb4b213368f4af1917f9b"}, {"sha": "c3a1ca6be72dc676e585657983c48b8cd3048b0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a1ca6be72dc676e585657983c48b8cd3048b0c", "html_url": "https://github.com/rust-lang/rust/commit/c3a1ca6be72dc676e585657983c48b8cd3048b0c"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "35d58d2f638bfceb56d3699deba074b0c8bcc76c", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5237c4d83db0a04a0119918b174ee642acd82d9c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5237c4d83db0a04a0119918b174ee642acd82d9c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=5237c4d83db0a04a0119918b174ee642acd82d9c", "patch": "@@ -2,10 +2,10 @@ use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::borrow::Borrow;\n-use std::collections::hash_map::Entry;\n use std::hash::Hash;\n \n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexMap;\n+use rustc_data_structures::fx::IndexEntry;\n use std::fmt;\n \n use rustc_ast::Mutability;\n@@ -107,26 +107,26 @@ impl<'mir, 'tcx> CompileTimeInterpreter<'mir, 'tcx> {\n     }\n }\n \n-impl<K: Hash + Eq, V> interpret::AllocMap<K, V> for FxHashMap<K, V> {\n+impl<K: Hash + Eq, V> interpret::AllocMap<K, V> for FxIndexMap<K, V> {\n     #[inline(always)]\n     fn contains_key<Q: ?Sized + Hash + Eq>(&mut self, k: &Q) -> bool\n     where\n         K: Borrow<Q>,\n     {\n-        FxHashMap::contains_key(self, k)\n+        FxIndexMap::contains_key(self, k)\n     }\n \n     #[inline(always)]\n     fn insert(&mut self, k: K, v: V) -> Option<V> {\n-        FxHashMap::insert(self, k, v)\n+        FxIndexMap::insert(self, k, v)\n     }\n \n     #[inline(always)]\n     fn remove<Q: ?Sized + Hash + Eq>(&mut self, k: &Q) -> Option<V>\n     where\n         K: Borrow<Q>,\n     {\n-        FxHashMap::remove(self, k)\n+        FxIndexMap::remove(self, k)\n     }\n \n     #[inline(always)]\n@@ -148,8 +148,8 @@ impl<K: Hash + Eq, V> interpret::AllocMap<K, V> for FxHashMap<K, V> {\n     #[inline(always)]\n     fn get_mut_or<E>(&mut self, k: K, vacant: impl FnOnce() -> Result<V, E>) -> Result<&mut V, E> {\n         match self.entry(k) {\n-            Entry::Occupied(e) => Ok(e.into_mut()),\n-            Entry::Vacant(e) => {\n+            IndexEntry::Occupied(e) => Ok(e.into_mut()),\n+            IndexEntry::Vacant(e) => {\n                 let v = vacant()?;\n                 Ok(e.insert(v))\n             }"}, {"sha": "fda2a1490968162d3cd3982131e8b9a3767ed24f", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5237c4d83db0a04a0119918b174ee642acd82d9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5237c4d83db0a04a0119918b174ee642acd82d9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=5237c4d83db0a04a0119918b174ee642acd82d9c", "patch": "@@ -15,7 +15,7 @@\n //! that contains allocations whose mutability we cannot identify.)\n \n use super::validity::RefTracking;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_middle::mir::interpret::InterpResult;\n@@ -37,7 +37,7 @@ pub trait CompileTimeMachine<'mir, 'tcx, T> = Machine<\n     ExtraFnVal = !,\n     FrameExtra = (),\n     AllocExtra = (),\n-    MemoryMap = FxHashMap<AllocId, (MemoryKind<T>, Allocation)>,\n+    MemoryMap = FxIndexMap<AllocId, (MemoryKind<T>, Allocation)>,\n >;\n \n struct InternVisitor<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>> {\n@@ -47,7 +47,7 @@ struct InternVisitor<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_ev\n     ref_tracking: &'rt mut RefTracking<(MPlaceTy<'tcx>, InternMode)>,\n     /// A list of all encountered allocations. After type-based interning, we traverse this list to\n     /// also intern allocations that are only referenced by a raw pointer or inside a union.\n-    leftover_allocations: &'rt mut FxHashSet<AllocId>,\n+    leftover_allocations: &'rt mut FxIndexSet<AllocId>,\n     /// The root kind of the value that we're looking at. This field is never mutated for a\n     /// particular allocation. It is primarily used to make as many allocations as possible\n     /// read-only so LLVM can place them in const memory.\n@@ -79,7 +79,7 @@ struct IsStaticOrFn;\n /// to account for (e.g. for vtables).\n fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>(\n     ecx: &'rt mut InterpCx<'mir, 'tcx, M>,\n-    leftover_allocations: &'rt mut FxHashSet<AllocId>,\n+    leftover_allocations: &'rt mut FxIndexSet<AllocId>,\n     alloc_id: AllocId,\n     mode: InternMode,\n     ty: Option<Ty<'tcx>>,\n@@ -355,7 +355,7 @@ pub fn intern_const_alloc_recursive<\n     // `leftover_allocations` collects *all* allocations we see, because some might not\n     // be available in a typed way. They get interned at the end.\n     let mut ref_tracking = RefTracking::empty();\n-    let leftover_allocations = &mut FxHashSet::default();\n+    let leftover_allocations = &mut FxIndexSet::default();\n \n     // start with the outermost allocation\n     intern_shallow("}, {"sha": "351152eba01f6ae219c2034ff8ffacb37b0ca054", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5237c4d83db0a04a0119918b174ee642acd82d9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5237c4d83db0a04a0119918b174ee642acd82d9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=5237c4d83db0a04a0119918b174ee642acd82d9c", "patch": "@@ -426,7 +426,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     type ExtraFnVal = !;\n \n     type MemoryMap =\n-        rustc_data_structures::fx::FxHashMap<AllocId, (MemoryKind<Self::MemoryKind>, Allocation)>;\n+        rustc_data_structures::fx::FxIndexMap<AllocId, (MemoryKind<Self::MemoryKind>, Allocation)>;\n     const GLOBAL_KIND: Option<Self::MemoryKind> = None; // no copying of globals from `tcx` to machine memory\n \n     type AllocExtra = ();"}, {"sha": "443c01fdb90c6d474658ab38a417a2e5a6e2665b", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5237c4d83db0a04a0119918b174ee642acd82d9c/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5237c4d83db0a04a0119918b174ee642acd82d9c/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=5237c4d83db0a04a0119918b174ee642acd82d9c", "patch": "@@ -22,7 +22,6 @@ Rust MIR: a lowered representation of Rust.\n #![feature(yeet_expr)]\n #![feature(is_some_and)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}]}