{"sha": "3903ca197e55f209b2415e566b4b8f407f6fe899", "node_id": "C_kwDOAAsO6NoAKDM5MDNjYTE5N2U1NWYyMDliMjQxNWU1NjZiNGI4ZjQwN2Y2ZmU4OTk", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-01-28T19:12:17Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-01-28T19:24:13Z"}, "message": "rustdoc: load the set of in-scope traits for modules with no docstring\n\nFixes #93428\n\nThis fix is a response to a couple of special cases related to the\n`module_id`, which is eventually used for trait candidates:\n\n  * The module id is always set to the current crate, when checking `crate::`.\n\n    Normally, the set of in-scope traits would be set in `load_links_in_attrs`,\n    but if there are no doc comments, then that loop will never run.\n\n  * the module id is set to the parent module, when resolving a module\n    that is spelled like this:\n\n        // Notice how we use an outlined doc comment here!\n        // [`Test::my_fn`]\n        mod something {\n        }\n\n    As with the above problem with `crate::`, we need to make sure the\n    module gets its traits in scope resolved, even if it has no doc comments\n    of its own.", "tree": {"sha": "943b210e4fefdd8e39651121e881deb492a9a67e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943b210e4fefdd8e39651121e881deb492a9a67e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3903ca197e55f209b2415e566b4b8f407f6fe899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3903ca197e55f209b2415e566b4b8f407f6fe899", "html_url": "https://github.com/rust-lang/rust/commit/3903ca197e55f209b2415e566b4b8f407f6fe899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3903ca197e55f209b2415e566b4b8f407f6fe899/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427eba2f0bacdeaebc992a78eb2889564de7d7cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/427eba2f0bacdeaebc992a78eb2889564de7d7cf", "html_url": "https://github.com/rust-lang/rust/commit/427eba2f0bacdeaebc992a78eb2889564de7d7cf"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "86662ebaaca215505d5baaddb3de1bd8b7a45306", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3903ca197e55f209b2415e566b4b8f407f6fe899/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3903ca197e55f209b2415e566b4b8f407f6fe899/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=3903ca197e55f209b2415e566b4b8f407f6fe899", "patch": "@@ -920,6 +920,7 @@ fn trait_assoc_to_impl_assoc_item<'tcx>(\n ///\n /// NOTE: this cannot be a query because more traits could be available when more crates are compiled!\n /// So it is not stable to serialize cross-crate.\n+#[instrument(level = \"debug\", skip(cx))]\n fn trait_impls_for<'a>(\n     cx: &mut DocContext<'a>,\n     ty: Ty<'a>,"}, {"sha": "edd4e9da66d99043010da3582f9a6163278b457d", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3903ca197e55f209b2415e566b4b8f407f6fe899/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3903ca197e55f209b2415e566b4b8f407f6fe899/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=3903ca197e55f209b2415e566b4b8f407f6fe899", "patch": "@@ -32,6 +32,11 @@ crate fn early_resolve_intra_doc_links(\n         all_trait_impls: Default::default(),\n     };\n \n+    // Because of the `crate::` prefix, any doc comment can reference\n+    // the crate root's set of in-scope traits. This line makes sure\n+    // it's available.\n+    loader.add_traits_in_scope(CRATE_DEF_ID.to_def_id());\n+\n     // Overridden `visit_item` below doesn't apply to the crate root,\n     // so we have to visit its attributes and reexports separately.\n     loader.load_links_in_attrs(&krate.attrs, krate.span);\n@@ -180,6 +185,11 @@ impl Visitor<'_> for IntraLinkCrateLoader<'_, '_> {\n         if let ItemKind::Mod(..) = item.kind {\n             let old_mod = mem::replace(&mut self.current_mod, self.resolver.local_def_id(item.id));\n \n+            // A module written with a outline doc comments will resolve traits relative\n+            // to the parent module. Make sure the parent module's traits-in-scope are\n+            // loaded, even if the module itself has no doc comments.\n+            self.add_traits_in_parent_scope(self.current_mod.to_def_id());\n+\n             self.load_links_in_attrs(&item.attrs, item.span);\n             self.process_module_children_or_reexports(self.current_mod.to_def_id());\n             visit::walk_item(self, item);"}, {"sha": "bacbcabfc6009a6cf76df43577b970ff8fe7bd12", "filename": "src/test/rustdoc/intra-doc/crate-relative.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3903ca197e55f209b2415e566b4b8f407f6fe899/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3903ca197e55f209b2415e566b4b8f407f6fe899/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative.rs?ref=3903ca197e55f209b2415e566b4b8f407f6fe899", "patch": "@@ -0,0 +1,13 @@\n+pub struct Test<'a> {\n+    data: &'a (),\n+}\n+\n+impl<'a> Test<'a> {\n+    pub fn do_test(&self) {}\n+}\n+\n+// @has crate_relative/demo/index.html\n+// @has - '//a/@href' '../struct.Test.html#method.do_test'\n+pub mod demo {\n+    //! [`crate::Test::do_test`]\n+}"}, {"sha": "49d3399b972f5c83a8815cf7372cff82fe5d9c9e", "filename": "src/test/rustdoc/intra-doc/mod-relative.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3903ca197e55f209b2415e566b4b8f407f6fe899/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-relative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3903ca197e55f209b2415e566b4b8f407f6fe899/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-relative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-relative.rs?ref=3903ca197e55f209b2415e566b4b8f407f6fe899", "patch": "@@ -0,0 +1,17 @@\n+pub mod wrapper {\n+\n+    pub struct Test<'a> {\n+        data: &'a (),\n+    }\n+\n+    impl<'a> Test<'a> {\n+        pub fn do_test(&self) {}\n+    }\n+\n+    // @has mod_relative/wrapper/demo/index.html\n+    // @has - '//a/@href' '../struct.Test.html#method.do_test'\n+    /// [`Test::do_test`]\n+    pub mod demo {\n+    }\n+\n+}"}]}