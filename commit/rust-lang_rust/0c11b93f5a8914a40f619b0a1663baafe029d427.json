{"sha": "0c11b93f5a8914a40f619b0a1663baafe029d427", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMTFiOTNmNWE4OTE0YTQwZjYxOWIwYTE2NjNiYWFmZTAyOWQ0Mjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-20T00:50:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-20T00:50:46Z"}, "message": "Auto merge of #79635 - lcnr:const-eval-idk, r=oli-obk\n\nconst_evaluatable_checked: fix occurs check\n\nfixes #79615\n\nthis is kind of a hack because we use `TypeRelation` for both the `Generalizer` and the `ConstInferUnifier` but i am not sure if there is a useful way to disentangle this without unnecessarily duplicating some code.\n\nThe error in the added test is kind of unavoidable until we erase the unused substs of `ConstKind::Unevaluated`. We talked a bit about this in the cg lazy norm meeting (https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/lazy_normalization_consts)", "tree": {"sha": "e771970ae158f785df8990ab57e8371219ca3114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e771970ae158f785df8990ab57e8371219ca3114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c11b93f5a8914a40f619b0a1663baafe029d427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c11b93f5a8914a40f619b0a1663baafe029d427", "html_url": "https://github.com/rust-lang/rust/commit/0c11b93f5a8914a40f619b0a1663baafe029d427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c11b93f5a8914a40f619b0a1663baafe029d427/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d58436614ad522e4db9113ac56d90ec4a95448", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d58436614ad522e4db9113ac56d90ec4a95448", "html_url": "https://github.com/rust-lang/rust/commit/c1d58436614ad522e4db9113ac56d90ec4a95448"}, {"sha": "806c7281ec1905423aa4569d79940b59efc1905a", "url": "https://api.github.com/repos/rust-lang/rust/commits/806c7281ec1905423aa4569d79940b59efc1905a", "html_url": "https://github.com/rust-lang/rust/commit/806c7281ec1905423aa4569d79940b59efc1905a"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "e38eebe23b1e1d11aba2ce7e29e432ce4d985a92", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c11b93f5a8914a40f619b0a1663baafe029d427/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c11b93f5a8914a40f619b0a1663baafe029d427/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=0c11b93f5a8914a40f619b0a1663baafe029d427", "patch": "@@ -543,6 +543,10 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n         true\n     }\n \n+    fn visit_ct_substs(&self) -> bool {\n+        true\n+    }\n+\n     fn binders<T>(\n         &mut self,\n         a: ty::Binder<T>,\n@@ -716,7 +720,10 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 let variable_table = &mut inner.const_unification_table();\n                 let var_value = variable_table.probe_value(vid);\n                 match var_value.val {\n-                    ConstVariableValue::Known { value: u } => self.relate(u, u),\n+                    ConstVariableValue::Known { value: u } => {\n+                        drop(inner);\n+                        self.relate(u, u)\n+                    }\n                     ConstVariableValue::Unknown { universe } => {\n                         if self.for_universe.can_name(universe) {\n                             Ok(c)\n@@ -815,6 +822,10 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         true\n     }\n \n+    fn visit_ct_substs(&self) -> bool {\n+        true\n+    }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _variance: ty::Variance,\n@@ -870,6 +881,7 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     }\n                 }\n             }\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => Ok(t),\n             _ => relate::super_relate_tys(self, t, t),\n         }\n     }"}, {"sha": "293b3c6b0470a923a8214ab0ba2193568017fbe9", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c11b93f5a8914a40f619b0a1663baafe029d427/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c11b93f5a8914a40f619b0a1663baafe029d427/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=0c11b93f5a8914a40f619b0a1663baafe029d427", "patch": "@@ -33,6 +33,15 @@ pub trait TypeRelation<'tcx>: Sized {\n     /// relation. Just affects error messages.\n     fn a_is_expected(&self) -> bool;\n \n+    /// Whether we should look into the substs of unevaluated constants\n+    /// even if `feature(const_evaluatable_checked)` is active.\n+    ///\n+    /// This is needed in `combine` to prevent accidentially creating\n+    /// infinite types as we abuse `TypeRelation` to walk a type there.\n+    fn visit_ct_substs(&self) -> bool {\n+        false\n+    }\n+\n     fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n@@ -579,7 +588,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         (\n             ty::ConstKind::Unevaluated(a_def, a_substs, None),\n             ty::ConstKind::Unevaluated(b_def, b_substs, None),\n-        ) if tcx.features().const_evaluatable_checked => {\n+        ) if tcx.features().const_evaluatable_checked && !relation.visit_ct_substs() => {\n             if tcx.try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs))) {\n                 Ok(a.val)\n             } else {"}, {"sha": "e5d487d89b9f339efdd137888360763949ab6ff8", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-5.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c11b93f5a8914a40f619b0a1663baafe029d427/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c11b93f5a8914a40f619b0a1663baafe029d427/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.rs?ref=0c11b93f5a8914a40f619b0a1663baafe029d427", "patch": "@@ -0,0 +1,20 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// `N + 1` also depends on `T` here even if it doesn't use it.\n+fn q<T, const N: usize>(_: T) -> [u8; N + 1] {\n+    todo!()\n+}\n+\n+fn supplier<T>() -> T {\n+    todo!()\n+}\n+\n+fn catch_me<const N: usize>() where [u8; N + 1]: Default {\n+    let mut x = supplier();\n+    x = q::<_, N>(x); //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    catch_me::<3>();\n+}"}, {"sha": "239569dab0965614cf16d3c8ce2e021b6e83486e", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-5.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c11b93f5a8914a40f619b0a1663baafe029d427/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c11b93f5a8914a40f619b0a1663baafe029d427/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.stderr?ref=0c11b93f5a8914a40f619b0a1663baafe029d427", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/unused-substs-5.rs:15:9\n+   |\n+LL |     x = q::<_, N>(x);\n+   |         ^^^^^^^^^^^^\n+   |         |\n+   |         cyclic type of infinite size\n+   |         help: try using a conversion method: `q::<_, N>(x).to_vec()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}