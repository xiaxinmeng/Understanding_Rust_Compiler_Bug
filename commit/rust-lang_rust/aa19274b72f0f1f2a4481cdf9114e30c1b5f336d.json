{"sha": "aa19274b72f0f1f2a4481cdf9114e30c1b5f336d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMTkyNzRiNzJmMGYxZjJhNDQ4MWNkZjkxMTRlMzBjMWI1ZjMzNmQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-29T02:53:00Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-18T23:26:26Z"}, "message": "De-genericize `try_define`.", "tree": {"sha": "fe970cae5831a63afa3f5ab7d2bce934f7f4dbe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe970cae5831a63afa3f5ab7d2bce934f7f4dbe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa19274b72f0f1f2a4481cdf9114e30c1b5f336d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa19274b72f0f1f2a4481cdf9114e30c1b5f336d", "html_url": "https://github.com/rust-lang/rust/commit/aa19274b72f0f1f2a4481cdf9114e30c1b5f336d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa19274b72f0f1f2a4481cdf9114e30c1b5f336d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59de7f8f04d9122dd776f2edd73eb77a4fc94054", "url": "https://api.github.com/repos/rust-lang/rust/commits/59de7f8f04d9122dd776f2edd73eb77a4fc94054", "html_url": "https://github.com/rust-lang/rust/commit/59de7f8f04d9122dd776f2edd73eb77a4fc94054"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "9401c77c7b8d594d27fd4cd8e26cc954b9f2fc85", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa19274b72f0f1f2a4481cdf9114e30c1b5f336d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa19274b72f0f1f2a4481cdf9114e30c1b5f336d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=aa19274b72f0f1f2a4481cdf9114e30c1b5f336d", "patch": "@@ -16,7 +16,8 @@\n use macros::{InvocationData, LegacyScope};\n use resolve_imports::ImportDirective;\n use resolve_imports::ImportDirectiveSubclass::{self, GlobImport, SingleImport};\n-use {Resolver, Module, ModuleS, ModuleKind, NameBinding, NameBindingKind, ToNameBinding};\n+use {Module, ModuleS, ModuleKind, NameBinding, NameBindingKind, ToNameBinding};\n+use {Resolver, ResolverArenas};\n use Namespace::{self, TypeNS, ValueNS, MacroNS};\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n@@ -45,24 +46,24 @@ use syntax::visit::{self, Visitor};\n use syntax_pos::{Span, DUMMY_SP};\n \n impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, Mark) {\n-    fn to_name_binding(self) -> NameBinding<'a> {\n-        NameBinding {\n+    fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n+        arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Module(self.0),\n             vis: self.1,\n             span: self.2,\n             expansion: self.3,\n-        }\n+        })\n     }\n }\n \n impl<'a> ToNameBinding<'a> for (Def, ty::Visibility, Span, Mark) {\n-    fn to_name_binding(self) -> NameBinding<'a> {\n-        NameBinding {\n+    fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n+        arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Def(self.0),\n             vis: self.1,\n             span: self.2,\n             expansion: self.3,\n-        }\n+        })\n     }\n }\n \n@@ -79,8 +80,8 @@ impl<'b> Resolver<'b> {\n     fn define<T>(&mut self, parent: Module<'b>, ident: Ident, ns: Namespace, def: T)\n         where T: ToNameBinding<'b>,\n     {\n-        let binding = def.to_name_binding();\n-        if let Err(old_binding) = self.try_define(parent, ident, ns, binding.clone()) {\n+        let binding = def.to_name_binding(self.arenas);\n+        if let Err(old_binding) = self.try_define(parent, ident, ns, binding) {\n             self.report_conflict(parent, ident, ns, old_binding, &binding);\n         }\n     }\n@@ -238,8 +239,8 @@ impl<'b> Resolver<'b> {\n                 // n.b. we don't need to look at the path option here, because cstore already did\n                 let crate_id = self.session.cstore.extern_mod_stmt_cnum(item.id).unwrap();\n                 let module = self.get_extern_crate_root(crate_id);\n-                let binding = (module, ty::Visibility::Public, sp, expansion).to_name_binding();\n-                let binding = self.arenas.alloc_name_binding(binding);\n+                let binding =\n+                    (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.arenas);\n                 let directive = self.arenas.alloc_import_directive(ImportDirective {\n                     id: item.id,\n                     parent: parent,"}, {"sha": "972fd8f570c0894c708a2ee8f4f5c60f311c3bac", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa19274b72f0f1f2a4481cdf9114e30c1b5f336d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa19274b72f0f1f2a4481cdf9114e30c1b5f336d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=aa19274b72f0f1f2a4481cdf9114e30c1b5f336d", "patch": "@@ -875,11 +875,11 @@ pub struct NameBinding<'a> {\n }\n \n pub trait ToNameBinding<'a> {\n-    fn to_name_binding(self) -> NameBinding<'a>;\n+    fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a>;\n }\n \n-impl<'a> ToNameBinding<'a> for NameBinding<'a> {\n-    fn to_name_binding(self) -> NameBinding<'a> {\n+impl<'a> ToNameBinding<'a> for &'a NameBinding<'a> {\n+    fn to_name_binding(self, _: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         self\n     }\n }"}, {"sha": "2c35d7ec4423fcab73e9347094dce7a0bc0277f0", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa19274b72f0f1f2a4481cdf9114e30c1b5f336d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa19274b72f0f1f2a4481cdf9114e30c1b5f336d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=aa19274b72f0f1f2a4481cdf9114e30c1b5f336d", "patch": "@@ -12,7 +12,7 @@ use self::ImportDirectiveSubclass::*;\n \n use {AmbiguityError, Module, PerNS};\n use Namespace::{self, TypeNS, MacroNS};\n-use {NameBinding, NameBindingKind, PathResult, PathScope, PrivacyError, ToNameBinding};\n+use {NameBinding, NameBindingKind, PathResult, PathScope, PrivacyError};\n use Resolver;\n use {names_to_string, module_to_string};\n use {resolve_error, ResolutionError};\n@@ -273,7 +273,7 @@ impl<'a> Resolver<'a> {\n     // Given a binding and an import directive that resolves to it,\n     // return the corresponding binding defined by the import directive.\n     pub fn import(&mut self, binding: &'a NameBinding<'a>, directive: &'a ImportDirective<'a>)\n-                  -> NameBinding<'a> {\n+                  -> &'a NameBinding<'a> {\n         let vis = if binding.pseudo_vis().is_at_least(directive.vis.get(), self) ||\n                      !directive.is_glob() && binding.is_extern_crate() { // c.f. `PRIVATE_IN_PUBLIC`\n             directive.vis.get()\n@@ -287,7 +287,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        NameBinding {\n+        self.arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Import {\n                 binding: binding,\n                 directive: directive,\n@@ -296,16 +296,17 @@ impl<'a> Resolver<'a> {\n             span: directive.span,\n             vis: vis,\n             expansion: directive.expansion,\n-        }\n+        })\n     }\n \n     // Define the name or return the existing binding if there is a collision.\n-    pub fn try_define<T>(&mut self, module: Module<'a>, ident: Ident, ns: Namespace, binding: T)\n-                         -> Result<(), &'a NameBinding<'a>>\n-        where T: ToNameBinding<'a>\n-    {\n+    pub fn try_define(&mut self,\n+                      module: Module<'a>,\n+                      ident: Ident,\n+                      ns: Namespace,\n+                      binding: &'a NameBinding<'a>)\n+                      -> Result<(), &'a NameBinding<'a>> {\n         let ident = ident.unhygienize();\n-        let binding = self.arenas.alloc_name_binding(binding.to_name_binding());\n         self.update_resolution(module, ident, ns, |this, resolution| {\n             if let Some(old_binding) = resolution.binding {\n                 if binding.is_glob_import() {\n@@ -389,7 +390,7 @@ impl<'a> Resolver<'a> {\n             let dummy_binding = self.dummy_binding;\n             let dummy_binding = self.import(dummy_binding, directive);\n             self.per_ns(|this, ns| {\n-                let _ = this.try_define(directive.parent, target, ns, dummy_binding.clone());\n+                let _ = this.try_define(directive.parent, target, ns, dummy_binding);\n             });\n         }\n     }\n@@ -516,10 +517,11 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 return\n             };\n \n+            let parent = directive.parent;\n             match result[ns].get() {\n                 Err(Undetermined) => indeterminate = true,\n                 Err(Determined) => {\n-                    this.update_resolution(directive.parent, target, ns, |_, resolution| {\n+                    this.update_resolution(parent, target, ns, |_, resolution| {\n                         resolution.single_imports.directive_failed()\n                     });\n                 }\n@@ -534,10 +536,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 }\n                 Ok(binding) => {\n                     let imported_binding = this.import(binding, directive);\n-                    let conflict = this.try_define(directive.parent, target, ns, imported_binding);\n+                    let conflict = this.try_define(parent, target, ns, imported_binding);\n                     if let Err(old_binding) = conflict {\n-                        let binding = &this.import(binding, directive);\n-                        this.report_conflict(directive.parent, target, ns, binding, old_binding);\n+                        this.report_conflict(parent, target, ns, imported_binding, old_binding);\n                     }\n                 }\n             }"}]}