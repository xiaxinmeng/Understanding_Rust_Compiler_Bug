{"sha": "b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjVkZGJhNjdkMmZhODFmOTBiZmFhZGJiOGVjODMzMjFkZDNkY2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-02T09:57:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-09T01:20:01Z"}, "message": "Make coherence more tolerant of error types.\n\nFixes #29857.\nFixes #30589.", "tree": {"sha": "8b6e8ff4b28107c10c8aaae078b9ad1bcf42d304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b6e8ff4b28107c10c8aaae078b9ad1bcf42d304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "html_url": "https://github.com/rust-lang/rust/commit/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a8ffeffaae2fe72994fb0832ae525346b8a3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a8ffeffaae2fe72994fb0832ae525346b8a3c0", "html_url": "https://github.com/rust-lang/rust/commit/64a8ffeffaae2fe72994fb0832ae525346b8a3c0"}], "stats": {"total": 175, "additions": 174, "deletions": 1}, "files": [{"sha": "62a769fbff824193aa5798d7565c3d13cef876a8", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "patch": "@@ -330,8 +330,11 @@ fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>,\n             tt.principal_def_id().is_local()\n         }\n \n-        ty::TyClosure(..) |\n         ty::TyError => {\n+            true\n+        }\n+\n+        ty::TyClosure(..) => {\n             tcx.sess.bug(\n                 &format!(\"ty_is_local invoked on unexpected type: {:?}\",\n                         ty))"}, {"sha": "7465ff526b6de1398b569cbd55f74ef67e78e663", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "patch": "@@ -149,11 +149,23 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                    trait_ref,\n                    item.name);\n \n+            // Skip impls where one of the self type is an error type.\n+            // This occurs with e.g. resolve failures (#30589).\n+            if trait_ref.references_error() {\n+                return;\n+            }\n+\n             enforce_trait_manually_implementable(self.crate_context.tcx,\n                                                  item.span,\n                                                  trait_ref.def_id);\n             self.add_trait_impl(trait_ref, impl_did);\n         } else {\n+            // Skip inherent impls where the self type is an error\n+            // type. This occurs with e.g. resolve failures (#30589).\n+            if self_type.ty.references_error() {\n+                return;\n+            }\n+\n             // Add the implementation to the mapping from implementation to base\n             // type def ID, if there is a base type for this implementation and\n             // the implementation does not have any associated traits."}, {"sha": "3de79454398387338cdf8498c8a94d8383692f7b", "filename": "src/test/compile-fail/coherence-projection-conflict-orphan.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict-orphan.rs?ref=b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+// Here we expect a coherence conflict because, even though `i32` does\n+// not implement `Iterator`, we cannot rely on that negative reasoning\n+// due to the orphan rules. Therefore, `A::Item` may yet turn out to\n+// be `i32`.\n+\n+pub trait Foo<P> {}\n+\n+pub trait Bar {\n+    type Output: 'static;\n+}\n+\n+impl Foo<i32> for i32 { } //~ ERROR E0119\n+\n+impl<A:Iterator> Foo<A::Item> for A { }\n+\n+fn main() {}"}, {"sha": "2236e71b53fff1cd7aaa516e972bbc97a88ab3a2", "filename": "src/test/compile-fail/coherence-projection-conflict.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-conflict.rs?ref=b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::PhantomData;\n+\n+pub trait Foo<P> {}\n+\n+pub trait Bar {\n+    type Output: 'static;\n+}\n+\n+impl Foo<i32> for i32 { } //~ ERROR E0119\n+\n+impl<A:Bar> Foo<A::Output> for A { }\n+\n+impl Bar for i32 {\n+    type Output = i32;\n+}\n+\n+fn main() {}"}, {"sha": "a52af0873a8231e936c9c6acdee561515c14b9f3", "filename": "src/test/compile-fail/coherence-projection-ok-orphan.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-ok-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-ok-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-ok-orphan.rs?ref=b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+// Here we do not get a coherence conflict because `Baz: Iterator`\n+// does not hold and (due to the orphan rules), we can rely on that.\n+\n+pub trait Foo<P> {}\n+\n+pub trait Bar {\n+    type Output: 'static;\n+}\n+\n+struct Baz;\n+impl Foo<i32> for Baz { }\n+\n+impl<A:Iterator> Foo<A::Item> for A { }\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "af88f3744eaeb428c768276bfa282382ce5905ff", "filename": "src/test/compile-fail/coherence-projection-ok.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-projection-ok.rs?ref=b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+pub trait Foo<P> {}\n+\n+pub trait Bar {\n+    type Output: 'static;\n+}\n+\n+impl Foo<i32> for i32 { }\n+\n+impl<A:Bar> Foo<A::Output> for A { }\n+\n+impl Bar for i32 {\n+    type Output = u32;\n+}\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "b46246cd2164b68578f6fce94578ab2cb19abcf5", "filename": "src/test/compile-fail/issue-29857.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fissue-29857.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fissue-29857.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29857.rs?ref=b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::PhantomData;\n+\n+pub trait Foo<P> {}\n+\n+impl <P, T: Foo<P>> Foo<P> for Option<T> {} //~ ERROR E0119\n+\n+pub struct Qux<T> (PhantomData<*mut T>);\n+\n+impl<T> Foo<*mut T> for Option<Qux<T>> {}\n+\n+pub trait Bar {\n+    type Output: 'static;\n+}\n+\n+impl<T: 'static, W: Bar<Output = T>> Foo<*mut T> for W {}\n+\n+fn main() {}"}, {"sha": "32765d5acb4fefbb5d93f8daa1932fc51fc62916", "filename": "src/test/compile-fail/issue-30589.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fissue-30589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc/src%2Ftest%2Fcompile-fail%2Fissue-30589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30589.rs?ref=b4f5ddba67d2fa81f90bfaadbb8ec83321dd3dcc", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+\n+impl fmt::Display for DecoderError { //~ ERROR E0412\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Missing data: {}\", self.0)\n+    }\n+}\n+fn main() {\n+}"}]}