{"sha": "0747f586ebada402e2b2d5cb14ab40d5f33518a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NDdmNTg2ZWJhZGE0MDJlMmIyZDVjYjE0YWI0MGQ1ZjMzNTE4YTY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-26T20:11:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-26T20:11:26Z"}, "message": "Rollup merge of #72294 - GuillaumeGomez:js-cleanup, r=kinnison\n\nJS cleanup\n\nThe goal here is just to improve the source code a bit. I recommend to review one commit at a time, otherwise it might not make much sense. :)\n\nThe biggest commit is the second one: to prevent to have \"global\" variables declared in `main.js` (and thus prevent name conflict or overwriting), I moved such code into anonymous functions.\n\nr? @kinnison\n\ncc @rust-lang/rustdoc", "tree": {"sha": "4c2b0c0f890987e5cd4d7567a4ac7ffc95bc2d50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c2b0c0f890987e5cd4d7567a4ac7ffc95bc2d50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0747f586ebada402e2b2d5cb14ab40d5f33518a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJezXfuCRBK7hj4Ov3rIwAAdHIIAJGhpftQnTKWmj5idWPOiAlw\nLJy1HKodhSN+Des08qYxtAHVllxHGFYRNnxBKFQKc8sbU2D4thFkE0WvemA/wLgV\nSO6H5mmmrMNuOggSqsJX3YMgwrkOL60f3V+dgVEyyFemnQy3f+RjuPzvb56SFN4N\nQWDOjp1xE4oW2eCK5IbBoVs+xs7amsCEb7iZ87ULNKg2A0luEQ2OqBEtCjtz00VX\n5nx5EPverkxjifcY4QZXNBJAufKjL/U1IKhNyG/+SHF9UBX/Hm9Te21jQBox5Uv5\njReLQMVs9NeSU0ocDb+Vk5sbZ5Ln1LDTluCn8k0Ov7tgmEQThm1blF1Lads0yo0=\n=iiGF\n-----END PGP SIGNATURE-----\n", "payload": "tree 4c2b0c0f890987e5cd4d7567a4ac7ffc95bc2d50\nparent 6e6bd630e67e79d553e52eaca191555991eedd8f\nparent 398511a1352ab5b6d5fd8f2c9e80b357f6b84441\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590523886 +0200\ncommitter GitHub <noreply@github.com> 1590523886 +0200\n\nRollup merge of #72294 - GuillaumeGomez:js-cleanup, r=kinnison\n\nJS cleanup\n\nThe goal here is just to improve the source code a bit. I recommend to review one commit at a time, otherwise it might not make much sense. :)\n\nThe biggest commit is the second one: to prevent to have \"global\" variables declared in `main.js` (and thus prevent name conflict or overwriting), I moved such code into anonymous functions.\n\nr? @kinnison\n\ncc @rust-lang/rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0747f586ebada402e2b2d5cb14ab40d5f33518a6", "html_url": "https://github.com/rust-lang/rust/commit/0747f586ebada402e2b2d5cb14ab40d5f33518a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0747f586ebada402e2b2d5cb14ab40d5f33518a6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e6bd630e67e79d553e52eaca191555991eedd8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6bd630e67e79d553e52eaca191555991eedd8f", "html_url": "https://github.com/rust-lang/rust/commit/6e6bd630e67e79d553e52eaca191555991eedd8f"}, {"sha": "398511a1352ab5b6d5fd8f2c9e80b357f6b84441", "url": "https://api.github.com/repos/rust-lang/rust/commits/398511a1352ab5b6d5fd8f2c9e80b357f6b84441", "html_url": "https://github.com/rust-lang/rust/commit/398511a1352ab5b6d5fd8f2c9e80b357f6b84441"}], "stats": {"total": 604, "additions": 305, "deletions": 299}, "files": [{"sha": "22c9426db2036ed4db27336babcd0bda047da8e0", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 293, "deletions": 295, "changes": 588, "blob_url": "https://github.com/rust-lang/rust/blob/0747f586ebada402e2b2d5cb14ab40d5f33518a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/0747f586ebada402e2b2d5cb14ab40d5f33518a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=0747f586ebada402e2b2d5cb14ab40d5f33518a6", "patch": "@@ -3,7 +3,7 @@\n \n // Local js definitions:\n /* global addClass, getCurrentValue, hasClass */\n-/* global onEach, removeClass, updateLocalStorage */\n+/* global onEachLazy, hasOwnProperty, removeClass, updateLocalStorage */\n \n if (!String.prototype.startsWith) {\n     String.prototype.startsWith = function(searchString, position) {\n@@ -47,6 +47,16 @@ function getSearchElement() {\n     return document.getElementById(\"search\");\n }\n \n+// Sets the focus on the search bar at the top of the page\n+function focusSearchBar() {\n+    getSearchInput().focus();\n+}\n+\n+// Removes the focus from the search bar\n+function defocusSearchBar() {\n+    getSearchInput().blur();\n+}\n+\n (function() {\n     \"use strict\";\n \n@@ -181,6 +191,7 @@ function getSearchElement() {\n     var savedHash = \"\";\n \n     function handleHashes(ev) {\n+        var elem;\n         var search = getSearchElement();\n         if (ev !== null && search && !hasClass(search, \"hidden\") && ev.newURL) {\n             // This block occurs when clicking on an element in the navbar while\n@@ -190,7 +201,7 @@ function getSearchElement() {\n             if (browserSupportsHistoryApi()) {\n                 history.replaceState(hash, \"\", \"?search=#\" + hash);\n             }\n-            var elem = document.getElementById(hash);\n+            elem = document.getElementById(hash);\n             if (elem) {\n                 elem.scrollIntoView();\n             }\n@@ -201,7 +212,7 @@ function getSearchElement() {\n             if (savedHash.length === 0) {\n                 return;\n             }\n-            var elem = document.getElementById(savedHash.slice(1)); // we remove the '#'\n+            elem = document.getElementById(savedHash.slice(1)); // we remove the '#'\n             if (!elem || !isHidden(elem)) {\n                 return;\n             }\n@@ -324,7 +335,7 @@ function getSearchElement() {\n     }\n \n     function displayHelp(display, ev, help) {\n-        var help = help ? help : getHelpElement();\n+        help = help ? help : getHelpElement();\n         if (display === true) {\n             if (hasClass(help, \"hidden\")) {\n                 ev.preventDefault();\n@@ -438,8 +449,8 @@ function getSearchElement() {\n \n                 set_fragment(cur_line_id);\n             }\n-        }\n-    })();\n+        };\n+    }());\n \n     document.addEventListener(\"click\", function(ev) {\n         if (hasClass(ev.target, \"collapse-toggle\")) {\n@@ -465,27 +476,30 @@ function getSearchElement() {\n         }\n     });\n \n-    var x = document.getElementsByClassName(\"version-selector\");\n-    if (x.length > 0) {\n-        x[0].onchange = function() {\n-            var i, match,\n-                url = document.location.href,\n-                stripped = \"\",\n-                len = rootPath.match(/\\.\\.\\//g).length + 1;\n+    (function() {\n+        var x = document.getElementsByClassName(\"version-selector\");\n+        if (x.length > 0) {\n+            x[0].onchange = function() {\n+                var i, match,\n+                    url = document.location.href,\n+                    stripped = \"\",\n+                    len = rootPath.match(/\\.\\.\\//g).length + 1;\n \n-            for (i = 0; i < len; ++i) {\n-                match = url.match(/\\/[^\\/]*$/);\n-                if (i < len - 1) {\n-                    stripped = match[0] + stripped;\n+                for (i = 0; i < len; ++i) {\n+                    match = url.match(/\\/[^\\/]*$/);\n+                    if (i < len - 1) {\n+                        stripped = match[0] + stripped;\n+                    }\n+                    url = url.substring(0, url.length - match[0].length);\n                 }\n-                url = url.substring(0, url.length - match[0].length);\n-            }\n \n-            url += \"/\" + document.getElementsByClassName(\"version-selector\")[0].value + stripped;\n+                var selectedVersion = document.getElementsByClassName(\"version-selector\")[0].value;\n+                url += \"/\" + selectedVersion + stripped;\n \n-            document.location.href = url;\n-        };\n-    }\n+                document.location.href = url;\n+            };\n+        }\n+    }());\n \n     /**\n      * A function to compute the Levenshtein distance between two strings\n@@ -522,7 +536,7 @@ function getSearchElement() {\n         return s1_len + s2_len;\n     }\n \n-    function initSearch(rawSearchIndex) {\n+    window.initSearch = function(rawSearchIndex) {\n         var MAX_LEV_DISTANCE = 3;\n         var MAX_RESULTS = 200;\n         var GENERICS_DATA = 1;\n@@ -602,7 +616,7 @@ function getSearchElement() {\n             function sortResults(results, isType) {\n                 var ar = [];\n                 for (var entry in results) {\n-                    if (results.hasOwnProperty(entry)) {\n+                    if (hasOwnProperty(results, entry)) {\n                         ar.push(results[entry]);\n                     }\n                 }\n@@ -1100,8 +1114,6 @@ function getSearchElement() {\n                     }\n                     fullId = generateId(ty);\n \n-                    // allow searching for void (no output) functions as well\n-                    var typeOutput = type.length > OUTPUT_DATA ? type[OUTPUT_DATA].name : \"\";\n                     returned = checkReturned(ty, output, true, NO_TYPE_FILTER);\n                     if (output.name === \"*\" || returned === true) {\n                         in_args = false;\n@@ -1164,7 +1176,6 @@ function getSearchElement() {\n                 var contains = paths.slice(0, paths.length > 1 ? paths.length - 1 : 1);\n \n                 var lev;\n-                var lev_distance;\n                 for (j = 0; j < nSearchWords; ++j) {\n                     ty = searchIndex[j];\n                     if (!ty || (filterCrates !== undefined && ty.crate !== filterCrates)) {\n@@ -1661,7 +1672,7 @@ function getSearchElement() {\n         function getFilterCrates() {\n             var elem = document.getElementById(\"crate-search\");\n \n-            if (elem && elem.value !== \"All crates\" && rawSearchIndex.hasOwnProperty(elem.value)) {\n+            if (elem && elem.value !== \"All crates\" && hasOwnProperty(rawSearchIndex, elem.value)) {\n                 return elem.value;\n             }\n             return undefined;\n@@ -1709,7 +1720,7 @@ function getSearchElement() {\n             var currentIndex = 0;\n \n             for (var crate in rawSearchIndex) {\n-                if (!rawSearchIndex.hasOwnProperty(crate)) { continue; }\n+                if (!hasOwnProperty(rawSearchIndex, crate)) { continue; }\n \n                 var crateSize = 0;\n \n@@ -1893,7 +1904,7 @@ function getSearchElement() {\n \n                 var crates = [];\n                 for (var crate in rawSearchIndex) {\n-                    if (!rawSearchIndex.hasOwnProperty(crate)) {\n+                    if (!hasOwnProperty(rawSearchIndex, crate)) {\n                         continue;\n                     }\n                     crates.push(crate);\n@@ -1917,12 +1928,11 @@ function getSearchElement() {\n                 sidebar.appendChild(div);\n             }\n         }\n-    }\n+    };\n \n-    window.initSearch = initSearch;\n \n     // delayed sidebar rendering.\n-    function initSidebarItems(items) {\n+    window.initSidebarItems = function(items) {\n         var sidebar = document.getElementsByClassName(\"sidebar-elems\")[0];\n         var current = window.sidebarCurrent;\n \n@@ -1984,9 +1994,7 @@ function getSearchElement() {\n         block(\"foreigntype\", \"Foreign Types\");\n         block(\"keyword\", \"Keywords\");\n         block(\"traitalias\", \"Trait Aliases\");\n-    }\n-\n-    window.initSidebarItems = initSidebarItems;\n+    };\n \n     window.register_implementors = function(imp) {\n         var implementors = document.getElementById(\"implementors-list\");\n@@ -2163,19 +2171,13 @@ function getSearchElement() {\n                         }\n                     }\n                     var ns = n.nextElementSibling;\n-                    while (true) {\n-                        if (ns && (\n-                                hasClass(ns, \"docblock\") ||\n-                                hasClass(ns, \"stability\"))) {\n-                            if (addOrRemove) {\n-                                addClass(ns, \"hidden-by-impl-hider\");\n-                            } else {\n-                                removeClass(ns, \"hidden-by-impl-hider\");\n-                            }\n-                            ns = ns.nextElementSibling;\n-                            continue;\n+                    while (ns && (hasClass(ns, \"docblock\") || hasClass(ns, \"stability\"))) {\n+                        if (addOrRemove) {\n+                            addClass(ns, \"hidden-by-impl-hider\");\n+                        } else {\n+                            removeClass(ns, \"hidden-by-impl-hider\");\n                         }\n-                        break;\n+                        ns = ns.nextElementSibling;\n                     }\n                 }\n             };\n@@ -2248,7 +2250,7 @@ function getSearchElement() {\n         }\n     }\n \n-    function collapser(e, collapse) {\n+    function collapser(pageId, e, collapse) {\n         // inherent impl ids are like \"impl\" or impl-<number>'.\n         // they will never be hidden by default.\n         var n = e.parentElement;\n@@ -2268,15 +2270,15 @@ function getSearchElement() {\n \n             if (impl_list !== null) {\n                 onEachLazy(impl_list.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                    collapser(e, collapse);\n+                    collapser(pageId, e, collapse);\n                 });\n             }\n \n             var blanket_list = document.getElementById(\"blanket-implementations-list\");\n \n             if (blanket_list !== null) {\n                 onEachLazy(blanket_list.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                    collapser(e, collapse);\n+                    collapser(pageId, e, collapse);\n                 });\n             }\n         }\n@@ -2300,103 +2302,7 @@ function getSearchElement() {\n         return toggle;\n     }\n \n-    var toggle = createSimpleToggle(false);\n-    var hideMethodDocs = getCurrentValue(\"rustdoc-auto-hide-method-docs\") === \"true\";\n-    var pageId = getPageId();\n-\n-    var func = function(e) {\n-        var next = e.nextElementSibling;\n-        if (!next) {\n-            return;\n-        }\n-        if (hasClass(next, \"docblock\") === true ||\n-            (hasClass(next, \"stability\") === true &&\n-             hasClass(next.nextElementSibling, \"docblock\") === true)) {\n-            var newToggle = toggle.cloneNode(true);\n-            insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n-            if (hideMethodDocs === true && hasClass(e, \"method\") === true) {\n-                collapseDocs(newToggle, \"hide\", pageId);\n-            }\n-        }\n-    };\n-\n-    var funcImpl = function(e) {\n-        var next = e.nextElementSibling;\n-        if (next && hasClass(next, \"docblock\")) {\n-            next = next.nextElementSibling;\n-        }\n-        if (!next) {\n-            return;\n-        }\n-        if (next.getElementsByClassName(\"method\").length > 0 && hasClass(e, \"impl\")) {\n-            insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n-        }\n-    };\n-\n-    onEachLazy(document.getElementsByClassName(\"method\"), func);\n-    onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n-    onEachLazy(document.getElementsByClassName(\"impl\"), funcImpl);\n-    var impl_call = function() {};\n-    if (hideMethodDocs === true) {\n-        impl_call = function(e, newToggle, pageId) {\n-            if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n-                // Automatically minimize all non-inherent impls\n-                if (hasClass(e, \"impl\") === true) {\n-                    collapseDocs(newToggle, \"hide\", pageId);\n-                }\n-            }\n-        };\n-    }\n-    var newToggle = document.createElement(\"a\");\n-    newToggle.href = \"javascript:void(0)\";\n-    newToggle.className = \"collapse-toggle hidden-default collapsed\";\n-    newToggle.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n-                          \"</span>] Show hidden undocumented items\";\n-    function toggleClicked() {\n-        if (hasClass(this, \"collapsed\")) {\n-            removeClass(this, \"collapsed\");\n-            onEachLazy(this.parentNode.getElementsByClassName(\"hidden\"), function(x) {\n-                if (hasClass(x, \"content\") === false) {\n-                    removeClass(x, \"hidden\");\n-                    addClass(x, \"x\");\n-                }\n-            }, true);\n-            this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(false) +\n-                             \"</span>] Hide undocumented items\";\n-        } else {\n-            addClass(this, \"collapsed\");\n-            onEachLazy(this.parentNode.getElementsByClassName(\"x\"), function(x) {\n-                if (hasClass(x, \"content\") === false) {\n-                    addClass(x, \"hidden\");\n-                    removeClass(x, \"x\");\n-                }\n-            }, true);\n-            this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n-                             \"</span>] Show hidden undocumented items\";\n-        }\n-    }\n-    onEachLazy(document.getElementsByClassName(\"impl-items\"), function(e) {\n-        onEachLazy(e.getElementsByClassName(\"associatedconstant\"), func);\n-        var hiddenElems = e.getElementsByClassName(\"hidden\");\n-        var needToggle = false;\n-\n-        var hlength = hiddenElems.length;\n-        for (var i = 0; i < hlength; ++i) {\n-            if (hasClass(hiddenElems[i], \"content\") === false &&\n-                hasClass(hiddenElems[i], \"docblock\") === false) {\n-                needToggle = true;\n-                break;\n-            }\n-        }\n-        if (needToggle === true) {\n-            var inner_toggle = newToggle.cloneNode(true);\n-            inner_toggle.onclick = toggleClicked;\n-            e.insertBefore(inner_toggle, e.firstChild);\n-            impl_call(e.previousSibling, inner_toggle, pageId);\n-        }\n-    });\n-\n-    function createToggle(otherMessage, fontSize, extraClass, show) {\n+    function createToggle(toggle, otherMessage, fontSize, extraClass, show) {\n         var span = document.createElement(\"span\");\n         span.className = \"toggle-label\";\n         if (show) {\n@@ -2431,97 +2337,197 @@ function getSearchElement() {\n         return wrapper;\n     }\n \n-    var currentType = document.getElementsByClassName(\"type-decl\")[0];\n-    var className = null;\n-    if (currentType) {\n-        currentType = currentType.getElementsByClassName(\"rust\")[0];\n-        if (currentType) {\n-            currentType.classList.forEach(function(item) {\n-                if (item !== \"main\") {\n-                    className = item;\n-                    return true;\n+    (function() {\n+        var toggle = createSimpleToggle(false);\n+        var hideMethodDocs = getCurrentValue(\"rustdoc-auto-hide-method-docs\") === \"true\";\n+        var pageId = getPageId();\n+\n+        var func = function(e) {\n+            var next = e.nextElementSibling;\n+            if (!next) {\n+                return;\n+            }\n+            if (hasClass(next, \"docblock\") === true ||\n+                (hasClass(next, \"stability\") === true &&\n+                 hasClass(next.nextElementSibling, \"docblock\") === true)) {\n+                var newToggle = toggle.cloneNode(true);\n+                insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n+                if (hideMethodDocs === true && hasClass(e, \"method\") === true) {\n+                    collapseDocs(newToggle, \"hide\", pageId);\n                 }\n-            });\n+            }\n+        };\n+\n+        var funcImpl = function(e) {\n+            var next = e.nextElementSibling;\n+            if (next && hasClass(next, \"docblock\")) {\n+                next = next.nextElementSibling;\n+            }\n+            if (!next) {\n+                return;\n+            }\n+            if (next.getElementsByClassName(\"method\").length > 0 && hasClass(e, \"impl\")) {\n+                insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n+            }\n+        };\n+\n+        onEachLazy(document.getElementsByClassName(\"method\"), func);\n+        onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n+        onEachLazy(document.getElementsByClassName(\"impl\"), funcImpl);\n+        var impl_call = function() {};\n+        if (hideMethodDocs === true) {\n+            impl_call = function(e, newToggle) {\n+                if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n+                    // Automatically minimize all non-inherent impls\n+                    if (hasClass(e, \"impl\") === true) {\n+                        collapseDocs(newToggle, \"hide\", pageId);\n+                    }\n+                }\n+            };\n         }\n-    }\n-    var showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-\" + className);\n-    if (showItemDeclarations === null) {\n-        if (className === \"enum\" || className === \"macro\") {\n-            showItemDeclarations = \"false\";\n-        } else if (className === \"struct\" || className === \"union\" || className === \"trait\") {\n-            showItemDeclarations = \"true\";\n-        } else {\n-            // In case we found an unknown type, we just use the \"parent\" value.\n-            showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-declarations\");\n+        var newToggle = document.createElement(\"a\");\n+        newToggle.href = \"javascript:void(0)\";\n+        newToggle.className = \"collapse-toggle hidden-default collapsed\";\n+        newToggle.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n+                              \"</span>] Show hidden undocumented items\";\n+        function toggleClicked() {\n+            if (hasClass(this, \"collapsed\")) {\n+                removeClass(this, \"collapsed\");\n+                onEachLazy(this.parentNode.getElementsByClassName(\"hidden\"), function(x) {\n+                    if (hasClass(x, \"content\") === false) {\n+                        removeClass(x, \"hidden\");\n+                        addClass(x, \"x\");\n+                    }\n+                }, true);\n+                this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(false) +\n+                                 \"</span>] Hide undocumented items\";\n+            } else {\n+                addClass(this, \"collapsed\");\n+                onEachLazy(this.parentNode.getElementsByClassName(\"x\"), function(x) {\n+                    if (hasClass(x, \"content\") === false) {\n+                        addClass(x, \"hidden\");\n+                        removeClass(x, \"x\");\n+                    }\n+                }, true);\n+                this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n+                                 \"</span>] Show hidden undocumented items\";\n+            }\n         }\n-    }\n-    showItemDeclarations = showItemDeclarations === \"false\";\n-    function buildToggleWrapper(e) {\n-        if (hasClass(e, \"autohide\")) {\n-            var wrap = e.previousElementSibling;\n-            if (wrap && hasClass(wrap, \"toggle-wrapper\")) {\n-                var inner_toggle = wrap.childNodes[0];\n-                var extra = e.childNodes[0].tagName === \"H3\";\n-\n-                e.style.display = \"none\";\n-                addClass(wrap, \"collapsed\");\n-                onEachLazy(inner_toggle.getElementsByClassName(\"inner\"), function(e) {\n-                    e.innerHTML = labelForToggleButton(true);\n-                });\n-                onEachLazy(inner_toggle.getElementsByClassName(\"toggle-label\"), function(e) {\n-                    e.style.display = \"inline-block\";\n-                    if (extra === true) {\n-                        i_e.innerHTML = \" Show \" + e.childNodes[0].innerHTML;\n+        onEachLazy(document.getElementsByClassName(\"impl-items\"), function(e) {\n+            onEachLazy(e.getElementsByClassName(\"associatedconstant\"), func);\n+            var hiddenElems = e.getElementsByClassName(\"hidden\");\n+            var needToggle = false;\n+\n+            var hlength = hiddenElems.length;\n+            for (var i = 0; i < hlength; ++i) {\n+                if (hasClass(hiddenElems[i], \"content\") === false &&\n+                    hasClass(hiddenElems[i], \"docblock\") === false) {\n+                    needToggle = true;\n+                    break;\n+                }\n+            }\n+            if (needToggle === true) {\n+                var inner_toggle = newToggle.cloneNode(true);\n+                inner_toggle.onclick = toggleClicked;\n+                e.insertBefore(inner_toggle, e.firstChild);\n+                impl_call(e.previousSibling, inner_toggle);\n+            }\n+        });\n+\n+        var currentType = document.getElementsByClassName(\"type-decl\")[0];\n+        var className = null;\n+        if (currentType) {\n+            currentType = currentType.getElementsByClassName(\"rust\")[0];\n+            if (currentType) {\n+                currentType.classList.forEach(function(item) {\n+                    if (item !== \"main\") {\n+                        className = item;\n+                        return true;\n                     }\n                 });\n             }\n         }\n-        if (e.parentNode.id === \"main\") {\n-            var otherMessage = \"\";\n-            var fontSize;\n-            var extraClass;\n-\n-            if (hasClass(e, \"type-decl\")) {\n-                fontSize = \"20px\";\n-                otherMessage = \"&nbsp;Show&nbsp;declaration\";\n-                if (showItemDeclarations === false) {\n-                    extraClass = \"collapsed\";\n-                }\n-            } else if (hasClass(e, \"sub-variant\")) {\n-                otherMessage = \"&nbsp;Show&nbsp;fields\";\n-            } else if (hasClass(e, \"non-exhaustive\")) {\n-                otherMessage = \"&nbsp;This&nbsp;\";\n-                if (hasClass(e, \"non-exhaustive-struct\")) {\n-                    otherMessage += \"struct\";\n-                } else if (hasClass(e, \"non-exhaustive-enum\")) {\n-                    otherMessage += \"enum\";\n-                } else if (hasClass(e, \"non-exhaustive-variant\")) {\n-                    otherMessage += \"enum variant\";\n-                } else if (hasClass(e, \"non-exhaustive-type\")) {\n-                    otherMessage += \"type\";\n-                }\n-                otherMessage += \"&nbsp;is&nbsp;marked&nbsp;as&nbsp;non-exhaustive\";\n-            } else if (hasClass(e.childNodes[0], \"impl-items\")) {\n-                extraClass = \"marg-left\";\n-            }\n-\n-            e.parentNode.insertBefore(\n-                createToggle(otherMessage,\n-                             fontSize,\n-                             extraClass,\n-                             hasClass(e, \"type-decl\") === false || showItemDeclarations === true),\n-                e);\n-            if (hasClass(e, \"type-decl\") === true && showItemDeclarations === true) {\n-                collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n-            }\n-            if (hasClass(e, \"non-exhaustive\") === true) {\n-                collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+        var showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-\" + className);\n+        if (showItemDeclarations === null) {\n+            if (className === \"enum\" || className === \"macro\") {\n+                showItemDeclarations = \"false\";\n+            } else if (className === \"struct\" || className === \"union\" || className === \"trait\") {\n+                showItemDeclarations = \"true\";\n+            } else {\n+                // In case we found an unknown type, we just use the \"parent\" value.\n+                showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-declarations\");\n+            }\n+        }\n+        showItemDeclarations = showItemDeclarations === \"false\";\n+        function buildToggleWrapper(e) {\n+            if (hasClass(e, \"autohide\")) {\n+                var wrap = e.previousElementSibling;\n+                if (wrap && hasClass(wrap, \"toggle-wrapper\")) {\n+                    var inner_toggle = wrap.childNodes[0];\n+                    var extra = e.childNodes[0].tagName === \"H3\";\n+\n+                    e.style.display = \"none\";\n+                    addClass(wrap, \"collapsed\");\n+                    onEachLazy(inner_toggle.getElementsByClassName(\"inner\"), function(e) {\n+                        e.innerHTML = labelForToggleButton(true);\n+                    });\n+                    onEachLazy(inner_toggle.getElementsByClassName(\"toggle-label\"), function(e) {\n+                        e.style.display = \"inline-block\";\n+                        if (extra === true) {\n+                            e.innerHTML = \" Show \" + e.childNodes[0].innerHTML;\n+                        }\n+                    });\n+                }\n+            }\n+            if (e.parentNode.id === \"main\") {\n+                var otherMessage = \"\";\n+                var fontSize;\n+                var extraClass;\n+\n+                if (hasClass(e, \"type-decl\")) {\n+                    fontSize = \"20px\";\n+                    otherMessage = \"&nbsp;Show&nbsp;declaration\";\n+                    if (showItemDeclarations === false) {\n+                        extraClass = \"collapsed\";\n+                    }\n+                } else if (hasClass(e, \"sub-variant\")) {\n+                    otherMessage = \"&nbsp;Show&nbsp;fields\";\n+                } else if (hasClass(e, \"non-exhaustive\")) {\n+                    otherMessage = \"&nbsp;This&nbsp;\";\n+                    if (hasClass(e, \"non-exhaustive-struct\")) {\n+                        otherMessage += \"struct\";\n+                    } else if (hasClass(e, \"non-exhaustive-enum\")) {\n+                        otherMessage += \"enum\";\n+                    } else if (hasClass(e, \"non-exhaustive-variant\")) {\n+                        otherMessage += \"enum variant\";\n+                    } else if (hasClass(e, \"non-exhaustive-type\")) {\n+                        otherMessage += \"type\";\n+                    }\n+                    otherMessage += \"&nbsp;is&nbsp;marked&nbsp;as&nbsp;non-exhaustive\";\n+                } else if (hasClass(e.childNodes[0], \"impl-items\")) {\n+                    extraClass = \"marg-left\";\n+                }\n+\n+                e.parentNode.insertBefore(\n+                    createToggle(\n+                        toggle,\n+                        otherMessage,\n+                        fontSize,\n+                        extraClass,\n+                        hasClass(e, \"type-decl\") === false || showItemDeclarations === true),\n+                    e);\n+                if (hasClass(e, \"type-decl\") === true && showItemDeclarations === true) {\n+                    collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+                }\n+                if (hasClass(e, \"non-exhaustive\") === true) {\n+                    collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+                }\n             }\n         }\n-    }\n \n-    onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n-    onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n+        onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n+        onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n+    }());\n \n     function createToggleWrapper(tog) {\n         var span = document.createElement(\"span\");\n@@ -2536,56 +2542,60 @@ function getSearchElement() {\n         return wrapper;\n     }\n \n-    // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n-    var itemAttributesFunc = function() {};\n-    if (getCurrentValue(\"rustdoc-auto-hide-attributes\") !== \"false\") {\n-        itemAttributesFunc = function(x) {\n-            collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n-        };\n-    }\n-    var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n-    onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n-        var attr_tog = attributesToggle.cloneNode(true);\n-        if (hasClass(i_e, \"top-attr\") === true) {\n-            addClass(attr_tog, \"top-attr\");\n-        }\n-        i_e.parentNode.insertBefore(attr_tog, i_e);\n-        itemAttributesFunc(i_e);\n-    });\n-\n-    // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n-    var lineNumbersFunc = function() {};\n-    if (getCurrentValue(\"rustdoc-line-numbers\") === \"true\") {\n-        lineNumbersFunc = function(x) {\n-            var count = x.textContent.split(\"\\n\").length;\n-            var elems = [];\n-            for (var i = 0; i < count; ++i) {\n-                elems.push(i + 1);\n-            }\n-            var node = document.createElement(\"pre\");\n-            addClass(node, \"line-number\");\n-            node.innerHTML = elems.join(\"\\n\");\n-            x.parentNode.insertBefore(node, x);\n-        };\n-    }\n-    onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), function(e) {\n-        if (hasClass(e, \"compile_fail\")) {\n-            e.addEventListener(\"mouseover\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"#f00\";\n-            });\n-            e.addEventListener(\"mouseout\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n-            });\n-        } else if (hasClass(e, \"ignore\")) {\n-            e.addEventListener(\"mouseover\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"#ff9200\";\n-            });\n-            e.addEventListener(\"mouseout\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n-            });\n+    (function() {\n+        // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n+        var itemAttributesFunc = function() {};\n+        if (getCurrentValue(\"rustdoc-auto-hide-attributes\") !== \"false\") {\n+            itemAttributesFunc = function(x) {\n+                collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n+            };\n         }\n-        lineNumbersFunc(e);\n-    });\n+        var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n+        onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n+            var attr_tog = attributesToggle.cloneNode(true);\n+            if (hasClass(i_e, \"top-attr\") === true) {\n+                addClass(attr_tog, \"top-attr\");\n+            }\n+            i_e.parentNode.insertBefore(attr_tog, i_e);\n+            itemAttributesFunc(i_e);\n+        });\n+    }());\n+\n+    (function() {\n+        // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n+        var lineNumbersFunc = function() {};\n+        if (getCurrentValue(\"rustdoc-line-numbers\") === \"true\") {\n+            lineNumbersFunc = function(x) {\n+                var count = x.textContent.split(\"\\n\").length;\n+                var elems = [];\n+                for (var i = 0; i < count; ++i) {\n+                    elems.push(i + 1);\n+                }\n+                var node = document.createElement(\"pre\");\n+                addClass(node, \"line-number\");\n+                node.innerHTML = elems.join(\"\\n\");\n+                x.parentNode.insertBefore(node, x);\n+            };\n+        }\n+        onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), function(e) {\n+            if (hasClass(e, \"compile_fail\")) {\n+                e.addEventListener(\"mouseover\", function() {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"#f00\";\n+                });\n+                e.addEventListener(\"mouseout\", function() {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n+                });\n+            } else if (hasClass(e, \"ignore\")) {\n+                e.addEventListener(\"mouseover\", function() {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"#ff9200\";\n+                });\n+                e.addEventListener(\"mouseout\", function() {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n+                });\n+            }\n+            lineNumbersFunc(e);\n+        });\n+    }());\n \n     // In the search display, allows to switch between tabs.\n     function printTab(nb) {\n@@ -2678,7 +2688,7 @@ function getSearchElement() {\n         });\n     }\n \n-    function addSearchOptions(crates) {\n+    window.addSearchOptions = function(crates) {\n         var elem = document.getElementById(\"crate-search\");\n \n         if (!elem) {\n@@ -2687,7 +2697,7 @@ function getSearchElement() {\n         var crates_text = [];\n         if (Object.keys(crates).length > 1) {\n             for (var crate in crates) {\n-                if (crates.hasOwnProperty(crate)) {\n+                if (hasOwnProperty(crates, crate)) {\n                     crates_text.push(crate);\n                 }\n             }\n@@ -2722,10 +2732,8 @@ function getSearchElement() {\n \n         if (search_input) {\n             search_input.removeAttribute('disabled');\n-        };\n-    }\n-\n-    window.addSearchOptions = addSearchOptions;\n+        }\n+    };\n \n     function buildHelperPopup() {\n         var popup = document.createElement(\"aside\");\n@@ -2778,16 +2786,6 @@ function getSearchElement() {\n     buildHelperPopup();\n }());\n \n-// Sets the focus on the search bar at the top of the page\n-function focusSearchBar() {\n-    getSearchInput().focus();\n-}\n-\n-// Removes the focus from the search bar\n-function defocusSearchBar() {\n-    getSearchInput().blur();\n-}\n-\n // This is required in firefox. Explanations: when going back in the history, firefox doesn't re-run\n // the JS, therefore preventing rustdoc from setting a few things required to be able to reload the\n // previous search results (if you navigated to a search result with the keyboard, pressed enter on"}, {"sha": "427a74c0c87fa3747d3fad992fbb3ffcdea009e2", "filename": "src/librustdoc/html/static/settings.js", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0747f586ebada402e2b2d5cb14ab40d5f33518a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/0747f586ebada402e2b2d5cb14ab40d5f33518a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js?ref=0747f586ebada402e2b2d5cb14ab40d5f33518a6", "patch": "@@ -1,3 +1,6 @@\n+// Local js definitions:\n+/* global getCurrentValue, updateLocalStorage */\n+\n (function () {\n     function changeSetting(settingName, isEnabled) {\n         updateLocalStorage('rustdoc-' + settingName, isEnabled);"}, {"sha": "cfbfe6675f52bc62e58bf459e884d5c899d2cc6c", "filename": "src/librustdoc/html/static/source-script.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0747f586ebada402e2b2d5cb14ab40d5f33518a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/0747f586ebada402e2b2d5cb14ab40d5f33518a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js?ref=0747f586ebada402e2b2d5cb14ab40d5f33518a6", "patch": "@@ -1,5 +1,5 @@\n // From rust:\n-/* global sourcesIndex */\n+/* global search, sourcesIndex */\n \n // Local js definitions:\n /* global addClass, getCurrentValue, hasClass, removeClass, updateLocalStorage */"}, {"sha": "0a2fae274fa87ade2260a0cb25e0d3b66e8fc291", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0747f586ebada402e2b2d5cb14ab40d5f33518a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/0747f586ebada402e2b2d5cb14ab40d5f33518a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=0747f586ebada402e2b2d5cb14ab40d5f33518a6", "patch": "@@ -27,14 +27,15 @@ function removeClass(elem, className) {\n function onEach(arr, func, reversed) {\n     if (arr && arr.length > 0 && func) {\n         var length = arr.length;\n+        var i;\n         if (reversed !== true) {\n-            for (var i = 0; i < length; ++i) {\n+            for (i = 0; i < length; ++i) {\n                 if (func(arr[i]) === true) {\n                     return true;\n                 }\n             }\n         } else {\n-            for (var i = length - 1; i >= 0; --i) {\n+            for (i = length - 1; i >= 0; --i) {\n                 if (func(arr[i]) === true) {\n                     return true;\n                 }\n@@ -51,6 +52,10 @@ function onEachLazy(lazyArray, func, reversed) {\n         reversed);\n }\n \n+function hasOwnProperty(obj, property) {\n+    return Object.prototype.hasOwnProperty.call(obj, property);\n+}\n+\n function usableLocalStorage() {\n     // Check if the browser supports localStorage at all:\n     if (typeof Storage === \"undefined\") {"}, {"sha": "163571bc5b9882906f3ce68924d8707f461f0b77", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0747f586ebada402e2b2d5cb14ab40d5f33518a6/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/0747f586ebada402e2b2d5cb14ab40d5f33518a6/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=0747f586ebada402e2b2d5cb14ab40d5f33518a6", "patch": "@@ -241,7 +241,7 @@ function loadMainJsAndIndex(mainJs, searchIndex, storageJs, crate) {\n     ALIASES = {};\n     finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n     finalJS += 'var rootPath = \"../\";\\n';\n-    finalJS += loadThings([\"onEach\"], 'function', extractFunction, storageJs);\n+    finalJS += loadThings([\"hasOwnProperty\", \"onEach\"], 'function', extractFunction, storageJs);\n     finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n     finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n     finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);"}]}