{"sha": "b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YjBlZjNlNGI2ZWJmMTU3MWIyYzM4Yjk1MmM5NDBjOGI5NGU5MWU=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-11-13T17:02:25Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-11-13T17:07:39Z"}, "message": "Addressed feedback", "tree": {"sha": "421b4e590101492df0575783fd07a0ed8aa1b677", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/421b4e590101492df0575783fd07a0ed8aa1b677"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e", "html_url": "https://github.com/rust-lang/rust/commit/b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c131063988ff8ac86bbf53a3bf998145c6b99d6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c131063988ff8ac86bbf53a3bf998145c6b99d6f", "html_url": "https://github.com/rust-lang/rust/commit/c131063988ff8ac86bbf53a3bf998145c6b99d6f"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "192bb6680e42014b643248944c8d79903639288a", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e", "patch": "@@ -34,7 +34,7 @@ use rustc_span::{CharPos, Pos, SourceFile, Span, Symbol};\n \n /// A simple error message wrapper for `coverage::Error`s.\n #[derive(Debug)]\n-pub(self) struct Error {\n+struct Error {\n     message: String,\n }\n "}, {"sha": "3d6095d2738cb562deecb28361595667663d888b", "filename": "compiler/rustc_mir/src/transform/coverage/test_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftest_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftest_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftest_macros%2Fsrc%2Flib.rs?ref=b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e", "patch": "@@ -2,7 +2,5 @@ use proc_macro::TokenStream;\n \n #[proc_macro]\n pub fn let_bcb(item: TokenStream) -> TokenStream {\n-    format!(\"let bcb{} = graph::BasicCoverageBlock::from_usize({}); let _ = {};\", item, item, item)\n-        .parse()\n-        .unwrap()\n+    format!(\"let bcb{} = graph::BasicCoverageBlock::from_usize({});\", item, item).parse().unwrap()\n }"}, {"sha": "d36f1b8e5f6705e92e5c472c3fe1e6cc5bf82ba1", "filename": "compiler/rustc_mir/src/transform/coverage/tests.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs?ref=b4b0ef3e4b6ebf1571b2c38b952c940c8b94e91e", "patch": "@@ -35,6 +35,9 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, DebruijnIndex, TyS, TypeFlags};\n use rustc_span::{self, BytePos, Pos, Span, DUMMY_SP};\n \n+// All `TEMP_BLOCK` targets should be replaced before calling `to_body() -> mir::Body`.\n+const TEMP_BLOCK: BasicBlock = BasicBlock::MAX;\n+\n fn dummy_ty() -> &'static TyS<'static> {\n     thread_local! {\n         static DUMMY_TYS: &'static TyS<'static> = Box::leak(box TyS::make_for_test(\n@@ -123,7 +126,7 @@ impl<'tcx> MockBlocks<'tcx> {\n                     if branch_index > branches.len() {\n                         branches.push((branches.len() as u128, old_otherwise));\n                         while branches.len() < branch_index {\n-                            branches.push((branches.len() as u128, START_BLOCK));\n+                            branches.push((branches.len() as u128, TEMP_BLOCK));\n                         }\n                         to_block\n                     } else {\n@@ -143,7 +146,7 @@ impl<'tcx> MockBlocks<'tcx> {\n             TerminatorKind::Call {\n                 func: Operand::Copy(self.dummy_place.clone()),\n                 args: vec![],\n-                destination: Some((self.dummy_place.clone(), START_BLOCK)),\n+                destination: Some((self.dummy_place.clone(), TEMP_BLOCK)),\n                 cleanup: None,\n                 from_hir_call: false,\n                 fn_span: DUMMY_SP,\n@@ -152,16 +155,14 @@ impl<'tcx> MockBlocks<'tcx> {\n     }\n \n     fn goto(&mut self, some_from_block: Option<BasicBlock>) -> BasicBlock {\n-        self.add_block_from(some_from_block, TerminatorKind::Goto { target: START_BLOCK })\n+        self.add_block_from(some_from_block, TerminatorKind::Goto { target: TEMP_BLOCK })\n     }\n \n     fn switchint(&mut self, some_from_block: Option<BasicBlock>) -> BasicBlock {\n-        let move_ = |place: Place<'tcx>| Operand::Move(place);\n-        let discriminant = Place::from(self.new_temp());\n         let switchint_kind = TerminatorKind::SwitchInt {\n-            discr: move_(discriminant),\n+            discr: Operand::Move(Place::from(self.new_temp())),\n             switch_ty: dummy_ty(),\n-            targets: SwitchTargets::static_if(0, START_BLOCK, START_BLOCK),\n+            targets: SwitchTargets::static_if(0, TEMP_BLOCK, TEMP_BLOCK),\n         };\n         self.add_block_from(some_from_block, switchint_kind)\n     }"}]}