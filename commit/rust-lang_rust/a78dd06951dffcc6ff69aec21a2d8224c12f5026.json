{"sha": "a78dd06951dffcc6ff69aec21a2d8224c12f5026", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OGRkMDY5NTFkZmZjYzZmZjY5YWVjMjFhMmQ4MjI0YzEyZjUwMjY=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-05T22:22:02Z"}, "committer": {"name": "Craig Disselkoen", "email": "craigdissel@gmail.com", "date": "2020-05-05T23:12:56Z"}, "message": "Preliminary refactoring of cargo.ts", "tree": {"sha": "f96585d3d63c86dee8f179f37507c2ec853ab4c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f96585d3d63c86dee8f179f37507c2ec853ab4c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a78dd06951dffcc6ff69aec21a2d8224c12f5026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a78dd06951dffcc6ff69aec21a2d8224c12f5026", "html_url": "https://github.com/rust-lang/rust/commit/a78dd06951dffcc6ff69aec21a2d8224c12f5026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a78dd06951dffcc6ff69aec21a2d8224c12f5026/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cdisselkoen", "id": 4458638, "node_id": "MDQ6VXNlcjQ0NTg2Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4458638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdisselkoen", "html_url": "https://github.com/cdisselkoen", "followers_url": "https://api.github.com/users/cdisselkoen/followers", "following_url": "https://api.github.com/users/cdisselkoen/following{/other_user}", "gists_url": "https://api.github.com/users/cdisselkoen/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdisselkoen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdisselkoen/subscriptions", "organizations_url": "https://api.github.com/users/cdisselkoen/orgs", "repos_url": "https://api.github.com/users/cdisselkoen/repos", "events_url": "https://api.github.com/users/cdisselkoen/events{/privacy}", "received_events_url": "https://api.github.com/users/cdisselkoen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e603a8fdd207f9ad5a2ad2898350f54d5bc2fb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e603a8fdd207f9ad5a2ad2898350f54d5bc2fb8", "html_url": "https://github.com/rust-lang/rust/commit/3e603a8fdd207f9ad5a2ad2898350f54d5bc2fb8"}], "stats": {"total": 52, "additions": 19, "deletions": 33}, "files": [{"sha": "613aa82da9a6cfc43fbfb6b90b01d9c6f2062798", "filename": "editors/code/src/cargo.ts", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a78dd06951dffcc6ff69aec21a2d8224c12f5026/editors%2Fcode%2Fsrc%2Fcargo.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a78dd06951dffcc6ff69aec21a2d8224c12f5026/editors%2Fcode%2Fsrc%2Fcargo.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcargo.ts?ref=a78dd06951dffcc6ff69aec21a2d8224c12f5026", "patch": "@@ -10,17 +10,9 @@ interface CompilationArtifact {\n }\n \n export class Cargo {\n-    rootFolder: string;\n-    env?: Record<string, string>;\n-    output: OutputChannel;\n+    constructor(readonly rootFolder: string, readonly output: OutputChannel) { }\n \n-    public constructor(cargoTomlFolder: string, output: OutputChannel, env: Record<string, string> | undefined = undefined) {\n-        this.rootFolder = cargoTomlFolder;\n-        this.output = output;\n-        this.env = env;\n-    }\n-\n-    public async artifactsFromArgs(cargoArgs: string[]): Promise<CompilationArtifact[]> {\n+    private async artifactsFromArgs(cargoArgs: string[]): Promise<CompilationArtifact[]> {\n         const artifacts: CompilationArtifact[] = [];\n \n         try {\n@@ -37,27 +29,22 @@ export class Cargo {\n                                 isTest: message.profile.test\n                             });\n                         }\n-                    }\n-                    else if (message.reason === 'compiler-message') {\n+                    } else if (message.reason === 'compiler-message') {\n                         this.output.append(message.message.rendered);\n                     }\n                 },\n-                stderr => {\n-                    this.output.append(stderr);\n-                }\n+                stderr => this.output.append(stderr),\n             );\n-        }\n-        catch (err) {\n+        } catch (err) {\n             this.output.show(true);\n             throw new Error(`Cargo invocation has failed: ${err}`);\n         }\n \n         return artifacts;\n     }\n \n-    public async executableFromArgs(args: string[]): Promise<string> {\n-        const cargoArgs = [...args]; // to remain  args unchanged\n-        cargoArgs.push(\"--message-format=json\");\n+    async executableFromArgs(args: readonly string[]): Promise<string> {\n+        const cargoArgs = [...args, \"--message-format=json\"];\n \n         const artifacts = await this.artifactsFromArgs(cargoArgs);\n \n@@ -70,24 +57,20 @@ export class Cargo {\n         return artifacts[0].fileName;\n     }\n \n-    runCargo(\n+    private runCargo(\n         cargoArgs: string[],\n         onStdoutJson: (obj: any) => void,\n         onStderrString: (data: string) => void\n     ): Promise<number> {\n-        return new Promise<number>((resolve, reject) => {\n+        return new Promise((resolve, reject) => {\n             const cargo = cp.spawn('cargo', cargoArgs, {\n                 stdio: ['ignore', 'pipe', 'pipe'],\n-                cwd: this.rootFolder,\n-                env: this.env,\n+                cwd: this.rootFolder\n             });\n \n-            cargo.on('error', err => {\n-                reject(new Error(`could not launch cargo: ${err}`));\n-            });\n-            cargo.stderr.on('data', chunk => {\n-                onStderrString(chunk.toString());\n-            });\n+            cargo.on('error', err => reject(new Error(`could not launch cargo: ${err}`)));\n+\n+            cargo.stderr.on('data', chunk => onStderrString(chunk.toString()));\n \n             const rl = readline.createInterface({ input: cargo.stdout });\n             rl.on('line', line => {\n@@ -103,4 +86,4 @@ export class Cargo {\n             });\n         });\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2ed150e25f25705e79666b979a5bb43adaa9b8a5", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a78dd06951dffcc6ff69aec21a2d8224c12f5026/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a78dd06951dffcc6ff69aec21a2d8224c12f5026/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=a78dd06951dffcc6ff69aec21a2d8224c12f5026", "patch": "@@ -119,8 +119,11 @@ export function debugSingle(ctx: Ctx): Cmd {\n         }\n \n         if (!debugEngine) {\n-            vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=${lldbId})`\n-                + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=${cpptoolsId}) extension for debugging.`);\n+            vscode.window.showErrorMessage(\n+                `Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=${lldbId}) ` +\n+                `or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=${cpptoolsId}) ` +\n+                `extension for debugging.`\n+            );\n             return;\n         }\n "}]}