{"sha": "4856affd90df68b0b56dee73c431e9d9cdfc977a", "node_id": "C_kwDOAAsO6NoAKDQ4NTZhZmZkOTBkZjY4YjBiNTZkZWU3M2M0MzFlOWQ5Y2RmYzk3N2E", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-02T01:43:12Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-07T00:26:08Z"}, "message": "Make `HandleCycleError` an enum instead of a macro-generated closure\n\n- Add a `HandleCycleError` enum to rustc_query_system, along with a `handle_cycle_error` function\n- Move `Value` to rustc_query_system, so `handle_cycle_error` can use it\n- Move the `Value` impls from rustc_query_impl to rustc_middle. This is necessary due to orphan rules.", "tree": {"sha": "795fc827d5100424319225253d154a923ccc6cfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/795fc827d5100424319225253d154a923ccc6cfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4856affd90df68b0b56dee73c431e9d9cdfc977a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4856affd90df68b0b56dee73c431e9d9cdfc977a", "html_url": "https://github.com/rust-lang/rust/commit/4856affd90df68b0b56dee73c431e9d9cdfc977a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4856affd90df68b0b56dee73c431e9d9cdfc977a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e09a13bb848a64acf6bb20359f582e813e74764", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e09a13bb848a64acf6bb20359f582e813e74764", "html_url": "https://github.com/rust-lang/rust/commit/4e09a13bb848a64acf6bb20359f582e813e74764"}], "stats": {"total": 129, "additions": 86, "deletions": 43}, "files": [{"sha": "7edc9a16cc17f3e47228581fb8e3fca1ba32c375", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=4856affd90df68b0b56dee73c431e9d9cdfc977a", "patch": "@@ -95,6 +95,7 @@ pub mod mir;\n pub mod thir;\n pub mod traits;\n pub mod ty;\n+mod values;\n \n pub mod util {\n     pub mod bug;"}, {"sha": "7fbe9ae2a8418931f3e76121fdfd7623552b1785", "filename": "compiler/rustc_middle/src/values.rs", "status": "renamed", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=4856affd90df68b0b56dee73c431e9d9cdfc977a", "patch": "@@ -1,39 +1,28 @@\n-use super::QueryCtxt;\n-use rustc_middle::ty::{self, AdtSizedConstraint, Ty};\n+use rustc_middle::ty::{self, AdtSizedConstraint, Ty, TyCtxt};\n+use rustc_query_system::Value;\n \n-pub(super) trait Value<'tcx>: Sized {\n-    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self;\n-}\n-\n-impl<'tcx, T> Value<'tcx> for T {\n-    default fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> T {\n-        tcx.sess.abort_if_errors();\n-        bug!(\"Value::from_cycle_error called without errors\");\n-    }\n-}\n-\n-impl<'tcx> Value<'tcx> for Ty<'_> {\n-    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self {\n+impl<'tcx> Value<TyCtxt<'tcx>> for Ty<'_> {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n         // SAFETY: This is never called when `Self` is not `Ty<'tcx>`.\n         // FIXME: Represent the above fact in the trait system somehow.\n         unsafe { std::mem::transmute::<Ty<'tcx>, Ty<'_>>(tcx.ty_error()) }\n     }\n }\n \n-impl<'tcx> Value<'tcx> for ty::SymbolName<'_> {\n-    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self {\n+impl<'tcx> Value<TyCtxt<'tcx>> for ty::SymbolName<'_> {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n         // SAFETY: This is never called when `Self` is not `SymbolName<'tcx>`.\n         // FIXME: Represent the above fact in the trait system somehow.\n         unsafe {\n             std::mem::transmute::<ty::SymbolName<'tcx>, ty::SymbolName<'_>>(ty::SymbolName::new(\n-                *tcx, \"<error>\",\n+                tcx, \"<error>\",\n             ))\n         }\n     }\n }\n \n-impl<'tcx> Value<'tcx> for AdtSizedConstraint<'_> {\n-    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self {\n+impl<'tcx> Value<TyCtxt<'tcx>> for AdtSizedConstraint<'_> {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n         // SAFETY: This is never called when `Self` is not `AdtSizedConstraint<'tcx>`.\n         // FIXME: Represent the above fact in the trait system somehow.\n         unsafe {\n@@ -44,8 +33,8 @@ impl<'tcx> Value<'tcx> for AdtSizedConstraint<'_> {\n     }\n }\n \n-impl<'tcx> Value<'tcx> for ty::Binder<'_, ty::FnSig<'_>> {\n-    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self {\n+impl<'tcx> Value<TyCtxt<'tcx>> for ty::Binder<'_, ty::FnSig<'_>> {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n         let err = tcx.ty_error();\n         // FIXME(compiler-errors): It would be nice if we could get the\n         // query key, so we could at least generate a fn signature that", "previous_filename": "compiler/rustc_query_impl/src/values.rs"}, {"sha": "26d397f70e0ce83eb725bd09b03b88f40236ef54", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=4856affd90df68b0b56dee73c431e9d9cdfc977a", "patch": "@@ -34,9 +34,6 @@ pub use rustc_query_system::query::{deadlock, QueryContext};\n mod keys;\n use keys::Key;\n \n-mod values;\n-use self::values::Value;\n-\n pub use rustc_query_system::query::QueryConfig;\n pub(crate) use rustc_query_system::query::{QueryDescription, QueryVTable};\n "}, {"sha": "1e375deb20d1d5d33ffce1525211fadf7fb43511", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=4856affd90df68b0b56dee73c431e9d9cdfc977a", "patch": "@@ -18,6 +18,7 @@ use rustc_query_system::query::{\n     force_query, QueryConfig, QueryContext, QueryDescription, QueryJobId, QueryMap,\n     QuerySideEffects, QueryStackFrame,\n };\n+use rustc_query_system::Value;\n use std::any::Any;\n use std::num::NonZeroU64;\n use thin_vec::ThinVec;\n@@ -174,21 +175,17 @@ impl<'tcx> QueryCtxt<'tcx> {\n }\n \n macro_rules! handle_cycle_error {\n-    ([][$tcx: expr, $error:expr]) => {{\n-        $error.emit();\n-        Value::from_cycle_error($tcx)\n+    ([]) => {{\n+        rustc_query_system::HandleCycleError::Error\n     }};\n-    ([(fatal_cycle) $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n-        $error.emit();\n-        $tcx.sess.abort_if_errors();\n-        unreachable!()\n+    ([(fatal_cycle) $($rest:tt)*]) => {{\n+        rustc_query_system::HandleCycleError::Fatal\n     }};\n-    ([(cycle_delay_bug) $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n-        $error.delay_as_bug();\n-        Value::from_cycle_error($tcx)\n+    ([(cycle_delay_bug) $($rest:tt)*]) => {{\n+        rustc_query_system::HandleCycleError::DelayBug\n     }};\n-    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n-        handle_cycle_error!([$($modifiers)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        handle_cycle_error!([$($modifiers)*])\n     };\n }\n \n@@ -320,6 +317,7 @@ fn force_from_dep_node<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n where\n     Q: QueryDescription<QueryCtxt<'tcx>>,\n     Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n+    Q::Value: Value<TyCtxt<'tcx>>,\n {\n     if let Some(key) = Q::Key::recover(tcx, &dep_node) {\n         #[cfg(debug_assertions)]\n@@ -418,7 +416,7 @@ macro_rules! define_queries {\n                     depth_limit: depth_limit!([$($modifiers)*]),\n                     dep_kind: dep_graph::DepKind::$name,\n                     hash_result: hash_result!([$($modifiers)*]),\n-                    handle_cycle_error: |tcx, mut error| handle_cycle_error!([$($modifiers)*][tcx, error]),\n+                    handle_cycle_error: handle_cycle_error!([$($modifiers)*]),\n                     compute,\n                     cache_on_disk,\n                     try_load_from_disk: Self::TRY_LOAD_FROM_DISK,"}, {"sha": "3fb06cbedbd507f6f5d0d04f684d8fc418553518", "filename": "compiler/rustc_query_system/src/error.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs?ref=4856affd90df68b0b56dee73c431e9d9cdfc977a", "patch": "@@ -12,6 +12,13 @@ impl AddSubdiagnostic for CycleStack {\n     }\n }\n \n+#[derive(Copy, Clone)]\n+pub enum HandleCycleError {\n+    Error,\n+    Fatal,\n+    DelayBug,\n+}\n+\n #[derive(SessionSubdiagnostic)]\n pub enum StackCount {\n     #[note(query_system::cycle_stack_single)]"}, {"sha": "8a88b5c334078b77941997efbcdf0ed97c805d23", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=4856affd90df68b0b56dee73c431e9d9cdfc977a", "patch": "@@ -20,3 +20,7 @@ pub mod dep_graph;\n mod error;\n pub mod ich;\n pub mod query;\n+mod values;\n+\n+pub use error::HandleCycleError;\n+pub use values::Value;"}, {"sha": "c63e110a62e3935fb301b0f0e10e7edb8fe616a8", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=4856affd90df68b0b56dee73c431e9d9cdfc977a", "patch": "@@ -2,12 +2,12 @@\n \n use crate::dep_graph::DepNode;\n use crate::dep_graph::SerializedDepNodeIndex;\n+use crate::error::HandleCycleError;\n use crate::ich::StableHashingContext;\n use crate::query::caches::QueryCache;\n use crate::query::{QueryContext, QueryState};\n \n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use std::fmt::Debug;\n use std::hash::Hash;\n \n@@ -19,6 +19,7 @@ pub trait QueryConfig {\n     type Stored: Clone;\n }\n \n+#[derive(Copy, Clone)]\n pub struct QueryVTable<CTX: QueryContext, K, V> {\n     pub anon: bool,\n     pub dep_kind: CTX::DepKind,\n@@ -28,7 +29,7 @@ pub struct QueryVTable<CTX: QueryContext, K, V> {\n \n     pub compute: fn(CTX::DepContext, K) -> V,\n     pub hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n-    pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_, ErrorGuaranteed>) -> V,\n+    pub handle_cycle_error: HandleCycleError,\n     pub try_load_from_disk: Option<fn(CTX, SerializedDepNodeIndex) -> Option<V>>,\n }\n "}, {"sha": "e39e39860cbb8d09cb8b2712d8fa2e7f293cca92", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=4856affd90df68b0b56dee73c431e9d9cdfc977a", "patch": "@@ -7,6 +7,8 @@ use crate::query::caches::QueryCache;\n use crate::query::config::{QueryDescription, QueryVTable};\n use crate::query::job::{report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo};\n use crate::query::{QueryContext, QueryMap, QuerySideEffects, QueryStackFrame};\n+use crate::values::Value;\n+use crate::HandleCycleError;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n #[cfg(parallel_compiler)]\n@@ -118,19 +120,46 @@ where\n fn mk_cycle<CTX, V, R>(\n     tcx: CTX,\n     error: CycleError,\n-    handle_cycle_error: fn(CTX, DiagnosticBuilder<'_, ErrorGuaranteed>) -> V,\n+    handler: HandleCycleError,\n     cache: &dyn crate::query::QueryStorage<Value = V, Stored = R>,\n ) -> R\n where\n     CTX: QueryContext,\n-    V: std::fmt::Debug,\n+    V: std::fmt::Debug + Value<CTX::DepContext>,\n     R: Clone,\n {\n     let error = report_cycle(tcx.dep_context().sess(), error);\n-    let value = handle_cycle_error(tcx, error);\n+    let value = handle_cycle_error(*tcx.dep_context(), error, handler);\n     cache.store_nocache(value)\n }\n \n+fn handle_cycle_error<CTX, V>(\n+    tcx: CTX,\n+    mut error: DiagnosticBuilder<'_, ErrorGuaranteed>,\n+    handler: HandleCycleError,\n+) -> V\n+where\n+    CTX: DepContext,\n+    V: Value<CTX>,\n+{\n+    use HandleCycleError::*;\n+    match handler {\n+        Error => {\n+            error.emit();\n+            Value::from_cycle_error(tcx)\n+        }\n+        Fatal => {\n+            error.emit();\n+            tcx.sess().abort_if_errors();\n+            unreachable!()\n+        }\n+        DelayBug => {\n+            error.delay_as_bug();\n+            Value::from_cycle_error(tcx)\n+        }\n+    }\n+}\n+\n impl<'tcx, K> JobOwner<'tcx, K>\n where\n     K: Eq + Hash + Clone,\n@@ -336,6 +365,7 @@ fn try_execute_query<CTX, C>(\n where\n     C: QueryCache,\n     C::Key: Clone + DepNodeParams<CTX::DepContext>,\n+    C::Value: Value<CTX::DepContext>,\n     CTX: QueryContext,\n {\n     match JobOwner::<'_, C::Key>::try_start(&tcx, state, span, key.clone()) {\n@@ -686,6 +716,7 @@ pub fn get_query<Q, CTX>(tcx: CTX, span: Span, key: Q::Key, mode: QueryMode) ->\n where\n     Q: QueryDescription<CTX>,\n     Q::Key: DepNodeParams<CTX::DepContext>,\n+    Q::Value: Value<CTX::DepContext>,\n     CTX: QueryContext,\n {\n     let query = Q::make_vtable(tcx, &key);\n@@ -718,6 +749,7 @@ pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, dep_node: DepNode<CTX::DepKind\n where\n     Q: QueryDescription<CTX>,\n     Q::Key: DepNodeParams<CTX::DepContext>,\n+    Q::Value: Value<CTX::DepContext>,\n     CTX: QueryContext,\n {\n     // We may be concurrently trying both execute and force a query."}, {"sha": "aeef66f86dacc24867035912f9e224d8b3ad6b23", "filename": "compiler/rustc_query_system/src/values.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_system%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4856affd90df68b0b56dee73c431e9d9cdfc977a/compiler%2Frustc_query_system%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fvalues.rs?ref=4856affd90df68b0b56dee73c431e9d9cdfc977a", "patch": "@@ -0,0 +1,14 @@\n+use crate::dep_graph::DepContext;\n+\n+pub trait Value<CTX: DepContext>: Sized {\n+    fn from_cycle_error(tcx: CTX) -> Self;\n+}\n+\n+impl<CTX: DepContext, T> Value<CTX> for T {\n+    default fn from_cycle_error(tcx: CTX) -> T {\n+        tcx.sess().abort_if_errors();\n+        // Ideally we would use `bug!` here. But bug! is only defined in rustc_middle, and it's\n+        // non-trivial to define it earlier.\n+        panic!(\"Value::from_cycle_error called without errors\");\n+    }\n+}"}]}