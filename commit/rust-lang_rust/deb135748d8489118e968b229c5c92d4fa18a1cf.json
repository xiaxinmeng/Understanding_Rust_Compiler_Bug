{"sha": "deb135748d8489118e968b229c5c92d4fa18a1cf", "node_id": "C_kwDOAAsO6NoAKGRlYjEzNTc0OGQ4NDg5MTE4ZTk2OGIyMjljNWM5MmQ0ZmExOGExY2Y", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-14T20:07:33Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-22T21:52:26Z"}, "message": "Suppress duplicated errors for associated type bounds in object types", "tree": {"sha": "fd180497b63ca09f9fdd527f1838dc57f1f2dcff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd180497b63ca09f9fdd527f1838dc57f1f2dcff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deb135748d8489118e968b229c5c92d4fa18a1cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deb135748d8489118e968b229c5c92d4fa18a1cf", "html_url": "https://github.com/rust-lang/rust/commit/deb135748d8489118e968b229c5c92d4fa18a1cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deb135748d8489118e968b229c5c92d4fa18a1cf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c490892f440afb1e34b3c2315aca04f51cd070", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c490892f440afb1e34b3c2315aca04f51cd070", "html_url": "https://github.com/rust-lang/rust/commit/e7c490892f440afb1e34b3c2315aca04f51cd070"}], "stats": {"total": 193, "additions": 56, "deletions": 137}, "files": [{"sha": "9faf112f4a1f2043faf8b9ae67d9fb973c8de11c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 46, "deletions": 33, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/deb135748d8489118e968b229c5c92d4fa18a1cf/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb135748d8489118e968b229c5c92d4fa18a1cf/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=deb135748d8489118e968b229c5c92d4fa18a1cf", "patch": "@@ -1011,8 +1011,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 hir::TypeBindingKind::Equality { term }\n             }\n             AssocConstraintKind::Bound { bounds } => {\n+                enum DesugarKind<'a> {\n+                    ImplTrait,\n+                    Error(&'a ImplTraitPosition),\n+                    Bound,\n+                }\n+\n                 // Piggy-back on the `impl Trait` context to figure out the correct behavior.\n-                let (desugar_to_impl_trait, itctx) = match itctx {\n+                let desugar_kind = match itctx {\n                     // We are in the return position:\n                     //\n                     //     fn foo() -> impl Iterator<Item: Debug>\n@@ -1021,7 +1027,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     //\n                     //     fn foo() -> impl Iterator<Item = impl Debug>\n                     ImplTraitContext::ReturnPositionOpaqueTy { .. }\n-                    | ImplTraitContext::TypeAliasesOpaqueTy { .. } => (true, itctx),\n+                    | ImplTraitContext::TypeAliasesOpaqueTy { .. } => DesugarKind::ImplTrait,\n \n                     // We are in the argument position, but within a dyn type:\n                     //\n@@ -1030,7 +1036,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so desugar to\n                     //\n                     //     fn foo(x: dyn Iterator<Item = impl Debug>)\n-                    ImplTraitContext::Universal if self.is_in_dyn_type => (true, itctx),\n+                    ImplTraitContext::Universal if self.is_in_dyn_type => DesugarKind::ImplTrait,\n \n                     // In `type Foo = dyn Iterator<Item: Debug>` we desugar to\n                     // `type Foo = dyn Iterator<Item = impl Debug>` but we have to override the\n@@ -1039,11 +1045,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     //\n                     // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n                     ImplTraitContext::Disallowed(position) if self.is_in_dyn_type => {\n-                        self.tcx.sess.emit_err(errors::MisplacedAssocTyBinding {\n-                            span: constraint.span,\n-                            position: DiagnosticArgFromDisplay(position),\n-                        });\n-                        (false, itctx)\n+                        DesugarKind::Error(position)\n                     }\n \n                     // We are in the parameter position, but not within a dyn type:\n@@ -1053,35 +1055,46 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so we leave it as is and this gets expanded in astconv to a bound like\n                     // `<T as Iterator>::Item: Debug` where `T` is the type parameter for the\n                     // `impl Iterator`.\n-                    _ => (false, itctx),\n+                    _ => DesugarKind::Bound,\n                 };\n \n-                if desugar_to_impl_trait {\n-                    // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n-                    // constructing the HIR for `impl bounds...` and then lowering that.\n-\n-                    let impl_trait_node_id = self.next_node_id();\n-\n-                    self.with_dyn_type_scope(false, |this| {\n-                        let node_id = this.next_node_id();\n-                        let ty = this.lower_ty(\n-                            &Ty {\n-                                id: node_id,\n-                                kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                                span: this.lower_span(constraint.span),\n-                                tokens: None,\n-                            },\n-                            itctx,\n-                        );\n+                match desugar_kind {\n+                    DesugarKind::ImplTrait => {\n+                        // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n+                        // constructing the HIR for `impl bounds...` and then lowering that.\n \n-                        hir::TypeBindingKind::Equality { term: ty.into() }\n-                    })\n-                } else {\n-                    // Desugar `AssocTy: Bounds` into a type binding where the\n-                    // later desugars into a trait predicate.\n-                    let bounds = self.lower_param_bounds(bounds, itctx);\n+                        let impl_trait_node_id = self.next_node_id();\n+\n+                        self.with_dyn_type_scope(false, |this| {\n+                            let node_id = this.next_node_id();\n+                            let ty = this.lower_ty(\n+                                &Ty {\n+                                    id: node_id,\n+                                    kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n+                                    span: this.lower_span(constraint.span),\n+                                    tokens: None,\n+                                },\n+                                itctx,\n+                            );\n \n-                    hir::TypeBindingKind::Constraint { bounds }\n+                            hir::TypeBindingKind::Equality { term: ty.into() }\n+                        })\n+                    }\n+                    DesugarKind::Bound => {\n+                        // Desugar `AssocTy: Bounds` into a type binding where the\n+                        // later desugars into a trait predicate.\n+                        let bounds = self.lower_param_bounds(bounds, itctx);\n+\n+                        hir::TypeBindingKind::Constraint { bounds }\n+                    }\n+                    DesugarKind::Error(position) => {\n+                        self.tcx.sess.emit_err(errors::MisplacedAssocTyBinding {\n+                            span: constraint.span,\n+                            position: DiagnosticArgFromDisplay(position),\n+                        });\n+                        let err_ty = &*self.arena.alloc(self.ty(constraint.span, hir::TyKind::Err));\n+                        hir::TypeBindingKind::Equality { term: err_ty.into() }\n+                    }\n                 }\n             }\n         };"}, {"sha": "8cab1f66c2709348b1ec2ef4c3c56b8bfee22278", "filename": "tests/ui/associated-type-bounds/bad-universal-in-dyn-in-where-clause.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deb135748d8489118e968b229c5c92d4fa18a1cf/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb135748d8489118e968b229c5c92d4fa18a1cf/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs?ref=deb135748d8489118e968b229c5c92d4fa18a1cf", "patch": "@@ -8,7 +8,6 @@ fn f()\n where\n     dyn for<'j> B<AssocType: 'j>:,\n     //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-    //~| ERROR the value of the associated type `AssocType` (from trait `B`) must be specified\n {\n }\n "}, {"sha": "fdc221eeda241229c1f835c73f0ea452ef8a1c54", "filename": "tests/ui/associated-type-bounds/bad-universal-in-dyn-in-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deb135748d8489118e968b229c5c92d4fa18a1cf/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deb135748d8489118e968b229c5c92d4fa18a1cf/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr?ref=deb135748d8489118e968b229c5c92d4fa18a1cf", "patch": "@@ -4,15 +4,5 @@ error: associated type bounds are only allowed in where clauses and function sig\n LL |     dyn for<'j> B<AssocType: 'j>:,\n    |                   ^^^^^^^^^^^^^\n \n-error[E0191]: the value of the associated type `AssocType` (from trait `B`) must be specified\n-  --> $DIR/bad-universal-in-dyn-in-where-clause.rs:9:9\n-   |\n-LL |     type AssocType;\n-   |     -------------- `AssocType` defined here\n-...\n-LL |     dyn for<'j> B<AssocType: 'j>:,\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `for<'j> B<AssocType: 'j, AssocType = Type>`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0191`."}, {"sha": "1d5d181efcc01009851a6ab5f7b19757f6690b7a", "filename": "tests/ui/associated-type-bounds/bad-universal-in-impl-sig.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deb135748d8489118e968b229c5c92d4fa18a1cf/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb135748d8489118e968b229c5c92d4fa18a1cf/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs?ref=deb135748d8489118e968b229c5c92d4fa18a1cf", "patch": "@@ -9,6 +9,5 @@ trait Trait2 {}\n // It's not possible to insert a universal `impl Trait` here!\n impl dyn Trait<Item: Trait2> {}\n //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-//~| ERROR the value of the associated type `Item` (from trait `Trait`) must be specified\n \n fn main() {}"}, {"sha": "057966941dc099ee8feea40befc2ab4e7be1d1ab", "filename": "tests/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/deb135748d8489118e968b229c5c92d4fa18a1cf/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb135748d8489118e968b229c5c92d4fa18a1cf/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=deb135748d8489118e968b229c5c92d4fa18a1cf", "patch": "@@ -4,32 +4,23 @@ use std::mem::ManuallyDrop;\n \n struct S1 { f: dyn Iterator<Item: Copy> }\n //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n struct S3 { f: dyn Iterator<Item: 'static> }\n //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n \n enum E1 { V(dyn Iterator<Item: Copy>) }\n //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n enum E3 { V(dyn Iterator<Item: 'static>) }\n //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n \n union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n \n fn main() {}"}, {"sha": "f631ad5b78a2ebdd9635a7ebf6ea2b630603ef34", "filename": "tests/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 9, "deletions": 82, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/deb135748d8489118e968b229c5c92d4fa18a1cf/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deb135748d8489118e968b229c5c92d4fa18a1cf/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=deb135748d8489118e968b229c5c92d4fa18a1cf", "patch": "@@ -5,125 +5,52 @@ LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n-  --> $DIR/inside-adt.rs:8:33\n+  --> $DIR/inside-adt.rs:7:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n-  --> $DIR/inside-adt.rs:11:29\n+  --> $DIR/inside-adt.rs:9:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n-  --> $DIR/inside-adt.rs:15:26\n+  --> $DIR/inside-adt.rs:12:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n-  --> $DIR/inside-adt.rs:18:30\n+  --> $DIR/inside-adt.rs:14:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n-  --> $DIR/inside-adt.rs:21:26\n+  --> $DIR/inside-adt.rs:16:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n-  --> $DIR/inside-adt.rs:25:41\n+  --> $DIR/inside-adt.rs:19:41\n    |\n LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n    |                                         ^^^^^^^^^^\n \n error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n-  --> $DIR/inside-adt.rs:28:45\n+  --> $DIR/inside-adt.rs:21:45\n    |\n LL | union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n    |                                             ^^^^^^^^^^\n \n error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n-  --> $DIR/inside-adt.rs:31:41\n+  --> $DIR/inside-adt.rs:23:41\n    |\n LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n    |                                         ^^^^^^^^^^^^^\n \n-error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n-  --> $DIR/inside-adt.rs:5:20\n-   |\n-LL | struct S1 { f: dyn Iterator<Item: Copy> }\n-   |                    ^^^^^^^^^^^^^^^^^^^^\n-   |                    |\n-   |                    associated type `Item` must be specified\n-   |                    help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n-\n-error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n-  --> $DIR/inside-adt.rs:8:24\n-   |\n-LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n-   |                        ^^^^^^^^^^^^^^^^^^^^\n-   |                        |\n-   |                        associated type `Item` must be specified\n-   |                        help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n-\n-error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n-  --> $DIR/inside-adt.rs:11:20\n-   |\n-LL | struct S3 { f: dyn Iterator<Item: 'static> }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `Iterator<Item: 'static, Item = Type>`\n-\n-error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n-  --> $DIR/inside-adt.rs:15:17\n-   |\n-LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n-   |                 ^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 associated type `Item` must be specified\n-   |                 help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n-\n-error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n-  --> $DIR/inside-adt.rs:18:21\n-   |\n-LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n-   |                     ^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     associated type `Item` must be specified\n-   |                     help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n-\n-error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n-  --> $DIR/inside-adt.rs:21:17\n-   |\n-LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `Iterator<Item: 'static, Item = Type>`\n-\n-error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n-  --> $DIR/inside-adt.rs:25:32\n-   |\n-LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n-   |                                ^^^^^^^^^^^^^^^^^^^^\n-   |                                |\n-   |                                associated type `Item` must be specified\n-   |                                help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n-\n-error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n-  --> $DIR/inside-adt.rs:28:36\n-   |\n-LL | union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n-   |                                    ^^^^^^^^^^^^^^^^^^^^\n-   |                                    |\n-   |                                    associated type `Item` must be specified\n-   |                                    help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n-\n-error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n-  --> $DIR/inside-adt.rs:31:32\n-   |\n-LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `Iterator<Item: 'static, Item = Type>`\n-\n-error: aborting due to 18 previous errors\n+error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0191`."}]}