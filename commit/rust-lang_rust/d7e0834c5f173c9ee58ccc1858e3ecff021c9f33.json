{"sha": "d7e0834c5f173c9ee58ccc1858e3ecff021c9f33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZTA4MzRjNWYxNzNjOWVlNThjY2MxODU4ZTNlY2ZmMDIxYzlmMzM=", "commit": {"author": {"name": "lcnr/Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2019-06-03T19:30:25Z"}, "committer": {"name": "lcnr/Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2019-06-03T19:30:25Z"}, "message": "add ui tests for unchecked math", "tree": {"sha": "365c3bf77250bd435fa9e282e6e8a48b1a24e1b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/365c3bf77250bd435fa9e282e6e8a48b1a24e1b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33", "html_url": "https://github.com/rust-lang/rust/commit/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a25fdb4094a192521ca365117d204ab07f009fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a25fdb4094a192521ca365117d204ab07f009fe", "html_url": "https://github.com/rust-lang/rust/commit/8a25fdb4094a192521ca365117d204ab07f009fe"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "a034b45f5308c8a2d5e1ff98bb8f5949d7e833ed", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.rs?ref=d7e0834c5f173c9ee58ccc1858e3ecff021c9f33", "patch": "@@ -0,0 +1,8 @@\n+#![feature(core_intrinsics)]\n+\n+fn main() {\n+    let (x, y) = (1u32, 2u32);\n+    let add = std::intrinsics::unchecked_add(x, y); //~ ERROR call to unsafe function\n+    let sub = std::intrinsics::unchecked_sub(x, y); //~ ERROR call to unsafe function\n+    let mul = std::intrinsics::unchecked_mul(x, y); //~ ERROR call to unsafe function\n+}"}, {"sha": "4066cf8efb8c18a72be91ecbb640387f3485065e", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.stderr?ref=d7e0834c5f173c9ee58ccc1858e3ecff021c9f33", "patch": "@@ -0,0 +1,27 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:5:15\n+   |\n+LL |     let add = std::intrinsics::unchecked_add(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:6:15\n+   |\n+LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/unchecked_math_unsafe.rs:7:15\n+   |\n+LL |     let mul = std::intrinsics::unchecked_mul(x, y);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "8869063d1cc3d9cd6ae8dc7b460fc13233c549c0", "filename": "src/test/ui/intrinsics/unchecked_math_unstable.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.rs?ref=d7e0834c5f173c9ee58ccc1858e3ecff021c9f33", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let (x, y) = (1u32, 2u32);\n+    unsafe {\n+        let add = std::intrinsics::unchecked_add(x, y); //~ ERROR use of unstable library feature\n+        let sub = std::intrinsics::unchecked_sub(x, y); //~ ERROR use of unstable library feature\n+        let mul = std::intrinsics::unchecked_mul(x, y); //~ ERROR use of unstable library feature\n+    }\n+}"}, {"sha": "6f5429127c690ee7b2bbaea4724eb013e546f624", "filename": "src/test/ui/intrinsics/unchecked_math_unstable.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7e0834c5f173c9ee58ccc1858e3ecff021c9f33/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unstable.stderr?ref=d7e0834c5f173c9ee58ccc1858e3ecff021c9f33", "patch": "@@ -0,0 +1,27 @@\n+error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library\n+  --> $DIR/unchecked_math_unstable.rs:4:19\n+   |\n+LL |         let add = std::intrinsics::unchecked_add(x, y);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(core_intrinsics)] to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library\n+  --> $DIR/unchecked_math_unstable.rs:5:19\n+   |\n+LL |         let sub = std::intrinsics::unchecked_sub(x, y);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(core_intrinsics)] to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library\n+  --> $DIR/unchecked_math_unstable.rs:6:19\n+   |\n+LL |         let mul = std::intrinsics::unchecked_mul(x, y);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(core_intrinsics)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}