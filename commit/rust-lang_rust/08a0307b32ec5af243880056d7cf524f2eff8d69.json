{"sha": "08a0307b32ec5af243880056d7cf524f2eff8d69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YTAzMDdiMzJlYzVhZjI0Mzg4MDA1NmQ3Y2Y1MjRmMmVmZjhkNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-19T11:03:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-19T11:03:09Z"}, "message": "Auto merge of #89089 - JohnTitor:rollup-6s6mccx, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #87960 (Suggest replacing an inexisting field for an unmentioned field)\n - #88855 (Allow simd_shuffle to accept vectors of any length)\n - #88966 (Check for shadowing issues involving block labels)\n - #88996 (Fix linting when trailing macro expands to a trailing semi)\n - #89017 (fix potential race in AtomicU64 time monotonizer)\n - #89021 (Add a separate error for `dyn Trait` in `const fn`)\n - #89051 (Add intra-doc links and small changes to `std::os` to be more consistent)\n - #89053 (refactor: VecDeques IntoIter fields to private)\n - #89055 (Suggest better place to add call parentheses for method expressions wrapped in parentheses)\n - #89081 (Fix a typo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a0d72c00cf6c7918025c7b44f2654d19c9ce8cb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0d72c00cf6c7918025c7b44f2654d19c9ce8cb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a0307b32ec5af243880056d7cf524f2eff8d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a0307b32ec5af243880056d7cf524f2eff8d69", "html_url": "https://github.com/rust-lang/rust/commit/08a0307b32ec5af243880056d7cf524f2eff8d69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a0307b32ec5af243880056d7cf524f2eff8d69/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a3d1a5f3dfeaf5177885fedd7db8ecc70670dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3d1a5f3dfeaf5177885fedd7db8ecc70670dc1", "html_url": "https://github.com/rust-lang/rust/commit/7a3d1a5f3dfeaf5177885fedd7db8ecc70670dc1"}, {"sha": "4877ad3d12a89efb08d850628d05dcd7a1416490", "url": "https://api.github.com/repos/rust-lang/rust/commits/4877ad3d12a89efb08d850628d05dcd7a1416490", "html_url": "https://github.com/rust-lang/rust/commit/4877ad3d12a89efb08d850628d05dcd7a1416490"}], "stats": {"total": 645, "additions": 506, "deletions": 139}, "files": [{"sha": "b309a124e80894e26a0b4cd01bc66369b0fccd8b", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -918,12 +918,29 @@ fn generic_simd_intrinsic(\n     }\n \n     if let Some(stripped) = name_str.strip_prefix(\"simd_shuffle\") {\n-        let n: u64 = stripped.parse().unwrap_or_else(|_| {\n-            span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\")\n-        });\n+        // If this intrinsic is the older \"simd_shuffleN\" form, simply parse the integer.\n+        // If there is no suffix, use the index array length.\n+        let n: u64 = if stripped.is_empty() {\n+            // Make sure this is actually an array, since typeck only checks the length-suffixed\n+            // version of this intrinsic.\n+            match args[2].layout.ty.kind() {\n+                ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n+                    len.try_eval_usize(bx.cx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(|| {\n+                        span_bug!(span, \"could not evaluate shuffle index array length\")\n+                    })\n+                }\n+                _ => return_error!(\n+                    \"simd_shuffle index must be an array of `u32`, got `{}`\",\n+                    args[2].layout.ty\n+                ),\n+            }\n+        } else {\n+            stripped.parse().unwrap_or_else(|_| {\n+                span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\")\n+            })\n+        };\n \n         require_simd!(ret_ty, \"return\");\n-\n         let (out_len, out_ty) = ret_ty.simd_size_and_type(bx.tcx());\n         require!(\n             out_len == n,"}, {"sha": "0861aab2e318ccb7c49dff26c37fd0ca45982055", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -665,8 +665,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         if i == 2 && intrinsic.as_str().starts_with(\"simd_shuffle\") {\n                             if let mir::Operand::Constant(constant) = arg {\n                                 let c = self.eval_mir_constant(constant);\n-                                let (llval, ty) =\n-                                    self.simd_shuffle_indices(&bx, constant.span, constant.ty(), c);\n+                                let (llval, ty) = self.simd_shuffle_indices(\n+                                    &bx,\n+                                    constant.span,\n+                                    self.monomorphize(constant.ty()),\n+                                    c,\n+                                );\n                                 return OperandRef {\n                                     val: Immediate(llval),\n                                     layout: bx.layout_of(ty),"}, {"sha": "9eec930f59e525cf5212e02cbadbf2226cd2bcb2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -384,11 +384,11 @@ impl Checker<'mir, 'tcx> {\n                         match pred.skip_binder() {\n                             ty::ExistentialPredicate::AutoTrait(_)\n                             | ty::ExistentialPredicate::Projection(_) => {\n-                                self.check_op(ops::ty::TraitBound(kind))\n+                                self.check_op(ops::ty::DynTrait(kind))\n                             }\n                             ty::ExistentialPredicate::Trait(trait_ref) => {\n                                 if Some(trait_ref.def_id) != self.tcx.lang_items().sized_trait() {\n-                                    self.check_op(ops::ty::TraitBound(kind))\n+                                    self.check_op(ops::ty::DynTrait(kind))\n                                 }\n                             }\n                         }"}, {"sha": "1d0ee949a221b8df1ff9fe29abfb079d6fb066e0", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -599,7 +599,7 @@ pub mod ty {\n         }\n \n         fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-            let mut builder = feature_err(\n+            let mut err = feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_fn_trait_bound,\n                 span,\n@@ -608,12 +608,51 @@ pub mod ty {\n \n             match ccx.fn_sig() {\n                 Some(fn_sig) if !fn_sig.span.contains(span) => {\n-                    builder.span_label(fn_sig.span, \"function declared as const here\");\n+                    err.span_label(fn_sig.span, \"function declared as const here\");\n                 }\n                 _ => {}\n             }\n \n-            builder\n+            err\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    pub struct DynTrait(pub mir::LocalKind);\n+    impl NonConstOp for DynTrait {\n+        fn importance(&self) -> DiagnosticImportance {\n+            match self.0 {\n+                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n+                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n+                    DiagnosticImportance::Primary\n+                }\n+            }\n+        }\n+\n+        fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+            if ccx.const_kind() != hir::ConstContext::ConstFn {\n+                Status::Allowed\n+            } else {\n+                Status::Unstable(sym::const_fn_trait_bound)\n+            }\n+        }\n+\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+            let mut err = feature_err(\n+                &ccx.tcx.sess.parse_sess,\n+                sym::const_fn_trait_bound,\n+                span,\n+                \"trait objects in const fn are unstable\",\n+            );\n+\n+            match ccx.fn_sig() {\n+                Some(fn_sig) if !fn_sig.span.contains(span) => {\n+                    err.span_label(fn_sig.span, \"function declared as const here\");\n+                }\n+                _ => {}\n+            }\n+\n+            err\n         }\n     }\n "}, {"sha": "24268aef2222a8b51a0093b36abc97c73951faad", "filename": "compiler/rustc_error_codes/src/error_codes/E0439.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0439.md", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0439.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0439.md?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n The length of the platform-intrinsic function `simd_shuffle` wasn't specified.\n \n Erroneous code example:\n \n-```compile_fail,E0439\n+```ignore (no longer emitted)\n #![feature(platform_intrinsics)]\n \n extern \"platform-intrinsic\" {"}, {"sha": "d32593f34adefc750c68f8a9ed4f1b20f5f8a29c", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1386,14 +1386,17 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         // `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` lint if needed.\n         // See #78991 for an investigation of treating macros in this position\n         // as statements, rather than expressions, during parsing.\n-        if let StmtKind::Expr(expr) = &stmt.kind {\n-            if matches!(**expr, ast::Expr { kind: ast::ExprKind::MacCall(..), .. }) {\n+        let res = match &stmt.kind {\n+            StmtKind::Expr(expr)\n+                if matches!(**expr, ast::Expr { kind: ast::ExprKind::MacCall(..), .. }) =>\n+            {\n                 self.cx.current_expansion.is_trailing_mac = true;\n+                // Don't use `assign_id` for this statement - it may get removed\n+                // entirely due to a `#[cfg]` on the contained expression\n+                noop_flat_map_stmt(stmt, self)\n             }\n-        }\n-\n-        let res = assign_id!(self, &mut stmt.id, || noop_flat_map_stmt(stmt, self));\n-\n+            _ => assign_id!(self, &mut stmt.id, || noop_flat_map_stmt(stmt, self)),\n+        };\n         self.cx.current_expansion.is_trailing_mac = false;\n         res\n     }"}, {"sha": "a158e0e48e86ca616c27024ac1a25e0c1f451013", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1652,7 +1652,11 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     }\n \n     fn expression_label(ex: &hir::Expr<'_>) -> Option<Ident> {\n-        if let hir::ExprKind::Loop(_, Some(label), ..) = ex.kind { Some(label.ident) } else { None }\n+        match ex.kind {\n+            hir::ExprKind::Loop(_, Some(label), ..) => Some(label.ident),\n+            hir::ExprKind::Block(_, Some(label)) => Some(label.ident),\n+            _ => None,\n+        }\n     }\n \n     fn check_if_label_shadows_lifetime(tcx: TyCtxt<'_>, mut scope: ScopeRef<'_>, label: Ident) {"}, {"sha": "322bea3806cfa5eef8695afb484db53b86b6e93c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1212,6 +1212,7 @@ symbols! {\n         simd_select_bitmask,\n         simd_shl,\n         simd_shr,\n+        simd_shuffle,\n         simd_sub,\n         simd_trunc,\n         simd_xor,"}, {"sha": "11b6c93a115283c8af05c75db1252ee916d427e0", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1860,6 +1860,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 field,\n                 expr_t,\n                 expr,\n+                None,\n             );\n         }\n         err.emit();\n@@ -1886,9 +1887,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n         let expr_snippet =\n             self.tcx.sess.source_map().span_to_snippet(expr.span).unwrap_or(String::new());\n-        if expr_is_call && expr_snippet.starts_with(\"(\") && expr_snippet.ends_with(\")\") {\n-            let after_open = expr.span.lo() + rustc_span::BytePos(1);\n-            let before_close = expr.span.hi() - rustc_span::BytePos(1);\n+        let is_wrapped = expr_snippet.starts_with(\"(\") && expr_snippet.ends_with(\")\");\n+        let after_open = expr.span.lo() + rustc_span::BytePos(1);\n+        let before_close = expr.span.hi() - rustc_span::BytePos(1);\n+\n+        if expr_is_call && is_wrapped {\n             err.multipart_suggestion(\n                 \"remove wrapping parentheses to call the method\",\n                 vec![\n@@ -1898,12 +1901,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Applicability::MachineApplicable,\n             );\n         } else if !self.expr_in_place(expr.hir_id) {\n+            // Suggest call parentheses inside the wrapping parentheses\n+            let span = if is_wrapped {\n+                expr.span.with_lo(after_open).with_hi(before_close)\n+            } else {\n+                expr.span\n+            };\n             self.suggest_method_call(\n                 &mut err,\n                 \"use parentheses to call the method\",\n                 field,\n                 expr_t,\n                 expr,\n+                Some(span),\n             );\n         } else {\n             err.help(\"methods are immutable and cannot be assigned to\");"}, {"sha": "ff7a26853b1885c273d22baeeb8d36b9514ff7ed", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -2,7 +2,7 @@\n //! intrinsics that the compiler exposes.\n \n use crate::errors::{\n-    SimdShuffleMissingLength, UnrecognizedAtomicOperation, UnrecognizedIntrinsicFunction,\n+    UnrecognizedAtomicOperation, UnrecognizedIntrinsicFunction,\n     WrongNumberOfGenericArgumentsToIntrinsic,\n };\n use crate::require_same_types;\n@@ -468,14 +468,17 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         | sym::simd_reduce_max\n         | sym::simd_reduce_min_nanless\n         | sym::simd_reduce_max_nanless => (2, vec![param(0)], param(1)),\n+        sym::simd_shuffle => (3, vec![param(0), param(0), param(1)], param(2)),\n         name if name.as_str().starts_with(\"simd_shuffle\") => {\n             match name.as_str()[\"simd_shuffle\".len()..].parse() {\n                 Ok(n) => {\n                     let params = vec![param(0), param(0), tcx.mk_array(tcx.types.u32, n)];\n                     (2, params, param(1))\n                 }\n                 Err(_) => {\n-                    tcx.sess.emit_err(SimdShuffleMissingLength { span: it.span, name });\n+                    let msg =\n+                        format!(\"unrecognized platform-specific intrinsic function: `{}`\", name);\n+                    tcx.sess.struct_span_err(it.span, &msg).emit();\n                     return;\n                 }\n             }"}, {"sha": "8e09aa97dcf345ea396f06fbbd7002576455d9a8", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -141,6 +141,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         method_name: Ident,\n         self_ty: Ty<'tcx>,\n         call_expr: &hir::Expr<'_>,\n+        span: Option<Span>,\n     ) {\n         let params = self\n             .probe_for_name(\n@@ -159,7 +160,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .unwrap_or(0);\n \n         // Account for `foo.bar<T>`;\n-        let sugg_span = call_expr.span.shrink_to_hi();\n+        let sugg_span = span.unwrap_or_else(|| call_expr.span).shrink_to_hi();\n         let (suggestion, applicability) = (\n             format!(\"({})\", (0..params).map(|_| \"_\").collect::<Vec<_>>().join(\", \")),\n             if params > 0 { Applicability::HasPlaceholders } else { Applicability::MaybeIncorrect },"}, {"sha": "829268e3cb527d7b5240a75c4cd454f5b9a95327", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1452,7 +1452,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     plural\n                 ),\n             );\n-            if plural == \"\" {\n+\n+            if unmentioned_fields.len() == 1 {\n                 let input =\n                     unmentioned_fields.iter().map(|(_, field)| field.name).collect::<Vec<_>>();\n                 let suggested_name = find_best_match_for_name(&input, ident.name, None);\n@@ -1473,6 +1474,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // We don't want to throw `E0027` in case we have thrown `E0026` for them.\n                         unmentioned_fields.retain(|&(_, x)| x.name != suggested_name);\n                     }\n+                } else if inexistent_fields.len() == 1 {\n+                    let unmentioned_field = unmentioned_fields[0].1.name;\n+                    err.span_suggestion_short(\n+                        ident.span,\n+                        &format!(\n+                            \"`{}` has a field named `{}`\",\n+                            tcx.def_path_str(variant.def_id),\n+                            unmentioned_field\n+                        ),\n+                        unmentioned_field.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n             }\n         }"}, {"sha": "47077779616c012ae8a257213c829a37136e3390", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -121,14 +121,6 @@ pub struct AssocTypeBindingNotAllowed {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[error = \"E0439\"]\n-pub struct SimdShuffleMissingLength {\n-    #[message = \"invalid `simd_shuffle`, needs length: `{name}`\"]\n-    pub span: Span,\n-    pub name: Symbol,\n-}\n-\n #[derive(SessionDiagnostic)]\n #[error = \"E0436\"]\n pub struct FunctionalRecordUpdateOnNonStruct {"}, {"sha": "54a157be0b96acdfecab5838f1385f0c1b939db1", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -17,7 +17,13 @@ pub struct IntoIter<\n     T,\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n > {\n-    pub(crate) inner: VecDeque<T, A>,\n+    inner: VecDeque<T, A>,\n+}\n+\n+impl<T, A: Allocator> IntoIter<T, A> {\n+    pub(super) fn new(inner: VecDeque<T, A>) -> Self {\n+        IntoIter { inner }\n+    }\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]"}, {"sha": "10144cc17bf306579ccc1b4e2272fb86b11a644d", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -2827,7 +2827,7 @@ impl<T, A: Allocator> IntoIterator for VecDeque<T, A> {\n     /// Consumes the `VecDeque` into a front-to-back iterator yielding elements by\n     /// value.\n     fn into_iter(self) -> IntoIter<T, A> {\n-        IntoIter { inner: self }\n+        IntoIter::new(self)\n     }\n }\n "}, {"sha": "8164ec56985791d09c8ed011fda482c1a3484b59", "filename": "library/std/src/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -182,7 +182,7 @@ impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     ///\n     /// impl fmt::Display for AnError {\n     ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f , \"An error\")\n+    ///         write!(f, \"An error\")\n     ///     }\n     /// }\n     ///\n@@ -215,7 +215,7 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     ///\n     /// impl fmt::Display for AnError {\n     ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f , \"An error\")\n+    ///         write!(f, \"An error\")\n     ///     }\n     /// }\n     ///"}, {"sha": "f69baba9e733f748d140972e08d0e2269904f2b7", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -234,6 +234,7 @@\n #![feature(atomic_mut_ptr)]\n #![feature(auto_traits)]\n #![feature(bench_black_box)]\n+#![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(c_unwind)]\n #![feature(c_variadic)]"}, {"sha": "9d18ccbeb2494025374a3f04b99dcd4a60e62eef", "filename": "library/std/src/os/linux/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Ffs.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,6 @@\n-//! Linux-specific extensions to primitives in the `std::fs` module.\n+//! Linux-specific extensions to primitives in the [`std::fs`] module.\n+//!\n+//! [`std::fs`]: crate::fs\n \n #![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n "}, {"sha": "540363c03494e1aeed25f9d19b776c424c27bd4d", "filename": "library/std/src/os/linux/process.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,6 @@\n-//! Linux-specific extensions to primitives in the `std::process` module.\n+//! Linux-specific extensions to primitives in the [`std::process`] module.\n+//!\n+//! [`std::process`]: crate::process\n \n #![unstable(feature = \"linux_pidfd\", issue = \"82971\")]\n "}, {"sha": "5b49f50763d74bba8e61ef66ad3097144325fbaa", "filename": "library/std/src/os/unix/ffi/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi%2Fmod.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,4 @@\n-//! Unix-specific extension to the primitives in the `std::ffi` module.\n+//! Unix-specific extensions to primitives in the [`std::ffi`] module.\n //!\n //! # Examples\n //!\n@@ -31,6 +31,8 @@\n //! let bytes = os_str.as_bytes();\n //! assert_eq!(bytes, b\"foo\");\n //! ```\n+//!\n+//! [`std::ffi`]: crate::ffi\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "0284a428b5d749b8695257d575592cd4f8298672", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,6 @@\n-//! Unix-specific extensions to primitives in the `std::fs` module.\n+//! Unix-specific extensions to primitives in the [`std::fs`] module.\n+//!\n+//! [`std::fs`]: crate::fs\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "62f750fa607c96fa5805ea9003a706edef301946", "filename": "library/std/src/os/unix/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -4,8 +4,8 @@\n //! exposes Unix-specific functions that would otherwise be inappropriate as\n //! part of the core `std` library.\n //!\n-//! It exposes more ways to deal with platform-specific strings (`OsStr`,\n-//! `OsString`), allows to set permissions more granularly, extract low-level\n+//! It exposes more ways to deal with platform-specific strings ([`OsStr`],\n+//! [`OsString`]), allows to set permissions more granularly, extract low-level\n //! file descriptors from files and sockets, and has platform-specific helpers\n //! for spawning processes.\n //!\n@@ -24,6 +24,9 @@\n //!     Ok(())\n //! }\n //! ```\n+//!\n+//! [`OsStr`]: crate::ffi::OsStr\n+//! [`OsString`]: crate::ffi::OsString\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(cfg(unix))]"}, {"sha": "8ce8220885419d0877dd6bd96216f15c2e4c66fe", "filename": "library/std/src/os/unix/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,4 @@\n-//! Unix-specific networking functionality\n+//! Unix-specific networking functionality.\n \n #![stable(feature = \"unix_socket\", since = \"1.10.0\")]\n "}, {"sha": "4d23805e479ba067e4eb5c00dabc13db24566a2a", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,6 @@\n-//! Unix-specific extensions to primitives in the `std::process` module.\n+//! Unix-specific extensions to primitives in the [`std::process`] module.\n+//!\n+//! [`std::process`]: crate::process\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "03dcc3a4f9ba0c24e48ec333bf7de381011de89d", "filename": "library/std/src/os/unix/thread.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fthread.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,6 @@\n-//! Unix-specific extensions to primitives in the `std::thread` module.\n+//! Unix-specific extensions to primitives in the [`std::thread`] module.\n+//!\n+//! [`std::thread`]: crate::thread\n \n #![stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n "}, {"sha": "41dd8702e98e9bc396c2ce8e8b8ba0f9aff757ca", "filename": "library/std/src/os/wasi/ffi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fffi.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,6 @@\n-//! WASI-specific extension to the primitives in the `std::ffi` module\n+//! WASI-specific extensions to primitives in the [`std::ffi`] module\n+//!\n+//! [`std::ffi`]: crate::ffi\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "907368061d7c430641a2f5e5cc8e6091f42a398c", "filename": "library/std/src/os/wasi/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,6 @@\n-//! WASI-specific extensions to primitives in the `std::fs` module.\n+//! WASI-specific extensions to primitives in the [`std::fs`] module.\n+//!\n+//! [`std::fs`]: crate::fs\n \n #![deny(unsafe_op_in_unsafe_fn)]\n #![unstable(feature = \"wasi_ext\", issue = \"71213\")]"}, {"sha": "bbaf328f457e44ed98346e7c7ac18b73c3da8717", "filename": "library/std/src/os/wasi/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fmod.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -24,6 +24,9 @@\n //!     Ok(())\n //! }\n //! ```\n+//!\n+//! [`OsStr`]: crate::ffi::OsStr\n+//! [`OsString`]: crate::ffi::OsString\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![deny(unsafe_op_in_unsafe_fn)]"}, {"sha": "a9493a94cac26077427e221965ab736050df1635", "filename": "library/std/src/os/windows/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fffi.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,4 @@\n-//! Windows-specific extensions to the primitives in the `std::ffi` module.\n+//! Windows-specific extensions to primitives in the [`std::ffi`] module.\n //!\n //! # Overview\n //!\n@@ -49,6 +49,7 @@\n //! [ill-formed-utf-16]: https://simonsapin.github.io/wtf-8/#ill-formed-utf-16\n //! [`collect`]: crate::iter::Iterator::collect\n //! [U+FFFD]: crate::char::REPLACEMENT_CHARACTER\n+//! [`std::ffi`]: crate::ffi\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "be35ab0ca1e66cf62a34cedf54d90a7c99085a2d", "filename": "library/std/src/os/windows/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,6 @@\n-//! Windows-specific extensions for the primitives in the `std::fs` module.\n+//! Windows-specific extensions to primitives in the [`std::fs`] module.\n+//!\n+//! [`std::fs`]: crate::fs\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "52eb3b7c06769406a394b93d0a7dc27dbe10f29a", "filename": "library/std/src/os/windows/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fmod.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -5,6 +5,22 @@\n //! the core `std` library. These extensions allow developers to use\n //! `std` types and idioms with Windows in a way that the normal\n //! platform-agnostic idioms would not normally support.\n+//!\n+//! # Examples\n+//!\n+//! ```no_run\n+//! use std::fs::File;\n+//! use std::os::windows::prelude::*;\n+//!\n+//! fn main() -> std::io::Result<()> {\n+//!     let f = File::create(\"foo.txt\")?;\n+//!     let handle = f.as_raw_handle();\n+//!\n+//!     // use handle with native windows bindings\n+//!\n+//!     Ok(())\n+//! }\n+//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(cfg(windows))]"}, {"sha": "9510d104806db301e2892526faf67fead9561d68", "filename": "library/std/src/os/windows/process.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,6 @@\n-//! Extensions to `std::process` for Windows.\n+//! Windows-specific extensions to primitives in the [`std::process`] module.\n+//!\n+//! [`std::process`]: crate::process\n \n #![stable(feature = \"process_extensions\", since = \"1.2.0\")]\n "}, {"sha": "d81d6d0ac28a9dfada48c7ee9e17a5184011d41f", "filename": "library/std/src/os/windows/thread.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fthread.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,6 @@\n-//! Extensions to `std::thread` for Windows.\n+//! Windows-specific extensions to primitives in the [`std::thread`] module.\n+//!\n+//! [`std::thread`]: crate::thread\n \n #![stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n "}, {"sha": "198ae739b55674d990396cfe6128a45c807dc3a9", "filename": "library/std/src/time/monotonic.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -37,35 +37,36 @@ pub mod inner {\n         // This could be a problem for programs that call instants at intervals greater\n         // than 68 years. Interstellar probes may want to ensure that actually_monotonic() is true.\n         let packed = (secs << 32) | nanos;\n-        let old = mono.load(Relaxed);\n-\n-        if old == UNINITIALIZED || packed.wrapping_sub(old) < u64::MAX / 2 {\n-            mono.store(packed, Relaxed);\n-            raw\n-        } else {\n-            // Backslide occurred. We reconstruct monotonized time from the upper 32 bit of the\n-            // passed in value and the 64bits loaded from the atomic\n-            let seconds_lower = old >> 32;\n-            let mut seconds_upper = secs & 0xffff_ffff_0000_0000;\n-            if secs & 0xffff_ffff > seconds_lower {\n-                // Backslide caused the lower 32bit of the seconds part to wrap.\n-                // This must be the case because the seconds part is larger even though\n-                // we are in the backslide branch, i.e. the seconds count should be smaller or equal.\n-                //\n-                // We assume that backslides are smaller than 2^32 seconds\n-                // which means we need to add 1 to the upper half to restore it.\n-                //\n-                // Example:\n-                // most recent observed time: 0xA1_0000_0000_0000_0000u128\n-                // bits stored in AtomicU64:     0x0000_0000_0000_0000u64\n-                // backslide by 1s\n-                // caller time is             0xA0_ffff_ffff_0000_0000u128\n-                // -> we can fix up the upper half time by adding 1 << 32\n-                seconds_upper = seconds_upper.wrapping_add(0x1_0000_0000);\n+        let updated = mono.fetch_update(Relaxed, Relaxed, |old| {\n+            (old == UNINITIALIZED || packed.wrapping_sub(old) < u64::MAX / 2).then_some(packed)\n+        });\n+        match updated {\n+            Ok(_) => raw,\n+            Err(newer) => {\n+                // Backslide occurred. We reconstruct monotonized time from the upper 32 bit of the\n+                // passed in value and the 64bits loaded from the atomic\n+                let seconds_lower = newer >> 32;\n+                let mut seconds_upper = secs & 0xffff_ffff_0000_0000;\n+                if secs & 0xffff_ffff > seconds_lower {\n+                    // Backslide caused the lower 32bit of the seconds part to wrap.\n+                    // This must be the case because the seconds part is larger even though\n+                    // we are in the backslide branch, i.e. the seconds count should be smaller or equal.\n+                    //\n+                    // We assume that backslides are smaller than 2^32 seconds\n+                    // which means we need to add 1 to the upper half to restore it.\n+                    //\n+                    // Example:\n+                    // most recent observed time: 0xA1_0000_0000_0000_0000u128\n+                    // bits stored in AtomicU64:     0x0000_0000_0000_0000u64\n+                    // backslide by 1s\n+                    // caller time is             0xA0_ffff_ffff_0000_0000u128\n+                    // -> we can fix up the upper half time by adding 1 << 32\n+                    seconds_upper = seconds_upper.wrapping_add(0x1_0000_0000);\n+                }\n+                let secs = seconds_upper | seconds_lower;\n+                let nanos = newer as u32;\n+                ZERO.checked_add_duration(&Duration::new(secs, nanos)).unwrap()\n             }\n-            let secs = seconds_upper | seconds_lower;\n-            let nanos = old as u32;\n-            ZERO.checked_add_duration(&Duration::new(secs, nanos)).unwrap()\n         }\n     }\n }"}, {"sha": "19c08b621442522b7d5ef316655d5476432312f5", "filename": "src/test/ui/consts/const_fn_trait_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -8,9 +8,9 @@\n const fn test1<T: std::ops::Add>() {}\n //[stock]~^ trait bounds\n const fn test2(_x: &dyn Send) {}\n-//[stock]~^ trait bounds\n+//[stock]~^ trait objects in const fn are unstable\n const fn test3() -> &'static dyn Send { loop {} }\n-//[stock]~^ trait bounds\n+//[stock]~^ trait objects in const fn are unstable\n \n \n #[rustc_error]"}, {"sha": "d652b5268a8bf3594c8743eab58ca184713245d2", "filename": "src/test/ui/consts/const_fn_trait_bound.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -7,7 +7,7 @@ LL | const fn test1<T: std::ops::Add>() {}\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/const_fn_trait_bound.rs:10:16\n    |\n LL | const fn test2(_x: &dyn Send) {}\n@@ -16,7 +16,7 @@ LL | const fn test2(_x: &dyn Send) {}\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/const_fn_trait_bound.rs:12:21\n    |\n LL | const fn test3() -> &'static dyn Send { loop {} }"}, {"sha": "10347a02074ec56221053f5d095b13be2a1aac23", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -130,16 +130,16 @@ const fn no_apit(_x: impl std::fmt::Debug) {}\n //~^ ERROR trait bounds other than `Sized`\n //~| ERROR destructor\n const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n-//~^ ERROR trait bounds other than `Sized`\n+//~^ ERROR trait objects in const fn are unstable\n const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-//~^ ERROR trait bounds other than `Sized`\n+//~^ ERROR trait objects in const fn are unstable\n \n const fn no_unsafe() { unsafe {} }\n \n const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-//~^ ERROR trait bounds other than `Sized`\n-//~| ERROR trait bounds other than `Sized`\n-//~| ERROR trait bounds other than `Sized`\n+//~^ ERROR trait objects in const fn are unstable\n+//~| ERROR trait objects in const fn are unstable\n+//~| ERROR trait objects in const fn are unstable\n \n const fn no_fn_ptrs(_x: fn()) {}\n //~^ ERROR function pointer"}, {"sha": "1e275d77bac672e1820f3fd31d0c66f9fdae589a", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -279,7 +279,7 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                  |\n    |                  constant functions cannot evaluate destructors\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn.rs:132:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n@@ -288,7 +288,7 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn.rs:134:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n@@ -297,7 +297,7 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn.rs:139:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n@@ -308,7 +308,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn.rs:139:42\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n@@ -319,7 +319,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn.rs:139:42\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }"}, {"sha": "1ab8253b414a3b7333052a6a44d3ff66fbbfceba", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -7,9 +7,9 @@ struct Hide(HasDyn);\n const fn no_inner_dyn_trait(_x: Hide) {}\n const fn no_inner_dyn_trait2(x: Hide) {\n     x.0.field;\n-//~^ ERROR trait bounds other than `Sized`\n+//~^ ERROR trait objects in const fn are unstable\n }\n const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-//~^ ERROR trait bounds other than `Sized`\n+//~^ ERROR trait objects in const fn are unstable\n \n fn main() {}"}, {"sha": "6eec1df5aeca7ba9fb942827b42f7078ff287237", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn_dyn.rs:9:5\n    |\n LL | const fn no_inner_dyn_trait2(x: Hide) {\n@@ -9,7 +9,7 @@ LL |     x.0.field;\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn_dyn.rs:12:66\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }"}, {"sha": "86e9cb55a9c865b797d3883d2d46241628d1b4e7", "filename": "src/test/ui/error-codes/E0439.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a3d1a5f3dfeaf5177885fedd7db8ecc70670dc1/src%2Ftest%2Fui%2Ferror-codes%2FE0439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3d1a5f3dfeaf5177885fedd7db8ecc70670dc1/src%2Ftest%2Fui%2Ferror-codes%2FE0439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0439.rs?ref=7a3d1a5f3dfeaf5177885fedd7db8ecc70670dc1", "patch": "@@ -1,8 +0,0 @@\n-#![feature(platform_intrinsics)]\n-\n-extern \"platform-intrinsic\" {\n-    fn simd_shuffle<A,B>(a: A, b: A, c: [u32; 8]) -> B; //~ ERROR E0439\n-}\n-\n-fn main () {\n-}"}, {"sha": "8021f7d3951a887f083641e3bb2d6232cbf7cacc", "filename": "src/test/ui/error-codes/E0439.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a3d1a5f3dfeaf5177885fedd7db8ecc70670dc1/src%2Ftest%2Fui%2Ferror-codes%2FE0439.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a3d1a5f3dfeaf5177885fedd7db8ecc70670dc1/src%2Ftest%2Fui%2Ferror-codes%2FE0439.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0439.stderr?ref=7a3d1a5f3dfeaf5177885fedd7db8ecc70670dc1", "patch": "@@ -1,9 +0,0 @@\n-error[E0439]: invalid `simd_shuffle`, needs length: `simd_shuffle`\n-  --> $DIR/E0439.rs:4:5\n-   |\n-LL |     fn simd_shuffle<A,B>(a: A, b: A, c: [u32; 8]) -> B;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0439`."}, {"sha": "09c52292dccaff9ba05d44d83dd16faf69881588", "filename": "src/test/ui/issues/issue-51102.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fissues%2Fissue-51102.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fissues%2Fissue-51102.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51102.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -2,7 +2,10 @@ error[E0026]: struct `SimpleStruct` does not have a field named `state`\n   --> $DIR/issue-51102.rs:13:17\n    |\n LL |                 state: 0,\n-   |                 ^^^^^ struct `SimpleStruct` does not have this field\n+   |                 ^^^^^\n+   |                 |\n+   |                 struct `SimpleStruct` does not have this field\n+   |                 help: `SimpleStruct` has a field named `no_state_here`\n \n error[E0025]: field `no_state_here` bound multiple times in the pattern\n   --> $DIR/issue-51102.rs:24:17"}, {"sha": "68a19a8f6f7170c9b9a95deb61292acab941bc66", "filename": "src/test/ui/loops/loops-reject-duplicate-labels-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n+#![feature(label_break_value)]\n \n-\n-// Issue #21633: reject duplicate loop labels in function bodies.\n+// Issue #21633: reject duplicate loop labels and block labels in function bodies.\n //\n // This is testing the generalization (to the whole function body)\n // discussed here:\n@@ -26,6 +26,8 @@ pub fn foo() {\n     { 'lt: loop { break; } }\n     { 'lt: while let Some(_) = None::<i32> { break; } }\n                                          //~^ WARN label name `'lt` shadows a label name that is already in scope\n+    { 'bl: {} }\n+    { 'bl: {} } //~ WARN label name `'bl` shadows a label name that is already in scope\n }\n \n "}, {"sha": "2c372fcff7a12aa1c6cc37ac90c1b2e48e1b6751", "filename": "src/test/ui/loops/loops-reject-duplicate-labels-2.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -62,5 +62,13 @@ LL |     { 'lt: loop { break; } }\n LL |     { 'lt: while let Some(_) = None::<i32> { break; } }\n    |       ^^^ label `'lt` already in scope\n \n-warning: 8 warnings emitted\n+warning: label name `'bl` shadows a label name that is already in scope\n+  --> $DIR/loops-reject-duplicate-labels-2.rs:30:7\n+   |\n+LL |     { 'bl: {} }\n+   |       --- first declared here\n+LL |     { 'bl: {} }\n+   |       ^^^ label `'bl` already in scope\n+\n+warning: 9 warnings emitted\n "}, {"sha": "c34bcf3df1d76253870af5d66e5837acb9af1772", "filename": "src/test/ui/loops/loops-reject-duplicate-labels.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,8 +1,7 @@\n // check-pass\n+#![feature(label_break_value)]\n \n-\n-// Issue #21633: reject duplicate loop labels in function bodies.\n-// This is testing the exact cases that are in the issue description.\n+// Issue #21633: reject duplicate loop labels and block labels in function bodies.\n \n #[allow(unused_labels)]\n fn foo() {\n@@ -24,6 +23,8 @@ fn foo() {\n     'lt: loop { break; }\n     'lt: while let Some(_) = None::<i32> { break; }\n                                    //~^ WARN label name `'lt` shadows a label name that is already in scope\n+    'bl: {}\n+    'bl: {} //~ WARN label name `'bl` shadows a label name that is already in scope\n }\n \n // Note however that it is okay for the same label to be reused in\n@@ -33,12 +34,16 @@ struct S;\n impl S {\n     fn m1(&self) { 'okay: loop { break 'okay; } }\n     fn m2(&self) { 'okay: loop { break 'okay; } }\n+    fn m3(&self) { 'okay: { break 'okay; } }\n+    fn m4(&self) { 'okay: { break 'okay; } }\n }\n \n \n pub fn main() {\n     let s = S;\n     s.m1();\n     s.m2();\n+    s.m3();\n+    s.m4();\n     foo();\n }"}, {"sha": "3bf3af763ecfc9aa80fb3ea306c709e0da693f6b", "filename": "src/test/ui/loops/loops-reject-duplicate-labels.stderr", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,66 +1,74 @@\n warning: label name `'fl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:10:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:9:5\n    |\n LL |     'fl: for _ in 0..10 { break; }\n    |     --- first declared here\n LL |     'fl: loop { break; }\n    |     ^^^ label `'fl` already in scope\n \n warning: label name `'lf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:13:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:12:5\n    |\n LL |     'lf: loop { break; }\n    |     --- first declared here\n LL |     'lf: for _ in 0..10 { break; }\n    |     ^^^ label `'lf` already in scope\n \n warning: label name `'wl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:15:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:14:5\n    |\n LL |     'wl: while 2 > 1 { break; }\n    |     --- first declared here\n LL |     'wl: loop { break; }\n    |     ^^^ label `'wl` already in scope\n \n warning: label name `'lw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:17:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:16:5\n    |\n LL |     'lw: loop { break; }\n    |     --- first declared here\n LL |     'lw: while 2 > 1 { break; }\n    |     ^^^ label `'lw` already in scope\n \n warning: label name `'fw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:19:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:18:5\n    |\n LL |     'fw: for _ in 0..10 { break; }\n    |     --- first declared here\n LL |     'fw: while 2 > 1 { break; }\n    |     ^^^ label `'fw` already in scope\n \n warning: label name `'wf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:21:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:20:5\n    |\n LL |     'wf: while 2 > 1 { break; }\n    |     --- first declared here\n LL |     'wf: for _ in 0..10 { break; }\n    |     ^^^ label `'wf` already in scope\n \n warning: label name `'tl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:23:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:22:5\n    |\n LL |     'tl: while let Some(_) = None::<i32> { break; }\n    |     --- first declared here\n LL |     'tl: loop { break; }\n    |     ^^^ label `'tl` already in scope\n \n warning: label name `'lt` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:25:5\n+  --> $DIR/loops-reject-duplicate-labels.rs:24:5\n    |\n LL |     'lt: loop { break; }\n    |     --- first declared here\n LL |     'lt: while let Some(_) = None::<i32> { break; }\n    |     ^^^ label `'lt` already in scope\n \n-warning: 8 warnings emitted\n+warning: label name `'bl` shadows a label name that is already in scope\n+  --> $DIR/loops-reject-duplicate-labels.rs:27:5\n+   |\n+LL |     'bl: {}\n+   |     --- first declared here\n+LL |     'bl: {}\n+   |     ^^^ label `'bl` already in scope\n+\n+warning: 9 warnings emitted\n "}, {"sha": "ce2d07eb06a4d766e8fcbc86ade0b87b98fb8a09", "filename": "src/test/ui/loops/loops-reject-lifetime-shadowing-label.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -1,10 +1,10 @@\n // check-pass\n-\n+#![feature(label_break_value)]\n #![allow(dead_code, unused_variables)]\n \n-// Issue #21633:  reject duplicate loop labels in function bodies.\n+// Issue #21633:  reject duplicate loop labels and block labels in function bodies.\n //\n-// Test rejection of lifetimes in *expressions* that shadow loop labels.\n+// Test rejection of lifetimes in *expressions* that shadow labels.\n \n fn foo() {\n     // Reusing lifetime `'a` in function item is okay.\n@@ -23,8 +23,13 @@ fn foo() {\n         assert_eq!((*b)(&z), z);\n         break 'a;\n     }\n-}\n \n+    'b: {\n+        let b = Box::new(|x: &()| ()) as Box<dyn for <'b> Fn(&'b ())>;\n+        //~^ WARN lifetime name `'b` shadows a label name that is already in scope\n+        break 'b;\n+    }\n+}\n \n pub fn main() {\n     foo();"}, {"sha": "9702b71600b5e572878742d1bc26542ae750ff84", "filename": "src/test/ui/loops/loops-reject-lifetime-shadowing-label.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -6,5 +6,13 @@ LL |     'a: loop {\n LL |         let b = Box::new(|x: &i8| *x) as Box<dyn for <'a> Fn(&'a i8) -> i8>;\n    |                                                       ^^ label `'a` already in scope\n \n-warning: 1 warning emitted\n+warning: lifetime name `'b` shadows a label name that is already in scope\n+  --> $DIR/loops-reject-lifetime-shadowing-label.rs:28:55\n+   |\n+LL |     'b: {\n+   |     -- first declared here\n+LL |         let b = Box::new(|x: &()| ()) as Box<dyn for <'b> Fn(&'b ())>;\n+   |                                                       ^^ label `'b` already in scope\n+\n+warning: 2 warnings emitted\n "}, {"sha": "f8e847563915e97b4e8475bf6ebdd285b5ecd782", "filename": "src/test/ui/macros/lint-trailing-macro-call.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+//\n+// Ensures that we properly lint\n+// a removed 'expression' resulting from a macro\n+// in trailing expression position\n+\n+macro_rules! expand_it {\n+    () => {\n+        #[cfg(FALSE)] 25; //~  WARN trailing semicolon in macro\n+                          //~| WARN this was previously\n+    }\n+}\n+\n+fn main() {\n+    expand_it!()\n+}"}, {"sha": "a98a559c8afaded3aee9a1c917a384f0112718ab", "filename": "src/test/ui/macros/lint-trailing-macro-call.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -0,0 +1,18 @@\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/lint-trailing-macro-call.rs:9:25\n+   |\n+LL |         #[cfg(FALSE)] 25;\n+   |                         ^\n+...\n+LL |     expand_it!()\n+   |     ------------ in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `expand_it`\n+   = note: this warning originates in the macro `expand_it` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 1 warning emitted\n+"}, {"sha": "668405ed638c1d18ccbce364da0f940eb518fa36", "filename": "src/test/ui/numeric/numeric-fields.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-fields.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -16,7 +16,10 @@ error[E0026]: struct `S` does not have a field named `0x1`\n   --> $DIR/numeric-fields.rs:7:17\n    |\n LL |         S{0: a, 0x1: b, ..} => {}\n-   |                 ^^^ struct `S` does not have this field\n+   |                 ^^^\n+   |                 |\n+   |                 struct `S` does not have this field\n+   |                 help: `S` has a field named `1`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9611780ac079ecb4b72c436630067571a2812ea8", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-shuffle.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -0,0 +1,33 @@\n+// build-fail\n+\n+// Test that the simd_shuffle intrinsic produces ok-ish error\n+// messages when misused.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct Simd<T, const N: usize>([T; N]);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_shuffle<T, I, U>(a: T, b: T, i: I) -> U;\n+}\n+\n+fn main() {\n+    const I: [u32; 2] = [0; 2];\n+    const I2: [f32; 2] = [0.; 2];\n+    let v = Simd::<u32, 4>([0; 4]);\n+\n+    unsafe {\n+        let _: Simd<u32, 2> = simd_shuffle(v, v, I);\n+\n+        let _: Simd<u32, 4> = simd_shuffle(v, v, I);\n+        //~^ ERROR invalid monomorphization of `simd_shuffle` intrinsic\n+\n+        let _: Simd<f32, 2> = simd_shuffle(v, v, I);\n+        //~^ ERROR invalid monomorphization of `simd_shuffle` intrinsic\n+\n+        let _: Simd<u32, 2> = simd_shuffle(v, v, I2);\n+        //~^ ERROR invalid monomorphization of `simd_shuffle` intrinsic\n+    }\n+}"}, {"sha": "9eeb000fd261f6a98143720a92767f440ddb2ca4", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-shuffle.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-shuffle.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -0,0 +1,21 @@\n+error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: expected return type of length 2, found `Simd<u32, 4_usize>` with length 4\n+  --> $DIR/simd-intrinsic-generic-shuffle.rs:24:31\n+   |\n+LL |         let _: Simd<u32, 4> = simd_shuffle(v, v, I);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: expected return element type `u32` (element of input `Simd<u32, 4_usize>`), found `Simd<f32, 2_usize>` with element type `f32`\n+  --> $DIR/simd-intrinsic-generic-shuffle.rs:27:31\n+   |\n+LL |         let _: Simd<f32, 2> = simd_shuffle(v, v, I);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: simd_shuffle index must be an array of `u32`, got `[f32; 2]`\n+  --> $DIR/simd-intrinsic-generic-shuffle.rs:30:31\n+   |\n+LL |         let _: Simd<u32, 2> = simd_shuffle(v, v, I2);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0511`."}, {"sha": "2467baa08b0a721011f74c63fc0b97fb27617436", "filename": "src/test/ui/simd/monomorphize-shuffle-index.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd%2Fmonomorphize-shuffle-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd%2Fmonomorphize-shuffle-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fmonomorphize-shuffle-index.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -0,0 +1,40 @@\n+//run-pass\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_shuffle<T, I, U>(a: T, b: T, i: I) -> U;\n+}\n+\n+#[derive(Copy, Clone)]\n+#[repr(simd)]\n+struct Simd<T, const N: usize>([T; N]);\n+\n+trait Shuffle<const N: usize> {\n+    const I: [u32; N];\n+\n+    unsafe fn shuffle<T, const M: usize>(&self, a: Simd<T, M>, b: Simd<T, M>) -> Simd<T, N> {\n+        simd_shuffle(a, b, Self::I)\n+    }\n+}\n+\n+fn main() {\n+    struct I1;\n+    impl Shuffle<4> for I1 {\n+        const I: [u32; 4] = [0, 2, 4, 6];\n+    }\n+\n+    struct I2;\n+    impl Shuffle<2> for I2 {\n+        const I: [u32; 2] = [1, 5];\n+    }\n+\n+    let a = Simd::<u8, 4>([0, 1, 2, 3]);\n+    let b = Simd::<u8, 4>([4, 5, 6, 7]);\n+    unsafe {\n+        let x: Simd<u8, 4> = I1.shuffle(a, b);\n+        assert_eq!(x.0, [0, 2, 4, 6]);\n+\n+        let y: Simd<u8, 2> = I2.shuffle(a, b);\n+        assert_eq!(y.0, [1, 5]);\n+    }\n+}"}, {"sha": "aae6ce4663fbacd32705b45ff14c5578698ea50a", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -188,4 +188,14 @@ fn main() {\n          48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,\n          32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n          16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+\n+    extern \"platform-intrinsic\" {\n+        fn simd_shuffle<T, I, U>(a: T, b: T, i: I) -> U;\n+    }\n+    let v = u8x2(0, 0);\n+    const I: [u32; 2] = [4, 4];\n+    unsafe {\n+        let _: u8x2 = simd_shuffle(v, v, I);\n+        //~^ ERROR invalid monomorphization of `simd_shuffle` intrinsic\n+    }\n }"}, {"sha": "737fb5e6e51e25c3f7f7cfb36a4294b5790e1f71", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -71,6 +71,12 @@ LL | |          16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 6 previous errors\n+error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: shuffle index #0 is out of bounds (limit 4)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:198:23\n+   |\n+LL |         let _: u8x2 = simd_shuffle(v, v, I);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0511`."}, {"sha": "3592adfdc6ad1132904d0840e556c59ca894a8dc", "filename": "src/test/ui/simd/shuffle.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd%2Fshuffle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Fsimd%2Fshuffle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -0,0 +1,24 @@\n+//run-pass\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_shuffle<T, I, U>(a: T, b: T, i: I) -> U;\n+}\n+\n+#[derive(Copy, Clone)]\n+#[repr(simd)]\n+struct Simd<T, const N: usize>([T; N]);\n+\n+fn main() {\n+    const I1: [u32; 4] = [0, 2, 4, 6];\n+    const I2: [u32; 2] = [1, 5];\n+    let a = Simd::<u8, 4>([0, 1, 2, 3]);\n+    let b = Simd::<u8, 4>([4, 5, 6, 7]);\n+    unsafe {\n+        let x: Simd<u8, 4> = simd_shuffle(a, b, I1);\n+        assert_eq!(x.0, [0, 2, 4, 6]);\n+\n+        let y: Simd<u8, 2> = simd_shuffle(a, b, I2);\n+        assert_eq!(y.0, [1, 5]);\n+    }\n+}"}, {"sha": "0a3086a345dda10f263f8071485174c34dd780e7", "filename": "src/test/ui/typeck/issue-89044-wrapped-expr-method.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.fixed?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+fn main() {\n+    let a = Some(42);\n+    println!(\n+        \"The value is {}.\",\n+        (a.unwrap()) //~ERROR [E0615]\n+    );\n+}"}, {"sha": "83617e035e9ef418559a4ee9742892624cd90187", "filename": "src/test/ui/typeck/issue-89044-wrapped-expr-method.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.rs?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+fn main() {\n+    let a = Some(42);\n+    println!(\n+        \"The value is {}.\",\n+        (a.unwrap) //~ERROR [E0615]\n+    );\n+}"}, {"sha": "6fa0915dcaf9ae42f0009d8650e43f1ca47bdc93", "filename": "src/test/ui/typeck/issue-89044-wrapped-expr-method.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08a0307b32ec5af243880056d7cf524f2eff8d69/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.stderr?ref=08a0307b32ec5af243880056d7cf524f2eff8d69", "patch": "@@ -0,0 +1,14 @@\n+error[E0615]: attempted to take value of method `unwrap` on type `Option<{integer}>`\n+  --> $DIR/issue-89044-wrapped-expr-method.rs:7:12\n+   |\n+LL |         (a.unwrap)\n+   |            ^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |         (a.unwrap())\n+   |                  ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0615`."}]}