{"sha": "a556a2a8e60501203f310407b27cf739618c0000", "node_id": "C_kwDOAAsO6NoAKGE1NTZhMmE4ZTYwNTAxMjAzZjMxMDQwN2IyN2NmNzM5NjE4YzAwMDA", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-02-21T14:29:04Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-02-23T12:22:23Z"}, "message": "Add compiler flag `--check-cfg` to the unstable book", "tree": {"sha": "30479f66d2e2b9abba64a2af1f84a79999f9cf96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30479f66d2e2b9abba64a2af1f84a79999f9cf96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a556a2a8e60501203f310407b27cf739618c0000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a556a2a8e60501203f310407b27cf739618c0000", "html_url": "https://github.com/rust-lang/rust/commit/a556a2a8e60501203f310407b27cf739618c0000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a556a2a8e60501203f310407b27cf739618c0000/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d3de56da1eba68d012977d4c743d5eaaa1baee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3de56da1eba68d012977d4c743d5eaaa1baee8", "html_url": "https://github.com/rust-lang/rust/commit/8d3de56da1eba68d012977d4c743d5eaaa1baee8"}], "stats": {"total": 221, "additions": 221, "deletions": 0}, "files": [{"sha": "d7345ad0c33f2ad0a13d52df6662dd1dc2f3ea8e", "filename": "src/doc/unstable-book/src/compiler-flags/check-cfg.md", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/a556a2a8e60501203f310407b27cf739618c0000/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/a556a2a8e60501203f310407b27cf739618c0000/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md?ref=a556a2a8e60501203f310407b27cf739618c0000", "patch": "@@ -0,0 +1,221 @@\n+# `check-cfg`\n+\n+The tracking issue for this feature is: [#82450](https://github.com/rust-lang/rust/issues/82450).\n+\n+------------------------\n+\n+This feature allows you to enable complete or partial checking of configuration.\n+\n+`rustc` accepts the `--check-cfg` option, which specifies whether to check conditions and how to\n+check them. The `--check-cfg` option takes a value, called the _check cfg specification_. The\n+check cfg specification is parsed using the Rust metadata syntax, just as the `--cfg` option is.\n+\n+`--check-cfg` option can take one of two forms:\n+\n+1. `--check-cfg names(...)` enables checking condition names.\n+2. `--check-cfg values(...)` enables checking the values within list-valued conditions.\n+\n+These two options are independent. `names` checks only the namespace of condition names\n+while `values` checks only the namespace of the values of list-valued conditions.\n+\n+## The `names(...)` form\n+\n+The `names(...)` form enables checking the names. This form uses a named list:\n+\n+```bash\n+rustc --check-cfg 'names(name1, name2, ... nameN)'\n+```\n+\n+where each `name` is a bare identifier (has no quotes). The order of the names is not significant.\n+\n+If `--check-cfg names(...)` is specified at least once, then `rustc` will check all references to\n+condition names. `rustc` will check every `#[cfg]` attribute, `#[cfg_attr]` attribute, `cfg` clause\n+inside `#[link]` attribute and `cfg!(...)` call against the provided list of expected condition\n+names. If a name is not present in this list, then `rustc` will report an `unexpected_cfgs` lint\n+diagnostic. The default diagnostic level for this lint is `Warn`.\n+\n+If `--check-cfg names(...)` is not specified, then `rustc` will not check references to condition\n+names.\n+\n+`--check-cfg names(...)` may be specified more than once. The result is that the list of valid\n+condition names is merged across all options. It is legal for a condition name to be specified\n+more than once; redundantly specifying a condition name has no effect.\n+\n+To enable checking condition names with an empty set of valid condition names, use the following\n+form. The parentheses are required.\n+\n+```bash\n+rustc --check-cfg 'names()'\n+```\n+\n+Note that `--check-cfg 'names()'` is _not_ equivalent to omitting the option entirely.\n+The first form enables checking condition names, while specifying that there are no valid\n+condition names (outside of the set of well-known names defined by `rustc`). Omitting the\n+`--check-cfg 'names(...)'` option does not enable checking condition names.\n+\n+Conditions that are enabled are implicitly valid; it is unnecessary (but legal) to specify a\n+condition name as both enabled and valid. For example, the following invocations are equivalent:\n+\n+```bash\n+# condition names will be checked, and 'has_time_travel' is valid\n+rustc --cfg 'has_time_travel' --check-cfg 'names()'\n+\n+# condition names will be checked, and 'has_time_travel' is valid\n+rustc --cfg 'has_time_travel' --check-cfg 'names(has_time_travel)'\n+```\n+\n+In contrast, the following two invocations are _not_ equivalent:\n+\n+```bash\n+# condition names will not be checked (because there is no --check-cfg names(...))\n+rustc --cfg 'has_time_travel'\n+\n+# condition names will be checked, and 'has_time_travel' is both valid and enabled.\n+rustc --cfg 'has_time_travel' --check-cfg 'names(has_time_travel)'\n+```\n+\n+## The `values(...)` form\n+\n+The `values(...)` form enables checking the values within list-valued conditions. It has this\n+form:\n+\n+```bash\n+rustc --check-cfg `values(name, \"value1\", \"value2\", ... \"valueN\")'\n+```\n+\n+where `name` is a bare identifier (has no quotes) and each `\"value\"` term is a quoted literal\n+string. `name` specifies the name of the condition, such as `feature` or `target_os`.\n+\n+When the `values(...)` option is specified, `rustc` will check every `#[cfg(name = \"value\")]`\n+attribute, `#[cfg_attr(name = \"value\")]` attribute, `#[link(name = \"a\", cfg(name = \"value\"))]`\n+and `cfg!(name = \"value\")` call. It will check that the `\"value\"` specified is present in the\n+list of expected values. If `\"value\"` is not in it, then `rustc` will report an `unexpected_cfgs`\n+lint diagnostic. The default diagnostic level for this lint is `Warn`.\n+\n+The form `values()` is an error, because it does not specify a condition name.\n+\n+To enable checking of values, but to provide an empty set of valid values, use this form:\n+\n+```bash\n+rustc --check-cfg `values(name)`\n+```\n+\n+The `--check-cfg values(...)` option can be repeated, both for the same condition name and for\n+different names. If it is repeated for the same condition name, then the sets of values for that\n+condition are merged together.\n+\n+## Examples\n+\n+Consider this command line:\n+\n+```bash\n+rustc --check-cfg 'names(feature)' \\\n+      --check-cfg 'values(feature,\"lion\",\"zebra\")' \\\n+      --cfg 'feature=\"lion\"' -Z unstable-options \\\n+      example.rs\n+```\n+\n+This command line indicates that this crate has two features: `lion` and `zebra`. The `lion`\n+feature is enabled, while the `zebra` feature is disabled. Consider compiling this code:\n+\n+```rust\n+// This is expected, and tame_lion() will be compiled\n+#[cfg(feature = \"lion\")]\n+fn tame_lion(lion: Lion) {}\n+\n+// This is expected, and ride_zebra() will NOT be compiled.\n+#[cfg(feature = \"zebra\")]\n+fn ride_zebra(zebra: Zebra) {}\n+\n+// This is UNEXPECTED, and will cause a compiler warning (by default).\n+#[cfg(feature = \"platypus\")]\n+fn poke_platypus() {}\n+\n+// This is UNEXPECTED, because 'feechure' is not a known condition name,\n+// and will cause a compiler warning (by default).\n+#[cfg(feechure = \"lion\")]\n+fn tame_lion() {}\n+```\n+\n+> Note: The `--check-cfg names(feature)` option is necessary only to enable checking the condition\n+> name, as in the last example. `feature` is a well-known (always-expected) condition name, and so\n+> it is not necessary to specify it in a `--check-cfg 'names(...)'` option. That option can be\n+> shortened to > `--check-cfg names()` in order to enable checking well-known condition names.\n+\n+### Example: Checking condition names, but not values\n+\n+```bash\n+# This turns on checking for condition names, but not values, such as 'feature' values.\n+rustc --check-cfg 'names(is_embedded, has_feathers)' \\\n+      --cfg has_feathers --cfg 'feature = \"zapping\"' -Z unstable-options\n+```\n+\n+```rust\n+#[cfg(is_embedded)]         // This is expected as \"is_embedded\" was provided in names()\n+fn do_embedded() {}\n+\n+#[cfg(has_feathers)]        // This is expected as \"has_feathers\" was provided in names()\n+fn do_features() {}\n+\n+#[cfg(has_mumble_frotz)]    // This is UNEXPECTED because names checking is enable and\n+                            // \"has_mumble_frotz\" was not provided in names()\n+fn do_mumble_frotz() {}\n+\n+#[cfg(feature = \"lasers\")]  // This doesn't raise a warning, because values checking for \"feature\"\n+                            // was never used\n+fn shoot_lasers() {}\n+```\n+\n+### Example: Checking feature values, but not condition names\n+\n+```bash\n+# This turns on checking for feature values, but not for condition names.\n+rustc --check-cfg 'values(feature, \"zapping\", \"lasers\")' \\\n+      --cfg 'feature=\"zapping\"' -Z unstable-options\n+```\n+\n+```rust\n+#[cfg(is_embedded)]         // This is doesn't raise a warning, because names checking was not\n+                            // enable (ie not names())\n+fn do_embedded() {}\n+\n+#[cfg(has_feathers)]        // Same as above, --check-cfg names(...) was never used so no name\n+                            // checking is performed\n+fn do_features() {}\n+\n+\n+#[cfg(feature = \"lasers\")]  // This is expected, \"lasers\" is in the values(feature) list\n+fn shoot_lasers() {}\n+\n+#[cfg(feature = \"monkeys\")] // This is UNEXPECTED, because \"monkeys\" is not in the\n+                            // --check-cfg values(feature) list\n+fn write_shakespeare() {}\n+```\n+\n+### Example: Checking both condition names and feature values\n+\n+```bash\n+# This turns on checking for feature values and for condition names.\n+rustc --check-cfg 'names(is_embedded, has_feathers)' \\\n+      --check-cfg 'values(feature, \"zapping\", \"lasers\")' \\\n+      --cfg has_feathers --cfg 'feature=\"zapping\"' -Z unstable-options\n+```\n+\n+```rust\n+#[cfg(is_embedded)]         // This is expected because \"is_embedded\" was provided in names()\n+fn do_embedded() {}\n+\n+#[cfg(has_feathers)]        // This is expected because \"has_feathers\" was provided in names()\n+fn do_features() {}\n+\n+#[cfg(has_mumble_frotz)]    // This is UNEXPECTED, because has_mumble_frotz is not in the\n+                            // --check-cfg names(...) list\n+fn do_mumble_frotz() {}\n+\n+#[cfg(feature = \"lasers\")]  // This is expected, \"lasers\" is in the values(feature) list\n+fn shoot_lasers() {}\n+\n+#[cfg(feature = \"monkeys\")] // This is UNEXPECTED, because \"monkeys\" is not in\n+                            // the values(feature) list\n+fn write_shakespear() {}\n+```"}]}