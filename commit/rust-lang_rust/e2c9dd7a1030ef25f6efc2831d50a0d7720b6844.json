{"sha": "e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYzlkZDdhMTAzMGVmMjVmNmVmYzI4MzFkNTBhMGQ3NzIwYjY4NDQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-01T16:21:00Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-30T10:29:30Z"}, "message": "Retire HirVec.", "tree": {"sha": "0b40f6f09228e9ec5b203244e66790a53c3dc860", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b40f6f09228e9ec5b203244e66790a53c3dc860"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "html_url": "https://github.com/rust-lang/rust/commit/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "html_url": "https://github.com/rust-lang/rust/commit/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154"}], "stats": {"total": 93, "additions": 37, "deletions": 56}, "files": [{"sha": "e4836ef4eef8928ea75f65f833f461b5f270c63a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 27, "deletions": 37, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "patch": "@@ -38,7 +38,6 @@ use crate::hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use crate::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n use crate::hir::map::{DefKey, DefPathData, Definitions};\n use crate::hir::ptr::P;\n-use crate::hir::HirVec;\n use crate::hir::{self, ParamName};\n use crate::hir::{ConstArg, GenericArg};\n use crate::lint;\n@@ -540,7 +539,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n \n         let module = self.lower_mod(&c.module);\n-        let attrs = self.arena.alloc_from_iter(self.lower_attrs(&c.attrs).into_iter());\n+        let attrs = self.lower_attrs(&c.attrs);\n         let body_ids = body_ids(&self.bodies);\n \n         self.resolver.definitions().init_node_id_to_hir_id_mapping(self.node_id_to_hir_id);\n@@ -958,14 +957,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_attrs_arena(&mut self, attrs: &[Attribute]) -> &'hir [Attribute] {\n+    fn lower_attrs(&mut self, attrs: &[Attribute]) -> &'hir [Attribute] {\n         self.arena.alloc_from_iter(attrs.iter().map(|a| self.lower_attr(a)))\n     }\n \n-    fn lower_attrs(&mut self, attrs: &[Attribute]) -> hir::HirVec<Attribute> {\n-        attrs.iter().map(|a| self.lower_attr(a)).collect::<Vec<_>>().into()\n-    }\n-\n     fn lower_attr(&mut self, attr: &Attribute) -> Attribute {\n         // Note that we explicitly do not walk the path. Since we don't really\n         // lower attributes (we use the AST version) there is nowhere to keep\n@@ -1225,25 +1220,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 };\n                 hir::TyKind::Rptr(lifetime, self.lower_mt(mt, itctx))\n             }\n-            TyKind::BareFn(ref f) => {\n-                self.with_in_scope_lifetime_defs(&f.generic_params, |this| {\n-                    this.with_anonymous_lifetime_mode(AnonymousLifetimeMode::PassThrough, |this| {\n-                        hir::TyKind::BareFn(this.arena.alloc(hir::BareFnTy {\n-                            generic_params: this.lower_generic_params(\n-                                &f.generic_params,\n-                                &NodeMap::default(),\n-                                ImplTraitContext::disallowed(),\n-                            ),\n-                            unsafety: f.unsafety,\n-                            abi: this.lower_extern(f.ext),\n-                            decl: this.lower_fn_decl(&f.decl, None, false, None),\n-                            param_names: this.arena.alloc_from_iter(\n-                                this.lower_fn_params_to_names(&f.decl).into_iter(),\n-                            ),\n-                        }))\n-                    })\n+            TyKind::BareFn(ref f) => self.with_in_scope_lifetime_defs(&f.generic_params, |this| {\n+                this.with_anonymous_lifetime_mode(AnonymousLifetimeMode::PassThrough, |this| {\n+                    hir::TyKind::BareFn(this.arena.alloc(hir::BareFnTy {\n+                        generic_params: this.lower_generic_params(\n+                            &f.generic_params,\n+                            &NodeMap::default(),\n+                            ImplTraitContext::disallowed(),\n+                        ),\n+                        unsafety: f.unsafety,\n+                        abi: this.lower_extern(f.ext),\n+                        decl: this.lower_fn_decl(&f.decl, None, false, None),\n+                        param_names: this.lower_fn_params_to_names(&f.decl),\n+                    }))\n                 })\n-            }\n+            }),\n             TyKind::Never => hir::TyKind::Never,\n             TyKind::Tup(ref tys) => {\n                 hir::TyKind::Tup(self.arena.alloc_from_iter(\n@@ -1412,7 +1403,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             opaque_ty_def_index,\n             &hir_bounds,\n         );\n-        let lifetime_defs = self.arena.alloc_from_iter(lifetime_defs.into_iter());\n \n         debug!(\"lower_opaque_impl_trait: lifetimes={:#?}\", lifetimes,);\n \n@@ -1473,7 +1463,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         opaque_ty_id: NodeId,\n         parent_index: DefIndex,\n         bounds: hir::GenericBounds<'hir>,\n-    ) -> (&'hir [hir::GenericArg<'hir>], HirVec<hir::GenericParam<'hir>>) {\n+    ) -> (&'hir [hir::GenericArg<'hir>], &'hir [hir::GenericParam<'hir>]) {\n         debug!(\n             \"lifetimes_from_impl_trait_bounds(opaque_ty_id={:?}, \\\n              parent_index={:?}, \\\n@@ -1640,7 +1630,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let ImplTraitLifetimeCollector { output_lifetimes, output_lifetime_params, .. } =\n             lifetime_collector;\n \n-        (self.arena.alloc_from_iter(output_lifetimes), output_lifetime_params.into())\n+        (\n+            self.arena.alloc_from_iter(output_lifetimes),\n+            self.arena.alloc_from_iter(output_lifetime_params),\n+        )\n     }\n \n     fn lower_qpath(\n@@ -2075,21 +2068,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         )\n     }\n \n-    fn lower_fn_params_to_names(&mut self, decl: &FnDecl) -> hir::HirVec<Ident> {\n+    fn lower_fn_params_to_names(&mut self, decl: &FnDecl) -> &'hir [Ident] {\n         // Skip the `...` (`CVarArgs`) trailing arguments from the AST,\n         // as they are not explicit in HIR/Ty function signatures.\n         // (instead, the `c_variadic` flag is set to `true`)\n         let mut inputs = &decl.inputs[..];\n         if decl.c_variadic() {\n             inputs = &inputs[..inputs.len() - 1];\n         }\n-        inputs\n-            .iter()\n-            .map(|param| match param.pat.kind {\n-                PatKind::Ident(_, ident, _) => ident,\n-                _ => Ident::new(kw::Invalid, param.pat.span),\n-            })\n-            .collect()\n+        self.arena.alloc_from_iter(inputs.iter().map(|param| match param.pat.kind {\n+            PatKind::Ident(_, ident, _) => ident,\n+            _ => Ident::new(kw::Invalid, param.pat.span),\n+        }))\n     }\n \n     // Lowers a function declaration.\n@@ -2571,7 +2561,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             name,\n             span: param.ident.span,\n             pure_wrt_drop: attr::contains_name(&param.attrs, sym::may_dangle),\n-            attrs: self.lower_attrs_arena(&param.attrs),\n+            attrs: self.lower_attrs(&param.attrs),\n             bounds: self.arena.alloc_from_iter(bounds),\n             kind,\n         }"}, {"sha": "1e441f97059cc26ac95b52153ca6a55e5ad6cf88", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "patch": "@@ -464,7 +464,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_arm(&mut self, arm: &Arm) -> hir::Arm<'hir> {\n         hir::Arm {\n             hir_id: self.next_id(),\n-            attrs: self.lower_attrs_arena(&arm.attrs),\n+            attrs: self.lower_attrs(&arm.attrs),\n             pat: self.lower_pat(&arm.pat),\n             guard: match arm.guard {\n                 Some(ref x) => Some(hir::Guard::If(self.lower_expr(x))),"}, {"sha": "7174addb15501df0768d4d36ccffcdbeb8d6644b", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "patch": "@@ -226,7 +226,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item<'hir>> {\n         let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n-        let attrs = self.lower_attrs_arena(&i.attrs);\n+        let attrs = self.lower_attrs(&i.attrs);\n \n         if let ItemKind::MacroDef(ref def) = i.kind {\n             if !def.legacy || attr::contains_name(&i.attrs, sym::macro_export) {\n@@ -660,7 +660,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::ForeignItem {\n             hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n-            attrs: self.lower_attrs_arena(&i.attrs),\n+            attrs: self.lower_attrs(&i.attrs),\n             kind: match i.kind {\n                 ForeignItemKind::Fn(ref fdec, ref generics) => {\n                     let (generics, (fn_dec, fn_args)) = self.add_in_band_defs(\n@@ -675,7 +675,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             )\n                         },\n                     );\n-                    let fn_args = self.arena.alloc_from_iter(fn_args.into_iter());\n \n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n@@ -704,7 +703,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant<'hir> {\n         hir::Variant {\n-            attrs: self.lower_attrs_arena(&v.attrs),\n+            attrs: self.lower_attrs(&v.attrs),\n             data: self.lower_variant_data(&v.data),\n             disr_expr: v.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n             id: self.lower_node_id(v.id),\n@@ -752,7 +751,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             },\n             vis: self.lower_visibility(&f.vis, None),\n             ty,\n-            attrs: self.lower_attrs_arena(&f.attrs),\n+            attrs: self.lower_attrs(&f.attrs),\n         }\n     }\n \n@@ -773,7 +772,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             AssocItemKind::Fn(ref sig, None) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n-                let names: &[Ident] = self.arena.alloc_from_iter(names.into_iter());\n                 let (generics, sig) =\n                     self.lower_method_sig(&i.generics, sig, trait_item_def_id, false, None);\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n@@ -800,7 +798,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::TraitItem {\n             hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n-            attrs: self.lower_attrs_arena(&i.attrs),\n+            attrs: self.lower_attrs(&i.attrs),\n             generics,\n             kind,\n             span: i.span,\n@@ -887,7 +885,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::ImplItem {\n             hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n-            attrs: self.lower_attrs_arena(&i.attrs),\n+            attrs: self.lower_attrs(&i.attrs),\n             generics,\n             vis: self.lower_visibility(&i.vis, None),\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n@@ -994,7 +992,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_param(&mut self, param: &Param) -> hir::Param<'hir> {\n         hir::Param {\n-            attrs: self.lower_attrs_arena(&param.attrs),\n+            attrs: self.lower_attrs(&param.attrs),\n             hir_id: self.lower_node_id(param.id),\n             pat: self.lower_pat(&param.pat),\n             span: param.span,"}, {"sha": "cf31c44ed685a0dd5d24a4ca519b2a18d1d66329", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "patch": "@@ -10,7 +10,6 @@ pub use self::UnsafeSource::*;\n \n use crate::hir::def::{DefKind, Res};\n use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n-use crate::hir::ptr::P;\n use crate::mir::mono::Linkage;\n use crate::ty::query::Providers;\n use crate::ty::AdtKind;\n@@ -35,12 +34,6 @@ use syntax_pos::source_map::{SourceMap, Spanned};\n use syntax_pos::symbol::{kw, sym, Symbol};\n use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n \n-/// HIR doesn't commit to a concrete storage type and has its own alias for a vector.\n-/// It can be `Vec`, `P<[T]>` or potentially `Box<[T]>`, or some other container with similar\n-/// behavior. Unlike AST, HIR is mostly a static structure, so we can use an owned slice instead\n-/// of `Vec` to avoid keeping extra capacity.\n-pub type HirVec<T> = P<[T]>;\n-\n pub mod check_attr;\n pub mod def;\n pub mod def_id;"}, {"sha": "e12d9affdfabc8bba4a0965cb92167f6f61b68f9", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "patch": "@@ -474,7 +474,7 @@ fn build_macro(cx: &DocContext<'_>, did: DefId, name: ast::Name) -> clean::ItemE\n     let imported_from = cx.tcx.original_crate_name(did.krate);\n     match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n         LoadedMacro::MacroDef(def, _) => {\n-            let matchers: hir::HirVec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.kind {\n+            let matchers: Vec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.kind {\n                 let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n                 tts.chunks(4).map(|arm| arm[0].span()).collect()\n             } else {"}, {"sha": "07a3f663145224236548ee0d67396d8a6b78e892", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c9dd7a1030ef25f6efc2831d50a0d7720b6844/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=e2c9dd7a1030ef25f6efc2831d50a0d7720b6844", "patch": "@@ -230,7 +230,7 @@ pub struct Macro<'hir> {\n     pub def_id: hir::def_id::DefId,\n     pub attrs: &'hir [ast::Attribute],\n     pub whence: Span,\n-    pub matchers: hir::HirVec<Span>,\n+    pub matchers: Vec<Span>,\n     pub imported_from: Option<Name>,\n }\n "}]}