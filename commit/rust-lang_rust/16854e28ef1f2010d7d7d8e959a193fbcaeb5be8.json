{"sha": "16854e28ef1f2010d7d7d8e959a193fbcaeb5be8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ODU0ZTI4ZWYxZjIwMTBkN2Q3ZDhlOTU5YTE5M2ZiY2FlYjViZTg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-23T14:48:34Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-23T14:48:34Z"}, "message": "Use macro for all the things", "tree": {"sha": "81ffc7b06d5f178abb6db94e1b12844254efc421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81ffc7b06d5f178abb6db94e1b12844254efc421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16854e28ef1f2010d7d7d8e959a193fbcaeb5be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16854e28ef1f2010d7d7d8e959a193fbcaeb5be8", "html_url": "https://github.com/rust-lang/rust/commit/16854e28ef1f2010d7d7d8e959a193fbcaeb5be8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16854e28ef1f2010d7d7d8e959a193fbcaeb5be8/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6940ae9eab9ec8ea5fe81c8b30ccada4a62aebde", "url": "https://api.github.com/repos/rust-lang/rust/commits/6940ae9eab9ec8ea5fe81c8b30ccada4a62aebde", "html_url": "https://github.com/rust-lang/rust/commit/6940ae9eab9ec8ea5fe81c8b30ccada4a62aebde"}], "stats": {"total": 79, "additions": 31, "deletions": 48}, "files": [{"sha": "c0e0436c0a597eae56f028db68418a26ce311437", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 31, "deletions": 48, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/16854e28ef1f2010d7d7d8e959a193fbcaeb5be8/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16854e28ef1f2010d7d7d8e959a193fbcaeb5be8/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=16854e28ef1f2010d7d7d8e959a193fbcaeb5be8", "patch": "@@ -8,29 +8,39 @@ use crate::{\n \n use crate::quote;\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum BuiltinFnLikeExpander {\n-    Column,\n-    File,\n-    Line,\n-    Stringify,\n-}\n-\n-struct BuiltInMacroInfo {\n-    name: name::Name,\n-    kind: BuiltinFnLikeExpander,\n-    expand: fn(\n-        db: &dyn AstDatabase,\n-        id: MacroCallId,\n-        _tt: &tt::Subtree,\n-    ) -> Result<tt::Subtree, mbe::ExpandError>,\n-}\n-\n macro_rules! register_builtin {\n     ( $(($name:ident, $kind: ident) => $expand:ident),* ) => {\n-        const BUILTIN_MACROS: &[BuiltInMacroInfo] = &[\n-            $(BuiltInMacroInfo { name: name::$name, kind: BuiltinFnLikeExpander::$kind, expand: $expand }),*\n-        ];\n+        #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+        pub enum BuiltinFnLikeExpander {\n+            $($kind),*\n+        }\n+\n+        impl BuiltinFnLikeExpander {\n+            pub fn expand(\n+                &self,\n+                db: &dyn AstDatabase,\n+                id: MacroCallId,\n+                tt: &tt::Subtree,\n+            ) -> Result<tt::Subtree, mbe::ExpandError> {\n+                let expander = match *self {\n+                    $( BuiltinFnLikeExpander::$kind => $expand, )*\n+                };\n+                expander(db, id, tt)\n+            }\n+        }\n+\n+        pub fn find_builtin_macro(\n+            ident: &name::Name,\n+            krate: CrateId,\n+            ast_id: AstId<ast::MacroCall>,\n+        ) -> Option<MacroDefId> {\n+            let kind = match ident {\n+                 $( id if id == &name::$name => BuiltinFnLikeExpander::$kind, )*\n+                 _ => return None,\n+            };\n+\n+            Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(kind) })\n+        }\n     };\n }\n \n@@ -41,33 +51,6 @@ register_builtin! {\n     (STRINGIFY_MACRO, Stringify) => stringify_expand\n }\n \n-impl BuiltinFnLikeExpander {\n-    pub fn expand(\n-        &self,\n-        db: &dyn AstDatabase,\n-        id: MacroCallId,\n-        tt: &tt::Subtree,\n-    ) -> Result<tt::Subtree, mbe::ExpandError> {\n-        let expander = BUILTIN_MACROS\n-            .iter()\n-            .find(|it| *self == it.kind)\n-            .map(|it| it.expand)\n-            .ok_or_else(|| mbe::ExpandError::ConversionError)?;\n-\n-        expander(db, id, tt)\n-    }\n-}\n-\n-pub fn find_builtin_macro(\n-    ident: &name::Name,\n-    krate: CrateId,\n-    ast_id: AstId<ast::MacroCall>,\n-) -> Option<MacroDefId> {\n-    let kind = BUILTIN_MACROS.iter().find(|it| *ident == it.name).map(|it| it.kind)?;\n-\n-    Some(MacroDefId { krate, ast_id, kind: MacroDefKind::BuiltIn(kind) })\n-}\n-\n fn to_line_number(db: &dyn AstDatabase, file: HirFileId, pos: TextUnit) -> usize {\n     // FIXME: Use expansion info\n     let file_id = file.original_file(db);"}]}