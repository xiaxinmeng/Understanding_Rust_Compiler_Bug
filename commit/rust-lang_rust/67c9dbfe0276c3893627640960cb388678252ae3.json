{"sha": "67c9dbfe0276c3893627640960cb388678252ae3", "node_id": "C_kwDOAAsO6NoAKDY3YzlkYmZlMDI3NmMzODkzNjI3NjQwOTYwY2IzODg2NzgyNTJhZTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-12T07:13:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-12T07:13:26Z"}, "message": "Rollup merge of #108841 - jackh726:issue-90528, r=compiler-errors\n\nAdd suggestion to diagnostic when user has array but trait wants slice. (rebased)\n\nRebase of #91314, except for change to multipart suggestion\n\nResolves #90528\n\nr? ``@compiler-errors`` since you requested the multipart suggestion", "tree": {"sha": "75a9907896a790459d3a133fa0e18cb783ec6e9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75a9907896a790459d3a133fa0e18cb783ec6e9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67c9dbfe0276c3893627640960cb388678252ae3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDXuWCRBK7hj4Ov3rIwAAbbIIAA0oRjFZvbFLZcsfPCtjB7oZ\n1kTKA4v/YrE5X0GJ7fayZLFCCaZlJ1pTNIsqyClfs26GWcvQzWMGUjp3sr26ujrT\n9XqbuPS8Ut9+J4W1TvEduJDeZgaO2U0fNwHiko8OtlIRIx6mTYVDUug86xgSoOJR\nQV8a1qb6O0nOPcTr6ApXac5c4AGOzaxD2jTOXj92uIomR9cw6/1mlbGlVpOlU/Tq\nI0wYEGbFlV0TIN9oIY4aNHvDO+b4Gg6h+9X55CNqa4tH54YAKxbGaO20sBL7rkCq\n/Ic0z9neIuzPztkwlJfZuxjOLWHUJ14TO64594TWxeC1i0om2iDP3UI69Tva5/s=\n=xNkc\n-----END PGP SIGNATURE-----\n", "payload": "tree 75a9907896a790459d3a133fa0e18cb783ec6e9a\nparent b16ed694f7967d1381da5b43085dfbce2f1de723\nparent 8ac7d0eef5621338d3650ec6884c58bc28a5c5f6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678605206 +0100\ncommitter GitHub <noreply@github.com> 1678605206 +0100\n\nRollup merge of #108841 - jackh726:issue-90528, r=compiler-errors\n\nAdd suggestion to diagnostic when user has array but trait wants slice. (rebased)\n\nRebase of #91314, except for change to multipart suggestion\n\nResolves #90528\n\nr? ``@compiler-errors`` since you requested the multipart suggestion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67c9dbfe0276c3893627640960cb388678252ae3", "html_url": "https://github.com/rust-lang/rust/commit/67c9dbfe0276c3893627640960cb388678252ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67c9dbfe0276c3893627640960cb388678252ae3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b16ed694f7967d1381da5b43085dfbce2f1de723", "url": "https://api.github.com/repos/rust-lang/rust/commits/b16ed694f7967d1381da5b43085dfbce2f1de723", "html_url": "https://github.com/rust-lang/rust/commit/b16ed694f7967d1381da5b43085dfbce2f1de723"}, {"sha": "8ac7d0eef5621338d3650ec6884c58bc28a5c5f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac7d0eef5621338d3650ec6884c58bc28a5c5f6", "html_url": "https://github.com/rust-lang/rust/commit/8ac7d0eef5621338d3650ec6884c58bc28a5c5f6"}], "stats": {"total": 497, "additions": 490, "deletions": 7}, "files": [{"sha": "704b0d0bd1cec99e1e1ab6ead50ddd4c02c15442", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67c9dbfe0276c3893627640960cb388678252ae3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c9dbfe0276c3893627640960cb388678252ae3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=67c9dbfe0276c3893627640960cb388678252ae3", "patch": "@@ -1024,7 +1024,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             // Can't show anything else useful, try to find similar impls.\n                             let impl_candidates = self.find_similar_impl_candidates(trait_predicate);\n                             if !self.report_similar_impl_candidates(\n-                                impl_candidates,\n+                                &impl_candidates,\n                                 trait_ref,\n                                 body_def_id,\n                                 &mut err,\n@@ -1060,14 +1060,21 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                     let impl_candidates =\n                                         self.find_similar_impl_candidates(trait_pred);\n                                     self.report_similar_impl_candidates(\n-                                        impl_candidates,\n+                                        &impl_candidates,\n                                         trait_ref,\n                                         body_def_id,\n                                         &mut err,\n                                         true,\n                                     );\n                                 }\n                             }\n+\n+                            self.maybe_suggest_convert_to_slice(\n+                                &mut err,\n+                                trait_ref,\n+                                impl_candidates.as_slice(),\n+                                span,\n+                            );\n                         }\n \n                         // Changing mutability doesn't make a difference to whether we have\n@@ -1514,7 +1521,7 @@ trait InferCtxtPrivExt<'tcx> {\n \n     fn report_similar_impl_candidates(\n         &self,\n-        impl_candidates: Vec<ImplCandidate<'tcx>>,\n+        impl_candidates: &[ImplCandidate<'tcx>],\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         body_def_id: LocalDefId,\n         err: &mut Diagnostic,\n@@ -2004,7 +2011,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n     fn report_similar_impl_candidates(\n         &self,\n-        impl_candidates: Vec<ImplCandidate<'tcx>>,\n+        impl_candidates: &[ImplCandidate<'tcx>],\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         body_def_id: LocalDefId,\n         err: &mut Diagnostic,\n@@ -2113,7 +2120,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         // Prefer more similar candidates first, then sort lexicographically\n         // by their normalized string representation.\n         let mut normalized_impl_candidates_and_similarities = impl_candidates\n-            .into_iter()\n+            .iter()\n+            .copied()\n             .map(|ImplCandidate { trait_ref, similarity }| {\n                 // FIXME(compiler-errors): This should be using `NormalizeExt::normalize`\n                 let normalized = self\n@@ -2326,7 +2334,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                             if impl_candidates.len() < 10 {\n                                 self.report_similar_impl_candidates(\n-                                    impl_candidates,\n+                                    impl_candidates.as_slice(),\n                                     trait_ref,\n                                     obligation.cause.body_id,\n                                     &mut err,"}, {"sha": "11567ff39ddcb5883b82b0cd319f7fe4aaad561f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/67c9dbfe0276c3893627640960cb388678252ae3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c9dbfe0276c3893627640960cb388678252ae3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=67c9dbfe0276c3893627640960cb388678252ae3", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-filelength\n \n use super::{\n-    DefIdOrName, FindExprBySpan, Obligation, ObligationCause, ObligationCauseCode,\n+    DefIdOrName, FindExprBySpan, ImplCandidate, Obligation, ObligationCause, ObligationCauseCode,\n     PredicateObligation,\n };\n \n@@ -382,6 +382,14 @@ pub trait TypeErrCtxtExt<'tcx> {\n         body_id: hir::HirId,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Vec<Option<(Span, (DefId, Ty<'tcx>))>>;\n+\n+    fn maybe_suggest_convert_to_slice(\n+        &self,\n+        err: &mut Diagnostic,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        candidate_impls: &[ImplCandidate<'tcx>],\n+        span: Span,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: ty::Predicate<'_>) -> (Span, String) {\n@@ -3826,6 +3834,73 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n         assocs_in_this_method\n     }\n+\n+    /// If the type that failed selection is an array or a reference to an array,\n+    /// but the trait is implemented for slices, suggest that the user converts\n+    /// the array into a slice.\n+    fn maybe_suggest_convert_to_slice(\n+        &self,\n+        err: &mut Diagnostic,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        candidate_impls: &[ImplCandidate<'tcx>],\n+        span: Span,\n+    ) {\n+        // Three cases where we can make a suggestion:\n+        // 1. `[T; _]` (array of T)\n+        // 2. `&[T; _]` (reference to array of T)\n+        // 3. `&mut [T; _]` (mutable reference to array of T)\n+        let (element_ty, mut mutability) = match *trait_ref.skip_binder().self_ty().kind() {\n+            ty::Array(element_ty, _) => (element_ty, None),\n+\n+            ty::Ref(_, pointee_ty, mutability) => match *pointee_ty.kind() {\n+                ty::Array(element_ty, _) => (element_ty, Some(mutability)),\n+                _ => return,\n+            },\n+\n+            _ => return,\n+        };\n+\n+        // Go through all the candidate impls to see if any of them is for\n+        // slices of `element_ty` with `mutability`.\n+        let mut is_slice = |candidate: Ty<'tcx>| match *candidate.kind() {\n+            ty::RawPtr(ty::TypeAndMut { ty: t, mutbl: m }) | ty::Ref(_, t, m) => {\n+                if matches!(*t.kind(), ty::Slice(e) if e == element_ty)\n+                    && m == mutability.unwrap_or(m)\n+                {\n+                    // Use the candidate's mutability going forward.\n+                    mutability = Some(m);\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+            _ => false,\n+        };\n+\n+        // Grab the first candidate that matches, if any, and make a suggestion.\n+        if let Some(slice_ty) = candidate_impls\n+            .iter()\n+            .map(|trait_ref| trait_ref.trait_ref.self_ty())\n+            .filter(|t| is_slice(*t))\n+            .next()\n+        {\n+            let msg = &format!(\"convert the array to a `{}` slice instead\", slice_ty);\n+\n+            if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                let mut suggestions = vec![];\n+                if snippet.starts_with('&') {\n+                } else if let Some(hir::Mutability::Mut) = mutability {\n+                    suggestions.push((span.shrink_to_lo(), \"&mut \".into()));\n+                } else {\n+                    suggestions.push((span.shrink_to_lo(), \"&\".into()));\n+                }\n+                suggestions.push((span.shrink_to_hi(), \"[..]\".into()));\n+                err.multipart_suggestion_verbose(msg, suggestions, Applicability::MaybeIncorrect);\n+            } else {\n+                err.span_help(span, msg);\n+            }\n+        }\n+    }\n }\n \n /// Add a hint to add a missing borrow or remove an unnecessary one."}, {"sha": "52863e22bb6fa2454d5a6b0b2a6469f2e029f993", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.rs?ref=67c9dbfe0276c3893627640960cb388678252ae3", "patch": "@@ -0,0 +1,20 @@\n+// Issue #90528: provide helpful suggestions when a trait bound is unsatisfied\n+// due to a missed unsizing coercion.\n+//\n+// This test exercises array literals and a trait implemented on immutable slices.\n+\n+trait Read {}\n+\n+impl Read for &[u8] {}\n+\n+fn wants_read(_: impl Read) {}\n+\n+fn main() {\n+    wants_read([0u8]);\n+    //~^ ERROR the trait bound `[u8; 1]: Read` is not satisfied\n+    wants_read(&[0u8]);\n+    //~^ ERROR the trait bound `&[u8; 1]: Read` is not satisfied\n+    wants_read(&[0u8][..]);\n+    wants_read(&mut [0u8]);\n+    //~^ ERROR the trait bound `&mut [u8; 1]: Read` is not satisfied\n+}"}, {"sha": "27ef3fe97a5b0c3e9a5030d43073d61ff269aeb2", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-1.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-1.stderr?ref=67c9dbfe0276c3893627640960cb388678252ae3", "patch": "@@ -0,0 +1,56 @@\n+error[E0277]: the trait bound `[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:13:16\n+   |\n+LL |     wants_read([0u8]);\n+   |     ---------- ^^^^^ the trait `Read` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&[0u8][..]);\n+   |                +     ++++\n+\n+error[E0277]: the trait bound `&[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:15:16\n+   |\n+LL |     wants_read(&[0u8]);\n+   |     ---------- ^^^^^^ the trait `Read` is not implemented for `&[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&[0u8][..]);\n+   |                      ++++\n+\n+error[E0277]: the trait bound `&mut [u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:18:16\n+   |\n+LL |     wants_read(&mut [0u8]);\n+   |     ---------- ^^^^^^^^^^ the trait `Read` is not implemented for `&mut [u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-1.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f2762ad421ba5fdac64a95a54e1ade7303cda4b6", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-2.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.rs?ref=67c9dbfe0276c3893627640960cb388678252ae3", "patch": "@@ -0,0 +1,28 @@\n+// Issue #90528: provide helpful suggestions when a trait bound is unsatisfied\n+// due to a missed unsizing coercion.\n+//\n+// This test exercises array variables and a trait implemented on immmutable slices.\n+\n+trait Read {}\n+\n+impl Read for &[u8] {}\n+\n+fn wants_read(_: impl Read) {}\n+\n+fn main() {\n+    let x = [0u8];\n+    wants_read(x);\n+    //~^ ERROR the trait bound `[u8; 1]: Read` is not satisfied\n+    wants_read(&x);\n+    //~^ ERROR the trait bound `&[u8; 1]: Read` is not satisfied\n+    wants_read(&x[..]);\n+\n+    let x = &[0u8];\n+    wants_read(x);\n+    //~^ ERROR the trait bound `&[u8; 1]: Read` is not satisfied\n+    wants_read(&x);\n+    //~^ ERROR the trait bound `&&[u8; 1]: Read` is not satisfied\n+    wants_read(*x);\n+    //~^ ERROR the trait bound `[u8; 1]: Read` is not satisfied\n+    wants_read(&x[..]);\n+}"}, {"sha": "ae0c4ca506ab252b3dd6aacab5674734753843c8", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-2.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-2.stderr?ref=67c9dbfe0276c3893627640960cb388678252ae3", "patch": "@@ -0,0 +1,94 @@\n+error[E0277]: the trait bound `[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:14:16\n+   |\n+LL |     wants_read(x);\n+   |     ---------- ^ the trait `Read` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&x[..]);\n+   |                + ++++\n+\n+error[E0277]: the trait bound `&[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:16:16\n+   |\n+LL |     wants_read(&x);\n+   |     ---------- ^^ the trait `Read` is not implemented for `&[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&x[..]);\n+   |                  ++++\n+\n+error[E0277]: the trait bound `&[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:21:16\n+   |\n+LL |     wants_read(x);\n+   |     ---------- ^ the trait `Read` is not implemented for `&[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&x[..]);\n+   |                + ++++\n+\n+error[E0277]: the trait bound `&&[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:23:16\n+   |\n+LL |     wants_read(&x);\n+   |     ---------- ^^ the trait `Read` is not implemented for `&&[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+\n+error[E0277]: the trait bound `[u8; 1]: Read` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:25:16\n+   |\n+LL |     wants_read(*x);\n+   |     ---------- ^^ the trait `Read` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Read` is implemented for `&[u8]`\n+note: required by a bound in `wants_read`\n+  --> $DIR/issue-90528-unsizing-suggestion-2.rs:10:23\n+   |\n+LL | fn wants_read(_: impl Read) {}\n+   |                       ^^^^ required by this bound in `wants_read`\n+help: convert the array to a `&[u8]` slice instead\n+   |\n+LL |     wants_read(&*x[..]);\n+   |                +  ++++\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "218843d0500283acae775e01bbab52ea0cf4db99", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.rs?ref=67c9dbfe0276c3893627640960cb388678252ae3", "patch": "@@ -0,0 +1,22 @@\n+// Issue #90528: provide helpful suggestions when a trait bound is unsatisfied\n+// due to a missed unsizing coercion.\n+//\n+// This test exercises array literals and a trait implemented on mutable slices.\n+\n+trait Write {}\n+\n+impl Write for &mut [u8] {}\n+\n+fn wants_write(_: impl Write) {}\n+\n+fn main() {\n+    wants_write([0u8]);\n+    //~^ ERROR the trait bound `[u8; 1]: Write` is not satisfied\n+    wants_write(&mut [0u8]);\n+    //~^ ERROR the trait bound `&mut [u8; 1]: Write` is not satisfied\n+    wants_write(&mut [0u8][..]);\n+    wants_write(&[0u8]);\n+    //~^ ERROR the trait bound `&[u8; 1]: Write` is not satisfied\n+    wants_write(&[0u8][..]);\n+    //~^ ERROR the trait bound `&[u8]: Write` is not satisfied\n+}"}, {"sha": "774d5ba3c892c378722377e61fe8b894879dbe26", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-3.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-3.stderr?ref=67c9dbfe0276c3893627640960cb388678252ae3", "patch": "@@ -0,0 +1,75 @@\n+error[E0277]: the trait bound `[u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:13:17\n+   |\n+LL |     wants_write([0u8]);\n+   |     ----------- ^^^^^ the trait `Write` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut [0u8][..]);\n+   |                 ++++      ++++\n+\n+error[E0277]: the trait bound `&mut [u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:15:17\n+   |\n+LL |     wants_write(&mut [0u8]);\n+   |     ----------- ^^^^^^^^^^ the trait `Write` is not implemented for `&mut [u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut [0u8][..]);\n+   |                           ++++\n+\n+error[E0277]: the trait bound `&[u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:18:17\n+   |\n+LL |     wants_write(&[0u8]);\n+   |     ----------- ^^^^^^ the trait `Write` is not implemented for `&[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+\n+error[E0277]: the trait bound `&[u8]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:20:17\n+   |\n+LL |     wants_write(&[0u8][..]);\n+   |     ----------- ^^^^^^^^^^ the trait `Write` is not implemented for `&[u8]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-3.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: consider changing this borrow's mutability\n+   |\n+LL |     wants_write(&mut [0u8][..]);\n+   |                 ~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "eae953c61ff09aaafefb374410be203cfdfbe5c4", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-4.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.rs?ref=67c9dbfe0276c3893627640960cb388678252ae3", "patch": "@@ -0,0 +1,26 @@\n+// Issue #90528: provide helpful suggestions when a trait bound is unsatisfied\n+// due to a missed unsizing coercion.\n+//\n+// This test exercises array variables and a trait implemented on mutable slices.\n+\n+trait Write {}\n+\n+impl Write for &mut [u8] {}\n+\n+fn wants_write(_: impl Write) {}\n+\n+fn main() {\n+    let mut x = [0u8];\n+    wants_write(x);\n+    //~^ ERROR the trait bound `[u8; 1]: Write` is not satisfied\n+    wants_write(&mut x);\n+    //~^ ERROR the trait bound `&mut [u8; 1]: Write` is not satisfied\n+    wants_write(&mut x[..]);\n+\n+    let x = &mut [0u8];\n+    wants_write(x);\n+    //~^ ERROR the trait bound `&mut [u8; 1]: Write` is not satisfied\n+    wants_write(*x);\n+    //~^ ERROR the trait bound `[u8; 1]: Write` is not satisfied\n+    wants_write(&mut x[..]);\n+}"}, {"sha": "a4020ee07080886439d524694fae889625a9d6a1", "filename": "tests/ui/dst/issue-90528-unsizing-suggestion-4.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67c9dbfe0276c3893627640960cb388678252ae3/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fissue-90528-unsizing-suggestion-4.stderr?ref=67c9dbfe0276c3893627640960cb388678252ae3", "patch": "@@ -0,0 +1,79 @@\n+error[E0277]: the trait bound `[u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:14:17\n+   |\n+LL |     wants_write(x);\n+   |     ----------- ^ the trait `Write` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut x[..]);\n+   |                 ++++  ++++\n+\n+error[E0277]: the trait bound `&mut [u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:16:17\n+   |\n+LL |     wants_write(&mut x);\n+   |     ----------- ^^^^^^ the trait `Write` is not implemented for `&mut [u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut x[..]);\n+   |                       ++++\n+\n+error[E0277]: the trait bound `&mut [u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:21:17\n+   |\n+LL |     wants_write(x);\n+   |     ----------- ^ the trait `Write` is not implemented for `&mut [u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut x[..]);\n+   |                 ++++  ++++\n+\n+error[E0277]: the trait bound `[u8; 1]: Write` is not satisfied\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:23:17\n+   |\n+LL |     wants_write(*x);\n+   |     ----------- ^^ the trait `Write` is not implemented for `[u8; 1]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Write` is implemented for `&mut [u8]`\n+note: required by a bound in `wants_write`\n+  --> $DIR/issue-90528-unsizing-suggestion-4.rs:10:24\n+   |\n+LL | fn wants_write(_: impl Write) {}\n+   |                        ^^^^^ required by this bound in `wants_write`\n+help: convert the array to a `&mut [u8]` slice instead\n+   |\n+LL |     wants_write(&mut *x[..]);\n+   |                 ++++   ++++\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}