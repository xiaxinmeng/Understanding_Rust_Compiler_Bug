{"sha": "d7dc64bdfea4fbf8974774800ab51e04eaa4f082", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZGM2NGJkZmVhNGZiZjg5NzQ3NzQ4MDBhYjUxZTA0ZWFhNGYwODI=", "commit": {"author": {"name": "Mohsen Zohrevandi", "email": "mohsen.zohrevandi@fortanix.com", "date": "2020-06-12T19:06:41Z"}, "committer": {"name": "Mohsen Zohrevandi", "email": "mohsen.zohrevandi@fortanix.com", "date": "2020-06-12T19:06:41Z"}, "message": "Handle spurious wakeups in wait_timeout_sgx", "tree": {"sha": "5d35c9a8d762b46cf08e4c8cd0696e9adec4c0a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d35c9a8d762b46cf08e4c8cd0696e9adec4c0a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7dc64bdfea4fbf8974774800ab51e04eaa4f082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7dc64bdfea4fbf8974774800ab51e04eaa4f082", "html_url": "https://github.com/rust-lang/rust/commit/d7dc64bdfea4fbf8974774800ab51e04eaa4f082", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7dc64bdfea4fbf8974774800ab51e04eaa4f082/comments", "author": {"login": "mzohreva", "id": 1142455, "node_id": "MDQ6VXNlcjExNDI0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1142455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzohreva", "html_url": "https://github.com/mzohreva", "followers_url": "https://api.github.com/users/mzohreva/followers", "following_url": "https://api.github.com/users/mzohreva/following{/other_user}", "gists_url": "https://api.github.com/users/mzohreva/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzohreva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzohreva/subscriptions", "organizations_url": "https://api.github.com/users/mzohreva/orgs", "repos_url": "https://api.github.com/users/mzohreva/repos", "events_url": "https://api.github.com/users/mzohreva/events{/privacy}", "received_events_url": "https://api.github.com/users/mzohreva/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzohreva", "id": 1142455, "node_id": "MDQ6VXNlcjExNDI0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1142455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzohreva", "html_url": "https://github.com/mzohreva", "followers_url": "https://api.github.com/users/mzohreva/followers", "following_url": "https://api.github.com/users/mzohreva/following{/other_user}", "gists_url": "https://api.github.com/users/mzohreva/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzohreva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzohreva/subscriptions", "organizations_url": "https://api.github.com/users/mzohreva/orgs", "repos_url": "https://api.github.com/users/mzohreva/repos", "events_url": "https://api.github.com/users/mzohreva/events{/privacy}", "received_events_url": "https://api.github.com/users/mzohreva/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4b02659c16d2ad0ac36d2c8602edd002e559f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b02659c16d2ad0ac36d2c8602edd002e559f7a", "html_url": "https://github.com/rust-lang/rust/commit/c4b02659c16d2ad0ac36d2c8602edd002e559f7a"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "b72e4fb06f35b3c2fa87f42d156c805de69fae97", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d7dc64bdfea4fbf8974774800ab51e04eaa4f082/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7dc64bdfea4fbf8974774800ab51e04eaa4f082/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=d7dc64bdfea4fbf8974774800ab51e04eaa4f082", "patch": "@@ -115,9 +115,15 @@ pub fn decode_error_kind(code: i32) -> ErrorKind {\n // timeouts in SGX model. The enclave runner serving usercalls may lie about\n // current time and/or ignore timeout values.\n //\n+// Once the event is observed, `stop` will be used to determine whether or not\n+// we should continue to wait.\n+//\n // FIXME: note these caveats in documentation of all public types that use this\n // function in their execution path.\n-pub fn wait_timeout_sgx(event_mask: u64, duration: crate::time::Duration) {\n+pub fn wait_timeout_sgx<F>(event_mask: u64, duration: crate::time::Duration, stop: F)\n+where\n+    F: Fn() -> bool,\n+{\n     use self::abi::usercalls;\n     use crate::cmp;\n     use crate::io::ErrorKind;\n@@ -129,11 +135,13 @@ pub fn wait_timeout_sgx(event_mask: u64, duration: crate::time::Duration) {\n         let timeout = cmp::min((u64::MAX - 1) as u128, remaining.as_nanos()) as u64;\n         match usercalls::wait(event_mask, timeout) {\n             Ok(eventset) => {\n-                if event_mask != 0 {\n-                    rtassert!(eventset & event_mask == event_mask);\n+                if event_mask == 0 {\n+                    rtabort!(\"expected usercalls::wait() to return Err, found Ok.\");\n+                }\n+                rtassert!(eventset & event_mask == event_mask);\n+                if stop() {\n                     return;\n                 }\n-                rtabort!(\"expected usercalls::wait() to return Err, found Ok.\");\n             }\n             Err(e) => {\n                 rtassert!(e.kind() == ErrorKind::TimedOut || e.kind() == ErrorKind::WouldBlock)"}, {"sha": "5636a6f7eabde4b6b5feeed43fb772b4edb828d5", "filename": "src/libstd/sys/sgx/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7dc64bdfea4fbf8974774800ab51e04eaa4f082/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7dc64bdfea4fbf8974774800ab51e04eaa4f082/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fthread.rs?ref=d7dc64bdfea4fbf8974774800ab51e04eaa4f082", "patch": "@@ -76,7 +76,7 @@ impl Thread {\n     }\n \n     pub fn sleep(dur: Duration) {\n-        wait_timeout_sgx(0, dur);\n+        wait_timeout_sgx(0, dur, || true);\n     }\n \n     pub fn join(self) {"}, {"sha": "36b3f5bcc41d8a464f30e1fb4998ad6e19d54874", "filename": "src/libstd/sys/sgx/waitqueue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7dc64bdfea4fbf8974774800ab51e04eaa4f082/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7dc64bdfea4fbf8974774800ab51e04eaa4f082/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs?ref=d7dc64bdfea4fbf8974774800ab51e04eaa4f082", "patch": "@@ -177,7 +177,7 @@ impl WaitQueue {\n             let entry_lock = lock.lock().queue.inner.push(&mut entry);\n             before_wait();\n             // don't panic, this would invalidate `entry` during unwinding\n-            wait_timeout_sgx(EV_UNPARK, timeout);\n+            wait_timeout_sgx(EV_UNPARK, timeout, || entry_lock.lock().wake);\n             // acquire the wait queue's lock first to avoid deadlock.\n             let mut guard = lock.lock();\n             let entry_guard = entry_lock.lock();"}]}