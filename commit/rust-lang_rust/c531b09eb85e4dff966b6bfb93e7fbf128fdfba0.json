{"sha": "c531b09eb85e4dff966b6bfb93e7fbf128fdfba0", "node_id": "C_kwDOAAsO6NoAKGM1MzFiMDllYjg1ZTRkZmY5NjZiNmJmYjkzZTdmYmYxMjhmZGZiYTA", "commit": {"author": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2023-01-30T22:46:34Z"}, "committer": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2023-01-31T00:29:29Z"}, "message": "Check external before hidden", "tree": {"sha": "b97cbcf9eeeab0f912f553cb679eab50aa0fcdeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b97cbcf9eeeab0f912f553cb679eab50aa0fcdeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c531b09eb85e4dff966b6bfb93e7fbf128fdfba0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg7SOvb1XvVqyndOg/aB6xzqcLku\ncJTkLKCfEUxpSDkY0AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQB9fZ6mGD67zM8BBkF5mDtbv2vV4n+yDqkxBVo7cCJFwJ5IFaBWcyf4+dCFH2xBPgS\nExlNmnNSBLQDMU9dKfwwc=\n-----END SSH SIGNATURE-----", "payload": "tree b97cbcf9eeeab0f912f553cb679eab50aa0fcdeb\nparent 2432e97d6ab7e44390542c00229344bf45fcaddd\nauthor Tyler Weaver <maybe@tylerjw.dev> 1675118794 -0700\ncommitter Tyler Weaver <maybe@tylerjw.dev> 1675124969 -0700\n\nCheck external before hidden\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c531b09eb85e4dff966b6bfb93e7fbf128fdfba0", "html_url": "https://github.com/rust-lang/rust/commit/c531b09eb85e4dff966b6bfb93e7fbf128fdfba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c531b09eb85e4dff966b6bfb93e7fbf128fdfba0/comments", "author": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2432e97d6ab7e44390542c00229344bf45fcaddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2432e97d6ab7e44390542c00229344bf45fcaddd", "html_url": "https://github.com/rust-lang/rust/commit/2432e97d6ab7e44390542c00229344bf45fcaddd"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "3b35c04620c1c0a8e223675dcb860947c81c9693", "filename": "clippy_lints/src/matches/match_wild_enum.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c531b09eb85e4dff966b6bfb93e7fbf128fdfba0/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c531b09eb85e4dff966b6bfb93e7fbf128fdfba0/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs?ref=c531b09eb85e4dff966b6bfb93e7fbf128fdfba0", "patch": "@@ -3,6 +3,7 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{is_refutable, peel_hir_pat_refs, recurse_or_patterns};\n use rustc_errors::Applicability;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{Arm, Expr, PatKind, PathSegment, QPath, Ty, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, VariantDef};\n@@ -45,11 +46,11 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n \n     // Accumulate the variants which should be put in place of the wildcard because they're not\n     // already covered.\n-    let has_hidden_external = adt_def.variants().iter().any(|x| is_hidden_and_external(cx, x));\n+    let has_hidden_external = adt_def.variants().iter().any(|x| is_external_and_hidden(cx, x));\n     let mut missing_variants: Vec<_> = adt_def\n         .variants()\n         .iter()\n-        .filter(|x| !is_hidden_and_external(cx, x))\n+        .filter(|x| !is_external_and_hidden(cx, x))\n         .collect();\n \n     let mut path_prefix = CommonPrefixSearcher::None;\n@@ -195,7 +196,14 @@ impl<'a> CommonPrefixSearcher<'a> {\n     }\n }\n \n-fn is_hidden_and_external(cx: &LateContext<'_>, variant_def: &VariantDef) -> bool {\n-    (cx.tcx.is_doc_hidden(variant_def.def_id) || cx.tcx.has_attr(variant_def.def_id, sym::unstable))\n-        && variant_def.def_id.as_local().is_none()\n+fn is_external_and_hidden(cx: &LateContext<'_>, variant_def: &VariantDef) -> bool {\n+    is_external(variant_def.def_id) && is_hidden(cx, variant_def)\n+}\n+\n+fn is_hidden(cx: &LateContext<'_>, variant_def: &VariantDef) -> bool {\n+    cx.tcx.is_doc_hidden(variant_def.def_id) || cx.tcx.has_attr(variant_def.def_id, sym::unstable)\n+}\n+\n+fn is_external(def_id: DefId) -> bool {\n+    def_id.as_local().is_none()\n }"}]}