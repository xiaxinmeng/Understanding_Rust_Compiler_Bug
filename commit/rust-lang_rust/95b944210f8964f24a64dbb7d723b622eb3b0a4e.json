{"sha": "95b944210f8964f24a64dbb7d723b622eb3b0a4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1Yjk0NDIxMGY4OTY0ZjI0YTY0ZGJiN2Q3MjNiNjIyZWIzYjBhNGU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-29T16:34:50Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T13:28:18Z"}, "message": "rustc_codegen_ssa: take a FnAbi instead of a FnSig in declare_fn.", "tree": {"sha": "ff6df5993ff84ed56a3741ac350f91119e981138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6df5993ff84ed56a3741ac350f91119e981138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95b944210f8964f24a64dbb7d723b622eb3b0a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95b944210f8964f24a64dbb7d723b622eb3b0a4e", "html_url": "https://github.com/rust-lang/rust/commit/95b944210f8964f24a64dbb7d723b622eb3b0a4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95b944210f8964f24a64dbb7d723b622eb3b0a4e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db477af9ade518d5d756daf20c647095a1f4af23", "url": "https://api.github.com/repos/rust-lang/rust/commits/db477af9ade518d5d756daf20c647095a1f4af23", "html_url": "https://github.com/rust-lang/rust/commit/db477af9ade518d5d756daf20c647095a1f4af23"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "a295f2b240291d35e2dad2bc058c668d3ca3e770", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=95b944210f8964f24a64dbb7d723b622eb3b0a4e", "patch": "@@ -6,7 +6,7 @@ use rustc::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::Session;\n use rustc::session::config::{Sanitizer, OptLevel};\n-use rustc::ty::{self, TyCtxt, PolyFnSig};\n+use rustc::ty::TyCtxt;\n use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::query::Providers;\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -203,7 +203,7 @@ pub fn from_fn_attrs(\n     cx: &CodegenCx<'ll, 'tcx>,\n     llfn: &'ll Value,\n     id: Option<DefId>,\n-    sig: PolyFnSig<'tcx>,\n+    abi: Abi,\n ) {\n     let codegen_fn_attrs = id.map(|id| cx.tcx.codegen_fn_attrs(id))\n         .unwrap_or_else(|| CodegenFnAttrs::new());\n@@ -276,8 +276,7 @@ pub fn from_fn_attrs(\n         // Special attribute for allocator functions, which can't unwind.\n         false\n     } else {\n-        let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n-        if sig.abi == Abi::Rust || sig.abi == Abi::RustCall {\n+        if abi == Abi::Rust || abi == Abi::RustCall {\n             // Any Rust method (or `extern \"Rust\" fn` or `extern\n             // \"rust-call\" fn`) is explicitly allowed to unwind\n             // (unless it has no-unwind attribute, handled above)."}, {"sha": "b8e41b1f3dbfb75efbbe8379b33f99cff6acc9da", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=95b944210f8964f24a64dbb7d723b622eb3b0a4e", "patch": "@@ -4,14 +4,15 @@\n //! and methods are represented as just a fn ptr and not a full\n //! closure.\n \n+use crate::abi::FnAbi;\n use crate::attributes;\n use crate::llvm;\n use crate::context::CodegenCx;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n \n-use rustc::ty::{TypeFoldable, Instance};\n-use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n+use rustc::ty::{self, TypeFoldable, Instance};\n+use rustc::ty::layout::{FnAbiExt, LayoutOf, HasTyCtxt};\n \n /// Codegens a reference to a fn/method item, monomorphizing and\n /// inlining as it goes.\n@@ -32,19 +33,19 @@ pub fn get_fn(\n     assert!(!instance.substs.has_escaping_bound_vars());\n     assert!(!instance.substs.has_param_types());\n \n-    let sig = instance.fn_sig(cx.tcx());\n     if let Some(&llfn) = cx.instances.borrow().get(&instance) {\n         return llfn;\n     }\n \n+    let sig = instance.fn_sig(cx.tcx());\n     let sym = tcx.symbol_name(instance).name.as_str();\n     debug!(\"get_fn({:?}: {:?}) => {}\", instance, sig, sym);\n \n-    // Create a fn pointer with the substituted signature.\n-    let fn_ptr_ty = tcx.mk_fn_ptr(sig);\n-    let llptrty = cx.backend_type(cx.layout_of(fn_ptr_ty));\n-\n     let llfn = if let Some(llfn) = cx.get_declared_value(&sym) {\n+        // Create a fn pointer with the substituted signature.\n+        let fn_ptr_ty = tcx.mk_fn_ptr(sig);\n+        let llptrty = cx.backend_type(cx.layout_of(fn_ptr_ty));\n+\n         // This is subtle and surprising, but sometimes we have to bitcast\n         // the resulting fn pointer.  The reason has to do with external\n         // functions.  If you have two crates that both bind the same C\n@@ -76,14 +77,15 @@ pub fn get_fn(\n             llfn\n         }\n     } else {\n-        let llfn = cx.declare_fn(&sym, sig);\n-        assert_eq!(cx.val_ty(llfn), llptrty);\n+        let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n+        let fn_abi = FnAbi::new(cx, sig, &[]);\n+        let llfn = cx.declare_fn(&sym, &fn_abi);\n         debug!(\"get_fn: not casting pointer!\");\n \n         if instance.def.is_inline(tcx) {\n             attributes::inline(cx, llfn, attributes::InlineAttr::Hint);\n         }\n-        attributes::from_fn_attrs(cx, llfn, Some(instance.def.def_id()), sig);\n+        attributes::from_fn_attrs(cx, llfn, Some(instance.def.def_id()), sig.abi);\n \n         let instance_def_id = instance.def_id();\n "}, {"sha": "89e3195342ce81114805a25f68ca8b163fca3b17", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=95b944210f8964f24a64dbb7d723b622eb3b0a4e", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::FnAbi;\n use crate::attributes;\n use crate::llvm;\n use crate::llvm_util;\n@@ -15,7 +16,7 @@ use rustc::mir::mono::CodegenUnit;\n use rustc::session::config::{self, DebugInfo};\n use rustc::session::Session;\n use rustc::ty::layout::{\n-    LayoutError, LayoutOf, PointeeInfo, Size, TyLayout, VariantIdx, HasParamEnv\n+    FnAbiExt, LayoutError, LayoutOf, PointeeInfo, Size, TyLayout, VariantIdx, HasParamEnv\n };\n use rustc::ty::{self, Ty, TyCtxt, Instance};\n use rustc::util::nodemap::FxHashMap;\n@@ -412,15 +413,16 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             return llfn;\n         }\n \n-        let sig = ty::Binder::bind(tcx.mk_fn_sig(\n+        let sig = tcx.mk_fn_sig(\n             iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n             tcx.types.never,\n             false,\n             hir::Unsafety::Unsafe,\n             Abi::C\n-        ));\n+        );\n \n-        let llfn = self.declare_fn(\"rust_eh_unwind_resume\", sig);\n+        let fn_abi = FnAbi::new(self, sig, &[]);\n+        let llfn = self.declare_fn(\"rust_eh_unwind_resume\", &fn_abi);\n         attributes::apply_target_cpu_attr(self, llfn);\n         unwresume.set(Some(llfn));\n         llfn"}, {"sha": "772377617e2e12f8f3bbaa742b419d7e7ab10e69", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=95b944210f8964f24a64dbb7d723b622eb3b0a4e", "patch": "@@ -18,8 +18,7 @@ use crate::attributes;\n use crate::context::CodegenCx;\n use crate::type_::Type;\n use crate::value::Value;\n-use rustc::ty::{self, PolyFnSig};\n-use rustc::ty::layout::{FnAbiExt, LayoutOf};\n+use rustc::ty::Ty;\n use rustc::session::config::Sanitizer;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_codegen_ssa::traits::*;\n@@ -94,16 +93,14 @@ impl DeclareMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn declare_fn(\n         &self,\n         name: &str,\n-        sig: PolyFnSig<'tcx>,\n+        fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n     ) -> &'ll Value {\n-        debug!(\"declare_rust_fn(name={:?}, sig={:?})\", name, sig);\n-        let sig = self.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n-        debug!(\"declare_rust_fn (after region erasure) sig={:?}\", sig);\n+        debug!(\"declare_rust_fn(name={:?}, fn_abi={:?})\", name, fn_abi);\n \n-        let fn_abi = FnAbi::new(self, sig, &[]);\n         let llfn = declare_raw_fn(self, name, fn_abi.llvm_cconv(), fn_abi.llvm_type(self));\n \n-        if self.layout_of(sig.output()).abi.is_uninhabited() {\n+        // FIXME(eddyb) move into `FnAbi::apply_attrs_llfn`.\n+        if fn_abi.ret.layout.abi.is_uninhabited() {\n             llvm::Attribute::NoReturn.apply_llfn(Function, llfn);\n         }\n "}, {"sha": "999fc857c15a2732fee7d0b4c7f77ce357ee27dc", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=95b944210f8964f24a64dbb7d723b622eb3b0a4e", "patch": "@@ -1,4 +1,3 @@\n-use crate::attributes;\n use crate::llvm;\n use crate::llvm_util;\n use crate::abi::{Abi, FnAbi, LlvmType, PassMode};\n@@ -14,7 +13,7 @@ use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::glue;\n use rustc_codegen_ssa::base::{to_immediate, wants_msvc_seh, compare_simd_types};\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Primitive};\n+use rustc::ty::layout::{self, FnAbiExt, LayoutOf, HasTyCtxt, Primitive};\n use rustc::mir::interpret::GlobalId;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n@@ -1006,17 +1005,17 @@ fn gen_fn<'ll, 'tcx>(\n     output: Ty<'tcx>,\n     codegen: &mut dyn FnMut(Builder<'_, 'll, 'tcx>),\n ) -> &'ll Value {\n-    let rust_fn_sig = ty::Binder::bind(cx.tcx.mk_fn_sig(\n+    let rust_fn_sig = cx.tcx.mk_fn_sig(\n         inputs.into_iter(),\n         output,\n         false,\n         hir::Unsafety::Unsafe,\n         Abi::Rust\n-    ));\n-    let llfn = cx.declare_fn(name, rust_fn_sig);\n+    );\n+    let fn_abi = FnAbi::new(cx, rust_fn_sig, &[]);\n+    let llfn = cx.declare_fn(name, &fn_abi);\n     // FIXME(eddyb) find a nicer way to do this.\n     unsafe { llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::InternalLinkage) };\n-    attributes::from_fn_attrs(cx, llfn, None, rust_fn_sig);\n     let bx = Builder::new_block(cx, llfn, \"entry-block\");\n     codegen(bx);\n     llfn"}, {"sha": "f9df0a00475d06ea14f1ab3da605d45248e436b2", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=95b944210f8964f24a64dbb7d723b622eb3b0a4e", "patch": "@@ -1,12 +1,13 @@\n+use crate::abi::FnAbi;\n use crate::attributes;\n use crate::base;\n use crate::context::CodegenCx;\n use crate::llvm;\n use crate::type_of::LayoutLlvmExt;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::mono::{Linkage, Visibility};\n-use rustc::ty::{TypeFoldable, Instance};\n-use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n+use rustc::ty::{self, TypeFoldable, Instance};\n+use rustc::ty::layout::{FnAbiExt, LayoutOf, HasTyCtxt};\n use rustc_codegen_ssa::traits::*;\n \n pub use rustc::mir::mono::MonoItem;\n@@ -43,9 +44,14 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 !instance.substs.has_param_types());\n \n         let mono_sig = instance.fn_sig(self.tcx());\n-        let attrs = self.tcx.codegen_fn_attrs(instance.def_id());\n-        let lldecl = self.declare_fn(symbol_name, mono_sig);\n+        let mono_sig = self.tcx().normalize_erasing_late_bound_regions(\n+            ty::ParamEnv::reveal_all(),\n+            &mono_sig,\n+        );\n+        let fn_abi = FnAbi::new(self, mono_sig, &[]);\n+        let lldecl = self.declare_fn(symbol_name, &fn_abi);\n         unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n+        let attrs = self.tcx.codegen_fn_attrs(instance.def_id());\n         base::set_link_section(lldecl, &attrs);\n         if linkage == Linkage::LinkOnceODR ||\n             linkage == Linkage::WeakODR {\n@@ -75,7 +81,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             self,\n             lldecl,\n             Some(instance.def.def_id()),\n-            mono_sig,\n+            mono_sig.abi,\n         );\n \n         self.instances.borrow_mut().insert(instance, lldecl);"}, {"sha": "1dd2c74dd4fa2c919e8eaa65684c8b0484aee28b", "filename": "src/librustc_codegen_ssa/traits/declare.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b944210f8964f24a64dbb7d723b622eb3b0a4e/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs?ref=95b944210f8964f24a64dbb7d723b622eb3b0a4e", "patch": "@@ -1,7 +1,8 @@\n use super::BackendTypes;\n use rustc::hir::def_id::DefId;\n use rustc::mir::mono::{Linkage, Visibility};\n-use rustc::ty::{self, Instance};\n+use rustc::ty::{Instance, Ty};\n+use rustc_target::abi::call::FnAbi;\n \n pub trait DeclareMethods<'tcx>: BackendTypes {\n     /// Declare a global value.\n@@ -23,7 +24,7 @@ pub trait DeclareMethods<'tcx>: BackendTypes {\n     ///\n     /// If there\u2019s a value with the same name already declared, the function will\n     /// update the declaration and return existing Value instead.\n-    fn declare_fn(&self, name: &str, sig: ty::PolyFnSig<'tcx>) -> Self::Function;\n+    fn declare_fn(&self, name: &str, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> Self::Function;\n \n     /// Declare a global with an intention to define it.\n     ///"}]}