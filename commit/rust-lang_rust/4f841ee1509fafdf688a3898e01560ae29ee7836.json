{"sha": "4f841ee1509fafdf688a3898e01560ae29ee7836", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmODQxZWUxNTA5ZmFmZGY2ODhhMzg5OGUwMTU2MGFlMjllZTc4MzY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-16T22:57:56Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-17T13:00:38Z"}, "message": "std: make str::from_utf16 return an Option.\n\nThe rest of the codebase is moving toward avoiding `fail!` so we do it\nhere too!", "tree": {"sha": "109fd76eab98758829ab5ebde99d8a8477b1853e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/109fd76eab98758829ab5ebde99d8a8477b1853e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f841ee1509fafdf688a3898e01560ae29ee7836", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f841ee1509fafdf688a3898e01560ae29ee7836", "html_url": "https://github.com/rust-lang/rust/commit/4f841ee1509fafdf688a3898e01560ae29ee7836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f841ee1509fafdf688a3898e01560ae29ee7836/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35b1b62ddfc31c2e52b65c2f908c0fcbc6465de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b1b62ddfc31c2e52b65c2f908c0fcbc6465de5", "html_url": "https://github.com/rust-lang/rust/commit/35b1b62ddfc31c2e52b65c2f908c0fcbc6465de5"}], "stats": {"total": 72, "additions": 48, "deletions": 24}, "files": [{"sha": "80f5f74c53a52ace9dd074e77cde80a03459e632", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f841ee1509fafdf688a3898e01560ae29ee7836/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f841ee1509fafdf688a3898e01560ae29ee7836/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=4f841ee1509fafdf688a3898e01560ae29ee7836", "patch": "@@ -571,7 +571,8 @@ pub fn readdir(p: &CString) -> IoResult<~[Path]> {\n                         else {\n                             let fp_vec = vec::from_buf(\n                                 fp_buf, wcslen(fp_buf) as uint);\n-                            let fp_str = str::from_utf16(fp_vec);\n+                            let fp_str = str::from_utf16(fp_vec)\n+                                    .expect(\"rust_list_dir_wfd_fp_buf returned invalid UTF-16\");\n                             paths.push(Path::new(fp_str));\n                         }\n                         more_files = FindNextFileW(find_handle, wfd_ptr as HANDLE);"}, {"sha": "31e88905b30f9dfa2b26e8c6198ce41a44e23ac4", "filename": "src/libstd/os.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f841ee1509fafdf688a3898e01560ae29ee7836/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f841ee1509fafdf688a3898e01560ae29ee7836/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=4f841ee1509fafdf688a3898e01560ae29ee7836", "patch": "@@ -88,7 +88,7 @@ pub fn getcwd() -> Path {\n             fail!();\n         }\n     }\n-    Path::new(str::from_utf16(buf))\n+    Path::new(str::from_utf16(buf).expect(\"GetCurrentDirectoryW returned invalid UTF-16\"))\n }\n \n #[cfg(windows)]\n@@ -124,7 +124,12 @@ pub mod win32 {\n                 }\n                 if k != 0 && done {\n                     let sub = buf.slice(0, k as uint);\n-                    res = option::Some(str::from_utf16(sub));\n+                    // We want to explicitly catch the case when the\n+                    // closure returned invalid UTF-16, rather than\n+                    // set `res` to None and continue.\n+                    let s = str::from_utf16(sub)\n+                        .expect(\"fill_utf16_buf_and_decode: closure created invalid UTF-16\");\n+                    res = option::Some(s)\n                 }\n             }\n             return res;\n@@ -739,7 +744,7 @@ pub fn last_os_error() -> ~str {\n                 fail!(\"[{}] FormatMessage failure\", errno());\n             }\n \n-            str::from_utf16(buf)\n+            str::from_utf16(buf).expect(\"FormatMessageW returned invalid UTF-16\")\n         }\n     }\n \n@@ -828,8 +833,8 @@ fn real_args() -> ~[~str] {\n             while *ptr.offset(len as int) != 0 { len += 1; }\n \n             // Push it onto the list.\n-            args.push(vec::raw::buf_as_slice(ptr, len,\n-                                             str::from_utf16));\n+            let opt_s = vec::raw::buf_as_slice(ptr, len, str::from_utf16);\n+            args.push(opt_s.expect(\"CommandLineToArgvW returned invalid UTF-16\"));\n         }\n     }\n "}, {"sha": "20321dad60071cc4e265952ac9762475e27d917d", "filename": "src/libstd/str.rs", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4f841ee1509fafdf688a3898e01560ae29ee7836/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f841ee1509fafdf688a3898e01560ae29ee7836/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=4f841ee1509fafdf688a3898e01560ae29ee7836", "patch": "@@ -920,29 +920,32 @@ pub fn utf16_items<'a>(v: &'a [u16]) -> UTF16Items<'a> {\n     UTF16Items { iter : v.iter() }\n }\n \n-/// Decode a UTF-16 encoded vector `v` into a string.\n-///\n-/// # Failure\n-///\n-/// Fails on invalid UTF-16 data.\n+/// Decode a UTF-16 encoded vector `v` into a string, returning `None`\n+/// if `v` contains any invalid data.\n ///\n /// # Example\n ///\n /// ```rust\n /// use std::str;\n ///\n /// // \ud834\udd1emusic\n-/// let v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n-///          0x0073, 0x0069, 0x0063];\n-/// assert_eq!(str::from_utf16(v), ~\"\ud834\udd1emusic\");\n+/// let mut v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n+///              0x0073, 0x0069, 0x0063];\n+/// assert_eq!(str::from_utf16(v), Some(~\"\ud834\udd1emusic\"));\n+///\n+/// // \ud834\udd1emu<invalid>ic\n+/// v[4] = 0xD800;\n+/// assert_eq!(str::from_utf16(v), None);\n /// ```\n-pub fn from_utf16(v: &[u16]) -> ~str {\n-    utf16_items(v).map(|c| {\n-            match c {\n-                ScalarValue(c) => c,\n-                LoneSurrogate(u) => fail!(\"from_utf16: found lone surrogate {}\", u)\n-            }\n-        }).collect()\n+pub fn from_utf16(v: &[u16]) -> Option<~str> {\n+    let mut s = with_capacity(v.len() / 2);\n+    for c in utf16_items(v) {\n+        match c {\n+            ScalarValue(c) => s.push_char(c),\n+            LoneSurrogate(_) => return None\n+        }\n+    }\n+    Some(s)\n }\n \n /// Decode a UTF-16 encoded vector `v` into a string, replacing\n@@ -3834,14 +3837,29 @@ mod tests {\n             assert!(is_utf16(u));\n             assert_eq!(s.to_utf16(), u);\n \n-            assert_eq!(from_utf16(u), s);\n+            assert_eq!(from_utf16(u).unwrap(), s);\n             assert_eq!(from_utf16_lossy(u), s);\n \n-            assert_eq!(from_utf16(s.to_utf16()), s);\n-            assert_eq!(from_utf16(u).to_utf16(), u);\n+            assert_eq!(from_utf16(s.to_utf16()).unwrap(), s);\n+            assert_eq!(from_utf16(u).unwrap().to_utf16(), u);\n         }\n     }\n \n+    #[test]\n+    fn test_utf16_invalid() {\n+        // completely positive cases tested above.\n+        // lead + eof\n+        assert_eq!(from_utf16([0xD800]), None);\n+        // lead + lead\n+        assert_eq!(from_utf16([0xD800, 0xD800]), None);\n+\n+        // isolated trail\n+        assert_eq!(from_utf16([0x0061, 0xDC00]), None);\n+\n+        // general\n+        assert_eq!(from_utf16([0xD800, 0xd801, 0xdc8b, 0xD800]), None);\n+    }\n+\n     #[test]\n     fn test_utf16_lossy() {\n         // completely positive cases tested above."}]}