{"sha": "ca1ac6b6fb820765a678fa3decb343fa9f720737", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMWFjNmI2ZmI4MjA3NjVhNjc4ZmEzZGVjYjM0M2ZhOWY3MjA3Mzc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-28T14:37:48Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-30T17:30:09Z"}, "message": "rustc: rename mir::SourceScopeInfo to mir::SourceScopeLocalData.", "tree": {"sha": "e4e480099b7d500d1c90a42bd5871c8519b0080e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e480099b7d500d1c90a42bd5871c8519b0080e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca1ac6b6fb820765a678fa3decb343fa9f720737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1ac6b6fb820765a678fa3decb343fa9f720737", "html_url": "https://github.com/rust-lang/rust/commit/ca1ac6b6fb820765a678fa3decb343fa9f720737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca1ac6b6fb820765a678fa3decb343fa9f720737/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d44c42764fb87e1f581fa6206727e82cd7d52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d44c42764fb87e1f581fa6206727e82cd7d52d", "html_url": "https://github.com/rust-lang/rust/commit/85d44c42764fb87e1f581fa6206727e82cd7d52d"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "59d5ce278c6de045c9890e1e1718f5aa5d2aeb02", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=ca1ac6b6fb820765a678fa3decb343fa9f720737", "patch": "@@ -364,7 +364,7 @@ for mir::ProjectionElem<'gcx, V, T>\n }\n \n impl_stable_hash_for!(struct mir::SourceScopeData { span, parent_scope });\n-impl_stable_hash_for!(struct mir::SourceScopeInfo {\n+impl_stable_hash_for!(struct mir::SourceScopeLocalData {\n     lint_root, safety\n });\n "}, {"sha": "b60be21773b79c31574b29dc5cd267bf0d7b7cad", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ca1ac6b6fb820765a678fa3decb343fa9f720737", "patch": "@@ -84,7 +84,7 @@ pub struct Mir<'tcx> {\n \n     /// Crate-local information for each source scope, that can't (and\n     /// needn't) be tracked across crates.\n-    pub source_scope_info: ClearCrossCrate<IndexVec<SourceScope, SourceScopeInfo>>,\n+    pub source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n \n     /// Rvalues promoted from this function, such as borrows of constants.\n     /// Each of them is the Mir of a constant with the fn's type parameters\n@@ -138,8 +138,8 @@ pub const START_BLOCK: BasicBlock = BasicBlock(0);\n impl<'tcx> Mir<'tcx> {\n     pub fn new(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n                source_scopes: IndexVec<SourceScope, SourceScopeData>,\n-               source_scope_info: ClearCrossCrate<IndexVec<SourceScope,\n-                                                               SourceScopeInfo>>,\n+               source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope,\n+                                                                 SourceScopeLocalData>>,\n                promoted: IndexVec<Promoted, Mir<'tcx>>,\n                yield_ty: Option<Ty<'tcx>>,\n                local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n@@ -154,7 +154,7 @@ impl<'tcx> Mir<'tcx> {\n         Mir {\n             basic_blocks,\n             source_scopes,\n-            source_scope_info,\n+            source_scope_local_data,\n             promoted,\n             yield_ty,\n             generator_drop: None,\n@@ -308,14 +308,6 @@ impl<'tcx> Mir<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct SourceScopeInfo {\n-    /// A NodeId with lint levels equivalent to this scope's lint levels.\n-    pub lint_root: ast::NodeId,\n-    /// The unsafe block that contains this node.\n-    pub safety: Safety,\n-}\n-\n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum Safety {\n     Safe,\n@@ -330,7 +322,7 @@ pub enum Safety {\n impl_stable_hash_for!(struct Mir<'tcx> {\n     basic_blocks,\n     source_scopes,\n-    source_scope_info,\n+    source_scope_local_data,\n     promoted,\n     yield_ty,\n     generator_drop,\n@@ -1515,6 +1507,14 @@ pub struct SourceScopeData {\n     pub parent_scope: Option<SourceScope>,\n }\n \n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub struct SourceScopeLocalData {\n+    /// A NodeId with lint levels equivalent to this scope's lint levels.\n+    pub lint_root: ast::NodeId,\n+    /// The unsafe block that contains this node.\n+    pub safety: Safety,\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Operands\n \n@@ -2155,16 +2155,16 @@ CloneTypeFoldableAndLiftImpls! {\n     SourceInfo,\n     UpvarDecl,\n     ValidationOp,\n-    SourceScopeData,\n     SourceScope,\n-    SourceScopeInfo,\n+    SourceScopeData,\n+    SourceScopeLocalData,\n }\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for Mir<'tcx> {\n         basic_blocks,\n         source_scopes,\n-        source_scope_info,\n+        source_scope_local_data,\n         promoted,\n         yield_ty,\n         generator_drop,"}, {"sha": "0257af0c89ffcbf44e54d0bc010041de56340bf4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ca1ac6b6fb820765a678fa3decb343fa9f720737", "patch": "@@ -292,7 +292,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n \n     for local in mbcx.mir.mut_vars_and_args_iter().filter(|local| !mbcx.used_mut.contains(local)) {\n-        if let ClearCrossCrate::Set(ref vsi) = mbcx.mir.source_scope_info {\n+        if let ClearCrossCrate::Set(ref vsi) = mbcx.mir.source_scope_local_data {\n             let local_decl = &mbcx.mir.local_decls[local];\n \n             // Skip implicit `self` argument for closures"}, {"sha": "23a266d47cfa05fd57b8382e1c04b22a3ed66fe5", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=ca1ac6b6fb820765a678fa3decb343fa9f720737", "patch": "@@ -257,7 +257,7 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// the vector of all scopes that we have created thus far;\n     /// we track this for debuginfo later\n     source_scopes: IndexVec<SourceScope, SourceScopeData>,\n-    source_scope_info: IndexVec<SourceScope, SourceScopeInfo>,\n+    source_scope_local_data: IndexVec<SourceScope, SourceScopeLocalData>,\n     source_scope: SourceScope,\n \n     /// the guard-context: each time we build the guard expression for\n@@ -595,7 +595,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             scopes: vec![],\n             source_scopes: IndexVec::new(),\n             source_scope: OUTERMOST_SOURCE_SCOPE,\n-            source_scope_info: IndexVec::new(),\n+            source_scope_local_data: IndexVec::new(),\n             guard_context: vec![],\n             push_unsafe_count: 0,\n             unpushed_unsafe: safety,\n@@ -630,7 +630,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         Mir::new(self.cfg.basic_blocks,\n                  self.source_scopes,\n-                 ClearCrossCrate::Set(self.source_scope_info),\n+                 ClearCrossCrate::Set(self.source_scope_local_data),\n                  IndexVec::new(),\n                  yield_ty,\n                  self.local_decls,"}, {"sha": "ee0a087a1dd0ae9860199e80afa58d8fc4cac970", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=ca1ac6b6fb820765a678fa3decb343fa9f720737", "patch": "@@ -323,7 +323,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let sets = tcx.lint_levels(LOCAL_CRATE);\n                 let parent_hir_id =\n                     tcx.hir.definitions().node_to_hir_id(\n-                        self.source_scope_info[source_scope].lint_root\n+                        self.source_scope_local_data[source_scope].lint_root\n                             );\n                 let current_hir_id =\n                     tcx.hir.definitions().node_to_hir_id(node_id);\n@@ -517,22 +517,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let parent = self.source_scope;\n         debug!(\"new_source_scope({:?}, {:?}, {:?}) - parent({:?})={:?}\",\n                span, lint_level, safety,\n-               parent, self.source_scope_info.get(parent));\n+               parent, self.source_scope_local_data.get(parent));\n         let scope = self.source_scopes.push(SourceScopeData {\n             span,\n             parent_scope: Some(parent),\n         });\n-        let scope_info = SourceScopeInfo {\n+        let scope_local_data = SourceScopeLocalData {\n             lint_root: if let LintLevel::Explicit(lint_root) = lint_level {\n                 lint_root\n             } else {\n-                self.source_scope_info[parent].lint_root\n+                self.source_scope_local_data[parent].lint_root\n             },\n             safety: safety.unwrap_or_else(|| {\n-                self.source_scope_info[parent].safety\n+                self.source_scope_local_data[parent].safety\n             })\n         };\n-        self.source_scope_info.push(scope_info);\n+        self.source_scope_local_data.push(scope_local_data);\n         scope\n     }\n "}, {"sha": "fedd0774df44cb20595283d211f029877b0c2de4", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=ca1ac6b6fb820765a678fa3decb343fa9f720737", "patch": "@@ -27,7 +27,7 @@ use util;\n \n pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n-    source_scope_info: &'a IndexVec<SourceScope, SourceScopeInfo>,\n+    source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -38,12 +38,12 @@ pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn new(mir: &'a Mir<'tcx>,\n-           source_scope_info: &'a IndexVec<SourceScope, SourceScopeInfo>,\n+           source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            param_env: ty::ParamEnv<'tcx>) -> Self {\n         Self {\n             mir,\n-            source_scope_info,\n+            source_scope_local_data,\n             violations: vec![],\n             source_info: SourceInfo {\n                 span: mir.span,\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             if util::is_disaligned(self.tcx, self.mir, self.param_env, place) {\n                 let source_info = self.source_info;\n                 let lint_root =\n-                    self.source_scope_info[source_info.scope].lint_root;\n+                    self.source_scope_local_data[source_info.scope].lint_root;\n                 self.register_violations(&[UnsafetyViolation {\n                     source_info,\n                     description: Symbol::intern(\"borrow of packed field\").as_interned_str(),\n@@ -212,7 +212,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 } else if self.tcx.is_foreign_item(def_id) {\n                     let source_info = self.source_info;\n                     let lint_root =\n-                        self.source_scope_info[source_info.scope].lint_root;\n+                        self.source_scope_local_data[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n                         description: Symbol::intern(\"use of extern static\").as_interned_str(),\n@@ -240,7 +240,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn register_violations(&mut self,\n                            violations: &[UnsafetyViolation],\n                            unsafe_blocks: &[(ast::NodeId, bool)]) {\n-        let within_unsafe = match self.source_scope_info[self.source_info.scope].safety {\n+        let within_unsafe = match self.source_scope_local_data[self.source_info.scope].safety {\n             Safety::Safe => {\n                 for violation in violations {\n                     if !self.violations.contains(violation) {\n@@ -327,7 +327,7 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     // `mir_built` force this.\n     let mir = &tcx.mir_built(def_id).borrow();\n \n-    let source_scope_info = match mir.source_scope_info {\n+    let source_scope_local_data = match mir.source_scope_local_data {\n         ClearCrossCrate::Set(ref data) => data,\n         ClearCrossCrate::Clear => {\n             debug!(\"unsafety_violations: {:?} - remote, skipping\", def_id);\n@@ -340,7 +340,7 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n \n     let param_env = tcx.param_env(def_id);\n     let mut checker = UnsafetyChecker::new(\n-        mir, source_scope_info, tcx, param_env);\n+        mir, source_scope_local_data, tcx, param_env);\n     checker.visit_mir(mir);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);"}, {"sha": "ef61fe099bfb1a35a5372cc416b799c042aad9ba", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ca1ac6b6fb820765a678fa3decb343fa9f720737", "patch": "@@ -338,7 +338,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                         .bits();\n                     let right_size = self.tcx.layout_of(self.param_env.and(right.1)).unwrap().size;\n                     if r.to_bits(right_size).ok().map_or(false, |b| b >= left_bits as u128) {\n-                        let scope_info = match self.mir.source_scope_info {\n+                        let source_scope_local_data = match self.mir.source_scope_local_data {\n                             ClearCrossCrate::Set(ref data) => data,\n                             ClearCrossCrate::Clear => return None,\n                         };\n@@ -347,7 +347,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                         } else {\n                             \"left\"\n                         };\n-                        let node_id = scope_info[source_info.scope].lint_root;\n+                        let node_id = source_scope_local_data[source_info.scope].lint_root;\n                         self.tcx.lint_node(\n                             ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n                             node_id,"}, {"sha": "19bc4fd03f49865d9e72f791464f385caf989999", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1ac6b6fb820765a678fa3decb343fa9f720737/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=ca1ac6b6fb820765a678fa3decb343fa9f720737", "patch": "@@ -425,7 +425,7 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n                 // FIXME: maybe try to filter this to avoid blowing up\n                 // memory usage?\n                 mir.source_scopes.clone(),\n-                mir.source_scope_info.clone(),\n+                mir.source_scope_local_data.clone(),\n                 IndexVec::new(),\n                 None,\n                 initial_locals,"}]}