{"sha": "bbf688a84de7001d033764b848a50cbad42f3d5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZjY4OGE4NGRlNzAwMWQwMzM3NjRiODQ4YTUwY2JhZDQyZjNkNWE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-06-30T19:56:08Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-07-05T21:44:29Z"}, "message": "enable Atomic*.{load,store} for ARMv6-M / MSP430\n\ncloses #45085\n\nthis commit adds an `atomic_cas` target option and an unstable `#[cfg(target_has_atomic_cas)]`\nattribute to enable a subset of the `Atomic*` API on architectures that don't support atomic CAS\nnatively, like MSP430 and ARMv6-M.", "tree": {"sha": "1a631bf9f7239612dcc09c72be1df3d749a39850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a631bf9f7239612dcc09c72be1df3d749a39850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf688a84de7001d033764b848a50cbad42f3d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf688a84de7001d033764b848a50cbad42f3d5a", "html_url": "https://github.com/rust-lang/rust/commit/bbf688a84de7001d033764b848a50cbad42f3d5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf688a84de7001d033764b848a50cbad42f3d5a/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94eb1760551096363ec04e42367b6b195592dbd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/94eb1760551096363ec04e42367b6b195592dbd8", "html_url": "https://github.com/rust-lang/rust/commit/94eb1760551096363ec04e42367b6b195592dbd8"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "66bf8de1993a3faf99222e698eb84e5d744f3310", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=bbf688a84de7001d033764b848a50cbad42f3d5a", "patch": "@@ -86,6 +86,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n+#![cfg_attr(not(stage0), feature(cfg_target_has_atomic_cas))]\n #![feature(coerce_unsized)]\n #![feature(collections_range)]\n #![feature(const_fn)]\n@@ -162,7 +163,8 @@ mod boxed {\n #[cfg(test)]\n mod boxed_test;\n pub mod collections;\n-#[cfg(target_has_atomic = \"ptr\")]\n+#[cfg_attr(stage0, cfg(target_has_atomic = \"ptr\"))]\n+#[cfg_attr(not(stage0), cfg(all(target_has_atomic = \"ptr\", target_has_atomic_cas)))]\n pub mod sync;\n pub mod rc;\n pub mod raw_vec;"}, {"sha": "c8e3e770ed2debee7461a2c20f750bc2f62358ce", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=bbf688a84de7001d033764b848a50cbad42f3d5a", "patch": "@@ -12,10 +12,12 @@\n \n pub use core::task::*;\n \n-#[cfg(target_has_atomic = \"ptr\")]\n+#[cfg_attr(stage0, cfg(target_has_atomic = \"ptr\"))]\n+#[cfg_attr(not(stage0), cfg(all(target_has_atomic = \"ptr\", target_has_atomic_cas)))]\n pub use self::if_arc::*;\n \n-#[cfg(target_has_atomic = \"ptr\")]\n+#[cfg_attr(stage0, cfg(target_has_atomic = \"ptr\"))]\n+#[cfg_attr(not(stage0), cfg(all(target_has_atomic = \"ptr\", target_has_atomic_cas)))]\n mod if_arc {\n     use super::*;\n     use core::marker::PhantomData;\n@@ -47,7 +49,8 @@ mod if_arc {\n         }\n     }\n \n-    #[cfg(target_has_atomic = \"ptr\")]\n+    #[cfg_attr(stage0, cfg(target_has_atomic = \"ptr\"))]\n+    #[cfg_attr(not(stage0), cfg(all(target_has_atomic = \"ptr\", target_has_atomic_cas)))]\n     struct ArcWrapped<T>(PhantomData<T>);\n \n     unsafe impl<T: Wake + 'static> UnsafeWake for ArcWrapped<T> {"}, {"sha": "fe328bdd107074239c3857b941f90d56b6833a9f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=bbf688a84de7001d033764b848a50cbad42f3d5a", "patch": "@@ -79,6 +79,7 @@\n #![feature(associated_type_defaults)]\n #![feature(attr_literals)]\n #![feature(cfg_target_has_atomic)]\n+#![cfg_attr(not(stage0), feature(cfg_target_has_atomic_cas))]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(const_int_ops)]"}, {"sha": "647bf4fb40a38434c8c44cf268bdc8574e2cbc91", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=bbf688a84de7001d033764b848a50cbad42f3d5a", "patch": "@@ -371,6 +371,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n     pub fn swap(&self, val: bool, order: Ordering) -> bool {\n         unsafe { atomic_swap(self.v.get(), val as u8, order) != 0 }\n     }\n@@ -401,6 +402,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n     pub fn compare_and_swap(&self, current: bool, new: bool, order: Ordering) -> bool {\n         match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {\n             Ok(x) => x,\n@@ -446,6 +448,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n+    #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n     pub fn compare_exchange(&self,\n                             current: bool,\n                             new: bool,\n@@ -537,6 +540,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n     pub fn fetch_and(&self, val: bool, order: Ordering) -> bool {\n         unsafe { atomic_and(self.v.get(), val as u8, order) != 0 }\n     }\n@@ -568,6 +572,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n     pub fn fetch_nand(&self, val: bool, order: Ordering) -> bool {\n         // We can't use atomic_nand here because it can result in a bool with\n         // an invalid value. This happens because the atomic operation is done\n@@ -610,6 +615,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n     pub fn fetch_or(&self, val: bool, order: Ordering) -> bool {\n         unsafe { atomic_or(self.v.get(), val as u8, order) != 0 }\n     }\n@@ -640,6 +646,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n     pub fn fetch_xor(&self, val: bool, order: Ordering) -> bool {\n         unsafe { atomic_xor(self.v.get(), val as u8, order) != 0 }\n     }\n@@ -786,6 +793,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n     pub fn swap(&self, ptr: *mut T, order: Ordering) -> *mut T {\n         unsafe { atomic_swap(self.p.get() as *mut usize, ptr as usize, order) as *mut T }\n     }\n@@ -815,6 +823,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n     pub fn compare_and_swap(&self, current: *mut T, new: *mut T, order: Ordering) -> *mut T {\n         match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {\n             Ok(x) => x,\n@@ -853,6 +862,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n+    #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n     pub fn compare_exchange(&self,\n                             current: *mut T,\n                             new: *mut T,\n@@ -1138,6 +1148,7 @@ assert_eq!(some_var.swap(10, Ordering::Relaxed), 5);\n ```\"),\n                 #[inline]\n                 #[$stable]\n+                #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n                 pub fn swap(&self, val: $int_type, order: Ordering) -> $int_type {\n                     unsafe { atomic_swap(self.v.get(), val, order) }\n                 }\n@@ -1170,6 +1181,7 @@ assert_eq!(some_var.load(Ordering::Relaxed), 10);\n ```\"),\n                 #[inline]\n                 #[$stable]\n+                #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n                 pub fn compare_and_swap(&self,\n                                         current: $int_type,\n                                         new: $int_type,\n@@ -1223,6 +1235,7 @@ assert_eq!(some_var.load(Ordering::Relaxed), 10);\n ```\"),\n                 #[inline]\n                 #[$stable_cxchg]\n+                #[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n                 pub fn compare_exchange(&self,\n                                         current: $int_type,\n                                         new: $int_type,\n@@ -1677,6 +1690,7 @@ atomic_int!{\n }\n \n #[inline]\n+#[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n fn strongest_failure_ordering(order: Ordering) -> Ordering {\n     match order {\n         Release => Relaxed,\n@@ -1713,6 +1727,7 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n }\n \n #[inline]\n+#[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xchg_acq(dst, val),\n@@ -1751,6 +1766,7 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n+#[cfg_attr(not(stage0), cfg(target_has_atomic_cas))]\n unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n                                      old: T,\n                                      new: T,"}, {"sha": "93bfe1fc63851eebc1232e1b48271668c605c668", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=bbf688a84de7001d033764b848a50cbad42f3d5a", "patch": "@@ -1367,6 +1367,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let vendor = &sess.target.target.target_vendor;\n     let min_atomic_width = sess.target.target.min_atomic_width();\n     let max_atomic_width = sess.target.target.max_atomic_width();\n+    let atomic_cas = sess.target.target.options.atomic_cas;\n \n     let mut ret = HashSet::new();\n     // Target bindings.\n@@ -1406,6 +1407,9 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n             }\n         }\n     }\n+    if atomic_cas {\n+        ret.insert((Symbol::intern(\"target_has_atomic_cas\"), None));\n+    }\n     if sess.opts.debug_assertions {\n         ret.insert((Symbol::intern(\"debug_assertions\"), None));\n     }"}, {"sha": "8ebf5f7c64deb2464b58835f007aa8db98b44767", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=bbf688a84de7001d033764b848a50cbad42f3d5a", "patch": "@@ -572,6 +572,9 @@ pub struct TargetOptions {\n     /// Don't use this field; instead use the `.max_atomic_width()` method.\n     pub max_atomic_width: Option<u64>,\n \n+    /// Whether the target supports atomic CAS operations natively\n+    pub atomic_cas: bool,\n+\n     /// Panic strategy: \"unwind\" or \"abort\"\n     pub panic_strategy: PanicStrategy,\n \n@@ -690,6 +693,7 @@ impl Default for TargetOptions {\n             no_integrated_as: false,\n             min_atomic_width: None,\n             max_atomic_width: None,\n+            atomic_cas: true,\n             panic_strategy: PanicStrategy::Unwind,\n             abi_blacklist: vec![],\n             crt_static_allows_dylibs: false,\n@@ -946,6 +950,7 @@ impl Target {\n         key!(no_integrated_as, bool);\n         key!(max_atomic_width, Option<u64>);\n         key!(min_atomic_width, Option<u64>);\n+        key!(atomic_cas, bool);\n         try!(key!(panic_strategy, PanicStrategy));\n         key!(crt_static_allows_dylibs, bool);\n         key!(crt_static_default, bool);\n@@ -1154,6 +1159,7 @@ impl ToJson for Target {\n         target_option_val!(no_integrated_as);\n         target_option_val!(min_atomic_width);\n         target_option_val!(max_atomic_width);\n+        target_option_val!(atomic_cas);\n         target_option_val!(panic_strategy);\n         target_option_val!(crt_static_allows_dylibs);\n         target_option_val!(crt_static_default);"}, {"sha": "291511dd42913d7ec606febd6c9167d4c41a4726", "filename": "src/librustc_target/spec/msp430_none_elf.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs?ref=bbf688a84de7001d033764b848a50cbad42f3d5a", "patch": "@@ -34,9 +34,11 @@ pub fn target() -> TargetResult {\n             linker: Some(\"msp430-elf-gcc\".to_string()),\n             no_integrated_as: true,\n \n-            // There are no atomic instructions available in the MSP430\n+            // There are no atomic CAS instructions available in the MSP430\n             // instruction set\n-            max_atomic_width: Some(0),\n+            max_atomic_width: Some(16),\n+\n+            atomic_cas: false,\n \n             // Because these devices have very little resources having an\n             // unwinder is too onerous so we default to \"abort\" because the"}, {"sha": "0c45178b47a5b30a67c8a5233b24425596a1f45c", "filename": "src/librustc_target/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs?ref=bbf688a84de7001d033764b848a50cbad42f3d5a", "patch": "@@ -31,7 +31,7 @@ pub fn target() -> TargetResult {\n             features: \"+strict-align\".to_string(),\n             // There are no atomic instructions available in the instruction set of the ARMv6-M\n             // architecture\n-            max_atomic_width: Some(0),\n+            atomic_cas: false,\n             .. super::thumb_base::opts()\n         }\n     })"}, {"sha": "59418f8bf2abb6a875463752eacedfae6b0c3f31", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf688a84de7001d033764b848a50cbad42f3d5a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bbf688a84de7001d033764b848a50cbad42f3d5a", "patch": "@@ -479,6 +479,9 @@ declare_features! (\n \n     // Allows async and await syntax\n     (active, async_await, \"1.28.0\", Some(50547), None),\n+\n+    // Allows async and await syntax\n+    (active, cfg_target_has_atomic_cas, \"1.28.0\", Some(0), None),\n );\n \n declare_features! (\n@@ -1099,6 +1102,7 @@ const GATED_CFGS: &[(&str, &str, fn(&Features) -> bool)] = &[\n     (\"target_vendor\", \"cfg_target_vendor\", cfg_fn!(cfg_target_vendor)),\n     (\"target_thread_local\", \"cfg_target_thread_local\", cfg_fn!(cfg_target_thread_local)),\n     (\"target_has_atomic\", \"cfg_target_has_atomic\", cfg_fn!(cfg_target_has_atomic)),\n+    (\"target_has_atomic_cas\", \"cfg_target_has_atomic_cas\", cfg_fn!(cfg_target_has_atomic_cas)),\n ];\n \n #[derive(Debug, Eq, PartialEq)]"}]}