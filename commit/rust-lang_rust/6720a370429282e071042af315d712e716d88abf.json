{"sha": "6720a370429282e071042af315d712e716d88abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MjBhMzcwNDI5MjgyZTA3MTA0MmFmMzE1ZDcxMmU3MTZkODhhYmY=", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-04-03T15:59:31Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-05T14:10:50Z"}, "message": "Rename RealFileName::Named to LocalPath and Devirtualized to Remapped", "tree": {"sha": "2306548a63269eb78cde53e7e46ff55c4e0048c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2306548a63269eb78cde53e7e46ff55c4e0048c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6720a370429282e071042af315d712e716d88abf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmCSp3EACgkQGBtJ+fOP\nM3SWmwv/e0/B2SjlgrT24FUla4oMArU/X8WQp7WDSM4C8djWXv1gELBcrUwp/UXw\nBFwxb8aGgKTjB8zeFOx0Oy6pat38wUBQm6Gjt8YHfEdZ2aVX9AZtrSk+xcDobCeF\nTAA+u7pk4LEybalq5Tkdl5jHNQ2sB2SzddW0Rc7yW8QBw29r5KtPxBG6H9J3iX2u\nhLpdwgLVHDkARL5rYQWLR243wz2rI4jPvVO34fJq0/HTwnEfCZ2cXrVNMgvuhKpI\nRv1kpTXvx+abvTjtM8tFvtR8WIj/U3KWDrqUa91UF1fmd7zbK/EfEnDPESZ4sNGI\nlu/NabuDbCnK3lRyWzLcNXwg4Bpa5jr0zcHCEbyYpxM6r2ZuFNbwbEVnaI6D2GkA\nVarZyIyhRDx8VKJkxPqBpDdieXp0x4XHzmXfK75mryaEFpT8ZeEAU8m1ZhYs5HaM\n4IXY4QMfol5LTCk7AAutBsgFR5C6a7P0w+7ZKqA4mWIB6bxF+gQDPOMx/u3XMr+L\nztZ0+Yo9\n=kLQ8\n-----END PGP SIGNATURE-----", "payload": "tree 2306548a63269eb78cde53e7e46ff55c4e0048c7\nparent d66506d3532848d5f52301d0c328d79673d7f551\nauthor Andy Wang <cbeuw.andy@gmail.com> 1617465571 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1620223850 +0100\n\nRename RealFileName::Named to LocalPath and Devirtualized to Remapped\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6720a370429282e071042af315d712e716d88abf", "html_url": "https://github.com/rust-lang/rust/commit/6720a370429282e071042af315d712e716d88abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6720a370429282e071042af315d712e716d88abf/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d66506d3532848d5f52301d0c328d79673d7f551", "url": "https://api.github.com/repos/rust-lang/rust/commits/d66506d3532848d5f52301d0c328d79673d7f551", "html_url": "https://github.com/rust-lang/rust/commit/d66506d3532848d5f52301d0c328d79673d7f551"}], "stats": {"total": 214, "additions": 82, "deletions": 132}, "files": [{"sha": "f88b05e6c8fdf0939a5757c57c6069edfc4cf678", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -1072,7 +1072,7 @@ impl<'a> ExtCtxt<'a> {\n         // after macro expansion (that is, they are unhygienic).\n         if !path.is_absolute() {\n             let callsite = span.source_callsite();\n-            let mut result = match self.source_map().span_to_unmapped_path(callsite) {\n+            let mut result = match self.source_map().span_to_filename(callsite) {\n                 FileName::Real(name) => name.into_local_path(),\n                 FileName::DocTest(path, _) => path,\n                 other => {"}, {"sha": "7bb29d20e4a2378dcef8ba07df39b319c90b433a", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -361,7 +361,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     // FIXME: Avoid visiting the crate as a `Mod` item,\n     // make crate a first class expansion target instead.\n     pub fn expand_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n-        let file_path = match self.cx.source_map().span_to_unmapped_path(krate.span) {\n+        let file_path = match self.cx.source_map().span_to_filename(krate.span) {\n             FileName::Real(name) => name.into_local_path(),\n             other => PathBuf::from(other.to_string()),\n         };"}, {"sha": "4089dc88b7b2090d075bf43842f557a80ecd2716", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -725,7 +725,7 @@ fn ident_name_compatibility_hack(\n         if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n             let source_map = rustc.sess.source_map();\n             let filename = source_map.span_to_filename(orig_span);\n-            if let FileName::Real(RealFileName::Named(path)) = filename {\n+            if let FileName::Real(RealFileName::LocalPath(path)) = filename {\n                 let matches_prefix = |prefix, filename| {\n                     // Check for a path that ends with 'prefix*/src/<filename>'\n                     let mut iter = path.components().rev();\n@@ -788,7 +788,7 @@ fn ident_name_compatibility_hack(\n                 if macro_name == sym::tuple_from_req && matches_prefix(\"actix-web\", \"extract.rs\") {\n                     let snippet = source_map.span_to_snippet(orig_span);\n                     if snippet.as_deref() == Ok(\"$T\") {\n-                        if let FileName::Real(RealFileName::Named(macro_path)) =\n+                        if let FileName::Real(RealFileName::LocalPath(macro_path)) =\n                             source_map.span_to_filename(rustc.def_site)\n                         {\n                             if macro_path.to_string_lossy().contains(\"pin-project-internal-0.\") {"}, {"sha": "2f91a72e2081bb7d387d4c19415bbe5db2dd746f", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -575,7 +575,7 @@ fn write_out_deps(\n             .iter()\n             .filter(|fmap| fmap.is_real_file())\n             .filter(|fmap| !fmap.is_imported())\n-            .map(|fmap| escape_dep_filename(&fmap.unmapped_path.as_ref().unwrap_or(&fmap.name)))\n+            .map(|fmap| escape_dep_filename(&fmap.name))\n             .collect();\n \n         if let Some(ref backend) = sess.opts.debugging_opts.codegen_backend {\n@@ -587,15 +587,15 @@ fn write_out_deps(\n                 for cnum in resolver.cstore().crates_untracked() {\n                     let source = resolver.cstore().crate_source_untracked(cnum);\n                     if let Some((path, _)) = source.dylib {\n-                        let file_name = FileName::Real(RealFileName::Named(path));\n+                        let file_name = FileName::Real(RealFileName::LocalPath(path));\n                         files.push(escape_dep_filename(&file_name));\n                     }\n                     if let Some((path, _)) = source.rlib {\n-                        let file_name = FileName::Real(RealFileName::Named(path));\n+                        let file_name = FileName::Real(RealFileName::LocalPath(path));\n                         files.push(escape_dep_filename(&file_name));\n                     }\n                     if let Some((path, _)) = source.rmeta {\n-                        let file_name = FileName::Real(RealFileName::Named(path));\n+                        let file_name = FileName::Real(RealFileName::LocalPath(path));\n                         files.push(escape_dep_filename(&file_name));\n                     }\n                 }"}, {"sha": "74325c62ed3eeed456a7397388b1aee7ab969fd4", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -1635,9 +1635,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             if let Some(virtual_dir) = virtual_rust_source_base_dir {\n                 if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {\n                     if let rustc_span::FileName::Real(old_name) = name {\n-                        if let rustc_span::RealFileName::Named(one_path) = old_name {\n-                            if let Ok(rest) = one_path.strip_prefix(virtual_dir) {\n-                                let virtual_name = one_path.clone();\n+                        if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =\n+                            old_name\n+                        {\n+                            if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {\n+                                let virtual_name = virtual_name.clone();\n \n                                 // The std library crates are in\n                                 // `$sysroot/lib/rustlib/src/rust/library`, whereas other crates\n@@ -1673,7 +1675,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                     virtual_name.display(),\n                                     new_path.display(),\n                                 );\n-                                let new_name = rustc_span::RealFileName::Devirtualized {\n+                                let new_name = rustc_span::RealFileName::Remapped {\n                                     local_path: new_path,\n                                     virtual_name,\n                                 };\n@@ -1694,7 +1696,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     // containing the information we need.\n                     let rustc_span::SourceFile {\n                         mut name,\n-                        name_was_remapped,\n                         src_hash,\n                         start_pos,\n                         end_pos,\n@@ -1709,8 +1710,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     // If this file's path has been remapped to `/rustc/$hash`,\n                     // we might be able to reverse that (also see comments above,\n                     // on `try_to_translate_virtual_to_real`).\n-                    // FIXME(eddyb) we could check `name_was_remapped` here,\n-                    // but in practice it seems to be always `false`.\n                     try_to_translate_virtual_to_real(&mut name);\n \n                     let source_length = (end_pos - start_pos).to_usize();\n@@ -1735,7 +1734,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n                     let local_version = sess.source_map().new_imported_source_file(\n                         name,\n-                        name_was_remapped,\n                         src_hash,\n                         name_hash,\n                         source_length,"}, {"sha": "fbae2278f1e1f079007113c60803d23e6e76619e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -28,9 +28,12 @@ use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder};\n use rustc_session::config::CrateType;\n-use rustc_span::hygiene::{ExpnDataEncodeMode, HygieneEncodeContext, MacroKind};\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{self, ExternalSource, FileName, SourceFile, Span, SyntaxContext};\n+use rustc_span::{\n+    hygiene::{ExpnDataEncodeMode, HygieneEncodeContext, MacroKind},\n+    RealFileName,\n+};\n use rustc_target::abi::VariantIdx;\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n@@ -485,18 +488,22 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             })\n             .map(|(_, source_file)| {\n                 let mut adapted = match source_file.name {\n-                    // This path of this SourceFile has been modified by\n-                    // path-remapping, so we use it verbatim (and avoid\n-                    // cloning the whole map in the process).\n-                    _ if source_file.name_was_remapped => source_file.clone(),\n-\n-                    // Otherwise expand all paths to absolute paths because\n-                    // any relative paths are potentially relative to a\n-                    // wrong directory.\n                     FileName::Real(ref name) => {\n-                        let name = name.stable_name();\n+                        // Expand all local paths to absolute paths because\n+                        // any relative paths are potentially relative to a\n+                        // wrong directory.\n                         let mut adapted = (**source_file).clone();\n-                        adapted.name = Path::new(&working_dir).join(name).into();\n+                        adapted.name = match name {\n+                            RealFileName::LocalPath(local_path) => {\n+                                Path::new(&working_dir).join(local_path).into()\n+                            }\n+                            RealFileName::Remapped { local_path, virtual_name } => {\n+                                FileName::Real(RealFileName::Remapped {\n+                                    local_path: Path::new(&working_dir).join(local_path),\n+                                    virtual_name: virtual_name.clone(),\n+                                })\n+                            }\n+                        };\n                         adapted.name_hash = {\n                             let mut hasher: StableHasher = StableHasher::new();\n                             adapted.name.hash(&mut hasher);"}, {"sha": "2d8f661ef59e92d233000ff1dd2358221fb242c1", "filename": "compiler/rustc_middle/src/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -61,8 +61,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n         let SourceFile {\n             name: _, // We hash the smaller name_hash instead of this\n             name_hash,\n-            name_was_remapped,\n-            unmapped_path: _,\n             cnum,\n             // Do not hash the source as it is not encoded\n             src: _,\n@@ -77,7 +75,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n         } = *self;\n \n         (name_hash as u64).hash_stable(hcx, hasher);\n-        name_was_remapped.hash_stable(hcx, hasher);\n \n         src_hash.hash_stable(hcx, hasher);\n "}, {"sha": "5e16a427f3fa3b9df4d1363ecf7894201de9419b", "filename": "compiler/rustc_save_analysis/src/span_utils.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -16,8 +16,7 @@ impl<'a> SpanUtils<'a> {\n \n     pub fn make_filename_string(&self, file: &SourceFile) -> String {\n         match &file.name {\n-            FileName::Real(name) if !file.name_was_remapped => {\n-                let path = name.local_path();\n+            FileName::Real(RealFileName::LocalPath(path)) => {\n                 if path.is_absolute() {\n                     self.sess\n                         .source_map()\n@@ -30,8 +29,11 @@ impl<'a> SpanUtils<'a> {\n                     self.sess.working_dir.0.join(&path).display().to_string()\n                 }\n             }\n-            // If the file name is already remapped, we assume the user\n+            // If the file name was remapped, we assume the user\n             // configured it the way they wanted to, so use that directly\n+            FileName::Real(RealFileName::Remapped { local_path: _, virtual_name }) => {\n+                virtual_name.display().to_string()\n+            }\n             filename => filename.to_string(),\n         }\n     }"}, {"sha": "44617b5aa002687eeec681547602e5d2946566dc", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -113,17 +113,16 @@ pub fn with_default_session_globals<R>(f: impl FnOnce() -> R) -> R {\n // deserialization.\n scoped_tls::scoped_thread_local!(pub static SESSION_GLOBALS: SessionGlobals);\n \n-// FIXME: Perhaps this should not implement Rustc{Decodable, Encodable}\n-//\n // FIXME: We should use this enum or something like it to get rid of the\n // use of magic `/rust/1.x/...` paths across the board.\n #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]\n #[derive(HashStable_Generic, Decodable, Encodable)]\n pub enum RealFileName {\n-    Named(PathBuf),\n-    /// For de-virtualized paths (namely paths into libstd that have been mapped\n-    /// to the appropriate spot on the local host's file system),\n-    Devirtualized {\n+    LocalPath(PathBuf),\n+    /// For remapped paths (namely paths into libstd that have been mapped\n+    /// to the appropriate spot on the local host's file system, and local file\n+    /// system paths that have been remapped with `FilePathMapping`),\n+    Remapped {\n         /// `local_path` is the (host-dependent) local path to the file.\n         local_path: PathBuf,\n         /// `virtual_name` is the stable path rustc will store internally within\n@@ -137,28 +136,28 @@ impl RealFileName {\n     /// Avoid embedding this in build artifacts; see `stable_name()` for that.\n     pub fn local_path(&self) -> &Path {\n         match self {\n-            RealFileName::Named(p)\n-            | RealFileName::Devirtualized { local_path: p, virtual_name: _ } => &p,\n+            RealFileName::LocalPath(p)\n+            | RealFileName::Remapped { local_path: p, virtual_name: _ } => &p,\n         }\n     }\n \n     /// Returns the path suitable for reading from the file system on the local host.\n     /// Avoid embedding this in build artifacts; see `stable_name()` for that.\n     pub fn into_local_path(self) -> PathBuf {\n         match self {\n-            RealFileName::Named(p)\n-            | RealFileName::Devirtualized { local_path: p, virtual_name: _ } => p,\n+            RealFileName::LocalPath(p)\n+            | RealFileName::Remapped { local_path: p, virtual_name: _ } => p,\n         }\n     }\n \n     /// Returns the path suitable for embedding into build artifacts. Note that\n-    /// a virtualized path will not correspond to a valid file system path; see\n+    /// a remapped path will not correspond to a valid file system path; see\n     /// `local_path()` for something that is more likely to return paths into the\n     /// local host file system.\n     pub fn stable_name(&self) -> &Path {\n         match self {\n-            RealFileName::Named(p)\n-            | RealFileName::Devirtualized { local_path: _, virtual_name: p } => &p,\n+            RealFileName::LocalPath(p)\n+            | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,\n         }\n     }\n }\n@@ -214,7 +213,7 @@ impl std::fmt::Display for FileName {\n impl From<PathBuf> for FileName {\n     fn from(p: PathBuf) -> Self {\n         assert!(!p.to_string_lossy().ends_with('>'));\n-        FileName::Real(RealFileName::Named(p))\n+        FileName::Real(RealFileName::LocalPath(p))\n     }\n }\n \n@@ -1124,11 +1123,6 @@ pub struct SourceFile {\n     /// originate from files has names between angle brackets by convention\n     /// (e.g., `<anon>`).\n     pub name: FileName,\n-    /// `true` if the `name` field above has been modified by `--remap-path-prefix`.\n-    pub name_was_remapped: bool,\n-    /// The unmapped path of the file that the source came from.\n-    /// Set to `None` if the `SourceFile` was imported from an external crate.\n-    pub unmapped_path: Option<FileName>,\n     /// The complete source code.\n     pub src: Option<Lrc<String>>,\n     /// The source code's hash.\n@@ -1158,7 +1152,6 @@ impl<S: Encoder> Encodable<S> for SourceFile {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_struct(\"SourceFile\", 8, |s| {\n             s.emit_struct_field(\"name\", 0, |s| self.name.encode(s))?;\n-            s.emit_struct_field(\"name_was_remapped\", 1, |s| self.name_was_remapped.encode(s))?;\n             s.emit_struct_field(\"src_hash\", 2, |s| self.src_hash.encode(s))?;\n             s.emit_struct_field(\"start_pos\", 3, |s| self.start_pos.encode(s))?;\n             s.emit_struct_field(\"end_pos\", 4, |s| self.end_pos.encode(s))?;\n@@ -1233,8 +1226,6 @@ impl<D: Decoder> Decodable<D> for SourceFile {\n     fn decode(d: &mut D) -> Result<SourceFile, D::Error> {\n         d.read_struct(\"SourceFile\", 8, |d| {\n             let name: FileName = d.read_struct_field(\"name\", 0, |d| Decodable::decode(d))?;\n-            let name_was_remapped: bool =\n-                d.read_struct_field(\"name_was_remapped\", 1, |d| Decodable::decode(d))?;\n             let src_hash: SourceFileHash =\n                 d.read_struct_field(\"src_hash\", 2, |d| Decodable::decode(d))?;\n             let start_pos: BytePos =\n@@ -1278,8 +1269,6 @@ impl<D: Decoder> Decodable<D> for SourceFile {\n             let cnum: CrateNum = d.read_struct_field(\"cnum\", 10, |d| Decodable::decode(d))?;\n             Ok(SourceFile {\n                 name,\n-                name_was_remapped,\n-                unmapped_path: None,\n                 start_pos,\n                 end_pos,\n                 src: None,\n@@ -1307,8 +1296,6 @@ impl fmt::Debug for SourceFile {\n impl SourceFile {\n     pub fn new(\n         name: FileName,\n-        name_was_remapped: bool,\n-        unmapped_path: FileName,\n         mut src: String,\n         start_pos: BytePos,\n         hash_kind: SourceFileHashAlgorithm,\n@@ -1330,8 +1317,6 @@ impl SourceFile {\n \n         SourceFile {\n             name,\n-            name_was_remapped,\n-            unmapped_path: Some(unmapped_path),\n             src: Some(Lrc::new(src)),\n             src_hash,\n             external_src: Lock::new(ExternalSource::Unneeded),"}, {"sha": "03be11f828b4b83d120406f1403f3a876a0cac19", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 31, "deletions": 61, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -15,11 +15,11 @@ pub use crate::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{AtomicU32, Lrc, MappedReadGuard, ReadGuard, RwLock};\n-use std::cmp;\n-use std::convert::TryFrom;\n use std::hash::Hash;\n use std::path::{Path, PathBuf};\n use std::sync::atomic::Ordering;\n+use std::{clone::Clone, cmp};\n+use std::{convert::TryFrom, unreachable};\n \n use std::fs;\n use std::io;\n@@ -127,30 +127,16 @@ pub struct StableSourceFileId(u128);\n // StableSourceFileId, perhaps built atop source_file.name_hash.\n impl StableSourceFileId {\n     pub fn new(source_file: &SourceFile) -> StableSourceFileId {\n-        StableSourceFileId::new_from_pieces(\n-            &source_file.name,\n-            source_file.name_was_remapped,\n-            source_file.unmapped_path.as_ref(),\n-        )\n+        StableSourceFileId::new_from_name(&source_file.name)\n     }\n \n-    fn new_from_pieces(\n-        name: &FileName,\n-        name_was_remapped: bool,\n-        unmapped_path: Option<&FileName>,\n-    ) -> StableSourceFileId {\n+    fn new_from_name(name: &FileName) -> StableSourceFileId {\n         let mut hasher = StableHasher::new();\n \n-        if let FileName::Real(real_name) = name {\n-            // rust-lang/rust#70924: Use the stable (virtualized) name when\n-            // available. (We do not want artifacts from transient file system\n-            // paths for libstd to leak into our build artifacts.)\n-            real_name.stable_name().hash(&mut hasher)\n-        } else {\n-            name.hash(&mut hasher);\n-        }\n-        name_was_remapped.hash(&mut hasher);\n-        unmapped_path.hash(&mut hasher);\n+        // If name was remapped, we need to take both the local path\n+        // and stablised path into account, in case two different paths were\n+        // mapped to the same\n+        name.hash(&mut hasher);\n \n         StableSourceFileId(hasher.finish())\n     }\n@@ -283,35 +269,15 @@ impl SourceMap {\n \n     fn try_new_source_file(\n         &self,\n-        mut filename: FileName,\n+        filename: FileName,\n         src: String,\n     ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {\n-        // The path is used to determine the directory for loading submodules and\n-        // include files, so it must be before remapping.\n         // Note that filename may not be a valid path, eg it may be `<anon>` etc,\n         // but this is okay because the directory determined by `path.pop()` will\n         // be empty, so the working directory will be used.\n-        let unmapped_path = filename.clone();\n-\n-        let was_remapped;\n-        if let FileName::Real(real_filename) = &mut filename {\n-            match real_filename {\n-                RealFileName::Named(path_to_be_remapped)\n-                | RealFileName::Devirtualized {\n-                    local_path: path_to_be_remapped,\n-                    virtual_name: _,\n-                } => {\n-                    let mapped = self.path_mapping.map_prefix(path_to_be_remapped.clone());\n-                    was_remapped = mapped.1;\n-                    *path_to_be_remapped = mapped.0;\n-                }\n-            }\n-        } else {\n-            was_remapped = false;\n-        }\n+        let (filename, _) = self.path_mapping.map_filename_prefix(&filename);\n \n-        let file_id =\n-            StableSourceFileId::new_from_pieces(&filename, was_remapped, Some(&unmapped_path));\n+        let file_id = StableSourceFileId::new_from_name(&filename);\n \n         let lrc_sf = match self.source_file_by_stable_id(file_id) {\n             Some(lrc_sf) => lrc_sf,\n@@ -320,8 +286,6 @@ impl SourceMap {\n \n                 let source_file = Lrc::new(SourceFile::new(\n                     filename,\n-                    was_remapped,\n-                    unmapped_path,\n                     src,\n                     Pos::from_usize(start_pos),\n                     self.hash_kind,\n@@ -345,7 +309,6 @@ impl SourceMap {\n     pub fn new_imported_source_file(\n         &self,\n         filename: FileName,\n-        name_was_remapped: bool,\n         src_hash: SourceFileHash,\n         name_hash: u128,\n         source_len: usize,\n@@ -382,8 +345,6 @@ impl SourceMap {\n \n         let source_file = Lrc::new(SourceFile {\n             name: filename,\n-            name_was_remapped,\n-            unmapped_path: None,\n             src: None,\n             src_hash,\n             external_src: Lock::new(ExternalSource::Foreign {\n@@ -474,14 +435,6 @@ impl SourceMap {\n         self.lookup_char_pos(sp.lo()).file.name.clone()\n     }\n \n-    pub fn span_to_unmapped_path(&self, sp: Span) -> FileName {\n-        self.lookup_char_pos(sp.lo())\n-            .file\n-            .unmapped_path\n-            .clone()\n-            .expect(\"`SourceMap::span_to_unmapped_path` called for imported `SourceFile`?\")\n-    }\n-\n     pub fn is_multiline(&self, sp: Span) -> bool {\n         let lo = self.lookup_char_pos(sp.lo());\n         let hi = self.lookup_char_pos(sp.hi());\n@@ -1046,9 +999,26 @@ impl FilePathMapping {\n     fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {\n         match file {\n             FileName::Real(realfile) => {\n-                let path = realfile.local_path();\n-                let (path, mapped) = self.map_prefix(path.to_path_buf());\n-                (FileName::Real(RealFileName::Named(path)), mapped)\n+                // If the file is the Name variant with only local_path, then clearly we want to map that\n+                // to a virtual_name\n+                // If the file is already remapped, then we want to map virtual_name further\n+                // but we leave local_path alone\n+                let path = realfile.stable_name();\n+                let (mapped_path, mapped) = self.map_prefix(path.to_path_buf());\n+                if mapped {\n+                    let mapped_realfile = match realfile {\n+                        RealFileName::LocalPath(local_path)\n+                        | RealFileName::Remapped { local_path, virtual_name: _ } => {\n+                            RealFileName::Remapped {\n+                                local_path: local_path.clone(),\n+                                virtual_name: mapped_path,\n+                            }\n+                        }\n+                    };\n+                    (FileName::Real(mapped_realfile), mapped)\n+                } else {\n+                    unreachable!(\"attempted to remap an already remapped filename\");\n+                }\n             }\n             other => (other.clone(), false),\n         }"}, {"sha": "ee87ef0b5e5e7b68f8440a643e1de4e3cb30864e", "filename": "compiler/rustc_span/src/source_map/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -229,7 +229,6 @@ fn t10() {\n \n     let SourceFile {\n         name,\n-        name_was_remapped,\n         src_hash,\n         start_pos,\n         end_pos,\n@@ -243,7 +242,6 @@ fn t10() {\n \n     let imported_src_file = sm.new_imported_source_file(\n         name,\n-        name_was_remapped,\n         src_hash,\n         name_hash,\n         (end_pos - start_pos).to_usize(),"}, {"sha": "9b945cd42cfb68a63cdc6adf859a8eaefb73eac7", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -883,8 +883,6 @@ impl Tester for Collector {\n             self.compiling_test_count.fetch_add(1, Ordering::SeqCst);\n         }\n \n-        // FIXME(#44940): if doctests ever support path remapping, then this filename\n-        // needs to be the result of `SourceMap::span_to_unmapped_path`.\n         let path = match &filename {\n             FileName::Real(path) => path.local_path().to_path_buf(),\n             _ => PathBuf::from(r\"doctest.rs\"),"}, {"sha": "88e369e1babc216fd5362d5408b9b97c3ff584ad", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6720a370429282e071042af315d712e716d88abf/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6720a370429282e071042af315d712e716d88abf/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6720a370429282e071042af315d712e716d88abf", "patch": "@@ -66,12 +66,7 @@ impl JsonRenderer<'_> {\n                 let hi = span.hi(self.sess());\n                 let lo = span.lo(self.sess());\n                 Some(Span {\n-                    filename: match name {\n-                        rustc_span::RealFileName::Named(path) => path,\n-                        rustc_span::RealFileName::Devirtualized { local_path, virtual_name: _ } => {\n-                            local_path\n-                        }\n-                    },\n+                    filename: name.into_local_path(),\n                     begin: (lo.line, lo.col.to_usize()),\n                     end: (hi.line, hi.col.to_usize()),\n                 })"}]}