{"sha": "5703b2863e1b4b815007b5a3380734634acd1f37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MDNiMjg2M2UxYjRiODE1MDA3YjVhMzM4MDczNDYzNGFjZDFmMzc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-16T15:35:38Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-17T13:13:58Z"}, "message": "polymorphize: \u2203 used param \u2208 predicate \u2192 all used\n\nThis commit modifies polymorphization's handling of predicates so that\nif any generic parameter is used in a predicate then all parameters in\nthat predicate are used.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "ab1435787a1a9a3fbcccf2b95e9eaba88439811e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab1435787a1a9a3fbcccf2b95e9eaba88439811e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5703b2863e1b4b815007b5a3380734634acd1f37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl86gpYACgkQJZLnbIc4\nH9kSjQ/+PEcLdV3X5vEEkZMCAcKUykxQ79/XXJ+LwR05+PQssmb/uZnMlTxON9XK\nNqrvkZ/rf5cfXgJms2o2zFs8Uq5CwfiQHMu6PVA5t7ad4qGuyXyHNKVu8EFY+mom\nB+OYTPXbb7Se6qrFYkE3pNhD+eNraATSl9QHeDvDxYNeL62ttRjou3lLTl4zoeoj\n3F3vHbRcx0YTPvZ/uTn8eEjdq+kyvuZOMCIe0pGjLrf1UiDKDYUETIuv7durwRm8\nAXxHMdxjraxBfa7nRZjTPvEVTGkdAVO1x5oXArH2JzTFxTiwd9tzez+0KbgY7Waa\nt5irlk2xssTP5RdFugAK17Epkc6oj40xA+rnTZ27J5k00QUWujrnmIQyArMdx5uM\nXnSZpn7YapNSprkkGfqc6osVWG3t0SJo/v+cq+7Il7XnPVp6V5Uxp4IEtsr78JRI\nTaUUCunDABH65aNaiYRUDzHBycEy3oNUKmF3Ka5oYI00LoGMDX+ztgCz2QI4Cpj6\nlTDs7rVzBR7pZwqZ+3xaiqcsV0MXTgGLcKXFD/kaqoNNh87qyGTUDXTDCXtS+co8\nxzel48iStLiq2joEL8g6mGPbF2FEo/A5xvTX/RZqFpC2FjWMsjBAdteeowNkdAem\nZdRjJypQ9imQOLj4yrfpdpKEGLnn6ZQ5ujBPXq2LKU9uOpqbYjA=\n=NfGa\n-----END PGP SIGNATURE-----", "payload": "tree ab1435787a1a9a3fbcccf2b95e9eaba88439811e\nparent 97ba0c7171c4d2d9b899a2bd8e40a8974c47b86d\nauthor David Wood <david@davidtw.co> 1597592138 +0100\ncommitter David Wood <david@davidtw.co> 1597670038 +0100\n\npolymorphize: \u2203 used param \u2208 predicate \u2192 all used\n\nThis commit modifies polymorphization's handling of predicates so that\nif any generic parameter is used in a predicate then all parameters in\nthat predicate are used.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5703b2863e1b4b815007b5a3380734634acd1f37", "html_url": "https://github.com/rust-lang/rust/commit/5703b2863e1b4b815007b5a3380734634acd1f37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5703b2863e1b4b815007b5a3380734634acd1f37/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97ba0c7171c4d2d9b899a2bd8e40a8974c47b86d", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ba0c7171c4d2d9b899a2bd8e40a8974c47b86d", "html_url": "https://github.com/rust-lang/rust/commit/97ba0c7171c4d2d9b899a2bd8e40a8974c47b86d"}], "stats": {"total": 104, "additions": 29, "deletions": 75}, "files": [{"sha": "69f3288ee394bf4868108192cf61eda10cd700f2", "filename": "src/librustc_mir/monomorphize/polymorphize.rs", "status": "modified", "additions": 12, "deletions": 75, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5703b2863e1b4b815007b5a3380734634acd1f37/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5703b2863e1b4b815007b5a3380734634acd1f37/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs?ref=5703b2863e1b4b815007b5a3380734634acd1f37", "patch": "@@ -119,16 +119,6 @@ fn mark_used_by_predicates<'tcx>(\n     def_id: DefId,\n     unused_parameters: &mut FiniteBitSet<u32>,\n ) {\n-    let is_ty_used = |unused_parameters: &FiniteBitSet<u32>, ty: Ty<'tcx>| -> bool {\n-        let mut vis = IsUsedGenericParams { unused_parameters };\n-        ty.visit_with(&mut vis)\n-    };\n-\n-    let mark_ty = |unused_parameters: &mut FiniteBitSet<u32>, ty: Ty<'tcx>| {\n-        let mut vis = MarkUsedGenericParams { tcx, def_id, unused_parameters };\n-        ty.visit_with(&mut vis);\n-    };\n-\n     let def_id = tcx.closure_base_def_id(def_id);\n     let predicates = tcx.explicit_predicates_of(def_id);\n     debug!(\"mark_used_by_predicates: predicates_of={:?}\", predicates);\n@@ -144,69 +134,16 @@ fn mark_used_by_predicates<'tcx>(\n         current_unused_parameters = *unused_parameters;\n \n         for (predicate, _) in predicates.predicates {\n-            match predicate.skip_binders() {\n-                ty::PredicateAtom::Trait(predicate, ..) => {\n-                    let trait_ref = predicate.trait_ref;\n-                    debug!(\"mark_used_by_predicates: (trait) trait_ref={:?}\", trait_ref);\n-\n-                    // Consider `T` used if `I` is used in predicates of the form\n-                    // `I: Iterator<Item = T>`\n-                    debug!(\"mark_used_by_predicates: checking self\");\n-                    if is_ty_used(unused_parameters, trait_ref.self_ty()) {\n-                        debug!(\"mark_used_by_predicates: used!\");\n-                        for ty in trait_ref.substs.types() {\n-                            mark_ty(unused_parameters, ty);\n-                        }\n-\n-                        // No need to check for a type being used in the substs if `self_ty` was\n-                        // used.\n-                        continue;\n-                    }\n-\n-                    // Consider `I` used if `T` is used in predicates of the form\n-                    // `I: Iterator<Item = &'a (T, E)>` (see rust-lang/rust#75326)\n-                    debug!(\"mark_used_by_predicates: checking substs\");\n-                    for ty in trait_ref.substs.types() {\n-                        if is_ty_used(unused_parameters, ty) {\n-                            debug!(\"mark_used_by_predicates: used!\");\n-                            mark_ty(unused_parameters, trait_ref.self_ty());\n-                        }\n-                    }\n-                }\n-                ty::PredicateAtom::Projection(proj, ..) => {\n-                    let self_ty = proj.projection_ty.self_ty();\n-                    debug!(\n-                        \"mark_used_by_predicates: (projection) self_ty={:?} proj.ty={:?}\",\n-                        self_ty, proj.ty\n-                    );\n-\n-                    // Consider `T` used if `I` is used in predicates of the form\n-                    // `<I as Iterator>::Item = T`\n-                    debug!(\"mark_used_by_predicates: checking self\");\n-                    if is_ty_used(unused_parameters, self_ty) {\n-                        debug!(\"mark_used_by_predicates: used!\");\n-                        mark_ty(unused_parameters, proj.ty);\n-\n-                        // No need to check for projection type being used if `self_ty` was used.\n-                        continue;\n-                    }\n-\n-                    // Consider `I` used if `T` is used in predicates of the form\n-                    // `<I as Iterator>::Item = &'a (T, E)` (see rust-lang/rust#75326)\n-                    debug!(\"mark_used_by_predicates: checking projection ty\");\n-                    if is_ty_used(unused_parameters, proj.ty) {\n-                        debug!(\"mark_used_by_predicates: used!\");\n-                        mark_ty(unused_parameters, self_ty);\n-                    }\n-                }\n-                ty::PredicateAtom::RegionOutlives(..)\n-                | ty::PredicateAtom::TypeOutlives(..)\n-                | ty::PredicateAtom::WellFormed(..)\n-                | ty::PredicateAtom::ObjectSafe(..)\n-                | ty::PredicateAtom::ClosureKind(..)\n-                | ty::PredicateAtom::Subtype(..)\n-                | ty::PredicateAtom::ConstEvaluatable(..)\n-                | ty::PredicateAtom::ConstEquate(..) => (),\n+            // Consider all generic params in a predicate as used if any other parameter in the\n+            // predicate is used.\n+            let any_param_used = {\n+                let mut vis = HasUsedGenericParams { unused_parameters };\n+                predicate.visit_with(&mut vis)\n+            };\n+\n+            if any_param_used {\n+                let mut vis = MarkUsedGenericParams { tcx, def_id, unused_parameters };\n+                predicate.visit_with(&mut vis);\n             }\n         }\n     }\n@@ -375,11 +312,11 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n /// Visitor used to check if a generic parameter is used.\n-struct IsUsedGenericParams<'a> {\n+struct HasUsedGenericParams<'a> {\n     unused_parameters: &'a FiniteBitSet<u32>,\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for IsUsedGenericParams<'a> {\n+impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> bool {\n         debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {"}, {"sha": "97f1ef2c90ae070a75dff1df10d397e939148d88", "filename": "src/test/ui/polymorphization/predicates.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5703b2863e1b4b815007b5a3380734634acd1f37/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5703b2863e1b4b815007b5a3380734634acd1f37/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs?ref=5703b2863e1b4b815007b5a3380734634acd1f37", "patch": "@@ -60,6 +60,21 @@ where\n     std::mem::size_of::<C>()\n }\n \n+// Finally, check that `F` is considered used because `G` is used when neither are in the self-ty\n+// of the predicate.\n+\n+trait Foobar<F, G> {}\n+\n+impl Foobar<u32, u32> for () {}\n+\n+#[rustc_polymorphize_error]\n+fn foobar<F, G>() -> usize\n+where\n+    (): Foobar<F, G>,\n+{\n+    std::mem::size_of::<G>()\n+}\n+\n fn main() {\n     let x = &[2u32];\n     foo(x.iter());\n@@ -69,4 +84,6 @@ fn main() {\n     let _ = a.next();\n \n     let _ = quux::<u8, u16, u32>();\n+\n+    let _ = foobar::<u32, u32>();\n }"}]}