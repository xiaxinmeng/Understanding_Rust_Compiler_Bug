{"sha": "fc324255215066afd4f4dfff6f39e76e2c80fc4b", "node_id": "C_kwDOAAsO6NoAKGZjMzI0MjU1MjE1MDY2YWZkNGY0ZGZmZjZmMzllNzZlMmM4MGZjNGI", "commit": {"author": {"name": "1nF0rmed", "email": "prkinformed@gmail.com", "date": "2021-10-09T17:00:12Z"}, "committer": {"name": "1nF0rmed", "email": "prkinformed@gmail.com", "date": "2021-10-09T17:00:12Z"}, "message": "Refactor to check for multiple reference patterns", "tree": {"sha": "c5fb493c7fe197f537cf3b0f221c084877a7f5d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5fb493c7fe197f537cf3b0f221c084877a7f5d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc324255215066afd4f4dfff6f39e76e2c80fc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc324255215066afd4f4dfff6f39e76e2c80fc4b", "html_url": "https://github.com/rust-lang/rust/commit/fc324255215066afd4f4dfff6f39e76e2c80fc4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc324255215066afd4f4dfff6f39e76e2c80fc4b/comments", "author": {"login": "1nF0rmed", "id": 21278205, "node_id": "MDQ6VXNlcjIxMjc4MjA1", "avatar_url": "https://avatars.githubusercontent.com/u/21278205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1nF0rmed", "html_url": "https://github.com/1nF0rmed", "followers_url": "https://api.github.com/users/1nF0rmed/followers", "following_url": "https://api.github.com/users/1nF0rmed/following{/other_user}", "gists_url": "https://api.github.com/users/1nF0rmed/gists{/gist_id}", "starred_url": "https://api.github.com/users/1nF0rmed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1nF0rmed/subscriptions", "organizations_url": "https://api.github.com/users/1nF0rmed/orgs", "repos_url": "https://api.github.com/users/1nF0rmed/repos", "events_url": "https://api.github.com/users/1nF0rmed/events{/privacy}", "received_events_url": "https://api.github.com/users/1nF0rmed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1nF0rmed", "id": 21278205, "node_id": "MDQ6VXNlcjIxMjc4MjA1", "avatar_url": "https://avatars.githubusercontent.com/u/21278205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1nF0rmed", "html_url": "https://github.com/1nF0rmed", "followers_url": "https://api.github.com/users/1nF0rmed/followers", "following_url": "https://api.github.com/users/1nF0rmed/following{/other_user}", "gists_url": "https://api.github.com/users/1nF0rmed/gists{/gist_id}", "starred_url": "https://api.github.com/users/1nF0rmed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1nF0rmed/subscriptions", "organizations_url": "https://api.github.com/users/1nF0rmed/orgs", "repos_url": "https://api.github.com/users/1nF0rmed/repos", "events_url": "https://api.github.com/users/1nF0rmed/events{/privacy}", "received_events_url": "https://api.github.com/users/1nF0rmed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22144c02c2d790c2e3b74dc0363000511284f6d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/22144c02c2d790c2e3b74dc0363000511284f6d8", "html_url": "https://github.com/rust-lang/rust/commit/22144c02c2d790c2e3b74dc0363000511284f6d8"}], "stats": {"total": 103, "additions": 7, "deletions": 96}, "files": [{"sha": "b643fba5d328865baded5f1192cca02fa6ae979a", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc324255215066afd4f4dfff6f39e76e2c80fc4b/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc324255215066afd4f4dfff6f39e76e2c80fc4b/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=fc324255215066afd4f4dfff6f39e76e2c80fc4b", "patch": "@@ -1187,7 +1187,7 @@ where\n     'b: 'a,\n     I: Clone + Iterator<Item = &'a Pat<'b>>,\n {\n-    if !has_only_ref_pats(pats.clone()) {\n+    if !has_multiple_ref_pats(pats.clone()) {\n         return;\n     }\n \n@@ -1693,26 +1693,26 @@ fn is_ref_some_arm(cx: &LateContext<'_>, arm: &Arm<'_>) -> Option<BindingAnnotat\n     None\n }\n \n-fn has_only_ref_pats<'a, 'b, I>(pats: I) -> bool\n+fn has_multiple_ref_pats<'a, 'b, I>(pats: I) -> bool\n where\n     'b: 'a,\n     I: Iterator<Item = &'a Pat<'b>>,\n {\n-    let mut at_least_one_is_true = false;\n+    let mut ref_count = 0;\n     for opt in pats.map(|pat| match pat.kind {\n         PatKind::Ref(..) => Some(true), // &-patterns\n         PatKind::Wild => Some(false),   // an \"anything\" wildcard is also fine\n         _ => None,                      // any other pattern is not fine\n     }) {\n         if let Some(inner) = opt {\n             if inner {\n-                at_least_one_is_true = true;\n+                ref_count += 1;\n             }\n         } else {\n             return false;\n         }\n     }\n-    at_least_one_is_true\n+    ref_count > 1\n }\n \n pub fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &SpannedRange<T>)>"}, {"sha": "d7cedf9f9f1596dfabb659099e2922281b410f93", "filename": "tests/ui/match_expr_like_matches_macro.stderr", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fc324255215066afd4f4dfff6f39e76e2c80fc4b/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc324255215066afd4f4dfff6f39e76e2c80fc4b/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr?ref=fc324255215066afd4f4dfff6f39e76e2c80fc4b", "patch": "@@ -110,23 +110,6 @@ LL | |             _ => false,\n LL | |         };\n    | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n \n-error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/match_expr_like_matches_macro.rs:166:20\n-   |\n-LL |           let _res = match &val {\n-   |  ____________________^\n-LL | |             &Some(ref _a) => true,\n-LL | |             _ => false,\n-LL | |         };\n-   | |_________^\n-   |\n-   = note: `-D clippy::match-ref-pats` implied by `-D warnings`\n-help: try\n-   |\n-LL ~         let _res = match val {\n-LL ~             Some(ref _a) => true,\n-   |\n-\n error: match expression looks like `matches!` macro\n   --> $DIR/match_expr_like_matches_macro.rs:178:20\n    |\n@@ -137,21 +120,5 @@ LL | |             _ => false,\n LL | |         };\n    | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n \n-error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/match_expr_like_matches_macro.rs:178:20\n-   |\n-LL |           let _res = match &val {\n-   |  ____________________^\n-LL | |             &Some(ref _a) => true,\n-LL | |             _ => false,\n-LL | |         };\n-   | |_________^\n-   |\n-help: try\n-   |\n-LL ~         let _res = match val {\n-LL ~             Some(ref _a) => true,\n-   |\n-\n-error: aborting due to 14 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "e4e13c32d74f20206518cc5f91340f7ab08ba734", "filename": "tests/ui/match_ref_pats.stderr", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/fc324255215066afd4f4dfff6f39e76e2c80fc4b/tests%2Fui%2Fmatch_ref_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc324255215066afd4f4dfff6f39e76e2c80fc4b/tests%2Fui%2Fmatch_ref_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.stderr?ref=fc324255215066afd4f4dfff6f39e76e2c80fc4b", "patch": "@@ -15,21 +15,6 @@ LL ~             Some(v) => println!(\"{:?}\", v),\n LL ~             None => println!(\"none\"),\n    |\n \n-error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:18:5\n-   |\n-LL | /     match tup {\n-LL | |         &(v, 1) => println!(\"{}\", v),\n-LL | |         _ => println!(\"none\"),\n-LL | |     }\n-   | |_____^\n-   |\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL ~     match *tup {\n-LL ~         (v, 1) => println!(\"{}\", v),\n-   |\n-\n error: you don't need to add `&` to both the expression and the patterns\n   --> $DIR/match_ref_pats.rs:24:5\n    |\n@@ -54,52 +39,11 @@ LL |     if let &None = a {\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n-error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:36:5\n-   |\n-LL | /     if let &None = a {\n-LL | |         println!(\"none\");\n-LL | |     }\n-   | |_____^\n-   |\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL |     if let None = *a {\n-   |            ~~~~   ~~\n-\n error: redundant pattern matching, consider using `is_none()`\n   --> $DIR/match_ref_pats.rs:41:12\n    |\n LL |     if let &None = &b {\n    |     -------^^^^^----- help: try this: `if b.is_none()`\n \n-error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/match_ref_pats.rs:41:5\n-   |\n-LL | /     if let &None = &b {\n-LL | |         println!(\"none\");\n-LL | |     }\n-   | |_____^\n-   |\n-help: try\n-   |\n-LL |     if let None = b {\n-   |            ~~~~   ~\n-\n-error: you don't need to add `&` to all patterns\n-  --> $DIR/match_ref_pats.rs:68:9\n-   |\n-LL | /         match foo_variant!(0) {\n-LL | |             &Foo::A => println!(\"A\"),\n-LL | |             _ => println!(\"Wild\"),\n-LL | |         }\n-   | |_________^\n-   |\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL ~         match *foo_variant!(0) {\n-LL ~             Foo::A => println!(\"A\"),\n-   |\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n "}]}