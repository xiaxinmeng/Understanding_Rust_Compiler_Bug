{"sha": "a1b305c8e526700e3e16e51d576691ac4ebdc335", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYjMwNWM4ZTUyNjcwMGUzZTE2ZTUxZDU3NjY5MWFjNGViZGMzMzU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-13T04:46:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-13T06:38:02Z"}, "message": "Remove or annotate FIXMEs in core::str\n\nTrimmed exports in core::str::unsafe. Annotated other FIXMEs.\n\nAlso moved the test for str::unsafe::from_buf_len inside str_unsafe\nsince it's no longer exported. If it's not good to do that, let me\nknow.", "tree": {"sha": "b8794fefd06e44326753f79007c3a756123f8d8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8794fefd06e44326753f79007c3a756123f8d8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1b305c8e526700e3e16e51d576691ac4ebdc335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b305c8e526700e3e16e51d576691ac4ebdc335", "html_url": "https://github.com/rust-lang/rust/commit/a1b305c8e526700e3e16e51d576691ac4ebdc335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1b305c8e526700e3e16e51d576691ac4ebdc335/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0063788bd3de6eeccdf575c3f6cc95d7a5d2c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0063788bd3de6eeccdf575c3f6cc95d7a5d2c8", "html_url": "https://github.com/rust-lang/rust/commit/ea0063788bd3de6eeccdf575c3f6cc95d7a5d2c8"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "5c4d46a89aa652dc7612203253464012e240af2f", "filename": "src/libcore/str.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a1b305c8e526700e3e16e51d576691ac4ebdc335/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b305c8e526700e3e16e51d576691ac4ebdc335/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=a1b305c8e526700e3e16e51d576691ac4ebdc335", "patch": "@@ -445,7 +445,7 @@ fn split_inner(s: str, sepfn: fn(cc: char) -> bool, count: uint,\n     result\n }\n \n-// FIXME use Boyer-Moore\n+// See Issue #1932 for why this is a naive search\n fn iter_matches(s: str, sep: str, f: fn(uint, uint)) {\n     let sep_len = len(sep), l = len(s);\n     assert sep_len > 0u;\n@@ -581,7 +581,7 @@ pure fn le(&&a: str, &&b: str) -> bool { a <= b }\n #[doc = \"String hash function\"]\n fn hash(&&s: str) -> uint {\n     // djb hash.\n-    // FIXME: replace with murmur.\n+    // FIXME: replace with murmur. (see #859 and #1616)\n     let mut u: uint = 5381u;\n     for each(s) {|c| u *= 33u; u += c as uint; }\n     ret u;\n@@ -1072,7 +1072,7 @@ or equal to `len(s)`.\n \"]\n fn find_str_between(haystack: str, needle: str, start: uint, end:uint)\n   -> option<uint> {\n-    // FIXME: Boyer-Moore should be significantly faster\n+    // See Issue #1932 for why this is a naive search\n     assert end <= len(haystack);\n     let needle_len = len(needle);\n     if needle_len == 0u { ret some(start); }\n@@ -1600,16 +1600,11 @@ fn capacity(&&s: str) -> uint unsafe {\n #[doc = \"Unsafe operations\"]\n mod unsafe {\n    export\n-      // FIXME: stop exporting several of these\n       from_buf,\n-      from_buf_len,\n       from_c_str,\n-      from_c_str_len,\n       from_bytes,\n-      from_byte,\n       slice_bytes,\n       push_byte,\n-      push_bytes,\n       pop_byte,\n       shift_byte,\n       set_len;\n@@ -1740,6 +1735,15 @@ mod unsafe {\n         let null = ptr::mut_offset(ptr::mut_addr_of((*repr).data), new_len);\n         *null = 0u8;\n     }\n+\n+    #[test]\n+    fn test_from_buf_len() unsafe {\n+        let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n+        let b = vec::unsafe::to_ptr(a);\n+        let c = from_buf_len(b, 3u);\n+        assert (c == \"AAA\");\n+    }\n+\n }\n \n #[doc = \"Extension methods for strings\"]\n@@ -2439,14 +2443,6 @@ mod tests {\n         assert (c == \"AAAAAAA\");\n     }\n \n-    #[test]\n-    fn test_from_buf_len() unsafe {\n-        let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n-        let b = vec::unsafe::to_ptr(a);\n-        let c = unsafe::from_buf_len(b, 3u);\n-        assert (c == \"AAA\");\n-    }\n-\n     #[test]\n     #[ignore(cfg(target_os = \"win32\"))]\n     #[should_fail]"}]}