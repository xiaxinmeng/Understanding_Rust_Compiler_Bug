{"sha": "8282a3a426690b8dddf7b275621090402b254444", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyODJhM2E0MjY2OTBiOGRkZGY3YjI3NTYyMTA5MDQwMmIyNTQ0NDQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-15T20:02:08Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-15T20:05:37Z"}, "message": "Fix problem in PANIC_PARAMS with inner `format!`", "tree": {"sha": "86c86ce6c74301a7539078367b624da10f40e3f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86c86ce6c74301a7539078367b624da10f40e3f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8282a3a426690b8dddf7b275621090402b254444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8282a3a426690b8dddf7b275621090402b254444", "html_url": "https://github.com/rust-lang/rust/commit/8282a3a426690b8dddf7b275621090402b254444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8282a3a426690b8dddf7b275621090402b254444/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "251c3eefd15bb35cad053e9526768ca949f6efea", "url": "https://api.github.com/repos/rust-lang/rust/commits/251c3eefd15bb35cad053e9526768ca949f6efea", "html_url": "https://github.com/rust-lang/rust/commit/251c3eefd15bb35cad053e9526768ca949f6efea"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "8b9bf9f1f1976ea0f46674e7f50ba3d764035b0e", "filename": "src/panic.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8282a3a426690b8dddf7b275621090402b254444/src%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8282a3a426690b8dddf7b275621090402b254444/src%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpanic.rs?ref=8282a3a426690b8dddf7b275621090402b254444", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use syntax::ast::LitKind;\n-use utils::{span_lint, in_external_macro, match_path, BEGIN_UNWIND};\n+use utils::{span_lint, is_direct_expn_of, match_path, BEGIN_UNWIND};\n \n /// **What it does:** This lint checks for missing parameters in `panic!`.\n ///\n@@ -28,24 +28,20 @@ impl LintPass for PanicPass {\n impl LateLintPass for PanicPass {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if_let_chain! {[\n-            in_external_macro(cx, expr.span),\n             let ExprBlock(ref block) = expr.node,\n             let Some(ref ex) = block.expr,\n             let ExprCall(ref fun, ref params) = ex.node,\n             params.len() == 2,\n             let ExprPath(None, ref path) = fun.node,\n             match_path(path, &BEGIN_UNWIND),\n             let ExprLit(ref lit) = params[0].node,\n+            is_direct_expn_of(cx, params[0].span, \"panic\").is_some(),\n             let LitKind::Str(ref string, _) = lit.node,\n             let Some(par) = string.find('{'),\n-            string[par..].contains('}'),\n-            let Some(sp) = cx.sess().codemap()\n-                             .with_expn_info(expr.span.expn_id,\n-                                             |info| info.map(|i| i.call_site))\n+            string[par..].contains('}')\n         ], {\n-\n-            span_lint(cx, PANIC_PARAMS, sp,\n-                      \"You probably are missing some parameter in your `panic!` call\");\n+            span_lint(cx, PANIC_PARAMS, params[0].span,\n+                      \"you probably are missing some parameter in your format string\");\n         }}\n     }\n }"}, {"sha": "3fb52318b6f8ba1ff3b53ad68b092f0e11e54f1e", "filename": "src/utils/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8282a3a426690b8dddf7b275621090402b254444/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8282a3a426690b8dddf7b275621090402b254444/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=8282a3a426690b8dddf7b275621090402b254444", "patch": "@@ -604,6 +604,7 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n }\n \n /// Return the pre-expansion span if is this comes from an expansion of the macro `name`.\n+/// See also `is_direct_expn_of`.\n pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span> {\n     loop {\n         let span_name_span = cx.tcx\n@@ -619,6 +620,25 @@ pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span>\n     }\n }\n \n+/// Return the pre-expansion span if is this directly comes from an expansion of the macro `name`.\n+/// The difference with `is_expn_of` is that in\n+/// ```rust,ignore\n+/// foo!(bar!(42));\n+/// ```\n+/// `42` is considered expanded from `foo!` and `bar!` by `is_expn_of` but only `bar!` by\n+/// `is_direct_expn_of`.\n+pub fn is_direct_expn_of(cx: &LateContext, span: Span, name: &str) -> Option<Span> {\n+    let span_name_span = cx.tcx\n+                           .sess\n+                           .codemap()\n+                           .with_expn_info(span.expn_id, |expn| expn.map(|ei| (ei.callee.name(), ei.call_site)));\n+\n+    match span_name_span {\n+        Some((mac_name, new_span)) if mac_name.as_str() == name => Some(new_span),\n+        _ => None,\n+    }\n+}\n+\n /// Returns index of character after first CamelCase component of `s`\n pub fn camel_case_until(s: &str) -> usize {\n     let mut iter = s.char_indices();"}, {"sha": "7e535d69b698ad504120b9c13468d93f28bedc34", "filename": "tests/compile-fail/panic.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8282a3a426690b8dddf7b275621090402b254444/tests%2Fcompile-fail%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8282a3a426690b8dddf7b275621090402b254444/tests%2Fcompile-fail%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic.rs?ref=8282a3a426690b8dddf7b275621090402b254444", "patch": "@@ -1,26 +1,32 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#[deny(panic_params)]\n+#![deny(panic_params)]\n \n fn missing() {\n     if true {\n-        panic!(\"{}\"); //~ERROR: You probably are missing some parameter\n+        panic!(\"{}\"); //~ERROR: you probably are missing some parameter\n+    } else if false {\n+        panic!(\"{:?}\"); //~ERROR: you probably are missing some parameter\n     } else {\n-        panic!(\"{:?}\"); //~ERROR: You probably are missing some parameter\n+        assert!(true, \"here be missing values: {}\"); //~ERROR you probably are missing some parameter\n     }\n }\n \n fn ok_single() {\n     panic!(\"foo bar\");\n }\n \n+fn ok_inner() {\n+    // Test for #768\n+    assert!(\"foo bar\".contains(&format!(\"foo {}\", \"bar\")));\n+}\n+\n fn ok_multiple() {\n     panic!(\"{}\", \"This is {ok}\");\n }\n \n fn ok_bracket() {\n-    // the match is just here because of #759, it serves no other purpose for the lint\n     match 42 {\n         1337 => panic!(\"{so is this\"),\n         666 => panic!(\"so is this}\"),\n@@ -33,4 +39,5 @@ fn main() {\n     ok_single();\n     ok_multiple();\n     ok_bracket();\n+    ok_inner();\n }"}]}