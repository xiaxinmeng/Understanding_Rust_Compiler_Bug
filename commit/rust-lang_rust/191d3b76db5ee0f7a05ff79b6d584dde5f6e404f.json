{"sha": "191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "node_id": "C_kwDOAAsO6NoAKDE5MWQzYjc2ZGI1ZWUwZjdhMDVmZjc5YjZkNTg0ZGRlNWY2ZTQwNGY", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-17T13:31:04Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-17T13:31:04Z"}, "message": "bless tests again", "tree": {"sha": "24da6a5e6ae2b45b66f34e9ee1ec2023faaffdf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24da6a5e6ae2b45b66f34e9ee1ec2023faaffdf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "html_url": "https://github.com/rust-lang/rust/commit/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ead742e18787b669ed33b82530d77b56f5928f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ead742e18787b669ed33b82530d77b56f5928f5", "html_url": "https://github.com/rust-lang/rust/commit/5ead742e18787b669ed33b82530d77b56f5928f5"}], "stats": {"total": 168, "additions": 64, "deletions": 104}, "files": [{"sha": "655d721712ec9302181e65f48774ca5d6e74297d", "filename": "src/test/ui/const-generics/issue-93647.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -1,6 +1,6 @@\n struct X<const N: usize = {\n     (||1usize)()\n-    //~^ ERROR cannot call\n+    //~^ ERROR the trait bound\n }>;\n \n fn main() {}"}, {"sha": "fc53375ca43816e657cb2961475a3eef292f8d88", "filename": "src/test/ui/const-generics/issue-93647.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.stderr?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -1,12 +1,17 @@\n-error[E0015]: cannot call non-const closure in constants\n+error[E0277]: the trait bound `[closure@$DIR/issue-93647.rs:2:6: 2:8]: Fn<()>` is not satisfied\n   --> $DIR/issue-93647.rs:2:5\n    |\n LL |     (||1usize)()\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-93647.rs:2:6: 2:8]`\n+   |\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-93647.rs:2:6: 2:8]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-93647.rs:2:6: 2:8]`, but that implementation is not `const`\n+  --> $DIR/issue-93647.rs:2:5\n    |\n-   = note: closures need an RFC before allowed to be called in constants\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+LL |     (||1usize)()\n+   |     ^^^^^^^^^^^^\n+   = note: wrap the `[closure@$DIR/issue-93647.rs:2:6: 2:8]` in a closure with no arguments: `|| { /* code */ }`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9ba8105d1416063ec1a795860e8ddd231341f24e", "filename": "src/test/ui/consts/issue-28113.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.rs?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -2,7 +2,7 @@\n \n const X: u8 =\n     || -> u8 { 5 }()\n-    //~^ ERROR cannot call non-const closure\n+    //~^ ERROR the trait bound\n ;\n \n fn main() {}"}, {"sha": "45cacab10188096e06d59f9e1ea32d89042bc06e", "filename": "src/test/ui/consts/issue-28113.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-28113.stderr?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -1,12 +1,17 @@\n-error[E0015]: cannot call non-const closure in constants\n+error[E0277]: the trait bound `[closure@$DIR/issue-28113.rs:4:5: 4:13]: Fn<()>` is not satisfied\n   --> $DIR/issue-28113.rs:4:5\n    |\n LL |     || -> u8 { 5 }()\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-28113.rs:4:5: 4:13]`\n+   |\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-28113.rs:4:5: 4:13]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-28113.rs:4:5: 4:13]`, but that implementation is not `const`\n+  --> $DIR/issue-28113.rs:4:5\n    |\n-   = note: closures need an RFC before allowed to be called in constants\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+LL |     || -> u8 { 5 }()\n+   |     ^^^^^^^^^^^^^^^^\n+   = note: wrap the `[closure@$DIR/issue-28113.rs:4:5: 4:13]` in a closure with no arguments: `|| { /* code */ }`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f5bb438a26e9ffe4ced8d4a290f2dca3172a3221", "filename": "src/test/ui/consts/issue-56164.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -1,11 +1,8 @@\n const fn foo() { (||{})() }\n-//~^ ERROR cannot call non-const closure\n-//~| ERROR erroneous constant used [const_err]\n-//~| WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+//~^ ERROR the trait bound\n \n const fn bad(input: fn()) {\n     input()\n-    //~^ ERROR function pointer\n }\n \n fn main() {"}, {"sha": "5433a711d97fe12e625532592443195d9aafb307", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -1,39 +1,17 @@\n-error[E0015]: cannot call non-const closure in constant functions\n+error[E0277]: the trait bound `[closure@$DIR/issue-56164.rs:1:19: 1:21]: Fn<()>` is not satisfied\n   --> $DIR/issue-56164.rs:1:18\n    |\n LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^^^\n-   |\n-   = note: closures need an RFC before allowed to be called in constant functions\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-\n-error: function pointer calls are not allowed in constant functions\n-  --> $DIR/issue-56164.rs:7:5\n+   |                  ^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-56164.rs:1:19: 1:21]`\n    |\n-LL |     input()\n-   |     ^^^^^^^\n-\n-error: erroneous constant used\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-56164.rs:1:19: 1:21]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-56164.rs:1:19: 1:21]`, but that implementation is not `const`\n   --> $DIR/issue-56164.rs:1:18\n    |\n LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^ referenced constant has errors\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to 3 previous errors\n+   |                  ^^^^^^^^\n+   = note: wrap the `[closure@$DIR/issue-56164.rs:1:19: 1:21]` in a closure with no arguments: `|| { /* code */ }`\n \n-For more information about this error, try `rustc --explain E0015`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: erroneous constant used\n-  --> $DIR/issue-56164.rs:1:18\n-   |\n-LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^ referenced constant has errors\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "68d4c191716bb0fe5011d98942e923469706059a", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.rs?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -3,7 +3,7 @@\n // in the length part of an array.\n \n struct Bug {\n-    a: [(); (|| { 0 })()] //~ ERROR cannot call non-const closure\n+    a: [(); (|| { 0 })()] //~ ERROR the trait bound\n }\n \n fn main() {}"}, {"sha": "d7fe59dc8fe18d54aad65d2a8e4afef61150d0e7", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -1,12 +1,17 @@\n-error[E0015]: cannot call non-const closure in constants\n+error[E0277]: the trait bound `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]: Fn<()>` is not satisfied\n   --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n    |\n LL |     a: [(); (|| { 0 })()]\n-   |             ^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]`\n+   |\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]`, but that implementation is not `const`\n+  --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n    |\n-   = note: closures need an RFC before allowed to be called in constants\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+LL |     a: [(); (|| { 0 })()]\n+   |             ^^^^^^^^^^^^\n+   = note: wrap the `[closure@$DIR/issue-68542-closure-in-array-len.rs:6:14: 6:16]` in a closure with no arguments: `|| { /* code */ }`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b9e7e1405f9499d5f853455326e28316e9f009af", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -4,7 +4,7 @@\n // gate was not enabled in libcore.\n \n #![stable(feature = \"core\", since = \"1.6.0\")]\n-#![feature(staged_api)]\n+#![feature(staged_api, const_trait_impl)]\n \n enum Opt<T> {\n     Some(T),\n@@ -14,12 +14,12 @@ enum Opt<T> {\n impl<T> Opt<T> {\n     #[rustc_const_unstable(feature = \"foo\", issue = \"none\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n+    const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n     //~^ ERROR destructors cannot be evaluated at compile-time\n     //~| ERROR destructors cannot be evaluated at compile-time\n         match self {\n             Opt::Some(t) => t,\n-            Opt::None => f(), //~ ERROR E0015\n+            Opt::None => f(),\n         }\n     }\n }"}, {"sha": "fee74bd0a6cfe6cfed2895bea79c1f7d92deab9c", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -1,34 +1,21 @@\n-error[E0015]: cannot call non-const closure in constant functions\n-  --> $DIR/unstable-const-fn-in-libcore.rs:22:26\n-   |\n-LL |             Opt::None => f(),\n-   |                          ^^^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-help: consider further restricting this bound\n-   |\n-LL |     const fn unwrap_or_else<F: FnOnce() -> T + ~const std::ops::FnOnce<()>>(self, f: F) -> T {\n-   |                                              +++++++++++++++++++++++++++++\n-\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:17:53\n+  --> $DIR/unstable-const-fn-in-libcore.rs:17:60\n    |\n-LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n-   |                                                     ^ constant functions cannot evaluate destructors\n+LL |     const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n+   |                                                            ^ constant functions cannot evaluate destructors\n ...\n LL |     }\n    |     - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:17:47\n+  --> $DIR/unstable-const-fn-in-libcore.rs:17:54\n    |\n-LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n-   |                                               ^^^^ constant functions cannot evaluate destructors\n+LL |     const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n+   |                                                      ^^^^ constant functions cannot evaluate destructors\n ...\n LL |     }\n    |     - value is dropped here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0015, E0493.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0493`."}, {"sha": "e1858b63989326593855ab1a44d9062af4ce7681", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `dyn Iterator<Item = &'a mut u8>` cann\n   --> $DIR/issue-20605.rs:2:17\n    |\n LL |     for item in *things { *item = 0 }\n-   |                 ^^^^^^^ the trait `~const IntoIterator` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n+   |                 ^^^^^^^ the trait `IntoIterator` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n    |\n    = note: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n    = note: required for `dyn Iterator<Item = &'a mut u8>` to implement `IntoIterator`"}, {"sha": "1d595ca5649b22c4300446842bed99c478ab8160", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -7,7 +7,9 @@ LL |     Err(5)?;\n    |           ^ the trait `From<{integer}>` is not implemented for `()`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`\n+   = help: the following other types implement trait `FromResidual<R>`:\n+             <Result<T, F> as FromResidual<Result<Infallible, E>>>\n+             <Result<T, F> as FromResidual<Yeet<E>>>\n    = note: required for `Result<i32, ()>` to implement `FromResidual<Result<Infallible, {integer}>>`\n \n error: aborting due to previous error"}, {"sha": "84ecd749b0dda8af53422429fa48f93c4af8032f", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `[i32]` cannot be known at compilation\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n-   |            ^^^^^^ the trait `~const IntoIterator` is not implemented for `[i32]`\n+   |            ^^^^^^ the trait `IntoIterator` is not implemented for `[i32]`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required for `[i32]` to implement `IntoIterator`\n@@ -17,7 +17,7 @@ error[E0277]: `[i32]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n-   |            ^^^^^^ the trait `~const IntoIterator` is not implemented for `[i32]`\n+   |            ^^^^^^ the trait `IntoIterator` is not implemented for `[i32]`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required for `[i32]` to implement `IntoIterator`\n@@ -32,7 +32,7 @@ error[E0277]: the size for values of type `[K]` cannot be known at compilation t\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n-   |             ^^^^^^^ the trait `~const IntoIterator` is not implemented for `[K]`\n+   |             ^^^^^^^ the trait `IntoIterator` is not implemented for `[K]`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required for `[K]` to implement `IntoIterator`\n@@ -47,7 +47,7 @@ error[E0277]: `[K]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n-   |             ^^^^^^^ the trait `~const IntoIterator` is not implemented for `[K]`\n+   |             ^^^^^^^ the trait `IntoIterator` is not implemented for `[K]`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required for `[K]` to implement `IntoIterator`"}, {"sha": "ec86213f8629df02bc4efa51d6d4bbdb0469eacc", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.rs?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -4,7 +4,6 @@ fn main() {\n     <i32 as Add<u32>>::add(1, 2);\n     //~^ ERROR cannot add `u32` to `i32`\n     //~| ERROR cannot add `u32` to `i32`\n-    //~| ERROR cannot add `u32` to `i32`\n     <i32 as Add<i32>>::add(1u32, 2);\n     //~^ ERROR mismatched types\n     <i32 as Add<i32>>::add(1, 2u32);"}, {"sha": "eaab6ff3d9a0419227d6ad01307049dbebcc021a", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/191d3b76db5ee0f7a05ff79b6d584dde5f6e404f/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=191d3b76db5ee0f7a05ff79b6d584dde5f6e404f", "patch": "@@ -18,26 +18,8 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n              <&'a isize as Add<isize>>\n            and 48 others\n \n-error[E0277]: cannot add `u32` to `i32`\n-  --> $DIR/ufcs-qpath-self-mismatch.rs:4:5\n-   |\n-LL |     <i32 as Add<u32>>::add(1, 2);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n-   |\n-   = help: the trait `Add<u32>` is not implemented for `i32`\n-   = help: the following other types implement trait `Add<Rhs>`:\n-             <&'a f32 as Add<f32>>\n-             <&'a f64 as Add<f64>>\n-             <&'a i128 as Add<i128>>\n-             <&'a i16 as Add<i16>>\n-             <&'a i32 as Add<i32>>\n-             <&'a i64 as Add<i64>>\n-             <&'a i8 as Add<i8>>\n-             <&'a isize as Add<isize>>\n-           and 48 others\n-\n error[E0308]: mismatched types\n-  --> $DIR/ufcs-qpath-self-mismatch.rs:8:28\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:7:28\n    |\n LL |     <i32 as Add<i32>>::add(1u32, 2);\n    |     ---------------------- ^^^^ expected `i32`, found `u32`\n@@ -55,7 +37,7 @@ LL |     <i32 as Add<i32>>::add(1i32, 2);\n    |                             ~~~\n \n error[E0308]: mismatched types\n-  --> $DIR/ufcs-qpath-self-mismatch.rs:10:31\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:9:31\n    |\n LL |     <i32 as Add<i32>>::add(1, 2u32);\n    |     ----------------------    ^^^^ expected `i32`, found `u32`\n@@ -90,7 +72,7 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n              <&'a isize as Add<isize>>\n            and 48 others\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}]}