{"sha": "16b4dc0489fca20d328c8f6effb8d7a9d1ef944d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YjRkYzA0ODlmY2EyMGQzMjhjOGY2ZWZmYjhkN2E5ZDFlZjk0NGQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-01T01:14:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-01T01:14:16Z"}, "message": "Rollup merge of #72834 - JOE1994:correct_confusing_term, r=sfackler\n\nRephrase term 'non-pointer type'\n\nHello :cat2: ,\n\nIf the reader assumes that 'pointer type's include 'smart pointer's,\nthe term 'non-pointer type' could mislead the reader to assume that\nx should not be a smart pointer type. I tried to rephrase the term\n'non-pointer type' to remove ambiguity in the doc comments.\n\ncloses #72335\n\nThank you for reviewing this PR! :superhero_woman:", "tree": {"sha": "e0134fe42a0e4660f6fb363a5af4e8c482a499be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0134fe42a0e4660f6fb363a5af4e8c482a499be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16b4dc0489fca20d328c8f6effb8d7a9d1ef944d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe1FZoCRBK7hj4Ov3rIwAAdHIIABWWYU+RzC+Fy7PqLCji8cbf\nL/07a5jkd0iKpVevhUaBIgFOG/ujmC/yBvMf2RjAIQyna4WONlY1r0xiWE4JUUId\n0UvpqmasFWP1ieiqW66NFc/59v5FW0sGro4HoeaAgEMkYzRE4FpnP9Ca/xD4d1Hm\nuoFd+xQuuGC9u9q9+qh6AOmjF9Cm/v2dKIwh5GZAjNmRbr2dVe49dstO0nMwkPR6\nu0V7Vu98w19pIEz9EqKlshZUwlnnU5mhXHAJM96U0xUiCaaIjtaa2z5y1CXWJomO\n5zgoiRbOIiL8ScDWMzAs+Uw12Fwu1QN7iuq7Ltp75gN+jr+P9reQav1Di3FbM24=\n=KWAD\n-----END PGP SIGNATURE-----\n", "payload": "tree e0134fe42a0e4660f6fb363a5af4e8c482a499be\nparent b6a5fea2ceee9a664e0dd808f1b5d3365311d0cc\nparent 3048a41a5a042c2633a4d87ea38e04a1407f5bd3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590974056 +0200\ncommitter GitHub <noreply@github.com> 1590974056 +0200\n\nRollup merge of #72834 - JOE1994:correct_confusing_term, r=sfackler\n\nRephrase term 'non-pointer type'\n\nHello :cat2: ,\n\nIf the reader assumes that 'pointer type's include 'smart pointer's,\nthe term 'non-pointer type' could mislead the reader to assume that\nx should not be a smart pointer type. I tried to rephrase the term\n'non-pointer type' to remove ambiguity in the doc comments.\n\ncloses #72335\n\nThank you for reviewing this PR! :superhero_woman:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16b4dc0489fca20d328c8f6effb8d7a9d1ef944d", "html_url": "https://github.com/rust-lang/rust/commit/16b4dc0489fca20d328c8f6effb8d7a9d1ef944d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16b4dc0489fca20d328c8f6effb8d7a9d1ef944d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6a5fea2ceee9a664e0dd808f1b5d3365311d0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a5fea2ceee9a664e0dd808f1b5d3365311d0cc", "html_url": "https://github.com/rust-lang/rust/commit/b6a5fea2ceee9a664e0dd808f1b5d3365311d0cc"}, {"sha": "3048a41a5a042c2633a4d87ea38e04a1407f5bd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3048a41a5a042c2633a4d87ea38e04a1407f5bd3", "html_url": "https://github.com/rust-lang/rust/commit/3048a41a5a042c2633a4d87ea38e04a1407f5bd3"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "3faeb170b0637626090dcdb9dd1fba9c0b999cb3", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16b4dc0489fca20d328c8f6effb8d7a9d1ef944d/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b4dc0489fca20d328c8f6effb8d7a9d1ef944d/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=16b4dc0489fca20d328c8f6effb8d7a9d1ef944d", "patch": "@@ -18,8 +18,8 @@\n ///\n /// If `T` implements `Deref<Target = U>`, and `x` is a value of type `T`, then:\n ///\n-/// * In immutable contexts, `*x` on non-pointer types is equivalent to\n-///   `*Deref::deref(&x)`.\n+/// * In immutable contexts, `*x` (where `T` is neither a reference nor a raw pointer)\n+///   is equivalent to `*Deref::deref(&x)`.\n /// * Values of type `&T` are coerced to values of type `&U`\n /// * `T` implicitly implements all the (immutable) methods of the type `U`.\n ///\n@@ -115,8 +115,8 @@ impl<T: ?Sized> Deref for &mut T {\n /// If `T` implements `DerefMut<Target = U>`, and `x` is a value of type `T`,\n /// then:\n ///\n-/// * In mutable contexts, `*x` on non-pointer types is equivalent to\n-///   `*DerefMut::deref_mut(&mut x)`.\n+/// * In mutable contexts, `*x` (where `T` is neither a reference nor a raw pointer)\n+///   is equivalent to `*DerefMut::deref_mut(&mut x)`.\n /// * Values of type `&mut T` are coerced to values of type `&mut U`\n /// * `T` implicitly implements all the (mutable) methods of the type `U`.\n ///"}]}