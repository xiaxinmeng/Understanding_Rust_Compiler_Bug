{"sha": "bd5305fbc818d0f59eaabcfd08f19e8c23ea931f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNTMwNWZiYzgxOGQwZjU5ZWFhYmNmZDA4ZjE5ZThjMjNlYTkzMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-05T04:46:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-05T04:46:23Z"}, "message": "auto merge of #10799 : TeXitoi/rust/shootout-reverse-complement-resurected, r=alexcrichton\n\nThis version is inspired by the best version in C by Mr Ledrug,\r\nbut without the parallelisation.", "tree": {"sha": "a19d2ba92e2ea696ae8b3d2b11250ff74713d854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19d2ba92e2ea696ae8b3d2b11250ff74713d854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd5305fbc818d0f59eaabcfd08f19e8c23ea931f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd5305fbc818d0f59eaabcfd08f19e8c23ea931f", "html_url": "https://github.com/rust-lang/rust/commit/bd5305fbc818d0f59eaabcfd08f19e8c23ea931f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd5305fbc818d0f59eaabcfd08f19e8c23ea931f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64bcfd246ca0a7522069bad9f6217ec3e783db8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64bcfd246ca0a7522069bad9f6217ec3e783db8e", "html_url": "https://github.com/rust-lang/rust/commit/64bcfd246ca0a7522069bad9f6217ec3e783db8e"}, {"sha": "e76e83cb104f6bf09247879cdf424d1097279710", "url": "https://api.github.com/repos/rust-lang/rust/commits/e76e83cb104f6bf09247879cdf424d1097279710", "html_url": "https://github.com/rust-lang/rust/commit/e76e83cb104f6bf09247879cdf424d1097279710"}], "stats": {"total": 212, "additions": 70, "deletions": 142}, "files": [{"sha": "e9d0d60ac0bd8306f4dbfd3c8385dc1522d4e52d", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 70, "deletions": 142, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/bd5305fbc818d0f59eaabcfd08f19e8c23ea931f/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd5305fbc818d0f59eaabcfd08f19e8c23ea931f/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=bd5305fbc818d0f59eaabcfd08f19e8c23ea931f", "patch": "@@ -1,151 +1,79 @@\n-// xfail-pretty\n-// xfail-test\n-\n-use std::cast::transmute;\n-use std::libc::{STDOUT_FILENO, c_int, fdopen, fgets, fopen, fputc, fwrite};\n-use std::libc::{size_t};\n-use std::ptr::null;\n-\n-static LINE_LEN: u32 = 80;\n-\n-static COMPLEMENTS: [u8, ..256] = [\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-\n-    0,\n-    'T' as u8,\n-    'V' as u8,\n-    'G' as u8,\n-    'H' as u8,\n-    0,\n-    0,\n-    'C' as u8,\n-    'D' as u8,\n-    0,\n-    0,\n-    'M' as u8,\n-    0,\n-    'K' as u8,\n-    'N' as u8,\n-    0,\n-    0,\n-    0,\n-    'Y' as u8,\n-    'S' as u8,\n-    'A' as u8,\n-    'A' as u8,\n-    'B' as u8,\n-    'W' as u8,\n-    0,\n-    'R' as u8,\n-    0,\n-    0,\n-    0,\n-    0,\n-    0,\n-    0,\n-\n-    0,\n-    'T' as u8,\n-    'V' as u8,\n-    'G' as u8,\n-    'H' as u8,\n-    0,\n-    0,\n-    'C' as u8,\n-    'D' as u8,\n-    0,\n-    0,\n-    'M' as u8,\n-    0,\n-    'K' as u8,\n-    'N' as u8,\n-    0,\n-    0,\n-    0,\n-    'Y' as u8,\n-    'S' as u8,\n-    'A' as u8,\n-    'A' as u8,\n-    'B' as u8,\n-    'W' as u8,\n-    0,\n-    'R' as u8,\n-    0,\n-    0,\n-    0,\n-    0,\n-    0,\n-    0,\n-\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-];\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::iter::range_step;\n+use std::io::{stdin, stdout, File};\n+\n+static LINE_LEN: uint = 60;\n+\n+fn make_complements() -> [u8, ..256] {\n+    let transforms = [\n+        ('A', 'T'), ('C', 'G'), ('G', 'C'), ('T', 'A'),\n+        ('U', 'A'), ('M', 'K'), ('R', 'Y'), ('W', 'W'),\n+        ('S', 'S'), ('Y', 'R'), ('K', 'M'), ('V', 'B'),\n+        ('H', 'D'), ('D', 'H'), ('B', 'V'), ('N', 'N'),\n+        ('\\n', '\\n')];\n+    let mut complements: [u8, ..256] = [0, ..256];\n+    for (i, c) in complements.mut_iter().enumerate() {\n+        *c = i as u8;\n+    }\n+    let lower = 'A' as u8 - 'a' as u8;\n+    for &(from, to) in transforms.iter() {\n+        complements[from as u8] = to as u8;\n+        complements[from as u8 - lower] = to as u8;\n+    }\n+    complements\n+}\n \n fn main() {\n-    unsafe {\n-        let mode = \"r\";\n-        //let stdin = fdopen(STDIN_FILENO as c_int, transmute(&mode[0]));\n-        let path = \"reversecomplement-input.txt\";\n-        let stdin = fopen(transmute(&path[0]), transmute(&mode[0]));\n-        let mode = \"w\";\n-        let stdout = fdopen(STDOUT_FILENO as c_int, transmute(&mode[0]));\n-\n-        let mut out: ~[u8] = ~[];\n-        out.reserve(12777888);\n-        let mut pos = 0;\n-\n-        loop {\n-            let needed = pos + (LINE_LEN as uint) + 1;\n-            if out.capacity() < needed {\n-                out.reserve_at_least(needed);\n-            }\n-\n-            let mut ptr = out.unsafe_mut_ref(pos);\n-            if fgets(transmute(ptr), LINE_LEN as c_int, stdin) == null() {\n-                break;\n-            }\n-\n-            // Don't change lines that begin with '>' or ';'.\n-            let first = *ptr;\n-            if first == ('>' as u8) {\n-                while *ptr != 0 {\n-                    ptr = ptr.offset(1);\n-                }\n-                *ptr = '\\n' as u8;\n-\n-                pos = (ptr as uint) - (out.unsafe_ref(0) as uint);\n-                fwrite(transmute(out.unsafe_ref(0)),\n-                       1,\n-                       pos as size_t,\n-                       stdout);\n-\n-                pos = 0;\n-                continue;\n+    let complements = make_complements();\n+    let mut data = if std::os::getenv(\"RUST_BENCH\").is_some() {\n+        File::open(&Path::init(\"shootout-k-nucleotide.data\")).read_to_end()\n+    } else {\n+        stdin().read_to_end()\n+    };\n+\n+    for seq in data.mut_split(|c| *c == '>' as u8) {\n+        // skip header and last \\n\n+        let begin = match seq.iter().position(|c| *c == '\\n' as u8) {\n+            None => continue,\n+            Some(c) => c\n+        };\n+        let len = seq.len();\n+        let seq = seq.mut_slice(begin + 1, len - 1);\n+\n+        // arrange line breaks\n+        let len = seq.len();\n+        let off = LINE_LEN - len % (LINE_LEN + 1);\n+        for i in range_step(LINE_LEN, len, LINE_LEN + 1) {\n+            for j in std::iter::count(i, -1).take(off) {\n+                seq[j] = seq[j - 1];\n             }\n+            seq[i - off] = '\\n' as u8;\n+        }\n \n-            // Complement other lines.\n-            loop {\n-                let ch = *ptr;\n-                if ch == 0 {\n-                    break;\n+        // reverse complement, as\n+        //    seq.reverse(); for c in seq.mut_iter() {*c = complements[*c]}\n+        // but faster:\n+        let mut it = seq.mut_iter();\n+        loop {\n+            match (it.next(), it.next_back()) {\n+                (Some(front), Some(back)) => {\n+                    let tmp = complements[*front];\n+                    *front = complements[*back];\n+                    *back = tmp;\n                 }\n-                *ptr = COMPLEMENTS.unsafe_get(ch as uint);\n-                ptr = ptr.offset(1);\n+                _ => break // vector exhausted.\n             }\n-            *ptr = '\\n' as u8;\n-\n-            pos = (ptr as uint) - (out.unsafe_ref(0) as uint);\n         }\n-\n-        fwrite(transmute(out.unsafe_ref(0)), 1, pos as size_t, stdout);\n     }\n+\n+    stdout().write(data);\n }"}]}