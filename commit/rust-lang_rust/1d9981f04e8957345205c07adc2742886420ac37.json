{"sha": "1d9981f04e8957345205c07adc2742886420ac37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOTk4MWYwNGU4OTU3MzQ1MjA1YzA3YWRjMjc0Mjg4NjQyMGFjMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-20T20:55:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-20T20:55:02Z"}, "message": "Auto merge of #62006 - Centril:rollup-4my59er, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #61900 (implement Error::source for Box<T: Error>)\n - #61979 (Implement Debug for PlaceBase)\n - #61981 (Closures implement Copy and Clone, generators don't)\n - #61996 (Add unit tests for unescaping raw (byte) strings)\n - #62000 (Add test for issue-54189)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d40609cbeb7f76f5c63f70374e68b40b644b7617", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d40609cbeb7f76f5c63f70374e68b40b644b7617"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d9981f04e8957345205c07adc2742886420ac37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9981f04e8957345205c07adc2742886420ac37", "html_url": "https://github.com/rust-lang/rust/commit/1d9981f04e8957345205c07adc2742886420ac37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d9981f04e8957345205c07adc2742886420ac37/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f693d339f175b3aa23a91c62632c5f0c86886059", "url": "https://api.github.com/repos/rust-lang/rust/commits/f693d339f175b3aa23a91c62632c5f0c86886059", "html_url": "https://github.com/rust-lang/rust/commit/f693d339f175b3aa23a91c62632c5f0c86886059"}, {"sha": "9e5ace6f43e03b51119738bc8a52affa7ef703be", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5ace6f43e03b51119738bc8a52affa7ef703be", "html_url": "https://github.com/rust-lang/rust/commit/9e5ace6f43e03b51119738bc8a52affa7ef703be"}], "stats": {"total": 99, "additions": 75, "deletions": 24}, "files": [{"sha": "97cf58e57e6056e7e9399056806f0cd03762e8eb", "filename": "src/doc/unstable-book/src/language-features/generators.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d9981f04e8957345205c07adc2742886420ac37/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "raw_url": "https://github.com/rust-lang/rust/raw/1d9981f04e8957345205c07adc2742886420ac37/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md?ref=1d9981f04e8957345205c07adc2742886420ac37", "patch": "@@ -146,7 +146,7 @@ closure-like semantics. Namely:\n   generators also depend on variables live across suspension points. This means\n   that although the ambient environment may be `Send` or `Sync`, the generator\n   itself may not be due to internal variables live across `yield` points being\n-  not-`Send` or not-`Sync`. Note that generators, like closures, do\n+  not-`Send` or not-`Sync`. Note that generators do\n   not implement traits like `Copy` or `Clone` automatically.\n \n * Whenever a generator is dropped it will drop all captured environment"}, {"sha": "6e09cc045282806cdf89801bd051f3180fda47ae", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1d9981f04e8957345205c07adc2742886420ac37/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9981f04e8957345205c07adc2742886420ac37/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1d9981f04e8957345205c07adc2742886420ac37", "patch": "@@ -2184,29 +2184,7 @@ impl<'tcx> Debug for Place<'tcx> {\n         });\n \n         self.iterate(|place_base, place_projections| {\n-            match place_base {\n-                PlaceBase::Local(id) => {\n-                    write!(fmt, \"{:?}\", id)?;\n-                }\n-                PlaceBase::Static(box self::Static { ty, kind: StaticKind::Static(def_id) }) => {\n-                    write!(\n-                        fmt,\n-                        \"({}: {:?})\",\n-                        ty::tls::with(|tcx| tcx.def_path_str(*def_id)),\n-                        ty\n-                    )?;\n-                },\n-                PlaceBase::Static(\n-                    box self::Static { ty, kind: StaticKind::Promoted(promoted) }\n-                ) => {\n-                    write!(\n-                        fmt,\n-                        \"({:?}: {:?})\",\n-                        promoted,\n-                        ty\n-                    )?;\n-                },\n-            }\n+            write!(fmt, \"{:?}\", place_base)?;\n \n             for projection in place_projections {\n                 match projection.elem {\n@@ -2256,6 +2234,30 @@ impl<'tcx> Debug for Place<'tcx> {\n     }\n }\n \n+impl Debug for PlaceBase<'_> {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n+        match *self {\n+            PlaceBase::Local(id) => write!(fmt, \"{:?}\", id),\n+            PlaceBase::Static(box self::Static { ty, kind: StaticKind::Static(def_id) }) => {\n+                write!(\n+                    fmt,\n+                    \"({}: {:?})\",\n+                    ty::tls::with(|tcx| tcx.def_path_str(def_id)),\n+                    ty\n+                )\n+            },\n+            PlaceBase::Static(box self::Static { ty, kind: StaticKind::Promoted(promoted) }) => {\n+                write!(\n+                    fmt,\n+                    \"({:?}: {:?})\",\n+                    promoted,\n+                    ty\n+                )\n+            },\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Scopes\n "}, {"sha": "5b1e78a1139171efdadf873ccd52383a50e16ad9", "filename": "src/libstd/error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d9981f04e8957345205c07adc2742886420ac37/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9981f04e8957345205c07adc2742886420ac37/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=1d9981f04e8957345205c07adc2742886420ac37", "patch": "@@ -560,6 +560,10 @@ impl<T: Error> Error for Box<T> {\n     fn cause(&self) -> Option<&dyn Error> {\n         Error::cause(&**self)\n     }\n+\n+    fn source(&self) -> Option<&(dyn Error + 'static)> {\n+        Error::source(&**self)\n+    }\n }\n \n #[stable(feature = \"fmt_error\", since = \"1.11.0\")]"}, {"sha": "87cc9c1c9e323efd1b9dee8bc763eb1400889d20", "filename": "src/libsyntax/parse/unescape.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1d9981f04e8957345205c07adc2742886420ac37/src%2Flibsyntax%2Fparse%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9981f04e8957345205c07adc2742886420ac37/src%2Flibsyntax%2Fparse%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Funescape.rs?ref=1d9981f04e8957345205c07adc2742886420ac37", "patch": "@@ -569,4 +569,34 @@ mod tests {\n         check(\"hello \\\\\\r\\n     world\", b\"hello world\");\n         check(\"thread's\", b\"thread's\")\n     }\n+\n+    #[test]\n+    fn test_unescape_raw_str() {\n+        fn check(literal: &str, expected: &[(Range<usize>, Result<char, EscapeError>)]) {\n+            let mut unescaped = Vec::with_capacity(literal.len());\n+            unescape_raw_str(literal, &mut |range, res| unescaped.push((range, res)));\n+            assert_eq!(unescaped, expected);\n+        }\n+\n+        check(\"\\r\\n\", &[(0..2, Ok('\\n'))]);\n+        check(\"\\r\", &[(0..1, Err(EscapeError::BareCarriageReturnInRawString))]);\n+        check(\"\\rx\", &[(0..1, Err(EscapeError::BareCarriageReturnInRawString)), (1..2, Ok('x'))]);\n+    }\n+\n+    #[test]\n+    fn test_unescape_raw_byte_str() {\n+        fn check(literal: &str, expected: &[(Range<usize>, Result<u8, EscapeError>)]) {\n+            let mut unescaped = Vec::with_capacity(literal.len());\n+            unescape_raw_byte_str(literal, &mut |range, res| unescaped.push((range, res)));\n+            assert_eq!(unescaped, expected);\n+        }\n+\n+        check(\"\\r\\n\", &[(0..2, Ok(byte_from_char('\\n')))]);\n+        check(\"\\r\", &[(0..1, Err(EscapeError::BareCarriageReturnInRawString))]);\n+        check(\"\ud83e\udd80\", &[(0..4, Err(EscapeError::NonAsciiCharInByteString))]);\n+        check(\n+            \"\ud83e\udd80a\",\n+            &[(0..4, Err(EscapeError::NonAsciiCharInByteString)), (4..5, Ok(byte_from_char('a')))],\n+        );\n+    }\n }"}, {"sha": "70aecc384effebfc3a62999c3668dd231e835d94", "filename": "src/test/ui/issues/issue-54189.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d9981f04e8957345205c07adc2742886420ac37/src%2Ftest%2Fui%2Fissues%2Fissue-54189.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9981f04e8957345205c07adc2742886420ac37/src%2Ftest%2Fui%2Fissues%2Fissue-54189.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54189.rs?ref=1d9981f04e8957345205c07adc2742886420ac37", "patch": "@@ -0,0 +1,6 @@\n+fn bug() -> impl for <'r> Fn() -> &'r () { || { &() } }\n+//~^ ERROR binding for associated type `Output` references lifetime `'r`\n+\n+fn main() {\n+    let f = bug();\n+}"}, {"sha": "4787abd49d178a5f56a275dd8bcba68fd84e4052", "filename": "src/test/ui/issues/issue-54189.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d9981f04e8957345205c07adc2742886420ac37/src%2Ftest%2Fui%2Fissues%2Fissue-54189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d9981f04e8957345205c07adc2742886420ac37/src%2Ftest%2Fui%2Fissues%2Fissue-54189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54189.stderr?ref=1d9981f04e8957345205c07adc2742886420ac37", "patch": "@@ -0,0 +1,9 @@\n+error[E0582]: binding for associated type `Output` references lifetime `'r`, which does not appear in the trait input types\n+  --> $DIR/issue-54189.rs:1:35\n+   |\n+LL | fn bug() -> impl for <'r> Fn() -> &'r () { || { &() } }\n+   |                                   ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0582`."}]}