{"sha": "c7f9a71d7875e5acced7f3a1b9f05a46be2104f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZjlhNzFkNzg3NWU1YWNjZWQ3ZjNhMWI5ZjA1YTQ2YmUyMTA0ZjQ=", "commit": {"author": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-07-16T15:34:06Z"}, "committer": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-07-22T10:46:55Z"}, "message": "issue-46589 passes in Polonius and fails in NLL, duplicate it and manually check each outcome", "tree": {"sha": "c944ce2887002ccac44b3716df762af61336d32b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c944ce2887002ccac44b3716df762af61336d32b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7f9a71d7875e5acced7f3a1b9f05a46be2104f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f9a71d7875e5acced7f3a1b9f05a46be2104f4", "html_url": "https://github.com/rust-lang/rust/commit/c7f9a71d7875e5acced7f3a1b9f05a46be2104f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7f9a71d7875e5acced7f3a1b9f05a46be2104f4/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "770129c28039ab7501cdc0f2f7ca1a38e22208f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/770129c28039ab7501cdc0f2f7ca1a38e22208f0", "html_url": "https://github.com/rust-lang/rust/commit/770129c28039ab7501cdc0f2f7ca1a38e22208f0"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "0a4c20d15159f251dbf09eda16e318153833b13b", "filename": "src/test/ui/nll/issue-46589.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7f9a71d7875e5acced7f3a1b9f05a46be2104f4/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f9a71d7875e5acced7f3a1b9f05a46be2104f4/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs?ref=c7f9a71d7875e5acced7f3a1b9f05a46be2104f4", "patch": "@@ -1,3 +1,9 @@\n+// This tests passes in Polonius mode, so is skipped in the automated compare-mode.\n+// We will manually check it passes in Polonius tests, as we can't have a test here\n+// which conditionally passes depending on a test revision/compile-flags.\n+\n+// ignore-compare-mode-polonius\n+\n struct Foo;\n \n impl Foo {"}, {"sha": "82cd364eeffd0c42d1c39428ae83a7343b020295", "filename": "src/test/ui/nll/issue-46589.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7f9a71d7875e5acced7f3a1b9f05a46be2104f4/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7f9a71d7875e5acced7f3a1b9f05a46be2104f4/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr?ref=c7f9a71d7875e5acced7f3a1b9f05a46be2104f4", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `**other` as mutable more than once at a time\n-  --> $DIR/issue-46589.rs:17:21\n+  --> $DIR/issue-46589.rs:23:21\n    |\n LL |         *other = match (*other).get_self() {\n    |                        -------- first mutable borrow occurs here"}, {"sha": "b5792587ff0ec625e2bfb26255be0734087b9b1f", "filename": "src/test/ui/nll/polonius/issue-46589.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c7f9a71d7875e5acced7f3a1b9f05a46be2104f4/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fissue-46589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f9a71d7875e5acced7f3a1b9f05a46be2104f4/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fissue-46589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fissue-46589.rs?ref=c7f9a71d7875e5acced7f3a1b9f05a46be2104f4", "patch": "@@ -0,0 +1,32 @@\n+// This test is a copy of `ui/nll/issue-46589.rs` which fails in NLL but succeeds in Polonius.\n+// As we can't have a test here which conditionally passes depending on a test\n+// revision/compile-flags. We ensure here that it passes in Polonius mode.\n+\n+// check-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn get_self(&mut self) -> Option<&mut Self> {\n+        Some(self)\n+    }\n+\n+    fn new_self(&mut self) -> &mut Self {\n+        self\n+    }\n+\n+    fn trigger_bug(&mut self) {\n+        let other = &mut (&mut *self);\n+\n+        *other = match (*other).get_self() {\n+            Some(s) => s,\n+            None => (*other).new_self()\n+        };\n+\n+        let c = other;\n+    }\n+}\n+\n+fn main() {}"}]}