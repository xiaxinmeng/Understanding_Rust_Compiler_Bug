{"sha": "8239b7616f90b577f7ca3cbbe26209d100aac2b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMzliNzYxNmY5MGI1NzdmN2NhM2NiYmUyNjIwOWQxMDBhYWMyYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-04T07:53:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-04T07:53:44Z"}, "message": "Auto merge of #4454 - BO41:search_is_some, r=flip1995\n\nDereference one less on search_is_some and make it auto-fixable\n\nFixes #4453\n\nchangelog: none", "tree": {"sha": "30bc0bccf2155c44fb76926b5fc50119d07540f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30bc0bccf2155c44fb76926b5fc50119d07540f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8239b7616f90b577f7ca3cbbe26209d100aac2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8239b7616f90b577f7ca3cbbe26209d100aac2b1", "html_url": "https://github.com/rust-lang/rust/commit/8239b7616f90b577f7ca3cbbe26209d100aac2b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8239b7616f90b577f7ca3cbbe26209d100aac2b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11da8c18a28aaae210cf87ece7de4d52e21111a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/11da8c18a28aaae210cf87ece7de4d52e21111a7", "html_url": "https://github.com/rust-lang/rust/commit/11da8c18a28aaae210cf87ece7de4d52e21111a7"}, {"sha": "64cd9e4d6087667aedcd786142755d82056b09d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/64cd9e4d6087667aedcd786142755d82056b09d1", "html_url": "https://github.com/rust-lang/rust/commit/64cd9e4d6087667aedcd786142755d82056b09d1"}], "stats": {"total": 153, "additions": 94, "deletions": 59}, "files": [{"sha": "f20b5c711b1982bfad3b32bf70b91f61761a71d0", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 50, "deletions": 34, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8239b7616f90b577f7ca3cbbe26209d100aac2b1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8239b7616f90b577f7ca3cbbe26209d100aac2b1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=8239b7616f90b577f7ca3cbbe26209d100aac2b1", "patch": "@@ -1033,7 +1033,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             return;\n         }\n \n-        let (method_names, arg_lists) = method_calls(expr, 2);\n+        let (method_names, arg_lists, method_spans) = method_calls(expr, 2);\n         let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n \n@@ -1053,11 +1053,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"map\", \"find\"] => lint_find_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter\"] => lint_filter_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter_map\"] => lint_filter_map_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n-            [\"flat_map\", ..] => lint_flat_map_identity(cx, expr, arg_lists[0]),\n+            [\"flat_map\", ..] => lint_flat_map_identity(cx, expr, arg_lists[0], method_spans[0]),\n             [\"flatten\", \"map\"] => lint_map_flatten(cx, expr, arg_lists[1]),\n-            [\"is_some\", \"find\"] => lint_search_is_some(cx, expr, \"find\", arg_lists[1], arg_lists[0]),\n-            [\"is_some\", \"position\"] => lint_search_is_some(cx, expr, \"position\", arg_lists[1], arg_lists[0]),\n-            [\"is_some\", \"rposition\"] => lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0]),\n+            [\"is_some\", \"find\"] => lint_search_is_some(cx, expr, \"find\", arg_lists[1], arg_lists[0], method_spans[1]),\n+            [\"is_some\", \"position\"] => {\n+                lint_search_is_some(cx, expr, \"position\", arg_lists[1], arg_lists[0], method_spans[1])\n+            },\n+            [\"is_some\", \"rposition\"] => {\n+                lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n+            },\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n             [\"as_ptr\", \"unwrap\"] | [\"as_ptr\", \"expect\"] => {\n                 lint_cstring_as_ptr(cx, expr, &arg_lists[1][0], &arg_lists[0][0])\n@@ -1068,7 +1072,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"collect\", \"cloned\"] => lint_iter_cloned_collect(cx, expr, arg_lists[1]),\n             [\"as_ref\"] => lint_asref(cx, expr, \"as_ref\", arg_lists[0]),\n             [\"as_mut\"] => lint_asref(cx, expr, \"as_mut\", arg_lists[0]),\n-            [\"fold\", ..] => lint_unnecessary_fold(cx, expr, arg_lists[0]),\n+            [\"fold\", ..] => lint_unnecessary_fold(cx, expr, arg_lists[0], method_spans[0]),\n             [\"filter_map\", ..] => unnecessary_filter_map::lint(cx, expr, arg_lists[0]),\n             [\"count\", \"map\"] => lint_suspicious_map(cx, expr),\n             [\"assume_init\"] => lint_maybe_uninit(cx, &arg_lists[0][0], expr),\n@@ -1746,11 +1750,12 @@ fn lint_iter_cloned_collect<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Ex\n     }\n }\n \n-fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n+fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args: &[hir::Expr], fold_span: Span) {\n     fn check_fold_with_op(\n         cx: &LateContext<'_, '_>,\n         expr: &hir::Expr,\n         fold_args: &[hir::Expr],\n+        fold_span: Span,\n         op: hir::BinOpKind,\n         replacement_method_name: &str,\n         replacement_has_args: bool,\n@@ -1772,8 +1777,6 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n             if match_var(&*left_expr, first_arg_ident);\n             if replacement_has_args || match_var(&*right_expr, second_arg_ident);\n \n-            if let hir::ExprKind::MethodCall(_, span, _) = &expr.node;\n-\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if replacement_has_args {\n@@ -1793,7 +1796,7 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n                 span_lint_and_sugg(\n                     cx,\n                     UNNECESSARY_FOLD,\n-                    span.with_hi(expr.span.hi()),\n+                    fold_span.with_hi(expr.span.hi()),\n                     // TODO #2371 don't suggest e.g., .any(|x| f(x)) if we can suggest .any(f)\n                     \"this `.fold` can be written more succinctly using another method\",\n                     \"try\",\n@@ -1817,10 +1820,18 @@ fn lint_unnecessary_fold(cx: &LateContext<'_, '_>, expr: &hir::Expr, fold_args:\n     // Check if the first argument to .fold is a suitable literal\n     if let hir::ExprKind::Lit(ref lit) = fold_args[1].node {\n         match lit.node {\n-            ast::LitKind::Bool(false) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Or, \"any\", true),\n-            ast::LitKind::Bool(true) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::And, \"all\", true),\n-            ast::LitKind::Int(0, _) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Add, \"sum\", false),\n-            ast::LitKind::Int(1, _) => check_fold_with_op(cx, expr, fold_args, hir::BinOpKind::Mul, \"product\", false),\n+            ast::LitKind::Bool(false) => {\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Or, \"any\", true)\n+            },\n+            ast::LitKind::Bool(true) => {\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::And, \"all\", true)\n+            },\n+            ast::LitKind::Int(0, _) => {\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Add, \"sum\", false)\n+            },\n+            ast::LitKind::Int(1, _) => {\n+                check_fold_with_op(cx, expr, fold_args, fold_span, hir::BinOpKind::Mul, \"product\", false)\n+            },\n             _ => (),\n         }\n     }\n@@ -2357,22 +2368,21 @@ fn lint_flat_map_identity<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &'tcx hir::Expr,\n     flat_map_args: &'tcx [hir::Expr],\n+    flat_map_span: Span,\n ) {\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let arg_node = &flat_map_args[1].node;\n \n         let apply_lint = |message: &str| {\n-            if let hir::ExprKind::MethodCall(_, span, _) = &expr.node {\n-                span_lint_and_sugg(\n-                    cx,\n-                    FLAT_MAP_IDENTITY,\n-                    span.with_hi(expr.span.hi()),\n-                    message,\n-                    \"try\",\n-                    \"flatten()\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+            span_lint_and_sugg(\n+                cx,\n+                FLAT_MAP_IDENTITY,\n+                flat_map_span.with_hi(expr.span.hi()),\n+                message,\n+                \"try\",\n+                \"flatten()\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n         };\n \n         if_chain! {\n@@ -2409,6 +2419,7 @@ fn lint_search_is_some<'a, 'tcx>(\n     search_method: &str,\n     search_args: &'tcx [hir::Expr],\n     is_some_args: &'tcx [hir::Expr],\n+    method_span: Span,\n ) {\n     // lint if caller of search is an Iterator\n     if match_trait_method(cx, &is_some_args[0], &paths::ITERATOR) {\n@@ -2420,31 +2431,36 @@ fn lint_search_is_some<'a, 'tcx>(\n         let search_snippet = snippet(cx, search_args[1].span, \"..\");\n         if search_snippet.lines().count() <= 1 {\n             // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n+            // suggest `any(|..| *..)` instead of `any(|..| **..)` for `find(|..| **..).is_some()`\n             let any_search_snippet = if_chain! {\n                 if search_method == \"find\";\n                 if let hir::ExprKind::Closure(_, _, body_id, ..) = search_args[1].node;\n                 let closure_body = cx.tcx.hir().body(body_id);\n                 if let Some(closure_arg) = closure_body.params.get(0);\n-                if let hir::PatKind::Ref(..) = closure_arg.pat.node;\n                 then {\n-                    Some(search_snippet.replacen('&', \"\", 1))\n+                    if let hir::PatKind::Ref(..) = closure_arg.pat.node {\n+                        Some(search_snippet.replacen('&', \"\", 1))\n+                    } else if let Some(name) = get_arg_name(&closure_arg.pat) {\n+                        Some(search_snippet.replace(&format!(\"*{}\", name), &name.as_str()))\n+                    } else {\n+                        None\n+                    }\n                 } else {\n                     None\n                 }\n             };\n             // add note if not multi-line\n-            span_note_and_lint(\n+            span_lint_and_sugg(\n                 cx,\n                 SEARCH_IS_SOME,\n-                expr.span,\n+                method_span.with_hi(expr.span.hi()),\n                 &msg,\n-                expr.span,\n-                &format!(\n-                    \"replace `{0}({1}).is_some()` with `any({2})`\",\n-                    search_method,\n-                    search_snippet,\n+                \"try this\",\n+                format!(\n+                    \"any({})\",\n                     any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n                 ),\n+                Applicability::MachineApplicable,\n             );\n         } else {\n             span_lint(cx, SEARCH_IS_SOME, expr.span, &msg);"}, {"sha": "48400593b9d2e1f3b5d0c659d569f5ac9fbe2a2f", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8239b7616f90b577f7ca3cbbe26209d100aac2b1/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8239b7616f90b577f7ca3cbbe26209d100aac2b1/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=8239b7616f90b577f7ca3cbbe26209d100aac2b1", "patch": "@@ -280,7 +280,7 @@ impl_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n-        let (method_names, arg_lists) = method_calls(expr, 2);\n+        let (method_names, arg_lists, spans) = method_calls(expr, 2);\n         let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n         if_chain! {\n@@ -294,10 +294,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n                 span_lint_and_sugg(\n                     cx,\n                     OUTER_EXPN_EXPN_DATA,\n-                    expr.span.trim_start(self_arg.span).unwrap_or(expr.span),\n+                    spans[1].with_hi(expr.span.hi()),\n                     \"usage of `outer_expn().expn_data()`\",\n                     \"try\",\n-                    \".outer_expn_data()\".to_string(),\n+                    \"outer_expn_data()\".to_string(),\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "bbf9572f8fb4becabbec00e41aa29b64eff9cb17", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8239b7616f90b577f7ca3cbbe26209d100aac2b1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8239b7616f90b577f7ca3cbbe26209d100aac2b1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8239b7616f90b577f7ca3cbbe26209d100aac2b1", "patch": "@@ -342,26 +342,28 @@ pub fn resolve_node(cx: &LateContext<'_, '_>, qpath: &QPath, id: HirId) -> Res {\n }\n \n /// Returns the method names and argument list of nested method call expressions that make up\n-/// `expr`.\n-pub fn method_calls(expr: &Expr, max_depth: usize) -> (Vec<Symbol>, Vec<&[Expr]>) {\n+/// `expr`. method/span lists are sorted with the most recent call first.\n+pub fn method_calls(expr: &Expr, max_depth: usize) -> (Vec<Symbol>, Vec<&[Expr]>, Vec<Span>) {\n     let mut method_names = Vec::with_capacity(max_depth);\n     let mut arg_lists = Vec::with_capacity(max_depth);\n+    let mut spans = Vec::with_capacity(max_depth);\n \n     let mut current = expr;\n     for _ in 0..max_depth {\n-        if let ExprKind::MethodCall(path, _, args) = &current.node {\n+        if let ExprKind::MethodCall(path, span, args) = &current.node {\n             if args.iter().any(|e| e.span.from_expansion()) {\n                 break;\n             }\n             method_names.push(path.ident.name);\n             arg_lists.push(&**args);\n+            spans.push(*span);\n             current = &args[0];\n         } else {\n             break;\n         }\n     }\n \n-    (method_names, arg_lists)\n+    (method_names, arg_lists, spans)\n }\n \n /// Matches an `Expr` against a chain of methods, and return the matched `Expr`s."}, {"sha": "8f53b8cecbd311341ff92d359993e17e2df370c9", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8239b7616f90b577f7ca3cbbe26209d100aac2b1/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8239b7616f90b577f7ca3cbbe26209d100aac2b1/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=8239b7616f90b577f7ca3cbbe26209d100aac2b1", "patch": "@@ -260,9 +260,13 @@ fn filter_next() {\n #[rustfmt::skip]\n fn search_is_some() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n \n     // Check `find().is_some()`, single-line case.\n     let _ = v.iter().find(|&x| *x < 0).is_some();\n+    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+    let _ = (0..1).find(|x| *x == 0).is_some();\n+    let _ = v.iter().find(|x| **x == 0).is_some();\n \n     // Check `find().is_some()`, multi-line case.\n     let _ = v.iter().find(|&x| {"}, {"sha": "b30371fa541f84cb384e67290972962b64e6c9e6", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8239b7616f90b577f7ca3cbbe26209d100aac2b1/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8239b7616f90b577f7ca3cbbe26209d100aac2b1/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=8239b7616f90b577f7ca3cbbe26209d100aac2b1", "patch": "@@ -139,16 +139,33 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:265:13\n+  --> $DIR/methods.rs:266:22\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n-   = note: replace `find(|&x| *x < 0).is_some()` with `any(|x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:268:13\n+  --> $DIR/methods.rs:267:20\n+   |\n+LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/methods.rs:268:20\n+   |\n+LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/methods.rs:269:22\n+   |\n+LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+  --> $DIR/methods.rs:272:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -158,15 +175,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:274:13\n+  --> $DIR/methods.rs:278:22\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:277:13\n+  --> $DIR/methods.rs:281:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -176,15 +191,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:283:13\n+  --> $DIR/methods.rs:287:22\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:286:13\n+  --> $DIR/methods.rs:290:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -194,12 +207,12 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:301:13\n+  --> $DIR/methods.rs:305:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "15fb0ad2ede1ab72d327af558267b9acd17a4bc1", "filename": "tests/ui/outer_expn_data.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8239b7616f90b577f7ca3cbbe26209d100aac2b1/tests%2Fui%2Fouter_expn_data.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8239b7616f90b577f7ca3cbbe26209d100aac2b1/tests%2Fui%2Fouter_expn_data.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_data.stderr?ref=8239b7616f90b577f7ca3cbbe26209d100aac2b1", "patch": "@@ -1,8 +1,8 @@\n error: usage of `outer_expn().expn_data()`\n-  --> $DIR/outer_expn_data.rs:21:33\n+  --> $DIR/outer_expn_data.rs:21:34\n    |\n LL |         let _ = expr.span.ctxt().outer_expn().expn_data();\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.outer_expn_data()`\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `outer_expn_data()`\n    |\n note: lint level defined here\n   --> $DIR/outer_expn_data.rs:3:9"}]}