{"sha": "6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d", "node_id": "C_kwDOAAsO6NoAKDZmZGZkZWE4YjExYmQxYzZiNjZkMDM4NjllN2VjMGJlZTBiOTRiNGQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-07T23:08:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-07T23:08:25Z"}, "message": "Remove astconv usage in diagnostic", "tree": {"sha": "ae67de3523798451c3e558afba8a95ec9e634711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae67de3523798451c3e558afba8a95ec9e634711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d", "html_url": "https://github.com/rust-lang/rust/commit/6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4dd9edb76a34ecbca539967f9662b8c0cc9c7fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4dd9edb76a34ecbca539967f9662b8c0cc9c7fb", "html_url": "https://github.com/rust-lang/rust/commit/e4dd9edb76a34ecbca539967f9662b8c0cc9c7fb"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "4e3c20196945a87ba47c2945654bab3807c6440e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d", "patch": "@@ -1336,16 +1336,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 hir::Path { segments: [segment], .. },\n             ))\n             | hir::ExprKind::Path(QPath::TypeRelative(ty, segment)) => {\n-                let self_ty = self.astconv().ast_ty_to_ty(ty);\n-                if let Ok(pick) = self.probe_for_name(\n-                    Mode::Path,\n-                    Ident::new(capitalized_name, segment.ident.span),\n-                    Some(expected_ty),\n-                    IsSuggestion(true),\n-                    self_ty,\n-                    expr.hir_id,\n-                    ProbeScope::TraitsInScope,\n-                ) {\n+                if let Some(self_ty) = self.typeck_results.borrow().node_type_opt(ty.hir_id)\n+                    && let Ok(pick) = self.probe_for_name(\n+                        Mode::Path,\n+                        Ident::new(capitalized_name, segment.ident.span),\n+                        Some(expected_ty),\n+                        IsSuggestion(true),\n+                        self_ty,\n+                        expr.hir_id,\n+                        ProbeScope::TraitsInScope,\n+                    )\n+                {\n                     (pick.item, segment)\n                 } else {\n                     return false;"}, {"sha": "6fbac2ee9758e26eada49c860323cbf4c8a58519", "filename": "tests/ui/typeck/issue-107775.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d/tests%2Fui%2Ftypeck%2Fissue-107775.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d/tests%2Fui%2Ftypeck%2Fissue-107775.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-107775.rs?ref=6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d", "patch": "@@ -0,0 +1,40 @@\n+// edition: 2021\n+\n+use std::collections::HashMap;\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+pub trait Trait {\n+    fn do_something<'async_trait>(byte: u8)\n+    ->\n+        Pin<Box<dyn Future<Output = ()> +\n+        Send + 'async_trait>>;\n+}\n+\n+pub struct Struct;\n+\n+impl Trait for Struct {\n+    fn do_something<'async_trait>(byte: u8)\n+        ->\n+            Pin<Box<dyn Future<Output = ()> +\n+            Send + 'async_trait>> {\n+        Box::pin(\n+\n+            async move { let byte = byte; let _: () = {}; })\n+    }\n+}\n+\n+pub struct Map {\n+    map: HashMap<u16, fn(u8) -> Pin<Box<dyn Future<Output = ()> + Send>>>,\n+}\n+\n+impl Map {\n+    pub fn new() -> Self {\n+        let mut map = HashMap::new();\n+        map.insert(1, Struct::do_something);\n+        Self { map }\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9ee9c022c6e8cc978514a33e27493d09481b514b", "filename": "tests/ui/typeck/issue-107775.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d/tests%2Fui%2Ftypeck%2Fissue-107775.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d/tests%2Fui%2Ftypeck%2Fissue-107775.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-107775.stderr?ref=6fdfdea8b11bd1c6b66d03869e7ec0bee0b94b4d", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107775.rs:35:16\n+   |\n+LL |         map.insert(1, Struct::do_something);\n+   |                    -  -------------------- this is of type `fn(u8) -> Pin<Box<dyn Future<Output = ()> + Send>> {<Struct as Trait>::do_something::<'_>}`, which causes `map` to be inferred as `HashMap<{integer}, fn(u8) -> Pin<Box<dyn Future<Output = ()> + Send>> {<Struct as Trait>::do_something::<'_>}>`\n+   |                    |\n+   |                    this is of type `{integer}`, which causes `map` to be inferred as `HashMap<{integer}, fn(u8) -> Pin<Box<dyn Future<Output = ()> + Send>> {<Struct as Trait>::do_something::<'_>}>`\n+LL |         Self { map }\n+   |                ^^^ expected `HashMap<u16, fn(u8) -> Pin<...>>`, found `HashMap<{integer}, ...>`\n+   |\n+   = note: expected struct `HashMap<u16, fn(_) -> Pin<Box<(dyn Future<Output = ()> + Send + 'static)>>>`\n+              found struct `HashMap<{integer}, fn(_) -> Pin<Box<dyn Future<Output = ()> + Send>> {<Struct as Trait>::do_something::<'_>}>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}