{"sha": "fa42888e270535e0e2ffde66d93c0c0e90294475", "node_id": "C_kwDOAAsO6NoAKGZhNDI4ODhlMjcwNTM1ZTBlMmZmZGU2NmQ5M2MwYzBlOTAyOTQ0NzU", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-27T18:03:57Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-27T18:03:57Z"}, "message": "Diagnose unresolved derive macros", "tree": {"sha": "9990dffe6b7484b3f001c6f24746f1ee0f826b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9990dffe6b7484b3f001c6f24746f1ee0f826b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa42888e270535e0e2ffde66d93c0c0e90294475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa42888e270535e0e2ffde66d93c0c0e90294475", "html_url": "https://github.com/rust-lang/rust/commit/fa42888e270535e0e2ffde66d93c0c0e90294475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa42888e270535e0e2ffde66d93c0c0e90294475/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad500beb68fa5cc0807a6691237459fe2bf6c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad500beb68fa5cc0807a6691237459fe2bf6c5c", "html_url": "https://github.com/rust-lang/rust/commit/1ad500beb68fa5cc0807a6691237459fe2bf6c5c"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "08e239804c0471e7fd084a385e64ad0410de188e", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=fa42888e270535e0e2ffde66d93c0c0e90294475", "patch": "@@ -67,8 +67,9 @@ pub struct UnresolvedImport {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct UnresolvedMacroCall {\n-    pub macro_call: InFile<AstPtr<ast::MacroCall>>,\n+    pub macro_call: InFile<SyntaxNodePtr>,\n     pub path: ModPath,\n+    pub is_bang: bool,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "2d7316872770729284d655030f6dde4be43db48a", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=fa42888e270535e0e2ffde66d93c0c0e90294475", "patch": "@@ -701,8 +701,9 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n             let node = ast.to_node(db.upcast());\n             acc.push(\n                 UnresolvedMacroCall {\n-                    macro_call: InFile::new(ast.file_id, AstPtr::new(&node)),\n+                    macro_call: InFile::new(node.file_id, SyntaxNodePtr::new(&node.value)),\n                     path: path.clone(),\n+                    is_bang: matches!(ast, MacroCallKind::FnLike { .. }),\n                 }\n                 .into(),\n             );\n@@ -1170,7 +1171,12 @@ impl DefWithBody {\n                     .into(),\n                 ),\n                 BodyDiagnostic::UnresolvedMacroCall { node, path } => acc.push(\n-                    UnresolvedMacroCall { macro_call: node.clone(), path: path.clone() }.into(),\n+                    UnresolvedMacroCall {\n+                        macro_call: node.clone().map(|ast_ptr| ast_ptr.into()),\n+                        path: path.clone(),\n+                        is_bang: true,\n+                    }\n+                    .into(),\n                 ),\n             }\n         }"}, {"sha": "11d3f48b94af7cf7e559d5fe94f8c7d7de0f3162", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=fa42888e270535e0e2ffde66d93c0c0e90294475", "patch": "@@ -813,12 +813,15 @@ impl Attr {\n         let paths = args\n             .token_trees\n             .split(|tt| matches!(tt, tt::TokenTree::Leaf(tt::Leaf::Punct(Punct { char: ',', .. }))))\n-            .map(|tts| {\n+            .filter_map(|tts| {\n+                if tts.is_empty() {\n+                    return None;\n+                }\n                 let segments = tts.iter().filter_map(|tt| match tt {\n                     tt::TokenTree::Leaf(tt::Leaf::Ident(id)) => Some(id.as_name()),\n                     _ => None,\n                 });\n-                ModPath::from_segments(PathKind::Plain, segments)\n+                Some(ModPath::from_segments(PathKind::Plain, segments))\n             });\n \n         Some(paths)"}, {"sha": "a9705cf2dce936dc252a1fbdcbebed1c79432f9a", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=fa42888e270535e0e2ffde66d93c0c0e90294475", "patch": "@@ -1359,13 +1359,24 @@ impl DefCollector<'_> {\n                     if let Err(UnresolvedMacro { path }) = macro_call_as_call_id {\n                         self.def_map.diagnostics.push(DefDiagnostic::unresolved_macro_call(\n                             directive.module_id,\n-                            ast_id.ast_id,\n+                            MacroCallKind::FnLike { ast_id: ast_id.ast_id, expand_to: *expand_to },\n                             path,\n                         ));\n                     }\n                 }\n-                MacroDirectiveKind::Derive { .. } | MacroDirectiveKind::Attr { .. } => {\n-                    // FIXME: we might want to diagnose this too\n+                MacroDirectiveKind::Derive { ast_id, derive_attr, derive_pos } => {\n+                    self.def_map.diagnostics.push(DefDiagnostic::unresolved_macro_call(\n+                        directive.module_id,\n+                        MacroCallKind::Derive {\n+                            ast_id: ast_id.ast_id,\n+                            derive_attr_index: derive_attr.ast_index,\n+                            derive_index: *derive_pos as u32,\n+                        },\n+                        ast_id.path.clone(),\n+                    ));\n+                }\n+                MacroDirectiveKind::Attr { .. } => {\n+                    // FIXME: these should get diagnosed by `reseed_with_unresolved_attribute`\n                 }\n             }\n         }"}, {"sha": "dd3ff92cb3b72dca00bab50e0836ae796ca05451", "filename": "crates/hir_def/src/nameres/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=fa42888e270535e0e2ffde66d93c0c0e90294475", "patch": "@@ -25,7 +25,7 @@ pub enum DefDiagnosticKind {\n \n     UnresolvedProcMacro { ast: MacroCallKind },\n \n-    UnresolvedMacroCall { ast: AstId<ast::MacroCall>, path: ModPath },\n+    UnresolvedMacroCall { ast: MacroCallKind, path: ModPath },\n \n     MacroError { ast: MacroCallKind, message: String },\n \n@@ -95,7 +95,7 @@ impl DefDiagnostic {\n \n     pub(super) fn unresolved_macro_call(\n         container: LocalModuleId,\n-        ast: AstId<ast::MacroCall>,\n+        ast: MacroCallKind,\n         path: ModPath,\n     ) -> Self {\n         Self { in_module: container, kind: DefDiagnosticKind::UnresolvedMacroCall { ast, path } }"}, {"sha": "831d082bc7eb51a238ffe4f07c5f8b9179d127a0", "filename": "crates/ide_diagnostics/src/handlers/unresolved_macro_call.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa42888e270535e0e2ffde66d93c0c0e90294475/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs?ref=fa42888e270535e0e2ffde66d93c0c0e90294475", "patch": "@@ -1,5 +1,5 @@\n use hir::{db::AstDatabase, InFile};\n-use syntax::{AstNode, SyntaxNodePtr};\n+use syntax::{ast, AstNode, SyntaxNodePtr};\n \n use crate::{Diagnostic, DiagnosticsContext};\n \n@@ -12,19 +12,23 @@ pub(crate) fn unresolved_macro_call(\n     d: &hir::UnresolvedMacroCall,\n ) -> Diagnostic {\n     let last_path_segment = ctx.sema.db.parse_or_expand(d.macro_call.file_id).and_then(|root| {\n-        d.macro_call\n-            .value\n-            .to_node(&root)\n-            .path()\n-            .and_then(|it| it.segment())\n-            .and_then(|it| it.name_ref())\n-            .map(|it| InFile::new(d.macro_call.file_id, SyntaxNodePtr::new(it.syntax())))\n+        let node = d.macro_call.value.to_node(&root);\n+        if let Some(macro_call) = ast::MacroCall::cast(node) {\n+            macro_call\n+                .path()\n+                .and_then(|it| it.segment())\n+                .and_then(|it| it.name_ref())\n+                .map(|it| InFile::new(d.macro_call.file_id, SyntaxNodePtr::new(it.syntax())))\n+        } else {\n+            None\n+        }\n     });\n     let diagnostics = last_path_segment.unwrap_or_else(|| d.macro_call.clone().map(|it| it.into()));\n \n+    let bang = if d.is_bang { \"!\" } else { \"\" };\n     Diagnostic::new(\n         \"unresolved-macro-call\",\n-        format!(\"unresolved macro `{}!`\", d.path),\n+        format!(\"unresolved macro `{}{}`\", d.path, bang),\n         ctx.sema.diagnostics_display_range(diagnostics).range,\n     )\n     .experimental()"}]}