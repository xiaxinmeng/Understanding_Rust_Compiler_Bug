{"sha": "093de32f80c8913121ec3b653c4424d420527ca6", "node_id": "C_kwDOAAsO6NoAKDA5M2RlMzJmODBjODkxMzEyMWVjM2I2NTNjNDQyNGQ0MjA1MjdjYTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T14:41:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T14:41:40Z"}, "message": "Auto merge of #13237 - Veykril:process-changes, r=Veykril\n\nAmalgamate file changes for the same file ids in process_changes\n\nWhen receiving multiple change events for a single file id where the last change is a delete the server panics, as it tries to access the file contents of a deleted file. This occurs due to the VFS changes and the in memory file contents being updated immediately, while `process_changes` processes the events afterwards in sequence which no longer works as it will only observe the final file contents. By folding these events together, we will no longer try to process these intermediate changes, as they aren't relevant anyways.\n\nPotentially fixes https://github.com/rust-lang/rust-analyzer/issues/13236", "tree": {"sha": "2b67bcefe08700f6037b14897d114731b0b91043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b67bcefe08700f6037b14897d114731b0b91043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/093de32f80c8913121ec3b653c4424d420527ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/093de32f80c8913121ec3b653c4424d420527ca6", "html_url": "https://github.com/rust-lang/rust/commit/093de32f80c8913121ec3b653c4424d420527ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/093de32f80c8913121ec3b653c4424d420527ca6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd8c5b6b42e844f596b6410c57050e9f3d06a8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8c5b6b42e844f596b6410c57050e9f3d06a8d8", "html_url": "https://github.com/rust-lang/rust/commit/bd8c5b6b42e844f596b6410c57050e9f3d06a8d8"}, {"sha": "c3a6c963e5f18677a3680e6066a2b9a5b90dfd21", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a6c963e5f18677a3680e6066a2b9a5b90dfd21", "html_url": "https://github.com/rust-lang/rust/commit/c3a6c963e5f18677a3680e6066a2b9a5b90dfd21"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "55fa616d50703f452268dd6839c80226ecdf7e1f", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/093de32f80c8913121ec3b653c4424d420527ca6/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093de32f80c8913121ec3b653c4424d420527ca6/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=093de32f80c8913121ec3b653c4424d420527ca6", "patch": "@@ -185,11 +185,48 @@ impl GlobalState {\n         let (change, changed_files) = {\n             let mut change = Change::new();\n             let (vfs, line_endings_map) = &mut *self.vfs.write();\n-            let changed_files = vfs.take_changes();\n+            let mut changed_files = vfs.take_changes();\n             if changed_files.is_empty() {\n                 return false;\n             }\n \n+            // important: this needs to be a stable sort, the order between changes is relevant\n+            // for the same file ids\n+            changed_files.sort_by_key(|file| file.file_id);\n+            // We need to fix up the changed events a bit, if we have a create or modify for a file\n+            // id that is followed by a delete we actually no longer observe the file text from the\n+            // create or modify which may cause problems later on\n+            changed_files.dedup_by(|a, b| {\n+                use vfs::ChangeKind::*;\n+\n+                if a.file_id != b.file_id {\n+                    return false;\n+                }\n+\n+                match (a.change_kind, b.change_kind) {\n+                    // duplicate can be merged\n+                    (Create, Create) | (Modify, Modify) | (Delete, Delete) => true,\n+                    // just leave the create, modify is irrelevant\n+                    (Create, Modify) => {\n+                        std::mem::swap(a, b);\n+                        true\n+                    }\n+                    // modify becomes irrelevant if the file is deleted\n+                    (Modify, Delete) => true,\n+                    // we should fully remove this occurrence,\n+                    // but leaving just a delete works as well\n+                    (Create, Delete) => true,\n+                    // this is equivalent to a modify\n+                    (Delete, Create) => {\n+                        a.change_kind = Modify;\n+                        true\n+                    }\n+                    // can't really occur\n+                    (Modify, Create) => false,\n+                    (Delete, Modify) => false,\n+                }\n+            });\n+\n             for file in &changed_files {\n                 if let Some(path) = vfs.file_path(file.file_id).as_path() {\n                     let path = path.to_path_buf();"}]}