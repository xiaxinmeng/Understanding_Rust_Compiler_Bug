{"sha": "fbe215af53da287dc220f319543a5ef4e75f6c54", "node_id": "C_kwDOAAsO6NoAKGZiZTIxNWFmNTNkYTI4N2RjMjIwZjMxOTU0M2E1ZWY0ZTc1ZjZjNTQ", "commit": {"author": {"name": "Orson Peters", "email": "orsonpeters@gmail.com", "date": "2021-11-30T20:08:37Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-08-15T10:33:00Z"}, "message": "Conditionally do not compile NaN roundtrip tests on x87 fp.", "tree": {"sha": "f241f1f37d8bfcb3e14ed616115f5a320ff0c995", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f241f1f37d8bfcb3e14ed616115f5a320ff0c995"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe215af53da287dc220f319543a5ef4e75f6c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe215af53da287dc220f319543a5ef4e75f6c54", "html_url": "https://github.com/rust-lang/rust/commit/fbe215af53da287dc220f319543a5ef4e75f6c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe215af53da287dc220f319543a5ef4e75f6c54/comments", "author": {"login": "orlp", "id": 202547, "node_id": "MDQ6VXNlcjIwMjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/202547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orlp", "html_url": "https://github.com/orlp", "followers_url": "https://api.github.com/users/orlp/followers", "following_url": "https://api.github.com/users/orlp/following{/other_user}", "gists_url": "https://api.github.com/users/orlp/gists{/gist_id}", "starred_url": "https://api.github.com/users/orlp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orlp/subscriptions", "organizations_url": "https://api.github.com/users/orlp/orgs", "repos_url": "https://api.github.com/users/orlp/repos", "events_url": "https://api.github.com/users/orlp/events{/privacy}", "received_events_url": "https://api.github.com/users/orlp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "712bf2a07a31f1fb8234ec5823d9913f1091e413", "url": "https://api.github.com/repos/rust-lang/rust/commits/712bf2a07a31f1fb8234ec5823d9913f1091e413", "html_url": "https://github.com/rust-lang/rust/commit/712bf2a07a31f1fb8234ec5823d9913f1091e413"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "4fb9f73ef37714f34ca1d33871cf8518a4b0475e", "filename": "library/std/src/f32/tests.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fbe215af53da287dc220f319543a5ef4e75f6c54/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe215af53da287dc220f319543a5ef4e75f6c54/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs?ref=fbe215af53da287dc220f319543a5ef4e75f6c54", "patch": "@@ -308,18 +308,18 @@ fn test_next_up() {\n     let smallest_normal = f32::from_bits(0x0080_0000);\n \n     // Check that NaNs roundtrip.\n-    // Because x87 can lose NaN bits when passed through a function, ensure the reference value\n-    // also passes through a function boundary.\n-    #[inline(never)]\n-    fn identity(x: f32) -> f32 {\n-        crate::hint::black_box(x)\n+    // Ignore test on x87 floating point, the code is still correct but these\n+    // platforms do not guarantee NaN payloads are preserved, which caused these\n+    // tests to fail.\n+    #[cfg(not(all(target_arch = \"x86\", not(target_feature = \"fxsr\"))))]\n+    {\n+        let nan0 = f32::NAN;\n+        let nan1 = f32::from_bits(f32::NAN.to_bits() ^ 0x002a_aaaa);\n+        let nan2 = f32::from_bits(f32::NAN.to_bits() ^ 0x0055_5555);\n+        assert_eq!(nan0.next_up().to_bits(), nan0.to_bits());\n+        assert_eq!(nan1.next_up().to_bits(), nan1.to_bits());\n+        assert_eq!(nan2.next_up().to_bits(), nan2.to_bits());\n     }\n-    let nan0 = f32::NAN;\n-    let nan1 = f32::from_bits(f32::NAN.to_bits() ^ 0x002a_aaaa);\n-    let nan2 = f32::from_bits(f32::NAN.to_bits() ^ 0x0055_5555);\n-    assert_eq!(nan0.next_up().to_bits(), identity(nan0).to_bits());\n-    assert_eq!(nan1.next_up().to_bits(), identity(nan1).to_bits());\n-    assert_eq!(nan2.next_up().to_bits(), identity(nan2).to_bits());\n \n     assert_eq!(f32::NEG_INFINITY.next_up(), f32::MIN);\n     assert_eq!(f32::MIN.next_up(), -max_down);\n@@ -345,18 +345,18 @@ fn test_next_down() {\n     let smallest_normal = f32::from_bits(0x0080_0000);\n \n     // Check that NaNs roundtrip.\n-    // Because x87 can lose NaN bits when passed through a function, ensure the reference value\n-    // also passes through a function boundary.\n-    #[inline(never)]\n-    fn identity(x: f32) -> f32 {\n-        crate::hint::black_box(x)\n+    // Ignore test on x87 floating point, the code is still correct but these\n+    // platforms do not guarantee NaN payloads are preserved, which caused these\n+    // tests to fail.\n+    #[cfg(not(all(target_arch = \"x86\", not(target_feature = \"fxsr\"))))]\n+    {\n+        let nan0 = f32::NAN;\n+        let nan1 = f32::from_bits(f32::NAN.to_bits() ^ 0x002a_aaaa);\n+        let nan2 = f32::from_bits(f32::NAN.to_bits() ^ 0x0055_5555);\n+        assert_eq!(nan0.next_down().to_bits(), nan0.to_bits());\n+        assert_eq!(nan1.next_down().to_bits(), nan1.to_bits());\n+        assert_eq!(nan2.next_down().to_bits(), nan2.to_bits());\n     }\n-    let nan0 = f32::NAN;\n-    let nan1 = f32::from_bits(f32::NAN.to_bits() ^ 0x002a_aaaa);\n-    let nan2 = f32::from_bits(f32::NAN.to_bits() ^ 0x0055_5555);\n-    assert_eq!(nan0.next_down().to_bits(), identity(nan0).to_bits());\n-    assert_eq!(nan1.next_down().to_bits(), identity(nan1).to_bits());\n-    assert_eq!(nan2.next_down().to_bits(), identity(nan2).to_bits());\n \n     assert_eq!(f32::NEG_INFINITY.next_down(), f32::NEG_INFINITY);\n     assert_eq!(f32::MIN.next_down(), f32::NEG_INFINITY);"}, {"sha": "e545a10c489d047368610602b9f2c08df00ff167", "filename": "library/std/src/f64/tests.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fbe215af53da287dc220f319543a5ef4e75f6c54/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe215af53da287dc220f319543a5ef4e75f6c54/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs?ref=fbe215af53da287dc220f319543a5ef4e75f6c54", "patch": "@@ -298,18 +298,18 @@ fn test_next_up() {\n     let smallest_normal = f64::from_bits(0x0010_0000_0000_0000);\n \n     // Check that NaNs roundtrip.\n-    // Because x87 can lose NaN bits when passed through a function, ensure the reference value\n-    // also passes through a function boundary.\n-    #[inline(never)]\n-    fn identity(x: f64) -> f64 {\n-        crate::hint::black_box(x)\n+    // Ignore test on x87 floating point, the code is still correct but these\n+    // platforms do not guarantee NaN payloads are preserved, which caused these\n+    // tests to fail.\n+    #[cfg(not(all(target_arch = \"x86\", not(target_feature = \"fxsr\"))))]\n+    {\n+        let nan0 = f64::NAN;\n+        let nan1 = f64::from_bits(f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa);\n+        let nan2 = f64::from_bits(f64::NAN.to_bits() ^ 0x0005_5555_5555_5555);\n+        assert_eq!(nan0.next_up().to_bits(), nan0.to_bits());\n+        assert_eq!(nan1.next_up().to_bits(), nan1.to_bits());\n+        assert_eq!(nan2.next_up().to_bits(), nan2.to_bits());\n     }\n-    let nan0 = f64::NAN;\n-    let nan1 = f64::from_bits(f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa);\n-    let nan2 = f64::from_bits(f64::NAN.to_bits() ^ 0x0005_5555_5555_5555);\n-    assert_eq!(nan0.next_up().to_bits(), identity(nan0).to_bits());\n-    assert_eq!(nan1.next_up().to_bits(), identity(nan1).to_bits());\n-    assert_eq!(nan2.next_up().to_bits(), identity(nan2).to_bits());\n \n     assert_eq!(f64::NEG_INFINITY.next_up(), f64::MIN);\n     assert_eq!(f64::MIN.next_up(), -max_down);\n@@ -335,18 +335,18 @@ fn test_next_down() {\n     let smallest_normal = f64::from_bits(0x0010_0000_0000_0000);\n \n     // Check that NaNs roundtrip.\n-    // Because x87 can lose NaN bits when passed through a function, ensure the reference value\n-    // also passes through a function boundary.\n-    #[inline(never)]\n-    fn identity(x: f64) -> f64 {\n-        crate::hint::black_box(x)\n+    // Ignore test on x87 floating point, the code is still correct but these\n+    // platforms do not guarantee NaN payloads are preserved, which caused these\n+    // tests to fail.\n+    #[cfg(not(all(target_arch = \"x86\", not(target_feature = \"fxsr\"))))]\n+    {\n+        let nan0 = f64::NAN;\n+        let nan1 = f64::from_bits(f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa);\n+        let nan2 = f64::from_bits(f64::NAN.to_bits() ^ 0x0005_5555_5555_5555);\n+        assert_eq!(nan0.next_down().to_bits(), nan0.to_bits());\n+        assert_eq!(nan1.next_down().to_bits(), nan1.to_bits());\n+        assert_eq!(nan2.next_down().to_bits(), nan2.to_bits());\n     }\n-    let nan0 = f64::NAN;\n-    let nan1 = f64::from_bits(f64::NAN.to_bits() ^ 0x000a_aaaa_aaaa_aaaa);\n-    let nan2 = f64::from_bits(f64::NAN.to_bits() ^ 0x0005_5555_5555_5555);\n-    assert_eq!(nan0.next_down().to_bits(), identity(nan0).to_bits());\n-    assert_eq!(nan1.next_down().to_bits(), identity(nan1).to_bits());\n-    assert_eq!(nan2.next_down().to_bits(), identity(nan2).to_bits());\n \n     assert_eq!(f64::NEG_INFINITY.next_down(), f64::NEG_INFINITY);\n     assert_eq!(f64::MIN.next_down(), f64::NEG_INFINITY);"}]}