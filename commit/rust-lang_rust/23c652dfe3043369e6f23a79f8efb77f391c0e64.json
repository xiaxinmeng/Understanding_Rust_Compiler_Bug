{"sha": "23c652dfe3043369e6f23a79f8efb77f391c0e64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYzY1MmRmZTMwNDMzNjllNmYyM2E3OWY4ZWZiNzdmMzkxYzBlNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T17:39:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T17:39:37Z"}, "message": "Auto merge of #86866 - nikomatsakis:issue-84841, r=oli-obk\n\nHack: Ignore inference variables in certain queries\n\nFixes #84841\nFixes #86753\n\nSome queries are not built to accept types with inference variables, which can lead to ICEs. These queries probably ought to be converted to canonical form, but as a quick workaround, we can return conservative results in the case that inference variables are found.\n\nWe should file a follow-up issue (and update the FIXMEs...) to do the proper refactoring.\n\ncc `@arora-aman`\n\nr? `@oli-obk`", "tree": {"sha": "fad97ad30b360c54055b8583fb00f4cc55efd9f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fad97ad30b360c54055b8583fb00f4cc55efd9f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23c652dfe3043369e6f23a79f8efb77f391c0e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23c652dfe3043369e6f23a79f8efb77f391c0e64", "html_url": "https://github.com/rust-lang/rust/commit/23c652dfe3043369e6f23a79f8efb77f391c0e64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23c652dfe3043369e6f23a79f8efb77f391c0e64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90442458ac46b1d5eed752c316da25450f67285b", "url": "https://api.github.com/repos/rust-lang/rust/commits/90442458ac46b1d5eed752c316da25450f67285b", "html_url": "https://github.com/rust-lang/rust/commit/90442458ac46b1d5eed752c316da25450f67285b"}, {"sha": "492ba34a91612005336b8fbcc3cc16447ebc343a", "url": "https://api.github.com/repos/rust-lang/rust/commits/492ba34a91612005336b8fbcc3cc16447ebc343a", "html_url": "https://github.com/rust-lang/rust/commit/492ba34a91612005336b8fbcc3cc16447ebc343a"}], "stats": {"total": 226, "additions": 168, "deletions": 58}, "files": [{"sha": "ac953f4305c31d3622c9b512715e2d727c925fb3", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -46,13 +46,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     {\n         self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);\n \n-        Canonicalizer::canonicalize(\n-            value,\n-            Some(self),\n-            self.tcx,\n-            &CanonicalizeAllFreeRegions,\n-            query_state,\n-        )\n+        Canonicalizer::canonicalize(value, self, self.tcx, &CanonicalizeAllFreeRegions, query_state)\n     }\n \n     /// Canonicalizes a query *response* `V`. When we canonicalize a\n@@ -87,7 +81,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         let mut query_state = OriginalQueryValues::default();\n         Canonicalizer::canonicalize(\n             value,\n-            Some(self),\n+            self,\n             self.tcx,\n             &CanonicalizeQueryResponse,\n             &mut query_state,\n@@ -101,7 +95,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         let mut query_state = OriginalQueryValues::default();\n         Canonicalizer::canonicalize(\n             value,\n-            Some(self),\n+            self,\n             self.tcx,\n             &CanonicalizeUserTypeAnnotation,\n             &mut query_state,\n@@ -133,7 +127,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n         Canonicalizer::canonicalize(\n             value,\n-            Some(self),\n+            self,\n             self.tcx,\n             &CanonicalizeFreeRegionsOtherThanStatic,\n             query_state,\n@@ -275,7 +269,7 @@ impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n }\n \n struct Canonicalizer<'cx, 'tcx> {\n-    infcx: Option<&'cx InferCtxt<'cx, 'tcx>>,\n+    infcx: &'cx InferCtxt<'cx, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n     variables: SmallVec<[CanonicalVarInfo<'tcx>; 8]>,\n     query_state: &'cx mut OriginalQueryValues<'tcx>,\n@@ -316,7 +310,6 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             ty::ReVar(vid) => {\n                 let resolved_vid = self\n                     .infcx\n-                    .unwrap()\n                     .inner\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n@@ -343,7 +336,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n         match *t.kind() {\n             ty::Infer(ty::TyVar(vid)) => {\n                 debug!(\"canonical: type var found with vid {:?}\", vid);\n-                match self.infcx.unwrap().probe_ty_var(vid) {\n+                match self.infcx.probe_ty_var(vid) {\n                     // `t` could be a float / int variable; canonicalize that instead.\n                     Ok(t) => {\n                         debug!(\"(resolved to {:?})\", t);\n@@ -429,7 +422,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n         match ct.val {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 debug!(\"canonical: const var found with vid {:?}\", vid);\n-                match self.infcx.unwrap().probe_const_var(vid) {\n+                match self.infcx.probe_const_var(vid) {\n                     Ok(c) => {\n                         debug!(\"(resolved to {:?})\", c);\n                         return self.fold_const(c);\n@@ -476,7 +469,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// `canonicalize_query` and `canonicalize_response`.\n     fn canonicalize<V>(\n         value: V,\n-        infcx: Option<&InferCtxt<'_, 'tcx>>,\n+        infcx: &InferCtxt<'_, 'tcx>,\n         tcx: TyCtxt<'tcx>,\n         canonicalize_region_mode: &dyn CanonicalizeRegionMode,\n         query_state: &mut OriginalQueryValues<'tcx>,\n@@ -610,7 +603,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n \n     /// Returns the universe in which `vid` is defined.\n     fn region_var_universe(&self, vid: ty::RegionVid) -> ty::UniverseIndex {\n-        self.infcx.unwrap().inner.borrow_mut().unwrap_region_constraints().var_universe(vid)\n+        self.infcx.inner.borrow_mut().unwrap_region_constraints().var_universe(vid)\n     }\n \n     /// Creates a canonical variable (with the given `info`)\n@@ -631,7 +624,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// *that*. Otherwise, create a new canonical variable for\n     /// `ty_var`.\n     fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo<'tcx>, ty_var: Ty<'tcx>) -> Ty<'tcx> {\n-        let infcx = self.infcx.expect(\"encountered ty-var without infcx\");\n+        let infcx = self.infcx;\n         let bound_to = infcx.shallow_resolve(ty_var);\n         if bound_to != ty_var {\n             self.fold_ty(bound_to)\n@@ -650,7 +643,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         info: CanonicalVarInfo<'tcx>,\n         const_var: &'tcx ty::Const<'tcx>,\n     ) -> &'tcx ty::Const<'tcx> {\n-        let infcx = self.infcx.expect(\"encountered const-var without infcx\");\n+        let infcx = self.infcx;\n         let bound_to = infcx.shallow_resolve(const_var);\n         if bound_to != const_var {\n             self.fold_const(bound_to)"}, {"sha": "0986a46572969b4293dd6902c5d7b6f6fc6ed086", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -1559,9 +1559,22 @@ rustc_queries! {\n         desc { \"evaluating trait selection obligation `{}`\", goal.value }\n     }\n \n+    /// Evaluates whether the given type implements the given trait\n+    /// in the given environment.\n+    ///\n+    /// The inputs are:\n+    ///\n+    /// - the def-id of the trait\n+    /// - the self type\n+    /// - the *other* type parameters of the trait, excluding the self-type\n+    /// - the parameter environment\n+    ///\n+    /// FIXME. If the type, trait, or environment has inference variables,\n+    /// this yields `EvaluatedToUnknown`. It should be refactored\n+    /// to use canonicalization, really.\n     query type_implements_trait(\n         key: (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>, )\n-    ) -> bool {\n+    ) -> traits::EvaluationResult {\n         desc { \"evaluating `type_implements_trait` `{:?}`\", key }\n     }\n "}, {"sha": "11399506b96e427373baa68ef7b1b9c53598f240", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -88,23 +88,32 @@ struct NormalizeAfterErasingRegionsFolder<'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n+impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n+    fn normalize_generic_arg_after_erasing_regions(\n+        &self,\n+        arg: ty::GenericArg<'tcx>,\n+    ) -> ty::GenericArg<'tcx> {\n+        let arg = self.param_env.and(arg);\n+        self.tcx.normalize_generic_arg_after_erasing_regions(arg)\n+    }\n+}\n+\n impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let arg = self.param_env.and(ty.into());\n-        self.tcx.normalize_generic_arg_after_erasing_regions(arg).expect_ty()\n+        self.normalize_generic_arg_after_erasing_regions(ty.into()).expect_ty()\n     }\n \n     fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        let arg = self.param_env.and(c.into());\n-        self.tcx.normalize_generic_arg_after_erasing_regions(arg).expect_const()\n+        self.normalize_generic_arg_after_erasing_regions(c.into()).expect_const()\n     }\n \n     #[inline]\n     fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        // FIXME: This *probably* needs canonicalization too!\n         let arg = self.param_env.and(c);\n         self.tcx.normalize_mir_const_after_erasing_regions(arg)\n     }"}, {"sha": "6344327e6aa9a310f87aedda3926d0e483c4aa70", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -816,6 +816,15 @@ impl<'tcx> ty::TyS<'tcx> {\n                     [component_ty] => component_ty,\n                     _ => self,\n                 };\n+\n+                // FIXME(#86868): We should be canonicalizing, or else moving this to a method of inference\n+                // context, or *something* like that, but for now just avoid passing inference\n+                // variables to queries that can't cope with them. Instead, conservatively\n+                // return \"true\" (may change drop order).\n+                if query_ty.needs_infer() {\n+                    return true;\n+                }\n+\n                 // This doesn't depend on regions, so try to minimize distinct\n                 // query keys used.\n                 let erased = tcx.normalize_erasing_regions(param_env, query_ty);"}, {"sha": "4be4372c0393aba6cf53c05a9635c1a7144b47bc", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::{\n     FakeReadCause, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n-use rustc_middle::ty::{self, suggest_constraining_type_param, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n@@ -1329,18 +1329,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let return_ty = tcx.erase_regions(return_ty);\n \n             // to avoid panics\n-            if !return_ty.has_infer_types() {\n-                if let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) {\n-                    if tcx.type_implements_trait((iter_trait, return_ty, ty_params, self.param_env))\n-                    {\n-                        if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(return_span) {\n-                            err.span_suggestion_hidden(\n-                                return_span,\n-                                \"use `.collect()` to allocate the iterator\",\n-                                format!(\"{}{}\", snippet, \".collect::<Vec<_>>()\"),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        }\n+            if let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) {\n+                if tcx\n+                    .type_implements_trait((iter_trait, return_ty, ty_params, self.param_env))\n+                    .must_apply_modulo_regions()\n+                {\n+                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(return_span) {\n+                        err.span_suggestion_hidden(\n+                            return_span,\n+                            \"use `.collect()` to allocate the iterator\",\n+                            format!(\"{}{}\", snippet, \".collect::<Vec<_>>()\"),\n+                            Applicability::MaybeIncorrect,\n+                        );\n                     }\n                 }\n             }"}, {"sha": "dc765f5228b9dc39a39b8e1268ecdb768d28dad6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -2396,7 +2396,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     normalized_ty,\n                 );\n                 debug!(\"suggest_await_before_try: try_trait_obligation {:?}\", try_obligation);\n-                if self.predicate_may_hold(&try_obligation) && impls_future {\n+                if self.predicate_may_hold(&try_obligation)\n+                    && impls_future.must_apply_modulo_regions()\n+                {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                         if snippet.ends_with('?') {\n                             err.span_suggestion_verbose("}, {"sha": "e48aab6f46f4b088733912ab62631e3efdeafd17", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -542,8 +542,7 @@ fn vtable_trait_first_method_offset<'tcx>(\n }\n \n /// Check whether a `ty` implements given trait(trait_def_id).\n-///\n-/// NOTE: Always return `false` for a type which needs inference.\n+/// See query definition for details.\n fn type_implements_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: (\n@@ -552,7 +551,7 @@ fn type_implements_trait<'tcx>(\n         SubstsRef<'tcx>,\n         ParamEnv<'tcx>,\n     ),\n-) -> bool {\n+) -> EvaluationResult {\n     let (trait_def_id, ty, params, param_env) = key;\n \n     debug!(\n@@ -562,13 +561,22 @@ fn type_implements_trait<'tcx>(\n \n     let trait_ref = ty::TraitRef { def_id: trait_def_id, substs: tcx.mk_substs_trait(ty, params) };\n \n+    // FIXME(#86868): If there are inference variables anywhere, just give up and assume\n+    // we don't know the answer. This works around the ICEs that would result from\n+    // using those inference variables within the `infer_ctxt` we create below.\n+    // Really we should be using canonicalized variables, or perhaps removing\n+    // this query altogether.\n+    if (trait_ref, param_env).needs_infer() {\n+        return EvaluationResult::EvaluatedToUnknown;\n+    }\n+\n     let obligation = Obligation {\n         cause: ObligationCause::dummy(),\n         param_env,\n         recursion_depth: 0,\n         predicate: trait_ref.without_const().to_predicate(tcx),\n     };\n-    tcx.infer_ctxt().enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n+    tcx.infer_ctxt().enter(|infcx| infcx.evaluate_obligation_no_overflow(&obligation))\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {"}, {"sha": "a09fad3b6b78ad72b0b87e5cbba12a6efdbc04c3", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -440,16 +440,10 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             let expr_ty = fcx.resolve_vars_if_possible(self.expr_ty);\n                             let expr_ty = fcx.tcx.erase_regions(expr_ty);\n                             let ty_params = fcx.tcx.mk_substs_trait(expr_ty, &[]);\n-                            // Check for infer types because cases like `Option<{integer}>` would\n-                            // panic otherwise.\n-                            if !expr_ty.has_infer_types()\n-                                && !ty.has_infer_types()\n-                                && fcx.tcx.type_implements_trait((\n-                                    from_trait,\n-                                    ty,\n-                                    ty_params,\n-                                    fcx.param_env,\n-                                ))\n+                            if fcx\n+                                .tcx\n+                                .type_implements_trait((from_trait, ty, ty_params, fcx.param_env))\n+                                .must_apply_modulo_regions()\n                             {\n                                 label = false;\n                                 err.span_suggestion("}, {"sha": "e5f18778f43e62171fd089c97972133ac20cd328", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -961,12 +961,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let is_drop_defined_for_ty = |ty: Ty<'tcx>| {\n             let drop_trait = self.tcx.require_lang_item(hir::LangItem::Drop, Some(closure_span));\n             let ty_params = self.tcx.mk_substs_trait(base_path_ty, &[]);\n-            self.tcx.type_implements_trait((\n-                drop_trait,\n-                ty,\n-                ty_params,\n-                self.tcx.param_env(closure_def_id.expect_local()),\n-            ))\n+            self.tcx\n+                .type_implements_trait((\n+                    drop_trait,\n+                    ty,\n+                    ty_params,\n+                    self.tcx.param_env(closure_def_id.expect_local()),\n+                ))\n+                .must_apply_modulo_regions()\n         };\n \n         let is_drop_defined_for_ty = is_drop_defined_for_ty(base_path_ty);"}, {"sha": "ba3a1617b9c1d57fe4c2f97c3d5c12225ec979af", "filename": "src/test/ui/async-await/issue-84841.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+\n+fn main() {\n+\n+}\n+\n+async fn foo() {\n+    // Adding an .await here avoids the ICE\n+    test()?;\n+    //~^ ERROR the `?` operator can only be applied to values that implement `Try`\n+    //~| ERROR the `?` operator can only be used in an async function that returns\n+}\n+\n+// Removing the const generic parameter here avoids the ICE\n+async fn test<const N: usize>() {\n+}"}, {"sha": "170dcf581ed263ca9303baac07cc097152ddfd66", "filename": "src/test/ui/async-await/issue-84841.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -0,0 +1,28 @@\n+error[E0277]: the `?` operator can only be applied to values that implement `Try`\n+  --> $DIR/issue-84841.rs:9:5\n+   |\n+LL |     test()?;\n+   |     ^^^^^^^ the `?` operator cannot be applied to type `impl Future`\n+   |\n+   = help: the trait `Try` is not implemented for `impl Future`\n+   = note: required by `branch`\n+\n+error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/issue-84841.rs:9:11\n+   |\n+LL |   async fn foo() {\n+   |  ________________-\n+LL | |     // Adding an .await here avoids the ICE\n+LL | |     test()?;\n+   | |           ^ cannot use the `?` operator in an async function that returns `()`\n+LL | |\n+LL | |\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n+   |\n+   = help: the trait `FromResidual<_>` is not implemented for `()`\n+   = note: required by `from_residual`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fce9cac627b5e970a46d0cf515898a011014071d", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/issue-86753.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-86753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-86753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-86753.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -0,0 +1,34 @@\n+// edition:2018\n+// check-pass\n+\n+#![warn(rust_2021_compatibility)]\n+\n+use std::future::Future;\n+\n+struct Runtime;\n+\n+impl Runtime {\n+    pub fn block_on<F: Future>(&self, _future: F) -> F::Output {\n+        unimplemented!()\n+    }\n+}\n+\n+pub fn http<F, Fut>(_func: F)\n+where\n+    F: Fn() -> Fut,\n+    Fut: Future<Output = ()>,\n+{\n+    let rt = Runtime {};\n+    let srv = rt.block_on(async move { serve(move || async move { unimplemented!() }) });\n+    let _ = || rt.block_on(async { srv });\n+}\n+\n+pub struct Server<S> {\n+    _marker: std::marker::PhantomData<S>,\n+}\n+\n+pub fn serve<S>(_new_service: S) -> Server<S> {\n+    unimplemented!()\n+}\n+\n+fn main() { }"}, {"sha": "2808fc35e2a1b2d01215e8837b3679fa59fa3177", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c652dfe3043369e6f23a79f8efb77f391c0e64/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c652dfe3043369e6f23a79f8efb77f391c0e64/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=23c652dfe3043369e6f23a79f8efb77f391c0e64", "patch": "@@ -128,7 +128,9 @@ pub fn implements_trait<'tcx>(\n         return false;\n     }\n     let ty_params = cx.tcx.mk_substs(ty_params.iter());\n-    cx.tcx.type_implements_trait((trait_id, ty, ty_params, cx.param_env))\n+    cx.tcx\n+        .type_implements_trait((trait_id, ty, ty_params, cx.param_env))\n+        .must_apply_modulo_regions()\n }\n \n /// Checks whether this type implements `Drop`."}]}