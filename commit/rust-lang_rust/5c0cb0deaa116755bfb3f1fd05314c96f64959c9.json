{"sha": "5c0cb0deaa116755bfb3f1fd05314c96f64959c9", "node_id": "C_kwDOAAsO6NoAKDVjMGNiMGRlYWExMTY3NTViZmIzZjFmZDA1MzE0Yzk2ZjY0OTU5Yzk", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-19T10:07:53Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-19T10:33:42Z"}, "message": "[`needless_return`] Recursively remove unneeded semicolons", "tree": {"sha": "e740c396caffa67f615ce703d2a9a8888b33c787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e740c396caffa67f615ce703d2a9a8888b33c787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0cb0deaa116755bfb3f1fd05314c96f64959c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0cb0deaa116755bfb3f1fd05314c96f64959c9", "html_url": "https://github.com/rust-lang/rust/commit/5c0cb0deaa116755bfb3f1fd05314c96f64959c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0cb0deaa116755bfb3f1fd05314c96f64959c9/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23d1d07861457a42a401ea512b11614952339497", "url": "https://api.github.com/repos/rust-lang/rust/commits/23d1d07861457a42a401ea512b11614952339497", "html_url": "https://github.com/rust-lang/rust/commit/23d1d07861457a42a401ea512b11614952339497"}], "stats": {"total": 308, "additions": 244, "deletions": 64}, "files": [{"sha": "f7ceb415a798c90d81af19668bffd8731e5547a8", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5c0cb0deaa116755bfb3f1fd05314c96f64959c9/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0cb0deaa116755bfb3f1fd05314c96f64959c9/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=5c0cb0deaa116755bfb3f1fd05314c96f64959c9", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::{span_lint_hir_and_then, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint_and_then, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_opt, snippet_with_context};\n use clippy_utils::{fn_def_id, path_to_local_id};\n use if_chain::if_chain;\n@@ -9,7 +9,7 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Span;\n+use rustc_span::source_map::{Span, DUMMY_SP};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -73,8 +73,8 @@ enum RetReplacement {\n }\n \n impl RetReplacement {\n-    fn sugg_help(&self) -> &'static str {\n-        match *self {\n+    fn sugg_help(self) -> &'static str {\n+        match self {\n             Self::Empty => \"remove `return`\",\n             Self::Block => \"replace `return` with an empty block\",\n             Self::Unit => \"replace `return` with a unit value\",\n@@ -160,51 +160,65 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n                 } else {\n                     RetReplacement::Empty\n                 };\n-                check_final_expr(cx, body.value, body.value.span, replacement);\n+                check_final_expr(cx, body.value, vec![], replacement);\n             },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n-                check_block_return(cx, &body.value.kind);\n+                check_block_return(cx, &body.value.kind, vec![]);\n             },\n         }\n     }\n }\n \n // if `expr` is a block, check if there are needless returns in it\n-fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>) {\n+fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>, semi_spans: Vec<Span>) {\n     if let ExprKind::Block(block, _) = expr_kind {\n         if let Some(block_expr) = block.expr {\n-            check_final_expr(cx, block_expr, block_expr.span, RetReplacement::Empty);\n+            check_final_expr(cx, block_expr, semi_spans, RetReplacement::Empty);\n         } else if let Some(stmt) = block.stmts.iter().last() {\n             match stmt.kind {\n-                StmtKind::Expr(expr) | StmtKind::Semi(expr) => {\n-                    check_final_expr(cx, expr, stmt.span, RetReplacement::Empty);\n+                StmtKind::Expr(expr) => {\n+                    check_final_expr(cx, expr, semi_spans, RetReplacement::Empty);\n+                },\n+                StmtKind::Semi(semi_expr) => {\n+                    let mut semi_spans_and_this_one = semi_spans;\n+                    // we only want the span containing the semicolon so we can remove it later. From `entry.rs:382`\n+                    semi_spans_and_this_one.push(stmt.span.trim_start(semi_expr.span).unwrap_or(DUMMY_SP));\n+                    check_final_expr(cx, semi_expr, semi_spans_and_this_one, RetReplacement::Empty);\n                 },\n                 _ => (),\n             }\n         }\n     }\n }\n \n-fn check_final_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>, span: Span, replacement: RetReplacement) {\n-    match &expr.peel_drop_temps().kind {\n+fn check_final_expr<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'tcx>,\n+    semi_spans: Vec<Span>, /* containing all the places where we would need to remove semicolons if finding an\n+                            * needless return */\n+    replacement: RetReplacement,\n+) {\n+    let peeled_drop_expr = expr.peel_drop_temps();\n+    match &peeled_drop_expr.kind {\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {\n             if cx.tcx.hir().attrs(expr.hir_id).is_empty() {\n                 let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n                 if !borrows {\n                     emit_return_lint(\n                         cx,\n-                        span,\n+                        peeled_drop_expr.span,\n+                        semi_spans,\n                         inner.as_ref().map(|i| i.span),\n                         replacement,\n                     );\n                 }\n             }\n         },\n         ExprKind::If(_, then, else_clause_opt) => {\n-            check_block_return(cx, &then.kind);\n+            check_block_return(cx, &then.kind, semi_spans.clone());\n             if let Some(else_clause) = else_clause_opt {\n-                check_block_return(cx, &else_clause.kind)\n+                check_block_return(cx, &else_clause.kind, semi_spans);\n             }\n         },\n         // a match expr, check all arms\n@@ -213,17 +227,18 @@ fn check_final_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>, span:\n         // (except for unit type functions) so we don't match it\n         ExprKind::Match(_, arms, MatchSource::Normal) => {\n             for arm in arms.iter() {\n-                check_final_expr(cx, arm.body, arm.body.span, RetReplacement::Unit);\n+                check_final_expr(cx, arm.body, semi_spans.clone(), RetReplacement::Unit);\n             }\n         },\n         // if it's a whole block, check it\n-        other_expr_kind => check_block_return(cx, &other_expr_kind),\n+        other_expr_kind => check_block_return(cx, other_expr_kind, semi_spans),\n     }\n }\n \n fn emit_return_lint(\n     cx: &LateContext<'_>,\n     ret_span: Span,\n+    semi_spans: Vec<Span>,\n     inner_span: Option<Span>,\n     replacement: RetReplacement,\n ) {\n@@ -243,15 +258,13 @@ fn emit_return_lint(\n     } else {\n         replacement.sugg_help()\n     };\n-    span_lint_and_then(\n-        cx,\n-        NEEDLESS_RETURN,\n-        ret_span,\n-        \"unneeded `return` statement\",\n-        |diag| {\n-            diag.span_suggestion(ret_span, sugg_help, return_replacement, applicability);\n-        },\n-    );\n+    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n+        diag.span_suggestion_hidden(ret_span, sugg_help, return_replacement, applicability);\n+        // for each parent statement, we need to remove the semicolon\n+        for semi_stmt_span in semi_spans {\n+            diag.tool_only_span_suggestion(semi_stmt_span, \"remove this semicolon\", \"\", applicability);\n+        }\n+    });\n }\n \n fn last_statement_borrows<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {"}, {"sha": "a5e28b9b1a447320fbfd46a9c837de441017d4b4", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5c0cb0deaa116755bfb3f1fd05314c96f64959c9/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5c0cb0deaa116755bfb3f1fd05314c96f64959c9/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=5c0cb0deaa116755bfb3f1fd05314c96f64959c9", "patch": "@@ -233,4 +233,31 @@ fn issue_9361() -> i32 {\n     return 1 + 2;\n }\n \n+fn issue8336(x: i32) -> bool {\n+    if x > 0 {\n+        println!(\"something\");\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+fn issue8156(x: u8) -> u64 {\n+    match x {\n+        80 => {\n+            10\n+        },\n+        _ => {\n+            100\n+        },\n+    }\n+}\n+\n+// Ideally the compiler should throw `unused_braces` in this case\n+fn issue9192() -> i32 {\n+    {\n+        0\n+    }\n+}\n+\n fn main() {}"}, {"sha": "49fd49c72936ef35a27ad49881fd8eba248caae5", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5c0cb0deaa116755bfb3f1fd05314c96f64959c9/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0cb0deaa116755bfb3f1fd05314c96f64959c9/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=5c0cb0deaa116755bfb3f1fd05314c96f64959c9", "patch": "@@ -233,4 +233,31 @@ fn issue_9361() -> i32 {\n     return 1 + 2;\n }\n \n+fn issue8336(x: i32) -> bool {\n+    if x > 0 {\n+        println!(\"something\");\n+        return true;\n+    } else {\n+        return false;\n+    };\n+}\n+\n+fn issue8156(x: u8) -> u64 {\n+    match x {\n+        80 => {\n+            return 10;\n+        },\n+        _ => {\n+            return 100;\n+        },\n+    };\n+}\n+\n+// Ideally the compiler should throw `unused_braces` in this case\n+fn issue9192() -> i32 {\n+    {\n+        return 0;\n+    };\n+}\n+\n fn main() {}"}, {"sha": "d8dba766bf4ae8bef692c433ad039c207952bc8e", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 151, "deletions": 38, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/5c0cb0deaa116755bfb3f1fd05314c96f64959c9/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c0cb0deaa116755bfb3f1fd05314c96f64959c9/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=5c0cb0deaa116755bfb3f1fd05314c96f64959c9", "patch": "@@ -2,225 +2,338 @@ error: unneeded `return` statement\n   --> $DIR/needless_return.rs:27:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:31:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:36:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:38:9\n    |\n LL |         return false;\n-   |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n+   |         ^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:44:17\n    |\n LL |         true => return false,\n-   |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n+   |                 ^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:46:13\n    |\n LL |             return true;\n-   |             ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |             ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:53:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:55:16\n    |\n LL |     let _ = || return true;\n-   |                ^^^^^^^^^^^ help: remove `return`: `true`\n+   |                ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:59:5\n    |\n LL |     return the_answer!();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:63:5\n    |\n LL |     return;\n-   |     ^^^^^^^ help: remove `return`\n+   |     ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:68:9\n    |\n LL |         return;\n-   |         ^^^^^^^ help: remove `return`\n+   |         ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:70:9\n    |\n LL |         return;\n-   |         ^^^^^^^ help: remove `return`\n+   |         ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:77:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with a unit value: `()`\n+   |              ^^^^^^\n+   |\n+   = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:86:13\n    |\n LL |             return;\n-   |             ^^^^^^^ help: remove `return`\n+   |             ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:88:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with a unit value: `()`\n+   |              ^^^^^^\n+   |\n+   = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:101:9\n    |\n LL |         return String::from(\"test\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:103:9\n    |\n LL |         return String::new();\n-   |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:125:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n-   |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n+   |                                ^^^^^^\n+   |\n+   = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:130:13\n    |\n LL |             return;\n-   |             ^^^^^^^ help: remove `return`\n+   |             ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:132:20\n    |\n LL |         let _ = || return;\n-   |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n+   |                    ^^^^^^\n+   |\n+   = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:138:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n-   |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n+   |                                ^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:147:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:151:5\n    |\n LL |     return true;\n-   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:156:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:158:9\n    |\n LL |         return false;\n-   |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n+   |         ^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:164:17\n    |\n LL |         true => return false,\n-   |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n+   |                 ^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:166:13\n    |\n LL |             return true;\n-   |             ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |             ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:173:9\n    |\n LL |         return true;\n-   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:175:16\n    |\n LL |     let _ = || return true;\n-   |                ^^^^^^^^^^^ help: remove `return`: `true`\n+   |                ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:179:5\n    |\n LL |     return the_answer!();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:183:5\n    |\n LL |     return;\n-   |     ^^^^^^^ help: remove `return`\n+   |     ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:188:9\n    |\n LL |         return;\n-   |         ^^^^^^^ help: remove `return`\n+   |         ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:190:9\n    |\n LL |         return;\n-   |         ^^^^^^^ help: remove `return`\n+   |         ^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:197:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with a unit value: `()`\n+   |              ^^^^^^\n+   |\n+   = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:210:9\n    |\n LL |         return String::from(\"test\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:212:9\n    |\n LL |         return String::new();\n-   |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n \n error: unneeded `return` statement\n   --> $DIR/needless_return.rs:228:5\n    |\n LL |     return format!(\"Hello {}\", \"world!\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `format!(\"Hello {}\", \"world!\")`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:239:9\n+   |\n+LL |         return true;\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:241:9\n+   |\n+LL |         return false;\n+   |         ^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:248:13\n+   |\n+LL |             return 10;\n+   |             ^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:251:13\n+   |\n+LL |             return 100;\n+   |             ^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:259:9\n+   |\n+LL |         return 0;\n+   |         ^^^^^^^^\n+   |\n+   = help: remove `return`\n \n-error: aborting due to 37 previous errors\n+error: aborting due to 42 previous errors\n "}]}