{"sha": "b102ea479ddfea0e72757427fc73ec487d69aac1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMDJlYTQ3OWRkZmVhMGU3Mjc1NzQyN2ZjNzNlYzQ4N2Q2OWFhYzE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-08T18:28:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-08T18:28:13Z"}, "message": "Rollup merge of #81356 - ehuss:libtest-filters, r=m-ou-se\n\nlibtest: allow multiple filters\n\nLibtest ignores any filters after the first. This changes it so that if multiple filters are passed, it will test against all of them.\n\nThis also affects compiletest to do the same.\n\nCloses #30422", "tree": {"sha": "d31df558f40bdc2fbd8574e4c87f1cd7ddb10053", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d31df558f40bdc2fbd8574e4c87f1cd7ddb10053"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b102ea479ddfea0e72757427fc73ec487d69aac1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIYK+CRBK7hj4Ov3rIwAAdHIIAEughHr/FYiQGgmN4VLxjzlR\nKN4dBhMjtyagHr8DCNMd4PAX5K/1noBa+zrpmRwwB1J1/CTng38SNeMZUi9N74wU\nHpQaCvruEodx0Cd9gEzmZbLm7kNsy0CxrPy3WjdqeEM+ZGj9Z5raW/Hj7VhNL+qn\nVGlhfUEz64KkwqLV6tI/LHO6CiXzvFgpT0rHAD+mZOm2XGgVPfqTTFzllXhSNNLJ\nSR1ork70xadD8O3huR9m4x+ei1iiKJUlswhjpol0lH70gSBmqv+hO8QE88wISFrU\nhJKcbMmFq13Gg3GR4x2/QF1Tg7jq4VI4fnF9+HqDroU265xpkGOIFGFfQMrb8V8=\n=SfiU\n-----END PGP SIGNATURE-----\n", "payload": "tree d31df558f40bdc2fbd8574e4c87f1cd7ddb10053\nparent 35ebbe3e019905911f6d84761683563a0ca4426b\nparent 30891b84ff3886e076c2fa0a8886ad631196db9a\nauthor Mara Bos <m-ou.se@m-ou.se> 1612808893 +0100\ncommitter GitHub <noreply@github.com> 1612808893 +0100\n\nRollup merge of #81356 - ehuss:libtest-filters, r=m-ou-se\n\nlibtest: allow multiple filters\n\nLibtest ignores any filters after the first. This changes it so that if multiple filters are passed, it will test against all of them.\n\nThis also affects compiletest to do the same.\n\nCloses #30422\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b102ea479ddfea0e72757427fc73ec487d69aac1", "html_url": "https://github.com/rust-lang/rust/commit/b102ea479ddfea0e72757427fc73ec487d69aac1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b102ea479ddfea0e72757427fc73ec487d69aac1/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35ebbe3e019905911f6d84761683563a0ca4426b", "url": "https://api.github.com/repos/rust-lang/rust/commits/35ebbe3e019905911f6d84761683563a0ca4426b", "html_url": "https://github.com/rust-lang/rust/commit/35ebbe3e019905911f6d84761683563a0ca4426b"}, {"sha": "30891b84ff3886e076c2fa0a8886ad631196db9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/30891b84ff3886e076c2fa0a8886ad631196db9a", "html_url": "https://github.com/rust-lang/rust/commit/30891b84ff3886e076c2fa0a8886ad631196db9a"}], "stats": {"total": 90, "additions": 63, "deletions": 27}, "files": [{"sha": "c0b5197e997bbc0dd9ee671eccc1745f954e6fcd", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b102ea479ddfea0e72757427fc73ec487d69aac1/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b102ea479ddfea0e72757427fc73ec487d69aac1/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=b102ea479ddfea0e72757427fc73ec487d69aac1", "patch": "@@ -10,7 +10,7 @@ use super::time::TestTimeOptions;\n #[derive(Debug)]\n pub struct TestOpts {\n     pub list: bool,\n-    pub filter: Option<String>,\n+    pub filters: Vec<String>,\n     pub filter_exact: bool,\n     pub force_run_in_process: bool,\n     pub exclude_should_panic: bool,\n@@ -148,12 +148,13 @@ fn optgroups() -> getopts::Options {\n }\n \n fn usage(binary: &str, options: &getopts::Options) {\n-    let message = format!(\"Usage: {} [OPTIONS] [FILTER]\", binary);\n+    let message = format!(\"Usage: {} [OPTIONS] [FILTERS...]\", binary);\n     println!(\n         r#\"{usage}\n \n The FILTER string is tested against the name of all tests, and only those\n-tests whose names contain the filter are run.\n+tests whose names contain the filter are run. Multiple filter strings may\n+be passed, which will run all tests matching any of the filters.\n \n By default, all tests are run in parallel. This can be altered with the\n --test-threads flag or the RUST_TEST_THREADS environment variable when running\n@@ -243,7 +244,7 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n \n     let logfile = get_log_file(&matches)?;\n     let run_ignored = get_run_ignored(&matches, include_ignored)?;\n-    let filter = get_filter(&matches)?;\n+    let filters = matches.free.clone();\n     let nocapture = get_nocapture(&matches)?;\n     let test_threads = get_test_threads(&matches)?;\n     let color = get_color_config(&matches)?;\n@@ -253,7 +254,7 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n \n     let test_opts = TestOpts {\n         list,\n-        filter,\n+        filters,\n         filter_exact: exact,\n         force_run_in_process,\n         exclude_should_panic,\n@@ -397,12 +398,6 @@ fn get_run_ignored(matches: &getopts::Matches, include_ignored: bool) -> OptPart\n     Ok(run_ignored)\n }\n \n-fn get_filter(matches: &getopts::Matches) -> OptPartRes<Option<String>> {\n-    let filter = if !matches.free.is_empty() { Some(matches.free[0].clone()) } else { None };\n-\n-    Ok(filter)\n-}\n-\n fn get_allow_unstable(matches: &getopts::Matches) -> OptPartRes<bool> {\n     let mut allow_unstable = false;\n "}, {"sha": "c38a8c965be6137829a31bc4df8e7c133e5448cd", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b102ea479ddfea0e72757427fc73ec487d69aac1/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b102ea479ddfea0e72757427fc73ec487d69aac1/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=b102ea479ddfea0e72757427fc73ec487d69aac1", "patch": "@@ -396,8 +396,8 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     };\n \n     // Remove tests that don't match the test filter\n-    if let Some(ref filter) = opts.filter {\n-        filtered.retain(|test| matches_filter(test, filter));\n+    if !opts.filters.is_empty() {\n+        filtered.retain(|test| opts.filters.iter().any(|filter| matches_filter(test, filter)));\n     }\n \n     // Skip tests that match any of the skip filters"}, {"sha": "e3c9b3869154a35d80f7113c96da17964dc54414", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b102ea479ddfea0e72757427fc73ec487d69aac1/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b102ea479ddfea0e72757427fc73ec487d69aac1/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=b102ea479ddfea0e72757427fc73ec487d69aac1", "patch": "@@ -34,7 +34,7 @@ impl TestOpts {\n     fn new() -> TestOpts {\n         TestOpts {\n             list: false,\n-            filter: None,\n+            filters: vec![],\n             filter_exact: false,\n             force_run_in_process: false,\n             exclude_should_panic: false,\n@@ -473,43 +473,60 @@ pub fn exact_filter_match() {\n     }\n \n     let substr =\n-        filter_tests(&TestOpts { filter: Some(\"base\".into()), ..TestOpts::new() }, tests());\n+        filter_tests(&TestOpts { filters: vec![\"base\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 4);\n \n-    let substr = filter_tests(&TestOpts { filter: Some(\"bas\".into()), ..TestOpts::new() }, tests());\n+    let substr =\n+        filter_tests(&TestOpts { filters: vec![\"bas\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 4);\n \n     let substr =\n-        filter_tests(&TestOpts { filter: Some(\"::test\".into()), ..TestOpts::new() }, tests());\n+        filter_tests(&TestOpts { filters: vec![\"::test\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 3);\n \n     let substr =\n-        filter_tests(&TestOpts { filter: Some(\"base::test\".into()), ..TestOpts::new() }, tests());\n+        filter_tests(&TestOpts { filters: vec![\"base::test\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 3);\n \n+    let substr = filter_tests(\n+        &TestOpts { filters: vec![\"test1\".into(), \"test2\".into()], ..TestOpts::new() },\n+        tests(),\n+    );\n+    assert_eq!(substr.len(), 2);\n+\n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"base\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"base\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 1);\n \n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"bas\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"bas\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 0);\n \n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"::test\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"::test\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 0);\n \n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"base::test\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"base::test\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 1);\n+\n+    let exact = filter_tests(\n+        &TestOpts {\n+            filters: vec![\"base\".into(), \"base::test\".into()],\n+            filter_exact: true,\n+            ..TestOpts::new()\n+        },\n+        tests(),\n+    );\n+    assert_eq!(exact.len(), 2);\n }\n \n #[test]"}, {"sha": "04dd83b7fd0f79a4c43ac9272aa92f3b01fc0e5a", "filename": "src/test/ui/test-attrs/test-filter-multiple.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b102ea479ddfea0e72757427fc73ec487d69aac1/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b102ea479ddfea0e72757427fc73ec487d69aac1/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.rs?ref=b102ea479ddfea0e72757427fc73ec487d69aac1", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+// compile-flags: --test\n+// run-flags: --test-threads=1 test1 test2\n+// check-run-results\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// ignore-emscripten no threads support\n+\n+#[test]\n+fn test1() {}\n+\n+#[test]\n+fn test2() {}\n+\n+#[test]\n+fn test3() {\n+    panic!(\"this should not run\");\n+}"}, {"sha": "1aa684ed5073a53dcacc2d54a600e6327b216da4", "filename": "src/test/ui/test-attrs/test-filter-multiple.run.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b102ea479ddfea0e72757427fc73ec487d69aac1/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b102ea479ddfea0e72757427fc73ec487d69aac1/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.run.stdout?ref=b102ea479ddfea0e72757427fc73ec487d69aac1", "patch": "@@ -0,0 +1,7 @@\n+\n+running 2 tests\n+test test1 ... ok\n+test test2 ... ok\n+\n+test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in $TIME\n+"}, {"sha": "cde4bfe288d2e1b66ea180f2ed28f9750b83ba54", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b102ea479ddfea0e72757427fc73ec487d69aac1/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b102ea479ddfea0e72757427fc73ec487d69aac1/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=b102ea479ddfea0e72757427fc73ec487d69aac1", "patch": "@@ -240,8 +240,8 @@ pub struct Config {\n     /// Run ignored tests\n     pub run_ignored: bool,\n \n-    /// Only run tests that match this filter\n-    pub filter: Option<String>,\n+    /// Only run tests that match these filters\n+    pub filters: Vec<String>,\n \n     /// Exactly match the filter, rather than a substring\n     pub filter_exact: bool,"}, {"sha": "3fde24e8a7fbaf0adbb88f552041ef2b81685311", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b102ea479ddfea0e72757427fc73ec487d69aac1/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b102ea479ddfea0e72757427fc73ec487d69aac1/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=b102ea479ddfea0e72757427fc73ec487d69aac1", "patch": "@@ -221,7 +221,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         suite: matches.opt_str(\"suite\").unwrap(),\n         debugger: None,\n         run_ignored,\n-        filter: matches.free.first().cloned(),\n+        filters: matches.free.clone(),\n         filter_exact: matches.opt_present(\"exact\"),\n         force_pass_mode: matches.opt_str(\"pass\").map(|mode| {\n             mode.parse::<PassMode>()\n@@ -280,7 +280,7 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"stage_id: {}\", config.stage_id));\n     logv(c, format!(\"mode: {}\", config.mode));\n     logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n-    logv(c, format!(\"filter: {}\", opt_str(&config.filter)));\n+    logv(c, format!(\"filters: {:?}\", config.filters));\n     logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n     logv(\n         c,\n@@ -465,7 +465,7 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n pub fn test_opts(config: &Config) -> test::TestOpts {\n     test::TestOpts {\n         exclude_should_panic: false,\n-        filter: config.filter.clone(),\n+        filters: config.filters.clone(),\n         filter_exact: config.filter_exact,\n         run_ignored: if config.run_ignored { test::RunIgnored::Yes } else { test::RunIgnored::No },\n         format: if config.quiet { test::OutputFormat::Terse } else { test::OutputFormat::Pretty },"}]}