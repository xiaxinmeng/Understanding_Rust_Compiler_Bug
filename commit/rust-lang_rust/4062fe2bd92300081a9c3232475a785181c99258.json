{"sha": "4062fe2bd92300081a9c3232475a785181c99258", "node_id": "C_kwDOAAsO6NoAKDQwNjJmZTJiZDkyMzAwMDgxYTljMzIzMjQ3NWE3ODUxODFjOTkyNTg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-05T07:06:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-05T07:06:25Z"}, "message": "Merge from rustc", "tree": {"sha": "1ebe821b36fc9770d8d27ac03ad2d6422c3f7035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ebe821b36fc9770d8d27ac03ad2d6422c3f7035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4062fe2bd92300081a9c3232475a785181c99258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4062fe2bd92300081a9c3232475a785181c99258", "html_url": "https://github.com/rust-lang/rust/commit/4062fe2bd92300081a9c3232475a785181c99258", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4062fe2bd92300081a9c3232475a785181c99258/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8", "html_url": "https://github.com/rust-lang/rust/commit/9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8"}, {"sha": "ec3a9bcdb7007491ee105fad034e1a83f1188ff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3a9bcdb7007491ee105fad034e1a83f1188ff6", "html_url": "https://github.com/rust-lang/rust/commit/ec3a9bcdb7007491ee105fad034e1a83f1188ff6"}], "stats": {"total": 9882, "additions": 5585, "deletions": 4297}, "files": [{"sha": "6ef933bc409f337fa07048aab78f4255dec73cd1", "filename": "Cargo.lock", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -297,6 +297,7 @@ dependencies = [\n  \"sha2\",\n  \"tar\",\n  \"toml\",\n+ \"xz2\",\n ]\n \n [[package]]\n@@ -1654,9 +1655,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_list\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"01a65ff0cab77c33c7e165c858eaa6e84a09f1e485dd495d9d0ae61083c6f786\"\n+checksum = \"fd7ba7442d9235b689d4fdce17c452ea229934980fd81ba50cc28275752c9f90\"\n dependencies = [\n  \"displaydoc\",\n  \"icu_provider\",\n@@ -1666,9 +1667,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_locid\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"71d7a98ecb812760b5f077e55a4763edeefa7ccc30d6eb5680a70841ede81928\"\n+checksum = \"3003f85dccfc0e238ff567693248c59153a46f4e6125ba4020b973cef4d1d335\"\n dependencies = [\n  \"displaydoc\",\n  \"litemap\",\n@@ -1679,9 +1680,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_provider\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a86816c97bc4e613086497f9479f63e120315e056763e8c4435604f98d21d82d\"\n+checksum = \"8dc312a7b6148f7dfe098047ae2494d12d4034f48ade58d4f353000db376e305\"\n dependencies = [\n  \"displaydoc\",\n  \"icu_locid\",\n@@ -1695,9 +1696,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_provider_adapters\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8e89bf33962b24bb48a4a21330c20c9ff17949338ea376360dd9eda2c209dca1\"\n+checksum = \"f4ae1e2bd0c41728b77e7c46e9afdec5e2127d1eedacc684724667d50c126bd3\"\n dependencies = [\n  \"icu_locid\",\n  \"icu_provider\",\n@@ -1708,9 +1709,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_provider_macros\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9ddb07844c2ffc4c28840e799e9e54ff054393cf090740decf25624e9d94b93a\"\n+checksum = \"dd8b728b9421e93eff1d9f8681101b78fa745e0748c95c655c83f337044a7e10\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -2031,9 +2032,9 @@ checksum = \"36eb31c1778188ae1e64398743890d0877fef36d11521ac60406b42016e8c2cf\"\n \n [[package]]\n name = \"litemap\"\n-version = \"0.6.1\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"575d8a551c59104b4df91269921e5eab561aa1b77c618dac0414b5d44a4617de\"\n+checksum = \"3a04a5b2b6f54acba899926491d0a6c59d98012938ca2ab5befb281c034e8f94\"\n \n [[package]]\n name = \"lld-wrapper\"\n@@ -2060,9 +2061,9 @@ dependencies = [\n \n [[package]]\n name = \"lzma-sys\"\n-version = \"0.1.16\"\n+version = \"0.1.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f24f76ec44a8ac23a31915d6e326bca17ce88da03096f1ff194925dc714dac99\"\n+checksum = \"5fda04ab3764e6cde78b9974eec4f779acaba7c4e84b36eca3cf77c581b85d27\"\n dependencies = [\n  \"cc\",\n  \"libc\",\n@@ -2908,9 +2909,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-build-sysroot\"\n-version = \"0.4.1\"\n+version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d65b1271cdac365b71b59570ea35d945dea2dd2cc47eba3d33b4bd1e0190ac6d\"\n+checksum = \"8ed2a90dfa5232ed5ff21d53d4df655f315ab316ea06fc508f1c74bcedb1ce6c\"\n dependencies = [\n  \"anyhow\",\n  \"rustc_version\",\n@@ -3164,6 +3165,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_fluent_macro\",\n+ \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_lint_defs\",\n  \"rustc_macros\",\n@@ -4059,6 +4061,7 @@ dependencies = [\n  \"indexmap\",\n  \"rustc_macros\",\n  \"smallvec\",\n+ \"tempfile\",\n  \"thin-vec\",\n ]\n \n@@ -4737,6 +4740,15 @@ dependencies = [\n  \"unicode-xid\",\n ]\n \n+[[package]]\n+name = \"sysroot\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"proc_macro\",\n+ \"std\",\n+ \"test\",\n+]\n+\n [[package]]\n name = \"tar\"\n version = \"0.4.38\"\n@@ -4821,7 +4833,6 @@ dependencies = [\n  \"getopts\",\n  \"panic_abort\",\n  \"panic_unwind\",\n- \"proc_macro\",\n  \"std\",\n ]\n \n@@ -5659,9 +5670,9 @@ dependencies = [\n \n [[package]]\n name = \"xz2\"\n-version = \"0.1.6\"\n+version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c179869f34fc7c01830d3ce7ea2086bc3a07e0d35289b667d0a8bf910258926c\"\n+checksum = \"388c44dc09d76f1536602ead6d325eb532f5c122f17782bd57fb47baeeb767e2\"\n dependencies = [\n  \"lzma-sys\",\n ]\n@@ -5697,9 +5708,9 @@ dependencies = [\n \n [[package]]\n name = \"yoke\"\n-version = \"0.7.0\"\n+version = \"0.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"222180af14a6b54ef2c33493c1eff77ae95a3687a21b243e752624006fb8f26e\"\n+checksum = \"1848075a23a28f9773498ee9a0f2cf58fcbad4f8c0ccf84a210ab33c6ae495de\"\n dependencies = [\n  \"serde\",\n  \"stable_deref_trait\",\n@@ -5742,9 +5753,9 @@ dependencies = [\n \n [[package]]\n name = \"zerovec\"\n-version = \"0.9.2\"\n+version = \"0.9.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"154df60c74c4a844bc04a53cef4fc18a909d3ea07e19f5225eaba86209da3aa6\"\n+checksum = \"198f54134cd865f437820aa3b43d0ad518af4e68ee161b444cdd15d8e567c8ea\"\n dependencies = [\n  \"yoke\",\n  \"zerofrom\","}, {"sha": "7aaa34a68e66f96ba1c216e987699e5f82ab2369", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -2,7 +2,7 @@\n members = [\n   \"compiler/rustc\",\n   \"library/std\",\n-  \"library/test\",\n+  \"library/sysroot\",\n   \"src/rustdoc-json-types\",\n   \"src/tools/build_helper\",\n   \"src/tools/cargotest\","}, {"sha": "b5dba0713bfa07cc2b76d4023b6decfb7473badd", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -287,12 +287,20 @@ pub enum TraitBoundModifier {\n     /// No modifiers\n     None,\n \n+    /// `!Trait`\n+    Negative,\n+\n     /// `?Trait`\n     Maybe,\n \n     /// `~const Trait`\n     MaybeConst,\n \n+    /// `~const !Trait`\n+    //\n+    // This parses but will be rejected during AST validation.\n+    MaybeConstNegative,\n+\n     /// `~const ?Trait`\n     //\n     // This parses but will be rejected during AST validation.\n@@ -2446,6 +2454,16 @@ impl fmt::Debug for ImplPolarity {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]\n+pub enum BoundPolarity {\n+    /// `Type: Trait`\n+    Positive,\n+    /// `Type: !Trait`\n+    Negative(Span),\n+    /// `Type: ?Trait`\n+    Maybe(Span),\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum FnRetTy {\n     /// Returns type is not specified."}, {"sha": "4100efb6eb330a2aceea99a53536c9b00f6cc189", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1368,13 +1368,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         this.arena.alloc_from_iter(bounds.iter().filter_map(|bound| match bound {\n                             GenericBound::Trait(\n                                 ty,\n-                                TraitBoundModifier::None | TraitBoundModifier::MaybeConst,\n+                                TraitBoundModifier::None\n+                                | TraitBoundModifier::MaybeConst\n+                                | TraitBoundModifier::Negative,\n                             ) => Some(this.lower_poly_trait_ref(ty, itctx)),\n                             // `~const ?Bound` will cause an error during AST validation\n                             // anyways, so treat it like `?Bound` as compilation proceeds.\n                             GenericBound::Trait(\n                                 _,\n-                                TraitBoundModifier::Maybe | TraitBoundModifier::MaybeConstMaybe,\n+                                TraitBoundModifier::Maybe\n+                                | TraitBoundModifier::MaybeConstMaybe\n+                                | TraitBoundModifier::MaybeConstNegative,\n                             ) => None,\n                             GenericBound::Outlives(lifetime) => {\n                                 if lifetime_bound.is_none() {\n@@ -2421,11 +2425,20 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             TraitBoundModifier::None => hir::TraitBoundModifier::None,\n             TraitBoundModifier::MaybeConst => hir::TraitBoundModifier::MaybeConst,\n \n+            TraitBoundModifier::Negative => {\n+                if self.tcx.features().negative_bounds {\n+                    hir::TraitBoundModifier::Negative\n+                } else {\n+                    hir::TraitBoundModifier::None\n+                }\n+            }\n+\n             // `MaybeConstMaybe` will cause an error during AST validation, but we need to pick a\n             // placeholder for compilation to proceed.\n             TraitBoundModifier::MaybeConstMaybe | TraitBoundModifier::Maybe => {\n                 hir::TraitBoundModifier::Maybe\n             }\n+            TraitBoundModifier::MaybeConstNegative => hir::TraitBoundModifier::MaybeConst,\n         }\n     }\n "}, {"sha": "2f413789e7704630e13c4ad316d104a3554d3d9c", "filename": "compiler/rustc_ast_passes/messages.ftl", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fmessages.ftl?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -206,7 +206,7 @@ ast_passes_tilde_const_disallowed = `~const` is not allowed here\n     .closure = closures cannot have `~const` trait bounds\n     .function = this function is not `const`, so it cannot have `~const` trait bounds\n \n-ast_passes_optional_const_exclusive = `~const` and `?` are mutually exclusive\n+ast_passes_optional_const_exclusive = `~const` and `{$modifier}` are mutually exclusive\n \n ast_passes_const_and_async = functions cannot be both `const` and `async`\n     .const = `const` because of this\n@@ -235,3 +235,9 @@ ast_passes_incompatible_features = `{$f1}` and `{$f2}` are incompatible, using t\n     .help = remove one of these features\n \n ast_passes_show_span = {$msg}\n+\n+ast_passes_negative_bound_not_supported =\n+    negative bounds are not supported\n+\n+ast_passes_constraint_on_negative_bound =\n+    associated type constraints not allowed on negative bounds"}, {"sha": "bf43bbdbbeebae89abbf4c687b25c046f17767f3", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1168,12 +1168,27 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     });\n                 }\n                 (_, TraitBoundModifier::MaybeConstMaybe) => {\n-                    self.err_handler().emit_err(errors::OptionalConstExclusive {span: bound.span()});\n+                    self.err_handler().emit_err(errors::OptionalConstExclusive {span: bound.span(), modifier: \"?\" });\n+                }\n+                (_, TraitBoundModifier::MaybeConstNegative) => {\n+                    self.err_handler().emit_err(errors::OptionalConstExclusive {span: bound.span(), modifier: \"!\" });\n                 }\n                 _ => {}\n             }\n         }\n \n+        // Negative trait bounds are not allowed to have associated constraints\n+        if let GenericBound::Trait(trait_ref, TraitBoundModifier::Negative) = bound\n+            && let Some(segment) = trait_ref.trait_ref.path.segments.last()\n+            && let Some(ast::GenericArgs::AngleBracketed(args)) = segment.args.as_deref()\n+        {\n+            for arg in &args.args {\n+                if let ast::AngleBracketedArg::Constraint(constraint) = arg {\n+                    self.err_handler().emit_err(errors::ConstraintOnNegativeBound { span: constraint.span });\n+                }\n+            }\n+        }\n+\n         visit::walk_param_bound(self, bound)\n     }\n "}, {"sha": "82fe2a21d0876910bcb72fc82e951cb8715a5bfd", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -567,6 +567,7 @@ pub enum TildeConstReason {\n pub struct OptionalConstExclusive {\n     #[primary_span]\n     pub span: Span,\n+    pub modifier: &'static str,\n }\n \n #[derive(Diagnostic)]\n@@ -693,3 +694,17 @@ pub struct ShowSpan {\n     pub span: Span,\n     pub msg: &'static str,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(ast_passes_negative_bound_not_supported)]\n+pub struct NegativeBoundUnsupported {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(ast_passes_constraint_on_negative_bound)]\n+pub struct ConstraintOnNegativeBound {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "a46fe9e898fc6bf5f33089091bc7f9110042d73d", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -603,6 +603,12 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(dyn_star, \"`dyn*` trait objects are experimental\");\n     gate_all!(const_closures, \"const closures are experimental\");\n \n+    if !visitor.features.negative_bounds {\n+        for &span in spans.get(&sym::negative_bounds).iter().copied().flatten() {\n+            sess.emit_err(errors::NegativeBoundUnsupported { span });\n+        }\n+    }\n+\n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded).\n     // We emit an early future-incompatible warning for these."}, {"sha": "ae346510ccc8220340de68a5b95b9fb248c16f62", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1570,12 +1570,19 @@ impl<'a> State<'a> {\n                 GenericBound::Trait(tref, modifier) => {\n                     match modifier {\n                         TraitBoundModifier::None => {}\n+                        TraitBoundModifier::Negative => {\n+                            self.word(\"!\");\n+                        }\n                         TraitBoundModifier::Maybe => {\n                             self.word(\"?\");\n                         }\n                         TraitBoundModifier::MaybeConst => {\n                             self.word_space(\"~const\");\n                         }\n+                        TraitBoundModifier::MaybeConstNegative => {\n+                            self.word_space(\"~const\");\n+                            self.word(\"!\");\n+                        }\n                         TraitBoundModifier::MaybeConstMaybe => {\n                             self.word_space(\"~const\");\n                             self.word(\"?\");"}, {"sha": "d3a307675ac4bcd1286d039da3be52de84ccf7c6", "filename": "compiler/rustc_baked_icu_data/Cargo.toml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2FCargo.toml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -4,11 +4,11 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-icu_list = \"1.1.0\"\n-icu_locid = \"1.1.0\"\n-icu_provider = \"1.1.0\"\n-icu_provider_adapters = \"1.1.0\"\n-zerovec = \"0.9.2\"\n+icu_list = \"1.2\"\n+icu_locid = \"1.2\"\n+icu_provider = \"1.2\"\n+icu_provider_adapters = \"1.2\"\n+zerovec = \"0.9.4\"\n \n [features]\n rustc_use_parallel_compiler = ['icu_provider/sync']"}, {"sha": "e4aaf50f5d674f53f1bdd67b8f21708ffbd424aa", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/likelysubtags_v1/und.rs.data", "status": "modified", "additions": 20, "deletions": 682, "changes": 702, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fund.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -3,725 +3,63 @@\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap::from_parts_unchecked(\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    97u8, 98u8, 0u8, 97u8, 98u8, 113u8, 97u8, 100u8, 112u8, 97u8, 100u8, 121u8,\n-                    97u8, 101u8, 0u8, 97u8, 101u8, 98u8, 97u8, 104u8, 111u8, 97u8, 106u8,\n-                    116u8, 97u8, 107u8, 107u8, 97u8, 108u8, 116u8, 97u8, 109u8, 0u8, 97u8,\n-                    112u8, 99u8, 97u8, 112u8, 100u8, 97u8, 114u8, 0u8, 97u8, 114u8, 99u8, 97u8,\n-                    114u8, 113u8, 97u8, 114u8, 115u8, 97u8, 114u8, 121u8, 97u8, 114u8, 122u8,\n-                    97u8, 115u8, 0u8, 97u8, 115u8, 101u8, 97u8, 118u8, 0u8, 97u8, 118u8, 108u8,\n-                    97u8, 119u8, 97u8, 98u8, 97u8, 0u8, 98u8, 97u8, 108u8, 98u8, 97u8, 112u8,\n-                    98u8, 97u8, 120u8, 98u8, 99u8, 113u8, 98u8, 101u8, 0u8, 98u8, 101u8, 106u8,\n-                    98u8, 102u8, 113u8, 98u8, 102u8, 116u8, 98u8, 102u8, 121u8, 98u8, 103u8,\n-                    0u8, 98u8, 103u8, 99u8, 98u8, 103u8, 110u8, 98u8, 103u8, 120u8, 98u8,\n-                    104u8, 98u8, 98u8, 104u8, 105u8, 98u8, 104u8, 111u8, 98u8, 106u8, 105u8,\n-                    98u8, 106u8, 106u8, 98u8, 108u8, 116u8, 98u8, 110u8, 0u8, 98u8, 111u8, 0u8,\n-                    98u8, 112u8, 121u8, 98u8, 113u8, 105u8, 98u8, 114u8, 97u8, 98u8, 114u8,\n-                    104u8, 98u8, 114u8, 120u8, 98u8, 115u8, 113u8, 98u8, 115u8, 116u8, 98u8,\n-                    116u8, 118u8, 98u8, 117u8, 97u8, 98u8, 121u8, 110u8, 99u8, 99u8, 112u8,\n-                    99u8, 101u8, 0u8, 99u8, 104u8, 109u8, 99u8, 104u8, 114u8, 99u8, 106u8,\n-                    97u8, 99u8, 106u8, 109u8, 99u8, 107u8, 98u8, 99u8, 109u8, 103u8, 99u8,\n-                    111u8, 112u8, 99u8, 114u8, 0u8, 99u8, 114u8, 104u8, 99u8, 114u8, 107u8,\n-                    99u8, 114u8, 108u8, 99u8, 115u8, 119u8, 99u8, 116u8, 100u8, 99u8, 117u8,\n-                    0u8, 99u8, 118u8, 0u8, 100u8, 97u8, 114u8, 100u8, 99u8, 99u8, 100u8, 103u8,\n-                    108u8, 100u8, 109u8, 102u8, 100u8, 111u8, 105u8, 100u8, 114u8, 104u8,\n-                    100u8, 114u8, 115u8, 100u8, 116u8, 121u8, 100u8, 118u8, 0u8, 100u8, 122u8,\n-                    0u8, 101u8, 103u8, 121u8, 101u8, 107u8, 121u8, 101u8, 108u8, 0u8, 101u8,\n-                    115u8, 103u8, 101u8, 116u8, 116u8, 102u8, 97u8, 0u8, 102u8, 105u8, 97u8,\n-                    102u8, 117u8, 98u8, 103u8, 97u8, 110u8, 103u8, 98u8, 109u8, 103u8, 98u8,\n-                    122u8, 103u8, 101u8, 122u8, 103u8, 103u8, 110u8, 103u8, 106u8, 107u8,\n-                    103u8, 106u8, 117u8, 103u8, 108u8, 107u8, 103u8, 109u8, 118u8, 103u8,\n-                    111u8, 102u8, 103u8, 111u8, 109u8, 103u8, 111u8, 110u8, 103u8, 111u8,\n-                    116u8, 103u8, 114u8, 99u8, 103u8, 114u8, 116u8, 103u8, 117u8, 0u8, 103u8,\n-                    118u8, 114u8, 103u8, 119u8, 99u8, 103u8, 119u8, 116u8, 104u8, 97u8, 107u8,\n-                    104u8, 97u8, 122u8, 104u8, 100u8, 121u8, 104u8, 101u8, 0u8, 104u8, 105u8,\n-                    0u8, 104u8, 108u8, 117u8, 104u8, 109u8, 100u8, 104u8, 110u8, 100u8, 104u8,\n-                    110u8, 101u8, 104u8, 110u8, 106u8, 104u8, 110u8, 111u8, 104u8, 111u8, 99u8,\n-                    104u8, 111u8, 106u8, 104u8, 115u8, 110u8, 104u8, 121u8, 0u8, 105u8, 105u8,\n-                    0u8, 105u8, 110u8, 104u8, 105u8, 117u8, 0u8, 105u8, 119u8, 0u8, 106u8,\n-                    97u8, 0u8, 106u8, 105u8, 0u8, 106u8, 109u8, 108u8, 107u8, 97u8, 0u8, 107u8,\n-                    97u8, 97u8, 107u8, 97u8, 119u8, 107u8, 98u8, 100u8, 107u8, 98u8, 121u8,\n-                    107u8, 100u8, 116u8, 107u8, 102u8, 114u8, 107u8, 102u8, 121u8, 107u8,\n-                    104u8, 98u8, 107u8, 104u8, 110u8, 107u8, 104u8, 116u8, 107u8, 104u8, 119u8,\n-                    107u8, 106u8, 103u8, 107u8, 107u8, 0u8, 107u8, 109u8, 0u8, 107u8, 110u8,\n-                    0u8, 107u8, 111u8, 0u8, 107u8, 111u8, 105u8, 107u8, 111u8, 107u8, 107u8,\n-                    113u8, 121u8, 107u8, 114u8, 99u8, 107u8, 114u8, 117u8, 107u8, 115u8, 0u8,\n-                    107u8, 116u8, 98u8, 107u8, 117u8, 109u8, 107u8, 118u8, 0u8, 107u8, 118u8,\n-                    120u8, 107u8, 120u8, 99u8, 107u8, 120u8, 108u8, 107u8, 120u8, 109u8, 107u8,\n-                    120u8, 112u8, 107u8, 121u8, 0u8, 107u8, 122u8, 104u8, 108u8, 97u8, 98u8,\n-                    108u8, 97u8, 100u8, 108u8, 97u8, 104u8, 108u8, 98u8, 101u8, 108u8, 99u8,\n-                    112u8, 108u8, 101u8, 112u8, 108u8, 101u8, 122u8, 108u8, 105u8, 102u8,\n-                    108u8, 105u8, 115u8, 108u8, 107u8, 105u8, 108u8, 109u8, 110u8, 108u8,\n-                    111u8, 0u8, 108u8, 114u8, 99u8, 108u8, 117u8, 122u8, 108u8, 119u8, 108u8,\n-                    108u8, 122u8, 104u8, 109u8, 97u8, 103u8, 109u8, 97u8, 105u8, 109u8, 100u8,\n-                    101u8, 109u8, 100u8, 102u8, 109u8, 100u8, 120u8, 109u8, 102u8, 97u8, 109u8,\n-                    103u8, 112u8, 109u8, 107u8, 0u8, 109u8, 107u8, 105u8, 109u8, 108u8, 0u8,\n-                    109u8, 110u8, 0u8, 109u8, 110u8, 105u8, 109u8, 110u8, 119u8, 109u8, 114u8,\n-                    0u8, 109u8, 114u8, 100u8, 109u8, 114u8, 106u8, 109u8, 114u8, 111u8, 109u8,\n-                    116u8, 114u8, 109u8, 118u8, 121u8, 109u8, 119u8, 114u8, 109u8, 119u8,\n-                    119u8, 109u8, 121u8, 0u8, 109u8, 121u8, 109u8, 109u8, 121u8, 118u8, 109u8,\n-                    121u8, 122u8, 109u8, 122u8, 110u8, 110u8, 97u8, 110u8, 110u8, 101u8, 0u8,\n-                    110u8, 101u8, 119u8, 110u8, 110u8, 112u8, 110u8, 111u8, 100u8, 110u8,\n-                    111u8, 101u8, 110u8, 111u8, 110u8, 110u8, 113u8, 111u8, 110u8, 115u8,\n-                    107u8, 110u8, 115u8, 116u8, 111u8, 106u8, 0u8, 111u8, 106u8, 115u8, 111u8,\n-                    114u8, 0u8, 111u8, 114u8, 117u8, 111u8, 115u8, 0u8, 111u8, 115u8, 97u8,\n-                    111u8, 116u8, 97u8, 111u8, 116u8, 107u8, 111u8, 117u8, 105u8, 112u8, 97u8,\n-                    0u8, 112u8, 97u8, 108u8, 112u8, 101u8, 111u8, 112u8, 104u8, 108u8, 112u8,\n-                    104u8, 110u8, 112u8, 107u8, 97u8, 112u8, 110u8, 116u8, 112u8, 112u8, 97u8,\n-                    112u8, 114u8, 97u8, 112u8, 114u8, 100u8, 112u8, 115u8, 0u8, 114u8, 97u8,\n-                    106u8, 114u8, 104u8, 103u8, 114u8, 105u8, 102u8, 114u8, 106u8, 115u8,\n-                    114u8, 107u8, 116u8, 114u8, 109u8, 116u8, 114u8, 117u8, 0u8, 114u8, 117u8,\n-                    101u8, 114u8, 121u8, 117u8, 115u8, 97u8, 0u8, 115u8, 97u8, 104u8, 115u8,\n-                    97u8, 116u8, 115u8, 97u8, 122u8, 115u8, 99u8, 107u8, 115u8, 99u8, 108u8,\n-                    115u8, 100u8, 0u8, 115u8, 100u8, 104u8, 115u8, 103u8, 97u8, 115u8, 103u8,\n-                    119u8, 115u8, 104u8, 105u8, 115u8, 104u8, 110u8, 115u8, 104u8, 117u8,\n-                    115u8, 105u8, 0u8, 115u8, 107u8, 114u8, 115u8, 109u8, 112u8, 115u8, 111u8,\n-                    103u8, 115u8, 111u8, 117u8, 115u8, 114u8, 0u8, 115u8, 114u8, 98u8, 115u8,\n-                    114u8, 120u8, 115u8, 119u8, 98u8, 115u8, 119u8, 118u8, 115u8, 121u8, 108u8,\n-                    115u8, 121u8, 114u8, 116u8, 97u8, 0u8, 116u8, 97u8, 106u8, 116u8, 99u8,\n-                    121u8, 116u8, 100u8, 100u8, 116u8, 100u8, 103u8, 116u8, 100u8, 104u8,\n-                    116u8, 101u8, 0u8, 116u8, 103u8, 0u8, 116u8, 104u8, 0u8, 116u8, 104u8,\n-                    108u8, 116u8, 104u8, 113u8, 116u8, 104u8, 114u8, 116u8, 105u8, 0u8, 116u8,\n-                    105u8, 103u8, 116u8, 107u8, 116u8, 116u8, 114u8, 119u8, 116u8, 115u8,\n-                    100u8, 116u8, 115u8, 102u8, 116u8, 115u8, 106u8, 116u8, 116u8, 0u8, 116u8,\n-                    116u8, 115u8, 116u8, 120u8, 103u8, 116u8, 120u8, 111u8, 116u8, 121u8,\n-                    118u8, 117u8, 100u8, 105u8, 117u8, 100u8, 109u8, 117u8, 103u8, 0u8, 117u8,\n-                    103u8, 97u8, 117u8, 107u8, 0u8, 117u8, 110u8, 114u8, 117u8, 110u8, 120u8,\n-                    117u8, 114u8, 0u8, 118u8, 97u8, 105u8, 119u8, 97u8, 108u8, 119u8, 98u8,\n-                    113u8, 119u8, 98u8, 114u8, 119u8, 110u8, 105u8, 119u8, 115u8, 103u8, 119u8,\n-                    116u8, 109u8, 119u8, 117u8, 117u8, 120u8, 99u8, 111u8, 120u8, 99u8, 114u8,\n-                    120u8, 108u8, 99u8, 120u8, 108u8, 100u8, 120u8, 109u8, 102u8, 120u8, 109u8,\n-                    110u8, 120u8, 109u8, 114u8, 120u8, 110u8, 97u8, 120u8, 110u8, 114u8, 120u8,\n-                    112u8, 114u8, 120u8, 115u8, 97u8, 120u8, 115u8, 114u8, 121u8, 105u8, 0u8,\n-                    121u8, 117u8, 101u8, 122u8, 100u8, 106u8, 122u8, 103u8, 104u8, 122u8,\n-                    104u8, 0u8, 122u8, 104u8, 120u8, 122u8, 107u8, 116u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"am\\0ar\\0as\\0be\\0bg\\0bgcbhobn\\0brxchrcv\\0doiel\\0fa\\0gu\\0he\\0hi\\0hy\\0ja\\0ka\\0kk\\0km\\0kn\\0ko\\0kokks\\0ky\\0lo\\0maimk\\0ml\\0mn\\0mnimr\\0my\\0ne\\0or\\0pa\\0ps\\0rajru\\0sa\\0satsd\\0si\\0sr\\0ta\\0te\\0tg\\0th\\0ti\\0tt\\0uk\\0ur\\0yuezh\\0\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 84u8, 105u8, 98u8,\n-                    116u8, 67u8, 121u8, 114u8, 108u8, 65u8, 118u8, 115u8, 116u8, 65u8, 114u8,\n-                    97u8, 98u8, 65u8, 104u8, 111u8, 109u8, 65u8, 114u8, 97u8, 98u8, 88u8,\n-                    115u8, 117u8, 120u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8, 105u8,\n-                    65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8,\n-                    65u8, 114u8, 109u8, 105u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n-                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 66u8, 101u8, 110u8,\n-                    103u8, 83u8, 103u8, 110u8, 119u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8,\n-                    97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 65u8,\n-                    114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 66u8, 97u8, 109u8, 117u8,\n-                    69u8, 116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8, 97u8,\n-                    98u8, 84u8, 97u8, 109u8, 108u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8,\n-                    118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n-                    114u8, 97u8, 98u8, 71u8, 114u8, 101u8, 107u8, 68u8, 101u8, 118u8, 97u8,\n-                    68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 69u8, 116u8, 104u8,\n-                    105u8, 68u8, 101u8, 118u8, 97u8, 84u8, 97u8, 118u8, 116u8, 66u8, 101u8,\n-                    110u8, 103u8, 84u8, 105u8, 98u8, 116u8, 66u8, 101u8, 110u8, 103u8, 65u8,\n-                    114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 68u8,\n-                    101u8, 118u8, 97u8, 66u8, 97u8, 115u8, 115u8, 69u8, 116u8, 104u8, 105u8,\n-                    68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8,\n-                    105u8, 67u8, 97u8, 107u8, 109u8, 67u8, 121u8, 114u8, 108u8, 67u8, 121u8,\n-                    114u8, 108u8, 67u8, 104u8, 101u8, 114u8, 65u8, 114u8, 97u8, 98u8, 67u8,\n-                    104u8, 97u8, 109u8, 65u8, 114u8, 97u8, 98u8, 83u8, 111u8, 121u8, 111u8,\n-                    67u8, 111u8, 112u8, 116u8, 67u8, 97u8, 110u8, 115u8, 67u8, 121u8, 114u8,\n-                    108u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8,\n-                    110u8, 115u8, 80u8, 97u8, 117u8, 99u8, 67u8, 121u8, 114u8, 108u8, 67u8,\n-                    121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8, 97u8, 98u8,\n-                    65u8, 114u8, 97u8, 98u8, 77u8, 101u8, 100u8, 102u8, 68u8, 101u8, 118u8,\n-                    97u8, 77u8, 111u8, 110u8, 103u8, 69u8, 116u8, 104u8, 105u8, 68u8, 101u8,\n-                    118u8, 97u8, 84u8, 104u8, 97u8, 97u8, 84u8, 105u8, 98u8, 116u8, 69u8,\n-                    103u8, 121u8, 112u8, 75u8, 97u8, 108u8, 105u8, 71u8, 114u8, 101u8, 107u8,\n-                    71u8, 111u8, 110u8, 109u8, 73u8, 116u8, 97u8, 108u8, 65u8, 114u8, 97u8,\n-                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8,\n-                    115u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 69u8, 116u8,\n-                    104u8, 105u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 65u8,\n-                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8,\n-                    69u8, 116u8, 104u8, 105u8, 68u8, 101u8, 118u8, 97u8, 84u8, 101u8, 108u8,\n-                    117u8, 71u8, 111u8, 116u8, 104u8, 67u8, 112u8, 114u8, 116u8, 66u8, 101u8,\n-                    110u8, 103u8, 71u8, 117u8, 106u8, 114u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n-                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8, 115u8, 65u8,\n-                    114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8, 72u8, 101u8, 98u8, 114u8,\n-                    68u8, 101u8, 118u8, 97u8, 72u8, 108u8, 117u8, 119u8, 80u8, 108u8, 114u8,\n-                    100u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 109u8,\n-                    110u8, 112u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 68u8,\n-                    101u8, 118u8, 97u8, 72u8, 97u8, 110u8, 115u8, 65u8, 114u8, 109u8, 110u8,\n-                    89u8, 105u8, 105u8, 105u8, 67u8, 121u8, 114u8, 108u8, 67u8, 97u8, 110u8,\n-                    115u8, 72u8, 101u8, 98u8, 114u8, 74u8, 112u8, 97u8, 110u8, 72u8, 101u8,\n-                    98u8, 114u8, 68u8, 101u8, 118u8, 97u8, 71u8, 101u8, 111u8, 114u8, 67u8,\n-                    121u8, 114u8, 108u8, 75u8, 97u8, 119u8, 105u8, 67u8, 121u8, 114u8, 108u8,\n-                    65u8, 114u8, 97u8, 98u8, 84u8, 104u8, 97u8, 105u8, 68u8, 101u8, 118u8,\n-                    97u8, 68u8, 101u8, 118u8, 97u8, 84u8, 97u8, 108u8, 117u8, 68u8, 101u8,\n-                    118u8, 97u8, 77u8, 121u8, 109u8, 114u8, 65u8, 114u8, 97u8, 98u8, 76u8,\n-                    97u8, 111u8, 111u8, 67u8, 121u8, 114u8, 108u8, 75u8, 104u8, 109u8, 114u8,\n-                    75u8, 110u8, 100u8, 97u8, 75u8, 111u8, 114u8, 101u8, 67u8, 121u8, 114u8,\n-                    108u8, 68u8, 101u8, 118u8, 97u8, 69u8, 116u8, 104u8, 105u8, 67u8, 121u8,\n-                    114u8, 108u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 69u8,\n-                    116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8,\n-                    65u8, 114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8, 68u8, 101u8, 118u8,\n-                    97u8, 84u8, 104u8, 97u8, 105u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8,\n-                    114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 76u8, 105u8, 110u8, 97u8, 72u8,\n-                    101u8, 98u8, 114u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8,\n-                    84u8, 104u8, 97u8, 105u8, 76u8, 101u8, 112u8, 99u8, 67u8, 121u8, 114u8,\n-                    108u8, 68u8, 101u8, 118u8, 97u8, 76u8, 105u8, 115u8, 117u8, 65u8, 114u8,\n-                    97u8, 98u8, 84u8, 101u8, 108u8, 117u8, 76u8, 97u8, 111u8, 111u8, 65u8,\n-                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 84u8, 104u8, 97u8, 105u8, 72u8,\n-                    97u8, 110u8, 115u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8,\n-                    65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8,\n-                    105u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8,\n-                    114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 77u8, 108u8, 121u8, 109u8, 67u8,\n-                    121u8, 114u8, 108u8, 66u8, 101u8, 110u8, 103u8, 77u8, 121u8, 109u8, 114u8,\n-                    68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8,\n-                    108u8, 77u8, 114u8, 111u8, 111u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8,\n-                    97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 109u8, 110u8, 112u8, 77u8,\n-                    121u8, 109u8, 114u8, 69u8, 116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8,\n-                    77u8, 97u8, 110u8, 100u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8,\n-                    115u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 87u8, 99u8,\n-                    104u8, 111u8, 76u8, 97u8, 110u8, 97u8, 68u8, 101u8, 118u8, 97u8, 82u8,\n-                    117u8, 110u8, 114u8, 78u8, 107u8, 111u8, 111u8, 67u8, 97u8, 110u8, 115u8,\n-                    84u8, 110u8, 115u8, 97u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8, 110u8,\n-                    115u8, 79u8, 114u8, 121u8, 97u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8,\n-                    114u8, 108u8, 79u8, 115u8, 103u8, 101u8, 65u8, 114u8, 97u8, 98u8, 79u8,\n-                    114u8, 107u8, 104u8, 79u8, 117u8, 103u8, 114u8, 71u8, 117u8, 114u8, 117u8,\n-                    80u8, 104u8, 108u8, 105u8, 88u8, 112u8, 101u8, 111u8, 65u8, 114u8, 97u8,\n-                    98u8, 80u8, 104u8, 110u8, 120u8, 66u8, 114u8, 97u8, 104u8, 71u8, 114u8,\n-                    101u8, 107u8, 68u8, 101u8, 118u8, 97u8, 75u8, 104u8, 97u8, 114u8, 65u8,\n-                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 82u8,\n-                    111u8, 104u8, 103u8, 84u8, 102u8, 110u8, 103u8, 68u8, 101u8, 118u8, 97u8,\n-                    66u8, 101u8, 110u8, 103u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8,\n-                    108u8, 67u8, 121u8, 114u8, 108u8, 75u8, 97u8, 110u8, 97u8, 68u8, 101u8,\n-                    118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 79u8, 108u8, 99u8, 107u8, 83u8,\n-                    97u8, 117u8, 114u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8,\n-                    65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 79u8, 103u8, 97u8, 109u8,\n-                    69u8, 116u8, 104u8, 105u8, 84u8, 102u8, 110u8, 103u8, 77u8, 121u8, 109u8,\n-                    114u8, 65u8, 114u8, 97u8, 98u8, 83u8, 105u8, 110u8, 104u8, 65u8, 114u8,\n-                    97u8, 98u8, 83u8, 97u8, 109u8, 114u8, 83u8, 111u8, 103u8, 100u8, 84u8,\n-                    104u8, 97u8, 105u8, 67u8, 121u8, 114u8, 108u8, 83u8, 111u8, 114u8, 97u8,\n-                    68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8,\n-                    97u8, 66u8, 101u8, 110u8, 103u8, 83u8, 121u8, 114u8, 99u8, 84u8, 97u8,\n-                    109u8, 108u8, 68u8, 101u8, 118u8, 97u8, 75u8, 110u8, 100u8, 97u8, 84u8,\n-                    97u8, 108u8, 101u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8,\n-                    84u8, 101u8, 108u8, 117u8, 67u8, 121u8, 114u8, 108u8, 84u8, 104u8, 97u8,\n-                    105u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8,\n-                    118u8, 97u8, 69u8, 116u8, 104u8, 105u8, 69u8, 116u8, 104u8, 105u8, 68u8,\n-                    101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 71u8, 114u8, 101u8, 107u8,\n-                    68u8, 101u8, 118u8, 97u8, 84u8, 105u8, 98u8, 116u8, 67u8, 121u8, 114u8,\n-                    108u8, 84u8, 104u8, 97u8, 105u8, 84u8, 97u8, 110u8, 103u8, 84u8, 111u8,\n-                    116u8, 111u8, 67u8, 121u8, 114u8, 108u8, 65u8, 103u8, 104u8, 98u8, 67u8,\n-                    121u8, 114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 85u8, 103u8, 97u8, 114u8,\n-                    67u8, 121u8, 114u8, 108u8, 66u8, 101u8, 110u8, 103u8, 66u8, 101u8, 110u8,\n-                    103u8, 65u8, 114u8, 97u8, 98u8, 86u8, 97u8, 105u8, 105u8, 69u8, 116u8,\n-                    104u8, 105u8, 84u8, 101u8, 108u8, 117u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n-                    114u8, 97u8, 98u8, 71u8, 111u8, 110u8, 103u8, 68u8, 101u8, 118u8, 97u8,\n-                    72u8, 97u8, 110u8, 115u8, 67u8, 104u8, 114u8, 115u8, 67u8, 97u8, 114u8,\n-                    105u8, 76u8, 121u8, 99u8, 105u8, 76u8, 121u8, 100u8, 105u8, 71u8, 101u8,\n-                    111u8, 114u8, 77u8, 97u8, 110u8, 105u8, 77u8, 101u8, 114u8, 99u8, 78u8,\n-                    97u8, 114u8, 98u8, 68u8, 101u8, 118u8, 97u8, 80u8, 114u8, 116u8, 105u8,\n-                    83u8, 97u8, 114u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 101u8, 98u8,\n-                    114u8, 72u8, 97u8, 110u8, 116u8, 65u8, 114u8, 97u8, 98u8, 84u8, 102u8,\n-                    110u8, 103u8, 72u8, 97u8, 110u8, 115u8, 78u8, 115u8, 104u8, 117u8, 75u8,\n-                    105u8, 116u8, 115u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"EthiArabBengCyrlCyrlDevaDevaBengDevaCherCyrlDevaGrekArabGujrHebrDevaArmnJpanGeorCyrlKhmrKndaKoreDevaArabCyrlLaooDevaCyrlMlymCyrlBengDevaMymrDevaOryaGuruArabDevaCyrlDevaOlckArabSinhCyrlTamlTeluCyrlThaiEthiCyrlCyrlArabHantHans\")\n             },\n         )\n     },\n     lr2s: unsafe {\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap2d::from_parts_unchecked(\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    97u8, 122u8, 0u8, 104u8, 97u8, 0u8, 107u8, 107u8, 0u8, 107u8, 117u8, 0u8,\n-                    107u8, 121u8, 0u8, 109u8, 97u8, 110u8, 109u8, 110u8, 0u8, 109u8, 115u8,\n-                    0u8, 112u8, 97u8, 0u8, 114u8, 105u8, 102u8, 115u8, 100u8, 0u8, 115u8,\n-                    114u8, 0u8, 116u8, 103u8, 0u8, 117u8, 103u8, 0u8, 117u8, 110u8, 114u8,\n-                    117u8, 122u8, 0u8, 121u8, 117u8, 101u8, 122u8, 104u8, 0u8,\n-                ])\n+                ::zerovec::ZeroVec::from_bytes_unchecked(\n+                    b\"az\\0ha\\0kk\\0ky\\0mn\\0ms\\0pa\\0sd\\0sr\\0tg\\0uz\\0yuezh\\0\",\n+                )\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    3u8, 0u8, 0u8, 0u8, 5u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 10u8, 0u8, 0u8,\n-                    0u8, 12u8, 0u8, 0u8, 0u8, 13u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 15u8,\n-                    0u8, 0u8, 0u8, 16u8, 0u8, 0u8, 0u8, 17u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                    0u8, 22u8, 0u8, 0u8, 0u8, 23u8, 0u8, 0u8, 0u8, 25u8, 0u8, 0u8, 0u8, 26u8,\n-                    0u8, 0u8, 0u8, 28u8, 0u8, 0u8, 0u8, 29u8, 0u8, 0u8, 0u8, 44u8, 0u8, 0u8,\n-                    0u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"\\x03\\0\\0\\0\\x05\\0\\0\\0\\t\\0\\0\\0\\x0B\\0\\0\\0\\x0C\\0\\0\\0\\r\\0\\0\\0\\x0E\\0\\0\\0\\x0F\\0\\0\\0\\x13\\0\\0\\0\\x14\\0\\0\\0\\x16\\0\\0\\0\\x17\\0\\0\\0&\\0\\0\\0\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    73u8, 81u8, 0u8, 73u8, 82u8, 0u8, 82u8, 85u8, 0u8, 67u8, 77u8, 0u8, 83u8,\n-                    68u8, 0u8, 65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 73u8, 82u8, 0u8, 77u8, 78u8,\n-                    0u8, 76u8, 66u8, 0u8, 67u8, 78u8, 0u8, 84u8, 82u8, 0u8, 71u8, 78u8, 0u8,\n-                    67u8, 78u8, 0u8, 67u8, 67u8, 0u8, 80u8, 75u8, 0u8, 78u8, 76u8, 0u8, 73u8,\n-                    78u8, 0u8, 77u8, 69u8, 0u8, 82u8, 79u8, 0u8, 82u8, 85u8, 0u8, 84u8, 82u8,\n-                    0u8, 80u8, 75u8, 0u8, 75u8, 90u8, 0u8, 77u8, 78u8, 0u8, 78u8, 80u8, 0u8,\n-                    65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 67u8, 78u8, 0u8, 65u8, 85u8, 0u8, 66u8,\n-                    78u8, 0u8, 71u8, 66u8, 0u8, 71u8, 70u8, 0u8, 72u8, 75u8, 0u8, 73u8, 68u8,\n-                    0u8, 77u8, 79u8, 0u8, 80u8, 65u8, 0u8, 80u8, 70u8, 0u8, 80u8, 72u8, 0u8,\n-                    83u8, 82u8, 0u8, 84u8, 72u8, 0u8, 84u8, 87u8, 0u8, 85u8, 83u8, 0u8, 86u8,\n-                    78u8, 0u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"IQ\\0IR\\0RU\\0CM\\0SD\\0AF\\0CN\\0IR\\0MN\\0CN\\0TR\\0CN\\0CC\\0PK\\0IN\\0ME\\0RO\\0RU\\0TR\\0PK\\0AF\\0CN\\0CN\\0AU\\0BN\\0GB\\0GF\\0HK\\0ID\\0MO\\0PA\\0PF\\0PH\\0SR\\0TH\\0TW\\0US\\0VN\\0\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8,\n-                    108u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n-                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n-                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8, 116u8,\n-                    110u8, 78u8, 107u8, 111u8, 111u8, 77u8, 111u8, 110u8, 103u8, 65u8, 114u8,\n-                    97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8, 116u8, 110u8, 68u8, 101u8,\n-                    118u8, 97u8, 76u8, 97u8, 116u8, 110u8, 76u8, 97u8, 116u8, 110u8, 76u8,\n-                    97u8, 116u8, 110u8, 76u8, 97u8, 116u8, 110u8, 65u8, 114u8, 97u8, 98u8,\n-                    67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8, 118u8,\n-                    97u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 72u8, 97u8,\n-                    110u8, 115u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8,\n-                    97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8,\n-                    72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8,\n-                    116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8,\n-                    110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8,\n-                    97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"ArabArabCyrlArabArabArabArabArabArabArabLatnMongArabArabDevaLatnLatnLatnLatnArabArabCyrlHansHantHantHantHantHantHantHantHantHantHantHantHantHantHantHant\")\n             },\n         )\n     },\n     l2r: unsafe {\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap::from_parts_unchecked(\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    97u8, 97u8, 0u8, 97u8, 98u8, 0u8, 97u8, 98u8, 114u8, 97u8, 99u8, 101u8,\n-                    97u8, 99u8, 104u8, 97u8, 100u8, 97u8, 97u8, 100u8, 112u8, 97u8, 100u8,\n-                    121u8, 97u8, 101u8, 0u8, 97u8, 101u8, 98u8, 97u8, 102u8, 0u8, 97u8, 103u8,\n-                    113u8, 97u8, 104u8, 111u8, 97u8, 106u8, 116u8, 97u8, 107u8, 0u8, 97u8,\n-                    107u8, 107u8, 97u8, 108u8, 110u8, 97u8, 108u8, 116u8, 97u8, 109u8, 0u8,\n-                    97u8, 109u8, 111u8, 97u8, 110u8, 0u8, 97u8, 110u8, 110u8, 97u8, 111u8,\n-                    122u8, 97u8, 112u8, 100u8, 97u8, 114u8, 0u8, 97u8, 114u8, 99u8, 97u8,\n-                    114u8, 110u8, 97u8, 114u8, 111u8, 97u8, 114u8, 113u8, 97u8, 114u8, 115u8,\n-                    97u8, 114u8, 121u8, 97u8, 114u8, 122u8, 97u8, 115u8, 0u8, 97u8, 115u8,\n-                    97u8, 97u8, 115u8, 101u8, 97u8, 115u8, 116u8, 97u8, 116u8, 106u8, 97u8,\n-                    118u8, 0u8, 97u8, 119u8, 97u8, 97u8, 121u8, 0u8, 97u8, 122u8, 0u8, 98u8,\n-                    97u8, 0u8, 98u8, 97u8, 108u8, 98u8, 97u8, 110u8, 98u8, 97u8, 112u8, 98u8,\n-                    97u8, 114u8, 98u8, 97u8, 115u8, 98u8, 97u8, 120u8, 98u8, 98u8, 99u8, 98u8,\n-                    98u8, 106u8, 98u8, 99u8, 105u8, 98u8, 101u8, 0u8, 98u8, 101u8, 106u8, 98u8,\n-                    101u8, 109u8, 98u8, 101u8, 119u8, 98u8, 101u8, 122u8, 98u8, 102u8, 100u8,\n-                    98u8, 102u8, 113u8, 98u8, 102u8, 116u8, 98u8, 102u8, 121u8, 98u8, 103u8,\n-                    0u8, 98u8, 103u8, 99u8, 98u8, 103u8, 110u8, 98u8, 103u8, 120u8, 98u8,\n-                    104u8, 98u8, 98u8, 104u8, 105u8, 98u8, 104u8, 111u8, 98u8, 105u8, 0u8,\n-                    98u8, 105u8, 107u8, 98u8, 105u8, 110u8, 98u8, 106u8, 106u8, 98u8, 106u8,\n-                    110u8, 98u8, 106u8, 116u8, 98u8, 107u8, 109u8, 98u8, 107u8, 117u8, 98u8,\n-                    108u8, 97u8, 98u8, 108u8, 103u8, 98u8, 108u8, 116u8, 98u8, 109u8, 0u8,\n-                    98u8, 109u8, 113u8, 98u8, 110u8, 0u8, 98u8, 111u8, 0u8, 98u8, 112u8, 121u8,\n-                    98u8, 113u8, 105u8, 98u8, 113u8, 118u8, 98u8, 114u8, 0u8, 98u8, 114u8,\n-                    97u8, 98u8, 114u8, 104u8, 98u8, 114u8, 120u8, 98u8, 115u8, 0u8, 98u8,\n-                    115u8, 113u8, 98u8, 115u8, 115u8, 98u8, 116u8, 111u8, 98u8, 116u8, 118u8,\n-                    98u8, 117u8, 97u8, 98u8, 117u8, 99u8, 98u8, 117u8, 103u8, 98u8, 117u8,\n-                    109u8, 98u8, 118u8, 98u8, 98u8, 121u8, 110u8, 98u8, 121u8, 118u8, 98u8,\n-                    122u8, 101u8, 99u8, 97u8, 0u8, 99u8, 97u8, 100u8, 99u8, 99u8, 104u8, 99u8,\n-                    99u8, 112u8, 99u8, 101u8, 0u8, 99u8, 101u8, 98u8, 99u8, 103u8, 103u8, 99u8,\n-                    104u8, 0u8, 99u8, 104u8, 107u8, 99u8, 104u8, 109u8, 99u8, 104u8, 111u8,\n-                    99u8, 104u8, 112u8, 99u8, 104u8, 114u8, 99u8, 105u8, 99u8, 99u8, 106u8,\n-                    97u8, 99u8, 106u8, 109u8, 99u8, 107u8, 98u8, 99u8, 108u8, 99u8, 99u8,\n-                    109u8, 103u8, 99u8, 111u8, 0u8, 99u8, 111u8, 112u8, 99u8, 112u8, 115u8,\n-                    99u8, 114u8, 0u8, 99u8, 114u8, 103u8, 99u8, 114u8, 104u8, 99u8, 114u8,\n-                    107u8, 99u8, 114u8, 108u8, 99u8, 114u8, 115u8, 99u8, 115u8, 0u8, 99u8,\n-                    115u8, 98u8, 99u8, 115u8, 119u8, 99u8, 116u8, 100u8, 99u8, 117u8, 0u8,\n-                    99u8, 118u8, 0u8, 99u8, 121u8, 0u8, 100u8, 97u8, 0u8, 100u8, 97u8, 102u8,\n-                    100u8, 97u8, 107u8, 100u8, 97u8, 114u8, 100u8, 97u8, 118u8, 100u8, 99u8,\n-                    99u8, 100u8, 101u8, 0u8, 100u8, 101u8, 110u8, 100u8, 103u8, 114u8, 100u8,\n-                    106u8, 101u8, 100u8, 109u8, 102u8, 100u8, 110u8, 106u8, 100u8, 111u8,\n-                    105u8, 100u8, 114u8, 104u8, 100u8, 115u8, 98u8, 100u8, 116u8, 109u8, 100u8,\n-                    116u8, 112u8, 100u8, 116u8, 121u8, 100u8, 117u8, 97u8, 100u8, 118u8, 0u8,\n-                    100u8, 121u8, 111u8, 100u8, 121u8, 117u8, 100u8, 122u8, 0u8, 101u8, 98u8,\n-                    117u8, 101u8, 101u8, 0u8, 101u8, 102u8, 105u8, 101u8, 103u8, 108u8, 101u8,\n-                    103u8, 121u8, 101u8, 107u8, 121u8, 101u8, 108u8, 0u8, 101u8, 110u8, 0u8,\n-                    101u8, 111u8, 0u8, 101u8, 115u8, 0u8, 101u8, 115u8, 103u8, 101u8, 115u8,\n-                    117u8, 101u8, 116u8, 0u8, 101u8, 116u8, 116u8, 101u8, 117u8, 0u8, 101u8,\n-                    119u8, 111u8, 101u8, 120u8, 116u8, 102u8, 97u8, 0u8, 102u8, 97u8, 110u8,\n-                    102u8, 102u8, 0u8, 102u8, 102u8, 109u8, 102u8, 105u8, 0u8, 102u8, 105u8,\n-                    97u8, 102u8, 105u8, 108u8, 102u8, 105u8, 116u8, 102u8, 106u8, 0u8, 102u8,\n-                    111u8, 0u8, 102u8, 111u8, 110u8, 102u8, 114u8, 0u8, 102u8, 114u8, 99u8,\n-                    102u8, 114u8, 112u8, 102u8, 114u8, 114u8, 102u8, 114u8, 115u8, 102u8,\n-                    117u8, 98u8, 102u8, 117u8, 100u8, 102u8, 117u8, 102u8, 102u8, 117u8, 113u8,\n-                    102u8, 117u8, 114u8, 102u8, 117u8, 118u8, 102u8, 118u8, 114u8, 102u8,\n-                    121u8, 0u8, 103u8, 97u8, 0u8, 103u8, 97u8, 97u8, 103u8, 97u8, 103u8, 103u8,\n-                    97u8, 110u8, 103u8, 97u8, 121u8, 103u8, 98u8, 109u8, 103u8, 98u8, 122u8,\n-                    103u8, 99u8, 114u8, 103u8, 100u8, 0u8, 103u8, 101u8, 122u8, 103u8, 103u8,\n-                    110u8, 103u8, 105u8, 108u8, 103u8, 106u8, 107u8, 103u8, 106u8, 117u8,\n-                    103u8, 108u8, 0u8, 103u8, 108u8, 107u8, 103u8, 110u8, 0u8, 103u8, 111u8,\n-                    109u8, 103u8, 111u8, 110u8, 103u8, 111u8, 114u8, 103u8, 111u8, 115u8,\n-                    103u8, 111u8, 116u8, 103u8, 114u8, 99u8, 103u8, 114u8, 116u8, 103u8, 115u8,\n-                    119u8, 103u8, 117u8, 0u8, 103u8, 117u8, 98u8, 103u8, 117u8, 99u8, 103u8,\n-                    117u8, 114u8, 103u8, 117u8, 122u8, 103u8, 118u8, 0u8, 103u8, 118u8, 114u8,\n-                    103u8, 119u8, 105u8, 104u8, 97u8, 0u8, 104u8, 97u8, 107u8, 104u8, 97u8,\n-                    119u8, 104u8, 97u8, 122u8, 104u8, 101u8, 0u8, 104u8, 105u8, 0u8, 104u8,\n-                    105u8, 102u8, 104u8, 105u8, 108u8, 104u8, 108u8, 117u8, 104u8, 109u8,\n-                    100u8, 104u8, 110u8, 100u8, 104u8, 110u8, 101u8, 104u8, 110u8, 106u8,\n-                    104u8, 110u8, 110u8, 104u8, 110u8, 111u8, 104u8, 111u8, 0u8, 104u8, 111u8,\n-                    99u8, 104u8, 111u8, 106u8, 104u8, 114u8, 0u8, 104u8, 115u8, 98u8, 104u8,\n-                    115u8, 110u8, 104u8, 116u8, 0u8, 104u8, 117u8, 0u8, 104u8, 117u8, 114u8,\n-                    104u8, 121u8, 0u8, 104u8, 122u8, 0u8, 105u8, 97u8, 0u8, 105u8, 98u8, 97u8,\n-                    105u8, 98u8, 98u8, 105u8, 100u8, 0u8, 105u8, 102u8, 101u8, 105u8, 103u8,\n-                    0u8, 105u8, 105u8, 0u8, 105u8, 107u8, 0u8, 105u8, 108u8, 111u8, 105u8,\n-                    110u8, 0u8, 105u8, 110u8, 104u8, 105u8, 111u8, 0u8, 105u8, 115u8, 0u8,\n-                    105u8, 116u8, 0u8, 105u8, 117u8, 0u8, 105u8, 119u8, 0u8, 105u8, 122u8,\n-                    104u8, 106u8, 97u8, 0u8, 106u8, 97u8, 109u8, 106u8, 98u8, 111u8, 106u8,\n-                    103u8, 111u8, 106u8, 105u8, 0u8, 106u8, 109u8, 99u8, 106u8, 109u8, 108u8,\n-                    106u8, 117u8, 116u8, 106u8, 118u8, 0u8, 106u8, 119u8, 0u8, 107u8, 97u8,\n-                    0u8, 107u8, 97u8, 97u8, 107u8, 97u8, 98u8, 107u8, 97u8, 99u8, 107u8, 97u8,\n-                    106u8, 107u8, 97u8, 109u8, 107u8, 97u8, 111u8, 107u8, 97u8, 119u8, 107u8,\n-                    98u8, 100u8, 107u8, 98u8, 121u8, 107u8, 99u8, 103u8, 107u8, 99u8, 107u8,\n-                    107u8, 100u8, 101u8, 107u8, 100u8, 104u8, 107u8, 100u8, 116u8, 107u8,\n-                    101u8, 97u8, 107u8, 101u8, 110u8, 107u8, 102u8, 111u8, 107u8, 102u8, 114u8,\n-                    107u8, 102u8, 121u8, 107u8, 103u8, 0u8, 107u8, 103u8, 101u8, 107u8, 103u8,\n-                    112u8, 107u8, 104u8, 97u8, 107u8, 104u8, 98u8, 107u8, 104u8, 110u8, 107u8,\n-                    104u8, 113u8, 107u8, 104u8, 116u8, 107u8, 104u8, 119u8, 107u8, 105u8, 0u8,\n-                    107u8, 105u8, 117u8, 107u8, 106u8, 0u8, 107u8, 106u8, 103u8, 107u8, 107u8,\n-                    0u8, 107u8, 107u8, 106u8, 107u8, 108u8, 0u8, 107u8, 108u8, 110u8, 107u8,\n-                    109u8, 0u8, 107u8, 109u8, 98u8, 107u8, 110u8, 0u8, 107u8, 110u8, 102u8,\n-                    107u8, 111u8, 0u8, 107u8, 111u8, 105u8, 107u8, 111u8, 107u8, 107u8, 111u8,\n-                    115u8, 107u8, 112u8, 101u8, 107u8, 114u8, 99u8, 107u8, 114u8, 105u8, 107u8,\n-                    114u8, 106u8, 107u8, 114u8, 108u8, 107u8, 114u8, 117u8, 107u8, 115u8, 0u8,\n-                    107u8, 115u8, 98u8, 107u8, 115u8, 102u8, 107u8, 115u8, 104u8, 107u8, 116u8,\n-                    114u8, 107u8, 117u8, 0u8, 107u8, 117u8, 109u8, 107u8, 118u8, 0u8, 107u8,\n-                    118u8, 114u8, 107u8, 118u8, 120u8, 107u8, 119u8, 0u8, 107u8, 119u8, 107u8,\n-                    107u8, 120u8, 108u8, 107u8, 120u8, 109u8, 107u8, 120u8, 112u8, 107u8,\n-                    121u8, 0u8, 107u8, 122u8, 106u8, 107u8, 122u8, 116u8, 108u8, 97u8, 0u8,\n-                    108u8, 97u8, 98u8, 108u8, 97u8, 100u8, 108u8, 97u8, 103u8, 108u8, 97u8,\n-                    104u8, 108u8, 97u8, 106u8, 108u8, 98u8, 0u8, 108u8, 98u8, 101u8, 108u8,\n-                    98u8, 119u8, 108u8, 99u8, 112u8, 108u8, 101u8, 112u8, 108u8, 101u8, 122u8,\n-                    108u8, 103u8, 0u8, 108u8, 105u8, 0u8, 108u8, 105u8, 102u8, 108u8, 105u8,\n-                    106u8, 108u8, 105u8, 108u8, 108u8, 105u8, 115u8, 108u8, 106u8, 112u8,\n-                    108u8, 107u8, 105u8, 108u8, 107u8, 116u8, 108u8, 109u8, 110u8, 108u8,\n-                    109u8, 111u8, 108u8, 110u8, 0u8, 108u8, 111u8, 0u8, 108u8, 111u8, 108u8,\n-                    108u8, 111u8, 122u8, 108u8, 114u8, 99u8, 108u8, 116u8, 0u8, 108u8, 116u8,\n-                    103u8, 108u8, 117u8, 0u8, 108u8, 117u8, 97u8, 108u8, 117u8, 111u8, 108u8,\n-                    117u8, 121u8, 108u8, 117u8, 122u8, 108u8, 118u8, 0u8, 108u8, 119u8, 108u8,\n-                    108u8, 122u8, 104u8, 108u8, 122u8, 122u8, 109u8, 97u8, 100u8, 109u8, 97u8,\n-                    102u8, 109u8, 97u8, 103u8, 109u8, 97u8, 105u8, 109u8, 97u8, 107u8, 109u8,\n-                    97u8, 110u8, 109u8, 97u8, 115u8, 109u8, 97u8, 122u8, 109u8, 100u8, 102u8,\n-                    109u8, 100u8, 104u8, 109u8, 100u8, 114u8, 109u8, 101u8, 110u8, 109u8,\n-                    101u8, 114u8, 109u8, 102u8, 97u8, 109u8, 102u8, 101u8, 109u8, 103u8, 0u8,\n-                    109u8, 103u8, 104u8, 109u8, 103u8, 111u8, 109u8, 103u8, 112u8, 109u8,\n-                    103u8, 121u8, 109u8, 104u8, 0u8, 109u8, 105u8, 0u8, 109u8, 105u8, 99u8,\n-                    109u8, 105u8, 110u8, 109u8, 107u8, 0u8, 109u8, 108u8, 0u8, 109u8, 108u8,\n-                    115u8, 109u8, 110u8, 0u8, 109u8, 110u8, 105u8, 109u8, 110u8, 119u8, 109u8,\n-                    111u8, 0u8, 109u8, 111u8, 101u8, 109u8, 111u8, 104u8, 109u8, 111u8, 115u8,\n-                    109u8, 114u8, 0u8, 109u8, 114u8, 100u8, 109u8, 114u8, 106u8, 109u8, 114u8,\n-                    111u8, 109u8, 115u8, 0u8, 109u8, 116u8, 0u8, 109u8, 116u8, 114u8, 109u8,\n-                    117u8, 97u8, 109u8, 117u8, 115u8, 109u8, 118u8, 121u8, 109u8, 119u8, 107u8,\n-                    109u8, 119u8, 114u8, 109u8, 119u8, 118u8, 109u8, 119u8, 119u8, 109u8,\n-                    120u8, 99u8, 109u8, 121u8, 0u8, 109u8, 121u8, 118u8, 109u8, 121u8, 120u8,\n-                    109u8, 121u8, 122u8, 109u8, 122u8, 110u8, 110u8, 97u8, 0u8, 110u8, 97u8,\n-                    110u8, 110u8, 97u8, 112u8, 110u8, 97u8, 113u8, 110u8, 98u8, 0u8, 110u8,\n-                    99u8, 104u8, 110u8, 100u8, 0u8, 110u8, 100u8, 99u8, 110u8, 100u8, 115u8,\n-                    110u8, 101u8, 0u8, 110u8, 101u8, 119u8, 110u8, 103u8, 0u8, 110u8, 103u8,\n-                    108u8, 110u8, 104u8, 101u8, 110u8, 104u8, 119u8, 110u8, 105u8, 106u8,\n-                    110u8, 105u8, 117u8, 110u8, 106u8, 111u8, 110u8, 108u8, 0u8, 110u8, 109u8,\n-                    103u8, 110u8, 110u8, 0u8, 110u8, 110u8, 104u8, 110u8, 110u8, 112u8, 110u8,\n-                    111u8, 0u8, 110u8, 111u8, 100u8, 110u8, 111u8, 101u8, 110u8, 111u8, 110u8,\n-                    110u8, 113u8, 111u8, 110u8, 114u8, 0u8, 110u8, 115u8, 107u8, 110u8, 115u8,\n-                    111u8, 110u8, 115u8, 116u8, 110u8, 117u8, 115u8, 110u8, 118u8, 0u8, 110u8,\n-                    120u8, 113u8, 110u8, 121u8, 0u8, 110u8, 121u8, 109u8, 110u8, 121u8, 110u8,\n-                    110u8, 122u8, 105u8, 111u8, 99u8, 0u8, 111u8, 106u8, 0u8, 111u8, 106u8,\n-                    115u8, 111u8, 107u8, 97u8, 111u8, 109u8, 0u8, 111u8, 114u8, 0u8, 111u8,\n-                    115u8, 0u8, 111u8, 115u8, 97u8, 111u8, 116u8, 107u8, 111u8, 117u8, 105u8,\n-                    112u8, 97u8, 0u8, 112u8, 97u8, 103u8, 112u8, 97u8, 108u8, 112u8, 97u8,\n-                    109u8, 112u8, 97u8, 112u8, 112u8, 97u8, 117u8, 112u8, 99u8, 100u8, 112u8,\n-                    99u8, 109u8, 112u8, 100u8, 99u8, 112u8, 100u8, 116u8, 112u8, 101u8, 111u8,\n-                    112u8, 102u8, 108u8, 112u8, 104u8, 110u8, 112u8, 105u8, 115u8, 112u8,\n-                    107u8, 97u8, 112u8, 107u8, 111u8, 112u8, 108u8, 0u8, 112u8, 109u8, 115u8,\n-                    112u8, 110u8, 116u8, 112u8, 111u8, 110u8, 112u8, 112u8, 97u8, 112u8, 113u8,\n-                    109u8, 112u8, 114u8, 97u8, 112u8, 114u8, 100u8, 112u8, 114u8, 103u8, 112u8,\n-                    115u8, 0u8, 112u8, 116u8, 0u8, 112u8, 117u8, 117u8, 113u8, 117u8, 0u8,\n-                    113u8, 117u8, 99u8, 113u8, 117u8, 103u8, 114u8, 97u8, 106u8, 114u8, 99u8,\n-                    102u8, 114u8, 101u8, 106u8, 114u8, 103u8, 110u8, 114u8, 104u8, 103u8,\n-                    114u8, 105u8, 97u8, 114u8, 105u8, 102u8, 114u8, 106u8, 115u8, 114u8, 107u8,\n-                    116u8, 114u8, 109u8, 0u8, 114u8, 109u8, 102u8, 114u8, 109u8, 111u8, 114u8,\n-                    109u8, 116u8, 114u8, 109u8, 117u8, 114u8, 110u8, 0u8, 114u8, 110u8, 103u8,\n-                    114u8, 111u8, 0u8, 114u8, 111u8, 98u8, 114u8, 111u8, 102u8, 114u8, 116u8,\n-                    109u8, 114u8, 117u8, 0u8, 114u8, 117u8, 101u8, 114u8, 117u8, 103u8, 114u8,\n-                    119u8, 0u8, 114u8, 119u8, 107u8, 114u8, 121u8, 117u8, 115u8, 97u8, 0u8,\n-                    115u8, 97u8, 102u8, 115u8, 97u8, 104u8, 115u8, 97u8, 113u8, 115u8, 97u8,\n-                    115u8, 115u8, 97u8, 116u8, 115u8, 97u8, 118u8, 115u8, 97u8, 122u8, 115u8,\n-                    98u8, 112u8, 115u8, 99u8, 0u8, 115u8, 99u8, 107u8, 115u8, 99u8, 110u8,\n-                    115u8, 99u8, 111u8, 115u8, 100u8, 0u8, 115u8, 100u8, 99u8, 115u8, 100u8,\n-                    104u8, 115u8, 101u8, 0u8, 115u8, 101u8, 102u8, 115u8, 101u8, 104u8, 115u8,\n-                    101u8, 105u8, 115u8, 101u8, 115u8, 115u8, 103u8, 0u8, 115u8, 103u8, 97u8,\n-                    115u8, 103u8, 115u8, 115u8, 104u8, 105u8, 115u8, 104u8, 110u8, 115u8,\n-                    105u8, 0u8, 115u8, 105u8, 100u8, 115u8, 107u8, 0u8, 115u8, 107u8, 114u8,\n-                    115u8, 108u8, 0u8, 115u8, 108u8, 105u8, 115u8, 108u8, 121u8, 115u8, 109u8,\n-                    0u8, 115u8, 109u8, 97u8, 115u8, 109u8, 100u8, 115u8, 109u8, 106u8, 115u8,\n-                    109u8, 110u8, 115u8, 109u8, 112u8, 115u8, 109u8, 115u8, 115u8, 110u8, 0u8,\n-                    115u8, 110u8, 98u8, 115u8, 110u8, 107u8, 115u8, 111u8, 0u8, 115u8, 111u8,\n-                    103u8, 115u8, 111u8, 117u8, 115u8, 113u8, 0u8, 115u8, 114u8, 0u8, 115u8,\n-                    114u8, 98u8, 115u8, 114u8, 110u8, 115u8, 114u8, 114u8, 115u8, 114u8, 120u8,\n-                    115u8, 115u8, 0u8, 115u8, 115u8, 121u8, 115u8, 116u8, 0u8, 115u8, 116u8,\n-                    113u8, 115u8, 117u8, 0u8, 115u8, 117u8, 107u8, 115u8, 117u8, 115u8, 115u8,\n-                    118u8, 0u8, 115u8, 119u8, 0u8, 115u8, 119u8, 98u8, 115u8, 119u8, 99u8,\n-                    115u8, 119u8, 103u8, 115u8, 119u8, 118u8, 115u8, 120u8, 110u8, 115u8,\n-                    121u8, 108u8, 115u8, 121u8, 114u8, 115u8, 122u8, 108u8, 116u8, 97u8, 0u8,\n-                    116u8, 97u8, 106u8, 116u8, 98u8, 119u8, 116u8, 99u8, 121u8, 116u8, 100u8,\n-                    100u8, 116u8, 100u8, 103u8, 116u8, 100u8, 104u8, 116u8, 100u8, 117u8,\n-                    116u8, 101u8, 0u8, 116u8, 101u8, 109u8, 116u8, 101u8, 111u8, 116u8, 101u8,\n-                    116u8, 116u8, 103u8, 0u8, 116u8, 104u8, 0u8, 116u8, 104u8, 108u8, 116u8,\n-                    104u8, 113u8, 116u8, 104u8, 114u8, 116u8, 105u8, 0u8, 116u8, 105u8, 103u8,\n-                    116u8, 105u8, 118u8, 116u8, 107u8, 0u8, 116u8, 107u8, 108u8, 116u8, 107u8,\n-                    114u8, 116u8, 107u8, 116u8, 116u8, 108u8, 0u8, 116u8, 108u8, 121u8, 116u8,\n-                    109u8, 104u8, 116u8, 110u8, 0u8, 116u8, 111u8, 0u8, 116u8, 111u8, 103u8,\n-                    116u8, 111u8, 107u8, 116u8, 112u8, 105u8, 116u8, 114u8, 0u8, 116u8, 114u8,\n-                    117u8, 116u8, 114u8, 118u8, 116u8, 114u8, 119u8, 116u8, 115u8, 0u8, 116u8,\n-                    115u8, 100u8, 116u8, 115u8, 102u8, 116u8, 115u8, 103u8, 116u8, 115u8,\n-                    106u8, 116u8, 116u8, 0u8, 116u8, 116u8, 106u8, 116u8, 116u8, 115u8, 116u8,\n-                    116u8, 116u8, 116u8, 117u8, 109u8, 116u8, 118u8, 108u8, 116u8, 119u8,\n-                    113u8, 116u8, 120u8, 103u8, 116u8, 120u8, 111u8, 116u8, 121u8, 0u8, 116u8,\n-                    121u8, 118u8, 116u8, 122u8, 109u8, 117u8, 100u8, 105u8, 117u8, 100u8,\n-                    109u8, 117u8, 103u8, 0u8, 117u8, 103u8, 97u8, 117u8, 107u8, 0u8, 117u8,\n-                    108u8, 105u8, 117u8, 109u8, 98u8, 117u8, 110u8, 114u8, 117u8, 110u8, 120u8,\n-                    117u8, 114u8, 0u8, 117u8, 122u8, 0u8, 118u8, 97u8, 105u8, 118u8, 101u8,\n-                    0u8, 118u8, 101u8, 99u8, 118u8, 101u8, 112u8, 118u8, 105u8, 0u8, 118u8,\n-                    105u8, 99u8, 118u8, 108u8, 115u8, 118u8, 109u8, 102u8, 118u8, 109u8, 119u8,\n-                    118u8, 111u8, 0u8, 118u8, 111u8, 116u8, 118u8, 114u8, 111u8, 118u8, 117u8,\n-                    110u8, 119u8, 97u8, 0u8, 119u8, 97u8, 101u8, 119u8, 97u8, 108u8, 119u8,\n-                    97u8, 114u8, 119u8, 98u8, 112u8, 119u8, 98u8, 113u8, 119u8, 98u8, 114u8,\n-                    119u8, 108u8, 115u8, 119u8, 110u8, 105u8, 119u8, 111u8, 0u8, 119u8, 115u8,\n-                    103u8, 119u8, 116u8, 109u8, 119u8, 117u8, 117u8, 120u8, 97u8, 118u8, 120u8,\n-                    99u8, 111u8, 120u8, 99u8, 114u8, 120u8, 104u8, 0u8, 120u8, 108u8, 99u8,\n-                    120u8, 108u8, 100u8, 120u8, 109u8, 102u8, 120u8, 109u8, 110u8, 120u8,\n-                    109u8, 114u8, 120u8, 110u8, 97u8, 120u8, 110u8, 114u8, 120u8, 111u8, 103u8,\n-                    120u8, 112u8, 114u8, 120u8, 115u8, 97u8, 120u8, 115u8, 114u8, 121u8, 97u8,\n-                    111u8, 121u8, 97u8, 112u8, 121u8, 97u8, 118u8, 121u8, 98u8, 98u8, 121u8,\n-                    105u8, 0u8, 121u8, 111u8, 0u8, 121u8, 114u8, 108u8, 121u8, 117u8, 97u8,\n-                    121u8, 117u8, 101u8, 122u8, 97u8, 0u8, 122u8, 97u8, 103u8, 122u8, 100u8,\n-                    106u8, 122u8, 101u8, 97u8, 122u8, 103u8, 104u8, 122u8, 104u8, 0u8, 122u8,\n-                    104u8, 120u8, 122u8, 107u8, 116u8, 122u8, 108u8, 109u8, 122u8, 109u8,\n-                    105u8, 122u8, 117u8, 0u8, 122u8, 122u8, 97u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"af\\0am\\0ar\\0as\\0astaz\\0be\\0bg\\0bgcbhobn\\0br\\0brxbs\\0ca\\0cebchrcs\\0cv\\0cy\\0da\\0de\\0doidsbel\\0en\\0es\\0et\\0eu\\0fa\\0ff\\0fi\\0filfo\\0fr\\0ga\\0gd\\0gl\\0gu\\0ha\\0he\\0hi\\0hr\\0hsbhu\\0hy\\0ia\\0id\\0ig\\0is\\0it\\0ja\\0jv\\0ka\\0keakgpkk\\0km\\0kn\\0ko\\0kokks\\0ky\\0lo\\0lt\\0lv\\0maimi\\0mk\\0ml\\0mn\\0mnimr\\0ms\\0my\\0ne\\0nl\\0nn\\0no\\0or\\0pa\\0pcmpl\\0ps\\0pt\\0qu\\0rajrm\\0ro\\0ru\\0sa\\0satsc\\0sd\\0si\\0sk\\0sl\\0so\\0sq\\0sr\\0su\\0sv\\0sw\\0ta\\0te\\0tg\\0th\\0ti\\0tk\\0to\\0tr\\0tt\\0uk\\0ur\\0uz\\0vi\\0wo\\0xh\\0yo\\0yrlyuezh\\0zu\\0\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    69u8, 84u8, 0u8, 71u8, 69u8, 0u8, 71u8, 72u8, 0u8, 73u8, 68u8, 0u8, 85u8,\n-                    71u8, 0u8, 71u8, 72u8, 0u8, 66u8, 84u8, 0u8, 82u8, 85u8, 0u8, 73u8, 82u8,\n-                    0u8, 84u8, 78u8, 0u8, 90u8, 65u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8,\n-                    84u8, 78u8, 0u8, 71u8, 72u8, 0u8, 73u8, 81u8, 0u8, 88u8, 75u8, 0u8, 82u8,\n-                    85u8, 0u8, 69u8, 84u8, 0u8, 78u8, 71u8, 0u8, 69u8, 83u8, 0u8, 78u8, 71u8,\n-                    0u8, 73u8, 68u8, 0u8, 84u8, 71u8, 0u8, 69u8, 71u8, 0u8, 73u8, 82u8, 0u8,\n-                    67u8, 76u8, 0u8, 66u8, 79u8, 0u8, 68u8, 90u8, 0u8, 83u8, 65u8, 0u8, 77u8,\n-                    65u8, 0u8, 69u8, 71u8, 0u8, 73u8, 78u8, 0u8, 84u8, 90u8, 0u8, 85u8, 83u8,\n-                    0u8, 69u8, 83u8, 0u8, 67u8, 65u8, 0u8, 82u8, 85u8, 0u8, 73u8, 78u8, 0u8,\n-                    66u8, 79u8, 0u8, 65u8, 90u8, 0u8, 82u8, 85u8, 0u8, 80u8, 75u8, 0u8, 73u8,\n-                    68u8, 0u8, 78u8, 80u8, 0u8, 65u8, 84u8, 0u8, 67u8, 77u8, 0u8, 67u8, 77u8,\n-                    0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 67u8, 73u8, 0u8, 66u8, 89u8, 0u8,\n-                    83u8, 68u8, 0u8, 90u8, 77u8, 0u8, 73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 67u8,\n-                    77u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 66u8, 71u8,\n-                    0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 84u8, 82u8, 0u8, 73u8, 78u8, 0u8,\n-                    73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 86u8, 85u8, 0u8, 80u8, 72u8, 0u8, 78u8,\n-                    71u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8, 83u8, 78u8, 0u8, 67u8, 77u8,\n-                    0u8, 80u8, 72u8, 0u8, 67u8, 65u8, 0u8, 77u8, 89u8, 0u8, 86u8, 78u8, 0u8,\n-                    77u8, 76u8, 0u8, 77u8, 76u8, 0u8, 66u8, 68u8, 0u8, 67u8, 78u8, 0u8, 73u8,\n-                    78u8, 0u8, 73u8, 82u8, 0u8, 67u8, 73u8, 0u8, 70u8, 82u8, 0u8, 73u8, 78u8,\n-                    0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 66u8, 65u8, 0u8, 76u8, 82u8, 0u8,\n-                    67u8, 77u8, 0u8, 80u8, 72u8, 0u8, 80u8, 75u8, 0u8, 82u8, 85u8, 0u8, 89u8,\n-                    84u8, 0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 71u8, 81u8, 0u8, 69u8, 82u8,\n-                    0u8, 67u8, 77u8, 0u8, 77u8, 76u8, 0u8, 69u8, 83u8, 0u8, 85u8, 83u8, 0u8,\n-                    78u8, 71u8, 0u8, 66u8, 68u8, 0u8, 82u8, 85u8, 0u8, 80u8, 72u8, 0u8, 85u8,\n-                    71u8, 0u8, 71u8, 85u8, 0u8, 70u8, 77u8, 0u8, 82u8, 85u8, 0u8, 85u8, 83u8,\n-                    0u8, 67u8, 65u8, 0u8, 85u8, 83u8, 0u8, 85u8, 83u8, 0u8, 75u8, 72u8, 0u8,\n-                    86u8, 78u8, 0u8, 73u8, 81u8, 0u8, 67u8, 65u8, 0u8, 77u8, 78u8, 0u8, 70u8,\n-                    82u8, 0u8, 69u8, 71u8, 0u8, 80u8, 72u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8,\n-                    0u8, 85u8, 65u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 83u8, 67u8, 0u8,\n-                    67u8, 90u8, 0u8, 80u8, 76u8, 0u8, 67u8, 65u8, 0u8, 77u8, 77u8, 0u8, 82u8,\n-                    85u8, 0u8, 82u8, 85u8, 0u8, 71u8, 66u8, 0u8, 68u8, 75u8, 0u8, 67u8, 73u8,\n-                    0u8, 85u8, 83u8, 0u8, 82u8, 85u8, 0u8, 75u8, 69u8, 0u8, 73u8, 78u8, 0u8,\n-                    68u8, 69u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 78u8, 69u8, 0u8, 78u8,\n-                    71u8, 0u8, 67u8, 73u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8, 68u8, 69u8,\n-                    0u8, 77u8, 76u8, 0u8, 77u8, 89u8, 0u8, 78u8, 80u8, 0u8, 67u8, 77u8, 0u8,\n-                    77u8, 86u8, 0u8, 83u8, 78u8, 0u8, 66u8, 70u8, 0u8, 66u8, 84u8, 0u8, 75u8,\n-                    69u8, 0u8, 71u8, 72u8, 0u8, 78u8, 71u8, 0u8, 73u8, 84u8, 0u8, 69u8, 71u8,\n-                    0u8, 77u8, 77u8, 0u8, 71u8, 82u8, 0u8, 85u8, 83u8, 0u8, 48u8, 48u8, 49u8,\n-                    69u8, 83u8, 0u8, 73u8, 78u8, 0u8, 85u8, 83u8, 0u8, 69u8, 69u8, 0u8, 73u8,\n-                    84u8, 0u8, 69u8, 83u8, 0u8, 67u8, 77u8, 0u8, 69u8, 83u8, 0u8, 73u8, 82u8,\n-                    0u8, 71u8, 81u8, 0u8, 83u8, 78u8, 0u8, 77u8, 76u8, 0u8, 70u8, 73u8, 0u8,\n-                    83u8, 68u8, 0u8, 80u8, 72u8, 0u8, 83u8, 69u8, 0u8, 70u8, 74u8, 0u8, 70u8,\n-                    79u8, 0u8, 66u8, 74u8, 0u8, 70u8, 82u8, 0u8, 85u8, 83u8, 0u8, 70u8, 82u8,\n-                    0u8, 68u8, 69u8, 0u8, 68u8, 69u8, 0u8, 67u8, 77u8, 0u8, 87u8, 70u8, 0u8,\n-                    71u8, 78u8, 0u8, 78u8, 69u8, 0u8, 73u8, 84u8, 0u8, 78u8, 71u8, 0u8, 83u8,\n-                    68u8, 0u8, 78u8, 76u8, 0u8, 73u8, 69u8, 0u8, 71u8, 72u8, 0u8, 77u8, 68u8,\n-                    0u8, 67u8, 78u8, 0u8, 73u8, 68u8, 0u8, 73u8, 78u8, 0u8, 73u8, 82u8, 0u8,\n-                    71u8, 70u8, 0u8, 71u8, 66u8, 0u8, 69u8, 84u8, 0u8, 78u8, 80u8, 0u8, 75u8,\n-                    73u8, 0u8, 80u8, 75u8, 0u8, 80u8, 75u8, 0u8, 69u8, 83u8, 0u8, 73u8, 82u8,\n-                    0u8, 80u8, 89u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8,\n-                    78u8, 76u8, 0u8, 85u8, 65u8, 0u8, 67u8, 89u8, 0u8, 73u8, 78u8, 0u8, 67u8,\n-                    72u8, 0u8, 73u8, 78u8, 0u8, 66u8, 82u8, 0u8, 67u8, 79u8, 0u8, 71u8, 72u8,\n-                    0u8, 75u8, 69u8, 0u8, 73u8, 77u8, 0u8, 78u8, 80u8, 0u8, 67u8, 65u8, 0u8,\n-                    78u8, 71u8, 0u8, 67u8, 78u8, 0u8, 85u8, 83u8, 0u8, 65u8, 70u8, 0u8, 73u8,\n-                    76u8, 0u8, 73u8, 78u8, 0u8, 70u8, 74u8, 0u8, 80u8, 72u8, 0u8, 84u8, 82u8,\n-                    0u8, 67u8, 78u8, 0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 85u8, 83u8, 0u8,\n-                    80u8, 72u8, 0u8, 80u8, 75u8, 0u8, 80u8, 71u8, 0u8, 73u8, 78u8, 0u8, 73u8,\n-                    78u8, 0u8, 72u8, 82u8, 0u8, 68u8, 69u8, 0u8, 67u8, 78u8, 0u8, 72u8, 84u8,\n-                    0u8, 72u8, 85u8, 0u8, 67u8, 65u8, 0u8, 65u8, 77u8, 0u8, 78u8, 65u8, 0u8,\n-                    48u8, 48u8, 49u8, 77u8, 89u8, 0u8, 78u8, 71u8, 0u8, 73u8, 68u8, 0u8, 84u8,\n-                    71u8, 0u8, 78u8, 71u8, 0u8, 67u8, 78u8, 0u8, 85u8, 83u8, 0u8, 80u8, 72u8,\n-                    0u8, 73u8, 68u8, 0u8, 82u8, 85u8, 0u8, 48u8, 48u8, 49u8, 73u8, 83u8, 0u8,\n-                    73u8, 84u8, 0u8, 67u8, 65u8, 0u8, 73u8, 76u8, 0u8, 82u8, 85u8, 0u8, 74u8,\n-                    80u8, 0u8, 74u8, 77u8, 0u8, 48u8, 48u8, 49u8, 67u8, 77u8, 0u8, 85u8, 65u8,\n-                    0u8, 84u8, 90u8, 0u8, 78u8, 80u8, 0u8, 68u8, 75u8, 0u8, 73u8, 68u8, 0u8,\n-                    73u8, 68u8, 0u8, 71u8, 69u8, 0u8, 85u8, 90u8, 0u8, 68u8, 90u8, 0u8, 77u8,\n-                    77u8, 0u8, 78u8, 71u8, 0u8, 75u8, 69u8, 0u8, 77u8, 76u8, 0u8, 73u8, 68u8,\n-                    0u8, 82u8, 85u8, 0u8, 78u8, 69u8, 0u8, 78u8, 71u8, 0u8, 90u8, 87u8, 0u8,\n-                    84u8, 90u8, 0u8, 84u8, 71u8, 0u8, 84u8, 72u8, 0u8, 67u8, 86u8, 0u8, 67u8,\n-                    77u8, 0u8, 67u8, 73u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 67u8, 68u8,\n-                    0u8, 73u8, 68u8, 0u8, 66u8, 82u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8,\n-                    73u8, 78u8, 0u8, 77u8, 76u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 75u8,\n-                    69u8, 0u8, 84u8, 82u8, 0u8, 78u8, 65u8, 0u8, 76u8, 65u8, 0u8, 75u8, 90u8,\n-                    0u8, 67u8, 77u8, 0u8, 71u8, 76u8, 0u8, 75u8, 69u8, 0u8, 75u8, 72u8, 0u8,\n-                    65u8, 79u8, 0u8, 73u8, 78u8, 0u8, 71u8, 87u8, 0u8, 75u8, 82u8, 0u8, 82u8,\n-                    85u8, 0u8, 73u8, 78u8, 0u8, 70u8, 77u8, 0u8, 76u8, 82u8, 0u8, 82u8, 85u8,\n-                    0u8, 83u8, 76u8, 0u8, 80u8, 72u8, 0u8, 82u8, 85u8, 0u8, 73u8, 78u8, 0u8,\n-                    73u8, 78u8, 0u8, 84u8, 90u8, 0u8, 67u8, 77u8, 0u8, 68u8, 69u8, 0u8, 77u8,\n-                    89u8, 0u8, 84u8, 82u8, 0u8, 82u8, 85u8, 0u8, 82u8, 85u8, 0u8, 73u8, 68u8,\n-                    0u8, 80u8, 75u8, 0u8, 71u8, 66u8, 0u8, 67u8, 65u8, 0u8, 73u8, 78u8, 0u8,\n-                    84u8, 72u8, 0u8, 80u8, 75u8, 0u8, 75u8, 71u8, 0u8, 77u8, 89u8, 0u8, 77u8,\n-                    89u8, 0u8, 86u8, 65u8, 0u8, 71u8, 82u8, 0u8, 73u8, 76u8, 0u8, 84u8, 90u8,\n-                    0u8, 80u8, 75u8, 0u8, 85u8, 71u8, 0u8, 76u8, 85u8, 0u8, 82u8, 85u8, 0u8,\n-                    73u8, 68u8, 0u8, 67u8, 78u8, 0u8, 73u8, 78u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n-                    71u8, 0u8, 78u8, 76u8, 0u8, 78u8, 80u8, 0u8, 73u8, 84u8, 0u8, 67u8, 65u8,\n-                    0u8, 67u8, 78u8, 0u8, 73u8, 68u8, 0u8, 73u8, 82u8, 0u8, 85u8, 83u8, 0u8,\n-                    73u8, 78u8, 0u8, 73u8, 84u8, 0u8, 67u8, 68u8, 0u8, 76u8, 65u8, 0u8, 67u8,\n-                    68u8, 0u8, 90u8, 77u8, 0u8, 73u8, 82u8, 0u8, 76u8, 84u8, 0u8, 76u8, 86u8,\n-                    0u8, 67u8, 68u8, 0u8, 67u8, 68u8, 0u8, 75u8, 69u8, 0u8, 75u8, 69u8, 0u8,\n-                    73u8, 82u8, 0u8, 76u8, 86u8, 0u8, 84u8, 72u8, 0u8, 67u8, 78u8, 0u8, 84u8,\n-                    82u8, 0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8,\n-                    0u8, 73u8, 68u8, 0u8, 71u8, 77u8, 0u8, 75u8, 69u8, 0u8, 77u8, 88u8, 0u8,\n-                    82u8, 85u8, 0u8, 80u8, 72u8, 0u8, 73u8, 68u8, 0u8, 83u8, 76u8, 0u8, 75u8,\n-                    69u8, 0u8, 84u8, 72u8, 0u8, 77u8, 85u8, 0u8, 77u8, 71u8, 0u8, 77u8, 90u8,\n-                    0u8, 67u8, 77u8, 0u8, 78u8, 80u8, 0u8, 84u8, 90u8, 0u8, 77u8, 72u8, 0u8,\n-                    78u8, 90u8, 0u8, 67u8, 65u8, 0u8, 73u8, 68u8, 0u8, 77u8, 75u8, 0u8, 73u8,\n-                    78u8, 0u8, 83u8, 68u8, 0u8, 77u8, 78u8, 0u8, 73u8, 78u8, 0u8, 77u8, 77u8,\n-                    0u8, 82u8, 79u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 66u8, 70u8, 0u8,\n-                    73u8, 78u8, 0u8, 78u8, 80u8, 0u8, 82u8, 85u8, 0u8, 66u8, 68u8, 0u8, 77u8,\n-                    89u8, 0u8, 77u8, 84u8, 0u8, 73u8, 78u8, 0u8, 67u8, 77u8, 0u8, 85u8, 83u8,\n-                    0u8, 80u8, 75u8, 0u8, 77u8, 76u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8,\n-                    85u8, 83u8, 0u8, 90u8, 87u8, 0u8, 77u8, 77u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n-                    71u8, 0u8, 73u8, 82u8, 0u8, 73u8, 82u8, 0u8, 78u8, 82u8, 0u8, 67u8, 78u8,\n-                    0u8, 73u8, 84u8, 0u8, 78u8, 65u8, 0u8, 78u8, 79u8, 0u8, 77u8, 88u8, 0u8,\n-                    90u8, 87u8, 0u8, 77u8, 90u8, 0u8, 68u8, 69u8, 0u8, 78u8, 80u8, 0u8, 78u8,\n-                    80u8, 0u8, 78u8, 65u8, 0u8, 77u8, 90u8, 0u8, 77u8, 88u8, 0u8, 77u8, 88u8,\n-                    0u8, 73u8, 68u8, 0u8, 78u8, 85u8, 0u8, 73u8, 78u8, 0u8, 78u8, 76u8, 0u8,\n-                    67u8, 77u8, 0u8, 78u8, 79u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8, 78u8,\n-                    79u8, 0u8, 84u8, 72u8, 0u8, 73u8, 78u8, 0u8, 83u8, 69u8, 0u8, 71u8, 78u8,\n-                    0u8, 90u8, 65u8, 0u8, 67u8, 65u8, 0u8, 90u8, 65u8, 0u8, 73u8, 78u8, 0u8,\n-                    83u8, 83u8, 0u8, 85u8, 83u8, 0u8, 67u8, 78u8, 0u8, 77u8, 87u8, 0u8, 84u8,\n-                    90u8, 0u8, 85u8, 71u8, 0u8, 71u8, 72u8, 0u8, 70u8, 82u8, 0u8, 67u8, 65u8,\n-                    0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 69u8, 84u8, 0u8, 73u8, 78u8, 0u8,\n-                    71u8, 69u8, 0u8, 85u8, 83u8, 0u8, 77u8, 78u8, 0u8, 49u8, 52u8, 51u8, 73u8,\n-                    78u8, 0u8, 80u8, 72u8, 0u8, 73u8, 82u8, 0u8, 80u8, 72u8, 0u8, 65u8, 87u8,\n-                    0u8, 80u8, 87u8, 0u8, 70u8, 82u8, 0u8, 78u8, 71u8, 0u8, 85u8, 83u8, 0u8,\n-                    67u8, 65u8, 0u8, 73u8, 82u8, 0u8, 68u8, 69u8, 0u8, 76u8, 66u8, 0u8, 83u8,\n-                    66u8, 0u8, 73u8, 78u8, 0u8, 75u8, 69u8, 0u8, 80u8, 76u8, 0u8, 73u8, 84u8,\n-                    0u8, 71u8, 82u8, 0u8, 70u8, 77u8, 0u8, 73u8, 78u8, 0u8, 67u8, 65u8, 0u8,\n-                    80u8, 75u8, 0u8, 73u8, 82u8, 0u8, 48u8, 48u8, 49u8, 65u8, 70u8, 0u8, 66u8,\n-                    82u8, 0u8, 71u8, 65u8, 0u8, 80u8, 69u8, 0u8, 71u8, 84u8, 0u8, 69u8, 67u8,\n-                    0u8, 73u8, 78u8, 0u8, 82u8, 69u8, 0u8, 73u8, 68u8, 0u8, 73u8, 84u8, 0u8,\n-                    77u8, 77u8, 0u8, 73u8, 78u8, 0u8, 77u8, 65u8, 0u8, 78u8, 80u8, 0u8, 66u8,\n-                    68u8, 0u8, 67u8, 72u8, 0u8, 70u8, 73u8, 0u8, 67u8, 72u8, 0u8, 73u8, 82u8,\n-                    0u8, 83u8, 69u8, 0u8, 66u8, 73u8, 0u8, 77u8, 90u8, 0u8, 82u8, 79u8, 0u8,\n-                    73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 70u8, 74u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n-                    65u8, 0u8, 83u8, 66u8, 0u8, 82u8, 87u8, 0u8, 84u8, 90u8, 0u8, 74u8, 80u8,\n-                    0u8, 73u8, 78u8, 0u8, 71u8, 72u8, 0u8, 82u8, 85u8, 0u8, 75u8, 69u8, 0u8,\n-                    73u8, 68u8, 0u8, 73u8, 78u8, 0u8, 83u8, 78u8, 0u8, 73u8, 78u8, 0u8, 84u8,\n-                    90u8, 0u8, 73u8, 84u8, 0u8, 73u8, 78u8, 0u8, 73u8, 84u8, 0u8, 71u8, 66u8,\n-                    0u8, 80u8, 75u8, 0u8, 73u8, 84u8, 0u8, 73u8, 82u8, 0u8, 78u8, 79u8, 0u8,\n-                    67u8, 73u8, 0u8, 77u8, 90u8, 0u8, 77u8, 88u8, 0u8, 77u8, 76u8, 0u8, 67u8,\n-                    70u8, 0u8, 73u8, 69u8, 0u8, 76u8, 84u8, 0u8, 77u8, 65u8, 0u8, 77u8, 77u8,\n-                    0u8, 76u8, 75u8, 0u8, 69u8, 84u8, 0u8, 83u8, 75u8, 0u8, 80u8, 75u8, 0u8,\n-                    83u8, 73u8, 0u8, 80u8, 76u8, 0u8, 73u8, 68u8, 0u8, 87u8, 83u8, 0u8, 83u8,\n-                    69u8, 0u8, 65u8, 79u8, 0u8, 83u8, 69u8, 0u8, 70u8, 73u8, 0u8, 73u8, 76u8,\n-                    0u8, 70u8, 73u8, 0u8, 90u8, 87u8, 0u8, 77u8, 89u8, 0u8, 77u8, 76u8, 0u8,\n-                    83u8, 79u8, 0u8, 85u8, 90u8, 0u8, 84u8, 72u8, 0u8, 65u8, 76u8, 0u8, 82u8,\n-                    83u8, 0u8, 73u8, 78u8, 0u8, 83u8, 82u8, 0u8, 83u8, 78u8, 0u8, 73u8, 78u8,\n-                    0u8, 90u8, 65u8, 0u8, 69u8, 82u8, 0u8, 90u8, 65u8, 0u8, 68u8, 69u8, 0u8,\n-                    73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 71u8, 78u8, 0u8, 83u8, 69u8, 0u8, 84u8,\n-                    90u8, 0u8, 89u8, 84u8, 0u8, 67u8, 68u8, 0u8, 68u8, 69u8, 0u8, 73u8, 78u8,\n-                    0u8, 73u8, 68u8, 0u8, 66u8, 68u8, 0u8, 73u8, 81u8, 0u8, 80u8, 76u8, 0u8,\n-                    73u8, 78u8, 0u8, 78u8, 80u8, 0u8, 80u8, 72u8, 0u8, 73u8, 78u8, 0u8, 67u8,\n-                    78u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 77u8, 89u8, 0u8, 73u8, 78u8,\n-                    0u8, 83u8, 76u8, 0u8, 85u8, 71u8, 0u8, 84u8, 76u8, 0u8, 84u8, 74u8, 0u8,\n-                    84u8, 72u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 69u8,\n-                    84u8, 0u8, 69u8, 82u8, 0u8, 78u8, 71u8, 0u8, 84u8, 77u8, 0u8, 84u8, 75u8,\n-                    0u8, 65u8, 90u8, 0u8, 78u8, 80u8, 0u8, 80u8, 72u8, 0u8, 65u8, 90u8, 0u8,\n-                    78u8, 69u8, 0u8, 90u8, 65u8, 0u8, 84u8, 79u8, 0u8, 77u8, 87u8, 0u8, 48u8,\n-                    48u8, 49u8, 80u8, 71u8, 0u8, 84u8, 82u8, 0u8, 84u8, 82u8, 0u8, 84u8, 87u8,\n-                    0u8, 80u8, 75u8, 0u8, 90u8, 65u8, 0u8, 71u8, 82u8, 0u8, 78u8, 80u8, 0u8,\n-                    80u8, 72u8, 0u8, 66u8, 84u8, 0u8, 82u8, 85u8, 0u8, 85u8, 71u8, 0u8, 84u8,\n-                    72u8, 0u8, 65u8, 90u8, 0u8, 77u8, 87u8, 0u8, 84u8, 86u8, 0u8, 78u8, 69u8,\n-                    0u8, 67u8, 78u8, 0u8, 73u8, 78u8, 0u8, 80u8, 70u8, 0u8, 82u8, 85u8, 0u8,\n-                    77u8, 65u8, 0u8, 82u8, 85u8, 0u8, 82u8, 85u8, 0u8, 67u8, 78u8, 0u8, 83u8,\n-                    89u8, 0u8, 85u8, 65u8, 0u8, 70u8, 77u8, 0u8, 65u8, 79u8, 0u8, 73u8, 78u8,\n-                    0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 85u8, 90u8, 0u8, 76u8, 82u8, 0u8,\n-                    90u8, 65u8, 0u8, 73u8, 84u8, 0u8, 82u8, 85u8, 0u8, 86u8, 78u8, 0u8, 83u8,\n-                    88u8, 0u8, 66u8, 69u8, 0u8, 68u8, 69u8, 0u8, 77u8, 90u8, 0u8, 48u8, 48u8,\n-                    49u8, 82u8, 85u8, 0u8, 69u8, 69u8, 0u8, 84u8, 90u8, 0u8, 66u8, 69u8, 0u8,\n-                    67u8, 72u8, 0u8, 69u8, 84u8, 0u8, 80u8, 72u8, 0u8, 65u8, 85u8, 0u8, 73u8,\n-                    78u8, 0u8, 73u8, 78u8, 0u8, 87u8, 70u8, 0u8, 75u8, 77u8, 0u8, 83u8, 78u8,\n-                    0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8, 66u8, 82u8, 0u8,\n-                    85u8, 90u8, 0u8, 84u8, 82u8, 0u8, 90u8, 65u8, 0u8, 84u8, 82u8, 0u8, 84u8,\n-                    82u8, 0u8, 71u8, 69u8, 0u8, 67u8, 78u8, 0u8, 83u8, 68u8, 0u8, 83u8, 65u8,\n-                    0u8, 73u8, 78u8, 0u8, 85u8, 71u8, 0u8, 73u8, 82u8, 0u8, 89u8, 69u8, 0u8,\n-                    78u8, 80u8, 0u8, 77u8, 90u8, 0u8, 70u8, 77u8, 0u8, 67u8, 77u8, 0u8, 67u8,\n-                    77u8, 0u8, 48u8, 48u8, 49u8, 78u8, 71u8, 0u8, 66u8, 82u8, 0u8, 77u8, 88u8,\n-                    0u8, 72u8, 75u8, 0u8, 67u8, 78u8, 0u8, 83u8, 68u8, 0u8, 75u8, 77u8, 0u8,\n-                    78u8, 76u8, 0u8, 77u8, 65u8, 0u8, 67u8, 78u8, 0u8, 67u8, 78u8, 0u8, 67u8,\n-                    78u8, 0u8, 84u8, 71u8, 0u8, 77u8, 89u8, 0u8, 90u8, 65u8, 0u8, 84u8, 82u8,\n-                    0u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"ZA\\0ET\\0EG\\0IN\\0ES\\0AZ\\0BY\\0BG\\0IN\\0IN\\0BD\\0FR\\0IN\\0BA\\0ES\\0PH\\0US\\0CZ\\0RU\\0GB\\0DK\\0DE\\0IN\\0DE\\0GR\\0US\\0ES\\0EE\\0ES\\0IR\\0SN\\0FI\\0PH\\0FO\\0FR\\0IE\\0GB\\0ES\\0IN\\0NG\\0IL\\0IN\\0HR\\0DE\\0HU\\0AM\\x00001ID\\0NG\\0IS\\0IT\\0JP\\0ID\\0GE\\0CV\\0BR\\0KZ\\0KH\\0IN\\0KR\\0IN\\0IN\\0KG\\0LA\\0LT\\0LV\\0IN\\0NZ\\0MK\\0IN\\0MN\\0IN\\0IN\\0MY\\0MM\\0NP\\0NL\\0NO\\0NO\\0IN\\0IN\\0NG\\0PL\\0AF\\0BR\\0PE\\0IN\\0CH\\0RO\\0RU\\0IN\\0IN\\0IT\\0PK\\0LK\\0SK\\0SI\\0SO\\0AL\\0RS\\0ID\\0SE\\0TZ\\0IN\\0IN\\0TJ\\0TH\\0ET\\0TM\\0TO\\0TR\\0RU\\0UA\\0PK\\0UZ\\0VN\\0SN\\0ZA\\0NG\\0BR\\0HK\\0CN\\0ZA\\0\")\n             },\n         )\n     },\n     ls2r: unsafe {\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap2d::from_parts_unchecked(\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    97u8, 114u8, 99u8, 97u8, 122u8, 0u8, 99u8, 117u8, 0u8, 101u8, 110u8, 0u8,\n-                    102u8, 102u8, 0u8, 103u8, 114u8, 99u8, 107u8, 107u8, 0u8, 107u8, 117u8,\n-                    0u8, 107u8, 121u8, 0u8, 108u8, 105u8, 102u8, 109u8, 97u8, 110u8, 109u8,\n-                    110u8, 0u8, 112u8, 97u8, 0u8, 112u8, 97u8, 108u8, 115u8, 100u8, 0u8, 116u8,\n-                    103u8, 0u8, 117u8, 103u8, 0u8, 117u8, 110u8, 114u8, 117u8, 122u8, 0u8,\n-                    121u8, 117u8, 101u8, 122u8, 104u8, 0u8,\n-                ])\n+                ::zerovec::ZeroVec::from_bytes_unchecked(\n+                    b\"az\\0en\\0ff\\0kk\\0ky\\0mn\\0pa\\0sd\\0tg\\0uz\\0yuezh\\0\",\n+                )\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    2u8, 0u8, 0u8, 0u8, 3u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 5u8, 0u8, 0u8,\n-                    0u8, 6u8, 0u8, 0u8, 0u8, 7u8, 0u8, 0u8, 0u8, 8u8, 0u8, 0u8, 0u8, 10u8, 0u8,\n-                    0u8, 0u8, 12u8, 0u8, 0u8, 0u8, 13u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8,\n-                    15u8, 0u8, 0u8, 0u8, 16u8, 0u8, 0u8, 0u8, 17u8, 0u8, 0u8, 0u8, 20u8, 0u8,\n-                    0u8, 0u8, 21u8, 0u8, 0u8, 0u8, 22u8, 0u8, 0u8, 0u8, 23u8, 0u8, 0u8, 0u8,\n-                    24u8, 0u8, 0u8, 0u8, 25u8, 0u8, 0u8, 0u8, 28u8, 0u8, 0u8, 0u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"\\x01\\0\\0\\0\\x02\\0\\0\\0\\x03\\0\\0\\0\\x04\\0\\0\\0\\x06\\0\\0\\0\\x07\\0\\0\\0\\x08\\0\\0\\0\\x0B\\0\\0\\0\\x0C\\0\\0\\0\\r\\0\\0\\0\\x0E\\0\\0\\0\\x11\\0\\0\\0\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    78u8, 98u8, 97u8, 116u8, 80u8, 97u8, 108u8, 109u8, 65u8, 114u8, 97u8, 98u8,\n-                    71u8, 108u8, 97u8, 103u8, 83u8, 104u8, 97u8, 119u8, 65u8, 100u8, 108u8,\n-                    109u8, 76u8, 105u8, 110u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8,\n-                    97u8, 98u8, 89u8, 101u8, 122u8, 105u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8,\n-                    116u8, 110u8, 76u8, 105u8, 109u8, 98u8, 78u8, 107u8, 111u8, 111u8, 77u8,\n-                    111u8, 110u8, 103u8, 65u8, 114u8, 97u8, 98u8, 80u8, 104u8, 108u8, 112u8,\n-                    68u8, 101u8, 118u8, 97u8, 75u8, 104u8, 111u8, 106u8, 83u8, 105u8, 110u8,\n-                    100u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8,\n-                    118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8, 115u8, 66u8,\n-                    111u8, 112u8, 111u8, 72u8, 97u8, 110u8, 98u8, 72u8, 97u8, 110u8, 116u8,\n-                ])\n+                ::zerovec::ZeroVec::from_bytes_unchecked(\n+                    b\"ArabShawAdlmArabArabLatnMongArabDevaKhojSindArabArabHansBopoHanbHant\",\n+                )\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    74u8, 79u8, 0u8, 83u8, 89u8, 0u8, 73u8, 82u8, 0u8, 66u8, 71u8, 0u8, 71u8,\n-                    66u8, 0u8, 71u8, 78u8, 0u8, 71u8, 82u8, 0u8, 67u8, 78u8, 0u8, 73u8, 81u8,\n-                    0u8, 71u8, 69u8, 0u8, 67u8, 78u8, 0u8, 84u8, 82u8, 0u8, 73u8, 78u8, 0u8,\n-                    71u8, 78u8, 0u8, 67u8, 78u8, 0u8, 80u8, 75u8, 0u8, 67u8, 78u8, 0u8, 73u8,\n-                    78u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 75u8, 90u8,\n-                    0u8, 78u8, 80u8, 0u8, 65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 84u8, 87u8, 0u8,\n-                    84u8, 87u8, 0u8, 84u8, 87u8, 0u8,\n-                ])\n+                ::zerovec::ZeroVec::from_bytes_unchecked(\n+                    b\"IR\\0GB\\0GN\\0CN\\0CN\\0TR\\0CN\\0PK\\0IN\\0IN\\0IN\\0PK\\0AF\\0CN\\0TW\\0TW\\0TW\\0\",\n+                )\n             },\n         )\n     },"}, {"sha": "a13646a0b925e1c4b2750e515ef068ccaef14272", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/parents_v1/und.rs.data", "status": "modified", "additions": 2, "deletions": 205, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fund.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -3,213 +3,10 @@\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap::from_parts_unchecked(\n             unsafe {\n-                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                    131u8, 0u8, 0u8, 0u8, 0u8, 0u8, 6u8, 0u8, 11u8, 0u8, 16u8, 0u8, 21u8, 0u8,\n-                    26u8, 0u8, 31u8, 0u8, 36u8, 0u8, 41u8, 0u8, 46u8, 0u8, 51u8, 0u8, 56u8,\n-                    0u8, 61u8, 0u8, 66u8, 0u8, 71u8, 0u8, 76u8, 0u8, 81u8, 0u8, 86u8, 0u8,\n-                    91u8, 0u8, 96u8, 0u8, 101u8, 0u8, 106u8, 0u8, 111u8, 0u8, 116u8, 0u8,\n-                    121u8, 0u8, 126u8, 0u8, 131u8, 0u8, 136u8, 0u8, 141u8, 0u8, 146u8, 0u8,\n-                    151u8, 0u8, 156u8, 0u8, 161u8, 0u8, 166u8, 0u8, 171u8, 0u8, 176u8, 0u8,\n-                    181u8, 0u8, 186u8, 0u8, 191u8, 0u8, 196u8, 0u8, 201u8, 0u8, 206u8, 0u8,\n-                    211u8, 0u8, 216u8, 0u8, 221u8, 0u8, 226u8, 0u8, 231u8, 0u8, 236u8, 0u8,\n-                    241u8, 0u8, 246u8, 0u8, 251u8, 0u8, 0u8, 1u8, 5u8, 1u8, 10u8, 1u8, 15u8,\n-                    1u8, 20u8, 1u8, 25u8, 1u8, 30u8, 1u8, 35u8, 1u8, 40u8, 1u8, 45u8, 1u8,\n-                    50u8, 1u8, 55u8, 1u8, 60u8, 1u8, 65u8, 1u8, 70u8, 1u8, 75u8, 1u8, 80u8,\n-                    1u8, 85u8, 1u8, 90u8, 1u8, 95u8, 1u8, 100u8, 1u8, 105u8, 1u8, 110u8, 1u8,\n-                    115u8, 1u8, 120u8, 1u8, 125u8, 1u8, 130u8, 1u8, 135u8, 1u8, 140u8, 1u8,\n-                    145u8, 1u8, 150u8, 1u8, 155u8, 1u8, 160u8, 1u8, 165u8, 1u8, 170u8, 1u8,\n-                    175u8, 1u8, 180u8, 1u8, 185u8, 1u8, 190u8, 1u8, 195u8, 1u8, 200u8, 1u8,\n-                    205u8, 1u8, 210u8, 1u8, 215u8, 1u8, 220u8, 1u8, 225u8, 1u8, 230u8, 1u8,\n-                    235u8, 1u8, 240u8, 1u8, 245u8, 1u8, 250u8, 1u8, 255u8, 1u8, 4u8, 2u8, 9u8,\n-                    2u8, 14u8, 2u8, 19u8, 2u8, 24u8, 2u8, 29u8, 2u8, 34u8, 2u8, 39u8, 2u8,\n-                    44u8, 2u8, 49u8, 2u8, 54u8, 2u8, 59u8, 2u8, 64u8, 2u8, 71u8, 2u8, 73u8,\n-                    2u8, 75u8, 2u8, 77u8, 2u8, 82u8, 2u8, 87u8, 2u8, 92u8, 2u8, 97u8, 2u8,\n-                    102u8, 2u8, 107u8, 2u8, 112u8, 2u8, 117u8, 2u8, 122u8, 2u8, 127u8, 2u8,\n-                    132u8, 2u8, 101u8, 110u8, 45u8, 49u8, 53u8, 48u8, 101u8, 110u8, 45u8, 65u8,\n-                    71u8, 101u8, 110u8, 45u8, 65u8, 73u8, 101u8, 110u8, 45u8, 65u8, 84u8,\n-                    101u8, 110u8, 45u8, 65u8, 85u8, 101u8, 110u8, 45u8, 66u8, 66u8, 101u8,\n-                    110u8, 45u8, 66u8, 69u8, 101u8, 110u8, 45u8, 66u8, 77u8, 101u8, 110u8,\n-                    45u8, 66u8, 83u8, 101u8, 110u8, 45u8, 66u8, 87u8, 101u8, 110u8, 45u8, 66u8,\n-                    90u8, 101u8, 110u8, 45u8, 67u8, 67u8, 101u8, 110u8, 45u8, 67u8, 72u8,\n-                    101u8, 110u8, 45u8, 67u8, 75u8, 101u8, 110u8, 45u8, 67u8, 77u8, 101u8,\n-                    110u8, 45u8, 67u8, 88u8, 101u8, 110u8, 45u8, 67u8, 89u8, 101u8, 110u8,\n-                    45u8, 68u8, 69u8, 101u8, 110u8, 45u8, 68u8, 71u8, 101u8, 110u8, 45u8, 68u8,\n-                    75u8, 101u8, 110u8, 45u8, 68u8, 77u8, 101u8, 110u8, 45u8, 69u8, 82u8,\n-                    101u8, 110u8, 45u8, 70u8, 73u8, 101u8, 110u8, 45u8, 70u8, 74u8, 101u8,\n-                    110u8, 45u8, 70u8, 75u8, 101u8, 110u8, 45u8, 70u8, 77u8, 101u8, 110u8,\n-                    45u8, 71u8, 66u8, 101u8, 110u8, 45u8, 71u8, 68u8, 101u8, 110u8, 45u8, 71u8,\n-                    71u8, 101u8, 110u8, 45u8, 71u8, 72u8, 101u8, 110u8, 45u8, 71u8, 73u8,\n-                    101u8, 110u8, 45u8, 71u8, 77u8, 101u8, 110u8, 45u8, 71u8, 89u8, 101u8,\n-                    110u8, 45u8, 72u8, 75u8, 101u8, 110u8, 45u8, 73u8, 69u8, 101u8, 110u8,\n-                    45u8, 73u8, 76u8, 101u8, 110u8, 45u8, 73u8, 77u8, 101u8, 110u8, 45u8, 73u8,\n-                    78u8, 101u8, 110u8, 45u8, 73u8, 79u8, 101u8, 110u8, 45u8, 74u8, 69u8,\n-                    101u8, 110u8, 45u8, 74u8, 77u8, 101u8, 110u8, 45u8, 75u8, 69u8, 101u8,\n-                    110u8, 45u8, 75u8, 73u8, 101u8, 110u8, 45u8, 75u8, 78u8, 101u8, 110u8,\n-                    45u8, 75u8, 89u8, 101u8, 110u8, 45u8, 76u8, 67u8, 101u8, 110u8, 45u8, 76u8,\n-                    82u8, 101u8, 110u8, 45u8, 76u8, 83u8, 101u8, 110u8, 45u8, 77u8, 71u8,\n-                    101u8, 110u8, 45u8, 77u8, 79u8, 101u8, 110u8, 45u8, 77u8, 83u8, 101u8,\n-                    110u8, 45u8, 77u8, 84u8, 101u8, 110u8, 45u8, 77u8, 85u8, 101u8, 110u8,\n-                    45u8, 77u8, 86u8, 101u8, 110u8, 45u8, 77u8, 87u8, 101u8, 110u8, 45u8, 77u8,\n-                    89u8, 101u8, 110u8, 45u8, 78u8, 65u8, 101u8, 110u8, 45u8, 78u8, 70u8,\n-                    101u8, 110u8, 45u8, 78u8, 71u8, 101u8, 110u8, 45u8, 78u8, 76u8, 101u8,\n-                    110u8, 45u8, 78u8, 82u8, 101u8, 110u8, 45u8, 78u8, 85u8, 101u8, 110u8,\n-                    45u8, 78u8, 90u8, 101u8, 110u8, 45u8, 80u8, 71u8, 101u8, 110u8, 45u8, 80u8,\n-                    75u8, 101u8, 110u8, 45u8, 80u8, 78u8, 101u8, 110u8, 45u8, 80u8, 87u8,\n-                    101u8, 110u8, 45u8, 82u8, 87u8, 101u8, 110u8, 45u8, 83u8, 66u8, 101u8,\n-                    110u8, 45u8, 83u8, 67u8, 101u8, 110u8, 45u8, 83u8, 68u8, 101u8, 110u8,\n-                    45u8, 83u8, 69u8, 101u8, 110u8, 45u8, 83u8, 71u8, 101u8, 110u8, 45u8, 83u8,\n-                    72u8, 101u8, 110u8, 45u8, 83u8, 73u8, 101u8, 110u8, 45u8, 83u8, 76u8,\n-                    101u8, 110u8, 45u8, 83u8, 83u8, 101u8, 110u8, 45u8, 83u8, 88u8, 101u8,\n-                    110u8, 45u8, 83u8, 90u8, 101u8, 110u8, 45u8, 84u8, 67u8, 101u8, 110u8,\n-                    45u8, 84u8, 75u8, 101u8, 110u8, 45u8, 84u8, 79u8, 101u8, 110u8, 45u8, 84u8,\n-                    84u8, 101u8, 110u8, 45u8, 84u8, 86u8, 101u8, 110u8, 45u8, 84u8, 90u8,\n-                    101u8, 110u8, 45u8, 85u8, 71u8, 101u8, 110u8, 45u8, 86u8, 67u8, 101u8,\n-                    110u8, 45u8, 86u8, 71u8, 101u8, 110u8, 45u8, 86u8, 85u8, 101u8, 110u8,\n-                    45u8, 87u8, 83u8, 101u8, 110u8, 45u8, 90u8, 65u8, 101u8, 110u8, 45u8, 90u8,\n-                    77u8, 101u8, 110u8, 45u8, 90u8, 87u8, 101u8, 115u8, 45u8, 65u8, 82u8,\n-                    101u8, 115u8, 45u8, 66u8, 79u8, 101u8, 115u8, 45u8, 66u8, 82u8, 101u8,\n-                    115u8, 45u8, 66u8, 90u8, 101u8, 115u8, 45u8, 67u8, 76u8, 101u8, 115u8,\n-                    45u8, 67u8, 79u8, 101u8, 115u8, 45u8, 67u8, 82u8, 101u8, 115u8, 45u8, 67u8,\n-                    85u8, 101u8, 115u8, 45u8, 68u8, 79u8, 101u8, 115u8, 45u8, 69u8, 67u8,\n-                    101u8, 115u8, 45u8, 71u8, 84u8, 101u8, 115u8, 45u8, 72u8, 78u8, 101u8,\n-                    115u8, 45u8, 77u8, 88u8, 101u8, 115u8, 45u8, 78u8, 73u8, 101u8, 115u8,\n-                    45u8, 80u8, 65u8, 101u8, 115u8, 45u8, 80u8, 69u8, 101u8, 115u8, 45u8, 80u8,\n-                    82u8, 101u8, 115u8, 45u8, 80u8, 89u8, 101u8, 115u8, 45u8, 83u8, 86u8,\n-                    101u8, 115u8, 45u8, 85u8, 83u8, 101u8, 115u8, 45u8, 85u8, 89u8, 101u8,\n-                    115u8, 45u8, 86u8, 69u8, 104u8, 105u8, 45u8, 76u8, 97u8, 116u8, 110u8,\n-                    104u8, 116u8, 110u8, 98u8, 110u8, 110u8, 112u8, 116u8, 45u8, 65u8, 79u8,\n-                    112u8, 116u8, 45u8, 67u8, 72u8, 112u8, 116u8, 45u8, 67u8, 86u8, 112u8,\n-                    116u8, 45u8, 70u8, 82u8, 112u8, 116u8, 45u8, 71u8, 81u8, 112u8, 116u8,\n-                    45u8, 71u8, 87u8, 112u8, 116u8, 45u8, 76u8, 85u8, 112u8, 116u8, 45u8, 77u8,\n-                    79u8, 112u8, 116u8, 45u8, 77u8, 90u8, 112u8, 116u8, 45u8, 83u8, 84u8,\n-                    112u8, 116u8, 45u8, 84u8, 76u8, 122u8, 104u8, 45u8, 72u8, 97u8, 110u8,\n-                    116u8, 45u8, 77u8, 79u8,\n-                ])\n+                :: zerovec :: VarZeroVec :: from_bytes_unchecked (b\"\\x84\\0\\0\\0\\0\\0\\x06\\0\\x0B\\0\\x10\\0\\x15\\0\\x1A\\0\\x1F\\0$\\0)\\0.\\x003\\08\\0=\\0B\\0G\\0L\\0Q\\0V\\0[\\0`\\0e\\0j\\0o\\0t\\0y\\0~\\0\\x83\\0\\x88\\0\\x8D\\0\\x92\\0\\x97\\0\\x9C\\0\\xA1\\0\\xA6\\0\\xAB\\0\\xB0\\0\\xB5\\0\\xBA\\0\\xBF\\0\\xC4\\0\\xC9\\0\\xCE\\0\\xD3\\0\\xD8\\0\\xDD\\0\\xE2\\0\\xE7\\0\\xEC\\0\\xF1\\0\\xF6\\0\\xFB\\0\\0\\x01\\x05\\x01\\n\\x01\\x0F\\x01\\x14\\x01\\x19\\x01\\x1E\\x01#\\x01(\\x01-\\x012\\x017\\x01<\\x01A\\x01F\\x01K\\x01P\\x01U\\x01Z\\x01_\\x01d\\x01i\\x01n\\x01s\\x01x\\x01}\\x01\\x82\\x01\\x87\\x01\\x8C\\x01\\x91\\x01\\x96\\x01\\x9B\\x01\\xA0\\x01\\xA5\\x01\\xAA\\x01\\xAF\\x01\\xB4\\x01\\xB9\\x01\\xBE\\x01\\xC3\\x01\\xC8\\x01\\xCD\\x01\\xD2\\x01\\xD7\\x01\\xDC\\x01\\xE1\\x01\\xE6\\x01\\xEB\\x01\\xF0\\x01\\xF5\\x01\\xFA\\x01\\xFF\\x01\\x04\\x02\\t\\x02\\x0E\\x02\\x13\\x02\\x18\\x02\\x1D\\x02\\\"\\x02'\\x02,\\x021\\x026\\x02;\\x02@\\x02G\\x02I\\x02K\\x02M\\x02R\\x02W\\x02\\\\\\x02a\\x02f\\x02k\\x02p\\x02u\\x02z\\x02\\x7F\\x02\\x84\\x02\\x89\\x02en-150en-AGen-AIen-ATen-AUen-BBen-BEen-BMen-BSen-BWen-BZen-CCen-CHen-CKen-CMen-CXen-CYen-DEen-DGen-DKen-DMen-ERen-FIen-FJen-FKen-FMen-GBen-GDen-GGen-GHen-GIen-GMen-GYen-HKen-IEen-ILen-IMen-INen-IOen-JEen-JMen-KEen-KIen-KNen-KYen-LCen-LRen-LSen-MGen-MOen-MSen-MTen-MUen-MVen-MWen-MYen-NAen-NFen-NGen-NLen-NRen-NUen-NZen-PGen-PKen-PNen-PWen-RWen-SBen-SCen-SDen-SEen-SGen-SHen-SIen-SLen-SSen-SXen-SZen-TCen-TKen-TOen-TTen-TVen-TZen-UGen-VCen-VGen-VUen-WSen-ZAen-ZMen-ZWes-ARes-BOes-BRes-BZes-CLes-COes-CRes-CUes-DOes-ECes-GTes-HNes-MXes-NIes-PAes-PEes-PRes-PYes-SVes-USes-UYes-VEhi-Latnhtnbnnno-NOpt-AOpt-CHpt-CVpt-FRpt-GQpt-GWpt-LUpt-MOpt-MZpt-STpt-TLzh-Hant-MO\")\n             },\n             unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n-                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 115u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8,\n-                    49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8,\n-                    57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8,\n-                    101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8,\n-                    115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8,\n-                    49u8, 57u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 73u8, 78u8,\n-                    0u8, 102u8, 114u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 72u8, 84u8, 0u8,\n-                    110u8, 111u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 110u8,\n-                    111u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 112u8, 116u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8,\n-                    84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8,\n-                    0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8,\n-                    112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8,\n-                    116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 122u8, 104u8, 0u8, 1u8, 72u8,\n-                    97u8, 110u8, 116u8, 1u8, 72u8, 75u8, 0u8,\n-                ])\n+                :: zerovec :: ZeroVec :: from_bytes_unchecked (b\"en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01150en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001en\\0\\0\\0\\0\\0\\0\\x01001es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419es\\0\\0\\0\\0\\0\\0\\x01419en\\0\\0\\0\\0\\0\\0\\x01IN\\0fr\\0\\0\\0\\0\\0\\0\\x01HT\\0no\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0no\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0no\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0pt\\0\\0\\0\\0\\0\\0\\x01PT\\0zh\\0\\x01Hant\\x01HK\\0\")\n             },\n         )\n     },"}, {"sha": "647f8f5160191bf585603c18aa4446736576c976", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/supplement/co_v1/und.rs.data", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fund.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -2,34 +2,20 @@\n     parents: unsafe {\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap::from_parts_unchecked(\n-            unsafe {\n-                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                    1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 121u8, 117u8, 101u8,\n-                ])\n-            },\n-            unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    122u8, 104u8, 0u8, 1u8, 72u8, 97u8, 110u8, 116u8, 0u8, 0u8, 0u8, 0u8,\n-                ])\n-            },\n+            unsafe { ::zerovec::VarZeroVec::from_bytes_unchecked(b\"\\x01\\0\\0\\0\\0\\0yue\") },\n+            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(b\"zh\\0\\x01Hant\\0\\0\\0\\0\") },\n         )\n     },\n     unicode_extension_defaults: unsafe {\n         #[allow(unused_unsafe)]\n         ::zerovec::ZeroMap2d::from_parts_unchecked(\n-            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(&[99u8, 111u8]) },\n-            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(&[2u8, 0u8, 0u8, 0u8]) },\n+            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(b\"co\") },\n+            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(b\"\\x02\\0\\0\\0\") },\n             unsafe {\n-                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                    2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 122u8, 104u8, 122u8, 104u8, 45u8,\n-                    72u8, 97u8, 110u8, 116u8,\n-                ])\n+                ::zerovec::VarZeroVec::from_bytes_unchecked(b\"\\x02\\0\\0\\0\\0\\0\\x02\\0zhzh-Hant\")\n             },\n             unsafe {\n-                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                    2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 6u8, 0u8, 112u8, 105u8, 110u8, 121u8, 105u8,\n-                    110u8, 115u8, 116u8, 114u8, 111u8, 107u8, 101u8,\n-                ])\n+                ::zerovec::VarZeroVec::from_bytes_unchecked(b\"\\x02\\0\\0\\0\\0\\0\\x06\\0pinyinstroke\")\n             },\n         )\n     },"}, {"sha": "4bf244019ff19fb5b345db6ff2a67b90d5f69808", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/en.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fen.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fen.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fen.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", and \", 6u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", and \", 6u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" and \", 5u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" and \", 5u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", & \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", & \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" & \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" & \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "84de7cd01a7e0b74d70f22cd1bb27d443cab5e32", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/es.rs.data", "status": "modified", "additions": 30, "deletions": 750, "changes": 780, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fes.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fes.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fes.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,836 +1,116 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" y \", 3u8),\n         special_case: Some(::icu_list::provider::SpecialCasePattern {\n             condition: unsafe {\n                 ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n                     if cfg!(target_endian = \"little\") {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n-                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                            0u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\xFF\\xFE\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B(\\x01\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\"\n                     } else {\n-                        &[\n-                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n-                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n-                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n-                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n-                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n-                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n-                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n-                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n-                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n-                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n-                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n-                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n-                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n-                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n-                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n-                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n-                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n-                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n-                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n-                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n-                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n-                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n-                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n-                            35u8,\n-                        ]\n+                        b\"rust-regex-automata-dfa-sparse\\0\\0\\0\\0\\xFE\\xFF\\0\\0\\0\\x02\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x02\\x02\\x02\\x03\\x04\\x04\\x05\\x06\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x08\\t\\t\\t\\n\\x0B\\x0B\\x0C\\r\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0E\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x0F\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x11\\x12\\x12\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x13\\x14\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x15\\x16\\x17\\x17\\x18\\x19\\x19\\x19\\x1A\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\x1B\\0\\0\\x01(\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x01\\x80\\0\\0\\0\\0\\0\\0\\x01\\0\\0\\0\\0\\0\\0\\0\\0\\x05\\0\\x05\\x05\\x06\\x06\\x0C\\x0C\\r\\r\\0\\0S\\0\\0\\0D\\0\\0\\0S\\0\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\0\\x1B\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\x03\\0\\x06\\x06\\r\\r\\0\\0h\\0\\0\\0h\\0\\0\\0\\0\\0\\0\\0\\0\\x0E\\0\\0\\0\\x02\\x02\\x04\\x07\\t\\t\\x0B\\x0E\\x13\\x13\\x14\\x14\\x15\\x15\\x16\\x16\\x17\\x17\\x18\\x18\\x19\\x19\\x1A\\x1A\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0D\\0\\0\\0\\xBF\\0\\0\\0\\xCE\\0\\0\\0\\xDD\\0\\0\\0\\xEC\\0\\0\\0\\xDD\\0\\0\\0\\xFB\\0\\0\\0\\n\\x01\\0\\0\\x19\\x01\\0\\0\\x12\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0D\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x11\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x10\\0\\0\\xBF\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x10\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x11\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\x02\\0\\x0F\\x0F\\0\\0\\xDD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x04\\0\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0#\\0\\0\\0\\0\\0\\0#\\0\\0\\0\\t\\0\\0\\0\\x12\\0\\0\\0\\x12\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0#\\0\\0\\0#\"\n                     },\n                 )\n             },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n+            pattern: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         }),\n     },\n ])"}, {"sha": "79a97e50f5a8618384ac3e7889f045e96fdc6ad0", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/fr.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ffr.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ffr.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ffr.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" et \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" et \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" et \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" et \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "b976b6cb65aaf53318e80394b1059ddd47bc5fd4", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/it.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fit.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fit.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fit.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n ])"}, {"sha": "d76d567ebf875ec47f9b08d68948fbfbc64ccb1c", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/ja.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fja.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fja.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fja.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n ])"}, {"sha": "3d8c89f9072fd75ee1649bb488e47f66e82bb4fd", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/pt.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fpt.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fpt.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fpt.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" e \", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "653ce28d615add410a51221b31dec74a5f9dd452", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/ru.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fru.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fru.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fru.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" \u0438 \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" \u0438 \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" \u0438 \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" \u0438 \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "9fa6eb56ade201ad809ed20f3984e5d74c547066", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/tr.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ftr.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ftr.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ftr.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" ve \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" ve \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" ve \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\" ve \", 4u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "66b55c253688daada7e1cadcaa5bf3c453b68fd0", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/und.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fund.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\", \", 2u8),\n         special_case: None,\n     },\n ])"}, {"sha": "38da6ecf8152a3ae9bfa64404cb2ea9a1ab0349a", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/zh-Hant.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh-Hant.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh-Hant.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh-Hant.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n ])"}, {"sha": "d4dac1c386eced9c1fc9fda4f2c1cc5637fb84f9", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/zh.rs.data", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh.rs.data?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,74 +1,50 @@\n ::icu_list::provider::ListFormatterPatternsV1([\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u548c\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n     ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n+        default: ::icu_list::provider::ListJoinerPattern::from_parts(\"\u3001\", 3u8),\n         special_case: None,\n     },\n ])"}, {"sha": "943187808b8180364264158675c7dcb33f082498", "filename": "compiler/rustc_baked_icu_data/src/data/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,7 +1,10 @@\n // @generated\n+#[clippy::msrv = \"1.61\"]\n mod fallback;\n+#[clippy::msrv = \"1.61\"]\n mod list;\n-use ::icu_provider::prelude::*;\n+#[clippy::msrv = \"1.61\"]\n+use icu_provider::prelude::*;\n /// Implement [`DataProvider<M>`] on the given struct using the data\n /// hardcoded in this module. This allows the struct to be used with\n /// `icu`'s `_unstable` constructors.\n@@ -17,6 +20,7 @@ use ::icu_provider::prelude::*;\n #[allow(unused_macros)]\n macro_rules! impl_data_provider {\n     ($ provider : path) => {\n+        #[clippy::msrv = \"1.61\"]\n         impl DataProvider<::icu_list::provider::AndListV1Marker> for $provider {\n             fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_list::provider::AndListV1Marker>, DataError> {\n                 list::and_v1::lookup(&req.locale)\n@@ -26,6 +30,7 @@ macro_rules! impl_data_provider {\n                     .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_list::provider::AndListV1Marker::KEY, req))\n             }\n         }\n+        #[clippy::msrv = \"1.61\"]\n         impl DataProvider<::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker> for $provider {\n             fn load(\n                 &self,\n@@ -41,6 +46,7 @@ macro_rules! impl_data_provider {\n                     })\n             }\n         }\n+        #[clippy::msrv = \"1.61\"]\n         impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker> for $provider {\n             fn load(\n                 &self,\n@@ -56,6 +62,7 @@ macro_rules! impl_data_provider {\n                     })\n             }\n         }\n+        #[clippy::msrv = \"1.61\"]\n         impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker> for $provider {\n             fn load(\n                 &self,\n@@ -87,6 +94,7 @@ macro_rules! impl_data_provider {\n #[allow(unused_macros)]\n macro_rules! impl_any_provider {\n     ($ provider : path) => {\n+        #[clippy::msrv = \"1.61\"]\n         impl AnyProvider for $provider {\n             fn load_any(&self, key: DataKey, req: DataRequest) -> Result<AnyResponse, DataError> {\n                 const ANDLISTV1MARKER: ::icu_provider::DataKeyHash = ::icu_list::provider::AndListV1Marker::KEY.hashed();\n@@ -109,5 +117,6 @@ macro_rules! impl_any_provider {\n         }\n     };\n }\n+#[clippy::msrv = \"1.61\"]\n pub struct BakedDataProvider;\n impl_data_provider!(BakedDataProvider);"}, {"sha": "74e6ce37e971aa5ad4c767004060debe28a31604", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -54,7 +54,7 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n \n         // `PlaceMention` and `AscribeUserType` both evaluate the place, which must not\n         // contain dangling references.\n-        PlaceContext::NonUse(NonUseContext::PlaceMention) |\n+        PlaceContext::NonMutatingUse(NonMutatingUseContext::PlaceMention) |\n         PlaceContext::NonUse(NonUseContext::AscribeUserTy) |\n \n         PlaceContext::MutatingUse(MutatingUseContext::AddressOf) |"}, {"sha": "7fc8eb161d28b7c1368ee5b4e9682545e747cff6", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1120,7 +1120,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 });\n                         }\n                         if let Some(clone_trait) = tcx.lang_items().clone_trait()\n-                            && let trait_ref = tcx.mk_trait_ref(clone_trait, [ty])\n+                            && let trait_ref = ty::TraitRef::new(tcx, clone_trait, [ty])\n                             && let o = Obligation::new(\n                                 tcx,\n                                 ObligationCause::dummy(),"}, {"sha": "315303b25fe4e0e0bf18e1c6a71335d6e4e6ab4f", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -498,11 +498,11 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n         let next_region = self.infcx.next_region_var(origin);\n         let vid = next_region.as_var();\n \n-        if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {\n+        if cfg!(debug_assertions) {\n             debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n             let ctxt = get_ctxt_fn();\n             let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n-            var_to_origin.insert(vid, ctxt);\n+            assert_eq!(var_to_origin.insert(vid, ctxt), None);\n         }\n \n         next_region\n@@ -520,11 +520,11 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n         let next_region = self.infcx.next_nll_region_var(origin);\n         let vid = next_region.as_var();\n \n-        if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {\n+        if cfg!(debug_assertions) {\n             debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n             let ctxt = get_ctxt_fn();\n             let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n-            var_to_origin.insert(vid, ctxt);\n+            assert_eq!(var_to_origin.insert(vid, ctxt), None);\n         }\n \n         next_region"}, {"sha": "8fbe814c85607f4a727cd32d4ecee0016ca9450d", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -76,7 +76,7 @@ pub struct RegionInferenceContext<'tcx> {\n     /// Reverse of the SCC constraint graph --  i.e., an edge `A -> B` exists if\n     /// `B: A`. This is used to compute the universal regions that are required\n     /// to outlive a given SCC. Computed lazily.\n-    rev_scc_graph: Option<Rc<ReverseSccGraph>>,\n+    rev_scc_graph: Option<ReverseSccGraph>,\n \n     /// The \"R0 member of [R1..Rn]\" constraints, indexed by SCC.\n     member_constraints: Rc<MemberConstraintSet<'tcx, ConstraintSccIndex>>,\n@@ -813,9 +813,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // free region that must outlive the member region `R0` (`UB:\n         // R0`). Therefore, we need only keep an option `O` if `UB: O`\n         // for all UB.\n-        let rev_scc_graph = self.reverse_scc_graph();\n+        self.compute_reverse_scc_graph();\n         let universal_region_relations = &self.universal_region_relations;\n-        for ub in rev_scc_graph.upper_bounds(scc) {\n+        for ub in self.rev_scc_graph.as_ref().unwrap().upper_bounds(scc) {\n             debug!(?ub);\n             choice_regions.retain(|&o_r| universal_region_relations.outlives(ub, o_r));\n         }"}, {"sha": "fe56bd54a3f17450209691fef5c5b28f81115832", "filename": "compiler/rustc_borrowck/src/region_infer/reverse_sccs.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -8,7 +8,6 @@ use rustc_data_structures::graph::vec_graph::VecGraph;\n use rustc_data_structures::graph::WithSuccessors;\n use rustc_middle::ty::RegionVid;\n use std::ops::Range;\n-use std::rc::Rc;\n \n pub(crate) struct ReverseSccGraph {\n     graph: VecGraph<ConstraintSccIndex>,\n@@ -40,10 +39,10 @@ impl ReverseSccGraph {\n }\n \n impl RegionInferenceContext<'_> {\n-    /// Compute and return the reverse SCC-based constraint graph (lazily).\n-    pub(super) fn reverse_scc_graph(&mut self) -> Rc<ReverseSccGraph> {\n-        if let Some(g) = &self.rev_scc_graph {\n-            return g.clone();\n+    /// Compute the reverse SCC-based constraint graph (lazily).\n+    pub(super) fn compute_reverse_scc_graph(&mut self) {\n+        if self.rev_scc_graph.is_some() {\n+            return;\n         }\n \n         let graph = self.constraint_sccs.reverse();\n@@ -63,8 +62,6 @@ impl RegionInferenceContext<'_> {\n             start += group_size;\n         }\n \n-        let rev_graph = Rc::new(ReverseSccGraph { graph, scc_regions, universal_regions });\n-        self.rev_scc_graph = Some(rev_graph.clone());\n-        rev_graph\n+        self.rev_scc_graph = Some(ReverseSccGraph { graph, scc_regions, universal_regions });\n     }\n }"}, {"sha": "4389d2b60bc5573ffbc62ae92527d575e805747f", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -108,6 +108,14 @@ impl<'a, 'tcx> MutVisitor<'tcx> for RegionRenumberer<'a, 'tcx> {\n         debug!(?region);\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n+    fn visit_ty_const(&mut self, ct: &mut ty::Const<'tcx>, location: Location) {\n+        let old_ct = *ct;\n+        *ct = self.renumber_regions(old_ct, || RegionCtxt::Location(location));\n+\n+        debug!(?ct);\n+    }\n+\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, location: Location) {\n         let literal = constant.literal;"}, {"sha": "dcabeb792be3e223eb3ed332f144174fb7f424e2", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -538,7 +538,8 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n-            let trait_ref = tcx.at(self.last_span).mk_trait_ref(LangItem::Copy, [place_ty.ty]);\n+            let trait_ref =\n+                ty::TraitRef::from_lang_item(tcx, LangItem::Copy, self.last_span, [place_ty.ty]);\n \n             // To have a `Copy` operand, the type `T` of the\n             // value must be `Copy`. Note that we prove that `T: Copy`,\n@@ -771,12 +772,10 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         match context {\n             PlaceContext::MutatingUse(_) => ty::Invariant,\n-            PlaceContext::NonUse(StorageDead | StorageLive | PlaceMention | VarDebugInfo) => {\n-                ty::Invariant\n-            }\n+            PlaceContext::NonUse(StorageDead | StorageLive | VarDebugInfo) => ty::Invariant,\n             PlaceContext::NonMutatingUse(\n-                Inspect | Copy | Move | SharedBorrow | ShallowBorrow | UniqueBorrow | AddressOf\n-                | Projection,\n+                Inspect | Copy | Move | PlaceMention | SharedBorrow | ShallowBorrow | UniqueBorrow\n+                | AddressOf | Projection,\n             ) => ty::Covariant,\n             PlaceContext::NonUse(AscribeUserTy) => ty::Covariant,\n         }\n@@ -1237,8 +1236,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 self.check_rvalue(body, rv, location);\n                 if !self.unsized_feature_enabled() {\n-                    let trait_ref =\n-                        tcx.at(self.last_span).mk_trait_ref(LangItem::Sized, [place_ty]);\n+                    let trait_ref = ty::TraitRef::from_lang_item(\n+                        tcx,\n+                        LangItem::Sized,\n+                        self.last_span,\n+                        [place_ty],\n+                    );\n                     self.prove_trait_ref(\n                         trait_ref,\n                         location.to_locations(),\n@@ -1798,6 +1801,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::Repeat(operand, len) => {\n                 self.check_operand(operand, location);\n \n+                let array_ty = rvalue.ty(body.local_decls(), tcx);\n+                self.prove_predicate(\n+                    ty::PredicateKind::WellFormed(array_ty.into()),\n+                    Locations::Single(location),\n+                    ConstraintCategory::Boring,\n+                );\n+\n                 // If the length cannot be evaluated we must assume that the length can be larger\n                 // than 1.\n                 // If the length is larger than 1, the repeat expression will need to copy the\n@@ -1810,7 +1820,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         Operand::Move(place) => {\n                             // Make sure that repeated elements implement `Copy`.\n                             let ty = place.ty(body, tcx).ty;\n-                            let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Copy, [ty]);\n+                            let trait_ref =\n+                                ty::TraitRef::from_lang_item(tcx, LangItem::Copy, span, [ty]);\n \n                             self.prove_trait_ref(\n                                 trait_ref,\n@@ -1823,7 +1834,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             &Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, ty) => {\n-                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, [ty]);\n+                let trait_ref = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, span, [ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1835,7 +1846,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::ShallowInitBox(operand, ty) => {\n                 self.check_operand(operand, location);\n \n-                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, [*ty]);\n+                let trait_ref = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, span, [*ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1932,9 +1943,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n-                        let trait_ref = tcx\n-                            .at(span)\n-                            .mk_trait_ref(LangItem::CoerceUnsized, [op.ty(body, tcx), ty]);\n+                        let trait_ref = ty::TraitRef::from_lang_item(\n+                            tcx,\n+                            LangItem::CoerceUnsized,\n+                            span,\n+                            [op.ty(body, tcx), ty],\n+                        );\n \n                         self.prove_trait_ref(\n                             trait_ref,"}, {"sha": "7158c62b548afb00250172969d09bea8e5dcbbfe", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -131,9 +131,13 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(sym::env),\n         };\n \n-        if cfg!(debug_assertions) && !self.type_checker.infcx.inside_canonicalization_ctxt() {\n+        if cfg!(debug_assertions) {\n             let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-            var_to_origin.insert(reg.as_var(), RegionCtxt::Placeholder(reg_info));\n+            let new = RegionCtxt::Placeholder(reg_info);\n+            let prev = var_to_origin.insert(reg.as_var(), new);\n+            if let Some(prev) = prev {\n+                assert_eq!(new, prev);\n+            }\n         }\n \n         reg\n@@ -146,9 +150,10 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             universe,\n         );\n \n-        if cfg!(debug_assertions) && !self.type_checker.infcx.inside_canonicalization_ctxt() {\n+        if cfg!(debug_assertions) {\n             let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-            var_to_origin.insert(reg.as_var(), RegionCtxt::Existential(None));\n+            let prev = var_to_origin.insert(reg.as_var(), RegionCtxt::Existential(None));\n+            assert_eq!(prev, None);\n         }\n \n         reg"}, {"sha": "44012e802aa7bb472e8a864e756e2dd70621daaf", "filename": "compiler/rustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2FCargo.toml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -14,6 +14,7 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_expand = { path = \"../rustc_expand\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_index = { path = \"../rustc_index\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }"}, {"sha": "bb059a120df37bc0f242c46f70c1842b1c55c7a7", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -2,9 +2,10 @@ use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter};\n use rustc_ast::tokenstream::TokenStream;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n+use rustc_index::bit_set::GrowableBitSet;\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n use rustc_session::lint;\n@@ -20,8 +21,8 @@ use crate::errors;\n pub struct AsmArgs {\n     pub templates: Vec<P<ast::Expr>>,\n     pub operands: Vec<(ast::InlineAsmOperand, Span)>,\n-    named_args: FxHashMap<Symbol, usize>,\n-    reg_args: FxHashSet<usize>,\n+    named_args: FxIndexMap<Symbol, usize>,\n+    reg_args: GrowableBitSet<usize>,\n     pub clobber_abis: Vec<(Symbol, Span)>,\n     options: ast::InlineAsmOptions,\n     pub options_spans: Vec<Span>,\n@@ -56,8 +57,8 @@ pub fn parse_asm_args<'a>(\n     let mut args = AsmArgs {\n         templates: vec![first_template],\n         operands: vec![],\n-        named_args: FxHashMap::default(),\n-        reg_args: FxHashSet::default(),\n+        named_args: Default::default(),\n+        reg_args: Default::default(),\n         clobber_abis: Vec::new(),\n         options: ast::InlineAsmOptions::empty(),\n         options_spans: vec![],\n@@ -213,7 +214,7 @@ pub fn parse_asm_args<'a>(\n         } else {\n             if !args.named_args.is_empty() || !args.reg_args.is_empty() {\n                 let named = args.named_args.values().map(|p| args.operands[*p].1).collect();\n-                let explicit = args.reg_args.iter().map(|p| args.operands[*p].1).collect();\n+                let explicit = args.reg_args.iter().map(|p| args.operands[p].1).collect();\n \n                 diag.emit_err(errors::AsmPositionalAfter { span, named, explicit });\n             }\n@@ -446,8 +447,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n     // Register operands are implicitly used since they are not allowed to be\n     // referenced in the template string.\n     let mut used = vec![false; args.operands.len()];\n-    for pos in &args.reg_args {\n-        used[*pos] = true;\n+    for pos in args.reg_args.iter() {\n+        used[pos] = true;\n     }\n     let named_pos: FxHashMap<usize, Symbol> =\n         args.named_args.iter().map(|(&sym, &idx)| (idx, sym)).collect();\n@@ -581,7 +582,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                         parse::ArgumentIs(idx) | parse::ArgumentImplicitlyIs(idx) => {\n                             if idx >= args.operands.len()\n                                 || named_pos.contains_key(&idx)\n-                                || args.reg_args.contains(&idx)\n+                                || args.reg_args.contains(idx)\n                             {\n                                 let msg = format!(\"invalid reference to argument at index {}\", idx);\n                                 let mut err = ecx.struct_span_err(span, &msg);\n@@ -608,7 +609,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                         args.operands[idx].1,\n                                         \"named arguments cannot be referenced by position\",\n                                     );\n-                                } else if args.reg_args.contains(&idx) {\n+                                } else if args.reg_args.contains(idx) {\n                                     err.span_label(\n                                         args.operands[idx].1,\n                                         \"explicit register argument\","}, {"sha": "c7da61d72b384456a69da66bf8c90dd73b4c561c", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,7 +1,6 @@\n //! This crate contains implementations of built-in macros and other code generating facilities\n //! injecting code into the crate before it is lowered to HIR.\n \n-#![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n #![feature(box_patterns)]"}, {"sha": "250aa79f8d6098895e0d8d3db6c5a786f7990174", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         if options.contains(InlineAsmOptions::NORETURN) {\n             let builtin_unreachable = self.context.get_builtin_function(\"__builtin_unreachable\");\n             let builtin_unreachable: RValue<'gcc> = unsafe { std::mem::transmute(builtin_unreachable) };\n-            self.call(self.type_void(), None, builtin_unreachable, &[], None);\n+            self.call(self.type_void(), None, None, builtin_unreachable, &[], None);\n         }\n \n         // Write results to outputs."}, {"sha": "a66ddb6a09f2b8a4d76264d2d1d55fb5c1eb56e3", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -35,6 +35,7 @@ use rustc_codegen_ssa::traits::{\n };\n use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::bug;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_middle::ty::layout::{FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, HasTyCtxt, LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_span::Span;\n@@ -455,12 +456,12 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     #[cfg(feature=\"master\")]\n-    fn invoke(&mut self, typ: Type<'gcc>, _fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>, func: RValue<'gcc>, args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n+    fn invoke(&mut self, typ: Type<'gcc>, fn_attrs: Option<&CodegenFnAttrs>, _fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>, func: RValue<'gcc>, args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n         let try_block = self.current_func().new_block(\"try\");\n \n         let current_block = self.block.clone();\n         self.block = try_block;\n-        let call = self.call(typ, None, func, args, None); // TODO(antoyo): use funclet here?\n+        let call = self.call(typ, fn_attrs, None, func, args, None); // TODO(antoyo): use funclet here?\n         self.block = current_block;\n \n         let return_value = self.current_func()\n@@ -483,8 +484,8 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     #[cfg(not(feature=\"master\"))]\n-    fn invoke(&mut self, typ: Type<'gcc>, fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>, func: RValue<'gcc>, args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n-        let call_site = self.call(typ, None, func, args, None);\n+    fn invoke(&mut self, typ: Type<'gcc>, fn_attrs: &CodegenFnAttrs, fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>, func: RValue<'gcc>, args: &[RValue<'gcc>], then: Block<'gcc>, catch: Block<'gcc>, _funclet: Option<&Funclet>) -> RValue<'gcc> {\n+        let call_site = self.call(typ, fn_attrs, None, func, args, None);\n         let condition = self.context.new_rvalue_from_int(self.bool_type, 1);\n         self.llbb().end_with_conditional(None, condition, then, catch);\n         if let Some(_fn_abi) = fn_abi {\n@@ -1351,6 +1352,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     fn call(\n         &mut self,\n         _typ: Type<'gcc>,\n+        _fn_attrs: Option<&CodegenFnAttrs>,\n         fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n         func: RValue<'gcc>,\n         args: &[RValue<'gcc>],"}, {"sha": "60176874747263d06c0d7e3582811eec751ca72c", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                 _ if simple.is_some() => {\n                     // FIXME(antoyo): remove this cast when the API supports function.\n                     let func = unsafe { std::mem::transmute(simple.expect(\"simple\")) };\n-                    self.call(self.type_void(), None, func, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None)\n+                    self.call(self.type_void(), None, None, func, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None)\n                 },\n                 sym::likely => {\n                     self.expect(args[0].immediate(), true)\n@@ -326,7 +326,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     let masked = self.and(addr, mask);\n                     self.bitcast(masked, void_ptr_type)\n                 },\n-                \n+\n                 _ if name_str.starts_with(\"simd_\") => {\n                     match generic_simd_intrinsic(self, name, callee_ty, args, ret_ty, llret_ty, span) {\n                         Ok(llval) => llval,\n@@ -354,7 +354,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n     fn abort(&mut self) {\n         let func = self.context.get_builtin_function(\"abort\");\n         let func: RValue<'gcc> = unsafe { std::mem::transmute(func) };\n-        self.call(self.type_void(), None, func, &[], None);\n+        self.call(self.type_void(), None, None, func, &[], None);\n     }\n \n     fn assume(&mut self, value: Self::Value) {\n@@ -1135,7 +1135,7 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n \n fn try_intrinsic<'a, 'b, 'gcc, 'tcx>(bx: &'b mut Builder<'a, 'gcc, 'tcx>, try_func: RValue<'gcc>, data: RValue<'gcc>, _catch_func: RValue<'gcc>, dest: RValue<'gcc>) {\n     if bx.sess().panic_strategy() == PanicStrategy::Abort {\n-        bx.call(bx.type_void(), None, try_func, &[data], None);\n+        bx.call(bx.type_void(), None, None, try_func, &[data], None);\n         // Return 0 unconditionally from the intrinsic call;\n         // we can never unwind.\n         let ret_align = bx.tcx.data_layout.i32_align.abi;\n@@ -1204,21 +1204,21 @@ fn codegen_gnu_try<'gcc>(bx: &mut Builder<'_, 'gcc, '_>, try_func: RValue<'gcc>,\n         let zero = bx.cx.context.new_rvalue_zero(bx.int_type);\n         let ptr = bx.cx.context.new_call(None, eh_pointer_builtin, &[zero]);\n         let catch_ty = bx.type_func(&[bx.type_i8p(), bx.type_i8p()], bx.type_void());\n-        bx.call(catch_ty, None, catch_func, &[data, ptr], None);\n+        bx.call(catch_ty, None, None, catch_func, &[data, ptr], None);\n         bx.ret(bx.const_i32(1));\n \n         // NOTE: the blocks must be filled before adding the try/catch, otherwise gcc will not\n         // generate a try/catch.\n         // FIXME(antoyo): add a check in the libgccjit API to prevent this.\n         bx.switch_to_block(current_block);\n-        bx.invoke(try_func_ty, None, try_func, &[data], then, catch, None);\n+        bx.invoke(try_func_ty, None, None, try_func, &[data], then, catch, None);\n     });\n \n     let func = unsafe { std::mem::transmute(func) };\n \n     // Note that no invoke is used here because by definition this function\n     // can't panic (that's what it's catching).\n-    let ret = bx.call(llty, None, func, &[try_func, data, catch_func], None);\n+    let ret = bx.call(llty, None, None, func, &[try_func, data, catch_func], None);\n     let i32_align = bx.tcx().data_layout.i32_align.abi;\n     bx.store(ret, dest, i32_align);\n }"}, {"sha": "521b64ad34d15845a49aba5a167f9eb1330e8767", "filename": "compiler/rustc_codegen_gcc/src/type_.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -280,16 +280,4 @@ pub fn struct_fields<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLayout\n }\n \n impl<'gcc, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n-    fn set_type_metadata(&self, _function: RValue<'gcc>, _typeid: String) {\n-        // Unsupported.\n-    }\n-\n-    fn typeid_metadata(&self, _typeid: String) -> RValue<'gcc> {\n-        // Unsupported.\n-        self.context.new_rvalue_from_int(self.int_type, 0)\n-    }\n-\n-    fn set_kcfi_type_metadata(&self, _function: RValue<'gcc>, _kcfi_typeid: u32) {\n-        // Unsupported.\n-    }\n }"}, {"sha": "f9af103c9ad834ef07f495a878be27cd6949cf81", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -443,9 +443,9 @@ pub(crate) fn inline_asm_call<'ll>(\n             );\n \n             let call = if let Some((dest, catch, funclet)) = dest_catch_funclet {\n-                bx.invoke(fty, None, v, inputs, dest, catch, funclet)\n+                bx.invoke(fty, None, None, v, inputs, dest, catch, funclet)\n             } else {\n-                bx.call(fty, None, v, inputs, None)\n+                bx.call(fty, None, None, v, inputs, None)\n             };\n \n             // Store mark in a metadata node so we can map LLVM errors"}, {"sha": "2fd6db8cbfeab7fc24ce00379c76fc786ac16194", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 88, "deletions": 30, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -15,14 +15,15 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::ty::layout::{\n     FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOfHelpers, TyAndLayout,\n };\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n-use rustc_symbol_mangling::typeid::kcfi_typeid_for_fnabi;\n+use rustc_symbol_mangling::typeid::{kcfi_typeid_for_fnabi, typeid_for_fnabi, TypeIdOptions};\n use rustc_target::abi::{self, call::FnAbi, Align, Size, WrappingRange};\n-use rustc_target::spec::{HasTargetSpec, Target};\n+use rustc_target::spec::{HasTargetSpec, SanitizerSet, Target};\n use std::borrow::Cow;\n use std::ffi::CStr;\n use std::iter;\n@@ -216,6 +217,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn invoke(\n         &mut self,\n         llty: &'ll Type,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n         fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n         llfn: &'ll Value,\n         args: &[&'ll Value],\n@@ -230,19 +232,13 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let funclet_bundle = funclet_bundle.as_ref().map(|b| &*b.raw);\n         let mut bundles = vec![funclet_bundle];\n \n-        // Set KCFI operand bundle\n-        let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n-        let kcfi_bundle =\n-            if self.tcx.sess.is_sanitizer_kcfi_enabled() && let Some(fn_abi) = fn_abi && is_indirect_call {\n-                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n-                Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n-            } else {\n-                None\n-            };\n-        if kcfi_bundle.is_some() {\n-            let kcfi_bundle = kcfi_bundle.as_ref().map(|b| &*b.raw);\n-            bundles.push(kcfi_bundle);\n-        }\n+        // Emit CFI pointer type membership test\n+        self.cfi_type_test(fn_attrs, fn_abi, llfn);\n+\n+        // Emit KCFI operand bundle\n+        let kcfi_bundle = self.kcfi_operand_bundle(fn_attrs, fn_abi, llfn);\n+        let kcfi_bundle = kcfi_bundle.as_ref().map(|b| &*b.raw);\n+        bundles.push(kcfi_bundle);\n \n         bundles.retain(|bundle| bundle.is_some());\n         let invoke = unsafe {\n@@ -1183,6 +1179,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn call(\n         &mut self,\n         llty: &'ll Type,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n         fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n         llfn: &'ll Value,\n         args: &[&'ll Value],\n@@ -1195,19 +1192,13 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let funclet_bundle = funclet_bundle.as_ref().map(|b| &*b.raw);\n         let mut bundles = vec![funclet_bundle];\n \n-        // Set KCFI operand bundle\n-        let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n-        let kcfi_bundle =\n-            if let Some(fn_abi) = fn_abi && self.tcx.sess.is_sanitizer_kcfi_enabled() && is_indirect_call {\n-                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n-                Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n-            } else {\n-                None\n-            };\n-        if kcfi_bundle.is_some() {\n-            let kcfi_bundle = kcfi_bundle.as_ref().map(|b| &*b.raw);\n-            bundles.push(kcfi_bundle);\n-        }\n+        // Emit CFI pointer type membership test\n+        self.cfi_type_test(fn_attrs, fn_abi, llfn);\n+\n+        // Emit KCFI operand bundle\n+        let kcfi_bundle = self.kcfi_operand_bundle(fn_attrs, fn_abi, llfn);\n+        let kcfi_bundle = kcfi_bundle.as_ref().map(|b| &*b.raw);\n+        bundles.push(kcfi_bundle);\n \n         bundles.retain(|bundle| bundle.is_some());\n         let call = unsafe {\n@@ -1456,7 +1447,7 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n \n     pub(crate) fn call_intrinsic(&mut self, intrinsic: &str, args: &[&'ll Value]) -> &'ll Value {\n         let (ty, f) = self.cx.get_intrinsic(intrinsic);\n-        self.call(ty, None, f, args, None)\n+        self.call(ty, None, None, f, args, None)\n     }\n \n     fn call_lifetime_intrinsic(&mut self, intrinsic: &str, ptr: &'ll Value, size: Size) {\n@@ -1518,7 +1509,7 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n             format!(\"llvm.{}.sat.i{}.f{}\", instr, int_width, float_width)\n         };\n         let f = self.declare_cfn(&name, llvm::UnnamedAddr::No, self.type_func(&[src_ty], dest_ty));\n-        self.call(self.type_func(&[src_ty], dest_ty), None, f, &[val], None)\n+        self.call(self.type_func(&[src_ty], dest_ty), None, None, f, &[val], None)\n     }\n \n     pub(crate) fn landing_pad(\n@@ -1535,4 +1526,71 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n             llvm::LLVMBuildLandingPad(self.llbuilder, ty, None, num_clauses as c_uint, UNNAMED)\n         }\n     }\n+\n+    // Emits CFI pointer type membership tests.\n+    fn cfi_type_test(\n+        &mut self,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n+        fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n+        llfn: &'ll Value,\n+    ) {\n+        let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n+        if is_indirect_call && fn_abi.is_some() && self.tcx.sess.is_sanitizer_cfi_enabled() {\n+            if fn_attrs.is_some() && fn_attrs.unwrap().no_sanitize.contains(SanitizerSet::CFI) {\n+                return;\n+            }\n+\n+            let mut options = TypeIdOptions::empty();\n+            if self.tcx.sess.is_sanitizer_cfi_generalize_pointers_enabled() {\n+                options.insert(TypeIdOptions::GENERALIZE_POINTERS);\n+            }\n+            if self.tcx.sess.is_sanitizer_cfi_normalize_integers_enabled() {\n+                options.insert(TypeIdOptions::NORMALIZE_INTEGERS);\n+            }\n+\n+            let typeid = typeid_for_fnabi(self.tcx, fn_abi.unwrap(), options);\n+            let typeid_metadata = self.cx.typeid_metadata(typeid).unwrap();\n+\n+            // Test whether the function pointer is associated with the type identifier.\n+            let cond = self.type_test(llfn, typeid_metadata);\n+            let bb_pass = self.append_sibling_block(\"type_test.pass\");\n+            let bb_fail = self.append_sibling_block(\"type_test.fail\");\n+            self.cond_br(cond, bb_pass, bb_fail);\n+\n+            self.switch_to_block(bb_fail);\n+            self.abort();\n+            self.unreachable();\n+\n+            self.switch_to_block(bb_pass);\n+        }\n+    }\n+\n+    // Emits KCFI operand bundles.\n+    fn kcfi_operand_bundle(\n+        &mut self,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n+        fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n+        llfn: &'ll Value,\n+    ) -> Option<llvm::OperandBundleDef<'ll>> {\n+        let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n+        let kcfi_bundle = if is_indirect_call && self.tcx.sess.is_sanitizer_kcfi_enabled() {\n+            if fn_attrs.is_some() && fn_attrs.unwrap().no_sanitize.contains(SanitizerSet::KCFI) {\n+                return None;\n+            }\n+\n+            let mut options = TypeIdOptions::empty();\n+            if self.tcx.sess.is_sanitizer_cfi_generalize_pointers_enabled() {\n+                options.insert(TypeIdOptions::GENERALIZE_POINTERS);\n+            }\n+            if self.tcx.sess.is_sanitizer_cfi_normalize_integers_enabled() {\n+                options.insert(TypeIdOptions::NORMALIZE_INTEGERS);\n+            }\n+\n+            let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi.unwrap(), options);\n+            Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n+        } else {\n+            None\n+        };\n+        kcfi_bundle\n+    }\n }"}, {"sha": "83101a85435a018609580559bedeaf768356dab7", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -228,18 +228,29 @@ pub unsafe fn create_module<'ll>(\n         llvm::LLVMRustAddModuleFlag(llmod, llvm::LLVMModFlagBehavior::Warning, avoid_plt, 1);\n     }\n \n-    if sess.is_sanitizer_cfi_enabled() {\n-        // FIXME(rcvalle): Add support for non canonical jump tables.\n+    // Enable canonical jump tables if CFI is enabled. (See https://reviews.llvm.org/D65629.)\n+    if sess.is_sanitizer_cfi_canonical_jump_tables_enabled() && sess.is_sanitizer_cfi_enabled() {\n         let canonical_jump_tables = \"CFI Canonical Jump Tables\\0\".as_ptr().cast();\n-        // FIXME(rcvalle): Add it with Override behavior flag.\n         llvm::LLVMRustAddModuleFlag(\n             llmod,\n-            llvm::LLVMModFlagBehavior::Warning,\n+            llvm::LLVMModFlagBehavior::Override,\n             canonical_jump_tables,\n             1,\n         );\n     }\n \n+    // Enable LTO unit splitting if specified or if CFI is enabled. (See https://reviews.llvm.org/D53891.)\n+    if sess.is_split_lto_unit_enabled() || sess.is_sanitizer_cfi_enabled() {\n+        let enable_split_lto_unit = \"EnableSplitLTOUnit\\0\".as_ptr().cast();\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            llvm::LLVMModFlagBehavior::Override,\n+            enable_split_lto_unit,\n+            1,\n+        );\n+    }\n+\n+    // Add \"kcfi\" module flag if KCFI is enabled. (See https://reviews.llvm.org/D119296.)\n     if sess.is_sanitizer_kcfi_enabled() {\n         let kcfi = \"kcfi\\0\".as_ptr().cast();\n         llvm::LLVMRustAddModuleFlag(llmod, llvm::LLVMModFlagBehavior::Override, kcfi, 1);"}, {"sha": "cc2a5d158be824f2cb33e4df48b66a8572d34a2b", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -20,7 +20,7 @@ use crate::type_::Type;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::TypeMembershipMethods;\n use rustc_middle::ty::Ty;\n-use rustc_symbol_mangling::typeid::{kcfi_typeid_for_fnabi, typeid_for_fnabi};\n+use rustc_symbol_mangling::typeid::{kcfi_typeid_for_fnabi, typeid_for_fnabi, TypeIdOptions};\n use smallvec::SmallVec;\n \n /// Declare a function.\n@@ -132,12 +132,31 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         fn_abi.apply_attrs_llfn(self, llfn);\n \n         if self.tcx.sess.is_sanitizer_cfi_enabled() {\n-            let typeid = typeid_for_fnabi(self.tcx, fn_abi);\n+            let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::empty());\n             self.set_type_metadata(llfn, typeid);\n+            let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::GENERALIZE_POINTERS);\n+            self.add_type_metadata(llfn, typeid);\n+            let typeid = typeid_for_fnabi(self.tcx, fn_abi, TypeIdOptions::NORMALIZE_INTEGERS);\n+            self.add_type_metadata(llfn, typeid);\n+            let typeid = typeid_for_fnabi(\n+                self.tcx,\n+                fn_abi,\n+                TypeIdOptions::GENERALIZE_POINTERS | TypeIdOptions::NORMALIZE_INTEGERS,\n+            );\n+            self.add_type_metadata(llfn, typeid);\n         }\n \n         if self.tcx.sess.is_sanitizer_kcfi_enabled() {\n-            let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n+            // LLVM KCFI does not support multiple !kcfi_type attachments\n+            let mut options = TypeIdOptions::empty();\n+            if self.tcx.sess.is_sanitizer_cfi_generalize_pointers_enabled() {\n+                options.insert(TypeIdOptions::GENERALIZE_POINTERS);\n+            }\n+            if self.tcx.sess.is_sanitizer_cfi_normalize_integers_enabled() {\n+                options.insert(TypeIdOptions::NORMALIZE_INTEGERS);\n+            }\n+\n+            let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi, options);\n             self.set_kcfi_type_metadata(llfn, kcfi_typeid);\n         }\n "}, {"sha": "00d1796f210bb4d2ddbda845bf65962e89d95de8", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -110,6 +110,7 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                 self.call(\n                     simple_ty,\n                     None,\n+                    None,\n                     simple_fn,\n                     &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(),\n                     None,\n@@ -444,7 +445,7 @@ fn try_intrinsic<'ll>(\n ) {\n     if bx.sess().panic_strategy() == PanicStrategy::Abort {\n         let try_func_ty = bx.type_func(&[bx.type_i8p()], bx.type_void());\n-        bx.call(try_func_ty, None, try_func, &[data], None);\n+        bx.call(try_func_ty, None, None, try_func, &[data], None);\n         // Return 0 unconditionally from the intrinsic call;\n         // we can never unwind.\n         let ret_align = bx.tcx().data_layout.i32_align.abi;\n@@ -543,7 +544,7 @@ fn codegen_msvc_try<'ll>(\n         let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n         let slot = bx.alloca(bx.type_i8p(), ptr_align);\n         let try_func_ty = bx.type_func(&[bx.type_i8p()], bx.type_void());\n-        bx.invoke(try_func_ty, None, try_func, &[data], normal, catchswitch, None);\n+        bx.invoke(try_func_ty, None, None, try_func, &[data], normal, catchswitch, None);\n \n         bx.switch_to_block(normal);\n         bx.ret(bx.const_i32(0));\n@@ -587,15 +588,15 @@ fn codegen_msvc_try<'ll>(\n         let funclet = bx.catch_pad(cs, &[tydesc, flags, slot]);\n         let ptr = bx.load(bx.type_i8p(), slot, ptr_align);\n         let catch_ty = bx.type_func(&[bx.type_i8p(), bx.type_i8p()], bx.type_void());\n-        bx.call(catch_ty, None, catch_func, &[data, ptr], Some(&funclet));\n+        bx.call(catch_ty, None, None, catch_func, &[data, ptr], Some(&funclet));\n         bx.catch_ret(&funclet, caught);\n \n         // The flag value of 64 indicates a \"catch-all\".\n         bx.switch_to_block(catchpad_foreign);\n         let flags = bx.const_i32(64);\n         let null = bx.const_null(bx.type_i8p());\n         let funclet = bx.catch_pad(cs, &[null, flags, null]);\n-        bx.call(catch_ty, None, catch_func, &[data, null], Some(&funclet));\n+        bx.call(catch_ty, None, None, catch_func, &[data, null], Some(&funclet));\n         bx.catch_ret(&funclet, caught);\n \n         bx.switch_to_block(caught);\n@@ -604,7 +605,7 @@ fn codegen_msvc_try<'ll>(\n \n     // Note that no invoke is used here because by definition this function\n     // can't panic (that's what it's catching).\n-    let ret = bx.call(llty, None, llfn, &[try_func, data, catch_func], None);\n+    let ret = bx.call(llty, None, None, llfn, &[try_func, data, catch_func], None);\n     let i32_align = bx.tcx().data_layout.i32_align.abi;\n     bx.store(ret, dest, i32_align);\n }\n@@ -647,7 +648,7 @@ fn codegen_gnu_try<'ll>(\n         let data = llvm::get_param(bx.llfn(), 1);\n         let catch_func = llvm::get_param(bx.llfn(), 2);\n         let try_func_ty = bx.type_func(&[bx.type_i8p()], bx.type_void());\n-        bx.invoke(try_func_ty, None, try_func, &[data], then, catch, None);\n+        bx.invoke(try_func_ty, None, None, try_func, &[data], then, catch, None);\n \n         bx.switch_to_block(then);\n         bx.ret(bx.const_i32(0));\n@@ -665,13 +666,13 @@ fn codegen_gnu_try<'ll>(\n         bx.add_clause(vals, tydesc);\n         let ptr = bx.extract_value(vals, 0);\n         let catch_ty = bx.type_func(&[bx.type_i8p(), bx.type_i8p()], bx.type_void());\n-        bx.call(catch_ty, None, catch_func, &[data, ptr], None);\n+        bx.call(catch_ty, None, None, catch_func, &[data, ptr], None);\n         bx.ret(bx.const_i32(1));\n     });\n \n     // Note that no invoke is used here because by definition this function\n     // can't panic (that's what it's catching).\n-    let ret = bx.call(llty, None, llfn, &[try_func, data, catch_func], None);\n+    let ret = bx.call(llty, None, None, llfn, &[try_func, data, catch_func], None);\n     let i32_align = bx.tcx().data_layout.i32_align.abi;\n     bx.store(ret, dest, i32_align);\n }\n@@ -711,7 +712,7 @@ fn codegen_emcc_try<'ll>(\n         let data = llvm::get_param(bx.llfn(), 1);\n         let catch_func = llvm::get_param(bx.llfn(), 2);\n         let try_func_ty = bx.type_func(&[bx.type_i8p()], bx.type_void());\n-        bx.invoke(try_func_ty, None, try_func, &[data], then, catch, None);\n+        bx.invoke(try_func_ty, None, None, try_func, &[data], then, catch, None);\n \n         bx.switch_to_block(then);\n         bx.ret(bx.const_i32(0));\n@@ -750,13 +751,13 @@ fn codegen_emcc_try<'ll>(\n         let catch_data = bx.bitcast(catch_data, bx.type_i8p());\n \n         let catch_ty = bx.type_func(&[bx.type_i8p(), bx.type_i8p()], bx.type_void());\n-        bx.call(catch_ty, None, catch_func, &[data, catch_data], None);\n+        bx.call(catch_ty, None, None, catch_func, &[data, catch_data], None);\n         bx.ret(bx.const_i32(1));\n     });\n \n     // Note that no invoke is used here because by definition this function\n     // can't panic (that's what it's catching).\n-    let ret = bx.call(llty, None, llfn, &[try_func, data, catch_func], None);\n+    let ret = bx.call(llty, None, None, llfn, &[try_func, data, catch_func], None);\n     let i32_align = bx.tcx().data_layout.i32_align.abi;\n     bx.store(ret, dest, i32_align);\n }\n@@ -1205,6 +1206,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n         let c = bx.call(\n             fn_ty,\n             None,\n+            None,\n             f,\n             &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(),\n             None,\n@@ -1423,6 +1425,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n         let v = bx.call(\n             fn_ty,\n             None,\n+            None,\n             f,\n             &[args[1].immediate(), alignment, mask, args[0].immediate()],\n             None,\n@@ -1564,6 +1567,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n         let v = bx.call(\n             fn_ty,\n             None,\n+            None,\n             f,\n             &[args[0].immediate(), args[1].immediate(), alignment, mask],\n             None,\n@@ -2037,7 +2041,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n \n         let fn_ty = bx.type_func(&[vec_ty, vec_ty], vec_ty);\n         let f = bx.declare_cfn(llvm_intrinsic, llvm::UnnamedAddr::No, fn_ty);\n-        let v = bx.call(fn_ty, None, f, &[lhs, rhs], None);\n+        let v = bx.call(fn_ty, None, None, f, &[lhs, rhs], None);\n         return Ok(v);\n     }\n "}, {"sha": "d3fad5699c800a58bed2eedc06d169b699a245f6", "filename": "compiler/rustc_codegen_llvm/src/type_.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -291,8 +291,24 @@ impl<'ll, 'tcx> LayoutTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n }\n \n impl<'ll, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n+    fn add_type_metadata(&self, function: &'ll Value, typeid: String) {\n+        let typeid_metadata = self.typeid_metadata(typeid).unwrap();\n+        let v = [self.const_usize(0), typeid_metadata];\n+        unsafe {\n+            llvm::LLVMRustGlobalAddMetadata(\n+                function,\n+                llvm::MD_type as c_uint,\n+                llvm::LLVMValueAsMetadata(llvm::LLVMMDNodeInContext(\n+                    self.llcx,\n+                    v.as_ptr(),\n+                    v.len() as c_uint,\n+                )),\n+            )\n+        }\n+    }\n+\n     fn set_type_metadata(&self, function: &'ll Value, typeid: String) {\n-        let typeid_metadata = self.typeid_metadata(typeid);\n+        let typeid_metadata = self.typeid_metadata(typeid).unwrap();\n         let v = [self.const_usize(0), typeid_metadata];\n         unsafe {\n             llvm::LLVMGlobalSetMetadata(\n@@ -307,13 +323,28 @@ impl<'ll, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    fn typeid_metadata(&self, typeid: String) -> &'ll Value {\n-        unsafe {\n+    fn typeid_metadata(&self, typeid: String) -> Option<&'ll Value> {\n+        Some(unsafe {\n             llvm::LLVMMDStringInContext(\n                 self.llcx,\n                 typeid.as_ptr() as *const c_char,\n                 typeid.len() as c_uint,\n             )\n+        })\n+    }\n+\n+    fn add_kcfi_type_metadata(&self, function: &'ll Value, kcfi_typeid: u32) {\n+        let kcfi_type_metadata = self.const_u32(kcfi_typeid);\n+        unsafe {\n+            llvm::LLVMRustGlobalAddMetadata(\n+                function,\n+                llvm::MD_kcfi_type as c_uint,\n+                llvm::LLVMMDNodeInContext2(\n+                    self.llcx,\n+                    &llvm::LLVMValueAsMetadata(kcfi_type_metadata),\n+                    1,\n+                ),\n+            )\n         }\n     }\n "}, {"sha": "ae45ae9d802c851ebe5253bda3e862ae71cb21f1", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -494,7 +494,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             (rust_main, start_ty, vec![arg_argc, arg_argv])\n         };\n \n-        let result = bx.call(start_ty, None, start_fn, &args, None);\n+        let result = bx.call(start_ty, None, None, start_fn, &args, None);\n         let cast = bx.intcast(result, cx.type_int(), true);\n         bx.ret(cast);\n "}, {"sha": "c3cc17c255b465435c4ef28a6350bea554b7733c", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -31,14 +31,15 @@ use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n+use rustc_serialize::opaque::{FileEncoder, MemDecoder};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n use rustc_span::symbol::Symbol;\n use rustc_span::DebuggerVisualizerFile;\n use std::collections::BTreeSet;\n+use std::io;\n use std::path::{Path, PathBuf};\n \n pub mod back;\n@@ -215,8 +216,11 @@ const RLINK_MAGIC: &[u8] = b\"rustlink\";\n const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n \n impl CodegenResults {\n-    pub fn serialize_rlink(codegen_results: &CodegenResults) -> Vec<u8> {\n-        let mut encoder = MemEncoder::new();\n+    pub fn serialize_rlink(\n+        rlink_file: &Path,\n+        codegen_results: &CodegenResults,\n+    ) -> Result<usize, io::Error> {\n+        let mut encoder = FileEncoder::new(rlink_file)?;\n         encoder.emit_raw_bytes(RLINK_MAGIC);\n         // `emit_raw_bytes` is used to make sure that the version representation does not depend on\n         // Encoder's inner representation of `u32`."}, {"sha": "a8b935bd65ce175d283f15bbc182fd65a743f7dc", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -28,8 +28,9 @@ impl<'a, 'tcx> VirtualIndex {\n         if bx.cx().sess().opts.unstable_opts.virtual_function_elimination\n             && bx.cx().sess().lto() == Lto::Fat\n         {\n-            let typeid =\n-                bx.typeid_metadata(typeid_for_trait_ref(bx.tcx(), expect_dyn_trait_in_self(ty)));\n+            let typeid = bx\n+                .typeid_metadata(typeid_for_trait_ref(bx.tcx(), expect_dyn_trait_in_self(ty)))\n+                .unwrap();\n             let vtable_byte_offset = self.0 * bx.data_layout().pointer_size.bytes();\n             let func = bx.type_checked_load(llvtable, vtable_byte_offset, typeid);\n             bx.pointercast(func, llty)"}, {"sha": "569599faa362bb8bda84c59a365600473df78025", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -203,7 +203,9 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n                 self.assign(local, DefLocation::Body(location));\n             }\n \n-            PlaceContext::NonUse(_) | PlaceContext::MutatingUse(MutatingUseContext::Retag) => {}\n+            PlaceContext::NonUse(_)\n+            | PlaceContext::NonMutatingUse(NonMutatingUseContext::PlaceMention)\n+            | PlaceContext::MutatingUse(MutatingUseContext::Retag) => {}\n \n             PlaceContext::NonMutatingUse(\n                 NonMutatingUseContext::Copy | NonMutatingUseContext::Move,"}, {"sha": "c1613a9640a8bdb93004125b536e321dc9a579b2", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 13, "deletions": 43, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -19,7 +19,6 @@ use rustc_middle::ty::{self, Instance, Ty};\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n-use rustc_symbol_mangling::typeid::typeid_for_fnabi;\n use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode, Reg};\n use rustc_target::abi::{self, HasDataLayout, WrappingRange};\n use rustc_target::spec::abi::Abi;\n@@ -163,6 +162,12 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         // do an invoke, otherwise do a call.\n         let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n+        let fn_attrs = if bx.tcx().def_kind(fx.instance.def_id()).has_codegen_attrs() {\n+            Some(bx.tcx().codegen_fn_attrs(fx.instance.def_id()))\n+        } else {\n+            None\n+        };\n+\n         if !fn_abi.can_unwind {\n             unwind = mir::UnwindAction::Unreachable;\n         }\n@@ -190,6 +195,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             };\n             let invokeret = bx.invoke(\n                 fn_ty,\n+                fn_attrs,\n                 Some(&fn_abi),\n                 fn_ptr,\n                 &llargs,\n@@ -211,7 +217,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             }\n             MergingSucc::False\n         } else {\n-            let llret = bx.call(fn_ty, Some(&fn_abi), fn_ptr, &llargs, self.funclet(fx));\n+            let llret = bx.call(fn_ty, fn_attrs, Some(&fn_abi), fn_ptr, &llargs, self.funclet(fx));\n             if fx.mir[self.bb].is_cleanup {\n                 // Cleanup is always the cold path. Don't inline\n                 // drop glue. Also, when there is a deeply-nested\n@@ -1051,48 +1057,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             self.codegen_argument(bx, location, &mut llargs, last_arg);\n         }\n \n-        let (is_indirect_call, fn_ptr) = match (llfn, instance) {\n-            (Some(llfn), _) => (true, llfn),\n-            (None, Some(instance)) => (false, bx.get_fn_addr(instance)),\n-            _ => span_bug!(span, \"no llfn for call\"),\n+        let fn_ptr = match (instance, llfn) {\n+            (Some(instance), None) => bx.get_fn_addr(instance),\n+            (_, Some(llfn)) => llfn,\n+            _ => span_bug!(span, \"no instance or llfn for call\"),\n         };\n \n-        // For backends that support CFI using type membership (i.e., testing whether a given\n-        // pointer is associated with a type identifier).\n-        if bx.tcx().sess.is_sanitizer_cfi_enabled() && is_indirect_call {\n-            // Emit type metadata and checks.\n-            // FIXME(rcvalle): Add support for generalized identifiers.\n-            // FIXME(rcvalle): Create distinct unnamed MDNodes for internal identifiers.\n-            let typeid = typeid_for_fnabi(bx.tcx(), fn_abi);\n-            let typeid_metadata = self.cx.typeid_metadata(typeid);\n-\n-            // Test whether the function pointer is associated with the type identifier.\n-            let cond = bx.type_test(fn_ptr, typeid_metadata);\n-            let bb_pass = bx.append_sibling_block(\"type_test.pass\");\n-            let bb_fail = bx.append_sibling_block(\"type_test.fail\");\n-            bx.cond_br(cond, bb_pass, bb_fail);\n-\n-            bx.switch_to_block(bb_pass);\n-            let merging_succ = helper.do_call(\n-                self,\n-                bx,\n-                fn_abi,\n-                fn_ptr,\n-                &llargs,\n-                target.as_ref().map(|&target| (ret_dest, target)),\n-                unwind,\n-                &copied_constant_arguments,\n-                false,\n-            );\n-            assert_eq!(merging_succ, MergingSucc::False);\n-\n-            bx.switch_to_block(bb_fail);\n-            bx.abort();\n-            bx.unreachable();\n-\n-            return MergingSucc::False;\n-        }\n-\n         helper.do_call(\n             self,\n             bx,\n@@ -1640,7 +1610,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let (fn_abi, fn_ptr) = common::build_langcall(&bx, None, LangItem::PanicCannotUnwind);\n             let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n-            let llret = bx.call(fn_ty, Some(&fn_abi), fn_ptr, &[], funclet.as_ref());\n+            let llret = bx.call(fn_ty, None, Some(&fn_abi), fn_ptr, &[], funclet.as_ref());\n             bx.do_not_inline(llret);\n \n             bx.unreachable();"}, {"sha": "6e7065713b8175c850e2879e8b3dd6a98b91b167", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -697,7 +697,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let fn_ptr = bx.get_fn_addr(instance);\n                     let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n                     let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n-                    bx.call(fn_ty, Some(fn_abi), fn_ptr, &[], None)\n+                    let fn_attrs = if bx.tcx().def_kind(instance.def_id()).has_codegen_attrs() {\n+                        Some(bx.tcx().codegen_fn_attrs(instance.def_id()))\n+                    } else {\n+                        None\n+                    };\n+                    bx.call(fn_ty, fn_attrs, Some(fn_abi), fn_ptr, &[], None)\n                 } else {\n                     bx.get_static(def_id)\n                 };"}, {"sha": "57de7e9620e8764d165a15fd707a7d65a29cfbd2", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -14,6 +14,7 @@ use crate::mir::operand::OperandRef;\n use crate::mir::place::PlaceRef;\n use crate::MemFlags;\n \n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::ty::layout::{HasParamEnv, TyAndLayout};\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n@@ -72,6 +73,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn invoke(\n         &mut self,\n         llty: Self::Type,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n         fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n         llfn: Self::Value,\n         args: &[Self::Value],\n@@ -321,6 +323,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn call(\n         &mut self,\n         llty: Self::Type,\n+        fn_attrs: Option<&CodegenFnAttrs>,\n         fn_abi: Option<&FnAbi<'tcx, Ty<'tcx>>>,\n         llfn: Self::Value,\n         args: &[Self::Value],"}, {"sha": "36d9864221bcbac34933b57dc3896c9d2bdd8d13", "filename": "compiler/rustc_codegen_ssa/src/traits/type_.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -128,12 +128,16 @@ pub trait LayoutTypeMethods<'tcx>: Backend<'tcx> {\n     ) -> Self::Type;\n }\n \n-// For backends that support CFI using type membership (i.e., testing whether a given  pointer is\n+// For backends that support CFI using type membership (i.e., testing whether a given pointer is\n // associated with a type identifier).\n pub trait TypeMembershipMethods<'tcx>: Backend<'tcx> {\n-    fn set_type_metadata(&self, function: Self::Function, typeid: String);\n-    fn typeid_metadata(&self, typeid: String) -> Self::Value;\n-    fn set_kcfi_type_metadata(&self, function: Self::Function, typeid: u32);\n+    fn add_type_metadata(&self, _function: Self::Function, _typeid: String) {}\n+    fn set_type_metadata(&self, _function: Self::Function, _typeid: String) {}\n+    fn typeid_metadata(&self, _typeid: String) -> Option<Self::Value> {\n+        None\n+    }\n+    fn add_kcfi_type_metadata(&self, _function: Self::Function, _typeid: u32) {}\n+    fn set_kcfi_type_metadata(&self, _function: Self::Function, _typeid: u32) {}\n }\n \n pub trait ArgAbiMethods<'tcx>: HasCodegen<'tcx> {"}, {"sha": "b10f2e9f862dbc513714a580c0e08b157d1c3c91", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -337,7 +337,7 @@ fn valtree_into_mplace<'tcx>(\n \n     match ty.kind() {\n         ty::FnDef(_, _) => {\n-            ecx.write_immediate(Immediate::Uninit, &place.into()).unwrap();\n+            // Zero-sized type, nothing to do.\n         }\n         ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Char => {\n             let scalar_int = valtree.unwrap_leaf();"}, {"sha": "a7f66071fe2bbd07a06e9144f21a8196a9d6d1c3", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -245,6 +245,12 @@ impl<'tcx, Prov: Provenance> ImmTy<'tcx, Prov> {\n impl<'tcx, Prov: Provenance> OpTy<'tcx, Prov> {\n     pub fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n         if self.layout.is_unsized() {\n+            if matches!(self.op, Operand::Immediate(Immediate::Uninit)) {\n+                // Uninit unsized places shouldn't occur. In the interpreter we have them\n+                // temporarily for unsized arguments before their value is put in; in ConstProp they\n+                // remain uninit and this code can actually be reached.\n+                throw_inval!(UninitUnsizedLocal);\n+            }\n             // There are no unsized immediates.\n             self.assert_mem_place().len(cx)\n         } else {"}, {"sha": "1da20579021a1d44db1be444b592eff19c9be801", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -157,7 +157,7 @@ impl Qualif for NeedsNonConstDrop {\n             cx.tcx,\n             ObligationCause::dummy_with_span(cx.body.span),\n             cx.param_env,\n-            ty::Binder::dummy(cx.tcx.at(cx.body.span).mk_trait_ref(LangItem::Destruct, [ty]))\n+            ty::TraitRef::from_lang_item(cx.tcx, LangItem::Destruct, cx.body.span, [ty])\n                 .with_constness(ty::BoundConstness::ConstIfConst),\n         );\n "}, {"sha": "9995c08345c2a4eed347111ec9e85349eb495f1a", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -64,6 +64,11 @@ impl Fingerprint {\n         )\n     }\n \n+    #[inline]\n+    pub(crate) fn as_u128(self) -> u128 {\n+        u128::from(self.1) << 64 | u128::from(self.0)\n+    }\n+\n     // Combines two hashes in an order independent way. Make sure this is what\n     // you want.\n     #[inline]"}, {"sha": "71679086f16c385228d7e698b244f5933148bfcc", "filename": "compiler/rustc_data_structures/src/svh.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsvh.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -23,18 +23,18 @@ impl Svh {\n         Svh { hash }\n     }\n \n-    pub fn as_u64(&self) -> u64 {\n-        self.hash.to_smaller_hash().as_u64()\n+    pub fn as_u128(self) -> u128 {\n+        self.hash.as_u128()\n     }\n \n-    pub fn to_string(&self) -> String {\n-        format!(\"{:016x}\", self.hash.to_smaller_hash())\n+    pub fn to_hex(self) -> String {\n+        format!(\"{:032x}\", self.hash.as_u128())\n     }\n }\n \n impl fmt::Display for Svh {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.pad(&self.to_string())\n+        f.pad(&self.to_hex())\n     }\n }\n "}, {"sha": "4df5a8d48fd1915636ebc5bf4b7fe113f9b46668", "filename": "compiler/rustc_error_messages/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_error_messages%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_error_messages%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2FCargo.toml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -17,9 +17,9 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }\n tracing = \"0.1\"\n unic-langid = { version = \"0.9.0\", features = [\"macros\"] }\n-icu_list = \"1.1.0\"\n-icu_locid = \"1.1.0\"\n-icu_provider_adapters = \"1.1.0\"\n+icu_list = \"1.2\"\n+icu_locid = \"1.2\"\n+icu_provider_adapters = \"1.2\"\n \n [features]\n rustc_use_parallel_compiler = ['rustc_baked_icu_data/rustc_use_parallel_compiler']"}, {"sha": "1c222fb4a898c8761fee20a0769b78a09e4fe532", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -88,6 +88,7 @@ use rustc_span::Span;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::fmt::Display;\n+use std::rc::Rc;\n \n /// A unit within a matcher that a `MatcherPos` can refer to. Similar to (and derived from)\n /// `mbe::TokenTree`, but designed specifically for fast and easy traversal during matching.\n@@ -257,10 +258,10 @@ struct MatcherPos {\n     /// against the relevant metavar by the black box parser. An element will be a `MatchedSeq` if\n     /// the corresponding metavar decl is within a sequence.\n     ///\n-    /// It is critical to performance that this is an `Lrc`, because it gets cloned frequently when\n+    /// It is critical to performance that this is an `Rc`, because it gets cloned frequently when\n     /// processing sequences. Mostly for sequence-ending possibilities that must be tried but end\n     /// up failing.\n-    matches: Lrc<Vec<NamedMatch>>,\n+    matches: Rc<Vec<NamedMatch>>,\n }\n \n // This type is used a lot. Make sure it doesn't unintentionally get bigger.\n@@ -272,7 +273,7 @@ impl MatcherPos {\n     /// and both are hot enough to be always worth inlining.\n     #[inline(always)]\n     fn push_match(&mut self, metavar_idx: usize, seq_depth: usize, m: NamedMatch) {\n-        let matches = Lrc::make_mut(&mut self.matches);\n+        let matches = Rc::make_mut(&mut self.matches);\n         match seq_depth {\n             0 => {\n                 // We are not within a sequence. Just append `m`.\n@@ -427,7 +428,7 @@ pub struct TtParser {\n \n     /// Pre-allocate an empty match array, so it can be cloned cheaply for macros with many rules\n     /// that have no metavars.\n-    empty_matches: Lrc<Vec<NamedMatch>>,\n+    empty_matches: Rc<Vec<NamedMatch>>,\n }\n \n impl TtParser {\n@@ -437,7 +438,7 @@ impl TtParser {\n             cur_mps: vec![],\n             next_mps: vec![],\n             bb_mps: vec![],\n-            empty_matches: Lrc::new(vec![]),\n+            empty_matches: Rc::new(vec![]),\n         }\n     }\n \n@@ -507,7 +508,7 @@ impl TtParser {\n                         // Try zero matches of this sequence, by skipping over it.\n                         self.cur_mps.push(MatcherPos {\n                             idx: idx_first_after,\n-                            matches: Lrc::clone(&mp.matches),\n+                            matches: Rc::clone(&mp.matches),\n                         });\n                     }\n \n@@ -521,7 +522,7 @@ impl TtParser {\n                     // processed next time around the loop.\n                     let ending_mp = MatcherPos {\n                         idx: mp.idx + 1, // +1 skips the Kleene op\n-                        matches: Lrc::clone(&mp.matches),\n+                        matches: Rc::clone(&mp.matches),\n                     };\n                     self.cur_mps.push(ending_mp);\n \n@@ -537,7 +538,7 @@ impl TtParser {\n                     // will fail quietly when it is processed next time around the loop.\n                     let ending_mp = MatcherPos {\n                         idx: mp.idx + 2, // +2 skips the separator and the Kleene op\n-                        matches: Lrc::clone(&mp.matches),\n+                        matches: Rc::clone(&mp.matches),\n                     };\n                     self.cur_mps.push(ending_mp);\n \n@@ -587,9 +588,9 @@ impl TtParser {\n         if *token == token::Eof {\n             Some(match eof_mps {\n                 EofMatcherPositions::One(mut eof_mp) => {\n-                    // Need to take ownership of the matches from within the `Lrc`.\n-                    Lrc::make_mut(&mut eof_mp.matches);\n-                    let matches = Lrc::try_unwrap(eof_mp.matches).unwrap().into_iter();\n+                    // Need to take ownership of the matches from within the `Rc`.\n+                    Rc::make_mut(&mut eof_mp.matches);\n+                    let matches = Rc::try_unwrap(eof_mp.matches).unwrap().into_iter();\n                     self.nameize(matcher, matches)\n                 }\n                 EofMatcherPositions::Multiple => {"}, {"sha": "dc5dc4608a07ff141142f92c785544fe7f6fd3ea", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -164,6 +164,8 @@ declare_features! (\n     (active, link_cfg, \"1.14.0\", None, None),\n     /// Allows the `multiple_supertrait_upcastable` lint.\n     (active, multiple_supertrait_upcastable, \"1.69.0\", None, None),\n+    /// Allow negative trait bounds. This is an internal-only feature for testing the trait solver!\n+    (incomplete, negative_bounds, \"CURRENT_RUSTC_VERSION\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items.\n@@ -329,6 +331,8 @@ declare_features! (\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n     /// Allow conditional compilation depending on rust version\n     (active, cfg_version, \"1.45.0\", Some(64796), None),\n+    /// Allows to use the `#[cfi_encoding = \"\"]` attribute.\n+    (active, cfi_encoding, \"1.69.0\", Some(89653), None),\n     /// Allows `for<...>` on closures and generators.\n     (active, closure_lifetime_binder, \"1.64.0\", Some(97362), None),\n     /// Allows `#[track_caller]` on closures and generators."}, {"sha": "fe05d4590e7a677f5c120f553b183b42a706da93", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -494,6 +494,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // RFC 2397\n     gated!(do_not_recommend, Normal, template!(Word), WarnFollowing, experimental!(do_not_recommend)),\n \n+    // `#[cfi_encoding = \"\"]`\n+    gated!(\n+        cfi_encoding, Normal, template!(NameValueStr: \"encoding\"), ErrorPreceding,\n+        experimental!(cfi_encoding)\n+    ),\n+\n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n     // =========================================================================="}, {"sha": "38cd5865cc3266218a16dd82fbaf526ef1b153a5", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -435,6 +435,7 @@ pub enum GenericArgsParentheses {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum TraitBoundModifier {\n     None,\n+    Negative,\n     Maybe,\n     MaybeConst,\n }"}, {"sha": "0a8bd1d612389d388b6f760c51f1bce50e2c1eae", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -226,6 +226,7 @@ language_item_table! {\n \n     PartialEq,               sym::eq,                  eq_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n     PartialOrd,              sym::partial_ord,         partial_ord_trait,          Target::Trait,          GenericRequirement::Exact(1);\n+    CVoid,                   sym::c_void,              c_void,                     Target::Enum,           GenericRequirement::None;\n \n     // A number of panic-related lang items. The `panic` item corresponds to divide-by-zero and\n     // various panic cases with `match`. The `panic_bounds_check` item is for indexing arrays."}, {"sha": "eaa75bde6c6c4ea104ef2dcc62655872a54ac459", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -280,3 +280,7 @@ hir_analysis_const_specialize = cannot specialize on const impl with non-const i\n hir_analysis_static_specialize = cannot specialize on `'static` lifetime\n \n hir_analysis_missing_tilde_const = missing `~const` qualifier for specialization\n+\n+hir_analysis_drop_impl_negative = negative `Drop` impls are not supported\n+\n+hir_analysis_drop_impl_reservation = reservation `Drop` impls are not supported"}, {"sha": "c199b9da6feea99baf2f7072dbb9fa27c2677199", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -665,6 +665,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         span: Span,\n         binding_span: Option<Span>,\n         constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n         trait_ref_span: Span,\n@@ -693,13 +694,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let assoc_bindings = self.create_assoc_bindings_for_generic_args(args);\n \n         let poly_trait_ref =\n-            ty::Binder::bind_with_vars(tcx.mk_trait_ref(trait_def_id, substs), bound_vars);\n+            ty::Binder::bind_with_vars(ty::TraitRef::new(tcx, trait_def_id, substs), bound_vars);\n \n         debug!(?poly_trait_ref, ?assoc_bindings);\n-        bounds.push_trait_bound(tcx, poly_trait_ref, span, constness);\n+        bounds.push_trait_bound(tcx, poly_trait_ref, span, constness, polarity);\n \n         let mut dup_bindings = FxHashMap::default();\n         for binding in &assoc_bindings {\n+            // Don't register additional associated type bounds for negative bounds,\n+            // since we should have emitten an error for them earlier, and they will\n+            // not be well-formed!\n+            if polarity == ty::ImplPolarity::Negative {\n+                self.tcx()\n+                    .sess\n+                    .delay_span_bug(binding.span, \"negative trait bounds should not have bindings\");\n+                continue;\n+            }\n+\n             // Specify type to assert that error was already reported in `Err` case.\n             let _: Result<_, ErrorGuaranteed> = self.add_predicates_for_ast_type_binding(\n                 hir_id,\n@@ -711,6 +722,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 binding_span.unwrap_or(binding.span),\n                 constness,\n                 only_self_bounds,\n+                polarity,\n             );\n             // Okay to ignore `Err` because of `ErrorGuaranteed` (see above).\n         }\n@@ -743,6 +755,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         trait_ref: &hir::TraitRef<'_>,\n         span: Span,\n         constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n@@ -764,6 +777,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             span,\n             binding_span,\n             constness,\n+            polarity,\n             bounds,\n             speculative,\n             trait_ref_span,\n@@ -799,6 +813,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             span,\n             binding_span,\n             constness,\n+            ty::ImplPolarity::Positive,\n             bounds,\n             speculative,\n             trait_ref_span,\n@@ -831,7 +846,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(b) = trait_segment.args().bindings.first() {\n             prohibit_assoc_ty_binding(self.tcx(), b.span, Some((trait_segment, span)));\n         }\n-        self.tcx().mk_trait_ref(trait_def_id, substs)\n+        ty::TraitRef::new(self.tcx(), trait_def_id, substs)\n     }\n \n     #[instrument(level = \"debug\", skip(self, span))]\n@@ -961,16 +976,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         for ast_bound in ast_bounds {\n             match ast_bound {\n                 hir::GenericBound::Trait(poly_trait_ref, modifier) => {\n-                    let constness = match modifier {\n-                        hir::TraitBoundModifier::MaybeConst => ty::BoundConstness::ConstIfConst,\n-                        hir::TraitBoundModifier::None => ty::BoundConstness::NotConst,\n+                    let (constness, polarity) = match modifier {\n+                        hir::TraitBoundModifier::MaybeConst => {\n+                            (ty::BoundConstness::ConstIfConst, ty::ImplPolarity::Positive)\n+                        }\n+                        hir::TraitBoundModifier::None => {\n+                            (ty::BoundConstness::NotConst, ty::ImplPolarity::Positive)\n+                        }\n+                        hir::TraitBoundModifier::Negative => {\n+                            (ty::BoundConstness::NotConst, ty::ImplPolarity::Negative)\n+                        }\n                         hir::TraitBoundModifier::Maybe => continue,\n                     };\n-\n                     let _ = self.instantiate_poly_trait_ref(\n                         &poly_trait_ref.trait_ref,\n                         poly_trait_ref.span,\n                         constness,\n+                        polarity,\n                         param_ty,\n                         bounds,\n                         false,\n@@ -1088,6 +1110,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         path_span: Span,\n         constness: ty::BoundConstness,\n         only_self_bounds: OnlySelfBounds,\n+        polarity: ty::ImplPolarity,\n     ) -> Result<(), ErrorGuaranteed> {\n         // Given something like `U: SomeTrait<T = X>`, we want to produce a\n         // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n@@ -1438,6 +1461,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 &trait_bound.trait_ref,\n                 trait_bound.span,\n                 ty::BoundConstness::NotConst,\n+                ty::ImplPolarity::Positive,\n                 dummy_self,\n                 &mut bounds,\n                 false,"}, {"sha": "1cf93c86f4f8ab47ea79361cedf6f47b65e69d6f", "filename": "compiler/rustc_hir_analysis/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // <ty as Deref>\n-        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, tcx.lang_items().deref_trait()?, [ty]);\n \n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n "}, {"sha": "686066abbf0793b1ce11dfd288624d4174d58656", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -42,8 +42,14 @@ impl<'tcx> Bounds<'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         span: Span,\n         constness: ty::BoundConstness,\n+        polarity: ty::ImplPolarity,\n     ) {\n-        self.predicates.push((trait_ref.with_constness(constness).to_predicate(tcx), span));\n+        self.predicates.push((\n+            trait_ref\n+                .map_bound(|trait_ref| ty::TraitPredicate { trait_ref, constness, polarity })\n+                .to_predicate(tcx),\n+            span,\n+        ));\n     }\n \n     pub fn push_projection_bound(\n@@ -57,7 +63,7 @@ impl<'tcx> Bounds<'tcx> {\n \n     pub fn push_sized(&mut self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) {\n         let sized_def_id = tcx.require_lang_item(LangItem::Sized, Some(span));\n-        let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [ty]));\n+        let trait_ref = ty::TraitRef::new(tcx, sized_def_id, [ty]);\n         // Preferable to put this obligation first, since we report better errors for sized ambiguity.\n         self.predicates.insert(0, (trait_ref.without_const().to_predicate(tcx), span));\n     }"}, {"sha": "c4d4e0d6d78bcb2063969ae41fa85bfce2e6c953", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -536,7 +536,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n                             tcx,\n                             assoc_item,\n                             assoc_item,\n-                            tcx.mk_trait_ref(id.owner_id.to_def_id(), trait_substs),\n+                            ty::TraitRef::new(tcx, id.owner_id.to_def_id(), trait_substs),\n                         );\n                     }\n                     _ => {}"}, {"sha": "bae80807f71b90c74672b129b8ad1b34138f1eb2", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,14 +1,16 @@\n // FIXME(@lcnr): Move this module out of `rustc_hir_analysis`.\n //\n // We don't do any drop checking during hir typeck.\n-use crate::hir::def_id::{DefId, LocalDefId};\n use rustc_errors::{struct_span_err, ErrorGuaranteed};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{self, Predicate, Ty, TyCtxt};\n \n+use crate::errors;\n+use crate::hir::def_id::{DefId, LocalDefId};\n+\n /// This function confirms that the `Drop` implementation identified by\n /// `drop_impl_did` is not any more specialized than the type it is\n /// attached to (Issue #8142).\n@@ -27,6 +29,19 @@ use rustc_middle::ty::{self, Predicate, Ty, TyCtxt};\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), ErrorGuaranteed> {\n+    match tcx.impl_polarity(drop_impl_did) {\n+        ty::ImplPolarity::Positive => {}\n+        ty::ImplPolarity::Negative => {\n+            return Err(tcx.sess.emit_err(errors::DropImplPolarity::Negative {\n+                span: tcx.def_span(drop_impl_did),\n+            }));\n+        }\n+        ty::ImplPolarity::Reservation => {\n+            return Err(tcx.sess.emit_err(errors::DropImplPolarity::Reservation {\n+                span: tcx.def_span(drop_impl_did),\n+            }));\n+        }\n+    }\n     let dtor_self_type = tcx.type_of(drop_impl_did).subst_identity();\n     let dtor_predicates = tcx.predicates_of(drop_impl_did);\n     match dtor_self_type.kind() {"}, {"sha": "862f0a9b0e2c62f5e26e4aff34e2676896215fb1", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1779,7 +1779,7 @@ fn receiver_is_implemented<'tcx>(\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n     let tcx = wfcx.tcx();\n-    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(receiver_trait_def_id, [receiver_ty]));\n+    let trait_ref = ty::TraitRef::new(tcx, receiver_trait_def_id, [receiver_ty]);\n \n     let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref);\n "}, {"sha": "d05d8508408f116d936f9ebbf68379b83875da63", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -265,10 +265,11 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                         tcx,\n                         cause.clone(),\n                         param_env,\n-                        ty::Binder::dummy(tcx.mk_trait_ref(\n+                        ty::TraitRef::new(\n+                            tcx,\n                             dispatch_from_dyn_trait,\n                             [field.ty(tcx, substs_a), field.ty(tcx, substs_b)],\n-                        )),\n+                        ),\n                     ));\n                 }\n                 let errors = ocx.select_all_or_error();\n@@ -504,8 +505,12 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> Coe\n     // Register an obligation for `A: Trait<B>`.\n     let ocx = ObligationCtxt::new(&infcx);\n     let cause = traits::ObligationCause::misc(span, impl_did);\n-    let obligation =\n-        Obligation::new(tcx, cause, param_env, tcx.mk_trait_ref(trait_def_id, [source, target]));\n+    let obligation = Obligation::new(\n+        tcx,\n+        cause,\n+        param_env,\n+        ty::TraitRef::new(tcx, trait_def_id, [source, target]),\n+    );\n     ocx.register_obligation(obligation);\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {"}, {"sha": "c0ee777722e73c431dfcb65364ffd6eaa6f5f289", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -823,3 +823,17 @@ pub(crate) struct MissingTildeConst {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+pub(crate) enum DropImplPolarity {\n+    #[diag(hir_analysis_drop_impl_negative)]\n+    Negative {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[diag(hir_analysis_drop_impl_reservation)]\n+    Reservation {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}"}, {"sha": "3fe34f23aef421023b76408fa3c5be48c2dce625", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -528,6 +528,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         hir_trait,\n         DUMMY_SP,\n         ty::BoundConstness::NotConst,\n+        ty::ImplPolarity::Positive,\n         self_ty,\n         &mut bounds,\n         true,"}, {"sha": "cfe8d59f737bd18cceb790374d0233684924ff5e", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -601,7 +601,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.tcx,\n             cause,\n             self.fcx.param_env,\n-            self.tcx.mk_trait_ref(coerce_unsized_did, [coerce_source, coerce_target])\n+            ty::TraitRef::new(self.tcx, coerce_unsized_did, [coerce_source, coerce_target])\n         )];\n \n         let mut has_unsized_tuple_coercion = false;\n@@ -764,8 +764,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.tcx,\n             self.cause.clone(),\n             self.param_env,\n-            ty::Binder::dummy(\n-                self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerLike, [a]),\n+            ty::TraitRef::from_lang_item(\n+                self.tcx,\n+                hir::LangItem::PointerLike,\n+                self.cause.span,\n+                [a],\n             ),\n         ));\n "}, {"sha": "bba049c3819343d97f24d82b7fa785c719dba5ea", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1426,6 +1426,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.check_repeat_element_needs_copy_bound(element, count, element_ty);\n \n+        self.register_wf_obligation(\n+            tcx.mk_array_with_const_len(t, count).into(),\n+            expr.span,\n+            traits::WellFormed(None),\n+        );\n+\n         tcx.mk_array_with_const_len(t, count)\n     }\n \n@@ -2822,7 +2828,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // but has nested obligations which are unsatisfied.\n                     for (base_t, _) in self.autoderef(base.span, base_t).silence_errors() {\n                         if let Some((_, index_ty, element_ty)) =\n-                            self.find_and_report_unsatisfied_index_impl(expr.hir_id, base, base_t)\n+                            self.find_and_report_unsatisfied_index_impl(base, base_t)\n                         {\n                             self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);\n                             return element_ty;\n@@ -2881,7 +2887,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// predicates cause this to be, so that the user can add them to fix their code.\n     fn find_and_report_unsatisfied_index_impl(\n         &self,\n-        index_expr_hir_id: HirId,\n         base_expr: &hir::Expr<'_>,\n         base_ty: Ty<'tcx>,\n     ) -> Option<(ErrorGuaranteed, Ty<'tcx>, Ty<'tcx>)> {\n@@ -2914,13 +2919,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // in the first place.\n             ocx.register_obligations(traits::predicates_for_generics(\n                 |idx, span| {\n-                    traits::ObligationCause::new(\n-                        base_expr.span,\n-                        self.body_id,\n-                        if span.is_dummy() {\n-                            traits::ExprItemObligation(impl_def_id, index_expr_hir_id, idx)\n-                        } else {\n-                            traits::ExprBindingObligation(impl_def_id, span, index_expr_hir_id, idx)\n+                    cause.clone().derived_cause(\n+                        ty::Binder::dummy(ty::TraitPredicate {\n+                            trait_ref: impl_trait_ref,\n+                            polarity: ty::ImplPolarity::Positive,\n+                            constness: ty::BoundConstness::NotConst,\n+                        }),\n+                        |derived| {\n+                            traits::ImplDerivedObligation(Box::new(\n+                                traits::ImplDerivedObligationCause {\n+                                    derived,\n+                                    impl_or_alias_def_id: impl_def_id,\n+                                    impl_def_predicate_index: Some(idx),\n+                                    span,\n+                                },\n+                            ))\n                         },\n                     )\n                 },"}, {"sha": "70ce45e21ea55598334ca6cf61038104b334b53f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -481,7 +481,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // For the purposes of this function, we hope that it is a `struct` type, and that our current `expr` is a literal of\n         // that struct type.\n         let impl_trait_self_ref = if self.tcx.is_trait_alias(obligation.impl_or_alias_def_id) {\n-            self.tcx.mk_trait_ref(\n+            ty::TraitRef::new(\n+                self.tcx,\n                 obligation.impl_or_alias_def_id,\n                 ty::InternalSubsts::identity_for_item(self.tcx, obligation.impl_or_alias_def_id),\n             )"}, {"sha": "78bd489a44b6ee88c44cbe28a893ed1e4b230989", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1895,7 +1895,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => {\n                     // Look for a user-provided impl of a `Fn` trait, and point to it.\n                     let new_def_id = self.probe(|_| {\n-                        let trait_ref = self.tcx.mk_trait_ref(\n+                        let trait_ref = ty::TraitRef::new(self.tcx,\n                             call_kind.to_def_id(self.tcx),\n                             [\n                                 callee_ty,"}, {"sha": "8978139119c4ab1d03c69ec886dc5ff02514dc57", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1096,10 +1096,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.tcx,\n                 self.misc(expr.span),\n                 self.param_env,\n-                ty::Binder::dummy(self.tcx.mk_trait_ref(\n+                ty::TraitRef::new(self.tcx,\n                     into_def_id,\n                     [expr_ty, expected_ty]\n-                )),\n+                ),\n             ))\n         {\n             let sugg = if expr.precedence().order() >= PREC_POSTFIX {\n@@ -1438,7 +1438,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && !results.expr_adjustments(callee_expr).iter().any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(..)))\n             // Check that we're in fact trying to clone into the expected type\n             && self.can_coerce(*pointee_ty, expected_ty)\n-            && let trait_ref = ty::Binder::dummy(self.tcx.mk_trait_ref(clone_trait_did, [expected_ty]))\n+            && let trait_ref = ty::TraitRef::new(self.tcx, clone_trait_did, [expected_ty])\n             // And the expected type doesn't implement `Clone`\n             && !self.predicate_must_hold_considering_regions(&traits::Obligation::new(\n                 self.tcx,"}, {"sha": "5963a1632c5bed673d6d69fdde49447e1e9909a0", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.var_for_def(cause.span, param)\n         });\n \n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, substs);\n+        let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, substs);\n \n         // Construct an obligation\n         let poly_trait_ref = ty::Binder::dummy(trait_ref);"}, {"sha": "483e17460b31d605583291738f00e749d921d5da", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -954,7 +954,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\", trait_def_id);\n         let trait_substs = self.fresh_item_substs(trait_def_id);\n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, trait_substs);\n+        let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, trait_substs);\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n             // For trait aliases, recursively assume all explicitly named traits are relevant"}, {"sha": "30f0978d190c6bf826b75a117a29e340fe6918e4", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -72,7 +72,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.autoderef(span, ty).any(|(ty, _)| {\n                     info!(\"check deref {:?} impl FnOnce\", ty);\n                     self.probe(|_| {\n-                        let trait_ref = tcx.mk_trait_ref(\n+                        let trait_ref = ty::TraitRef::new(\n+                            tcx,\n                             fn_once,\n                             [\n                                 ty,"}, {"sha": "e3c688b3e98cbe3a7cb17048e114b8acfcd4a878", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -346,7 +346,7 @@ pub fn finalize_session_directory(sess: &Session, svh: Option<Svh>) {\n     let mut new_sub_dir_name = String::from(&old_sub_dir_name[..=dash_indices[2]]);\n \n     // Append the svh\n-    base_n::push_str(svh.as_u64() as u128, INT_ENCODE_BASE, &mut new_sub_dir_name);\n+    base_n::push_str(svh.as_u128(), INT_ENCODE_BASE, &mut new_sub_dir_name);\n \n     // Create the full path\n     let new_path = incr_comp_session_dir.parent().unwrap().join(new_sub_dir_name);"}, {"sha": "0c8854e962abb85a8f55bb743156b8959dd11ba3", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -30,8 +30,6 @@ use super::*;\n use rustc_middle::ty::relate::{Relate, TypeRelation};\n use rustc_middle::ty::{Const, ImplSubject};\n \n-use std::cell::Cell;\n-\n /// Whether we should define opaque types or just treat them opaquely.\n ///\n /// Currently only used to prevent predicate matching from matching anything\n@@ -84,7 +82,6 @@ impl<'tcx> InferCtxt<'tcx> {\n             in_snapshot: self.in_snapshot.clone(),\n             universe: self.universe.clone(),\n             intercrate: self.intercrate,\n-            inside_canonicalization_ctxt: Cell::new(self.inside_canonicalization_ctxt()),\n         }\n     }\n }"}, {"sha": "427d05c8b4da7d14e300b7a10418ac88544d8192", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -561,8 +561,6 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     where\n         V: TypeFoldable<TyCtxt<'tcx>>,\n     {\n-        let _inside_canonical_ctxt_guard = infcx.set_canonicalization_ctxt();\n-\n         let needs_canonical_flags = if canonicalize_region_mode.any() {\n             TypeFlags::HAS_INFER |\n             TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`"}, {"sha": "c9c1f0aeaac83b652f576bd409b402c89f3be8bb", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -261,11 +261,16 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 (false, None, None, Some(span), String::new())\n             };\n \n-        let expected_trait_ref = self\n-            .cx\n-            .resolve_vars_if_possible(self.cx.tcx.mk_trait_ref(trait_def_id, expected_substs));\n-        let actual_trait_ref =\n-            self.cx.resolve_vars_if_possible(self.cx.tcx.mk_trait_ref(trait_def_id, actual_substs));\n+        let expected_trait_ref = self.cx.resolve_vars_if_possible(ty::TraitRef::new(\n+            self.cx.tcx,\n+            trait_def_id,\n+            expected_substs,\n+        ));\n+        let actual_trait_ref = self.cx.resolve_vars_if_possible(ty::TraitRef::new(\n+            self.cx.tcx,\n+            trait_def_id,\n+            actual_substs,\n+        ));\n \n         // Search the expected and actual trait references to see (a)\n         // whether the sub/sup placeholders appear in them (sometimes"}, {"sha": "a89b9931599023f88ce753ec16dc9f52faaa962e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -39,7 +39,6 @@ use rustc_span::Span;\n \n use std::cell::{Cell, RefCell};\n use std::fmt;\n-use std::ops::Drop;\n \n use self::combine::CombineFields;\n use self::error_reporting::TypeErrCtxt;\n@@ -342,11 +341,6 @@ pub struct InferCtxt<'tcx> {\n     /// there is no type that the user could *actually name* that\n     /// would satisfy it. This avoids crippling inference, basically.\n     pub intercrate: bool,\n-\n-    /// Flag that is set when we enter canonicalization. Used for debugging to ensure\n-    /// that we only collect region information for `BorrowckInferCtxt::reg_var_to_origin`\n-    /// inside non-canonicalization contexts.\n-    inside_canonicalization_ctxt: Cell<bool>,\n }\n \n /// See the `error_reporting` module for more details.\n@@ -638,7 +632,6 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             skip_leak_check: Cell::new(false),\n             universe: Cell::new(ty::UniverseIndex::ROOT),\n             intercrate,\n-            inside_canonicalization_ctxt: Cell::new(false),\n         }\n     }\n }\n@@ -1636,31 +1629,6 @@ impl<'tcx> InferCtxt<'tcx> {\n             }\n         }\n     }\n-\n-    pub fn inside_canonicalization_ctxt(&self) -> bool {\n-        self.inside_canonicalization_ctxt.get()\n-    }\n-\n-    pub fn set_canonicalization_ctxt(&self) -> CanonicalizationCtxtGuard<'_, 'tcx> {\n-        let prev_ctxt = self.inside_canonicalization_ctxt();\n-        self.inside_canonicalization_ctxt.set(true);\n-        CanonicalizationCtxtGuard { prev_ctxt, infcx: self }\n-    }\n-\n-    fn set_canonicalization_ctxt_to(&self, ctxt: bool) {\n-        self.inside_canonicalization_ctxt.set(ctxt);\n-    }\n-}\n-\n-pub struct CanonicalizationCtxtGuard<'cx, 'tcx> {\n-    prev_ctxt: bool,\n-    infcx: &'cx InferCtxt<'tcx>,\n-}\n-\n-impl<'cx, 'tcx> Drop for CanonicalizationCtxtGuard<'cx, 'tcx> {\n-    fn drop(&mut self) {\n-        self.infcx.set_canonicalization_ctxt_to(self.prev_ctxt)\n-    }\n }\n \n impl<'tcx> TypeErrCtxt<'_, 'tcx> {"}, {"sha": "88a0a81e276d27e4de74e32a48f864af3afdeddc", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 7, "deletions": 68, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -30,11 +30,10 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::FnMutDelegate;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor};\n+use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use rustc_span::{Span, Symbol};\n use std::fmt::Debug;\n-use std::ops::ControlFlow;\n \n use super::combine::ObligationEmittingRelation;\n \n@@ -115,11 +114,6 @@ pub trait TypeRelatingDelegate<'tcx> {\n     fn forbid_inference_vars() -> bool;\n }\n \n-#[derive(Clone, Debug, Default)]\n-struct BoundRegionScope<'tcx> {\n-    map: FxHashMap<ty::BoundRegion, ty::Region<'tcx>>,\n-}\n-\n #[derive(Copy, Clone)]\n struct UniversallyQuantified(bool);\n \n@@ -230,10 +224,13 @@ where\n     ) -> RelateResult<'tcx, T> {\n         let universe = self.infcx.probe_ty_var(for_vid).unwrap_err();\n \n+        if value.has_escaping_bound_vars() {\n+            bug!(\"trying to instantiate {for_vid:?} with escaping bound vars: {value:?}\");\n+        }\n+\n         let mut generalizer = TypeGeneralizer {\n             infcx: self.infcx,\n             delegate: &mut self.delegate,\n-            first_free_index: ty::INNERMOST,\n             ambient_variance: self.ambient_variance,\n             for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),\n             universe,\n@@ -488,13 +485,7 @@ where\n         }\n \n         if a == b {\n-            // Subtle: if a or b has a bound variable that we are lazily\n-            // substituting, then even if a == b, it could be that the values we\n-            // will substitute for those bound variables are *not* the same, and\n-            // hence returning `Ok(a)` is incorrect.\n-            if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n-                return Ok(a);\n-            }\n+            return Ok(a);\n         }\n \n         match (a.kind(), b.kind()) {\n@@ -726,47 +717,6 @@ where\n     }\n }\n \n-/// When we encounter a binder like `for<..> fn(..)`, we actually have\n-/// to walk the `fn` value to find all the values bound by the `for`\n-/// (these are not explicitly present in the ty representation right\n-/// now). This visitor handles that: it descends the type, tracking\n-/// binder depth, and finds late-bound regions targeting the\n-/// `for<..`>. For each of those, it creates an entry in\n-/// `bound_region_scope`.\n-struct ScopeInstantiator<'me, 'tcx> {\n-    next_region: &'me mut dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-    // The debruijn index of the scope we are instantiating.\n-    target_index: ty::DebruijnIndex,\n-    bound_region_scope: &'me mut BoundRegionScope<'tcx>,\n-}\n-\n-impl<'me, 'tcx> TypeVisitor<TyCtxt<'tcx>> for ScopeInstantiator<'me, 'tcx> {\n-    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n-        &mut self,\n-        t: &ty::Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.target_index.shift_in(1);\n-        t.super_visit_with(self);\n-        self.target_index.shift_out(1);\n-\n-        ControlFlow::Continue(())\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        let ScopeInstantiator { bound_region_scope, next_region, .. } = self;\n-\n-        match *r {\n-            ty::ReLateBound(debruijn, br) if debruijn == self.target_index => {\n-                bound_region_scope.map.entry(br).or_insert_with(|| next_region(br));\n-            }\n-\n-            _ => {}\n-        }\n-\n-        ControlFlow::Continue(())\n-    }\n-}\n-\n /// The \"type generalizer\" is used when handling inference variables.\n ///\n /// The basic strategy for handling a constraint like `?A <: B` is to\n@@ -780,11 +730,6 @@ impl<'me, 'tcx> TypeVisitor<TyCtxt<'tcx>> for ScopeInstantiator<'me, 'tcx> {\n /// value of `A`. Finally, we relate `&'0 u32 <: &'x u32`, which\n /// establishes `'0: 'x` as a constraint.\n ///\n-/// As a side-effect of this generalization procedure, we also replace\n-/// all the bound regions that we have traversed with concrete values,\n-/// so that the resulting generalized type is independent from the\n-/// scopes.\n-///\n /// [blog post]: https://is.gd/0hKvIr\n struct TypeGeneralizer<'me, 'tcx, D>\n where\n@@ -798,8 +743,6 @@ where\n     /// some other type. What will be the variance at this point?\n     ambient_variance: ty::Variance,\n \n-    first_free_index: ty::DebruijnIndex,\n-\n     /// The vid of the type variable that is in the process of being\n     /// instantiated. If we find this within the value we are folding,\n     /// that means we would have created a cyclic value.\n@@ -939,7 +882,7 @@ where\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n         debug!(\"TypeGeneralizer::regions(a={:?})\", a);\n \n-        if let ty::ReLateBound(debruijn, _) = *a && debruijn < self.first_free_index {\n+        if let ty::ReLateBound(..) = *a {\n             return Ok(a);\n         }\n \n@@ -958,7 +901,6 @@ where\n         // FIXME(#54105) -- if the ambient variance is bivariant,\n         // though, we may however need to check well-formedness or\n         // risk a problem like #41677 again.\n-\n         let replacement_region_vid = self.delegate.generalize_existential(self.universe);\n \n         Ok(replacement_region_vid)\n@@ -1002,10 +944,7 @@ where\n         T: Relate<'tcx>,\n     {\n         debug!(\"TypeGeneralizer::binders(a={:?})\", a);\n-\n-        self.first_free_index.shift_in(1);\n         let result = self.relate(a.skip_binder(), a.skip_binder())?;\n-        self.first_free_index.shift_out(1);\n         Ok(a.rebind(result))\n     }\n }"}, {"sha": "11f43469400ba685b95955c6f901baa98b401f86", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -18,7 +18,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         def_id: DefId,\n         cause: ObligationCause<'tcx>,\n     ) {\n-        let trait_ref = infcx.tcx.mk_trait_ref(def_id, [ty]);\n+        let trait_ref = ty::TraitRef::new(infcx.tcx, def_id, [ty]);\n         self.register_predicate_obligation(\n             infcx,\n             Obligation {"}, {"sha": "f54e5e5e56ffc007defd6c315b1ef2ea1224a8c4", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -200,6 +200,10 @@ impl<'tcx, O: Elaboratable<'tcx>> Elaborator<'tcx, O> {\n         let bound_predicate = elaboratable.predicate().kind();\n         match bound_predicate.skip_binder() {\n             ty::PredicateKind::Clause(ty::Clause::Trait(data)) => {\n+                // Negative trait bounds do not imply any supertrait bounds\n+                if data.polarity == ty::ImplPolarity::Negative {\n+                    return;\n+                }\n                 // Get predicates implied by the trait, or only super predicates if we only care about self predicates.\n                 let predicates = if self.only_self {\n                     tcx.super_predicates_of(data.def_id())"}, {"sha": "6483d51a0b9a99b9ec3b338d1bed6f7ec0bb32e4", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -368,9 +368,8 @@ impl Linker {\n         }\n \n         if sess.opts.unstable_opts.no_link {\n-            let encoded = CodegenResults::serialize_rlink(&codegen_results);\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n-            std::fs::write(&rlink_file, encoded)\n+            CodegenResults::serialize_rlink(&rlink_file, &codegen_results)\n                 .map_err(|error| sess.emit_fatal(FailedWritingFile { path: &rlink_file, error }))?;\n             return Ok(());\n         }"}, {"sha": "a0c576234f96b512f2fb00140236588188bc7b9c", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -795,12 +795,16 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(remap_cwd_prefix, Some(PathBuf::from(\"abc\")));\n     tracked!(report_delayed_bugs, true);\n     tracked!(sanitizer, SanitizerSet::ADDRESS);\n+    tracked!(sanitizer_cfi_canonical_jump_tables, None);\n+    tracked!(sanitizer_cfi_generalize_pointers, Some(true));\n+    tracked!(sanitizer_cfi_normalize_integers, Some(true));\n     tracked!(sanitizer_memory_track_origins, 2);\n     tracked!(sanitizer_recover, SanitizerSet::ADDRESS);\n     tracked!(saturating_float_casts, Some(true));\n     tracked!(share_generics, Some(true));\n     tracked!(show_span, Some(String::from(\"abc\")));\n     tracked!(simulate_remapped_rust_src_base, Some(PathBuf::from(\"/rustc/abc\")));\n+    tracked!(split_lto_unit, Some(true));\n     tracked!(src_hash_algorithm, Some(SourceFileHashAlgorithm::Sha1));\n     tracked!(stack_protector, StackProtector::All);\n     tracked!(symbol_mangling_version, Some(SymbolManglingVersion::V0));"}, {"sha": "82c66b9dfb9f69865d904c1fff98dc507fd1b8a2", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -108,11 +108,7 @@ impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {\n         emit_i64(i64);\n         emit_i32(i32);\n         emit_i16(i16);\n-        emit_i8(i8);\n \n-        emit_bool(bool);\n-        emit_char(char);\n-        emit_str(&str);\n         emit_raw_bytes(&[u8]);\n     }\n }\n@@ -837,11 +833,12 @@ fn should_encode_span(def_kind: DefKind) -> bool {\n         | DefKind::AnonConst\n         | DefKind::InlineConst\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Field\n         | DefKind::Impl { .. }\n         | DefKind::Closure\n         | DefKind::Generator => true,\n-        DefKind::ForeignMod | DefKind::ImplTraitPlaceholder | DefKind::GlobalAsm => false,\n+        DefKind::ForeignMod | DefKind::GlobalAsm => false,\n     }\n }\n \n@@ -1364,9 +1361,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         record!(self.tables.params_in_repr[def_id] <- params_in_repr);\n \n         if adt_def.is_enum() {\n-            let module_children = tcx.module_children_non_reexports(local_def_id);\n+            let module_children = tcx.module_children_local(local_def_id);\n             record_array!(self.tables.module_children_non_reexports[def_id] <-\n-                module_children.iter().map(|def_id| def_id.local_def_index));\n+                module_children.iter().map(|child| child.res.def_id().index));\n         } else {\n             // For non-enum, there is only one variant, and its def_id is the adt's.\n             debug_assert_eq!(adt_def.variants().len(), 1);\n@@ -1412,12 +1409,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             // Encode this here because we don't do it in encode_def_ids.\n             record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));\n         } else {\n-            let non_reexports = tcx.module_children_non_reexports(local_def_id);\n+            let module_children = tcx.module_children_local(local_def_id);\n+\n             record_array!(self.tables.module_children_non_reexports[def_id] <-\n-                non_reexports.iter().map(|def_id| def_id.local_def_index));\n+                module_children.iter().filter(|child| child.reexport_chain.is_empty())\n+                    .map(|child| child.res.def_id().index));\n \n             record_defaulted_array!(self.tables.module_children_reexports[def_id] <-\n-                tcx.module_children_reexports(local_def_id));\n+                module_children.iter().filter(|child| !child.reexport_chain.is_empty()));\n         }\n     }\n \n@@ -1676,9 +1675,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Trait(..) => {\n                 record!(self.tables.trait_def[def_id] <- self.tcx.trait_def(def_id));\n \n-                let module_children = tcx.module_children_non_reexports(item.owner_id.def_id);\n+                let module_children = tcx.module_children_local(item.owner_id.def_id);\n                 record_array!(self.tables.module_children_non_reexports[def_id] <-\n-                    module_children.iter().map(|def_id| def_id.local_def_index));\n+                    module_children.iter().map(|child| child.res.def_id().index));\n \n                 let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);\n                 record_associated_item_def_ids(self, associated_item_def_ids);"}, {"sha": "84f6b7f934dc325bf3101c8a8bef35a8e7dea6c3", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -357,10 +357,16 @@ define_tables! {\n     associated_types_for_impl_traits_in_associated_fn: Table<DefIndex, LazyArray<DefId>>,\n     opt_rpitit_info: Table<DefIndex, Option<LazyValue<ty::ImplTraitInTraitData>>>,\n     unused_generic_params: Table<DefIndex, UnusedGenericParams>,\n+    // Reexported names are not associated with individual `DefId`s,\n+    // e.g. a glob import can introduce a lot of names, all with the same `DefId`.\n+    // That's why the encoded list needs to contain `ModChild` structures describing all the names\n+    // individually instead of `DefId`s.\n     module_children_reexports: Table<DefIndex, LazyArray<ModChild>>,\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,\n+    // For non-reexported names in a module every name is associated with a separate `DefId`,\n+    // so we can take their names, visibilities etc from other encoded tables.\n     module_children_non_reexports: Table<DefIndex, LazyArray<DefIndex>>,\n     associated_item_or_field_def_ids: Table<DefIndex, LazyArray<DefIndex>>,\n     opt_def_kind: Table<DefIndex, DefKind>,"}, {"sha": "c6bbf2ef0cdb5bfdf986e7849e4e496149d60ba6", "filename": "compiler/rustc_middle/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fmessages.ftl?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -32,6 +32,9 @@ middle_values_too_big =\n middle_cannot_be_normalized =\n     unable to determine layout for `{$ty}` because `{$failure_ty}` cannot be normalized\n \n+middle_cycle =\n+    a cycle occurred during layout computation\n+\n middle_strict_coherence_needs_negative_coherence =\n     to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled\n     .label = due to this attribute"}, {"sha": "e45284ca506554ce1b282595cc7f90b6a1729968", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -134,6 +134,9 @@ pub enum InvalidProgramInfo<'tcx> {\n     FnAbiAdjustForForeignAbi(call::AdjustForForeignAbiError),\n     /// SizeOf of unsized type was requested.\n     SizeOfUnsizedType(Ty<'tcx>),\n+    /// An unsized local was accessed without having been initialized.\n+    /// This is not meaningful as we can't even have backing memory for such locals.\n+    UninitUnsizedLocal,\n }\n \n impl fmt::Display for InvalidProgramInfo<'_> {\n@@ -150,6 +153,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n             Layout(ref err) => write!(f, \"{err}\"),\n             FnAbiAdjustForForeignAbi(ref err) => write!(f, \"{err}\"),\n             SizeOfUnsizedType(ty) => write!(f, \"size_of called on unsized type `{ty}`\"),\n+            UninitUnsizedLocal => write!(f, \"unsized local is used while uninitialized\"),\n         }\n     }\n }"}, {"sha": "6718605ed0bc46de7d222de4cf933459eedb79e1", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -192,6 +192,14 @@ macro_rules! make_mir_visitor {\n                 self.super_constant(constant, location);\n             }\n \n+            fn visit_ty_const(\n+                &mut self,\n+                ct: $( & $mutability)? ty::Const<'tcx>,\n+                location: Location,\n+            ) {\n+                self.super_ty_const(ct, location);\n+            }\n+\n             fn visit_span(\n                 &mut self,\n                 span: $(& $mutability)? Span,\n@@ -410,7 +418,7 @@ macro_rules! make_mir_visitor {\n                     StatementKind::PlaceMention(place) => {\n                         self.visit_place(\n                             place,\n-                            PlaceContext::NonUse(NonUseContext::PlaceMention),\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::PlaceMention),\n                             location\n                         );\n                     }\n@@ -625,8 +633,9 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(operand, location);\n                     }\n \n-                    Rvalue::Repeat(value, _) => {\n+                    Rvalue::Repeat(value, ct) => {\n                         self.visit_operand(value, location);\n+                        self.visit_ty_const($(&$mutability)? *ct, location);\n                     }\n \n                     Rvalue::ThreadLocalRef(_) => {}\n@@ -878,12 +887,20 @@ macro_rules! make_mir_visitor {\n                 self.visit_span($(& $mutability)? *span);\n                 drop(user_ty); // no visit method for this\n                 match literal {\n-                    ConstantKind::Ty(_) => {}\n+                    ConstantKind::Ty(ct) => self.visit_ty_const($(&$mutability)? *ct, location),\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                     ConstantKind::Unevaluated(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                 }\n             }\n \n+            fn super_ty_const(\n+                &mut self,\n+                _ct: $(& $mutability)? ty::Const<'tcx>,\n+                _location: Location,\n+            ) {\n+\n+            }\n+\n             fn super_span(&mut self, _span: $(& $mutability)? Span) {\n             }\n \n@@ -1251,6 +1268,11 @@ pub enum NonMutatingUseContext {\n     UniqueBorrow,\n     /// AddressOf for *const pointer.\n     AddressOf,\n+    /// PlaceMention statement.\n+    ///\n+    /// This statement is executed as a check that the `Place` is live without reading from it,\n+    /// so it must be considered as a non-mutating use.\n+    PlaceMention,\n     /// Used as base for another place, e.g., `x` in `x.y`. Will not mutate the place.\n     /// For example, the projection `x.y` is not marked as a mutation in these cases:\n     /// ```ignore (illustrative)\n@@ -1301,8 +1323,6 @@ pub enum NonUseContext {\n     AscribeUserTy,\n     /// The data of a user variable, for debug info.\n     VarDebugInfo,\n-    /// PlaceMention statement.\n-    PlaceMention,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]"}, {"sha": "220118ae5ccb8d77cc3c8cd9df4b9fee3fdf7b6c", "filename": "compiler/rustc_middle/src/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fon_disk_cache.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1026,11 +1026,7 @@ impl<'a, 'tcx> Encoder for CacheEncoder<'a, 'tcx> {\n         emit_i64(i64);\n         emit_i32(i32);\n         emit_i16(i16);\n-        emit_i8(i8);\n \n-        emit_bool(bool);\n-        emit_char(char);\n-        emit_str(&str);\n         emit_raw_bytes(&[u8]);\n     }\n }"}, {"sha": "bfb740ab3560b7a9acd76349ab41abecab2394b6", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -63,7 +63,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                         Err(e) => self.tcx.const_error_with_guaranteed(c.ty(), e),\n                         Ok(Some(bac)) => {\n                             let substs = self.tcx.erase_regions(uv.substs);\n-                            bac.subst(self.tcx, substs)\n+                            let bac = bac.subst(self.tcx, substs);\n+                            return bac.fold_with(self);\n                         }\n                         Ok(None) => c,\n                     },"}, {"sha": "7fc75674da53717961d9c6026240b1e0bb770690", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -506,23 +506,18 @@ macro_rules! implement_ty_decoder {\n \n             impl<$($typaram ),*> Decoder for $DecoderName<$($typaram),*> {\n                 $crate::__impl_decoder_methods! {\n+                    read_usize -> usize;\n                     read_u128 -> u128;\n                     read_u64 -> u64;\n                     read_u32 -> u32;\n                     read_u16 -> u16;\n                     read_u8 -> u8;\n-                    read_usize -> usize;\n \n+                    read_isize -> isize;\n                     read_i128 -> i128;\n                     read_i64 -> i64;\n                     read_i32 -> i32;\n                     read_i16 -> i16;\n-                    read_i8 -> i8;\n-                    read_isize -> isize;\n-\n-                    read_bool -> bool;\n-                    read_char -> char;\n-                    read_str -> &str;\n                 }\n \n                 #[inline]\n@@ -531,13 +526,13 @@ macro_rules! implement_ty_decoder {\n                 }\n \n                 #[inline]\n-                fn position(&self) -> usize {\n-                    self.opaque.position()\n+                fn peek_byte(&self) -> u8 {\n+                    self.opaque.peek_byte()\n                 }\n \n                 #[inline]\n-                fn peek_byte(&self) -> u8 {\n-                    self.opaque.peek_byte()\n+                fn position(&self) -> usize {\n+                    self.opaque.position()\n                 }\n             }\n         }"}, {"sha": "c62254cd79cb19df8d6282378d24b6b7b548c511", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1838,7 +1838,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn check_and_mk_substs(\n+    pub(crate) fn check_and_mk_substs(\n         self,\n         _def_id: DefId,\n         substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n@@ -2238,15 +2238,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_substs_from_iter(iter::once(self_ty.into()).chain(rest))\n     }\n \n-    pub fn mk_trait_ref(\n-        self,\n-        trait_def_id: DefId,\n-        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n-    ) -> ty::TraitRef<'tcx> {\n-        let substs = self.check_and_mk_substs(trait_def_id, substs);\n-        ty::TraitRef { def_id: trait_def_id, substs, _use_mk_trait_ref_instead: () }\n-    }\n-\n     pub fn mk_alias_ty(\n         self,\n         def_id: DefId,\n@@ -2414,26 +2405,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Named module children from all items except `use` and `extern crate` imports.\n-    ///\n-    /// In addition to regular items this list also includes struct or variant constructors, and\n+    /// Named module children from all kinds of items, including imports.\n+    /// In addition to regular items this list also includes struct and variant constructors, and\n     /// items inside `extern {}` blocks because all of them introduce names into parent module.\n-    /// For non-reexported children every such name is associated with a separate `DefId`.\n     ///\n     /// Module here is understood in name resolution sense - it can be a `mod` item,\n     /// or a crate root, or an enum, or a trait.\n-    pub fn module_children_non_reexports(self, def_id: LocalDefId) -> &'tcx [LocalDefId] {\n-        self.resolutions(()).module_children_non_reexports.get(&def_id).map_or(&[], |v| &v[..])\n-    }\n-\n-    /// Named module children from `use` and `extern crate` imports.\n     ///\n-    /// Reexported names are not associated with individual `DefId`s,\n-    /// e.g. a glob import can introduce a lot of names, all with the same `DefId`.\n-    /// That's why the list needs to contain `ModChild` structures describing all the names\n-    /// individually instead of `DefId`s.\n-    pub fn module_children_reexports(self, def_id: LocalDefId) -> &'tcx [ModChild] {\n-        self.resolutions(()).module_children_reexports.get(&def_id).map_or(&[], |v| &v[..])\n+    /// This is not a query, making it a query causes perf regressions\n+    /// (probably due to hashing spans in `ModChild`ren).\n+    pub fn module_children_local(self, def_id: LocalDefId) -> &'tcx [ModChild] {\n+        self.resolutions(()).module_children.get(&def_id).map_or(&[], |v| &v[..])\n     }\n }\n \n@@ -2450,15 +2432,6 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     pub fn ty_error_with_message(self, msg: &str) -> Ty<'tcx> {\n         self.tcx.ty_error_with_message(self.span, msg)\n     }\n-\n-    pub fn mk_trait_ref(\n-        self,\n-        trait_lang_item: LangItem,\n-        substs: impl IntoIterator<Item: Into<ty::GenericArg<'tcx>>>,\n-    ) -> ty::TraitRef<'tcx> {\n-        let trait_def_id = self.require_lang_item(trait_lang_item, Some(self.span));\n-        self.tcx.mk_trait_ref(trait_def_id, substs)\n-    }\n }\n \n /// Parameter attributes that can only be determined by examining the body of a function instead"}, {"sha": "f2a2e67cf82dcbda5304da72f36f586540cddf13", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -210,6 +210,7 @@ pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),\n     SizeOverflow(Ty<'tcx>),\n     NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),\n+    Cycle,\n }\n \n impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n@@ -230,6 +231,9 @@ impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n                 diag.set_arg(\"failure_ty\", e.get_type_for_failure());\n                 diag.set_primary_message(fluent::middle_cannot_be_normalized);\n             }\n+            LayoutError::Cycle => {\n+                diag.set_primary_message(fluent::middle_cycle);\n+            }\n         }\n         diag\n     }\n@@ -250,6 +254,7 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n                 t,\n                 e.get_type_for_failure()\n             ),\n+            LayoutError::Cycle => write!(f, \"a cycle occurred during layout computation\"),\n         }\n     }\n }"}, {"sha": "23d6242899f2ee8132f92cee1b2c6be2b5ac356f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -165,8 +165,7 @@ pub struct ResolverGlobalCtxt {\n     pub effective_visibilities: EffectiveVisibilities,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxIndexSet<LocalDefId>,\n-    pub module_children_non_reexports: LocalDefIdMap<Vec<LocalDefId>>,\n-    pub module_children_reexports: LocalDefIdMap<Vec<ModChild>>,\n+    pub module_children: LocalDefIdMap<Vec<ModChild>>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     pub main_def: Option<MainDefinition>,\n     pub trait_impls: FxIndexMap<DefId, Vec<LocalDefId>>,\n@@ -1211,6 +1210,18 @@ impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for Binder<'tcx, TraitRef\n     }\n }\n \n+impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for TraitRef<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> PolyTraitPredicate<'tcx> {\n+        ty::Binder::dummy(self).to_predicate(tcx)\n+    }\n+}\n+\n+impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for TraitPredicate<'tcx> {\n+    fn to_predicate(self, _tcx: TyCtxt<'tcx>) -> PolyTraitPredicate<'tcx> {\n+        ty::Binder::dummy(self)\n+    }\n+}\n+\n impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(|p| PredicateKind::Clause(Clause::Trait(p))).to_predicate(tcx)\n@@ -1235,6 +1246,12 @@ impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n     }\n }\n \n+impl<'tcx> ToPredicate<'tcx> for TraitPredicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        PredicateKind::Clause(Clause::Trait(self)).to_predicate(tcx)\n+    }\n+}\n+\n impl<'tcx> Predicate<'tcx> {\n     pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {\n         let predicate = self.kind();\n@@ -2109,10 +2126,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// See [`item_name`][Self::item_name] for more information.\n     pub fn opt_item_ident(self, def_id: DefId) -> Option<Ident> {\n         let def = self.opt_item_name(def_id)?;\n-        let span = def_id\n-            .as_local()\n-            .and_then(|id| self.def_ident_span(id))\n-            .unwrap_or(rustc_span::DUMMY_SP);\n+        let span = self\n+            .def_ident_span(def_id)\n+            .unwrap_or_else(|| bug!(\"missing ident span for {def_id:?}\"));\n         Some(Ident::new(def, span))\n     }\n "}, {"sha": "64e7480e626d7cf7bca1a1986935349f4507d31e", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -169,8 +169,11 @@ pub trait Printer<'tcx>: Sized {\n                 self.path_append(\n                     |cx: Self| {\n                         if trait_qualify_parent {\n-                            let trait_ref =\n-                                cx.tcx().mk_trait_ref(parent_def_id, parent_substs.iter().copied());\n+                            let trait_ref = ty::TraitRef::new(\n+                                cx.tcx(),\n+                                parent_def_id,\n+                                parent_substs.iter().copied(),\n+                            );\n                             cx.path_qualified(trait_ref.self_ty(), Some(trait_ref))\n                         } else {\n                             cx.print_def_path(parent_def_id, parent_substs)"}, {"sha": "6ac9f95045069d4bc58027a6c864da71b8436f59", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -2816,6 +2816,9 @@ define_print_and_forward_display! {\n         if let ty::BoundConstness::ConstIfConst = self.constness && cx.tcx().features().const_trait_impl {\n             p!(\"~const \");\n         }\n+        if let ty::ImplPolarity::Negative = self.polarity {\n+            p!(\"!\");\n+        }\n         p!(print(self.trait_ref.print_only_trait_path()))\n     }\n "}, {"sha": "7f28ed6c2633767707b046114fbd15b4ea8eb84e", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -315,7 +315,7 @@ impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {\n             Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n             let substs = relate_substs(relation, a.substs, b.substs)?;\n-            Ok(relation.tcx().mk_trait_ref(a.def_id, substs))\n+            Ok(ty::TraitRef::new(relation.tcx(), a.def_id, substs))\n         }\n     }\n }"}, {"sha": "646384eebc888b5e6c1ed0d20fd35721904a5995", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 60, "deletions": 21, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -727,13 +727,13 @@ impl<'tcx> PolyExistentialPredicate<'tcx> {\n             ExistentialPredicate::AutoTrait(did) => {\n                 let generics = tcx.generics_of(did);\n                 let trait_ref = if generics.params.len() == 1 {\n-                    tcx.mk_trait_ref(did, [self_ty])\n+                    ty::TraitRef::new(tcx, did, [self_ty])\n                 } else {\n                     // If this is an ill-formed auto trait, then synthesize\n                     // new error substs for the missing generics.\n                     let err_substs =\n                         ty::InternalSubsts::extend_with_error(tcx, did, &[self_ty.into()]);\n-                    tcx.mk_trait_ref(did, err_substs)\n+                    ty::TraitRef::new(tcx, did, err_substs)\n                 };\n                 self.rebind(trait_ref).without_const().to_predicate(tcx)\n             }\n@@ -820,36 +820,68 @@ pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n     /// This field exists to prevent the creation of `TraitRef` without\n-    /// calling [TyCtxt::mk_trait_ref].\n-    pub(super) _use_mk_trait_ref_instead: (),\n+    /// calling [`TraitRef::new`].\n+    pub(super) _use_trait_ref_new_instead: (),\n }\n \n impl<'tcx> TraitRef<'tcx> {\n+    pub fn new(\n+        tcx: TyCtxt<'tcx>,\n+        trait_def_id: DefId,\n+        substs: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n+    ) -> Self {\n+        let substs = tcx.check_and_mk_substs(trait_def_id, substs);\n+        Self { def_id: trait_def_id, substs, _use_trait_ref_new_instead: () }\n+    }\n+\n+    pub fn from_lang_item(\n+        tcx: TyCtxt<'tcx>,\n+        trait_lang_item: LangItem,\n+        span: Span,\n+        substs: impl IntoIterator<Item: Into<ty::GenericArg<'tcx>>>,\n+    ) -> Self {\n+        let trait_def_id = tcx.require_lang_item(trait_lang_item, Some(span));\n+        Self::new(tcx, trait_def_id, substs)\n+    }\n+\n+    pub fn from_method(\n+        tcx: TyCtxt<'tcx>,\n+        trait_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> ty::TraitRef<'tcx> {\n+        let defs = tcx.generics_of(trait_id);\n+        ty::TraitRef::new(tcx, trait_id, tcx.mk_substs(&substs[..defs.params.len()]))\n+    }\n+\n+    /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n+    /// are the parameters defined on trait.\n+    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n+        ty::TraitRef::new(tcx, def_id, InternalSubsts::identity_for_item(tcx, def_id))\n+    }\n+\n     pub fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n-        tcx.mk_trait_ref(\n+        ty::TraitRef::new(\n+            tcx,\n             self.def_id,\n             [self_ty.into()].into_iter().chain(self.substs.iter().skip(1)),\n         )\n     }\n \n-    /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n-    /// are the parameters defined on trait.\n-    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {\n-        ty::Binder::dummy(tcx.mk_trait_ref(def_id, InternalSubsts::identity_for_item(tcx, def_id)))\n+    /// Converts this trait ref to a trait predicate with a given `constness` and a positive polarity.\n+    #[inline]\n+    pub fn with_constness(self, constness: ty::BoundConstness) -> ty::TraitPredicate<'tcx> {\n+        ty::TraitPredicate { trait_ref: self, constness, polarity: ty::ImplPolarity::Positive }\n     }\n \n+    /// Converts this trait ref to a trait predicate without `const` and a positive polarity.\n     #[inline]\n-    pub fn self_ty(&self) -> Ty<'tcx> {\n-        self.substs.type_at(0)\n+    pub fn without_const(self) -> ty::TraitPredicate<'tcx> {\n+        self.with_constness(ty::BoundConstness::NotConst)\n     }\n \n-    pub fn from_method(\n-        tcx: TyCtxt<'tcx>,\n-        trait_id: DefId,\n-        substs: SubstsRef<'tcx>,\n-    ) -> ty::TraitRef<'tcx> {\n-        let defs = tcx.generics_of(trait_id);\n-        tcx.mk_trait_ref(trait_id, tcx.mk_substs(&substs[..defs.params.len()]))\n+    #[inline]\n+    pub fn self_ty(&self) -> Ty<'tcx> {\n+        self.substs.type_at(0)\n     }\n }\n \n@@ -907,7 +939,7 @@ impl<'tcx> ExistentialTraitRef<'tcx> {\n         // otherwise the escaping vars would be captured by the binder\n         // debug_assert!(!self_ty.has_escaping_bound_vars());\n \n-        tcx.mk_trait_ref(self.def_id, [self_ty.into()].into_iter().chain(self.substs.iter()))\n+        ty::TraitRef::new(tcx, self.def_id, [self_ty.into()].into_iter().chain(self.substs.iter()))\n     }\n }\n \n@@ -1226,7 +1258,7 @@ impl<'tcx> AliasTy<'tcx> {\n         let trait_def_id = self.trait_def_id(tcx);\n         let trait_generics = tcx.generics_of(trait_def_id);\n         (\n-            tcx.mk_trait_ref(trait_def_id, self.substs.truncate_to(tcx, trait_generics)),\n+            ty::TraitRef::new(tcx, trait_def_id, self.substs.truncate_to(tcx, trait_generics)),\n             &self.substs[trait_generics.count()..],\n         )\n     }\n@@ -1240,7 +1272,7 @@ impl<'tcx> AliasTy<'tcx> {\n     /// as well.\n     pub fn trait_ref(self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {\n         let def_id = self.trait_def_id(tcx);\n-        tcx.mk_trait_ref(def_id, self.substs.truncate_to(tcx, tcx.generics_of(def_id)))\n+        ty::TraitRef::new(tcx, def_id, self.substs.truncate_to(tcx, tcx.generics_of(def_id)))\n     }\n \n     pub fn self_ty(self) -> Ty<'tcx> {\n@@ -2400,6 +2432,13 @@ impl<'tcx> Ty<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    pub fn is_c_void(self, tcx: TyCtxt<'_>) -> bool {\n+        match self.kind() {\n+            ty::Adt(adt, _) => tcx.lang_items().get(LangItem::CVoid) == Some(adt.did()),\n+            _ => false,\n+        }\n+    }\n }\n \n /// Extra information about why we ended up with a particular variance."}, {"sha": "e5b2d342452f33a5edd59a0933af3c1711e39bb3", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -360,16 +360,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ty = self.type_of(adt_did).subst_identity();\n         let mut dtor_candidate = None;\n         self.for_each_relevant_impl(drop_trait, ty, |impl_did| {\n-            let Some(item_id) = self.associated_item_def_ids(impl_did).first() else {\n-                self.sess.delay_span_bug(self.def_span(impl_did), \"Drop impl without drop function\");\n-                return;\n-            };\n-\n             if validate(self, impl_did).is_err() {\n                 // Already `ErrorGuaranteed`, no need to delay a span bug here.\n                 return;\n             }\n \n+            let Some(item_id) = self.associated_item_def_ids(impl_did).first() else {\n+                self.sess.delay_span_bug(self.def_span(impl_did), \"Drop impl without drop function\");\n+                return;\n+            };\n+\n             if let Some((old_item_id, _)) = dtor_candidate {\n                 self.sess\n                     .struct_span_err(self.def_span(item_id), \"multiple drop impls found\")"}, {"sha": "c62c33d4dfc1894633378deca54b7aecb65adeff", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -106,6 +106,12 @@ impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::EarlyBinder<ty::Binder<'_, ty::F\n     }\n }\n \n+impl<'tcx, T> Value<TyCtxt<'tcx>, DepKind> for Result<T, ty::layout::LayoutError<'_>> {\n+    fn from_cycle_error(_tcx: TyCtxt<'tcx>, _cycle: &[QueryInfo<DepKind>]) -> Self {\n+        Err(ty::layout::LayoutError::Cycle)\n+    }\n+}\n+\n // item_and_field_ids should form a cycle where each field contains the\n // type in the next element in the list\n pub fn recursive_type_error("}, {"sha": "c73f8284ca551e6118292dd3318bc5abce535a3d", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -191,7 +191,7 @@ impl<'tcx> ConstToPat<'tcx> {\n             self.tcx(),\n             ObligationCause::dummy(),\n             self.param_env,\n-            self.tcx().mk_trait_ref(partial_eq_trait_id, [ty, ty]),\n+            ty::TraitRef::new(self.tcx(), partial_eq_trait_id, [ty, ty]),\n         );\n \n         // FIXME: should this call a `predicate_must_hold` variant instead?"}, {"sha": "aeca0073304eab9ddd7533a07ac97be6a678f618", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -197,6 +197,7 @@ impl DefUse {\n                 | NonMutatingUseContext::Copy\n                 | NonMutatingUseContext::Inspect\n                 | NonMutatingUseContext::Move\n+                | NonMutatingUseContext::PlaceMention\n                 | NonMutatingUseContext::ShallowBorrow\n                 | NonMutatingUseContext::SharedBorrow\n                 | NonMutatingUseContext::UniqueBorrow,"}, {"sha": "7f995c69a4879cbbf47780f9e0c4902ae7c6f11f", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -714,13 +714,22 @@ impl CanConstProp {\n     }\n }\n \n-impl Visitor<'_> for CanConstProp {\n+impl<'tcx> Visitor<'tcx> for CanConstProp {\n+    fn visit_place(&mut self, place: &Place<'tcx>, mut context: PlaceContext, loc: Location) {\n+        use rustc_middle::mir::visit::PlaceContext::*;\n+\n+        // Dereferencing just read the addess of `place.local`.\n+        if place.projection.first() == Some(&PlaceElem::Deref) {\n+            context = NonMutatingUse(NonMutatingUseContext::Copy);\n+        }\n+\n+        self.visit_local(place.local, context, loc);\n+        self.visit_projection(place.as_ref(), context, loc);\n+    }\n+\n     fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::PlaceContext::*;\n         match context {\n-            // Projections are fine, because `&mut foo.x` will be caught by\n-            // `MutatingUseContext::Borrow` elsewhere.\n-            MutatingUse(MutatingUseContext::Projection)\n             // These are just stores, where the storing is not propagatable, but there may be later\n             // mutations of the same local via `Store`\n             | MutatingUse(MutatingUseContext::Call)\n@@ -751,7 +760,7 @@ impl Visitor<'_> for CanConstProp {\n             NonMutatingUse(NonMutatingUseContext::Copy)\n             | NonMutatingUse(NonMutatingUseContext::Move)\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n-            | NonMutatingUse(NonMutatingUseContext::Projection)\n+            | NonMutatingUse(NonMutatingUseContext::PlaceMention)\n             | NonUse(_) => {}\n \n             // These could be propagated with a smarter analysis or just some careful thinking about\n@@ -770,6 +779,8 @@ impl Visitor<'_> for CanConstProp {\n                 trace!(\"local {:?} can't be propagated because it's used: {:?}\", local, context);\n                 self.can_const_prop[local] = ConstPropMode::NoPropagation;\n             }\n+            MutatingUse(MutatingUseContext::Projection)\n+            | NonMutatingUse(NonMutatingUseContext::Projection) => bug!(\"visit_place should not pass {context:?} for {local:?}\"),\n         }\n     }\n }"}, {"sha": "7253acf61e64dc9fd4ba68599d8079d146bbcbe1", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -30,8 +30,12 @@ fn custom_coerce_unsize_info<'tcx>(\n     source_ty: Ty<'tcx>,\n     target_ty: Ty<'tcx>,\n ) -> CustomCoerceUnsized {\n-    let trait_ref =\n-        ty::Binder::dummy(tcx.mk_trait_ref(LangItem::CoerceUnsized, [source_ty, target_ty]));\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef::from_lang_item(\n+        tcx.tcx,\n+        LangItem::CoerceUnsized,\n+        tcx.span,\n+        [source_ty, target_ty],\n+    ));\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {"}, {"sha": "cd296dca133f544587d334e5831e98540b7a17ee", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -615,13 +615,6 @@ parse_invalid_dyn_keyword = invalid `dyn` keyword\n     .help = `dyn` is only needed at the start of a trait `+`-separated list\n     .suggestion = remove this keyword\n \n-parse_negative_bounds_not_supported = negative bounds are not supported\n-    .label = negative bounds are not supported\n-    .suggestion = {$num_bounds ->\n-            [one] remove the bound\n-           *[other] remove the bounds\n-        }\n-\n parse_help_set_edition_cargo = set `edition = \"{$edition}\"` in `Cargo.toml`\n parse_help_set_edition_standalone = pass `--edition {$edition}` to `rustc`\n parse_note_edition_guide = for more on editions, read https://doc.rust-lang.org/edition-guide\n@@ -772,7 +765,8 @@ parse_assoc_lifetime = associated lifetimes are not supported\n \n parse_tilde_const_lifetime = `~const` may only modify trait bounds, not lifetime bounds\n \n-parse_maybe_lifetime = `?` may only modify trait bounds, not lifetime bounds\n+parse_modifier_lifetime = `{$sigil}` may only modify trait bounds, not lifetime bounds\n+    .suggestion = remove the `{$sigil}`\n \n parse_parenthesized_lifetime = parenthesized lifetime bounds are not supported\n     .suggestion = remove the parentheses"}, {"sha": "010a13aefa42033be37e5fc610090a9d9153e14a", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -2280,31 +2280,6 @@ pub(crate) struct InvalidDynKeyword {\n     pub span: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(parse_negative_bounds_not_supported)]\n-pub(crate) struct NegativeBoundsNotSupported {\n-    #[primary_span]\n-    pub negative_bounds: Vec<Span>,\n-    #[label]\n-    pub last_span: Span,\n-    #[subdiagnostic]\n-    pub sub: Option<NegativeBoundsNotSupportedSugg>,\n-}\n-\n-#[derive(Subdiagnostic)]\n-#[suggestion(\n-    parse_suggestion,\n-    style = \"tool-only\",\n-    code = \"{fixed}\",\n-    applicability = \"machine-applicable\"\n-)]\n-pub(crate) struct NegativeBoundsNotSupportedSugg {\n-    #[primary_span]\n-    pub bound_list: Span,\n-    pub num_bounds: usize,\n-    pub fixed: String,\n-}\n-\n #[derive(Subdiagnostic)]\n pub enum HelpUseLatestEdition {\n     #[help(parse_help_set_edition_cargo)]\n@@ -2412,10 +2387,12 @@ pub(crate) struct TildeConstLifetime {\n }\n \n #[derive(Diagnostic)]\n-#[diag(parse_maybe_lifetime)]\n-pub(crate) struct MaybeLifetime {\n+#[diag(parse_modifier_lifetime)]\n+pub(crate) struct ModifierLifetime {\n     #[primary_span]\n+    #[suggestion(style = \"tool-only\", applicability = \"maybe-incorrect\", code = \"\")]\n     pub span: Span,\n+    pub sigil: &'static str,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "36883bd2172116585ea9ec4f74d5f6080ccd25e1", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1284,7 +1284,7 @@ impl<'a> Parser<'a> {\n         }\n \n         self.bump(); // `+`\n-        let bounds = self.parse_generic_bounds(None)?;\n+        let bounds = self.parse_generic_bounds()?;\n         let sum_span = ty.span.to(self.prev_token.span);\n \n         let sub = match &ty.kind {"}, {"sha": "e6d0f9fbc76d8702606940b621d55105d2bf4fda", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -78,7 +78,7 @@ impl<'a> Parser<'a> {\n                 }\n                 self.restore_snapshot(snapshot);\n             }\n-            self.parse_generic_bounds(colon_span)?\n+            self.parse_generic_bounds()?\n         } else {\n             Vec::new()\n         };\n@@ -419,7 +419,7 @@ impl<'a> Parser<'a> {\n         // or with mandatory equality sign and the second type.\n         let ty = self.parse_ty_for_where_clause()?;\n         if self.eat(&token::Colon) {\n-            let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n+            let bounds = self.parse_generic_bounds()?;\n             Ok(ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n                 span: lo.to(self.prev_token.span),\n                 bound_generic_params: lifetime_defs,"}, {"sha": "6ca88200dc51b7a44f8dde1dc1a14fcd66f0e0d1", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -788,11 +788,7 @@ impl<'a> Parser<'a> {\n         // Parse optional colon and supertrait bounds.\n         let had_colon = self.eat(&token::Colon);\n         let span_at_colon = self.prev_token.span;\n-        let bounds = if had_colon {\n-            self.parse_generic_bounds(Some(self.prev_token.span))?\n-        } else {\n-            Vec::new()\n-        };\n+        let bounds = if had_colon { self.parse_generic_bounds()? } else { Vec::new() };\n \n         let span_before_eq = self.prev_token.span;\n         if self.eat(&token::Eq) {\n@@ -802,7 +798,7 @@ impl<'a> Parser<'a> {\n                 self.sess.emit_err(errors::BoundsNotAllowedOnTraitAliases { span });\n             }\n \n-            let bounds = self.parse_generic_bounds(None)?;\n+            let bounds = self.parse_generic_bounds()?;\n             generics.where_clause = self.parse_where_clause()?;\n             self.expect_semi()?;\n \n@@ -883,7 +879,7 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and param bounds.\n         let bounds =\n-            if self.eat(&token::Colon) { self.parse_generic_bounds(None)? } else { Vec::new() };\n+            if self.eat(&token::Colon) { self.parse_generic_bounds()? } else { Vec::new() };\n         let before_where_clause = self.parse_where_clause()?;\n \n         let ty = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };"}, {"sha": "feb7e829caf685d5b24e98657d91e880959d11f0", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -606,7 +606,7 @@ impl<'a> Parser<'a> {\n                     let kind = if self.eat(&token::Colon) {\n                         // Parse associated type constraint bound.\n \n-                        let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n+                        let bounds = self.parse_generic_bounds()?;\n                         AssocConstraintKind::Bound { bounds }\n                     } else if self.eat(&token::Eq) {\n                         self.parse_assoc_equality_term(ident, self.prev_token.span)?"}, {"sha": "a29b696aea83c5a86615c6c1e2bc527399b09981", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 46, "deletions": 79, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -3,8 +3,7 @@ use super::{Parser, PathStyle, TokenType};\n use crate::errors::{\n     self, DynAfterMut, ExpectedFnPathFoundFnKeyword, ExpectedMutOrConstInRawPointerType,\n     FnPointerCannotBeAsync, FnPointerCannotBeConst, FnPtrWithGenerics, FnPtrWithGenericsSugg,\n-    InvalidDynKeyword, LifetimeAfterMut, NeedPlusAfterTraitObjectLifetime,\n-    NegativeBoundsNotSupported, NegativeBoundsNotSupportedSugg, NestedCVariadicType,\n+    InvalidDynKeyword, LifetimeAfterMut, NeedPlusAfterTraitObjectLifetime, NestedCVariadicType,\n     ReturnTypesUseThinArrow,\n };\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n@@ -14,31 +13,34 @@ use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::util::case::Case;\n use rustc_ast::{\n-    self as ast, BareFnTy, FnRetTy, GenericBound, GenericBounds, GenericParam, Generics, Lifetime,\n-    MacCall, MutTy, Mutability, PolyTraitRef, TraitBoundModifier, TraitObjectSyntax, Ty, TyKind,\n+    self as ast, BareFnTy, BoundPolarity, FnRetTy, GenericBound, GenericBounds, GenericParam,\n+    Generics, Lifetime, MacCall, MutTy, Mutability, PolyTraitRef, TraitBoundModifier,\n+    TraitObjectSyntax, Ty, TyKind,\n };\n use rustc_errors::{Applicability, PResult};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n use thin_vec::{thin_vec, ThinVec};\n \n-/// Any `?` or `~const` modifiers that appear at the start of a bound.\n+/// Any `?`, `!`, or `~const` modifiers that appear at the start of a bound.\n struct BoundModifiers {\n     /// `?Trait`.\n-    maybe: Option<Span>,\n+    bound_polarity: BoundPolarity,\n \n     /// `~const Trait`.\n     maybe_const: Option<Span>,\n }\n \n impl BoundModifiers {\n     fn to_trait_bound_modifier(&self) -> TraitBoundModifier {\n-        match (self.maybe, self.maybe_const) {\n-            (None, None) => TraitBoundModifier::None,\n-            (Some(_), None) => TraitBoundModifier::Maybe,\n-            (None, Some(_)) => TraitBoundModifier::MaybeConst,\n-            (Some(_), Some(_)) => TraitBoundModifier::MaybeConstMaybe,\n+        match (self.bound_polarity, self.maybe_const) {\n+            (BoundPolarity::Positive, None) => TraitBoundModifier::None,\n+            (BoundPolarity::Negative(_), None) => TraitBoundModifier::Negative,\n+            (BoundPolarity::Maybe(_), None) => TraitBoundModifier::Maybe,\n+            (BoundPolarity::Positive, Some(_)) => TraitBoundModifier::MaybeConst,\n+            (BoundPolarity::Negative(_), Some(_)) => TraitBoundModifier::MaybeConstNegative,\n+            (BoundPolarity::Maybe(_), Some(_)) => TraitBoundModifier::MaybeConstMaybe,\n         }\n     }\n }\n@@ -368,7 +370,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_bare_trait_object(&mut self, lo: Span, allow_plus: AllowPlus) -> PResult<'a, TyKind> {\n         let lt_no_plus = self.check_lifetime() && !self.look_ahead(1, |t| t.is_like_plus());\n-        let bounds = self.parse_generic_bounds_common(allow_plus, None)?;\n+        let bounds = self.parse_generic_bounds_common(allow_plus)?;\n         if lt_no_plus {\n             self.sess.emit_err(NeedPlusAfterTraitObjectLifetime { span: lo });\n         }\n@@ -395,7 +397,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, TyKind> {\n         if plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n-            bounds.append(&mut self.parse_generic_bounds(Some(self.prev_token.span))?);\n+            bounds.append(&mut self.parse_generic_bounds()?);\n         }\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }\n@@ -598,7 +600,7 @@ impl<'a> Parser<'a> {\n                 }\n             })\n         }\n-        let bounds = self.parse_generic_bounds(None)?;\n+        let bounds = self.parse_generic_bounds()?;\n         *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n         Ok(TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds))\n     }\n@@ -629,7 +631,7 @@ impl<'a> Parser<'a> {\n         };\n \n         // Always parse bounds greedily for better error recovery.\n-        let bounds = self.parse_generic_bounds(None)?;\n+        let bounds = self.parse_generic_bounds()?;\n         *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n         Ok(TyKind::TraitObject(bounds, syntax))\n     }\n@@ -660,23 +662,15 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn parse_generic_bounds(\n-        &mut self,\n-        colon_span: Option<Span>,\n-    ) -> PResult<'a, GenericBounds> {\n-        self.parse_generic_bounds_common(AllowPlus::Yes, colon_span)\n+    pub(super) fn parse_generic_bounds(&mut self) -> PResult<'a, GenericBounds> {\n+        self.parse_generic_bounds_common(AllowPlus::Yes)\n     }\n \n     /// Parses bounds of a type parameter `BOUND + BOUND + ...`, possibly with trailing `+`.\n     ///\n     /// See `parse_generic_bound` for the `BOUND` grammar.\n-    fn parse_generic_bounds_common(\n-        &mut self,\n-        allow_plus: AllowPlus,\n-        colon_span: Option<Span>,\n-    ) -> PResult<'a, GenericBounds> {\n+    fn parse_generic_bounds_common(&mut self, allow_plus: AllowPlus) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n-        let mut negative_bounds = Vec::new();\n \n         // In addition to looping while we find generic bounds:\n         // We continue even if we find a keyword. This is necessary for error recovery on,\n@@ -693,75 +687,35 @@ impl<'a> Parser<'a> {\n                 self.sess.emit_err(InvalidDynKeyword { span: self.token.span });\n                 self.bump();\n             }\n-            match self.parse_generic_bound()? {\n-                Ok(bound) => bounds.push(bound),\n-                Err(neg_sp) => negative_bounds.push(neg_sp),\n-            }\n+            bounds.push(self.parse_generic_bound()?);\n             if allow_plus == AllowPlus::No || !self.eat_plus() {\n                 break;\n             }\n         }\n \n-        if !negative_bounds.is_empty() {\n-            self.error_negative_bounds(colon_span, &bounds, negative_bounds);\n-        }\n-\n         Ok(bounds)\n     }\n \n     /// Can the current token begin a bound?\n     fn can_begin_bound(&mut self) -> bool {\n         // This needs to be synchronized with `TokenKind::can_begin_bound`.\n         self.check_path()\n-        || self.check_lifetime()\n-        || self.check(&token::Not) // Used for error reporting only.\n-        || self.check(&token::Question)\n-        || self.check(&token::Tilde)\n-        || self.check_keyword(kw::For)\n-        || self.check(&token::OpenDelim(Delimiter::Parenthesis))\n-    }\n-\n-    fn error_negative_bounds(\n-        &self,\n-        colon_span: Option<Span>,\n-        bounds: &[GenericBound],\n-        negative_bounds: Vec<Span>,\n-    ) {\n-        let sub = if let Some(bound_list) = colon_span {\n-            let bound_list = bound_list.to(self.prev_token.span);\n-            let mut new_bound_list = String::new();\n-            if !bounds.is_empty() {\n-                let mut snippets = bounds.iter().map(|bound| self.span_to_snippet(bound.span()));\n-                while let Some(Ok(snippet)) = snippets.next() {\n-                    new_bound_list.push_str(\" + \");\n-                    new_bound_list.push_str(&snippet);\n-                }\n-                new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n-            }\n-\n-            Some(NegativeBoundsNotSupportedSugg {\n-                bound_list,\n-                num_bounds: negative_bounds.len(),\n-                fixed: new_bound_list,\n-            })\n-        } else {\n-            None\n-        };\n-\n-        let last_span = *negative_bounds.last().expect(\"no negative bounds, but still error?\");\n-        self.sess.emit_err(NegativeBoundsNotSupported { negative_bounds, last_span, sub });\n+            || self.check_lifetime()\n+            || self.check(&token::Not)\n+            || self.check(&token::Question)\n+            || self.check(&token::Tilde)\n+            || self.check_keyword(kw::For)\n+            || self.check(&token::OpenDelim(Delimiter::Parenthesis))\n     }\n \n     /// Parses a bound according to the grammar:\n     /// ```ebnf\n     /// BOUND = TY_BOUND | LT_BOUND\n     /// ```\n-    fn parse_generic_bound(&mut self) -> PResult<'a, Result<GenericBound, Span>> {\n-        let anchor_lo = self.prev_token.span;\n+    fn parse_generic_bound(&mut self) -> PResult<'a, GenericBound> {\n         let lo = self.token.span;\n         let has_parens = self.eat(&token::OpenDelim(Delimiter::Parenthesis));\n         let inner_lo = self.token.span;\n-        let is_negative = self.eat(&token::Not);\n \n         let modifiers = self.parse_ty_bound_modifiers()?;\n         let bound = if self.token.is_lifetime() {\n@@ -771,7 +725,7 @@ impl<'a> Parser<'a> {\n             self.parse_generic_ty_bound(lo, has_parens, modifiers)?\n         };\n \n-        Ok(if is_negative { Err(anchor_lo.to(self.prev_token.span)) } else { Ok(bound) })\n+        Ok(bound)\n     }\n \n     /// Parses a lifetime (\"outlives\") bound, e.g. `'a`, according to:\n@@ -799,8 +753,14 @@ impl<'a> Parser<'a> {\n             self.sess.emit_err(errors::TildeConstLifetime { span });\n         }\n \n-        if let Some(span) = modifiers.maybe {\n-            self.sess.emit_err(errors::MaybeLifetime { span });\n+        match modifiers.bound_polarity {\n+            BoundPolarity::Positive => {}\n+            BoundPolarity::Negative(span) => {\n+                self.sess.emit_err(errors::ModifierLifetime { span, sigil: \"!\" });\n+            }\n+            BoundPolarity::Maybe(span) => {\n+                self.sess.emit_err(errors::ModifierLifetime { span, sigil: \"?\" });\n+            }\n         }\n     }\n \n@@ -843,9 +803,16 @@ impl<'a> Parser<'a> {\n             None\n         };\n \n-        let maybe = self.eat(&token::Question).then_some(self.prev_token.span);\n+        let bound_polarity = if self.eat(&token::Question) {\n+            BoundPolarity::Maybe(self.prev_token.span)\n+        } else if self.eat(&token::Not) {\n+            self.sess.gated_spans.gate(sym::negative_bounds, self.prev_token.span);\n+            BoundPolarity::Negative(self.prev_token.span)\n+        } else {\n+            BoundPolarity::Positive\n+        };\n \n-        Ok(BoundModifiers { maybe, maybe_const })\n+        Ok(BoundModifiers { bound_polarity, maybe_const })\n     }\n \n     /// Parses a type bound according to:"}, {"sha": "06aa2737915263c7d82b1fead7a43fceb2b39d97", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -101,12 +101,11 @@ impl CheckAttrVisitor<'_> {\n         item: Option<ItemLike<'_>>,\n     ) {\n         let mut doc_aliases = FxHashMap::default();\n-        let mut is_valid = true;\n         let mut specified_inline = None;\n         let mut seen = FxHashMap::default();\n         let attrs = self.tcx.hir().attrs(hir_id);\n         for attr in attrs {\n-            let attr_is_valid = match attr.name_or_empty() {\n+            match attr.name_or_empty() {\n                 sym::do_not_recommend => self.check_do_not_recommend(attr.span, target),\n                 sym::inline => self.check_inline(hir_id, attr, span, target),\n                 sym::no_coverage => self.check_no_coverage(hir_id, attr, span, target),\n@@ -188,7 +187,6 @@ impl CheckAttrVisitor<'_> {\n                 sym::link_ordinal => self.check_link_ordinal(&attr, span, target),\n                 _ => true,\n             };\n-            is_valid &= attr_is_valid;\n \n             // lint-only checks\n             match attr.name_or_empty() {\n@@ -255,10 +253,6 @@ impl CheckAttrVisitor<'_> {\n             self.check_unused_attribute(hir_id, attr)\n         }\n \n-        if !is_valid {\n-            return;\n-        }\n-\n         self.check_repr(attrs, span, target, item, hir_id);\n         self.check_used(attrs, target);\n     }"}, {"sha": "72371b9950bfb9337163dd0681171c9bacfa97a2", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -2,15 +2,14 @@\n \n use hir::CRATE_HIR_ID;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::sync::Lrc;\n use rustc_expand::base::resolve_path;\n use rustc_hir as hir;\n use rustc_hir::HirId;\n use rustc_middle::ty::TyCtxt;\n use rustc_middle::{query::LocalCrate, ty::query::Providers};\n use rustc_span::{sym, DebuggerVisualizerFile, DebuggerVisualizerType};\n \n-use std::sync::Arc;\n-\n use crate::errors::DebugVisualizerUnreadable;\n \n fn check_for_debugger_visualizer(\n@@ -52,7 +51,7 @@ fn check_for_debugger_visualizer(\n             match std::fs::read(&file) {\n                 Ok(contents) => {\n                     debugger_visualizers\n-                        .insert(DebuggerVisualizerFile::new(Arc::from(contents), visualizer_type));\n+                        .insert(DebuggerVisualizerFile::new(Lrc::from(contents), visualizer_type));\n                 }\n                 Err(error) => {\n                     tcx.sess.emit_err(DebugVisualizerUnreadable {"}, {"sha": "04ac585076f9c12c9134c287fb94152bca567383", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -127,18 +127,19 @@ where\n \n     fn visit_projection_ty(&mut self, projection: ty::AliasTy<'tcx>) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n-        let (trait_ref, assoc_substs) =\n-            if tcx.def_kind(projection.def_id) != DefKind::ImplTraitPlaceholder {\n-                projection.trait_ref_and_own_substs(tcx)\n-            } else {\n-                // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n-                let def_id = tcx.impl_trait_in_trait_parent_fn(projection.def_id);\n-                let trait_generics = tcx.generics_of(def_id);\n-                (\n-                    tcx.mk_trait_ref(def_id, projection.substs.truncate_to(tcx, trait_generics)),\n-                    &projection.substs[trait_generics.count()..],\n-                )\n-            };\n+        let (trait_ref, assoc_substs) = if tcx.def_kind(projection.def_id)\n+            != DefKind::ImplTraitPlaceholder\n+        {\n+            projection.trait_ref_and_own_substs(tcx)\n+        } else {\n+            // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n+            let def_id = tcx.impl_trait_in_trait_parent_fn(projection.def_id);\n+            let trait_generics = tcx.generics_of(def_id);\n+            (\n+                ty::TraitRef::new(tcx, def_id, projection.substs.truncate_to(tcx, trait_generics)),\n+                &projection.substs[trait_generics.count()..],\n+            )\n+        };\n         self.visit_trait(trait_ref)?;\n         if self.def_id_visitor.shallow() {\n             ControlFlow::Continue(())\n@@ -515,9 +516,11 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             let vis = self.tcx.local_visibility(item_id.owner_id.def_id);\n             self.update_macro_reachable_def(item_id.owner_id.def_id, def_kind, vis, defining_mod);\n         }\n-        for export in self.tcx.module_children_reexports(module_def_id) {\n-            if export.vis.is_accessible_from(defining_mod, self.tcx)\n-                && let Res::Def(def_kind, def_id) = export.res\n+        for child in self.tcx.module_children_local(module_def_id) {\n+            // FIXME: Use module children for the logic above too.\n+            if !child.reexport_chain.is_empty()\n+                && child.vis.is_accessible_from(defining_mod, self.tcx)\n+                && let Res::Def(def_kind, def_id) = child.res\n                 && let Some(def_id) = def_id.as_local() {\n                 let vis = self.tcx.local_visibility(def_id);\n                 self.update_macro_reachable_def(def_id, def_kind, vis, defining_mod);"}, {"sha": "fae7d5495925a3b629a4a756a232e13bc39cca22", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 let sm = self.tcx.sess.source_map();\n                 let def_id = match outer_res {\n-                    Res::SelfTyParam { .. } => {\n+                    Res::SelfTyParam { .. } | Res::SelfCtor(_) => {\n                         err.span_label(span, \"can't use `Self` here\");\n                         return err;\n                     }"}, {"sha": "2db1d83d4fd5815dfb2983dbbc35e053e7bead1e", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -24,7 +24,6 @@ use crate::{ResolutionError, Resolver, Scope, ScopeSet, Segment, ToNameBinding,\n \n use Determinacy::*;\n use Namespace::*;\n-use RibKind::*;\n \n type Visibility = ty::Visibility<LocalDefId>;\n \n@@ -324,8 +323,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             module = match ribs[i].kind {\n-                ModuleRibKind(module) => module,\n-                MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {\n+                RibKind::Module(module) => module,\n+                RibKind::MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {\n                     // If an invocation of this macro created `ident`, give up on `ident`\n                     // and switch to `ident`'s source from the macro definition.\n                     ident.span.remove_mark();\n@@ -1084,7 +1083,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let ribs = &all_ribs[rib_index + 1..];\n \n         // An invalid forward use of a generic parameter from a previous default.\n-        if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {\n+        if let RibKind::ForwardGenericParamBan = all_ribs[rib_index].kind {\n             if let Some(span) = finalize {\n                 let res_error = if rib_ident.name == kw::SelfUpper {\n                     ResolutionError::SelfInGenericParamDefault\n@@ -1104,14 +1103,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 for rib in ribs {\n                     match rib.kind {\n-                        NormalRibKind\n-                        | ClosureOrAsyncRibKind\n-                        | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | ForwardGenericParamBanRibKind => {\n+                        RibKind::Normal\n+                        | RibKind::ClosureOrAsync\n+                        | RibKind::Module(..)\n+                        | RibKind::MacroDefinition(..)\n+                        | RibKind::ForwardGenericParamBan => {\n                             // Nothing to do. Continue.\n                         }\n-                        ItemRibKind(_) | AssocItemRibKind => {\n+                        RibKind::Item(_) | RibKind::AssocItem => {\n                             // This was an attempt to access an upvar inside a\n                             // named function item. This is not allowed, so we\n                             // report an error.\n@@ -1123,7 +1122,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 res_err = Some((span, CannotCaptureDynamicEnvironmentInFnItem));\n                             }\n                         }\n-                        ConstantItemRibKind(_, item) => {\n+                        RibKind::ConstantItem(_, item) => {\n                             // Still doesn't deal with upvars\n                             if let Some(span) = finalize {\n                                 let (span, resolution_error) =\n@@ -1152,13 +1151,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             }\n                             return Res::Err;\n                         }\n-                        ConstParamTyRibKind => {\n+                        RibKind::ConstParamTy => {\n                             if let Some(span) = finalize {\n                                 self.report_error(span, ParamInTyOfConstParam(rib_ident.name));\n                             }\n                             return Res::Err;\n                         }\n-                        InlineAsmSymRibKind => {\n+                        RibKind::InlineAsmSym => {\n                             if let Some(span) = finalize {\n                                 self.report_error(span, InvalidAsmSym);\n                             }\n@@ -1171,21 +1170,24 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     return Res::Err;\n                 }\n             }\n-            Res::Def(DefKind::TyParam, _) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => {\n+            Res::Def(DefKind::TyParam, _)\n+            | Res::SelfTyParam { .. }\n+            | Res::SelfTyAlias { .. }\n+            | Res::SelfCtor(_) => {\n                 for rib in ribs {\n                     let has_generic_params: HasGenericParams = match rib.kind {\n-                        NormalRibKind\n-                        | ClosureOrAsyncRibKind\n-                        | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | InlineAsmSymRibKind\n-                        | AssocItemRibKind\n-                        | ForwardGenericParamBanRibKind => {\n+                        RibKind::Normal\n+                        | RibKind::ClosureOrAsync\n+                        | RibKind::Module(..)\n+                        | RibKind::MacroDefinition(..)\n+                        | RibKind::InlineAsmSym\n+                        | RibKind::AssocItem\n+                        | RibKind::ForwardGenericParamBan => {\n                             // Nothing to do. Continue.\n                             continue;\n                         }\n \n-                        ConstantItemRibKind(trivial, _) => {\n+                        RibKind::ConstantItem(trivial, _) => {\n                             let features = self.tcx.sess.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial == ConstantHasGenerics::Yes\n@@ -1226,8 +1228,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         }\n \n                         // This was an attempt to use a type parameter outside its scope.\n-                        ItemRibKind(has_generic_params) => has_generic_params,\n-                        ConstParamTyRibKind => {\n+                        RibKind::Item(has_generic_params) => has_generic_params,\n+                        RibKind::ConstParamTy => {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n                                     span,\n@@ -1253,15 +1255,15 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Res::Def(DefKind::ConstParam, _) => {\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n-                        NormalRibKind\n-                        | ClosureOrAsyncRibKind\n-                        | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | InlineAsmSymRibKind\n-                        | AssocItemRibKind\n-                        | ForwardGenericParamBanRibKind => continue,\n-\n-                        ConstantItemRibKind(trivial, _) => {\n+                        RibKind::Normal\n+                        | RibKind::ClosureOrAsync\n+                        | RibKind::Module(..)\n+                        | RibKind::MacroDefinition(..)\n+                        | RibKind::InlineAsmSym\n+                        | RibKind::AssocItem\n+                        | RibKind::ForwardGenericParamBan => continue,\n+\n+                        RibKind::ConstantItem(trivial, _) => {\n                             let features = self.tcx.sess.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial == ConstantHasGenerics::Yes\n@@ -1284,8 +1286,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             continue;\n                         }\n \n-                        ItemRibKind(has_generic_params) => has_generic_params,\n-                        ConstParamTyRibKind => {\n+                        RibKind::Item(has_generic_params) => has_generic_params,\n+                        RibKind::ConstParamTy => {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n                                     span,"}, {"sha": "9e4429507b1c8abdfe9d4cd43ec66a6a1090c309", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1261,32 +1261,25 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         *module.globs.borrow_mut() = Vec::new();\n \n         if let Some(def_id) = module.opt_def_id() {\n-            let mut non_reexports = Vec::new();\n-            let mut reexports = Vec::new();\n+            let mut children = Vec::new();\n \n             module.for_each_child(self, |this, ident, _, binding| {\n                 let res = binding.res().expect_non_local();\n-                if !binding.is_import() {\n-                    non_reexports.push(res.def_id().expect_local());\n-                } else if res != def::Res::Err && !binding.is_ambiguity() {\n+                if res != def::Res::Err && !binding.is_ambiguity() {\n                     let mut reexport_chain = SmallVec::new();\n                     let mut next_binding = binding;\n                     while let NameBindingKind::Import { binding, import, .. } = next_binding.kind {\n                         reexport_chain.push(import.simplify(this));\n                         next_binding = binding;\n                     }\n \n-                    reexports.push(ModChild { ident, res, vis: binding.vis, reexport_chain });\n+                    children.push(ModChild { ident, res, vis: binding.vis, reexport_chain });\n                 }\n             });\n \n-            // Should be fine because this code is only called for local modules.\n-            let def_id = def_id.expect_local();\n-            if !non_reexports.is_empty() {\n-                self.module_children_non_reexports.insert(def_id, non_reexports);\n-            }\n-            if !reexports.is_empty() {\n-                self.module_children_reexports.insert(def_id, reexports);\n+            if !children.is_empty() {\n+                // Should be fine because this code is only called for local modules.\n+                self.module_children.insert(def_id.expect_local(), children);\n             }\n         }\n     }"}, {"sha": "6f5d54bcf87e418a90e66764dce883bbf4e67c2a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 82, "deletions": 80, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -6,8 +6,6 @@\n //! If you wonder why there's no `early.rs`, that's because it's split into three files -\n //! `build_reduced_graph.rs`, `macros.rs` and `imports.rs`.\n \n-use RibKind::*;\n-\n use crate::{path_names_to_string, rustdoc, BindingError, Finalize, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBinding, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n@@ -133,75 +131,75 @@ enum RecordPartialRes {\n #[derive(Copy, Clone, Debug)]\n pub(crate) enum RibKind<'a> {\n     /// No restriction needs to be applied.\n-    NormalRibKind,\n+    Normal,\n \n     /// We passed through an impl or trait and are now in one of its\n     /// methods or associated types. Allow references to ty params that impl or trait\n     /// binds. Disallow any other upvars (including other ty params that are\n     /// upvars).\n-    AssocItemRibKind,\n+    AssocItem,\n \n     /// We passed through a closure. Disallow labels.\n-    ClosureOrAsyncRibKind,\n+    ClosureOrAsync,\n \n     /// We passed through an item scope. Disallow upvars.\n-    ItemRibKind(HasGenericParams),\n+    Item(HasGenericParams),\n \n     /// We're in a constant item. Can't refer to dynamic stuff.\n     ///\n     /// The item may reference generic parameters in trivial constant expressions.\n     /// All other constants aren't allowed to use generic params at all.\n-    ConstantItemRibKind(ConstantHasGenerics, Option<(Ident, ConstantItemKind)>),\n+    ConstantItem(ConstantHasGenerics, Option<(Ident, ConstantItemKind)>),\n \n     /// We passed through a module.\n-    ModuleRibKind(Module<'a>),\n+    Module(Module<'a>),\n \n     /// We passed through a `macro_rules!` statement\n     MacroDefinition(DefId),\n \n     /// All bindings in this rib are generic parameters that can't be used\n     /// from the default of a generic parameter because they're not declared\n     /// before said generic parameter. Also see the `visit_generics` override.\n-    ForwardGenericParamBanRibKind,\n+    ForwardGenericParamBan,\n \n     /// We are inside of the type of a const parameter. Can't refer to any\n     /// parameters.\n-    ConstParamTyRibKind,\n+    ConstParamTy,\n \n     /// We are inside a `sym` inline assembly operand. Can only refer to\n     /// globals.\n-    InlineAsmSymRibKind,\n+    InlineAsmSym,\n }\n \n impl RibKind<'_> {\n     /// Whether this rib kind contains generic parameters, as opposed to local\n     /// variables.\n     pub(crate) fn contains_params(&self) -> bool {\n         match self {\n-            NormalRibKind\n-            | ClosureOrAsyncRibKind\n-            | ConstantItemRibKind(..)\n-            | ModuleRibKind(_)\n-            | MacroDefinition(_)\n-            | ConstParamTyRibKind\n-            | InlineAsmSymRibKind => false,\n-            AssocItemRibKind | ItemRibKind(_) | ForwardGenericParamBanRibKind => true,\n+            RibKind::Normal\n+            | RibKind::ClosureOrAsync\n+            | RibKind::ConstantItem(..)\n+            | RibKind::Module(_)\n+            | RibKind::MacroDefinition(_)\n+            | RibKind::ConstParamTy\n+            | RibKind::InlineAsmSym => false,\n+            RibKind::AssocItem | RibKind::Item(_) | RibKind::ForwardGenericParamBan => true,\n         }\n     }\n \n     /// This rib forbids referring to labels defined in upwards ribs.\n     fn is_label_barrier(self) -> bool {\n         match self {\n-            NormalRibKind | MacroDefinition(..) => false,\n-\n-            AssocItemRibKind\n-            | ClosureOrAsyncRibKind\n-            | ItemRibKind(..)\n-            | ConstantItemRibKind(..)\n-            | ModuleRibKind(..)\n-            | ForwardGenericParamBanRibKind\n-            | ConstParamTyRibKind\n-            | InlineAsmSymRibKind => true,\n+            RibKind::Normal | RibKind::MacroDefinition(..) => false,\n+\n+            RibKind::AssocItem\n+            | RibKind::ClosureOrAsync\n+            | RibKind::Item(..)\n+            | RibKind::ConstantItem(..)\n+            | RibKind::Module(..)\n+            | RibKind::ForwardGenericParamBan\n+            | RibKind::ConstParamTy\n+            | RibKind::InlineAsmSym => true,\n         }\n     }\n }\n@@ -702,7 +700,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                     let span = ty.span.shrink_to_lo().to(path.span.shrink_to_lo());\n                     self.with_generic_param_rib(\n                         &[],\n-                        NormalRibKind,\n+                        RibKind::Normal,\n                         LifetimeRibKind::Generics {\n                             binder: ty.id,\n                             kind: LifetimeBinderKind::PolyTrait,\n@@ -740,7 +738,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 let span = ty.span.shrink_to_lo().to(bare_fn.decl_span.shrink_to_lo());\n                 self.with_generic_param_rib(\n                     &bare_fn.generic_params,\n-                    NormalRibKind,\n+                    RibKind::Normal,\n                     LifetimeRibKind::Generics {\n                         binder: ty.id,\n                         kind: LifetimeBinderKind::BareFnType,\n@@ -780,7 +778,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n         let span = tref.span.shrink_to_lo().to(tref.trait_ref.path.span.shrink_to_lo());\n         self.with_generic_param_rib(\n             &tref.bound_generic_params,\n-            NormalRibKind,\n+            RibKind::Normal,\n             LifetimeRibKind::Generics {\n                 binder: tref.trait_ref.ref_id,\n                 kind: LifetimeBinderKind::PolyTrait,\n@@ -804,7 +802,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n             ForeignItemKind::TyAlias(box TyAlias { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: foreign_item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -816,7 +814,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n             ForeignItemKind::Fn(box Fn { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: foreign_item.id,\n                         kind: LifetimeBinderKind::Function,\n@@ -870,9 +868,9 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n         debug!(\"(resolving function) entering function\");\n \n         // Create a value rib for the function.\n-        self.with_rib(ValueNS, ClosureOrAsyncRibKind, |this| {\n+        self.with_rib(ValueNS, RibKind::ClosureOrAsync, |this| {\n             // Create a label rib for the function.\n-            this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n+            this.with_label_rib(RibKind::ClosureOrAsync, |this| {\n                 match fn_kind {\n                     FnKind::Fn(_, _, sig, _, generics, body) => {\n                         this.visit_generics(generics);\n@@ -1129,7 +1127,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 let span = predicate_span.shrink_to_lo().to(bounded_ty.span.shrink_to_lo());\n                 this.with_generic_param_rib(\n                     &bound_generic_params,\n-                    NormalRibKind,\n+                    RibKind::Normal,\n                     LifetimeRibKind::Generics {\n                         binder: bounded_ty.id,\n                         kind: LifetimeBinderKind::WhereBound,\n@@ -1175,9 +1173,9 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n \n     fn visit_inline_asm_sym(&mut self, sym: &'ast InlineAsmSym) {\n         // This is similar to the code for AnonConst.\n-        self.with_rib(ValueNS, InlineAsmSymRibKind, |this| {\n-            this.with_rib(TypeNS, InlineAsmSymRibKind, |this| {\n-                this.with_label_rib(InlineAsmSymRibKind, |this| {\n+        self.with_rib(ValueNS, RibKind::InlineAsmSym, |this| {\n+            this.with_rib(TypeNS, RibKind::InlineAsmSym, |this| {\n+                this.with_label_rib(RibKind::InlineAsmSym, |this| {\n                     this.smart_resolve_path(sym.id, &sym.qself, &sym.path, PathSource::Expr(None));\n                     visit::walk_inline_asm_sym(this, sym);\n                 });\n@@ -1202,7 +1200,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // although it may be useful to track other components as well for diagnostics.\n         let graph_root = resolver.graph_root;\n         let parent_scope = ParentScope::module(graph_root, resolver);\n-        let start_rib_kind = ModuleRibKind(graph_root);\n+        let start_rib_kind = RibKind::Module(graph_root);\n         LateResolutionVisitor {\n             r: resolver,\n             parent_scope,\n@@ -1306,8 +1304,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         if let Some(module) = self.r.get_module(self.r.local_def_id(id).to_def_id()) {\n             // Move down in the graph.\n             let orig_module = replace(&mut self.parent_scope.module, module);\n-            self.with_rib(ValueNS, ModuleRibKind(module), |this| {\n-                this.with_rib(TypeNS, ModuleRibKind(module), |this| {\n+            self.with_rib(ValueNS, RibKind::Module(module), |this| {\n+                this.with_rib(TypeNS, RibKind::Module(module), |this| {\n                     let ret = f(this);\n                     this.parent_scope.module = orig_module;\n                     ret\n@@ -1324,8 +1322,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // provide previous type parameters as they're built. We\n         // put all the parameters on the ban list and then remove\n         // them one by one as they are processed and become available.\n-        let mut forward_ty_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n-        let mut forward_const_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n+        let mut forward_ty_ban_rib = Rib::new(RibKind::ForwardGenericParamBan);\n+        let mut forward_const_ban_rib = Rib::new(RibKind::ForwardGenericParamBan);\n         for param in params.iter() {\n             match param.kind {\n                 GenericParamKind::Type { .. } => {\n@@ -1386,8 +1384,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                         // Const parameters can't have param bounds.\n                         assert!(param.bounds.is_empty());\n \n-                        this.ribs[TypeNS].push(Rib::new(ConstParamTyRibKind));\n-                        this.ribs[ValueNS].push(Rib::new(ConstParamTyRibKind));\n+                        this.ribs[TypeNS].push(Rib::new(RibKind::ConstParamTy));\n+                        this.ribs[ValueNS].push(Rib::new(RibKind::ConstParamTy));\n                         this.with_lifetime_rib(LifetimeRibKind::ConstGeneric, |this| {\n                             this.visit_ty(ty)\n                         });\n@@ -2072,6 +2070,10 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 }\n                 visit::walk_ty(self, ty)\n             }\n+\n+            // A type may have an expression as a const generic argument.\n+            // We do not want to recurse into those.\n+            fn visit_expr(&mut self, _: &'a Expr) {}\n         }\n \n         let impl_self = self\n@@ -2109,7 +2111,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         for i in (0..self.label_ribs.len()).rev() {\n             let rib = &self.label_ribs[i];\n \n-            if let MacroDefinition(def) = rib.kind {\n+            if let RibKind::MacroDefinition(def) = rib.kind {\n                 // If an invocation of this macro created `ident`, give up on `ident`\n                 // and switch to `ident`'s source from the macro definition.\n                 if def == self.r.macro_def(label.span.ctxt()) {\n@@ -2157,7 +2159,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         self.with_current_self_item(item, |this| {\n             this.with_generic_param_rib(\n                 &generics.params,\n-                ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                RibKind::Item(HasGenericParams::Yes(generics.span)),\n                 LifetimeRibKind::Generics {\n                     binder: item.id,\n                     kind: LifetimeBinderKind::Item,\n@@ -2238,7 +2240,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             ItemKind::TyAlias(box TyAlias { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2251,7 +2253,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             ItemKind::Fn(box Fn { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Function,\n@@ -2290,7 +2292,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2311,7 +2313,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::Item(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2414,11 +2416,11 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         let mut seen_lifetimes = FxHashSet::default();\n \n         // We also can't shadow bindings from the parent item\n-        if let AssocItemRibKind = kind {\n+        if let RibKind::AssocItem = kind {\n             let mut add_bindings_for_ns = |ns| {\n                 let parent_rib = self.ribs[ns]\n                     .iter()\n-                    .rfind(|r| matches!(r.kind, ItemRibKind(_)))\n+                    .rfind(|r| matches!(r.kind, RibKind::Item(_)))\n                     .expect(\"associated item outside of an item\");\n                 seen_bindings.extend(parent_rib.bindings.keys().map(|ident| (*ident, ident.span)));\n             };\n@@ -2507,8 +2509,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             };\n \n             let res = match kind {\n-                ItemRibKind(..) | AssocItemRibKind => Res::Def(def_kind, def_id.to_def_id()),\n-                NormalRibKind => {\n+                RibKind::Item(..) | RibKind::AssocItem => Res::Def(def_kind, def_id.to_def_id()),\n+                RibKind::Normal => {\n                     if self.r.tcx.sess.features_untracked().non_lifetime_binders {\n                         Res::Def(def_kind, def_id.to_def_id())\n                     } else {\n@@ -2554,7 +2556,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn with_static_rib(&mut self, f: impl FnOnce(&mut Self)) {\n-        let kind = ItemRibKind(HasGenericParams::No);\n+        let kind = RibKind::Item(HasGenericParams::No);\n         self.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n     }\n \n@@ -2574,15 +2576,15 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         item: Option<(Ident, ConstantItemKind)>,\n         f: impl FnOnce(&mut Self),\n     ) {\n-        self.with_rib(ValueNS, ConstantItemRibKind(may_use_generics, item), |this| {\n+        self.with_rib(ValueNS, RibKind::ConstantItem(may_use_generics, item), |this| {\n             this.with_rib(\n                 TypeNS,\n-                ConstantItemRibKind(\n+                RibKind::ConstantItem(\n                     may_use_generics.force_yes_if(is_repeat == IsRepeatExpr::Yes),\n                     item,\n                 ),\n                 |this| {\n-                    this.with_label_rib(ConstantItemRibKind(may_use_generics, item), f);\n+                    this.with_label_rib(RibKind::ConstantItem(may_use_generics, item), f);\n                 },\n             )\n         });\n@@ -2614,7 +2616,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             |this: &mut Self, generics: &Generics, kind, item: &'ast AssocItem| {\n                 this.with_generic_param_rib(\n                     &generics.params,\n-                    AssocItemRibKind,\n+                    RibKind::AssocItem,\n                     LifetimeRibKind::Generics { binder: item.id, span: generics.span, kind },\n                     |this| visit::walk_assoc_item(this, item, AssocCtxt::Trait),\n                 );\n@@ -2695,7 +2697,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn with_self_rib_ns(&mut self, ns: Namespace, self_res: Res, f: impl FnOnce(&mut Self)) {\n-        let mut self_type_rib = Rib::new(NormalRibKind);\n+        let mut self_type_rib = Rib::new(RibKind::Normal);\n \n         // Plain insert (no renaming, since types are not currently hygienic)\n         self_type_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), self_res);\n@@ -2721,7 +2723,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // If applicable, create a rib for the type parameters.\n         self.with_generic_param_rib(\n             &generics.params,\n-            ItemRibKind(HasGenericParams::Yes(generics.span)),\n+            RibKind::Item(HasGenericParams::Yes(generics.span)),\n             LifetimeRibKind::Generics {\n                 span: generics.span,\n                 binder: item_id,\n@@ -2835,7 +2837,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // We also need a new scope for the impl item type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    AssocItemRibKind,\n+                    RibKind::AssocItem,\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         span: generics.span,\n@@ -2863,7 +2865,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // We also need a new scope for the impl item type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    AssocItemRibKind,\n+                    RibKind::AssocItem,\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         span: generics.span,\n@@ -3135,7 +3137,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn resolve_arm(&mut self, arm: &'ast Arm) {\n-        self.with_rib(ValueNS, NormalRibKind, |this| {\n+        self.with_rib(ValueNS, RibKind::Normal, |this| {\n             this.resolve_pattern_top(&arm.pat, PatternSource::Match);\n             walk_list!(this, visit_expr, &arm.guard);\n             this.visit_expr(&arm.body);\n@@ -3857,7 +3859,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 diagnostics::signal_label_shadowing(self.r.tcx.sess, orig_span, label.ident)\n             }\n \n-            self.with_label_rib(NormalRibKind, |this| {\n+            self.with_label_rib(RibKind::Normal, |this| {\n                 let ident = label.ident.normalize_to_macro_rules();\n                 this.label_ribs.last_mut().unwrap().bindings.insert(ident, id);\n                 f(this);\n@@ -3880,11 +3882,11 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         let mut num_macro_definition_ribs = 0;\n         if let Some(anonymous_module) = anonymous_module {\n             debug!(\"(resolving block) found anonymous module, moving down\");\n-            self.ribs[ValueNS].push(Rib::new(ModuleRibKind(anonymous_module)));\n-            self.ribs[TypeNS].push(Rib::new(ModuleRibKind(anonymous_module)));\n+            self.ribs[ValueNS].push(Rib::new(RibKind::Module(anonymous_module)));\n+            self.ribs[TypeNS].push(Rib::new(RibKind::Module(anonymous_module)));\n             self.parent_scope.module = anonymous_module;\n         } else {\n-            self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n+            self.ribs[ValueNS].push(Rib::new(RibKind::Normal));\n         }\n \n         let prev = self.diagnostic_metadata.current_block_could_be_bare_struct_literal.take();\n@@ -3901,8 +3903,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 && let ItemKind::MacroDef(..) = item.kind {\n                 num_macro_definition_ribs += 1;\n                 let res = self.r.local_def_id(item.id).to_def_id();\n-                self.ribs[ValueNS].push(Rib::new(MacroDefinition(res)));\n-                self.label_ribs.push(Rib::new(MacroDefinition(res)));\n+                self.ribs[ValueNS].push(Rib::new(RibKind::MacroDefinition(res)));\n+                self.label_ribs.push(Rib::new(RibKind::MacroDefinition(res)));\n             }\n \n             self.visit_stmt(stmt);\n@@ -3989,7 +3991,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }\n \n             ExprKind::If(ref cond, ref then, ref opt_else) => {\n-                self.with_rib(ValueNS, NormalRibKind, |this| {\n+                self.with_rib(ValueNS, RibKind::Normal, |this| {\n                     let old = this.diagnostic_metadata.in_if_condition.replace(cond);\n                     this.visit_expr(cond);\n                     this.diagnostic_metadata.in_if_condition = old;\n@@ -4006,7 +4008,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n \n             ExprKind::While(ref cond, ref block, label) => {\n                 self.with_resolved_label(label, expr.id, |this| {\n-                    this.with_rib(ValueNS, NormalRibKind, |this| {\n+                    this.with_rib(ValueNS, RibKind::Normal, |this| {\n                         let old = this.diagnostic_metadata.in_if_condition.replace(cond);\n                         this.visit_expr(cond);\n                         this.diagnostic_metadata.in_if_condition = old;\n@@ -4017,7 +4019,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n \n             ExprKind::ForLoop(ref pat, ref iter_expr, ref block, label) => {\n                 self.visit_expr(iter_expr);\n-                self.with_rib(ValueNS, NormalRibKind, |this| {\n+                self.with_rib(ValueNS, RibKind::Normal, |this| {\n                     this.resolve_pattern_top(pat, PatternSource::For);\n                     this.resolve_labeled_block(label, expr.id, block);\n                 });\n@@ -4073,8 +4075,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 ref body,\n                 ..\n             }) => {\n-                self.with_rib(ValueNS, NormalRibKind, |this| {\n-                    this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n+                self.with_rib(ValueNS, RibKind::Normal, |this| {\n+                    this.with_label_rib(RibKind::ClosureOrAsync, |this| {\n                         // Resolve arguments:\n                         this.resolve_params(&fn_decl.inputs);\n                         // No need to resolve return type --\n@@ -4098,7 +4100,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }) => {\n                 self.with_generic_param_rib(\n                     &generic_params,\n-                    NormalRibKind,\n+                    RibKind::Normal,\n                     LifetimeRibKind::Generics {\n                         binder: expr.id,\n                         kind: LifetimeBinderKind::Closure,\n@@ -4109,7 +4111,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }\n             ExprKind::Closure(..) => visit::walk_expr(self, expr),\n             ExprKind::Async(..) => {\n-                self.with_label_rib(ClosureOrAsyncRibKind, |this| visit::walk_expr(this, expr));\n+                self.with_label_rib(RibKind::ClosureOrAsync, |this| visit::walk_expr(this, expr));\n             }\n             ExprKind::Repeat(ref elem, ref ct) => {\n                 self.visit_expr(elem);"}, {"sha": "42d498c7ee0b6e912e4003c3d485097c127e1790", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -605,7 +605,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         }\n \n         // Try to find in last block rib\n-        if let Some(rib) = &self.last_block_rib && let RibKind::NormalRibKind = rib.kind {\n+        if let Some(rib) = &self.last_block_rib && let RibKind::Normal = rib.kind {\n             for (ident, &res) in &rib.bindings {\n                 if let Res::Local(_) = res && path.len() == 1 &&\n                     ident.span.eq_ctxt(path[0].ident.span) &&\n@@ -1690,7 +1690,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 }\n \n                 // Items in scope\n-                if let RibKind::ModuleRibKind(module) = rib.kind {\n+                if let RibKind::Module(module) = rib.kind {\n                     // Items from this module\n                     self.r.add_module_candidates(module, &mut names, &filter_fn, Some(ctxt));\n "}, {"sha": "e46463579fe4500e83969b53b59bf0e98688e92c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -909,8 +909,7 @@ pub struct Resolver<'a, 'tcx> {\n \n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    module_children_non_reexports: LocalDefIdMap<Vec<LocalDefId>>,\n-    module_children_reexports: LocalDefIdMap<Vec<ModChild>>,\n+    module_children: LocalDefIdMap<Vec<ModChild>>,\n     trait_map: NodeMap<Vec<TraitCandidate>>,\n \n     /// A map from nodes to anonymous modules.\n@@ -1260,8 +1259,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             lifetimes_res_map: Default::default(),\n             extra_lifetime_params_map: Default::default(),\n             extern_crate_map: Default::default(),\n-            module_children_non_reexports: Default::default(),\n-            module_children_reexports: Default::default(),\n+            module_children: Default::default(),\n             trait_map: NodeMap::default(),\n             underscore_disambiguator: 0,\n             empty_module,\n@@ -1399,8 +1397,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             has_pub_restricted,\n             effective_visibilities,\n             extern_crate_map,\n-            module_children_non_reexports: self.module_children_non_reexports,\n-            module_children_reexports: self.module_children_reexports,\n+            module_children: self.module_children,\n             glob_map,\n             maybe_unused_trait_imports,\n             main_def,"}, {"sha": "6046780685ad8eaeb40e1aa13d5352468f1934fc", "filename": "compiler/rustc_serialize/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_serialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_serialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2FCargo.toml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -10,3 +10,4 @@ thin-vec = \"0.2.12\"\n \n [dev-dependencies]\n rustc_macros = { path = \"../rustc_macros\" }\n+tempfile = \"3.2\""}, {"sha": "6b559cb5b2f643ceb4c9fa901d83198e9578a1c1", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 55, "deletions": 227, "changes": 282, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -12,118 +12,14 @@ use std::ptr;\n // Encoder\n // -----------------------------------------------------------------------------\n \n-pub struct MemEncoder {\n-    pub data: Vec<u8>,\n-}\n-\n-impl MemEncoder {\n-    pub fn new() -> MemEncoder {\n-        MemEncoder { data: vec![] }\n-    }\n-\n-    #[inline]\n-    pub fn position(&self) -> usize {\n-        self.data.len()\n-    }\n-\n-    pub fn finish(self) -> Vec<u8> {\n-        self.data\n-    }\n-}\n-\n-macro_rules! write_leb128 {\n-    ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{\n-        const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n-        let old_len = $enc.data.len();\n-\n-        if MAX_ENCODED_LEN > $enc.data.capacity() - old_len {\n-            $enc.data.reserve(MAX_ENCODED_LEN);\n-        }\n-\n-        // SAFETY: The above check and `reserve` ensures that there is enough\n-        // room to write the encoded value to the vector's internal buffer.\n-        unsafe {\n-            let buf = &mut *($enc.data.as_mut_ptr().add(old_len)\n-                as *mut [MaybeUninit<u8>; MAX_ENCODED_LEN]);\n-            let encoded = leb128::$fun(buf, $value);\n-            $enc.data.set_len(old_len + encoded.len());\n-        }\n-    }};\n-}\n-\n-impl Encoder for MemEncoder {\n-    #[inline]\n-    fn emit_usize(&mut self, v: usize) {\n-        write_leb128!(self, v, usize, write_usize_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_u128(&mut self, v: u128) {\n-        write_leb128!(self, v, u128, write_u128_leb128);\n-    }\n-\n-    #[inline]\n-    fn emit_u64(&mut self, v: u64) {\n-        write_leb128!(self, v, u64, write_u64_leb128);\n-    }\n-\n-    #[inline]\n-    fn emit_u32(&mut self, v: u32) {\n-        write_leb128!(self, v, u32, write_u32_leb128);\n-    }\n-\n-    #[inline]\n-    fn emit_u16(&mut self, v: u16) {\n-        self.data.extend_from_slice(&v.to_le_bytes());\n-    }\n-\n-    #[inline]\n-    fn emit_u8(&mut self, v: u8) {\n-        self.data.push(v);\n-    }\n-\n-    #[inline]\n-    fn emit_isize(&mut self, v: isize) {\n-        write_leb128!(self, v, isize, write_isize_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i128(&mut self, v: i128) {\n-        write_leb128!(self, v, i128, write_i128_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i64(&mut self, v: i64) {\n-        write_leb128!(self, v, i64, write_i64_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i32(&mut self, v: i32) {\n-        write_leb128!(self, v, i32, write_i32_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i16(&mut self, v: i16) {\n-        self.data.extend_from_slice(&v.to_le_bytes());\n-    }\n-\n-    #[inline]\n-    fn emit_raw_bytes(&mut self, s: &[u8]) {\n-        self.data.extend_from_slice(s);\n-    }\n-}\n-\n pub type FileEncodeResult = Result<usize, io::Error>;\n \n /// `FileEncoder` encodes data to file via fixed-size buffer.\n ///\n-/// When encoding large amounts of data to a file, using `FileEncoder` may be\n-/// preferred over using `MemEncoder` to encode to a `Vec`, and then writing the\n-/// `Vec` to file, as the latter uses as much memory as there is encoded data,\n-/// while the former uses the fixed amount of memory allocated to the buffer.\n-/// `FileEncoder` also has the advantage of not needing to reallocate as data\n-/// is appended to it, but the disadvantage of requiring more error handling,\n-/// which has some runtime overhead.\n+/// There used to be a `MemEncoder` type that encoded all the data into a\n+/// `Vec`. `FileEncoder` is better because its memory use is determined by the\n+/// size of the buffer, rather than the full length of the encoded data, and\n+/// because it doesn't need to reallocate memory along the way.\n pub struct FileEncoder {\n     /// The input buffer. For adequate performance, we need more control over\n     /// buffering than `BufWriter` offers. If `BufWriter` ever offers a raw\n@@ -369,52 +265,41 @@ impl Drop for FileEncoder {\n     }\n }\n \n-macro_rules! file_encoder_write_leb128 {\n-    ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{\n-        const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n+macro_rules! write_leb128 {\n+    ($this_fn:ident, $int_ty:ty, $write_leb_fn:ident) => {\n+        #[inline]\n+        fn $this_fn(&mut self, v: $int_ty) {\n+            const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n \n-        // We ensure this during `FileEncoder` construction.\n-        debug_assert!($enc.capacity() >= MAX_ENCODED_LEN);\n+            // We ensure this during `FileEncoder` construction.\n+            debug_assert!(self.capacity() >= MAX_ENCODED_LEN);\n \n-        let mut buffered = $enc.buffered;\n+            let mut buffered = self.buffered;\n \n-        // This can't overflow. See assertion in `FileEncoder::with_capacity`.\n-        if std::intrinsics::unlikely(buffered + MAX_ENCODED_LEN > $enc.capacity()) {\n-            $enc.flush();\n-            buffered = 0;\n-        }\n+            // This can't overflow. See assertion in `FileEncoder::with_capacity`.\n+            if std::intrinsics::unlikely(buffered + MAX_ENCODED_LEN > self.capacity()) {\n+                self.flush();\n+                buffered = 0;\n+            }\n \n-        // SAFETY: The above check and flush ensures that there is enough\n-        // room to write the encoded value to the buffer.\n-        let buf = unsafe {\n-            &mut *($enc.buf.as_mut_ptr().add(buffered) as *mut [MaybeUninit<u8>; MAX_ENCODED_LEN])\n-        };\n+            // SAFETY: The above check and flush ensures that there is enough\n+            // room to write the encoded value to the buffer.\n+            let buf = unsafe {\n+                &mut *(self.buf.as_mut_ptr().add(buffered)\n+                    as *mut [MaybeUninit<u8>; MAX_ENCODED_LEN])\n+            };\n \n-        let encoded = leb128::$fun(buf, $value);\n-        $enc.buffered = buffered + encoded.len();\n-    }};\n+            let encoded = leb128::$write_leb_fn(buf, v);\n+            self.buffered = buffered + encoded.len();\n+        }\n+    };\n }\n \n impl Encoder for FileEncoder {\n-    #[inline]\n-    fn emit_usize(&mut self, v: usize) {\n-        file_encoder_write_leb128!(self, v, usize, write_usize_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_u128(&mut self, v: u128) {\n-        file_encoder_write_leb128!(self, v, u128, write_u128_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_u64(&mut self, v: u64) {\n-        file_encoder_write_leb128!(self, v, u64, write_u64_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_u32(&mut self, v: u32) {\n-        file_encoder_write_leb128!(self, v, u32, write_u32_leb128)\n-    }\n+    write_leb128!(emit_usize, usize, write_usize_leb128);\n+    write_leb128!(emit_u128, u128, write_u128_leb128);\n+    write_leb128!(emit_u64, u64, write_u64_leb128);\n+    write_leb128!(emit_u32, u32, write_u32_leb128);\n \n     #[inline]\n     fn emit_u16(&mut self, v: u16) {\n@@ -426,25 +311,10 @@ impl Encoder for FileEncoder {\n         self.write_one(v);\n     }\n \n-    #[inline]\n-    fn emit_isize(&mut self, v: isize) {\n-        file_encoder_write_leb128!(self, v, isize, write_isize_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i128(&mut self, v: i128) {\n-        file_encoder_write_leb128!(self, v, i128, write_i128_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i64(&mut self, v: i64) {\n-        file_encoder_write_leb128!(self, v, i64, write_i64_leb128)\n-    }\n-\n-    #[inline]\n-    fn emit_i32(&mut self, v: i32) {\n-        file_encoder_write_leb128!(self, v, i32, write_i32_leb128)\n-    }\n+    write_leb128!(emit_isize, isize, write_isize_leb128);\n+    write_leb128!(emit_i128, i128, write_i128_leb128);\n+    write_leb128!(emit_i64, i64, write_i64_leb128);\n+    write_leb128!(emit_i32, i32, write_i32_leb128);\n \n     #[inline]\n     fn emit_i16(&mut self, v: i16) {\n@@ -541,30 +411,19 @@ impl<'a> MemDecoder<'a> {\n }\n \n macro_rules! read_leb128 {\n-    ($dec:expr, $fun:ident) => {{ leb128::$fun($dec) }};\n+    ($this_fn:ident, $int_ty:ty, $read_leb_fn:ident) => {\n+        #[inline]\n+        fn $this_fn(&mut self) -> $int_ty {\n+            leb128::$read_leb_fn(self)\n+        }\n+    };\n }\n \n impl<'a> Decoder for MemDecoder<'a> {\n-    #[inline]\n-    fn position(&self) -> usize {\n-        // SAFETY: This type guarantees start <= current\n-        unsafe { self.current.sub_ptr(self.start) }\n-    }\n-\n-    #[inline]\n-    fn read_u128(&mut self) -> u128 {\n-        read_leb128!(self, read_u128_leb128)\n-    }\n-\n-    #[inline]\n-    fn read_u64(&mut self) -> u64 {\n-        read_leb128!(self, read_u64_leb128)\n-    }\n-\n-    #[inline]\n-    fn read_u32(&mut self) -> u32 {\n-        read_leb128!(self, read_u32_leb128)\n-    }\n+    read_leb128!(read_usize, usize, read_usize_leb128);\n+    read_leb128!(read_u128, u128, read_u128_leb128);\n+    read_leb128!(read_u64, u64, read_u64_leb128);\n+    read_leb128!(read_u32, u32, read_u32_leb128);\n \n     #[inline]\n     fn read_u16(&mut self) -> u16 {\n@@ -584,36 +443,16 @@ impl<'a> Decoder for MemDecoder<'a> {\n         }\n     }\n \n-    #[inline]\n-    fn read_usize(&mut self) -> usize {\n-        read_leb128!(self, read_usize_leb128)\n-    }\n-\n-    #[inline]\n-    fn read_i128(&mut self) -> i128 {\n-        read_leb128!(self, read_i128_leb128)\n-    }\n-\n-    #[inline]\n-    fn read_i64(&mut self) -> i64 {\n-        read_leb128!(self, read_i64_leb128)\n-    }\n-\n-    #[inline]\n-    fn read_i32(&mut self) -> i32 {\n-        read_leb128!(self, read_i32_leb128)\n-    }\n+    read_leb128!(read_isize, isize, read_isize_leb128);\n+    read_leb128!(read_i128, i128, read_i128_leb128);\n+    read_leb128!(read_i64, i64, read_i64_leb128);\n+    read_leb128!(read_i32, i32, read_i32_leb128);\n \n     #[inline]\n     fn read_i16(&mut self) -> i16 {\n         i16::from_le_bytes(self.read_array())\n     }\n \n-    #[inline]\n-    fn read_isize(&mut self) -> isize {\n-        read_leb128!(self, read_isize_leb128)\n-    }\n-\n     #[inline]\n     fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {\n         if bytes > self.remaining() {\n@@ -636,6 +475,12 @@ impl<'a> Decoder for MemDecoder<'a> {\n         // Since we just checked current == end, the current pointer must be inbounds.\n         unsafe { *self.current }\n     }\n+\n+    #[inline]\n+    fn position(&self) -> usize {\n+        // SAFETY: This type guarantees start <= current\n+        unsafe { self.current.sub_ptr(self.start) }\n+    }\n }\n \n // Specializations for contiguous byte sequences follow. The default implementations for slices\n@@ -645,13 +490,6 @@ impl<'a> Decoder for MemDecoder<'a> {\n \n // Specialize encoding byte slices. This specialization also applies to encoding `Vec<u8>`s, etc.,\n // since the default implementations call `encode` on their slices internally.\n-impl Encodable<MemEncoder> for [u8] {\n-    fn encode(&self, e: &mut MemEncoder) {\n-        Encoder::emit_usize(e, self.len());\n-        e.emit_raw_bytes(self);\n-    }\n-}\n-\n impl Encodable<FileEncoder> for [u8] {\n     fn encode(&self, e: &mut FileEncoder) {\n         Encoder::emit_usize(e, self.len());\n@@ -675,16 +513,6 @@ impl IntEncodedWithFixedSize {\n     pub const ENCODED_SIZE: usize = 8;\n }\n \n-impl Encodable<MemEncoder> for IntEncodedWithFixedSize {\n-    #[inline]\n-    fn encode(&self, e: &mut MemEncoder) {\n-        let _start_pos = e.position();\n-        e.emit_raw_bytes(&self.0.to_le_bytes());\n-        let _end_pos = e.position();\n-        debug_assert_eq!((_end_pos - _start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n-    }\n-}\n-\n impl Encodable<FileEncoder> for IntEncodedWithFixedSize {\n     #[inline]\n     fn encode(&self, e: &mut FileEncoder) {"}, {"sha": "06166cabc187212eca09d6a8567bc9342d21560c", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,9 +1,5 @@\n //! Support code for encoding and decoding types.\n \n-/*\n-Core encoding and decoding interfaces.\n-*/\n-\n use std::alloc::Allocator;\n use std::borrow::Cow;\n use std::cell::{Cell, RefCell};\n@@ -35,13 +31,13 @@ const STR_SENTINEL: u8 = 0xC1;\n /// really makes sense to store floating-point values at all.\n /// (If you need it, revert <https://github.com/rust-lang/rust/pull/109984>.)\n pub trait Encoder {\n-    // Primitive types:\n     fn emit_usize(&mut self, v: usize);\n     fn emit_u128(&mut self, v: u128);\n     fn emit_u64(&mut self, v: u64);\n     fn emit_u32(&mut self, v: u32);\n     fn emit_u16(&mut self, v: u16);\n     fn emit_u8(&mut self, v: u8);\n+\n     fn emit_isize(&mut self, v: isize);\n     fn emit_i128(&mut self, v: i128);\n     fn emit_i64(&mut self, v: i64);\n@@ -93,13 +89,13 @@ pub trait Encoder {\n /// really makes sense to store floating-point values at all.\n /// (If you need it, revert <https://github.com/rust-lang/rust/pull/109984>.)\n pub trait Decoder {\n-    // Primitive types:\n     fn read_usize(&mut self) -> usize;\n     fn read_u128(&mut self) -> u128;\n     fn read_u64(&mut self) -> u64;\n     fn read_u32(&mut self) -> u32;\n     fn read_u16(&mut self) -> u16;\n     fn read_u8(&mut self) -> u8;\n+\n     fn read_isize(&mut self) -> isize;\n     fn read_i128(&mut self) -> i128;\n     fn read_i64(&mut self) -> i64;"}, {"sha": "861091688bb2dd6c14910260fd273934187b76f2", "filename": "compiler/rustc_serialize/tests/opaque.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,9 +1,10 @@\n #![allow(rustc::internal)]\n \n use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n+use rustc_serialize::opaque::{MemDecoder, FileEncoder};\n use rustc_serialize::{Decodable, Encodable};\n use std::fmt::Debug;\n+use std::fs;\n \n #[derive(PartialEq, Clone, Debug, Encodable, Decodable)]\n struct Struct {\n@@ -27,18 +28,21 @@ struct Struct {\n }\n \n fn check_round_trip<\n-    T: Encodable<MemEncoder> + for<'a> Decodable<MemDecoder<'a>> + PartialEq + Debug,\n+    T: Encodable<FileEncoder> + for<'a> Decodable<MemDecoder<'a>> + PartialEq + Debug,\n >(\n     values: Vec<T>,\n ) {\n-    let mut encoder = MemEncoder::new();\n+    let tmpfile = tempfile::NamedTempFile::new().unwrap();\n+    let tmpfile = tmpfile.path();\n+\n+    let mut encoder = FileEncoder::new(&tmpfile).unwrap();\n     for value in &values {\n         Encodable::encode(value, &mut encoder);\n     }\n+    encoder.finish().unwrap();\n \n-    let data = encoder.finish();\n+    let data = fs::read(&tmpfile).unwrap();\n     let mut decoder = MemDecoder::new(&data[..], 0);\n-\n     for value in values {\n         let decoded = Decodable::decode(&mut decoder);\n         assert_eq!(value, decoded);\n@@ -61,7 +65,7 @@ fn test_u8() {\n \n #[test]\n fn test_u16() {\n-    for i in u16::MIN..u16::MAX {\n+    for i in [u16::MIN, 111, 3333, 55555, u16::MAX] {\n         check_round_trip(vec![1, 2, 3, i, i, i]);\n     }\n }\n@@ -92,7 +96,7 @@ fn test_i8() {\n \n #[test]\n fn test_i16() {\n-    for i in i16::MIN..i16::MAX {\n+    for i in [i16::MIN, -100, 0, 101, i16::MAX] {\n         check_round_trip(vec![-1, 2, -3, i, i, i, 2]);\n     }\n }\n@@ -251,3 +255,41 @@ fn test_tuples() {\n     check_round_trip(vec![(1234567isize, 100000000000000u64, 99999999999999i64)]);\n     check_round_trip(vec![(String::new(), \"some string\".to_string())]);\n }\n+\n+#[test]\n+fn test_unit_like_struct() {\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct UnitLikeStruct;\n+\n+    check_round_trip(vec![UnitLikeStruct]);\n+}\n+\n+#[test]\n+fn test_box() {\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct A {\n+        foo: Box<[bool]>,\n+    }\n+\n+    let obj = A { foo: Box::new([true, false]) };\n+    check_round_trip(vec![obj]);\n+}\n+\n+#[test]\n+fn test_cell() {\n+    use std::cell::{Cell, RefCell};\n+\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct A {\n+        baz: isize,\n+    }\n+\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct B {\n+        foo: Cell<bool>,\n+        bar: RefCell<A>,\n+    }\n+\n+    let obj = B { foo: Cell::new(true), bar: RefCell::new(A { baz: 2 }) };\n+    check_round_trip(vec![obj]);\n+}"}, {"sha": "c897275bee2b7c8285017fb7e7f872a0034852d0", "filename": "compiler/rustc_session/messages.ftl", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_session%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_session%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fmessages.ftl?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -35,7 +35,15 @@ session_cannot_mix_and_match_sanitizers = `-Zsanitizer={$first}` is incompatible\n \n session_cannot_enable_crt_static_linux = sanitizer is incompatible with statically linked libc, disable it using `-C target-feature=-crt-static`\n \n-session_sanitizer_cfi_enabled = `-Zsanitizer=cfi` requires `-Clto`\n+session_sanitizer_cfi_requires_lto = `-Zsanitizer=cfi` requires `-Clto`, `-Clto=thin`, or `-Clinker-plugin-lto`\n+\n+session_sanitizer_cfi_canonical_jump_tables_requires_cfi = `-Zsanitizer-cfi-canonical-jump-tables` requires `-Zsanitizer=cfi`\n+\n+session_sanitizer_cfi_generalize_pointers_requires_cfi = `-Zsanitizer-cfi-generalize-pointers` requires `-Zsanitizer=cfi` or `-Zsanitizer=kcfi`\n+\n+session_sanitizer_cfi_normalize_integers_requires_cfi = `-Zsanitizer-cfi-normalize-integers` requires `-Zsanitizer=cfi` or `-Zsanitizer=kcfi`\n+\n+session_split_lto_unit_requires_lto = `-Zsplit-lto-unit` requires `-Clto`, `-Clto=thin`, or `-Clinker-plugin-lto`\n \n session_unstable_virtual_function_elimination = `-Zvirtual-function-elimination` requires `-Clto`\n "}, {"sha": "cfdba1120ec3831a77efae1a66f034adb00799d3", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1036,6 +1036,14 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n         ret.insert((sym::sanitize, Some(symbol)));\n     }\n \n+    if sess.is_sanitizer_cfi_generalize_pointers_enabled() {\n+        ret.insert((sym::sanitizer_cfi_generalize_pointers, None));\n+    }\n+\n+    if sess.is_sanitizer_cfi_normalize_integers_enabled() {\n+        ret.insert((sym::sanitizer_cfi_normalize_integers, None));\n+    }\n+\n     if sess.opts.debug_assertions {\n         ret.insert((sym::debug_assertions, None));\n     }"}, {"sha": "0df62c2064ee889d566fe874a7176a557e34b4a6", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -111,8 +111,24 @@ pub struct CannotMixAndMatchSanitizers {\n pub struct CannotEnableCrtStaticLinux;\n \n #[derive(Diagnostic)]\n-#[diag(session_sanitizer_cfi_enabled)]\n-pub struct SanitizerCfiEnabled;\n+#[diag(session_sanitizer_cfi_requires_lto)]\n+pub struct SanitizerCfiRequiresLto;\n+\n+#[derive(Diagnostic)]\n+#[diag(session_sanitizer_cfi_canonical_jump_tables_requires_cfi)]\n+pub struct SanitizerCfiCanonicalJumpTablesRequiresCfi;\n+\n+#[derive(Diagnostic)]\n+#[diag(session_sanitizer_cfi_generalize_pointers_requires_cfi)]\n+pub struct SanitizerCfiGeneralizePointersRequiresCfi;\n+\n+#[derive(Diagnostic)]\n+#[diag(session_sanitizer_cfi_normalize_integers_requires_cfi)]\n+pub struct SanitizerCfiNormalizeIntegersRequiresCfi;\n+\n+#[derive(Diagnostic)]\n+#[diag(session_split_lto_unit_requires_lto)]\n+pub struct SplitLtoUnitRequiresLto;\n \n #[derive(Diagnostic)]\n #[diag(session_unstable_virtual_function_elimination)]"}, {"sha": "d9e191c00c9506c5494e65b340b7872e2ee5c6ab", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1662,6 +1662,12 @@ options! {\n         \"immediately print bugs registered with `delay_span_bug` (default: no)\"),\n     sanitizer: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],\n         \"use a sanitizer\"),\n+    sanitizer_cfi_canonical_jump_tables: Option<bool> = (Some(true), parse_opt_bool, [TRACKED],\n+        \"enable canonical jump tables (default: yes)\"),\n+    sanitizer_cfi_generalize_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"enable generalizing pointer types (default: no)\"),\n+    sanitizer_cfi_normalize_integers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"enable normalizing integer types (default: no)\"),\n     sanitizer_memory_track_origins: usize = (0, parse_sanitizer_memory_track_origins, [TRACKED],\n         \"enable origins tracking in MemorySanitizer\"),\n     sanitizer_recover: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],\n@@ -1707,6 +1713,8 @@ options! {\n                  file which is ignored by the linker\n         `single`: sections which do not require relocation are written into object file but ignored\n                   by the linker\"),\n+    split_lto_unit: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"enable LTO unit splitting (default: no)\"),\n     src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n         \"hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::stack_protector` instead of this field\")]"}, {"sha": "a988d7f28e6cbf315d0de41bbccee888dc7f3af7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -766,10 +766,30 @@ impl Session {\n         self.opts.unstable_opts.sanitizer.contains(SanitizerSet::CFI)\n     }\n \n+    pub fn is_sanitizer_cfi_canonical_jump_tables_disabled(&self) -> bool {\n+        self.opts.unstable_opts.sanitizer_cfi_canonical_jump_tables == Some(false)\n+    }\n+\n+    pub fn is_sanitizer_cfi_canonical_jump_tables_enabled(&self) -> bool {\n+        self.opts.unstable_opts.sanitizer_cfi_canonical_jump_tables == Some(true)\n+    }\n+\n+    pub fn is_sanitizer_cfi_generalize_pointers_enabled(&self) -> bool {\n+        self.opts.unstable_opts.sanitizer_cfi_generalize_pointers == Some(true)\n+    }\n+\n+    pub fn is_sanitizer_cfi_normalize_integers_enabled(&self) -> bool {\n+        self.opts.unstable_opts.sanitizer_cfi_normalize_integers == Some(true)\n+    }\n+\n     pub fn is_sanitizer_kcfi_enabled(&self) -> bool {\n         self.opts.unstable_opts.sanitizer.contains(SanitizerSet::KCFI)\n     }\n \n+    pub fn is_split_lto_unit_enabled(&self) -> bool {\n+        self.opts.unstable_opts.split_lto_unit == Some(true)\n+    }\n+\n     /// Check whether this compile session and crate type use static crt.\n     pub fn crt_static(&self, crate_type: Option<CrateType>) -> bool {\n         if !self.target.crt_static_respected {\n@@ -1582,24 +1602,60 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         sess.emit_err(errors::CannotEnableCrtStaticLinux);\n     }\n \n-    // LLVM CFI and VFE both require LTO.\n-    if sess.lto() != config::Lto::Fat {\n-        if sess.is_sanitizer_cfi_enabled() {\n-            sess.emit_err(errors::SanitizerCfiEnabled);\n-        }\n-        if sess.opts.unstable_opts.virtual_function_elimination {\n-            sess.emit_err(errors::UnstableVirtualFunctionElimination);\n-        }\n+    // LLVM CFI requires LTO.\n+    if sess.is_sanitizer_cfi_enabled()\n+        && !(sess.lto() == config::Lto::Fat\n+            || sess.lto() == config::Lto::Thin\n+            || sess.opts.cg.linker_plugin_lto.enabled())\n+    {\n+        sess.emit_err(errors::SanitizerCfiRequiresLto);\n     }\n \n-    // LLVM CFI and KCFI are mutually exclusive\n+    // LLVM CFI is incompatible with LLVM KCFI.\n     if sess.is_sanitizer_cfi_enabled() && sess.is_sanitizer_kcfi_enabled() {\n         sess.emit_err(errors::CannotMixAndMatchSanitizers {\n             first: \"cfi\".to_string(),\n             second: \"kcfi\".to_string(),\n         });\n     }\n \n+    // Canonical jump tables requires CFI.\n+    if sess.is_sanitizer_cfi_canonical_jump_tables_disabled() {\n+        if !sess.is_sanitizer_cfi_enabled() {\n+            sess.emit_err(errors::SanitizerCfiCanonicalJumpTablesRequiresCfi);\n+        }\n+    }\n+\n+    // LLVM CFI pointer generalization requires CFI or KCFI.\n+    if sess.is_sanitizer_cfi_generalize_pointers_enabled() {\n+        if !(sess.is_sanitizer_cfi_enabled() || sess.is_sanitizer_kcfi_enabled()) {\n+            sess.emit_err(errors::SanitizerCfiGeneralizePointersRequiresCfi);\n+        }\n+    }\n+\n+    // LLVM CFI integer normalization requires CFI or KCFI.\n+    if sess.is_sanitizer_cfi_normalize_integers_enabled() {\n+        if !(sess.is_sanitizer_cfi_enabled() || sess.is_sanitizer_kcfi_enabled()) {\n+            sess.emit_err(errors::SanitizerCfiNormalizeIntegersRequiresCfi);\n+        }\n+    }\n+\n+    // LTO unit splitting requires LTO.\n+    if sess.is_split_lto_unit_enabled()\n+        && !(sess.lto() == config::Lto::Fat\n+            || sess.lto() == config::Lto::Thin\n+            || sess.opts.cg.linker_plugin_lto.enabled())\n+    {\n+        sess.emit_err(errors::SplitLtoUnitRequiresLto);\n+    }\n+\n+    // VFE requires LTO.\n+    if sess.lto() != config::Lto::Fat {\n+        if sess.opts.unstable_opts.virtual_function_elimination {\n+            sess.emit_err(errors::UnstableVirtualFunctionElimination);\n+        }\n+    }\n+\n     if sess.opts.unstable_opts.stack_protector != StackProtector::None {\n         if !sess.target.options.supports_stack_protector {\n             sess.emit_warning(errors::StackProtectorNotSupportedForTarget {"}, {"sha": "341cc61fd1c10b557b517a0edb3ffd930534e528", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -69,7 +69,6 @@ use std::hash::Hash;\n use std::ops::{Add, Range, Sub};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n-use std::sync::Arc;\n \n use md5::Digest;\n use md5::Md5;\n@@ -1269,13 +1268,13 @@ pub enum DebuggerVisualizerType {\n #[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord, Encodable, Decodable)]\n pub struct DebuggerVisualizerFile {\n     /// The complete debugger visualizer source.\n-    pub src: Arc<[u8]>,\n+    pub src: Lrc<[u8]>,\n     /// Indicates which visualizer type this targets.\n     pub visualizer_type: DebuggerVisualizerType,\n }\n \n impl DebuggerVisualizerFile {\n-    pub fn new(src: Arc<[u8]>, visualizer_type: DebuggerVisualizerType) -> Self {\n+    pub fn new(src: Lrc<[u8]>, visualizer_type: DebuggerVisualizerType) -> Self {\n         DebuggerVisualizerFile { src, visualizer_type }\n     }\n }"}, {"sha": "1140a922f9fd14edf1668559ed21d065aa1feafe", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -443,6 +443,7 @@ symbols! {\n         c_str,\n         c_unwind,\n         c_variadic,\n+        c_void,\n         call,\n         call_mut,\n         call_once,\n@@ -470,6 +471,7 @@ symbols! {\n         cfg_target_vendor,\n         cfg_version,\n         cfi,\n+        cfi_encoding,\n         char,\n         client,\n         clippy,\n@@ -984,6 +986,7 @@ symbols! {\n         needs_panic_runtime,\n         neg,\n         negate_unsigned,\n+        negative_bounds,\n         negative_impls,\n         neon,\n         never,\n@@ -1322,6 +1325,8 @@ symbols! {\n         s,\n         safety,\n         sanitize,\n+        sanitizer_cfi_generalize_pointers,\n+        sanitizer_cfi_normalize_integers,\n         sanitizer_runtime,\n         saturating_add,\n         saturating_sub,"}, {"sha": "81dbff9ea4e40183f23a3cf1805d4df3232ad04a", "filename": "compiler/rustc_symbol_mangling/src/typeid.rs", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,42 +1,65 @@\n-// For more information about type metadata and type metadata identifiers for cross-language LLVM\n-// CFI support, see Type metadata in the design document in the tracking issue #89653.\n-\n+/// Type metadata identifiers for LLVM Control Flow Integrity (CFI) and cross-language LLVM CFI\n+/// support.\n+///\n+/// For more information about LLVM CFI and cross-language LLVM CFI support for the Rust compiler,\n+/// see design document in the tracking issue #89653.\n+use bitflags::bitflags;\n use rustc_middle::ty::{FnSig, Ty, TyCtxt};\n use rustc_target::abi::call::FnAbi;\n use std::hash::Hasher;\n use twox_hash::XxHash64;\n \n+bitflags! {\n+    /// Options for typeid_for_fnabi and typeid_for_fnsig.\n+    pub struct TypeIdOptions: u32 {\n+        const GENERALIZE_POINTERS = 1;\n+        const GENERALIZE_REPR_C = 2;\n+        const NORMALIZE_INTEGERS = 4;\n+    }\n+}\n+\n mod typeid_itanium_cxx_abi;\n-use typeid_itanium_cxx_abi::TypeIdOptions;\n \n /// Returns a type metadata identifier for the specified FnAbi.\n-pub fn typeid_for_fnabi<'tcx>(tcx: TyCtxt<'tcx>, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> String {\n-    typeid_itanium_cxx_abi::typeid_for_fnabi(tcx, fn_abi, TypeIdOptions::NO_OPTIONS)\n+pub fn typeid_for_fnabi<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n+    options: TypeIdOptions,\n+) -> String {\n+    typeid_itanium_cxx_abi::typeid_for_fnabi(tcx, fn_abi, options)\n }\n \n /// Returns a type metadata identifier for the specified FnSig.\n-pub fn typeid_for_fnsig<'tcx>(tcx: TyCtxt<'tcx>, fn_sig: &FnSig<'tcx>) -> String {\n-    typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, TypeIdOptions::NO_OPTIONS)\n+pub fn typeid_for_fnsig<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    fn_sig: &FnSig<'tcx>,\n+    options: TypeIdOptions,\n+) -> String {\n+    typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, options)\n }\n \n-/// Returns an LLVM KCFI type metadata identifier for the specified FnAbi.\n-pub fn kcfi_typeid_for_fnabi<'tcx>(tcx: TyCtxt<'tcx>, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> u32 {\n-    // An LLVM KCFI type metadata identifier is a 32-bit constant produced by taking the lower half\n-    // of the xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n+/// Returns a KCFI type metadata identifier for the specified FnAbi.\n+pub fn kcfi_typeid_for_fnabi<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n+    options: TypeIdOptions,\n+) -> u32 {\n+    // A KCFI type metadata identifier is a 32-bit constant produced by taking the lower half of the\n+    // xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n     let mut hash: XxHash64 = Default::default();\n-    hash.write(\n-        typeid_itanium_cxx_abi::typeid_for_fnabi(tcx, fn_abi, TypeIdOptions::NO_OPTIONS).as_bytes(),\n-    );\n+    hash.write(typeid_itanium_cxx_abi::typeid_for_fnabi(tcx, fn_abi, options).as_bytes());\n     hash.finish() as u32\n }\n \n-/// Returns an LLVM KCFI type metadata identifier for the specified FnSig.\n-pub fn kcfi_typeid_for_fnsig<'tcx>(tcx: TyCtxt<'tcx>, fn_sig: &FnSig<'tcx>) -> u32 {\n-    // An LLVM KCFI type metadata identifier is a 32-bit constant produced by taking the lower half\n-    // of the xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n+/// Returns a KCFI type metadata identifier for the specified FnSig.\n+pub fn kcfi_typeid_for_fnsig<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    fn_sig: &FnSig<'tcx>,\n+    options: TypeIdOptions,\n+) -> u32 {\n+    // A KCFI type metadata identifier is a 32-bit constant produced by taking the lower half of the\n+    // xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n     let mut hash: XxHash64 = Default::default();\n-    hash.write(\n-        typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, TypeIdOptions::NO_OPTIONS).as_bytes(),\n-    );\n+    hash.write(typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, options).as_bytes());\n     hash.finish() as u32\n }"}, {"sha": "5310ef26da768d890ac570e0172d4e693ebcccb2", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 148, "deletions": 53, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,26 +1,30 @@\n-// For more information about type metadata and type metadata identifiers for cross-language LLVM\n-// CFI support, see Type metadata in the design document in the tracking issue #89653.\n-\n-// FIXME(rcvalle): Identify C char and integer type uses and encode them with their respective\n-// builtin type encodings as specified by the Itanium C++ ABI for extern function types with the \"C\"\n-// calling convention to use this encoding for cross-language LLVM CFI.\n-\n-use bitflags::bitflags;\n+/// Type metadata identifiers (using Itanium C++ ABI mangling for encoding) for LLVM Control Flow\n+/// Integrity (CFI) and cross-language LLVM CFI support.\n+///\n+/// Encodes type metadata identifiers for LLVM CFI and cross-language LLVM CFI support using Itanium\n+/// C++ ABI mangling for encoding with vendor extended type qualifiers and types for Rust types that\n+/// are not used across the FFI boundary.\n+///\n+/// For more information about LLVM CFI and cross-language LLVM CFI support for the Rust compiler,\n+/// see design document in the tracking issue #89653.\n use core::fmt::Display;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::DiagnosticMessage;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n     self, Const, ExistentialPredicate, FloatTy, FnSig, IntTy, List, Region, RegionKind, TermKind,\n     Ty, TyCtxt, UintTy,\n };\n use rustc_span::def_id::DefId;\n-use rustc_span::symbol::sym;\n+use rustc_span::sym;\n use rustc_target::abi::call::{Conv, FnAbi};\n use rustc_target::spec::abi::Abi;\n use std::fmt::Write as _;\n \n+use crate::typeid::TypeIdOptions;\n+\n /// Type and extended type qualifiers.\n #[derive(Eq, Hash, PartialEq)]\n enum TyQ {\n@@ -38,15 +42,6 @@ enum DictKey<'tcx> {\n     Predicate(ExistentialPredicate<'tcx>),\n }\n \n-bitflags! {\n-    /// Options for typeid_for_fnabi and typeid_for_fnsig.\n-    pub struct TypeIdOptions: u32 {\n-        const NO_OPTIONS = 0;\n-        const GENERALIZE_POINTERS = 1;\n-        const GENERALIZE_REPR_C = 2;\n-    }\n-}\n-\n /// Options for encode_ty.\n type EncodeTyOptions = TypeIdOptions;\n \n@@ -91,21 +86,6 @@ fn compress<'tcx>(\n     }\n }\n \n-// FIXME(rcvalle): Move to compiler/rustc_middle/src/ty/sty.rs after C types work is done, possibly\n-// along with other is_c_type methods.\n-/// Returns whether a `ty::Ty` is `c_void`.\n-fn is_c_void_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.kind() {\n-        ty::Adt(adt_def, ..) => {\n-            let def_id = adt_def.0.did;\n-            let crate_name = tcx.crate_name(def_id.krate);\n-            tcx.item_name(def_id).as_str() == \"c_void\"\n-                && (crate_name == sym::core || crate_name == sym::std || crate_name == sym::libc)\n-        }\n-        _ => false,\n-    }\n-}\n-\n /// Encodes a const using the Itanium C++ ABI as a literal argument (see\n /// <https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling.literal>).\n fn encode_const<'tcx>(\n@@ -448,6 +428,12 @@ fn encode_ty<'tcx>(\n \n     match ty.kind() {\n         // Primitive types\n+\n+        // Rust's bool has the same layout as C17's _Bool, that is, its size and alignment are\n+        // implementation-defined. Any bool can be cast into an integer, taking on the values 1\n+        // (true) or 0 (false).\n+        //\n+        // (See https://rust-lang.github.io/unsafe-code-guidelines/layout/scalars.html#bool.)\n         ty::Bool => {\n             typeid.push('b');\n         }\n@@ -535,9 +521,33 @@ fn encode_ty<'tcx>(\n         // User-defined types\n         ty::Adt(adt_def, substs) => {\n             let mut s = String::new();\n-            let def_id = adt_def.0.did;\n-            if options.contains(EncodeTyOptions::GENERALIZE_REPR_C) && adt_def.repr().c() {\n-                // For cross-language CFI support, the encoding must be compatible at the FFI\n+            let def_id = adt_def.did();\n+            if let Some(cfi_encoding) = tcx.get_attr(def_id, sym::cfi_encoding) {\n+                // Use user-defined CFI encoding for type\n+                if let Some(value_str) = cfi_encoding.value_str() {\n+                    if !value_str.to_string().trim().is_empty() {\n+                        s.push_str(&value_str.to_string().trim());\n+                    } else {\n+                        #[allow(\n+                            rustc::diagnostic_outside_of_impl,\n+                            rustc::untranslatable_diagnostic\n+                        )]\n+                        tcx.sess\n+                            .struct_span_err(\n+                                cfi_encoding.span,\n+                                DiagnosticMessage::Str(format!(\n+                                    \"invalid `cfi_encoding` for `{:?}`\",\n+                                    ty.kind()\n+                                )),\n+                            )\n+                            .emit();\n+                    }\n+                } else {\n+                    bug!(\"encode_ty: invalid `cfi_encoding` for `{:?}`\", ty.kind());\n+                }\n+                compress(dict, DictKey::Ty(ty, TyQ::None), &mut s);\n+            } else if options.contains(EncodeTyOptions::GENERALIZE_REPR_C) && adt_def.repr().c() {\n+                // For cross-language LLVM CFI support, the encoding must be compatible at the FFI\n                 // boundary. For instance:\n                 //\n                 //     struct type1 {};\n@@ -567,8 +577,33 @@ fn encode_ty<'tcx>(\n         ty::Foreign(def_id) => {\n             // <length><name>, where <name> is <unscoped-name>\n             let mut s = String::new();\n-            let name = tcx.item_name(*def_id).to_string();\n-            let _ = write!(s, \"{}{}\", name.len(), &name);\n+            if let Some(cfi_encoding) = tcx.get_attr(*def_id, sym::cfi_encoding) {\n+                // Use user-defined CFI encoding for type\n+                if let Some(value_str) = cfi_encoding.value_str() {\n+                    if !value_str.to_string().trim().is_empty() {\n+                        s.push_str(&value_str.to_string().trim());\n+                    } else {\n+                        #[allow(\n+                            rustc::diagnostic_outside_of_impl,\n+                            rustc::untranslatable_diagnostic\n+                        )]\n+                        tcx.sess\n+                            .struct_span_err(\n+                                cfi_encoding.span,\n+                                DiagnosticMessage::Str(format!(\n+                                    \"invalid `cfi_encoding` for `{:?}`\",\n+                                    ty.kind()\n+                                )),\n+                            )\n+                            .emit();\n+                    }\n+                } else {\n+                    bug!(\"encode_ty: invalid `cfi_encoding` for `{:?}`\", ty.kind());\n+                }\n+            } else {\n+                let name = tcx.item_name(*def_id).to_string();\n+                let _ = write!(s, \"{}{}\", name.len(), &name);\n+            }\n             compress(dict, DictKey::Ty(ty, TyQ::None), &mut s);\n             typeid.push_str(&s);\n         }\n@@ -618,7 +653,7 @@ fn encode_ty<'tcx>(\n         ty::FnPtr(fn_sig) => {\n             // PF<return-type><parameter-type1..parameter-typeN>E\n             let mut s = String::from(\"P\");\n-            s.push_str(&encode_fnsig(tcx, &fn_sig.skip_binder(), dict, TypeIdOptions::NO_OPTIONS));\n+            s.push_str(&encode_fnsig(tcx, &fn_sig.skip_binder(), dict, TypeIdOptions::empty()));\n             compress(dict, DictKey::Ty(ty, TyQ::None), &mut s);\n             typeid.push_str(&s);\n         }\n@@ -655,22 +690,59 @@ fn encode_ty<'tcx>(\n }\n \n // Transforms a ty:Ty for being encoded and used in the substitution dictionary. It transforms all\n-// c_void types into unit types unconditionally, and generalizes all pointers if\n-// TransformTyOptions::GENERALIZE_POINTERS option is set.\n-#[instrument(level = \"trace\", skip(tcx))]\n+// c_void types into unit types unconditionally, generalizes pointers if\n+// TransformTyOptions::GENERALIZE_POINTERS option is set, and normalizes integers if\n+// TransformTyOptions::NORMALIZE_INTEGERS option is set.\n fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptions) -> Ty<'tcx> {\n     let mut ty = ty;\n \n     match ty.kind() {\n-        ty::Bool\n-        | ty::Int(..)\n-        | ty::Uint(..)\n-        | ty::Float(..)\n-        | ty::Char\n-        | ty::Str\n-        | ty::Never\n-        | ty::Foreign(..)\n-        | ty::Dynamic(..) => {}\n+        ty::Float(..) | ty::Char | ty::Str | ty::Never | ty::Foreign(..) | ty::Dynamic(..) => {}\n+\n+        ty::Bool => {\n+            if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n+                // Note: on all platforms that Rust's currently supports, its size and alignment are\n+                // 1, and its ABI class is INTEGER - see Rust Layout and ABIs.\n+                //\n+                // (See https://rust-lang.github.io/unsafe-code-guidelines/layout/scalars.html#bool.)\n+                //\n+                // Clang represents bool as an 8-bit unsigned integer.\n+                ty = tcx.types.u8;\n+            }\n+        }\n+\n+        ty::Int(..) | ty::Uint(..) => {\n+            if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n+                // Note: C99 7.18.2.4 requires uintptr_t and intptr_t to be at least 16-bit wide.\n+                // All platforms we currently support have a C platform, and as a consequence,\n+                // isize/usize are at least 16-bit wide for all of them.\n+                //\n+                // (See https://rust-lang.github.io/unsafe-code-guidelines/layout/scalars.html#isize-and-usize.)\n+                match ty.kind() {\n+                    ty::Int(IntTy::Isize) => match tcx.sess.target.pointer_width {\n+                        16 => ty = tcx.types.i16,\n+                        32 => ty = tcx.types.i32,\n+                        64 => ty = tcx.types.i64,\n+                        128 => ty = tcx.types.i128,\n+                        _ => bug!(\n+                            \"transform_ty: unexpected pointer width `{}`\",\n+                            tcx.sess.target.pointer_width\n+                        ),\n+                    },\n+                    ty::Uint(UintTy::Usize) => match tcx.sess.target.pointer_width {\n+                        16 => ty = tcx.types.u16,\n+                        32 => ty = tcx.types.u32,\n+                        64 => ty = tcx.types.u64,\n+                        128 => ty = tcx.types.u128,\n+                        _ => bug!(\n+                            \"transform_ty: unexpected pointer width `{}`\",\n+                            tcx.sess.target.pointer_width\n+                        ),\n+                    },\n+                    _ => (),\n+                }\n+            }\n+        }\n \n         _ if ty.is_unit() => {}\n \n@@ -688,12 +760,17 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n         }\n \n         ty::Adt(adt_def, substs) => {\n-            if is_c_void_ty(tcx, ty) {\n+            if ty.is_c_void(tcx) {\n                 ty = tcx.mk_unit();\n             } else if options.contains(TransformTyOptions::GENERALIZE_REPR_C) && adt_def.repr().c()\n             {\n                 ty = tcx.mk_adt(*adt_def, ty::List::empty());\n             } else if adt_def.repr().transparent() && adt_def.is_struct() {\n+                // Don't transform repr(transparent) types with an user-defined CFI encoding to\n+                // preserve the user-defined CFI encoding.\n+                if let Some(_) = tcx.get_attr(adt_def.did(), sym::cfi_encoding) {\n+                    return ty;\n+                }\n                 let variant = adt_def.non_enum_variant();\n                 let param_env = tcx.param_env(variant.def_id);\n                 let field = variant.fields.iter().find(|field| {\n@@ -815,7 +892,7 @@ fn transform_substs<'tcx>(\n     options: TransformTyOptions,\n ) -> SubstsRef<'tcx> {\n     let substs = substs.iter().map(|subst| match subst.unpack() {\n-        GenericArgKind::Type(ty) if is_c_void_ty(tcx, ty) => tcx.mk_unit().into(),\n+        GenericArgKind::Type(ty) if ty.is_c_void(tcx) => tcx.mk_unit().into(),\n         GenericArgKind::Type(ty) => transform_ty(tcx, ty, options).into(),\n         _ => subst,\n     });\n@@ -887,6 +964,15 @@ pub fn typeid_for_fnabi<'tcx>(\n     // Close the \"F..E\" pair\n     typeid.push('E');\n \n+    // Add encoding suffixes\n+    if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n+        typeid.push_str(\".normalized\");\n+    }\n+\n+    if options.contains(EncodeTyOptions::GENERALIZE_POINTERS) {\n+        typeid.push_str(\".generalized\");\n+    }\n+\n     typeid\n }\n \n@@ -913,5 +999,14 @@ pub fn typeid_for_fnsig<'tcx>(\n     // Encode the function signature\n     typeid.push_str(&encode_fnsig(tcx, fn_sig, &mut dict, options));\n \n+    // Add encoding suffixes\n+    if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n+        typeid.push_str(\".normalized\");\n+    }\n+\n+    if options.contains(EncodeTyOptions::GENERALIZE_POINTERS) {\n+        typeid.push_str(\".generalized\");\n+    }\n+\n     typeid\n }"}, {"sha": "142c20014a015d0794f79094750d9c331fd9ab99", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         params: impl IntoIterator<Item: Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult {\n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, params);\n+        let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, params);\n \n         let obligation = traits::Obligation {\n             cause: traits::ObligationCause::dummy(),"}, {"sha": "e5d51064c8d8f1256bab275bbb28f6e4542d40f6", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -274,8 +274,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                         .evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n                 }\n             };\n-        let output_is_sized_pred = tupled_inputs_and_output\n-            .map_bound(|(_, output)| tcx.at(DUMMY_SP).mk_trait_ref(LangItem::Sized, [output]));\n+        let output_is_sized_pred = tupled_inputs_and_output.map_bound(|(_, output)| {\n+            ty::TraitRef::from_lang_item(tcx, LangItem::Sized, DUMMY_SP, [output])\n+        });\n \n         let pred = tupled_inputs_and_output\n             .map_bound(|(inputs, output)| ty::ProjectionPredicate {\n@@ -333,10 +334,12 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n \n                 ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n                     // FIXME(ptr_metadata): It would also be possible to return a `Ok(Ambig)` with no constraints.\n-                    let sized_predicate = ty::Binder::dummy(tcx.at(DUMMY_SP).mk_trait_ref(\n+                    let sized_predicate = ty::TraitRef::from_lang_item(\n+                        tcx,\n                         LangItem::Sized,\n+                        DUMMY_SP,\n                         [ty::GenericArg::from(goal.predicate.self_ty())],\n-                    ));\n+                    );\n                     ecx.add_goal(goal.with(tcx, sized_predicate));\n                     tcx.types.unit\n                 }"}, {"sha": "6c98fadd1482a92621e99344874f82a0a700e17d", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -272,12 +272,13 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                         .evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n                 }\n             };\n-        let output_is_sized_pred = tupled_inputs_and_output\n-            .map_bound(|(_, output)| tcx.at(DUMMY_SP).mk_trait_ref(LangItem::Sized, [output]));\n+        let output_is_sized_pred = tupled_inputs_and_output.map_bound(|(_, output)| {\n+            ty::TraitRef::from_lang_item(tcx, LangItem::Sized, DUMMY_SP, [output])\n+        });\n \n         let pred = tupled_inputs_and_output\n             .map_bound(|(inputs, _)| {\n-                tcx.mk_trait_ref(goal.predicate.def_id(), [goal.predicate.self_ty(), inputs])\n+                ty::TraitRef::new(tcx, goal.predicate.def_id(), [goal.predicate.self_ty(), inputs])\n             })\n             .to_predicate(tcx);\n         // A built-in `Fn` impl only holds if the output is sized.\n@@ -358,10 +359,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         Self::consider_implied_clause(\n             ecx,\n             goal,\n-            ty::Binder::dummy(\n-                tcx.mk_trait_ref(goal.predicate.def_id(), [self_ty, generator.resume_ty()]),\n-            )\n-            .to_predicate(tcx),\n+            ty::TraitRef::new(tcx, goal.predicate.def_id(), [self_ty, generator.resume_ty()])\n+                .to_predicate(tcx),\n             // Technically, we need to check that the generator types are Sized,\n             // but that's already proven by the generator being WF.\n             [],\n@@ -410,9 +409,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                         data.iter().map(|pred| goal.with(tcx, pred.with_self_ty(tcx, a_ty))),\n                     );\n                     // The type must be Sized to be unsized.\n-                    ecx.add_goal(\n-                        goal.with(tcx, ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [a_ty]))),\n-                    );\n+                    ecx.add_goal(goal.with(tcx, ty::TraitRef::new(tcx, sized_def_id, [a_ty])));\n                     // The type must outlive the lifetime of the `dyn` we're unsizing into.\n                     ecx.add_goal(\n                         goal.with(tcx, ty::Binder::dummy(ty::OutlivesPredicate(a_ty, region))),\n@@ -461,9 +458,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     ecx.eq(goal.param_env, unsized_a_ty, b_ty)?;\n                     ecx.add_goal(goal.with(\n                         tcx,\n-                        ty::Binder::dummy(\n-                            tcx.mk_trait_ref(goal.predicate.def_id(), [a_tail_ty, b_tail_ty]),\n-                        ),\n+                        ty::TraitRef::new(tcx, goal.predicate.def_id(), [a_tail_ty, b_tail_ty]),\n                     ));\n                     ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }\n@@ -482,9 +477,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     // Similar to ADTs, require that the rest of the fields are equal.\n                     ecx.add_goal(goal.with(\n                         tcx,\n-                        ty::Binder::dummy(\n-                            tcx.mk_trait_ref(goal.predicate.def_id(), [*a_last_ty, *b_last_ty]),\n-                        ),\n+                        ty::TraitRef::new(tcx, goal.predicate.def_id(), [*a_last_ty, *b_last_ty]),\n                     ));\n                     ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }"}, {"sha": "6b080a132f382af24641c4be07313cc01fa66dd7", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n-        let trait_ref = tcx.mk_trait_ref(trait_did, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, trait_did, [ty]);\n \n         let infcx = tcx.infer_ctxt().build();\n         let mut selcx = SelectionContext::new(&infcx);\n@@ -263,7 +263,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();\n         predicates.push_back(ty::Binder::dummy(ty::TraitPredicate {\n-            trait_ref: infcx.tcx.mk_trait_ref(trait_did, [ty]),\n+            trait_ref: ty::TraitRef::new(infcx.tcx, trait_did, [ty]),\n \n             constness: ty::BoundConstness::NotConst,\n             // Auto traits are positive"}, {"sha": "000427bbe83ec336ebf94ad506b86dbbc649aa5b", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         def_id: DefId,\n     ) {\n         let tcx = self.infcx.tcx;\n-        let trait_ref = tcx.mk_trait_ref(def_id, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, def_id, [ty]);\n         self.register_obligation(Obligation {\n             cause,\n             recursion_depth: 0,"}, {"sha": "7ab652761a410b12eea86db6372ca2893f268b7e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -87,7 +87,7 @@ pub fn recompute_applicable_impls<'tcx>(\n         if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = kind.skip_binder()\n             && param_env_candidate_may_apply(kind.rebind(trait_pred))\n         {\n-            if kind.rebind(trait_pred.trait_ref) == ty::TraitRef::identity(tcx, trait_pred.def_id()) {\n+            if kind.rebind(trait_pred.trait_ref) == ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_pred.def_id())) {\n                 ambiguities.push(Ambiguity::ParamEnv(tcx.def_span(trait_pred.def_id())))\n             } else {\n                 ambiguities.push(Ambiguity::ParamEnv(span))"}, {"sha": "8f2a5d649f0919a3e1f3e6bcf21b85840c5eb01d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -358,7 +358,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     span: DUMMY_SP,\n                     kind: TypeVariableOriginKind::MiscVariable,\n                 });\n-                let trait_ref = self.tcx.mk_trait_ref(trait_def_id, [ty.skip_binder(), var]);\n+                let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, [ty.skip_binder(), var]);\n                 let obligation = Obligation::new(\n                     self.tcx,\n                     ObligationCause::dummy(),"}, {"sha": "d34eb193453bd400d83d90d946212363e7a5b409", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -530,6 +530,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         associated_ty: Option<(&'static str, Ty<'tcx>)>,\n         mut body_id: LocalDefId,\n     ) {\n+        if trait_pred.skip_binder().polarity == ty::ImplPolarity::Negative {\n+            return;\n+        }\n+\n         let trait_pred = self.resolve_numeric_literals_with_default(trait_pred);\n \n         let self_ty = trait_pred.skip_binder().self_ty();\n@@ -3498,7 +3502,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         _ => None,\n                     };\n                     let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n-                        trait_ref: self.tcx.mk_trait_ref(\n+                        trait_ref: ty::TraitRef::new(self.tcx,\n                             trait_pred.def_id(),\n                             [field_ty].into_iter().chain(trait_substs),\n                         ),"}, {"sha": "8b8c50f6b836c4ec93262be3379bde96b8030e92", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -127,7 +127,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     ty: Ty<'tcx>,\n     def_id: DefId,\n ) -> bool {\n-    let trait_ref = ty::Binder::dummy(infcx.tcx.mk_trait_ref(def_id, [ty]));\n+    let trait_ref = ty::TraitRef::new(infcx.tcx, def_id, [ty]);\n     pred_known_to_hold_modulo_regions(infcx, param_env, trait_ref.without_const())\n }\n "}, {"sha": "06d9c10386e7c4682037b3b64b259feb68abd943", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -279,7 +279,7 @@ fn predicates_reference_self(\n     trait_def_id: DefId,\n     supertraits_only: bool,\n ) -> SmallVec<[Span; 1]> {\n-    let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n     let predicates = if supertraits_only {\n         tcx.super_predicates_of(trait_def_id)\n     } else {\n@@ -661,9 +661,9 @@ fn object_ty_for_trait<'tcx>(\n     let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n     debug!(?trait_ref);\n \n-    let trait_predicate = trait_ref.map_bound(|trait_ref| {\n-        ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref))\n-    });\n+    let trait_predicate = ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n+        ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref),\n+    ));\n     debug!(?trait_predicate);\n \n     let pred: ty::Predicate<'tcx> = trait_ref.to_predicate(tcx);\n@@ -769,11 +769,10 @@ fn receiver_is_dispatchable<'tcx>(\n         let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n-        let unsize_predicate = ty::Binder::dummy(\n-            tcx.mk_trait_ref(unsize_did, [tcx.types.self_param, unsized_self_ty]),\n-        )\n-        .without_const()\n-        .to_predicate(tcx);\n+        let unsize_predicate =\n+            ty::TraitRef::new(tcx, unsize_did, [tcx.types.self_param, unsized_self_ty])\n+                .without_const()\n+                .to_predicate(tcx);\n \n         // U: Trait<Arg1, ..., ArgN>\n         let trait_predicate = {\n@@ -782,7 +781,7 @@ fn receiver_is_dispatchable<'tcx>(\n                 if param.index == 0 { unsized_self_ty.into() } else { tcx.mk_param_from_def(param) }\n             });\n \n-            ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, substs)).to_predicate(tcx)\n+            ty::TraitRef::new(tcx, trait_def_id, substs).to_predicate(tcx)\n         };\n \n         let caller_bounds =\n@@ -797,9 +796,8 @@ fn receiver_is_dispatchable<'tcx>(\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>\n     let obligation = {\n-        let predicate = ty::Binder::dummy(\n-            tcx.mk_trait_ref(dispatch_from_dyn_did, [receiver_ty, unsized_receiver_ty]),\n-        );\n+        let predicate =\n+            ty::TraitRef::new(tcx, dispatch_from_dyn_did, [receiver_ty, unsized_receiver_ty]);\n \n         Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate)\n     };\n@@ -882,7 +880,8 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<TyCtxt<'tcx>>>(\n \n                     // Compute supertraits of current trait lazily.\n                     if self.supertraits.is_none() {\n-                        let trait_ref = ty::TraitRef::identity(self.tcx, self.trait_def_id);\n+                        let trait_ref =\n+                            ty::Binder::dummy(ty::TraitRef::identity(self.tcx, self.trait_def_id));\n                         self.supertraits = Some(\n                             traits::supertraits(self.tcx, trait_ref).map(|t| t.def_id()).collect(),\n                         );"}, {"sha": "8c74860cdf341023bf27efc82e731003c78307bf", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1319,7 +1319,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let trait_substs =\n             obligation.predicate.substs.truncate_to(tcx, tcx.generics_of(trait_def_id));\n         // FIXME(named-returns): Binders\n-        let trait_predicate = ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, trait_substs));\n+        let trait_predicate = ty::TraitRef::new(tcx, trait_def_id, trait_substs);\n \n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n@@ -1682,10 +1682,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                             if selcx.infcx.predicate_must_hold_modulo_regions(\n                                 &obligation.with(\n                                     selcx.tcx(),\n-                                    ty::Binder::dummy(\n-                                        selcx.tcx().at(obligation.cause.span()).mk_trait_ref(LangItem::Sized, [self_ty]),\n-                                    )\n-                                    .without_const(),\n+                                    ty::TraitRef::from_lang_item(selcx.tcx(), LangItem::Sized, obligation.cause.span(),[self_ty])\n+                                        .without_const(),\n                                 ),\n                             ) =>\n                         {\n@@ -1948,8 +1946,11 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n             )\n         });\n         if check_is_sized {\n-            let sized_predicate = ty::Binder::dummy(\n-                tcx.at(obligation.cause.span()).mk_trait_ref(LangItem::Sized, [self_ty]),\n+            let sized_predicate = ty::TraitRef::from_lang_item(\n+                tcx,\n+                LangItem::Sized,\n+                obligation.cause.span(),\n+                [self_ty],\n             )\n             .without_const();\n             obligations.push(obligation.with(tcx, sized_predicate));"}, {"sha": "33f502f8182854f8a8b3a133e287f8a20b1f3755", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -57,6 +57,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         if obligation.polarity() == ty::ImplPolarity::Negative {\n             self.assemble_candidates_for_trait_alias(obligation, &mut candidates);\n             self.assemble_candidates_from_impls(obligation, &mut candidates);\n+            self.assemble_candidates_from_caller_bounds(stack, &mut candidates)?;\n         } else {\n             self.assemble_candidates_for_trait_alias(obligation, &mut candidates);\n \n@@ -187,6 +188,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // Keep only those bounds which may apply, and propagate overflow if it occurs.\n         for bound in matching_bounds {\n+            if bound.skip_binder().polarity != stack.obligation.predicate.skip_binder().polarity {\n+                continue;\n+            }\n+\n             // FIXME(oli-obk): it is suspicious that we are dropping the constness and\n             // polarity here.\n             let wc = self.where_clause_may_apply(stack, bound.map_bound(|t| t.trait_ref))?;\n@@ -454,7 +459,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 obligation.param_env,\n                 self.tcx().mk_predicate(obligation.predicate.map_bound(|mut pred| {\n                     pred.trait_ref =\n-                        self.tcx().mk_trait_ref(fn_ptr_trait, [pred.trait_ref.self_ty()]);\n+                        ty::TraitRef::new(self.tcx(), fn_ptr_trait, [pred.trait_ref.self_ty()]);\n                     ty::PredicateKind::Clause(ty::Clause::Trait(pred))\n                 })),\n             );\n@@ -629,7 +634,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // <ty as Deref>\n-        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n+        let trait_ref = ty::TraitRef::new(tcx, tcx.lang_items().deref_trait()?, [ty]);\n \n         let obligation =\n             traits::Obligation::new(tcx, cause.clone(), param_env, ty::Binder::dummy(trait_ref));"}, {"sha": "422285d947400a7153499990fb7e8eb03a61ca1e", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -646,8 +646,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             output_ty,\n             &mut nested,\n         );\n-        let tr =\n-            ty::Binder::dummy(self.tcx().at(cause.span).mk_trait_ref(LangItem::Sized, [output_ty]));\n+        let tr = ty::TraitRef::from_lang_item(self.tcx(), LangItem::Sized, cause.span, [output_ty]);\n         nested.push(Obligation::new(self.infcx.tcx, cause, obligation.param_env, tr));\n \n         Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested })\n@@ -1050,8 +1049,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr =\n-                    ty::Binder::dummy(tcx.at(cause.span).mk_trait_ref(LangItem::Sized, [source]));\n+                let tr = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, cause.span, [source]);\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type\n@@ -1121,7 +1119,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // Construct the nested `TailField<T>: Unsize<TailField<U>>` predicate.\n                 let tail_unsize_obligation = obligation.with(\n                     tcx,\n-                    tcx.mk_trait_ref(obligation.predicate.def_id(), [source_tail, target_tail]),\n+                    ty::TraitRef::new(\n+                        tcx,\n+                        obligation.predicate.def_id(),\n+                        [source_tail, target_tail],\n+                    ),\n                 );\n                 nested.push(tail_unsize_obligation);\n             }\n@@ -1146,8 +1148,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 nested.extend(obligations);\n \n                 // Add a nested `T: Unsize<U>` predicate.\n-                let last_unsize_obligation = obligation\n-                    .with(tcx, tcx.mk_trait_ref(obligation.predicate.def_id(), [a_last, b_last]));\n+                let last_unsize_obligation = obligation.with(\n+                    tcx,\n+                    ty::TraitRef::new(tcx, obligation.predicate.def_id(), [a_last, b_last]),\n+                );\n                 nested.push(last_unsize_obligation);\n             }\n \n@@ -1271,10 +1275,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         self_ty.rebind(ty::TraitPredicate {\n-                            trait_ref: self\n-                                .tcx()\n-                                .at(cause.span)\n-                                .mk_trait_ref(LangItem::Destruct, [nested_ty]),\n+                            trait_ref: ty::TraitRef::from_lang_item(\n+                                self.tcx(),\n+                                LangItem::Destruct,\n+                                cause.span,\n+                                [nested_ty],\n+                            ),\n                             constness: ty::BoundConstness::ConstIfConst,\n                             polarity: ty::ImplPolarity::Positive,\n                         }),\n@@ -1295,10 +1301,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // or it's an ADT (and we need to check for a custom impl during selection)\n                 _ => {\n                     let predicate = self_ty.rebind(ty::TraitPredicate {\n-                        trait_ref: self\n-                            .tcx()\n-                            .at(cause.span)\n-                            .mk_trait_ref(LangItem::Destruct, [nested_ty]),\n+                        trait_ref: ty::TraitRef::from_lang_item(\n+                            self.tcx(),\n+                            LangItem::Destruct,\n+                            cause.span,\n+                            [nested_ty],\n+                        ),\n                         constness: ty::BoundConstness::ConstIfConst,\n                         polarity: ty::ImplPolarity::Positive,\n                     });"}, {"sha": "246d3ea2ef2989984c39b7679476d5b60833aa7b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -2413,7 +2413,7 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n                     self.tcx(),\n                     cause.clone(),\n                     param_env,\n-                    self.tcx().mk_trait_ref(trait_def_id, [normalized_ty]),\n+                    ty::TraitRef::new(self.tcx(), trait_def_id, [normalized_ty]),\n                 );\n                 obligations.push(obligation);\n                 obligations"}, {"sha": "7b7e297c64b16937bc02d7d2d1a73797499eb13e", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -262,7 +262,7 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n         TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n         TupleArgumentsFlag::Yes => tcx.mk_tup(sig.skip_binder().inputs()),\n     };\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, arguments_tuple]);\n+    let trait_ref = ty::TraitRef::new(tcx, fn_trait_def_id, [self_ty, arguments_tuple]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n \n@@ -273,7 +273,7 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n     assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n+    let trait_ref = ty::TraitRef::new(tcx, fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.yield_ty, sig.return_ty))\n }\n \n@@ -284,7 +284,7 @@ pub fn future_trait_ref_and_outputs<'tcx>(\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>)> {\n     assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty]);\n+    let trait_ref = ty::TraitRef::new(tcx, fn_trait_def_id, [self_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.return_ty))\n }\n "}, {"sha": "f7a3126b4aa71a74c94aab2c15b414416c10f65a", "filename": "compiler/rustc_trait_selection/src/traits/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -359,7 +359,7 @@ pub(crate) fn vtable_trait_upcasting_coercion_new_vptr_slot<'tcx>(\n     // this has been typecked-before, so diagnostics is not really needed.\n     let unsize_trait_did = tcx.require_lang_item(LangItem::Unsize, None);\n \n-    let trait_ref = tcx.mk_trait_ref(unsize_trait_did, [source, target]);\n+    let trait_ref = ty::TraitRef::new(tcx, unsize_trait_did, [source, target]);\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), ty::Binder::dummy(trait_ref))) {\n         Ok(ImplSource::TraitUpcasting(implsrc_traitcasting)) => {"}, {"sha": "22710c7c059a98128defa4225b02c68c03686d23", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -328,6 +328,13 @@ impl<'tcx> WfPredicates<'tcx> {\n         let tcx = self.tcx;\n         let trait_ref = &trait_pred.trait_ref;\n \n+        // Negative trait predicates don't require supertraits to hold, just\n+        // that their substs are WF.\n+        if trait_pred.polarity == ty::ImplPolarity::Negative {\n+            self.compute_negative_trait_pred(trait_ref);\n+            return;\n+        }\n+\n         // if the trait predicate is not const, the wf obligations should not be const as well.\n         let obligations = if trait_pred.constness == ty::BoundConstness::NotConst {\n             self.nominal_obligations_without_const(trait_ref.def_id, trait_ref.substs)\n@@ -393,6 +400,14 @@ impl<'tcx> WfPredicates<'tcx> {\n         );\n     }\n \n+    // Compute the obligations that are required for `trait_ref` to be WF,\n+    // given that it is a *negative* trait predicate.\n+    fn compute_negative_trait_pred(&mut self, trait_ref: &ty::TraitRef<'tcx>) {\n+        for arg in trait_ref.substs {\n+            self.compute(arg);\n+        }\n+    }\n+\n     /// Pushes the obligations required for `trait_ref::Item` to be WF\n     /// into `self.out`.\n     fn compute_projection(&mut self, data: ty::AliasTy<'tcx>) {\n@@ -448,7 +463,8 @@ impl<'tcx> WfPredicates<'tcx> {\n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n-            let trait_ref = self.tcx.at(cause.span).mk_trait_ref(LangItem::Sized, [subty]);\n+            let trait_ref =\n+                ty::TraitRef::from_lang_item(self.tcx, LangItem::Sized, cause.span, [subty]);\n             self.out.push(traits::Obligation::with_depth(\n                 self.tcx,\n                 cause,"}, {"sha": "78efcce572d4bf9333c2083b598aafb73d511cb2", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -62,9 +62,8 @@ fn sized_constraint_for_ty<'tcx>(\n             // it on the impl.\n \n             let Some(sized_trait) = tcx.lang_items().sized_trait() else { return vec![ty] };\n-            let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(sized_trait, [ty]))\n-                .without_const()\n-                .to_predicate(tcx);\n+            let sized_predicate =\n+                ty::TraitRef::new(tcx, sized_trait, [ty]).without_const().to_predicate(tcx);\n             let predicates = tcx.predicates_of(adtdef.did()).predicates;\n             if predicates.iter().any(|(p, _)| *p == sized_predicate) { vec![] } else { vec![ty] }\n         }"}, {"sha": "18f25aec5feee85515806213714d6389b2487b4d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -101,6 +101,7 @@\n #![feature(array_into_iter_constructors)]\n #![feature(array_methods)]\n #![feature(array_windows)]\n+#![feature(ascii_char)]\n #![feature(assert_matches)]\n #![feature(async_iterator)]\n #![feature(coerce_unsized)]"}, {"sha": "b9ef76c109abf8656b9c1315f174f8640f0cdb81", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -2526,6 +2526,15 @@ impl<T: fmt::Display + ?Sized> ToString for T {\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n+#[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+impl ToString for core::ascii::Char {\n+    #[inline]\n+    fn to_string(&self) -> String {\n+        self.as_str().to_owned()\n+    }\n+}\n+\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"char_to_string_specialization\", since = \"1.46.0\")]\n impl ToString for char {"}, {"sha": "6750d7c071144f7616236bd4905dc75ce1820d12", "filename": "library/core/src/array/ascii.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Farray%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Farray%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fascii.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,34 @@\n+use crate::ascii;\n+\n+#[cfg(not(test))]\n+impl<const N: usize> [u8; N] {\n+    /// Converts this array of bytes into a array of ASCII characters,\n+    /// or returns `None` if any of the characters is non-ASCII.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[must_use]\n+    #[inline]\n+    pub fn as_ascii(&self) -> Option<&[ascii::Char; N]> {\n+        if self.is_ascii() {\n+            // SAFETY: Just checked that it's ASCII\n+            Some(unsafe { self.as_ascii_unchecked() })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Converts this array of bytes into a array of ASCII characters,\n+    /// without checking whether they're valid.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Every byte in the array must be in `0..=127`, or else this is UB.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[must_use]\n+    #[inline]\n+    pub const unsafe fn as_ascii_unchecked(&self) -> &[ascii::Char; N] {\n+        let byte_ptr: *const [u8; N] = self;\n+        let ascii_ptr = byte_ptr as *const [ascii::Char; N];\n+        // SAFETY: The caller promised all the bytes are ASCII\n+        unsafe { &*ascii_ptr }\n+    }\n+}"}, {"sha": "bdb4c975909e0664ec4fcc5938b56338efe80480", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -17,6 +17,7 @@ use crate::ops::{\n };\n use crate::slice::{Iter, IterMut};\n \n+mod ascii;\n mod drain;\n mod equality;\n mod iter;"}, {"sha": "7fd14a7e1eae8cd73f8d1a5942170aeb485c969d", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -14,6 +14,10 @@ use crate::fmt;\n use crate::iter::FusedIterator;\n use crate::num::NonZeroUsize;\n \n+mod ascii_char;\n+#[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+pub use ascii_char::AsciiChar as Char;\n+\n /// An iterator over the escaped version of a byte.\n ///\n /// This `struct` is created by the [`escape_default`] function. See its"}, {"sha": "f093a0990d1a90ff1e93d7e74dfceb12d38ef36c", "filename": "library/core/src/ascii/ascii_char.rs", "status": "added", "additions": 565, "deletions": 0, "changes": 565, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fascii%2Fascii_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fascii%2Fascii_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii%2Fascii_char.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,565 @@\n+//! This uses the name `AsciiChar`, even though it's not exposed that way right now,\n+//! because it avoids a whole bunch of \"are you sure you didn't mean `char`?\"\n+//! suggestions from rustc if you get anything slightly wrong in here, and overall\n+//! helps with clarity as we're also referring to `char` intentionally in here.\n+\n+use crate::fmt;\n+use crate::mem::transmute;\n+\n+/// One of the 128 Unicode characters from U+0000 through U+007F,\n+/// often known as the [ASCII] subset.\n+///\n+/// Officially, this is the first [block] in Unicode, _Basic Latin_.\n+/// For details, see the [*C0 Controls and Basic Latin*][chart] code chart.\n+///\n+/// This block was based on older 7-bit character code standards such as\n+/// ANSI X3.4-1977, ISO 646-1973, and [NIST FIPS 1-2].\n+///\n+/// # When to use this\n+///\n+/// The main advantage of this subset is that it's always valid UTF-8.  As such,\n+/// the `&[ascii::Char]` -> `&str` conversion function (as well as other related\n+/// ones) are O(1): *no* runtime checks are needed.\n+///\n+/// If you're consuming strings, you should usually handle Unicode and thus\n+/// accept `str`s, not limit yourself to `ascii::Char`s.\n+///\n+/// However, certain formats are intentionally designed to produce ASCII-only\n+/// output in order to be 8-bit-clean.  In those cases, it can be simpler and\n+/// faster to generate `ascii::Char`s instead of dealing with the variable width\n+/// properties of general UTF-8 encoded strings, while still allowing the result\n+/// to be used freely with other Rust things that deal in general `str`s.\n+///\n+/// For example, a UUID library might offer a way to produce the string\n+/// representation of a UUID as an `[ascii::Char; 36]` to avoid memory\n+/// allocation yet still allow it to be used as UTF-8 via `as_str` without\n+/// paying for validation (or needing `unsafe` code) the way it would if it\n+/// were provided as a `[u8; 36]`.\n+///\n+/// # Layout\n+///\n+/// This type is guaranteed to have a size and alignment of 1 byte.\n+///\n+/// # Names\n+///\n+/// The variants on this type are [Unicode names][NamesList] of the characters\n+/// in upper camel case, with a few tweaks:\n+/// - For `<control>` characters, the primary alias name is used.\n+/// - `LATIN` is dropped, as this block has no non-latin letters.\n+/// - `LETTER` is dropped, as `CAPITAL`/`SMALL` suffices in this block.\n+/// - `DIGIT`s use a single digit rather than writing out `ZERO`, `ONE`, etc.\n+///\n+/// [ASCII]: https://www.unicode.org/glossary/index.html#ASCII\n+/// [block]: https://www.unicode.org/glossary/index.html#block\n+/// [chart]: https://www.unicode.org/charts/PDF/U0000.pdf\n+/// [NIST FIPS 1-2]: https://nvlpubs.nist.gov/nistpubs/Legacy/FIPS/fipspub1-2-1977.pdf\n+/// [NamesList]: https://www.unicode.org/Public/15.0.0/ucd/NamesList.txt\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+#[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+#[repr(u8)]\n+pub enum AsciiChar {\n+    /// U+0000\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Null = 0,\n+    /// U+0001\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    StartOfHeading = 1,\n+    /// U+0002\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    StartOfText = 2,\n+    /// U+0003\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    EndOfText = 3,\n+    /// U+0004\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    EndOfTransmission = 4,\n+    /// U+0005\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Enquiry = 5,\n+    /// U+0006\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Acknowledge = 6,\n+    /// U+0007\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Bell = 7,\n+    /// U+0008\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Backspace = 8,\n+    /// U+0009\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CharacterTabulation = 9,\n+    /// U+000A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LineFeed = 10,\n+    /// U+000B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LineTabulation = 11,\n+    /// U+000C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    FormFeed = 12,\n+    /// U+000D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CarriageReturn = 13,\n+    /// U+000E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    ShiftOut = 14,\n+    /// U+000F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    ShiftIn = 15,\n+    /// U+0010\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DataLinkEscape = 16,\n+    /// U+0011\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DeviceControlOne = 17,\n+    /// U+0012\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DeviceControlTwo = 18,\n+    /// U+0013\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DeviceControlThree = 19,\n+    /// U+0014\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DeviceControlFour = 20,\n+    /// U+0015\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    NegativeAcknowledge = 21,\n+    /// U+0016\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SynchronousIdle = 22,\n+    /// U+0017\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    EndOfTransmissionBlock = 23,\n+    /// U+0018\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Cancel = 24,\n+    /// U+0019\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    EndOfMedium = 25,\n+    /// U+001A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Substitute = 26,\n+    /// U+001B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Escape = 27,\n+    /// U+001C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    InformationSeparatorFour = 28,\n+    /// U+001D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    InformationSeparatorThree = 29,\n+    /// U+001E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    InformationSeparatorTwo = 30,\n+    /// U+001F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    InformationSeparatorOne = 31,\n+    /// U+0020\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Space = 32,\n+    /// U+0021\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    ExclamationMark = 33,\n+    /// U+0022\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    QuotationMark = 34,\n+    /// U+0023\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    NumberSign = 35,\n+    /// U+0024\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    DollarSign = 36,\n+    /// U+0025\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    PercentSign = 37,\n+    /// U+0026\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Ampersand = 38,\n+    /// U+0027\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Apostrophe = 39,\n+    /// U+0028\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LeftParenthesis = 40,\n+    /// U+0029\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    RightParenthesis = 41,\n+    /// U+002A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Asterisk = 42,\n+    /// U+002B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    PlusSign = 43,\n+    /// U+002C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Comma = 44,\n+    /// U+002D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    HyphenMinus = 45,\n+    /// U+002E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    FullStop = 46,\n+    /// U+002F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Solidus = 47,\n+    /// U+0030\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit0 = 48,\n+    /// U+0031\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit1 = 49,\n+    /// U+0032\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit2 = 50,\n+    /// U+0033\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit3 = 51,\n+    /// U+0034\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit4 = 52,\n+    /// U+0035\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit5 = 53,\n+    /// U+0036\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit6 = 54,\n+    /// U+0037\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit7 = 55,\n+    /// U+0038\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit8 = 56,\n+    /// U+0039\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Digit9 = 57,\n+    /// U+003A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Colon = 58,\n+    /// U+003B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Semicolon = 59,\n+    /// U+003C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LessThanSign = 60,\n+    /// U+003D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    EqualsSign = 61,\n+    /// U+003E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    GreaterThanSign = 62,\n+    /// U+003F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    QuestionMark = 63,\n+    /// U+0040\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CommercialAt = 64,\n+    /// U+0041\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalA = 65,\n+    /// U+0042\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalB = 66,\n+    /// U+0043\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalC = 67,\n+    /// U+0044\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalD = 68,\n+    /// U+0045\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalE = 69,\n+    /// U+0046\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalF = 70,\n+    /// U+0047\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalG = 71,\n+    /// U+0048\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalH = 72,\n+    /// U+0049\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalI = 73,\n+    /// U+004A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalJ = 74,\n+    /// U+004B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalK = 75,\n+    /// U+004C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalL = 76,\n+    /// U+004D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalM = 77,\n+    /// U+004E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalN = 78,\n+    /// U+004F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalO = 79,\n+    /// U+0050\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalP = 80,\n+    /// U+0051\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalQ = 81,\n+    /// U+0052\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalR = 82,\n+    /// U+0053\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalS = 83,\n+    /// U+0054\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalT = 84,\n+    /// U+0055\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalU = 85,\n+    /// U+0056\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalV = 86,\n+    /// U+0057\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalW = 87,\n+    /// U+0058\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalX = 88,\n+    /// U+0059\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalY = 89,\n+    /// U+005A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CapitalZ = 90,\n+    /// U+005B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LeftSquareBracket = 91,\n+    /// U+005C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    ReverseSolidus = 92,\n+    /// U+005D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    RightSquareBracket = 93,\n+    /// U+005E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    CircumflexAccent = 94,\n+    /// U+005F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LowLine = 95,\n+    /// U+0060\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    GraveAccent = 96,\n+    /// U+0061\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallA = 97,\n+    /// U+0062\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallB = 98,\n+    /// U+0063\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallC = 99,\n+    /// U+0064\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallD = 100,\n+    /// U+0065\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallE = 101,\n+    /// U+0066\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallF = 102,\n+    /// U+0067\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallG = 103,\n+    /// U+0068\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallH = 104,\n+    /// U+0069\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallI = 105,\n+    /// U+006A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallJ = 106,\n+    /// U+006B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallK = 107,\n+    /// U+006C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallL = 108,\n+    /// U+006D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallM = 109,\n+    /// U+006E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallN = 110,\n+    /// U+006F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallO = 111,\n+    /// U+0070\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallP = 112,\n+    /// U+0071\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallQ = 113,\n+    /// U+0072\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallR = 114,\n+    /// U+0073\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallS = 115,\n+    /// U+0074\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallT = 116,\n+    /// U+0075\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallU = 117,\n+    /// U+0076\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallV = 118,\n+    /// U+0077\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallW = 119,\n+    /// U+0078\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallX = 120,\n+    /// U+0079\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallY = 121,\n+    /// U+007A\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    SmallZ = 122,\n+    /// U+007B\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    LeftCurlyBracket = 123,\n+    /// U+007C\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    VerticalLine = 124,\n+    /// U+007D\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    RightCurlyBracket = 125,\n+    /// U+007E\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Tilde = 126,\n+    /// U+007F\n+    #[unstable(feature = \"ascii_char_variants\", issue = \"110998\")]\n+    Delete = 127,\n+}\n+\n+impl AsciiChar {\n+    /// Creates an ascii character from the byte `b`,\n+    /// or returns `None` if it's too large.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn from_u8(b: u8) -> Option<Self> {\n+        if b <= 127 {\n+            // SAFETY: Just checked that `b` is in-range\n+            Some(unsafe { Self::from_u8_unchecked(b) })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Creates an ASCII character from the byte `b`,\n+    /// without checking whether it's valid.\n+    ///\n+    /// # Safety\n+    ///\n+    /// `b` must be in `0..=127`, or else this is UB.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const unsafe fn from_u8_unchecked(b: u8) -> Self {\n+        // SAFETY: Our safety precondition is that `b` is in-range.\n+        unsafe { transmute(b) }\n+    }\n+\n+    /// When passed the *number* `0`, `1`, \u2026, `9`, returns the *character*\n+    /// `'0'`, `'1'`, \u2026, `'9'` respectively.\n+    ///\n+    /// If `d >= 10`, returns `None`.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn digit(d: u8) -> Option<Self> {\n+        if d < 10 {\n+            // SAFETY: Just checked it's in-range.\n+            Some(unsafe { Self::digit_unchecked(d) })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// When passed the *number* `0`, `1`, \u2026, `9`, returns the *character*\n+    /// `'0'`, `'1'`, \u2026, `'9'` respectively, without checking that it's in-range.\n+    ///\n+    /// # Safety\n+    ///\n+    /// This is immediate UB if called with `d > 64`.\n+    ///\n+    /// If `d >= 10` and `d <= 64`, this is allowed to return any value or panic.\n+    /// Notably, it should not be expected to return hex digits, or any other\n+    /// reasonable extension of the decimal digits.\n+    ///\n+    /// (This lose safety condition is intended to simplify soundness proofs\n+    /// when writing code using this method, since the implementation doesn't\n+    /// need something really specific, not to make those other arguments do\n+    /// something useful. It might be tightened before stabilization.)\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const unsafe fn digit_unchecked(d: u8) -> Self {\n+        debug_assert!(d < 10);\n+\n+        // SAFETY: `'0'` through `'9'` are U+00030 through U+0039,\n+        // so because `d` must be 64 or less the addition can return at most\n+        // 112 (0x70), which doesn't overflow and is within the ASCII range.\n+        unsafe {\n+            let byte = b'0'.unchecked_add(d);\n+            Self::from_u8_unchecked(byte)\n+        }\n+    }\n+\n+    /// Gets this ASCII character as a byte.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_u8(self) -> u8 {\n+        self as u8\n+    }\n+\n+    /// Gets this ASCII character as a `char` Unicode Scalar Value.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_char(self) -> char {\n+        self as u8 as char\n+    }\n+\n+    /// Views this ASCII character as a one-code-unit UTF-8 `str`.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_str(&self) -> &str {\n+        crate::slice::from_ref(self).as_str()\n+    }\n+}\n+\n+impl [AsciiChar] {\n+    /// Views this slice of ASCII characters as a UTF-8 `str`.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_str(&self) -> &str {\n+        let ascii_ptr: *const Self = self;\n+        let str_ptr = ascii_ptr as *const str;\n+        // SAFETY: Each ASCII codepoint in UTF-8 is encoded as one single-byte\n+        // code unit having the same value as the ASCII byte.\n+        unsafe { &*str_ptr }\n+    }\n+\n+    /// Views this slice of ASCII characters as a slice of `u8` bytes.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_bytes(&self) -> &[u8] {\n+        self.as_str().as_bytes()\n+    }\n+}\n+\n+#[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+impl fmt::Display for AsciiChar {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        <str as fmt::Display>::fmt(self.as_str(), f)\n+    }\n+}"}, {"sha": "1dfa9c34db14c45ac474d99cbbd65a874ba2ec7a", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,5 +1,6 @@\n //! impl char {}\n \n+use crate::ascii;\n use crate::slice;\n use crate::str::from_utf8_unchecked_mut;\n use crate::unicode::printable::is_printable;\n@@ -1101,6 +1102,24 @@ impl char {\n         *self as u32 <= 0x7F\n     }\n \n+    /// Returns `Some` if the value is within the ASCII range,\n+    /// or `None` if it's not.\n+    ///\n+    /// This is preferred to [`Self::is_ascii`] when you're passing the value\n+    /// along to something else that can take [`ascii::Char`] rather than\n+    /// needing to check again for itself whether the value is in ASCII.\n+    #[must_use]\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_ascii(&self) -> Option<ascii::Char> {\n+        if self.is_ascii() {\n+            // SAFETY: Just checked that this is ASCII.\n+            Some(unsafe { ascii::Char::from_u8_unchecked(*self as u8) })\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Makes a copy of the value in its ASCII upper case equivalent.\n     ///\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',"}, {"sha": "b85894259f1f34e7654f8e1d4a28848269851356", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -202,6 +202,7 @@ mod c_long_definition {\n //     would be uninhabited and at least dereferencing such pointers would\n //     be UB.\n #[doc = include_str!(\"c_void.md\")]\n+#[cfg_attr(not(bootstrap), lang = \"c_void\")]\n #[repr(u8)]\n #[stable(feature = \"core_c_void\", since = \"1.30.0\")]\n pub enum c_void {"}, {"sha": "ed0c05a68631945770f2c13b86194e36e11ced0c", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -107,6 +107,7 @@\n #![feature(const_arguments_as_str)]\n #![feature(const_array_from_ref)]\n #![feature(const_array_into_iter_constructors)]\n+#![feature(const_assume)]\n #![feature(const_bigint_helper_methods)]\n #![feature(const_black_box)]\n #![feature(const_caller_location)]"}, {"sha": "08444421dca08c2acef25eb161a25e6436ab6d1f", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -472,7 +472,16 @@ impl u8 {\n     #[rustc_const_stable(feature = \"const_u8_is_ascii\", since = \"1.43.0\")]\n     #[inline]\n     pub const fn is_ascii(&self) -> bool {\n-        *self & 128 == 0\n+        *self <= 127\n+    }\n+\n+    /// If the value of this byte is within the ASCII range, returns it as an\n+    /// [ASCII character](ascii::Char).  Otherwise, returns `None`.\n+    #[must_use]\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[inline]\n+    pub const fn as_ascii(&self) -> Option<ascii::Char> {\n+        ascii::Char::from_u8(*self)\n     }\n \n     /// Makes a copy of the value in its ASCII upper case equivalent."}, {"sha": "74a325b89d442a1f3b614216e38541edeaa188ea", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -713,6 +713,32 @@ macro_rules! nonzero_signed_operations {\n                     unsafe { $Uty::new_unchecked(self.get().unsigned_abs()) }\n                 }\n \n+                /// Returns `true` if `self` is positive and `false` if the\n+                /// number is negative.\n+                ///\n+                /// # Example\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_negation_ops)]\n+                ///\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n+                #[doc = concat!(\"let pos_five = \", stringify!($Ty), \"::new(5)?;\")]\n+                #[doc = concat!(\"let neg_five = \", stringify!($Ty), \"::new(-5)?;\")]\n+                ///\n+                /// assert!(pos_five.is_positive());\n+                /// assert!(!neg_five.is_positive());\n+                /// # Some(())\n+                /// # }\n+                /// ```\n+                #[must_use]\n+                #[inline]\n+                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                pub const fn is_positive(self) -> bool {\n+                    self.get().is_positive()\n+                }\n+\n                 /// Returns `true` if `self` is negative and `false` if the\n                 /// number is positive.\n                 ///"}, {"sha": "e06ccb5b2870ca3fa67ba0d1d95bc3b3c6cff26b", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -610,6 +610,9 @@ mod prim_pointer {}\n /// if the element type allows it. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n+/// Arrays of sizes from 1 to 12 (inclusive) implement [`From<Tuple>`], where `Tuple`\n+/// is a homogenous [prim@tuple] of appropriate length.\n+///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n ///\n@@ -672,6 +675,13 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n+/// Arrays can be created from homogenous tuples of appropriate length:\n+///\n+/// ```\n+/// let tuple: (u32, u32, u32) = (1, 2, 3);\n+/// let array: [u32; 3] = tuple.into();\n+/// ```\n+///\n /// # Editions\n ///\n /// Prior to Rust 1.53, arrays did not implement [`IntoIterator`] by value, so the method call\n@@ -774,6 +784,7 @@ mod prim_pointer {}\n /// [`Borrow`]: borrow::Borrow\n /// [`BorrowMut`]: borrow::BorrowMut\n /// [slice pattern]: ../reference/patterns.html#slice-patterns\n+/// [`From<Tuple>`]: convert::From\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n@@ -1000,7 +1011,9 @@ mod prim_str {}\n /// * [`Debug`]\n /// * [`Default`]\n /// * [`Hash`]\n+/// * [`From<[T; N]>`][from]\n ///\n+/// [from]: convert::From\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash\n ///\n@@ -1051,6 +1064,13 @@ mod prim_str {}\n /// assert_eq!(y, 5);\n /// ```\n ///\n+/// Homogenous tuples can be created from arrays of appropriate length:\n+///\n+/// ```\n+/// let array: [u32; 3] = [1, 2, 3];\n+/// let tuple: (u32, u32, u32) = array.into();\n+/// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_tuple {}\n "}, {"sha": "4737ff5d756d1bb0aa91e3dc0862be33db347b13", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1632,8 +1632,8 @@ pub(crate) const unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usiz\n     // FIXME(#75598): Direct use of these intrinsics improves codegen significantly at opt-level <=\n     // 1, where the method versions of these operations are not inlined.\n     use intrinsics::{\n-        cttz_nonzero, exact_div, mul_with_overflow, unchecked_rem, unchecked_shl, unchecked_shr,\n-        unchecked_sub, wrapping_add, wrapping_mul, wrapping_sub,\n+        assume, cttz_nonzero, exact_div, mul_with_overflow, unchecked_rem, unchecked_shl,\n+        unchecked_shr, unchecked_sub, wrapping_add, wrapping_mul, wrapping_sub,\n     };\n \n     /// Calculate multiplicative modular inverse of `x` modulo `m`.\n@@ -1724,12 +1724,18 @@ pub(crate) const unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usiz\n         // in a branch-free way and then bitwise-OR it with whatever result the `-p mod a`\n         // computation produces.\n \n+        let aligned_address = wrapping_add(addr, a_minus_one) & wrapping_sub(0, a);\n+        let byte_offset = wrapping_sub(aligned_address, addr);\n+        // FIXME: Remove the assume after <https://github.com/llvm/llvm-project/issues/62502>\n+        // SAFETY: Masking by `-a` can only affect the low bits, and thus cannot have reduced\n+        // the value by more than `a-1`, so even though the intermediate values might have\n+        // wrapped, the byte_offset is always in `[0, a)`.\n+        unsafe { assume(byte_offset < a) };\n+\n         // SAFETY: `stride == 0` case has been handled by the special case above.\n         let addr_mod_stride = unsafe { unchecked_rem(addr, stride) };\n \n         return if addr_mod_stride == 0 {\n-            let aligned_address = wrapping_add(addr, a_minus_one) & wrapping_sub(0, a);\n-            let byte_offset = wrapping_sub(aligned_address, addr);\n             // SAFETY: `stride` is non-zero. This is guaranteed to divide exactly as well, because\n             // addr has been verified to be aligned to the original type\u2019s alignment requirements.\n             unsafe { exact_div(byte_offset, stride) }"}, {"sha": "7bae6692ad4ed0f6f7a1e60bb560dd21636c0482", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -16,6 +16,36 @@ impl [u8] {\n         is_ascii(self)\n     }\n \n+    /// If this slice [`is_ascii`](Self::is_ascii), returns it as a slice of\n+    /// [ASCII characters](`ascii::Char`), otherwise returns `None`.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[must_use]\n+    #[inline]\n+    pub fn as_ascii(&self) -> Option<&[ascii::Char]> {\n+        if self.is_ascii() {\n+            // SAFETY: Just checked that it's ASCII\n+            Some(unsafe { self.as_ascii_unchecked() })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Converts this slice of bytes into a slice of ASCII characters,\n+    /// without checking whether they're valid.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Every byte in the slice must be in `0..=127`, or else this is UB.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[must_use]\n+    #[inline]\n+    pub const unsafe fn as_ascii_unchecked(&self) -> &[ascii::Char] {\n+        let byte_ptr: *const [u8] = self;\n+        let ascii_ptr = byte_ptr as *const [ascii::Char];\n+        // SAFETY: The caller promised all the bytes are ASCII\n+        unsafe { &*ascii_ptr }\n+    }\n+\n     /// Checks that two slices are an ASCII case-insensitive match.\n     ///\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,"}, {"sha": "d2d0dd3387fbc890569da3f3289048e1934f7093", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -124,12 +124,10 @@ macro_rules! iterator {\n             fn next(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n \n-                // SAFETY: `assume` calls are safe since a slice's start pointer\n-                // must be non-null, and slices over non-ZSTs must also have a\n-                // non-null end pointer. The call to `next_unchecked!` is safe\n-                // since we check if the iterator is empty first.\n+                // SAFETY: `assume` call is safe because slices over non-ZSTs must\n+                // have a non-null end pointer. The call to `next_unchecked!` is\n+                // safe since we check if the iterator is empty first.\n                 unsafe {\n-                    assume(!self.ptr.as_ptr().is_null());\n                     if !<T>::IS_ZST {\n                         assume(!self.end.is_null());\n                     }\n@@ -339,12 +337,10 @@ macro_rules! iterator {\n             fn next_back(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n \n-                // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,\n-                // and slices over non-ZSTs must also have a non-null end pointer.\n-                // The call to `next_back_unchecked!` is safe since we check if the iterator is\n-                // empty first.\n+                // SAFETY: `assume` call is safe because slices over non-ZSTs must\n+                // have a non-null end pointer. The call to `next_back_unchecked!`\n+                // is safe since we check if the iterator is empty first.\n                 unsafe {\n-                    assume(!self.ptr.as_ptr().is_null());\n                     if !<T>::IS_ZST {\n                         assume(!self.end.is_null());\n                     }"}, {"sha": "d4981af90d19e7946297fbf0b94dd4a910f2eed6", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -4257,7 +4257,7 @@ impl<T, const N: usize> [[T; N]] {\n     /// assert!(empty_slice_of_arrays.flatten().is_empty());\n     /// ```\n     #[unstable(feature = \"slice_flatten\", issue = \"95629\")]\n-    pub fn flatten(&self) -> &[T] {\n+    pub const fn flatten(&self) -> &[T] {\n         let len = if T::IS_ZST {\n             self.len().checked_mul(N).expect(\"slice len overflow\")\n         } else {"}, {"sha": "66fa9cf6f64c065e4b97d89ba74621913997fa1b", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -16,6 +16,7 @@ mod validations;\n use self::pattern::Pattern;\n use self::pattern::{DoubleEndedSearcher, ReverseSearcher, Searcher};\n \n+use crate::ascii;\n use crate::char::{self, EscapeDebugExtArgs};\n use crate::mem;\n use crate::slice::{self, SliceIndex};\n@@ -2366,6 +2367,16 @@ impl str {\n         self.as_bytes().is_ascii()\n     }\n \n+    /// If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\n+    /// of [ASCII characters](`ascii::Char`), otherwise returns `None`.\n+    #[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+    #[must_use]\n+    #[inline]\n+    pub fn as_ascii(&self) -> Option<&[ascii::Char]> {\n+        // Like in `is_ascii`, we can work on the bytes directly.\n+        self.as_bytes().as_ascii()\n+    }\n+\n     /// Checks that two strings are an ASCII case-insensitive match.\n     ///\n     /// Same as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,"}, {"sha": "2a8403c85a4eb015e10c40456e70f3d506d0f99d", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -100,6 +100,26 @@ macro_rules! tuple_impls {\n                 }\n             }\n         }\n+\n+        #[stable(feature = \"array_tuple_conv\", since = \"CURRENT_RUSTC_VERSION\")]\n+        impl<T> From<[T; ${count(T)}]> for ($(${ignore(T)} T,)+) {\n+            #[inline]\n+            #[allow(non_snake_case)]\n+            fn from(array: [T; ${count(T)}]) -> Self {\n+                let [$($T,)+] = array;\n+                ($($T,)+)\n+            }\n+        }\n+\n+        #[stable(feature = \"array_tuple_conv\", since = \"CURRENT_RUSTC_VERSION\")]\n+        impl<T> From<($(${ignore(T)} T,)+)> for [T; ${count(T)}] {\n+            #[inline]\n+            #[allow(non_snake_case)]\n+            fn from(tuple: ($(${ignore(T)} T,)+)) -> Self {\n+                let ($($T,)+) = tuple;\n+                [$($T,)+]\n+            }\n+        }\n     }\n }\n "}, {"sha": "b18ab50de123ecd01f09d44bdf8268754c824072", "filename": "library/std/src/ascii.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fascii.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -16,6 +16,9 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::ascii::{escape_default, EscapeDefault};\n \n+#[unstable(feature = \"ascii_char\", issue = \"110998\")]\n+pub use core::ascii::Char;\n+\n /// Extension methods for ASCII-subset only operations.\n ///\n /// Be aware that operations on seemingly non-ASCII characters can sometimes"}, {"sha": "a8a0b9f122d66ac60d99fbe1bf082b7eea36612e", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -919,6 +919,7 @@ fn symlink_noexist() {\n \n #[test]\n fn read_link() {\n+    let tmpdir = tmpdir();\n     if cfg!(windows) {\n         // directory symlink\n         assert_eq!(check!(fs::read_link(r\"C:\\Users\\All Users\")), Path::new(r\"C:\\ProgramData\"));\n@@ -933,8 +934,11 @@ fn read_link() {\n                 Path::new(r\"C:\\Users\")\n             );\n         }\n+        // Check that readlink works with non-drive paths on Windows.\n+        let link = tmpdir.join(\"link_unc\");\n+        check!(symlink_dir(r\"\\\\localhost\\c$\\\", &link));\n+        assert_eq!(check!(fs::read_link(&link)), Path::new(r\"\\\\localhost\\c$\\\"));\n     }\n-    let tmpdir = tmpdir();\n     let link = tmpdir.join(\"link\");\n     if !got_symlink_permission(&tmpdir) {\n         return;"}, {"sha": "e06ccb5b2870ca3fa67ba0d1d95bc3b3c6cff26b", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -610,6 +610,9 @@ mod prim_pointer {}\n /// if the element type allows it. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n+/// Arrays of sizes from 1 to 12 (inclusive) implement [`From<Tuple>`], where `Tuple`\n+/// is a homogenous [prim@tuple] of appropriate length.\n+///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n ///\n@@ -672,6 +675,13 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n+/// Arrays can be created from homogenous tuples of appropriate length:\n+///\n+/// ```\n+/// let tuple: (u32, u32, u32) = (1, 2, 3);\n+/// let array: [u32; 3] = tuple.into();\n+/// ```\n+///\n /// # Editions\n ///\n /// Prior to Rust 1.53, arrays did not implement [`IntoIterator`] by value, so the method call\n@@ -774,6 +784,7 @@ mod prim_pointer {}\n /// [`Borrow`]: borrow::Borrow\n /// [`BorrowMut`]: borrow::BorrowMut\n /// [slice pattern]: ../reference/patterns.html#slice-patterns\n+/// [`From<Tuple>`]: convert::From\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n@@ -1000,7 +1011,9 @@ mod prim_str {}\n /// * [`Debug`]\n /// * [`Default`]\n /// * [`Hash`]\n+/// * [`From<[T; N]>`][from]\n ///\n+/// [from]: convert::From\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash\n ///\n@@ -1051,6 +1064,13 @@ mod prim_str {}\n /// assert_eq!(y, 5);\n /// ```\n ///\n+/// Homogenous tuples can be created from arrays of appropriate length:\n+///\n+/// ```\n+/// let array: [u32; 3] = [1, 2, 3];\n+/// let tuple: (u32, u32, u32) = array.into();\n+/// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_tuple {}\n "}, {"sha": "77f645883102c392796d1c925008beb22483f157", "filename": "library/std/src/sys/common/thread_local/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,5 +1,10 @@\n #![unstable(feature = \"thread_local_internals\", reason = \"should not be necessary\", issue = \"none\")]\n \n+// There are three thread-local implementations: \"static\", \"fast\", \"OS\".\n+// The \"OS\" thread local key type is accessed via platform-specific API calls and is slow, while the\n+// \"fast\" key type is accessed via code generated via LLVM, where TLS keys are set up by the linker.\n+// \"static\" is for single-threaded platforms where a global static is sufficient.\n+\n cfg_if::cfg_if! {\n     if #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))] {\n         #[doc(hidden)]"}, {"sha": "5d48ce1e03bc359bd1f418a9d718918a292b5f04", "filename": "library/std/src/sys/common/thread_local/os_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -18,7 +18,7 @@ pub macro thread_local_inner {\n         ) -> $crate::option::Option<&'static $t> {\n             const INIT_EXPR: $t = $init;\n \n-                        // On platforms without `#[thread_local]` we fall back to the\n+            // On platforms without `#[thread_local]` we fall back to the\n             // same implementation as below for os thread locals.\n             #[inline]\n             const fn __init() -> $t { INIT_EXPR }"}, {"sha": "e1a38de64711697ae347d31bb2b1faa45cef5eca", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -22,6 +22,7 @@ pub mod thread;\n #[cfg(target_thread_local)]\n pub mod thread_local_dtor;\n pub mod thread_local_key;\n+pub mod thread_parking;\n pub mod time;\n \n mod common;"}, {"sha": "197078bb1867371a9b97a3c8d09de717ae163ee8", "filename": "library/std/src/sys/unsupported/thread_parking.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_parking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_parking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_parking.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,11 @@\n+use crate::pin::Pin;\n+use crate::time::Duration;\n+\n+pub struct Parker {}\n+\n+impl Parker {\n+    pub unsafe fn new_in_place(_parker: *mut Parker) {}\n+    pub unsafe fn park(self: Pin<&Self>) {}\n+    pub unsafe fn park_timeout(self: Pin<&Self>, _dur: Duration) {}\n+    pub fn unpark(self: Pin<&Self>) {}\n+}"}, {"sha": "a2223708024801102d47f45caa5586e8ce957135", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -47,6 +47,8 @@ pub mod thread;\n pub mod thread_local_dtor;\n #[path = \"../unsupported/thread_local_key.rs\"]\n pub mod thread_local_key;\n+#[path = \"../unsupported/thread_parking.rs\"]\n+pub mod thread_parking;\n pub mod time;\n \n cfg_if::cfg_if! {"}, {"sha": "6c05b56e1bfc00189e0e712fc8a3f5b6fc606bb2", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -70,6 +70,8 @@ cfg_if::cfg_if! {\n         pub mod once;\n         #[path = \"../unsupported/thread.rs\"]\n         pub mod thread;\n+        #[path = \"../unsupported/thread_parking.rs\"]\n+        pub mod thread_parking;\n     }\n }\n "}, {"sha": "5bfd8b52ed08dbc7fa24d1f52d60f1dccb441d73", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -313,6 +313,9 @@ pub(crate) fn make_bat_command_line(\n ///\n /// This is necessary because cmd.exe does not support verbatim paths.\n pub(crate) fn to_user_path(path: &Path) -> io::Result<Vec<u16>> {\n+    from_wide_to_user_path(to_u16s(path)?)\n+}\n+pub(crate) fn from_wide_to_user_path(mut path: Vec<u16>) -> io::Result<Vec<u16>> {\n     use crate::ptr;\n     use crate::sys::windows::fill_utf16_buf;\n \n@@ -325,8 +328,6 @@ pub(crate) fn to_user_path(path: &Path) -> io::Result<Vec<u16>> {\n     const N: u16 = b'N' as _;\n     const C: u16 = b'C' as _;\n \n-    let mut path = to_u16s(path)?;\n-\n     // Early return if the path is too long to remove the verbatim prefix.\n     const LEGACY_MAX_PATH: usize = 260;\n     if path.len() > LEGACY_MAX_PATH {"}, {"sha": "fe052c8281b504723acfd02b5e034bf33d4a4024", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -477,7 +477,7 @@ impl File {\n     fn reparse_point(\n         &self,\n         space: &mut Align8<[MaybeUninit<u8>]>,\n-    ) -> io::Result<(c::DWORD, *const c::REPARSE_DATA_BUFFER)> {\n+    ) -> io::Result<(c::DWORD, *mut c::REPARSE_DATA_BUFFER)> {\n         unsafe {\n             let mut bytes = 0;\n             cvt({\n@@ -496,7 +496,7 @@ impl File {\n                 )\n             })?;\n             const _: () = assert!(core::mem::align_of::<c::REPARSE_DATA_BUFFER>() <= 8);\n-            Ok((bytes, space.0.as_ptr().cast::<c::REPARSE_DATA_BUFFER>()))\n+            Ok((bytes, space.0.as_mut_ptr().cast::<c::REPARSE_DATA_BUFFER>()))\n         }\n     }\n \n@@ -506,22 +506,22 @@ impl File {\n         unsafe {\n             let (path_buffer, subst_off, subst_len, relative) = match (*buf).ReparseTag {\n                 c::IO_REPARSE_TAG_SYMLINK => {\n-                    let info: *const c::SYMBOLIC_LINK_REPARSE_BUFFER =\n-                        ptr::addr_of!((*buf).rest).cast();\n+                    let info: *mut c::SYMBOLIC_LINK_REPARSE_BUFFER =\n+                        ptr::addr_of_mut!((*buf).rest).cast();\n                     assert!(info.is_aligned());\n                     (\n-                        ptr::addr_of!((*info).PathBuffer).cast::<u16>(),\n+                        ptr::addr_of_mut!((*info).PathBuffer).cast::<u16>(),\n                         (*info).SubstituteNameOffset / 2,\n                         (*info).SubstituteNameLength / 2,\n                         (*info).Flags & c::SYMLINK_FLAG_RELATIVE != 0,\n                     )\n                 }\n                 c::IO_REPARSE_TAG_MOUNT_POINT => {\n-                    let info: *const c::MOUNT_POINT_REPARSE_BUFFER =\n-                        ptr::addr_of!((*buf).rest).cast();\n+                    let info: *mut c::MOUNT_POINT_REPARSE_BUFFER =\n+                        ptr::addr_of_mut!((*buf).rest).cast();\n                     assert!(info.is_aligned());\n                     (\n-                        ptr::addr_of!((*info).PathBuffer).cast::<u16>(),\n+                        ptr::addr_of_mut!((*info).PathBuffer).cast::<u16>(),\n                         (*info).SubstituteNameOffset / 2,\n                         (*info).SubstituteNameLength / 2,\n                         false,\n@@ -535,13 +535,20 @@ impl File {\n                 }\n             };\n             let subst_ptr = path_buffer.add(subst_off.into());\n-            let mut subst = slice::from_raw_parts(subst_ptr, subst_len as usize);\n+            let subst = slice::from_raw_parts_mut(subst_ptr, subst_len as usize);\n             // Absolute paths start with an NT internal namespace prefix `\\??\\`\n             // We should not let it leak through.\n             if !relative && subst.starts_with(&[92u16, 63u16, 63u16, 92u16]) {\n-                subst = &subst[4..];\n+                // Turn `\\??\\` into `\\\\?\\` (a verbatim path).\n+                subst[1] = b'\\\\' as u16;\n+                // Attempt to convert to a more user-friendly path.\n+                let user = super::args::from_wide_to_user_path(\n+                    subst.iter().copied().chain([0]).collect(),\n+                )?;\n+                Ok(PathBuf::from(OsString::from_wide(&user.strip_suffix(&[0]).unwrap_or(&user))))\n+            } else {\n+                Ok(PathBuf::from(OsString::from_wide(subst)))\n             }\n-            Ok(PathBuf::from(OsString::from_wide(subst)))\n         }\n     }\n "}, {"sha": "3209bffe353ed81b775a8b7869789824d1a052b1", "filename": "library/std/src/sys_common/thread_parking/generic.rs", "status": "removed", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs?ref=9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8", "patch": "@@ -1,125 +0,0 @@\n-//! Parker implementation based on a Mutex and Condvar.\n-\n-use crate::pin::Pin;\n-use crate::sync::atomic::AtomicUsize;\n-use crate::sync::atomic::Ordering::SeqCst;\n-use crate::sync::{Condvar, Mutex};\n-use crate::time::Duration;\n-\n-const EMPTY: usize = 0;\n-const PARKED: usize = 1;\n-const NOTIFIED: usize = 2;\n-\n-pub struct Parker {\n-    state: AtomicUsize,\n-    lock: Mutex<()>,\n-    cvar: Condvar,\n-}\n-\n-impl Parker {\n-    /// Construct the generic parker. The UNIX parker implementation\n-    /// requires this to happen in-place.\n-    pub unsafe fn new_in_place(parker: *mut Parker) {\n-        parker.write(Parker {\n-            state: AtomicUsize::new(EMPTY),\n-            lock: Mutex::new(()),\n-            cvar: Condvar::new(),\n-        });\n-    }\n-\n-    // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n-    pub unsafe fn park(self: Pin<&Self>) {\n-        // If we were previously notified then we consume this notification and\n-        // return quickly.\n-        if self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, SeqCst).is_ok() {\n-            return;\n-        }\n-\n-        // Otherwise we need to coordinate going to sleep\n-        let mut m = self.lock.lock().unwrap();\n-        match self.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n-            Ok(_) => {}\n-            Err(NOTIFIED) => {\n-                // We must read here, even though we know it will be `NOTIFIED`.\n-                // This is because `unpark` may have been called again since we read\n-                // `NOTIFIED` in the `compare_exchange` above. We must perform an\n-                // acquire operation that synchronizes with that `unpark` to observe\n-                // any writes it made before the call to unpark. To do that we must\n-                // read from the write it made to `state`.\n-                let old = self.state.swap(EMPTY, SeqCst);\n-                assert_eq!(old, NOTIFIED, \"park state changed unexpectedly\");\n-                return;\n-            } // should consume this notification, so prohibit spurious wakeups in next park.\n-            Err(_) => panic!(\"inconsistent park state\"),\n-        }\n-        loop {\n-            m = self.cvar.wait(m).unwrap();\n-            match self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, SeqCst) {\n-                Ok(_) => return, // got a notification\n-                Err(_) => {}     // spurious wakeup, go back to sleep\n-            }\n-        }\n-    }\n-\n-    // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n-    pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {\n-        // Like `park` above we have a fast path for an already-notified thread, and\n-        // afterwards we start coordinating for a sleep.\n-        // return quickly.\n-        if self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, SeqCst).is_ok() {\n-            return;\n-        }\n-        let m = self.lock.lock().unwrap();\n-        match self.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n-            Ok(_) => {}\n-            Err(NOTIFIED) => {\n-                // We must read again here, see `park`.\n-                let old = self.state.swap(EMPTY, SeqCst);\n-                assert_eq!(old, NOTIFIED, \"park state changed unexpectedly\");\n-                return;\n-            } // should consume this notification, so prohibit spurious wakeups in next park.\n-            Err(_) => panic!(\"inconsistent park_timeout state\"),\n-        }\n-\n-        // Wait with a timeout, and if we spuriously wake up or otherwise wake up\n-        // from a notification we just want to unconditionally set the state back to\n-        // empty, either consuming a notification or un-flagging ourselves as\n-        // parked.\n-        let (_m, _result) = self.cvar.wait_timeout(m, dur).unwrap();\n-        match self.state.swap(EMPTY, SeqCst) {\n-            NOTIFIED => {} // got a notification, hurray!\n-            PARKED => {}   // no notification, alas\n-            n => panic!(\"inconsistent park_timeout state: {n}\"),\n-        }\n-    }\n-\n-    // This implementation doesn't require `Pin`, but other implementations do.\n-    pub fn unpark(self: Pin<&Self>) {\n-        // To ensure the unparked thread will observe any writes we made\n-        // before this call, we must perform a release operation that `park`\n-        // can synchronize with. To do that we must write `NOTIFIED` even if\n-        // `state` is already `NOTIFIED`. That is why this must be a swap\n-        // rather than a compare-and-swap that returns if it reads `NOTIFIED`\n-        // on failure.\n-        match self.state.swap(NOTIFIED, SeqCst) {\n-            EMPTY => return,    // no one was waiting\n-            NOTIFIED => return, // already unparked\n-            PARKED => {}        // gotta go wake someone up\n-            _ => panic!(\"inconsistent state in unpark\"),\n-        }\n-\n-        // There is a period between when the parked thread sets `state` to\n-        // `PARKED` (or last checked `state` in the case of a spurious wake\n-        // up) and when it actually waits on `cvar`. If we were to notify\n-        // during this period it would be ignored and then when the parked\n-        // thread went to sleep it would never wake up. Fortunately, it has\n-        // `lock` locked at this stage so we can acquire `lock` to wait until\n-        // it is ready to receive the notification.\n-        //\n-        // Releasing `lock` before the call to `notify_one` means that when the\n-        // parked thread wakes it doesn't get woken only to have to wait for us\n-        // to release `lock`.\n-        drop(self.lock.lock().unwrap());\n-        self.cvar.notify_one()\n-    }\n-}"}, {"sha": "c4d3f9ea2f4272a406dd24197b2145068b118f1c", "filename": "library/std/src/sys_common/thread_parking/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -18,10 +18,7 @@ cfg_if::cfg_if! {\n     ))] {\n         mod id;\n         pub use id::Parker;\n-    } else if #[cfg(any(windows, target_family = \"unix\"))] {\n-        pub use crate::sys::thread_parking::Parker;\n     } else {\n-        mod generic;\n-        pub use generic::Parker;\n+        pub use crate::sys::thread_parking::Parker;\n     }\n }"}, {"sha": "f712c872708ac97c2510cbb0d859c6c1222026a5", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -193,22 +193,22 @@ pub use scoped::{scope, Scope, ScopedJoinHandle};\n #[macro_use]\n mod local;\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::local::{AccessError, LocalKey};\n-\n-// Provide the type used by the thread_local! macro to access TLS keys. This\n-// needs to be kept in sync with the macro itself (in `local.rs`).\n-// There are three types: \"static\", \"fast\", \"OS\". The \"OS\" thread local key\n-// type is accessed via platform-specific API calls and is slow, while the \"fast\"\n-// key type is accessed via code generated via LLVM, where TLS keys are set up\n-// by the elf linker. \"static\" is for single-threaded platforms where a global\n-// static is sufficient.\n-\n-// Implementation details used by the thread_local!{} macro.\n-#[doc(hidden)]\n-#[unstable(feature = \"thread_local_internals\", issue = \"none\")]\n-pub mod local_impl {\n-    pub use crate::sys::common::thread_local::{thread_local_inner, Key};\n+cfg_if::cfg_if! {\n+    if #[cfg(test)] {\n+        // Avoid duplicating the global state assoicated with thread-locals between this crate and\n+        // realstd. Miri relies on this.\n+        pub use realstd::thread::{local_impl, AccessError, LocalKey};\n+    } else {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use self::local::{AccessError, LocalKey};\n+\n+        // Implementation details used by the thread_local!{} macro.\n+        #[doc(hidden)]\n+        #[unstable(feature = \"thread_local_internals\", issue = \"none\")]\n+        pub mod local_impl {\n+            pub use crate::sys::common::thread_local::{thread_local_inner, Key};\n+        }\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "5356ee277cc2cfa309fd7e02c2b84a1b4cb5c19a", "filename": "library/sysroot/Cargo.toml", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fsysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fsysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fsysroot%2FCargo.toml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,27 @@\n+[package]\n+name = \"sysroot\"\n+version = \"0.0.0\"\n+edition = \"2021\"\n+\n+# this is a dummy crate to ensure that all required crates appear in the sysroot\n+[dependencies]\n+proc_macro = { path = \"../proc_macro\" }\n+std = { path = \"../std\" }\n+test = { path = \"../test\" }\n+\n+# Forward features to the `std` crate as necessary\n+[features]\n+default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\", \"panic-unwind\"]\n+backtrace = [\"std/backtrace\"]\n+compiler-builtins-c = [\"std/compiler-builtins-c\"]\n+compiler-builtins-mem = [\"std/compiler-builtins-mem\"]\n+compiler-builtins-no-asm = [\"std/compiler-builtins-no-asm\"]\n+compiler-builtins-mangled-names = [\"std/compiler-builtins-mangled-names\"]\n+llvm-libunwind = [\"std/llvm-libunwind\"]\n+system-llvm-libunwind = [\"std/system-llvm-libunwind\"]\n+panic-unwind = [\"std/panic_unwind\"]\n+panic_immediate_abort = [\"std/panic_immediate_abort\"]\n+profiler = [\"std/profiler\"]\n+std_detect_file_io = [\"std/std_detect_file_io\"]\n+std_detect_dlsym_getauxval = [\"std/std_detect_dlsym_getauxval\"]\n+std_detect_env_override = [\"std/std_detect_env_override\"]"}, {"sha": "71ceb580a40c34f641ed9256e5ae5176fa5d5b80", "filename": "library/sysroot/src/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Fsysroot%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Fsysroot%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fsysroot%2Fsrc%2Flib.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1 @@\n+// This is intentionally empty since this crate is only used to depend on other library crates."}, {"sha": "91a1abde059f693711807e8216eec9a8d7d6b5cb", "filename": "library/test/Cargo.toml", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Ftest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Ftest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2FCargo.toml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -12,23 +12,3 @@ std = { path = \"../std\" }\n core = { path = \"../core\" }\n panic_unwind = { path = \"../panic_unwind\" }\n panic_abort = { path = \"../panic_abort\" }\n-\n-# not actually used but needed to always have proc_macro in the sysroot\n-proc_macro = { path = \"../proc_macro\" }\n-\n-# Forward features to the `std` crate as necessary\n-[features]\n-default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\", \"panic-unwind\"]\n-backtrace = [\"std/backtrace\"]\n-compiler-builtins-c = [\"std/compiler-builtins-c\"]\n-compiler-builtins-mem = [\"std/compiler-builtins-mem\"]\n-compiler-builtins-no-asm = [\"std/compiler-builtins-no-asm\"]\n-compiler-builtins-mangled-names = [\"std/compiler-builtins-mangled-names\"]\n-llvm-libunwind = [\"std/llvm-libunwind\"]\n-system-llvm-libunwind = [\"std/system-llvm-libunwind\"]\n-panic-unwind = [\"std/panic_unwind\"]\n-panic_immediate_abort = [\"std/panic_immediate_abort\"]\n-profiler = [\"std/profiler\"]\n-std_detect_file_io = [\"std/std_detect_file_io\"]\n-std_detect_dlsym_getauxval = [\"std/std_detect_dlsym_getauxval\"]\n-std_detect_env_override = [\"std/std_detect_env_override\"]"}, {"sha": "9f5bf24367eaa9fa2399076a5526adbe72fdcc80", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -11,7 +11,7 @@ use crate::{\n \n pub struct JunitFormatter<T> {\n     out: OutputLocation<T>,\n-    results: Vec<(TestDesc, TestResult, Duration)>,\n+    results: Vec<(TestDesc, TestResult, Duration, Vec<u8>)>,\n }\n \n impl<T: Write> JunitFormatter<T> {\n@@ -26,6 +26,18 @@ impl<T: Write> JunitFormatter<T> {\n     }\n }\n \n+fn str_to_cdata(s: &str) -> String {\n+    // Drop the stdout in a cdata. Unfortunately, you can't put either of `]]>` or\n+    // `<?'` in a CDATA block, so the escaping gets a little weird.\n+    let escaped_output = s.replace(\"]]>\", \"]]]]><![CDATA[>\");\n+    let escaped_output = escaped_output.replace(\"<?\", \"<]]><![CDATA[?\");\n+    // We also smuggle newlines as &#xa so as to keep all the output on one line\n+    let escaped_output = escaped_output.replace(\"\\n\", \"]]>&#xA;<![CDATA[\");\n+    // Prune empty CDATA blocks resulting from any escaping\n+    let escaped_output = escaped_output.replace(\"<![CDATA[]]>\", \"\");\n+    format!(\"<![CDATA[{}]]>\", escaped_output)\n+}\n+\n impl<T: Write> OutputFormatter for JunitFormatter<T> {\n     fn write_discovery_start(&mut self) -> io::Result<()> {\n         Err(io::Error::new(io::ErrorKind::NotFound, \"Not yet implemented!\"))\n@@ -63,14 +75,14 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n         desc: &TestDesc,\n         result: &TestResult,\n         exec_time: Option<&time::TestExecTime>,\n-        _stdout: &[u8],\n+        stdout: &[u8],\n         _state: &ConsoleTestState,\n     ) -> io::Result<()> {\n         // Because the testsuite node holds some of the information as attributes, we can't write it\n         // until all of the tests have finished. Instead of writing every result as they come in, we add\n         // them to a Vec and write them all at once when run is complete.\n         let duration = exec_time.map(|t| t.0).unwrap_or_default();\n-        self.results.push((desc.clone(), result.clone(), duration));\n+        self.results.push((desc.clone(), result.clone(), duration, stdout.to_vec()));\n         Ok(())\n     }\n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n@@ -85,7 +97,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n              >\",\n             state.failed, state.total, state.ignored\n         ))?;\n-        for (desc, result, duration) in std::mem::take(&mut self.results) {\n+        for (desc, result, duration, stdout) in std::mem::take(&mut self.results) {\n             let (class_name, test_name) = parse_class_name(&desc);\n             match result {\n                 TestResult::TrIgnored => { /* no-op */ }\n@@ -98,6 +110,11 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                         duration.as_secs_f64()\n                     ))?;\n                     self.write_message(\"<failure type=\\\"assert\\\"/>\")?;\n+                    if !stdout.is_empty() {\n+                        self.write_message(\"<system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                    }\n                     self.write_message(\"</testcase>\")?;\n                 }\n \n@@ -110,6 +127,11 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                         duration.as_secs_f64()\n                     ))?;\n                     self.write_message(&format!(\"<failure message=\\\"{m}\\\" type=\\\"assert\\\"/>\"))?;\n+                    if !stdout.is_empty() {\n+                        self.write_message(\"<system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                    }\n                     self.write_message(\"</testcase>\")?;\n                 }\n \n@@ -136,11 +158,19 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                 TestResult::TrOk => {\n                     self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n-                         name=\\\"{}\\\" time=\\\"{}\\\"/>\",\n+                         name=\\\"{}\\\" time=\\\"{}\\\"\",\n                         class_name,\n                         test_name,\n                         duration.as_secs_f64()\n                     ))?;\n+                    if stdout.is_empty() || !state.options.display_output {\n+                        self.write_message(\"/>\")?;\n+                    } else {\n+                        self.write_message(\"><system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                        self.write_message(\"</testcase>\")?;\n+                    }\n                 }\n             }\n         }"}, {"sha": "956b82385f6f5344a5f7a8c8654ac76edd3d6dee", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -79,7 +79,7 @@ impl Step for Std {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"test\").path(\"library\")\n+        run.all_krates(\"sysroot\").path(\"library\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "0d9fd56b03814afe623b9bdb08d8ceb79e355ad8", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -81,7 +81,7 @@ macro_rules! clean_crate_tree {\n \n clean_crate_tree! {\n     Rustc, Mode::Rustc, \"rustc-main\";\n-    Std, Mode::Std, \"test\";\n+    Std, Mode::Std, \"sysroot\";\n }\n \n fn clean_default(build: &Build, all: bool) {"}, {"sha": "966ae00fa1d866e915a6216f6f2b50b229ea5876", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -56,7 +56,7 @@ impl Step for Std {\n         // When downloading stage1, the standard library has already been copied to the sysroot, so\n         // there's no need to rebuild it.\n         let builder = run.builder;\n-        run.crate_or_deps(\"test\")\n+        run.crate_or_deps(\"sysroot\")\n             .path(\"library\")\n             .lazy_default_condition(Box::new(|| !builder.download_rustc()))\n     }\n@@ -364,7 +364,7 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n             .arg(\"--features\")\n             .arg(features)\n             .arg(\"--manifest-path\")\n-            .arg(builder.src.join(\"library/test/Cargo.toml\"));\n+            .arg(builder.src.join(\"library/sysroot/Cargo.toml\"));\n \n         // Help the libc crate compile by assisting it in finding various\n         // sysroot native libraries."}, {"sha": "ac51dc51aeb0282ed36a87a14d0e555b7f22de7f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1442,6 +1442,28 @@ impl Config {\n         git\n     }\n \n+    pub(crate) fn test_args(&self) -> Vec<&str> {\n+        let mut test_args = match self.cmd {\n+            Subcommand::Test { ref test_args, .. } | Subcommand::Bench { ref test_args, .. } => {\n+                test_args.iter().flat_map(|s| s.split_whitespace()).collect()\n+            }\n+            _ => vec![],\n+        };\n+        test_args.extend(self.free_args.iter().map(|s| s.as_str()));\n+        test_args\n+    }\n+\n+    pub(crate) fn args(&self) -> Vec<&str> {\n+        let mut args = match self.cmd {\n+            Subcommand::Run { ref args, .. } => {\n+                args.iter().flat_map(|s| s.split_whitespace()).collect()\n+            }\n+            _ => vec![],\n+        };\n+        args.extend(self.free_args.iter().map(|s| s.as_str()));\n+        args\n+    }\n+\n     /// Bootstrap embeds a version number into the name of shared libraries it uploads in CI.\n     /// Return the version it would have used for the given commit.\n     pub(crate) fn artifact_version_part(&self, commit: &str) -> String {"}, {"sha": "9cead7adc8c3598640c1be35a3fc9c0a7500a4af", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -822,6 +822,8 @@ fn copy_src_dirs(\n             \"llvm-project\\\\compiler-rt\",\n             \"llvm-project/cmake\",\n             \"llvm-project\\\\cmake\",\n+            \"llvm-project/runtimes\",\n+            \"llvm-project\\\\runtimes\",\n         ];\n         if spath.contains(\"llvm-project\")\n             && !spath.ends_with(\"llvm-project\")\n@@ -976,6 +978,7 @@ impl Step for PlainSourceTarball {\n             \"config.example.toml\",\n             \"Cargo.toml\",\n             \"Cargo.lock\",\n+            \".gitmodules\",\n         ];\n         let src_dirs = [\"src\", \"compiler\", \"library\", \"tests\"];\n "}, {"sha": "8f5d9bb66e1034fc094badd09725a9ca386587c9", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -438,7 +438,7 @@ impl Step for Std {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.all_krates(\"test\").path(\"library\").default_condition(builder.config.docs)\n+        run.all_krates(\"sysroot\").path(\"library\").default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "3e82a381a1b2d34c2d6bfa23edd813127623e34f", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -427,7 +427,6 @@ impl Config {\n \n     fn download_toolchain(\n         &self,\n-        // FIXME(ozkanonur) use CompilerMetadata instead of `version: &str`\n         version: &str,\n         sysroot: &str,\n         stamp_key: &str,"}, {"sha": "2a0ebee9a6b5b06ede0db2037c59b340e11c4dde", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -745,15 +745,6 @@ impl Subcommand {\n         }\n     }\n \n-    pub fn test_args(&self) -> Vec<&str> {\n-        match *self {\n-            Subcommand::Test { ref test_args, .. } | Subcommand::Bench { ref test_args, .. } => {\n-                test_args.iter().flat_map(|s| s.split_whitespace()).collect()\n-            }\n-            _ => vec![],\n-        }\n-    }\n-\n     pub fn rustc_args(&self) -> Vec<&str> {\n         match *self {\n             Subcommand::Test { ref rustc_args, .. } => {\n@@ -763,15 +754,6 @@ impl Subcommand {\n         }\n     }\n \n-    pub fn args(&self) -> Vec<&str> {\n-        match *self {\n-            Subcommand::Run { ref args, .. } => {\n-                args.iter().flat_map(|s| s.split_whitespace()).collect()\n-            }\n-            _ => vec![],\n-        }\n-    }\n-\n     pub fn fail_fast(&self) -> bool {\n         match *self {\n             Subcommand::Test { fail_fast, .. } => fail_fast,"}, {"sha": "cb15d9a6325b3d3a752978852404bf46876a8536", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -105,7 +105,7 @@ impl Step for BumpStage0 {\n \n     fn run(self, builder: &Builder<'_>) -> Self::Output {\n         let mut cmd = builder.tool_cmd(Tool::BumpStage0);\n-        cmd.args(builder.config.cmd.args());\n+        cmd.args(builder.config.args());\n         builder.run(&mut cmd);\n     }\n }\n@@ -182,8 +182,7 @@ impl Step for Miri {\n         miri.add_rustc_lib_path(builder, compiler);\n         // Forward arguments.\n         miri.arg(\"--\").arg(\"--target\").arg(target.rustc_target_arg());\n-        miri.args(builder.config.cmd.args());\n-        miri.args(&builder.config.free_args);\n+        miri.args(builder.config.args());\n \n         // miri tests need to know about the stage sysroot\n         miri.env(\"MIRI_SYSROOT\", &miri_sysroot);"}, {"sha": "28813266a4d9e9f18793b7474e4041f37f7cbf2c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -263,7 +263,7 @@ impl Step for Cargotest {\n             builder,\n             cmd.arg(&cargo)\n                 .arg(&out_dir)\n-                .args(builder.config.cmd.test_args())\n+                .args(builder.config.test_args())\n                 .env(\"RUSTC\", builder.rustc(compiler))\n                 .env(\"RUSTDOC\", builder.rustdoc(compiler)),\n         );\n@@ -634,7 +634,7 @@ impl Step for Miri {\n             .arg(builder.src.join(\"src/tools/miri/test-cargo-miri/Cargo.toml\"));\n         cargo.arg(\"--target\").arg(target.rustc_target_arg());\n         cargo.arg(\"--tests\"); // don't run doctests, they are too confused by the staging\n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+        cargo.arg(\"--\").args(builder.config.test_args());\n \n         // Tell `cargo miri` where to find things.\n         cargo.env(\"MIRI_SYSROOT\", &miri_sysroot);\n@@ -1060,7 +1060,7 @@ impl Step for RustdocGUI {\n                 }\n             }\n         }\n-        for test_arg in builder.config.cmd.test_args() {\n+        for test_arg in builder.config.test_args() {\n             command.arg(test_arg);\n         }\n         builder.run(&mut command);\n@@ -1555,8 +1555,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             .filter_map(|p| util::is_valid_test_suite_arg(p, suite_path, builder))\n             .collect();\n \n-        test_args.append(&mut builder.config.cmd.test_args());\n-        test_args.extend(builder.config.free_args.iter().map(|s| s.as_str()));\n+        test_args.append(&mut builder.config.test_args());\n \n         // On Windows, replace forward slashes in test-args by backslashes\n         // so the correct filters are passed to libtest\n@@ -1962,7 +1961,7 @@ fn markdown_test(builder: &Builder<'_>, compiler: Compiler, markdown: &Path) ->\n     cmd.arg(markdown);\n     cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n-    let test_args = builder.config.cmd.test_args().join(\" \");\n+    let test_args = builder.config.test_args().join(\" \");\n     cmd.arg(\"--test-args\").arg(test_args);\n \n     if builder.config.verbose_tests {\n@@ -2099,7 +2098,7 @@ fn prepare_cargo_test(\n         cargo.arg(\"-p\").arg(krate);\n     }\n \n-    cargo.arg(\"--\").args(&builder.config.cmd.test_args()).args(libtest_args);\n+    cargo.arg(\"--\").args(&builder.config.test_args()).args(libtest_args);\n     if !builder.config.verbose_tests {\n         cargo.arg(\"--quiet\");\n     }\n@@ -2145,7 +2144,7 @@ impl Step for Crate {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.crate_or_deps(\"test\")\n+        run.crate_or_deps(\"sysroot\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "ecef56f56f1d5feb95f731c5c2d9da25f1867fb9", "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 45, "deletions": 92, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -168,85 +168,17 @@ def ffx_daemon_log_path(self):\n     def ffx_isolate_dir(self):\n         return os.path.join(self.tmp_dir(), \"ffx_isolate\")\n \n-    def ffx_home_dir(self):\n-        return os.path.join(self.ffx_isolate_dir(), \"user-home\")\n+    def home_dir(self):\n+        return os.path.join(self.tmp_dir(), \"user-home\")\n \n-    def ffx_tmp_dir(self):\n-        return os.path.join(self.ffx_isolate_dir(), \"tmp\")\n-\n-    def ffx_log_dir(self):\n-        return os.path.join(self.ffx_isolate_dir(), \"log\")\n-\n-    def ffx_user_config_dir(self):\n-        return os.path.join(self.ffx_xdg_config_home(), \"Fuchsia\", \"ffx\", \"config\")\n-\n-    def ffx_user_config_path(self):\n-        return os.path.join(self.ffx_user_config_dir(), \"config.json\")\n-\n-    def ffx_xdg_config_home(self):\n-        if platform.system() == \"Darwin\":\n-            return os.path.join(self.ffx_home_dir(), \"Library\", \"Preferences\")\n-        return os.path.join(self.ffx_home_dir(), \".local\", \"share\")\n-\n-    def ffx_ascendd_path(self):\n-        return os.path.join(self.ffx_tmp_dir(), \"ascendd\")\n \n     def start_ffx_isolation(self):\n         # Most of this is translated directly from ffx's isolate library\n         os.mkdir(self.ffx_isolate_dir())\n-        os.mkdir(self.ffx_home_dir())\n-        os.mkdir(self.ffx_tmp_dir())\n-        os.mkdir(self.ffx_log_dir())\n-\n-        fuchsia_dir = os.path.join(self.ffx_home_dir(), \".fuchsia\")\n-        os.mkdir(fuchsia_dir)\n-\n-        fuchsia_debug_dir = os.path.join(fuchsia_dir, \"debug\")\n-        os.mkdir(fuchsia_debug_dir)\n-\n-        metrics_dir = os.path.join(fuchsia_dir, \"metrics\")\n-        os.mkdir(metrics_dir)\n+        os.mkdir(self.home_dir())\n \n-        analytics_path = os.path.join(metrics_dir, \"analytics-status\")\n-        with open(analytics_path, \"w\", encoding=\"utf-8\") as analytics_file:\n-            print(\"0\", file=analytics_file)\n-\n-        ffx_path = os.path.join(metrics_dir, \"ffx\")\n-        with open(ffx_path, \"w\", encoding=\"utf-8\") as ffx_file:\n-            print(\"1\", file=ffx_file)\n-\n-        os.makedirs(self.ffx_user_config_dir())\n-\n-        with open(\n-            self.ffx_user_config_path(), \"w\", encoding=\"utf-8\"\n-        ) as config_json_file:\n-            user_config_for_test = {\n-                \"log\": {\n-                    \"enabled\": True,\n-                    \"dir\": self.ffx_log_dir(),\n-                },\n-                \"overnet\": {\n-                    \"socket\": self.ffx_ascendd_path(),\n-                },\n-                \"ssh\": {\n-                    \"pub\": self.ssh_authfile_path(),\n-                    \"priv\": self.ssh_keyfile_path(),\n-                },\n-                \"test\": {\n-                    \"is_isolated\": True,\n-                    \"experimental_structured_output\": True,\n-                },\n-            }\n-            print(json.dumps(user_config_for_test), file=config_json_file)\n-\n-        ffx_env_path = os.path.join(self.ffx_user_config_dir(), \".ffx_env\")\n-        with open(ffx_env_path, \"w\", encoding=\"utf-8\") as ffx_env_file:\n-            ffx_env_config_for_test = {\n-                \"user\": self.ffx_user_config_path(),\n-                \"build\": None,\n-                \"global\": None,\n-            }\n-            print(json.dumps(ffx_env_config_for_test), file=ffx_env_file)\n+        ffx_path = self.tool_path(\"ffx\")\n+        ffx_env = self.ffx_cmd_env()\n \n         # Start ffx daemon\n         # We want this to be a long-running process that persists after the script finishes\n@@ -256,38 +188,65 @@ def start_ffx_isolation(self):\n         ) as ffx_daemon_log_file:\n             subprocess.Popen(\n                 [\n-                    self.tool_path(\"ffx\"),\n-                    \"--config\",\n-                    self.ffx_user_config_path(),\n+                    ffx_path,\n                     \"daemon\",\n                     \"start\",\n                 ],\n-                env=self.ffx_cmd_env(),\n+                env=ffx_env,\n                 stdout=ffx_daemon_log_file,\n                 stderr=ffx_daemon_log_file,\n             )\n \n+        # Disable analytics\n+        subprocess.check_call(\n+            [\n+                ffx_path,\n+                \"config\",\n+                \"analytics\",\n+                \"disable\",\n+            ],\n+            env=ffx_env,\n+            stdout=self.subprocess_output(),\n+            stderr=self.subprocess_output(),\n+        )\n+\n+        # Set configs\n+        configs = {\n+            \"log.enabled\": \"true\",\n+            \"ssh.pub\": self.ssh_authfile_path(),\n+            \"ssh.priv\": self.ssh_keyfile_path(),\n+            \"test.is_isolated\": \"true\",\n+            \"test.experimental_structured_output\": \"true\",\n+        }\n+        for key, value in configs.items():\n+            subprocess.check_call(\n+                [\n+                    self.tool_path(\"ffx\"),\n+                    \"config\",\n+                    \"set\",\n+                    key,\n+                    value,\n+                ],\n+                env=self.ffx_cmd_env(),\n+                stdout=self.subprocess_output(),\n+                stderr=self.subprocess_output(),\n+            )\n+\n     def ffx_cmd_env(self):\n-        result = {\n-            \"HOME\": self.ffx_home_dir(),\n-            \"XDG_CONFIG_HOME\": self.ffx_xdg_config_home(),\n-            \"ASCENDD\": self.ffx_ascendd_path(),\n-            \"FUCHSIA_SSH_KEY\": self.ssh_keyfile_path(),\n+        return {\n+            \"HOME\": self.home_dir(),\n+            \"FFX_ISOLATE_DIR\": self.ffx_isolate_dir(),\n             # We want to use our own specified temp directory\n             \"TMP\": self.tmp_dir(),\n             \"TEMP\": self.tmp_dir(),\n             \"TMPDIR\": self.tmp_dir(),\n             \"TEMPDIR\": self.tmp_dir(),\n         }\n \n-        return result\n-\n     def stop_ffx_isolation(self):\n         subprocess.check_call(\n             [\n                 self.tool_path(\"ffx\"),\n-                \"--config\",\n-                self.ffx_user_config_path(),\n                 \"daemon\",\n                 \"stop\",\n             ],\n@@ -709,8 +668,6 @@ def log(msg):\n             subprocess.run(\n                 [\n                     self.tool_path(\"ffx\"),\n-                    \"--config\",\n-                    self.ffx_user_config_path(),\n                     \"test\",\n                     \"run\",\n                     f\"fuchsia-pkg://{self.TEST_REPO_NAME}/{package_name}#meta/{package_name}.cm\",\n@@ -849,8 +806,6 @@ def delete_tmp(self):\n     def debug(self, args):\n         command = [\n             self.tool_path(\"ffx\"),\n-            \"--config\",\n-            self.ffx_user_config_path(),\n             \"debug\",\n             \"connect\",\n             \"--\",\n@@ -948,8 +903,6 @@ def syslog(self, args):\n         subprocess.run(\n             [\n                 self.tool_path(\"ffx\"),\n-                \"--config\",\n-                self.ffx_user_config_path(),\n                 \"log\",\n                 \"--since\",\n                 \"now\","}, {"sha": "aa776daf09db63251e86d09647aff20544a1f7b1", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 101, "deletions": 17, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -196,18 +196,18 @@ Shadow byte legend (one shadow byte represents 8 application bytes):\n \n # ControlFlowIntegrity\n \n-The LLVM Control Flow Integrity (CFI) support in the Rust compiler initially\n-provides forward-edge control flow protection for Rust-compiled code only by\n-aggregating function pointers in groups identified by their return and parameter\n-types.\n-\n-Forward-edge control flow protection for C or C++ and Rust -compiled code \"mixed\n-binaries\" (i.e., for when C or C++ and Rust -compiled code share the same\n-virtual address space) will be provided in later work by defining and using\n-compatible type identifiers (see Type metadata in the design document in the\n-tracking issue [#89653](https://github.com/rust-lang/rust/issues/89653)).\n-\n-LLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e., -Clto).\n+The LLVM Control Flow Integrity (CFI) support in the Rust compiler provides\n+forward-edge control flow protection for both Rust-compiled code only and for C\n+or C++ and Rust -compiled code mixed-language binaries, also known as \u201cmixed\n+binaries\u201d (i.e., for when C or C++ and Rust -compiled code share the same\n+virtual address space), by aggregating function pointers in groups identified by\n+their return and parameter types.\n+\n+LLVM CFI can be enabled with `-Zsanitizer=cfi` and requires LTO (i.e., `-Clto`).\n+Cross-language LLVM CFI can be enabled with `-Zsanitizer=cfi`, and requires the\n+`-Zsanitizer-cfi-normalize-integers` option to be used with Clang\n+`-fsanitize-cfi-icall-normalize-integers` for normalizing integer types, and\n+proper (i.e., non-rustc) LTO (i.e., `-Clinker-plugin-lto`).\n \n See the [Clang ControlFlowIntegrity documentation][clang-cfi] for more details.\n \n@@ -343,7 +343,7 @@ $\n Fig. 5.\u2003Build and execution of the modified example with LLVM CFI disabled.\n \n ```shell\n-$ RUSTFLAGS=\"-Zsanitizer=cfi -Cembed-bitcode=yes -Clto\" cargo run --release\n+$ RUSTFLAGS=\"-Cembed-bitcode=yes -Clto -Zsanitizer=cfi\" cargo run --release\n    Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n     Finished release [optimized] target(s) in 3.38s\n      Running `target/release/rust-cfi-2`\n@@ -392,7 +392,7 @@ Closures][rust-book-ch19-05] chapter of the [The Rust Programming\n Language][rust-book] book.\n \n ```shell\n- cargo run --release\n+$ cargo run --release\n    Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n     Finished release [optimized] target(s) in 0.74s\n      Running `target/release/rust-cfi-3`\n@@ -404,7 +404,7 @@ $\n Fig. 8.\u2003Build and execution of the modified example with LLVM CFI disabled.\n \n ```shell\n-$ RUSTFLAGS=\"-Zsanitizer=cfi -Cembed-bitcode=yes -Clto\" cargo run --release\n+$ RUSTFLAGS=\"-Cembed-bitcode=yes -Clto -Zsanitizer=cfi\" cargo run --release\n    Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n     Finished release [optimized] target(s) in 3.40s\n      Running `target/release/rust-cfi-3`\n@@ -420,8 +420,92 @@ flow using an indirect branch/call to a function with different return and\n parameter types than the return type expected and arguments intended/passed in\n the call/branch site, the execution is also terminated (see Fig. 9).\n \n-[rust-book-ch19-05]: ../../book/ch19-05-advanced-functions-and-closures.html\n-[rust-book]: ../../book/title-page.html\n+```ignore (cannot-test-this-because-uses-custom-build)\n+int\n+do_twice(int (*fn)(int), int arg) {\n+    return fn(arg) + fn(arg);\n+}\n+```\n+Fig. 10.\u2003Example C library.\n+\n+```ignore (cannot-test-this-because-uses-custom-build)\n+use std::mem;\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {\n+    fn do_twice(f: unsafe extern \"C\" fn(i32) -> i32, arg: i32) -> i32;\n+}\n+\n+unsafe extern \"C\" fn add_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+unsafe extern \"C\" fn add_two(x: i64) -> i64 {\n+    x + 2\n+}\n+\n+fn main() {\n+    let answer = unsafe { do_twice(add_one, 5) };\n+\n+    println!(\"The answer is: {}\", answer);\n+\n+    println!(\"With CFI enabled, you should not see the next answer\");\n+    let f: unsafe extern \"C\" fn(i32) -> i32 = unsafe {\n+        mem::transmute::<*const u8, unsafe extern \"C\" fn(i32) -> i32>(add_two as *const u8)\n+    };\n+    let next_answer = unsafe { do_twice(f, 5) };\n+\n+    println!(\"The next answer is: {}\", next_answer);\n+}\n+```\n+Fig. 11.\u2003Another modified example from the [Advanced Functions and\n+Closures][rust-book-ch19-05] chapter of the [The Rust Programming\n+Language][rust-book] book.\n+\n+```shell\n+$ make\n+mkdir -p target/debug\n+clang -I. -Isrc -Wall -flto -fvisibility=hidden -c -emit-llvm src/foo.c -o target/debug/libfoo.bc\n+llvm-ar rcs target/debug/libfoo.a target/debug/libfoo.bc\n+RUSTFLAGS=\"-L./target/debug -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld\" cargo build\n+   Compiling main v0.1.0 (/home/rcvalle/rust-cross-cfi-1)\n+    Finished dev [unoptimized + debuginfo] target(s) in 0.45s\n+$ ./target/debug/main\n+The answer is: 12\n+With CFI enabled, you should not see the next answer\n+The next answer is: 14\n+$\n+```\n+Fig. 12.\u2003Build and execution of the modified example with LLVM CFI disabled.\n+\n+```shell\n+$ make\n+mkdir -p target/debug\n+clang -I. -Isrc -Wall -flto -fvisibility=hidden -fsanitize=cfi -fsanitize-cfi-icall-normalize-integers -c -emit-llvm src/foo.c -o target/debug/libfoo.bc\n+llvm-ar rcs target/debug/libfoo.a target/debug/libfoo.bc\n+RUSTFLAGS=\"-L./target/debug -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\" cargo build\n+   Compiling main v0.1.0 (/home/rcvalle/rust-cross-cfi-1)\n+    Finished dev [unoptimized + debuginfo] target(s) in 0.45s\n+$ ./target/debug/main\n+The answer is: 12\n+With CFI enabled, you should not see the next answer\n+Illegal instruction\n+$\n+```\n+Fig. 13.\u2003Build and execution of the modified example with LLVM CFI enabled.\n+\n+When LLVM CFI is enabled, if there are any attempts to change/hijack control\n+flow using an indirect branch/call to a function with different return and\n+parameter types than the return type expected and arguments intended/passed in\n+the call/branch site, even across the FFI boundary and for extern \"C\" function\n+types indirectly called (i.e., callbacks/function pointers) across the FFI\n+boundary, in C or C++ and Rust -compiled code mixed-language binaries, also\n+known as \u201cmixed binaries\u201d (i.e., for when C or C++ and Rust -compiled code share\n+the same virtual address space), the execution is also terminated (see Fig. 13).\n+\n+\n+[rust-book-ch19-05]: https://doc.rust-lang.org/book/ch19-05-advanced-functions-and-closures.html\n+[rust-book]: https://doc.rust-lang.org/book/title-page.html\n \n # HWAddressSanitizer\n "}, {"sha": "f2f74cc17b3de1b680287ad85f20f8f501967f62", "filename": "src/doc/unstable-book/src/language-features/cfi-encoding.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfi-encoding.md", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfi-encoding.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfi-encoding.md?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,25 @@\n+# `cfi_encoding`\n+\n+The tracking issue for this feature is: [#89653]\n+\n+[#89653]: https://github.com/rust-lang/rust/issues/89653\n+\n+------------------------\n+\n+The `cfi_encoding` feature allows the user to define a CFI encoding for a type.\n+It allows the user to use a different names for types that otherwise would be\n+required to have the same name as used in externally defined C functions.\n+\n+## Examples\n+\n+```rust\n+#![feature(cfi_encoding, extern_types)]\n+\n+#[cfi_encoding = \"3Foo\"]\n+pub struct Type1(i32);\n+\n+extern {\n+    #[cfi_encoding = \"3Bar\"]\n+    type Type2;\n+}\n+```"}, {"sha": "fb32b6ef1d3f50d4f70cb55e49ecdb2e9b9b5876", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -44,7 +44,7 @@ where\n         discard_positive_impl: bool,\n     ) -> Option<Item> {\n         let tcx = self.cx.tcx;\n-        let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, [ty]));\n+        let trait_ref = ty::Binder::dummy(ty::TraitRef::new(tcx, trait_def_id, [ty]));\n         if !self.cx.generated_synthetics.insert((ty, trait_def_id)) {\n             debug!(\"get_auto_trait_impl_for({:?}): already generated, aborting\", trait_ref);\n             return None;"}, {"sha": "951f54e93663cc2b2dc13f037e2eeebfdb32664b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -152,8 +152,9 @@ pub(crate) fn try_inline_glob(\n             // reexported by the glob, e.g. because they are shadowed by something else.\n             let reexports = cx\n                 .tcx\n-                .module_children_reexports(current_mod)\n+                .module_children_local(current_mod)\n                 .iter()\n+                .filter(|child| !child.reexport_chain.is_empty())\n                 .filter_map(|child| child.res.opt_def_id())\n                 .collect();\n             let mut items = build_module_items(cx, did, visited, inlined_names, Some(&reexports));"}, {"sha": "23449a25c3a5ecc7bb04abe0b28db2365a4e749f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -131,7 +131,7 @@ fn clean_generic_bound<'tcx>(\n         hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n             let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n \n-            let trait_ref = ty::TraitRef::identity(cx.tcx, def_id);\n+            let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(cx.tcx, def_id));\n \n             let generic_args = clean_generic_args(generic_args, cx);\n             let GenericArgs::AngleBracketed { bindings, .. } = generic_args\n@@ -2089,9 +2089,9 @@ pub(crate) fn reexport_chain<'tcx>(\n     import_def_id: LocalDefId,\n     target_def_id: LocalDefId,\n ) -> &'tcx [Reexport] {\n-    for child in tcx.module_children_reexports(tcx.local_parent(import_def_id)) {\n+    for child in tcx.module_children_local(tcx.local_parent(import_def_id)) {\n         if child.res.opt_def_id() == Some(target_def_id.to_def_id())\n-            && child.reexport_chain[0].id() == Some(import_def_id.to_def_id())\n+            && child.reexport_chain.first().and_then(|r| r.id()) == Some(import_def_id.to_def_id())\n         {\n             return &child.reexport_chain;\n         }"}, {"sha": "1c6810bdaf9be1b4077ba11ee7b092a8ed0518c0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -439,6 +439,7 @@ impl clean::GenericBound {\n                 let modifier_str = match modifier {\n                     hir::TraitBoundModifier::None => \"\",\n                     hir::TraitBoundModifier::Maybe => \"?\",\n+                    hir::TraitBoundModifier::Negative => \"!\",\n                     // ~const is experimental; do not display those bounds in rustdoc\n                     hir::TraitBoundModifier::MaybeConst => \"\",\n                 };"}, {"sha": "a7d5f497756b58fda25ac01e058235f661f55408", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1259,6 +1259,10 @@ a.tooltip:hover::after {\n \tbackground-color: var(--search-error-code-background-color);\n }\n \n+.search-corrections {\n+\tfont-weight: normal;\n+}\n+\n #src-sidebar-toggle {\n \tposition: sticky;\n \ttop: 0;"}, {"sha": "8b931f74e600a074b68621ba5291355236497839", "filename": "src/librustdoc/html/static/js/externs.js", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -9,6 +9,7 @@ function initSearch(searchIndex){}\n /**\n  * @typedef {{\n  *     name: string,\n+ *     id: integer,\n  *     fullPath: Array<string>,\n  *     pathWithoutLast: Array<string>,\n  *     pathLast: string,\n@@ -36,6 +37,8 @@ let ParserState;\n  *     args: Array<QueryElement>,\n  *     returned: Array<QueryElement>,\n  *     foundElems: number,\n+ *     literalSearch: boolean,\n+ *     corrections: Array<{from: string, to: integer}>,\n  * }}\n  */\n let ParsedQuery;\n@@ -139,7 +142,7 @@ let FunctionSearchType;\n \n /**\n  * @typedef {{\n- *     name: (null|string),\n+ *     id: (null|number),\n  *     ty: (null|number),\n  *     generics: Array<FunctionType>,\n  * }}"}, {"sha": "62afe40bb31553d94ec35d0ea5f8ee6c1dfa41eb", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 224, "deletions": 196, "changes": 420, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -58,6 +58,7 @@ function printTab(nb) {\n         }\n         iter += 1;\n     });\n+    const isTypeSearch = (nb > 0 || iter === 1);\n     iter = 0;\n     onEachLazy(document.getElementById(\"results\").childNodes, elem => {\n         if (nb === iter) {\n@@ -70,6 +71,13 @@ function printTab(nb) {\n     });\n     if (foundCurrentTab && foundCurrentResultSet) {\n         searchState.currentTab = nb;\n+        // Corrections only kick in on type-based searches.\n+        const correctionsElem = document.getElementsByClassName(\"search-corrections\");\n+        if (isTypeSearch) {\n+            removeClass(correctionsElem[0], \"hidden\");\n+        } else {\n+            addClass(correctionsElem[0], \"hidden\");\n+        }\n     } else if (nb !== 0) {\n         printTab(0);\n     }\n@@ -191,6 +199,13 @@ function initSearch(rawSearchIndex) {\n      */\n     let searchIndex;\n     let currentResults;\n+    /**\n+     * Map from normalized type names to integers. Used to make type search\n+     * more efficient.\n+     *\n+     * @type {Map<string, integer>}\n+     */\n+    let typeNameIdMap;\n     const ALIASES = new Map();\n \n     function isWhitespace(c) {\n@@ -358,6 +373,7 @@ function initSearch(rawSearchIndex) {\n         parserState.typeFilter = null;\n         return {\n             name: name,\n+            id: -1,\n             fullPath: pathSegments,\n             pathWithoutLast: pathSegments.slice(0, pathSegments.length - 1),\n             pathLast: pathSegments[pathSegments.length - 1],\n@@ -718,6 +734,7 @@ function initSearch(rawSearchIndex) {\n             foundElems: 0,\n             literalSearch: false,\n             error: null,\n+            correction: null,\n         };\n     }\n \n@@ -873,7 +890,7 @@ function initSearch(rawSearchIndex) {\n      *\n      * @param {Array<Result>} results_in_args\n      * @param {Array<Result>} results_returned\n-     * @param {Array<Result>} results_in_args\n+     * @param {Array<Result>} results_others\n      * @param {ParsedQuery} parsedQuery\n      *\n      * @return {ResultsTable}\n@@ -1091,48 +1108,50 @@ function initSearch(rawSearchIndex) {\n          *\n          * @param {Row} row                 - The object to check.\n          * @param {QueryElement} elem       - The element from the parsed query.\n-         * @param {integer} defaultDistance - This is the value to return in case there are no\n-         *                                    generics.\n          *\n-         * @return {integer}           - Returns the best match (if any) or `maxEditDistance + 1`.\n+         * @return {boolean}           - Returns true if a match, false otherwise.\n          */\n-        function checkGenerics(row, elem, defaultDistance, maxEditDistance) {\n-            if (row.generics.length === 0) {\n-                return elem.generics.length === 0 ? defaultDistance : maxEditDistance + 1;\n-            } else if (row.generics.length > 0 && row.generics[0].name === null) {\n-                return checkGenerics(row.generics[0], elem, defaultDistance, maxEditDistance);\n-            }\n-            // The names match, but we need to be sure that all generics kinda\n-            // match as well.\n+        function checkGenerics(row, elem) {\n+            if (row.generics.length === 0 || elem.generics.length === 0) {\n+                return false;\n+            }\n+            // This function is called if the names match, but we need to make\n+            // sure that all generics match as well.\n+            //\n+            // This search engine implements order-agnostic unification. There\n+            // should be no missing duplicates (generics have \"bag semantics\"),\n+            // and the row is allowed to have extras.\n             if (elem.generics.length > 0 && row.generics.length >= elem.generics.length) {\n                 const elems = new Map();\n-                for (const entry of row.generics) {\n-                    if (entry.name === \"\") {\n+                const addEntryToElems = function addEntryToElems(entry) {\n+                    if (entry.id === -1) {\n                         // Pure generic, needs to check into it.\n-                        if (checkGenerics(entry, elem, maxEditDistance + 1, maxEditDistance)\n-                            !== 0) {\n-                            return maxEditDistance + 1;\n+                        for (const inner_entry of entry.generics) {\n+                            addEntryToElems(inner_entry);\n                         }\n-                        continue;\n+                        return;\n                     }\n                     let currentEntryElems;\n-                    if (elems.has(entry.name)) {\n-                        currentEntryElems = elems.get(entry.name);\n+                    if (elems.has(entry.id)) {\n+                        currentEntryElems = elems.get(entry.id);\n                     } else {\n                         currentEntryElems = [];\n-                        elems.set(entry.name, currentEntryElems);\n+                        elems.set(entry.id, currentEntryElems);\n                     }\n                     currentEntryElems.push(entry);\n+                };\n+                for (const entry of row.generics) {\n+                    addEntryToElems(entry);\n                 }\n                 // We need to find the type that matches the most to remove it in order\n                 // to move forward.\n                 const handleGeneric = generic => {\n-                    if (!elems.has(generic.name)) {\n+                    if (!elems.has(generic.id)) {\n                         return false;\n                     }\n-                    const matchElems = elems.get(generic.name);\n+                    const matchElems = elems.get(generic.id);\n                     const matchIdx = matchElems.findIndex(tmp_elem => {\n-                        if (checkGenerics(tmp_elem, generic, 0, maxEditDistance) !== 0) {\n+                        if (generic.generics.length > 0 && !checkGenerics(tmp_elem, generic)) {\n                             return false;\n                         }\n                         return typePassesFilter(generic.typeFilter, tmp_elem.ty);\n@@ -1142,7 +1161,7 @@ function initSearch(rawSearchIndex) {\n                     }\n                     matchElems.splice(matchIdx, 1);\n                     if (matchElems.length === 0) {\n-                        elems.delete(generic.name);\n+                        elems.delete(generic.id);\n                     }\n                     return true;\n                 };\n@@ -1152,17 +1171,17 @@ function initSearch(rawSearchIndex) {\n                 // own type.\n                 for (const generic of elem.generics) {\n                     if (generic.typeFilter !== -1 && !handleGeneric(generic)) {\n-                        return maxEditDistance + 1;\n+                        return false;\n                     }\n                 }\n                 for (const generic of elem.generics) {\n                     if (generic.typeFilter === -1 && !handleGeneric(generic)) {\n-                        return maxEditDistance + 1;\n+                        return false;\n                     }\n                 }\n-                return 0;\n+                return true;\n             }\n-            return maxEditDistance + 1;\n+            return false;\n         }\n \n         /**\n@@ -1172,17 +1191,15 @@ function initSearch(rawSearchIndex) {\n           * @param {Row} row\n           * @param {QueryElement} elem    - The element from the parsed query.\n           *\n-          * @return {integer} - Returns an edit distance to the best match.\n+          * @return {boolean} - Returns true if found, false otherwise.\n           */\n-        function checkIfInGenerics(row, elem, maxEditDistance) {\n-            let dist = maxEditDistance + 1;\n+        function checkIfInGenerics(row, elem) {\n             for (const entry of row.generics) {\n-                dist = Math.min(checkType(entry, elem, true, maxEditDistance), dist);\n-                if (dist === 0) {\n-                    break;\n+                if (checkType(entry, elem)) {\n+                    return true;\n                 }\n             }\n-            return dist;\n+            return false;\n         }\n \n         /**\n@@ -1191,162 +1208,78 @@ function initSearch(rawSearchIndex) {\n           *\n           * @param {Row} row\n           * @param {QueryElement} elem      - The element from the parsed query.\n-          * @param {boolean} literalSearch\n           *\n-          * @return {integer} - Returns an edit distance to the best match. If there is\n-          *                     no match, returns `maxEditDistance + 1`.\n+          * @return {boolean} - Returns true if the type matches, false otherwise.\n           */\n-        function checkType(row, elem, literalSearch, maxEditDistance) {\n-            if (row.name === null) {\n+        function checkType(row, elem) {\n+            if (row.id === -1) {\n                 // This is a pure \"generic\" search, no need to run other checks.\n-                if (row.generics.length > 0) {\n-                    return checkIfInGenerics(row, elem, maxEditDistance);\n-                }\n-                return maxEditDistance + 1;\n+                return row.generics.length > 0 ? checkIfInGenerics(row, elem) : false;\n             }\n \n-            let dist;\n-            if (typePassesFilter(elem.typeFilter, row.ty)) {\n-                dist = editDistance(row.name, elem.name, maxEditDistance);\n-            } else {\n-                dist = maxEditDistance + 1;\n-            }\n-            if (literalSearch) {\n-                if (dist !== 0) {\n-                    // The name didn't match, let's try to check if the generics do.\n-                    if (elem.generics.length === 0) {\n-                        const checkGeneric = row.generics.length > 0;\n-                        if (checkGeneric && row.generics\n-                            .findIndex(tmp_elem => tmp_elem.name === elem.name &&\n-                                typePassesFilter(elem.typeFilter, tmp_elem.ty)) !== -1) {\n-                            return 0;\n-                        }\n-                    }\n-                    return maxEditDistance + 1;\n-                } else if (elem.generics.length > 0) {\n-                    return checkGenerics(row, elem, maxEditDistance + 1, maxEditDistance);\n-                }\n-                return 0;\n-            } else if (row.generics.length > 0) {\n-                if (elem.generics.length === 0) {\n-                    if (dist === 0) {\n-                        return 0;\n-                    }\n-                    // The name didn't match so we now check if the type we're looking for is inside\n-                    // the generics!\n-                    dist = Math.min(dist, checkIfInGenerics(row, elem, maxEditDistance));\n-                    return dist;\n-                } else if (dist > maxEditDistance) {\n-                    // So our item's name doesn't match at all and has generics.\n-                    //\n-                    // Maybe it's present in a sub generic? For example \"f<A<B<C>>>()\", if we're\n-                    // looking for \"B<C>\", we'll need to go down.\n-                    return checkIfInGenerics(row, elem, maxEditDistance);\n-                } else {\n-                    // At this point, the name kinda match and we have generics to check, so\n-                    // let's go!\n-                    const tmp_dist = checkGenerics(row, elem, dist, maxEditDistance);\n-                    if (tmp_dist > maxEditDistance) {\n-                        return maxEditDistance + 1;\n-                    }\n-                    // We compute the median value of both checks and return it.\n-                    return (tmp_dist + dist) / 2;\n+            if (row.id === elem.id && typePassesFilter(elem.typeFilter, row.ty)) {\n+                if (elem.generics.length > 0) {\n+                    return checkGenerics(row, elem);\n                 }\n-            } else if (elem.generics.length > 0) {\n-                // In this case, we were expecting generics but there isn't so we simply reject this\n-                // one.\n-                return maxEditDistance + 1;\n+                return true;\n             }\n-            // No generics on our query or on the target type so we can return without doing\n-            // anything else.\n-            return dist;\n+\n+            // If the current item does not match, try [unboxing] the generic.\n+            // [unboxing]:\n+            //   https://ndmitchell.com/downloads/slides-hoogle_fast_type_searching-09_aug_2008.pdf\n+            return checkIfInGenerics(row, elem);\n         }\n \n         /**\n          * This function checks if the object (`row`) has an argument with the given type (`elem`).\n          *\n          * @param {Row} row\n          * @param {QueryElement} elem    - The element from the parsed query.\n-         * @param {integer} maxEditDistance\n          * @param {Array<integer>} skipPositions - Do not return one of these positions.\n          *\n-         * @return {dist: integer, position: integer} - Returns an edit distance to the best match.\n-         *                                              If there is no match, returns\n-         *                                              `maxEditDistance + 1` and position: -1.\n+         * @return {integer} - Returns the position of the match, or -1 if none.\n          */\n-        function findArg(row, elem, maxEditDistance, skipPositions) {\n-            let dist = maxEditDistance + 1;\n-            let position = -1;\n-\n+        function findArg(row, elem, skipPositions) {\n             if (row && row.type && row.type.inputs && row.type.inputs.length > 0) {\n                 let i = 0;\n                 for (const input of row.type.inputs) {\n                     if (skipPositions.indexOf(i) !== -1) {\n                         i += 1;\n                         continue;\n                     }\n-                    const typeDist = checkType(\n-                        input,\n-                        elem,\n-                        parsedQuery.literalSearch,\n-                        maxEditDistance\n-                    );\n-                    if (typeDist === 0) {\n-                        return {dist: 0, position: i};\n-                    }\n-                    if (typeDist < dist) {\n-                        dist = typeDist;\n-                        position = i;\n+                    if (checkType(input, elem)) {\n+                        return i;\n                     }\n                     i += 1;\n                 }\n             }\n-            dist = parsedQuery.literalSearch ? maxEditDistance + 1 : dist;\n-            return {dist, position};\n+            return -1;\n         }\n \n         /**\n          * This function checks if the object (`row`) returns the given type (`elem`).\n          *\n          * @param {Row} row\n          * @param {QueryElement} elem   - The element from the parsed query.\n-         * @param {integer} maxEditDistance\n          * @param {Array<integer>} skipPositions - Do not return one of these positions.\n          *\n-         * @return {dist: integer, position: integer} - Returns an edit distance to the best match.\n-         *                                              If there is no match, returns\n-         *                                              `maxEditDistance + 1` and position: -1.\n+         * @return {integer} - Returns the position of the matching item, or -1 if none.\n          */\n-        function checkReturned(row, elem, maxEditDistance, skipPositions) {\n-            let dist = maxEditDistance + 1;\n-            let position = -1;\n-\n+        function checkReturned(row, elem, skipPositions) {\n             if (row && row.type && row.type.output.length > 0) {\n-                const ret = row.type.output;\n                 let i = 0;\n-                for (const ret_ty of ret) {\n+                for (const ret_ty of row.type.output) {\n                     if (skipPositions.indexOf(i) !== -1) {\n                         i += 1;\n                         continue;\n                     }\n-                    const typeDist = checkType(\n-                        ret_ty,\n-                        elem,\n-                        parsedQuery.literalSearch,\n-                        maxEditDistance\n-                    );\n-                    if (typeDist === 0) {\n-                        return {dist: 0, position: i};\n-                    }\n-                    if (typeDist < dist) {\n-                        dist = typeDist;\n-                        position = i;\n+                    if (checkType(ret_ty, elem)) {\n+                        return i;\n                     }\n                     i += 1;\n                 }\n             }\n-            dist = parsedQuery.literalSearch ? maxEditDistance + 1 : dist;\n-            return {dist, position};\n+            return -1;\n         }\n \n         function checkPath(contains, ty, maxEditDistance) {\n@@ -1543,17 +1476,20 @@ function initSearch(rawSearchIndex) {\n             if (!row || (filterCrates !== null && row.crate !== filterCrates)) {\n                 return;\n             }\n-            let dist, index = -1, path_dist = 0;\n+            let index = -1, path_dist = 0;\n             const fullId = row.id;\n             const searchWord = searchWords[pos];\n \n-            const in_args = findArg(row, elem, maxEditDistance, []);\n-            const returned = checkReturned(row, elem, maxEditDistance, []);\n-\n-            // path_dist is 0 because no parent path information is currently stored\n-            // in the search index\n-            addIntoResults(results_in_args, fullId, pos, -1, in_args.dist, 0, maxEditDistance);\n-            addIntoResults(results_returned, fullId, pos, -1, returned.dist, 0, maxEditDistance);\n+            const in_args = findArg(row, elem, []);\n+            if (in_args !== -1) {\n+                // path_dist is 0 because no parent path information is currently stored\n+                // in the search index\n+                addIntoResults(results_in_args, fullId, pos, -1, 0, 0, maxEditDistance);\n+            }\n+            const returned = checkReturned(row, elem, []);\n+            if (returned !== -1) {\n+                addIntoResults(results_returned, fullId, pos, -1, 0, 0, maxEditDistance);\n+            }\n \n             if (!typePassesFilter(elem.typeFilter, row.ty)) {\n                 return;\n@@ -1574,16 +1510,6 @@ function initSearch(rawSearchIndex) {\n                 index = row_index;\n             }\n \n-            // No need to check anything else if it's a \"pure\" generics search.\n-            if (elem.name.length === 0) {\n-                if (row.type !== null) {\n-                    dist = checkGenerics(row.type, elem, maxEditDistance + 1, maxEditDistance);\n-                    // path_dist is 0 because we know it's empty\n-                    addIntoResults(results_others, fullId, pos, index, dist, 0, maxEditDistance);\n-                }\n-                return;\n-            }\n-\n             if (elem.fullPath.length > 1) {\n                 path_dist = checkPath(elem.pathWithoutLast, row, maxEditDistance);\n                 if (path_dist > maxEditDistance) {\n@@ -1598,7 +1524,7 @@ function initSearch(rawSearchIndex) {\n                 return;\n             }\n \n-            dist = editDistance(searchWord, elem.pathLast, maxEditDistance);\n+            const dist = editDistance(searchWord, elem.pathLast, maxEditDistance);\n \n             if (index === -1 && dist + path_dist > maxEditDistance) {\n                 return;\n@@ -1616,28 +1542,22 @@ function initSearch(rawSearchIndex) {\n          * @param {integer} pos      - Position in the `searchIndex`.\n          * @param {Object} results\n          */\n-        function handleArgs(row, pos, results, maxEditDistance) {\n+        function handleArgs(row, pos, results) {\n             if (!row || (filterCrates !== null && row.crate !== filterCrates)) {\n                 return;\n             }\n \n-            let totalDist = 0;\n-            let nbDist = 0;\n-\n             // If the result is too \"bad\", we return false and it ends this search.\n             function checkArgs(elems, callback) {\n                 const skipPositions = [];\n                 for (const elem of elems) {\n                     // There is more than one parameter to the query so all checks should be \"exact\"\n-                    const { dist, position } = callback(\n+                    const position = callback(\n                         row,\n                         elem,\n-                        maxEditDistance,\n                         skipPositions\n                     );\n-                    if (dist <= 1) {\n-                        nbDist += 1;\n-                        totalDist += dist;\n+                    if (position !== -1) {\n                         skipPositions.push(position);\n                     } else {\n                         return false;\n@@ -1652,11 +1572,7 @@ function initSearch(rawSearchIndex) {\n                 return;\n             }\n \n-            if (nbDist === 0) {\n-                return;\n-            }\n-            const dist = Math.round(totalDist / nbDist);\n-            addIntoResults(results, row.id, pos, 0, dist, 0, maxEditDistance);\n+            addIntoResults(results, row.id, pos, 0, 0, 0, Number.MAX_VALUE);\n         }\n \n         function innerRunQuery() {\n@@ -1671,6 +1587,53 @@ function initSearch(rawSearchIndex) {\n             }\n             const maxEditDistance = Math.floor(queryLen / 3);\n \n+            /**\n+             * Convert names to ids in parsed query elements.\n+             * This is not used for the \"In Names\" tab, but is used for the\n+             * \"In Params\", \"In Returns\", and \"In Function Signature\" tabs.\n+             *\n+             * If there is no matching item, but a close-enough match, this\n+             * function also that correction.\n+             *\n+             * See `buildTypeMapIndex` for more information.\n+             *\n+             * @param {QueryElement} elem\n+             */\n+            function convertNameToId(elem) {\n+                if (typeNameIdMap.has(elem.name)) {\n+                    elem.id = typeNameIdMap.get(elem.name);\n+                } else if (!parsedQuery.literalSearch) {\n+                    let match = -1;\n+                    let matchDist = maxEditDistance + 1;\n+                    let matchName = \"\";\n+                    for (const [name, id] of typeNameIdMap) {\n+                        const dist = editDistance(name, elem.name, maxEditDistance);\n+                        if (dist <= matchDist && dist <= maxEditDistance) {\n+                            if (dist === matchDist && matchName > name) {\n+                                continue;\n+                            }\n+                            match = id;\n+                            matchDist = dist;\n+                            matchName = name;\n+                        }\n+                    }\n+                    if (match !== -1) {\n+                        parsedQuery.correction = matchName;\n+                    }\n+                    elem.id = match;\n+                }\n+                for (const elem2 of elem.generics) {\n+                    convertNameToId(elem2);\n+                }\n+            }\n+\n+            for (const elem of parsedQuery.elems) {\n+                convertNameToId(elem);\n+            }\n+            for (const elem of parsedQuery.returned) {\n+                convertNameToId(elem);\n+            }\n+\n             if (parsedQuery.foundElems === 1) {\n                 if (parsedQuery.elems.length === 1) {\n                     elem = parsedQuery.elems[0];\n@@ -1695,22 +1658,23 @@ function initSearch(rawSearchIndex) {\n                         in_returned = checkReturned(\n                             row,\n                             elem,\n-                            maxEditDistance,\n                             []\n                         );\n-                        addIntoResults(\n-                            results_others,\n-                            row.id,\n-                            i,\n-                            -1,\n-                            in_returned.dist,\n-                            maxEditDistance\n-                        );\n+                        if (in_returned !== -1) {\n+                            addIntoResults(\n+                                results_others,\n+                                row.id,\n+                                i,\n+                                -1,\n+                                0,\n+                                Number.MAX_VALUE\n+                            );\n+                        }\n                     }\n                 }\n             } else if (parsedQuery.foundElems > 0) {\n                 for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n-                    handleArgs(searchIndex[i], i, results_others, maxEditDistance);\n+                    handleArgs(searchIndex[i], i, results_others);\n                 }\n             }\n         }\n@@ -2030,6 +1994,16 @@ function initSearch(rawSearchIndex) {\n             currentTab = 0;\n         }\n \n+        if (results.query.correction !== null) {\n+            const orig = results.query.returned.length > 0\n+                ? results.query.returned[0].name\n+                : results.query.elems[0].name;\n+            output += \"<h3 class=\\\"search-corrections\\\">\" +\n+                `Type \"${orig}\" not found. ` +\n+                \"Showing results for closest type name \" +\n+                `\"${results.query.correction}\" instead.</h3>`;\n+        }\n+\n         const resultsElem = document.createElement(\"div\");\n         resultsElem.id = \"results\";\n         resultsElem.appendChild(ret_others[0]);\n@@ -2108,6 +2082,34 @@ function initSearch(rawSearchIndex) {\n             filterCrates);\n     }\n \n+    /**\n+     * Add an item to the type Name->ID map, or, if one already exists, use it.\n+     * Returns the number. If name is \"\" or null, return -1 (pure generic).\n+     *\n+     * This is effectively string interning, so that function matching can be\n+     * done more quickly. Two types with the same name but different item kinds\n+     * get the same ID.\n+     *\n+     * @param {Map<string, integer>} typeNameIdMap\n+     * @param {string} name\n+     *\n+     * @returns {integer}\n+     */\n+    function buildTypeMapIndex(typeNameIdMap, name) {\n+\n+        if (name === \"\" || name === null) {\n+            return -1;\n+        }\n+\n+        if (typeNameIdMap.has(name)) {\n+            return typeNameIdMap.get(name);\n+        } else {\n+            const id = typeNameIdMap.size;\n+            typeNameIdMap.set(name, id);\n+            return id;\n+        }\n+    }\n+\n     /**\n      * Convert a list of RawFunctionType / ID to object-based FunctionType.\n      *\n@@ -2126,7 +2128,7 @@ function initSearch(rawSearchIndex) {\n      *\n      * @return {Array<FunctionSearchType>}\n      */\n-    function buildItemSearchTypeAll(types, lowercasePaths) {\n+    function buildItemSearchTypeAll(types, lowercasePaths, typeNameIdMap) {\n         const PATH_INDEX_DATA = 0;\n         const GENERICS_DATA = 1;\n         return types.map(type => {\n@@ -2136,11 +2138,17 @@ function initSearch(rawSearchIndex) {\n                 generics = [];\n             } else {\n                 pathIndex = type[PATH_INDEX_DATA];\n-                generics = buildItemSearchTypeAll(type[GENERICS_DATA], lowercasePaths);\n+                generics = buildItemSearchTypeAll(\n+                    type[GENERICS_DATA],\n+                    lowercasePaths,\n+                    typeNameIdMap\n+                );\n             }\n             return {\n                 // `0` is used as a sentinel because it's fewer bytes than `null`\n-                name: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].name,\n+                id: pathIndex === 0\n+                    ? -1\n+                    : buildTypeMapIndex(typeNameIdMap, lowercasePaths[pathIndex - 1].name),\n                 ty: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].ty,\n                 generics: generics,\n             };\n@@ -2159,10 +2167,11 @@ function initSearch(rawSearchIndex) {\n      *\n      * @param {RawFunctionSearchType} functionSearchType\n      * @param {Array<{name: string, ty: number}>} lowercasePaths\n+     * @param {Map<string, integer>}\n      *\n      * @return {null|FunctionSearchType}\n      */\n-    function buildFunctionSearchType(functionSearchType, lowercasePaths) {\n+    function buildFunctionSearchType(functionSearchType, lowercasePaths, typeNameIdMap) {\n         const INPUTS_DATA = 0;\n         const OUTPUT_DATA = 1;\n         // `0` is used as a sentinel because it's fewer bytes than `null`\n@@ -2173,23 +2182,35 @@ function initSearch(rawSearchIndex) {\n         if (typeof functionSearchType[INPUTS_DATA] === \"number\") {\n             const pathIndex = functionSearchType[INPUTS_DATA];\n             inputs = [{\n-                name: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].name,\n+                id: pathIndex === 0\n+                    ? -1\n+                    : buildTypeMapIndex(typeNameIdMap, lowercasePaths[pathIndex - 1].name),\n                 ty: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].ty,\n                 generics: [],\n             }];\n         } else {\n-            inputs = buildItemSearchTypeAll(functionSearchType[INPUTS_DATA], lowercasePaths);\n+            inputs = buildItemSearchTypeAll(\n+                functionSearchType[INPUTS_DATA],\n+                lowercasePaths,\n+                typeNameIdMap\n+            );\n         }\n         if (functionSearchType.length > 1) {\n             if (typeof functionSearchType[OUTPUT_DATA] === \"number\") {\n                 const pathIndex = functionSearchType[OUTPUT_DATA];\n                 output = [{\n-                    name: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].name,\n+                    id: pathIndex === 0\n+                        ? -1\n+                        : buildTypeMapIndex(typeNameIdMap, lowercasePaths[pathIndex - 1].name),\n                     ty: pathIndex === 0 ? null : lowercasePaths[pathIndex - 1].ty,\n                     generics: [],\n                 }];\n             } else {\n-                output = buildItemSearchTypeAll(functionSearchType[OUTPUT_DATA], lowercasePaths);\n+                output = buildItemSearchTypeAll(\n+                    functionSearchType[OUTPUT_DATA],\n+                    lowercasePaths,\n+                    typeNameIdMap\n+                );\n             }\n         } else {\n             output = [];\n@@ -2202,9 +2223,12 @@ function initSearch(rawSearchIndex) {\n     function buildIndex(rawSearchIndex) {\n         searchIndex = [];\n         /**\n+         * List of normalized search words (ASCII lowercased, and undescores removed).\n+         *\n          * @type {Array<string>}\n          */\n         const searchWords = [];\n+        typeNameIdMap = new Map();\n         const charA = \"A\".charCodeAt(0);\n         let currentIndex = 0;\n         let id = 0;\n@@ -2337,7 +2361,11 @@ function initSearch(rawSearchIndex) {\n                     path: itemPaths.has(i) ? itemPaths.get(i) : lastPath,\n                     desc: itemDescs[i],\n                     parent: itemParentIdxs[i] > 0 ? paths[itemParentIdxs[i] - 1] : undefined,\n-                    type: buildFunctionSearchType(itemFunctionSearchTypes[i], lowercasePaths),\n+                    type: buildFunctionSearchType(\n+                        itemFunctionSearchTypes[i],\n+                        lowercasePaths,\n+                        typeNameIdMap\n+                    ),\n                     id: id,\n                     normalizedName: word.indexOf(\"_\") === -1 ? word : word.replace(/_/g, \"\"),\n                     deprecated: deprecatedItems.has(i),"}, {"sha": "20e09a548058ddcf536ef07e6bf35f116d2f39eb", "filename": "src/librustdoc/html/templates/type_layout.html", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,53 +1,58 @@\n-<h2 id=\"layout\" class=\"small-section-header\">  {# #}\n+<h2 id=\"layout\" class=\"small-section-header\"> {# #}\n     Layout<a href=\"#layout\" class=\"anchor\">\u00a7</a> {# #}\n </h2> {# #}\n <div class=\"docblock\"> {# #}\n     {% match type_layout_size %}\n-        {% when Ok(type_layout_size) %}\n-            <div class=\"warning\"> {# #}\n-                <p> {# #}\n-                    <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n-                    unstable</strong> and may even differ between compilations. {#+ #}\n-                    The only exception is types with certain <code>repr(...)</code> {#+ #}\n-                    attributes. Please see the Rust Reference\u2019s {#+ #}\n-                    <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">\u201cType Layout\u201d</a> {#+ #}\n-                    chapter for details on type layout guarantees. {# #}\n-                </p> {# #}\n-            </div> {# #}\n-            <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n-            {% if !variants.is_empty() %}\n-                <p> {# #}\n-                    <strong>Size for each variant:</strong> {# #}\n-                </p> {# #}\n-                <ul> {# #}\n-                    {% for (name, layout_size) in variants %}\n-                        <li> {# #}\n-                            <code>{{ name }}</code>: {#+ #}\n-                            {{ layout_size|safe }}\n-                        </li> {# #}\n-                    {% endfor %}\n-                </ul> {# #}\n-            {% endif %}\n-        {# This kind of layout error can occur with valid code, e.g. if you try to\n-           get the layout of a generic type such as `Vec<T>`. #}\n+    {% when Ok(type_layout_size) %}\n+    <div class=\"warning\"> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n+                unstable</strong> and may even differ between compilations. {#+ #}\n+            The only exception is types with certain <code>repr(...)</code> {#+ #}\n+            attributes. Please see the Rust Reference\u2019s {#+ #}\n+            <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">\u201cType Layout\u201d</a> {#+ #}\n+            chapter for details on type layout guarantees. {# #}\n+        </p> {# #}\n+    </div> {# #}\n+    <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n+    {% if !variants.is_empty() %}\n+    <p> {# #}\n+        <strong>Size for each variant:</strong> {# #}\n+    </p> {# #}\n+    <ul> {# #}\n+        {% for (name, layout_size) in variants %}\n+        <li> {# #}\n+            <code>{{ name }}</code>: {#+ #}\n+            {{ layout_size|safe }}\n+        </li> {# #}\n+        {% endfor %}\n+    </ul> {# #}\n+    {% endif %}\n+    {# This kind of layout error can occur with valid code, e.g. if you try to\n+    get the layout of a generic type such as `Vec<T>`. #}\n         {% when Err(LayoutError::Unknown(_)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Unable to compute type layout, {#+ #}\n-                possibly due to this type having generic parameters. {#+ #}\n-                Layout can only be computed for concrete, fully-instantiated types. {# #}\n-            </p> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Unable to compute type layout, {#+ #}\n+            possibly due to this type having generic parameters. {#+ #}\n+            Layout can only be computed for concrete, fully-instantiated types. {# #}\n+        </p> {# #}\n         {# This kind of error probably can't happen with valid code, but we don't\n-           want to panic and prevent the docs from building, so we just let the\n-           user know that we couldn't compute the layout. #}\n+        want to panic and prevent the docs from building, so we just let the\n+        user know that we couldn't compute the layout. #}\n         {% when Err(LayoutError::SizeOverflow(_)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n-                the type was too big. {# #}\n-            </p> {# #}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type was too big. {# #}\n+        </p> {# #}\n         {% when Err(LayoutError::NormalizationFailure(_, _)) %}\n-            <p> {# #}\n-                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n-                the type failed to be normalized. {# #}\n-            </p> {# #}\n-    {% endmatch %}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type failed to be normalized. {# #}\n+        </p> {# #}\n+        {% when Err(LayoutError::Cycle) %}\n+        <p> {# #}\n+            <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+            the type's layout depended on the type's layout itself. {# #}\n+        </p> {# #}\n+        {% endmatch %}\n </div> {# #}"}, {"sha": "b5bebb7059380cf453cf15e719411c9c1187cb5b", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -533,6 +533,10 @@ pub(crate) fn from_trait_bound_modifier(\n         None => TraitBoundModifier::None,\n         Maybe => TraitBoundModifier::Maybe,\n         MaybeConst => TraitBoundModifier::MaybeConst,\n+        // FIXME(negative-bounds): This bound should be rendered negative, but\n+        // since that's experimental, maybe let's not add it to the rustdoc json\n+        // API just now...\n+        Negative => TraitBoundModifier::None,\n     }\n }\n "}, {"sha": "841c7a78b2d4f22b1cc898f0de42af403413017f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -136,14 +136,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // is declared but also a reexport of itself producing two exports of the same\n         // macro in the same module.\n         let mut inserted = FxHashSet::default();\n-        for export in self.cx.tcx.module_children_reexports(CRATE_DEF_ID) {\n-            if let Res::Def(DefKind::Macro(_), def_id) = export.res &&\n+        for child in self.cx.tcx.module_children_local(CRATE_DEF_ID) {\n+            if !child.reexport_chain.is_empty() &&\n+                let Res::Def(DefKind::Macro(_), def_id) = child.res &&\n                 let Some(local_def_id) = def_id.as_local() &&\n                 self.cx.tcx.has_attr(def_id, sym::macro_export) &&\n                 inserted.insert(def_id)\n             {\n-                    let item = self.cx.tcx.hir().expect_item(local_def_id);\n-                    top_level_module.items.insert((local_def_id, Some(item.ident.name)), (item, None, None));\n+                let item = self.cx.tcx.hir().expect_item(local_def_id);\n+                top_level_module.items.insert((local_def_id, Some(item.ident.name)), (item, None, None));\n             }\n         }\n "}, {"sha": "6c3b5bb00a3475e2bec5d1b7a75beade6623c776", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -9,6 +9,7 @@ serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n anyhow = \"1.0.32\"\n flate2 = \"1.0.16\"\n+xz2 = \"0.1.7\"\n tar = \"0.4.29\"\n sha2 = \"0.10.1\"\n rayon = \"1.5.1\""}, {"sha": "7a4c15d01eadc219dfdb570c83eb8952715320a7", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -5,6 +5,7 @@ use std::fs::File;\n use std::io::Read;\n use std::path::{Path, PathBuf};\n use tar::Archive;\n+use xz2::read::XzDecoder;\n \n const DEFAULT_TARGET: &str = \"x86_64-unknown-linux-gnu\";\n \n@@ -175,9 +176,23 @@ impl Versions {\n     }\n \n     fn load_version_from_tarball(&mut self, package: &PkgType) -> Result<VersionInfo, Error> {\n-        let tarball_name = self.tarball_name(package, DEFAULT_TARGET)?;\n-        let tarball = self.dist_path.join(tarball_name);\n+        for ext in [\"xz\", \"gz\"] {\n+            let info =\n+                self.load_version_from_tarball_inner(&self.dist_path.join(self.archive_name(\n+                    package,\n+                    DEFAULT_TARGET,\n+                    &format!(\"tar.{}\", ext),\n+                )?))?;\n+            if info.present {\n+                return Ok(info);\n+            }\n+        }\n+\n+        // If neither tarball is present, we fallback to returning the non-present info.\n+        Ok(VersionInfo::default())\n+    }\n \n+    fn load_version_from_tarball_inner(&mut self, tarball: &Path) -> Result<VersionInfo, Error> {\n         let file = match File::open(&tarball) {\n             Ok(file) => file,\n             Err(err) if err.kind() == std::io::ErrorKind::NotFound => {\n@@ -187,7 +202,14 @@ impl Versions {\n             }\n             Err(err) => return Err(err.into()),\n         };\n-        let mut tar = Archive::new(GzDecoder::new(file));\n+        let mut tar: Archive<Box<dyn std::io::Read>> =\n+            Archive::new(if tarball.extension().map_or(false, |e| e == \"gz\") {\n+                Box::new(GzDecoder::new(file))\n+            } else if tarball.extension().map_or(false, |e| e == \"xz\") {\n+                Box::new(XzDecoder::new(file))\n+            } else {\n+                unimplemented!(\"tarball extension not recognized: {}\", tarball.display())\n+            });\n \n         let mut version = None;\n         let mut git_commit = None;"}, {"sha": "8f5d319cd4fc1860ec0226720f4d6a50fd54c839", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -517,7 +517,7 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n         tcx.mk_predicates_from_iter(ty_predicates.iter().map(|&(p, _)| p).chain(\n             params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n                 tcx.mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Trait(TraitPredicate {\n-                    trait_ref: tcx.mk_trait_ref(eq_trait_id, [tcx.mk_param_from_def(param)]),\n+                    trait_ref: ty::TraitRef::new(tcx, eq_trait_id, [tcx.mk_param_from_def(param)]),\n                     constness: BoundConstness::NotConst,\n                     polarity: ImplPolarity::Positive,\n                 }))))"}, {"sha": "6615f9c99537507c680e0393174f65148bb4cc6f", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -94,8 +94,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                         if trait_item.kind == (AssocItemKind::Fn { has_self: true }) {\n                             trait_self_ty = Some(\n                                 TraitRef::identity(cx.tcx, trait_item.id.owner_id.to_def_id())\n-                                    .self_ty()\n-                                    .skip_binder(),\n+                                    .self_ty(),\n                             );\n                         }\n                     }"}, {"sha": "06b88e34d2462ba34aec7bec73864776dda1601b", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -3476,8 +3476,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 let first_arg_span = first_arg_ty.span;\n                 let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n                 let self_ty = TraitRef::identity(cx.tcx, item.owner_id.to_def_id())\n-                    .self_ty()\n-                    .skip_binder();\n+                    .self_ty();\n                 wrong_self_convention::check(\n                     cx,\n                     item.ident.name.as_str(),\n@@ -3495,8 +3494,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.owner_id);\n             let self_ty = TraitRef::identity(cx.tcx, item.owner_id.to_def_id())\n-                .self_ty()\n-                .skip_binder();\n+                .self_ty();\n             if !ret_ty.contains(self_ty);\n \n             then {"}, {"sha": "d050310bd805ccb2a4700cc8033b7a449fd9e58f", "filename": "src/tools/miri/tests/fail/layout_cycle.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,28 @@\n+//@error-pattern: a cycle occurred during layout computation\n+//~^ ERROR: cycle detected when computing layout of\n+\n+use std::mem;\n+\n+pub struct S<T: Tr> {\n+    pub f: <T as Tr>::I,\n+}\n+\n+pub trait Tr {\n+    type I: Tr;\n+}\n+\n+impl<T: Tr> Tr for S<T> {\n+    type I = S<S<T>>;\n+}\n+\n+impl Tr for () {\n+    type I = ();\n+}\n+\n+fn foo<T: Tr>() -> usize {\n+    mem::size_of::<S<T>>()\n+}\n+\n+fn main() {\n+    println!(\"{}\", foo::<S<()>>());\n+}"}, {"sha": "62b7d5fb77d12f3141a50952d6d64e67ed6fb521", "filename": "src/tools/miri/tests/fail/layout_cycle.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Flayout_cycle.stderr?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,28 @@\n+error[E0391]: cycle detected when computing layout of `S<S<()>>`\n+   |\n+   = note: ...which requires computing layout of `<S<()> as Tr>::I`...\n+   = note: ...which again requires computing layout of `S<S<()>>`, completing the cycle\n+\n+error: post-monomorphization error: a cycle occurred during layout computation\n+  --> RUSTLIB/core/src/mem/mod.rs:LL:CC\n+   |\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ a cycle occurred during layout computation\n+   |\n+   = note: inside `std::mem::size_of::<S<S<()>>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n+note: inside `foo::<S<()>>`\n+  --> $DIR/layout_cycle.rs:LL:CC\n+   |\n+LL |     mem::size_of::<S<T>>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `main`\n+  --> $DIR/layout_cycle.rs:LL:CC\n+   |\n+LL |     println!(\"{}\", foo::<S<()>>());\n+   |                    ^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "270704ebffde61aa858ec1a61c29fd7f5db5697d", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -226,6 +226,24 @@ function runSearch(query, expected, doSearch, loadedFile, queryName) {\n     return error_text;\n }\n \n+function runCorrections(query, corrections, getCorrections, loadedFile) {\n+    const qc = getCorrections(query, loadedFile.FILTER_CRATE);\n+    const error_text = [];\n+\n+    if (corrections === null) {\n+        if (qc !== null) {\n+            error_text.push(`==> expected = null, found = ${qc}`);\n+        }\n+        return error_text;\n+    }\n+\n+    if (qc !== corrections.toLowerCase()) {\n+        error_text.push(`==> expected = ${corrections}, found = ${qc}`);\n+    }\n+\n+    return error_text;\n+}\n+\n function checkResult(error_text, loadedFile, displaySuccess) {\n     if (error_text.length === 0 && loadedFile.should_fail === true) {\n         console.log(\"FAILED\");\n@@ -272,9 +290,10 @@ function runCheck(loadedFile, key, callback) {\n     return 0;\n }\n \n-function runChecks(testFile, doSearch, parseQuery) {\n+function runChecks(testFile, doSearch, parseQuery, getCorrections) {\n     let checkExpected = false;\n     let checkParsed = false;\n+    let checkCorrections = false;\n     let testFileContent = readFile(testFile) + \"exports.QUERY = QUERY;\";\n \n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n@@ -291,9 +310,13 @@ function runChecks(testFile, doSearch, parseQuery) {\n         testFileContent += \"exports.PARSED = PARSED;\";\n         checkParsed = true;\n     }\n-    if (!checkParsed && !checkExpected) {\n+    if (testFileContent.indexOf(\"\\nconst CORRECTIONS\") !== -1) {\n+        testFileContent += \"exports.CORRECTIONS = CORRECTIONS;\";\n+        checkCorrections = true;\n+    }\n+    if (!checkParsed && !checkExpected && !checkCorrections) {\n         console.log(\"FAILED\");\n-        console.log(\"==> At least `PARSED` or `EXPECTED` is needed!\");\n+        console.log(\"==> At least `PARSED`, `EXPECTED`, or `CORRECTIONS` is needed!\");\n         return 1;\n     }\n \n@@ -310,6 +333,11 @@ function runChecks(testFile, doSearch, parseQuery) {\n             return runParser(query, expected, parseQuery, text);\n         });\n     }\n+    if (checkCorrections) {\n+        res += runCheck(loadedFile, \"CORRECTIONS\", (query, expected) => {\n+            return runCorrections(query, expected, getCorrections, loadedFile);\n+        });\n+    }\n     return res;\n }\n \n@@ -318,9 +346,10 @@ function runChecks(testFile, doSearch, parseQuery) {\n  *\n  * @param {string} doc_folder      - Path to a folder generated by running rustdoc\n  * @param {string} resource_suffix - Version number between filename and .js, e.g. \"1.59.0\"\n- * @returns {Object}               - Object containing two keys: `doSearch`, which runs a search\n- *   with the loaded index and returns a table of results; and `parseQuery`, which is the\n- *   `parseQuery` function exported from the search module.\n+ * @returns {Object}               - Object containing keys: `doSearch`, which runs a search\n+ *   with the loaded index and returns a table of results; `parseQuery`, which is the\n+ *   `parseQuery` function exported from the search module; and `getCorrections`, which runs\n+ *   a search but returns type name corrections instead of results.\n  */\n function loadSearchJS(doc_folder, resource_suffix) {\n     const searchIndexJs = path.join(doc_folder, \"search-index\" + resource_suffix + \".js\");\n@@ -336,6 +365,12 @@ function loadSearchJS(doc_folder, resource_suffix) {\n             return searchModule.execQuery(searchModule.parseQuery(queryStr), searchWords,\n                 filterCrate, currentCrate);\n         },\n+        getCorrections: function(queryStr, filterCrate, currentCrate) {\n+            const parsedQuery = searchModule.parseQuery(queryStr);\n+            searchModule.execQuery(parsedQuery, searchWords,\n+                filterCrate, currentCrate);\n+            return parsedQuery.correction;\n+        },\n         parseQuery: searchModule.parseQuery,\n     };\n }\n@@ -417,11 +452,14 @@ function main(argv) {\n     const doSearch = function(queryStr, filterCrate) {\n         return parseAndSearch.doSearch(queryStr, filterCrate, opts[\"crate_name\"]);\n     };\n+    const getCorrections = function(queryStr, filterCrate) {\n+        return parseAndSearch.getCorrections(queryStr, filterCrate, opts[\"crate_name\"]);\n+    };\n \n     if (opts[\"test_file\"].length !== 0) {\n         opts[\"test_file\"].forEach(file => {\n             process.stdout.write(`Testing ${file} ... `);\n-            errors += runChecks(file, doSearch, parseAndSearch.parseQuery);\n+            errors += runChecks(file, doSearch, parseAndSearch.parseQuery, getCorrections);\n         });\n     } else if (opts[\"test_folder\"].length !== 0) {\n         fs.readdirSync(opts[\"test_folder\"]).forEach(file => {\n@@ -430,7 +468,7 @@ function main(argv) {\n             }\n             process.stdout.write(`Testing ${file} ... `);\n             errors += runChecks(path.join(opts[\"test_folder\"], file), doSearch,\n-                    parseAndSearch.parseQuery);\n+                    parseAndSearch.parseQuery, getCorrections);\n         });\n     }\n     return errors > 0 ? 1 : 0;"}, {"sha": "f548388ed8ba278b65f7e3686cecfa161334b775", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -552,6 +552,12 @@ impl Rewrite for ast::GenericBound {\n                     ast::TraitBoundModifier::MaybeConstMaybe => poly_trait_ref\n                         .rewrite(context, shape.offset_left(8)?)\n                         .map(|s| format!(\"~const ?{}\", s)),\n+                    ast::TraitBoundModifier::Negative => poly_trait_ref\n+                        .rewrite(context, shape.offset_left(1)?)\n+                        .map(|s| format!(\"!{}\", s)),\n+                    ast::TraitBoundModifier::MaybeConstNegative => poly_trait_ref\n+                        .rewrite(context, shape.offset_left(8)?)\n+                        .map(|s| format!(\"~const !{}\", s)),\n                 };\n                 rewrite.map(|s| if has_paren { format!(\"({})\", s) } else { s })\n             }"}, {"sha": "4fb35cccf6684e5ecc840d94bcbd8ca14363a61f", "filename": "src/tools/rustfmt/tests/target/negative-bounds.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fnegative-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fnegative-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fnegative-bounds.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,11 @@\n+fn negative()\n+where\n+    i32: !Copy,\n+{\n+}\n+\n+fn maybe_const_negative()\n+where\n+    i32: ~const !Copy,\n+{\n+}"}, {"sha": "a2f7b8ba7be300ce075f3849338ccd2fe7bc423b", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -7,10 +7,10 @@ use std::collections::HashMap;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n+const ENTRY_LIMIT: usize = 900;\n // FIXME: The following limits should be reduced eventually.\n-const ENTRY_LIMIT: usize = 885;\n-const ROOT_ENTRY_LIMIT: usize = 894;\n const ISSUES_ENTRY_LIMIT: usize = 1953;\n+const ROOT_ENTRY_LIMIT: usize = 894;\n \n fn check_entries(tests_path: &Path, bad: &mut bool) {\n     let mut directories: HashMap<PathBuf, usize> = HashMap::new();\n@@ -46,9 +46,6 @@ fn check_entries(tests_path: &Path, bad: &mut bool) {\n             );\n         }\n     }\n-    if ENTRY_LIMIT > max {\n-        tidy_error!(bad, \"`ENTRY_LIMIT` is too high (is {ENTRY_LIMIT}, should be {max})\");\n-    }\n     if ROOT_ENTRY_LIMIT > max_root {\n         tidy_error!(\n             bad,"}, {"sha": "353e7489b5528bc3fc5d56b0dffc606765612aa1", "filename": "tests/codegen/abi-main-signature-16bit-c-int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -17,6 +17,7 @@\n // ignore-wasm32\n // ignore-x86\n // ignore-x86_64\n+// ignore-loongarch64\n \n fn main() {\n }"}, {"sha": "7c7660c5a55ab759153e420aca30d1eefc706600", "filename": "tests/codegen/align-offset.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Falign-offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Falign-offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Falign-offset.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,78 @@\n+// compile-flags: -O\n+// min-llvm-version: 15.0 (because we're using opaque pointers)\n+// ignore-debug (debug assertions in `slice::from_raw_parts` block optimizations)\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @align8\n+#[no_mangle]\n+pub fn align8(p: *const u8) -> bool {\n+    // CHECK: ret i1 true\n+    p.align_offset(8) < 8\n+}\n+\n+#[repr(align(4))]\n+pub struct Align4([u8; 4]);\n+\n+// CHECK-LABEL: @align_to4\n+#[no_mangle]\n+pub fn align_to4(x: &[u8]) -> bool {\n+    // CHECK: ret i1 true\n+    let (prefix, _middle, suffix) = unsafe { x.align_to::<Align4>() };\n+    prefix.len() < 4 && suffix.len() < 4\n+}\n+\n+// CHECK-LABEL: @align_offset_byte_ptr(ptr{{.+}}%ptr)\n+#[no_mangle]\n+pub fn align_offset_byte_ptr(ptr: *const u8) -> usize {\n+    // CHECK: %[[ADDR:.+]] = ptrtoint ptr %ptr to [[USIZE:i[0-9]+]]\n+    // CHECK: %[[UP:.+]] = add [[USIZE]] %[[ADDR]], 31\n+    // CHECK: %[[ALIGNED:.+]] = and [[USIZE]] %[[UP]], -32\n+    // CHECK: %[[OFFSET:.+]] = sub [[USIZE]] %[[ALIGNED]], %[[ADDR]]\n+\n+    // Since we're offsetting a byte pointer, there's no further fixups\n+    // CHECK-NOT: shr\n+    // CHECK-NOT: div\n+    // CHECK-NOT: select\n+\n+    // CHECK: ret [[USIZE]] %[[OFFSET]]\n+    ptr.align_offset(32)\n+}\n+\n+// CHECK-LABEL: @align_offset_word_slice(ptr{{.+}}align 4{{.+}}%slice.0\n+#[no_mangle]\n+pub fn align_offset_word_slice(slice: &[Align4]) -> usize {\n+    // CHECK: %[[ADDR:.+]] = ptrtoint ptr %slice.0 to [[USIZE]]\n+    // CHECK: %[[UP:.+]] = add [[USIZE]] %[[ADDR]], 31\n+    // CHECK: %[[ALIGNED:.+]] = and [[USIZE]] %[[UP]], -32\n+    // CHECK: %[[BOFFSET:.+]] = sub [[USIZE]] %[[ALIGNED]], %[[ADDR]]\n+    // CHECK: %[[OFFSET:.+]] = lshr exact [[USIZE]] %[[BOFFSET]], 2\n+\n+    // Slices are known to be aligned, so we don't need the \"maybe -1\" path\n+    // CHECK-NOT: select\n+\n+    // CHECK: ret [[USIZE]] %[[OFFSET]]\n+    slice.as_ptr().align_offset(32)\n+}\n+\n+\n+// CHECK-LABEL: @align_offset_word_ptr(ptr{{.+}}%ptr\n+#[no_mangle]\n+pub fn align_offset_word_ptr(ptr: *const Align4) -> usize {\n+    // CHECK: %[[ADDR:.+]] = ptrtoint ptr %ptr to [[USIZE]]\n+    // CHECK: %[[UP:.+]] = add [[USIZE]] %[[ADDR]], 31\n+    // CHECK: %[[ALIGNED:.+]] = and [[USIZE]] %[[UP]], -32\n+    // CHECK: %[[BOFFSET:.+]] = sub [[USIZE]] %[[ALIGNED]], %[[ADDR]]\n+\n+    // While we can always get a *byte* offset that will work, if the original\n+    // pointer is unaligned it might be impossible to return an *element* offset\n+    // that will make it aligned. We want it to be a `select`, not a `br`, so\n+    // that the assembly will be branchless.\n+    // CHECK: %[[LOW:.+]] = and [[USIZE]] %[[ADDR]], 3\n+    // CHECK: %[[ORIGINAL_ALIGNED:.+]] = icmp eq [[USIZE]] %[[LOW]], 0\n+    // CHECK: %[[OFFSET:.+]] = lshr exact [[USIZE]] %[[BOFFSET]], 2\n+    // CHECK: %[[R:.+]] = select i1 %[[ORIGINAL_ALIGNED]], [[USIZE]] %[[OFFSET]], [[USIZE]] -1\n+\n+    // CHECK: ret [[USIZE]] %[[R]]\n+    ptr.align_offset(32)\n+}"}, {"sha": "4167becf5e9a96298db184c347f655563f24dbaf", "filename": "tests/codegen/ascii-char.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fascii-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fascii-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fascii-char.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,37 @@\n+// compile-flags: -C opt-level=1\n+// ignore-debug (the extra assertions get in the way)\n+\n+#![crate_type = \"lib\"]\n+#![feature(ascii_char)]\n+\n+use std::ascii::Char as AsciiChar;\n+\n+// CHECK-LABEL: i8 @unwrap_digit_from_remainder(i32\n+#[no_mangle]\n+pub fn unwrap_digit_from_remainder(v: u32) -> AsciiChar {\n+    // CHECK-NOT: icmp\n+    // CHECK-NOT: panic\n+\n+    // CHECK: %[[R:.+]] = urem i32 %v, 10\n+    // CHECK-NEXT: %[[T:.+]] = trunc i32 %[[R]] to i8\n+    // CHECK-NEXT: %[[D:.+]] = or i8 %[[T]], 48\n+    // CHECK-NEXT: ret i8 %[[D]]\n+\n+    // CHECK-NOT: icmp\n+    // CHECK-NOT: panic\n+    AsciiChar::digit((v % 10) as u8).unwrap()\n+}\n+\n+// CHECK-LABEL: i8 @unwrap_from_masked(i8\n+#[no_mangle]\n+pub fn unwrap_from_masked(b: u8) -> AsciiChar {\n+    // CHECK-NOT: icmp\n+    // CHECK-NOT: panic\n+\n+    // CHECK: %[[M:.+]] = and i8 %b, 127\n+    // CHECK-NEXT: ret i8 %[[M]]\n+\n+    // CHECK-NOT: icmp\n+    // CHECK-NOT: panic\n+    AsciiChar::from_u8(b & 0x7f).unwrap()\n+}"}, {"sha": "11f2917717c7fee97c77e3ee5ae67ee977ec61c0", "filename": "tests/codegen/call-llvm-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcall-llvm-intrinsics.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: -C no-prepopulate-passes -Copt-level=0\n \n // ignore-riscv64\n+// ignore-loongarch64\n \n #![feature(link_llvm_intrinsics)]\n #![crate_type = \"lib\"]"}, {"sha": "6b63b83ef459427737687fd439792db3308a4a54", "filename": "tests/codegen/catch-unwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fcatch-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fcatch-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcatch-unwind.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -10,6 +10,8 @@\n // ignore-riscv64 FIXME\n // On s390x the closure is also in another function\n // ignore-s390x FIXME\n+// On loongarch64 the closure is also in another function\n+// ignore-loongarch64 FIXME\n \n #![crate_type = \"lib\"]\n #![feature(c_unwind)]"}, {"sha": "7daa05f69d19fab02a236183b76687ca88830498", "filename": "tests/codegen/enable-lto-unit-splitting.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fenable-lto-unit-splitting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fenable-lto-unit-splitting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fenable-lto-unit-splitting.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,10 @@\n+// Verifies that \"EnableSplitLTOUnit\" module flag is added.\n+//\n+// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsplit-lto-unit\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo() {\n+}\n+\n+// CHECK: !{{[0-9]+}} = !{i32 4, !\"EnableSplitLTOUnit\", i32 1}"}, {"sha": "41a99530ad2a7f50bc975dbc52a64fc376824ecc", "filename": "tests/codegen/global_asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -18,6 +18,7 @@\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten\n+// ignore-loongarch64\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "e25c164f4075c50c8ce9dcf78017e63a11b6c4cb", "filename": "tests/codegen/global_asm_include.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fglobal_asm_include.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fglobal_asm_include.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm_include.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -18,6 +18,7 @@\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten\n+// ignore-loongarch64\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "71ecef124f1f1a20335637812cd01a70b4bd8213", "filename": "tests/codegen/global_asm_x2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fglobal_asm_x2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fglobal_asm_x2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fglobal_asm_x2.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -18,6 +18,7 @@\n // ignore-wasm32\n // ignore-wasm64\n // ignore-emscripten\n+// ignore-loongarch64\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "4b78f6e24f7bc5cbfaaf4d6105d5df3ba530c1b1", "filename": "tests/codegen/loongarch-abi/call-llvm-intrinsics.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Floongarch-abi%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Floongarch-abi%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Floongarch-abi%2Fcall-llvm-intrinsics.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+// only-loongarch64\n+\n+#![feature(link_llvm_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+struct A;\n+\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        println!(\"A\");\n+    }\n+}\n+\n+extern \"C\" {\n+    #[link_name = \"llvm.sqrt.f32\"]\n+    fn sqrt(x: f32) -> f32;\n+}\n+\n+pub fn do_call() {\n+    let _a = A;\n+\n+    unsafe {\n+        // Ensure that we `call` LLVM intrinsics instead of trying to `invoke` them\n+        // CHECK: store float 4.000000e+00, ptr %{{.}}, align 4\n+        // CHECK: load float, ptr %{{.}}, align 4\n+        // CHECK: call float @llvm.sqrt.f32(float %{{.}}\n+        sqrt(4.0);\n+    }\n+}"}, {"sha": "7555553c2c595da07b3a9d87058e018f466795c2", "filename": "tests/codegen/loongarch-abi/loongarch64-lp64d-abi.rs", "status": "added", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Floongarch-abi%2Floongarch64-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Floongarch-abi%2Floongarch64-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Floongarch-abi%2Floongarch64-lp64d-abi.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,293 @@\n+// compile-flags: -C no-prepopulate-passes\n+// only-loongarch64\n+// only-linux\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: define void @f_fpr_tracking(double %0, double %1, double %2, double %3, double %4, double %5, double %6, double %7, i8 noundef zeroext %i)\n+#[no_mangle]\n+pub extern \"C\" fn f_fpr_tracking(\n+    a: f64,\n+    b: f64,\n+    c: f64,\n+    d: f64,\n+    e: f64,\n+    f: f64,\n+    g: f64,\n+    h: f64,\n+    i: u8,\n+) {\n+}\n+\n+#[repr(C)]\n+pub struct Double {\n+    f: f64,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleDouble {\n+    f: f64,\n+    g: f64,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleFloat {\n+    f: f64,\n+    g: f32,\n+}\n+\n+// CHECK: define void @f_double_s_arg(double %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_s_arg(a: Double) {}\n+\n+// CHECK: define double @f_ret_double_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_s() -> Double {\n+    Double { f: 1. }\n+}\n+\n+// CHECK: define void @f_double_double_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_double_s_arg(a: DoubleDouble) {}\n+\n+// CHECK: define { double, double } @f_ret_double_double_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_double_s() -> DoubleDouble {\n+    DoubleDouble { f: 1., g: 2. }\n+}\n+\n+// CHECK: define void @f_double_float_s_arg({ double, float } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_float_s_arg(a: DoubleFloat) {}\n+\n+// CHECK: define { double, float } @f_ret_double_float_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_float_s() -> DoubleFloat {\n+    DoubleFloat { f: 1., g: 2. }\n+}\n+\n+// CHECK: define void @f_double_double_s_arg_insufficient_fprs(double %0, double %1, double %2, double %3, double %4, double %5, double %6, [2 x i64] %7)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_double_s_arg_insufficient_fprs(\n+    a: f64,\n+    b: f64,\n+    c: f64,\n+    d: f64,\n+    e: f64,\n+    f: f64,\n+    g: f64,\n+    h: DoubleDouble,\n+) {\n+}\n+\n+#[repr(C)]\n+pub struct DoubleInt8 {\n+    f: f64,\n+    i: i8,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleUInt8 {\n+    f: f64,\n+    i: u8,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleInt32 {\n+    f: f64,\n+    i: i32,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleInt64 {\n+    f: f64,\n+    i: i64,\n+}\n+\n+// CHECK: define void @f_double_int8_s_arg({ double, i8 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int8_s_arg(a: DoubleInt8) {}\n+\n+// CHECK: define { double, i8 } @f_ret_double_int8_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_int8_s() -> DoubleInt8 {\n+    DoubleInt8 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_int32_s_arg({ double, i32 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int32_s_arg(a: DoubleInt32) {}\n+\n+// CHECK: define { double, i32 } @f_ret_double_int32_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_int32_s() -> DoubleInt32 {\n+    DoubleInt32 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_uint8_s_arg({ double, i8 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_uint8_s_arg(a: DoubleUInt8) {}\n+\n+// CHECK: define { double, i8 } @f_ret_double_uint8_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_uint8_s() -> DoubleUInt8 {\n+    DoubleUInt8 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_int64_s_arg({ double, i64 } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int64_s_arg(a: DoubleInt64) {}\n+\n+// CHECK: define { double, i64 } @f_ret_double_int64_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_int64_s() -> DoubleInt64 {\n+    DoubleInt64 { f: 1., i: 2 }\n+}\n+\n+// CHECK: define void @f_double_int8_s_arg_insufficient_gprs(i32 noundef signext %a, i32 noundef signext %b, i32 noundef signext %c, i32 noundef signext %d, i32 noundef signext %e, i32 noundef signext %f, i32 noundef signext %g, i32 noundef signext %h, [2 x i64] %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_int8_s_arg_insufficient_gprs(\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32,\n+    f: i32,\n+    g: i32,\n+    h: i32,\n+    i: DoubleInt8,\n+) {\n+}\n+\n+// CHECK: define void @f_struct_double_int8_insufficient_fprs(float %0, double %1, double %2, double %3, double %4, double %5, double %6, double %7, [2 x i64] %8)\n+#[no_mangle]\n+pub extern \"C\" fn f_struct_double_int8_insufficient_fprs(\n+    a: f32,\n+    b: f64,\n+    c: f64,\n+    d: f64,\n+    e: f64,\n+    f: f64,\n+    g: f64,\n+    h: f64,\n+    i: DoubleInt8,\n+) {\n+}\n+\n+#[repr(C)]\n+pub struct DoubleArr1 {\n+    a: [f64; 1],\n+}\n+\n+// CHECK: define void @f_doublearr1_s_arg(double %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr1_s_arg(a: DoubleArr1) {}\n+\n+// CHECK: define double @f_ret_doublearr1_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr1_s() -> DoubleArr1 {\n+    DoubleArr1 { a: [1.] }\n+}\n+\n+#[repr(C)]\n+pub struct DoubleArr2 {\n+    a: [f64; 2],\n+}\n+\n+// CHECK: define void @f_doublearr2_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr2_s_arg(a: DoubleArr2) {}\n+\n+// CHECK: define { double, double } @f_ret_doublearr2_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr2_s() -> DoubleArr2 {\n+    DoubleArr2 { a: [1., 2.] }\n+}\n+\n+#[repr(C)]\n+pub struct Tricky1 {\n+    f: [f64; 1],\n+}\n+\n+#[repr(C)]\n+pub struct DoubleArr2Tricky1 {\n+    g: [Tricky1; 2],\n+}\n+\n+// CHECK: define void @f_doublearr2_tricky1_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr2_tricky1_s_arg(a: DoubleArr2Tricky1) {}\n+\n+// CHECK: define { double, double } @f_ret_doublearr2_tricky1_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr2_tricky1_s() -> DoubleArr2Tricky1 {\n+    DoubleArr2Tricky1 { g: [Tricky1 { f: [1.] }, Tricky1 { f: [2.] }] }\n+}\n+\n+#[repr(C)]\n+pub struct EmptyStruct {}\n+\n+#[repr(C)]\n+pub struct DoubleArr2Tricky2 {\n+    s: EmptyStruct,\n+    g: [Tricky1; 2],\n+}\n+\n+// CHECK: define void @f_doublearr2_tricky2_s_arg({ double, double } %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_doublearr2_tricky2_s_arg(a: DoubleArr2Tricky2) {}\n+\n+// CHECK: define { double, double } @f_ret_doublearr2_tricky2_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_doublearr2_tricky2_s() -> DoubleArr2Tricky2 {\n+    DoubleArr2Tricky2 { s: EmptyStruct {}, g: [Tricky1 { f: [1.] }, Tricky1 { f: [2.] }] }\n+}\n+\n+#[repr(C)]\n+pub struct IntDoubleInt {\n+    a: i32,\n+    b: f64,\n+    c: i32,\n+}\n+\n+// CHECK: define void @f_int_double_int_s_arg(ptr noalias nocapture noundef dereferenceable(24) %a)\n+#[no_mangle]\n+pub extern \"C\" fn f_int_double_int_s_arg(a: IntDoubleInt) {}\n+\n+// CHECK: define void @f_ret_int_double_int_s(ptr noalias nocapture noundef sret(%IntDoubleInt) dereferenceable(24) %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_int_double_int_s() -> IntDoubleInt {\n+    IntDoubleInt { a: 1, b: 2., c: 3 }\n+}\n+\n+#[repr(C)]\n+pub struct CharCharDouble {\n+    a: u8,\n+    b: u8,\n+    c: f64,\n+}\n+\n+// CHECK: define void @f_char_char_double_s_arg([2 x i64] %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_char_char_double_s_arg(a: CharCharDouble) {}\n+\n+// CHECK: define [2 x i64] @f_ret_char_char_double_s()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_char_char_double_s() -> CharCharDouble {\n+    CharCharDouble { a: 1, b: 2, c: 3. }\n+}\n+\n+#[repr(C)]\n+pub union DoubleU {\n+    a: f64,\n+}\n+\n+// CHECK: define void @f_double_u_arg(i64 %0)\n+#[no_mangle]\n+pub extern \"C\" fn f_double_u_arg(a: DoubleU) {}\n+\n+// CHECK: define i64 @f_ret_double_u()\n+#[no_mangle]\n+pub extern \"C\" fn f_ret_double_u() -> DoubleU {\n+    unsafe { DoubleU { a: 1. } }\n+}"}, {"sha": "9c4b0e58e718713b7e9d881b73ca481289bb7a08", "filename": "tests/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -10,6 +10,7 @@\n // ignore-riscv64 see codegen/riscv-abi\n // ignore-s390x\n // ignore-windows\n+// ignore-loongarch64\n // See repr-transparent.rs\n \n #![feature(transparent_unions)]"}, {"sha": "a7bde2d05c3c345ca9b1acf3ad84353b3d6d9990", "filename": "tests/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -12,6 +12,7 @@\n // ignore-sparc64\n // ignore-x86\n // ignore-x86_64\n+// ignore-loongarch64\n // See repr-transparent.rs\n \n #![feature(transparent_unions)]"}, {"sha": "759ddea67a5b70bc2446fb8c90cabed30339a4c5", "filename": "tests/codegen/repr-transparent.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Frepr-transparent.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -3,6 +3,7 @@\n // ignore-riscv64 riscv64 has an i128 type used with test_Vector\n // see codegen/riscv-abi for riscv functiona call tests\n // ignore-s390x s390x with default march passes vector types per reference\n+// ignore-loongarch64 see codegen/loongarch-abi for loongarch function call tests\n \n #![crate_type=\"lib\"]\n #![feature(repr_simd, transparent_unions)]"}, {"sha": "1ee8bdfc3ab287a75505ac5372863ccb42a6ae12", "filename": "tests/codegen/sanitizer-cfi-add-canonical-jump-tables-flag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-add-canonical-jump-tables-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-add-canonical-jump-tables-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-add-canonical-jump-tables-flag.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -8,4 +8,4 @@\n pub fn foo() {\n }\n \n-// CHECK: !{{[0-9]+}} = !{i32 2, !\"CFI Canonical Jump Tables\", i32 1}\n+// CHECK: !{{[0-9]+}} = !{i32 4, !\"CFI Canonical Jump Tables\", i32 1}"}, {"sha": "68c91384b826b4d1771b1992cd6467e3e85ebc7d", "filename": "tests/codegen/sanitizer-cfi-add-enable-split-lto-unit-flag.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-add-enable-split-lto-unit-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-add-enable-split-lto-unit-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-add-enable-split-lto-unit-flag.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,11 @@\n+// Verifies that \"EnableSplitLTOUnit\" module flag is added.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsanitizer=cfi\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo() {\n+}\n+\n+// CHECK: !{{[0-9]+}} = !{i32 4, !\"EnableSplitLTOUnit\", i32 1}"}, {"sha": "2b61c9078fd9cb379cfba31184c9570bc332f01a", "filename": "tests/codegen/sanitizer-cfi-emit-type-checks-attr-no-sanitize.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks-attr-no-sanitize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks-attr-no-sanitize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks-attr-no-sanitize.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,18 @@\n+// Verifies that pointer type membership tests for indirect calls are omitted.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Copt-level=0\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_sanitize)]\n+\n+#[no_sanitize(cfi)]\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: sanitizer_cfi_emit_type_checks_attr_no_sanitize::foo\n+    // CHECK:       Function Attrs: {{.*}}\n+    // CHECK-LABEL: define{{.*}}foo{{.*}}!type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+    // CHECK:       start:\n+    // CHECK-NEXT:  {{%.+}} = call i32 %f(i32 %arg)\n+    // CHECK-NEXT:  ret i32 {{%.+}}\n+    f(arg)\n+}"}, {"sha": "cea6aac8b8ba4ca36e45200f00ea436e34b55bf5", "filename": "tests/codegen/sanitizer-cfi-emit-type-checks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-checks.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -6,13 +6,12 @@\n #![crate_type=\"lib\"]\n \n pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n-    // CHECK-LABEL: define{{.*}}foo{{.*}}!type !{{[0-9]+}}\n+    // CHECK-LABEL: define{{.*}}foo{{.*}}!type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n     // CHECK:       start:\n     // CHECK:       [[TT:%.+]] = call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"{{[[:print:]]+}}\")\n     // CHECK-NEXT:  br i1 [[TT]], label %type_test.pass, label %type_test.fail\n     // CHECK:       type_test.pass:\n     // CHECK-NEXT:  {{%.+}} = call i32 %f(i32 %arg)\n-    // CHECK-NEXT:  br label %bb1\n     // CHECK:       type_test.fail:\n     // CHECK-NEXT:  call void @llvm.trap()\n     // CHECK-NEXT:  unreachable"}, {"sha": "084d8bf803c8987a5aec5dee43366586d6930ac6", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-attr-cfi-encoding.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-attr-cfi-encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-attr-cfi-encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-attr-cfi-encoding.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,48 @@\n+// Verifies that user-defined CFI encoding for types are emitted.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi\n+\n+#![crate_type=\"lib\"]\n+#![feature(cfi_encoding, extern_types)]\n+\n+#[cfi_encoding = \"3Foo\"]\n+pub struct Type1(i32);\n+\n+extern {\n+    #[cfi_encoding = \"3Bar\"]\n+    type Type2;\n+}\n+\n+#[cfi_encoding = \"3Baz\"]\n+#[repr(transparent)]\n+pub struct Type3(i32);\n+\n+pub fn foo0(_: Type1) { }\n+// CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo1(_: Type1, _: Type1) { }\n+// CHECK: define{{.*}}foo1{{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo2(_: Type1, _: Type1, _: Type1) { }\n+// CHECK: define{{.*}}foo2{{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo3(_: *mut Type2) { }\n+// CHECK: define{{.*}}foo3{{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo4(_: *mut Type2, _: *mut Type2) { }\n+// CHECK: define{{.*}}foo4{{.*}}!type ![[TYPE4:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo5(_: *mut Type2, _: *mut Type2, _: *mut Type2) { }\n+// CHECK: define{{.*}}foo5{{.*}}!type ![[TYPE5:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo6(_: *mut Type3) { }\n+// CHECK: define{{.*}}foo6{{.*}}!type ![[TYPE6:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo7(_: *mut Type3, _: *mut Type3) { }\n+// CHECK: define{{.*}}foo7{{.*}}!type ![[TYPE7:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo8(_: *mut Type3, _: *mut Type3, _: *mut Type3) { }\n+// CHECK: define{{.*}}foo8{{.*}}!type ![[TYPE8:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+\n+// CHECK: ![[TYPE0]] = !{i64 0, !\"_ZTSFv3FooE\"}\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFv3FooS_E\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFv3FooS_S_E\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFvP3BarE\"}\n+// CHECK: ![[TYPE4]] = !{i64 0, !\"_ZTSFvP3BarS0_E\"}\n+// CHECK: ![[TYPE5]] = !{i64 0, !\"_ZTSFvP3BarS0_S0_E\"}\n+// CHECK: ![[TYPE6]] = !{i64 0, !\"_ZTSFvP3BazE\"}\n+// CHECK: ![[TYPE7]] = !{i64 0, !\"_ZTSFvP3BazS0_E\"}\n+// CHECK: ![[TYPE8]] = !{i64 0, !\"_ZTSFvP3BazS0_S0_E\"}"}, {"sha": "71e26e3fe8a65b5a4602a66ea86f2c4250f93cd9", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "status": "modified", "additions": 160, "deletions": 159, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -10,7 +10,7 @@\n #![feature(adt_const_params, extern_types, inline_const, type_alias_impl_trait)]\n \n extern crate core;\n-use core::ffi::c_void;\n+use core::ffi::*;\n use std::marker::PhantomData;\n \n // User-defined type (structure)\n@@ -113,9 +113,10 @@ pub fn fn1<'a>() {\n     let _: Type11 = Quuux;\n }\n \n-// repr(transparent) user-defined type\n+// Helper type to make Type12 have an unique id\n struct Foo(i32);\n \n+// repr(transparent) user-defined type\n #[repr(transparent)]\n pub struct Type12 {\n     member1: (),\n@@ -131,313 +132,313 @@ pub struct Type13<'a> {\n     member3: &'a Type13<'a>,\n }\n \n-// Helper type to allow `Type14<Bar>` to be a unique ID\n+// Helper type to make Type14 have an unique id\n pub struct Bar;\n \n-// repr(transparent) parameterized type\n+// repr(transparent) user-defined generic type\n #[repr(transparent)]\n pub struct Type14<T>(T);\n \n pub fn foo0(_: ()) { }\n-// CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]]\n-pub fn foo1(_: c_void, _: ()) { }\n-// CHECK: define{{.*}}foo1{{.*}}!type ![[TYPE1:[0-9]+]]\n+// CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo1(_: (), _: c_void) { }\n+// CHECK: define{{.*}}foo1{{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo2(_: (), _: c_void, _: c_void) { }\n-// CHECK: define{{.*}}foo2{{.*}}!type ![[TYPE2:[0-9]+]]\n-pub fn foo3(_: *mut c_void) { }\n-// CHECK: define{{.*}}foo3{{.*}}!type ![[TYPE3:[0-9]+]]\n-pub fn foo4(_: *mut c_void, _: *mut ()) { }\n-// CHECK: define{{.*}}foo4{{.*}}!type ![[TYPE4:[0-9]+]]\n+// CHECK: define{{.*}}foo2{{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo3(_: *mut ()) { }\n+// CHECK: define{{.*}}foo3{{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo4(_: *mut (), _: *mut c_void) { }\n+// CHECK: define{{.*}}foo4{{.*}}!type ![[TYPE4:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo5(_: *mut (), _: *mut c_void, _: *mut c_void) { }\n-// CHECK: define{{.*}}foo5{{.*}}!type ![[TYPE5:[0-9]+]]\n-pub fn foo6(_: *const c_void) { }\n-// CHECK: define{{.*}}foo6{{.*}}!type ![[TYPE6:[0-9]+]]\n-pub fn foo7(_: *const c_void, _: *const ()) { }\n-// CHECK: define{{.*}}foo7{{.*}}!type ![[TYPE7:[0-9]+]]\n+// CHECK: define{{.*}}foo5{{.*}}!type ![[TYPE5:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo6(_: *const ()) { }\n+// CHECK: define{{.*}}foo6{{.*}}!type ![[TYPE6:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo7(_: *const (), _: *const c_void) { }\n+// CHECK: define{{.*}}foo7{{.*}}!type ![[TYPE7:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo8(_: *const (), _: *const c_void, _: *const c_void) { }\n-// CHECK: define{{.*}}foo8{{.*}}!type ![[TYPE8:[0-9]+]]\n+// CHECK: define{{.*}}foo8{{.*}}!type ![[TYPE8:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo9(_: bool) { }\n-// CHECK: define{{.*}}foo9{{.*}}!type ![[TYPE9:[0-9]+]]\n+// CHECK: define{{.*}}foo9{{.*}}!type ![[TYPE9:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo10(_: bool, _: bool) { }\n-// CHECK: define{{.*}}foo10{{.*}}!type ![[TYPE10:[0-9]+]]\n+// CHECK: define{{.*}}foo10{{.*}}!type ![[TYPE10:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo11(_: bool, _: bool, _: bool) { }\n-// CHECK: define{{.*}}foo11{{.*}}!type ![[TYPE11:[0-9]+]]\n+// CHECK: define{{.*}}foo11{{.*}}!type ![[TYPE11:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo12(_: i8) { }\n-// CHECK: define{{.*}}foo12{{.*}}!type ![[TYPE12:[0-9]+]]\n+// CHECK: define{{.*}}foo12{{.*}}!type ![[TYPE12:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo13(_: i8, _: i8) { }\n-// CHECK: define{{.*}}foo13{{.*}}!type ![[TYPE13:[0-9]+]]\n+// CHECK: define{{.*}}foo13{{.*}}!type ![[TYPE13:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo14(_: i8, _: i8, _: i8) { }\n-// CHECK: define{{.*}}foo14{{.*}}!type ![[TYPE14:[0-9]+]]\n+// CHECK: define{{.*}}foo14{{.*}}!type ![[TYPE14:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo15(_: i16) { }\n-// CHECK: define{{.*}}foo15{{.*}}!type ![[TYPE15:[0-9]+]]\n+// CHECK: define{{.*}}foo15{{.*}}!type ![[TYPE15:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo16(_: i16, _: i16) { }\n-// CHECK: define{{.*}}foo16{{.*}}!type ![[TYPE16:[0-9]+]]\n+// CHECK: define{{.*}}foo16{{.*}}!type ![[TYPE16:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo17(_: i16, _: i16, _: i16) { }\n-// CHECK: define{{.*}}foo17{{.*}}!type ![[TYPE17:[0-9]+]]\n+// CHECK: define{{.*}}foo17{{.*}}!type ![[TYPE17:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo18(_: i32) { }\n-// CHECK: define{{.*}}foo18{{.*}}!type ![[TYPE18:[0-9]+]]\n+// CHECK: define{{.*}}foo18{{.*}}!type ![[TYPE18:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo19(_: i32, _: i32) { }\n-// CHECK: define{{.*}}foo19{{.*}}!type ![[TYPE19:[0-9]+]]\n+// CHECK: define{{.*}}foo19{{.*}}!type ![[TYPE19:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo20(_: i32, _: i32, _: i32) { }\n-// CHECK: define{{.*}}foo20{{.*}}!type ![[TYPE20:[0-9]+]]\n+// CHECK: define{{.*}}foo20{{.*}}!type ![[TYPE20:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo21(_: i64) { }\n-// CHECK: define{{.*}}foo21{{.*}}!type ![[TYPE21:[0-9]+]]\n+// CHECK: define{{.*}}foo21{{.*}}!type ![[TYPE21:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo22(_: i64, _: i64) { }\n-// CHECK: define{{.*}}foo22{{.*}}!type ![[TYPE22:[0-9]+]]\n+// CHECK: define{{.*}}foo22{{.*}}!type ![[TYPE22:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo23(_: i64, _: i64, _: i64) { }\n-// CHECK: define{{.*}}foo23{{.*}}!type ![[TYPE23:[0-9]+]]\n+// CHECK: define{{.*}}foo23{{.*}}!type ![[TYPE23:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo24(_: i128) { }\n-// CHECK: define{{.*}}foo24{{.*}}!type ![[TYPE24:[0-9]+]]\n+// CHECK: define{{.*}}foo24{{.*}}!type ![[TYPE24:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo25(_: i128, _: i128) { }\n-// CHECK: define{{.*}}foo25{{.*}}!type ![[TYPE25:[0-9]+]]\n+// CHECK: define{{.*}}foo25{{.*}}!type ![[TYPE25:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo26(_: i128, _: i128, _: i128) { }\n-// CHECK: define{{.*}}foo26{{.*}}!type ![[TYPE26:[0-9]+]]\n+// CHECK: define{{.*}}foo26{{.*}}!type ![[TYPE26:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo27(_: isize) { }\n-// CHECK: define{{.*}}foo27{{.*}}!type ![[TYPE27:[0-9]+]]\n+// CHECK: define{{.*}}foo27{{.*}}!type ![[TYPE27:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo28(_: isize, _: isize) { }\n-// CHECK: define{{.*}}foo28{{.*}}!type ![[TYPE28:[0-9]+]]\n+// CHECK: define{{.*}}foo28{{.*}}!type ![[TYPE28:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo29(_: isize, _: isize, _: isize) { }\n-// CHECK: define{{.*}}foo29{{.*}}!type ![[TYPE29:[0-9]+]]\n+// CHECK: define{{.*}}foo29{{.*}}!type ![[TYPE29:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo30(_: u8) { }\n-// CHECK: define{{.*}}foo30{{.*}}!type ![[TYPE30:[0-9]+]]\n+// CHECK: define{{.*}}foo30{{.*}}!type ![[TYPE30:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo31(_: u8, _: u8) { }\n-// CHECK: define{{.*}}foo31{{.*}}!type ![[TYPE31:[0-9]+]]\n+// CHECK: define{{.*}}foo31{{.*}}!type ![[TYPE31:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo32(_: u8, _: u8, _: u8) { }\n-// CHECK: define{{.*}}foo32{{.*}}!type ![[TYPE32:[0-9]+]]\n+// CHECK: define{{.*}}foo32{{.*}}!type ![[TYPE32:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo33(_: u16) { }\n-// CHECK: define{{.*}}foo33{{.*}}!type ![[TYPE33:[0-9]+]]\n+// CHECK: define{{.*}}foo33{{.*}}!type ![[TYPE33:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo34(_: u16, _: u16) { }\n-// CHECK: define{{.*}}foo34{{.*}}!type ![[TYPE34:[0-9]+]]\n+// CHECK: define{{.*}}foo34{{.*}}!type ![[TYPE34:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo35(_: u16, _: u16, _: u16) { }\n-// CHECK: define{{.*}}foo35{{.*}}!type ![[TYPE35:[0-9]+]]\n+// CHECK: define{{.*}}foo35{{.*}}!type ![[TYPE35:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo36(_: u32) { }\n-// CHECK: define{{.*}}foo36{{.*}}!type ![[TYPE36:[0-9]+]]\n+// CHECK: define{{.*}}foo36{{.*}}!type ![[TYPE36:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo37(_: u32, _: u32) { }\n-// CHECK: define{{.*}}foo37{{.*}}!type ![[TYPE37:[0-9]+]]\n+// CHECK: define{{.*}}foo37{{.*}}!type ![[TYPE37:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo38(_: u32, _: u32, _: u32) { }\n-// CHECK: define{{.*}}foo38{{.*}}!type ![[TYPE38:[0-9]+]]\n+// CHECK: define{{.*}}foo38{{.*}}!type ![[TYPE38:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo39(_: u64) { }\n-// CHECK: define{{.*}}foo39{{.*}}!type ![[TYPE39:[0-9]+]]\n+// CHECK: define{{.*}}foo39{{.*}}!type ![[TYPE39:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo40(_: u64, _: u64) { }\n-// CHECK: define{{.*}}foo40{{.*}}!type ![[TYPE40:[0-9]+]]\n+// CHECK: define{{.*}}foo40{{.*}}!type ![[TYPE40:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo41(_: u64, _: u64, _: u64) { }\n-// CHECK: define{{.*}}foo41{{.*}}!type ![[TYPE41:[0-9]+]]\n+// CHECK: define{{.*}}foo41{{.*}}!type ![[TYPE41:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo42(_: u128) { }\n-// CHECK: define{{.*}}foo42{{.*}}!type ![[TYPE42:[0-9]+]]\n+// CHECK: define{{.*}}foo42{{.*}}!type ![[TYPE42:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo43(_: u128, _: u128) { }\n-// CHECK: define{{.*}}foo43{{.*}}!type ![[TYPE43:[0-9]+]]\n+// CHECK: define{{.*}}foo43{{.*}}!type ![[TYPE43:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo44(_: u128, _: u128, _: u128) { }\n-// CHECK: define{{.*}}foo44{{.*}}!type ![[TYPE44:[0-9]+]]\n+// CHECK: define{{.*}}foo44{{.*}}!type ![[TYPE44:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo45(_: usize) { }\n-// CHECK: define{{.*}}foo45{{.*}}!type ![[TYPE45:[0-9]+]]\n+// CHECK: define{{.*}}foo45{{.*}}!type ![[TYPE45:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo46(_: usize, _: usize) { }\n-// CHECK: define{{.*}}foo46{{.*}}!type ![[TYPE46:[0-9]+]]\n+// CHECK: define{{.*}}foo46{{.*}}!type ![[TYPE46:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo47(_: usize, _: usize, _: usize) { }\n-// CHECK: define{{.*}}foo47{{.*}}!type ![[TYPE47:[0-9]+]]\n+// CHECK: define{{.*}}foo47{{.*}}!type ![[TYPE47:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo48(_: f32) { }\n-// CHECK: define{{.*}}foo48{{.*}}!type ![[TYPE48:[0-9]+]]\n+// CHECK: define{{.*}}foo48{{.*}}!type ![[TYPE48:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo49(_: f32, _: f32) { }\n-// CHECK: define{{.*}}foo49{{.*}}!type ![[TYPE49:[0-9]+]]\n+// CHECK: define{{.*}}foo49{{.*}}!type ![[TYPE49:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo50(_: f32, _: f32, _: f32) { }\n-// CHECK: define{{.*}}foo50{{.*}}!type ![[TYPE50:[0-9]+]]\n+// CHECK: define{{.*}}foo50{{.*}}!type ![[TYPE50:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo51(_: f64) { }\n-// CHECK: define{{.*}}foo51{{.*}}!type ![[TYPE51:[0-9]+]]\n+// CHECK: define{{.*}}foo51{{.*}}!type ![[TYPE51:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo52(_: f64, _: f64) { }\n-// CHECK: define{{.*}}foo52{{.*}}!type ![[TYPE52:[0-9]+]]\n+// CHECK: define{{.*}}foo52{{.*}}!type ![[TYPE52:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo53(_: f64, _: f64, _: f64) { }\n-// CHECK: define{{.*}}foo53{{.*}}!type ![[TYPE53:[0-9]+]]\n+// CHECK: define{{.*}}foo53{{.*}}!type ![[TYPE53:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo54(_: char) { }\n-// CHECK: define{{.*}}foo54{{.*}}!type ![[TYPE54:[0-9]+]]\n+// CHECK: define{{.*}}foo54{{.*}}!type ![[TYPE54:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo55(_: char, _: char) { }\n-// CHECK: define{{.*}}foo55{{.*}}!type ![[TYPE55:[0-9]+]]\n+// CHECK: define{{.*}}foo55{{.*}}!type ![[TYPE55:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo56(_: char, _: char, _: char) { }\n-// CHECK: define{{.*}}foo56{{.*}}!type ![[TYPE56:[0-9]+]]\n+// CHECK: define{{.*}}foo56{{.*}}!type ![[TYPE56:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo57(_: &str) { }\n-// CHECK: define{{.*}}foo57{{.*}}!type ![[TYPE57:[0-9]+]]\n+// CHECK: define{{.*}}foo57{{.*}}!type ![[TYPE57:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo58(_: &str, _: &str) { }\n-// CHECK: define{{.*}}foo58{{.*}}!type ![[TYPE58:[0-9]+]]\n+// CHECK: define{{.*}}foo58{{.*}}!type ![[TYPE58:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo59(_: &str, _: &str, _: &str) { }\n-// CHECK: define{{.*}}foo59{{.*}}!type ![[TYPE59:[0-9]+]]\n+// CHECK: define{{.*}}foo59{{.*}}!type ![[TYPE59:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo60(_: (i32, i32)) { }\n-// CHECK: define{{.*}}foo60{{.*}}!type ![[TYPE60:[0-9]+]]\n+// CHECK: define{{.*}}foo60{{.*}}!type ![[TYPE60:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo61(_: (i32, i32), _: (i32, i32)) { }\n-// CHECK: define{{.*}}foo61{{.*}}!type ![[TYPE61:[0-9]+]]\n+// CHECK: define{{.*}}foo61{{.*}}!type ![[TYPE61:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo62(_: (i32, i32), _: (i32, i32), _: (i32, i32)) { }\n-// CHECK: define{{.*}}foo62{{.*}}!type ![[TYPE62:[0-9]+]]\n+// CHECK: define{{.*}}foo62{{.*}}!type ![[TYPE62:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo63(_: [i32; 32]) { }\n-// CHECK: define{{.*}}foo63{{.*}}!type ![[TYPE63:[0-9]+]]\n+// CHECK: define{{.*}}foo63{{.*}}!type ![[TYPE63:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo64(_: [i32; 32], _: [i32; 32]) { }\n-// CHECK: define{{.*}}foo64{{.*}}!type ![[TYPE64:[0-9]+]]\n+// CHECK: define{{.*}}foo64{{.*}}!type ![[TYPE64:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo65(_: [i32; 32], _: [i32; 32], _: [i32; 32]) { }\n-// CHECK: define{{.*}}foo65{{.*}}!type ![[TYPE65:[0-9]+]]\n+// CHECK: define{{.*}}foo65{{.*}}!type ![[TYPE65:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo66(_: &[i32]) { }\n-// CHECK: define{{.*}}foo66{{.*}}!type ![[TYPE66:[0-9]+]]\n+// CHECK: define{{.*}}foo66{{.*}}!type ![[TYPE66:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo67(_: &[i32], _: &[i32]) { }\n-// CHECK: define{{.*}}foo67{{.*}}!type ![[TYPE67:[0-9]+]]\n+// CHECK: define{{.*}}foo67{{.*}}!type ![[TYPE67:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo68(_: &[i32], _: &[i32], _: &[i32]) { }\n-// CHECK: define{{.*}}foo68{{.*}}!type ![[TYPE68:[0-9]+]]\n+// CHECK: define{{.*}}foo68{{.*}}!type ![[TYPE68:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo69(_: &Struct1::<i32>) { }\n-// CHECK: define{{.*}}foo69{{.*}}!type ![[TYPE69:[0-9]+]]\n+// CHECK: define{{.*}}foo69{{.*}}!type ![[TYPE69:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo70(_: &Struct1::<i32>, _: &Struct1::<i32>) { }\n-// CHECK: define{{.*}}foo70{{.*}}!type ![[TYPE70:[0-9]+]]\n+// CHECK: define{{.*}}foo70{{.*}}!type ![[TYPE70:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo71(_: &Struct1::<i32>, _: &Struct1::<i32>, _: &Struct1::<i32>) { }\n-// CHECK: define{{.*}}foo71{{.*}}!type ![[TYPE71:[0-9]+]]\n+// CHECK: define{{.*}}foo71{{.*}}!type ![[TYPE71:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo72(_: &Enum1::<i32>) { }\n-// CHECK: define{{.*}}foo72{{.*}}!type ![[TYPE72:[0-9]+]]\n+// CHECK: define{{.*}}foo72{{.*}}!type ![[TYPE72:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo73(_: &Enum1::<i32>, _: &Enum1::<i32>) { }\n-// CHECK: define{{.*}}foo73{{.*}}!type ![[TYPE73:[0-9]+]]\n+// CHECK: define{{.*}}foo73{{.*}}!type ![[TYPE73:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo74(_: &Enum1::<i32>, _: &Enum1::<i32>, _: &Enum1::<i32>) { }\n-// CHECK: define{{.*}}foo74{{.*}}!type ![[TYPE74:[0-9]+]]\n+// CHECK: define{{.*}}foo74{{.*}}!type ![[TYPE74:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo75(_: &Union1::<i32>) { }\n-// CHECK: define{{.*}}foo75{{.*}}!type ![[TYPE75:[0-9]+]]\n+// CHECK: define{{.*}}foo75{{.*}}!type ![[TYPE75:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo76(_: &Union1::<i32>, _: &Union1::<i32>) { }\n-// CHECK: define{{.*}}foo76{{.*}}!type ![[TYPE76:[0-9]+]]\n+// CHECK: define{{.*}}foo76{{.*}}!type ![[TYPE76:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo77(_: &Union1::<i32>, _: &Union1::<i32>, _: &Union1::<i32>) { }\n-// CHECK: define{{.*}}foo77{{.*}}!type ![[TYPE77:[0-9]+]]\n+// CHECK: define{{.*}}foo77{{.*}}!type ![[TYPE77:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo78(_: *mut type1) { }\n-// CHECK: define{{.*}}foo78{{.*}}!type ![[TYPE78:[0-9]+]]\n+// CHECK: define{{.*}}foo78{{.*}}!type ![[TYPE78:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo79(_: *mut type1, _: *mut type1) { }\n-// CHECK: define{{.*}}foo79{{.*}}!type ![[TYPE79:[0-9]+]]\n+// CHECK: define{{.*}}foo79{{.*}}!type ![[TYPE79:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo80(_: *mut type1, _: *mut type1, _: *mut type1) { }\n-// CHECK: define{{.*}}foo80{{.*}}!type ![[TYPE80:[0-9]+]]\n+// CHECK: define{{.*}}foo80{{.*}}!type ![[TYPE80:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo81(_: &mut i32) { }\n-// CHECK: define{{.*}}foo81{{.*}}!type ![[TYPE81:[0-9]+]]\n+// CHECK: define{{.*}}foo81{{.*}}!type ![[TYPE81:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo82(_: &mut i32, _: &i32) { }\n-// CHECK: define{{.*}}foo82{{.*}}!type ![[TYPE82:[0-9]+]]\n+// CHECK: define{{.*}}foo82{{.*}}!type ![[TYPE82:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo83(_: &mut i32, _: &i32, _: &i32) { }\n-// CHECK: define{{.*}}foo83{{.*}}!type ![[TYPE83:[0-9]+]]\n+// CHECK: define{{.*}}foo83{{.*}}!type ![[TYPE83:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo84(_: &i32) { }\n-// CHECK: define{{.*}}foo84{{.*}}!type ![[TYPE84:[0-9]+]]\n+// CHECK: define{{.*}}foo84{{.*}}!type ![[TYPE84:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo85(_: &i32, _: &mut i32) { }\n-// CHECK: define{{.*}}foo85{{.*}}!type ![[TYPE85:[0-9]+]]\n+// CHECK: define{{.*}}foo85{{.*}}!type ![[TYPE85:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo86(_: &i32, _: &mut i32, _: &mut i32) { }\n-// CHECK: define{{.*}}foo86{{.*}}!type ![[TYPE86:[0-9]+]]\n+// CHECK: define{{.*}}foo86{{.*}}!type ![[TYPE86:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo87(_: *mut i32) { }\n-// CHECK: define{{.*}}foo87{{.*}}!type ![[TYPE87:[0-9]+]]\n+// CHECK: define{{.*}}foo87{{.*}}!type ![[TYPE87:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo88(_: *mut i32, _: *const i32) { }\n-// CHECK: define{{.*}}foo88{{.*}}!type ![[TYPE88:[0-9]+]]\n+// CHECK: define{{.*}}foo88{{.*}}!type ![[TYPE88:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo89(_: *mut i32, _: *const i32, _: *const i32) { }\n-// CHECK: define{{.*}}foo89{{.*}}!type ![[TYPE89:[0-9]+]]\n+// CHECK: define{{.*}}foo89{{.*}}!type ![[TYPE89:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo90(_: *const i32) { }\n-// CHECK: define{{.*}}foo90{{.*}}!type ![[TYPE90:[0-9]+]]\n+// CHECK: define{{.*}}foo90{{.*}}!type ![[TYPE90:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo91(_: *const i32, _: *mut i32) { }\n-// CHECK: define{{.*}}foo91{{.*}}!type ![[TYPE91:[0-9]+]]\n+// CHECK: define{{.*}}foo91{{.*}}!type ![[TYPE91:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo92(_: *const i32, _: *mut i32, _: *mut i32) { }\n-// CHECK: define{{.*}}foo92{{.*}}!type ![[TYPE92:[0-9]+]]\n+// CHECK: define{{.*}}foo92{{.*}}!type ![[TYPE92:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo93(_: fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo93{{.*}}!type ![[TYPE93:[0-9]+]]\n+// CHECK: define{{.*}}foo93{{.*}}!type ![[TYPE93:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo94(_: fn(i32) -> i32, _: fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo94{{.*}}!type ![[TYPE94:[0-9]+]]\n+// CHECK: define{{.*}}foo94{{.*}}!type ![[TYPE94:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo95(_: fn(i32) -> i32, _: fn(i32) -> i32, _: fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo95{{.*}}!type ![[TYPE95:[0-9]+]]\n+// CHECK: define{{.*}}foo95{{.*}}!type ![[TYPE95:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo96(_: &dyn Fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo96{{.*}}!type ![[TYPE96:[0-9]+]]\n+// CHECK: define{{.*}}foo96{{.*}}!type ![[TYPE96:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo97(_: &dyn Fn(i32) -> i32, _: &dyn Fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo97{{.*}}!type ![[TYPE97:[0-9]+]]\n+// CHECK: define{{.*}}foo97{{.*}}!type ![[TYPE97:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo98(_: &dyn Fn(i32) -> i32, _: &dyn Fn(i32) -> i32, _: &dyn Fn(i32) -> i32) { }\n-// CHECK: define{{.*}}foo98{{.*}}!type ![[TYPE98:[0-9]+]]\n+// CHECK: define{{.*}}foo98{{.*}}!type ![[TYPE98:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo99(_: &dyn FnMut(i32) -> i32) { }\n-// CHECK: define{{.*}}foo99{{.*}}!type ![[TYPE99:[0-9]+]]\n+// CHECK: define{{.*}}foo99{{.*}}!type ![[TYPE99:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo100(_: &dyn FnMut(i32) -> i32, _: &dyn FnMut(i32) -> i32) { }\n-// CHECK: define{{.*}}foo100{{.*}}!type ![[TYPE100:[0-9]+]]\n+// CHECK: define{{.*}}foo100{{.*}}!type ![[TYPE100:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo101(_: &dyn FnMut(i32) -> i32, _: &dyn FnMut(i32) -> i32, _: &dyn FnMut(i32) -> i32) { }\n-// CHECK: define{{.*}}foo101{{.*}}!type ![[TYPE101:[0-9]+]]\n+// CHECK: define{{.*}}foo101{{.*}}!type ![[TYPE101:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo102(_: &dyn FnOnce(i32) -> i32) { }\n-// CHECK: define{{.*}}foo102{{.*}}!type ![[TYPE102:[0-9]+]]\n+// CHECK: define{{.*}}foo102{{.*}}!type ![[TYPE102:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo103(_: &dyn FnOnce(i32) -> i32, _: &dyn FnOnce(i32) -> i32) { }\n-// CHECK: define{{.*}}foo103{{.*}}!type ![[TYPE103:[0-9]+]]\n+// CHECK: define{{.*}}foo103{{.*}}!type ![[TYPE103:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo104(_: &dyn FnOnce(i32) -> i32, _: &dyn FnOnce(i32) -> i32, _: &dyn FnOnce(i32) -> i32) {}\n-// CHECK: define{{.*}}foo104{{.*}}!type ![[TYPE104:[0-9]+]]\n+// CHECK: define{{.*}}foo104{{.*}}!type ![[TYPE104:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo105(_: &dyn Send) { }\n-// CHECK: define{{.*}}foo105{{.*}}!type ![[TYPE105:[0-9]+]]\n+// CHECK: define{{.*}}foo105{{.*}}!type ![[TYPE105:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo106(_: &dyn Send, _: &dyn Send) { }\n-// CHECK: define{{.*}}foo106{{.*}}!type ![[TYPE106:[0-9]+]]\n+// CHECK: define{{.*}}foo106{{.*}}!type ![[TYPE106:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo107(_: &dyn Send, _: &dyn Send, _: &dyn Send) { }\n-// CHECK: define{{.*}}foo107{{.*}}!type ![[TYPE107:[0-9]+]]\n+// CHECK: define{{.*}}foo107{{.*}}!type ![[TYPE107:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo108(_: Type1) { }\n-// CHECK: define{{.*}}foo108{{.*}}!type ![[TYPE108:[0-9]+]]\n+// CHECK: define{{.*}}foo108{{.*}}!type ![[TYPE108:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo109(_: Type1, _: Type1) { }\n-// CHECK: define{{.*}}foo109{{.*}}!type ![[TYPE109:[0-9]+]]\n+// CHECK: define{{.*}}foo109{{.*}}!type ![[TYPE109:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo110(_: Type1, _: Type1, _: Type1) { }\n-// CHECK: define{{.*}}foo110{{.*}}!type ![[TYPE110:[0-9]+]]\n+// CHECK: define{{.*}}foo110{{.*}}!type ![[TYPE110:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo111(_: Type2) { }\n-// CHECK: define{{.*}}foo111{{.*}}!type ![[TYPE111:[0-9]+]]\n+// CHECK: define{{.*}}foo111{{.*}}!type ![[TYPE111:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo112(_: Type2, _: Type2) { }\n-// CHECK: define{{.*}}foo112{{.*}}!type ![[TYPE112:[0-9]+]]\n+// CHECK: define{{.*}}foo112{{.*}}!type ![[TYPE112:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo113(_: Type2, _: Type2, _: Type2) { }\n-// CHECK: define{{.*}}foo113{{.*}}!type ![[TYPE113:[0-9]+]]\n+// CHECK: define{{.*}}foo113{{.*}}!type ![[TYPE113:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo114(_: Type3) { }\n-// CHECK: define{{.*}}foo114{{.*}}!type ![[TYPE114:[0-9]+]]\n+// CHECK: define{{.*}}foo114{{.*}}!type ![[TYPE114:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo115(_: Type3, _: Type3) { }\n-// CHECK: define{{.*}}foo115{{.*}}!type ![[TYPE115:[0-9]+]]\n+// CHECK: define{{.*}}foo115{{.*}}!type ![[TYPE115:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo116(_: Type3, _: Type3, _: Type3) { }\n-// CHECK: define{{.*}}foo116{{.*}}!type ![[TYPE116:[0-9]+]]\n+// CHECK: define{{.*}}foo116{{.*}}!type ![[TYPE116:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo117(_: Type4) { }\n-// CHECK: define{{.*}}foo117{{.*}}!type ![[TYPE117:[0-9]+]]\n+// CHECK: define{{.*}}foo117{{.*}}!type ![[TYPE117:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo118(_: Type4, _: Type4) { }\n-// CHECK: define{{.*}}foo118{{.*}}!type ![[TYPE118:[0-9]+]]\n+// CHECK: define{{.*}}foo118{{.*}}!type ![[TYPE118:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo119(_: Type4, _: Type4, _: Type4) { }\n-// CHECK: define{{.*}}foo119{{.*}}!type ![[TYPE119:[0-9]+]]\n+// CHECK: define{{.*}}foo119{{.*}}!type ![[TYPE119:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo120(_: Type5) { }\n-// CHECK: define{{.*}}foo120{{.*}}!type ![[TYPE120:[0-9]+]]\n+// CHECK: define{{.*}}foo120{{.*}}!type ![[TYPE120:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo121(_: Type5, _: Type5) { }\n-// CHECK: define{{.*}}foo121{{.*}}!type ![[TYPE121:[0-9]+]]\n+// CHECK: define{{.*}}foo121{{.*}}!type ![[TYPE121:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo122(_: Type5, _: Type5, _: Type5) { }\n-// CHECK: define{{.*}}foo122{{.*}}!type ![[TYPE122:[0-9]+]]\n+// CHECK: define{{.*}}foo122{{.*}}!type ![[TYPE122:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo123(_: Type6) { }\n-// CHECK: define{{.*}}foo123{{.*}}!type ![[TYPE123:[0-9]+]]\n+// CHECK: define{{.*}}foo123{{.*}}!type ![[TYPE123:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo124(_: Type6, _: Type6) { }\n-// CHECK: define{{.*}}foo124{{.*}}!type ![[TYPE124:[0-9]+]]\n+// CHECK: define{{.*}}foo124{{.*}}!type ![[TYPE124:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo125(_: Type6, _: Type6, _: Type6) { }\n-// CHECK: define{{.*}}foo125{{.*}}!type ![[TYPE125:[0-9]+]]\n+// CHECK: define{{.*}}foo125{{.*}}!type ![[TYPE125:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo126(_: Type7) { }\n-// CHECK: define{{.*}}foo126{{.*}}!type ![[TYPE126:[0-9]+]]\n+// CHECK: define{{.*}}foo126{{.*}}!type ![[TYPE126:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo127(_: Type7, _: Type7) { }\n-// CHECK: define{{.*}}foo127{{.*}}!type ![[TYPE127:[0-9]+]]\n+// CHECK: define{{.*}}foo127{{.*}}!type ![[TYPE127:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo128(_: Type7, _: Type7, _: Type7) { }\n-// CHECK: define{{.*}}foo128{{.*}}!type ![[TYPE128:[0-9]+]]\n+// CHECK: define{{.*}}foo128{{.*}}!type ![[TYPE128:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo129(_: Type8) { }\n-// CHECK: define{{.*}}foo129{{.*}}!type ![[TYPE129:[0-9]+]]\n+// CHECK: define{{.*}}foo129{{.*}}!type ![[TYPE129:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo130(_: Type8, _: Type8) { }\n-// CHECK: define{{.*}}foo130{{.*}}!type ![[TYPE130:[0-9]+]]\n+// CHECK: define{{.*}}foo130{{.*}}!type ![[TYPE130:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo131(_: Type8, _: Type8, _: Type8) { }\n-// CHECK: define{{.*}}foo131{{.*}}!type ![[TYPE131:[0-9]+]]\n+// CHECK: define{{.*}}foo131{{.*}}!type ![[TYPE131:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo132(_: Type9) { }\n-// CHECK: define{{.*}}foo132{{.*}}!type ![[TYPE132:[0-9]+]]\n+// CHECK: define{{.*}}foo132{{.*}}!type ![[TYPE132:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo133(_: Type9, _: Type9) { }\n-// CHECK: define{{.*}}foo133{{.*}}!type ![[TYPE133:[0-9]+]]\n+// CHECK: define{{.*}}foo133{{.*}}!type ![[TYPE133:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo134(_: Type9, _: Type9, _: Type9) { }\n-// CHECK: define{{.*}}foo134{{.*}}!type ![[TYPE134:[0-9]+]]\n+// CHECK: define{{.*}}foo134{{.*}}!type ![[TYPE134:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo135(_: Type10) { }\n-// CHECK: define{{.*}}foo135{{.*}}!type ![[TYPE135:[0-9]+]]\n+// CHECK: define{{.*}}foo135{{.*}}!type ![[TYPE135:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo136(_: Type10, _: Type10) { }\n-// CHECK: define{{.*}}foo136{{.*}}!type ![[TYPE136:[0-9]+]]\n+// CHECK: define{{.*}}foo136{{.*}}!type ![[TYPE136:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo137(_: Type10, _: Type10, _: Type10) { }\n-// CHECK: define{{.*}}foo137{{.*}}!type ![[TYPE137:[0-9]+]]\n+// CHECK: define{{.*}}foo137{{.*}}!type ![[TYPE137:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo138(_: Type11) { }\n-// CHECK: define{{.*}}foo138{{.*}}!type ![[TYPE138:[0-9]+]]\n+// CHECK: define{{.*}}foo138{{.*}}!type ![[TYPE138:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo139(_: Type11, _: Type11) { }\n-// CHECK: define{{.*}}foo139{{.*}}!type ![[TYPE139:[0-9]+]]\n+// CHECK: define{{.*}}foo139{{.*}}!type ![[TYPE139:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo140(_: Type11, _: Type11, _: Type11) { }\n-// CHECK: define{{.*}}foo140{{.*}}!type ![[TYPE140:[0-9]+]]\n+// CHECK: define{{.*}}foo140{{.*}}!type ![[TYPE140:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo141(_: Type12) { }\n-// CHECK: define{{.*}}foo141{{.*}}!type ![[TYPE141:[0-9]+]]\n+// CHECK: define{{.*}}foo141{{.*}}!type ![[TYPE141:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo142(_: Type12, _: Type12) { }\n-// CHECK: define{{.*}}foo142{{.*}}!type ![[TYPE142:[0-9]+]]\n+// CHECK: define{{.*}}foo142{{.*}}!type ![[TYPE142:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo143(_: Type12, _: Type12, _: Type12) { }\n-// CHECK: define{{.*}}foo143{{.*}}!type ![[TYPE143:[0-9]+]]\n+// CHECK: define{{.*}}foo143{{.*}}!type ![[TYPE143:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo144(_: Type13) { }\n-// CHECK: define{{.*}}foo144{{.*}}!type ![[TYPE144:[0-9]+]]\n+// CHECK: define{{.*}}foo144{{.*}}!type ![[TYPE144:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo145(_: Type13, _: Type13) { }\n-// CHECK: define{{.*}}foo145{{.*}}!type ![[TYPE145:[0-9]+]]\n+// CHECK: define{{.*}}foo145{{.*}}!type ![[TYPE145:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo146(_: Type13, _: Type13, _: Type13) { }\n-// CHECK: define{{.*}}foo146{{.*}}!type ![[TYPE146:[0-9]+]]\n+// CHECK: define{{.*}}foo146{{.*}}!type ![[TYPE146:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo147(_: Type14<Bar>) { }\n-// CHECK: define{{.*}}foo147{{.*}}!type ![[TYPE147:[0-9]+]]\n+// CHECK: define{{.*}}foo147{{.*}}!type ![[TYPE147:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo148(_: Type14<Bar>, _: Type14<Bar>) { }\n-// CHECK: define{{.*}}foo148{{.*}}!type ![[TYPE148:[0-9]+]]\n+// CHECK: define{{.*}}foo148{{.*}}!type ![[TYPE148:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n pub fn foo149(_: Type14<Bar>, _: Type14<Bar>, _: Type14<Bar>) { }\n-// CHECK: define{{.*}}foo149{{.*}}!type ![[TYPE149:[0-9]+]]\n+// CHECK: define{{.*}}foo149{{.*}}!type ![[TYPE149:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n \n // CHECK: ![[TYPE0]] = !{i64 0, !\"_ZTSFvvE\"}\n // CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFvvvE\"}"}, {"sha": "78ef0c2c7d6bacf1d1337e2a61e1c7e8190a2f93", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi-generalized.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-generalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-generalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-generalized.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,31 @@\n+// Verifies that generalized type metadata for functions are emitted.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-generalize-pointers\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_E.generalized\")\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_E.generalized\")\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_S_E.generalized\")\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFu3i32PKvS_E.generalized\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFu3i32PKvS_S_E.generalized\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFu3i32PKvS_S_S_E.generalized\"}"}, {"sha": "3b72459c4b097684aa5410fd441c2d9776e690cd", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized-generalized.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized-generalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized-generalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized-generalized.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,31 @@\n+// Verifies that normalized and generalized type metadata for functions are emitted.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers -Zsanitizer-cfi-generalize-pointers\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}![[TYPE1:[0-9]+]]\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_E.normalized.generalized\")\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}![[TYPE2:[0-9]+]]\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_E.normalized.generalized\")\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}![[TYPE3:[0-9]+]]\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_S_E.normalized.generalized\")\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFu3i32PKvS_E.normalized.generalized\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFu3i32PKvS_S_E.normalized.generalized\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFu3i32PKvS_S_S_E.normalized.generalized\"}"}, {"sha": "9218e9947bfe3cae1a9faac4ac721d3a1759ac22", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi-normalized.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,31 @@\n+// Verifies that normalized type metadata for functions are emitted.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_E.normalized\")\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_E.normalized\")\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_S_E.normalized\")\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFu3i32PFS_S_ES_E.normalized\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFu3i32PFS_S_S_ES_S_E.normalized\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFu3i32PFS_S_S_S_ES_S_S_E.normalized\"}"}, {"sha": "f9fd816dedb9d35ea09ddc6885bb8c516ba9c9d4", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-itanium-cxx-abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-itanium-cxx-abi.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -7,21 +7,21 @@\n \n pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}foo\n-    // CHECK-SAME: {{.*}}!type ![[TYPE1:[0-9]+]]\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n     // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_E\")\n     f(arg)\n }\n \n pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}bar\n-    // CHECK-SAME: {{.*}}!type ![[TYPE2:[0-9]+]]\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n     // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_E\")\n     f(arg1, arg2)\n }\n \n pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}baz\n-    // CHECK-SAME: {{.*}}!type ![[TYPE3:[0-9]+]]\n+    // CHECK-SAME:  {{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}} !type !{{[0-9]+}}\n     // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%0}}, metadata !\"_ZTSFu3i32S_S_S_E\")\n     f(arg1, arg2, arg3)\n }"}, {"sha": "677ebdb27ec5e7505530bc453c6a1edac2fde917", "filename": "tests/codegen/sanitizer-cfi-generalize-pointers.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-generalize-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-generalize-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-generalize-pointers.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,46 @@\n+// Verifies that pointer types are generalized.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-generalize-pointers\n+\n+#![crate_type=\"lib\"]\n+\n+extern crate core;\n+\n+pub fn foo0(_: &mut i32) { }\n+// CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo1(_: &mut i32, _: &mut i32) { }\n+// CHECK: define{{.*}}foo1{{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo2(_: &mut i32, _: &mut i32, _: &mut i32) { }\n+// CHECK: define{{.*}}foo2{{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo3(_: &i32) { }\n+// CHECK: define{{.*}}foo3{{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo4(_: &i32, _: &i32) { }\n+// CHECK: define{{.*}}foo4{{.*}}!type ![[TYPE4:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo5(_: &i32, _: &i32, _: &i32) { }\n+// CHECK: define{{.*}}foo5{{.*}}!type ![[TYPE5:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo6(_: *mut i32) { }\n+// CHECK: define{{.*}}foo6{{.*}}!type ![[TYPE6:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo7(_: *mut i32, _: *mut i32) { }\n+// CHECK: define{{.*}}foo7{{.*}}!type ![[TYPE7:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo8(_: *mut i32, _: *mut i32, _: *mut i32) { }\n+// CHECK: define{{.*}}foo8{{.*}}!type ![[TYPE8:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo9(_: *const i32) { }\n+// CHECK: define{{.*}}foo9{{.*}}!type ![[TYPE9:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo10(_: *const i32, _: *const i32) { }\n+// CHECK: define{{.*}}foo10{{.*}}!type ![[TYPE10:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+pub fn foo11(_: *const i32, _: *const i32, _: *const i32) { }\n+// CHECK: define{{.*}}foo11{{.*}}!type ![[TYPE11:[0-9]+]] !type !{{[0-9]+}} !type !{{[0-9]+}}\n+\n+// CHECK: ![[TYPE0]] = !{i64 0, !\"_ZTSFvU3mutu3refIvEE.generalized\"}\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFvU3mutu3refIvES0_E.generalized\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFvU3mutu3refIvES0_S0_E.generalized\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFvu3refIvEE.generalized\"}\n+// CHECK: ![[TYPE4]] = !{i64 0, !\"_ZTSFvu3refIvES_E.generalized\"}\n+// CHECK: ![[TYPE5]] = !{i64 0, !\"_ZTSFvu3refIvES_S_E.generalized\"}\n+// CHECK: ![[TYPE6]] = !{i64 0, !\"_ZTSFvPvE.generalized\"}\n+// CHECK: ![[TYPE7]] = !{i64 0, !\"_ZTSFvPvS_E.generalized\"}\n+// CHECK: ![[TYPE8]] = !{i64 0, !\"_ZTSFvPvS_S_E.generalized\"}\n+// CHECK: ![[TYPE9]] = !{i64 0, !\"_ZTSFvPKvE.generalized\"}\n+// CHECK: ![[TYPE10]] = !{i64 0, !\"_ZTSFvPKvS0_E.generalized\"}\n+// CHECK: ![[TYPE11]] = !{i64 0, !\"_ZTSFvPKvS0_S0_E.generalized\"}"}, {"sha": "aa3913cb8e7d27e551bc8a93c6a2deac151d8f35", "filename": "tests/codegen/sanitizer-cfi-normalize-integers.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-normalize-integers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-cfi-normalize-integers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-normalize-integers.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,83 @@\n+// Verifies that integer types are normalized.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Cno-prepopulate-passes -Ctarget-feature=-crt-static -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\n+\n+#![crate_type=\"lib\"]\n+\n+extern crate core;\n+use core::ffi::*;\n+\n+pub fn foo0(_: bool) { }\n+// CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo1(_: bool, _: c_uchar) { }\n+// CHECK: define{{.*}}foo1{{.*}}!type ![[TYPE1:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo2(_: bool, _: c_uchar, _: c_uchar) { }\n+// CHECK: define{{.*}}foo2{{.*}}!type ![[TYPE2:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo3(_: isize) { }\n+// CHECK: define{{.*}}foo3{{.*}}!type ![[TYPE3:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo4(_: isize, _: c_long) { }\n+// CHECK: define{{.*}}foo4{{.*}}!type ![[TYPE4:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo5(_: isize, _: c_long, _: c_longlong) { }\n+// CHECK: define{{.*}}foo5{{.*}}!type ![[TYPE5:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo6(_: usize) { }\n+// CHECK: define{{.*}}foo6{{.*}}!type ![[TYPE6:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo7(_: usize, _: c_ulong) { }\n+// CHECK: define{{.*}}foo7{{.*}}!type ![[TYPE7:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo8(_: usize, _: c_ulong, _: c_ulonglong) { }\n+// CHECK: define{{.*}}foo8{{.*}}!type ![[TYPE8:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo9(_: c_schar) { }\n+// CHECK: define{{.*}}foo9{{.*}}!type ![[TYPE9:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo10(_: c_char, _: c_schar) { }\n+// CHECK: define{{.*}}foo10{{.*}}!type ![[TYPE10:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo11(_: c_char, _: c_schar, _: c_schar) { }\n+// CHECK: define{{.*}}foo11{{.*}}!type ![[TYPE11:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo12(_: c_int) { }\n+// CHECK: define{{.*}}foo12{{.*}}!type ![[TYPE12:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo13(_: c_int, _: c_int) { }\n+// CHECK: define{{.*}}foo13{{.*}}!type ![[TYPE13:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo14(_: c_int, _: c_int, _: c_int) { }\n+// CHECK: define{{.*}}foo14{{.*}}!type ![[TYPE14:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo15(_: c_short) { }\n+// CHECK: define{{.*}}foo15{{.*}}!type ![[TYPE15:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo16(_: c_short, _: c_short) { }\n+// CHECK: define{{.*}}foo16{{.*}}!type ![[TYPE16:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo17(_: c_short, _: c_short, _: c_short) { }\n+// CHECK: define{{.*}}foo17{{.*}}!type ![[TYPE17:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo18(_: c_uint) { }\n+// CHECK: define{{.*}}foo18{{.*}}!type ![[TYPE18:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo19(_: c_uint, _: c_uint) { }\n+// CHECK: define{{.*}}foo19{{.*}}!type ![[TYPE19:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo20(_: c_uint, _: c_uint, _: c_uint) { }\n+// CHECK: define{{.*}}foo20{{.*}}!type ![[TYPE20:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo21(_: c_ushort) { }\n+// CHECK: define{{.*}}foo21{{.*}}!type ![[TYPE21:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo22(_: c_ushort, _: c_ushort) { }\n+// CHECK: define{{.*}}foo22{{.*}}!type ![[TYPE22:[0-9]+]] !type !{{[0-9]+}}\n+pub fn foo23(_: c_ushort, _: c_ushort, _: c_ushort) { }\n+// CHECK: define{{.*}}foo23{{.*}}!type ![[TYPE23:[0-9]+]] !type !{{[0-9]+}}\n+\n+// CHECK: ![[TYPE0]] = !{i64 0, !\"_ZTSFvu2u8E.normalized\"}\n+// CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFvu2u8S_E.normalized\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"_ZTSFvu2u8S_S_E.normalized\"}\n+// CHECK: ![[TYPE3]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}E.normalized\"}\n+// CHECK: ![[TYPE4]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}{{u3i32|u3i64|S_}}E.normalized\"}\n+// CHECK: ![[TYPE5]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}{{u3i32|u3i64|S_}}{{u3i64|S_|S0_}}E.normalized\"}\n+// CHECK: ![[TYPE6]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}E.normalized\"}\n+// CHECK: ![[TYPE7]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}{{u3u32|u3u64|S_}}E.normalized\"}\n+// CHECK: ![[TYPE8]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}{{u3u32|u3u64|S_}}{{u3u64|S_|S0_}}E.normalized\"}\n+// CHECK: ![[TYPE9]] = !{i64 0, !\"_ZTSFvu2i8E.normalized\"}\n+// CHECK: ![[TYPE10]] = !{i64 0, !\"_ZTSFv{{u2i8S_|u2u8u2i8}}E.normalized\"}\n+// CHECK: ![[TYPE11]] = !{i64 0, !\"_ZTSFv{{u2i8S_S_|u2u8u2i8S0_}}E.normalized\"}\n+// CHECK: ![[TYPE12]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}E.normalized\"}\n+// CHECK: ![[TYPE13]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}S_E.normalized\"}\n+// CHECK: ![[TYPE14]] = !{i64 0, !\"_ZTSFv{{u3i16|u3i32|u3i64}}S_S_E.normalized\"}\n+// CHECK: ![[TYPE15]] = !{i64 0, !\"_ZTSFvu3i16E.normalized\"}\n+// CHECK: ![[TYPE16]] = !{i64 0, !\"_ZTSFvu3i16S_E.normalized\"}\n+// CHECK: ![[TYPE17]] = !{i64 0, !\"_ZTSFvu3i16S_S_E.normalized\"}\n+// CHECK: ![[TYPE18]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}E.normalized\"}\n+// CHECK: ![[TYPE19]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}S_E.normalized\"}\n+// CHECK: ![[TYPE20]] = !{i64 0, !\"_ZTSFv{{u3u16|u3u32|u3u64}}S_S_E.normalized\"}\n+// CHECK: ![[TYPE21]] = !{i64 0, !\"_ZTSFvu3u16E.normalized\"}\n+// CHECK: ![[TYPE22]] = !{i64 0, !\"_ZTSFvu3u16S_E.normalized\"}\n+// CHECK: ![[TYPE23]] = !{i64 0, !\"_ZTSFvu3u16S_S_E.normalized\"}"}, {"sha": "bb317e4a2fad384970de14762c0c7f2dcb79b5ad", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-attr-no-sanitize.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-attr-no-sanitize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-attr-no-sanitize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-attr-no-sanitize.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,30 @@\n+// Verifies that KCFI operand bundles are omitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Copt-level=0\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, no_sanitize, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+#[no_sanitize(kcfi)]\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: sanitizer_kcfi_emit_kcfi_operand_bundle_attr_no_sanitize::foo\n+    // CHECK:       Function Attrs: {{.*}}\n+    // CHECK-LABEL: define{{.*}}foo{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       start:\n+    // CHECK-NOT:   {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 {{[-0-9]+}}) ]\n+    // CHECK:       ret i32 {{%.+}}\n+    f(arg)\n+}"}, {"sha": "29e4df3511fbbc9178a9d5b1ffac737e26d97345", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-generalized.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-generalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-generalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-generalized.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,44 @@\n+// Verifies that generalized KCFI type metadata for functions are emitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Zsanitizer-cfi-generalize-pointers\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 233085384) ]\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2){{.*}}[ \"kcfi\"(i32 435418021) ]\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2, i32 {{(noundef )*}}%arg3){{.*}}[ \"kcfi\"(i32 -1003721339) ]\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i32 -1741689296}\n+// CHECK: ![[TYPE2]] = !{i32 489439372}\n+// CHECK: ![[TYPE3]] = !{i32 2026563871}"}, {"sha": "84d678a33ba906dc26d4444a53be32dc2c44c069", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized-generalized.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized-generalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized-generalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized-generalized.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,44 @@\n+// Verifies that normalized and generalized KCFI type metadata for functions are emitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Zsanitizer-cfi-normalize-integers -Zsanitizer-cfi-generalize-pointers\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 -686570305) ]\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2){{.*}}[ \"kcfi\"(i32 1281038450) ]\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2, i32 {{(noundef )*}}%arg3){{.*}}[ \"kcfi\"(i32 -1751512973) ]\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i32 975484707}\n+// CHECK: ![[TYPE2]] = !{i32 1658833102}\n+// CHECK: ![[TYPE3]] = !{i32 230429758}"}, {"sha": "761c37a9e06a07c443f209c627083e1971f6ae7c", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi-normalized.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,44 @@\n+// Verifies that normalized KCFI type metadata for functions are emitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Zsanitizer-cfi-normalize-integers\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 -841055669) ]\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2){{.*}}[ \"kcfi\"(i32 1390819368) ]\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2, i32 {{(noundef )*}}%arg3){{.*}}[ \"kcfi\"(i32 586925835) ]\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i32 -458317079}\n+// CHECK: ![[TYPE2]] = !{i32 1737138182}\n+// CHECK: ![[TYPE3]] = !{i32 197182412}"}, {"sha": "83cda0ef136f88510202d705205e1949305595d8", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -20,22 +20,22 @@ impl Copy for i32 {}\n \n pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}foo\n-    // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n-    // CHECK: call i32 %f(i32 %arg){{.*}}[ \"kcfi\"(i32 -1666898348) ]\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 -1666898348) ]\n     f(arg)\n }\n \n pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}bar\n-    // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n-    // CHECK: call i32 %f(i32 %arg1, i32 %arg2){{.*}}[ \"kcfi\"(i32 -1789026986) ]\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2){{.*}}[ \"kcfi\"(i32 -1789026986) ]\n     f(arg1, arg2)\n }\n \n pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}baz\n-    // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n-    // CHECK: call i32 %f(i32 %arg1, i32 %arg2, i32 %arg3){{.*}}[ \"kcfi\"(i32 1248878270) ]\n+    // CHECK-SAME:  {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n+    // CHECK:       {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg1, i32 {{(noundef )*}}%arg2, i32 {{(noundef )*}}%arg3){{.*}}[ \"kcfi\"(i32 1248878270) ]\n     f(arg1, arg2, arg3)\n }\n "}, {"sha": "e1d617b5ee18ec5dd7f5145b27008611d97d7d0b", "filename": "tests/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,27 @@\n+// Verifies that KCFI operand bundles are emitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi -Copt-level=0\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       start:\n+    // CHECK-NEXT:  {{%.+}} = call {{(noundef )*}}i32 %f(i32 {{(noundef )*}}%arg){{.*}}[ \"kcfi\"(i32 {{[-0-9]+}}) ]\n+    // CHECK-NEXT:  ret i32 {{%.+}}\n+    f(arg)\n+}"}, {"sha": "392e433807640102b60e20dd3c5ce9c2a9e6a66a", "filename": "tests/codegen/slice-iter-nonnull.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fslice-iter-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fslice-iter-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fslice-iter-nonnull.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,42 @@\n+// no-system-llvm\n+// compile-flags: -O\n+// ignore-debug (these add extra checks that make it hard to verify)\n+#![crate_type = \"lib\"]\n+\n+// The slice iterator used to `assume` that the `start` pointer was non-null.\n+// That ought to be unneeded, though, since the type is `NonNull`, so this test\n+// confirms that the appropriate metadata is included to denote that.\n+\n+// CHECK-LABEL: @slice_iter_next(\n+#[no_mangle]\n+pub fn slice_iter_next<'a>(it: &mut std::slice::Iter<'a, u32>) -> Option<&'a u32> {\n+    // CHECK: %[[ENDP:.+]] = getelementptr{{.+}}ptr %it,{{.+}} 1\n+    // CHECK: %[[END:.+]] = load ptr, ptr %[[ENDP]]\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: %[[START:.+]] = load ptr, ptr %it,\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: icmp eq ptr %[[START]], %[[END]]\n+\n+    // CHECK: store ptr{{.+}}, ptr %it,\n+\n+    it.next()\n+}\n+\n+// CHECK-LABEL: @slice_iter_next_back(\n+#[no_mangle]\n+pub fn slice_iter_next_back<'a>(it: &mut std::slice::Iter<'a, u32>) -> Option<&'a u32> {\n+    // CHECK: %[[ENDP:.+]] = getelementptr{{.+}}ptr %it,{{.+}} 1\n+    // CHECK: %[[END:.+]] = load ptr, ptr %[[ENDP]]\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: %[[START:.+]] = load ptr, ptr %it,\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: icmp eq ptr %[[START]], %[[END]]\n+\n+    // CHECK: store ptr{{.+}}, ptr %[[ENDP]],\n+\n+    it.next_back()\n+}"}, {"sha": "dc6570be32b4873116be0500c03c0ba42b75a568", "filename": "tests/codegen/split-lto-unit.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsplit-lto-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fcodegen%2Fsplit-lto-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsplit-lto-unit.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,11 @@\n+// Verifies that \"EnableSplitLTOUnit\" module flag is added.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsplit-lto-unit\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo() {\n+}\n+\n+// CHECK: !{{[0-9]+}} = !{i32 4, !\"EnableSplitLTOUnit\", i32 1}"}, {"sha": "f518266016e09b962277c4a6fa75538852b468dc", "filename": "tests/incremental/change_crate_dep_kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fincremental%2Fchange_crate_dep_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fincremental%2Fchange_crate_dep_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fchange_crate_dep_kind.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -2,6 +2,7 @@\n // detected then -Zincremental-verify-ich will trigger an assertion.\n \n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph -Cpanic=unwind\n // build-pass (FIXME(62277): could be check-pass?)"}, {"sha": "ad8a338a7964f78b65956a96fd205f8bc639ac4e", "filename": "tests/incremental/issue-80691-bad-eval-cache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fincremental%2Fissue-80691-bad-eval-cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fincremental%2Fissue-80691-bad-eval-cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fissue-80691-bad-eval-cache.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,6 +1,7 @@\n // revisions: rfail1 rfail2\n // failure-status: 101\n // error-pattern: not implemented\n+// needs-unwind -Cpanic=abort causes abort instead of exit(101)\n \n pub trait Interner {\n     type InternedVariableKinds;"}, {"sha": "d50b12044ceb27d332433d28b2dc4c9d37dde23c", "filename": "tests/mir-opt/const_prop/address_of_pair.fn0.ConstProp.diff", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,46 @@\n+- // MIR for `fn0` before ConstProp\n++ // MIR for `fn0` after ConstProp\n+  \n+  fn fn0() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/address_of_pair.rs:+0:17: +0:21\n+      let mut _1: !;                       // in scope 0 at $DIR/address_of_pair.rs:+0:22: +9:2\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/address_of_pair.rs:+1:9: +1:17\n+      let _4: ();                          // in scope 0 at $DIR/address_of_pair.rs:+4:5: +6:6\n+      let mut _6: bool;                    // in scope 0 at $DIR/address_of_pair.rs:+7:16: +7:22\n+      scope 1 {\n+          debug pair => _2;                // in scope 1 at $DIR/address_of_pair.rs:+1:9: +1:17\n+          let _3: *mut bool;               // in scope 1 at $DIR/address_of_pair.rs:+2:9: +2:12\n+          scope 2 {\n+              debug ptr => _3;             // in scope 2 at $DIR/address_of_pair.rs:+2:9: +2:12\n+              let _5: bool;                // in scope 2 at $DIR/address_of_pair.rs:+7:9: +7:12\n+              scope 3 {\n+              }\n+              scope 4 {\n+                  debug ret => _5;         // in scope 4 at $DIR/address_of_pair.rs:+7:9: +7:12\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/address_of_pair.rs:+1:9: +1:17\n+          _2 = (const 1_i32, const false); // scope 0 at $DIR/address_of_pair.rs:+1:20: +1:30\n+          StorageLive(_3);                 // scope 1 at $DIR/address_of_pair.rs:+2:9: +2:12\n+          _3 = &raw mut (_2.1: bool);      // scope 1 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+          _2 = (const 1_i32, const false); // scope 2 at $DIR/address_of_pair.rs:+3:5: +3:22\n+          StorageLive(_4);                 // scope 2 at $DIR/address_of_pair.rs:+4:5: +6:6\n+          (*_3) = const true;              // scope 3 at $DIR/address_of_pair.rs:+5:9: +5:20\n+          _4 = const ();                   // scope 3 at $DIR/address_of_pair.rs:+4:5: +6:6\n+          StorageDead(_4);                 // scope 2 at $DIR/address_of_pair.rs:+6:5: +6:6\n+          StorageLive(_5);                 // scope 2 at $DIR/address_of_pair.rs:+7:9: +7:12\n+          StorageLive(_6);                 // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n+          _6 = (_2.1: bool);               // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n+          _5 = Not(move _6);               // scope 2 at $DIR/address_of_pair.rs:+7:15: +7:22\n+          StorageDead(_6);                 // scope 2 at $DIR/address_of_pair.rs:+7:21: +7:22\n+          _0 = _5;                         // scope 4 at $DIR/address_of_pair.rs:+8:12: +8:15\n+          StorageDead(_5);                 // scope 2 at $DIR/address_of_pair.rs:+9:1: +9:2\n+          StorageDead(_3);                 // scope 1 at $DIR/address_of_pair.rs:+9:1: +9:2\n+          StorageDead(_2);                 // scope 0 at $DIR/address_of_pair.rs:+9:1: +9:2\n+          return;                          // scope 0 at $DIR/address_of_pair.rs:+9:2: +9:2\n+      }\n+  }\n+  "}, {"sha": "43dc9bae625347336da5b3724d1d0be813b5e877", "filename": "tests/mir-opt/const_prop/address_of_pair.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,17 @@\n+// unit-test: ConstProp\n+\n+// EMIT_MIR address_of_pair.fn0.ConstProp.diff\n+pub fn fn0() -> bool {\n+    let mut pair = (1, false);\n+    let ptr = core::ptr::addr_of_mut!(pair.1);\n+    pair = (1, false);\n+    unsafe {\n+        *ptr = true;\n+    }\n+    let ret = !pair.1;\n+    return ret;\n+}\n+\n+pub fn main() {\n+    println!(\"{}\", fn0());\n+}"}, {"sha": "a5f52d08957c8fb2bcd507b8edea6d68b488c534", "filename": "tests/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -19,8 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n--         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-+         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+          _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n           StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n           _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22"}, {"sha": "42ddc2a56208a82e57a2eb289186c65e4ee82012", "filename": "tests/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -16,8 +16,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n--         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-+         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+          _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n           _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n           (*_2) = const 5_i32;             // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +2:18"}, {"sha": "761c074ed94508e09b761fac4d3cf5d1f6a0d975", "filename": "tests/mir-opt/dead-store-elimination/place_mention.main.DeadStoreElimination.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.main.DeadStoreElimination.diff?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `main` before DeadStoreElimination\n++ // MIR for `main` after DeadStoreElimination\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/place_mention.rs:+0:11: +0:11\n+      let mut _1: (&str, &str);            // in scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+          _1 = (const \"Hello\", const \"World\"); // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+                                           // mir::Constant\n+                                           // + span: $DIR/place_mention.rs:8:19: 8:26\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+                                           // mir::Constant\n+                                           // + span: $DIR/place_mention.rs:8:28: 8:35\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+          PlaceMention(_1);                // scope 0 at $DIR/place_mention.rs:+3:18: +3:36\n+          StorageDead(_1);                 // scope 0 at $DIR/place_mention.rs:+3:36: +3:37\n+          _0 = const ();                   // scope 0 at $DIR/place_mention.rs:+0:11: +4:2\n+          return;                          // scope 0 at $DIR/place_mention.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "59dc74454a40218b8c7925374832969404f7ba98", "filename": "tests/mir-opt/dead-store-elimination/place_mention.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdead-store-elimination%2Fplace_mention.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,9 @@\n+// unit-test: DeadStoreElimination\n+// compile-flags: -Zmir-keep-place-mention\n+\n+// EMIT_MIR place_mention.main.DeadStoreElimination.diff\n+fn main() {\n+    // Verify that we account for the `PlaceMention` statement as a use of the tuple,\n+    // and don't remove it as a dead store.\n+    let (_, _) = (\"Hello\", \"World\");\n+}"}, {"sha": "b8e0e9483cd9c514ffb13dfff8683b56680d218b", "filename": "tests/run-make/c-unwind-abi-catch-lib-panic/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fc-unwind-abi-catch-lib-panic%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all: archive"}, {"sha": "1760ddb30616f24d6e947416b7969acda3e4cf0f", "filename": "tests/run-make/c-unwind-abi-catch-panic/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fc-unwind-abi-catch-panic%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all: $(call NATIVE_STATICLIB,add)"}, {"sha": "6d72c1227230384d742e3f789574700b5ee5fc62", "filename": "tests/run-make/const_fn_mir/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fconst_fn_mir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fconst_fn_mir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fconst_fn_mir%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,3 +1,4 @@\n+# needs-unwind -Cpanic=abort gives different MIR output\n include ../tools.mk\n \n all:"}, {"sha": "4501459e9d1d828e3474d778995d42f7bc76326b", "filename": "tests/run-make/debug-assertions/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fdebug-assertions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fdebug-assertions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fdebug-assertions%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all:"}, {"sha": "b5e52808d2fc572f6e48a8a0a79f7d2face65cbb", "filename": "tests/run-make/foreign-double-unwind/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fforeign-double-unwind%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fforeign-double-unwind%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-double-unwind%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all: foo"}, {"sha": "56c41b274fb2ee9d9bc2f0ce5d5affc20e7431fa", "filename": "tests/run-make/foreign-exceptions/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fforeign-exceptions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fforeign-exceptions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-exceptions%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all: foo"}, {"sha": "59cee2842004e40ea091914f76b96ec92eb95439", "filename": "tests/run-make/foreign-rust-exceptions/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fforeign-rust-exceptions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fforeign-rust-exceptions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforeign-rust-exceptions%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,5 +1,6 @@\n # ignore-cross-compile\n # ignore-i686-pc-windows-gnu\n+# needs-unwind\n \n # This test doesn't work on 32-bit MinGW as cdylib has its own copy of unwinder\n # so cross-DLL unwinding does not work."}, {"sha": "c8bc7b5dd4a4c17b31b8b40ffb7353cbe6dd3439", "filename": "tests/run-make/libtest-json/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-json%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-json%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-json%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n # Test expected libtest's JSON output"}, {"sha": "d97cafccf1fd46163e53487af6f93dbc5f1c9d17", "filename": "tests/run-make/libtest-junit/Makefile", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-junit%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-junit%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,19 @@\n+# ignore-cross-compile\n+include ../tools.mk\n+\n+# Test expected libtest's junit output\n+\n+OUTPUT_FILE_DEFAULT := $(TMPDIR)/libtest-junit-output-default.xml\n+OUTPUT_FILE_STDOUT_SUCCESS := $(TMPDIR)/libtest-junit-output-stdout-success.xml\n+\n+all: f.rs validate_junit.py output-default.xml output-stdout-success.xml\n+\t$(RUSTC) --test f.rs\n+\tRUST_BACKTRACE=0 $(call RUN,f) -Z unstable-options --test-threads=1 --format=junit > $(OUTPUT_FILE_DEFAULT) || true\n+\tRUST_BACKTRACE=0 $(call RUN,f) -Z unstable-options --test-threads=1 --format=junit --show-output > $(OUTPUT_FILE_STDOUT_SUCCESS) || true\n+\n+\tcat $(OUTPUT_FILE_DEFAULT) | \"$(PYTHON)\" validate_junit.py\n+\tcat $(OUTPUT_FILE_STDOUT_SUCCESS) | \"$(PYTHON)\" validate_junit.py\n+\n+\t# Normalize the actual output and compare to expected output file\n+\tcat $(OUTPUT_FILE_DEFAULT) | sed 's/time=\"[0-9.]*\"/time=\"$$TIME\"/g' | diff output-default.xml -\n+\tcat $(OUTPUT_FILE_STDOUT_SUCCESS) | sed 's/time=\"[0-9.]*\"/time=\"$$TIME\"/g' | diff output-stdout-success.xml -"}, {"sha": "d360d77317d78543451ababb0f5ff3297883b14e", "filename": "tests/run-make/libtest-junit/f.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-junit%2Ff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-junit%2Ff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Ff.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,23 @@\n+#[test]\n+fn a() {\n+    println!(\"print from successful test\");\n+    // Should pass\n+}\n+\n+#[test]\n+fn b() {\n+    println!(\"print from failing test\");\n+    assert!(false);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn c() {\n+    assert!(false);\n+}\n+\n+#[test]\n+#[ignore = \"msg\"]\n+fn d() {\n+    assert!(false);\n+}"}, {"sha": "d59e07b8ad89db255369254be0586328ddd0ce24", "filename": "tests/run-make/libtest-junit/output-default.xml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"test\" package=\"test\" id=\"0\" errors=\"0\" failures=\"1\" tests=\"4\" skipped=\"1\" ><testcase classname=\"unknown\" name=\"a\" time=\"$TIME\"/><testcase classname=\"unknown\" name=\"b\" time=\"$TIME\"><failure type=\"assert\"/><system-out><![CDATA[print from failing test]]>&#xA;<![CDATA[thread 'b' panicked at 'assertion failed: false', f.rs:10:5]]>&#xA;<![CDATA[note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"c\" time=\"$TIME\"/><system-out/><system-err/></testsuite></testsuites>"}, {"sha": "0c300611e1f76c1fd71957f51c4f24af77b636bb", "filename": "tests/run-make/libtest-junit/output-stdout-success.xml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"test\" package=\"test\" id=\"0\" errors=\"0\" failures=\"1\" tests=\"4\" skipped=\"1\" ><testcase classname=\"unknown\" name=\"a\" time=\"$TIME\"><system-out><![CDATA[print from successful test]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"b\" time=\"$TIME\"><failure type=\"assert\"/><system-out><![CDATA[print from failing test]]>&#xA;<![CDATA[thread 'b' panicked at 'assertion failed: false', f.rs:10:5]]>&#xA;<![CDATA[note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"c\" time=\"$TIME\"><system-out><![CDATA[thread 'c' panicked at 'assertion failed: false', f.rs:16:5]]>&#xA;<![CDATA[]]></system-out></testcase><system-out/><system-err/></testsuite></testsuites>"}, {"sha": "47a8e70ccc38c522fceecd99c899d0a875f6fa7f", "filename": "tests/run-make/libtest-junit/validate_junit.py", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-junit%2Fvalidate_junit.py", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Flibtest-junit%2Fvalidate_junit.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Fvalidate_junit.py?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,12 @@\n+#!/usr/bin/env python\n+\n+import sys\n+import xml.etree.ElementTree as ET\n+\n+# Try to decode line in order to ensure it is a valid XML document\n+for line in sys.stdin:\n+    try:\n+        ET.fromstring(line)\n+    except ET.ParseError as pe:\n+        print(\"Invalid xml: %r\" % line)\n+        raise"}, {"sha": "4b093f936086c02bf0ebe90af70ad3ef383c85aa", "filename": "tests/run-make/static-unwinding/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fstatic-unwinding%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Fstatic-unwinding%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstatic-unwinding%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,4 +1,5 @@\n # ignore-cross-compile\n+# needs-unwind\n include ../tools.mk\n \n all:"}, {"sha": "11aed2e4c79a6564b2772e0e1e7327d6ab8b52a5", "filename": "tests/run-make/test-benches/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Ftest-benches%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frun-make%2Ftest-benches%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Ftest-benches%2FMakefile?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,6 +1,7 @@\n include ../tools.mk\n \n # ignore-cross-compile\n+# needs-unwind #[bench] and -Zpanic-abort-tests can't be combined\n \n all:\n \t# Smoke-test that `#[bench]` isn't entirely broken."}, {"sha": "5d1b83b35c5ee16b4cca2e2d43b3cf6e172677fe", "filename": "tests/rustdoc-gui/search-corrections.goml", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frustdoc-gui%2Fsearch-corrections.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frustdoc-gui%2Fsearch-corrections.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-corrections.goml?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -0,0 +1,56 @@\n+// ignore-tidy-linelength\n+\n+// Checks that the search tab result tell the user about corrections\n+// First, try a search-by-name\n+go-to: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+// Intentionally wrong spelling of \"NotableStructWithLongName\"\n+write: (\".search-input\", \"NotableStructWithLongNamr\")\n+// To be SURE that the search will be run.\n+press-key: 'Enter'\n+// Waiting for the search results to appear...\n+wait-for: \"#search-tabs\"\n+\n+// Corrections aren't shown on the \"In Names\" tab.\n+assert: \"#search-tabs button.selected:first-child\"\n+assert-css: (\".search-corrections\", {\n+    \"display\": \"none\"\n+})\n+\n+// Corrections do get shown on the \"In Parameters\" tab.\n+click: \"#search-tabs button:nth-child(2)\"\n+assert: \"#search-tabs button.selected:nth-child(2)\"\n+assert-css: (\".search-corrections\", {\n+    \"display\": \"block\"\n+})\n+assert-text: (\n+    \".search-corrections\",\n+    \"Type \\\"notablestructwithlongnamr\\\" not found. Showing results for closest type name \\\"notablestructwithlongname\\\" instead.\"\n+)\n+\n+// Corrections do get shown on the \"In Return Type\" tab.\n+click: \"#search-tabs button:nth-child(3)\"\n+assert: \"#search-tabs button.selected:nth-child(3)\"\n+assert-css: (\".search-corrections\", {\n+    \"display\": \"block\"\n+})\n+assert-text: (\n+    \".search-corrections\",\n+    \"Type \\\"notablestructwithlongnamr\\\" not found. Showing results for closest type name \\\"notablestructwithlongname\\\" instead.\"\n+)\n+\n+// Now, explicit return values\n+go-to: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+// Intentionally wrong spelling of \"NotableStructWithLongName\"\n+write: (\".search-input\", \"-> NotableStructWithLongNamr\")\n+// To be SURE that the search will be run.\n+press-key: 'Enter'\n+// Waiting for the search results to appear...\n+wait-for: \"#search-tabs\"\n+\n+assert-css: (\".search-corrections\", {\n+    \"display\": \"block\"\n+})\n+assert-text: (\n+    \".search-corrections\",\n+    \"Type \\\"notablestructwithlongnamr\\\" not found. Showing results for closest type name \\\"notablestructwithlongname\\\" instead.\"\n+)"}, {"sha": "0e84751603ed678700865f542cae255690b55162", "filename": "tests/rustdoc-js/generics-trait.js", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frustdoc-js%2Fgenerics-trait.js", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Frustdoc-js%2Fgenerics-trait.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics-trait.js?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -1,9 +1,21 @@\n+// exact-check\n+\n const QUERY = [\n     'Result<SomeTrait>',\n+    'Result<SomeTraiz>',\n+    'OtherThingxxxxxxxx',\n+    'OtherThingxxxxxxxy',\n+];\n+\n+const CORRECTIONS = [\n+    null,\n+    null,\n+    null,\n     'OtherThingxxxxxxxx',\n ];\n \n const EXPECTED = [\n+    // Result<SomeTrait>\n     {\n         'in_args': [\n             { 'path': 'generics_trait', 'name': 'beta' },\n@@ -12,6 +24,21 @@ const EXPECTED = [\n             { 'path': 'generics_trait', 'name': 'bet' },\n         ],\n     },\n+    // Result<SomeTraiz>\n+    {\n+        'in_args': [],\n+        'returned': [],\n+    },\n+    // OtherThingxxxxxxxx\n+    {\n+        'in_args': [\n+            { 'path': 'generics_trait', 'name': 'alpha' },\n+        ],\n+        'returned': [\n+            { 'path': 'generics_trait', 'name': 'alef' },\n+        ],\n+    },\n+    // OtherThingxxxxxxxy\n     {\n         'in_args': [\n             { 'path': 'generics_trait', 'name': 'alpha' },"}, {"sha": "1c376f59e5174a4d82654d5724de868e39e933e9", "filename": "tests/ui-fulldeps/deriving-encodable-decodable-box.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8", "patch": "@@ -1,34 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_imports)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_macros;\n-extern crate rustc_serialize;\n-\n-// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n-// files.\n-#[allow(unused_extern_crates)]\n-extern crate rustc_driver;\n-\n-use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n-use rustc_serialize::{Decodable, Encodable, Encoder};\n-\n-#[derive(Encodable, Decodable)]\n-struct A {\n-    foo: Box<[bool]>,\n-}\n-\n-fn main() {\n-    let obj = A { foo: Box::new([true, false]) };\n-\n-    let mut encoder = MemEncoder::new();\n-    obj.encode(&mut encoder);\n-    let data = encoder.finish();\n-\n-    let mut decoder = MemDecoder::new(&data, 0);\n-    let obj2 = A::decode(&mut decoder);\n-\n-    assert_eq!(obj.foo, obj2.foo);\n-}"}, {"sha": "844d40f2ecd6a4590500b18a1727df21d8dbbca9", "filename": "tests/ui-fulldeps/deriving-encodable-decodable-cell-refcell.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs?ref=9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8", "patch": "@@ -1,44 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_imports)]\n-// This briefly tests the capability of `Cell` and `RefCell` to implement the\n-// `Encodable` and `Decodable` traits via `#[derive(Encodable, Decodable)]`\n-#![feature(rustc_private)]\n-\n-extern crate rustc_macros;\n-extern crate rustc_serialize;\n-\n-// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n-// files.\n-#[allow(unused_extern_crates)]\n-extern crate rustc_driver;\n-\n-use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n-use rustc_serialize::{Decodable, Encodable, Encoder};\n-use std::cell::{Cell, RefCell};\n-\n-#[derive(Encodable, Decodable)]\n-struct A {\n-    baz: isize,\n-}\n-\n-#[derive(Encodable, Decodable)]\n-struct B {\n-    foo: Cell<bool>,\n-    bar: RefCell<A>,\n-}\n-\n-fn main() {\n-    let obj = B { foo: Cell::new(true), bar: RefCell::new(A { baz: 2 }) };\n-\n-    let mut encoder = MemEncoder::new();\n-    obj.encode(&mut encoder);\n-    let data = encoder.finish();\n-\n-    let mut decoder = MemDecoder::new(&data, 0);\n-    let obj2 = B::decode(&mut decoder);\n-\n-    assert_eq!(obj.foo.get(), obj2.foo.get());\n-    assert_eq!(obj.bar.borrow().baz, obj2.bar.borrow().baz);\n-}"}, {"sha": "309b5c4a03d57c3b3f0e1e95561720dc60129936", "filename": "tests/ui-fulldeps/issue-14021.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8/tests%2Fui-fulldeps%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8/tests%2Fui-fulldeps%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fissue-14021.rs?ref=9ce6cfb3db5f06d04ce1dc7a934fe065c3c409f8", "patch": "@@ -1,33 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_mut)]\n-#![allow(unused_imports)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_macros;\n-extern crate rustc_serialize;\n-\n-// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n-// files.\n-#[allow(unused_extern_crates)]\n-extern crate rustc_driver;\n-\n-use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n-use rustc_serialize::{Decodable, Encodable, Encoder};\n-\n-#[derive(Encodable, Decodable, PartialEq, Debug)]\n-struct UnitLikeStruct;\n-\n-pub fn main() {\n-    let obj = UnitLikeStruct;\n-\n-    let mut encoder = MemEncoder::new();\n-    obj.encode(&mut encoder);\n-    let data = encoder.finish();\n-\n-    let mut decoder = MemDecoder::new(&data, 0);\n-    let obj2 = UnitLikeStruct::decode(&mut decoder);\n-\n-    assert_eq!(obj, obj2);\n-}"}, {"sha": "0dccb633df9837644be6cee697155eead81c7057", "filename": "tests/ui/abi/stack-probes-lto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fabi%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fabi%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabi%2Fstack-probes-lto.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -5,6 +5,7 @@\n // ignore-mips64\n // ignore-sparc\n // ignore-sparc64\n+// ignore-loongarch64\n // ignore-wasm\n // ignore-emscripten no processes\n // ignore-sgx no processes"}, {"sha": "8137c92304d83920b5eb147e1202b8b938ec8eea", "filename": "tests/ui/abi/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabi%2Fstack-probes.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -5,6 +5,7 @@\n // ignore-mips64\n // ignore-sparc\n // ignore-sparc64\n+// ignore-loongarch64\n // ignore-wasm\n // ignore-emscripten no processes\n // ignore-sgx no processes"}, {"sha": "e59e06f801b78fcd296d0a31cfe09947b20218c7", "filename": "tests/ui/cfg/conditional-compile-arch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fcfg%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fcfg%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fconditional-compile-arch.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -39,3 +39,6 @@ pub fn main() { }\n \n #[cfg(target_arch = \"riscv64\")]\n pub fn main() { }\n+\n+#[cfg(target_arch = \"loongarch64\")]\n+pub fn main() { }"}, {"sha": "3a7f3cd0ba00cd757efae8da2c8415e0dfe3cb8a", "filename": "tests/ui/const-generics/generic_const_exprs/cross_crate_predicate.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -8,6 +8,9 @@ LL |     let _ = const_evaluatable_lib::test1::<T>();\n note: required by a bound in `test1`\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n+LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n+   |        ----- required by a bound in this function\n+LL | where\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n \n@@ -34,6 +37,9 @@ LL |     let _ = const_evaluatable_lib::test1::<T>();\n note: required by a bound in `test1`\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n+LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n+   |        ----- required by a bound in this function\n+LL | where\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n "}, {"sha": "18a99398622cacbe5b57b46a9cb84d76a7c3a097", "filename": "tests/ui/const-generics/generic_const_exprs/nested_uneval_unification-2.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -2,28 +2,30 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features, unused_parens, unused_braces)]\n \n-fn zero_init<const N: usize>() -> Substs1<{ (N) }>\n+fn zero_init<const N: usize>() -> Substs1<{{ N }}>\n where\n-    [u8; { (N) }]: ,\n+    [u8; {{ N }}]: ,\n {\n-    Substs1([0; { (N) }])\n+    Substs1([0; {{ N }}])\n }\n \n-struct Substs1<const N: usize>([u8; { (N) }])\n+struct Substs1<const N: usize>([u8; {{ N }}])\n where\n-    [(); { (N) }]: ;\n+    [(); {{ N }}]: ;\n \n-fn substs2<const M: usize>() -> Substs1<{ (M) }> {\n-    zero_init::<{ (M) }>()\n+fn substs2<const M: usize>() -> Substs1<{{ M }}> {\n+    zero_init::<{{ M }}>()\n }\n \n-fn substs3<const L: usize>() -> Substs1<{ (L) }> {\n-    substs2::<{ (L) }>()\n+fn substs3<const L: usize>() -> Substs1<{{ L }}> {\n+    substs2::<{{ L }}>()\n }\n \n fn main() {\n     assert_eq!(substs3::<2>().0, [0; 2]);\n }\n \n-// Test that the implicit ``{ (L) }`` bound on ``substs3`` satisfies the\n-// ``{ (N) }`` bound on ``Substs1``\n+// Test that the implicit ``{{ L }}`` bound on ``substs3`` satisfies the\n+// ``{{ N }}`` bound on ``Substs1``\n+// FIXME(generic_const_exprs): come up with a less brittle test for this using assoc consts\n+// once normalization is implemented for them."}, {"sha": "cd1607608a6e96d89e1453744b9a65e3ff805409", "filename": "tests/ui/const-generics/sneaky-array-repeat-expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -10,6 +10,7 @@ impl<const N: usize> Trait<N> for () {\n pub const fn foo<const N: usize>() where (): Trait<N> {\n     let bar = [(); <()>::Assoc];\n     //~^ error: constant expression depends on a generic parameter\n+    //~| error: constant expression depends on a generic parameter\n }\n \n trait Trait2<const N: usize> {\n@@ -24,6 +25,7 @@ impl<const N: usize> Trait2<N> for () {\n pub const fn foo2<const N: usize>() where (): Trait2<N> {\n     let bar2 = [(); <()>::Assoc2];\n     //~^ error: constant expression depends on a generic parameter\n+    //~| error: constant expression depends on a generic parameter\n }\n \n fn main() {"}, {"sha": "e532f27a10da9af028960f7f2e6d3b971fed84b7", "filename": "tests/ui/const-generics/sneaky-array-repeat-expr.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4062fe2bd92300081a9c3232475a785181c99258/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr?ref=4062fe2bd92300081a9c3232475a785181c99258", "patch": "@@ -7,12 +7,28 @@ LL |     let bar = [(); <()>::Assoc];\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/sneaky-array-repeat-expr.rs:25:21\n+  --> $DIR/sneaky-array-repeat-expr.rs:11:15\n+   |\n+LL |     let bar = [(); <()>::Assoc];\n+   |               ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/sneaky-array-repeat-expr.rs:26:21\n    |\n LL |     let bar2 = [(); <()>::Assoc2];\n    |                     ^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to 2 previous errors\n+error: constant expression depends on a generic parameter\n+  --> $DIR/sneaky-array-repeat-expr.rs:26:16\n+   |\n+LL |     let bar2 = [(); <()>::Assoc2];\n+   |                ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 4 previous errors\n "}]}