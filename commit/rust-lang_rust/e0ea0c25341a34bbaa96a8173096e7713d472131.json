{"sha": "e0ea0c25341a34bbaa96a8173096e7713d472131", "node_id": "C_kwDOAAsO6NoAKGUwZWEwYzI1MzQxYTM0YmJhYTk2YTgxNzMwOTZlNzcxM2Q0NzIxMzE", "commit": {"author": {"name": "Jiahao XU", "email": "Jiahao_XU@outlook.com", "date": "2022-06-22T12:43:54Z"}, "committer": {"name": "Jiahao XU", "email": "Jiahao_XU@outlook.com", "date": "2022-06-22T12:44:30Z"}, "message": "Add new unstable API `Error::try_downgrade_inner`\n\nSigned-off-by: Jiahao XU <Jiahao_XU@outlook.com>", "tree": {"sha": "9ed2d0ebe234281fe8e9883f67466165d9ee9ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ed2d0ebe234281fe8e9883f67466165d9ee9ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ea0c25341a34bbaa96a8173096e7713d472131", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEE+UH+0gCgmS2CS1eIWRwLAwQEFtYFAmKzDq8WHGppYWhhb194\ndUBvdXRsb29rLmNvbQAKCRBZHAsDBAQW1kFHEAC8XTyW4HFufjNfwwi+Sre81EhF\noW7JOcSD4xIDH/4tJr8tlY2lav80GpZIbbRU/AsN0Ko7sAHa/7L7rzbItLVOmAMP\nQwI/TPNNsvPdmMxzdeLrKyN8Yh4IPdcox7B0QVUW/586lE+Mt1WxMIR2LKkciID/\nP+UyoCAR4HxHwiTt1V7/nncqDKkHLl2jYHZ8LHeiRYqb91v3wrjF07nSi9CWaMZs\nkqk3ue1zOeDUsR0RCnBDigYpS0P9WCwlJM3bBH0USfpKCVg3i0l3xZj3NmzCK8Mh\n/ZW+gm+WM9UcrKCsy5lWwy1zddUr7kvAbDDL/laPoHZPvmVcioLsJdp6WEVIBT7r\nB3qlOEvj6fxBvCERZvtg/VwZjN3fL5DPQ8zIIHUfBj05CW9qM9UosfF095LBomu9\nVp4T+5R5NlPA/PRNDETDtcuDnUZL0HKZkncvHysO0sQmk/t9wrXoWOybrJJ/FwqV\nbEgZf50nWAJVme3eTD32IjN0Xe3HKOu/HjShw0wkLJBhoikWH4+zaftVF9als+Sb\nXfISyBuY53a+qYBm4hCXi/7m20uc4Tc66b1jLTJd0iwKmCGmUSfxZB4/XZK3k51X\nnNlIK2qNqnuGUo0gFd34wrvhQRwGiuZX4F7N1iJjY8kjGMMpJr341OBzmkIM+sSq\nNduNCx2jr7j6fmg7Kw==\n=BSfl\n-----END PGP SIGNATURE-----", "payload": "tree 9ed2d0ebe234281fe8e9883f67466165d9ee9ad6\nparent 1713e25a411c3854e85baa5fe076d5e3e8cffe35\nauthor Jiahao XU <Jiahao_XU@outlook.com> 1655901834 +1000\ncommitter Jiahao XU <Jiahao_XU@outlook.com> 1655901870 +1000\n\nAdd new unstable API `Error::try_downgrade_inner`\n\nSigned-off-by: Jiahao XU <Jiahao_XU@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ea0c25341a34bbaa96a8173096e7713d472131", "html_url": "https://github.com/rust-lang/rust/commit/e0ea0c25341a34bbaa96a8173096e7713d472131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ea0c25341a34bbaa96a8173096e7713d472131/comments", "author": {"login": "NobodyXu", "id": 30436523, "node_id": "MDQ6VXNlcjMwNDM2NTIz", "avatar_url": "https://avatars.githubusercontent.com/u/30436523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NobodyXu", "html_url": "https://github.com/NobodyXu", "followers_url": "https://api.github.com/users/NobodyXu/followers", "following_url": "https://api.github.com/users/NobodyXu/following{/other_user}", "gists_url": "https://api.github.com/users/NobodyXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NobodyXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NobodyXu/subscriptions", "organizations_url": "https://api.github.com/users/NobodyXu/orgs", "repos_url": "https://api.github.com/users/NobodyXu/repos", "events_url": "https://api.github.com/users/NobodyXu/events{/privacy}", "received_events_url": "https://api.github.com/users/NobodyXu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NobodyXu", "id": 30436523, "node_id": "MDQ6VXNlcjMwNDM2NTIz", "avatar_url": "https://avatars.githubusercontent.com/u/30436523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NobodyXu", "html_url": "https://github.com/NobodyXu", "followers_url": "https://api.github.com/users/NobodyXu/followers", "following_url": "https://api.github.com/users/NobodyXu/following{/other_user}", "gists_url": "https://api.github.com/users/NobodyXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NobodyXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NobodyXu/subscriptions", "organizations_url": "https://api.github.com/users/NobodyXu/orgs", "repos_url": "https://api.github.com/users/NobodyXu/repos", "events_url": "https://api.github.com/users/NobodyXu/events{/privacy}", "received_events_url": "https://api.github.com/users/NobodyXu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1713e25a411c3854e85baa5fe076d5e3e8cffe35", "url": "https://api.github.com/repos/rust-lang/rust/commits/1713e25a411c3854e85baa5fe076d5e3e8cffe35", "html_url": "https://github.com/rust-lang/rust/commit/1713e25a411c3854e85baa5fe076d5e3e8cffe35"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "b1931a522909a3ef25478bd9b352474a9a6b1561", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e0ea0c25341a34bbaa96a8173096e7713d472131/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ea0c25341a34bbaa96a8173096e7713d472131/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=e0ea0c25341a34bbaa96a8173096e7713d472131", "patch": "@@ -795,6 +795,63 @@ impl Error {\n         }\n     }\n \n+    /// Attempt to downgrade the inner error to `E` if any.\n+    ///\n+    /// If this [`Error`] was constructed via [`new`] then this function will\n+    /// attempt to perform downgrade on it, otherwise it will return [`Err`].\n+    ///\n+    /// If downgrade succeeds, it will return [`Ok`], otherwise it will also\n+    /// return [`Err`].\n+    ///\n+    /// [`new`]: Error::new\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(io_error_try_downcast_inner)]\n+    ///\n+    /// use std::fmt;\n+    /// use std::io;\n+    /// use std::error::Error;\n+    ///\n+    /// #[derive(Debug)]\n+    /// enum E {\n+    ///     Io(io::Error),\n+    ///     SomeOtherVariant,\n+    /// }\n+    ///\n+    /// impl fmt::Display for E {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         todo!()\n+    ///     }\n+    /// }\n+    /// impl Error for E {}\n+    ///\n+    /// impl From<io::Error> for E {\n+    ///     fn from(err: io::Error) -> E {\n+    ///         err.try_downcast_inner::<E>()\n+    ///             .map(|b| *b)\n+    ///             .unwrap_or_else(E::Io)\n+    ///     }\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"io_error_try_downcast_inner\", issue = \"none\")]\n+    pub fn try_downcast_inner<E>(self) -> result::Result<Box<E>, Self>\n+    where\n+        E: error::Error + Send + Sync + 'static,\n+    {\n+        match self.repr.into_data() {\n+            ErrorData::Custom(b) if b.error.is::<E>() => {\n+                let res = (*b).error.downcast::<E>();\n+\n+                // Safety: b.error.is::<E>() returns true,\n+                // which means that res must be Ok(e).\n+                Ok(unsafe { res.unwrap_unchecked() })\n+            }\n+            repr_data => Err(Self { repr: Repr::new(repr_data) }),\n+        }\n+    }\n+\n     /// Returns the corresponding [`ErrorKind`] for this error.\n     ///\n     /// # Examples"}]}