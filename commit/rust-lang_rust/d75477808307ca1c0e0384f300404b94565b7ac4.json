{"sha": "d75477808307ca1c0e0384f300404b94565b7ac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NTQ3NzgwODMwN2NhMWMwZTAzODRmMzAwNDA0Yjk0NTY1YjdhYzQ=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-11-20T18:14:13Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-12-14T17:28:19Z"}, "message": "Fix tuple and closure literals.", "tree": {"sha": "c1a465fa1c45699e402748512fd0ff6b52587dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1a465fa1c45699e402748512fd0ff6b52587dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d75477808307ca1c0e0384f300404b94565b7ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d75477808307ca1c0e0384f300404b94565b7ac4", "html_url": "https://github.com/rust-lang/rust/commit/d75477808307ca1c0e0384f300404b94565b7ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d75477808307ca1c0e0384f300404b94565b7ac4/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27469037d7dabe602e0f528dbb9791c44cc236b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/27469037d7dabe602e0f528dbb9791c44cc236b0", "html_url": "https://github.com/rust-lang/rust/commit/27469037d7dabe602e0f528dbb9791c44cc236b0"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "83e1d03c689abda4ebfd9b438fe4ee47a60f2fa9", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d75477808307ca1c0e0384f300404b94565b7ac4/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75477808307ca1c0e0384f300404b94565b7ac4/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=d75477808307ca1c0e0384f300404b94565b7ac4", "patch": "@@ -246,7 +246,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                          lldest: ValueRef,\n                          operand: OperandRef<'tcx>)\n     {\n-        debug!(\"store_operand: operand={:?}\", operand);\n+        debug!(\"store_operand: operand={:?} lldest={:?}\", operand, lldest);\n         bcx.with_block(|bcx| self.store_operand_direct(bcx, lldest, operand))\n     }\n "}, {"sha": "a89c61cd36a2b5da6f094437671794dc8344f25b", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d75477808307ca1c0e0384f300404b94565b7ac4/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75477808307ca1c0e0384f300404b94565b7ac4/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=d75477808307ca1c0e0384f300404b94565b7ac4", "patch": "@@ -133,13 +133,25 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         }\n                     },\n                     _ => {\n+                        // If this is a tuple or closure, we need to translate GEP indices.\n+                        let layout = bcx.ccx().layout_of(dest.ty.to_ty(bcx.tcx()));\n+                        let translation = if let Layout::Univariant { ref variant, .. } = *layout {\n+                            Some(&variant.gep_index)\n+                        } else {\n+                            None\n+                        };\n                         for (i, operand) in operands.iter().enumerate() {\n                             let op = self.trans_operand(&bcx, operand);\n                             // Do not generate stores and GEPis for zero-sized fields.\n                             if !common::type_is_zero_size(bcx.ccx(), op.ty) {\n                                 // Note: perhaps this should be StructGep, but\n                                 // note that in some cases the values here will\n                                 // not be structs but arrays.\n+                                let i = if let Some(ref t) = translation {\n+                                    t[i] as usize\n+                                } else {\n+                                    i\n+                                };\n                                 let dest = bcx.gepi(dest.llval, &[0, i]);\n                                 self.store_operand(&bcx, dest, op);\n                             }"}]}