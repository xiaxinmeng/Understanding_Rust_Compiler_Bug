{"sha": "210ac01792878ce0d654e852b0c794c782c04e01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMGFjMDE3OTI4NzhjZTBkNjU0ZTg1MmIwYzc5NGM3ODJjMDRlMDE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-04T01:12:04Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-04T01:12:04Z"}, "message": "rustc: use {U,I}size instead of {U,I}s shorthands.", "tree": {"sha": "cb1b48164d39475a3071c32fd56c42d6bbb3187e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb1b48164d39475a3071c32fd56c42d6bbb3187e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/210ac01792878ce0d654e852b0c794c782c04e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/210ac01792878ce0d654e852b0c794c782c04e01", "html_url": "https://github.com/rust-lang/rust/commit/210ac01792878ce0d654e852b0c794c782c04e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/210ac01792878ce0d654e852b0c794c782c04e01/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9599066dcbff6b78c97fed816cf183e1577acff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9599066dcbff6b78c97fed816cf183e1577acff2", "html_url": "https://github.com/rust-lang/rust/commit/9599066dcbff6b78c97fed816cf183e1577acff2"}], "stats": {"total": 185, "additions": 93, "deletions": 92}, "files": [{"sha": "c31a5c9d86d7763c19d554c1f2d7b4fd7aaf4a71", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -155,8 +155,8 @@ impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n     Bool(value)\n });\n \n-impl_stable_hash_for!(enum ::syntax::ast::IntTy { Is, I8, I16, I32, I64, I128 });\n-impl_stable_hash_for!(enum ::syntax::ast::UintTy { Us, U8, U16, U32, U64, U128 });\n+impl_stable_hash_for!(enum ::syntax::ast::IntTy { Isize, I8, I16, I32, I64, I128 });\n+impl_stable_hash_for!(enum ::syntax::ast::UintTy { Usize, U8, U16, U32, U64, U128 });\n impl_stable_hash_for!(enum ::syntax::ast::FloatTy { F32, F64 });\n impl_stable_hash_for!(enum ::syntax::ast::Unsafety { Unsafe, Normal });\n impl_stable_hash_for!(enum ::syntax::ast::Constness { Const, NotConst });"}, {"sha": "daecba9938c51419b601a234a573eaf6a850c2d0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -754,13 +754,13 @@ impl<'tcx> CommonTypes<'tcx> {\n             char: mk(TyChar),\n             never: mk(TyNever),\n             err: mk(TyError),\n-            isize: mk(TyInt(ast::IntTy::Is)),\n+            isize: mk(TyInt(ast::IntTy::Isize)),\n             i8: mk(TyInt(ast::IntTy::I8)),\n             i16: mk(TyInt(ast::IntTy::I16)),\n             i32: mk(TyInt(ast::IntTy::I32)),\n             i64: mk(TyInt(ast::IntTy::I64)),\n             i128: mk(TyInt(ast::IntTy::I128)),\n-            usize: mk(TyUint(ast::UintTy::Us)),\n+            usize: mk(TyUint(ast::UintTy::Usize)),\n             u8: mk(TyUint(ast::UintTy::U8)),\n             u16: mk(TyUint(ast::UintTy::U16)),\n             u32: mk(TyUint(ast::UintTy::U32)),\n@@ -1912,7 +1912,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn mk_mach_int(self, tm: ast::IntTy) -> Ty<'tcx> {\n         match tm {\n-            ast::IntTy::Is   => self.types.isize,\n+            ast::IntTy::Isize   => self.types.isize,\n             ast::IntTy::I8   => self.types.i8,\n             ast::IntTy::I16  => self.types.i16,\n             ast::IntTy::I32  => self.types.i32,\n@@ -1923,7 +1923,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn mk_mach_uint(self, tm: ast::UintTy) -> Ty<'tcx> {\n         match tm {\n-            ast::UintTy::Us   => self.types.usize,\n+            ast::UintTy::Usize   => self.types.usize,\n             ast::UintTy::U8   => self.types.u8,\n             ast::UintTy::U16  => self.types.u16,\n             ast::UintTy::U32  => self.types.u32,"}, {"sha": "34a7d4ad7cfd03b7bd951c832e2f6ec1aba7c08e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -520,7 +520,7 @@ impl<'a, 'tcx> Integer {\n             attr::SignedInt(IntTy::I32) | attr::UnsignedInt(UintTy::U32) => I32,\n             attr::SignedInt(IntTy::I64) | attr::UnsignedInt(UintTy::U64) => I64,\n             attr::SignedInt(IntTy::I128) | attr::UnsignedInt(UintTy::U128) => I128,\n-            attr::SignedInt(IntTy::Is) | attr::UnsignedInt(UintTy::Us) => {\n+            attr::SignedInt(IntTy::Isize) | attr::UnsignedInt(UintTy::Usize) => {\n                 dl.ptr_sized_integer()\n             }\n         }"}, {"sha": "e5f6ac88530675a762624255e708172d8cdc6241", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -1575,7 +1575,7 @@ impl ReprOptions {\n     pub fn linear(&self) -> bool { self.flags.contains(ReprFlags::IS_LINEAR) }\n \n     pub fn discr_type(&self) -> attr::IntType {\n-        self.int.unwrap_or(attr::SignedInt(ast::IntTy::Is))\n+        self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))\n     }\n \n     /// Returns true if this `#[repr()]` should inhabit \"smart enum"}, {"sha": "cf784b7cafb870513d35ee8de6195815a390b9dd", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -1505,7 +1505,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_machine(&self) -> bool {\n         match self.sty {\n-            TyInt(ast::IntTy::Is) | TyUint(ast::UintTy::Us) => false,\n+            TyInt(ast::IntTy::Isize) | TyUint(ast::UintTy::Usize) => false,\n             TyInt(..) | TyUint(..) | TyFloat(..) => true,\n             _ => false,\n         }"}, {"sha": "638859af0f7d3909f53143d7901d6a1dabf35157", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -55,7 +55,7 @@ macro_rules! typed_literal {\n             SignedInt(ast::IntTy::I32)   => ConstInt::I32($lit),\n             SignedInt(ast::IntTy::I64)   => ConstInt::I64($lit),\n             SignedInt(ast::IntTy::I128)   => ConstInt::I128($lit),\n-            SignedInt(ast::IntTy::Is) => match $tcx.sess.target.isize_ty {\n+            SignedInt(ast::IntTy::Isize) => match $tcx.sess.target.isize_ty {\n                 ast::IntTy::I16 => ConstInt::Isize(ConstIsize::Is16($lit)),\n                 ast::IntTy::I32 => ConstInt::Isize(ConstIsize::Is32($lit)),\n                 ast::IntTy::I64 => ConstInt::Isize(ConstIsize::Is64($lit)),\n@@ -66,7 +66,7 @@ macro_rules! typed_literal {\n             UnsignedInt(ast::UintTy::U32) => ConstInt::U32($lit),\n             UnsignedInt(ast::UintTy::U64) => ConstInt::U64($lit),\n             UnsignedInt(ast::UintTy::U128) => ConstInt::U128($lit),\n-            UnsignedInt(ast::UintTy::Us) => match $tcx.sess.target.usize_ty {\n+            UnsignedInt(ast::UintTy::Usize) => match $tcx.sess.target.usize_ty {\n                 ast::UintTy::U16 => ConstInt::Usize(ConstUsize::Us16($lit)),\n                 ast::UintTy::U32 => ConstInt::Usize(ConstUsize::Us32($lit)),\n                 ast::UintTy::U64 => ConstInt::Usize(ConstUsize::Us64($lit)),\n@@ -84,13 +84,13 @@ impl IntTypeExt for attr::IntType {\n             SignedInt(ast::IntTy::I32)     => tcx.types.i32,\n             SignedInt(ast::IntTy::I64)     => tcx.types.i64,\n             SignedInt(ast::IntTy::I128)     => tcx.types.i128,\n-            SignedInt(ast::IntTy::Is)   => tcx.types.isize,\n+            SignedInt(ast::IntTy::Isize)   => tcx.types.isize,\n             UnsignedInt(ast::UintTy::U8)    => tcx.types.u8,\n             UnsignedInt(ast::UintTy::U16)   => tcx.types.u16,\n             UnsignedInt(ast::UintTy::U32)   => tcx.types.u32,\n             UnsignedInt(ast::UintTy::U64)   => tcx.types.u64,\n             UnsignedInt(ast::UintTy::U128)   => tcx.types.u128,\n-            UnsignedInt(ast::UintTy::Us) => tcx.types.usize,\n+            UnsignedInt(ast::UintTy::Usize) => tcx.types.usize,\n         }\n     }\n \n@@ -105,13 +105,13 @@ impl IntTypeExt for attr::IntType {\n             (SignedInt(ast::IntTy::I32), ConstInt::I32(_)) => {},\n             (SignedInt(ast::IntTy::I64), ConstInt::I64(_)) => {},\n             (SignedInt(ast::IntTy::I128), ConstInt::I128(_)) => {},\n-            (SignedInt(ast::IntTy::Is), ConstInt::Isize(_)) => {},\n+            (SignedInt(ast::IntTy::Isize), ConstInt::Isize(_)) => {},\n             (UnsignedInt(ast::UintTy::U8), ConstInt::U8(_)) => {},\n             (UnsignedInt(ast::UintTy::U16), ConstInt::U16(_)) => {},\n             (UnsignedInt(ast::UintTy::U32), ConstInt::U32(_)) => {},\n             (UnsignedInt(ast::UintTy::U64), ConstInt::U64(_)) => {},\n             (UnsignedInt(ast::UintTy::U128), ConstInt::U128(_)) => {},\n-            (UnsignedInt(ast::UintTy::Us), ConstInt::Usize(_)) => {},\n+            (UnsignedInt(ast::UintTy::Usize), ConstInt::Usize(_)) => {},\n             _ => bug!(\"disr type mismatch: {:?} vs {:?}\", self, val),\n         }\n     }"}, {"sha": "418bd4b5effc6b08ba01d3a50dc4e4313fbad51a", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -133,8 +133,8 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n                 (&LitKind::Int(I128_OVERFLOW, Signed(IntTy::I128)), _) => {\n                     Some(I128(i128::min_value()))\n                 },\n-                (&LitKind::Int(n, _), &ty::TyInt(IntTy::Is)) |\n-                (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n+                (&LitKind::Int(n, _), &ty::TyInt(IntTy::Isize)) |\n+                (&LitKind::Int(n, Signed(IntTy::Isize)), _) => {\n                     match tcx.sess.target.isize_ty {\n                         IntTy::I16 => if n == I16_OVERFLOW {\n                             Some(Isize(Is16(i16::min_value())))\n@@ -478,15 +478,15 @@ fn cast_const_int<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::TyInt(ast::IntTy::I32) => Ok(Integral(I32(v as i128 as i32))),\n         ty::TyInt(ast::IntTy::I64) => Ok(Integral(I64(v as i128 as i64))),\n         ty::TyInt(ast::IntTy::I128) => Ok(Integral(I128(v as i128))),\n-        ty::TyInt(ast::IntTy::Is) => {\n+        ty::TyInt(ast::IntTy::Isize) => {\n             Ok(Integral(Isize(ConstIsize::new_truncating(v as i128, tcx.sess.target.isize_ty))))\n         },\n         ty::TyUint(ast::UintTy::U8) => Ok(Integral(U8(v as u8))),\n         ty::TyUint(ast::UintTy::U16) => Ok(Integral(U16(v as u16))),\n         ty::TyUint(ast::UintTy::U32) => Ok(Integral(U32(v as u32))),\n         ty::TyUint(ast::UintTy::U64) => Ok(Integral(U64(v as u64))),\n         ty::TyUint(ast::UintTy::U128) => Ok(Integral(U128(v as u128))),\n-        ty::TyUint(ast::UintTy::Us) => {\n+        ty::TyUint(ast::UintTy::Usize) => {\n             Ok(Integral(Usize(ConstUsize::new_truncating(v, tcx.sess.target.usize_ty))))\n         },\n         ty::TyFloat(fty) => {"}, {"sha": "bd0a332436e6427c945ed803ff270e88da5487be", "filename": "src/librustc_const_math/err.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_math%2Ferr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_math%2Ferr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Ferr.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -75,13 +75,13 @@ impl ConstMathErr {\n             ULitOutOfRange(ast::UintTy::U32) => \"literal out of range for u32\",\n             ULitOutOfRange(ast::UintTy::U64) => \"literal out of range for u64\",\n             ULitOutOfRange(ast::UintTy::U128) => \"literal out of range for u128\",\n-            ULitOutOfRange(ast::UintTy::Us) => \"literal out of range for usize\",\n+            ULitOutOfRange(ast::UintTy::Usize) => \"literal out of range for usize\",\n             LitOutOfRange(ast::IntTy::I8) => \"literal out of range for i8\",\n             LitOutOfRange(ast::IntTy::I16) => \"literal out of range for i16\",\n             LitOutOfRange(ast::IntTy::I32) => \"literal out of range for i32\",\n             LitOutOfRange(ast::IntTy::I64) => \"literal out of range for i64\",\n             LitOutOfRange(ast::IntTy::I128) => \"literal out of range for i128\",\n-            LitOutOfRange(ast::IntTy::Is) => \"literal out of range for isize\",\n+            LitOutOfRange(ast::IntTy::Isize) => \"literal out of range for isize\",\n         }\n     }\n }"}, {"sha": "4ec27d7ade560ce620f5560d429a134cff929e52", "filename": "src/librustc_const_math/int.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_math%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_math%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fint.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -12,8 +12,8 @@ use std::cmp::Ordering;\n use syntax::attr::IntType;\n use syntax::ast::{IntTy, UintTy};\n \n-use super::is::*;\n-use super::us::*;\n+use super::isize::*;\n+use super::usize::*;\n use super::err::*;\n \n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable, Hash, Eq, PartialEq)]\n@@ -83,7 +83,7 @@ impl ConstInt {\n             UintTy::U16 if val <= ubounds::U16MAX => Some(U16(val as u16)),\n             UintTy::U32 if val <= ubounds::U32MAX => Some(U32(val as u32)),\n             UintTy::U64 if val <= ubounds::U64MAX => Some(U64(val as u64)),\n-            UintTy::Us if val <= ubounds::U64MAX => ConstUsize::new(val as u64, usize_ty).ok()\n+            UintTy::Usize if val <= ubounds::U64MAX => ConstUsize::new(val as u64, usize_ty).ok()\n                 .map(Usize),\n             UintTy::U128 => Some(U128(val)),\n             _ => None\n@@ -98,7 +98,7 @@ impl ConstInt {\n             IntTy::I16 if val <= ibounds::I16MAX => Some(I16(val as i16)),\n             IntTy::I32 if val <= ibounds::I32MAX => Some(I32(val as i32)),\n             IntTy::I64 if val <= ibounds::I64MAX => Some(I64(val as i64)),\n-            IntTy::Is if val <= ibounds::I64MAX => ConstIsize::new(val as i64, isize_ty).ok()\n+            IntTy::Isize if val <= ibounds::I64MAX => ConstIsize::new(val as i64, isize_ty).ok()\n                 .map(Isize),\n             IntTy::I128 => Some(I128(val)),\n             _ => None\n@@ -112,7 +112,7 @@ impl ConstInt {\n             UintTy::U16 => U16(val as u16),\n             UintTy::U32 => U32(val as u32),\n             UintTy::U64 => U64(val as u64),\n-            UintTy::Us => Usize(ConstUsize::new_truncating(val, usize_ty)),\n+            UintTy::Usize => Usize(ConstUsize::new_truncating(val, usize_ty)),\n             UintTy::U128 => U128(val)\n         }\n     }\n@@ -124,7 +124,7 @@ impl ConstInt {\n             IntTy::I16 => I16(val as i16),\n             IntTy::I32 => I32(val as i32),\n             IntTy::I64 => I64(val as i64),\n-            IntTy::Is => Isize(ConstIsize::new_truncating(val, isize_ty)),\n+            IntTy::Isize => Isize(ConstIsize::new_truncating(val, isize_ty)),\n             IntTy::I128 => I128(val)\n         }\n     }\n@@ -280,13 +280,13 @@ impl ConstInt {\n             ConstInt::I32(_) => IntType::SignedInt(IntTy::I32),\n             ConstInt::I64(_) => IntType::SignedInt(IntTy::I64),\n             ConstInt::I128(_) => IntType::SignedInt(IntTy::I128),\n-            ConstInt::Isize(_) => IntType::SignedInt(IntTy::Is),\n+            ConstInt::Isize(_) => IntType::SignedInt(IntTy::Isize),\n             ConstInt::U8(_) => IntType::UnsignedInt(UintTy::U8),\n             ConstInt::U16(_) => IntType::UnsignedInt(UintTy::U16),\n             ConstInt::U32(_) => IntType::UnsignedInt(UintTy::U32),\n             ConstInt::U64(_) => IntType::UnsignedInt(UintTy::U64),\n             ConstInt::U128(_) => IntType::UnsignedInt(UintTy::U128),\n-            ConstInt::Usize(_) => IntType::UnsignedInt(UintTy::Us),\n+            ConstInt::Usize(_) => IntType::UnsignedInt(UintTy::Usize),\n         }\n     }\n }"}, {"sha": "18acc782775d8adb2b2c6c0f6755782ae5282548", "filename": "src/librustc_const_math/isize.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_math%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_math%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fisize.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -38,9 +38,9 @@ impl ConstIsize {\n     pub fn new(i: i64, isize_ty: ast::IntTy) -> Result<Self, ConstMathErr> {\n         match isize_ty {\n             ast::IntTy::I16 if i as i16 as i64 == i => Ok(Is16(i as i16)),\n-            ast::IntTy::I16 => Err(LitOutOfRange(ast::IntTy::Is)),\n+            ast::IntTy::I16 => Err(LitOutOfRange(ast::IntTy::Isize)),\n             ast::IntTy::I32 if i as i32 as i64 == i => Ok(Is32(i as i32)),\n-            ast::IntTy::I32 => Err(LitOutOfRange(ast::IntTy::Is)),\n+            ast::IntTy::I32 => Err(LitOutOfRange(ast::IntTy::Isize)),\n             ast::IntTy::I64 => Ok(Is64(i)),\n             _ => unreachable!(),\n         }", "previous_filename": "src/librustc_const_math/is.rs"}, {"sha": "2d98bc48d28163acc6aab2eb4ecb4ad305855de9", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -30,12 +30,12 @@ extern crate serialize as rustc_serialize; // used by deriving\n \n mod float;\n mod int;\n-mod us;\n-mod is;\n+mod usize;\n+mod isize;\n mod err;\n \n pub use float::*;\n pub use int::*;\n-pub use us::*;\n-pub use is::*;\n+pub use usize::*;\n+pub use isize::*;\n pub use err::{ConstMathErr, Op};"}, {"sha": "56995f08f05b855d9c339baffbb8d9a8a6cb1c5e", "filename": "src/librustc_const_math/usize.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_math%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_const_math%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fusize.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -38,9 +38,9 @@ impl ConstUsize {\n     pub fn new(i: u64, usize_ty: ast::UintTy) -> Result<Self, ConstMathErr> {\n         match usize_ty {\n             ast::UintTy::U16 if i as u16 as u64 == i => Ok(Us16(i as u16)),\n-            ast::UintTy::U16 => Err(ULitOutOfRange(ast::UintTy::Us)),\n+            ast::UintTy::U16 => Err(ULitOutOfRange(ast::UintTy::Usize)),\n             ast::UintTy::U32 if i as u32 as u64 == i => Ok(Us32(i as u32)),\n-            ast::UintTy::U32 => Err(ULitOutOfRange(ast::UintTy::Us)),\n+            ast::UintTy::U32 => Err(ULitOutOfRange(ast::UintTy::Usize)),\n             ast::UintTy::U64 => Ok(Us64(i)),\n             _ => unreachable!(),\n         }", "previous_filename": "src/librustc_const_math/us.rs"}, {"sha": "5456b0d252b67283931c4d6a7d700671074303f2", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -140,7 +140,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                         match lit.node {\n                             ast::LitKind::Int(v, ast::LitIntType::Signed(_)) |\n                             ast::LitKind::Int(v, ast::LitIntType::Unsuffixed) => {\n-                                let int_type = if let ast::IntTy::Is = t {\n+                                let int_type = if let ast::IntTy::Isize = t {\n                                     cx.sess().target.isize_ty\n                                 } else {\n                                     t\n@@ -163,7 +163,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                         };\n                     }\n                     ty::TyUint(t) => {\n-                        let uint_type = if let ast::UintTy::Us = t {\n+                        let uint_type = if let ast::UintTy::Usize = t {\n                             cx.sess().target.usize_ty\n                         } else {\n                             t\n@@ -230,7 +230,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         // warnings are consistent between 32- and 64-bit platforms\n         fn int_ty_range(int_ty: ast::IntTy) -> (i128, i128) {\n             match int_ty {\n-                ast::IntTy::Is => (i64::min_value() as i128, i64::max_value() as i128),\n+                ast::IntTy::Isize => (i64::min_value() as i128, i64::max_value() as i128),\n                 ast::IntTy::I8 => (i8::min_value() as i64 as i128, i8::max_value() as i128),\n                 ast::IntTy::I16 => (i16::min_value() as i64 as i128, i16::max_value() as i128),\n                 ast::IntTy::I32 => (i32::min_value() as i64 as i128, i32::max_value() as i128),\n@@ -241,7 +241,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n \n         fn uint_ty_range(uint_ty: ast::UintTy) -> (u128, u128) {\n             match uint_ty {\n-                ast::UintTy::Us => (u64::min_value() as u128, u64::max_value() as u128),\n+                ast::UintTy::Usize => (u64::min_value() as u128, u64::max_value() as u128),\n                 ast::UintTy::U8 => (u8::min_value() as u128, u8::max_value() as u128),\n                 ast::UintTy::U16 => (u16::min_value() as u128, u16::max_value() as u128),\n                 ast::UintTy::U32 => (u32::min_value() as u128, u32::max_value() as u128),\n@@ -252,7 +252,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n \n         fn int_ty_bits(int_ty: ast::IntTy, isize_ty: ast::IntTy) -> u64 {\n             match int_ty {\n-                ast::IntTy::Is => int_ty_bits(isize_ty, isize_ty),\n+                ast::IntTy::Isize => int_ty_bits(isize_ty, isize_ty),\n                 ast::IntTy::I8 => 8,\n                 ast::IntTy::I16 => 16 as u64,\n                 ast::IntTy::I32 => 32,\n@@ -263,7 +263,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n \n         fn uint_ty_bits(uint_ty: ast::UintTy, usize_ty: ast::UintTy) -> u64 {\n             match uint_ty {\n-                ast::UintTy::Us => uint_ty_bits(usize_ty, usize_ty),\n+                ast::UintTy::Usize => uint_ty_bits(usize_ty, usize_ty),\n                 ast::UintTy::U8 => 8,\n                 ast::UintTy::U16 => 16,\n                 ast::UintTy::U32 => 32,\n@@ -387,7 +387,7 @@ fn is_ffi_safe(ty: attr::IntType) -> bool {\n         attr::SignedInt(ast::IntTy::I32) | attr::UnsignedInt(ast::UintTy::U32) |\n         attr::SignedInt(ast::IntTy::I64) | attr::UnsignedInt(ast::UintTy::U64) |\n         attr::SignedInt(ast::IntTy::I128) | attr::UnsignedInt(ast::UintTy::U128) => true,\n-        attr::SignedInt(ast::IntTy::Is) | attr::UnsignedInt(ast::UintTy::Us) => false\n+        attr::SignedInt(ast::IntTy::Isize) | attr::UnsignedInt(ast::UintTy::Usize) => false\n     }\n }\n "}, {"sha": "d3cc952759058981826a5f504714aac17437967f", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -392,7 +392,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ast::IntTy::I32 => ConstInt::I32(-1),\n                     ast::IntTy::I64 => ConstInt::I64(-1),\n                     ast::IntTy::I128 => ConstInt::I128(-1),\n-                    ast::IntTy::Is => {\n+                    ast::IntTy::Isize => {\n                         let int_ty = self.hir.tcx().sess.target.isize_ty;\n                         let val = ConstIsize::new(-1, int_ty).unwrap();\n                         ConstInt::Isize(val)\n@@ -424,7 +424,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ast::IntTy::I32 => ConstInt::I32(i32::min_value()),\n                     ast::IntTy::I64 => ConstInt::I64(i64::min_value()),\n                     ast::IntTy::I128 => ConstInt::I128(i128::min_value()),\n-                    ast::IntTy::Is => {\n+                    ast::IntTy::Isize => {\n                         let int_ty = self.hir.tcx().sess.target.isize_ty;\n                         let min = match int_ty {\n                             ast::IntTy::I16 => std::i16::MIN as i64,"}, {"sha": "a3350cb1671d26e94a41cb97670d8ac3a8d6e41f", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ast::UintTy::U32 => ConstInt::U32(0),\n                     ast::UintTy::U64 => ConstInt::U64(0),\n                     ast::UintTy::U128 => ConstInt::U128(0),\n-                    ast::UintTy::Us => {\n+                    ast::UintTy::Usize => {\n                         let uint_ty = self.hir.tcx().sess.target.usize_ty;\n                         let val = ConstUsize::new(0, uint_ty).unwrap();\n                         ConstInt::Usize(val)\n@@ -95,7 +95,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ast::IntTy::I32 => ConstInt::I32(0),\n                     ast::IntTy::I64 => ConstInt::I64(0),\n                     ast::IntTy::I128 => ConstInt::I128(0),\n-                    ast::IntTy::Is => {\n+                    ast::IntTy::Isize => {\n                         let int_ty = self.hir.tcx().sess.target.isize_ty;\n                         let val = ConstIsize::new(0, int_ty).unwrap();\n                         ConstInt::Isize(val)"}, {"sha": "b476ea56852292efdbb932fe46a16bc0cc0d5993", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -49,7 +49,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             IntTy::I32 => v as i32 as u128,\n             IntTy::I64 => v as i64 as u128,\n             IntTy::I128 => v as u128,\n-            IntTy::Is => {\n+            IntTy::Isize => {\n                 let ty = self.tcx.sess.target.isize_ty;\n                 self.int_to_int(v, ty)\n             }\n@@ -62,7 +62,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             UintTy::U32 => v as u32 as u128,\n             UintTy::U64 => v as u64 as u128,\n             UintTy::U128 => v,\n-            UintTy::Us => {\n+            UintTy::Usize => {\n                 let ty = self.tcx.sess.target.usize_ty;\n                 self.int_to_uint(v, ty)\n             }\n@@ -124,8 +124,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         match ty.sty {\n             // Casting to a reference or fn pointer is not permitted by rustc, no need to support it here.\n             TyRawPtr(_) |\n-            TyInt(IntTy::Is) |\n-            TyUint(UintTy::Us) => Ok(PrimVal::Ptr(ptr)),\n+            TyInt(IntTy::Isize) |\n+            TyUint(UintTy::Usize) => Ok(PrimVal::Ptr(ptr)),\n             TyInt(_) | TyUint(_) => err!(ReadPointerAsBytes),\n             _ => err!(Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n         }"}, {"sha": "d02b18fa77bcdfdae2d51043ff65d3bda8b5ed5c", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -106,7 +106,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n         TyInt(IntTy::I32) => ConstInt::I32(prim as i128 as i32),\n         TyInt(IntTy::I64) => ConstInt::I64(prim as i128 as i64),\n         TyInt(IntTy::I128) => ConstInt::I128(prim as i128),\n-        TyInt(IntTy::Is) => ConstInt::Isize(\n+        TyInt(IntTy::Isize) => ConstInt::Isize(\n             ConstIsize::new(prim as i128 as i64, tcx.sess.target.isize_ty)\n                 .expect(\"miri should already have errored\"),\n         ),\n@@ -115,7 +115,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n         TyUint(UintTy::U32) => ConstInt::U32(prim as u32),\n         TyUint(UintTy::U64) => ConstInt::U64(prim as u64),\n         TyUint(UintTy::U128) => ConstInt::U128(prim),\n-        TyUint(UintTy::Us) => ConstInt::Usize(\n+        TyUint(UintTy::Usize) => ConstInt::Usize(\n             ConstUsize::new(prim as u64, tcx.sess.target.usize_ty)\n                 .expect(\"miri should already have errored\"),\n         ),"}, {"sha": "913e69fa945db16647b1ab3ffdf123e8ea3f8de6", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -1165,7 +1165,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     I32 => 4,\n                     I64 => 8,\n                     I128 => 16,\n-                    Is => self.memory.pointer_size(),\n+                    Isize => self.memory.pointer_size(),\n                 };\n                 PrimValKind::from_int_size(size)\n             }\n@@ -1178,7 +1178,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     U32 => 4,\n                     U64 => 8,\n                     U128 => 16,\n-                    Us => self.memory.pointer_size(),\n+                    Usize => self.memory.pointer_size(),\n                 };\n                 PrimValKind::from_uint_size(size)\n             }\n@@ -1292,7 +1292,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     I32 => 4,\n                     I64 => 8,\n                     I128 => 16,\n-                    Is => self.memory.pointer_size(),\n+                    Isize => self.memory.pointer_size(),\n                 };\n                 self.memory.read_primval(ptr, ptr_align, size, true)?\n             }\n@@ -1305,7 +1305,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     U32 => 4,\n                     U64 => 8,\n                     U128 => 16,\n-                    Us => self.memory.pointer_size(),\n+                    Usize => self.memory.pointer_size(),\n                 };\n                 self.memory.read_primval(ptr, ptr_align, size, false)?\n             }"}, {"sha": "0880767bca28164120235b164c45cbd17bbb1b42", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -292,13 +292,13 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::TyChar              => output.push_str(\"char\"),\n             ty::TyStr               => output.push_str(\"str\"),\n             ty::TyNever             => output.push_str(\"!\"),\n-            ty::TyInt(ast::IntTy::Is)    => output.push_str(\"isize\"),\n+            ty::TyInt(ast::IntTy::Isize)    => output.push_str(\"isize\"),\n             ty::TyInt(ast::IntTy::I8)    => output.push_str(\"i8\"),\n             ty::TyInt(ast::IntTy::I16)   => output.push_str(\"i16\"),\n             ty::TyInt(ast::IntTy::I32)   => output.push_str(\"i32\"),\n             ty::TyInt(ast::IntTy::I64)   => output.push_str(\"i64\"),\n             ty::TyInt(ast::IntTy::I128)   => output.push_str(\"i128\"),\n-            ty::TyUint(ast::UintTy::Us)   => output.push_str(\"usize\"),\n+            ty::TyUint(ast::UintTy::Usize)   => output.push_str(\"usize\"),\n             ty::TyUint(ast::UintTy::U8)   => output.push_str(\"u8\"),\n             ty::TyUint(ast::UintTy::U16)  => output.push_str(\"u16\"),\n             ty::TyUint(ast::UintTy::U32)  => output.push_str(\"u32\"),"}, {"sha": "d94b73d7f3e890bb0849e8135145b76af89bed90", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -1204,14 +1204,14 @@ impl PrimitiveTypeTable {\n         table.intern(\"char\", TyChar);\n         table.intern(\"f32\", TyFloat(FloatTy::F32));\n         table.intern(\"f64\", TyFloat(FloatTy::F64));\n-        table.intern(\"isize\", TyInt(IntTy::Is));\n+        table.intern(\"isize\", TyInt(IntTy::Isize));\n         table.intern(\"i8\", TyInt(IntTy::I8));\n         table.intern(\"i16\", TyInt(IntTy::I16));\n         table.intern(\"i32\", TyInt(IntTy::I32));\n         table.intern(\"i64\", TyInt(IntTy::I64));\n         table.intern(\"i128\", TyInt(IntTy::I128));\n         table.intern(\"str\", TyStr);\n-        table.intern(\"usize\", TyUint(UintTy::Us));\n+        table.intern(\"usize\", TyUint(UintTy::Usize));\n         table.intern(\"u8\", TyUint(UintTy::U8));\n         table.intern(\"u16\", TyUint(UintTy::U16));\n         table.intern(\"u32\", TyUint(UintTy::U32));"}, {"sha": "6b122627f0935561efb4ece67b56bf45b0357696", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -1246,7 +1246,7 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n fn int_type_width_signed(ty: Ty, ccx: &CrateContext) -> Option<(u64, bool)> {\n     match ty.sty {\n         ty::TyInt(t) => Some((match t {\n-            ast::IntTy::Is => {\n+            ast::IntTy::Isize => {\n                 match &ccx.tcx().sess.target.target.target_pointer_width[..] {\n                     \"16\" => 16,\n                     \"32\" => 32,\n@@ -1261,7 +1261,7 @@ fn int_type_width_signed(ty: Ty, ccx: &CrateContext) -> Option<(u64, bool)> {\n             ast::IntTy::I128 => 128,\n         }, true)),\n         ty::TyUint(t) => Some((match t {\n-            ast::UintTy::Us => {\n+            ast::UintTy::Usize => {\n                 match &ccx.tcx().sess.target.target.target_pointer_width[..] {\n                     \"16\" => 16,\n                     \"32\" => 32,"}, {"sha": "8d57b59e8c7e1e25b91c0cb6d6003d3f18322e11", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -718,13 +718,13 @@ fn get_overflow_intrinsic(oop: OverflowOp, bcx: &Builder, ty: Ty) -> ValueRef {\n     let tcx = bcx.tcx();\n \n     let new_sty = match ty.sty {\n-        TyInt(Is) => match &tcx.sess.target.target.target_pointer_width[..] {\n+        TyInt(Isize) => match &tcx.sess.target.target.target_pointer_width[..] {\n             \"16\" => TyInt(I16),\n             \"32\" => TyInt(I32),\n             \"64\" => TyInt(I64),\n             _ => panic!(\"unsupported target word size\")\n         },\n-        TyUint(Us) => match &tcx.sess.target.target.target_pointer_width[..] {\n+        TyUint(Usize) => match &tcx.sess.target.target.target_pointer_width[..] {\n             \"16\" => TyUint(U16),\n             \"32\" => TyUint(U32),\n             \"64\" => TyUint(U64),"}, {"sha": "6cbe175d4d8d5b8e627b44ece1f2d00a9132559c", "filename": "src/librustc_trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_trans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_trans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -147,7 +147,7 @@ impl Type {\n \n     pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type {\n         match t {\n-            ast::IntTy::Is => ccx.isize_ty(),\n+            ast::IntTy::Isize => ccx.isize_ty(),\n             ast::IntTy::I8 => Type::i8(ccx),\n             ast::IntTy::I16 => Type::i16(ccx),\n             ast::IntTy::I32 => Type::i32(ccx),\n@@ -158,7 +158,7 @@ impl Type {\n \n     pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type {\n         match t {\n-            ast::UintTy::Us => ccx.isize_ty(),\n+            ast::UintTy::Usize => ccx.isize_ty(),\n             ast::UintTy::U8 => Type::i8(ccx),\n             ast::UintTy::U16 => Type::i16(ccx),\n             ast::UintTy::U32 => Type::i32(ccx),"}, {"sha": "6f83ecab01a1c799a06a2eb0096148018fdc3cdd", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -494,7 +494,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 let lang_def_id = lang_items.i128_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::IntTy::Is) => {\n+            ty::TyInt(ast::IntTy::Isize) => {\n                 let lang_def_id = lang_items.isize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n@@ -518,7 +518,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 let lang_def_id = lang_items.u128_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::UintTy::Us) => {\n+            ty::TyUint(ast::UintTy::Usize) => {\n                 let lang_def_id = lang_items.usize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }"}, {"sha": "6d68824980b6af0a36f03d30336791b012d0defb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -2219,7 +2219,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // First, try built-in indexing.\n         match (adjusted_ty.builtin_index(), &index_ty.sty) {\n-            (Some(ty), &ty::TyUint(ast::UintTy::Us)) | (Some(ty), &ty::TyInfer(ty::IntVar(_))) => {\n+            (Some(ty), &ty::TyUint(ast::UintTy::Usize)) |\n+            (Some(ty), &ty::TyInfer(ty::IntVar(_))) => {\n                 debug!(\"try_index_step: success, using built-in indexing\");\n                 let adjustments = autoderef.adjust_steps(lvalue_pref);\n                 self.apply_adjustments(base_expr, adjustments);"}, {"sha": "4256a1fe12b60a70bfa9a7246123409f4401fbec", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -200,7 +200,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n                                           \"i128\",\n                                           item.span);\n             }\n-            ty::TyInt(ast::IntTy::Is) => {\n+            ty::TyInt(ast::IntTy::Isize) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.isize_impl(),\n                                           \"isize\",\n@@ -242,7 +242,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n                                           \"u128\",\n                                           item.span);\n             }\n-            ty::TyUint(ast::UintTy::Us) => {\n+            ty::TyUint(ast::UintTy::Usize) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.usize_impl(),\n                                           \"usize\","}, {"sha": "265114ae826f48d9e86145b602c2da4cf208cbb4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -2011,7 +2011,7 @@ impl PrimitiveType {\n impl From<ast::IntTy> for PrimitiveType {\n     fn from(int_ty: ast::IntTy) -> PrimitiveType {\n         match int_ty {\n-            ast::IntTy::Is => PrimitiveType::Isize,\n+            ast::IntTy::Isize => PrimitiveType::Isize,\n             ast::IntTy::I8 => PrimitiveType::I8,\n             ast::IntTy::I16 => PrimitiveType::I16,\n             ast::IntTy::I32 => PrimitiveType::I32,\n@@ -2024,7 +2024,7 @@ impl From<ast::IntTy> for PrimitiveType {\n impl From<ast::UintTy> for PrimitiveType {\n     fn from(uint_ty: ast::UintTy) -> PrimitiveType {\n         match uint_ty {\n-            ast::UintTy::Us => PrimitiveType::Usize,\n+            ast::UintTy::Usize => PrimitiveType::Usize,\n             ast::UintTy::U8 => PrimitiveType::U8,\n             ast::UintTy::U16 => PrimitiveType::U16,\n             ast::UintTy::U32 => PrimitiveType::U32,"}, {"sha": "e08a2cbfd0846792d6a159ef6c589f33f200b24b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -1324,7 +1324,7 @@ pub enum ImplItemKind {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy,\n          PartialOrd, Ord)]\n pub enum IntTy {\n-    Is,\n+    Isize,\n     I8,\n     I16,\n     I32,\n@@ -1347,7 +1347,7 @@ impl fmt::Display for IntTy {\n impl IntTy {\n     pub fn ty_to_string(&self) -> &'static str {\n         match *self {\n-            IntTy::Is => \"isize\",\n+            IntTy::Isize => \"isize\",\n             IntTy::I8 => \"i8\",\n             IntTy::I16 => \"i16\",\n             IntTy::I32 => \"i32\",\n@@ -1365,7 +1365,7 @@ impl IntTy {\n \n     pub fn bit_width(&self) -> Option<usize> {\n         Some(match *self {\n-            IntTy::Is => return None,\n+            IntTy::Isize => return None,\n             IntTy::I8 => 8,\n             IntTy::I16 => 16,\n             IntTy::I32 => 32,\n@@ -1378,7 +1378,7 @@ impl IntTy {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy,\n          PartialOrd, Ord)]\n pub enum UintTy {\n-    Us,\n+    Usize,\n     U8,\n     U16,\n     U32,\n@@ -1389,7 +1389,7 @@ pub enum UintTy {\n impl UintTy {\n     pub fn ty_to_string(&self) -> &'static str {\n         match *self {\n-            UintTy::Us => \"usize\",\n+            UintTy::Usize => \"usize\",\n             UintTy::U8 => \"u8\",\n             UintTy::U16 => \"u16\",\n             UintTy::U32 => \"u32\",\n@@ -1404,7 +1404,7 @@ impl UintTy {\n \n     pub fn bit_width(&self) -> Option<usize> {\n         Some(match *self {\n-            UintTy::Us => return None,\n+            UintTy::Usize => return None,\n             UintTy::U8 => 8,\n             UintTy::U16 => 16,\n             UintTy::U32 => 32,"}, {"sha": "0b868b514fe960a09552365bb103ffb81dda6ca2", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -1071,8 +1071,8 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n         \"u64\" => Some(UnsignedInt(ast::UintTy::U64)),\n         \"i128\" => Some(SignedInt(ast::IntTy::I128)),\n         \"u128\" => Some(UnsignedInt(ast::UintTy::U128)),\n-        \"isize\" => Some(SignedInt(ast::IntTy::Is)),\n-        \"usize\" => Some(UnsignedInt(ast::UintTy::Us)),\n+        \"isize\" => Some(SignedInt(ast::IntTy::Isize)),\n+        \"usize\" => Some(UnsignedInt(ast::UintTy::Usize)),\n         _ => None\n     }\n }"}, {"sha": "be0bfd6677bd80134ff7d767d8d3ad2cf0879921", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -694,17 +694,17 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n         self.expr_lit(span, ast::LitKind::Int(i as u128,\n-                                              ast::LitIntType::Unsigned(ast::UintTy::Us)))\n+                                              ast::LitIntType::Unsigned(ast::UintTy::Usize)))\n     }\n     fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr> {\n         if i < 0 {\n             let i = (-i) as u128;\n-            let lit_ty = ast::LitIntType::Signed(ast::IntTy::Is);\n+            let lit_ty = ast::LitIntType::Signed(ast::IntTy::Isize);\n             let lit = self.expr_lit(sp, ast::LitKind::Int(i, lit_ty));\n             self.expr_unary(sp, ast::UnOp::Neg, lit)\n         } else {\n             self.expr_lit(sp, ast::LitKind::Int(i as u128,\n-                                                ast::LitIntType::Signed(ast::IntTy::Is)))\n+                                                ast::LitIntType::Signed(ast::IntTy::Isize)))\n         }\n     }\n     fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {"}, {"sha": "7fcd88c94ca6f3ea7df98149a01844c7cc9863f8", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -326,13 +326,13 @@ pub mod rt {\n         );\n     }\n \n-    impl_to_tokens_int! { signed, isize, ast::IntTy::Is }\n+    impl_to_tokens_int! { signed, isize, ast::IntTy::Isize }\n     impl_to_tokens_int! { signed, i8,  ast::IntTy::I8 }\n     impl_to_tokens_int! { signed, i16, ast::IntTy::I16 }\n     impl_to_tokens_int! { signed, i32, ast::IntTy::I32 }\n     impl_to_tokens_int! { signed, i64, ast::IntTy::I64 }\n \n-    impl_to_tokens_int! { unsigned, usize, ast::UintTy::Us }\n+    impl_to_tokens_int! { unsigned, usize, ast::UintTy::Usize }\n     impl_to_tokens_int! { unsigned, u8,   ast::UintTy::U8 }\n     impl_to_tokens_int! { unsigned, u16,  ast::UintTy::U16 }\n     impl_to_tokens_int! { unsigned, u32,  ast::UintTy::U32 }"}, {"sha": "a9b1e4aaa60068edd658e8b00b5c015d66ceb11e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -603,13 +603,13 @@ pub fn integer_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler\n             err!(diag, |span, diag| diag.span_bug(span, \"found empty literal suffix in Some\"));\n         }\n         ty = match &*suf.as_str() {\n-            \"isize\" => ast::LitIntType::Signed(ast::IntTy::Is),\n+            \"isize\" => ast::LitIntType::Signed(ast::IntTy::Isize),\n             \"i8\"  => ast::LitIntType::Signed(ast::IntTy::I8),\n             \"i16\" => ast::LitIntType::Signed(ast::IntTy::I16),\n             \"i32\" => ast::LitIntType::Signed(ast::IntTy::I32),\n             \"i64\" => ast::LitIntType::Signed(ast::IntTy::I64),\n             \"i128\" => ast::LitIntType::Signed(ast::IntTy::I128),\n-            \"usize\" => ast::LitIntType::Unsigned(ast::UintTy::Us),\n+            \"usize\" => ast::LitIntType::Unsigned(ast::UintTy::Usize),\n             \"u8\"  => ast::LitIntType::Unsigned(ast::UintTy::U8),\n             \"u16\" => ast::LitIntType::Unsigned(ast::UintTy::U16),\n             \"u32\" => ast::LitIntType::Unsigned(ast::UintTy::U32),"}, {"sha": "48872cb1313d727d0884303b80014c76927ff1cd", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210ac01792878ce0d654e852b0c794c782c04e01/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=210ac01792878ce0d654e852b0c794c782c04e01", "patch": "@@ -833,14 +833,14 @@ fn find_repr_type_name(diagnostic: &Handler, type_attrs: &[ast::Attribute]) -> &\n                 attr::ReprPacked | attr::ReprSimd | attr::ReprAlign(_) => continue,\n                 attr::ReprExtern => \"i32\",\n \n-                attr::ReprInt(attr::SignedInt(ast::IntTy::Is)) => \"isize\",\n+                attr::ReprInt(attr::SignedInt(ast::IntTy::Isize)) => \"isize\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I8)) => \"i8\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I16)) => \"i16\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I32)) => \"i32\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I64)) => \"i64\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I128)) => \"i128\",\n \n-                attr::ReprInt(attr::UnsignedInt(ast::UintTy::Us)) => \"usize\",\n+                attr::ReprInt(attr::UnsignedInt(ast::UintTy::Usize)) => \"usize\",\n                 attr::ReprInt(attr::UnsignedInt(ast::UintTy::U8)) => \"u8\",\n                 attr::ReprInt(attr::UnsignedInt(ast::UintTy::U16)) => \"u16\",\n                 attr::ReprInt(attr::UnsignedInt(ast::UintTy::U32)) => \"u32\","}]}