{"sha": "9ee5ce221501cbafd8540586ec2904063b4448d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZTVjZTIyMTUwMWNiYWZkODU0MDU4NmVjMjkwNDA2M2I0NDQ4ZDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-10T13:50:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-10T14:03:29Z"}, "message": "Add a `mut_split()` method for dividing one `&mut [T]` into two", "tree": {"sha": "52d433fc5467be9215fe527d310f9a6da7a46b53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52d433fc5467be9215fe527d310f9a6da7a46b53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ee5ce221501cbafd8540586ec2904063b4448d6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee5ce221501cbafd8540586ec2904063b4448d6", "html_url": "https://github.com/rust-lang/rust/commit/9ee5ce221501cbafd8540586ec2904063b4448d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ee5ce221501cbafd8540586ec2904063b4448d6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa09736efcd100ec675a2fe0e29906607996485", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa09736efcd100ec675a2fe0e29906607996485", "html_url": "https://github.com/rust-lang/rust/commit/8fa09736efcd100ec675a2fe0e29906607996485"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "50b5b2fcd29540114cd533edea05ad8c4efa3f73", "filename": "src/libstd/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ee5ce221501cbafd8540586ec2904063b4448d6/src%2Flibstd%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee5ce221501cbafd8540586ec2904063b4448d6/src%2Flibstd%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcast.rs?ref=9ee5ce221501cbafd8540586ec2904063b4448d6", "patch": "@@ -13,7 +13,6 @@\n use sys;\n use unstable::intrinsics;\n \n-/// Casts the value at `src` to U. The two types must have the same length.\n /// Casts the value at `src` to U. The two types must have the same length.\n #[cfg(target_word_size = \"32\")]\n #[inline]"}, {"sha": "f8f4ea0be2cb30a4cfa8a8271f39fcd6ed5ddb86", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9ee5ce221501cbafd8540586ec2904063b4448d6/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee5ce221501cbafd8540586ec2904063b4448d6/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9ee5ce221501cbafd8540586ec2904063b4448d6", "patch": "@@ -1671,6 +1671,15 @@ pub trait MutableVector<'self, T> {\n \n     fn swap(self, a: uint, b: uint);\n \n+    /**\n+     * Divides one `&mut` into two. The first will\n+     * contain all indices from `0..mid` (excluding the index `mid`\n+     * itself) and the second will contain all indices from\n+     * `mid..len` (excluding the index `len` itself).\n+     */\n+    fn mut_split(self, mid: uint) -> (&'self mut [T],\n+                                      &'self mut [T]);\n+\n     fn reverse(self);\n \n     /**\n@@ -1708,6 +1717,15 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n         }\n     }\n \n+    #[inline]\n+    fn mut_split(self, mid: uint) -> (&'self mut [T], &'self mut [T]) {\n+        unsafe {\n+            let len = self.len();\n+            let self2: &'self mut [T] = cast::transmute_copy(&self);\n+            (self.mut_slice(0, mid), self2.mut_slice(mid, len))\n+        }\n+    }\n+\n     #[inline]\n     fn mut_iter(self) -> VecMutIterator<'self, T> {\n         unsafe {\n@@ -3355,4 +3373,23 @@ mod tests {\n         v.push(1);\n         v.push(2);\n     }\n+\n+    #[test]\n+    fn test_mut_split() {\n+        let mut values = [1u8,2,3,4,5];\n+        {\n+            let (left, right) = values.mut_split(2);\n+            assert_eq!(left.slice(0, left.len()), [1, 2]);\n+            for left.mut_iter().advance |p| {\n+                *p += 1;\n+            }\n+\n+            assert_eq!(right.slice(0, right.len()), [3, 4, 5]);\n+            for right.mut_iter().advance |p| {\n+                *p += 2;\n+            }\n+        }\n+\n+        assert_eq!(values, [2, 3, 5, 6, 7]);\n+    }\n }"}]}