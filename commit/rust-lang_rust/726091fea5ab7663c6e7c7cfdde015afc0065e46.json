{"sha": "726091fea5ab7663c6e7c7cfdde015afc0065e46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjA5MWZlYTVhYjc2NjNjNmU3YzdjZmRkZTAxNWFmYzAwNjVlNDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-30T04:09:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-30T22:35:55Z"}, "message": "Convert some C functions to rust functions\n\nRight now on linux, an empty executable with LTO still depends on librt becaues\nof the clock_gettime function in rust_builtin.o, but this commit moves this\ndependency into a rust function which is subject to elimination via LTO.\n\nAt the same time, this also drops libstd's dependency on librt on unices that\nare not OSX because the library is only used by extra::time (and now the\ndependency is listed in that module instead).", "tree": {"sha": "7f67c8eb6b5428e12f88e219015598b210ede0b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f67c8eb6b5428e12f88e219015598b210ede0b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/726091fea5ab7663c6e7c7cfdde015afc0065e46", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/726091fea5ab7663c6e7c7cfdde015afc0065e46", "html_url": "https://github.com/rust-lang/rust/commit/726091fea5ab7663c6e7c7cfdde015afc0065e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/726091fea5ab7663c6e7c7cfdde015afc0065e46/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5d779a3590b1ed1559e0489138040a71ae688b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5d779a3590b1ed1559e0489138040a71ae688b", "html_url": "https://github.com/rust-lang/rust/commit/aa5d779a3590b1ed1559e0489138040a71ae688b"}], "stats": {"total": 289, "additions": 202, "deletions": 87}, "files": [{"sha": "23c81c6fce529863c55834ad86f1710b0dcb0fed", "filename": "src/libextra/time.rs", "status": "modified", "additions": 96, "deletions": 10, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/726091fea5ab7663c6e7c7cfdde015afc0065e46/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726091fea5ab7663c6e7c7cfdde015afc0065e46/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=726091fea5ab7663c6e7c7cfdde015afc0065e46", "patch": "@@ -12,17 +12,16 @@\n \n use std::io::Reader;\n use std::io::mem::BufReader;\n+use std::libc;\n use std::num;\n use std::str;\n \n static NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n \n-pub mod rustrt {\n+mod rustrt {\n     use super::Tm;\n \n     extern {\n-        pub fn rust_get_time(sec: &mut i64, nsec: &mut i32);\n-        pub fn rust_precise_time_ns(ns: &mut u64);\n         pub fn rust_tzset();\n         pub fn rust_gmtime(sec: i64, nsec: i32, result: &mut Tm);\n         pub fn rust_localtime(sec: i64, nsec: i32, result: &mut Tm);\n@@ -31,6 +30,31 @@ pub mod rustrt {\n     }\n }\n \n+#[cfg(unix, not(target_os = \"macos\"))]\n+mod imp {\n+    use std::libc::{c_int, timespec};\n+\n+    // Apparently android provides this in some other library?\n+    #[cfg(not(target_os = \"android\"))]\n+    #[link(name = \"rt\")]\n+    extern {}\n+\n+    extern {\n+        pub fn clock_gettime(clk_id: c_int, tp: *mut timespec) -> c_int;\n+    }\n+\n+}\n+#[cfg(target_os = \"macos\")]\n+mod imp {\n+    use std::libc::{timeval, timezone, c_int, mach_timebase_info};\n+\n+    extern {\n+        pub fn gettimeofday(tp: *mut timeval, tzp: *mut timezone) -> c_int;\n+        pub fn mach_absolute_time() -> u64;\n+        pub fn mach_timebase_info(info: *mut mach_timebase_info) -> c_int;\n+    }\n+}\n+\n /// A record specifying a time value in seconds and nanoseconds.\n \n \n@@ -64,11 +88,45 @@ impl Ord for Timespec {\n  */\n pub fn get_time() -> Timespec {\n     unsafe {\n-        let mut sec = 0i64;\n-        let mut nsec = 0i32;\n-        rustrt::rust_get_time(&mut sec, &mut nsec);\n+        let (sec, nsec) = os_get_time();\n         return Timespec::new(sec, nsec);\n     }\n+\n+    #[cfg(windows)]\n+    unsafe fn os_get_time() -> (i64, i32) {\n+        static NANOSECONDS_FROM_1601_TO_1970: u64 = 11644473600000000;\n+\n+        let mut time = libc::FILETIME {\n+            dwLowDateTime: 0,\n+            dwHighDateTime: 0,\n+        };\n+        libc::GetSystemTimeAsFileTime(&mut time);\n+\n+        // A FILETIME contains a 64-bit value representing the number of\n+        // hectonanosecond (100-nanosecond) intervals since 1601-01-01T00:00:00Z.\n+        // http://support.microsoft.com/kb/167296/en-us\n+        let ns_since_1601 = ((time.dwHighDateTime as u64 << 32) |\n+                             (time.dwLowDateTime  as u64 <<  0)) / 10;\n+        let ns_since_1970 = ns_since_1601 - NANOSECONDS_FROM_1601_TO_1970;\n+\n+        ((ns_since_1970 / 1000000) as i64,\n+         ((ns_since_1970 % 1000000) * 1000) as i32)\n+    }\n+\n+    #[cfg(target_os = \"macos\")]\n+    unsafe fn os_get_time() -> (i64, i32) {\n+        use std::ptr;\n+        let mut tv = libc::timeval { tv_sec: 0, tv_usec: 0 };\n+        imp::gettimeofday(&mut tv, ptr::mut_null());\n+        (tv.tv_sec as i64, tv.tv_usec * 1000)\n+    }\n+\n+    #[cfg(not(target_os = \"macos\"), not(windows))]\n+    unsafe fn os_get_time() -> (i64, i32) {\n+        let mut tv = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n+        imp::clock_gettime(libc::CLOCK_REALTIME, &mut tv);\n+        (tv.tv_sec as i64, tv.tv_nsec as i32)\n+    }\n }\n \n \n@@ -77,10 +135,38 @@ pub fn get_time() -> Timespec {\n  * in nanoseconds since an unspecified epoch.\n  */\n pub fn precise_time_ns() -> u64 {\n-    unsafe {\n-        let mut ns = 0u64;\n-        rustrt::rust_precise_time_ns(&mut ns);\n-        ns\n+    return os_precise_time_ns();\n+\n+    #[cfg(windows)]\n+    fn os_precise_time_ns() -> u64 {\n+        let mut ticks_per_s = 0;\n+        assert_eq!(unsafe {\n+            libc::QueryPerformanceFrequency(&mut ticks_per_s)\n+        }, 1);\n+        let ticks_per_s = if ticks_per_s == 0 {1} else {ticks_per_s};\n+        let mut ticks = 0;\n+        assert_eq!(unsafe {\n+            libc::QueryPerformanceCounter(&mut ticks)\n+        }, 1);\n+\n+        return (ticks as u64 * 1000000000) / (ticks_per_s as u64);\n+    }\n+\n+    #[cfg(target_os = \"macos\")]\n+    fn os_precise_time_ns() -> u64 {\n+        let time = unsafe { imp::mach_absolute_time() };\n+        let mut info = libc::mach_timebase_info { numer: 0, denom: 0 };\n+        unsafe { imp::mach_timebase_info(&mut info); }\n+        return time * ((info.numer / info.denom) as u64);\n+    }\n+\n+    #[cfg(not(windows), not(target_os = \"macos\"))]\n+    fn os_precise_time_ns() -> u64 {\n+        let mut ts = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n+        unsafe {\n+            imp::clock_gettime(libc::CLOCK_MONOTONIC, &mut ts);\n+        }\n+        return (ts.tv_sec as u64) * 1000000000 + (ts.tv_nsec as u64)\n     }\n }\n "}, {"sha": "eefccf05a542c87ecc1b0b3037f184898e994a45", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/726091fea5ab7663c6e7c7cfdde015afc0065e46/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726091fea5ab7663c6e7c7cfdde015afc0065e46/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=726091fea5ab7663c6e7c7cfdde015afc0065e46", "patch": "@@ -739,6 +739,10 @@ extern {\n #[link(name = \"pthread\")]\n extern {}\n \n+#[cfg(target_os = \"linux\")]\n+#[link(name = \"rt\")]\n+extern {}\n+\n #[cfg(target_os = \"win32\")]\n #[link(name = \"ws2_32\")]\n #[link(name = \"psapi\")]"}, {"sha": "fdfc28d9d10c8571141255777493cd39ef48bd62", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 102, "deletions": 8, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/726091fea5ab7663c6e7c7cfdde015afc0065e46/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726091fea5ab7663c6e7c7cfdde015afc0065e46/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=726091fea5ab7663c6e7c7cfdde015afc0065e46", "patch": "@@ -226,7 +226,8 @@ pub mod types {\n         pub mod common {\n             pub mod posix01 {\n                 use libc::types::common::c95::{c_void};\n-                use libc::types::os::arch::c95::{c_char, c_ulong, size_t};\n+                use libc::types::os::arch::c95::{c_char, c_ulong, size_t,\n+                                                 time_t, suseconds_t, c_long};\n \n                 pub type pthread_t = c_ulong;\n \n@@ -241,6 +242,18 @@ pub mod types {\n                     __unused4: *c_void,\n                     __unused5: *c_void,\n                 }\n+\n+                pub struct timeval {\n+                    tv_sec: time_t,\n+                    tv_usec: suseconds_t,\n+                }\n+\n+                pub struct timespec {\n+                    tv_sec: time_t,\n+                    tv_nsec: c_long,\n+                }\n+\n+                pub enum timezone {}\n             }\n             pub mod bsd44 {\n                 pub type socklen_t = u32;\n@@ -298,6 +311,7 @@ pub mod types {\n                 pub type ptrdiff_t = i32;\n                 pub type clock_t = i32;\n                 pub type time_t = i32;\n+                pub type suseconds_t = i32;\n                 pub type wchar_t = i32;\n             }\n             pub mod c99 {\n@@ -481,6 +495,7 @@ pub mod types {\n                 pub type ptrdiff_t = i64;\n                 pub type clock_t = i64;\n                 pub type time_t = i64;\n+                pub type suseconds_t = i64;\n                 pub type wchar_t = i32;\n             }\n             pub mod c99 {\n@@ -553,7 +568,8 @@ pub mod types {\n         pub mod common {\n             pub mod posix01 {\n                 use libc::types::common::c95::{c_void};\n-                use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+                use libc::types::os::arch::c95::{c_char, c_int, size_t,\n+                                                 time_t, suseconds_t, c_long};\n                 use libc::types::os::arch::c99::{uintptr_t};\n \n                 pub type pthread_t = uintptr_t;\n@@ -573,6 +589,18 @@ pub mod types {\n                     __unused7: *c_void,\n                     __unused8: *c_void,\n                 }\n+\n+                pub struct timeval {\n+                    tv_sec: time_t,\n+                    tv_usec: suseconds_t,\n+                }\n+\n+                pub struct timespec {\n+                    tv_sec: time_t,\n+                    tv_nsec: c_long,\n+                }\n+\n+                pub enum timezone {}\n             }\n             pub mod bsd44 {\n                 pub type socklen_t = u32;\n@@ -633,6 +661,7 @@ pub mod types {\n                 pub type ptrdiff_t = i64;\n                 pub type clock_t = i32;\n                 pub type time_t = i64;\n+                pub type suseconds_t = i64;\n                 pub type wchar_t = i32;\n             }\n             pub mod c99 {\n@@ -709,7 +738,8 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::c_short;\n+                use libc::types::os::arch::c95::{c_short, time_t, suseconds_t,\n+                                                 c_long};\n                 use libc::types::os::arch::extra::{int64, time64_t};\n                 use libc::types::os::arch::posix88::{dev_t, ino_t};\n                 use libc::types::os::arch::posix88::mode_t;\n@@ -735,6 +765,18 @@ pub mod types {\n                     actime: time64_t,\n                     modtime: time64_t,\n                 }\n+\n+                pub struct timeval {\n+                    tv_sec: time_t,\n+                    tv_usec: suseconds_t,\n+                }\n+\n+                pub struct timespec {\n+                    tv_sec: time_t,\n+                    tv_nsec: c_long,\n+                }\n+\n+                pub enum timezone {}\n             }\n \n             pub mod bsd44 {\n@@ -807,6 +849,11 @@ pub mod types {\n                 #[cfg(target_arch = \"x86_64\")]\n                 pub type time_t = i64;\n \n+                #[cfg(target_arch = \"x86\")]\n+                pub type suseconds_t = i32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type suseconds_t = i64;\n+\n                 pub type wchar_t = u16;\n             }\n \n@@ -983,6 +1030,13 @@ pub mod types {\n                 }\n \n                 pub type LPOVERLAPPED = *mut OVERLAPPED;\n+\n+                pub struct FILETIME {\n+                    dwLowDateTime: DWORD,\n+                    dwHighDateTime: DWORD,\n+                }\n+\n+                pub type LPFILETIME = *mut FILETIME;\n             }\n         }\n     }\n@@ -991,8 +1045,9 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n-                use libc::types::common::c95::{c_void};\n-                use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+                use libc::types::common::c95::c_void;\n+                use libc::types::os::arch::c95::{c_char, c_int, size_t,\n+                                                 time_t, suseconds_t, c_long};\n                 use libc::types::os::arch::c99::{uintptr_t};\n \n                 pub type pthread_t = uintptr_t;\n@@ -1012,6 +1067,18 @@ pub mod types {\n                     __unused7: *c_void,\n                     __unused8: *c_void,\n                 }\n+\n+                pub struct timeval {\n+                    tv_sec: time_t,\n+                    tv_usec: suseconds_t,\n+                }\n+\n+                pub struct timespec {\n+                    tv_sec: time_t,\n+                    tv_nsec: c_long,\n+                }\n+\n+                pub enum timezone {}\n             }\n \n             pub mod bsd44 {\n@@ -1075,6 +1142,7 @@ pub mod types {\n                 pub type ptrdiff_t = i32;\n                 pub type clock_t = u32;\n                 pub type time_t = i32;\n+                pub type suseconds_t = i32;\n                 pub type wchar_t = i32;\n             }\n             pub mod c99 {\n@@ -1144,6 +1212,12 @@ pub mod types {\n             pub mod bsd44 {\n             }\n             pub mod extra {\n+                pub struct mach_timebase_info {\n+                    numer: u32,\n+                    denom: u32,\n+                }\n+\n+                pub type mach_timebase_info_data_t = mach_timebase_info;\n             }\n         }\n \n@@ -1165,6 +1239,7 @@ pub mod types {\n                 pub type ptrdiff_t = i64;\n                 pub type clock_t = u64;\n                 pub type time_t = i64;\n+                pub type suseconds_t = i32;\n                 pub type wchar_t = i32;\n             }\n             pub mod c99 {\n@@ -1235,6 +1310,12 @@ pub mod types {\n             pub mod bsd44 {\n             }\n             pub mod extra {\n+                pub struct mach_timebase_info {\n+                    numer: u32,\n+                    denom: u32,\n+                }\n+\n+                pub type mach_timebase_info_data_t = mach_timebase_info;\n             }\n         }\n     }\n@@ -2047,6 +2128,9 @@ pub mod consts {\n \n             pub static PTHREAD_CREATE_JOINABLE: c_int = 0;\n             pub static PTHREAD_CREATE_DETACHED: c_int = 1;\n+\n+            pub static CLOCK_REALTIME: c_int = 0;\n+            pub static CLOCK_MONOTONIC: c_int = 1;\n         }\n         pub mod posix08 {\n         }\n@@ -2467,6 +2551,9 @@ pub mod consts {\n \n             pub static PTHREAD_CREATE_JOINABLE: c_int = 0;\n             pub static PTHREAD_CREATE_DETACHED: c_int = 1;\n+\n+            pub static CLOCK_REALTIME: c_int = 0;\n+            pub static CLOCK_MONOTONIC: c_int = 4;\n         }\n         pub mod posix08 {\n         }\n@@ -3609,8 +3696,7 @@ pub mod funcs {\n     #[cfg(target_os = \"freebsd\")]\n     pub mod bsd44 {\n         use libc::types::common::c95::{c_void};\n-        use libc::types::os::arch::c95::{c_char, c_uchar, c_int, c_uint,\n-                                         size_t};\n+        use libc::types::os::arch::c95::{c_char, c_uchar, c_int, c_uint, size_t};\n \n         extern {\n             pub fn sysctl(name: *c_int,\n@@ -3694,7 +3780,7 @@ pub mod funcs {\n                                                LPMEMORY_BASIC_INFORMATION,\n                                                LPSYSTEM_INFO};\n             use libc::types::os::arch::extra::{HANDLE, LPHANDLE, LARGE_INTEGER,\n-                                               PLARGE_INTEGER};\n+                                               PLARGE_INTEGER, LPFILETIME};\n \n             extern \"system\" {\n                 pub fn GetEnvironmentVariableW(n: LPCWSTR,\n@@ -3838,6 +3924,14 @@ pub mod funcs {\n                                         lpNewFilePointer: PLARGE_INTEGER,\n                                         dwMoveMethod: DWORD) -> BOOL;\n                 pub fn SetEndOfFile(hFile: HANDLE) -> BOOL;\n+\n+                pub fn GetSystemTimeAsFileTime(\n+                            lpSystemTimeAsFileTime: LPFILETIME);\n+\n+                pub fn QueryPerformanceFrequency(\n+                            lpFrequency: *mut LARGE_INTEGER) -> BOOL;\n+                pub fn QueryPerformanceCounter(\n+                            lpPerformanceCount: *mut LARGE_INTEGER) -> BOOL;\n             }\n         }\n "}, {"sha": "045cdf574f62ff37727d1af9353f80a02ede0edb", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/726091fea5ab7663c6e7c7cfdde015afc0065e46/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726091fea5ab7663c6e7c7cfdde015afc0065e46/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=726091fea5ab7663c6e7c7cfdde015afc0065e46", "patch": "@@ -22,7 +22,6 @@ extern {}\n // On linux librt and libdl are indirect dependencies via rustrt,\n // and binutils 2.22+ won't add them automatically\n #[cfg(target_os = \"linux\")]\n-#[link(name = \"rt\")]\n #[link(name = \"dl\")]\n #[link(name = \"m\")]\n #[link(name = \"pthread\")]\n@@ -36,7 +35,6 @@ extern {}\n \n #[cfg(target_os = \"freebsd\")]\n #[link(name = \"execinfo\")]\n-#[link(name = \"rt\")]\n #[link(name = \"pthread\")]\n extern {}\n "}, {"sha": "6de5f80829003602f3ce7c8e0004b9e514c553b1", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/726091fea5ab7663c6e7c7cfdde015afc0065e46/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/726091fea5ab7663c6e7c7cfdde015afc0065e46/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=726091fea5ab7663c6e7c7cfdde015afc0065e46", "patch": "@@ -127,73 +127,6 @@ rust_list_dir_wfd_fp_buf(void* wfd) {\n }\n #endif\n \n-#if defined(__WIN32__)\n-void\n-rust_get_time(int64_t *sec, int32_t *nsec) {\n-    FILETIME fileTime;\n-    GetSystemTimeAsFileTime(&fileTime);\n-\n-    // A FILETIME contains a 64-bit value representing the number of\n-    // hectonanosecond (100-nanosecond) intervals since 1601-01-01T00:00:00Z.\n-    // http://support.microsoft.com/kb/167296/en-us\n-    ULARGE_INTEGER ul;\n-    ul.LowPart = fileTime.dwLowDateTime;\n-    ul.HighPart = fileTime.dwHighDateTime;\n-    uint64_t ns_since_1601 = ul.QuadPart / 10;\n-\n-    const uint64_t NANOSECONDS_FROM_1601_TO_1970 = 11644473600000000ull;\n-    uint64_t ns_since_1970 = ns_since_1601 - NANOSECONDS_FROM_1601_TO_1970;\n-    *sec = ns_since_1970 / 1000000;\n-    *nsec = (ns_since_1970 % 1000000) * 1000;\n-}\n-#else\n-void\n-rust_get_time(int64_t *sec, int32_t *nsec) {\n-#ifdef __APPLE__\n-    struct timeval tv;\n-    gettimeofday(&tv, NULL);\n-    *sec = tv.tv_sec;\n-    *nsec = tv.tv_usec * 1000;\n-#else\n-    struct timespec ts;\n-    clock_gettime(CLOCK_REALTIME, &ts);\n-    *sec = ts.tv_sec;\n-    *nsec = ts.tv_nsec;\n-#endif\n-}\n-#endif\n-\n-const int64_t ns_per_s = 1000000000LL;\n-\n-void\n-rust_precise_time_ns(uint64_t *ns) {\n-\n-#ifdef __APPLE__\n-    uint64_t time = mach_absolute_time();\n-    mach_timebase_info_data_t info = {0, 0};\n-    if (info.denom == 0) {\n-        mach_timebase_info(&info);\n-    }\n-    uint64_t time_nano = time * (info.numer / info.denom);\n-    *ns = time_nano;\n-#elif __WIN32__\n-    LARGE_INTEGER ticks_per_s;\n-    BOOL query_result = QueryPerformanceFrequency(&ticks_per_s);\n-    assert(query_result);\n-    if (ticks_per_s.QuadPart == 0LL) {\n-        ticks_per_s.QuadPart = 1LL;\n-    }\n-    LARGE_INTEGER ticks;\n-    query_result = QueryPerformanceCounter(&ticks);\n-    assert(query_result);\n-    *ns = (uint64_t)((ticks.QuadPart * ns_per_s) / ticks_per_s.QuadPart);\n-#else\n-    struct timespec ts;\n-    clock_gettime(CLOCK_MONOTONIC, &ts);\n-    *ns = (uint64_t)(ts.tv_sec * ns_per_s + ts.tv_nsec);\n-#endif\n-}\n-\n typedef struct\n {\n     size_t fill;    // in bytes; if zero, heapified"}]}