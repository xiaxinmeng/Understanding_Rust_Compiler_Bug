{"sha": "1b5f117c47dcc1b041c686d4c6016ebf96006f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNWYxMTdjNDdkY2MxYjA0MWM2ODZkNGM2MDE2ZWJmOTYwMDZmMDY=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-02-25T23:17:36Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-18T07:29:23Z"}, "message": "Use `NotSupported` in more places", "tree": {"sha": "80a8ada421842f8bbaa819380eb4b36827c4f221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80a8ada421842f8bbaa819380eb4b36827c4f221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5f117c47dcc1b041c686d4c6016ebf96006f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5f117c47dcc1b041c686d4c6016ebf96006f06", "html_url": "https://github.com/rust-lang/rust/commit/1b5f117c47dcc1b041c686d4c6016ebf96006f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5f117c47dcc1b041c686d4c6016ebf96006f06/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86592b9939df4e5534ea37cda6bc0b7f7ca8b70e", "url": "https://api.github.com/repos/rust-lang/rust/commits/86592b9939df4e5534ea37cda6bc0b7f7ca8b70e", "html_url": "https://github.com/rust-lang/rust/commit/86592b9939df4e5534ea37cda6bc0b7f7ca8b70e"}], "stats": {"total": 95, "additions": 48, "deletions": 47}, "files": [{"sha": "c400f5f2c2e8444edd72f816d764b7d343720426", "filename": "library/std/src/sys/hermit/fd.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs?ref=1b5f117c47dcc1b041c686d4c6016ebf96006f06", "patch": "@@ -1,9 +1,10 @@\n #![unstable(reason = \"not public\", issue = \"none\", feature = \"fd\")]\n \n-use crate::io::{self, ErrorKind, Read};\n+use crate::io::{self, Read};\n use crate::mem;\n use crate::sys::cvt;\n use crate::sys::hermit::abi;\n+use crate::sys::unsupported;\n use crate::sys_common::AsInner;\n \n #[derive(Debug)]\n@@ -46,19 +47,19 @@ impl FileDesc {\n         self.duplicate_path(&[])\n     }\n     pub fn duplicate_path(&self, _path: &[u8]) -> io::Result<FileDesc> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"duplicate isn't supported\"))\n+        unsupported()\n     }\n \n     pub fn nonblocking(&self) -> io::Result<bool> {\n         Ok(false)\n     }\n \n     pub fn set_cloexec(&self) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"cloexec isn't supported\"))\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, _nonblocking: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"nonblocking isn't supported\"))\n+        unsupported()\n     }\n }\n "}, {"sha": "1fa929e48db0ed6529e3b18628de6c996baee5a0", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=1b5f117c47dcc1b041c686d4c6016ebf96006f06", "patch": "@@ -56,7 +56,7 @@ pub fn unsupported<T>() -> crate::io::Result<T> {\n \n pub fn unsupported_err() -> crate::io::Error {\n     crate::io::Error::new_const(\n-        crate::io::ErrorKind::Other,\n+        crate::io::ErrorKind::NotSupported,\n         &\"operation not supported on HermitCore yet\",\n     )\n }"}, {"sha": "a9c09b6ceefae0e81170f17c48caf077d689647e", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=1b5f117c47dcc1b041c686d4c6016ebf96006f06", "patch": "@@ -166,7 +166,7 @@ impl TcpStream {\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"socket_addr isn't supported\"))\n+        unsupported()\n     }\n \n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {\n@@ -199,7 +199,7 @@ impl TcpStream {\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"take_error isn't supported\"))\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, mode: bool) -> io::Result<()> {\n@@ -247,27 +247,27 @@ impl TcpListener {\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_only_v6(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn only_v6(&self) -> io::Result<bool> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n }\n \n@@ -281,127 +281,127 @@ pub struct UdpSocket(abi::Handle);\n \n impl UdpSocket {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn duplicate(&self) -> io::Result<UdpSocket> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn broadcast(&self) -> io::Result<bool> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n \n     pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n-        Err(io::Error::new_const(ErrorKind::Other, &\"not supported\"))\n+        unsupported()\n     }\n }\n "}, {"sha": "7636413fefbe223896444ab3dda77769303d89f5", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=1b5f117c47dcc1b041c686d4c6016ebf96006f06", "patch": "@@ -50,7 +50,7 @@ pub fn unsupported<T>() -> crate::io::Result<T> {\n }\n \n pub fn unsupported_err() -> crate::io::Error {\n-    crate::io::Error::new_const(ErrorKind::Other, &\"operation not supported on SGX yet\")\n+    crate::io::Error::new_const(ErrorKind::NotSupported, &\"operation not supported on SGX yet\")\n }\n \n /// This function is used to implement various functions that doesn't exist,"}, {"sha": "1113c7821b28c531156ba9059c21adfc37556fd8", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=1b5f117c47dcc1b041c686d4c6016ebf96006f06", "patch": "@@ -366,7 +366,7 @@ impl FileAttr {\n         }\n \n         Err(io::Error::new_const(\n-            io::ErrorKind::Other,\n+            io::ErrorKind::NotSupported,\n             &\"creation time is not available on this platform \\\n                             currently\",\n         ))"}, {"sha": "216bc3b5d6dccd38ffa3e5d881e47fde10560c6c", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f117c47dcc1b041c686d4c6016ebf96006f06/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=1b5f117c47dcc1b041c686d4c6016ebf96006f06", "patch": "@@ -447,7 +447,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n #[cfg(any(target_os = \"fuchsia\", target_os = \"l4re\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     use crate::io::ErrorKind;\n-    Err(io::Error::new_const(ErrorKind::Other, &\"Not yet implemented!\"))\n+    Err(io::Error::new_const(ErrorKind::NotSupported, &\"Not yet implemented!\"))\n }\n \n #[cfg(target_os = \"vxworks\")]"}]}