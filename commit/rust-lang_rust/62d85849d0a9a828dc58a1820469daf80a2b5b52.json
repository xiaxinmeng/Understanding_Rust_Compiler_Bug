{"sha": "62d85849d0a9a828dc58a1820469daf80a2b5b52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZDg1ODQ5ZDBhOWE4MjhkYzU4YTE4MjA0NjlkYWY4MGEyYjViNTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-23T02:48:22Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-23T15:50:07Z"}, "message": "Add parser recovery for `const $ident = $expr;`.\nThen use the diagnostics-stealing API to stash parser\nerrors and enrich them with type information in typeck.", "tree": {"sha": "ff7f14d0b574eee7d77ce3dd79e185738e002a06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff7f14d0b574eee7d77ce3dd79e185738e002a06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62d85849d0a9a828dc58a1820469daf80a2b5b52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62d85849d0a9a828dc58a1820469daf80a2b5b52", "html_url": "https://github.com/rust-lang/rust/commit/62d85849d0a9a828dc58a1820469daf80a2b5b52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62d85849d0a9a828dc58a1820469daf80a2b5b52/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae8b3e8fc6e95a0f68fc49338f394d670e233883", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8b3e8fc6e95a0f68fc49338f394d670e233883", "html_url": "https://github.com/rust-lang/rust/commit/ae8b3e8fc6e95a0f68fc49338f394d670e233883"}], "stats": {"total": 180, "additions": 164, "deletions": 16}, "files": [{"sha": "e6e0cb88fbd23435f030d3b7aad2079cc3042673", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/62d85849d0a9a828dc58a1820469daf80a2b5b52/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d85849d0a9a828dc58a1820469daf80a2b5b52/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=62d85849d0a9a828dc58a1820469daf80a2b5b52", "patch": "@@ -46,7 +46,7 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::GenericParamKind;\n use rustc::hir::{self, CodegenFnAttrFlags, CodegenFnAttrs, Unsafety};\n \n-use errors::{Applicability, DiagnosticId};\n+use errors::{Applicability, DiagnosticId, StashKey};\n \n struct OnlySelfBounds(bool);\n \n@@ -1149,18 +1149,41 @@ fn infer_placeholder_type(\n     def_id: DefId,\n     body_id: hir::BodyId,\n     span: Span,\n+    item_ident: Ident,\n ) -> Ty<'_> {\n     let ty = tcx.typeck_tables_of(def_id).node_type(body_id.hir_id);\n-    let mut diag = bad_placeholder_type(tcx, span);\n-    if ty != tcx.types.err {\n-        diag.span_suggestion(\n-            span,\n-            \"replace `_` with the correct type\",\n-            ty.to_string(),\n-            Applicability::MaybeIncorrect,\n-        );\n+\n+    // If this came from a free `const` or `static mut?` item,\n+    // then the user may have written e.g. `const A = 42;`.\n+    // In this case, the parser has stashed a diagnostic for\n+    // us to improve in typeck so we do that now.\n+    match tcx.sess.diagnostic().steal_diagnostic(span, StashKey::ItemNoType) {\n+        Some(mut err) => {\n+            // The parser provided a sub-optimal `HasPlaceholders` suggestion for the type.\n+            // We are typeck and have the real type, so remove that and suggest the actual type.\n+            err.suggestions.clear();\n+            err.span_suggestion(\n+                span,\n+                \"provide a type for the item\",\n+                format!(\"{}: {}\", item_ident, ty),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+        }\n+        None => {\n+            let mut diag = bad_placeholder_type(tcx, span);\n+            if ty != tcx.types.err {\n+                diag.span_suggestion(\n+                    span,\n+                    \"replace `_` with the correct type\",\n+                    ty.to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            diag.emit();\n+        }\n     }\n-    diag.emit();\n+\n     ty\n }\n \n@@ -1192,7 +1215,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n             TraitItemKind::Const(ref ty, body_id)  => {\n                 body_id.and_then(|body_id| {\n                     if let hir::TyKind::Infer = ty.node {\n-                        Some(infer_placeholder_type(tcx, def_id, body_id, ty.span))\n+                        Some(infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident))\n                     } else {\n                         None\n                     }\n@@ -1214,7 +1237,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n             }\n             ImplItemKind::Const(ref ty, body_id) => {\n                 if let hir::TyKind::Infer = ty.node {\n-                    infer_placeholder_type(tcx, def_id, body_id, ty.span)\n+                    infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n                 } else {\n                     icx.to_ty(ty)\n                 }\n@@ -1246,7 +1269,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                 ItemKind::Static(ref ty, .., body_id)\n                 | ItemKind::Const(ref ty, body_id) => {\n                     if let hir::TyKind::Infer = ty.node {\n-                        infer_placeholder_type(tcx, def_id, body_id, ty.span)\n+                        infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n                     } else {\n                         icx.to_ty(ty)\n                     }"}, {"sha": "0d073f0cc97b135315bcc7fed64a94d524ecfbf6", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/62d85849d0a9a828dc58a1820469daf80a2b5b52/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d85849d0a9a828dc58a1820469daf80a2b5b52/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=62d85849d0a9a828dc58a1820469daf80a2b5b52", "patch": "@@ -24,7 +24,7 @@ use crate::symbol::{kw, sym};\n use std::mem;\n use log::debug;\n use rustc_target::spec::abi::Abi;\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, StashKey};\n \n /// Whether the type alias or associated type is a concrete type or an opaque type.\n #[derive(Debug)]\n@@ -1477,10 +1477,23 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Parse `[\"const\" | (\"static\" \"mut\"?)] $ident \":\" $ty = $expr` with\n+    /// `[\"const\" | (\"static\" \"mut\"?)]` already parsed and stored in `m`.\n+    ///\n+    /// When `m` is `\"const\"`, `$ident` may also be `\"_\"`.\n     fn parse_item_const(&mut self, m: Option<Mutability>) -> PResult<'a, ItemInfo> {\n         let id = if m.is_none() { self.parse_ident_or_underscore() } else { self.parse_ident() }?;\n-        self.expect(&token::Colon)?;\n-        let ty = self.parse_ty()?;\n+\n+        // Parse the type of a `const` or `static mut?` item.\n+        // That is, the `\":\" $ty` fragment.\n+        let ty = if self.token == token::Eq {\n+            self.recover_missing_const_type(id, m)\n+        } else {\n+            // Not `=` so expect `\":\"\" $ty` as usual.\n+            self.expect(&token::Colon)?;\n+            self.parse_ty()?\n+        };\n+\n         self.expect(&token::Eq)?;\n         let e = self.parse_expr()?;\n         self.expect(&token::Semi)?;\n@@ -1491,6 +1504,34 @@ impl<'a> Parser<'a> {\n         Ok((id, item, None))\n     }\n \n+    /// We were supposed to parse `:` but instead, we're already at `=`.\n+    /// This means that the type is missing.\n+    fn recover_missing_const_type(&mut self, id: Ident, m: Option<Mutability>) -> P<Ty> {\n+        // Construct the error and stash it away with the hope\n+        // that typeck will later enrich the error with a type.\n+        let kind = match m {\n+            Some(Mutability::Mutable) => \"static mut\",\n+            Some(Mutability::Immutable) => \"static\",\n+            None => \"const\",\n+        };\n+        let mut err = self.struct_span_err(id.span, &format!(\"missing type for `{}` item\", kind));\n+        err.span_suggestion(\n+            id.span,\n+            \"provide a type for the item\",\n+            format!(\"{}: <type>\", id),\n+            Applicability::HasPlaceholders,\n+        );\n+        err.stash(id.span, StashKey::ItemNoType);\n+\n+        // The user intended that the type be inferred,\n+        // so treat this as if the user wrote e.g. `const A: _ = expr;`.\n+        P(Ty {\n+            node: TyKind::Infer,\n+            span: id.span,\n+            id: ast::DUMMY_NODE_ID,\n+        })\n+    }\n+\n     /// Parses `type Foo = Bar;` or returns `None`\n     /// without modifying the parser state.\n     fn eat_type(&mut self) -> Option<PResult<'a, (Ident, AliasKind, Generics)>> {"}, {"sha": "99200a965dd2160b58e2f3d43e8d0324ba0340f4", "filename": "src/test/ui/suggestions/const-no-type.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/62d85849d0a9a828dc58a1820469daf80a2b5b52/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62d85849d0a9a828dc58a1820469daf80a2b5b52/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs?ref=62d85849d0a9a828dc58a1820469daf80a2b5b52", "patch": "@@ -0,0 +1,46 @@\n+// In the cases below, the type is missing from the `const` and `static` items.\n+//\n+// Here, we test that we:\n+//\n+// a) Perform parser recovery.\n+//\n+// b) Emit a diagnostic with the actual inferred type to RHS of `=` as the suggestion.\n+\n+fn main() {}\n+\n+// These will not reach typeck:\n+\n+#[cfg(FALSE)]\n+const C2 = 42;\n+//~^ ERROR missing type for `const` item\n+//~| HELP provide a type for the item\n+//~| SUGGESTION C2: <type>\n+\n+#[cfg(FALSE)]\n+static S2 = \"abc\";\n+//~^ ERROR missing type for `static` item\n+//~| HELP provide a type for the item\n+//~| SUGGESTION S2: <type>\n+\n+#[cfg(FALSE)]\n+static mut SM2 = \"abc\";\n+//~^ ERROR missing type for `static mut` item\n+//~| HELP provide a type for the item\n+//~| SUGGESTION SM2: <type>\n+\n+// These will, so the diagnostics should be stolen by typeck:\n+\n+const C = 42;\n+//~^ ERROR missing type for `const` item\n+//~| HELP provide a type for the item\n+//~| SUGGESTION C: i32\n+\n+static S = Vec::<String>::new();\n+//~^ ERROR missing type for `static` item\n+//~| HELP provide a type for the item\n+//~| SUGGESTION S: std::vec::Vec<std::string::String>\n+\n+static mut SM = \"abc\";\n+//~^ ERROR missing type for `static mut` item\n+//~| HELP provide a type for the item\n+//~| SUGGESTION &'static str"}, {"sha": "c4f17109dc5c75e48c558bbaa7c3e54268c45e87", "filename": "src/test/ui/suggestions/const-no-type.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/62d85849d0a9a828dc58a1820469daf80a2b5b52/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62d85849d0a9a828dc58a1820469daf80a2b5b52/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr?ref=62d85849d0a9a828dc58a1820469daf80a2b5b52", "patch": "@@ -0,0 +1,38 @@\n+error: missing type for `const` item\n+  --> $DIR/const-no-type.rs:33:7\n+   |\n+LL | const C = 42;\n+   |       ^ help: provide a type for the item: `C: i32`\n+\n+error: missing type for `static` item\n+  --> $DIR/const-no-type.rs:38:8\n+   |\n+LL | static S = Vec::<String>::new();\n+   |        ^ help: provide a type for the item: `S: std::vec::Vec<std::string::String>`\n+\n+error: missing type for `static mut` item\n+  --> $DIR/const-no-type.rs:43:12\n+   |\n+LL | static mut SM = \"abc\";\n+   |            ^^ help: provide a type for the item: `SM: &'static str`\n+\n+error: missing type for `const` item\n+  --> $DIR/const-no-type.rs:14:7\n+   |\n+LL | const C2 = 42;\n+   |       ^^ help: provide a type for the item: `C2: <type>`\n+\n+error: missing type for `static` item\n+  --> $DIR/const-no-type.rs:20:8\n+   |\n+LL | static S2 = \"abc\";\n+   |        ^^ help: provide a type for the item: `S2: <type>`\n+\n+error: missing type for `static mut` item\n+  --> $DIR/const-no-type.rs:26:12\n+   |\n+LL | static mut SM2 = \"abc\";\n+   |            ^^^ help: provide a type for the item: `SM2: <type>`\n+\n+error: aborting due to 6 previous errors\n+"}]}