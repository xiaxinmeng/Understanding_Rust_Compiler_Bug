{"sha": "bff512a90facf2b0064f13737d44c716863f644d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZjUxMmE5MGZhY2YyYjAwNjRmMTM3MzdkNDRjNzE2ODYzZjY0NGQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-06T20:15:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-06T20:17:42Z"}, "message": "rustc: Implement functional record update for structs", "tree": {"sha": "72553ae018b6ed52c06e532346b35f3608d7559d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72553ae018b6ed52c06e532346b35f3608d7559d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bff512a90facf2b0064f13737d44c716863f644d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bff512a90facf2b0064f13737d44c716863f644d", "html_url": "https://github.com/rust-lang/rust/commit/bff512a90facf2b0064f13737d44c716863f644d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bff512a90facf2b0064f13737d44c716863f644d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e3143b34e66ca5157b03d3658d64d7c01563186", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3143b34e66ca5157b03d3658d64d7c01563186", "html_url": "https://github.com/rust-lang/rust/commit/1e3143b34e66ca5157b03d3658d64d7c01563186"}], "stats": {"total": 173, "additions": 127, "deletions": 46}, "files": [{"sha": "daf3e20f469c427edabb0497ea4b42e6a0475f93", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff512a90facf2b0064f13737d44c716863f644d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff512a90facf2b0064f13737d44c716863f644d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bff512a90facf2b0064f13737d44c716863f644d", "patch": "@@ -347,9 +347,7 @@ enum expr_ {\n     expr_mac(mac),\n \n     // A struct literal expression.\n-    //\n-    // XXX: Add functional record update.\n-    expr_struct(@path, ~[field]),\n+    expr_struct(@path, ~[field], option<@expr>),\n \n     // A vector literal constructed from one repeated element.\n     expr_repeat(@expr /* element */, @expr /* count */, mutability)"}, {"sha": "71c23ff4fa6d4e656b8058c2305bd16e9a28fd90", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bff512a90facf2b0064f13737d44c716863f644d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff512a90facf2b0064f13737d44c716863f644d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=bff512a90facf2b0064f13737d44c716863f644d", "patch": "@@ -478,8 +478,10 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n                                          fld.fold_expr(e)),\n           expr_assert(e) => expr_assert(fld.fold_expr(e)),\n           expr_mac(mac) => expr_mac(fold_mac(mac)),\n-          expr_struct(path, fields) => {\n-            expr_struct(fld.fold_path(path), vec::map(fields, fold_field))\n+          expr_struct(path, fields, maybe_expr) => {\n+            expr_struct(fld.fold_path(path),\n+                        vec::map(fields, fold_field),\n+                        option::map(maybe_expr, |x| fld.fold_expr(x)))\n           }\n         }\n }"}, {"sha": "71bd87981bc84df3e86aeef186db076fe559e159", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bff512a90facf2b0064f13737d44c716863f644d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff512a90facf2b0064f13737d44c716863f644d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bff512a90facf2b0064f13737d44c716863f644d", "patch": "@@ -912,18 +912,27 @@ class parser {\n                     self.bump();\n                     let mut fields = ~[];\n                     vec::push(fields, self.parse_field(token::COLON));\n-                    while self.token != token::RBRACE {\n+                    while self.token != token::RBRACE &&\n+                            !self.is_keyword(~\"with\") {\n                         self.expect(token::COMMA);\n-                        if self.token == token::RBRACE {\n+                        if self.token == token::RBRACE ||\n+                                self.is_keyword(~\"with\") {\n                             // Accept an optional trailing comma.\n                             break;\n                         }\n                         vec::push(fields, self.parse_field(token::COLON));\n                     }\n \n+                    let base;\n+                    if self.eat_keyword(~\"with\") {\n+                        base = some(self.parse_expr());\n+                    } else {\n+                        base = none;\n+                    }\n+\n                     hi = pth.span.hi;\n                     self.expect(token::RBRACE);\n-                    ex = expr_struct(pth, fields);\n+                    ex = expr_struct(pth, fields, base);\n                     return self.mk_pexpr(lo, hi, ex);\n                 }\n             }"}, {"sha": "eca571b9ccd3f218b580f5f8c01792ff44271c60", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bff512a90facf2b0064f13737d44c716863f644d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff512a90facf2b0064f13737d44c716863f644d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bff512a90facf2b0064f13737d44c716863f644d", "patch": "@@ -973,11 +973,20 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         }\n         word(s.s, ~\"}\");\n       }\n-      ast::expr_struct(path, fields) => {\n+      ast::expr_struct(path, fields, wth) => {\n         print_path(s, path, true);\n         word(s.s, ~\"{\");\n         commasep_cmnt(s, consistent, fields, print_field, get_span);\n-        word(s.s, ~\",\");\n+        alt wth {\n+            some(expr) => {\n+                if vec::len(fields) > 0u { space(s.s); }\n+                ibox(s, indent_unit);\n+                word_space(s, ~\"with\");\n+                print_expr(s, expr);\n+                end(s);\n+            }\n+            _ => word(s.s, ~\",\")\n+        }\n         word(s.s, ~\"}\");\n       }\n       ast::expr_tup(exprs) => {"}, {"sha": "1c92f26cabe353a9fe57a2b656d6ecab00eb69bb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff512a90facf2b0064f13737d44c716863f644d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff512a90facf2b0064f13737d44c716863f644d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=bff512a90facf2b0064f13737d44c716863f644d", "patch": "@@ -364,9 +364,10 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         for flds.each |f| { v.visit_expr(f.node.expr, e, v); }\n         visit_expr_opt(base, e, v);\n       }\n-      expr_struct(p, flds) => {\n+      expr_struct(p, flds, base) => {\n         visit_path(p, e, v);\n         for flds.each |f| { v.visit_expr(f.node.expr, e, v); }\n+        visit_expr_opt(base, e, v);\n       }\n       expr_tup(elts) => for elts.each |el| { v.visit_expr(el, e, v); }\n       expr_call(callee, args, _) => {"}, {"sha": "38942b407507c6857bb1339e02fa0f46000dd402", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bff512a90facf2b0064f13737d44c716863f644d/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff512a90facf2b0064f13737d44c716863f644d/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=bff512a90facf2b0064f13737d44c716863f644d", "patch": "@@ -1071,7 +1071,8 @@ class liveness {\n             }\n           }\n \n-          expr_struct(_, fields) => {\n+          expr_struct(_, fields, with_expr) => {\n+            let succ = self.propagate_through_opt_expr(with_expr, succ);\n             do fields.foldr(succ) |field, succ| {\n                 self.propagate_through_expr(field.node.expr, succ)\n             }"}, {"sha": "9f17e38ba54078e41084bc6bb760c4835af266f8", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bff512a90facf2b0064f13737d44c716863f644d/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff512a90facf2b0064f13737d44c716863f644d/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=bff512a90facf2b0064f13737d44c716863f644d", "patch": "@@ -4272,7 +4272,7 @@ class Resolver {\n                                       visitor);\n             }\n \n-            expr_struct(path, _) => {\n+            expr_struct(path, _, _) => {\n                 // Resolve the path to the structure it goes to.\n                 //\n                 // XXX: We might want to support explicit type parameters in"}, {"sha": "6fecdead0485e07ee3be1adc89f9b41932d64b16", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bff512a90facf2b0064f13737d44c716863f644d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff512a90facf2b0064f13737d44c716863f644d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=bff512a90facf2b0064f13737d44c716863f644d", "patch": "@@ -3392,7 +3392,8 @@ fn trans_rec(bcx: block, fields: ~[ast::field],\n }\n \n fn trans_struct(block_context: block, span: span, fields: ~[ast::field],\n-                id: ast::node_id, dest: dest) -> block {\n+                base: option<@ast::expr>, id: ast::node_id, dest: dest)\n+             -> block {\n \n     let _instruction_context = block_context.insn_ctxt(~\"trans_struct\");\n     let mut block_context = block_context;\n@@ -3433,6 +3434,18 @@ fn trans_struct(block_context: block, span: span, fields: ~[ast::field],\n         }\n     }\n \n+    // If the class has a destructor, our GEP is a little more\n+    // complicated.\n+    fn get_field(block_context: block, dest_address: ValueRef,\n+                 class_id: ast::def_id, index: uint) -> ValueRef {\n+        if ty::ty_dtor(block_context.tcx(), class_id).is_some() {\n+            return GEPi(block_context,\n+                        GEPi(block_context, dest_address, ~[0, 1]),\n+                        ~[0, index]);\n+        }\n+        return GEPi(block_context, dest_address, ~[0, index]);\n+    }\n+\n     // Now translate each field.\n     let mut temp_cleanups = ~[];\n     for fields.each |field| {\n@@ -3455,16 +3468,7 @@ fn trans_struct(block_context: block, span: span, fields: ~[ast::field],\n             }\n         }\n \n-        // If the class has a destructor, our GEP is a little more\n-        // complicated.\n-        let dest;\n-        if ty::ty_dtor(block_context.tcx(), class_id).is_some() {\n-            dest = GEPi(block_context,\n-                        GEPi(block_context, dest_address, ~[0, 1]),\n-                        ~[0, index]);\n-        } else {\n-            dest = GEPi(block_context, dest_address, ~[0, index]);\n-        }\n+        let dest = get_field(block_context, dest_address, class_id, index);\n \n         block_context = trans_expr_save_in(block_context,\n                                            field.node.expr,\n@@ -3476,6 +3480,42 @@ fn trans_struct(block_context: block, span: span, fields: ~[ast::field],\n         vec::push(temp_cleanups, dest);\n     }\n \n+    match base {\n+        some(base_expr) => {\n+            let { bcx: bcx, val: llbasevalue } =\n+                trans_temp_expr(block_context, base_expr);\n+            block_context = bcx;\n+\n+            // Copy over inherited fields.\n+            for class_fields.eachi |i, class_field| {\n+                let exists = do vec::any(fields) |provided_field| {\n+                    str::eq(provided_field.node.ident, class_field.ident)\n+                };\n+                if exists {\n+                    again;\n+                }\n+                let lldestfieldvalue = get_field(block_context,\n+                                                 dest_address,\n+                                                 class_id,\n+                                                 i);\n+                let llbasefieldvalue = GEPi(block_context,\n+                                            llbasevalue,\n+                                            ~[0, i]);\n+                let field_type = ty::lookup_field_type(block_context.tcx(),\n+                                                       class_id,\n+                                                       class_field.id,\n+                                                       substitutions);\n+                let llbasefieldvalue = load_if_immediate(block_context,\n+                                                         llbasefieldvalue,\n+                                                         field_type);\n+                block_context = copy_val(block_context, INIT,\n+                                         lldestfieldvalue, llbasefieldvalue,\n+                                         field_type);\n+            }\n+        }\n+        none => ()\n+    }\n+\n     // Now revoke the cleanups, as we pass responsibility for the data\n     // structure onto the caller.\n     for temp_cleanups.each |temp_cleanup| {\n@@ -3633,8 +3673,8 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n           ast::expr_rec(args, base) => {\n             return trans_rec(bcx, args, base, e.id, dest);\n           }\n-          ast::expr_struct(_, fields) => {\n-            return trans_struct(bcx, e.span, fields, e.id, dest);\n+          ast::expr_struct(_, fields, base) => {\n+            return trans_struct(bcx, e.span, fields, base, e.id, dest);\n           }\n           ast::expr_tup(args) => { return trans_tup(bcx, args, dest); }\n           ast::expr_vstore(e, v) => {"}, {"sha": "c875ac8c386404ec4dd88c0b5d7cdf28ab954329", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bff512a90facf2b0064f13737d44c716863f644d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff512a90facf2b0064f13737d44c716863f644d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=bff512a90facf2b0064f13737d44c716863f644d", "patch": "@@ -1699,7 +1699,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           }\n         }\n       }\n-      ast::expr_struct(path, fields) => {\n+      ast::expr_struct(path, fields, base_expr) => {\n         // Resolve the path.\n         let class_id;\n         alt tcx.def_map.find(id) {\n@@ -1804,27 +1804,36 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             }\n         }\n \n-        // Make sure the programmer specified all the fields.\n-        assert fields_found <= class_fields.len();\n-        if fields_found < class_fields.len() {\n-            let mut missing_fields = ~[];\n-            for class_fields.each |class_field| {\n-                let name = *class_field.ident;\n-                let (_, seen) = class_field_map.get(name);\n-                if !seen {\n-                    vec::push(missing_fields,\n-                              ~\"`\" + name + ~\"`\");\n+        match base_expr {\n+            none => {\n+                // Make sure the programmer specified all the fields.\n+                assert fields_found <= class_fields.len();\n+                if fields_found < class_fields.len() {\n+                    let mut missing_fields = ~[];\n+                    for class_fields.each |class_field| {\n+                        let name = *class_field.ident;\n+                        let (_, seen) = class_field_map.get(name);\n+                        if !seen {\n+                            vec::push(missing_fields,\n+                                      ~\"`\" + name + ~\"`\");\n+                        }\n+                    }\n+\n+                    tcx.sess.span_err(expr.span,\n+                                      fmt!{\"missing field%s: %s\",\n+                                           if missing_fields.len() == 1 {\n+                                               ~\"\"\n+                                           } else {\n+                                               ~\"s\"\n+                                           },\n+                                           str::connect(missing_fields,\n+                                                        ~\", \")});\n                 }\n             }\n-\n-            tcx.sess.span_err(expr.span,\n-                              fmt!{\"missing field%s: %s\",\n-                                   if missing_fields.len() == 1 {\n-                                       ~\"\"\n-                                   } else {\n-                                       ~\"s\"\n-                                   },\n-                                   str::connect(missing_fields, ~\", \")});\n+            some(base_expr) => {\n+                // Just check the base expression.\n+                check_expr(fcx, base_expr, some(struct_type));\n+            }\n         }\n \n         // Write in the resulting type."}, {"sha": "50f746a436a0071b346d39c1f6fa60aab6e42808", "filename": "src/test/run-pass/functional-struct-update.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bff512a90facf2b0064f13737d44c716863f644d/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff512a90facf2b0064f13737d44c716863f644d/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs?ref=bff512a90facf2b0064f13737d44c716863f644d", "patch": "@@ -0,0 +1,12 @@\n+struct Foo {\n+    x: int;\n+    y: int;\n+}\n+\n+fn main() {\n+    let a = Foo { x: 1, y: 2 };\n+    let b = Foo { x: 3 with a };\n+    let c = Foo { x: 4, with a };\n+    io::println(fmt!(\"%? %?\", b, c));\n+}\n+"}]}