{"sha": "91db25bdef31781d9ef6878c5c5176975430c703", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZGIyNWJkZWYzMTc4MWQ5ZWY2ODc4YzVjNTE3Njk3NTQzMGM3MDM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-09T12:54:37Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-09T12:54:37Z"}, "message": "Rename `destructure` method to `into_alloc_id_kind`", "tree": {"sha": "d61a90ad0e464e24ef68d3da20df486ffb3ea9d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d61a90ad0e464e24ef68d3da20df486ffb3ea9d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91db25bdef31781d9ef6878c5c5176975430c703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91db25bdef31781d9ef6878c5c5176975430c703", "html_url": "https://github.com/rust-lang/rust/commit/91db25bdef31781d9ef6878c5c5176975430c703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91db25bdef31781d9ef6878c5c5176975430c703/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81f5de7f05fef5ee2361db44788bad504a029d35", "url": "https://api.github.com/repos/rust-lang/rust/commits/81f5de7f05fef5ee2361db44788bad504a029d35", "html_url": "https://github.com/rust-lang/rust/commit/81f5de7f05fef5ee2361db44788bad504a029d35"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "f068bc839d1eabac29010b050e34ef28ac90ab58", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/91db25bdef31781d9ef6878c5c5176975430c703/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db25bdef31781d9ef6878c5c5176975430c703/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=91db25bdef31781d9ef6878c5c5176975430c703", "patch": "@@ -113,7 +113,7 @@ impl AllocId {\n     fn index(self) -> u64 {\n         self.0 & ((1 << 63) - 1)\n     }\n-    fn destructure(self) -> AllocIdKind {\n+    fn into_alloc_id_kind(self) -> AllocIdKind {\n         match self.discriminant() {\n             0 => AllocIdKind::Function(self.index() as usize),\n             1 => AllocIdKind::Runtime(self.index()),\n@@ -124,13 +124,13 @@ impl AllocId {\n \n impl fmt::Display for AllocId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{:?}\", self.destructure())\n+        write!(f, \"{:?}\", self.into_alloc_id_kind())\n     }\n }\n \n impl fmt::Debug for AllocId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{:?}\", self.destructure())\n+        write!(f, \"{:?}\", self.into_alloc_id_kind())\n     }\n }\n \n@@ -380,7 +380,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             return err!(DeallocateNonBasePtr);\n         }\n \n-        let alloc_id = match ptr.alloc_id.destructure() {\n+        let alloc_id = match ptr.alloc_id.into_alloc_id_kind() {\n             AllocIdKind::Function(_) =>\n                 return err!(DeallocatedWrongMemoryKind(\"function\".to_string(), format!(\"{:?}\", kind))),\n             AllocIdKind::Runtime(id) => id,\n@@ -666,7 +666,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n /// Allocation accessors\n impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n     pub fn get(&self, id: AllocId) -> EvalResult<'tcx, &Allocation<M::MemoryKinds>> {\n-        match id.destructure() {\n+        match id.into_alloc_id_kind() {\n             AllocIdKind::Function(_) => err!(DerefFunctionPointer),\n             AllocIdKind::Runtime(id) => match self.alloc_map.get(&id) {\n                 Some(alloc) => Ok(alloc),\n@@ -676,7 +676,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n     }\n     \n     fn get_mut_unchecked(&mut self, id: AllocId) -> EvalResult<'tcx, &mut Allocation<M::MemoryKinds>> {\n-        match id.destructure() {\n+        match id.into_alloc_id_kind() {\n             AllocIdKind::Function(_) => err!(DerefFunctionPointer),\n             AllocIdKind::Runtime(id) => match self.alloc_map.get_mut(&id) {\n                 Some(alloc) => Ok(alloc),\n@@ -699,7 +699,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             return err!(InvalidFunctionPointer);\n         }\n         debug!(\"reading fn ptr: {}\", ptr.alloc_id);\n-        match ptr.alloc_id.destructure() {\n+        match ptr.alloc_id.into_alloc_id_kind() {\n             AllocIdKind::Function(id) => Ok(self.functions[id]),\n             AllocIdKind::Runtime(_) => err!(ExecuteMemory),\n         }\n@@ -723,7 +723,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             let prefix_len = msg.len();\n             let mut relocations = vec![];\n \n-            let alloc = match id.destructure() {\n+            let alloc = match id.into_alloc_id_kind() {\n                 AllocIdKind::Function(id) => {\n                     trace!(\"{} {}\", msg, self.functions[id]);\n                     continue;\n@@ -867,7 +867,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         trace!(\"mark_static_initalized {:?}, mutability: {:?}\", alloc_id, mutability);\n         // do not use `self.get_mut(alloc_id)` here, because we might have already marked a\n         // sub-element or have circular pointers (e.g. `Rc`-cycles)\n-        let alloc_id = match alloc_id.destructure() {\n+        let alloc_id = match alloc_id.into_alloc_id_kind() {\n             AllocIdKind::Function(_) => return Ok(()),\n             AllocIdKind::Runtime(id) => id,\n         };"}]}