{"sha": "619ca76731e7209288fd3ebf1ae243c050486c12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOWNhNzY3MzFlNzIwOTI4OGZkM2ViZjFhZTI0M2MwNTA0ODZjMTI=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-09-07T23:25:31Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-09-07T23:25:31Z"}, "message": "Refactoring: use inner function", "tree": {"sha": "4c382434a6735651562739e405b0664b1c1a002c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c382434a6735651562739e405b0664b1c1a002c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/619ca76731e7209288fd3ebf1ae243c050486c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/619ca76731e7209288fd3ebf1ae243c050486c12", "html_url": "https://github.com/rust-lang/rust/commit/619ca76731e7209288fd3ebf1ae243c050486c12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/619ca76731e7209288fd3ebf1ae243c050486c12/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d30ef7818b9ed562f2c48f3d6d15d90253ae732", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d30ef7818b9ed562f2c48f3d6d15d90253ae732", "html_url": "https://github.com/rust-lang/rust/commit/3d30ef7818b9ed562f2c48f3d6d15d90253ae732"}], "stats": {"total": 69, "additions": 21, "deletions": 48}, "files": [{"sha": "c27acdd22365d11558197e4eaa122e82db1a97c3", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 21, "deletions": 48, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/619ca76731e7209288fd3ebf1ae243c050486c12/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619ca76731e7209288fd3ebf1ae243c050486c12/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=619ca76731e7209288fd3ebf1ae243c050486c12", "patch": "@@ -1150,8 +1150,6 @@ fn detect_same_item_push<'tcx>(\n             {\n                 // Make sure that the push does not involve possibly mutating values\n                 if let PatKind::Wild = pat.kind {\n-                    let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n-                    let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n                     if let ExprKind::Path(ref qpath) = pushed_item.kind {\n                         match qpath_res(cx, qpath, pushed_item.hir_id) {\n                             // immutable bindings that are initialized with literal or constant\n@@ -1167,33 +1165,11 @@ fn detect_same_item_push<'tcx>(\n                                     then {\n                                         match init.kind {\n                                             // immutable bindings that are initialized with literal\n-                                            ExprKind::Lit(..) => {\n-                                                span_lint_and_help(\n-                                                    cx,\n-                                                    SAME_ITEM_PUSH,\n-                                                    vec.span,\n-                                                    \"it looks like the same item is being pushed into this Vec\",\n-                                                    None,\n-                                                    &format!(\n-                                                        \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                                                        item_str, vec_str, item_str\n-                                                    ),\n-                                                )\n-                                            },\n+                                            ExprKind::Lit(..) => emit_lint(cx, vec, pushed_item),\n                                             // immutable bindings that are initialized with constant\n                                             ExprKind::Path(ref path) => {\n                                                 if let Res::Def(DefKind::Const, ..) = qpath_res(cx, path, init.hir_id) {\n-                                                    span_lint_and_help(\n-                                                        cx,\n-                                                        SAME_ITEM_PUSH,\n-                                                        vec.span,\n-                                                        \"it looks like the same item is being pushed into this Vec\",\n-                                                        None,\n-                                                        &format!(\n-                                                            \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                                                            item_str, vec_str, item_str\n-                                                        ),\n-                                                    )\n+                                                    emit_lint(cx, vec, pushed_item);\n                                                 }\n                                             }\n                                             _ => {},\n@@ -1202,37 +1178,34 @@ fn detect_same_item_push<'tcx>(\n                                 }\n                             },\n                             // constant\n-                            Res::Def(DefKind::Const, ..) => span_lint_and_help(\n-                                cx,\n-                                SAME_ITEM_PUSH,\n-                                vec.span,\n-                                \"it looks like the same item is being pushed into this Vec\",\n-                                None,\n-                                &format!(\n-                                    \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                                    item_str, vec_str, item_str\n-                                ),\n-                            ),\n+                            Res::Def(DefKind::Const, ..) => emit_lint(cx, vec, pushed_item),\n                             _ => {},\n                         }\n                     } else if let ExprKind::Lit(..) = pushed_item.kind {\n                         // literal\n-                        span_lint_and_help(\n-                            cx,\n-                            SAME_ITEM_PUSH,\n-                            vec.span,\n-                            \"it looks like the same item is being pushed into this Vec\",\n-                            None,\n-                            &format!(\n-                                \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                                item_str, vec_str, item_str\n-                            ),\n-                        )\n+                        emit_lint(cx, vec, pushed_item);\n                     }\n                 }\n             }\n         }\n     }\n+\n+    fn emit_lint(cx: &LateContext<'_>, vec: &Expr<'_>, pushed_item: &Expr<'_>) {\n+        let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n+        let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n+\n+        span_lint_and_help(\n+            cx,\n+            SAME_ITEM_PUSH,\n+            vec.span,\n+            \"it looks like the same item is being pushed into this Vec\",\n+            None,\n+            &format!(\n+                \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                item_str, vec_str, item_str\n+            ),\n+        )\n+    }\n }\n \n /// Checks for looping over a range and then indexing a sequence with it."}]}