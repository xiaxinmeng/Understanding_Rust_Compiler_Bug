{"sha": "1da51cca9ea13aa9dea06d8434d55aac95541c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYTUxY2NhOWVhMTNhYTlkZWEwNmQ4NDM0ZDU1YWFjOTU1NDFjNjM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-07-14T01:55:39Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-07-14T02:06:06Z"}, "message": "Fix minor typo in std::path documentation.\n\nReplace all `'C' as u8` with `b'C'`.", "tree": {"sha": "6c7bd290d13a10baf5931f50a759ec35fbb29c8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c7bd290d13a10baf5931f50a759ec35fbb29c8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1da51cca9ea13aa9dea06d8434d55aac95541c63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZaCcPAAoJEP72yAUdDgE8EugP/RTZhOXW1ljcTMaf0QciKeyX\nUQbWoiPZ6pFWdp4JMjWyCFXixXBWvcRd6bo8CHyY0fvz9+Vl8bLbvRJFSrwNKEvI\ndgfM/6h997//9CMq2AqSZ2Gipi29oFBqrduKQwHSP0Fx6Lczit0PZ4sH1NyLK5mn\nFwaWi0K3kxUAR3THITikSnzp3FWx+FGewh1ZeKCBNcfFsclbTE2fb08BUH9oKk+A\n5FT1T/QedmiA2sQviLL3uYxR85IICxJRYvE46Dcotg5SgtAw2JddLDjiYGc32mcw\nlrV8p7qr55wsR0fPRV173VZ8rGkKnUh977zNTKExd1muD8giCZWlvIHgwL0MAJPf\ngiVfUfHLwm50rBB85B/z3i9mFNeVq1jAYePmz9lMtr5xhWqVTgYT0sT546FsPi61\nEPnY47c7g8N3qUmvWol4tqZlOkAEWXDQrUbDXC8yqdMBYNN+K92PUU0v2LZapWTx\nekArdLtEiy/rlWOlLkQmCKSIEoe84LbKKE2cR9lzj6LtT+vfPbWMrYoDvmcfOVIM\nEufgVt86a3aaubEkA6eYmKUw7ZVgaHM0CydxSE29aMJQUwnUlN1UzTxeR85QDVfE\nOWEB3E4auHuPhNaEqNilXNMPt8v0teqSTSIfSIOTnOSX08ZHNyzLpF7QBlyw4G3U\nCs75f3XGGuDfDo/R+2n9\n=8A5J\n-----END PGP SIGNATURE-----", "payload": "tree 6c7bd290d13a10baf5931f50a759ec35fbb29c8b\nparent b2c0707872082c890f332178f59fd02eea5b98f3\nauthor kennytm <kennytm@gmail.com> 1499997339 +0800\ncommitter kennytm <kennytm@gmail.com> 1499997966 +0800\n\nFix minor typo in std::path documentation.\n\nReplace all `'C' as u8` with `b'C'`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1da51cca9ea13aa9dea06d8434d55aac95541c63", "html_url": "https://github.com/rust-lang/rust/commit/1da51cca9ea13aa9dea06d8434d55aac95541c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1da51cca9ea13aa9dea06d8434d55aac95541c63/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c0707872082c890f332178f59fd02eea5b98f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c0707872082c890f332178f59fd02eea5b98f3", "html_url": "https://github.com/rust-lang/rust/commit/b2c0707872082c890f332178f59fd02eea5b98f3"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "bb1ba8a771d612108919f2c15120fed757557bca", "filename": "src/libstd/path.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1da51cca9ea13aa9dea06d8434d55aac95541c63/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da51cca9ea13aa9dea06d8434d55aac95541c63/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=1da51cca9ea13aa9dea06d8434d55aac95541c63", "patch": "@@ -135,12 +135,12 @@ use sys::path::{is_sep_byte, is_verbatim_sep, MAIN_SEP_STR, parse_prefix};\n ///            get_path_prefix(r\"\\\\?\\pictures\\kittens\"));\n /// assert_eq!(VerbatimUNC(OsStr::new(\"server\"), OsStr::new(\"share\")),\n ///            get_path_prefix(r\"\\\\?\\UNC\\server\\share\"));\n-/// assert_eq!(VerbatimDisk('C' as u8), get_path_prefix(r\"\\\\?\\c:\\\"));\n+/// assert_eq!(VerbatimDisk(b'C'), get_path_prefix(r\"\\\\?\\c:\\\"));\n /// assert_eq!(DeviceNS(OsStr::new(\"BrainInterface\")),\n ///            get_path_prefix(r\"\\\\.\\BrainInterface\"));\n /// assert_eq!(UNC(OsStr::new(\"server\"), OsStr::new(\"share\")),\n ///            get_path_prefix(r\"\\\\server\\share\"));\n-/// assert_eq!(Disk('C' as u8), get_path_prefix(r\"C:\\Users\\Rust\\Pictures\\Ferris\"));\n+/// assert_eq!(Disk(b'C'), get_path_prefix(r\"C:\\Users\\Rust\\Pictures\\Ferris\"));\n /// # }\n /// ```\n #[derive(Copy, Clone, Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]\n@@ -235,10 +235,10 @@ impl<'a> Prefix<'a> {\n     ///\n     /// assert!(Verbatim(OsStr::new(\"pictures\")).is_verbatim());\n     /// assert!(VerbatimUNC(OsStr::new(\"server\"), OsStr::new(\"share\")).is_verbatim());\n-    /// assert!(VerbatimDisk('C' as u8).is_verbatim());\n+    /// assert!(VerbatimDisk(b'C').is_verbatim());\n     /// assert!(!DeviceNS(OsStr::new(\"BrainInterface\")).is_verbatim());\n     /// assert!(!UNC(OsStr::new(\"server\"), OsStr::new(\"share\")).is_verbatim());\n-    /// assert!(!Disk('C' as u8).is_verbatim());\n+    /// assert!(!Disk(b'C').is_verbatim());\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -401,7 +401,7 @@ enum State {\n /// let path = Path::new(r\"c:\\you\\later\\\");\n /// match path.components().next().unwrap() {\n ///     Component::Prefix(prefix_component) => {\n-///         assert_eq!(Prefix::Disk('C' as u8), prefix_component.kind());\n+///         assert_eq!(Prefix::Disk(b'C'), prefix_component.kind());\n ///         assert_eq!(OsStr::new(\"c:\"), prefix_component.as_os_str());\n ///     }\n ///     _ => unreachable!(),\n@@ -1040,7 +1040,7 @@ impl<'a> cmp::Ord for Components<'a> {\n /// [`Deref`]: ../ops/trait.Deref.html\n ///\n /// More details about the overall approach can be found in\n-/// the module documentation.\n+/// the [module documentation](index.html).\n ///\n /// # Examples\n ///\n@@ -1186,7 +1186,7 @@ impl PathBuf {\n         self.inner.push(path);\n     }\n \n-    /// Truncate `self` to [`self.parent`].\n+    /// Truncates `self` to [`self.parent`].\n     ///\n     /// Returns `false` and does nothing if [`self.file_name`] is [`None`].\n     /// Otherwise, returns `true`.\n@@ -1512,7 +1512,7 @@ impl AsRef<OsStr> for PathBuf {\n /// [`PathBuf`]: struct.PathBuf.html\n ///\n /// More details about the overall approach can be found in\n-/// the module documentation.\n+/// the [module documentation](index.html).\n ///\n /// # Examples\n ///\n@@ -1689,7 +1689,7 @@ impl Path {\n         self.has_root() && (cfg!(unix) || cfg!(target_os = \"redox\") || self.prefix().is_some())\n     }\n \n-    /// Return `false` if the `Path` is relative, i.e. not absolute.\n+    /// Returns `true` if the `Path` is relative, i.e. not absolute.\n     ///\n     /// See [`is_absolute`]'s documentation for more details.\n     ///\n@@ -2019,7 +2019,7 @@ impl Path {\n     /// * Repeated separators are ignored, so `a/b` and `a//b` both have\n     ///   `a` and `b` as components.\n     ///\n-    /// * Occurentces of `.` are normalized away, exept if they are at the\n+    /// * Occurences of `.` are normalized away, except if they are at the\n     ///   beginning of the path. For example, `a/./b`, `a/b/`, `a/b/.` and\n     ///   `a/b` all have `a` and `b` as components, but `./a/b` starts with\n     ///   an additional [`CurDir`] component."}]}