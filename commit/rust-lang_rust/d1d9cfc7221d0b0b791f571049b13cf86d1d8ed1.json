{"sha": "d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZDljZmM3MjIxZDBiMGI3OTFmNTcxMDQ5YjEzY2Y4NmQxZDhlZDE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-03T15:22:19Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-03T15:22:19Z"}, "message": "Don't add a new -Z flag, reuse -Zunstable-options", "tree": {"sha": "7d7a3df4260c9509c31810196a0fb92725ec73e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d7a3df4260c9509c31810196a0fb92725ec73e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAln8iasACgkQpp+NIls6\n19mp9w//Y/9DDsCk5yg9iKVJIdSi4Mq9U8Tquhb5USxZfUpkEuuHyGhTxC495RZo\ntlOKsioulwJbS9HtHFU52lTUU7DMqOWNkxMiHeabVb2ar2MZgf1yfKE3NZ3Ntg7K\nj03/VOC2o5hwKGNyCTXhWmzoLPbWTXtPhT4E42XnNRDXXdLtz3zDvLlS9Tm+bHNb\nEpG5mISnvsY7Gu9NketKjs45TeVt6o/BRyRJlZW6sF+t9KfA1p3wb2q8zXyobnhb\nGAUmzA4cOqJqukyV5yPKWcWHAzynKYAjbcz18pYaaxji1tIhc6dSl78GBPepocSl\ncdKakZLZpJmdYtnwVMf/WXrizFpO3CKenOIEHFy2d2aLl3Mgjn0izdFnFglP/Hde\nOqsqoZYF6HgGNl7FBeYB80CX5F0oWtaGrxcF3SLLZmluClleRhXq3e6hEqY7MzvP\ns3YmC0S5iJh9qbpZW6iMQlbdp/YG2Z+d0LG2n6iGAN7ktDM2IatSoUMI7hR33pH9\nSL/uDascE1Wo4ij8lTic7xYQwdO/Us5z3U2KNCtELsB9NShE/WweU03OWsO7wY4S\njP5TRS2EeLX1GYoppIcbMRRmCR5QZtYZ4yrQXLHzAo9lQPvkw7hJQbdEgRUFE3Si\nHjulR2t3HarDeuss8bj1puN5EKm2AMlAGFKv6Rv88qABR0vdK2Y=\n=M4O+\n-----END PGP SIGNATURE-----", "payload": "tree 7d7a3df4260c9509c31810196a0fb92725ec73e0\nparent c7cb2cf8b5a9c7b5b57128a4969b0b577ecaf5d9\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1509722539 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1509722539 +0100\n\nDon't add a new -Z flag, reuse -Zunstable-options\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1", "html_url": "https://github.com/rust-lang/rust/commit/d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7cb2cf8b5a9c7b5b57128a4969b0b577ecaf5d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cb2cf8b5a9c7b5b57128a4969b0b577ecaf5d9", "html_url": "https://github.com/rust-lang/rust/commit/c7cb2cf8b5a9c7b5b57128a4969b0b577ecaf5d9"}], "stats": {"total": 114, "additions": 56, "deletions": 58}, "files": [{"sha": "7a5b3afe5ae7da48eb27b5a4914ccd3d56fbb8cb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 54, "deletions": 56, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1", "patch": "@@ -1104,8 +1104,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable ThinLTO when possible\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether #[inline] functions are in all cgus\"),\n-    pretty_json_error_format: bool = (false, parse_bool, [UNTRACKED],\n-          \"allow `--error-format=pretty-json` (used for compiletest)\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -1477,7 +1475,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n \n     let debugging_opts = build_debugging_options(matches, error_format);\n \n-    if !debugging_opts.pretty_json_error_format && error_format == ErrorOutputType::Json(true) {\n+    if !debugging_opts.unstable_options && error_format == ErrorOutputType::Json(true) {\n         early_error(ErrorOutputType::Json(false), \"--error-format=pretty-json is unstable \\\n                                                    (use -Zpretty-json-error-format)\");\n     }\n@@ -2262,46 +2260,46 @@ mod tests {\n         let mut v5 = super::basic_options();\n \n         // Reference\n-        v1.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n+        v1.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n \n         // Native changed\n-        v2.search_paths.add_path(\"native=XXX\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n+        v2.search_paths.add_path(\"native=XXX\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n \n         // Crate changed\n-        v2.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"crate=XXX\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n+        v2.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"crate=XXX\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n \n         // Dependency changed\n-        v3.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"dependency=XXX\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n+        v3.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"dependency=XXX\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n \n         // Framework changed\n-        v4.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"framework=XXX\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n+        v4.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"framework=XXX\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n \n         // All changed\n-        v5.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v5.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v5.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v5.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v5.search_paths.add_path(\"all=XXX\", super::ErrorOutputType::Json);\n+        v5.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v5.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v5.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v5.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v5.search_paths.add_path(\"all=XXX\", super::ErrorOutputType::Json(false));\n \n         assert!(v1.dep_tracking_hash() != v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() != v3.dep_tracking_hash());\n@@ -2324,29 +2322,29 @@ mod tests {\n         let mut v4 = super::basic_options();\n \n         // Reference\n-        v1.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v1.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n-\n-        v2.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n-\n-        v3.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v3.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n-\n-        v4.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json);\n-        v4.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json);\n+        v1.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v1.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+\n+        v2.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+\n+        v3.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v3.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+\n+        v4.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+        v4.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n \n         assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() == v3.dep_tracking_hash());"}, {"sha": "ad501e668095ae86cade1f29b49da5929e08a7ca", "filename": "src/test/ui/lint/unused_parens_json_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs?ref=d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --error-format pretty-json -Zpretty_json_error_format\n+// compile-flags: --error-format pretty-json -Zunstable-options\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested"}, {"sha": "27232c4fec4ad89590c882df463e1bef7faaae28", "filename": "src/test/ui/lint/use_suggestion_json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs?ref=d1d9cfc7221d0b0b791f571049b13cf86d1d8ed1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --error-format pretty-json -Zpretty_json_error_format\n+// compile-flags: --error-format pretty-json -Zunstable-options\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested"}]}