{"sha": "0e67c0134fbb7764ed7bd1532b0e15f1bfd17044", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNjdjMDEzNGZiYjc3NjRlZDdiZDE1MzJiMGUxNWYxYmZkMTcwNDQ=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-17T10:06:56Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-17T10:08:45Z"}, "message": "make float_cmp check for zero", "tree": {"sha": "701452f7832ba704c2240684e359f5e4e8922dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/701452f7832ba704c2240684e359f5e4e8922dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e67c0134fbb7764ed7bd1532b0e15f1bfd17044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e67c0134fbb7764ed7bd1532b0e15f1bfd17044", "html_url": "https://github.com/rust-lang/rust/commit/0e67c0134fbb7764ed7bd1532b0e15f1bfd17044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e67c0134fbb7764ed7bd1532b0e15f1bfd17044/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e354fdc3e8b5dbf8692ead6760ff36903cf952f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e354fdc3e8b5dbf8692ead6760ff36903cf952f8", "html_url": "https://github.com/rust-lang/rust/commit/e354fdc3e8b5dbf8692ead6760ff36903cf952f8"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "33c34eb9b8447e957d514d4e317db986bf2c2e1b", "filename": "src/misc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e67c0134fbb7764ed7bd1532b0e15f1bfd17044/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e67c0134fbb7764ed7bd1532b0e15f1bfd17044/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=0e67c0134fbb7764ed7bd1532b0e15f1bfd17044", "patch": "@@ -9,6 +9,7 @@ use rustc::middle::ty;\n use std::borrow::Cow;\n \n use utils::{match_path, snippet, snippet_block, span_lint, span_help_and_lint, walk_ptrs_ty};\n+use consts::constant;\n \n /// Handles uncategorized lints\n /// Currently handles linting of if-let-able matches\n@@ -147,6 +148,10 @@ impl LintPass for FloatCmp {\n         if let ExprBinary(ref cmp, ref left, ref right) = expr.node {\n             let op = cmp.node;\n             if (op == BiEq || op == BiNe) && (is_float(cx, left) || is_float(cx, right)) {\n+                if constant(cx, left).or_else(|| constant(cx, right)).map_or(\n+                        false, |c| c.as_float().map_or(false, |f| f == 0.0)) {\n+                    return;\n+                }\n                 span_lint(cx, FLOAT_CMP, expr.span, &format!(\n                     \"{}-comparison of f32 or f64 detected. Consider changing this to \\\n                      `abs({} - {}) < epsilon` for some suitable value of epsilon\","}, {"sha": "067ec2818bf784a5b3f7e0396ccfb93c1493987d", "filename": "tests/compile-fail/float_cmp.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e67c0134fbb7764ed7bd1532b0e15f1bfd17044/tests%2Fcompile-fail%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e67c0134fbb7764ed7bd1532b0e15f1bfd17044/tests%2Fcompile-fail%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffloat_cmp.rs?ref=0e67c0134fbb7764ed7bd1532b0e15f1bfd17044", "patch": "@@ -13,22 +13,30 @@ fn twice<T>(x : T) -> T where T : Add<T, Output = T>, T : Copy {\n #[deny(float_cmp)]\n #[allow(unused)]\n fn main() {\n-    ZERO == 0f32; //~ERROR ==-comparison of f32 or f64\n-    ZERO == 0.0; //~ERROR ==-comparison of f32 or f64\n+    ZERO == 0f32; //no error, comparison with zero is ok\n+    ZERO == 0.0; //no error, comparison with zero is ok\n     ZERO + ZERO != 1.0; //~ERROR !=-comparison of f32 or f64\n \n-    ONE != 0.0; //~ERROR\n+    ONE == 1f32; //~ERROR ==-comparison of f32 or f64\n+    ONE == (1.0 + 0.0); //~ERROR ==-comparison of f32 or f64\n+\n+    ONE + ONE == (ZERO + ONE + ONE); //~ERROR ==-comparison of f32 or f64\n+\n+    ONE != 2.0; //~ERROR !=-comparison of f32 or f64\n+    ONE != 0.0; // no error, comparison with zero is ok\n     twice(ONE) != ONE; //~ERROR !=-comparison of f32 or f64\n-    ONE as f64 != 0.0; //~ERROR !=-comparison of f32 or f64\n+    ONE as f64 != 2.0; //~ERROR !=-comparison of f32 or f64\n+    ONE as f64 != 0.0; // no error, comparison with zero is ok\n \n     let x : f64 = 1.0;\n \n     x == 1.0; //~ERROR ==-comparison of f32 or f64\n-    x != 0f64; //~ERROR !=-comparison of f32 or f64\n+    x != 0f64; // no error, comparison with zero is ok\n \n     twice(x) != twice(ONE as f64); //~ERROR !=-comparison of f32 or f64\n \n-    x < 0.0;\n+\n+    x < 0.0; // no errors, lower or greater comparisons need no fuzzyness\n     x > 0.0;\n     x <= 0.0;\n     x >= 0.0;"}]}