{"sha": "972afffded3957c3891116a9a81ac9b049e28ad4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MmFmZmZkZWQzOTU3YzM4OTExMTZhOWE4MWFjOWIwNDllMjhhZDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-30T17:03:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-30T17:03:26Z"}, "message": "Merge #4222\n\n4222: Introduce C/C++ for Visual Studio Code extension as an alternative debug engine for Debug Code lens. r=matklad a=vsrs\n\nAt the moment Debug Code Lens can use only one debug engine: lldb via [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb) extension.\r\n\r\nThis PR adds support of the debug engine from the [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension, as well as the configuration option. If both extensions are installed, `CodeLLDB` will be used by default.\r\n\r\nAnother new option `rust-analyzer.debug.sourceFileMap` allows, for example, to step into Rust std library during debugging. Works only with `MS C++ tools`.\r\n\r\nOn Windows: \r\n```json\r\n\"rust-analyzer.debug.sourceFileMap\": {\r\n    \"/rustc/4fb7144ed159f94491249e86d5bbd033b5d60550\": \"${env:USERPROFILE}/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/src/rust\"\r\n}\r\n```\r\nOn Linux:\r\n```json\r\n\"rust-analyzer.debug.sourceFileMap\": {\r\n    \"/rustc/4fb7144ed159f94491249e86d5bbd033b5d60550\": \"~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust\"\r\n}\r\n```\n\nCo-authored-by: vsrs <vit@conrlab.com>", "tree": {"sha": "c6809cff47196d8ba9a1317f56856201b856dd23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6809cff47196d8ba9a1317f56856201b856dd23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972afffded3957c3891116a9a81ac9b049e28ad4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqwTeCRBK7hj4Ov3rIwAAdHIIABO1m+CtPWRLFi2RmKfR08Oj\n2/ptbkWcUHBh6VI42boq996z9eOOFDvqOcqeQTL3bWbQ70nvnDuaG/bN0KWsVIi3\n4VssAxdM6ZGTOmqyv+QzR9BTrp05abNgnz0HrBK484WRZEIsy0PeycifKJZY5UFd\nAQxyWfhnpLhIZjI0R+gKWAaDbsW8BtQwG3QNDXN8UOblDDO3Ruy9+0Rpx1LL3jnU\nNPkW+b80gvOU5B8ZTboyb8Jc7YEuwdY7wsIyWpX6kbs8cE993nzcBPWBi0axi1bH\nVqIxdHME7a8upqAID/92s/0Ptjps7MtG5KIodoQxdH6lCUtus6ftUO4uKdZcmzU=\n=FBRp\n-----END PGP SIGNATURE-----\n", "payload": "tree c6809cff47196d8ba9a1317f56856201b856dd23\nparent fec1e7c8e10e1c592642fac0c497cd57bd3f003c\nparent 06b7175650c0c2570a66126b64696ed177e0d1fa\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588266206 +0000\ncommitter GitHub <noreply@github.com> 1588266206 +0000\n\nMerge #4222\n\n4222: Introduce C/C++ for Visual Studio Code extension as an alternative debug engine for Debug Code lens. r=matklad a=vsrs\n\nAt the moment Debug Code Lens can use only one debug engine: lldb via [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb) extension.\r\n\r\nThis PR adds support of the debug engine from the [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension, as well as the configuration option. If both extensions are installed, `CodeLLDB` will be used by default.\r\n\r\nAnother new option `rust-analyzer.debug.sourceFileMap` allows, for example, to step into Rust std library during debugging. Works only with `MS C++ tools`.\r\n\r\nOn Windows: \r\n```json\r\n\"rust-analyzer.debug.sourceFileMap\": {\r\n    \"/rustc/4fb7144ed159f94491249e86d5bbd033b5d60550\": \"${env:USERPROFILE}/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/src/rust\"\r\n}\r\n```\r\nOn Linux:\r\n```json\r\n\"rust-analyzer.debug.sourceFileMap\": {\r\n    \"/rustc/4fb7144ed159f94491249e86d5bbd033b5d60550\": \"~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust\"\r\n}\r\n```\n\nCo-authored-by: vsrs <vit@conrlab.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972afffded3957c3891116a9a81ac9b049e28ad4", "html_url": "https://github.com/rust-lang/rust/commit/972afffded3957c3891116a9a81ac9b049e28ad4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972afffded3957c3891116a9a81ac9b049e28ad4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fec1e7c8e10e1c592642fac0c497cd57bd3f003c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fec1e7c8e10e1c592642fac0c497cd57bd3f003c", "html_url": "https://github.com/rust-lang/rust/commit/fec1e7c8e10e1c592642fac0c497cd57bd3f003c"}, {"sha": "06b7175650c0c2570a66126b64696ed177e0d1fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b7175650c0c2570a66126b64696ed177e0d1fa", "html_url": "https://github.com/rust-lang/rust/commit/06b7175650c0c2570a66126b64696ed177e0d1fa"}], "stats": {"total": 207, "additions": 194, "deletions": 13}, "files": [{"sha": "d30673791f7c5faba00413c69b5702a313b1dc54", "filename": "editors/code/package.json", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/972afffded3957c3891116a9a81ac9b049e28ad4/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/972afffded3957c3891116a9a81ac9b049e28ad4/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=972afffded3957c3891116a9a81ac9b049e28ad4", "patch": "@@ -389,6 +389,28 @@\n                     \"description\": \"Enable Proc macro support, cargo.loadOutDirsFromCheck must be enabled.\",\n                     \"type\": \"boolean\",\n                     \"default\": false\n+                },\n+                \"rust-analyzer.debug.engine\": {\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"auto\",\n+                        \"vadimcn.vscode-lldb\",\n+                        \"ms-vscode.cpptools\"\n+                    ],\n+                    \"default\": \"auto\",\n+                    \"description\": \"Preffered debug engine.\",\n+                    \"markdownEnumDescriptions\": [\n+                        \"First try to use [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb), if it's not installed try to use [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools).\",\n+                        \"Use [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)\",\n+                        \"Use [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)\"\n+                    ]\n+                },\n+                \"rust-analyzer.debug.sourceFileMap\": {\n+                    \"type\": \"object\",\n+                    \"description\": \"Optional source file mappings passed to the debug engine.\",\n+                    \"default\": {\n+                        \"/rustc/<id>\": \"${env:USERPROFILE}/.rustup/toolchains/<toolchain-id>/lib/rustlib/src/rust\"\n+                    }\n                 }\n             }\n         },"}, {"sha": "a328ba9bd01c1f1f19d4aa9fcfd4df9d4985cd99", "filename": "editors/code/src/cargo.ts", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/972afffded3957c3891116a9a81ac9b049e28ad4/editors%2Fcode%2Fsrc%2Fcargo.ts", "raw_url": "https://github.com/rust-lang/rust/raw/972afffded3957c3891116a9a81ac9b049e28ad4/editors%2Fcode%2Fsrc%2Fcargo.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcargo.ts?ref=972afffded3957c3891116a9a81ac9b049e28ad4", "patch": "@@ -0,0 +1,106 @@\n+import * as cp from 'child_process';\n+import * as readline from 'readline';\n+import { OutputChannel } from 'vscode';\n+\n+interface CompilationArtifact {\n+    fileName: string;\n+    name: string;\n+    kind: string;\n+    isTest: boolean;\n+}\n+\n+export class Cargo {\n+    rootFolder: string;\n+    env?: Record<string, string>;\n+    output: OutputChannel;\n+\n+    public constructor(cargoTomlFolder: string, output: OutputChannel, env: Record<string, string> | undefined = undefined) {\n+        this.rootFolder = cargoTomlFolder;\n+        this.output = output;\n+        this.env = env;\n+    }\n+\n+    public async artifactsFromArgs(cargoArgs: string[]): Promise<CompilationArtifact[]> {\n+        const artifacts: CompilationArtifact[] = [];\n+\n+        try {\n+            await this.runCargo(cargoArgs,\n+                message => {\n+                    if (message.reason === 'compiler-artifact' && message.executable) {\n+                        const isBinary = message.target.crate_types.includes('bin');\n+                        const isBuildScript = message.target.kind.includes('custom-build');\n+                        if ((isBinary && !isBuildScript) || message.profile.test) {\n+                            artifacts.push({\n+                                fileName: message.executable,\n+                                name: message.target.name,\n+                                kind: message.target.kind[0],\n+                                isTest: message.profile.test\n+                            });\n+                        }\n+                    }\n+                    else if (message.reason === 'compiler-message') {\n+                        this.output.append(message.message.rendered);\n+                    }\n+                },\n+                stderr => {\n+                    this.output.append(stderr);\n+                }\n+            );\n+        }\n+        catch (err) {\n+            this.output.show(true);\n+            throw new Error(`Cargo invocation has failed: ${err}`);\n+        }\n+\n+        return artifacts;\n+    }\n+\n+    public async executableFromArgs(args: string[]): Promise<string> {\n+        const cargoArgs = [...args]; // to remain  args unchanged\n+        cargoArgs.push(\"--message-format=json\");\n+\n+        const artifacts = await this.artifactsFromArgs(cargoArgs);\n+\n+        if (artifacts.length === 0) {\n+            throw new Error('No compilation artifacts');\n+        } else if (artifacts.length > 1) {\n+            throw new Error('Multiple compilation artifacts are not supported.');\n+        }\n+\n+        return artifacts[0].fileName;\n+    }\n+\n+    runCargo(\n+        cargoArgs: string[],\n+        onStdoutJson: (obj: any) => void,\n+        onStderrString: (data: string) => void\n+    ): Promise<number> {\n+        return new Promise<number>((resolve, reject) => {\n+            const cargo = cp.spawn('cargo', cargoArgs, {\n+                stdio: ['ignore', 'pipe', 'pipe'],\n+                cwd: this.rootFolder,\n+                env: this.env,\n+            });\n+\n+            cargo.on('error', err => {\n+                reject(new Error(`could not launch cargo: ${err}`));\n+            });\n+            cargo.stderr.on('data', chunk => {\n+                onStderrString(chunk.toString());\n+            });\n+\n+            const rl = readline.createInterface({ input: cargo.stdout });\n+            rl.on('line', line => {\n+                const message = JSON.parse(line);\n+                onStdoutJson(message);\n+            });\n+\n+            cargo.on('exit', (exitCode, _) => {\n+                if (exitCode === 0)\n+                    resolve(exitCode);\n+                else\n+                    reject(new Error(`exit code: ${exitCode}.`));\n+            });\n+        });\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "d77e8188c75f67d9e8784be3cdbebcdc83e5cd23", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 58, "deletions": 12, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/972afffded3957c3891116a9a81ac9b049e28ad4/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/972afffded3957c3891116a9a81ac9b049e28ad4/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=972afffded3957c3891116a9a81ac9b049e28ad4", "patch": "@@ -1,8 +1,10 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n import * as ra from '../rust-analyzer-api';\n+import * as os from \"os\";\n \n import { Ctx, Cmd } from '../ctx';\n+import { Cargo } from '../cargo';\n \n export function run(ctx: Ctx): Cmd {\n     let prevRunnable: RunnableQuickPick | undefined;\n@@ -62,25 +64,69 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n+function getLldbDebugConfig(config: ra.Runnable, sourceFileMap: Record<string, string>): vscode.DebugConfiguration {\n+    return {\n+        type: \"lldb\",\n+        request: \"launch\",\n+        name: config.label,\n+        cargo: {\n+            args: config.args,\n+        },\n+        args: config.extraArgs,\n+        cwd: config.cwd,\n+        sourceMap: sourceFileMap\n+    };\n+}\n+\n+const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n+\n+async function getCppvsDebugConfig(config: ra.Runnable, sourceFileMap: Record<string, string>): Promise<vscode.DebugConfiguration> {\n+    debugOutput.clear();\n+\n+    const cargo = new Cargo(config.cwd || '.', debugOutput);\n+    const executable = await cargo.executableFromArgs(config.args);\n+\n+    // if we are here, there were no compilation errors.\n+    return {\n+        type: (os.platform() === \"win32\") ? \"cppvsdbg\" : 'cppdbg',\n+        request: \"launch\",\n+        name: config.label,\n+        program: executable,\n+        args: config.extraArgs,\n+        cwd: config.cwd,\n+        sourceFileMap: sourceFileMap,\n+    };\n+}\n+\n export function debugSingle(ctx: Ctx): Cmd {\n     return async (config: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n-        if (!vscode.extensions.getExtension(\"vadimcn.vscode-lldb\")) {\n-            vscode.window.showErrorMessage(\"Install `vadimcn.vscode-lldb` extension for debugging\");\n+\n+        const lldbId = \"vadimcn.vscode-lldb\";\n+        const cpptoolsId = \"ms-vscode.cpptools\";\n+\n+        const debugEngineId = ctx.config.debug.engine;\n+        let debugEngine = null;\n+        if (debugEngineId === \"auto\") {\n+            debugEngine = vscode.extensions.getExtension(lldbId);\n+            if (!debugEngine) {\n+                debugEngine = vscode.extensions.getExtension(cpptoolsId);\n+            }\n+        }\n+        else {\n+            debugEngine = vscode.extensions.getExtension(debugEngineId);\n+        }\n+\n+        if (!debugEngine) {\n+            vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=${lldbId})`\n+                + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=${cpptoolsId}) extension for debugging.`);\n             return;\n         }\n \n-        const debugConfig = {\n-            type: \"lldb\",\n-            request: \"launch\",\n-            name: config.label,\n-            cargo: {\n-                args: config.args,\n-            },\n-            args: config.extraArgs,\n-            cwd: config.cwd\n-        };\n+        const debugConfig = lldbId === debugEngine.id\n+            ? getLldbDebugConfig(config, ctx.config.debug.sourceFileMap)\n+            : await getCppvsDebugConfig(config, ctx.config.debug.sourceFileMap);\n \n         return vscode.debug.startDebugging(undefined, debugConfig);\n     };"}, {"sha": "110e541800ed8f131c9dc8eb2c36704d23d94c80", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/972afffded3957c3891116a9a81ac9b049e28ad4/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/972afffded3957c3891116a9a81ac9b049e28ad4/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=972afffded3957c3891116a9a81ac9b049e28ad4", "patch": "@@ -92,7 +92,6 @@ export class Config {\n     get askBeforeDownload() { return this.get<boolean>(\"updates.askBeforeDownload\"); }\n     get traceExtension() { return this.get<boolean>(\"trace.extension\"); }\n \n-\n     get inlayHints() {\n         return {\n             typeHints: this.get<boolean>(\"inlayHints.typeHints\"),\n@@ -107,4 +106,12 @@ export class Config {\n             command: this.get<string>(\"checkOnSave.command\"),\n         };\n     }\n+\n+    get debug() {\n+        return {\n+            engine: this.get<string>(\"debug.engine\"),\n+            sourceFileMap: this.get<Record<string, string>>(\"debug.sourceFileMap\"),\n+        };\n+    }\n+\n }"}]}