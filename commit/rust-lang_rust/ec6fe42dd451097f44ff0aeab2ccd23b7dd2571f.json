{"sha": "ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNmZlNDJkZDQ1MTA5N2Y0NGZmMGFlYWIyY2NkMjNiN2RkMjU3MWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-15T10:01:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-15T10:01:09Z"}, "message": "Rollup merge of #73139 - poliorcetics:cstring-from-vec-with-nul, r=dtolnay\n\nAdd methods to go from a nul-terminated Vec<u8> to a CString\n\nFixes #73100.\n\nDoc tests have been written and the documentation on the error type\nupdated too.\n\nI used `#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.46.0\")]` but I don't know if the version is correct.", "tree": {"sha": "d07abb09ea8bee6d1c7ba373616e03439387f09c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d07abb09ea8bee6d1c7ba373616e03439387f09c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe50blCRBK7hj4Ov3rIwAAdHIIACwmusfZBR9RUDEJa5ArE0vC\nc72gv3MfgA7WZNiI+gy5phU6DflqBTh1W6sl9LpfIbtJdKf9A11ivYxH2hVWIbzJ\nK9YxhAkGnhwisAiCogxckcm6/ceXiDH4UvWyFdJgtJhA1o1hkIICJ8ZUGTBUellA\nFXTUfDl2+WZJdZxA3pcYWQD/n4wuY+ZN6MrvQ5mCp0L9xDE60F4pUPpu4ZNL/vbW\nk/nAZgtcLOqRMdQS0HfX7yxhFh73hMfdZHw0ZPkPsFI26CE+F2QP/6OFuipLdNm+\nvT0LrOw8PRqZ+lCwsAgk3FgYrm2gfx7nni7Zt+1+h/KFyYhFA2MCqOS87E/a2RE=\n=netQ\n-----END PGP SIGNATURE-----\n", "payload": "tree d07abb09ea8bee6d1c7ba373616e03439387f09c\nparent 7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7\nparent 47cc5cca7e64a434fa15680b7dcc621ca6f1abbf\nauthor Ralf Jung <post@ralfj.de> 1592215269 +0200\ncommitter GitHub <noreply@github.com> 1592215269 +0200\n\nRollup merge of #73139 - poliorcetics:cstring-from-vec-with-nul, r=dtolnay\n\nAdd methods to go from a nul-terminated Vec<u8> to a CString\n\nFixes #73100.\n\nDoc tests have been written and the documentation on the error type\nupdated too.\n\nI used `#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.46.0\")]` but I don't know if the version is correct.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f", "html_url": "https://github.com/rust-lang/rust/commit/ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7", "html_url": "https://github.com/rust-lang/rust/commit/7c8b9413b8ce457b53e2c4ab5f3b9f1ce96195f7"}, {"sha": "47cc5cca7e64a434fa15680b7dcc621ca6f1abbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/47cc5cca7e64a434fa15680b7dcc621ca6f1abbf", "html_url": "https://github.com/rust-lang/rust/commit/47cc5cca7e64a434fa15680b7dcc621ca6f1abbf"}], "stats": {"total": 189, "additions": 183, "deletions": 6}, "files": [{"sha": "dca1fdde4824295f72cd1539d5fa124ca96b3d9e", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 181, "deletions": 6, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f", "patch": "@@ -234,15 +234,14 @@ pub struct NulError(usize, Vec<u8>);\n \n /// An error indicating that a nul byte was not in the expected position.\n ///\n-/// The slice used to create a [`CStr`] must have one and only one nul\n-/// byte at the end of the slice.\n+/// The slice used to create a [`CStr`] must have one and only one nul byte,\n+/// positioned at the end.\n ///\n-/// This error is created by the\n-/// [`from_bytes_with_nul`][`CStr::from_bytes_with_nul`] method on\n-/// [`CStr`]. See its documentation for more.\n+/// This error is created by the [`from_bytes_with_nul`] method on [`CStr`].\n+/// See its documentation for more.\n ///\n /// [`CStr`]: struct.CStr.html\n-/// [`CStr::from_bytes_with_nul`]: struct.CStr.html#method.from_bytes_with_nul\n+/// [`from_bytes_with_nul`]: struct.CStr.html#method.from_bytes_with_nul\n ///\n /// # Examples\n ///\n@@ -257,6 +256,32 @@ pub struct FromBytesWithNulError {\n     kind: FromBytesWithNulErrorKind,\n }\n \n+/// An error indicating that a nul byte was not in the expected position.\n+///\n+/// The vector used to create a [`CString`] must have one and only one nul byte,\n+/// positioned at the end.\n+///\n+/// This error is created by the [`from_vec_with_nul`] method on [`CString`].\n+/// See its documentation for more.\n+///\n+/// [`CString`]: struct.CString.html\n+/// [`from_vec_with_nul`]: struct.CString.html#method.from_vec_with_nul\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cstring_from_vec_with_nul)]\n+/// use std::ffi::{CString, FromVecWithNulError};\n+///\n+/// let _: FromVecWithNulError = CString::from_vec_with_nul(b\"f\\0oo\".to_vec()).unwrap_err();\n+/// ```\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+pub struct FromVecWithNulError {\n+    error_kind: FromBytesWithNulErrorKind,\n+    bytes: Vec<u8>,\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug)]\n enum FromBytesWithNulErrorKind {\n     InteriorNul(usize),\n@@ -272,6 +297,59 @@ impl FromBytesWithNulError {\n     }\n }\n \n+#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+impl FromVecWithNulError {\n+    /// Returns a slice of [`u8`]s bytes that were attempted to convert to a [`CString`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(cstring_from_vec_with_nul)]\n+    /// use std::ffi::CString;\n+    ///\n+    /// // Some invalid bytes in a vector\n+    /// let bytes = b\"f\\0oo\".to_vec();\n+    ///\n+    /// let value = CString::from_vec_with_nul(bytes.clone());\n+    ///\n+    /// assert_eq!(&bytes[..], value.unwrap_err().as_bytes());\n+    /// ```\n+    ///\n+    /// [`CString`]: struct.CString.html\n+    pub fn as_bytes(&self) -> &[u8] {\n+        &self.bytes[..]\n+    }\n+\n+    /// Returns the bytes that were attempted to convert to a [`CString`].\n+    ///\n+    /// This method is carefully constructed to avoid allocation. It will\n+    /// consume the error, moving out the bytes, so that a copy of the bytes\n+    /// does not need to be made.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(cstring_from_vec_with_nul)]\n+    /// use std::ffi::CString;\n+    ///\n+    /// // Some invalid bytes in a vector\n+    /// let bytes = b\"f\\0oo\".to_vec();\n+    ///\n+    /// let value = CString::from_vec_with_nul(bytes.clone());\n+    ///\n+    /// assert_eq!(bytes, value.unwrap_err().into_bytes());\n+    /// ```\n+    ///\n+    /// [`CString`]: struct.CString.html\n+    pub fn into_bytes(self) -> Vec<u8> {\n+        self.bytes\n+    }\n+}\n+\n /// An error indicating invalid UTF-8 when converting a [`CString`] into a [`String`].\n ///\n /// `CString` is just a wrapper over a buffer of bytes with a nul\n@@ -643,6 +721,86 @@ impl CString {\n         let this = mem::ManuallyDrop::new(self);\n         unsafe { ptr::read(&this.inner) }\n     }\n+\n+    /// Converts a `Vec` of `u8` to a `CString` without checking the invariants\n+    /// on the given `Vec`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The given `Vec` **must** have one nul byte as its last element.\n+    /// This means it cannot be empty nor have any other nul byte anywhere else.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(cstring_from_vec_with_nul)]\n+    /// use std::ffi::CString;\n+    /// assert_eq!(\n+    ///     unsafe { CString::from_vec_with_nul_unchecked(b\"abc\\0\".to_vec()) },\n+    ///     unsafe { CString::from_vec_unchecked(b\"abc\".to_vec()) }\n+    /// );\n+    /// ```\n+    #[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+    pub unsafe fn from_vec_with_nul_unchecked(v: Vec<u8>) -> Self {\n+        Self { inner: v.into_boxed_slice() }\n+    }\n+\n+    /// Attempts to converts a `Vec` of `u8` to a `CString`.\n+    ///\n+    /// Runtime checks are present to ensure there is only one nul byte in the\n+    /// `Vec`, its last element.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If a nul byte is present and not the last element or no nul bytes\n+    /// is present, an error will be returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// A successful conversion will produce the same result as [`new`] when\n+    /// called without the ending nul byte.\n+    ///\n+    /// ```\n+    /// #![feature(cstring_from_vec_with_nul)]\n+    /// use std::ffi::CString;\n+    /// assert_eq!(\n+    ///     CString::from_vec_with_nul(b\"abc\\0\".to_vec())\n+    ///         .expect(\"CString::from_vec_with_nul failed\"),\n+    ///     CString::new(b\"abc\".to_vec()).expect(\"CString::new failed\")\n+    /// );\n+    /// ```\n+    ///\n+    /// A incorrectly formatted vector will produce an error.\n+    ///\n+    /// ```\n+    /// #![feature(cstring_from_vec_with_nul)]\n+    /// use std::ffi::{CString, FromVecWithNulError};\n+    /// // Interior nul byte\n+    /// let _: FromVecWithNulError = CString::from_vec_with_nul(b\"a\\0bc\".to_vec()).unwrap_err();\n+    /// // No nul byte\n+    /// let _: FromVecWithNulError = CString::from_vec_with_nul(b\"abc\".to_vec()).unwrap_err();\n+    /// ```\n+    ///\n+    /// [`new`]: #method.new\n+    #[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+    pub fn from_vec_with_nul(v: Vec<u8>) -> Result<Self, FromVecWithNulError> {\n+        let nul_pos = memchr::memchr(0, &v);\n+        match nul_pos {\n+            Some(nul_pos) if nul_pos + 1 == v.len() => {\n+                // SAFETY: We know there is only one nul byte, at the end\n+                // of the vec.\n+                Ok(unsafe { Self::from_vec_with_nul_unchecked(v) })\n+            }\n+            Some(nul_pos) => Err(FromVecWithNulError {\n+                error_kind: FromBytesWithNulErrorKind::InteriorNul(nul_pos),\n+                bytes: v,\n+            }),\n+            None => Err(FromVecWithNulError {\n+                error_kind: FromBytesWithNulErrorKind::NotNulTerminated,\n+                bytes: v,\n+            }),\n+        }\n+    }\n }\n \n // Turns this `CString` into an empty string to prevent\n@@ -976,6 +1134,23 @@ impl fmt::Display for FromBytesWithNulError {\n     }\n }\n \n+#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+impl Error for FromVecWithNulError {}\n+\n+#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+impl fmt::Display for FromVecWithNulError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.error_kind {\n+            FromBytesWithNulErrorKind::InteriorNul(pos) => {\n+                write!(f, \"data provided contains an interior nul byte at pos {}\", pos)\n+            }\n+            FromBytesWithNulErrorKind::NotNulTerminated => {\n+                write!(f, \"data provided is not nul terminated\")\n+            }\n+        }\n+    }\n+}\n+\n impl IntoStringError {\n     /// Consumes this error, returning original [`CString`] which generated the\n     /// error."}, {"sha": "f442d7fde1a5e9464fe0e6116e2dc204930cce39", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=ec6fe42dd451097f44ff0aeab2ccd23b7dd2571f", "patch": "@@ -157,6 +157,8 @@\n \n #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n pub use self::c_str::FromBytesWithNulError;\n+#[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n+pub use self::c_str::FromVecWithNulError;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::c_str::{CStr, CString, IntoStringError, NulError};\n "}]}