{"sha": "1a928f434ae218e0e1d4cf63d53eb6612b5abe80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhOTI4ZjQzNGFlMjE4ZTBlMWQ0Y2Y2M2Q1M2ViNjYxMmI1YWJlODA=", "commit": {"author": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2015-07-10T23:48:59Z"}, "committer": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2015-07-11T07:23:04Z"}, "message": "adding support for i686-unknown-freebsd target", "tree": {"sha": "e472f8ee62bab6be2871cd057f88e6e2a395a256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e472f8ee62bab6be2871cd057f88e6e2a395a256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a928f434ae218e0e1d4cf63d53eb6612b5abe80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a928f434ae218e0e1d4cf63d53eb6612b5abe80", "html_url": "https://github.com/rust-lang/rust/commit/1a928f434ae218e0e1d4cf63d53eb6612b5abe80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/comments", "author": null, "committer": null, "parents": [{"sha": "f7f28c8b26af35fb495f60b43d0c6361c587045f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f28c8b26af35fb495f60b43d0c6361c587045f", "html_url": "https://github.com/rust-lang/rust/commit/f7f28c8b26af35fb495f60b43d0c6361c587045f"}], "stats": {"total": 162, "additions": 155, "deletions": 7}, "files": [{"sha": "0ac0ca98a2f1eece8fbdb20c65d154776bf74806", "filename": "mk/cfg/i686-unknown-freebsd.mk", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/mk%2Fcfg%2Fi686-unknown-freebsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/mk%2Fcfg%2Fi686-unknown-freebsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-freebsd.mk?ref=1a928f434ae218e0e1d4cf63d53eb6612b5abe80", "patch": "@@ -0,0 +1,22 @@\n+# i686-unknown-freebsd configuration\n+CC_i686-unknown-freebsd=$(CC)\n+CXX_i686-unknown-freebsd=$(CXX)\n+CPP_i686-unknown-freebsd=$(CPP)\n+AR_i686-unknown-freebsd=$(AR)\n+CFG_LIB_NAME_i686-unknown-freebsd=lib$(1).so\n+CFG_STATIC_LIB_NAME_i686-unknown-freebsd=lib$(1).a\n+CFG_LIB_GLOB_i686-unknown-freebsd=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_i686-unknown-freebsd=$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_i686-unknown-freebsd := -m32 -arch i386 -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i686-unknown-freebsd := -Wall -Werror -g -fPIC -m32 -arch i386 -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_LINK_FLAGS_i686-unknown-freebsd := -m32 -shared -fPIC -g -pthread -lrt\n+CFG_GCCISH_DEF_FLAG_i686-unknown-freebsd := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_i686-unknown-freebsd :=\n+CFG_INSTALL_NAME_i686-unknown-freebsd =\n+CFG_EXE_SUFFIX_i686-unknown-freebsd :=\n+CFG_WINDOWSY_i686-unknown-freebsd :=\n+CFG_UNIXY_i686-unknown-freebsd := 1\n+CFG_LDPATH_i686-unknown-freebsd :=\n+CFG_RUN_i686-unknown-freebsd=$(2)\n+CFG_RUN_TARG_i686-unknown-freebsd=$(call CFG_RUN_i686-unknown-freebsd,,$(2))\n+CFG_GNU_TRIPLE_i686-unknown-freebsd := i686-unknown-freebsd"}, {"sha": "dfcd08b69907aab6a1fae17e504c7245f6f7c9c7", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=1a928f434ae218e0e1d4cf63d53eb6612b5abe80", "patch": "@@ -960,6 +960,100 @@ pub mod types {\n             }\n         }\n \n+        #[cfg(target_arch = \"x86\")]\n+        pub mod arch {\n+            pub mod c95 {\n+                pub type c_char = i8;\n+                pub type c_schar = i8;\n+                pub type c_uchar = u8;\n+                pub type c_short = i16;\n+                pub type c_ushort = u16;\n+                pub type c_int = i32;\n+                pub type c_uint = u32;\n+                pub type c_long = i32;\n+                pub type c_ulong = u32;\n+                pub type c_float = f32;\n+                pub type c_double = f64;\n+                pub type size_t = u32;\n+                pub type ptrdiff_t = i32;\n+                pub type clock_t = i32;\n+                pub type time_t = i32;\n+                pub type suseconds_t = i32;\n+                pub type wchar_t = i32;\n+            }\n+            pub mod c99 {\n+                pub type c_longlong = i64;\n+                pub type c_ulonglong = u64;\n+                pub type intptr_t = i32;\n+                pub type uintptr_t = u32;\n+                pub type intmax_t = i64;\n+                pub type uintmax_t = u64;\n+            }\n+            pub mod posix88 {\n+                pub type off_t = i64;\n+                pub type dev_t = u32;\n+                pub type ino_t = u32;\n+                pub type pid_t = i32;\n+                pub type uid_t = u32;\n+                pub type gid_t = u32;\n+                pub type useconds_t = u32;\n+                pub type mode_t = u16;\n+                pub type ssize_t = i32;\n+            }\n+            pub mod posix01 {\n+                use types::common::c95::{c_void};\n+                use types::common::c99::{uint8_t, uint32_t, int32_t};\n+                use types::os::arch::c95::{c_long, time_t};\n+                use types::os::arch::posix88::{dev_t, gid_t, ino_t};\n+                use types::os::arch::posix88::{mode_t, off_t};\n+                use types::os::arch::posix88::{uid_t};\n+\n+                pub type nlink_t = u16;\n+                pub type blksize_t = i32;\n+                pub type blkcnt_t = i64;\n+                pub type fflags_t = u32;\n+                #[repr(C)]\n+                #[derive(Copy, Clone)] pub struct stat {\n+                    pub st_dev: dev_t,\n+                    pub st_ino: ino_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_size: off_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_flags: fflags_t,\n+                    pub st_gen: uint32_t,\n+                    pub st_lspare: int32_t,\n+                    pub st_birthtime: time_t,\n+                    pub st_birthtime_nsec: c_long,\n+                    pub __unused: [uint8_t; 2],\n+                }\n+\n+                #[repr(C)]\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n+                }\n+\n+                pub type pthread_attr_t = *mut c_void;\n+            }\n+            pub mod posix08 {\n+            }\n+            pub mod bsd44 {\n+            }\n+            pub mod extra {\n+            }\n+        }\n+\n         #[cfg(target_arch = \"x86_64\")]\n         pub mod arch {\n             pub mod c95 {"}, {"sha": "d3477402cefb7412be106460f7b99a808a41d8d1", "filename": "src/librustc_back/target/i686_unknown_freebsd.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs?ref=1a928f434ae218e0e1d4cf63d53eb6612b5abe80", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::freebsd_base::opts();\n+    base.cpu = \"pentium4\".to_string();\n+    base.pre_link_args.push(\"-m32\".to_string());\n+    base.morestack = false;\n+\n+    Target {\n+        data_layout: \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n+        llvm_target: \"i686-unknown-freebsd\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        arch: \"x86\".to_string(),\n+        target_os: \"freebsd\".to_string(),\n+        target_env: \"\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "185d1c9428e86106f00b37499b9c7632fd6a150c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=1a928f434ae218e0e1d4cf63d53eb6612b5abe80", "patch": "@@ -368,6 +368,7 @@ impl Target {\n             arm_linux_androideabi,\n             aarch64_linux_android,\n \n+            i686_unknown_freebsd,\n             x86_64_unknown_freebsd,\n \n             i686_unknown_dragonfly,"}, {"sha": "0ab987273dce6c3a4af9ed1a66ddfe87e856821a", "filename": "src/libstd/sys/common/stack.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a928f434ae218e0e1d4cf63d53eb6612b5abe80/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs?ref=1a928f434ae218e0e1d4cf63d53eb6612b5abe80", "patch": "@@ -170,8 +170,7 @@ pub unsafe fn record_sp_limit(limit: usize) {\n         asm!(\"movl $$0x48+90*4, %eax\n               movl $0, %gs:(%eax)\" :: \"r\"(limit) : \"eax\" : \"volatile\")\n     }\n-    #[cfg(all(target_arch = \"x86\",\n-              any(target_os = \"linux\", target_os = \"freebsd\")))]\n+    #[cfg(all(target_arch = \"x86\", target_os = \"linux\"))]\n     #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: usize) {\n         asm!(\"movl $0, %gs:48\" :: \"r\"(limit) :: \"volatile\")\n@@ -197,10 +196,12 @@ pub unsafe fn record_sp_limit(limit: usize) {\n     // aarch64 - FIXME(AARCH64): missing...\n     // powerpc - FIXME(POWERPC): missing...\n     // arm-ios - iOS segmented stack is disabled for now, see related notes\n-    // openbsd - segmented stack is disabled\n+    // openbsd/bitrig/netbsd - no segmented stacks.\n+    // x86-freebsd - no segmented stacks.\n     #[cfg(any(target_arch = \"aarch64\",\n               target_arch = \"powerpc\",\n               all(target_arch = \"arm\", target_os = \"ios\"),\n+              all(target_arch = \"x86\", target_os = \"freebsd\"),\n               target_os = \"bitrig\",\n               target_os = \"netbsd\",\n               target_os = \"openbsd\"))]\n@@ -262,8 +263,7 @@ pub unsafe fn get_sp_limit() -> usize {\n               movl %gs:(%eax), $0\" : \"=r\"(limit) :: \"eax\" : \"volatile\");\n         return limit;\n     }\n-    #[cfg(all(target_arch = \"x86\",\n-              any(target_os = \"linux\", target_os = \"freebsd\")))]\n+    #[cfg(all(target_arch = \"x86\", target_os = \"linux\"))]\n     #[inline(always)]\n     unsafe fn target_get_sp_limit() -> usize {\n         let limit;\n@@ -291,14 +291,16 @@ pub unsafe fn get_sp_limit() -> usize {\n \n     // aarch64 - FIXME(AARCH64): missing...\n     // powerpc - FIXME(POWERPC): missing...\n-    // arm-ios - iOS doesn't support segmented stacks yet.\n-    // openbsd - OpenBSD doesn't support segmented stacks.\n+    // arm-ios - no segmented stacks.\n+    // openbsd/bitrig/netbsd - no segmented stacks.\n+    // x86-freebsd - no segmented stacks. \n     //\n     // This function might be called by runtime though\n     // so it is unsafe to unreachable, let's return a fixed constant.\n     #[cfg(any(target_arch = \"aarch64\",\n               target_arch = \"powerpc\",\n               all(target_arch = \"arm\", target_os = \"ios\"),\n+              all(target_arch = \"x86\", target_os = \"freebsd\"),\n               target_os = \"bitrig\",\n               target_os = \"netbsd\",\n               target_os = \"openbsd\"))]"}]}