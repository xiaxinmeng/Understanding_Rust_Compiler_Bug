{"sha": "7ee2729824f1922d361c54a8d43e04190b513fc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZTI3Mjk4MjRmMTkyMmQzNjFjNTRhOGQ0M2UwNDE5MGI1MTNmYzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-07T19:12:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-17T15:29:19Z"}, "message": "it actually runs tests now!", "tree": {"sha": "96cda1a1f98f9eedf1887267a255d4ba9d4f4b0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96cda1a1f98f9eedf1887267a255d4ba9d4f4b0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee2729824f1922d361c54a8d43e04190b513fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee2729824f1922d361c54a8d43e04190b513fc5", "html_url": "https://github.com/rust-lang/rust/commit/7ee2729824f1922d361c54a8d43e04190b513fc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee2729824f1922d361c54a8d43e04190b513fc5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2119dc94dee5afe4a0ccd30530f9d4b824a3504", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2119dc94dee5afe4a0ccd30530f9d4b824a3504", "html_url": "https://github.com/rust-lang/rust/commit/e2119dc94dee5afe4a0ccd30530f9d4b824a3504"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "57c0ec985ab8fe6e6145677338c9133a0125b7a0", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7ee2729824f1922d361c54a8d43e04190b513fc5/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee2729824f1922d361c54a8d43e04190b513fc5/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=7ee2729824f1922d361c54a8d43e04190b513fc5", "patch": "@@ -5,7 +5,6 @@ use std::io::{self, BufRead, BufReader, BufWriter, Write};\n use std::ops::Not;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n-use std::collections::HashMap;\n \n use serde::{Deserialize, Serialize};\n \n@@ -50,7 +49,16 @@ struct CrateRunInfo {\n     /// The command-line arguments.\n     args: Vec<OsString>,\n     /// The environment.\n-    env: HashMap<OsString, OsString>,\n+    env: Vec<(OsString, OsString)>,\n+}\n+\n+impl CrateRunInfo {\n+    /// Gather all the information we need.\n+    fn collect(args: env::ArgsOs) -> Self {\n+        let args = args.collect();\n+        let env = env::vars_os().collect();\n+        CrateRunInfo { args, env }\n+    }\n }\n \n fn show_help() {\n@@ -128,6 +136,11 @@ fn xargo_check() -> Command {\n     Command::new(env::var_os(\"XARGO_CHECK\").unwrap_or_else(|| OsString::from(\"xargo-check\")))\n }\n \n+fn exec(mut cmd: Command) -> ! {\n+    let exit_status = cmd.status().expect(\"failed to run command\");\n+    std::process::exit(exit_status.code().unwrap_or(-1))\n+}\n+\n fn xargo_version() -> Option<(u32, u32, u32)> {\n     let out = xargo_check().arg(\"--version\").output().ok()?;\n     if !out.status.success() {\n@@ -349,17 +362,16 @@ path = \"lib.rs\"\n     }\n }\n \n-fn phase_cargo_miri(mut args: env::Args) {\n+fn phase_cargo_miri(mut args: env::ArgsOs) {\n     // Require a subcommand before any flags.\n     // We cannot know which of those flags take arguments and which do not,\n     // so we cannot detect subcommands later.\n-    let subcommand = match args.next().as_deref() {\n+    let subcommand = match args.next().as_deref().and_then(|s| s.to_str()) {\n         Some(\"test\") => MiriCommand::Test,\n         Some(\"run\") => MiriCommand::Run,\n         Some(\"setup\") => MiriCommand::Setup,\n         // Invalid command.\n-        None => show_error(format!(\"`cargo miri` must be immediately followed by `test`, `run`, or `setup`.\")),\n-        Some(s) => show_error(format!(\"unknown command `{}`\", s)),\n+        _ => show_error(format!(\"`cargo miri` must be immediately followed by `test`, `run`, or `setup`.\")),\n     };\n     let verbose = has_arg_flag(\"-v\");\n \n@@ -413,13 +425,10 @@ fn phase_cargo_miri(mut args: env::Args) {\n         cmd.env(\"MIRI_VERBOSE\", \"\"); // this makes `inside_cargo_rustc` verbose.\n         eprintln!(\"+ {:?}\", cmd);\n     }\n-    let exit_status =\n-        cmd.spawn().expect(\"could not run cargo\").wait().expect(\"failed to wait for cargo?\");\n-\n-    std::process::exit(exit_status.code().unwrap_or(-1))\n+    exec(cmd)\n }\n \n-fn phase_cargo_rustc(mut args: env::Args) {\n+fn phase_cargo_rustc(args: env::ArgsOs) {\n     /// Determines if we are being invoked (as rustc) to build a crate for\n     /// the \"target\" architecture, in contrast to the \"host\" architecture.\n     /// Host crates are for build scripts and proc macros and still need to\n@@ -454,7 +463,7 @@ fn phase_cargo_rustc(mut args: env::Args) {\n         // like we want them.\n         // Instead of compiling, we write JSON into the output file with all the relevant command-line flags\n         // and environment variables; this is sued alter when cargo calls us again in the CARGO_TARGET_RUNNER phase.\n-        let info = CrateRunInfo { args: Vec::new(), env: HashMap::new() };\n+        let info = CrateRunInfo::collect(args);\n \n         let mut path = PathBuf::from(get_arg_flag_value(\"--out-dir\").unwrap());\n         path.push(format!(\n@@ -464,14 +473,12 @@ fn phase_cargo_rustc(mut args: env::Args) {\n             // (and cargo passes this before the filename so it should be unique)\n             get_arg_flag_value(\"extra-filename\").unwrap_or(String::new()),\n         ));\n-        eprintln!(\"Miri is supposed to run {}\", path.display());\n \n         let file = File::create(&path)\n             .unwrap_or_else(|_| show_error(format!(\"Cannot create {}\", path.display())));\n         let file = BufWriter::new(file);\n         serde_json::ser::to_writer(file, &info)\n             .unwrap_or_else(|_| show_error(format!(\"Cannot write to {}\", path.display())));\n-\n         return;\n     }\n \n@@ -498,24 +505,36 @@ fn phase_cargo_rustc(mut args: env::Args) {\n     if verbose {\n         eprintln!(\"+ {:?}\", cmd);\n     }\n-    match cmd.status() {\n-        Ok(exit) =>\n-            if !exit.success() {\n-                std::process::exit(exit.code().unwrap_or(42));\n-            },\n-        Err(e) => panic!(\"error running {:?}:\\n{:?}\", cmd, e),\n-    }\n+    exec(cmd)\n }\n \n-fn phase_cargo_runner(binary: &str, args: env::Args) {\n-    eprintln!(\"Asked to execute {}, args: {:?}\", binary, args.collect::<Vec<_>>());\n+fn phase_cargo_runner(binary: &str, args: env::ArgsOs) {\n+    let verbose = std::env::var_os(\"MIRI_VERBOSE\").is_some();\n \n     let file = File::open(binary)\n         .unwrap_or_else(|_| show_error(format!(\"File {:?} not found, or cargo-miri invoked incorrectly\", binary)));\n     let file = BufReader::new(file);\n     let info: CrateRunInfo = serde_json::from_reader(file)\n         .unwrap_or_else(|_| show_error(format!(\"File {:?} does not contain valid JSON\", binary)));\n     // FIXME: remove the file.\n+\n+    let mut cmd = miri();\n+    // Forward rustc arguments,with our sysroot.\n+    cmd.args(info.args);\n+    let sysroot =\n+        env::var_os(\"MIRI_SYSROOT\").expect(\"The wrapper should have set MIRI_SYSROOT\");\n+    cmd.arg(\"--sysroot\");\n+    cmd.arg(sysroot);\n+\n+    // Then pass binary arguments.\n+    cmd.arg(\"--\");\n+    cmd.args(args);\n+\n+    // Run it.\n+    if verbose {\n+        eprintln!(\"+ {:?}\", cmd);\n+    }\n+    exec(cmd)\n }\n \n fn main() {\n@@ -529,7 +548,7 @@ fn main() {\n         return;\n     }\n \n-    let mut args = std::env::args();\n+    let mut args = std::env::args_os();\n     // Skip binary name.\n     args.next().unwrap();\n \n@@ -540,7 +559,8 @@ fn main() {\n     //   binary crates for later interpretation.\n     // - When we are executed due to CARGO_TARGET_RUNNER, we start interpretation based on the\n     //   flags that were stored earlier.\n-    match &*args.next().unwrap() {\n+    // FIXME: report errors for these unwraps.\n+    match &*args.next().unwrap().to_str().unwrap() {\n         \"miri\" => phase_cargo_miri(args),\n         \"rustc\" => phase_cargo_rustc(args),\n         binary => phase_cargo_runner(binary, args),"}]}