{"sha": "ea549e7a71964625f1eb24d7432f222c407d9999", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNTQ5ZTdhNzE5NjQ2MjVmMWViMjRkNzQzMmYyMjJjNDA3ZDk5OTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-17T21:09:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-17T22:14:13Z"}, "message": "make borrowck more conservative around rvalues.\n\nthis will require more temporaries, but is probably less magical.\nalso, it means that borrowck matches trans better, so fewer crashes.\nbonus.\n\nFinally, stop warning about implicit copies when we are actually borrowing.\n\nAlso, one test (vec-res-add) stopped failing due to #2587, and hence I\nadded an xfail-test.\n\nFixes #3217, #2977, #3067", "tree": {"sha": "c2402391dd25c87ae06c86e8999e66ccb9556f88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2402391dd25c87ae06c86e8999e66ccb9556f88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea549e7a71964625f1eb24d7432f222c407d9999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea549e7a71964625f1eb24d7432f222c407d9999", "html_url": "https://github.com/rust-lang/rust/commit/ea549e7a71964625f1eb24d7432f222c407d9999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea549e7a71964625f1eb24d7432f222c407d9999/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f01343f011e555bad1a11f7abfadcb7682a4627", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f01343f011e555bad1a11f7abfadcb7682a4627", "html_url": "https://github.com/rust-lang/rust/commit/8f01343f011e555bad1a11f7abfadcb7682a4627"}], "stats": {"total": 138, "additions": 89, "deletions": 49}, "files": [{"sha": "70aaa5e8be6f3812022838c10a23a94cb86fd870", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=ea549e7a71964625f1eb24d7432f222c407d9999", "patch": "@@ -2,7 +2,7 @@ import std::map;\n import std::map::hashmap;\n import ast::*;\n import print::pprust;\n-import ast_util::path_to_ident;\n+import ast_util::{path_to_ident, stmt_id};\n import diagnostic::span_handler;\n \n enum path_elt { path_mod(ident), path_name(ident) }\n@@ -39,6 +39,7 @@ enum ast_node {\n     node_method(@method, def_id /* impl did */, @path /* path to the impl */),\n     node_variant(variant, @item, @path),\n     node_expr(@expr),\n+    node_stmt(@stmt),\n     node_export(@view_path, @path),\n     // Locals are numbered, because the alias analysis needs to know in which\n     // order they are introduced.\n@@ -65,6 +66,7 @@ fn mk_ast_map_visitor() -> vt {\n     return visit::mk_vt(@{\n         visit_item: map_item,\n         visit_expr: map_expr,\n+        visit_stmt: map_stmt,\n         visit_fn: map_fn,\n         visit_local: map_local,\n         visit_arm: map_arm,\n@@ -284,6 +286,11 @@ fn map_expr(ex: @expr, cx: ctx, v: vt) {\n     visit::visit_expr(ex, cx, v);\n }\n \n+fn map_stmt(stmt: @stmt, cx: ctx, v: vt) {\n+    cx.map.insert(stmt_id(*stmt), node_stmt(stmt));\n+    visit::visit_stmt(stmt, cx, v);\n+}\n+\n fn node_id_to_str(map: map, id: node_id) -> ~str {\n     match map.find(id) {\n       none => {\n@@ -313,6 +320,10 @@ fn node_id_to_str(map: map, id: node_id) -> ~str {\n         fmt!{\"expr %s (id=%?)\",\n              pprust::expr_to_str(expr), id}\n       }\n+      some(node_stmt(stmt)) => {\n+        fmt!{\"stmt %s (id=%?)\",\n+             pprust::stmt_to_str(*stmt), id}\n+      }\n       // FIXMEs are as per #2410\n       some(node_export(_, path)) => {\n         fmt!{\"export %s (id=%?)\", // add more info here"}, {"sha": "7b3b20db26978cf75602688d018bc027cee0b0e7", "filename": "src/rustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=ea549e7a71964625f1eb24d7432f222c407d9999", "patch": "@@ -79,10 +79,9 @@ priv impl &preserve_ctxt {\n             let scope_region = if self.root_ub == 0 {\n                 ty::re_static\n             } else {\n-                ty::re_scope(self.root_ub)\n+                ty::re_scope(self.tcx().region_map.get(cmt.id))\n             };\n \n-            // FIXME(#2977)--need to update trans!\n             self.compare_scope(cmt, scope_region)\n           }\n           cat_stack_upvar(cmt) => {"}, {"sha": "c41758f705282486f2c9029ea4bd9b45b9f4e193", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=ea549e7a71964625f1eb24d7432f222c407d9999", "patch": "@@ -389,8 +389,17 @@ fn is_nullary_variant(cx: ctx, ex: @expr) -> bool {\n \n fn check_copy_ex(cx: ctx, ex: @expr, implicit_copy: bool) {\n     if ty::expr_is_lval(cx.method_map, ex) &&\n-       !cx.last_use_map.contains_key(ex.id) &&\n-       !is_nullary_variant(cx, ex) {\n+\n+        // this is a move\n+        !cx.last_use_map.contains_key(ex.id) &&\n+\n+        // a reference to a constant like `none`... no need to warn\n+        // about *this* even if the type is option<~int>\n+        !is_nullary_variant(cx, ex) &&\n+\n+        // borrowed unique value isn't really a copy\n+        !cx.tcx.borrowings.contains_key(ex.id)\n+    {\n         let ty = ty::expr_ty(cx.tcx, ex);\n         check_copy(cx, ex.id, ty, ex.span, implicit_copy);\n     }"}, {"sha": "4071800d4cfebcb98bcaea2edc1bc05db090de74", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 45, "deletions": 24, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=ea549e7a71964625f1eb24d7432f222c407d9999", "patch": "@@ -28,16 +28,24 @@ type binding = {node_id: ast::node_id,\n                 name: ~str,\n                 br: ty::bound_region};\n \n-/// Mapping from a block/expr/binding to the innermost scope that\n-/// bounds its lifetime.  For a block/expression, this is the lifetime\n-/// in which it will be evaluated.  For a binding, this is the lifetime\n-/// in which is in scope.\n+/**\n+Encodes the bounding lifetime for a given AST node:\n+\n+- Expressions are mapped to the expression or block encoding the maximum\n+  (static) lifetime of a value produced by that expression.  This is\n+  generally the innermost call, statement, match, or block.\n+\n+- Variables and bindings are mapped to the block in which they are declared.\n+\n+*/\n type region_map = hashmap<ast::node_id, ast::node_id>;\n \n-type ctxt = {\n-    sess: session,\n-    def_map: resolve3::DefMap,\n-    region_map: region_map,\n+struct ctxt {\n+    sess: session;\n+    def_map: resolve3::DefMap;\n+\n+    // Generated maps:\n+    region_map: region_map;\n \n     // Generally speaking, expressions are parented to their innermost\n     // enclosing block. But some kinds of expressions serve as\n@@ -46,9 +54,9 @@ type ctxt = {\n     // the condition in a while loop is always a parent.  In those\n     // cases, we add the node id of such an expression to this set so\n     // that when we visit it we can view it as a parent.\n-    root_exprs: hashmap<ast::node_id, ()>,\n+    root_exprs: hashmap<ast::node_id, ()>;\n \n-    // The parent scope is the innermost block, call, or alt\n+    // The parent scope is the innermost block, statement, call, or alt\n     // expression during the execution of which the current expression\n     // will be evaluated.  Generally speaking, the innermost parent\n     // scope is also the closest suitable ancestor in the AST tree.\n@@ -79,8 +87,8 @@ type ctxt = {\n     // Here, the first argument `&**x` will be a borrow of the `~int`,\n     // but the second argument overwrites that very value! Bad.\n     // (This test is borrowck-pure-scope-in-call.rs, btw)\n-    parent: parent\n-};\n+    parent: parent;\n+}\n \n /// Returns true if `subscope` is equal to or is lexically nested inside\n /// `superscope` and false otherwise.\n@@ -186,12 +194,9 @@ fn parent_id(cx: ctxt, span: span) -> ast::node_id {\n \n /// Records the current parent (if any) as the parent of `child_id`.\n fn record_parent(cx: ctxt, child_id: ast::node_id) {\n-    match cx.parent {\n-      none => { /* no-op */ }\n-      some(parent_id) => {\n+    for cx.parent.each |parent_id| {\n         debug!{\"parent of node %d is node %d\", child_id, parent_id};\n         cx.region_map.insert(child_id, parent_id);\n-      }\n     }\n }\n \n@@ -200,7 +205,7 @@ fn resolve_block(blk: ast::blk, cx: ctxt, visitor: visit::vt<ctxt>) {\n     record_parent(cx, blk.node.id);\n \n     // Descend.\n-    let new_cx: ctxt = {parent: some(blk.node.id) with cx};\n+    let new_cx: ctxt = ctxt {parent: some(blk.node.id) with cx};\n     visit::visit_block(blk, new_cx, visitor);\n }\n \n@@ -228,6 +233,21 @@ fn resolve_pat(pat: @ast::pat, cx: ctxt, visitor: visit::vt<ctxt>) {\n     visit::visit_pat(pat, cx, visitor);\n }\n \n+fn resolve_stmt(stmt: @ast::stmt, cx: ctxt, visitor: visit::vt<ctxt>) {\n+    match stmt.node {\n+      ast::stmt_decl(*) => {\n+        visit::visit_stmt(stmt, cx, visitor);\n+      }\n+      ast::stmt_expr(expr, stmt_id) |\n+      ast::stmt_semi(expr, stmt_id) => {\n+        record_parent(cx, stmt_id);\n+        let mut expr_cx = cx;\n+        expr_cx.parent = some(stmt_id);\n+        visit::visit_stmt(stmt, expr_cx, visitor);\n+      }\n+    }\n+}\n+\n fn resolve_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n     record_parent(cx, expr.id);\n \n@@ -270,7 +290,7 @@ fn resolve_local(local: @ast::local, cx: ctxt, visitor: visit::vt<ctxt>) {\n \n fn resolve_item(item: @ast::item, cx: ctxt, visitor: visit::vt<ctxt>) {\n     // Items create a new outer block scope as far as we're concerned.\n-    let new_cx: ctxt = {parent: none with cx};\n+    let new_cx: ctxt = ctxt {parent: none with cx};\n     visit::visit_item(item, new_cx, visitor);\n }\n \n@@ -282,7 +302,7 @@ fn resolve_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n       visit::fk_item_fn(*) | visit::fk_method(*) |\n       visit::fk_ctor(*) | visit::fk_dtor(*) => {\n         // Top-level functions are a root scope.\n-        {parent: some(id) with cx}\n+        ctxt {parent: some(id) with cx}\n       }\n \n       visit::fk_anon(*) | visit::fk_fn_block(*) => {\n@@ -304,17 +324,18 @@ fn resolve_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n \n fn resolve_crate(sess: session, def_map: resolve3::DefMap,\n                  crate: @ast::crate) -> region_map {\n-    let cx: ctxt = {sess: sess,\n-                    def_map: def_map,\n-                    region_map: int_hash(),\n-                    root_exprs: int_hash(),\n-                    parent: none};\n+    let cx: ctxt = ctxt {sess: sess,\n+                         def_map: def_map,\n+                         region_map: int_hash(),\n+                         root_exprs: int_hash(),\n+                         parent: none};\n     let visitor = visit::mk_vt(@{\n         visit_block: resolve_block,\n         visit_item: resolve_item,\n         visit_fn: resolve_fn,\n         visit_arm: resolve_arm,\n         visit_pat: resolve_pat,\n+        visit_stmt: resolve_stmt,\n         visit_expr: resolve_expr,\n         visit_local: resolve_local\n         with *visit::default_visitor()"}, {"sha": "d266a5b59d1d09c24b8e1463f9a36c7c7d5f98c5", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ea549e7a71964625f1eb24d7432f222c407d9999", "patch": "@@ -2171,6 +2171,9 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n       ast_map::node_expr(*) => {\n         ccx.tcx.sess.bug(~\"Can't monomorphize an expr\")\n       }\n+      ast_map::node_stmt(*) => {\n+        ccx.tcx.sess.bug(~\"Can't monomorphize a stmt\")\n+      }\n       ast_map::node_export(*) => {\n           ccx.tcx.sess.bug(~\"Can't monomorphize an export\")\n       }\n@@ -2270,21 +2273,14 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n           dtor.node.id, psubsts, some(hash_id), parent_id)\n       }\n       // Ugh -- but this ensures any new variants won't be forgotten\n-      ast_map::node_expr(*) => {\n-        ccx.tcx.sess.bug(~\"Can't monomorphize an expr\")\n-      }\n-      ast_map::node_trait_method(*) => {\n-        ccx.tcx.sess.bug(~\"Can't monomorphize a trait method\")\n-      }\n-      ast_map::node_export(*) => {\n-          ccx.tcx.sess.bug(~\"Can't monomorphize an export\")\n-      }\n-      ast_map::node_arg(*) => ccx.tcx.sess.bug(~\"Can't monomorphize an arg\"),\n-      ast_map::node_block(*) => {\n-          ccx.tcx.sess.bug(~\"Can't monomorphize a block\")\n-      }\n+      ast_map::node_expr(*) |\n+      ast_map::node_stmt(*) |\n+      ast_map::node_trait_method(*) |\n+      ast_map::node_export(*) |\n+      ast_map::node_arg(*) |\n+      ast_map::node_block(*) |\n       ast_map::node_local(*) => {\n-          ccx.tcx.sess.bug(~\"Can't monomorphize a local\")\n+        ccx.tcx.sess.bug(fmt!(\"Can't monomorphize a %?\", map_node))\n       }\n     };\n     ccx.monomorphizing.insert(fn_id, depth);"}, {"sha": "e01fdeee60a16e2b183877ebac9bae659edeccfd", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=ea549e7a71964625f1eb24d7432f222c407d9999", "patch": "@@ -2861,10 +2861,9 @@ fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n             vec::append_one(*path, ast_map::path_name(@~\"dtor\"))\n           }\n \n-\n-          ast_map::node_expr(_) | ast_map::node_arg(_, _) |\n-          ast_map::node_local(_) | ast_map::node_export(_, _) |\n-          ast_map::node_block(_) => {\n+          ast_map::node_stmt(*) | ast_map::node_expr(*) |\n+          ast_map::node_arg(*) | ast_map::node_local(*) |\n+          ast_map::node_export(*) | ast_map::node_block(*) => {\n             cx.sess.bug(fmt!{\"cannot find item_path for node %?\", node});\n           }\n         }"}, {"sha": "ecaad792fb9aa64658d8e611906e64f97e09c130", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=ea549e7a71964625f1eb24d7432f222c407d9999", "patch": "@@ -28,11 +28,13 @@ fn b() {\n \n     // Here I create an outstanding loan and check that we get conflicts:\n \n-    &mut p; //~ NOTE prior loan as mutable granted here\n+    let q = &mut p; //~ NOTE prior loan as mutable granted here\n     //~^ NOTE prior loan as mutable granted here\n \n     p + 3; //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n     p.times(3); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n+\n+    q.x += 1;\n }\n \n fn c() {"}, {"sha": "39550e6ecd437c274615f53c404d728425f05457", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=ea549e7a71964625f1eb24d7432f222c407d9999", "patch": "@@ -35,11 +35,13 @@ fn b() {\n \n     // Here I create an outstanding loan and check that we get conflicts:\n \n-    &mut p; //~ NOTE prior loan as mutable granted here\n+    let l = &mut p; //~ NOTE prior loan as mutable granted here\n     //~^ NOTE prior loan as mutable granted here\n \n     p.purem(); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n     p.impurem(); //~ ERROR loan of mutable local variable as immutable conflicts with prior loan\n+\n+    l.x += 1;\n }\n \n fn c() {"}, {"sha": "4b558d7fe8f15d4a33aee41b00ed2250e18aedd1", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea549e7a71964625f1eb24d7432f222c407d9999/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=ea549e7a71964625f1eb24d7432f222c407d9999", "patch": "@@ -1,3 +1,4 @@\n+// xfail-test #2587\n // error-pattern: copying a noncopyable value\n \n struct r {"}]}