{"sha": "4aa913cd23057484a0128547fef9bad6e5d7bff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYTkxM2NkMjMwNTc0ODRhMDEyODU0N2ZlZjliYWQ2ZTVkN2JmZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-03T08:35:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-03T08:35:51Z"}, "message": "Auto merge of #32012 - bluss:more-drop-in-place, r=alexcrichton\n\nUse `drop_in_place` in Vec and VecDeque\n\nWe can use drop_in_place's DST capabilities directly in Vec::drop and similarly in VecDeque::drop. I verfied this has the same effect as the previous `needs_drop` code; `drop_in_place` it itself an intrinsic.\n\nThe VecDeque replacement should be more efficient too, even in release mode (slice iteration makes a more efficient loop than the deque iterator).", "tree": {"sha": "96bd731950903204ba3533174a25f82e29ab1b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96bd731950903204ba3533174a25f82e29ab1b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa913cd23057484a0128547fef9bad6e5d7bff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa913cd23057484a0128547fef9bad6e5d7bff4", "html_url": "https://github.com/rust-lang/rust/commit/4aa913cd23057484a0128547fef9bad6e5d7bff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa913cd23057484a0128547fef9bad6e5d7bff4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cee8b9ffb6a2dac7e2f729988c2324e2f8ac10f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cee8b9ffb6a2dac7e2f729988c2324e2f8ac10f", "html_url": "https://github.com/rust-lang/rust/commit/7cee8b9ffb6a2dac7e2f729988c2324e2f8ac10f"}, {"sha": "7ceafaee4f3d8ed2268b1659dd99a541d71689a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ceafaee4f3d8ed2268b1659dd99a541d71689a3", "html_url": "https://github.com/rust-lang/rust/commit/7ceafaee4f3d8ed2268b1659dd99a541d71689a3"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "efcb5d2ceb3aa2c51a3f41649821f524ae3fdb42", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4aa913cd23057484a0128547fef9bad6e5d7bff4/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa913cd23057484a0128547fef9bad6e5d7bff4/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=4aa913cd23057484a0128547fef9bad6e5d7bff4", "patch": "@@ -66,7 +66,7 @@ use borrow::ToOwned;\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{self, Hash};\n-use core::intrinsics::{arith_offset, assume, needs_drop};\n+use core::intrinsics::{arith_offset, assume};\n use core::iter::FromIterator;\n use core::mem;\n use core::ops::{Index, IndexMut};\n@@ -497,10 +497,11 @@ impl<T> Vec<T> {\n         unsafe {\n             // drop any extra elements\n             while len < self.len {\n-                // decrement len before the read(), so a panic on Drop doesn't\n-                // re-drop the just-failed value.\n+                // decrement len before the drop_in_place(), so a panic on Drop\n+                // doesn't re-drop the just-failed value.\n                 self.len -= 1;\n-                ptr::read(self.get_unchecked(self.len));\n+                let len = self.len;\n+                ptr::drop_in_place(self.get_unchecked_mut(len));\n             }\n         }\n     }\n@@ -1471,13 +1472,8 @@ impl<T> Drop for Vec<T> {\n     fn drop(&mut self) {\n         if self.buf.unsafe_no_drop_flag_needs_drop() {\n             unsafe {\n-                // The branch on needs_drop() is an -O1 performance optimization.\n-                // Without the branch, dropping Vec<u8> takes linear time.\n-                if needs_drop::<T>() {\n-                    for x in self.iter_mut() {\n-                        ptr::drop_in_place(x);\n-                    }\n-                }\n+                // use drop for [T]\n+                ptr::drop_in_place(&mut self[..]);\n             }\n         }\n         // RawVec handles deallocation"}, {"sha": "3e48f14d387ffff924a67849ead1881b011df078", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4aa913cd23057484a0128547fef9bad6e5d7bff4/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa913cd23057484a0128547fef9bad6e5d7bff4/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=4aa913cd23057484a0128547fef9bad6e5d7bff4", "patch": "@@ -70,7 +70,12 @@ impl<T: Clone> Clone for VecDeque<T> {\n impl<T> Drop for VecDeque<T> {\n     #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n-        self.clear();\n+        let (front, back) = self.as_mut_slices();\n+        unsafe {\n+            // use drop for [T]\n+            ptr::drop_in_place(front);\n+            ptr::drop_in_place(back);\n+        }\n         // RawVec handles deallocation\n     }\n }"}]}