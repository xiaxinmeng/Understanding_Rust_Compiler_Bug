{"sha": "163374644ba96f4040e28fd7197fb64e7448df93", "node_id": "C_kwDOAAsO6NoAKDE2MzM3NDY0NGJhOTZmNDA0MGUyOGZkNzE5N2ZiNjRlNzQ0OGRmOTM", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-05-20T19:27:34Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-05-30T14:51:38Z"}, "message": "Handle more cases in cfg_accessible", "tree": {"sha": "8e76d2fcc2494ffa624459bd96925bab443ea612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e76d2fcc2494ffa624459bd96925bab443ea612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/163374644ba96f4040e28fd7197fb64e7448df93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/163374644ba96f4040e28fd7197fb64e7448df93", "html_url": "https://github.com/rust-lang/rust/commit/163374644ba96f4040e28fd7197fb64e7448df93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/163374644ba96f4040e28fd7197fb64e7448df93/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8", "html_url": "https://github.com/rust-lang/rust/commit/bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8"}], "stats": {"total": 104, "additions": 55, "deletions": 49}, "files": [{"sha": "31d7bda5989f4e7c4e5a2659fdd7424f7a7b19b4", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/163374644ba96f4040e28fd7197fb64e7448df93/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163374644ba96f4040e28fd7197fb64e7448df93/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=163374644ba96f4040e28fd7197fb64e7448df93", "patch": "@@ -443,11 +443,20 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                 PathResult::NonModule(partial_res) if partial_res.unresolved_segments() == 0 => {\n                     return Ok(true);\n                 }\n+                PathResult::NonModule(..) => {\n+                    self.session\n+                        .struct_span_err(span, \"not sure whether the path is accessible or not\")\n+                        .note(\"the type may have associated items, but we are currently not checking them\")\n+                        .emit();\n+\n+                    // If we get a partially resolved NonModule in one namespace, we should get the\n+                    // same result in any other namespaces, so we can return early.\n+                    return Ok(false);\n+                }\n                 PathResult::Indeterminate => indeterminate = true,\n-                // FIXME: `resolve_path` is not ready to report partially resolved paths\n-                // correctly, so we just report an error if the path was reported as unresolved.\n-                // This needs to be fixed for `cfg_accessible` to be useful.\n-                PathResult::NonModule(..) | PathResult::Failed { .. } => {}\n+                // We can only be sure that a path doesn't exist after having tested all the\n+                // posibilities, only at that time we can return false.\n+                PathResult::Failed { .. } => {}\n                 PathResult::Module(_) => panic!(\"unexpected path resolution\"),\n             }\n         }\n@@ -456,10 +465,6 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             return Err(Indeterminate);\n         }\n \n-        self.session\n-            .struct_span_err(span, \"not sure whether the path is accessible or not\")\n-            .span_note(span, \"`cfg_accessible` is not fully implemented\")\n-            .emit();\n         Ok(false)\n     }\n "}, {"sha": "df380d0d16f14ea3418bc664b96b26d384ddc667", "filename": "src/test/ui/conditional-compilation/cfg_accessible.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/163374644ba96f4040e28fd7197fb64e7448df93/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163374644ba96f4040e28fd7197fb64e7448df93/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.rs?ref=163374644ba96f4040e28fd7197fb64e7448df93", "patch": "@@ -5,20 +5,35 @@ mod m {\n     struct ExistingPrivate;\n }\n \n+trait Trait {\n+    type Assoc;\n+}\n+\n+enum Enum {\n+    Existing,\n+}\n+\n+#[cfg_accessible(Enum)]\n+struct ExistingResolved;\n+\n+#[cfg_accessible(Enum::Existing)]\n+struct ExistingResolvedVariant;\n+\n #[cfg_accessible(m::ExistingPublic)]\n struct ExistingPublic;\n \n-// FIXME: Not implemented yet.\n-#[cfg_accessible(m::ExistingPrivate)] //~ ERROR not sure whether the path is accessible or not\n+#[cfg_accessible(m::ExistingPrivate)]\n struct ExistingPrivate;\n \n-// FIXME: Not implemented yet.\n-#[cfg_accessible(m::NonExistent)] //~ ERROR not sure whether the path is accessible or not\n-struct ExistingPrivate;\n+#[cfg_accessible(m::NonExistent)]\n+struct NonExistingPrivate;\n \n #[cfg_accessible(n::AccessibleExpanded)] // OK, `cfg_accessible` can wait and retry.\n struct AccessibleExpanded;\n \n+#[cfg_accessible(Trait::Assoc)]\n+struct AccessibleTraitAssoc;\n+\n macro_rules! generate_accessible_expanded {\n     () => {\n         mod n {\n@@ -29,15 +44,12 @@ macro_rules! generate_accessible_expanded {\n \n generate_accessible_expanded!();\n \n-struct S {\n-    field: u8,\n-}\n-\n-// FIXME: Not implemented yet.\n-#[cfg_accessible(S::field)] //~ ERROR not sure whether the path is accessible or not\n-struct Field;\n-\n fn main() {\n     ExistingPublic;\n     AccessibleExpanded;\n+    AccessibleTraitAssoc;\n+\n+    ExistingPrivate; //~ ERROR cannot find\n+    NonExistingPrivate; //~ ERROR cannot find\n+    NonExistingTraitAlias; //~ ERROR cannot find\n }"}, {"sha": "e3731a1ad7128e9db68641811942c925ddb67e7d", "filename": "src/test/ui/conditional-compilation/cfg_accessible.stderr", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/163374644ba96f4040e28fd7197fb64e7448df93/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/163374644ba96f4040e28fd7197fb64e7448df93/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.stderr?ref=163374644ba96f4040e28fd7197fb64e7448df93", "patch": "@@ -1,38 +1,27 @@\n-error: not sure whether the path is accessible or not\n-  --> $DIR/cfg_accessible.rs:12:18\n+error[E0425]: cannot find value `ExistingPrivate` in this scope\n+  --> $DIR/cfg_accessible.rs:52:5\n    |\n-LL | #[cfg_accessible(m::ExistingPrivate)]\n-   |                  ^^^^^^^^^^^^^^^^^^\n+LL |     ExistingPrivate;\n+   |     ^^^^^^^^^^^^^^^ not found in this scope\n    |\n-note: `cfg_accessible` is not fully implemented\n-  --> $DIR/cfg_accessible.rs:12:18\n+note: unit struct `m::ExistingPrivate` exists but is inaccessible\n+  --> $DIR/cfg_accessible.rs:5:5\n    |\n-LL | #[cfg_accessible(m::ExistingPrivate)]\n-   |                  ^^^^^^^^^^^^^^^^^^\n+LL |     struct ExistingPrivate;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ not accessible\n \n-error: not sure whether the path is accessible or not\n-  --> $DIR/cfg_accessible.rs:16:18\n+error[E0425]: cannot find value `NonExistingPrivate` in this scope\n+  --> $DIR/cfg_accessible.rs:53:5\n    |\n-LL | #[cfg_accessible(m::NonExistent)]\n-   |                  ^^^^^^^^^^^^^^\n-   |\n-note: `cfg_accessible` is not fully implemented\n-  --> $DIR/cfg_accessible.rs:16:18\n-   |\n-LL | #[cfg_accessible(m::NonExistent)]\n-   |                  ^^^^^^^^^^^^^^\n+LL |     NonExistingPrivate;\n+   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n \n-error: not sure whether the path is accessible or not\n-  --> $DIR/cfg_accessible.rs:37:18\n-   |\n-LL | #[cfg_accessible(S::field)]\n-   |                  ^^^^^^^^\n-   |\n-note: `cfg_accessible` is not fully implemented\n-  --> $DIR/cfg_accessible.rs:37:18\n+error[E0425]: cannot find value `NonExistingTraitAlias` in this scope\n+  --> $DIR/cfg_accessible.rs:54:5\n    |\n-LL | #[cfg_accessible(S::field)]\n-   |                  ^^^^^^^^\n+LL |     NonExistingTraitAlias;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0425`."}]}