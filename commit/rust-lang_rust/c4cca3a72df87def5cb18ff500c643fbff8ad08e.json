{"sha": "c4cca3a72df87def5cb18ff500c643fbff8ad08e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Y2NhM2E3MmRmODdkZWY1Y2IxOGZmNTAwYzY0M2ZiZmY4YWQwOGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-30T10:03:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-30T10:03:00Z"}, "message": "Auto merge of #44936 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 15 pull requests\n\n- Successful merges: #44124, #44287, #44320, #44694, #44708, #44794, #44797, #44824, #44836, #44840, #44845, #44854, #44889, #44900, #44903\n- Failed merges:", "tree": {"sha": "84bdfe7073e5743f51ea9eadb31cd13560f7fe95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84bdfe7073e5743f51ea9eadb31cd13560f7fe95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4cca3a72df87def5cb18ff500c643fbff8ad08e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4cca3a72df87def5cb18ff500c643fbff8ad08e", "html_url": "https://github.com/rust-lang/rust/commit/c4cca3a72df87def5cb18ff500c643fbff8ad08e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4cca3a72df87def5cb18ff500c643fbff8ad08e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4491ea5a3f21b63e7d0f39d9294308673a6e9715", "url": "https://api.github.com/repos/rust-lang/rust/commits/4491ea5a3f21b63e7d0f39d9294308673a6e9715", "html_url": "https://github.com/rust-lang/rust/commit/4491ea5a3f21b63e7d0f39d9294308673a6e9715"}, {"sha": "d6451f0b33a112217fd59dc4d3c938796bdbbcd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6451f0b33a112217fd59dc4d3c938796bdbbcd7", "html_url": "https://github.com/rust-lang/rust/commit/d6451f0b33a112217fd59dc4d3c938796bdbbcd7"}], "stats": {"total": 776, "additions": 458, "deletions": 318}, "files": [{"sha": "e7a5196178c3f0758244c01487da0f53fecfb225", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -306,7 +306,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n-            Subcommand::Clean => panic!(),\n+            Subcommand::Clean { .. } => panic!(),\n         };\n \n         let builder = Builder {"}, {"sha": "87f194fb7d2f85d4ae3eed1e32efd0390331975b", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -13,32 +13,37 @@\n //! Responsible for cleaning out a build directory of all old and stale\n //! artifacts to prepare for a fresh build. Currently doesn't remove the\n //! `build/cache` directory (download cache) or the `build/$target/llvm`\n-//! directory as we want that cached between builds.\n+//! directory unless the --all flag is present.\n \n use std::fs;\n use std::io::{self, ErrorKind};\n use std::path::Path;\n \n use Build;\n \n-pub fn clean(build: &Build) {\n+pub fn clean(build: &Build, all: bool) {\n     rm_rf(\"tmp\".as_ref());\n-    rm_rf(&build.out.join(\"tmp\"));\n-    rm_rf(&build.out.join(\"dist\"));\n \n-    for host in &build.hosts {\n-        let entries = match build.out.join(host).read_dir() {\n-            Ok(iter) => iter,\n-            Err(_) => continue,\n-        };\n+    if all {\n+        rm_rf(&build.out);\n+    } else {\n+        rm_rf(&build.out.join(\"tmp\"));\n+        rm_rf(&build.out.join(\"dist\"));\n \n-        for entry in entries {\n-            let entry = t!(entry);\n-            if entry.file_name().to_str() == Some(\"llvm\") {\n-                continue\n+        for host in &build.hosts {\n+            let entries = match build.out.join(host).read_dir() {\n+                Ok(iter) => iter,\n+                Err(_) => continue,\n+            };\n+\n+            for entry in entries {\n+                let entry = t!(entry);\n+                if entry.file_name().to_str() == Some(\"llvm\") {\n+                    continue\n+                }\n+                let path = t!(entry.path().canonicalize());\n+                rm_rf(&path);\n             }\n-            let path = t!(entry.path().canonicalize());\n-            rm_rf(&path);\n         }\n     }\n }"}, {"sha": "df378188b4ad05c0fe044c2be4a3bcad820af1d8", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -60,7 +60,9 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n         test_args: Vec<String>,\n     },\n-    Clean,\n+    Clean {\n+        all: bool,\n+    },\n     Dist {\n         paths: Vec<PathBuf>,\n     },\n@@ -147,6 +149,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n             },\n             \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n+            \"clean\" => { opts.optflag(\"\", \"all\", \"clean all build artifacts\"); },\n             _ => { },\n         };\n \n@@ -250,17 +253,18 @@ Arguments:\n             }\n         });\n \n-        // All subcommands can have an optional \"Available paths\" section\n+        // All subcommands except `clean` can have an optional \"Available paths\" section\n         if matches.opt_present(\"verbose\") {\n             let config = Config::parse(&[\"build\".to_string()]);\n             let mut build = Build::new(config);\n             metadata::build(&mut build);\n \n             let maybe_rules_help = Builder::get_help(&build, subcommand.as_str());\n             extra_help.push_str(maybe_rules_help.unwrap_or_default().as_str());\n-        } else {\n-            extra_help.push_str(format!(\"Run `./x.py {} -h -v` to see a list of available paths.\",\n-                     subcommand).as_str());\n+        } else if subcommand.as_str() != \"clean\" {\n+            extra_help.push_str(format!(\n+                \"Run `./x.py {} -h -v` to see a list of available paths.\",\n+                subcommand).as_str());\n         }\n \n         // User passed in -h/--help?\n@@ -290,10 +294,13 @@ Arguments:\n             }\n             \"clean\" => {\n                 if paths.len() > 0 {\n-                    println!(\"\\nclean takes no arguments\\n\");\n+                    println!(\"\\nclean does not take a path argument\\n\");\n                     usage(1, &opts, &subcommand_help, &extra_help);\n                 }\n-                Subcommand::Clean\n+\n+                Subcommand::Clean {\n+                    all: matches.opt_present(\"all\"),\n+                }\n             }\n             \"dist\" => {\n                 Subcommand::Dist {"}, {"sha": "2d721f455785a0fa8152365b26411173917e7c3e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -345,8 +345,8 @@ impl Build {\n             job::setup(self);\n         }\n \n-        if let Subcommand::Clean = self.config.cmd {\n-            return clean::clean(self);\n+        if let Subcommand::Clean { all } = self.config.cmd {\n+            return clean::clean(self, all);\n         }\n \n         self.verbose(\"finding compilers\");"}, {"sha": "c4e80630315200e651e77ba1d72a019e75026e49", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -367,7 +367,7 @@ impl Step for Openssl {\n             if !ok {\n                 panic!(\"failed to download openssl source\")\n             }\n-            let mut shasum = if target.contains(\"apple\") {\n+            let mut shasum = if target.contains(\"apple\") || build.build.contains(\"netbsd\") {\n                 let mut cmd = Command::new(\"shasum\");\n                 cmd.arg(\"-a\").arg(\"256\");\n                 cmd\n@@ -387,7 +387,7 @@ impl Step for Openssl {\n         let dst = build.openssl_install_dir(target).unwrap();\n         drop(fs::remove_dir_all(&obj));\n         drop(fs::remove_dir_all(&dst));\n-        build.run(Command::new(\"tar\").arg(\"xf\").arg(&tarball).current_dir(&out));\n+        build.run(Command::new(\"tar\").arg(\"zxf\").arg(&tarball).current_dir(&out));\n \n         let mut configure = Command::new(\"perl\");\n         configure.arg(obj.join(\"Configure\"));"}, {"sha": "fedb4094c8aaafd25732e8b163517fd057def3d2", "filename": "src/ci/docker/disabled/aarch64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -31,7 +31,7 @@ WORKDIR /build\n # The `config` config file was a previously generated config file for\n # the kernel. This file was generated by running `make defconfig`\n # followed by `make menuconfig` and then enabling the IPv6 protocol page.\n-COPY disabled/aarch64-gnu/config /build/.config\n+COPY aarch64-gnu/config /build/.config\n RUN curl https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.42.tar.xz | \\\n       tar xJf - && \\\n       cd /build/linux-4.4.42 && \\"}, {"sha": "8653b0e8b465ec5dda9a20a1b6bf3d9d592e322d", "filename": "src/ci/docker/disabled/wasm32-exp/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n \n # emscripten\n COPY scripts/emscripten-wasm.sh /scripts/\n-COPY disabled/wasm32-exp/node.sh /usr/local/bin/node\n+COPY wasm32-exp/node.sh /usr/local/bin/node\n RUN bash /scripts/emscripten-wasm.sh\n \n # cache"}, {"sha": "b2560c6b95b4ccf68f7766c61cded75c91dece55", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -36,12 +36,14 @@ elif [ -f \"$docker_dir/disabled/$image/Dockerfile\" ]; then\n         echo Cannot run disabled images on travis!\n         exit 1\n     fi\n-    retry docker \\\n+    # retry messes with the pipe from tar to docker. Not needed on non-travis\n+    # Transform changes the context of disabled Dockerfiles to match the enabled ones\n+    tar --transform 's#^./disabled/#./#' -C $docker_dir -c . | docker \\\n       build \\\n       --rm \\\n       -t rust-ci \\\n-      -f \"$docker_dir/disabled/$image/Dockerfile\" \\\n-      \"$docker_dir\"\n+      -f \"$image/Dockerfile\" \\\n+      -\n else\n     echo Invalid image: $image\n     exit 1"}, {"sha": "725d3e15f4a614c52250f20a0cd06cb6e8bdf4af", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -1950,7 +1950,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(u, &[1, 2]);\n     /// ```\n     #[inline]\n-    #[stable(feature = \"vec_splice\", since = \"1.22.0\")]\n+    #[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n     pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<I::IntoIter>\n         where R: RangeArgument<usize>, I: IntoIterator<Item=T>\n     {\n@@ -2553,13 +2553,13 @@ impl<'a, T> InPlace<T> for PlaceBack<'a, T> {\n /// [`splice()`]: struct.Vec.html#method.splice\n /// [`Vec`]: struct.Vec.html\n #[derive(Debug)]\n-#[stable(feature = \"vec_splice\", since = \"1.22.0\")]\n+#[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n pub struct Splice<'a, I: Iterator + 'a> {\n     drain: Drain<'a, I::Item>,\n     replace_with: I,\n }\n \n-#[stable(feature = \"vec_splice\", since = \"1.22.0\")]\n+#[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n impl<'a, I: Iterator> Iterator for Splice<'a, I> {\n     type Item = I::Item;\n \n@@ -2572,18 +2572,18 @@ impl<'a, I: Iterator> Iterator for Splice<'a, I> {\n     }\n }\n \n-#[stable(feature = \"vec_splice\", since = \"1.22.0\")]\n+#[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n impl<'a, I: Iterator> DoubleEndedIterator for Splice<'a, I> {\n     fn next_back(&mut self) -> Option<Self::Item> {\n         self.drain.next_back()\n     }\n }\n \n-#[stable(feature = \"vec_splice\", since = \"1.22.0\")]\n+#[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n impl<'a, I: Iterator> ExactSizeIterator for Splice<'a, I> {}\n \n \n-#[stable(feature = \"vec_splice\", since = \"1.22.0\")]\n+#[stable(feature = \"vec_splice\", since = \"1.21.0\")]\n impl<'a, I: Iterator> Drop for Splice<'a, I> {\n     fn drop(&mut self) {\n         // exhaust drain first"}, {"sha": "e012cbd76ff91009a9602f8bdb74f6db614a759f", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -456,7 +456,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// assert_eq!(2, 1.max(2));\n     /// assert_eq!(2, 2.max(2));\n     /// ```\n-    #[stable(feature = \"ord_max_min\", since = \"1.22.0\")]\n+    #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n     fn max(self, other: Self) -> Self\n     where Self: Sized {\n         if other >= self { other } else { self }\n@@ -472,7 +472,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// assert_eq!(1, 1.min(2));\n     /// assert_eq!(2, 2.min(2));\n     /// ```\n-    #[stable(feature = \"ord_max_min\", since = \"1.22.0\")]\n+    #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n     fn min(self, other: Self) -> Self\n     where Self: Sized {\n         if self <= other { self } else { other }"}, {"sha": "6c251b9eb09249e662752f3017ec039d23ca3f2f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -488,13 +488,14 @@ impl<'a> Display for Arguments<'a> {\n /// The origin is: Point { x: 0, y: 0 }\n /// ```\n ///\n-/// There are a number of `debug_*` methods on `Formatter` to help you with manual\n+/// There are a number of `debug_*` methods on [`Formatter`] to help you with manual\n /// implementations, such as [`debug_struct`][debug_struct].\n ///\n /// `Debug` implementations using either `derive` or the debug builder API\n-/// on `Formatter` support pretty printing using the alternate flag: `{:#?}`.\n+/// on [`Formatter`] support pretty printing using the alternate flag: `{:#?}`.\n ///\n /// [debug_struct]: ../../std/fmt/struct.Formatter.html#method.debug_struct\n+/// [`Formatter`]: ../../std/fmt/struct.Formatter.html\n ///\n /// Pretty printing with `#?`:\n ///\n@@ -1321,8 +1322,11 @@ impl<'a> Formatter<'a> {\n         self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0\n     }\n \n-    /// Creates a `DebugStruct` builder designed to assist with creation of\n-    /// `fmt::Debug` implementations for structs.\n+    /// Creates a [`DebugStruct`] builder designed to assist with creation of\n+    /// [`fmt::Debug`] implementations for structs.\n+    ///\n+    /// [`DebugStruct`]: ../../std/fmt/struct.DebugStruct.html\n+    /// [`fmt::Debug`]: ../../std/fmt/trait.Debug.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "cb215a38e5356247808236b1286732338a53ebc9", "filename": "src/libcore/internal_macros.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -68,3 +68,22 @@ macro_rules! forward_ref_binop {\n         }\n     }\n }\n+\n+// implements \"T op= &U\", based on \"T op= U\"\n+// where U is expected to be `Copy`able\n+macro_rules! forward_ref_op_assign {\n+    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\n+        forward_ref_op_assign!(impl $imp, $method for $t, $u,\n+                #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]);\n+    };\n+    (impl $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n+        #[$attr]\n+        impl<'a> $imp<&'a $u> for $t {\n+            #[inline]\n+            fn $method(&mut self, other: &'a $u) {\n+                $imp::$method(self, *other);\n+            }\n+        }\n+    }\n+}\n+"}, {"sha": "e9e31065cf876f14d52dbef947467e687ae36143", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -518,7 +518,7 @@ pub trait Iterator {\n     ///       .for_each(|(i, x)| println!(\"{}:{}\", i, x));\n     /// ```\n     #[inline]\n-    #[stable(feature = \"iterator_for_each\", since = \"1.22.0\")]\n+    #[stable(feature = \"iterator_for_each\", since = \"1.21.0\")]\n     fn for_each<F>(self, mut f: F) where\n         Self: Sized, F: FnMut(Self::Item),\n     {"}, {"sha": "8d2521b053eb5c5e129f2b019f37797bfe0bc934", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -558,7 +558,7 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n \n-/// An adapter for stepping iterators by a custom amount.\n+/// An iterator for stepping iterators by a custom amount.\n ///\n /// This `struct` is created by the [`step_by`] method on [`Iterator`]. See\n /// its documentation for more."}, {"sha": "f56a9a40332987c804e829fa35d362416c241a53", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -122,7 +122,7 @@ pub trait Sized {\n /// [RFC982]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n /// [nomicon-coerce]: ../../nomicon/coercions.html\n #[unstable(feature = \"unsize\", issue = \"27732\")]\n-#[lang=\"unsize\"]\n+#[lang = \"unsize\"]\n pub trait Unsize<T: ?Sized> {\n     // Empty.\n }"}, {"sha": "c869054cee81abdfb31db0c70fbea540e57645e9", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -402,7 +402,7 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// }\n /// ```\n #[inline]\n-#[stable(feature = \"needs_drop\", since = \"1.22.0\")]\n+#[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n pub fn needs_drop<T>() -> bool {\n     unsafe { intrinsics::needs_drop::<T>() }\n }"}, {"sha": "ae1b0b3ce11b209cfff581408724b3a05a4c864f", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -36,6 +36,7 @@ macro_rules! sh_impl_signed {\n                 *self = *self << other;\n             }\n         }\n+        forward_ref_op_assign! { impl ShlAssign, shl_assign for Wrapping<$t>, $f }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Shr<$f> for Wrapping<$t> {\n@@ -58,6 +59,7 @@ macro_rules! sh_impl_signed {\n                 *self = *self >> other;\n             }\n         }\n+        forward_ref_op_assign! { impl ShrAssign, shr_assign for Wrapping<$t>, $f }\n     )\n }\n \n@@ -80,6 +82,7 @@ macro_rules! sh_impl_unsigned {\n                 *self = *self << other;\n             }\n         }\n+        forward_ref_op_assign! { impl ShlAssign, shl_assign for Wrapping<$t>, $f }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Shr<$f> for Wrapping<$t> {\n@@ -98,6 +101,7 @@ macro_rules! sh_impl_unsigned {\n                 *self = *self >> other;\n             }\n         }\n+        forward_ref_op_assign! { impl ShrAssign, shr_assign for Wrapping<$t>, $f }\n     )\n }\n \n@@ -142,6 +146,7 @@ macro_rules! wrapping_impl {\n                 *self = *self + other;\n             }\n         }\n+        forward_ref_op_assign! { impl AddAssign, add_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Sub for Wrapping<$t> {\n@@ -162,6 +167,7 @@ macro_rules! wrapping_impl {\n                 *self = *self - other;\n             }\n         }\n+        forward_ref_op_assign! { impl SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Mul for Wrapping<$t> {\n@@ -182,6 +188,7 @@ macro_rules! wrapping_impl {\n                 *self = *self * other;\n             }\n         }\n+        forward_ref_op_assign! { impl MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_div\", since = \"1.3.0\")]\n         impl Div for Wrapping<$t> {\n@@ -202,6 +209,7 @@ macro_rules! wrapping_impl {\n                 *self = *self / other;\n             }\n         }\n+        forward_ref_op_assign! { impl DivAssign, div_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n         impl Rem for Wrapping<$t> {\n@@ -222,6 +230,7 @@ macro_rules! wrapping_impl {\n                 *self = *self % other;\n             }\n         }\n+        forward_ref_op_assign! { impl RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Not for Wrapping<$t> {\n@@ -254,6 +263,7 @@ macro_rules! wrapping_impl {\n                 *self = *self ^ other;\n             }\n         }\n+        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl BitOr for Wrapping<$t> {\n@@ -274,6 +284,7 @@ macro_rules! wrapping_impl {\n                 *self = *self | other;\n             }\n         }\n+        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl BitAnd for Wrapping<$t> {\n@@ -294,6 +305,7 @@ macro_rules! wrapping_impl {\n                 *self = *self & other;\n             }\n         }\n+        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_neg\", since = \"1.10.0\")]\n         impl Neg for Wrapping<$t> {"}, {"sha": "8b3d662a6db774382bd9b14e7591ed55bffca87e", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -662,6 +662,8 @@ macro_rules! add_assign_impl {\n             #[rustc_inherit_overflow_checks]\n             fn add_assign(&mut self, other: $t) { *self += other }\n         }\n+\n+        forward_ref_op_assign! { impl AddAssign, add_assign for $t, $t }\n     )+)\n }\n \n@@ -713,6 +715,8 @@ macro_rules! sub_assign_impl {\n             #[rustc_inherit_overflow_checks]\n             fn sub_assign(&mut self, other: $t) { *self -= other }\n         }\n+\n+        forward_ref_op_assign! { impl SubAssign, sub_assign for $t, $t }\n     )+)\n }\n \n@@ -755,6 +759,8 @@ macro_rules! mul_assign_impl {\n             #[rustc_inherit_overflow_checks]\n             fn mul_assign(&mut self, other: $t) { *self *= other }\n         }\n+\n+        forward_ref_op_assign! { impl MulAssign, mul_assign for $t, $t }\n     )+)\n }\n \n@@ -796,6 +802,8 @@ macro_rules! div_assign_impl {\n             #[inline]\n             fn div_assign(&mut self, other: $t) { *self /= other }\n         }\n+\n+        forward_ref_op_assign! { impl DivAssign, div_assign for $t, $t }\n     )+)\n }\n \n@@ -841,6 +849,8 @@ macro_rules! rem_assign_impl {\n             #[inline]\n             fn rem_assign(&mut self, other: $t) { *self %= other }\n         }\n+\n+        forward_ref_op_assign! { impl RemAssign, rem_assign for $t, $t }\n     )+)\n }\n "}, {"sha": "7ac5fc4debf1489150e9f1d4e151e1c60231edc0", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -593,6 +593,8 @@ macro_rules! bitand_assign_impl {\n             #[inline]\n             fn bitand_assign(&mut self, other: $t) { *self &= other }\n         }\n+\n+        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for $t, $t }\n     )+)\n }\n \n@@ -638,6 +640,8 @@ macro_rules! bitor_assign_impl {\n             #[inline]\n             fn bitor_assign(&mut self, other: $t) { *self |= other }\n         }\n+\n+        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for $t, $t }\n     )+)\n }\n \n@@ -683,6 +687,8 @@ macro_rules! bitxor_assign_impl {\n             #[inline]\n             fn bitxor_assign(&mut self, other: $t) { *self ^= other }\n         }\n+\n+        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for $t, $t }\n     )+)\n }\n \n@@ -729,6 +735,8 @@ macro_rules! shl_assign_impl {\n                 *self <<= other\n             }\n         }\n+\n+        forward_ref_op_assign! { impl ShlAssign, shl_assign for $t, $f }\n     )\n }\n \n@@ -793,6 +801,8 @@ macro_rules! shr_assign_impl {\n                 *self >>= other\n             }\n         }\n+\n+        forward_ref_op_assign! { impl ShrAssign, shr_assign for $t, $f }\n     )\n }\n "}, {"sha": "cd896859b16bc7eb703de393279305f37d8529b5", "filename": "src/libcore/ops/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Funsize.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -42,7 +42,7 @@ use marker::Unsize;\n /// [unsize]: ../marker/trait.Unsize.html\n /// [nomicon-coerce]: ../../nomicon/coercions.html\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n-#[lang=\"coerce_unsized\"]\n+#[lang = \"coerce_unsized\"]\n pub trait CoerceUnsized<T> {\n     // Empty.\n }"}, {"sha": "34d310446536d19c41317681feebfa99d87be15b", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -56,7 +56,7 @@ pub use intrinsics::write_bytes;\n /// This has all the same safety problems as `ptr::read` with respect to\n /// invalid pointers, types, and double drops.\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n-#[lang=\"drop_in_place\"]\n+#[lang = \"drop_in_place\"]\n #[allow(unconditional_recursion)]\n pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     // Code here does not matter - this is replaced by the"}, {"sha": "465d31b5f493da413c793293f68a15d35a234664", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -926,10 +926,24 @@ macro_rules! atomic_int {\n      $stable_cxchg:meta,\n      $stable_debug:meta,\n      $stable_access:meta,\n+     $s_int_type:expr, $int_ref:expr,\n      $int_type:ident $atomic_type:ident $atomic_init:ident) => {\n         /// An integer type which can be safely shared between threads.\n         ///\n-        /// This type has the same in-memory representation as the underlying integer type.\n+        /// This type has the same in-memory representation as the underlying\n+        /// integer type, [`\n+        #[doc = $s_int_type]\n+        /// `](\n+        #[doc = $int_ref]\n+        /// ). For more about the differences between atomic types and\n+        /// non-atomic types, please see the [module-level documentation].\n+        ///\n+        /// Please note that examples are shared between atomic variants of\n+        /// primitive integer types, so it's normal that they are all\n+        /// demonstrating [`AtomicIsize`].\n+        ///\n+        /// [module-level documentation]: index.html\n+        /// [`AtomicIsize`]: struct.AtomicIsize.html\n         #[$stable]\n         pub struct $atomic_type {\n             v: UnsafeCell<$int_type>,\n@@ -1339,6 +1353,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"i8\", \"../../../std/primitive.i8.html\",\n     i8 AtomicI8 ATOMIC_I8_INIT\n }\n #[cfg(target_has_atomic = \"8\")]\n@@ -1348,6 +1363,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"u8\", \"../../../std/primitive.u8.html\",\n     u8 AtomicU8 ATOMIC_U8_INIT\n }\n #[cfg(target_has_atomic = \"16\")]\n@@ -1357,6 +1373,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"i16\", \"../../../std/primitive.i16.html\",\n     i16 AtomicI16 ATOMIC_I16_INIT\n }\n #[cfg(target_has_atomic = \"16\")]\n@@ -1366,6 +1383,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"u16\", \"../../../std/primitive.u16.html\",\n     u16 AtomicU16 ATOMIC_U16_INIT\n }\n #[cfg(target_has_atomic = \"32\")]\n@@ -1375,6 +1393,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"i32\", \"../../../std/primitive.i32.html\",\n     i32 AtomicI32 ATOMIC_I32_INIT\n }\n #[cfg(target_has_atomic = \"32\")]\n@@ -1384,6 +1403,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"u32\", \"../../../std/primitive.u32.html\",\n     u32 AtomicU32 ATOMIC_U32_INIT\n }\n #[cfg(target_has_atomic = \"64\")]\n@@ -1393,6 +1413,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"i64\", \"../../../std/primitive.i64.html\",\n     i64 AtomicI64 ATOMIC_I64_INIT\n }\n #[cfg(target_has_atomic = \"64\")]\n@@ -1402,6 +1423,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    \"u64\", \"../../../std/primitive.u64.html\",\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n #[cfg(target_has_atomic = \"ptr\")]\n@@ -1411,6 +1433,7 @@ atomic_int!{\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n+    \"isize\", \"../../../std/primitive.isize.html\",\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n #[cfg(target_has_atomic = \"ptr\")]\n@@ -1420,6 +1443,7 @@ atomic_int!{\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n+    \"usize\", \"../../../std/primitive.usize.html\",\n     usize AtomicUsize ATOMIC_USIZE_INIT\n }\n \n@@ -1752,7 +1776,7 @@ pub fn fence(order: Ordering) {\n /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n /// [memory barriers]: https://www.kernel.org/doc/Documentation/memory-barriers.txt\n #[inline]\n-#[stable(feature = \"compiler_fences\", since = \"1.22.0\")]\n+#[stable(feature = \"compiler_fences\", since = \"1.21.0\")]\n pub fn compiler_fence(order: Ordering) {\n     unsafe {\n         match order {"}, {"sha": "26f56ffacae7fd5c7a53968045d39991678488bc", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 68, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -1351,74 +1351,6 @@ struct Foo<T: 'static> {\n ```\n \"##,\n \n-E0312: r##\"\n-A lifetime of reference outlives lifetime of borrowed content.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0312\n-fn make_child<'tree, 'human>(\n-  x: &'human i32,\n-  y: &'tree i32\n-) -> &'human i32 {\n-    if x > y\n-       { x }\n-    else\n-       { y }\n-       // error: lifetime of reference outlives lifetime of borrowed content\n-}\n-```\n-\n-The function declares that it returns a reference with the `'human`\n-lifetime, but it may return data with the `'tree` lifetime. As neither\n-lifetime is declared longer than the other, this results in an\n-error. Sometimes, this error is because the function *body* is\n-incorrect -- that is, maybe you did not *mean* to return data from\n-`y`. In that case, you should fix the function body.\n-\n-Often, however, the body is correct. In that case, the function\n-signature needs to be altered to match the body, so that the caller\n-understands that data from either `x` or `y` may be returned. The\n-simplest way to do this is to give both function parameters the *same*\n-named lifetime:\n-\n-```\n-fn make_child<'human>(\n-  x: &'human i32,\n-  y: &'human i32\n-) -> &'human i32 {\n-    if x > y\n-       { x }\n-    else\n-       { y } // ok!\n-}\n-```\n-\n-However, in some cases, you may prefer to explicitly declare that one lifetime\n-outlives another using a `where` clause:\n-\n-```\n-fn make_child<'tree, 'human>(\n-  x: &'human i32,\n-  y: &'tree i32\n-) -> &'human i32\n-where\n-  'tree: 'human\n-{\n-    if x > y\n-       { x }\n-    else\n-       { y } // ok!\n-}\n-```\n-\n-Here, the where clause `'tree: 'human` can be read as \"the lifetime\n-'tree outlives the lifetime 'human\" -- meaning, references with the\n-`'tree` lifetime live *at least as long as* references with the\n-`'human` lifetime. Therefore, it is safe to return data with lifetime\n-`'tree` when data with the lifetime `'human` is needed.\n-\"##,\n-\n E0317: r##\"\n This error occurs when an `if` expression without an `else` block is used in a\n context where a type other than `()` is expected, for example a `let`\n@@ -2028,6 +1960,7 @@ register_diagnostics! {\n //  E0304, // expected signed integer constant\n //  E0305, // expected constant\n     E0311, // thing may not live long enough\n+    E0312, // lifetime of reference outlives lifetime of borrowed content\n     E0313, // lifetime of borrowed pointer outlives lifetime of captured variable\n     E0314, // closure outlives stack frame\n     E0315, // cannot invoke closure outside of its lifetime"}, {"sha": "ee30db26255198ad1b3b361b17b06fd1ad5aa587", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 71, "deletions": 51, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -18,6 +18,7 @@ use infer::region_inference::RegionResolutionError;\n use hir::map as hir_map;\n use middle::resolve_lifetime as rl;\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use infer::error_reporting::util::AnonymousArgInfo;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // This method prints the error message for lifetime errors when both the concerned regions\n@@ -57,6 +58,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let ty_sup = or_false!(self.find_anon_type(sup, &bregion_sup));\n \n         let ty_sub = or_false!(self.find_anon_type(sub, &bregion_sub));\n+\n         debug!(\"try_report_anon_anon_conflict: found_arg1={:?} sup={:?} br1={:?}\",\n                ty_sub,\n                sup,\n@@ -66,56 +68,70 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                sub,\n                bregion_sub);\n \n-        let (main_label, label1, label2) = if let (Some(sup_arg), Some(sub_arg)) =\n-            (self.find_arg_with_region(sup, sup), self.find_arg_with_region(sub, sub)) {\n+        let (ty_sup, ty_fndecl_sup) = ty_sup;\n+        let (ty_sub, ty_fndecl_sub) = ty_sub;\n \n-            let (anon_arg_sup, is_first_sup, anon_arg_sub, is_first_sub) =\n-                (sup_arg.arg, sup_arg.is_first, sub_arg.arg, sub_arg.is_first);\n-            if self.is_self_anon(is_first_sup, scope_def_id_sup) ||\n-               self.is_self_anon(is_first_sub, scope_def_id_sub) {\n-                return false;\n-            }\n+        let AnonymousArgInfo { arg: anon_arg_sup, .. } =\n+            or_false!(self.find_arg_with_region(sup, sup));\n+        let AnonymousArgInfo { arg: anon_arg_sub, .. } =\n+            or_false!(self.find_arg_with_region(sub, sub));\n \n-            if self.is_return_type_anon(scope_def_id_sup, bregion_sup) ||\n-               self.is_return_type_anon(scope_def_id_sub, bregion_sub) {\n-                return false;\n-            }\n+        let sup_is_ret_type =\n+            self.is_return_type_anon(scope_def_id_sup, bregion_sup, ty_fndecl_sup);\n+        let sub_is_ret_type =\n+            self.is_return_type_anon(scope_def_id_sub, bregion_sub, ty_fndecl_sub);\n \n-            if anon_arg_sup == anon_arg_sub {\n-                (format!(\"this type was declared with multiple lifetimes...\"),\n-                 format!(\" with one lifetime\"),\n-                 format!(\" into the other\"))\n-            } else {\n-                let span_label_var1 = if let Some(simple_name) = anon_arg_sup.pat.simple_name() {\n-                    format!(\" from `{}`\", simple_name)\n-                } else {\n-                    format!(\"\")\n-                };\n+        let span_label_var1 = if let Some(simple_name) = anon_arg_sup.pat.simple_name() {\n+            format!(\" from `{}`\", simple_name)\n+        } else {\n+            format!(\"\")\n+        };\n+\n+        let span_label_var2 = if let Some(simple_name) = anon_arg_sub.pat.simple_name() {\n+            format!(\" into `{}`\", simple_name)\n+        } else {\n+            format!(\"\")\n+        };\n+\n+\n+        let (span_1, span_2, main_label, span_label) = match (sup_is_ret_type, sub_is_ret_type) {\n+            (None, None) => {\n+                let (main_label_1, span_label_1) = if ty_sup == ty_sub {\n \n-                let span_label_var2 = if let Some(simple_name) = anon_arg_sub.pat.simple_name() {\n-                    format!(\" into `{}`\", simple_name)\n+                    (format!(\"this type is declared with multiple lifetimes...\"),\n+                     format!(\"...but data{} flows{} here\",\n+                             format!(\" with one lifetime\"),\n+                             format!(\" into the other\")))\n                 } else {\n-                    format!(\"\")\n+                    (format!(\"these two types are declared with different lifetimes...\"),\n+                     format!(\"...but data{} flows{} here\",\n+                             span_label_var1,\n+                             span_label_var2))\n                 };\n+                (ty_sup.span, ty_sub.span, main_label_1, span_label_1)\n+            }\n \n-                let span_label =\n-                    format!(\"these two types are declared with different lifetimes...\",);\n-\n-                (span_label, span_label_var1, span_label_var2)\n+            (Some(ret_span), _) => {\n+                (ty_sub.span,\n+                 ret_span,\n+                 format!(\"this parameter and the return type are declared \\\n+                          with different lifetimes...\",),\n+                 format!(\"...but data{} is returned here\", span_label_var1))\n+            }\n+            (_, Some(ret_span)) => {\n+                (ty_sup.span,\n+                 ret_span,\n+                 format!(\"this parameter and the return type are declared \\\n+                          with different lifetimes...\",),\n+                 format!(\"...but data{} is returned here\", span_label_var1))\n             }\n-        } else {\n-            debug!(\"no arg with anon region found\");\n-            debug!(\"try_report_anon_anon_conflict: is_suitable(sub) = {:?}\",\n-                   self.is_suitable_region(sub));\n-            debug!(\"try_report_anon_anon_conflict: is_suitable(sup) = {:?}\",\n-                   self.is_suitable_region(sup));\n-            return false;\n         };\n \n+\n         struct_span_err!(self.tcx.sess, span, E0623, \"lifetime mismatch\")\n-            .span_label(ty_sup.span, main_label)\n-            .span_label(ty_sub.span, format!(\"\"))\n-            .span_label(span, format!(\"...but data{} flows{} here\", label1, label2))\n+            .span_label(span_1, main_label)\n+            .span_label(span_2, format!(\"\"))\n+            .span_label(span, span_label)\n             .emit();\n         return true;\n     }\n@@ -135,28 +151,32 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// ```\n     /// The function returns the nested type corresponding to the anonymous region\n     /// for e.g. `&u8` and Vec<`&u8`.\n-    pub fn find_anon_type(&self, region: Region<'tcx>, br: &ty::BoundRegion) -> Option<&hir::Ty> {\n+    pub fn find_anon_type(&self,\n+                          region: Region<'tcx>,\n+                          br: &ty::BoundRegion)\n+                          -> Option<(&hir::Ty, &hir::FnDecl)> {\n         if let Some(anon_reg) = self.is_suitable_region(region) {\n             let def_id = anon_reg.def_id;\n             if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n-                let inputs: &[_] = match self.tcx.hir.get(node_id) {\n+                let fndecl = match self.tcx.hir.get(node_id) {\n                     hir_map::NodeItem(&hir::Item { node: hir::ItemFn(ref fndecl, ..), .. }) => {\n-                        &fndecl.inputs\n+                        &fndecl\n                     }\n                     hir_map::NodeTraitItem(&hir::TraitItem {\n-                                               node: hir::TraitItemKind::Method(ref fndecl, ..), ..\n-                                           }) => &fndecl.decl.inputs,\n+                                               node: hir::TraitItemKind::Method(ref m, ..), ..\n+                                           }) |\n                     hir_map::NodeImplItem(&hir::ImplItem {\n-                                              node: hir::ImplItemKind::Method(ref fndecl, ..), ..\n-                                          }) => &fndecl.decl.inputs,\n-\n-                    _ => &[],\n+                                              node: hir::ImplItemKind::Method(ref m, ..), ..\n+                                          }) => &m.decl,\n+                    _ => return None,\n                 };\n \n-                return inputs\n+                return fndecl\n+                           .inputs\n                            .iter()\n-                           .filter_map(|arg| self.find_component_for_bound_region(&**arg, br))\n-                           .next();\n+                           .filter_map(|arg| self.find_component_for_bound_region(arg, br))\n+                           .next()\n+                           .map(|ty| (ty, &**fndecl));\n             }\n         }\n         None"}, {"sha": "80fb4ce8e039260fc7933e0b4bfd37bcc94d2193", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -35,15 +35,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // only introduced anonymous regions in parameters) as well as a\n         // version new_ty of its type where the anonymous region is replaced\n         // with the named one.//scope_def_id\n-        let (named, anon_arg_info, region_info) =\n+        let (named, anon, anon_arg_info, region_info) =\n             if self.is_named_region(sub) && self.is_suitable_region(sup).is_some() &&\n                self.find_arg_with_region(sup, sub).is_some() {\n                 (sub,\n+                 sup,\n                  self.find_arg_with_region(sup, sub).unwrap(),\n                  self.is_suitable_region(sup).unwrap())\n             } else if self.is_named_region(sup) && self.is_suitable_region(sub).is_some() &&\n                       self.find_arg_with_region(sub, sup).is_some() {\n                 (sup,\n+                 sub,\n                  self.find_arg_with_region(sub, sup).unwrap(),\n                  self.is_suitable_region(sub).unwrap())\n             } else {\n@@ -76,33 +78,29 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             return false;\n         }\n \n-        if self.is_return_type_anon(scope_def_id, br) {\n-            debug!(\"try_report_named_anon_conflict: is_return_type_anon({:?}, {:?}) = true\",\n-                   scope_def_id,\n-                   br);\n-            return false;\n-        } else if self.is_self_anon(is_first, scope_def_id) {\n-            debug!(\"try_report_named_anon_conflict: is_self_anon({:?}, {:?}) = true\",\n-                   is_first,\n-                   scope_def_id);\n-            return false;\n+        if let Some((_, fndecl)) = self.find_anon_type(anon, &br) {\n+            if self.is_return_type_anon(scope_def_id, br, fndecl).is_some() ||\n+               self.is_self_anon(is_first, scope_def_id) {\n+                return false;\n+            }\n+        }\n+\n+        let (error_var, span_label_var) = if let Some(simple_name) = arg.pat.simple_name() {\n+            (format!(\"the type of `{}`\", simple_name), format!(\"the type of `{}`\", simple_name))\n         } else {\n-            let (error_var, span_label_var) = if let Some(simple_name) = arg.pat.simple_name() {\n-                (format!(\"the type of `{}`\", simple_name), format!(\"the type of `{}`\", simple_name))\n-            } else {\n-                (\"parameter type\".to_owned(), \"type\".to_owned())\n-            };\n+            (\"parameter type\".to_owned(), \"type\".to_owned())\n+        };\n+\n+        struct_span_err!(self.tcx.sess,\n+                         span,\n+                         E0621,\n+                         \"explicit lifetime required in {}\",\n+                         error_var)\n+                .span_label(arg.pat.span,\n+                            format!(\"consider changing {} to `{}`\", span_label_var, new_ty))\n+                .span_label(span, format!(\"lifetime `{}` required\", named))\n+                .emit();\n+        return true;\n \n-            struct_span_err!(self.tcx.sess,\n-                             span,\n-                             E0621,\n-                             \"explicit lifetime required in {}\",\n-                             error_var)\n-                    .span_label(arg.pat.span,\n-                                format!(\"consider changing {} to `{}`\", span_label_var, new_ty))\n-                    .span_label(span, format!(\"lifetime `{}` required\", named))\n-                    .emit();\n-            return true;\n-        }\n     }\n }"}, {"sha": "47db3f1b7926af1aa38c3b0991edb795cfe6f987", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -15,6 +15,7 @@ use infer::InferCtxt;\n use ty::{self, Region, Ty};\n use hir::def_id::DefId;\n use hir::map as hir_map;\n+use syntax_pos::Span;\n \n macro_rules! or_false {\n      ($v:expr) => {\n@@ -163,20 +164,24 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // Here, we check for the case where the anonymous region\n     // is in the return type.\n     // FIXME(#42703) - Need to handle certain cases here.\n-    pub fn is_return_type_anon(&self, scope_def_id: DefId, br: ty::BoundRegion) -> bool {\n+    pub fn is_return_type_anon(&self,\n+                               scope_def_id: DefId,\n+                               br: ty::BoundRegion,\n+                               decl: &hir::FnDecl)\n+                               -> Option<Span> {\n         let ret_ty = self.tcx.type_of(scope_def_id);\n         match ret_ty.sty {\n             ty::TyFnDef(_, _) => {\n                 let sig = ret_ty.fn_sig(self.tcx);\n                 let late_bound_regions = self.tcx\n                     .collect_referenced_late_bound_regions(&sig.output());\n                 if late_bound_regions.iter().any(|r| *r == br) {\n-                    return true;\n+                    return Some(decl.output.span());\n                 }\n             }\n             _ => {}\n         }\n-        false\n+        None\n     }\n     // Here we check for the case where anonymous region\n     // corresponds to self and if yes, we display E0312."}, {"sha": "9050702e3ca71f5598d0be85ba48189197c2978f", "filename": "src/librustc_incremental/persist/data.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -70,14 +70,6 @@ impl SerializedDepGraph {\n          RustcEncodable, RustcDecodable)]\n pub struct DepNodeIndex(pub u32);\n \n-impl DepNodeIndex {\n-    #[inline]\n-    pub fn new(idx: usize) -> DepNodeIndex {\n-        assert!(idx <= ::std::u32::MAX as usize);\n-        DepNodeIndex(idx as u32)\n-    }\n-}\n-\n impl Idx for DepNodeIndex {\n     #[inline]\n     fn new(idx: usize) -> Self {"}, {"sha": "fd699229f1b7380d1f8013f2e1990110c851ab3d", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -19,7 +19,7 @@ use rustc::util::common::time;\n use rustc::util::nodemap::DefIdMap;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::graph;\n-use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_serialize::Encodable as RustcEncodable;\n use rustc_serialize::opaque::Encoder;\n use std::io::{self, Cursor, Write};"}, {"sha": "bd02788df1653c63ed458c53a8b69bf5e92d5370", "filename": "src/librustc_mir/transform/nll/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "previous_filename": "src/librustc_mir/transform/nll.rs"}, {"sha": "25a37a2c48cdbc99dd50262df65b75ac22fce665", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -1332,6 +1332,12 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            def_id: DefId)\n                            -> ty::GenericPredicates<'tcx> {\n+    explicit_predicates_of(tcx, def_id)\n+}\n+\n+fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                           def_id: DefId)\n+                           -> ty::GenericPredicates<'tcx> {\n     use rustc::hir::map::*;\n     use rustc::hir::*;\n "}, {"sha": "7d000d7c859d395bd0a9085d9cfc2e8537390b8f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -691,6 +691,17 @@ impl<K, V, S> HashMap<K, V, S>\n     /// Returns a reference to the map's [`BuildHasher`].\n     ///\n     /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    /// use std::collections::hash_map::RandomState;\n+    ///\n+    /// let hasher = RandomState::new();\n+    /// let map: HashMap<isize, isize> = HashMap::with_hasher(hasher);\n+    /// let hasher: &RandomState = map.hasher();\n+    /// ```\n     #[stable(feature = \"hashmap_public_hasher\", since = \"1.9.0\")]\n     pub fn hasher(&self) -> &S {\n         &self.hash_builder"}, {"sha": "8d1e7882e5db4de4c9f0c1c252b7918037ef1ecb", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -167,7 +167,7 @@ impl TcpStream {\n     /// connection request.\n     ///\n     /// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n-    #[stable(feature = \"tcpstream_connect_timeout\", since = \"1.22.0\")]\n+    #[stable(feature = \"tcpstream_connect_timeout\", since = \"1.21.0\")]\n     pub fn connect_timeout(addr: &SocketAddr, timeout: Duration) -> io::Result<TcpStream> {\n         net_imp::TcpStream::connect_timeout(addr, timeout).map(TcpStream)\n     }"}, {"sha": "934ac3edbf1f18538481577ae91501f567cd8ab4", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -65,17 +65,48 @@ pub struct Guard {\n /// each lock, but once a lock is poisoned then all future acquisitions will\n /// return this error.\n ///\n+/// # Examples\n+///\n+/// ```\n+/// use std::sync::{Arc, Mutex};\n+/// use std::thread;\n+///\n+/// let mutex = Arc::new(Mutex::new(1));\n+///\n+/// // poison the mutex\n+/// let c_mutex = mutex.clone();\n+/// let _ = thread::spawn(move || {\n+///     let mut data = c_mutex.lock().unwrap();\n+///     *data = 2;\n+///     panic!();\n+/// }).join();\n+///\n+/// match mutex.lock() {\n+///     Ok(_) => unreachable!(),\n+///     Err(p_err) => {\n+///         let data = p_err.get_ref();\n+///         println!(\"recovered: {}\", data);\n+///     }\n+/// };\n+/// ```\n+///\n /// [`Mutex`]: ../../std/sync/struct.Mutex.html\n /// [`RwLock`]: ../../std/sync/struct.RwLock.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PoisonError<T> {\n     guard: T,\n }\n \n-/// An enumeration of possible errors which can occur while calling the\n-/// [`try_lock`] method.\n+/// An enumeration of possible errors associated with a [`TryLockResult`] which\n+/// can occur while trying to aquire a lock, from the [`try_lock`] method on a\n+/// [`Mutex`] or the [`try_read`] and [`try_write`] methods on an [`RwLock`].\n ///\n+/// [`Mutex`]: struct.Mutex.html\n+/// [`RwLock`]: struct.RwLock.html\n+/// [`TryLockResult`]: type.TryLockResult.html\n /// [`try_lock`]: struct.Mutex.html#method.try_lock\n+/// [`try_read`]: struct.RwLock.html#method.try_read\n+/// [`try_write`]: struct.RwLock.html#method.try_write\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum TryLockError<T> {\n     /// The lock could not be acquired because another thread failed while holding\n@@ -148,6 +179,28 @@ impl<T> PoisonError<T> {\n \n     /// Consumes this error indicating that a lock is poisoned, returning the\n     /// underlying guard to allow access regardless.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    /// use std::sync::{Arc, Mutex};\n+    /// use std::thread;\n+    ///\n+    /// let mutex = Arc::new(Mutex::new(HashSet::new()));\n+    ///\n+    /// // poison the mutex\n+    /// let c_mutex = mutex.clone();\n+    /// let _ = thread::spawn(move || {\n+    ///     let mut data = c_mutex.lock().unwrap();\n+    ///     data.insert(10);\n+    ///     panic!();\n+    /// }).join();\n+    ///\n+    /// let p_err = mutex.lock().unwrap_err();\n+    /// let data = p_err.into_inner();\n+    /// println!(\"recovered {} items\", data.len());\n+    /// ```\n     #[stable(feature = \"sync_poison\", since = \"1.2.0\")]\n     pub fn into_inner(self) -> T { self.guard }\n "}, {"sha": "8733c7436d5bd9658280ab37bfa313d479759a5d", "filename": "src/rtstartup/rsbegin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Frtstartup%2Frsbegin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Frtstartup%2Frsbegin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsbegin.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -38,7 +38,7 @@ trait Copy {}\n trait Freeze {}\n impl Freeze for .. {}\n \n-#[lang=\"drop_in_place\"]\n+#[lang = \"drop_in_place\"]\n #[inline]\n #[allow(unconditional_recursion)]\n pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {"}, {"sha": "a6aed3540ddbb8b9d092f137a23322d7a9b49201", "filename": "src/rtstartup/rsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Frtstartup%2Frsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Frtstartup%2Frsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsend.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -25,7 +25,7 @@ trait Copy {}\n trait Freeze {}\n impl Freeze for .. {}\n \n-#[lang=\"drop_in_place\"]\n+#[lang = \"drop_in_place\"]\n #[inline]\n #[allow(unconditional_recursion)]\n pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {"}, {"sha": "54657e76e97022be4e70a5ce58d7c1eab073a334", "filename": "src/test/compile-fail/object-lifetime-default-mybox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -34,7 +34,7 @@ fn load1<'a,'b>(a: &'a MyBox<SomeTrait>,\n                 b: &'b MyBox<SomeTrait>)\n                 -> &'b MyBox<SomeTrait>\n {\n-    a //~ ERROR E0312\n+    a //~ ERROR lifetime mismatch\n }\n \n fn load2<'a>(ss: &MyBox<SomeTrait+'a>) -> MyBox<SomeTrait+'a> {"}, {"sha": "0bfc4d2264c622ce9e6e7c957db349ca1a22c161", "filename": "src/test/run-pass/for-loop-unconstrained-element-type-i32-fallback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Frun-pass%2Ffor-loop-unconstrained-element-type-i32-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Frun-pass%2Ffor-loop-unconstrained-element-type-i32-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-unconstrained-element-type-i32-fallback.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n // Test that the type of `sum` falls back to `i32` here,\n-// and that the for loop desugaring doesn't inferfere with\n+// and that the for loop desugaring doesn't interfere with\n // that.\n \n fn main() {\n     let mut sum = 0;\n     for i in Vec::new() {\n-        sum += i;\n+        sum += &i;\n     }\n }"}, {"sha": "20c7f27336e2520986d27325f38cb388246005d1", "filename": "src/test/run-pass/num-wrapping.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -173,6 +173,15 @@ fn test_op_assigns() {\n                 tmp.$op(Wrapping($rhs));\n                 assert_eq!(black_box(tmp), Wrapping($ans));\n             }\n+\n+            // also test that a &Wrapping<T> right-hand side is possible\n+            {\n+                let mut tmp = Wrapping($initial);\n+                tmp = black_box(tmp);\n+                tmp.$op(&Wrapping($rhs));\n+                assert_eq!(black_box(tmp), Wrapping($ans));\n+            }\n+\n             // FIXME(30524): Uncomment this test\n             /*\n             {"}, {"sha": "230d44ba647a5d41f29368add82f517f0ed19b92", "filename": "src/test/run-pass/op-assign-builtins-by-ref.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Frun-pass%2Fop-assign-builtins-by-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Frun-pass%2Fop-assign-builtins-by-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fop-assign-builtins-by-ref.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -0,0 +1,84 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    // test compound assignment operators with ref as right-hand side,\n+    // for each operator, with various types as operands.\n+\n+    // test AddAssign\n+    {\n+        let mut x = 3i8;\n+        x += &2i8;\n+        assert_eq!(x, 5i8);\n+    }\n+\n+    // test SubAssign\n+    {\n+        let mut x = 7i16;\n+        x -= &4;\n+        assert_eq!(x, 3i16);\n+    }\n+\n+    // test MulAssign\n+    {\n+        let mut x = 3f32;\n+        x *= &3f32;\n+        assert_eq!(x, 9f32);\n+    }\n+\n+    // test DivAssign\n+    {\n+        let mut x = 6f64;\n+        x /= &2f64;\n+        assert_eq!(x, 3f64);\n+    }\n+\n+    // test RemAssign\n+    {\n+        let mut x = 7i64;\n+        x %= &4i64;\n+        assert_eq!(x, 3i64);\n+    }\n+\n+    // test BitOrAssign\n+    {\n+        let mut x = 0b1010u8;\n+        x |= &0b1100u8;\n+        assert_eq!(x, 0b1110u8);\n+    }\n+\n+    // test BitAndAssign\n+    {\n+        let mut x = 0b1010u16;\n+        x &= &0b1100u16;\n+        assert_eq!(x, 0b1000u16);\n+    }\n+\n+    // test BitXorAssign\n+    {\n+        let mut x = 0b1010u32;\n+        x ^= &0b1100u32;\n+        assert_eq!(x, 0b0110u32);\n+    }\n+\n+    // test ShlAssign\n+    {\n+        let mut x = 0b1010u64;\n+        x <<= &2u32;\n+        assert_eq!(x, 0b101000u64);\n+    }\n+\n+    // test ShrAssign\n+    {\n+        let mut x = 0b1010u64;\n+        x >>= &2i16;\n+        assert_eq!(x, 0b10u64);\n+    }\n+}"}, {"sha": "cb9a1edf1ddf9a8551e12f42c5599ead69bd0190", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -1,27 +1,13 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:20\n    |\n+19 |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |                   ----                 -------\n+   |                   |\n+   |                   this parameter and the return type are declared with different lifetimes...\n+20 | \n 21 |         if x > y { x } else { y }\n-   |                    ^\n-   |\n-note: ...the reference is valid for the lifetime 'a as defined on the method body at 19:5...\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:19:5\n-   |\n-19 | /     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-20 | |\n-21 | |         if x > y { x } else { y }\n-22 | |\n-23 | |     }\n-   | |_____^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the method body at 19:5\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:19:5\n-   |\n-19 | /     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-20 | |\n-21 | |         if x > y { x } else { y }\n-22 | |\n-23 | |     }\n-   | |_____^\n+   |                    ^ ...but data from `x` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "8af6acc62c43649c58a468104180409f50135ec7", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -1,27 +1,13 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:18:5\n    |\n+16 |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n+   |                        -------     ----\n+   |                        |\n+   |                        this parameter and the return type are declared with different lifetimes...\n+17 | \n 18 |     x\n-   |     ^\n-   |\n-note: ...the reference is valid for the anonymous lifetime #1 defined on the method body at 16:3...\n-  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:16:3\n-   |\n-16 | /   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n-17 | |\n-18 | |     x\n-19 | |\n-20 | |   }\n-   | |___^\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the method body at 16:3\n-  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:16:3\n-   |\n-16 | /   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n-17 | |\n-18 | |     x\n-19 | |\n-20 | |   }\n-   | |___^\n+   |     ^ ...but data from `x` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "c09de0c33af7a455fbdfd31bbf21db1261072043", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -1,27 +1,13 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:30\n    |\n+16 |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n+   |                -----                 -------\n+   |                |\n+   |                this parameter and the return type are declared with different lifetimes...\n+17 | \n 18 |         if true { x } else { self }\n-   |                              ^^^^\n-   |\n-note: ...the reference is valid for the lifetime 'a as defined on the method body at 16:5...\n-  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:16:5\n-   |\n-16 | /     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n-17 | |\n-18 | |         if true { x } else { self }\n-19 | |\n-20 | |     }\n-   | |_____^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the method body at 16:5\n-  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:16:5\n-   |\n-16 | /     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n-17 | |\n-18 | |         if true { x } else { self }\n-19 | |\n-20 | |     }\n-   | |_____^\n+   |                              ^^^^ ...but data from `self` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "73460277de44cb9294eab94d883a1298fd2a9f8c", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.stderr?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -4,7 +4,7 @@ error[E0623]: lifetime mismatch\n 15 | fn foo(mut x: Ref) {\n    |               ---\n    |               |\n-   |               this type was declared with multiple lifetimes...\n+   |               this type is declared with multiple lifetimes...\n 16 |     x.a = x.b;\n    |           ^^^ ...but data with one lifetime flows into the other here\n "}, {"sha": "fb524ae62c57ae9e4c19361f6e734ca9cb1a571f", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -4,7 +4,7 @@ error[E0623]: lifetime mismatch\n 15 | fn foo(mut x: Ref) {\n    |               ---\n    |               |\n-   |               this type was declared with multiple lifetimes...\n+   |               this type is declared with multiple lifetimes...\n 16 |     x.a = x.b;\n    |           ^^^ ...but data with one lifetime flows into the other here\n "}, {"sha": "1409b2161330b6615fca9bcbbbfd4afaf676c345", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.stderr", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -1,23 +1,12 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:17:5\n    |\n+16 |   fn foo<'a>(&self, x: &i32) -> &i32 {\n+   |                        ----     ----\n+   |                        |\n+   |                        this parameter and the return type are declared with different lifetimes...\n 17 |     x\n-   |     ^\n-   |\n-note: ...the reference is valid for the anonymous lifetime #1 defined on the method body at 16:3...\n-  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:16:3\n-   |\n-16 | /   fn foo<'a>(&self, x: &i32) -> &i32 {\n-17 | |     x\n-18 | |   }\n-   | |___^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the method body at 16:3\n-  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:16:3\n-   |\n-16 | /   fn foo<'a>(&self, x: &i32) -> &i32 {\n-17 | |     x\n-18 | |   }\n-   | |___^\n+   |     ^ ...but data from `x` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "cae45023e26b209526446f9350ac79d5a5ea2579", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-self-is-anon.stderr", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -1,23 +1,12 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex3-both-anon-regions-self-is-anon.rs:17:19\n    |\n+16 |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n+   |                          ----     ----\n+   |                          |\n+   |                          this parameter and the return type are declared with different lifetimes...\n 17 |         if true { x } else { self }\n-   |                   ^\n-   |\n-note: ...the reference is valid for the anonymous lifetime #1 defined on the method body at 16:5...\n-  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:16:5\n-   |\n-16 | /     fn foo<'a>(&self, x: &Foo) -> &Foo {\n-17 | |         if true { x } else { self }\n-18 | |     }\n-   | |_____^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the method body at 16:5\n-  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:16:5\n-   |\n-16 | /     fn foo<'a>(&self, x: &Foo) -> &Foo {\n-17 | |         if true { x } else { self }\n-18 | |     }\n-   | |_____^\n+   |                   ^ ...but data from `x` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "0a9da26d9968d1ee073f42e9058e7934408dd64a", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4cca3a72df87def5cb18ff500c643fbff8ad08e/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=c4cca3a72df87def5cb18ff500c643fbff8ad08e", "patch": "@@ -49,7 +49,7 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"xsv\",\n         repo: \"https://github.com/BurntSushi/xsv\",\n-        sha: \"a9a7163f2a2953cea426fee1216bec914fe2f56a\",\n+        sha: \"4b308adbe48ac81657fd124b90b44f7c3263f771\",\n         lock: None,\n     },\n ];"}]}