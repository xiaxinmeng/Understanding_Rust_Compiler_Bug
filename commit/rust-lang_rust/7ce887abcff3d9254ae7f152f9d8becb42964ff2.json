{"sha": "7ce887abcff3d9254ae7f152f9d8becb42964ff2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZTg4N2FiY2ZmM2Q5MjU0YWU3ZjE1MmY5ZDhiZWNiNDI5NjRmZjI=", "commit": {"author": {"name": "Bryce Van Dyk", "email": "bryce@vandyk.net.nz", "date": "2015-12-01T07:10:57Z"}, "committer": {"name": "Bryce Van Dyk", "email": "bryce@vandyk.net.nz", "date": "2015-12-01T07:10:57Z"}, "message": "Update trailing comma match logic, add tests\n\nUpdates the traling comma code to attempt to handle multiline non-block bodies when\nadding traling commas to blocks. Also add and update tests to cover better\nthe interactions between trailing commas and wrapping match arms.", "tree": {"sha": "f8d4ef8493182ba56b4647f8d2b5bddaa5070526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8d4ef8493182ba56b4647f8d2b5bddaa5070526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ce887abcff3d9254ae7f152f9d8becb42964ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce887abcff3d9254ae7f152f9d8becb42964ff2", "html_url": "https://github.com/rust-lang/rust/commit/7ce887abcff3d9254ae7f152f9d8becb42964ff2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ce887abcff3d9254ae7f152f9d8becb42964ff2/comments", "author": {"login": "SingingTree", "id": 3637370, "node_id": "MDQ6VXNlcjM2MzczNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/3637370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SingingTree", "html_url": "https://github.com/SingingTree", "followers_url": "https://api.github.com/users/SingingTree/followers", "following_url": "https://api.github.com/users/SingingTree/following{/other_user}", "gists_url": "https://api.github.com/users/SingingTree/gists{/gist_id}", "starred_url": "https://api.github.com/users/SingingTree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SingingTree/subscriptions", "organizations_url": "https://api.github.com/users/SingingTree/orgs", "repos_url": "https://api.github.com/users/SingingTree/repos", "events_url": "https://api.github.com/users/SingingTree/events{/privacy}", "received_events_url": "https://api.github.com/users/SingingTree/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SingingTree", "id": 3637370, "node_id": "MDQ6VXNlcjM2MzczNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/3637370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SingingTree", "html_url": "https://github.com/SingingTree", "followers_url": "https://api.github.com/users/SingingTree/followers", "following_url": "https://api.github.com/users/SingingTree/following{/other_user}", "gists_url": "https://api.github.com/users/SingingTree/gists{/gist_id}", "starred_url": "https://api.github.com/users/SingingTree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SingingTree/subscriptions", "organizations_url": "https://api.github.com/users/SingingTree/orgs", "repos_url": "https://api.github.com/users/SingingTree/repos", "events_url": "https://api.github.com/users/SingingTree/events{/privacy}", "received_events_url": "https://api.github.com/users/SingingTree/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a430a8947ceebd6a181084969f169490db05dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a430a8947ceebd6a181084969f169490db05dd1", "html_url": "https://github.com/rust-lang/rust/commit/2a430a8947ceebd6a181084969f169490db05dd1"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "cc518003e8805525e54f203efb7abb48a68da019", "filename": "src/expr.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ce887abcff3d9254ae7f152f9d8becb42964ff2/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce887abcff3d9254ae7f152f9d8becb42964ff2/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=7ce887abcff3d9254ae7f152f9d8becb42964ff2", "patch": "@@ -20,7 +20,7 @@ use string::{StringFormat, rewrite_string};\n use utils::{span_after, extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n             semicolon_for_stmt};\n use visitor::FmtVisitor;\n-use config::{StructLitStyle, MultilineStyle};\n+use config::{Config, StructLitStyle, MultilineStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment};\n use types::rewrite_path;\n use items::{span_lo_for_arg, span_hi_for_arg};\n@@ -823,7 +823,7 @@ fn rewrite_match(context: &RewriteContext,\n             // We couldn't format the arm, just reproduce the source.\n             let snippet = context.snippet(mk_sp(arm_start_pos(arm), arm_end_pos(arm)));\n             result.push_str(&snippet);\n-            result.push_str(arm_comma(context, &arm.body));\n+            result.push_str(arm_comma(&context.config, &arm.body));\n         }\n     }\n     // BytePos(1) = closing match brace.\n@@ -854,8 +854,8 @@ fn arm_end_pos(arm: &ast::Arm) -> BytePos {\n     arm.body.span.hi\n }\n \n-fn arm_comma(context: &RewriteContext, body: &ast::Expr) -> &'static str {\n-    if context.config.match_block_trailing_comma {\n+fn arm_comma(config: &Config, body: &ast::Expr) -> &'static str {\n+    if config.match_block_trailing_comma {\n         \",\"\n     } else if let ast::ExprBlock(ref block) = body.node {\n         if let ast::DefaultBlock = block.rules {\n@@ -952,19 +952,22 @@ impl Rewrite for ast::Arm {\n             ref x => x,\n         };\n \n-        let comma = arm_comma(context, body);\n+        let comma = arm_comma(&context.config, body);\n \n         // Let's try and get the arm body on the same line as the condition.\n         // 4 = ` => `.len()\n         if context.config.max_width > line_start + comma.len() + 4 {\n             let budget = context.config.max_width - line_start - comma.len() - 4;\n             let offset = Indent::new(offset.block_indent, line_start + 4 - offset.block_indent);\n             let rewrite = nop_block_collapse(body.rewrite(context, budget, offset), budget);\n+            let is_body_str_block = match rewrite {\n+                Some(ref s) => s.trim().starts_with(\"{\") && s.trim().ends_with(\"}\"),\n+                None => false,\n+            };\n \n             match rewrite {\n                 Some(ref body_str) if !body_str.contains('\\n') || !context.config.wrap_match_arms ||\n-                                      comma.is_empty() ||\n-                                      context.config.match_block_trailing_comma => {\n+                                      is_body_str_block => {\n                     return Some(format!(\"{}{} => {}{}\",\n                                         attr_str.trim_left(),\n                                         pats_str,\n@@ -986,7 +989,11 @@ impl Rewrite for ast::Arm {\n                                                          body_budget));\n         let indent_str = offset.block_indent(context.config).to_string(context.config);\n         let (body_prefix, body_suffix) = if context.config.wrap_match_arms {\n-            (\" {\", \"}\")\n+            if context.config.match_block_trailing_comma {\n+                (\" {\", \"},\")\n+            } else {\n+                (\" {\", \"}\")\n+            }\n         } else {\n             (\"\", \"\")\n         };"}, {"sha": "e9daac13bf96f03674eed676d5b8552e5397908e", "filename": "tests/source/match-block-trailing-comma.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ce887abcff3d9254ae7f152f9d8becb42964ff2/tests%2Fsource%2Fmatch-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce887abcff3d9254ae7f152f9d8becb42964ff2/tests%2Fsource%2Fmatch-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch-block-trailing-comma.rs?ref=7ce887abcff3d9254ae7f152f9d8becb42964ff2", "patch": "@@ -8,6 +8,7 @@ fn foo() {\n             \"line1\";\n             \"line2\"\n         }\n-        b => \"bar\",\n+        b => (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n     }\n }"}, {"sha": "f6e88406bb46218021697a58f52890032e9cf6ec", "filename": "tests/source/match-nowrap-trailing-comma.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7ce887abcff3d9254ae7f152f9d8becb42964ff2/tests%2Fsource%2Fmatch-nowrap-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce887abcff3d9254ae7f152f9d8becb42964ff2/tests%2Fsource%2Fmatch-nowrap-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch-nowrap-trailing-comma.rs?ref=7ce887abcff3d9254ae7f152f9d8becb42964ff2", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-wrap_match_arms: false\n+// rustfmt-match_block_trailing_comma: true\n+// Match expressions, no unwrapping of block arms or wrapping of multiline\n+// expressions.\n+\n+fn foo() {\n+    match x {\n+        a => {\n+            \"line1\";\n+            \"line2\"\n+        }\n+        b => (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n+    }\n+}"}, {"sha": "b00def007e8a14efa719b6f156cf6a50e304115f", "filename": "tests/target/match-block-trailing-comma.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ce887abcff3d9254ae7f152f9d8becb42964ff2/tests%2Ftarget%2Fmatch-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce887abcff3d9254ae7f152f9d8becb42964ff2/tests%2Ftarget%2Fmatch-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch-block-trailing-comma.rs?ref=7ce887abcff3d9254ae7f152f9d8becb42964ff2", "patch": "@@ -8,6 +8,9 @@ fn foo() {\n             \"line1\";\n             \"line2\"\n         },\n-        b => \"bar\",\n+        b => {\n+            (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+             bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb)\n+        },\n     }\n }"}, {"sha": "6b2e430123d5f22504f27bce42d4c9a0f3a1c322", "filename": "tests/target/match-nowrap-trailing-comma.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7ce887abcff3d9254ae7f152f9d8becb42964ff2/tests%2Ftarget%2Fmatch-nowrap-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce887abcff3d9254ae7f152f9d8becb42964ff2/tests%2Ftarget%2Fmatch-nowrap-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch-nowrap-trailing-comma.rs?ref=7ce887abcff3d9254ae7f152f9d8becb42964ff2", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-wrap_match_arms: false\n+// rustfmt-match_block_trailing_comma: true\n+// Match expressions, no unwrapping of block arms or wrapping of multiline\n+// expressions.\n+\n+fn foo() {\n+    match x {\n+        a => {\n+            \"line1\";\n+            \"line2\"\n+        },\n+        b => (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n+    }\n+}"}]}