{"sha": "4963394f86719f3315239a900e557982a829adae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NjMzOTRmODY3MTlmMzMxNTIzOWE5MDBlNTU3OTgyYTgyOWFkYWU=", "commit": {"author": {"name": "Thomas Jespersen", "email": "laumann.thomas@gmail.com", "date": "2017-09-21T11:04:11Z"}, "committer": {"name": "Thomas Jespersen", "email": "laumann.thomas@gmail.com", "date": "2017-09-24T18:00:02Z"}, "message": "Change Levensthein-based method to a single suggestion\n\nThe convention for suggesting close matches is to provide at most one match (the\nclosest one). Change the suggestions for misspelt method names to obey that.", "tree": {"sha": "fb9919fad86152e727cafff6bbb83c5362ded4c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb9919fad86152e727cafff6bbb83c5362ded4c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4963394f86719f3315239a900e557982a829adae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4963394f86719f3315239a900e557982a829adae", "html_url": "https://github.com/rust-lang/rust/commit/4963394f86719f3315239a900e557982a829adae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4963394f86719f3315239a900e557982a829adae/comments", "author": null, "committer": null, "parents": [{"sha": "09defbcb5b733773c516a31f0206d344e6555f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/09defbcb5b733773c516a31f0206d344e6555f72", "html_url": "https://github.com/rust-lang/rust/commit/09defbcb5b733773c516a31f0206d344e6555f72"}], "stats": {"total": 65, "additions": 39, "deletions": 26}, "files": [{"sha": "4ee0b4cb46f1b87df51343cd7b2e5414d5d515e0", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4963394f86719f3315239a900e557982a829adae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4963394f86719f3315239a900e557982a829adae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=4963394f86719f3315239a900e557982a829adae", "patch": "@@ -68,24 +68,24 @@ pub enum MethodError<'tcx> {\n // could lead to matches if satisfied, and a list of not-in-scope traits which may work.\n pub struct NoMatchData<'tcx> {\n     pub static_candidates: Vec<CandidateSource>,\n-    pub lev_candidates: Vec<ty::AssociatedItem>,\n     pub unsatisfied_predicates: Vec<TraitRef<'tcx>>,\n     pub out_of_scope_traits: Vec<DefId>,\n+    pub lev_candidate: Option<ty::AssociatedItem>,\n     pub mode: probe::Mode,\n }\n \n impl<'tcx> NoMatchData<'tcx> {\n     pub fn new(static_candidates: Vec<CandidateSource>,\n-               lev_candidates: Vec<ty::AssociatedItem>,\n                unsatisfied_predicates: Vec<TraitRef<'tcx>>,\n                out_of_scope_traits: Vec<DefId>,\n+               lev_candidate: Option<ty::AssociatedItem>,\n                mode: probe::Mode)\n                -> Self {\n         NoMatchData {\n             static_candidates,\n-            lev_candidates,\n             unsatisfied_predicates,\n             out_of_scope_traits,\n+            lev_candidate,\n             mode,\n         }\n     }"}, {"sha": "a3b196f99d629ba7ed01368da62ea73f319f37e3", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4963394f86719f3315239a900e557982a829adae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4963394f86719f3315239a900e557982a829adae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=4963394f86719f3315239a900e557982a829adae", "patch": "@@ -23,7 +23,7 @@ use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::util::nodemap::FxHashSet;\n use rustc::infer::{self, InferOk};\n use syntax::ast;\n-use syntax::util::lev_distance::lev_distance;\n+use syntax::util::lev_distance::{lev_distance, find_best_match_for_name};\n use syntax_pos::Span;\n use rustc::hir;\n use std::mem;\n@@ -248,7 +248,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     return Err(MethodError::NoMatch(NoMatchData::new(Vec::new(),\n                                                                      Vec::new(),\n                                                                      Vec::new(),\n-                                                                     Vec::new(),\n+                                                                     None,\n                                                                      mode)))\n                 }\n             }\n@@ -806,12 +806,12 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         if let Some(def) = private_candidate {\n             return Err(MethodError::PrivateMatch(def, out_of_scope_traits));\n         }\n-        let lev_candidates = self.probe_for_lev_candidates()?;\n+        let lev_candidate = self.probe_for_lev_candidate()?;\n \n         Err(MethodError::NoMatch(NoMatchData::new(static_candidates,\n-                                                  lev_candidates,\n                                                   unsatisfied_predicates,\n                                                   out_of_scope_traits,\n+                                                  lev_candidate,\n                                                   self.mode)))\n     }\n \n@@ -1133,9 +1133,10 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    /// Similarly to `probe_for_return_type`, this method attempts to find candidate methods where\n-    /// the method name may have been misspelt.\n-    fn probe_for_lev_candidates(&mut self) -> Result<Vec<ty::AssociatedItem>, MethodError<'tcx>> {\n+    /// Similarly to `probe_for_return_type`, this method attempts to find the best matching\n+    /// candidate method where the method name may have been misspelt. Similarly to other\n+    /// Levenshtein based suggestions, we provide at most one such suggestion.\n+    fn probe_for_lev_candidate(&mut self) -> Result<Option<ty::AssociatedItem>, MethodError<'tcx>> {\n         debug!(\"Probing for method names similar to {:?}\",\n                self.method_name);\n \n@@ -1149,7 +1150,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n             let method_names = pcx.candidate_method_names();\n             pcx.allow_similar_names = false;\n-            Ok(method_names\n+            let applicable_close_candidates: Vec<ty::AssociatedItem> = method_names\n                 .iter()\n                 .filter_map(|&method_name| {\n                     pcx.reset();\n@@ -1162,7 +1163,21 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                                 .and_then(|pick| Some(pick.item))\n                         })\n                 })\n-               .collect())\n+               .collect();\n+\n+            if applicable_close_candidates.is_empty() {\n+                Ok(None)\n+            } else {\n+                let best_name = {\n+                    let names = applicable_close_candidates.iter().map(|cand| &cand.name);\n+                    find_best_match_for_name(names,\n+                                             &self.method_name.unwrap().as_str(),\n+                                             None)\n+                }.unwrap();\n+                Ok(applicable_close_candidates\n+                   .into_iter()\n+                   .find(|method| method.name == best_name))\n+            }\n         })\n     }\n "}, {"sha": "90c5297b399859cdd140381552c0b98d05cb0650", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4963394f86719f3315239a900e557982a829adae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4963394f86719f3315239a900e557982a829adae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4963394f86719f3315239a900e557982a829adae", "patch": "@@ -162,9 +162,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         match error {\n             MethodError::NoMatch(NoMatchData { static_candidates: static_sources,\n-                                               lev_candidates,\n                                                unsatisfied_predicates,\n                                                out_of_scope_traits,\n+                                               lev_candidate,\n                                                mode,\n                                                .. }) => {\n                 let tcx = self.tcx;\n@@ -284,10 +284,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                               rcvr_expr,\n                                               out_of_scope_traits);\n \n-                if !lev_candidates.is_empty() {\n-                    for meth in lev_candidates.iter().take(5) {\n-                        err.help(&format!(\"did you mean `{}`?\", meth.name));\n-                    }\n+                if let Some(lev_candidate) = lev_candidate {\n+                    err.help(&format!(\"did you mean `{}`?\", lev_candidate.name));\n                 }\n                 err.emit();\n             }"}, {"sha": "b02881dc7eee03c98e9917c0a63d9d26cf54a20e", "filename": "src/test/ui/suggestions/suggest-methods.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4963394f86719f3315239a900e557982a829adae/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4963394f86719f3315239a900e557982a829adae/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.rs?ref=4963394f86719f3315239a900e557982a829adae", "patch": "@@ -30,9 +30,11 @@ fn main() {\n     let s = \"foo\".to_string();\n     let _ = s.is_emtpy();\n \n-    // Generates a warning, both for count_ones and count_zeros\n+    // Generates a warning for `count_zeros()`. `count_ones()` is also a close\n+    // match, but the former is closer.\n     let _ = 63u32.count_eos();\n-    let _ = 63u32.count_o(); // Does not generate a warning\n \n-}\n+    // Does not generate a warning\n+    let _ = 63u32.count_o();\n \n+}"}, {"sha": "41beb73b1bc3578789bfd22a85d90ded6cf006fa", "filename": "src/test/ui/suggestions/suggest-methods.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4963394f86719f3315239a900e557982a829adae/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4963394f86719f3315239a900e557982a829adae/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-methods.stderr?ref=4963394f86719f3315239a900e557982a829adae", "patch": "@@ -5,7 +5,6 @@ error[E0599]: no method named `bat` found for type `Foo` in the current scope\n    |       ^^^\n    |\n    = help: did you mean `bar`?\n-   = help: did you mean `baz`?\n \n error[E0599]: no method named `is_emtpy` found for type `std::string::String` in the current scope\n   --> $DIR/suggest-methods.rs:31:15\n@@ -16,18 +15,17 @@ error[E0599]: no method named `is_emtpy` found for type `std::string::String` in\n    = help: did you mean `is_empty`?\n \n error[E0599]: no method named `count_eos` found for type `u32` in the current scope\n-  --> $DIR/suggest-methods.rs:34:19\n+  --> $DIR/suggest-methods.rs:35:19\n    |\n-34 |     let _ = 63u32.count_eos();\n+35 |     let _ = 63u32.count_eos();\n    |                   ^^^^^^^^^\n    |\n-   = help: did you mean `count_ones`?\n    = help: did you mean `count_zeros`?\n \n error[E0599]: no method named `count_o` found for type `u32` in the current scope\n-  --> $DIR/suggest-methods.rs:35:19\n+  --> $DIR/suggest-methods.rs:38:19\n    |\n-35 |     let _ = 63u32.count_o(); // Does not generate a warning\n+38 |     let _ = 63u32.count_o();\n    |                   ^^^^^^^\n \n error: aborting due to 4 previous errors"}]}