{"sha": "3c31841c72228ef45bfad8660e95528e8ffeab2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMzE4NDFjNzIyMjhlZjQ1YmZhZDg2NjBlOTU1MjhlOGZmZWFiMmI=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2015-07-13T17:16:43Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2015-10-15T05:06:57Z"}, "message": "rust_trans: struct argument over ffi were passed incorrectly in some situations on x86_64.", "tree": {"sha": "a7daeb6d297f8ba0d85508a03a104a9bbd8eca74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7daeb6d297f8ba0d85508a03a104a9bbd8eca74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c31841c72228ef45bfad8660e95528e8ffeab2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c31841c72228ef45bfad8660e95528e8ffeab2b", "html_url": "https://github.com/rust-lang/rust/commit/3c31841c72228ef45bfad8660e95528e8ffeab2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c31841c72228ef45bfad8660e95528e8ffeab2b/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56a14192e9793a06b33fa11210765d2118a228d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/56a14192e9793a06b33fa11210765d2118a228d9", "html_url": "https://github.com/rust-lang/rust/commit/56a14192e9793a06b33fa11210765d2118a228d9"}], "stats": {"total": 401, "additions": 395, "deletions": 6}, "files": [{"sha": "3ca82b673ff5b1c181ede27c63677333b7755976", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3c31841c72228ef45bfad8660e95528e8ffeab2b/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c31841c72228ef45bfad8660e95528e8ffeab2b/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=3c31841c72228ef45bfad8660e95528e8ffeab2b", "patch": "@@ -410,18 +410,53 @@ pub fn compute_abi_info(ccx: &CrateContext,\n         }\n     }\n \n-    let mut arg_tys = Vec::new();\n-    for t in atys {\n-        let ty = x86_64_ty(ccx, *t, |cls| cls.is_pass_byval(), Attribute::ByVal);\n-        arg_tys.push(ty);\n-    }\n+    let mut int_regs = 6; // RDI, RSI, RDX, RCX, R8, R9\n+    let mut sse_regs = 8;\n \n     let ret_ty = if ret_def {\n-        x86_64_ty(ccx, rty, |cls| cls.is_ret_bysret(), Attribute::StructRet)\n+        x86_64_ty(ccx, rty, |cls| {\n+            if cls.is_ret_bysret() {\n+                // `sret` parameter thus one less register available\n+                int_regs -= 1;\n+                true\n+            } else {\n+                false\n+            }\n+        }, Attribute::StructRet)\n     } else {\n         ArgType::direct(Type::void(ccx), None, None, None)\n     };\n \n+    let mut arg_tys = Vec::new();\n+    for t in atys {\n+        let ty = x86_64_ty(ccx, *t, |cls| {\n+            let needed_int = cls.iter().filter(|&&c| c == Int).count();\n+            let needed_sse = cls.iter().filter(|c| c.is_sse()).count();\n+            let in_mem = cls.is_pass_byval() ||\n+                         int_regs < needed_int ||\n+                         sse_regs < needed_sse;\n+            if in_mem {\n+                // `byval` parameter thus one less integer register available\n+                int_regs -= 1;\n+            } else {\n+                // split into sized chunks passed individually\n+                int_regs -= needed_int;\n+                sse_regs -= needed_sse;\n+            }\n+            in_mem\n+        }, Attribute::ByVal);\n+        arg_tys.push(ty);\n+\n+        // An integer, pointer, double or float parameter\n+        // thus the above closure passed to `x86_64_ty` won't\n+        // get called.\n+        if t.kind() == Integer || t.kind() == Pointer {\n+            int_regs -= 1;\n+        } else if t.kind() == Double || t.kind() == Float {\n+            sse_regs -= 1;\n+        }\n+    }\n+\n     return FnType {\n         arg_tys: arg_tys,\n         ret_ty: ret_ty,"}, {"sha": "042048ec25f63c05096693257dff6b2d8f6a3a2d", "filename": "src/test/run-make/extern-fn-struct-passing-abi/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c31841c72228ef45bfad8660e95528e8ffeab2b/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3c31841c72228ef45bfad8660e95528e8ffeab2b/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2FMakefile?ref=3c31841c72228ef45bfad8660e95528e8ffeab2b", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all: $(call NATIVE_STATICLIB,test)\n+\t$(RUSTC) test.rs\n+\t$(call RUN,test) || exit 1"}, {"sha": "4446b51da871e3fd30cc9740ecf820a5b9e934d4", "filename": "src/test/run-make/extern-fn-struct-passing-abi/test.c", "status": "added", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/3c31841c72228ef45bfad8660e95528e8ffeab2b/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/3c31841c72228ef45bfad8660e95528e8ffeab2b/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c?ref=3c31841c72228ef45bfad8660e95528e8ffeab2b", "patch": "@@ -0,0 +1,215 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+\n+struct Rect {\n+    int32_t a;\n+    int32_t b;\n+    int32_t c;\n+    int32_t d;\n+};\n+\n+struct BiggerRect {\n+    struct Rect s;\n+    int32_t a;\n+    int32_t b;\n+};\n+\n+struct FloatRect {\n+    int32_t a;\n+    int32_t b;\n+    double c;\n+};\n+\n+struct Huge {\n+    int32_t a;\n+    int32_t b;\n+    int32_t c;\n+    int32_t d;\n+    int32_t e;\n+};\n+\n+// SysV ABI:\n+// a, b, c, d, e should be in registers\n+// s should be byval pointer\n+void byval_rect(int32_t a, int32_t b, int32_t c, int32_t d, int32_t e, struct Rect s) {\n+    assert(a == 1);\n+    assert(b == 2);\n+    assert(c == 3);\n+    assert(d == 4);\n+    assert(e == 5);\n+    assert(s.a == 553);\n+    assert(s.b == 554);\n+    assert(s.c == 555);\n+    assert(s.d == 556);\n+}\n+\n+// SysV ABI:\n+// a, b, c, d, e, f, g should be in sse registers\n+// s should be split across 2 registers\n+// t should be byval pointer\n+void byval_rect_floats(float a, float b, double c, float d, float e,\n+                       float f, double g, struct Rect s, struct FloatRect t) {\n+    assert(a == 1.);\n+    assert(b == 2.);\n+    assert(c == 3.);\n+    assert(d == 4.);\n+    assert(e == 5.);\n+    assert(f == 6.);\n+    assert(g == 7.);\n+    assert(s.a == 553);\n+    assert(s.b == 554);\n+    assert(s.c == 555);\n+    assert(s.d == 556);\n+    assert(t.a == 3489);\n+    assert(t.b == 3490);\n+    assert(t.c == 8.);\n+}\n+\n+// SysV ABI:\n+// a, b, d, e should be in registers\n+// c passed via sse registers\n+// s should be byval pointer\n+void byval_rect_with_float(int32_t a, int32_t b, float c, int32_t d,\n+                           int32_t e, int32_t f, struct Rect s) {\n+    assert(a == 1);\n+    assert(b == 2);\n+    assert(c == 3.);\n+    assert(d == 4);\n+    assert(e == 5);\n+    assert(f == 6);\n+    assert(s.a == 553);\n+    assert(s.b == 554);\n+    assert(s.c == 555);\n+    assert(s.d == 556);\n+}\n+\n+// SysV ABI:\n+// a, b should be in registers\n+// s should be split across 2 registers\n+void split_rect(int32_t a, int32_t b, struct Rect s) {\n+    assert(a == 1);\n+    assert(b == 2);\n+    assert(s.a == 553);\n+    assert(s.b == 554);\n+    assert(s.c == 555);\n+    assert(s.d == 556);\n+}\n+\n+// SysV ABI:\n+// a, b should be in sse registers\n+// s should be split across int32_t & sse registers\n+void split_rect_floats(float a, float b, struct FloatRect s) {\n+    assert(a == 1.);\n+    assert(b == 2.);\n+    assert(s.a == 3489);\n+    assert(s.b == 3490);\n+    assert(s.c == 8.);\n+}\n+\n+// SysV ABI:\n+// a, b, d, f should be in registers\n+// c, e passed via sse registers\n+// s should be split across 2 registers\n+void split_rect_with_floats(int32_t a, int32_t b, float c,\n+                            int32_t d, float e, int32_t f, struct Rect s) {\n+    assert(a == 1);\n+    assert(b == 2);\n+    assert(c == 3.);\n+    assert(d == 4);\n+    assert(e == 5.);\n+    assert(f == 6);\n+    assert(s.a == 553);\n+    assert(s.b == 554);\n+    assert(s.c == 555);\n+    assert(s.d == 556);\n+}\n+\n+// SysV ABI:\n+// a, b, c should be in registers\n+// s should be split across 2 registers\n+// t should be a byval pointer\n+void split_and_byval_rect(int32_t a, int32_t b, int32_t c, struct Rect s, struct Rect t) {\n+    assert(a == 1);\n+    assert(b == 2);\n+    assert(c == 3);\n+    assert(s.a == 553);\n+    assert(s.b == 554);\n+    assert(s.c == 555);\n+    assert(s.d == 556);\n+    assert(t.a == 553);\n+    assert(t.b == 554);\n+    assert(t.c == 555);\n+    assert(t.d == 556);\n+}\n+\n+// SysV ABI:\n+// a, b should in registers\n+// s and return should be split across 2 registers\n+struct Rect split_ret_byval_struct(int32_t a, int32_t b, struct Rect s) {\n+    assert(a == 1);\n+    assert(b == 2);\n+    assert(s.a == 553);\n+    assert(s.b == 554);\n+    assert(s.c == 555);\n+    assert(s.d == 556);\n+    return s;\n+}\n+\n+// SysV ABI:\n+// a, b, c, d should be in registers\n+// return should be in a hidden sret pointer\n+// s should be a byval pointer\n+struct BiggerRect sret_byval_struct(int32_t a, int32_t b, int32_t c, int32_t d, struct Rect s) {\n+    assert(a == 1);\n+    assert(b == 2);\n+    assert(c == 3);\n+    assert(d == 4);\n+    assert(s.a == 553);\n+    assert(s.b == 554);\n+    assert(s.c == 555);\n+    assert(s.d == 556);\n+\n+    struct BiggerRect t;\n+    t.s = s; t.a = 27834; t.b = 7657;\n+    return t;\n+}\n+\n+// SysV ABI:\n+// a, b should be in registers\n+// return should be in a hidden sret pointer\n+// s should be split across 2 registers\n+struct BiggerRect sret_split_struct(int32_t a, int32_t b, struct Rect s) {\n+    assert(a == 1);\n+    assert(b == 2);\n+    assert(s.a == 553);\n+    assert(s.b == 554);\n+    assert(s.c == 555);\n+    assert(s.d == 556);\n+\n+    struct BiggerRect t;\n+    t.s = s; t.a = 27834; t.b = 7657;\n+    return t;\n+}\n+\n+// SysV ABI:\n+// s should be byval pointer (since sizeof(s) > 16)\n+// return should in a hidden sret pointer\n+struct Huge huge_struct(struct Huge s) {\n+    assert(s.a == 5647);\n+    assert(s.b == 5648);\n+    assert(s.c == 5649);\n+    assert(s.d == 5650);\n+    assert(s.e == 5651);\n+\n+    return s;\n+}"}, {"sha": "9193e51d25e1a00408c39856f00cd67b9b4efc97", "filename": "src/test/run-make/extern-fn-struct-passing-abi/test.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/3c31841c72228ef45bfad8660e95528e8ffeab2b/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c31841c72228ef45bfad8660e95528e8ffeab2b/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs?ref=3c31841c72228ef45bfad8660e95528e8ffeab2b", "patch": "@@ -0,0 +1,134 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Passing structs via FFI should work regardless of whether\n+// the functions gets passed in multiple registers or is a hidden pointer\n+\n+#[derive(Clone, Copy, Debug, PartialEq)]\n+#[repr(C)]\n+struct Rect {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq)]\n+#[repr(C)]\n+struct BiggerRect {\n+    s: Rect,\n+    a: i32,\n+    b: i32\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq)]\n+#[repr(C)]\n+struct FloatRect {\n+    a: i32,\n+    b: i32,\n+    c: f64\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq)]\n+#[repr(C)]\n+struct Huge {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    d: i32,\n+    e: i32\n+}\n+\n+#[link(name = \"test\", kind = \"static\")]\n+extern {\n+    // SysV ABI:\n+    // a, b, c, d, e should be in registers\n+    // s should be byval pointer\n+    fn byval_rect(a: i32, b: i32, c: i32, d: i32, e: i32, s: Rect);\n+\n+    // SysV ABI:\n+    // a, b, c, d, e, f, g should be in sse registers\n+    // s should be split across 2 registers\n+    // t should be byval pointer\n+    fn byval_rect_floats(a: f32, b: f32, c: f64, d: f32, e: f32,\n+                         f: f32, g: f64, s: Rect, t: FloatRect);\n+\n+    // SysV ABI:\n+    // a, b, d, e should be in registers\n+    // c passed via sse registers\n+    // s should be byval pointer\n+    fn byval_rect_with_float(a: i32, b: i32, c: f32, d: i32, e: i32, f: i32, s: Rect);\n+\n+    // SysV ABI:\n+    // a, b should be in registers\n+    // s should be split across 2 registers\n+    fn split_rect(a: i32, b: i32, s: Rect);\n+\n+    // SysV ABI:\n+    // a, b should be in sse registers\n+    // s should be split across int & sse registers\n+    fn split_rect_floats(a: f32, b: f32, s: FloatRect);\n+\n+    // SysV ABI:\n+    // a, b, d, f should be in registers\n+    // c, e passed via sse registers\n+    // s should be split across 2 registers\n+    fn split_rect_with_floats(a: i32, b: i32, c: f32, d: i32, e: f32, f: i32, s: Rect);\n+\n+    // SysV ABI:\n+    // a, b, c should be in registers\n+    // s should be split across 2 registers\n+    // t should be a byval pointer\n+    fn split_and_byval_rect(a: i32, b: i32, c: i32, s: Rect, t: Rect);\n+\n+    // SysV ABI:\n+    // a, b should in registers\n+    // s and return should be split across 2 registers\n+    fn split_ret_byval_struct(a: i32, b: i32, s: Rect) -> Rect;\n+\n+    // SysV ABI:\n+    // a, b, c, d should be in registers\n+    // return should be in a hidden sret pointer\n+    // s should be a byval pointer\n+    fn sret_byval_struct(a: i32, b: i32, c: i32, d: i32, s: Rect) -> BiggerRect;\n+\n+    // SysV ABI:\n+    // a, b should be in registers\n+    // return should be in a hidden sret pointer\n+    // s should be split across 2 registers\n+    fn sret_split_struct(a: i32, b: i32, s: Rect) -> BiggerRect;\n+\n+    // SysV ABI:\n+    // s should be byval pointer (since sizeof(s) > 16)\n+    // return should in a hidden sret pointer\n+    fn huge_struct(s: Huge) -> Huge;\n+}\n+\n+fn main() {\n+    let s = Rect { a: 553, b: 554, c: 555, d: 556 };\n+    let t = BiggerRect { s: s, a: 27834, b: 7657 };\n+    let u = FloatRect { a: 3489, b: 3490, c: 8. };\n+    let v = Huge { a: 5647, b: 5648, c: 5649, d: 5650, e: 5651 };\n+\n+    unsafe {\n+        byval_rect(1, 2, 3, 4, 5, s);\n+        byval_rect_floats(1., 2., 3., 4., 5., 6., 7., s, u);\n+        byval_rect_with_float(1, 2, 3.0, 4, 5, 6, s);\n+        split_rect(1, 2, s);\n+        split_rect_floats(1., 2., u);\n+        split_rect_with_floats(1, 2, 3.0, 4, 5.0, 6, s);\n+        split_and_byval_rect(1, 2, 3, s, s);\n+        split_rect(1, 2, s);\n+        assert_eq!(huge_struct(v), v);\n+        assert_eq!(split_ret_byval_struct(1, 2, s), s);\n+        assert_eq!(sret_byval_struct(1, 2, 3, 4, s), t);\n+        assert_eq!(sret_split_struct(1, 2, s), t);\n+    }\n+}"}]}