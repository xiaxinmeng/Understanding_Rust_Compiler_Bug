{"sha": "8cb193a5cb694ba62c83fb63a804f22720a118cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYjE5M2E1Y2I2OTRiYTYyYzgzZmI2M2E4MDRmMjI3MjBhMTE4Y2Y=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-23T22:16:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-30T03:11:27Z"}, "message": "Suggest type param when encountering `_` in fn defs\n\nWhen encountering `_` type placeholder in fn arguments and return type,\nsuggest using generic type parameters.\nExpand what counts as an inferable return type to slice, array and\ntuples of `_`.", "tree": {"sha": "69b9d30a3abea1300ff7a7ddde7d5e14d492e891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69b9d30a3abea1300ff7a7ddde7d5e14d492e891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cb193a5cb694ba62c83fb63a804f22720a118cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cb193a5cb694ba62c83fb63a804f22720a118cf", "html_url": "https://github.com/rust-lang/rust/commit/8cb193a5cb694ba62c83fb63a804f22720a118cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cb193a5cb694ba62c83fb63a804f22720a118cf/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba0d2acbd6cb01fb07619628882120d5b66bd59", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba0d2acbd6cb01fb07619628882120d5b66bd59", "html_url": "https://github.com/rust-lang/rust/commit/2ba0d2acbd6cb01fb07619628882120d5b66bd59"}], "stats": {"total": 456, "additions": 376, "deletions": 80}, "files": [{"sha": "6a681be6f3ef7f9e72e4fab23744ba9eb6f70981", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 80, "deletions": 3, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8cb193a5cb694ba62c83fb63a804f22720a118cf", "patch": "@@ -7,6 +7,7 @@ use crate::hir::def_id::DefId;\n use crate::hir::print;\n use crate::hir::ptr::P;\n use crate::hir::{self, ExprKind, GenericArg, GenericArgs, HirVec};\n+use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n use crate::middle::resolve_lifetime as rl;\n@@ -66,6 +67,8 @@ pub trait AstConv<'tcx> {\n     /// Returns the type to use when a type is omitted.\n     fn ty_infer(&self, param: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx>;\n \n+    fn allow_ty_infer(&self) -> bool;\n+\n     /// Returns the const to use when a const is omitted.\n     fn ct_infer(\n         &self,\n@@ -2593,7 +2596,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             hir::TyKind::BareFn(ref bf) => {\n                 require_c_abi_if_c_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);\n-                tcx.mk_fn_ptr(self.ty_of_fn(bf.unsafety, bf.abi, &bf.decl))\n+                tcx.mk_fn_ptr(self.ty_of_fn(bf.unsafety, bf.abi, &bf.decl, &[], None))\n             }\n             hir::TyKind::TraitObject(ref bounds, ref lifetime) => {\n                 self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime)\n@@ -2758,14 +2761,55 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         unsafety: hir::Unsafety,\n         abi: abi::Abi,\n         decl: &hir::FnDecl<'_>,\n+        generic_params: &[hir::GenericParam<'_>],\n+        ident_span: Option<Span>,\n     ) -> ty::PolyFnSig<'tcx> {\n         debug!(\"ty_of_fn\");\n \n         let tcx = self.tcx();\n-        let input_tys = decl.inputs.iter().map(|a| self.ty_of_arg(a, None));\n \n+        // We proactively collect all the infered type params to emit a single error per fn def.\n+        struct PlaceholderHirTyCollector(Vec<Span>);\n+        impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n+            fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+                NestedVisitorMap::None\n+            }\n+            fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n+                if let hir::TyKind::Infer = t.kind {\n+                    self.0.push(t.span);\n+                }\n+                hir::intravisit::walk_ty(self, t)\n+            }\n+        }\n+        let mut placeholder_types = vec![];\n+        let mut output_placeholder_types = vec![];\n+\n+        let input_tys = decl.inputs.iter().map(|a| {\n+            let mut visitor = PlaceholderHirTyCollector(vec![]);\n+            visitor.visit_ty(&a);\n+            if visitor.0.is_empty() || self.allow_ty_infer() {\n+                self.ty_of_arg(a, None)\n+            } else {\n+                placeholder_types.extend(visitor.0);\n+                tcx.types.err\n+            }\n+        });\n         let output_ty = match decl.output {\n-            hir::Return(ref output) => self.ast_ty_to_ty(output),\n+            hir::Return(ref output) => {\n+                let mut visitor = PlaceholderHirTyCollector(vec![]);\n+                visitor.visit_ty(output);\n+                let is_infer = if let hir::TyKind::Infer = output.kind {\n+                    true\n+                } else {\n+                    false\n+                };\n+                if (is_infer || !visitor.0.is_empty()) && !self.allow_ty_infer() {\n+                    output_placeholder_types.extend(visitor.0);\n+                    tcx.types.err\n+                } else {\n+                    self.ast_ty_to_ty(output)\n+                }\n+            }\n             hir::DefaultReturn(..) => tcx.mk_unit(),\n         };\n \n@@ -2774,6 +2818,39 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let bare_fn_ty =\n             ty::Binder::bind(tcx.mk_fn_sig(input_tys, output_ty, decl.c_variadic, unsafety, abi));\n \n+        placeholder_types.extend(output_placeholder_types);\n+\n+        if !placeholder_types.is_empty() {\n+            let mut sugg = placeholder_types.iter().cloned()\n+                .map(|sp| (sp, \"T\".to_owned()))\n+                .collect::<Vec<_>>();\n+            if let Some(span) = ident_span {\n+                if generic_params.is_empty() {\n+                    sugg.push((span.shrink_to_hi(), \"<T>\".to_string()));\n+                } else {\n+                    sugg.push((\n+                        generic_params.iter().last().unwrap().span.shrink_to_hi(),\n+                        \", T\".to_string(),\n+                    ));\n+                }\n+            }\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                placeholder_types,\n+                E0121,\n+                \"the type placeholder `_` is not allowed within types on item signatures\",\n+            );\n+            if ident_span.is_some() {\n+                err.multipart_suggestion(\n+                    \"use type parameters instead\",\n+                    sugg,\n+                    Applicability::HasPlaceholders,\n+                );\n+            }\n+            err.emit();\n+        }\n+\n+\n         // Find any late-bound regions declared in return type that do\n         // not appear in the arguments. These are not well-formed.\n         //"}, {"sha": "d9beb8ee3bd8795d938ac5ec3efaacf34236ea43", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8cb193a5cb694ba62c83fb63a804f22720a118cf", "patch": "@@ -963,7 +963,7 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n         let fcx = if let (Some(header), Some(decl)) = (fn_header, fn_decl) {\n             let fn_sig = if crate::collect::get_infer_ret_ty(&decl.output).is_some() {\n                 let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n-                AstConv::ty_of_fn(&fcx, header.unsafety, header.abi, decl)\n+                AstConv::ty_of_fn(&fcx, header.unsafety, header.abi, decl, &[], None)\n             } else {\n                 tcx.fn_sig(def_id)\n             };\n@@ -1069,6 +1069,7 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n             let ty = fcx.normalize_ty(span, ty);\n             fcx.require_type_is_sized(ty, span, code);\n         }\n+\n         fcx.select_all_obligations_or_error();\n \n         if fn_decl.is_some() {\n@@ -2563,6 +2564,10 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         Some(self.next_region_var(v))\n     }\n \n+    fn allow_ty_infer(&self) -> bool {\n+        true\n+    }\n+\n     fn ty_infer(&self, param: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n         if let Some(param) = param {\n             if let GenericArgKind::Type(ty) = self.var_for_def(span, param).unpack() {"}, {"sha": "6ab30c4b7e7eec2d1939a3700041f27ca45cafb4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8cb193a5cb694ba62c83fb63a804f22720a118cf", "patch": "@@ -195,6 +195,10 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         None\n     }\n \n+    fn allow_ty_infer(&self) -> bool {\n+        false\n+    }\n+\n     fn ty_infer(&self, _: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n         bad_placeholder_type(self.tcx(), span).emit();\n \n@@ -1699,9 +1703,26 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n }\n \n+fn is_infer_ty(ty: &hir::Ty<'_>) -> bool {\n+    match &ty.kind {\n+        hir::TyKind::Infer => true,\n+        hir::TyKind::Slice(ty) | hir::TyKind::Array(ty, _) => is_infer_ty(ty),\n+        hir::TyKind::Tup(tys)\n+            if !tys.is_empty()\n+                && tys.iter().all(|ty| match ty.kind {\n+                    hir::TyKind::Infer => true,\n+                    _ => false,\n+                }) =>\n+        {\n+            true\n+        }\n+        _ => false,\n+    }\n+}\n+\n pub fn get_infer_ret_ty(output: &'hir hir::FunctionRetTy<'hir>) -> Option<&'hir hir::Ty<'hir>> {\n     if let hir::FunctionRetTy::Return(ref ty) = output {\n-        if let hir::TyKind::Infer = ty.kind {\n+        if is_infer_ty(ty) {\n             return Some(&**ty);\n         }\n     }\n@@ -1719,10 +1740,12 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n             kind: TraitItemKind::Method(sig, TraitMethod::Provided(_)),\n+            ident,\n+            generics,\n             ..\n         })\n-        | ImplItem(hir::ImplItem { kind: ImplItemKind::Method(sig, _), .. })\n-        | Item(hir::Item { kind: ItemKind::Fn(sig, _, _), .. }) => {\n+        | ImplItem(hir::ImplItem { kind: ImplItemKind::Method(sig, _), ident, generics, .. })\n+        | Item(hir::Item { kind: ItemKind::Fn(sig, generics, _), ident, .. }) => {\n             match get_infer_ret_ty(&sig.decl.output) {\n                 Some(ty) => {\n                     let fn_sig = tcx.typeck_tables_of(def_id).liberated_fn_sigs()[hir_id];\n@@ -1731,22 +1754,38 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     if ret_ty != tcx.types.err {\n                         diag.span_suggestion(\n                             ty.span,\n-                            \"replace `_` with the correct return type\",\n+                            \"replace this with the correct return type\",\n                             ret_ty.to_string(),\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n                     diag.emit();\n                     ty::Binder::bind(fn_sig)\n                 }\n-                None => AstConv::ty_of_fn(&icx, sig.header.unsafety, sig.header.abi, &sig.decl),\n+                None => AstConv::ty_of_fn(\n+                    &icx,\n+                    sig.header.unsafety,\n+                    sig.header.abi,\n+                    &sig.decl,\n+                    &generics.params[..],\n+                    Some(ident.span),\n+                ),\n             }\n         }\n \n         TraitItem(hir::TraitItem {\n             kind: TraitItemKind::Method(FnSig { header, decl }, _),\n+            ident,\n+            generics,\n             ..\n-        }) => AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl),\n+        }) => AstConv::ty_of_fn(\n+            &icx,\n+            header.unsafety,\n+            header.abi,\n+            decl,\n+            &generics.params[..],\n+            Some(ident.span),\n+        ),\n \n         ForeignItem(&hir::ForeignItem { kind: ForeignItemKind::Fn(ref fn_decl, _, _), .. }) => {\n             let abi = tcx.hir().get_foreign_abi(hir_id);\n@@ -2351,7 +2390,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     } else {\n         hir::Unsafety::Unsafe\n     };\n-    let fty = AstConv::ty_of_fn(&ItemCtxt::new(tcx, def_id), unsafety, abi, decl);\n+    let fty = AstConv::ty_of_fn(&ItemCtxt::new(tcx, def_id), unsafety, abi, decl, &[], None);\n \n     // Feature gate SIMD types in FFI, since I am not sure that the\n     // ABIs are handled at all correctly. -huonw"}, {"sha": "5da9a4c080f900183c50a33ae4e79feb34e4f6ac", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=8cb193a5cb694ba62c83fb63a804f22720a118cf", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> _ { 5 }\n    |             ^\n    |             |\n    |             not allowed in type signatures\n-   |             help: replace `_` with the correct return type: `i32`\n+   |             help: replace this with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/E0121.rs:3:13"}, {"sha": "b064928d8a34ffab756d40f14a7c74dd36999d91", "filename": "src/test/ui/self/self-infer.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr?ref=8cb193a5cb694ba62c83fb63a804f22720a118cf", "patch": "@@ -2,13 +2,23 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/self-infer.rs:4:16\n    |\n LL |     fn f(self: _) {}\n-   |                ^ not allowed in type signatures\n+   |                ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn f<T>(self: T) {}\n+   |         ^^^       ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/self-infer.rs:5:17\n    |\n LL |     fn g(self: &_) {}\n-   |                 ^ not allowed in type signatures\n+   |                 ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn g<T>(self: &T) {}\n+   |         ^^^        ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "03ee61486c6cff22a9bd0ddd0da317d709f80f33", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=8cb193a5cb694ba62c83fb63a804f22720a118cf", "patch": "@@ -6,7 +6,6 @@ fn test() -> _ { 5 }\n \n fn test2() -> (_, _) { (5, 5) }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n static TEST3: _ = \"test\";\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n@@ -59,7 +58,6 @@ pub fn main() {\n \n     fn fn_test2() -> (_, _) { (5, 5) }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     static FN_TEST3: _ = \"test\";\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n@@ -106,4 +104,28 @@ pub fn main() {\n         //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     }\n \n+    fn fn_test11(_: _) -> (_, _) { panic!() }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~| ERROR type annotations needed\n+\n+    fn fn_test12(x: i32) -> (_, _) { (x, x) }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+    fn fn_test13(x: _) -> (i32, _) { (x, x) }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n+\n+trait T {\n+    fn method_test1(&self, x: _);\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    fn method_test2(&self, x: _) -> _;\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    fn method_test3(&self) -> _;\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    fn assoc_fn_test1(x: _);\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    fn assoc_fn_test2(x: _) -> _;\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    fn assoc_fn_test3() -> _;\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+}\n\\ No newline at end of file"}, {"sha": "0edfa07a6569a2516f7721e04df4aa43a67084fe", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 206, "deletions": 63, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=8cb193a5cb694ba62c83fb63a804f22720a118cf", "patch": "@@ -5,22 +5,19 @@ LL | fn test() -> _ { 5 }\n    |              ^\n    |              |\n    |              not allowed in type signatures\n-   |              help: replace `_` with the correct return type: `i32`\n+   |              help: replace this with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:7:16\n+  --> $DIR/typeck_type_placeholder_item.rs:7:15\n    |\n LL | fn test2() -> (_, _) { (5, 5) }\n-   |                ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:7:19\n-   |\n-LL | fn test2() -> (_, _) { (5, 5) }\n-   |                   ^ not allowed in type signatures\n+   |               ^^^^^^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace this with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:11:15\n+  --> $DIR/typeck_type_placeholder_item.rs:10:15\n    |\n LL | static TEST3: _ = \"test\";\n    |               ^\n@@ -29,7 +26,7 @@ LL | static TEST3: _ = \"test\";\n    |               help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:14:15\n+  --> $DIR/typeck_type_placeholder_item.rs:13:15\n    |\n LL | static TEST4: _ = 145;\n    |               ^\n@@ -38,94 +35,106 @@ LL | static TEST4: _ = 145;\n    |               help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:17:16\n+  --> $DIR/typeck_type_placeholder_item.rs:16:16\n    |\n LL | static TEST5: (_, _) = (1, 2);\n    |                ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:17:19\n+  --> $DIR/typeck_type_placeholder_item.rs:16:19\n    |\n LL | static TEST5: (_, _) = (1, 2);\n    |                   ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:21:13\n+  --> $DIR/typeck_type_placeholder_item.rs:20:13\n    |\n LL | fn test6(_: _) { }\n-   |             ^ not allowed in type signatures\n+   |             ^\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn test6<T>(_: T) { }\n+   |         ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:24:13\n+  --> $DIR/typeck_type_placeholder_item.rs:23:13\n    |\n LL | fn test7(x: _) { let _x: usize = x; }\n-   |             ^ not allowed in type signatures\n+   |             ^\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn test7<T>(x: T) { let _x: usize = x; }\n+   |         ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:27:22\n+  --> $DIR/typeck_type_placeholder_item.rs:26:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n-   |                      ^ not allowed in type signatures\n+   |                      ^\n+   |\n+help: use type parameters instead\n+   |\n+LL | fn test8<T>(_f: fn() -> T) { }\n+   |         ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:49:8\n+  --> $DIR/typeck_type_placeholder_item.rs:48:8\n    |\n LL |     a: _,\n    |        ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:51:9\n+  --> $DIR/typeck_type_placeholder_item.rs:50:9\n    |\n LL |     b: (_, _),\n    |         ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:51:12\n+  --> $DIR/typeck_type_placeholder_item.rs:50:12\n    |\n LL |     b: (_, _),\n    |            ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:102:12\n+  --> $DIR/typeck_type_placeholder_item.rs:100:12\n    |\n LL |         a: _,\n    |            ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:104:13\n+  --> $DIR/typeck_type_placeholder_item.rs:102:13\n    |\n LL |         b: (_, _),\n    |             ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:104:16\n+  --> $DIR/typeck_type_placeholder_item.rs:102:16\n    |\n LL |         b: (_, _),\n    |                ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:57:21\n+  --> $DIR/typeck_type_placeholder_item.rs:56:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n    |                     ^\n    |                     |\n    |                     not allowed in type signatures\n-   |                     help: replace `_` with the correct return type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:60:23\n-   |\n-LL |     fn fn_test2() -> (_, _) { (5, 5) }\n-   |                       ^ not allowed in type signatures\n+   |                     help: replace this with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:60:26\n+  --> $DIR/typeck_type_placeholder_item.rs:59:22\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n-   |                          ^ not allowed in type signatures\n+   |                      ^^^^^^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: replace this with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:64:22\n+  --> $DIR/typeck_type_placeholder_item.rs:62:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n@@ -134,7 +143,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:67:22\n+  --> $DIR/typeck_type_placeholder_item.rs:65:22\n    |\n LL |     static FN_TEST4: _ = 145;\n    |                      ^\n@@ -143,95 +152,229 @@ LL |     static FN_TEST4: _ = 145;\n    |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:70:23\n+  --> $DIR/typeck_type_placeholder_item.rs:68:23\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n    |                       ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:70:26\n+  --> $DIR/typeck_type_placeholder_item.rs:68:26\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n    |                          ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:74:20\n+  --> $DIR/typeck_type_placeholder_item.rs:72:20\n    |\n LL |     fn fn_test6(_: _) { }\n-   |                    ^ not allowed in type signatures\n+   |                    ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn fn_test6<T>(_: T) { }\n+   |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:77:20\n+  --> $DIR/typeck_type_placeholder_item.rs:75:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n-   |                    ^ not allowed in type signatures\n+   |                    ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n+   |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:80:29\n+  --> $DIR/typeck_type_placeholder_item.rs:78:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n-   |                             ^ not allowed in type signatures\n+   |                             ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn fn_test8<T>(_f: fn() -> T) { }\n+   |                ^^^             ^\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/typeck_type_placeholder_item.rs:107:27\n+   |\n+LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n+   |                           ^^^^^^ cannot infer type\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:33:24\n+  --> $DIR/typeck_type_placeholder_item.rs:107:27\n+   |\n+LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n+   |                           ^^^^^^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:111:29\n+   |\n+LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n+   |                             ^^^^^^\n+   |                             |\n+   |                             not allowed in type signatures\n+   |                             help: replace this with the correct return type: `(i32, i32)`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:114:21\n+   |\n+LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n+   |                     ^           ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn fn_test13<T>(x: T) -> (i32, T) { (x, x) }\n+   |                 ^^^    ^           ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:119:31\n+   |\n+LL |     fn method_test1(&self, x: _);\n+   |                               ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn method_test1<T>(&self, x: T);\n+   |                    ^^^           ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:121:31\n+   |\n+LL |     fn method_test2(&self, x: _) -> _;\n+   |                               ^     ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn method_test2<T>(&self, x: T) -> T;\n+   |                    ^^^           ^     ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:123:31\n+   |\n+LL |     fn method_test3(&self) -> _;\n+   |                               ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn method_test3<T>(&self) -> T;\n+   |                    ^^^           ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:125:26\n+   |\n+LL |     fn assoc_fn_test1(x: _);\n+   |                          ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn assoc_fn_test1<T>(x: T);\n+   |                      ^^^    ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:127:26\n+   |\n+LL |     fn assoc_fn_test2(x: _) -> _;\n+   |                          ^     ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn assoc_fn_test2<T>(x: T) -> T;\n+   |                      ^^^    ^     ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:129:28\n+   |\n+LL |     fn assoc_fn_test3() -> _;\n+   |                            ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn assoc_fn_test3<T>() -> T;\n+   |                      ^^^      ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:32:24\n    |\n LL |     fn test9(&self) -> _ { () }\n    |                        ^\n    |                        |\n    |                        not allowed in type signatures\n-   |                        help: replace `_` with the correct return type: `()`\n+   |                        help: replace this with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:36:27\n+  --> $DIR/typeck_type_placeholder_item.rs:35:27\n    |\n LL |     fn test10(&self, _x : _) { }\n-   |                           ^ not allowed in type signatures\n+   |                           ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn test10<T>(&self, _x : T) { }\n+   |              ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:41:24\n+  --> $DIR/typeck_type_placeholder_item.rs:40:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n    |                        ^\n    |                        |\n    |                        not allowed in type signatures\n-   |                        help: replace `_` with the correct return type: `Test9`\n+   |                        help: replace this with the correct return type: `Test9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:44:37\n+  --> $DIR/typeck_type_placeholder_item.rs:43:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n-   |                                     ^ not allowed in type signatures\n+   |                                     ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n+   |                  ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:86:31\n+  --> $DIR/typeck_type_placeholder_item.rs:84:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n    |                               ^\n    |                               |\n    |                               not allowed in type signatures\n-   |                               help: replace `_` with the correct return type: `()`\n+   |                               help: replace this with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:89:34\n+  --> $DIR/typeck_type_placeholder_item.rs:87:34\n    |\n LL |         fn fn_test10(&self, _x : _) { }\n-   |                                  ^ not allowed in type signatures\n+   |                                  ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |         fn fn_test10<T>(&self, _x : T) { }\n+   |                     ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:94:28\n+  --> $DIR/typeck_type_placeholder_item.rs:92:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            ^\n    |                            |\n    |                            not allowed in type signatures\n-   |                            help: replace `_` with the correct return type: `main::FnTest9`\n+   |                            help: replace this with the correct return type: `main::FnTest9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:97:41\n+  --> $DIR/typeck_type_placeholder_item.rs:95:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n-   |                                         ^ not allowed in type signatures\n+   |                                         ^\n+   |\n+help: use type parameters instead\n+   |\n+LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n+   |                      ^^^                   ^\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 42 previous errors\n \n-For more information about this error, try `rustc --explain E0121`.\n+Some errors have detailed explanations: E0121, E0282.\n+For more information about an error, try `rustc --explain E0121`."}, {"sha": "ab002381b1f790c6c9420e1935cc1c58e1c394ff", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb193a5cb694ba62c83fb63a804f22720a118cf/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=8cb193a5cb694ba62c83fb63a804f22720a118cf", "patch": "@@ -5,7 +5,7 @@ LL | fn test1() -> _ { Some(42) }\n    |               ^\n    |               |\n    |               not allowed in type signatures\n-   |               help: replace `_` with the correct return type: `std::option::Option<i32>`\n+   |               help: replace this with the correct return type: `std::option::Option<i32>`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item_help.rs:7:14"}]}