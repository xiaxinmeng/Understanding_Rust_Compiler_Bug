{"sha": "6c3e477d134511094ab301fc15c504cc79804e41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjM2U0NzdkMTM0NTExMDk0YWIzMDFmYzE1YzUwNGNjNzk4MDRlNDE=", "commit": {"author": {"name": "Charles Gleason", "email": "charles_gleason@alumni.brown.edu", "date": "2020-01-28T16:59:50Z"}, "committer": {"name": "Charles Gleason", "email": "charles_gleason@alumni.brown.edu", "date": "2020-01-28T18:00:06Z"}, "message": "Reformat truncation section of clone_from", "tree": {"sha": "91a25ac61825e12a0638c11960482ad4ef27ed23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a25ac61825e12a0638c11960482ad4ef27ed23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c3e477d134511094ab301fc15c504cc79804e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3e477d134511094ab301fc15c504cc79804e41", "html_url": "https://github.com/rust-lang/rust/commit/6c3e477d134511094ab301fc15c504cc79804e41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c3e477d134511094ab301fc15c504cc79804e41/comments", "author": {"login": "crgl", "id": 36055314, "node_id": "MDQ6VXNlcjM2MDU1MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/36055314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crgl", "html_url": "https://github.com/crgl", "followers_url": "https://api.github.com/users/crgl/followers", "following_url": "https://api.github.com/users/crgl/following{/other_user}", "gists_url": "https://api.github.com/users/crgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/crgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crgl/subscriptions", "organizations_url": "https://api.github.com/users/crgl/orgs", "repos_url": "https://api.github.com/users/crgl/repos", "events_url": "https://api.github.com/users/crgl/events{/privacy}", "received_events_url": "https://api.github.com/users/crgl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crgl", "id": 36055314, "node_id": "MDQ6VXNlcjM2MDU1MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/36055314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crgl", "html_url": "https://github.com/crgl", "followers_url": "https://api.github.com/users/crgl/followers", "following_url": "https://api.github.com/users/crgl/following{/other_user}", "gists_url": "https://api.github.com/users/crgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/crgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crgl/subscriptions", "organizations_url": "https://api.github.com/users/crgl/orgs", "repos_url": "https://api.github.com/users/crgl/repos", "events_url": "https://api.github.com/users/crgl/events{/privacy}", "received_events_url": "https://api.github.com/users/crgl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b6f8c3fc9098e7b1b6aad230ea7770d03070bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b6f8c3fc9098e7b1b6aad230ea7770d03070bc", "html_url": "https://github.com/rust-lang/rust/commit/81b6f8c3fc9098e7b1b6aad230ea7770d03070bc"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "7c45a6fe498230b96f70fb1845bb9385bb0db172", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6c3e477d134511094ab301fc15c504cc79804e41/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3e477d134511094ab301fc15c504cc79804e41/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=6c3e477d134511094ab301fc15c504cc79804e41", "patch": "@@ -227,20 +227,20 @@ impl<K: Clone + Ord, V: Clone> BTreeClone for BTreeMap<K, V> {\n     fn clone_from(&mut self, other: &Self) {\n         // This truncates `self` to `other.len()` by calling `split_off` on\n         // the first key after `other.len()` elements if it exists\n-        if let Some(key) = {\n-            if self.len() > other.len() {\n-                let diff = self.len() - other.len();\n-                if diff <= other.len() {\n-                    self.iter().nth_back(diff - 1).map(|pair| (*pair.0).clone())\n-                } else {\n-                    self.iter().nth(other.len()).map(|pair| (*pair.0).clone())\n-                }\n+        let split_off_key = if self.len() > other.len() {\n+            let diff = self.len() - other.len();\n+            if diff <= other.len() {\n+                self.iter().nth_back(diff - 1).map(|pair| (*pair.0).clone())\n             } else {\n-                None\n+                self.iter().nth(other.len()).map(|pair| (*pair.0).clone())\n             }\n-        } {\n+        } else {\n+            None\n+        };\n+        if let Some(key) = split_off_key {\n             self.split_off(&key);\n         }\n+\n         let mut siter = self.range_mut(..);\n         let mut oiter = other.iter();\n         // After truncation, `self` is at most as long as `other` so this loop"}]}