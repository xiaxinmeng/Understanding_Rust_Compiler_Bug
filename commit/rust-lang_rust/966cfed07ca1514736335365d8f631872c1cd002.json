{"sha": "966cfed07ca1514736335365d8f631872c1cd002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NmNmZWQwN2NhMTUxNDczNjMzNTM2NWQ4ZjYzMTg3MmMxY2QwMDI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-03T03:12:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-03T03:12:34Z"}, "message": "Modify block ctxt / cleanup handling to only occur on scope blocks.", "tree": {"sha": "42b17f1455d827880b74e204eb69911dc7747ae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42b17f1455d827880b74e204eb69911dc7747ae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/966cfed07ca1514736335365d8f631872c1cd002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/966cfed07ca1514736335365d8f631872c1cd002", "html_url": "https://github.com/rust-lang/rust/commit/966cfed07ca1514736335365d8f631872c1cd002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/966cfed07ca1514736335365d8f631872c1cd002/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e9c8b923d78e6169d1d99bfccf675a10f904a76", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9c8b923d78e6169d1d99bfccf675a10f904a76", "html_url": "https://github.com/rust-lang/rust/commit/1e9c8b923d78e6169d1d99bfccf675a10f904a76"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "585373e7af1107bc798cc4d457c5c4fbd090fc24", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/966cfed07ca1514736335365d8f631872c1cd002/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/966cfed07ca1514736335365d8f631872c1cd002/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=966cfed07ca1514736335365d8f631872c1cd002", "patch": "@@ -73,6 +73,7 @@ tag cleanup {\n state type block_ctxt = rec(BasicBlockRef llbb,\n                             builder build,\n                             block_parent parent,\n+                            bool is_scope,\n                             mutable vec[cleanup] cleanups,\n                             @fn_ctxt fcx);\n \n@@ -450,15 +451,30 @@ fn trans_non_gc_free(@block_ctxt cx, ValueRef v) -> result {\n                                             C_int(0)));\n }\n \n+fn find_scope_cx(@block_ctxt cx) -> @block_ctxt {\n+    if (cx.is_scope) {\n+        ret cx;\n+    }\n+    alt (cx.parent) {\n+        case (parent_some(?b)) {\n+            be find_scope_cx(b);\n+        }\n+        case (parent_none) {\n+            fail;\n+        }\n+    }\n+}\n+\n fn trans_malloc(@block_ctxt cx, @typeck.ty t) -> result {\n+    auto scope_cx = find_scope_cx(cx);\n     auto ptr_ty = type_of(cx.fcx.ccx, t);\n     auto body_ty = lib.llvm.llvm.LLVMGetElementType(ptr_ty);\n     // FIXME: need a table to collect tydesc globals.\n     auto tydesc = C_int(0);\n     auto sz = cx.build.IntCast(lib.llvm.llvm.LLVMSizeOf(body_ty), T_int());\n     auto sub = trans_upcall(cx, \"upcall_malloc\", vec(sz, tydesc));\n     sub.val = sub.bcx.build.IntToPtr(sub.val, ptr_ty);\n-    sub.bcx.cleanups += clean(bind drop_ty(_, sub.val, t));\n+    scope_cx.cleanups += clean(bind drop_ty(_, sub.val, t));\n     ret sub;\n }\n \n@@ -575,8 +591,8 @@ fn iter_sequence(@block_ctxt cx,\n \n         auto r = res(cx, C_nil());\n \n-        auto cond_cx = new_sub_block_ctxt(cx, \"sequence-iter cond\");\n-        auto body_cx = new_sub_block_ctxt(cx, \"sequence-iter body\");\n+        auto cond_cx = new_scope_block_ctxt(cx, \"sequence-iter cond\");\n+        auto body_cx = new_scope_block_ctxt(cx, \"sequence-iter body\");\n         auto next_cx = new_sub_block_ctxt(cx, \"next\");\n \n         auto ix = cond_cx.build.Phi(T_int(), vec(C_int(0)), vec(cx.llbb));\n@@ -1081,10 +1097,10 @@ impure fn trans_if(@block_ctxt cx, @ast.expr cond,\n \n     auto cond_res = trans_expr(cx, cond);\n \n-    auto then_cx = new_sub_block_ctxt(cx, \"then\");\n+    auto then_cx = new_scope_block_ctxt(cx, \"then\");\n     auto then_res = trans_block(then_cx, thn);\n \n-    auto else_cx = new_sub_block_ctxt(cx, \"else\");\n+    auto else_cx = new_scope_block_ctxt(cx, \"else\");\n     auto else_res = res(else_cx, C_nil());\n \n     alt (els) {\n@@ -1106,8 +1122,8 @@ impure fn trans_if(@block_ctxt cx, @ast.expr cond,\n impure fn trans_while(@block_ctxt cx, @ast.expr cond,\n                       &ast.block body) -> result {\n \n-    auto cond_cx = new_sub_block_ctxt(cx, \"while cond\");\n-    auto body_cx = new_sub_block_ctxt(cx, \"while loop body\");\n+    auto cond_cx = new_scope_block_ctxt(cx, \"while cond\");\n+    auto body_cx = new_scope_block_ctxt(cx, \"while loop body\");\n     auto next_cx = new_sub_block_ctxt(cx, \"next\");\n \n     auto body_res = trans_block(body_cx, body);\n@@ -1125,7 +1141,7 @@ impure fn trans_while(@block_ctxt cx, @ast.expr cond,\n impure fn trans_do_while(@block_ctxt cx, &ast.block body,\n                          @ast.expr cond) -> result {\n \n-    auto body_cx = new_sub_block_ctxt(cx, \"do-while loop body\");\n+    auto body_cx = new_scope_block_ctxt(cx, \"do-while loop body\");\n     auto next_cx = new_sub_block_ctxt(cx, \"next\");\n \n     auto body_res = trans_block(body_cx, body);\n@@ -1353,7 +1369,7 @@ impure fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n         }\n \n         case (ast.expr_block(?blk, _)) {\n-            auto sub_cx = new_sub_block_ctxt(cx, \"block-expr body\");\n+            auto sub_cx = new_scope_block_ctxt(cx, \"block-expr body\");\n             auto next_cx = new_sub_block_ctxt(cx, \"next\");\n             auto sub = trans_block(sub_cx, blk);\n \n@@ -1542,36 +1558,45 @@ fn new_builder(BasicBlockRef llbb, str name) -> builder {\n // You probably don't want to use this one. See the\n // next three functions instead.\n fn new_block_ctxt(@fn_ctxt cx, block_parent parent,\n-                  vec[cleanup] cleanups,\n+                  bool is_scope,\n                   str name) -> @block_ctxt {\n+    let vec[cleanup] cleanups = vec();\n     let BasicBlockRef llbb =\n         llvm.LLVMAppendBasicBlock(cx.llfn,\n                                   _str.buf(cx.ccx.names.next(name)));\n \n     ret @rec(llbb=llbb,\n              build=new_builder(llbb, name),\n              parent=parent,\n+             is_scope=is_scope,\n              mutable cleanups=cleanups,\n              fcx=cx);\n }\n \n // Use this when you're at the top block of a function or the like.\n fn new_top_block_ctxt(@fn_ctxt fcx) -> @block_ctxt {\n-    let vec[cleanup] cleanups = vec();\n-    ret new_block_ctxt(fcx, parent_none, cleanups, \"function top level\");\n+    ret new_block_ctxt(fcx, parent_none, true, \"function top level\");\n+}\n \n+// Use this when you're at a curly-brace or similar lexical scope.\n+fn new_scope_block_ctxt(@block_ctxt bcx, str n) -> @block_ctxt {\n+    ret new_block_ctxt(bcx.fcx, parent_some(bcx), true, n);\n }\n \n-// Use this when you're making a block-within-a-block.\n+// Use this when you're making a general CFG BB within a scope.\n fn new_sub_block_ctxt(@block_ctxt bcx, str n) -> @block_ctxt {\n-    let vec[cleanup] cleanups = vec();\n-    ret new_block_ctxt(bcx.fcx, parent_some(bcx), cleanups, n);\n+    ret new_block_ctxt(bcx.fcx, parent_some(bcx), false, n);\n }\n \n \n fn trans_block_cleanups(@block_ctxt cx,\n                         @block_ctxt cleanup_cx) -> @block_ctxt {\n     auto bcx = cx;\n+\n+    if (!cleanup_cx.is_scope) {\n+        check (_vec.len[cleanup](cleanup_cx.cleanups) == 0u);\n+    }\n+\n     for (cleanup c in cleanup_cx.cleanups) {\n         alt (c) {\n             case (clean(?cfn)) {"}]}