{"sha": "0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOTE3YTZiOGU0OWE4ZjIyZDJhNDY0MjRjYzFjYmQzYjI4NjdiZDc=", "commit": {"author": {"name": "Nam Nguyen", "email": "nanguye@microsoft.com", "date": "2021-03-30T17:43:39Z"}, "committer": {"name": "Nam Nguyen", "email": "nanguye@microsoft.com", "date": "2021-06-25T21:07:06Z"}, "message": "Add debug info tests for range, fix-sized array, and cell types.", "tree": {"sha": "646b5e7c1cabb7f2c528a36a42021f9ad4cf9387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/646b5e7c1cabb7f2c528a36a42021f9ad4cf9387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "html_url": "https://github.com/rust-lang/rust/commit/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/comments", "author": {"login": "nanguye", "id": 58788112, "node_id": "MDQ6VXNlcjU4Nzg4MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/58788112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nanguye", "html_url": "https://github.com/nanguye", "followers_url": "https://api.github.com/users/nanguye/followers", "following_url": "https://api.github.com/users/nanguye/following{/other_user}", "gists_url": "https://api.github.com/users/nanguye/gists{/gist_id}", "starred_url": "https://api.github.com/users/nanguye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nanguye/subscriptions", "organizations_url": "https://api.github.com/users/nanguye/orgs", "repos_url": "https://api.github.com/users/nanguye/repos", "events_url": "https://api.github.com/users/nanguye/events{/privacy}", "received_events_url": "https://api.github.com/users/nanguye/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nanguye", "id": 58788112, "node_id": "MDQ6VXNlcjU4Nzg4MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/58788112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nanguye", "html_url": "https://github.com/nanguye", "followers_url": "https://api.github.com/users/nanguye/followers", "following_url": "https://api.github.com/users/nanguye/following{/other_user}", "gists_url": "https://api.github.com/users/nanguye/gists{/gist_id}", "starred_url": "https://api.github.com/users/nanguye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nanguye/subscriptions", "organizations_url": "https://api.github.com/users/nanguye/orgs", "repos_url": "https://api.github.com/users/nanguye/repos", "events_url": "https://api.github.com/users/nanguye/events{/privacy}", "received_events_url": "https://api.github.com/users/nanguye/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5", "html_url": "https://github.com/rust-lang/rust/commit/0d7f236b8a255b7e0afa19223bfe72cbaf9cc2d5"}], "stats": {"total": 342, "additions": 337, "deletions": 5}, "files": [{"sha": "d8899224d284491f5da613b09926a55535e32a67", "filename": "src/test/debuginfo/fixed-sized-array.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Ffixed-sized-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Ffixed-sized-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffixed-sized-array.rs?ref=0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "patch": "@@ -0,0 +1,39 @@\n+// Testing the display of fixed sized arrays in cdb.\n+\n+// cdb-only\n+// min-cdb-version: 10.0.18317.1001\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command: dx xs,d\n+// cdb-check:xs,d             [Type: int [5]]\n+// cdb-check:    [0]              : 1 [Type: int]\n+// cdb-check:    [1]              : 2 [Type: int]\n+// cdb-check:    [2]              : 3 [Type: int]\n+// cdb-check:    [3]              : 4 [Type: int]\n+// cdb-check:    [4]              : 5 [Type: int]\n+\n+// cdb-command: dx ys,d\n+// cdb-check:ys,d             [Type: int [3]]\n+// cdb-check:    [0]              : 0 [Type: int]\n+// cdb-check:    [1]              : 0 [Type: int]\n+// cdb-check:    [2]              : 0 [Type: int]\n+\n+fn main() {\n+    // Fixed-size array (type signature is superfluous)\n+    let xs: [i32; 5] = [1, 2, 3, 4, 5];\n+\n+    // All elements can be initialized to the same value\n+    let ys: [i32; 3] = [0; 3];\n+\n+    // Indexing starts at 0\n+    println!(\"first element of the array: {}\", xs[0]);\n+    println!(\"second element of the array: {}\", xs[1]);\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}, {"sha": "428a7e8d9c09b49f8b4f357185419a07dd64ec2e", "filename": "src/test/debuginfo/mutable-locs.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Fmutable-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Fmutable-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmutable-locs.rs?ref=0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "patch": "@@ -0,0 +1,51 @@\n+// Testing the display of Cell, RefCell, and RefMut in cdb.\n+\n+// cdb-only\n+// min-cdb-version: 10.0.18317.1001\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command:dx static_c,d\n+// cdb-check:static_c,d       [Type: core::cell::Cell<i32>]\n+// cdb-check:    [...] value            [Type: core::cell::UnsafeCell<i32>]\n+\n+// cdb-command: dx static_c.value,d\n+// cdb-check:static_c.value,d [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [...] value            : 10 [Type: int]\n+\n+// cdb-command:  dx dynamic_c,d\n+// cdb-check:dynamic_c,d      [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [...] borrow           [Type: core::cell::Cell<isize>]\n+// cdb-check:    [...] value            [Type: core::cell::UnsafeCell<i32>]\n+\n+// cdb-command: dx dynamic_c.value,d\n+// cdb-check:dynamic_c.value,d [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [...] value            : 15 [Type: int]\n+\n+// cdb-command: dx b,d\n+// cdb-check:b,d              [Type: core::cell::RefMut<i32>]\n+// cdb-check:    [...] value            : [...] : 42 [Type: int *]\n+// cdb-check:    [...] borrow           [Type: core::cell::BorrowRefMut]\n+\n+#![allow(unused_variables)]\n+\n+use std::cell::{Cell, RefCell};\n+\n+fn main() {\n+    let static_c = Cell::new(5);\n+    static_c.set(10);\n+\n+    let dynamic_c = RefCell::new(5);\n+    dynamic_c.replace(15);\n+\n+    let dynamic_c_0 = RefCell::new(15);\n+    let mut b = dynamic_c_0.borrow_mut();\n+    *b = 42;\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() {()}"}, {"sha": "969099359ab08d5469fdc721cafeca77a660dffd", "filename": "src/test/debuginfo/mutex.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmutex.rs?ref=0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "patch": "@@ -0,0 +1,39 @@\n+// Testing the display of Mutex and MutexGuard in cdb.\n+\n+// cdb-only\n+// min-cdb-version: 10.0.21287.1005\n+// compile-flags:-g\n+// ignore-tidy-linelength\n+\n+// === CDB TESTS ==================================================================================\n+//\n+// cdb-command:g\n+//\n+// cdb-command:dx m,d\n+// cdb-check:m,d              [Type: std::sync::mutex::Mutex<i32>]\n+// cdb-check:    [...] inner            [Type: std::sys_common::mutex::MovableMutex]\n+// cdb-check:    [...] poison           [Type: std::sync::poison::Flag]\n+// cdb-check:    [...] data             [Type: core::cell::UnsafeCell<i32>]\n+\n+//\n+// cdb-command:dx m.data,d\n+// cdb-check:m.data,d         [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [...] value            : 0 [Type: int]\n+\n+//\n+// cdb-command:dx lock,d\n+// cdb-check:lock,d           : Ok [Type: enum$<core::result::Result<std::sync::mutex::MutexGuard<i32>, enum$<std::sync::poison::TryLockError<std::sync::mutex::MutexGuard<i32>>, 0, 1, Poisoned>>>]\n+// cdb-check:    [...] variant$         : Ok (0) [Type: core::result::Result]\n+// cdb-check:    [...] __0              [Type: std::sync::mutex::MutexGuard<i32>]\n+\n+use std::sync::Mutex;\n+\n+#[allow(unused_variables)]\n+fn main()\n+{\n+    let m = Mutex::new(0);\n+    let lock = m.try_lock();\n+    zzz(); // #break\n+}\n+\n+fn zzz() {}"}, {"sha": "aeee1e6258de6d59c3b3cb62cd5267c3ae2a1ea1", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "patch": "@@ -5,6 +5,7 @@\n // compile-flags:-g\n // min-gdb-version: 7.7\n // min-lldb-version: 310\n+// min-cdb-version: 10.0.18317.1001\n \n // === GDB TESTS ===================================================================================\n \n@@ -71,8 +72,12 @@\n // cdb-command: g\n \n // cdb-command: dx slice,d\n-// cdb-check:slice,d [...]\n-// NOTE: While slices have a .natvis entry that works in VS & VS Code, it fails in CDB 10.0.18362.1\n+// cdb-check:slice,d          : { len=4 } [Type: slice<i32>]\n+// cdb-check:    [len]            : 4 [Type: [...]]\n+// cdb-check:    [0]              : 0 [Type: int]\n+// cdb-check:    [1]              : 1 [Type: int]\n+// cdb-check:    [2]              : 2 [Type: int]\n+// cdb-check:    [3]              : 3 [Type: int]\n \n // cdb-command: dx vec,d\n // cdb-check:vec,d [...] : { len=4 } [Type: [...]::Vec<u64, alloc::alloc::Global>]\n@@ -84,8 +89,7 @@\n // cdb-check:    [3]              : 7 [Type: unsigned __int64]\n \n // cdb-command: dx str_slice\n-// cdb-check:str_slice [...]\n-// NOTE: While string slices have a .natvis entry that works in VS & VS Code, it fails in CDB\n+// cdb-check:str_slice        : \"IAMA string slice!\" [Type: str]\n \n // cdb-command: dx string\n // cdb-check:string           : \"IAMA string!\" [Type: [...]::String]\n@@ -113,9 +117,15 @@\n \n // cdb-command: dx some\n // cdb-check:some             : Some [Type: enum$<core::option::Option<i16>>]\n+// cdb-check:    [...] variant$         : Some (0x1) [Type: core::option::Option]\n+// cdb-check:    [...] __0              : 8 [Type: short]\n+\n // cdb-command: dx none\n // cdb-check:none             : None [Type: enum$<core::option::Option<i64>>]\n+// cdb-check:    [...] variant$         : None (0x0) [Type: core::option::Option]\n+\n // cdb-command: dx some_string\n+// NOTE: cdb fails to interpret debug info of Option enums on i686.\n // cdb-check:some_string      [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n \n #![allow(unused_variables)]"}, {"sha": "c0288b6ba80e01ad636f4252cc80072186e220c0", "filename": "src/test/debuginfo/range-types.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Frange-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Frange-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frange-types.rs?ref=0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "patch": "@@ -0,0 +1,47 @@\n+// Testing the display of range types in cdb.\n+\n+// cdb-only\n+// min-cdb-version: 10.0.18317.1001\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command: dx r1,d\n+// cdb-check:r1,d             [Type: core::ops::range::Range<i32>]\n+// cdb-check:    [...] start            : 3 [Type: int]\n+// cdb-check:    [...] end              : 5 [Type: int]\n+\n+// cdb-command: dx r2,d\n+// cdb-check:r2,d             [Type: core::ops::range::RangeFrom<i32>]\n+// cdb-check:    [...] start            : 2 [Type: int]\n+\n+// cdb-command: dx r3,d\n+// cdb-check:r3,d             [Type: core::ops::range::RangeInclusive<i32>]\n+// cdb-check:    [...] start            : 1 [Type: int]\n+// cdb-check:    [...] end              : 4 [Type: int]\n+// cdb-check:    [...] exhausted        : false [Type: bool]\n+\n+// cdb-command: dx r4,d\n+// cdb-check:r4,d             [Type: core::ops::range::RangeToInclusive<i32>]\n+// cdb-check:    [...] end              : 3 [Type: int]\n+\n+// cdb-command: dx r5,d\n+// cdb-check:r5,d             [Type: core::ops::range::RangeFull]\n+\n+#[allow(unused_variables)]\n+\n+use std::ops::{Range, RangeFrom, RangeFull, RangeInclusive, RangeToInclusive};\n+\n+fn main()\n+{\n+    let r1 = Range{start: 3, end: 5};\n+    let r2 = RangeFrom{start: 2};\n+    let r3 = RangeInclusive::new(1, 4);\n+    let r4 = RangeToInclusive{end: 3};\n+    let r5 = RangeFull{};\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}, {"sha": "9f1e856ab42ed7f348df2cd2d1f67f248c83ac41", "filename": "src/test/debuginfo/rc_arc.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frc_arc.rs?ref=0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "patch": "@@ -1,7 +1,9 @@\n-// ignore-windows pretty-printers are not loaded\n+// pretty-printers are not loaded\n // compile-flags:-g\n+// ignore-tidy-linelength\n \n // min-gdb-version: 8.1\n+// min-cdb-version: 10.0.18317.1001\n \n // === GDB TESTS ==================================================================================\n \n@@ -22,6 +24,29 @@\n // lldb-command:print a\n // lldb-check:[...]$1 = strong=2, weak=1 { data = 42 }\n \n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command:g\n+\n+// cdb-command:dx r,d\n+// cdb-check:r,d              : 42 [Type: alloc::rc::Rc<i32>]\n+\n+// cdb-command:dx r1,d\n+// cdb-check:r1,d             : 42 [Type: alloc::rc::Rc<i32>]\n+\n+// cdb-command:dx w1,d\n+// cdb-check:w1,d             [Type: alloc::rc::Weak<i32>]\n+// cdb-check:    [...] ptr              : [...] [Type: core::ptr::non_null::NonNull<alloc::rc::RcBox<i32>>]\n+\n+// cdb-command:dx a,d\n+// cdb-check:a,d              : 42 [Type: alloc::sync::Arc<i32>]\n+\n+// cdb-command:dx a1,d\n+// cdb-check:a1,d             : 42 [Type: alloc::sync::Arc<i32>]\n+\n+// cdb-command:dx w2,d\n+// cdb-check:w2,d             : 42 [Type: alloc::sync::Weak<i32>]\n+\n use std::rc::Rc;\n use std::sync::Arc;\n "}, {"sha": "18eae7f301fbb843dcd7b60dbda408704d9e057a", "filename": "src/test/debuginfo/result-types.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Fresult-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Fresult-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fresult-types.rs?ref=0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "patch": "@@ -0,0 +1,28 @@\n+// cdb-only\n+// min-cdb-version: 10.0.18317.1001\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command: dx x,d\n+// cdb-check:x,d              : Ok [Type: enum$<core::result::Result<i32, str>>]\n+// cdb-check:    [...] __0              : -3 [Type: int]\n+\n+// cdb-command: dx y\n+// cdb-check:y                : Err [Type: enum$<core::result::Result<i32, str>>]\n+// cdb-check:    [...] __0              : \"Some error message\" [Type: str]\n+\n+fn main()\n+{\n+    let x: Result<i32, &str> = Ok(-3);\n+    assert_eq!(x.is_ok(), true);\n+\n+    let y: Result<i32, &str> = Err(\"Some error message\");\n+    assert_eq!(y.is_ok(), false);\n+\n+    zzz(); // #break.\n+}\n+\n+fn zzz() { () }"}, {"sha": "ac652c8ccf4cc9184e94ff8241257a6239fa46d0", "filename": "src/test/debuginfo/rwlock-read.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs?ref=0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "patch": "@@ -0,0 +1,35 @@\n+// Testing the display of RwLock and RwLockReadGuard in cdb.\n+\n+// cdb-only\n+// min-cdb-version: 10.0.18317.1001\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+//\n+// cdb-command:g\n+//\n+// cdb-command:dx l\n+// cdb-check:l                [Type: std::sync::rwlock::RwLock<i32>]\n+// cdb-check:    [...] poison           [Type: std::sync::poison::Flag]\n+// cdb-check:    [...] data             [Type: core::cell::UnsafeCell<i32>]\n+//\n+// cdb-command:dx r\n+// cdb-check:r                [Type: std::sync::rwlock::RwLockReadGuard<i32>]\n+// cdb-check:    [...] lock             : [...] [Type: std::sync::rwlock::RwLock<i32> *]\n+//\n+// cdb-command:dx r.lock->data,d\n+// cdb-check:r.lock->data,d   [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [...] value            : 0 [Type: int]\n+\n+#[allow(unused_variables)]\n+\n+use std::sync::RwLock;\n+\n+fn main()\n+{\n+    let l = RwLock::new(0);\n+    let r = l.read().unwrap();\n+    zzz(); // #break\n+}\n+\n+fn zzz() {}"}, {"sha": "8decf54c177386d64964872c9901db3c9909f272", "filename": "src/test/debuginfo/rwlock-write.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Frwlock-write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Frwlock-write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frwlock-write.rs?ref=0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "patch": "@@ -0,0 +1,27 @@\n+// Testing the display of RwLockWriteGuard.\n+\n+// cdb-only\n+// min-cdb-version: 10.0.18317.1001\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+//\n+// cdb-command:g\n+//\n+// cdb-command:dx w\n+// cdb-check:w                [Type: std::sync::rwlock::RwLockWriteGuard<i32>]\n+// cdb-check:    [...] lock             : [...] [Type: std::sync::rwlock::RwLock<i32> *]\n+// cdb-check:    [...] poison           [Type: std::sync::poison::Guard]\n+\n+#[allow(unused_variables)]\n+\n+use std::sync::RwLock;\n+\n+fn main()\n+{\n+    let l = RwLock::new(0);\n+    let w = l.write().unwrap();\n+    zzz(); // #break\n+}\n+\n+fn zzz() {}"}, {"sha": "af35ad6af0710f58108628c6db2a41e0328e2a18", "filename": "src/test/debuginfo/thread.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7/src%2Ftest%2Fdebuginfo%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fthread.rs?ref=0d917a6b8e49a8f22d2a46424cc1cbd3b2867bd7", "patch": "@@ -0,0 +1,31 @@\n+// Testing the the display of JoinHandle and Thread in cdb.\n+\n+// cdb-only\n+// min-cdb-version: 10.0.18317.1001\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+//\n+// cdb-command:g\n+//\n+// cdb-command:dx join_handle,d\n+// cdb-check:join_handle,d    [Type: std::thread::JoinHandle<tuple<>>]\n+// cdb-check:    [...] __0              [Type: std::thread::JoinInner<tuple<>>]\n+//\n+// cdb-command:dx t,d\n+// cdb-check:t,d              : [...] [Type: std::thread::Thread *]\n+// cdb-check:    [...] inner            : {...} [Type: alloc::sync::Arc<std::thread::Inner>]\n+\n+use std::thread;\n+\n+#[allow(unused_variables)]\n+fn main()\n+{\n+    let join_handle = thread::spawn(|| {\n+        println!(\"Initialize a thread\");\n+    });\n+    let t = join_handle.thread();\n+    zzz(); // #break\n+}\n+\n+fn zzz() {}"}]}