{"sha": "8e8f6a0372576b35a21d4785b2e4291a13fccf02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOGY2YTAzNzI1NzZiMzVhMjFkNDc4NWIyZTQyOTFhMTNmY2NmMDI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-05-30T04:29:06Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-05-30T04:29:06Z"}, "message": "Implement Show for Bitv{,Set}\n\nCloses #14531", "tree": {"sha": "4fb83d871aae248aaaa49d65681eb0bd5c9947e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb83d871aae248aaaa49d65681eb0bd5c9947e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e8f6a0372576b35a21d4785b2e4291a13fccf02", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8f6a0372576b35a21d4785b2e4291a13fccf02", "html_url": "https://github.com/rust-lang/rust/commit/8e8f6a0372576b35a21d4785b2e4291a13fccf02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e8f6a0372576b35a21d4785b2e4291a13fccf02/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81c022317a67042f6eef9491a12d6bdb10cf6e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c022317a67042f6eef9491a12d6bdb10cf6e46", "html_url": "https://github.com/rust-lang/rust/commit/81c022317a67042f6eef9491a12d6bdb10cf6e46"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "54bc6989d7cf8ef5adff88aeab47a9c9c1d81f87", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8e8f6a0372576b35a21d4785b2e4291a13fccf02/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8f6a0372576b35a21d4785b2e4291a13fccf02/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=8e8f6a0372576b35a21d4785b2e4291a13fccf02", "patch": "@@ -12,11 +12,11 @@\n \n \n use std::cmp;\n+use std::fmt;\n use std::iter::RandomAccessIterator;\n use std::iter::{Enumerate, Repeat, Map, Zip};\n use std::ops;\n use std::slice;\n-use std::string::String;\n use std::uint;\n \n #[deriving(Clone)]\n@@ -526,25 +526,6 @@ impl Bitv {\n         Vec::from_fn(self.nbits, |i| self[i])\n     }\n \n-    /**\n-     * Converts `self` to a string.\n-     *\n-     * The resulting string has the same length as `self`, and each\n-     * character is either '0' or '1'.\n-     */\n-     pub fn to_str(&self) -> String {\n-        let mut rs = String::new();\n-        for i in self.iter() {\n-            if i {\n-                rs.push_char('1');\n-            } else {\n-                rs.push_char('0');\n-            }\n-        };\n-        rs\n-     }\n-\n-\n     /**\n      * Compare a bitvector to a vector of `bool`.\n      *\n@@ -604,6 +585,15 @@ impl ops::Index<uint,bool> for Bitv {\n     }\n }\n \n+impl fmt::Show for Bitv {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        for bit in self.iter() {\n+            try!(write!(fmt, \"{}\", if bit { 1 } else { 0 }));\n+        }\n+        Ok(())\n+    }\n+}\n+\n #[inline]\n fn iterate_bits(base: uint, bits: uint, f: |uint| -> bool) -> bool {\n     if bits == 0 {\n@@ -827,6 +817,21 @@ impl cmp::Eq for BitvSet {\n     fn ne(&self, other: &BitvSet) -> bool { !self.eq(other) }\n }\n \n+impl fmt::Show for BitvSet {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(fmt, r\"\\{\"));\n+        let mut first = true;\n+        for n in self.iter() {\n+            if !first {\n+                try!(write!(fmt, \", \"));\n+            }\n+            try!(write!(fmt, \"{}\", n));\n+            first = false;\n+        }\n+        write!(fmt, r\"\\}\")\n+    }\n+}\n+\n impl Container for BitvSet {\n     #[inline]\n     fn len(&self) -> uint { self.size }\n@@ -1629,6 +1634,16 @@ mod tests {\n         assert!(!v.none());\n     }\n \n+    #[test]\n+    fn test_bitv_set_show() {\n+        let mut s = BitvSet::new();\n+        s.insert(1);\n+        s.insert(10);\n+        s.insert(50);\n+        s.insert(2);\n+        assert_eq!(\"{1, 2, 10, 50}\".to_string(), s.to_str());\n+    }\n+\n     fn rng() -> rand::IsaacRng {\n         let seed = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n         rand::SeedableRng::from_seed(seed)"}]}