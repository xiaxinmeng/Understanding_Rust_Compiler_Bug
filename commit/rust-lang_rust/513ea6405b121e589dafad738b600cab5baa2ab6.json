{"sha": "513ea6405b121e589dafad738b600cab5baa2ab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxM2VhNjQwNWIxMjFlNTg5ZGFmYWQ3MzhiNjAwY2FiNWJhYTJhYjY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-23T17:39:25Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-23T17:39:25Z"}, "message": "add missing visit_consts", "tree": {"sha": "d2a32b6b14d1d3db35f49a8015fc01112fda6b93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a32b6b14d1d3db35f49a8015fc01112fda6b93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/513ea6405b121e589dafad738b600cab5baa2ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/513ea6405b121e589dafad738b600cab5baa2ab6", "html_url": "https://github.com/rust-lang/rust/commit/513ea6405b121e589dafad738b600cab5baa2ab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/513ea6405b121e589dafad738b600cab5baa2ab6/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff785011be6625e32afceee3a08e5cff7470feb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff785011be6625e32afceee3a08e5cff7470feb", "html_url": "https://github.com/rust-lang/rust/commit/8ff785011be6625e32afceee3a08e5cff7470feb"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "b1fb02a67b3ff3a8447747960d2c2224990524e7", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/513ea6405b121e589dafad738b600cab5baa2ab6/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513ea6405b121e589dafad738b600cab5baa2ab6/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=513ea6405b121e589dafad738b600cab5baa2ab6", "patch": "@@ -273,6 +273,20 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n         t.super_visit_with(self)\n     }\n \n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+        match c.val {\n+            ty::ConstKind::Bound(debruijn, bound_var) if debruijn == self.binder_index => {\n+                self.types.insert(\n+                    bound_var.as_u32(),\n+                    Symbol::intern(&format!(\"^{}\", bound_var.as_u32())),\n+                );\n+            }\n+            _ => (),\n+        }\n+\n+        c.super_visit_with(self)\n+    }\n+\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n         match r {\n             ty::ReLateBound(index, br) if *index == self.binder_index => match br {"}, {"sha": "3f4f2407f1e6e2fc9e9b9ebd160f2d04b78035a3", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/513ea6405b121e589dafad738b600cab5baa2ab6/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513ea6405b121e589dafad738b600cab5baa2ab6/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=513ea6405b121e589dafad738b600cab5baa2ab6", "patch": "@@ -978,17 +978,27 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // ignore the inputs to a projection, as they may not appear\n         // in the normalized form\n         if self.just_constrained {\n-            match t.kind {\n-                ty::Projection(..) | ty::Opaque(..) => {\n-                    return false;\n-                }\n-                _ => {}\n+            if let ty::Projection(..) | ty::Opaque(..) = t.kind {\n+                return false;\n             }\n         }\n \n         t.super_visit_with(self)\n     }\n \n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+        // if we are only looking for \"constrained\" region, we have to\n+        // ignore the inputs of an unevaluated const, as they may not appear\n+        // in the normalized form\n+        if self.just_constrained {\n+            if let ty::ConstKind::Unevaluated(..) = c.val {\n+                return false;\n+            }\n+        }\n+\n+        c.super_visit_with(self)\n+    }\n+\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n         if let ty::ReLateBound(debruijn, br) = *r {\n             if debruijn == self.current_index {"}]}