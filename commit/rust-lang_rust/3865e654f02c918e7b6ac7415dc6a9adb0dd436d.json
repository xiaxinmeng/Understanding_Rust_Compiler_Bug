{"sha": "3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "node_id": "C_kwDOAAsO6NoAKDM4NjVlNjU0ZjAyYzkxOGU3YjZhYzc0MTVkYzZhOWFkYjBkZDQzNmQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-20T06:48:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-20T06:48:27Z"}, "message": "Merge from rustc", "tree": {"sha": "ce7ee1fcfd2755d30bd568d0bf721d20a3f31346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce7ee1fcfd2755d30bd568d0bf721d20a3f31346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "html_url": "https://github.com/rust-lang/rust/commit/3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aada2d16892ed411d9f6d22b3b9dcfcf47977647", "url": "https://api.github.com/repos/rust-lang/rust/commits/aada2d16892ed411d9f6d22b3b9dcfcf47977647", "html_url": "https://github.com/rust-lang/rust/commit/aada2d16892ed411d9f6d22b3b9dcfcf47977647"}, {"sha": "7477c1f4f7d6bef037d523099b240d22aa1b63a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7477c1f4f7d6bef037d523099b240d22aa1b63a0", "html_url": "https://github.com/rust-lang/rust/commit/7477c1f4f7d6bef037d523099b240d22aa1b63a0"}], "stats": {"total": 8768, "additions": 6814, "deletions": 1954}, "files": [{"sha": "87a4124e7db0174d70b27a35d209d59042d5cdbe", "filename": "Cargo.lock", "status": "modified", "additions": 195, "deletions": 10, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -211,7 +211,7 @@ checksum = \"ba3569f383e8f1598449f1a423e72e99569137b47740b1da11ef19af3d5c3223\"\n dependencies = [\n  \"lazy_static\",\n  \"memchr\",\n- \"regex-automata\",\n+ \"regex-automata 0.1.10\",\n ]\n \n [[package]]\n@@ -222,7 +222,7 @@ checksum = \"fca0852af221f458706eb0725c03e4ed6c46af9ac98e6a689d5e634215d594dd\"\n dependencies = [\n  \"memchr\",\n  \"once_cell\",\n- \"regex-automata\",\n+ \"regex-automata 0.1.10\",\n  \"serde\",\n ]\n \n@@ -307,6 +307,7 @@ dependencies = [\n  \"glob\",\n  \"hex 0.4.2\",\n  \"home\",\n+ \"http-auth\",\n  \"humantime 2.0.1\",\n  \"ignore\",\n  \"im-rc\",\n@@ -349,11 +350,11 @@ dependencies = [\n \n [[package]]\n name = \"cargo-credential\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n \n [[package]]\n name = \"cargo-credential-1password\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n dependencies = [\n  \"cargo-credential\",\n  \"serde\",\n@@ -362,15 +363,15 @@ dependencies = [\n \n [[package]]\n name = \"cargo-credential-macos-keychain\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n dependencies = [\n  \"cargo-credential\",\n  \"security-framework\",\n ]\n \n [[package]]\n name = \"cargo-credential-wincred\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n dependencies = [\n  \"cargo-credential\",\n  \"winapi\",\n@@ -1692,6 +1693,15 @@ dependencies = [\n  \"syn\",\n ]\n \n+[[package]]\n+name = \"http-auth\"\n+version = \"0.1.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c0b40b39d66c28829a0cf4d09f7e139ff8201f7500a5083732848ed3b4b4d850\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"humantime\"\n version = \"1.3.0\"\n@@ -1707,6 +1717,73 @@ version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3c1ad908cc71012b7bea4d0c53ba96a8cba9962f048fa68d143376143d863b7a\"\n \n+[[package]]\n+name = \"icu_list\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c40218275f081c4493f190357c5395647b06734c2dc3dcb41cc099a0f60168b1\"\n+dependencies = [\n+ \"displaydoc\",\n+ \"icu_locid\",\n+ \"icu_provider\",\n+ \"regex-automata 0.2.0\",\n+ \"writeable\",\n+ \"zerovec\",\n+]\n+\n+[[package]]\n+name = \"icu_locid\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"34b3de5d99a0e275fe6193b9586dbf37364daebc0d39c89b5cf8376a53b789e8\"\n+dependencies = [\n+ \"displaydoc\",\n+ \"litemap\",\n+ \"tinystr\",\n+ \"writeable\",\n+ \"zerovec\",\n+]\n+\n+[[package]]\n+name = \"icu_provider\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2f911086e3c521a8a824d4f8bfd87769645ced2f07ff913b521c0d793be07100\"\n+dependencies = [\n+ \"displaydoc\",\n+ \"icu_locid\",\n+ \"icu_provider_macros\",\n+ \"stable_deref_trait\",\n+ \"writeable\",\n+ \"yoke\",\n+ \"zerofrom\",\n+ \"zerovec\",\n+]\n+\n+[[package]]\n+name = \"icu_provider_adapters\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"980c71d8a91b246ebbb97847178a4b816eea39d1d550c70ee566384555bb6545\"\n+dependencies = [\n+ \"icu_locid\",\n+ \"icu_provider\",\n+ \"tinystr\",\n+ \"yoke\",\n+ \"zerovec\",\n+]\n+\n+[[package]]\n+name = \"icu_provider_macros\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"38cf6f5b65cf81f0b4298da647101acbfe6ae0e25263f92bd7a22597e9d6d606\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"idna\"\n version = \"0.2.0\"\n@@ -2034,6 +2111,12 @@ dependencies = [\n  \"walkdir\",\n ]\n \n+[[package]]\n+name = \"litemap\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f34a3f4798fac63fb48cf277eefa38f94d3443baff555bb98e4f56bc9092368e\"\n+\n [[package]]\n name = \"lld-wrapper\"\n version = \"0.1.0\"\n@@ -2100,7 +2183,7 @@ version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\n dependencies = [\n- \"regex-automata\",\n+ \"regex-automata 0.1.10\",\n ]\n \n [[package]]\n@@ -2927,6 +3010,15 @@ dependencies = [\n  \"regex-syntax\",\n ]\n \n+[[package]]\n+name = \"regex-automata\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e9368763f5a9b804326f3af749e16f9abf378d227bcdee7634b13d8f17793782\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"regex-syntax\"\n version = \"0.6.26\"\n@@ -3202,6 +3294,18 @@ dependencies = [\n  \"rustc_span\",\n ]\n \n+[[package]]\n+name = \"rustc_baked_icu_data\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"icu_list\",\n+ \"icu_locid\",\n+ \"icu_provider\",\n+ \"icu_provider_adapters\",\n+ \"litemap\",\n+ \"zerovec\",\n+]\n+\n [[package]]\n name = \"rustc_borrowck\"\n version = \"0.0.0\"\n@@ -3422,21 +3526,25 @@ version = \"0.0.0\"\n dependencies = [\n  \"fluent-bundle\",\n  \"fluent-syntax\",\n+ \"icu_list\",\n+ \"icu_locid\",\n+ \"icu_provider_adapters\",\n  \"intl-memoizer\",\n+ \"rustc_baked_icu_data\",\n  \"rustc_data_structures\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_span\",\n  \"tracing\",\n  \"unic-langid\",\n+ \"writeable\",\n ]\n \n [[package]]\n name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n  \"annotate-snippets\",\n- \"atty\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_data_structures\",\n@@ -3476,6 +3584,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n \n@@ -3734,7 +3843,6 @@ dependencies = [\n name = \"rustc_log\"\n version = \"0.0.0\"\n dependencies = [\n- \"atty\",\n  \"rustc_span\",\n  \"tracing\",\n  \"tracing-subscriber\",\n@@ -3916,6 +4024,7 @@ dependencies = [\n  \"rustc_macros\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"thin-vec\",\n  \"tracing\",\n  \"unicode-normalization\",\n  \"unicode-width\",\n@@ -4045,12 +4154,14 @@ dependencies = [\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_macros\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_query_system\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n \n@@ -4286,7 +4397,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"arrayvec\",\n  \"askama\",\n- \"atty\",\n  \"expect-test\",\n  \"itertools\",\n  \"minifier\",\n@@ -4931,6 +5041,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f8aeafdfd935e4a7fe16a91ab711fa52d54df84f9c8f7ca5837a9d1d902ef4c2\"\n dependencies = [\n  \"displaydoc\",\n+ \"zerovec\",\n ]\n \n [[package]]\n@@ -5543,6 +5654,12 @@ version = \"0.42.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f40009d85759725a34da6d89a94e63d7bdc50a862acf0dbc7c8e488f1edcb6f5\"\n \n+[[package]]\n+name = \"writeable\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f8e6ab4f5da1b24daf2c590cfac801bacb27b15b4f050e84eb60149ea726f06b\"\n+\n [[package]]\n name = \"xattr\"\n version = \"0.2.2\"\n@@ -5595,3 +5712,71 @@ checksum = \"fe5c30ade05e61656247b2e334a031dfd0cc466fadef865bdcdea8d537951bf1\"\n dependencies = [\n  \"winapi\",\n ]\n+\n+[[package]]\n+name = \"yoke\"\n+version = \"0.6.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1fe1d55ca72c32d573bfbd5cb2f0ca65a497854c44762957a6d3da96041a5184\"\n+dependencies = [\n+ \"serde\",\n+ \"stable_deref_trait\",\n+ \"yoke-derive\",\n+ \"zerofrom\",\n+]\n+\n+[[package]]\n+name = \"yoke-derive\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1346e4cd025ae818b88566eac7eb65ab33a994ea55f355c86889af2e7e56b14e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"synstructure\",\n+]\n+\n+[[package]]\n+name = \"zerofrom\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"79e9355fccf72b04b7deaa99ce7a0f6630530acf34045391b74460fcd714de54\"\n+dependencies = [\n+ \"zerofrom-derive\",\n+]\n+\n+[[package]]\n+name = \"zerofrom-derive\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2e8aa86add9ddbd2409c1ed01e033cd457d79b1b1229b64922c25095c595e829\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"synstructure\",\n+]\n+\n+[[package]]\n+name = \"zerovec\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b9d919a74c17749ccb17beaf6405562e413cd94e98ba52ca1e64bbe7eefbd8b8\"\n+dependencies = [\n+ \"yoke\",\n+ \"zerofrom\",\n+ \"zerovec-derive\",\n+]\n+\n+[[package]]\n+name = \"zerovec-derive\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"490e5f878c2856225e884c35927e7ea6db3c24cdb7229b72542c7526ad7ed49e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"synstructure\",\n+]"}, {"sha": "e6b72bd58c540f50d14a77a0ac3e6ae9ee8c44bc", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 48, "deletions": 33, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -36,7 +36,7 @@ use rustc_span::{Span, DUMMY_SP};\n use std::convert::TryFrom;\n use std::fmt;\n use std::mem;\n-use thin_vec::ThinVec;\n+use thin_vec::{thin_vec, ThinVec};\n \n /// A \"Label\" is an identifier of some point in sources,\n /// e.g. in the following code:\n@@ -90,7 +90,7 @@ pub struct Path {\n     pub span: Span,\n     /// The segments in the path: the things separated by `::`.\n     /// Global paths begin with `kw::PathRoot`.\n-    pub segments: Vec<PathSegment>,\n+    pub segments: ThinVec<PathSegment>,\n     pub tokens: Option<LazyAttrTokenStream>,\n }\n \n@@ -114,7 +114,7 @@ impl Path {\n     // Convert a span and an identifier to the corresponding\n     // one-segment path.\n     pub fn from_ident(ident: Ident) -> Path {\n-        Path { segments: vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }\n+        Path { segments: thin_vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }\n     }\n \n     pub fn is_global(&self) -> bool {\n@@ -718,10 +718,10 @@ pub enum PatKind {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(Option<QSelf>, Path, Vec<PatField>, /* recovered */ bool),\n+    Struct(Option<P<QSelf>>, Path, Vec<PatField>, /* recovered */ bool),\n \n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n-    TupleStruct(Option<QSelf>, Path, Vec<P<Pat>>),\n+    TupleStruct(Option<P<QSelf>>, Path, Vec<P<Pat>>),\n \n     /// An or-pattern `A | B | C`.\n     /// Invariant: `pats.len() >= 2`.\n@@ -731,7 +731,7 @@ pub enum PatKind {\n     /// Unqualified path patterns `A::B::C` can legally refer to variants, structs, constants\n     /// or associated constants. Qualified path patterns `<A>::B::C`/`<A as Trait>::B::C` can\n     /// only legally refer to associated constants.\n-    Path(Option<QSelf>, Path),\n+    Path(Option<P<QSelf>>, Path),\n \n     /// A tuple pattern (`(a, b)`).\n     Tuple(Vec<P<Pat>>),\n@@ -1272,6 +1272,18 @@ impl Expr {\n     }\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct Closure {\n+    pub binder: ClosureBinder,\n+    pub capture_clause: CaptureBy,\n+    pub asyncness: Async,\n+    pub movability: Movability,\n+    pub fn_decl: P<FnDecl>,\n+    pub body: P<Expr>,\n+    /// The span of the argument block `|...|`.\n+    pub fn_decl_span: Span,\n+}\n+\n /// Limit types of a range (inclusive or exclusive)\n #[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug)]\n pub enum RangeLimits {\n@@ -1281,6 +1293,20 @@ pub enum RangeLimits {\n     Closed,\n }\n \n+/// A method call (e.g. `x.foo::<Bar, Baz>(a, b, c)`).\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct MethodCall {\n+    /// The method name and its generic arguments, e.g. `foo::<Bar, Baz>`.\n+    pub seg: PathSegment,\n+    /// The receiver, e.g. `x`.\n+    pub receiver: P<Expr>,\n+    /// The arguments, e.g. `a, b, c`.\n+    pub args: Vec<P<Expr>>,\n+    /// The span of the function, without the dot and receiver e.g. `foo::<Bar,\n+    /// Baz>(a, b, c)`.\n+    pub span: Span,\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum StructRest {\n     /// `..x`.\n@@ -1293,7 +1319,7 @@ pub enum StructRest {\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct StructExpr {\n-    pub qself: Option<QSelf>,\n+    pub qself: Option<P<QSelf>>,\n     pub path: Path,\n     pub fields: Vec<ExprField>,\n     pub rest: StructRest,\n@@ -1314,17 +1340,8 @@ pub enum ExprKind {\n     /// This also represents calling the constructor of\n     /// tuple-like ADTs such as tuple structs and enum variants.\n     Call(P<Expr>, Vec<P<Expr>>),\n-    /// A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)\n-    ///\n-    /// The `PathSegment` represents the method name and its generic arguments\n-    /// (within the angle brackets).\n-    /// The standalone `Expr` is the receiver expression.\n-    /// The vector of `Expr` is the arguments.\n-    /// `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n-    /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, x, [a, b, c, d])`.\n-    /// This `Span` is the span of the function, without the dot and receiver\n-    /// (e.g. `foo(a, b)` in `x.foo(a, b)`\n-    MethodCall(PathSegment, P<Expr>, Vec<P<Expr>>, Span),\n+    /// A method call (e.g. `x.foo::<Bar, Baz>(a, b, c)`).\n+    MethodCall(Box<MethodCall>),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(Vec<P<Expr>>),\n     /// A binary operation (e.g., `a + b`, `a * b`).\n@@ -1363,9 +1380,7 @@ pub enum ExprKind {\n     /// A `match` block.\n     Match(P<Expr>, Vec<Arm>),\n     /// A closure (e.g., `move |a, b, c| a + b + c`).\n-    ///\n-    /// The final span is the span of the argument block `|...|`.\n-    Closure(ClosureBinder, CaptureBy, Async, Movability, P<FnDecl>, P<Expr>, Span),\n+    Closure(Box<Closure>),\n     /// A block (`'label: { ... }`).\n     Block(P<Block>, Option<Label>),\n     /// An async block (`async move { ... }`).\n@@ -1403,7 +1418,7 @@ pub enum ExprKind {\n     /// parameters (e.g., `foo::bar::<baz>`).\n     ///\n     /// Optionally \"qualified\" (e.g., `<Vec<T> as SomeTrait>::SomeType`).\n-    Path(Option<QSelf>, Path),\n+    Path(Option<P<QSelf>>, Path),\n \n     /// A referencing operation (`&a`, `&mut a`, `&raw const a` or `&raw mut a`).\n     AddrOf(BorrowKind, Mutability, P<Expr>),\n@@ -2006,7 +2021,7 @@ pub enum TyKind {\n     /// \"qualified\", e.g., `<Vec<T> as SomeTrait>::SomeType`.\n     ///\n     /// Type parameters are stored in the `Path` itself.\n-    Path(Option<QSelf>, Path),\n+    Path(Option<P<QSelf>>, Path),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n     TraitObject(GenericBounds, TraitObjectSyntax),\n@@ -2138,7 +2153,7 @@ impl InlineAsmTemplatePiece {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct InlineAsmSym {\n     pub id: NodeId,\n-    pub qself: Option<QSelf>,\n+    pub qself: Option<P<QSelf>>,\n     pub path: Path,\n }\n \n@@ -3031,28 +3046,28 @@ mod size_asserts {\n     static_assert_size!(AssocItemKind, 32);\n     static_assert_size!(Attribute, 32);\n     static_assert_size!(Block, 48);\n-    static_assert_size!(Expr, 104);\n-    static_assert_size!(ExprKind, 72);\n+    static_assert_size!(Expr, 72);\n+    static_assert_size!(ExprKind, 40);\n     static_assert_size!(Fn, 184);\n     static_assert_size!(ForeignItem, 96);\n     static_assert_size!(ForeignItemKind, 24);\n     static_assert_size!(GenericArg, 24);\n-    static_assert_size!(GenericBound, 88);\n+    static_assert_size!(GenericBound, 72);\n     static_assert_size!(Generics, 72);\n-    static_assert_size!(Impl, 200);\n+    static_assert_size!(Impl, 184);\n     static_assert_size!(Item, 184);\n     static_assert_size!(ItemKind, 112);\n     static_assert_size!(Lit, 48);\n     static_assert_size!(LitKind, 24);\n     static_assert_size!(Local, 72);\n     static_assert_size!(Param, 40);\n-    static_assert_size!(Pat, 120);\n-    static_assert_size!(Path, 40);\n+    static_assert_size!(Pat, 88);\n+    static_assert_size!(Path, 24);\n     static_assert_size!(PathSegment, 24);\n-    static_assert_size!(PatKind, 96);\n+    static_assert_size!(PatKind, 64);\n     static_assert_size!(Stmt, 32);\n     static_assert_size!(StmtKind, 16);\n-    static_assert_size!(Ty, 96);\n-    static_assert_size!(TyKind, 72);\n+    static_assert_size!(Ty, 64);\n+    static_assert_size!(TyKind, 40);\n     // tidy-alphabetical-end\n }"}, {"sha": "09b08d5059c1c30e936ad6c2078abe2ede39449c", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -10,19 +10,18 @@ use crate::token::{self, CommentKind, Delimiter, Token};\n use crate::tokenstream::{DelimSpan, Spacing, TokenTree};\n use crate::tokenstream::{LazyAttrTokenStream, TokenStream};\n use crate::util::comments;\n-\n use rustc_data_structures::sync::WorkerLocal;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::source_map::BytePos;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n-\n use std::cell::Cell;\n use std::iter;\n #[cfg(debug_assertions)]\n use std::ops::BitXor;\n #[cfg(debug_assertions)]\n use std::sync::atomic::{AtomicU32, Ordering};\n+use thin_vec::thin_vec;\n \n pub struct MarkedAttrs(GrowableBitSet<AttrId>);\n \n@@ -471,12 +470,12 @@ impl MetaItem {\n                         tokens.peek()\n                     {\n                         tokens.next();\n-                        vec![PathSegment::from_ident(Ident::new(name, span))]\n+                        thin_vec![PathSegment::from_ident(Ident::new(name, span))]\n                     } else {\n                         break 'arm Path::from_ident(Ident::new(name, span));\n                     }\n                 } else {\n-                    vec![PathSegment::path_root(span)]\n+                    thin_vec![PathSegment::path_root(span)]\n                 };\n                 loop {\n                     if let Some(TokenTree::Token(Token { kind: token::Ident(name, _), span }, _)) ="}, {"sha": "ece4cb5556b47c78c8b86c28fa7eebf7dbb8722e", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -194,7 +194,7 @@ pub trait MutVisitor: Sized {\n         noop_visit_path(p, self);\n     }\n \n-    fn visit_qself(&mut self, qs: &mut Option<QSelf>) {\n+    fn visit_qself(&mut self, qs: &mut Option<P<QSelf>>) {\n         noop_visit_qself(qs, self);\n     }\n \n@@ -529,8 +529,9 @@ pub fn noop_visit_path<T: MutVisitor>(Path { segments, span, tokens }: &mut Path\n     visit_lazy_tts(tokens, vis);\n }\n \n-pub fn noop_visit_qself<T: MutVisitor>(qself: &mut Option<QSelf>, vis: &mut T) {\n-    visit_opt(qself, |QSelf { ty, path_span, position: _ }| {\n+pub fn noop_visit_qself<T: MutVisitor>(qself: &mut Option<P<QSelf>>, vis: &mut T) {\n+    visit_opt(qself, |qself| {\n+        let QSelf { ty, path_span, position: _ } = &mut **qself;\n         vis.visit_ty(ty);\n         vis.visit_span(path_span);\n     })\n@@ -1303,12 +1304,17 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_expr(f);\n             visit_exprs(args, vis);\n         }\n-        ExprKind::MethodCall(PathSegment { ident, id, args }, receiver, exprs, span) => {\n+        ExprKind::MethodCall(box MethodCall {\n+            seg: PathSegment { ident, id, args: seg_args },\n+            receiver,\n+            args: call_args,\n+            span,\n+        }) => {\n             vis.visit_ident(ident);\n             vis.visit_id(id);\n-            visit_opt(args, |args| vis.visit_generic_args(args));\n+            visit_opt(seg_args, |args| vis.visit_generic_args(args));\n             vis.visit_method_receiver_expr(receiver);\n-            visit_exprs(exprs, vis);\n+            visit_exprs(call_args, vis);\n             vis.visit_span(span);\n         }\n         ExprKind::Binary(_binop, lhs, rhs) => {\n@@ -1353,12 +1359,20 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_expr(expr);\n             arms.flat_map_in_place(|arm| vis.flat_map_arm(arm));\n         }\n-        ExprKind::Closure(binder, _capture_by, asyncness, _movability, decl, body, span) => {\n+        ExprKind::Closure(box Closure {\n+            binder,\n+            capture_clause: _,\n+            asyncness,\n+            movability: _,\n+            fn_decl,\n+            body,\n+            fn_decl_span,\n+        }) => {\n             vis.visit_closure_binder(binder);\n             vis.visit_asyncness(asyncness);\n-            vis.visit_fn_decl(decl);\n+            vis.visit_fn_decl(fn_decl);\n             vis.visit_expr(body);\n-            vis.visit_span(span);\n+            vis.visit_span(fn_decl_span);\n         }\n         ExprKind::Block(blk, label) => {\n             vis.visit_block(blk);"}, {"sha": "fbb4cf43a954ccc08814d63fe49b2ec8d2063a10", "filename": "compiler/rustc_ast/src/util/classify.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -36,14 +36,16 @@ pub fn expr_trailing_brace(mut expr: &ast::Expr) -> Option<&ast::Expr> {\n             | Binary(_, _, e)\n             | Box(e)\n             | Break(_, Some(e))\n-            | Closure(.., e, _)\n             | Let(_, e, _)\n             | Range(_, Some(e), _)\n             | Ret(Some(e))\n             | Unary(_, e)\n             | Yield(Some(e)) => {\n                 expr = e;\n             }\n+            Closure(closure) => {\n+                expr = &closure.body;\n+            }\n             Async(..) | Block(..) | ForLoop(..) | If(..) | Loop(..) | Match(..) | Struct(..)\n             | TryBlock(..) | While(..) => break Some(expr),\n             _ => break None,"}, {"sha": "30c55dffb180382b476378d48b4d07c80312bec6", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -396,7 +396,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             contains_exterior_struct_lit(&x)\n         }\n \n-        ast::ExprKind::MethodCall(_, ref receiver, _, _) => {\n+        ast::ExprKind::MethodCall(box ast::MethodCall { ref receiver, .. }) => {\n             // X { y: 1 }.bar(...)\n             contains_exterior_struct_lit(&receiver)\n         }"}, {"sha": "ad5a2116c424a485da6b3deeed939f6631bdbe6f", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -798,10 +798,10 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref segment, ref receiver, ref arguments, _span) => {\n-            visitor.visit_path_segment(segment);\n+        ExprKind::MethodCall(box MethodCall { ref seg, ref receiver, ref args, span: _ }) => {\n+            visitor.visit_path_segment(seg);\n             visitor.visit_expr(receiver);\n-            walk_list!(visitor, visit_expr, arguments);\n+            walk_list!(visitor, visit_expr, args);\n         }\n         ExprKind::Binary(_, ref left_expression, ref right_expression) => {\n             visitor.visit_expr(left_expression);\n@@ -842,8 +842,16 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }\n-        ExprKind::Closure(ref binder, _, _, _, ref decl, ref body, _decl_span) => {\n-            visitor.visit_fn(FnKind::Closure(binder, decl, body), expression.span, expression.id)\n+        ExprKind::Closure(box Closure {\n+            ref binder,\n+            capture_clause: _,\n+            asyncness: _,\n+            movability: _,\n+            ref fn_decl,\n+            ref body,\n+            fn_decl_span: _,\n+        }) => {\n+            visitor.visit_fn(FnKind::Closure(binder, fn_decl, body), expression.span, expression.id)\n         }\n         ExprKind::Block(ref block, ref opt_label) => {\n             walk_list!(visitor, visit_label, opt_label);"}, {"sha": "eaa5a38388afcc214214b4b4414ef1327c8dcaeb", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -61,7 +61,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         hir::ExprKind::Call(f, self.lower_exprs(args))\n                     }\n                 }\n-                ExprKind::MethodCall(ref seg, ref receiver, ref args, span) => {\n+                ExprKind::MethodCall(box MethodCall { ref seg, ref receiver, ref args, span }) => {\n                     let hir_seg = self.arena.alloc(self.lower_path_segment(\n                         e.span,\n                         seg,\n@@ -172,22 +172,22 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     };\n                     self.lower_expr_await(dot_await_span, expr)\n                 }\n-                ExprKind::Closure(\n+                ExprKind::Closure(box Closure {\n                     ref binder,\n                     capture_clause,\n                     asyncness,\n                     movability,\n-                    ref decl,\n+                    ref fn_decl,\n                     ref body,\n                     fn_decl_span,\n-                ) => {\n+                }) => {\n                     if let Async::Yes { closure_id, .. } = asyncness {\n                         self.lower_expr_async_closure(\n                             binder,\n                             capture_clause,\n                             e.id,\n                             closure_id,\n-                            decl,\n+                            fn_decl,\n                             body,\n                             fn_decl_span,\n                         )\n@@ -197,7 +197,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             capture_clause,\n                             e.id,\n                             movability,\n-                            decl,\n+                            fn_decl,\n                             body,\n                             fn_decl_span,\n                         )\n@@ -1105,7 +1105,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn extract_tuple_struct_path<'a>(\n         &mut self,\n         expr: &'a Expr,\n-    ) -> Option<(&'a Option<QSelf>, &'a Path)> {\n+    ) -> Option<(&'a Option<AstP<QSelf>>, &'a Path)> {\n         if let ExprKind::Path(qself, path) = &expr.kind {\n             // Does the path resolve to something disallowed in a tuple struct/variant pattern?\n             if let Some(partial_res) = self.resolver.get_partial_res(expr.id) {\n@@ -1125,7 +1125,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn extract_unit_struct_path<'a>(\n         &mut self,\n         expr: &'a Expr,\n-    ) -> Option<(&'a Option<QSelf>, &'a Path)> {\n+    ) -> Option<(&'a Option<AstP<QSelf>>, &'a Path)> {\n         if let ExprKind::Path(qself, path) = &expr.kind {\n             // Does the path resolve to something disallowed in a unit struct/variant pattern?\n             if let Some(partial_res) = self.resolver.get_partial_res(expr.id) {"}, {"sha": "05022c1a14c704eb34ab1b8e167df8481a340373", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -19,8 +19,8 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, Symbol};\n use rustc_target::spec::abi;\n use smallvec::{smallvec, SmallVec};\n-\n use std::iter;\n+use thin_vec::ThinVec;\n \n pub(super) struct ItemLowerer<'a, 'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n@@ -242,7 +242,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::ExternCrate(orig_name) => hir::ItemKind::ExternCrate(orig_name),\n             ItemKind::Use(ref use_tree) => {\n                 // Start with an empty prefix.\n-                let prefix = Path { segments: vec![], span: use_tree.span, tokens: None };\n+                let prefix = Path { segments: ThinVec::new(), span: use_tree.span, tokens: None };\n \n                 self.lower_use_tree(use_tree, &prefix, id, vis_span, ident, attrs)\n             }"}, {"sha": "e1703b0b02b0506bd1fe9358b7a88f041c2196de", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1208,7 +1208,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_path_ty(\n         &mut self,\n         t: &Ty,\n-        qself: &Option<QSelf>,\n+        qself: &Option<ptr::P<QSelf>>,\n         path: &Path,\n         param_mode: ParamMode,\n         itctx: &ImplTraitContext,"}, {"sha": "83d459d899b5cff3e938b14296ce51263e3e18c0", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -19,7 +19,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     pub(crate) fn lower_qpath(\n         &mut self,\n         id: NodeId,\n-        qself: &Option<QSelf>,\n+        qself: &Option<ptr::P<QSelf>>,\n         p: &Path,\n         param_mode: ParamMode,\n         itctx: &ImplTraitContext,"}, {"sha": "1da40d2302e125b5dcfc0baa1979370f7dad4f52", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -121,7 +121,7 @@ impl<'a> State<'a> {\n \n     fn print_expr_struct(\n         &mut self,\n-        qself: &Option<ast::QSelf>,\n+        qself: &Option<P<ast::QSelf>>,\n         path: &ast::Path,\n         fields: &[ast::ExprField],\n         rest: &ast::StructRest,\n@@ -307,8 +307,13 @@ impl<'a> State<'a> {\n             ast::ExprKind::Call(ref func, ref args) => {\n                 self.print_expr_call(func, &args);\n             }\n-            ast::ExprKind::MethodCall(ref segment, ref receiver, ref args, _) => {\n-                self.print_expr_method_call(segment, &receiver, &args);\n+            ast::ExprKind::MethodCall(box ast::MethodCall {\n+                ref seg,\n+                ref receiver,\n+                ref args,\n+                ..\n+            }) => {\n+                self.print_expr_method_call(seg, &receiver, &args);\n             }\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => {\n                 self.print_expr_binary(op, lhs, rhs);\n@@ -396,21 +401,21 @@ impl<'a> State<'a> {\n                 let empty = attrs.is_empty() && arms.is_empty();\n                 self.bclose(expr.span, empty);\n             }\n-            ast::ExprKind::Closure(\n+            ast::ExprKind::Closure(box ast::Closure {\n                 ref binder,\n                 capture_clause,\n                 asyncness,\n                 movability,\n-                ref decl,\n+                ref fn_decl,\n                 ref body,\n-                _,\n-            ) => {\n+                fn_decl_span: _,\n+            }) => {\n                 self.print_closure_binder(binder);\n                 self.print_movability(movability);\n                 self.print_asyncness(asyncness);\n                 self.print_capture_clause(capture_clause);\n \n-                self.print_fn_params_and_ret(decl, true);\n+                self.print_fn_params_and_ret(fn_decl, true);\n                 self.space();\n                 self.print_expr(body);\n                 self.end(); // need to close a box"}, {"sha": "3477306dbfc95f2ea9a9857a60933d0040d36191", "filename": "compiler/rustc_baked_icu_data/Cargo.toml", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2FCargo.toml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,15 @@\n+[package]\n+name = \"rustc_baked_icu_data\"\n+version = \"0.0.0\"\n+edition = \"2021\"\n+\n+[dependencies]\n+icu_list = \"1.0.0\"\n+icu_locid = \"1.0.0\"\n+icu_provider = \"1.0.1\"\n+icu_provider_adapters = \"1.0.0\"\n+litemap = \"0.6.0\"\n+zerovec = \"0.9.0\"\n+\n+[features]\n+rustc_use_parallel_compiler = ['icu_provider/sync']"}, {"sha": "e8e99be93f2c5f6ceb2a5e5059c77c3f82da5214", "filename": "compiler/rustc_baked_icu_data/src/data/any.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fany.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,42 @@\n+// @generated\n+impl AnyProvider for BakedDataProvider {\n+    fn load_any(&self, key: DataKey, req: DataRequest) -> Result<AnyResponse, DataError> {\n+        const ANDLISTV1MARKER: ::icu_provider::DataKeyHash =\n+            ::icu_list::provider::AndListV1Marker::KEY.hashed();\n+        const COLLATIONFALLBACKSUPPLEMENTV1MARKER: ::icu_provider::DataKeyHash =\n+            ::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker::KEY\n+                .hashed();\n+        const LOCALEFALLBACKLIKELYSUBTAGSV1MARKER: ::icu_provider::DataKeyHash =\n+            ::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker::KEY\n+                .hashed();\n+        const LOCALEFALLBACKPARENTSV1MARKER: ::icu_provider::DataKeyHash =\n+            ::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker::KEY\n+                .hashed();\n+        #[allow(clippy::match_single_binding)]\n+        match key.hashed() {\n+            ANDLISTV1MARKER => list::and_v1::DATA\n+                .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())\n+                .copied()\n+                .map(AnyPayload::from_static_ref)\n+                .ok_or(DataErrorKind::MissingLocale),\n+            COLLATIONFALLBACKSUPPLEMENTV1MARKER => fallback::supplement::co_v1::DATA\n+                .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())\n+                .copied()\n+                .map(AnyPayload::from_static_ref)\n+                .ok_or(DataErrorKind::MissingLocale),\n+            LOCALEFALLBACKLIKELYSUBTAGSV1MARKER => fallback::likelysubtags_v1::DATA\n+                .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())\n+                .copied()\n+                .map(AnyPayload::from_static_ref)\n+                .ok_or(DataErrorKind::MissingLocale),\n+            LOCALEFALLBACKPARENTSV1MARKER => fallback::parents_v1::DATA\n+                .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())\n+                .copied()\n+                .map(AnyPayload::from_static_ref)\n+                .ok_or(DataErrorKind::MissingLocale),\n+            _ => Err(DataErrorKind::MissingDataKey),\n+        }\n+        .map_err(|e| e.with_req(key, req))\n+        .map(|payload| AnyResponse { payload: Some(payload), metadata: Default::default() })\n+    }\n+}"}, {"sha": "0a90c832e8c79b9ae018dd71c5cb15bc29bf01c9", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/likelysubtags_v1.rs", "status": "added", "additions": 733, "deletions": 0, "changes": 733, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,733 @@\n+// @generated\n+type DataStruct = < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker as :: icu_provider :: DataMarker > :: Yokeable ;\n+pub static DATA: litemap::LiteMap<&str, &DataStruct, &[(&str, &DataStruct)]> =\n+    litemap::LiteMap::from_sorted_store_unchecked(&[(\"und\", UND)]);\n+static UND: &DataStruct =\n+    &::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1 {\n+        l2s: unsafe {\n+            #[allow(unused_unsafe)]\n+            ::zerovec::ZeroMap::from_parts_unchecked(\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        97u8, 98u8, 0u8, 97u8, 98u8, 113u8, 97u8, 100u8, 112u8, 97u8, 100u8, 121u8,\n+                        97u8, 101u8, 0u8, 97u8, 101u8, 98u8, 97u8, 104u8, 111u8, 97u8, 106u8,\n+                        116u8, 97u8, 107u8, 107u8, 97u8, 108u8, 116u8, 97u8, 109u8, 0u8, 97u8,\n+                        112u8, 99u8, 97u8, 112u8, 100u8, 97u8, 114u8, 0u8, 97u8, 114u8, 99u8, 97u8,\n+                        114u8, 113u8, 97u8, 114u8, 115u8, 97u8, 114u8, 121u8, 97u8, 114u8, 122u8,\n+                        97u8, 115u8, 0u8, 97u8, 115u8, 101u8, 97u8, 118u8, 0u8, 97u8, 118u8, 108u8,\n+                        97u8, 119u8, 97u8, 98u8, 97u8, 0u8, 98u8, 97u8, 108u8, 98u8, 97u8, 112u8,\n+                        98u8, 97u8, 120u8, 98u8, 99u8, 113u8, 98u8, 101u8, 0u8, 98u8, 101u8, 106u8,\n+                        98u8, 102u8, 113u8, 98u8, 102u8, 116u8, 98u8, 102u8, 121u8, 98u8, 103u8,\n+                        0u8, 98u8, 103u8, 99u8, 98u8, 103u8, 110u8, 98u8, 103u8, 120u8, 98u8,\n+                        104u8, 98u8, 98u8, 104u8, 105u8, 98u8, 104u8, 111u8, 98u8, 106u8, 105u8,\n+                        98u8, 106u8, 106u8, 98u8, 108u8, 116u8, 98u8, 110u8, 0u8, 98u8, 111u8, 0u8,\n+                        98u8, 112u8, 121u8, 98u8, 113u8, 105u8, 98u8, 114u8, 97u8, 98u8, 114u8,\n+                        104u8, 98u8, 114u8, 120u8, 98u8, 115u8, 113u8, 98u8, 115u8, 116u8, 98u8,\n+                        116u8, 118u8, 98u8, 117u8, 97u8, 98u8, 121u8, 110u8, 99u8, 99u8, 112u8,\n+                        99u8, 101u8, 0u8, 99u8, 104u8, 109u8, 99u8, 104u8, 114u8, 99u8, 106u8,\n+                        97u8, 99u8, 106u8, 109u8, 99u8, 107u8, 98u8, 99u8, 109u8, 103u8, 99u8,\n+                        111u8, 112u8, 99u8, 114u8, 0u8, 99u8, 114u8, 104u8, 99u8, 114u8, 107u8,\n+                        99u8, 114u8, 108u8, 99u8, 115u8, 119u8, 99u8, 116u8, 100u8, 99u8, 117u8,\n+                        0u8, 99u8, 118u8, 0u8, 100u8, 97u8, 114u8, 100u8, 99u8, 99u8, 100u8, 103u8,\n+                        108u8, 100u8, 109u8, 102u8, 100u8, 111u8, 105u8, 100u8, 114u8, 104u8,\n+                        100u8, 114u8, 115u8, 100u8, 116u8, 121u8, 100u8, 118u8, 0u8, 100u8, 122u8,\n+                        0u8, 101u8, 103u8, 121u8, 101u8, 107u8, 121u8, 101u8, 108u8, 0u8, 101u8,\n+                        115u8, 103u8, 101u8, 116u8, 116u8, 102u8, 97u8, 0u8, 102u8, 105u8, 97u8,\n+                        102u8, 117u8, 98u8, 103u8, 97u8, 110u8, 103u8, 98u8, 109u8, 103u8, 98u8,\n+                        122u8, 103u8, 101u8, 122u8, 103u8, 103u8, 110u8, 103u8, 106u8, 107u8,\n+                        103u8, 106u8, 117u8, 103u8, 108u8, 107u8, 103u8, 109u8, 118u8, 103u8,\n+                        111u8, 102u8, 103u8, 111u8, 109u8, 103u8, 111u8, 110u8, 103u8, 111u8,\n+                        116u8, 103u8, 114u8, 99u8, 103u8, 114u8, 116u8, 103u8, 117u8, 0u8, 103u8,\n+                        118u8, 114u8, 103u8, 119u8, 99u8, 103u8, 119u8, 116u8, 104u8, 97u8, 107u8,\n+                        104u8, 97u8, 122u8, 104u8, 100u8, 121u8, 104u8, 101u8, 0u8, 104u8, 105u8,\n+                        0u8, 104u8, 108u8, 117u8, 104u8, 109u8, 100u8, 104u8, 110u8, 100u8, 104u8,\n+                        110u8, 101u8, 104u8, 110u8, 106u8, 104u8, 110u8, 111u8, 104u8, 111u8, 99u8,\n+                        104u8, 111u8, 106u8, 104u8, 115u8, 110u8, 104u8, 121u8, 0u8, 105u8, 105u8,\n+                        0u8, 105u8, 110u8, 104u8, 105u8, 117u8, 0u8, 105u8, 119u8, 0u8, 106u8,\n+                        97u8, 0u8, 106u8, 105u8, 0u8, 106u8, 109u8, 108u8, 107u8, 97u8, 0u8, 107u8,\n+                        97u8, 97u8, 107u8, 97u8, 119u8, 107u8, 98u8, 100u8, 107u8, 98u8, 121u8,\n+                        107u8, 100u8, 116u8, 107u8, 102u8, 114u8, 107u8, 102u8, 121u8, 107u8,\n+                        104u8, 98u8, 107u8, 104u8, 110u8, 107u8, 104u8, 116u8, 107u8, 104u8, 119u8,\n+                        107u8, 106u8, 103u8, 107u8, 107u8, 0u8, 107u8, 109u8, 0u8, 107u8, 110u8,\n+                        0u8, 107u8, 111u8, 0u8, 107u8, 111u8, 105u8, 107u8, 111u8, 107u8, 107u8,\n+                        113u8, 121u8, 107u8, 114u8, 99u8, 107u8, 114u8, 117u8, 107u8, 115u8, 0u8,\n+                        107u8, 116u8, 98u8, 107u8, 117u8, 109u8, 107u8, 118u8, 0u8, 107u8, 118u8,\n+                        120u8, 107u8, 120u8, 99u8, 107u8, 120u8, 108u8, 107u8, 120u8, 109u8, 107u8,\n+                        120u8, 112u8, 107u8, 121u8, 0u8, 107u8, 122u8, 104u8, 108u8, 97u8, 98u8,\n+                        108u8, 97u8, 100u8, 108u8, 97u8, 104u8, 108u8, 98u8, 101u8, 108u8, 99u8,\n+                        112u8, 108u8, 101u8, 112u8, 108u8, 101u8, 122u8, 108u8, 105u8, 102u8,\n+                        108u8, 105u8, 115u8, 108u8, 107u8, 105u8, 108u8, 109u8, 110u8, 108u8,\n+                        111u8, 0u8, 108u8, 114u8, 99u8, 108u8, 117u8, 122u8, 108u8, 119u8, 108u8,\n+                        108u8, 122u8, 104u8, 109u8, 97u8, 103u8, 109u8, 97u8, 105u8, 109u8, 100u8,\n+                        101u8, 109u8, 100u8, 102u8, 109u8, 100u8, 120u8, 109u8, 102u8, 97u8, 109u8,\n+                        103u8, 112u8, 109u8, 107u8, 0u8, 109u8, 107u8, 105u8, 109u8, 108u8, 0u8,\n+                        109u8, 110u8, 0u8, 109u8, 110u8, 105u8, 109u8, 110u8, 119u8, 109u8, 114u8,\n+                        0u8, 109u8, 114u8, 100u8, 109u8, 114u8, 106u8, 109u8, 114u8, 111u8, 109u8,\n+                        116u8, 114u8, 109u8, 118u8, 121u8, 109u8, 119u8, 114u8, 109u8, 119u8,\n+                        119u8, 109u8, 121u8, 0u8, 109u8, 121u8, 109u8, 109u8, 121u8, 118u8, 109u8,\n+                        121u8, 122u8, 109u8, 122u8, 110u8, 110u8, 97u8, 110u8, 110u8, 101u8, 0u8,\n+                        110u8, 101u8, 119u8, 110u8, 110u8, 112u8, 110u8, 111u8, 100u8, 110u8,\n+                        111u8, 101u8, 110u8, 111u8, 110u8, 110u8, 113u8, 111u8, 110u8, 115u8,\n+                        107u8, 110u8, 115u8, 116u8, 111u8, 106u8, 0u8, 111u8, 106u8, 115u8, 111u8,\n+                        114u8, 0u8, 111u8, 114u8, 117u8, 111u8, 115u8, 0u8, 111u8, 115u8, 97u8,\n+                        111u8, 116u8, 97u8, 111u8, 116u8, 107u8, 111u8, 117u8, 105u8, 112u8, 97u8,\n+                        0u8, 112u8, 97u8, 108u8, 112u8, 101u8, 111u8, 112u8, 104u8, 108u8, 112u8,\n+                        104u8, 110u8, 112u8, 107u8, 97u8, 112u8, 110u8, 116u8, 112u8, 112u8, 97u8,\n+                        112u8, 114u8, 97u8, 112u8, 114u8, 100u8, 112u8, 115u8, 0u8, 114u8, 97u8,\n+                        106u8, 114u8, 104u8, 103u8, 114u8, 105u8, 102u8, 114u8, 106u8, 115u8,\n+                        114u8, 107u8, 116u8, 114u8, 109u8, 116u8, 114u8, 117u8, 0u8, 114u8, 117u8,\n+                        101u8, 114u8, 121u8, 117u8, 115u8, 97u8, 0u8, 115u8, 97u8, 104u8, 115u8,\n+                        97u8, 116u8, 115u8, 97u8, 122u8, 115u8, 99u8, 107u8, 115u8, 99u8, 108u8,\n+                        115u8, 100u8, 0u8, 115u8, 100u8, 104u8, 115u8, 103u8, 97u8, 115u8, 103u8,\n+                        119u8, 115u8, 104u8, 105u8, 115u8, 104u8, 110u8, 115u8, 104u8, 117u8,\n+                        115u8, 105u8, 0u8, 115u8, 107u8, 114u8, 115u8, 109u8, 112u8, 115u8, 111u8,\n+                        103u8, 115u8, 111u8, 117u8, 115u8, 114u8, 0u8, 115u8, 114u8, 98u8, 115u8,\n+                        114u8, 120u8, 115u8, 119u8, 98u8, 115u8, 119u8, 118u8, 115u8, 121u8, 108u8,\n+                        115u8, 121u8, 114u8, 116u8, 97u8, 0u8, 116u8, 97u8, 106u8, 116u8, 99u8,\n+                        121u8, 116u8, 100u8, 100u8, 116u8, 100u8, 103u8, 116u8, 100u8, 104u8,\n+                        116u8, 101u8, 0u8, 116u8, 103u8, 0u8, 116u8, 104u8, 0u8, 116u8, 104u8,\n+                        108u8, 116u8, 104u8, 113u8, 116u8, 104u8, 114u8, 116u8, 105u8, 0u8, 116u8,\n+                        105u8, 103u8, 116u8, 107u8, 116u8, 116u8, 114u8, 119u8, 116u8, 115u8,\n+                        100u8, 116u8, 115u8, 102u8, 116u8, 115u8, 106u8, 116u8, 116u8, 0u8, 116u8,\n+                        116u8, 115u8, 116u8, 120u8, 103u8, 116u8, 120u8, 111u8, 116u8, 121u8,\n+                        118u8, 117u8, 100u8, 105u8, 117u8, 100u8, 109u8, 117u8, 103u8, 0u8, 117u8,\n+                        103u8, 97u8, 117u8, 107u8, 0u8, 117u8, 110u8, 114u8, 117u8, 110u8, 120u8,\n+                        117u8, 114u8, 0u8, 118u8, 97u8, 105u8, 119u8, 97u8, 108u8, 119u8, 98u8,\n+                        113u8, 119u8, 98u8, 114u8, 119u8, 110u8, 105u8, 119u8, 115u8, 103u8, 119u8,\n+                        116u8, 109u8, 119u8, 117u8, 117u8, 120u8, 99u8, 111u8, 120u8, 99u8, 114u8,\n+                        120u8, 108u8, 99u8, 120u8, 108u8, 100u8, 120u8, 109u8, 102u8, 120u8, 109u8,\n+                        110u8, 120u8, 109u8, 114u8, 120u8, 110u8, 97u8, 120u8, 110u8, 114u8, 120u8,\n+                        112u8, 114u8, 120u8, 115u8, 97u8, 120u8, 115u8, 114u8, 121u8, 105u8, 0u8,\n+                        121u8, 117u8, 101u8, 122u8, 100u8, 106u8, 122u8, 103u8, 104u8, 122u8,\n+                        104u8, 0u8, 122u8, 104u8, 120u8, 122u8, 107u8, 116u8,\n+                    ])\n+                },\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 84u8, 105u8, 98u8,\n+                        116u8, 67u8, 121u8, 114u8, 108u8, 65u8, 118u8, 115u8, 116u8, 65u8, 114u8,\n+                        97u8, 98u8, 65u8, 104u8, 111u8, 109u8, 65u8, 114u8, 97u8, 98u8, 88u8,\n+                        115u8, 117u8, 120u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8, 105u8,\n+                        65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8,\n+                        65u8, 114u8, 109u8, 105u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n+                        98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 66u8, 101u8, 110u8,\n+                        103u8, 83u8, 103u8, 110u8, 119u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8,\n+                        97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 65u8,\n+                        114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 66u8, 97u8, 109u8, 117u8,\n+                        69u8, 116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8, 97u8,\n+                        98u8, 84u8, 97u8, 109u8, 108u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8,\n+                        118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n+                        114u8, 97u8, 98u8, 71u8, 114u8, 101u8, 107u8, 68u8, 101u8, 118u8, 97u8,\n+                        68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 69u8, 116u8, 104u8,\n+                        105u8, 68u8, 101u8, 118u8, 97u8, 84u8, 97u8, 118u8, 116u8, 66u8, 101u8,\n+                        110u8, 103u8, 84u8, 105u8, 98u8, 116u8, 66u8, 101u8, 110u8, 103u8, 65u8,\n+                        114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 68u8,\n+                        101u8, 118u8, 97u8, 66u8, 97u8, 115u8, 115u8, 69u8, 116u8, 104u8, 105u8,\n+                        68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8,\n+                        105u8, 67u8, 97u8, 107u8, 109u8, 67u8, 121u8, 114u8, 108u8, 67u8, 121u8,\n+                        114u8, 108u8, 67u8, 104u8, 101u8, 114u8, 65u8, 114u8, 97u8, 98u8, 67u8,\n+                        104u8, 97u8, 109u8, 65u8, 114u8, 97u8, 98u8, 83u8, 111u8, 121u8, 111u8,\n+                        67u8, 111u8, 112u8, 116u8, 67u8, 97u8, 110u8, 115u8, 67u8, 121u8, 114u8,\n+                        108u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8,\n+                        110u8, 115u8, 80u8, 97u8, 117u8, 99u8, 67u8, 121u8, 114u8, 108u8, 67u8,\n+                        121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8, 97u8, 98u8,\n+                        65u8, 114u8, 97u8, 98u8, 77u8, 101u8, 100u8, 102u8, 68u8, 101u8, 118u8,\n+                        97u8, 77u8, 111u8, 110u8, 103u8, 69u8, 116u8, 104u8, 105u8, 68u8, 101u8,\n+                        118u8, 97u8, 84u8, 104u8, 97u8, 97u8, 84u8, 105u8, 98u8, 116u8, 69u8,\n+                        103u8, 121u8, 112u8, 75u8, 97u8, 108u8, 105u8, 71u8, 114u8, 101u8, 107u8,\n+                        71u8, 111u8, 110u8, 109u8, 73u8, 116u8, 97u8, 108u8, 65u8, 114u8, 97u8,\n+                        98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8,\n+                        115u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 69u8, 116u8,\n+                        104u8, 105u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 65u8,\n+                        114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8,\n+                        69u8, 116u8, 104u8, 105u8, 68u8, 101u8, 118u8, 97u8, 84u8, 101u8, 108u8,\n+                        117u8, 71u8, 111u8, 116u8, 104u8, 67u8, 112u8, 114u8, 116u8, 66u8, 101u8,\n+                        110u8, 103u8, 71u8, 117u8, 106u8, 114u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n+                        114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8, 115u8, 65u8,\n+                        114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8, 72u8, 101u8, 98u8, 114u8,\n+                        68u8, 101u8, 118u8, 97u8, 72u8, 108u8, 117u8, 119u8, 80u8, 108u8, 114u8,\n+                        100u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 109u8,\n+                        110u8, 112u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 68u8,\n+                        101u8, 118u8, 97u8, 72u8, 97u8, 110u8, 115u8, 65u8, 114u8, 109u8, 110u8,\n+                        89u8, 105u8, 105u8, 105u8, 67u8, 121u8, 114u8, 108u8, 67u8, 97u8, 110u8,\n+                        115u8, 72u8, 101u8, 98u8, 114u8, 74u8, 112u8, 97u8, 110u8, 72u8, 101u8,\n+                        98u8, 114u8, 68u8, 101u8, 118u8, 97u8, 71u8, 101u8, 111u8, 114u8, 67u8,\n+                        121u8, 114u8, 108u8, 75u8, 97u8, 119u8, 105u8, 67u8, 121u8, 114u8, 108u8,\n+                        65u8, 114u8, 97u8, 98u8, 84u8, 104u8, 97u8, 105u8, 68u8, 101u8, 118u8,\n+                        97u8, 68u8, 101u8, 118u8, 97u8, 84u8, 97u8, 108u8, 117u8, 68u8, 101u8,\n+                        118u8, 97u8, 77u8, 121u8, 109u8, 114u8, 65u8, 114u8, 97u8, 98u8, 76u8,\n+                        97u8, 111u8, 111u8, 67u8, 121u8, 114u8, 108u8, 75u8, 104u8, 109u8, 114u8,\n+                        75u8, 110u8, 100u8, 97u8, 75u8, 111u8, 114u8, 101u8, 67u8, 121u8, 114u8,\n+                        108u8, 68u8, 101u8, 118u8, 97u8, 69u8, 116u8, 104u8, 105u8, 67u8, 121u8,\n+                        114u8, 108u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 69u8,\n+                        116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8,\n+                        65u8, 114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8, 68u8, 101u8, 118u8,\n+                        97u8, 84u8, 104u8, 97u8, 105u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8,\n+                        114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 76u8, 105u8, 110u8, 97u8, 72u8,\n+                        101u8, 98u8, 114u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8,\n+                        84u8, 104u8, 97u8, 105u8, 76u8, 101u8, 112u8, 99u8, 67u8, 121u8, 114u8,\n+                        108u8, 68u8, 101u8, 118u8, 97u8, 76u8, 105u8, 115u8, 117u8, 65u8, 114u8,\n+                        97u8, 98u8, 84u8, 101u8, 108u8, 117u8, 76u8, 97u8, 111u8, 111u8, 65u8,\n+                        114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 84u8, 104u8, 97u8, 105u8, 72u8,\n+                        97u8, 110u8, 115u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8,\n+                        65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8,\n+                        105u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8,\n+                        114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 77u8, 108u8, 121u8, 109u8, 67u8,\n+                        121u8, 114u8, 108u8, 66u8, 101u8, 110u8, 103u8, 77u8, 121u8, 109u8, 114u8,\n+                        68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8,\n+                        108u8, 77u8, 114u8, 111u8, 111u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8,\n+                        97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 109u8, 110u8, 112u8, 77u8,\n+                        121u8, 109u8, 114u8, 69u8, 116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8,\n+                        77u8, 97u8, 110u8, 100u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8,\n+                        115u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 87u8, 99u8,\n+                        104u8, 111u8, 76u8, 97u8, 110u8, 97u8, 68u8, 101u8, 118u8, 97u8, 82u8,\n+                        117u8, 110u8, 114u8, 78u8, 107u8, 111u8, 111u8, 67u8, 97u8, 110u8, 115u8,\n+                        84u8, 110u8, 115u8, 97u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8, 110u8,\n+                        115u8, 79u8, 114u8, 121u8, 97u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8,\n+                        114u8, 108u8, 79u8, 115u8, 103u8, 101u8, 65u8, 114u8, 97u8, 98u8, 79u8,\n+                        114u8, 107u8, 104u8, 79u8, 117u8, 103u8, 114u8, 71u8, 117u8, 114u8, 117u8,\n+                        80u8, 104u8, 108u8, 105u8, 88u8, 112u8, 101u8, 111u8, 65u8, 114u8, 97u8,\n+                        98u8, 80u8, 104u8, 110u8, 120u8, 66u8, 114u8, 97u8, 104u8, 71u8, 114u8,\n+                        101u8, 107u8, 68u8, 101u8, 118u8, 97u8, 75u8, 104u8, 97u8, 114u8, 65u8,\n+                        114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 82u8,\n+                        111u8, 104u8, 103u8, 84u8, 102u8, 110u8, 103u8, 68u8, 101u8, 118u8, 97u8,\n+                        66u8, 101u8, 110u8, 103u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8,\n+                        108u8, 67u8, 121u8, 114u8, 108u8, 75u8, 97u8, 110u8, 97u8, 68u8, 101u8,\n+                        118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 79u8, 108u8, 99u8, 107u8, 83u8,\n+                        97u8, 117u8, 114u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8,\n+                        65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 79u8, 103u8, 97u8, 109u8,\n+                        69u8, 116u8, 104u8, 105u8, 84u8, 102u8, 110u8, 103u8, 77u8, 121u8, 109u8,\n+                        114u8, 65u8, 114u8, 97u8, 98u8, 83u8, 105u8, 110u8, 104u8, 65u8, 114u8,\n+                        97u8, 98u8, 83u8, 97u8, 109u8, 114u8, 83u8, 111u8, 103u8, 100u8, 84u8,\n+                        104u8, 97u8, 105u8, 67u8, 121u8, 114u8, 108u8, 83u8, 111u8, 114u8, 97u8,\n+                        68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8,\n+                        97u8, 66u8, 101u8, 110u8, 103u8, 83u8, 121u8, 114u8, 99u8, 84u8, 97u8,\n+                        109u8, 108u8, 68u8, 101u8, 118u8, 97u8, 75u8, 110u8, 100u8, 97u8, 84u8,\n+                        97u8, 108u8, 101u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8,\n+                        84u8, 101u8, 108u8, 117u8, 67u8, 121u8, 114u8, 108u8, 84u8, 104u8, 97u8,\n+                        105u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8,\n+                        118u8, 97u8, 69u8, 116u8, 104u8, 105u8, 69u8, 116u8, 104u8, 105u8, 68u8,\n+                        101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 71u8, 114u8, 101u8, 107u8,\n+                        68u8, 101u8, 118u8, 97u8, 84u8, 105u8, 98u8, 116u8, 67u8, 121u8, 114u8,\n+                        108u8, 84u8, 104u8, 97u8, 105u8, 84u8, 97u8, 110u8, 103u8, 84u8, 111u8,\n+                        116u8, 111u8, 67u8, 121u8, 114u8, 108u8, 65u8, 103u8, 104u8, 98u8, 67u8,\n+                        121u8, 114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 85u8, 103u8, 97u8, 114u8,\n+                        67u8, 121u8, 114u8, 108u8, 66u8, 101u8, 110u8, 103u8, 66u8, 101u8, 110u8,\n+                        103u8, 65u8, 114u8, 97u8, 98u8, 86u8, 97u8, 105u8, 105u8, 69u8, 116u8,\n+                        104u8, 105u8, 84u8, 101u8, 108u8, 117u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n+                        114u8, 97u8, 98u8, 71u8, 111u8, 110u8, 103u8, 68u8, 101u8, 118u8, 97u8,\n+                        72u8, 97u8, 110u8, 115u8, 67u8, 104u8, 114u8, 115u8, 67u8, 97u8, 114u8,\n+                        105u8, 76u8, 121u8, 99u8, 105u8, 76u8, 121u8, 100u8, 105u8, 71u8, 101u8,\n+                        111u8, 114u8, 77u8, 97u8, 110u8, 105u8, 77u8, 101u8, 114u8, 99u8, 78u8,\n+                        97u8, 114u8, 98u8, 68u8, 101u8, 118u8, 97u8, 80u8, 114u8, 116u8, 105u8,\n+                        83u8, 97u8, 114u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 101u8, 98u8,\n+                        114u8, 72u8, 97u8, 110u8, 116u8, 65u8, 114u8, 97u8, 98u8, 84u8, 102u8,\n+                        110u8, 103u8, 72u8, 97u8, 110u8, 115u8, 78u8, 115u8, 104u8, 117u8, 75u8,\n+                        105u8, 116u8, 115u8,\n+                    ])\n+                },\n+            )\n+        },\n+        lr2s: unsafe {\n+            #[allow(unused_unsafe)]\n+            ::zerovec::ZeroMap2d::from_parts_unchecked(\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        97u8, 122u8, 0u8, 104u8, 97u8, 0u8, 107u8, 107u8, 0u8, 107u8, 117u8, 0u8,\n+                        107u8, 121u8, 0u8, 109u8, 97u8, 110u8, 109u8, 110u8, 0u8, 109u8, 115u8,\n+                        0u8, 112u8, 97u8, 0u8, 114u8, 105u8, 102u8, 115u8, 100u8, 0u8, 115u8,\n+                        114u8, 0u8, 116u8, 103u8, 0u8, 117u8, 103u8, 0u8, 117u8, 110u8, 114u8,\n+                        117u8, 122u8, 0u8, 121u8, 117u8, 101u8, 122u8, 104u8, 0u8,\n+                    ])\n+                },\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        3u8, 0u8, 0u8, 0u8, 5u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 10u8, 0u8, 0u8,\n+                        0u8, 12u8, 0u8, 0u8, 0u8, 13u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 15u8,\n+                        0u8, 0u8, 0u8, 16u8, 0u8, 0u8, 0u8, 17u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                        0u8, 22u8, 0u8, 0u8, 0u8, 23u8, 0u8, 0u8, 0u8, 25u8, 0u8, 0u8, 0u8, 26u8,\n+                        0u8, 0u8, 0u8, 28u8, 0u8, 0u8, 0u8, 29u8, 0u8, 0u8, 0u8, 44u8, 0u8, 0u8,\n+                        0u8,\n+                    ])\n+                },\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        73u8, 81u8, 0u8, 73u8, 82u8, 0u8, 82u8, 85u8, 0u8, 67u8, 77u8, 0u8, 83u8,\n+                        68u8, 0u8, 65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 73u8, 82u8, 0u8, 77u8, 78u8,\n+                        0u8, 76u8, 66u8, 0u8, 67u8, 78u8, 0u8, 84u8, 82u8, 0u8, 71u8, 78u8, 0u8,\n+                        67u8, 78u8, 0u8, 67u8, 67u8, 0u8, 80u8, 75u8, 0u8, 78u8, 76u8, 0u8, 73u8,\n+                        78u8, 0u8, 77u8, 69u8, 0u8, 82u8, 79u8, 0u8, 82u8, 85u8, 0u8, 84u8, 82u8,\n+                        0u8, 80u8, 75u8, 0u8, 75u8, 90u8, 0u8, 77u8, 78u8, 0u8, 78u8, 80u8, 0u8,\n+                        65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 67u8, 78u8, 0u8, 65u8, 85u8, 0u8, 66u8,\n+                        78u8, 0u8, 71u8, 66u8, 0u8, 71u8, 70u8, 0u8, 72u8, 75u8, 0u8, 73u8, 68u8,\n+                        0u8, 77u8, 79u8, 0u8, 80u8, 65u8, 0u8, 80u8, 70u8, 0u8, 80u8, 72u8, 0u8,\n+                        83u8, 82u8, 0u8, 84u8, 72u8, 0u8, 84u8, 87u8, 0u8, 85u8, 83u8, 0u8, 86u8,\n+                        78u8, 0u8,\n+                    ])\n+                },\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8,\n+                        108u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n+                        98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n+                        98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8, 116u8,\n+                        110u8, 78u8, 107u8, 111u8, 111u8, 77u8, 111u8, 110u8, 103u8, 65u8, 114u8,\n+                        97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8, 116u8, 110u8, 68u8, 101u8,\n+                        118u8, 97u8, 76u8, 97u8, 116u8, 110u8, 76u8, 97u8, 116u8, 110u8, 76u8,\n+                        97u8, 116u8, 110u8, 76u8, 97u8, 116u8, 110u8, 65u8, 114u8, 97u8, 98u8,\n+                        67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8, 118u8,\n+                        97u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 72u8, 97u8,\n+                        110u8, 115u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8,\n+                        97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8,\n+                        72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8,\n+                        116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8,\n+                        110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8,\n+                        97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8,\n+                    ])\n+                },\n+            )\n+        },\n+        l2r: unsafe {\n+            #[allow(unused_unsafe)]\n+            ::zerovec::ZeroMap::from_parts_unchecked(\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        97u8, 97u8, 0u8, 97u8, 98u8, 0u8, 97u8, 98u8, 114u8, 97u8, 99u8, 101u8,\n+                        97u8, 99u8, 104u8, 97u8, 100u8, 97u8, 97u8, 100u8, 112u8, 97u8, 100u8,\n+                        121u8, 97u8, 101u8, 0u8, 97u8, 101u8, 98u8, 97u8, 102u8, 0u8, 97u8, 103u8,\n+                        113u8, 97u8, 104u8, 111u8, 97u8, 106u8, 116u8, 97u8, 107u8, 0u8, 97u8,\n+                        107u8, 107u8, 97u8, 108u8, 110u8, 97u8, 108u8, 116u8, 97u8, 109u8, 0u8,\n+                        97u8, 109u8, 111u8, 97u8, 110u8, 0u8, 97u8, 110u8, 110u8, 97u8, 111u8,\n+                        122u8, 97u8, 112u8, 100u8, 97u8, 114u8, 0u8, 97u8, 114u8, 99u8, 97u8,\n+                        114u8, 110u8, 97u8, 114u8, 111u8, 97u8, 114u8, 113u8, 97u8, 114u8, 115u8,\n+                        97u8, 114u8, 121u8, 97u8, 114u8, 122u8, 97u8, 115u8, 0u8, 97u8, 115u8,\n+                        97u8, 97u8, 115u8, 101u8, 97u8, 115u8, 116u8, 97u8, 116u8, 106u8, 97u8,\n+                        118u8, 0u8, 97u8, 119u8, 97u8, 97u8, 121u8, 0u8, 97u8, 122u8, 0u8, 98u8,\n+                        97u8, 0u8, 98u8, 97u8, 108u8, 98u8, 97u8, 110u8, 98u8, 97u8, 112u8, 98u8,\n+                        97u8, 114u8, 98u8, 97u8, 115u8, 98u8, 97u8, 120u8, 98u8, 98u8, 99u8, 98u8,\n+                        98u8, 106u8, 98u8, 99u8, 105u8, 98u8, 101u8, 0u8, 98u8, 101u8, 106u8, 98u8,\n+                        101u8, 109u8, 98u8, 101u8, 119u8, 98u8, 101u8, 122u8, 98u8, 102u8, 100u8,\n+                        98u8, 102u8, 113u8, 98u8, 102u8, 116u8, 98u8, 102u8, 121u8, 98u8, 103u8,\n+                        0u8, 98u8, 103u8, 99u8, 98u8, 103u8, 110u8, 98u8, 103u8, 120u8, 98u8,\n+                        104u8, 98u8, 98u8, 104u8, 105u8, 98u8, 104u8, 111u8, 98u8, 105u8, 0u8,\n+                        98u8, 105u8, 107u8, 98u8, 105u8, 110u8, 98u8, 106u8, 106u8, 98u8, 106u8,\n+                        110u8, 98u8, 106u8, 116u8, 98u8, 107u8, 109u8, 98u8, 107u8, 117u8, 98u8,\n+                        108u8, 97u8, 98u8, 108u8, 103u8, 98u8, 108u8, 116u8, 98u8, 109u8, 0u8,\n+                        98u8, 109u8, 113u8, 98u8, 110u8, 0u8, 98u8, 111u8, 0u8, 98u8, 112u8, 121u8,\n+                        98u8, 113u8, 105u8, 98u8, 113u8, 118u8, 98u8, 114u8, 0u8, 98u8, 114u8,\n+                        97u8, 98u8, 114u8, 104u8, 98u8, 114u8, 120u8, 98u8, 115u8, 0u8, 98u8,\n+                        115u8, 113u8, 98u8, 115u8, 115u8, 98u8, 116u8, 111u8, 98u8, 116u8, 118u8,\n+                        98u8, 117u8, 97u8, 98u8, 117u8, 99u8, 98u8, 117u8, 103u8, 98u8, 117u8,\n+                        109u8, 98u8, 118u8, 98u8, 98u8, 121u8, 110u8, 98u8, 121u8, 118u8, 98u8,\n+                        122u8, 101u8, 99u8, 97u8, 0u8, 99u8, 97u8, 100u8, 99u8, 99u8, 104u8, 99u8,\n+                        99u8, 112u8, 99u8, 101u8, 0u8, 99u8, 101u8, 98u8, 99u8, 103u8, 103u8, 99u8,\n+                        104u8, 0u8, 99u8, 104u8, 107u8, 99u8, 104u8, 109u8, 99u8, 104u8, 111u8,\n+                        99u8, 104u8, 112u8, 99u8, 104u8, 114u8, 99u8, 105u8, 99u8, 99u8, 106u8,\n+                        97u8, 99u8, 106u8, 109u8, 99u8, 107u8, 98u8, 99u8, 108u8, 99u8, 99u8,\n+                        109u8, 103u8, 99u8, 111u8, 0u8, 99u8, 111u8, 112u8, 99u8, 112u8, 115u8,\n+                        99u8, 114u8, 0u8, 99u8, 114u8, 103u8, 99u8, 114u8, 104u8, 99u8, 114u8,\n+                        107u8, 99u8, 114u8, 108u8, 99u8, 114u8, 115u8, 99u8, 115u8, 0u8, 99u8,\n+                        115u8, 98u8, 99u8, 115u8, 119u8, 99u8, 116u8, 100u8, 99u8, 117u8, 0u8,\n+                        99u8, 118u8, 0u8, 99u8, 121u8, 0u8, 100u8, 97u8, 0u8, 100u8, 97u8, 102u8,\n+                        100u8, 97u8, 107u8, 100u8, 97u8, 114u8, 100u8, 97u8, 118u8, 100u8, 99u8,\n+                        99u8, 100u8, 101u8, 0u8, 100u8, 101u8, 110u8, 100u8, 103u8, 114u8, 100u8,\n+                        106u8, 101u8, 100u8, 109u8, 102u8, 100u8, 110u8, 106u8, 100u8, 111u8,\n+                        105u8, 100u8, 114u8, 104u8, 100u8, 115u8, 98u8, 100u8, 116u8, 109u8, 100u8,\n+                        116u8, 112u8, 100u8, 116u8, 121u8, 100u8, 117u8, 97u8, 100u8, 118u8, 0u8,\n+                        100u8, 121u8, 111u8, 100u8, 121u8, 117u8, 100u8, 122u8, 0u8, 101u8, 98u8,\n+                        117u8, 101u8, 101u8, 0u8, 101u8, 102u8, 105u8, 101u8, 103u8, 108u8, 101u8,\n+                        103u8, 121u8, 101u8, 107u8, 121u8, 101u8, 108u8, 0u8, 101u8, 110u8, 0u8,\n+                        101u8, 111u8, 0u8, 101u8, 115u8, 0u8, 101u8, 115u8, 103u8, 101u8, 115u8,\n+                        117u8, 101u8, 116u8, 0u8, 101u8, 116u8, 116u8, 101u8, 117u8, 0u8, 101u8,\n+                        119u8, 111u8, 101u8, 120u8, 116u8, 102u8, 97u8, 0u8, 102u8, 97u8, 110u8,\n+                        102u8, 102u8, 0u8, 102u8, 102u8, 109u8, 102u8, 105u8, 0u8, 102u8, 105u8,\n+                        97u8, 102u8, 105u8, 108u8, 102u8, 105u8, 116u8, 102u8, 106u8, 0u8, 102u8,\n+                        111u8, 0u8, 102u8, 111u8, 110u8, 102u8, 114u8, 0u8, 102u8, 114u8, 99u8,\n+                        102u8, 114u8, 112u8, 102u8, 114u8, 114u8, 102u8, 114u8, 115u8, 102u8,\n+                        117u8, 98u8, 102u8, 117u8, 100u8, 102u8, 117u8, 102u8, 102u8, 117u8, 113u8,\n+                        102u8, 117u8, 114u8, 102u8, 117u8, 118u8, 102u8, 118u8, 114u8, 102u8,\n+                        121u8, 0u8, 103u8, 97u8, 0u8, 103u8, 97u8, 97u8, 103u8, 97u8, 103u8, 103u8,\n+                        97u8, 110u8, 103u8, 97u8, 121u8, 103u8, 98u8, 109u8, 103u8, 98u8, 122u8,\n+                        103u8, 99u8, 114u8, 103u8, 100u8, 0u8, 103u8, 101u8, 122u8, 103u8, 103u8,\n+                        110u8, 103u8, 105u8, 108u8, 103u8, 106u8, 107u8, 103u8, 106u8, 117u8,\n+                        103u8, 108u8, 0u8, 103u8, 108u8, 107u8, 103u8, 110u8, 0u8, 103u8, 111u8,\n+                        109u8, 103u8, 111u8, 110u8, 103u8, 111u8, 114u8, 103u8, 111u8, 115u8,\n+                        103u8, 111u8, 116u8, 103u8, 114u8, 99u8, 103u8, 114u8, 116u8, 103u8, 115u8,\n+                        119u8, 103u8, 117u8, 0u8, 103u8, 117u8, 98u8, 103u8, 117u8, 99u8, 103u8,\n+                        117u8, 114u8, 103u8, 117u8, 122u8, 103u8, 118u8, 0u8, 103u8, 118u8, 114u8,\n+                        103u8, 119u8, 105u8, 104u8, 97u8, 0u8, 104u8, 97u8, 107u8, 104u8, 97u8,\n+                        119u8, 104u8, 97u8, 122u8, 104u8, 101u8, 0u8, 104u8, 105u8, 0u8, 104u8,\n+                        105u8, 102u8, 104u8, 105u8, 108u8, 104u8, 108u8, 117u8, 104u8, 109u8,\n+                        100u8, 104u8, 110u8, 100u8, 104u8, 110u8, 101u8, 104u8, 110u8, 106u8,\n+                        104u8, 110u8, 110u8, 104u8, 110u8, 111u8, 104u8, 111u8, 0u8, 104u8, 111u8,\n+                        99u8, 104u8, 111u8, 106u8, 104u8, 114u8, 0u8, 104u8, 115u8, 98u8, 104u8,\n+                        115u8, 110u8, 104u8, 116u8, 0u8, 104u8, 117u8, 0u8, 104u8, 117u8, 114u8,\n+                        104u8, 121u8, 0u8, 104u8, 122u8, 0u8, 105u8, 97u8, 0u8, 105u8, 98u8, 97u8,\n+                        105u8, 98u8, 98u8, 105u8, 100u8, 0u8, 105u8, 102u8, 101u8, 105u8, 103u8,\n+                        0u8, 105u8, 105u8, 0u8, 105u8, 107u8, 0u8, 105u8, 108u8, 111u8, 105u8,\n+                        110u8, 0u8, 105u8, 110u8, 104u8, 105u8, 111u8, 0u8, 105u8, 115u8, 0u8,\n+                        105u8, 116u8, 0u8, 105u8, 117u8, 0u8, 105u8, 119u8, 0u8, 105u8, 122u8,\n+                        104u8, 106u8, 97u8, 0u8, 106u8, 97u8, 109u8, 106u8, 98u8, 111u8, 106u8,\n+                        103u8, 111u8, 106u8, 105u8, 0u8, 106u8, 109u8, 99u8, 106u8, 109u8, 108u8,\n+                        106u8, 117u8, 116u8, 106u8, 118u8, 0u8, 106u8, 119u8, 0u8, 107u8, 97u8,\n+                        0u8, 107u8, 97u8, 97u8, 107u8, 97u8, 98u8, 107u8, 97u8, 99u8, 107u8, 97u8,\n+                        106u8, 107u8, 97u8, 109u8, 107u8, 97u8, 111u8, 107u8, 97u8, 119u8, 107u8,\n+                        98u8, 100u8, 107u8, 98u8, 121u8, 107u8, 99u8, 103u8, 107u8, 99u8, 107u8,\n+                        107u8, 100u8, 101u8, 107u8, 100u8, 104u8, 107u8, 100u8, 116u8, 107u8,\n+                        101u8, 97u8, 107u8, 101u8, 110u8, 107u8, 102u8, 111u8, 107u8, 102u8, 114u8,\n+                        107u8, 102u8, 121u8, 107u8, 103u8, 0u8, 107u8, 103u8, 101u8, 107u8, 103u8,\n+                        112u8, 107u8, 104u8, 97u8, 107u8, 104u8, 98u8, 107u8, 104u8, 110u8, 107u8,\n+                        104u8, 113u8, 107u8, 104u8, 116u8, 107u8, 104u8, 119u8, 107u8, 105u8, 0u8,\n+                        107u8, 105u8, 117u8, 107u8, 106u8, 0u8, 107u8, 106u8, 103u8, 107u8, 107u8,\n+                        0u8, 107u8, 107u8, 106u8, 107u8, 108u8, 0u8, 107u8, 108u8, 110u8, 107u8,\n+                        109u8, 0u8, 107u8, 109u8, 98u8, 107u8, 110u8, 0u8, 107u8, 110u8, 102u8,\n+                        107u8, 111u8, 0u8, 107u8, 111u8, 105u8, 107u8, 111u8, 107u8, 107u8, 111u8,\n+                        115u8, 107u8, 112u8, 101u8, 107u8, 114u8, 99u8, 107u8, 114u8, 105u8, 107u8,\n+                        114u8, 106u8, 107u8, 114u8, 108u8, 107u8, 114u8, 117u8, 107u8, 115u8, 0u8,\n+                        107u8, 115u8, 98u8, 107u8, 115u8, 102u8, 107u8, 115u8, 104u8, 107u8, 116u8,\n+                        114u8, 107u8, 117u8, 0u8, 107u8, 117u8, 109u8, 107u8, 118u8, 0u8, 107u8,\n+                        118u8, 114u8, 107u8, 118u8, 120u8, 107u8, 119u8, 0u8, 107u8, 119u8, 107u8,\n+                        107u8, 120u8, 108u8, 107u8, 120u8, 109u8, 107u8, 120u8, 112u8, 107u8,\n+                        121u8, 0u8, 107u8, 122u8, 106u8, 107u8, 122u8, 116u8, 108u8, 97u8, 0u8,\n+                        108u8, 97u8, 98u8, 108u8, 97u8, 100u8, 108u8, 97u8, 103u8, 108u8, 97u8,\n+                        104u8, 108u8, 97u8, 106u8, 108u8, 98u8, 0u8, 108u8, 98u8, 101u8, 108u8,\n+                        98u8, 119u8, 108u8, 99u8, 112u8, 108u8, 101u8, 112u8, 108u8, 101u8, 122u8,\n+                        108u8, 103u8, 0u8, 108u8, 105u8, 0u8, 108u8, 105u8, 102u8, 108u8, 105u8,\n+                        106u8, 108u8, 105u8, 108u8, 108u8, 105u8, 115u8, 108u8, 106u8, 112u8,\n+                        108u8, 107u8, 105u8, 108u8, 107u8, 116u8, 108u8, 109u8, 110u8, 108u8,\n+                        109u8, 111u8, 108u8, 110u8, 0u8, 108u8, 111u8, 0u8, 108u8, 111u8, 108u8,\n+                        108u8, 111u8, 122u8, 108u8, 114u8, 99u8, 108u8, 116u8, 0u8, 108u8, 116u8,\n+                        103u8, 108u8, 117u8, 0u8, 108u8, 117u8, 97u8, 108u8, 117u8, 111u8, 108u8,\n+                        117u8, 121u8, 108u8, 117u8, 122u8, 108u8, 118u8, 0u8, 108u8, 119u8, 108u8,\n+                        108u8, 122u8, 104u8, 108u8, 122u8, 122u8, 109u8, 97u8, 100u8, 109u8, 97u8,\n+                        102u8, 109u8, 97u8, 103u8, 109u8, 97u8, 105u8, 109u8, 97u8, 107u8, 109u8,\n+                        97u8, 110u8, 109u8, 97u8, 115u8, 109u8, 97u8, 122u8, 109u8, 100u8, 102u8,\n+                        109u8, 100u8, 104u8, 109u8, 100u8, 114u8, 109u8, 101u8, 110u8, 109u8,\n+                        101u8, 114u8, 109u8, 102u8, 97u8, 109u8, 102u8, 101u8, 109u8, 103u8, 0u8,\n+                        109u8, 103u8, 104u8, 109u8, 103u8, 111u8, 109u8, 103u8, 112u8, 109u8,\n+                        103u8, 121u8, 109u8, 104u8, 0u8, 109u8, 105u8, 0u8, 109u8, 105u8, 99u8,\n+                        109u8, 105u8, 110u8, 109u8, 107u8, 0u8, 109u8, 108u8, 0u8, 109u8, 108u8,\n+                        115u8, 109u8, 110u8, 0u8, 109u8, 110u8, 105u8, 109u8, 110u8, 119u8, 109u8,\n+                        111u8, 0u8, 109u8, 111u8, 101u8, 109u8, 111u8, 104u8, 109u8, 111u8, 115u8,\n+                        109u8, 114u8, 0u8, 109u8, 114u8, 100u8, 109u8, 114u8, 106u8, 109u8, 114u8,\n+                        111u8, 109u8, 115u8, 0u8, 109u8, 116u8, 0u8, 109u8, 116u8, 114u8, 109u8,\n+                        117u8, 97u8, 109u8, 117u8, 115u8, 109u8, 118u8, 121u8, 109u8, 119u8, 107u8,\n+                        109u8, 119u8, 114u8, 109u8, 119u8, 118u8, 109u8, 119u8, 119u8, 109u8,\n+                        120u8, 99u8, 109u8, 121u8, 0u8, 109u8, 121u8, 118u8, 109u8, 121u8, 120u8,\n+                        109u8, 121u8, 122u8, 109u8, 122u8, 110u8, 110u8, 97u8, 0u8, 110u8, 97u8,\n+                        110u8, 110u8, 97u8, 112u8, 110u8, 97u8, 113u8, 110u8, 98u8, 0u8, 110u8,\n+                        99u8, 104u8, 110u8, 100u8, 0u8, 110u8, 100u8, 99u8, 110u8, 100u8, 115u8,\n+                        110u8, 101u8, 0u8, 110u8, 101u8, 119u8, 110u8, 103u8, 0u8, 110u8, 103u8,\n+                        108u8, 110u8, 104u8, 101u8, 110u8, 104u8, 119u8, 110u8, 105u8, 106u8,\n+                        110u8, 105u8, 117u8, 110u8, 106u8, 111u8, 110u8, 108u8, 0u8, 110u8, 109u8,\n+                        103u8, 110u8, 110u8, 0u8, 110u8, 110u8, 104u8, 110u8, 110u8, 112u8, 110u8,\n+                        111u8, 0u8, 110u8, 111u8, 100u8, 110u8, 111u8, 101u8, 110u8, 111u8, 110u8,\n+                        110u8, 113u8, 111u8, 110u8, 114u8, 0u8, 110u8, 115u8, 107u8, 110u8, 115u8,\n+                        111u8, 110u8, 115u8, 116u8, 110u8, 117u8, 115u8, 110u8, 118u8, 0u8, 110u8,\n+                        120u8, 113u8, 110u8, 121u8, 0u8, 110u8, 121u8, 109u8, 110u8, 121u8, 110u8,\n+                        110u8, 122u8, 105u8, 111u8, 99u8, 0u8, 111u8, 106u8, 0u8, 111u8, 106u8,\n+                        115u8, 111u8, 107u8, 97u8, 111u8, 109u8, 0u8, 111u8, 114u8, 0u8, 111u8,\n+                        115u8, 0u8, 111u8, 115u8, 97u8, 111u8, 116u8, 107u8, 111u8, 117u8, 105u8,\n+                        112u8, 97u8, 0u8, 112u8, 97u8, 103u8, 112u8, 97u8, 108u8, 112u8, 97u8,\n+                        109u8, 112u8, 97u8, 112u8, 112u8, 97u8, 117u8, 112u8, 99u8, 100u8, 112u8,\n+                        99u8, 109u8, 112u8, 100u8, 99u8, 112u8, 100u8, 116u8, 112u8, 101u8, 111u8,\n+                        112u8, 102u8, 108u8, 112u8, 104u8, 110u8, 112u8, 105u8, 115u8, 112u8,\n+                        107u8, 97u8, 112u8, 107u8, 111u8, 112u8, 108u8, 0u8, 112u8, 109u8, 115u8,\n+                        112u8, 110u8, 116u8, 112u8, 111u8, 110u8, 112u8, 112u8, 97u8, 112u8, 113u8,\n+                        109u8, 112u8, 114u8, 97u8, 112u8, 114u8, 100u8, 112u8, 114u8, 103u8, 112u8,\n+                        115u8, 0u8, 112u8, 116u8, 0u8, 112u8, 117u8, 117u8, 113u8, 117u8, 0u8,\n+                        113u8, 117u8, 99u8, 113u8, 117u8, 103u8, 114u8, 97u8, 106u8, 114u8, 99u8,\n+                        102u8, 114u8, 101u8, 106u8, 114u8, 103u8, 110u8, 114u8, 104u8, 103u8,\n+                        114u8, 105u8, 97u8, 114u8, 105u8, 102u8, 114u8, 106u8, 115u8, 114u8, 107u8,\n+                        116u8, 114u8, 109u8, 0u8, 114u8, 109u8, 102u8, 114u8, 109u8, 111u8, 114u8,\n+                        109u8, 116u8, 114u8, 109u8, 117u8, 114u8, 110u8, 0u8, 114u8, 110u8, 103u8,\n+                        114u8, 111u8, 0u8, 114u8, 111u8, 98u8, 114u8, 111u8, 102u8, 114u8, 116u8,\n+                        109u8, 114u8, 117u8, 0u8, 114u8, 117u8, 101u8, 114u8, 117u8, 103u8, 114u8,\n+                        119u8, 0u8, 114u8, 119u8, 107u8, 114u8, 121u8, 117u8, 115u8, 97u8, 0u8,\n+                        115u8, 97u8, 102u8, 115u8, 97u8, 104u8, 115u8, 97u8, 113u8, 115u8, 97u8,\n+                        115u8, 115u8, 97u8, 116u8, 115u8, 97u8, 118u8, 115u8, 97u8, 122u8, 115u8,\n+                        98u8, 112u8, 115u8, 99u8, 0u8, 115u8, 99u8, 107u8, 115u8, 99u8, 110u8,\n+                        115u8, 99u8, 111u8, 115u8, 100u8, 0u8, 115u8, 100u8, 99u8, 115u8, 100u8,\n+                        104u8, 115u8, 101u8, 0u8, 115u8, 101u8, 102u8, 115u8, 101u8, 104u8, 115u8,\n+                        101u8, 105u8, 115u8, 101u8, 115u8, 115u8, 103u8, 0u8, 115u8, 103u8, 97u8,\n+                        115u8, 103u8, 115u8, 115u8, 104u8, 105u8, 115u8, 104u8, 110u8, 115u8,\n+                        105u8, 0u8, 115u8, 105u8, 100u8, 115u8, 107u8, 0u8, 115u8, 107u8, 114u8,\n+                        115u8, 108u8, 0u8, 115u8, 108u8, 105u8, 115u8, 108u8, 121u8, 115u8, 109u8,\n+                        0u8, 115u8, 109u8, 97u8, 115u8, 109u8, 100u8, 115u8, 109u8, 106u8, 115u8,\n+                        109u8, 110u8, 115u8, 109u8, 112u8, 115u8, 109u8, 115u8, 115u8, 110u8, 0u8,\n+                        115u8, 110u8, 98u8, 115u8, 110u8, 107u8, 115u8, 111u8, 0u8, 115u8, 111u8,\n+                        103u8, 115u8, 111u8, 117u8, 115u8, 113u8, 0u8, 115u8, 114u8, 0u8, 115u8,\n+                        114u8, 98u8, 115u8, 114u8, 110u8, 115u8, 114u8, 114u8, 115u8, 114u8, 120u8,\n+                        115u8, 115u8, 0u8, 115u8, 115u8, 121u8, 115u8, 116u8, 0u8, 115u8, 116u8,\n+                        113u8, 115u8, 117u8, 0u8, 115u8, 117u8, 107u8, 115u8, 117u8, 115u8, 115u8,\n+                        118u8, 0u8, 115u8, 119u8, 0u8, 115u8, 119u8, 98u8, 115u8, 119u8, 99u8,\n+                        115u8, 119u8, 103u8, 115u8, 119u8, 118u8, 115u8, 120u8, 110u8, 115u8,\n+                        121u8, 108u8, 115u8, 121u8, 114u8, 115u8, 122u8, 108u8, 116u8, 97u8, 0u8,\n+                        116u8, 97u8, 106u8, 116u8, 98u8, 119u8, 116u8, 99u8, 121u8, 116u8, 100u8,\n+                        100u8, 116u8, 100u8, 103u8, 116u8, 100u8, 104u8, 116u8, 100u8, 117u8,\n+                        116u8, 101u8, 0u8, 116u8, 101u8, 109u8, 116u8, 101u8, 111u8, 116u8, 101u8,\n+                        116u8, 116u8, 103u8, 0u8, 116u8, 104u8, 0u8, 116u8, 104u8, 108u8, 116u8,\n+                        104u8, 113u8, 116u8, 104u8, 114u8, 116u8, 105u8, 0u8, 116u8, 105u8, 103u8,\n+                        116u8, 105u8, 118u8, 116u8, 107u8, 0u8, 116u8, 107u8, 108u8, 116u8, 107u8,\n+                        114u8, 116u8, 107u8, 116u8, 116u8, 108u8, 0u8, 116u8, 108u8, 121u8, 116u8,\n+                        109u8, 104u8, 116u8, 110u8, 0u8, 116u8, 111u8, 0u8, 116u8, 111u8, 103u8,\n+                        116u8, 111u8, 107u8, 116u8, 112u8, 105u8, 116u8, 114u8, 0u8, 116u8, 114u8,\n+                        117u8, 116u8, 114u8, 118u8, 116u8, 114u8, 119u8, 116u8, 115u8, 0u8, 116u8,\n+                        115u8, 100u8, 116u8, 115u8, 102u8, 116u8, 115u8, 103u8, 116u8, 115u8,\n+                        106u8, 116u8, 116u8, 0u8, 116u8, 116u8, 106u8, 116u8, 116u8, 115u8, 116u8,\n+                        116u8, 116u8, 116u8, 117u8, 109u8, 116u8, 118u8, 108u8, 116u8, 119u8,\n+                        113u8, 116u8, 120u8, 103u8, 116u8, 120u8, 111u8, 116u8, 121u8, 0u8, 116u8,\n+                        121u8, 118u8, 116u8, 122u8, 109u8, 117u8, 100u8, 105u8, 117u8, 100u8,\n+                        109u8, 117u8, 103u8, 0u8, 117u8, 103u8, 97u8, 117u8, 107u8, 0u8, 117u8,\n+                        108u8, 105u8, 117u8, 109u8, 98u8, 117u8, 110u8, 114u8, 117u8, 110u8, 120u8,\n+                        117u8, 114u8, 0u8, 117u8, 122u8, 0u8, 118u8, 97u8, 105u8, 118u8, 101u8,\n+                        0u8, 118u8, 101u8, 99u8, 118u8, 101u8, 112u8, 118u8, 105u8, 0u8, 118u8,\n+                        105u8, 99u8, 118u8, 108u8, 115u8, 118u8, 109u8, 102u8, 118u8, 109u8, 119u8,\n+                        118u8, 111u8, 0u8, 118u8, 111u8, 116u8, 118u8, 114u8, 111u8, 118u8, 117u8,\n+                        110u8, 119u8, 97u8, 0u8, 119u8, 97u8, 101u8, 119u8, 97u8, 108u8, 119u8,\n+                        97u8, 114u8, 119u8, 98u8, 112u8, 119u8, 98u8, 113u8, 119u8, 98u8, 114u8,\n+                        119u8, 108u8, 115u8, 119u8, 110u8, 105u8, 119u8, 111u8, 0u8, 119u8, 115u8,\n+                        103u8, 119u8, 116u8, 109u8, 119u8, 117u8, 117u8, 120u8, 97u8, 118u8, 120u8,\n+                        99u8, 111u8, 120u8, 99u8, 114u8, 120u8, 104u8, 0u8, 120u8, 108u8, 99u8,\n+                        120u8, 108u8, 100u8, 120u8, 109u8, 102u8, 120u8, 109u8, 110u8, 120u8,\n+                        109u8, 114u8, 120u8, 110u8, 97u8, 120u8, 110u8, 114u8, 120u8, 111u8, 103u8,\n+                        120u8, 112u8, 114u8, 120u8, 115u8, 97u8, 120u8, 115u8, 114u8, 121u8, 97u8,\n+                        111u8, 121u8, 97u8, 112u8, 121u8, 97u8, 118u8, 121u8, 98u8, 98u8, 121u8,\n+                        105u8, 0u8, 121u8, 111u8, 0u8, 121u8, 114u8, 108u8, 121u8, 117u8, 97u8,\n+                        121u8, 117u8, 101u8, 122u8, 97u8, 0u8, 122u8, 97u8, 103u8, 122u8, 100u8,\n+                        106u8, 122u8, 101u8, 97u8, 122u8, 103u8, 104u8, 122u8, 104u8, 0u8, 122u8,\n+                        104u8, 120u8, 122u8, 107u8, 116u8, 122u8, 108u8, 109u8, 122u8, 109u8,\n+                        105u8, 122u8, 117u8, 0u8, 122u8, 122u8, 97u8,\n+                    ])\n+                },\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        69u8, 84u8, 0u8, 71u8, 69u8, 0u8, 71u8, 72u8, 0u8, 73u8, 68u8, 0u8, 85u8,\n+                        71u8, 0u8, 71u8, 72u8, 0u8, 66u8, 84u8, 0u8, 82u8, 85u8, 0u8, 73u8, 82u8,\n+                        0u8, 84u8, 78u8, 0u8, 90u8, 65u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8,\n+                        84u8, 78u8, 0u8, 71u8, 72u8, 0u8, 73u8, 81u8, 0u8, 88u8, 75u8, 0u8, 82u8,\n+                        85u8, 0u8, 69u8, 84u8, 0u8, 78u8, 71u8, 0u8, 69u8, 83u8, 0u8, 78u8, 71u8,\n+                        0u8, 73u8, 68u8, 0u8, 84u8, 71u8, 0u8, 69u8, 71u8, 0u8, 73u8, 82u8, 0u8,\n+                        67u8, 76u8, 0u8, 66u8, 79u8, 0u8, 68u8, 90u8, 0u8, 83u8, 65u8, 0u8, 77u8,\n+                        65u8, 0u8, 69u8, 71u8, 0u8, 73u8, 78u8, 0u8, 84u8, 90u8, 0u8, 85u8, 83u8,\n+                        0u8, 69u8, 83u8, 0u8, 67u8, 65u8, 0u8, 82u8, 85u8, 0u8, 73u8, 78u8, 0u8,\n+                        66u8, 79u8, 0u8, 65u8, 90u8, 0u8, 82u8, 85u8, 0u8, 80u8, 75u8, 0u8, 73u8,\n+                        68u8, 0u8, 78u8, 80u8, 0u8, 65u8, 84u8, 0u8, 67u8, 77u8, 0u8, 67u8, 77u8,\n+                        0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 67u8, 73u8, 0u8, 66u8, 89u8, 0u8,\n+                        83u8, 68u8, 0u8, 90u8, 77u8, 0u8, 73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 67u8,\n+                        77u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 66u8, 71u8,\n+                        0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 84u8, 82u8, 0u8, 73u8, 78u8, 0u8,\n+                        73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 86u8, 85u8, 0u8, 80u8, 72u8, 0u8, 78u8,\n+                        71u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8, 83u8, 78u8, 0u8, 67u8, 77u8,\n+                        0u8, 80u8, 72u8, 0u8, 67u8, 65u8, 0u8, 77u8, 89u8, 0u8, 86u8, 78u8, 0u8,\n+                        77u8, 76u8, 0u8, 77u8, 76u8, 0u8, 66u8, 68u8, 0u8, 67u8, 78u8, 0u8, 73u8,\n+                        78u8, 0u8, 73u8, 82u8, 0u8, 67u8, 73u8, 0u8, 70u8, 82u8, 0u8, 73u8, 78u8,\n+                        0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 66u8, 65u8, 0u8, 76u8, 82u8, 0u8,\n+                        67u8, 77u8, 0u8, 80u8, 72u8, 0u8, 80u8, 75u8, 0u8, 82u8, 85u8, 0u8, 89u8,\n+                        84u8, 0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 71u8, 81u8, 0u8, 69u8, 82u8,\n+                        0u8, 67u8, 77u8, 0u8, 77u8, 76u8, 0u8, 69u8, 83u8, 0u8, 85u8, 83u8, 0u8,\n+                        78u8, 71u8, 0u8, 66u8, 68u8, 0u8, 82u8, 85u8, 0u8, 80u8, 72u8, 0u8, 85u8,\n+                        71u8, 0u8, 71u8, 85u8, 0u8, 70u8, 77u8, 0u8, 82u8, 85u8, 0u8, 85u8, 83u8,\n+                        0u8, 67u8, 65u8, 0u8, 85u8, 83u8, 0u8, 85u8, 83u8, 0u8, 75u8, 72u8, 0u8,\n+                        86u8, 78u8, 0u8, 73u8, 81u8, 0u8, 67u8, 65u8, 0u8, 77u8, 78u8, 0u8, 70u8,\n+                        82u8, 0u8, 69u8, 71u8, 0u8, 80u8, 72u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8,\n+                        0u8, 85u8, 65u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 83u8, 67u8, 0u8,\n+                        67u8, 90u8, 0u8, 80u8, 76u8, 0u8, 67u8, 65u8, 0u8, 77u8, 77u8, 0u8, 82u8,\n+                        85u8, 0u8, 82u8, 85u8, 0u8, 71u8, 66u8, 0u8, 68u8, 75u8, 0u8, 67u8, 73u8,\n+                        0u8, 85u8, 83u8, 0u8, 82u8, 85u8, 0u8, 75u8, 69u8, 0u8, 73u8, 78u8, 0u8,\n+                        68u8, 69u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 78u8, 69u8, 0u8, 78u8,\n+                        71u8, 0u8, 67u8, 73u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8, 68u8, 69u8,\n+                        0u8, 77u8, 76u8, 0u8, 77u8, 89u8, 0u8, 78u8, 80u8, 0u8, 67u8, 77u8, 0u8,\n+                        77u8, 86u8, 0u8, 83u8, 78u8, 0u8, 66u8, 70u8, 0u8, 66u8, 84u8, 0u8, 75u8,\n+                        69u8, 0u8, 71u8, 72u8, 0u8, 78u8, 71u8, 0u8, 73u8, 84u8, 0u8, 69u8, 71u8,\n+                        0u8, 77u8, 77u8, 0u8, 71u8, 82u8, 0u8, 85u8, 83u8, 0u8, 48u8, 48u8, 49u8,\n+                        69u8, 83u8, 0u8, 73u8, 78u8, 0u8, 85u8, 83u8, 0u8, 69u8, 69u8, 0u8, 73u8,\n+                        84u8, 0u8, 69u8, 83u8, 0u8, 67u8, 77u8, 0u8, 69u8, 83u8, 0u8, 73u8, 82u8,\n+                        0u8, 71u8, 81u8, 0u8, 83u8, 78u8, 0u8, 77u8, 76u8, 0u8, 70u8, 73u8, 0u8,\n+                        83u8, 68u8, 0u8, 80u8, 72u8, 0u8, 83u8, 69u8, 0u8, 70u8, 74u8, 0u8, 70u8,\n+                        79u8, 0u8, 66u8, 74u8, 0u8, 70u8, 82u8, 0u8, 85u8, 83u8, 0u8, 70u8, 82u8,\n+                        0u8, 68u8, 69u8, 0u8, 68u8, 69u8, 0u8, 67u8, 77u8, 0u8, 87u8, 70u8, 0u8,\n+                        71u8, 78u8, 0u8, 78u8, 69u8, 0u8, 73u8, 84u8, 0u8, 78u8, 71u8, 0u8, 83u8,\n+                        68u8, 0u8, 78u8, 76u8, 0u8, 73u8, 69u8, 0u8, 71u8, 72u8, 0u8, 77u8, 68u8,\n+                        0u8, 67u8, 78u8, 0u8, 73u8, 68u8, 0u8, 73u8, 78u8, 0u8, 73u8, 82u8, 0u8,\n+                        71u8, 70u8, 0u8, 71u8, 66u8, 0u8, 69u8, 84u8, 0u8, 78u8, 80u8, 0u8, 75u8,\n+                        73u8, 0u8, 80u8, 75u8, 0u8, 80u8, 75u8, 0u8, 69u8, 83u8, 0u8, 73u8, 82u8,\n+                        0u8, 80u8, 89u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8,\n+                        78u8, 76u8, 0u8, 85u8, 65u8, 0u8, 67u8, 89u8, 0u8, 73u8, 78u8, 0u8, 67u8,\n+                        72u8, 0u8, 73u8, 78u8, 0u8, 66u8, 82u8, 0u8, 67u8, 79u8, 0u8, 71u8, 72u8,\n+                        0u8, 75u8, 69u8, 0u8, 73u8, 77u8, 0u8, 78u8, 80u8, 0u8, 67u8, 65u8, 0u8,\n+                        78u8, 71u8, 0u8, 67u8, 78u8, 0u8, 85u8, 83u8, 0u8, 65u8, 70u8, 0u8, 73u8,\n+                        76u8, 0u8, 73u8, 78u8, 0u8, 70u8, 74u8, 0u8, 80u8, 72u8, 0u8, 84u8, 82u8,\n+                        0u8, 67u8, 78u8, 0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 85u8, 83u8, 0u8,\n+                        80u8, 72u8, 0u8, 80u8, 75u8, 0u8, 80u8, 71u8, 0u8, 73u8, 78u8, 0u8, 73u8,\n+                        78u8, 0u8, 72u8, 82u8, 0u8, 68u8, 69u8, 0u8, 67u8, 78u8, 0u8, 72u8, 84u8,\n+                        0u8, 72u8, 85u8, 0u8, 67u8, 65u8, 0u8, 65u8, 77u8, 0u8, 78u8, 65u8, 0u8,\n+                        48u8, 48u8, 49u8, 77u8, 89u8, 0u8, 78u8, 71u8, 0u8, 73u8, 68u8, 0u8, 84u8,\n+                        71u8, 0u8, 78u8, 71u8, 0u8, 67u8, 78u8, 0u8, 85u8, 83u8, 0u8, 80u8, 72u8,\n+                        0u8, 73u8, 68u8, 0u8, 82u8, 85u8, 0u8, 48u8, 48u8, 49u8, 73u8, 83u8, 0u8,\n+                        73u8, 84u8, 0u8, 67u8, 65u8, 0u8, 73u8, 76u8, 0u8, 82u8, 85u8, 0u8, 74u8,\n+                        80u8, 0u8, 74u8, 77u8, 0u8, 48u8, 48u8, 49u8, 67u8, 77u8, 0u8, 85u8, 65u8,\n+                        0u8, 84u8, 90u8, 0u8, 78u8, 80u8, 0u8, 68u8, 75u8, 0u8, 73u8, 68u8, 0u8,\n+                        73u8, 68u8, 0u8, 71u8, 69u8, 0u8, 85u8, 90u8, 0u8, 68u8, 90u8, 0u8, 77u8,\n+                        77u8, 0u8, 78u8, 71u8, 0u8, 75u8, 69u8, 0u8, 77u8, 76u8, 0u8, 73u8, 68u8,\n+                        0u8, 82u8, 85u8, 0u8, 78u8, 69u8, 0u8, 78u8, 71u8, 0u8, 90u8, 87u8, 0u8,\n+                        84u8, 90u8, 0u8, 84u8, 71u8, 0u8, 84u8, 72u8, 0u8, 67u8, 86u8, 0u8, 67u8,\n+                        77u8, 0u8, 67u8, 73u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 67u8, 68u8,\n+                        0u8, 73u8, 68u8, 0u8, 66u8, 82u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8,\n+                        73u8, 78u8, 0u8, 77u8, 76u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 75u8,\n+                        69u8, 0u8, 84u8, 82u8, 0u8, 78u8, 65u8, 0u8, 76u8, 65u8, 0u8, 75u8, 90u8,\n+                        0u8, 67u8, 77u8, 0u8, 71u8, 76u8, 0u8, 75u8, 69u8, 0u8, 75u8, 72u8, 0u8,\n+                        65u8, 79u8, 0u8, 73u8, 78u8, 0u8, 71u8, 87u8, 0u8, 75u8, 82u8, 0u8, 82u8,\n+                        85u8, 0u8, 73u8, 78u8, 0u8, 70u8, 77u8, 0u8, 76u8, 82u8, 0u8, 82u8, 85u8,\n+                        0u8, 83u8, 76u8, 0u8, 80u8, 72u8, 0u8, 82u8, 85u8, 0u8, 73u8, 78u8, 0u8,\n+                        73u8, 78u8, 0u8, 84u8, 90u8, 0u8, 67u8, 77u8, 0u8, 68u8, 69u8, 0u8, 77u8,\n+                        89u8, 0u8, 84u8, 82u8, 0u8, 82u8, 85u8, 0u8, 82u8, 85u8, 0u8, 73u8, 68u8,\n+                        0u8, 80u8, 75u8, 0u8, 71u8, 66u8, 0u8, 67u8, 65u8, 0u8, 73u8, 78u8, 0u8,\n+                        84u8, 72u8, 0u8, 80u8, 75u8, 0u8, 75u8, 71u8, 0u8, 77u8, 89u8, 0u8, 77u8,\n+                        89u8, 0u8, 86u8, 65u8, 0u8, 71u8, 82u8, 0u8, 73u8, 76u8, 0u8, 84u8, 90u8,\n+                        0u8, 80u8, 75u8, 0u8, 85u8, 71u8, 0u8, 76u8, 85u8, 0u8, 82u8, 85u8, 0u8,\n+                        73u8, 68u8, 0u8, 67u8, 78u8, 0u8, 73u8, 78u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n+                        71u8, 0u8, 78u8, 76u8, 0u8, 78u8, 80u8, 0u8, 73u8, 84u8, 0u8, 67u8, 65u8,\n+                        0u8, 67u8, 78u8, 0u8, 73u8, 68u8, 0u8, 73u8, 82u8, 0u8, 85u8, 83u8, 0u8,\n+                        73u8, 78u8, 0u8, 73u8, 84u8, 0u8, 67u8, 68u8, 0u8, 76u8, 65u8, 0u8, 67u8,\n+                        68u8, 0u8, 90u8, 77u8, 0u8, 73u8, 82u8, 0u8, 76u8, 84u8, 0u8, 76u8, 86u8,\n+                        0u8, 67u8, 68u8, 0u8, 67u8, 68u8, 0u8, 75u8, 69u8, 0u8, 75u8, 69u8, 0u8,\n+                        73u8, 82u8, 0u8, 76u8, 86u8, 0u8, 84u8, 72u8, 0u8, 67u8, 78u8, 0u8, 84u8,\n+                        82u8, 0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8,\n+                        0u8, 73u8, 68u8, 0u8, 71u8, 77u8, 0u8, 75u8, 69u8, 0u8, 77u8, 88u8, 0u8,\n+                        82u8, 85u8, 0u8, 80u8, 72u8, 0u8, 73u8, 68u8, 0u8, 83u8, 76u8, 0u8, 75u8,\n+                        69u8, 0u8, 84u8, 72u8, 0u8, 77u8, 85u8, 0u8, 77u8, 71u8, 0u8, 77u8, 90u8,\n+                        0u8, 67u8, 77u8, 0u8, 78u8, 80u8, 0u8, 84u8, 90u8, 0u8, 77u8, 72u8, 0u8,\n+                        78u8, 90u8, 0u8, 67u8, 65u8, 0u8, 73u8, 68u8, 0u8, 77u8, 75u8, 0u8, 73u8,\n+                        78u8, 0u8, 83u8, 68u8, 0u8, 77u8, 78u8, 0u8, 73u8, 78u8, 0u8, 77u8, 77u8,\n+                        0u8, 82u8, 79u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 66u8, 70u8, 0u8,\n+                        73u8, 78u8, 0u8, 78u8, 80u8, 0u8, 82u8, 85u8, 0u8, 66u8, 68u8, 0u8, 77u8,\n+                        89u8, 0u8, 77u8, 84u8, 0u8, 73u8, 78u8, 0u8, 67u8, 77u8, 0u8, 85u8, 83u8,\n+                        0u8, 80u8, 75u8, 0u8, 77u8, 76u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8,\n+                        85u8, 83u8, 0u8, 90u8, 87u8, 0u8, 77u8, 77u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n+                        71u8, 0u8, 73u8, 82u8, 0u8, 73u8, 82u8, 0u8, 78u8, 82u8, 0u8, 67u8, 78u8,\n+                        0u8, 73u8, 84u8, 0u8, 78u8, 65u8, 0u8, 78u8, 79u8, 0u8, 77u8, 88u8, 0u8,\n+                        90u8, 87u8, 0u8, 77u8, 90u8, 0u8, 68u8, 69u8, 0u8, 78u8, 80u8, 0u8, 78u8,\n+                        80u8, 0u8, 78u8, 65u8, 0u8, 77u8, 90u8, 0u8, 77u8, 88u8, 0u8, 77u8, 88u8,\n+                        0u8, 73u8, 68u8, 0u8, 78u8, 85u8, 0u8, 73u8, 78u8, 0u8, 78u8, 76u8, 0u8,\n+                        67u8, 77u8, 0u8, 78u8, 79u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8, 78u8,\n+                        79u8, 0u8, 84u8, 72u8, 0u8, 73u8, 78u8, 0u8, 83u8, 69u8, 0u8, 71u8, 78u8,\n+                        0u8, 90u8, 65u8, 0u8, 67u8, 65u8, 0u8, 90u8, 65u8, 0u8, 73u8, 78u8, 0u8,\n+                        83u8, 83u8, 0u8, 85u8, 83u8, 0u8, 67u8, 78u8, 0u8, 77u8, 87u8, 0u8, 84u8,\n+                        90u8, 0u8, 85u8, 71u8, 0u8, 71u8, 72u8, 0u8, 70u8, 82u8, 0u8, 67u8, 65u8,\n+                        0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 69u8, 84u8, 0u8, 73u8, 78u8, 0u8,\n+                        71u8, 69u8, 0u8, 85u8, 83u8, 0u8, 77u8, 78u8, 0u8, 49u8, 52u8, 51u8, 73u8,\n+                        78u8, 0u8, 80u8, 72u8, 0u8, 73u8, 82u8, 0u8, 80u8, 72u8, 0u8, 65u8, 87u8,\n+                        0u8, 80u8, 87u8, 0u8, 70u8, 82u8, 0u8, 78u8, 71u8, 0u8, 85u8, 83u8, 0u8,\n+                        67u8, 65u8, 0u8, 73u8, 82u8, 0u8, 68u8, 69u8, 0u8, 76u8, 66u8, 0u8, 83u8,\n+                        66u8, 0u8, 73u8, 78u8, 0u8, 75u8, 69u8, 0u8, 80u8, 76u8, 0u8, 73u8, 84u8,\n+                        0u8, 71u8, 82u8, 0u8, 70u8, 77u8, 0u8, 73u8, 78u8, 0u8, 67u8, 65u8, 0u8,\n+                        80u8, 75u8, 0u8, 73u8, 82u8, 0u8, 48u8, 48u8, 49u8, 65u8, 70u8, 0u8, 66u8,\n+                        82u8, 0u8, 71u8, 65u8, 0u8, 80u8, 69u8, 0u8, 71u8, 84u8, 0u8, 69u8, 67u8,\n+                        0u8, 73u8, 78u8, 0u8, 82u8, 69u8, 0u8, 73u8, 68u8, 0u8, 73u8, 84u8, 0u8,\n+                        77u8, 77u8, 0u8, 73u8, 78u8, 0u8, 77u8, 65u8, 0u8, 78u8, 80u8, 0u8, 66u8,\n+                        68u8, 0u8, 67u8, 72u8, 0u8, 70u8, 73u8, 0u8, 67u8, 72u8, 0u8, 73u8, 82u8,\n+                        0u8, 83u8, 69u8, 0u8, 66u8, 73u8, 0u8, 77u8, 90u8, 0u8, 82u8, 79u8, 0u8,\n+                        73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 70u8, 74u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n+                        65u8, 0u8, 83u8, 66u8, 0u8, 82u8, 87u8, 0u8, 84u8, 90u8, 0u8, 74u8, 80u8,\n+                        0u8, 73u8, 78u8, 0u8, 71u8, 72u8, 0u8, 82u8, 85u8, 0u8, 75u8, 69u8, 0u8,\n+                        73u8, 68u8, 0u8, 73u8, 78u8, 0u8, 83u8, 78u8, 0u8, 73u8, 78u8, 0u8, 84u8,\n+                        90u8, 0u8, 73u8, 84u8, 0u8, 73u8, 78u8, 0u8, 73u8, 84u8, 0u8, 71u8, 66u8,\n+                        0u8, 80u8, 75u8, 0u8, 73u8, 84u8, 0u8, 73u8, 82u8, 0u8, 78u8, 79u8, 0u8,\n+                        67u8, 73u8, 0u8, 77u8, 90u8, 0u8, 77u8, 88u8, 0u8, 77u8, 76u8, 0u8, 67u8,\n+                        70u8, 0u8, 73u8, 69u8, 0u8, 76u8, 84u8, 0u8, 77u8, 65u8, 0u8, 77u8, 77u8,\n+                        0u8, 76u8, 75u8, 0u8, 69u8, 84u8, 0u8, 83u8, 75u8, 0u8, 80u8, 75u8, 0u8,\n+                        83u8, 73u8, 0u8, 80u8, 76u8, 0u8, 73u8, 68u8, 0u8, 87u8, 83u8, 0u8, 83u8,\n+                        69u8, 0u8, 65u8, 79u8, 0u8, 83u8, 69u8, 0u8, 70u8, 73u8, 0u8, 73u8, 76u8,\n+                        0u8, 70u8, 73u8, 0u8, 90u8, 87u8, 0u8, 77u8, 89u8, 0u8, 77u8, 76u8, 0u8,\n+                        83u8, 79u8, 0u8, 85u8, 90u8, 0u8, 84u8, 72u8, 0u8, 65u8, 76u8, 0u8, 82u8,\n+                        83u8, 0u8, 73u8, 78u8, 0u8, 83u8, 82u8, 0u8, 83u8, 78u8, 0u8, 73u8, 78u8,\n+                        0u8, 90u8, 65u8, 0u8, 69u8, 82u8, 0u8, 90u8, 65u8, 0u8, 68u8, 69u8, 0u8,\n+                        73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 71u8, 78u8, 0u8, 83u8, 69u8, 0u8, 84u8,\n+                        90u8, 0u8, 89u8, 84u8, 0u8, 67u8, 68u8, 0u8, 68u8, 69u8, 0u8, 73u8, 78u8,\n+                        0u8, 73u8, 68u8, 0u8, 66u8, 68u8, 0u8, 73u8, 81u8, 0u8, 80u8, 76u8, 0u8,\n+                        73u8, 78u8, 0u8, 78u8, 80u8, 0u8, 80u8, 72u8, 0u8, 73u8, 78u8, 0u8, 67u8,\n+                        78u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 77u8, 89u8, 0u8, 73u8, 78u8,\n+                        0u8, 83u8, 76u8, 0u8, 85u8, 71u8, 0u8, 84u8, 76u8, 0u8, 84u8, 74u8, 0u8,\n+                        84u8, 72u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 69u8,\n+                        84u8, 0u8, 69u8, 82u8, 0u8, 78u8, 71u8, 0u8, 84u8, 77u8, 0u8, 84u8, 75u8,\n+                        0u8, 65u8, 90u8, 0u8, 78u8, 80u8, 0u8, 80u8, 72u8, 0u8, 65u8, 90u8, 0u8,\n+                        78u8, 69u8, 0u8, 90u8, 65u8, 0u8, 84u8, 79u8, 0u8, 77u8, 87u8, 0u8, 48u8,\n+                        48u8, 49u8, 80u8, 71u8, 0u8, 84u8, 82u8, 0u8, 84u8, 82u8, 0u8, 84u8, 87u8,\n+                        0u8, 80u8, 75u8, 0u8, 90u8, 65u8, 0u8, 71u8, 82u8, 0u8, 78u8, 80u8, 0u8,\n+                        80u8, 72u8, 0u8, 66u8, 84u8, 0u8, 82u8, 85u8, 0u8, 85u8, 71u8, 0u8, 84u8,\n+                        72u8, 0u8, 65u8, 90u8, 0u8, 77u8, 87u8, 0u8, 84u8, 86u8, 0u8, 78u8, 69u8,\n+                        0u8, 67u8, 78u8, 0u8, 73u8, 78u8, 0u8, 80u8, 70u8, 0u8, 82u8, 85u8, 0u8,\n+                        77u8, 65u8, 0u8, 82u8, 85u8, 0u8, 82u8, 85u8, 0u8, 67u8, 78u8, 0u8, 83u8,\n+                        89u8, 0u8, 85u8, 65u8, 0u8, 70u8, 77u8, 0u8, 65u8, 79u8, 0u8, 73u8, 78u8,\n+                        0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 85u8, 90u8, 0u8, 76u8, 82u8, 0u8,\n+                        90u8, 65u8, 0u8, 73u8, 84u8, 0u8, 82u8, 85u8, 0u8, 86u8, 78u8, 0u8, 83u8,\n+                        88u8, 0u8, 66u8, 69u8, 0u8, 68u8, 69u8, 0u8, 77u8, 90u8, 0u8, 48u8, 48u8,\n+                        49u8, 82u8, 85u8, 0u8, 69u8, 69u8, 0u8, 84u8, 90u8, 0u8, 66u8, 69u8, 0u8,\n+                        67u8, 72u8, 0u8, 69u8, 84u8, 0u8, 80u8, 72u8, 0u8, 65u8, 85u8, 0u8, 73u8,\n+                        78u8, 0u8, 73u8, 78u8, 0u8, 87u8, 70u8, 0u8, 75u8, 77u8, 0u8, 83u8, 78u8,\n+                        0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8, 66u8, 82u8, 0u8,\n+                        85u8, 90u8, 0u8, 84u8, 82u8, 0u8, 90u8, 65u8, 0u8, 84u8, 82u8, 0u8, 84u8,\n+                        82u8, 0u8, 71u8, 69u8, 0u8, 67u8, 78u8, 0u8, 83u8, 68u8, 0u8, 83u8, 65u8,\n+                        0u8, 73u8, 78u8, 0u8, 85u8, 71u8, 0u8, 73u8, 82u8, 0u8, 89u8, 69u8, 0u8,\n+                        78u8, 80u8, 0u8, 77u8, 90u8, 0u8, 70u8, 77u8, 0u8, 67u8, 77u8, 0u8, 67u8,\n+                        77u8, 0u8, 48u8, 48u8, 49u8, 78u8, 71u8, 0u8, 66u8, 82u8, 0u8, 77u8, 88u8,\n+                        0u8, 72u8, 75u8, 0u8, 67u8, 78u8, 0u8, 83u8, 68u8, 0u8, 75u8, 77u8, 0u8,\n+                        78u8, 76u8, 0u8, 77u8, 65u8, 0u8, 67u8, 78u8, 0u8, 67u8, 78u8, 0u8, 67u8,\n+                        78u8, 0u8, 84u8, 71u8, 0u8, 77u8, 89u8, 0u8, 90u8, 65u8, 0u8, 84u8, 82u8,\n+                        0u8,\n+                    ])\n+                },\n+            )\n+        },\n+        ls2r: unsafe {\n+            #[allow(unused_unsafe)]\n+            ::zerovec::ZeroMap2d::from_parts_unchecked(\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        97u8, 114u8, 99u8, 97u8, 122u8, 0u8, 99u8, 117u8, 0u8, 101u8, 110u8, 0u8,\n+                        102u8, 102u8, 0u8, 103u8, 114u8, 99u8, 107u8, 107u8, 0u8, 107u8, 117u8,\n+                        0u8, 107u8, 121u8, 0u8, 108u8, 105u8, 102u8, 109u8, 97u8, 110u8, 109u8,\n+                        110u8, 0u8, 112u8, 97u8, 0u8, 112u8, 97u8, 108u8, 115u8, 100u8, 0u8, 116u8,\n+                        103u8, 0u8, 117u8, 103u8, 0u8, 117u8, 110u8, 114u8, 117u8, 122u8, 0u8,\n+                        121u8, 117u8, 101u8, 122u8, 104u8, 0u8,\n+                    ])\n+                },\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        2u8, 0u8, 0u8, 0u8, 3u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 5u8, 0u8, 0u8,\n+                        0u8, 6u8, 0u8, 0u8, 0u8, 7u8, 0u8, 0u8, 0u8, 8u8, 0u8, 0u8, 0u8, 10u8, 0u8,\n+                        0u8, 0u8, 12u8, 0u8, 0u8, 0u8, 13u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8,\n+                        15u8, 0u8, 0u8, 0u8, 16u8, 0u8, 0u8, 0u8, 17u8, 0u8, 0u8, 0u8, 20u8, 0u8,\n+                        0u8, 0u8, 21u8, 0u8, 0u8, 0u8, 22u8, 0u8, 0u8, 0u8, 23u8, 0u8, 0u8, 0u8,\n+                        24u8, 0u8, 0u8, 0u8, 25u8, 0u8, 0u8, 0u8, 28u8, 0u8, 0u8, 0u8,\n+                    ])\n+                },\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        78u8, 98u8, 97u8, 116u8, 80u8, 97u8, 108u8, 109u8, 65u8, 114u8, 97u8, 98u8,\n+                        71u8, 108u8, 97u8, 103u8, 83u8, 104u8, 97u8, 119u8, 65u8, 100u8, 108u8,\n+                        109u8, 76u8, 105u8, 110u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8,\n+                        97u8, 98u8, 89u8, 101u8, 122u8, 105u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8,\n+                        116u8, 110u8, 76u8, 105u8, 109u8, 98u8, 78u8, 107u8, 111u8, 111u8, 77u8,\n+                        111u8, 110u8, 103u8, 65u8, 114u8, 97u8, 98u8, 80u8, 104u8, 108u8, 112u8,\n+                        68u8, 101u8, 118u8, 97u8, 75u8, 104u8, 111u8, 106u8, 83u8, 105u8, 110u8,\n+                        100u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8,\n+                        118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8, 115u8, 66u8,\n+                        111u8, 112u8, 111u8, 72u8, 97u8, 110u8, 98u8, 72u8, 97u8, 110u8, 116u8,\n+                    ])\n+                },\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        74u8, 79u8, 0u8, 83u8, 89u8, 0u8, 73u8, 82u8, 0u8, 66u8, 71u8, 0u8, 71u8,\n+                        66u8, 0u8, 71u8, 78u8, 0u8, 71u8, 82u8, 0u8, 67u8, 78u8, 0u8, 73u8, 81u8,\n+                        0u8, 71u8, 69u8, 0u8, 67u8, 78u8, 0u8, 84u8, 82u8, 0u8, 73u8, 78u8, 0u8,\n+                        71u8, 78u8, 0u8, 67u8, 78u8, 0u8, 80u8, 75u8, 0u8, 67u8, 78u8, 0u8, 73u8,\n+                        78u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 75u8, 90u8,\n+                        0u8, 78u8, 80u8, 0u8, 65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 84u8, 87u8, 0u8,\n+                        84u8, 87u8, 0u8, 84u8, 87u8, 0u8,\n+                    ])\n+                },\n+            )\n+        },\n+    };"}, {"sha": "a485a5af64ca56e15f8e1a3fb5485c4388966105", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/mod.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,4 @@\n+// @generated\n+pub mod likelysubtags_v1;\n+pub mod parents_v1;\n+pub mod supplement;"}, {"sha": "f07b4b80649efa273bdb807a71f5d31b0de40632", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/parents_v1.rs", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,207 @@\n+// @generated\n+type DataStruct = < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker as :: icu_provider :: DataMarker > :: Yokeable ;\n+pub static DATA: litemap::LiteMap<&str, &DataStruct, &[(&str, &DataStruct)]> =\n+    litemap::LiteMap::from_sorted_store_unchecked(&[(\"und\", UND)]);\n+static UND: &DataStruct = &::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1 {\n+    parents: unsafe {\n+        #[allow(unused_unsafe)]\n+        ::zerovec::ZeroMap::from_parts_unchecked(\n+            unsafe {\n+                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n+                    131u8, 0u8, 0u8, 0u8, 0u8, 0u8, 6u8, 0u8, 11u8, 0u8, 16u8, 0u8, 21u8, 0u8,\n+                    26u8, 0u8, 31u8, 0u8, 36u8, 0u8, 41u8, 0u8, 46u8, 0u8, 51u8, 0u8, 56u8, 0u8,\n+                    61u8, 0u8, 66u8, 0u8, 71u8, 0u8, 76u8, 0u8, 81u8, 0u8, 86u8, 0u8, 91u8, 0u8,\n+                    96u8, 0u8, 101u8, 0u8, 106u8, 0u8, 111u8, 0u8, 116u8, 0u8, 121u8, 0u8, 126u8,\n+                    0u8, 131u8, 0u8, 136u8, 0u8, 141u8, 0u8, 146u8, 0u8, 151u8, 0u8, 156u8, 0u8,\n+                    161u8, 0u8, 166u8, 0u8, 171u8, 0u8, 176u8, 0u8, 181u8, 0u8, 186u8, 0u8, 191u8,\n+                    0u8, 196u8, 0u8, 201u8, 0u8, 206u8, 0u8, 211u8, 0u8, 216u8, 0u8, 221u8, 0u8,\n+                    226u8, 0u8, 231u8, 0u8, 236u8, 0u8, 241u8, 0u8, 246u8, 0u8, 251u8, 0u8, 0u8,\n+                    1u8, 5u8, 1u8, 10u8, 1u8, 15u8, 1u8, 20u8, 1u8, 25u8, 1u8, 30u8, 1u8, 35u8,\n+                    1u8, 40u8, 1u8, 45u8, 1u8, 50u8, 1u8, 55u8, 1u8, 60u8, 1u8, 65u8, 1u8, 70u8,\n+                    1u8, 75u8, 1u8, 80u8, 1u8, 85u8, 1u8, 90u8, 1u8, 95u8, 1u8, 100u8, 1u8, 105u8,\n+                    1u8, 110u8, 1u8, 115u8, 1u8, 120u8, 1u8, 125u8, 1u8, 130u8, 1u8, 135u8, 1u8,\n+                    140u8, 1u8, 145u8, 1u8, 150u8, 1u8, 155u8, 1u8, 160u8, 1u8, 165u8, 1u8, 170u8,\n+                    1u8, 175u8, 1u8, 180u8, 1u8, 185u8, 1u8, 190u8, 1u8, 195u8, 1u8, 200u8, 1u8,\n+                    205u8, 1u8, 210u8, 1u8, 215u8, 1u8, 220u8, 1u8, 225u8, 1u8, 230u8, 1u8, 235u8,\n+                    1u8, 240u8, 1u8, 245u8, 1u8, 250u8, 1u8, 255u8, 1u8, 4u8, 2u8, 9u8, 2u8, 14u8,\n+                    2u8, 19u8, 2u8, 24u8, 2u8, 29u8, 2u8, 34u8, 2u8, 39u8, 2u8, 44u8, 2u8, 49u8,\n+                    2u8, 54u8, 2u8, 59u8, 2u8, 64u8, 2u8, 71u8, 2u8, 73u8, 2u8, 75u8, 2u8, 77u8,\n+                    2u8, 82u8, 2u8, 87u8, 2u8, 92u8, 2u8, 97u8, 2u8, 102u8, 2u8, 107u8, 2u8, 112u8,\n+                    2u8, 117u8, 2u8, 122u8, 2u8, 127u8, 2u8, 132u8, 2u8, 101u8, 110u8, 45u8, 49u8,\n+                    53u8, 48u8, 101u8, 110u8, 45u8, 65u8, 71u8, 101u8, 110u8, 45u8, 65u8, 73u8,\n+                    101u8, 110u8, 45u8, 65u8, 84u8, 101u8, 110u8, 45u8, 65u8, 85u8, 101u8, 110u8,\n+                    45u8, 66u8, 66u8, 101u8, 110u8, 45u8, 66u8, 69u8, 101u8, 110u8, 45u8, 66u8,\n+                    77u8, 101u8, 110u8, 45u8, 66u8, 83u8, 101u8, 110u8, 45u8, 66u8, 87u8, 101u8,\n+                    110u8, 45u8, 66u8, 90u8, 101u8, 110u8, 45u8, 67u8, 67u8, 101u8, 110u8, 45u8,\n+                    67u8, 72u8, 101u8, 110u8, 45u8, 67u8, 75u8, 101u8, 110u8, 45u8, 67u8, 77u8,\n+                    101u8, 110u8, 45u8, 67u8, 88u8, 101u8, 110u8, 45u8, 67u8, 89u8, 101u8, 110u8,\n+                    45u8, 68u8, 69u8, 101u8, 110u8, 45u8, 68u8, 71u8, 101u8, 110u8, 45u8, 68u8,\n+                    75u8, 101u8, 110u8, 45u8, 68u8, 77u8, 101u8, 110u8, 45u8, 69u8, 82u8, 101u8,\n+                    110u8, 45u8, 70u8, 73u8, 101u8, 110u8, 45u8, 70u8, 74u8, 101u8, 110u8, 45u8,\n+                    70u8, 75u8, 101u8, 110u8, 45u8, 70u8, 77u8, 101u8, 110u8, 45u8, 71u8, 66u8,\n+                    101u8, 110u8, 45u8, 71u8, 68u8, 101u8, 110u8, 45u8, 71u8, 71u8, 101u8, 110u8,\n+                    45u8, 71u8, 72u8, 101u8, 110u8, 45u8, 71u8, 73u8, 101u8, 110u8, 45u8, 71u8,\n+                    77u8, 101u8, 110u8, 45u8, 71u8, 89u8, 101u8, 110u8, 45u8, 72u8, 75u8, 101u8,\n+                    110u8, 45u8, 73u8, 69u8, 101u8, 110u8, 45u8, 73u8, 76u8, 101u8, 110u8, 45u8,\n+                    73u8, 77u8, 101u8, 110u8, 45u8, 73u8, 78u8, 101u8, 110u8, 45u8, 73u8, 79u8,\n+                    101u8, 110u8, 45u8, 74u8, 69u8, 101u8, 110u8, 45u8, 74u8, 77u8, 101u8, 110u8,\n+                    45u8, 75u8, 69u8, 101u8, 110u8, 45u8, 75u8, 73u8, 101u8, 110u8, 45u8, 75u8,\n+                    78u8, 101u8, 110u8, 45u8, 75u8, 89u8, 101u8, 110u8, 45u8, 76u8, 67u8, 101u8,\n+                    110u8, 45u8, 76u8, 82u8, 101u8, 110u8, 45u8, 76u8, 83u8, 101u8, 110u8, 45u8,\n+                    77u8, 71u8, 101u8, 110u8, 45u8, 77u8, 79u8, 101u8, 110u8, 45u8, 77u8, 83u8,\n+                    101u8, 110u8, 45u8, 77u8, 84u8, 101u8, 110u8, 45u8, 77u8, 85u8, 101u8, 110u8,\n+                    45u8, 77u8, 86u8, 101u8, 110u8, 45u8, 77u8, 87u8, 101u8, 110u8, 45u8, 77u8,\n+                    89u8, 101u8, 110u8, 45u8, 78u8, 65u8, 101u8, 110u8, 45u8, 78u8, 70u8, 101u8,\n+                    110u8, 45u8, 78u8, 71u8, 101u8, 110u8, 45u8, 78u8, 76u8, 101u8, 110u8, 45u8,\n+                    78u8, 82u8, 101u8, 110u8, 45u8, 78u8, 85u8, 101u8, 110u8, 45u8, 78u8, 90u8,\n+                    101u8, 110u8, 45u8, 80u8, 71u8, 101u8, 110u8, 45u8, 80u8, 75u8, 101u8, 110u8,\n+                    45u8, 80u8, 78u8, 101u8, 110u8, 45u8, 80u8, 87u8, 101u8, 110u8, 45u8, 82u8,\n+                    87u8, 101u8, 110u8, 45u8, 83u8, 66u8, 101u8, 110u8, 45u8, 83u8, 67u8, 101u8,\n+                    110u8, 45u8, 83u8, 68u8, 101u8, 110u8, 45u8, 83u8, 69u8, 101u8, 110u8, 45u8,\n+                    83u8, 71u8, 101u8, 110u8, 45u8, 83u8, 72u8, 101u8, 110u8, 45u8, 83u8, 73u8,\n+                    101u8, 110u8, 45u8, 83u8, 76u8, 101u8, 110u8, 45u8, 83u8, 83u8, 101u8, 110u8,\n+                    45u8, 83u8, 88u8, 101u8, 110u8, 45u8, 83u8, 90u8, 101u8, 110u8, 45u8, 84u8,\n+                    67u8, 101u8, 110u8, 45u8, 84u8, 75u8, 101u8, 110u8, 45u8, 84u8, 79u8, 101u8,\n+                    110u8, 45u8, 84u8, 84u8, 101u8, 110u8, 45u8, 84u8, 86u8, 101u8, 110u8, 45u8,\n+                    84u8, 90u8, 101u8, 110u8, 45u8, 85u8, 71u8, 101u8, 110u8, 45u8, 86u8, 67u8,\n+                    101u8, 110u8, 45u8, 86u8, 71u8, 101u8, 110u8, 45u8, 86u8, 85u8, 101u8, 110u8,\n+                    45u8, 87u8, 83u8, 101u8, 110u8, 45u8, 90u8, 65u8, 101u8, 110u8, 45u8, 90u8,\n+                    77u8, 101u8, 110u8, 45u8, 90u8, 87u8, 101u8, 115u8, 45u8, 65u8, 82u8, 101u8,\n+                    115u8, 45u8, 66u8, 79u8, 101u8, 115u8, 45u8, 66u8, 82u8, 101u8, 115u8, 45u8,\n+                    66u8, 90u8, 101u8, 115u8, 45u8, 67u8, 76u8, 101u8, 115u8, 45u8, 67u8, 79u8,\n+                    101u8, 115u8, 45u8, 67u8, 82u8, 101u8, 115u8, 45u8, 67u8, 85u8, 101u8, 115u8,\n+                    45u8, 68u8, 79u8, 101u8, 115u8, 45u8, 69u8, 67u8, 101u8, 115u8, 45u8, 71u8,\n+                    84u8, 101u8, 115u8, 45u8, 72u8, 78u8, 101u8, 115u8, 45u8, 77u8, 88u8, 101u8,\n+                    115u8, 45u8, 78u8, 73u8, 101u8, 115u8, 45u8, 80u8, 65u8, 101u8, 115u8, 45u8,\n+                    80u8, 69u8, 101u8, 115u8, 45u8, 80u8, 82u8, 101u8, 115u8, 45u8, 80u8, 89u8,\n+                    101u8, 115u8, 45u8, 83u8, 86u8, 101u8, 115u8, 45u8, 85u8, 83u8, 101u8, 115u8,\n+                    45u8, 85u8, 89u8, 101u8, 115u8, 45u8, 86u8, 69u8, 104u8, 105u8, 45u8, 76u8,\n+                    97u8, 116u8, 110u8, 104u8, 116u8, 110u8, 98u8, 110u8, 110u8, 112u8, 116u8,\n+                    45u8, 65u8, 79u8, 112u8, 116u8, 45u8, 67u8, 72u8, 112u8, 116u8, 45u8, 67u8,\n+                    86u8, 112u8, 116u8, 45u8, 70u8, 82u8, 112u8, 116u8, 45u8, 71u8, 81u8, 112u8,\n+                    116u8, 45u8, 71u8, 87u8, 112u8, 116u8, 45u8, 76u8, 85u8, 112u8, 116u8, 45u8,\n+                    77u8, 79u8, 112u8, 116u8, 45u8, 77u8, 90u8, 112u8, 116u8, 45u8, 83u8, 84u8,\n+                    112u8, 116u8, 45u8, 84u8, 76u8, 122u8, 104u8, 45u8, 72u8, 97u8, 110u8, 116u8,\n+                    45u8, 77u8, 79u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8,\n+                    48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 115u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8,\n+                    57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8,\n+                    115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8,\n+                    57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8,\n+                    115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8,\n+                    57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8,\n+                    115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 73u8, 78u8, 0u8, 102u8, 114u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 72u8, 84u8, 0u8, 110u8, 111u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 110u8, 111u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8,\n+                    84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8,\n+                    112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 122u8, 104u8, 0u8, 1u8, 72u8, 97u8, 110u8,\n+                    116u8, 1u8, 72u8, 75u8, 0u8,\n+                ])\n+            },\n+        )\n+    },\n+};"}, {"sha": "7df33c12e3d5a6c28a06547c4af3f31b325aa268", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/supplement/co_v1.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,41 @@\n+// @generated\n+type DataStruct = < :: icu_provider_adapters :: fallback :: provider :: CollationFallbackSupplementV1Marker as :: icu_provider :: DataMarker > :: Yokeable ;\n+pub static DATA: litemap::LiteMap<&str, &DataStruct, &[(&str, &DataStruct)]> =\n+    litemap::LiteMap::from_sorted_store_unchecked(&[(\"und\", UND)]);\n+static UND: &DataStruct =\n+    &::icu_provider_adapters::fallback::provider::LocaleFallbackSupplementV1 {\n+        parents: unsafe {\n+            #[allow(unused_unsafe)]\n+            ::zerovec::ZeroMap::from_parts_unchecked(\n+                unsafe {\n+                    ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n+                        1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 121u8, 117u8, 101u8,\n+                    ])\n+                },\n+                unsafe {\n+                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                        122u8, 104u8, 0u8, 1u8, 72u8, 97u8, 110u8, 116u8, 0u8, 0u8, 0u8, 0u8,\n+                    ])\n+                },\n+            )\n+        },\n+        unicode_extension_defaults: unsafe {\n+            #[allow(unused_unsafe)]\n+            ::zerovec::ZeroMap2d::from_parts_unchecked(\n+                unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(&[99u8, 111u8]) },\n+                unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(&[2u8, 0u8, 0u8, 0u8]) },\n+                unsafe {\n+                    ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n+                        2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 122u8, 104u8, 122u8, 104u8, 45u8,\n+                        72u8, 97u8, 110u8, 116u8,\n+                    ])\n+                },\n+                unsafe {\n+                    ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n+                        2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 6u8, 0u8, 112u8, 105u8, 110u8, 121u8, 105u8,\n+                        110u8, 115u8, 116u8, 114u8, 111u8, 107u8, 101u8,\n+                    ])\n+                },\n+            )\n+        },\n+    };"}, {"sha": "62957134f0755fd40905fdf63d9de5afa3cc1e5c", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/supplement/mod.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,2 @@\n+// @generated\n+pub mod co_v1;"}, {"sha": "9cae549e118d55dc9300e0c1d284cf56489724a9", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1.rs", "status": "added", "additions": 1161, "deletions": 0, "changes": 1161, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,1161 @@\n+// @generated\n+type DataStruct = <::icu_list::provider::AndListV1Marker as ::icu_provider::DataMarker>::Yokeable;\n+pub static DATA: litemap::LiteMap<&str, &DataStruct, &[(&str, &DataStruct)]> =\n+    litemap::LiteMap::from_sorted_store_unchecked(&[\n+        (\"en\", EN),\n+        (\"es\", ES),\n+        (\"fr\", FR),\n+        (\"it\", IT),\n+        (\"ja\", JA),\n+        (\"pt\", PT),\n+        (\"ru\", RU),\n+        (\"tr\", TR),\n+        (\"und\", UND),\n+        (\"zh\", ZH_ZH_HANS),\n+        (\"zh-Hans\", ZH_ZH_HANS),\n+        (\"zh-Hant\", ZH_HANT),\n+    ]);\n+static EN: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", and \", 6u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" and \", 5u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", & \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" & \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+]);\n+static ES: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n+                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n+                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n+                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n+                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n+                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n+                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n+                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n+                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n+                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n+                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n+                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n+                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n+                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n+                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n+                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n+                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                    0u8, 35u8, 0u8, 0u8, 0u8,\n+                ])\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n+                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n+                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n+                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n+                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n+                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n+                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n+                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n+                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n+                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n+                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n+                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n+                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n+                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n+                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n+                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n+                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                    0u8, 35u8, 0u8, 0u8, 0u8,\n+                ])\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n+                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n+                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n+                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n+                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n+                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n+                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n+                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n+                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n+                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n+                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n+                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n+                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n+                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n+                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n+                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n+                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                    0u8, 35u8, 0u8, 0u8, 0u8,\n+                ])\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n+                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n+                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n+                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n+                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n+                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n+                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n+                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n+                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n+                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n+                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n+                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n+                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n+                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n+                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n+                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n+                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                    0u8, 35u8, 0u8, 0u8, 0u8,\n+                ])\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n+                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n+                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n+                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n+                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n+                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n+                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n+                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n+                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n+                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n+                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n+                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n+                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n+                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n+                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n+                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n+                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                    0u8, 35u8, 0u8, 0u8, 0u8,\n+                ])\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n+                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n+                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n+                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n+                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n+                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n+                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n+                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n+                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n+                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n+                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n+                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n+                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n+                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n+                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n+                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n+                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n+                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n+                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                    0u8, 35u8, 0u8, 0u8, 0u8,\n+                ])\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+]);\n+static FR: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+]);\n+static IT: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+]);\n+static JA: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+]);\n+static PT: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+]);\n+static RU: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+]);\n+static TR: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+]);\n+static UND: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+]);\n+static ZH_HANT: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+]);\n+static ZH_ZH_HANS: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+]);"}, {"sha": "931822513cc06fe771488385e4da26ef1dea6e80", "filename": "compiler/rustc_baked_icu_data/src/data/list/mod.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,2 @@\n+// @generated\n+pub mod and_v1;"}, {"sha": "a6a71c79cd1ba547a5d8a662bb49a2a85940866b", "filename": "compiler/rustc_baked_icu_data/src/data/mod.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,90 @@\n+// @generated\n+mod fallback;\n+mod list;\n+/// This data provider was programmatically generated by [`icu_datagen`](\n+/// https://unicode-org.github.io/icu4x-docs/doc/icu_datagen/enum.Out.html#variant.Module).\n+#[non_exhaustive]\n+pub struct BakedDataProvider;\n+use ::icu_provider::prelude::*;\n+impl DataProvider<::icu_list::provider::AndListV1Marker> for BakedDataProvider {\n+    fn load(\n+        &self,\n+        req: DataRequest,\n+    ) -> Result<DataResponse<::icu_list::provider::AndListV1Marker>, DataError> {\n+        Ok(DataResponse {\n+            metadata: Default::default(),\n+            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(\n+                *list::and_v1::DATA\n+                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())\n+                    .ok_or_else(|| {\n+                        DataErrorKind::MissingLocale\n+                            .with_req(::icu_list::provider::AndListV1Marker::KEY, req)\n+                    })?,\n+            ))),\n+        })\n+    }\n+}\n+impl DataProvider<::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker>\n+    for BakedDataProvider\n+{\n+    fn load(\n+        &self,\n+        req: DataRequest,\n+    ) -> Result<\n+        DataResponse<\n+            ::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker,\n+        >,\n+        DataError,\n+    > {\n+        Ok(DataResponse {\n+            metadata: Default::default(),\n+            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(\n+                *fallback::supplement::co_v1::DATA.get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).ok_or_else(|| {\n+                    DataErrorKind::MissingLocale.with_req(::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker::KEY, req)\n+                })?,\n+            ))),\n+        })\n+    }\n+}\n+impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker>\n+    for BakedDataProvider\n+{\n+    fn load(\n+        &self,\n+        req: DataRequest,\n+    ) -> Result<\n+        DataResponse<\n+            ::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker,\n+        >,\n+        DataError,\n+    > {\n+        Ok(DataResponse {\n+            metadata: Default::default(),\n+            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(\n+                *fallback::likelysubtags_v1::DATA.get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).ok_or_else(|| {\n+                    DataErrorKind::MissingLocale.with_req(::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker::KEY, req)\n+                })?,\n+            ))),\n+        })\n+    }\n+}\n+impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker>\n+    for BakedDataProvider\n+{\n+    fn load(\n+        &self,\n+        req: DataRequest,\n+    ) -> Result<\n+        DataResponse<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker>,\n+        DataError,\n+    > {\n+        Ok(DataResponse {\n+            metadata: Default::default(),\n+            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(\n+                *fallback::parents_v1::DATA.get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).ok_or_else(|| {\n+                    DataErrorKind::MissingLocale.with_req(::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker::KEY, req)\n+                })?,\n+            ))),\n+        })\n+    }\n+}"}, {"sha": "4651e03f77166857e3d193c190789c89e6b9f24f", "filename": "compiler/rustc_baked_icu_data/src/lib.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_baked_icu_data%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,46 @@\n+//! This crate contains pre-baked ICU4X data, generated by `icu4x-datagen`. The tool\n+//! fetches locale data from CLDR and transforms them into const code in statics that\n+//! ICU4X can load, via databake. `lib.rs` in this crate is manually written, but all\n+//! other code is generated.\n+//!\n+//! This crate can be regenerated when there's a new CLDR version, though that is unlikely\n+//! to result in changes in most cases (currently this only covers list formatting data, which\n+//! is rather stable). It may need to be regenerated when updating ICU4X versions, especially\n+//! across major versions, in case it fails to compile after an update.\n+//!\n+//! It must be regenerated when adding new locales to Rust, or if Rust's usage of ICU4X\n+//! grows to need more kinds of data.\n+//!\n+//! To regenerate the data, run this command:\n+//!\n+//! ```text\n+//! icu4x-datagen -W --pretty --fingerprint --use-separate-crates \\\n+//! --format mod -l en es fr it ja pt ru tr zh zh-Hans zh-Hant \\\n+//! -k list/and@1 fallback/likelysubtags@1 fallback/parents@1 fallback/supplement/co@1 \\\n+//! --cldr-tag latest --icuexport-tag latest -o src/data\n+//! ```\n+#![allow(elided_lifetimes_in_paths)]\n+\n+mod data {\n+    include!(\"data/mod.rs\");\n+    include!(\"data/any.rs\");\n+}\n+\n+pub use data::BakedDataProvider;\n+\n+pub const fn baked_data_provider() -> BakedDataProvider {\n+    data::BakedDataProvider\n+}\n+\n+pub mod supported_locales {\n+    pub const EN: icu_locid::Locale = icu_locid::locale!(\"en\");\n+    pub const ES: icu_locid::Locale = icu_locid::locale!(\"es\");\n+    pub const FR: icu_locid::Locale = icu_locid::locale!(\"fr\");\n+    pub const IT: icu_locid::Locale = icu_locid::locale!(\"it\");\n+    pub const JA: icu_locid::Locale = icu_locid::locale!(\"ja\");\n+    pub const PT: icu_locid::Locale = icu_locid::locale!(\"pt\");\n+    pub const RU: icu_locid::Locale = icu_locid::locale!(\"ru\");\n+    pub const TR: icu_locid::Locale = icu_locid::locale!(\"tr\");\n+    pub const ZH_HANS: icu_locid::Locale = icu_locid::locale!(\"zh-Hans\");\n+    pub const ZH_HANT: icu_locid::Locale = icu_locid::locale!(\"zh-Hant\");\n+}"}, {"sha": "163170a1d1aa0cfda50cdf3a44854d6ac9a1129f", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -19,7 +19,7 @@ extern crate tracing;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_data_structures::vec_map::VecMap;\n-use rustc_errors::{Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::bit_set::ChunkedBitSet;\n@@ -192,13 +192,13 @@ fn do_mir_borrowck<'tcx>(\n         }\n     }\n \n-    let mut errors = error::BorrowckErrors::new();\n+    let mut errors = error::BorrowckErrors::new(infcx.tcx);\n \n     // Gather the upvars of a closure, if any.\n     let tables = tcx.typeck_opt_const_arg(def);\n-    if let Some(ErrorGuaranteed { .. }) = tables.tainted_by_errors {\n-        infcx.set_tainted_by_errors();\n-        errors.set_tainted_by_errors();\n+    if let Some(e) = tables.tainted_by_errors {\n+        infcx.set_tainted_by_errors(e);\n+        errors.set_tainted_by_errors(e);\n     }\n     let upvars: Vec<_> = tables\n         .closure_min_captures_flattened(def.did)\n@@ -2260,6 +2260,7 @@ mod error {\n     use super::*;\n \n     pub struct BorrowckErrors<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n         /// This field keeps track of move errors that are to be reported for given move indices.\n         ///\n         /// There are situations where many errors can be reported for a single move out (see #53807)\n@@ -2282,28 +2283,33 @@ mod error {\n         tainted_by_errors: Option<ErrorGuaranteed>,\n     }\n \n-    impl BorrowckErrors<'_> {\n-        pub fn new() -> Self {\n+    impl<'tcx> BorrowckErrors<'tcx> {\n+        pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n             BorrowckErrors {\n+                tcx,\n                 buffered_move_errors: BTreeMap::new(),\n                 buffered: Default::default(),\n                 tainted_by_errors: None,\n             }\n         }\n \n-        // FIXME(eddyb) this is a suboptimal API because `tainted_by_errors` is\n-        // set before any emission actually happens (weakening the guarantee).\n         pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorGuaranteed>) {\n-            self.tainted_by_errors = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n+            if let None = self.tainted_by_errors {\n+                self.tainted_by_errors = Some(\n+                    self.tcx\n+                        .sess\n+                        .delay_span_bug(t.span.clone(), \"diagnostic buffered but not emitted\"),\n+                )\n+            }\n             t.buffer(&mut self.buffered);\n         }\n \n         pub fn buffer_non_error_diag(&mut self, t: DiagnosticBuilder<'_, ()>) {\n             t.buffer(&mut self.buffered);\n         }\n \n-        pub fn set_tainted_by_errors(&mut self) {\n-            self.tainted_by_errors = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n+        pub fn set_tainted_by_errors(&mut self, e: ErrorGuaranteed) {\n+            self.tainted_by_errors = Some(e);\n         }\n     }\n "}, {"sha": "4a12e1b1b92e0f22b180dc566f47f9db2bd989b0", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -303,7 +303,10 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n \n     if !nll_errors.is_empty() {\n         // Suppress unhelpful extra errors in `infer_opaque_types`.\n-        infcx.set_tainted_by_errors();\n+        infcx.set_tainted_by_errors(infcx.tcx.sess.delay_span_bug(\n+            body.span,\n+            \"`compute_regions` tainted `infcx` with errors but did not emit any errors\",\n+        ));\n     }\n \n     let remapped_opaque_tys = regioncx.infer_opaque_types(&infcx, opaque_type_values);"}, {"sha": "b9885952a893c55741e6e057f9c703f7adf45353", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -219,8 +219,8 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         instantiated_ty: OpaqueHiddenType<'tcx>,\n         origin: OpaqueTyOrigin,\n     ) -> Ty<'tcx> {\n-        if self.is_tainted_by_errors() {\n-            return self.tcx.ty_error();\n+        if let Some(e) = self.tainted_by_errors() {\n+            return self.tcx.ty_error_with_guaranteed(e);\n         }\n \n         let definition_ty = instantiated_ty"}, {"sha": "4b57bdfbc8fb1a689cab2d099d56813027ffaa08", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -3,8 +3,8 @@ use rustc_ast::{\n     ptr::P,\n     token,\n     tokenstream::{DelimSpan, TokenStream, TokenTree},\n-    BinOpKind, BorrowKind, Expr, ExprKind, ItemKind, MacArgs, MacCall, MacDelimiter, Mutability,\n-    Path, PathSegment, Stmt, StructRest, UnOp, UseTree, UseTreeKind, DUMMY_NODE_ID,\n+    BinOpKind, BorrowKind, Expr, ExprKind, ItemKind, MacArgs, MacCall, MacDelimiter, MethodCall,\n+    Mutability, Path, PathSegment, Stmt, StructRest, UnOp, UseTree, UseTreeKind, DUMMY_NODE_ID,\n };\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n@@ -242,9 +242,9 @@ impl<'cx, 'a> Context<'cx, 'a> {\n                 self.manage_cond_expr(prefix);\n                 self.manage_cond_expr(suffix);\n             }\n-            ExprKind::MethodCall(_, _,ref mut local_exprs, _) => {\n-                for local_expr in local_exprs.iter_mut() {\n-                    self.manage_cond_expr(local_expr);\n+            ExprKind::MethodCall(ref mut call) => {\n+                for arg in call.args.iter_mut() {\n+                    self.manage_cond_expr(arg);\n                 }\n             }\n             ExprKind::Path(_, Path { ref segments, .. }) if let &[ref path_segment] = &segments[..] => {\n@@ -296,7 +296,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::Block(_, _)\n             | ExprKind::Box(_)\n             | ExprKind::Break(_, _)\n-            | ExprKind::Closure(_, _, _, _, _, _, _)\n+            | ExprKind::Closure(_)\n             | ExprKind::ConstBlock(_)\n             | ExprKind::Continue(_)\n             | ExprKind::Err\n@@ -442,12 +442,12 @@ fn expr_addr_of_mut(cx: &ExtCtxt<'_>, sp: Span, e: P<Expr>) -> P<Expr> {\n \n fn expr_method_call(\n     cx: &ExtCtxt<'_>,\n-    path: PathSegment,\n+    seg: PathSegment,\n     receiver: P<Expr>,\n     args: Vec<P<Expr>>,\n     span: Span,\n ) -> P<Expr> {\n-    cx.expr(span, ExprKind::MethodCall(path, receiver, args, span))\n+    cx.expr(span, ExprKind::MethodCall(Box::new(MethodCall { seg, receiver, args, span })))\n }\n \n fn expr_paren(cx: &ExtCtxt<'_>, sp: Span, e: P<Expr>) -> P<Expr> {"}, {"sha": "1e22537c2ba42ac27202012738cf55ce004042b7", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -22,7 +22,19 @@ fn clif_sig_from_fn_abi<'tcx>(\n     default_call_conv: CallConv,\n     fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n ) -> Signature {\n-    let call_conv = match fn_abi.conv {\n+    let call_conv = conv_to_call_conv(fn_abi.conv, default_call_conv);\n+\n+    let inputs = fn_abi.args.iter().map(|arg_abi| arg_abi.get_abi_param(tcx).into_iter()).flatten();\n+\n+    let (return_ptr, returns) = fn_abi.ret.get_abi_return(tcx);\n+    // Sometimes the first param is an pointer to the place where the return value needs to be stored.\n+    let params: Vec<_> = return_ptr.into_iter().chain(inputs).collect();\n+\n+    Signature { params, returns, call_conv }\n+}\n+\n+pub(crate) fn conv_to_call_conv(c: Conv, default_call_conv: CallConv) -> CallConv {\n+    match c {\n         Conv::Rust | Conv::C => default_call_conv,\n         Conv::RustCold => CallConv::Cold,\n         Conv::X86_64SysV => CallConv::SystemV,\n@@ -38,15 +50,8 @@ fn clif_sig_from_fn_abi<'tcx>(\n         | Conv::X86VectorCall\n         | Conv::AmdGpuKernel\n         | Conv::AvrInterrupt\n-        | Conv::AvrNonBlockingInterrupt => todo!(\"{:?}\", fn_abi.conv),\n-    };\n-    let inputs = fn_abi.args.iter().map(|arg_abi| arg_abi.get_abi_param(tcx).into_iter()).flatten();\n-\n-    let (return_ptr, returns) = fn_abi.ret.get_abi_return(tcx);\n-    // Sometimes the first param is an pointer to the place where the return value needs to be stored.\n-    let params: Vec<_> = return_ptr.into_iter().chain(inputs).collect();\n-\n-    Signature { params, returns, call_conv }\n+        | Conv::AvrNonBlockingInterrupt => todo!(\"{:?}\", c),\n+    }\n }\n \n pub(crate) fn get_function_sig<'tcx>("}, {"sha": "f7434633ea442b40fa30f4a85370135e8c134017", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -63,10 +63,14 @@ pub(crate) fn maybe_create_entry_wrapper(\n                 AbiParam::new(m.target_config().pointer_type()),\n             ],\n             returns: vec![AbiParam::new(m.target_config().pointer_type() /*isize*/)],\n-            call_conv: CallConv::triple_default(m.isa().triple()),\n+            call_conv: crate::conv_to_call_conv(\n+                tcx.sess.target.options.entry_abi,\n+                CallConv::triple_default(m.isa().triple()),\n+            ),\n         };\n \n-        let cmain_func_id = m.declare_function(\"main\", Linkage::Export, &cmain_sig).unwrap();\n+        let entry_name = tcx.sess.target.options.entry_name.as_ref();\n+        let cmain_func_id = m.declare_function(entry_name, Linkage::Export, &cmain_sig).unwrap();\n \n         let instance = Instance::mono(tcx, rust_main_def_id).polymorphize(tcx);\n "}, {"sha": "2e71c3665daa75ed3e1b096c0ca1bac99e74584c", "filename": "compiler/rustc_codegen_gcc/src/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -425,8 +425,9 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     }\n \n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {\n-        if self.get_declared_value(\"main\").is_none() {\n-            Some(self.declare_cfn(\"main\", fn_type))\n+        let entry_name = self.sess().target.entry_name.as_ref();\n+        if self.get_declared_value(entry_name).is_none() {\n+            Some(self.declare_entry_fn(entry_name, fn_type, ()))\n         }\n         else {\n             // If the symbol already exists, it is an error: for example, the user wrote"}, {"sha": "eae77508c973abe0c0f50ab70a5e1935bcba246f", "filename": "compiler/rustc_codegen_gcc/src/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdeclare.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -65,13 +65,13 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         global\n     }\n \n-    pub fn declare_cfn(&self, name: &str, _fn_type: Type<'gcc>) -> RValue<'gcc> {\n+    pub fn declare_entry_fn(&self, name: &str, _fn_type: Type<'gcc>, callconv: () /*llvm::CCallConv*/) -> RValue<'gcc> {\n         // TODO(antoyo): use the fn_type parameter.\n         let const_string = self.context.new_type::<u8>().make_pointer().make_pointer();\n         let return_type = self.type_i32();\n         let variadic = false;\n         self.linkage.set(FunctionType::Exported);\n-        let func = declare_raw_fn(self, name, () /*llvm::CCallConv*/, return_type, &[self.type_i32(), const_string], variadic);\n+        let func = declare_raw_fn(self, name, callconv, return_type, &[self.type_i32(), const_string], variadic);\n         // NOTE: it is needed to set the current_func here as well, because get_fn() is not called\n         // for the main function.\n         *self.current_func.borrow_mut() = Some(func);"}, {"sha": "a6fd2a7de6bd04eb544c7d10f78111d8de5938e2", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -398,23 +398,7 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n     }\n \n     fn llvm_cconv(&self) -> llvm::CallConv {\n-        match self.conv {\n-            Conv::C | Conv::Rust | Conv::CCmseNonSecureCall => llvm::CCallConv,\n-            Conv::RustCold => llvm::ColdCallConv,\n-            Conv::AmdGpuKernel => llvm::AmdGpuKernel,\n-            Conv::AvrInterrupt => llvm::AvrInterrupt,\n-            Conv::AvrNonBlockingInterrupt => llvm::AvrNonBlockingInterrupt,\n-            Conv::ArmAapcs => llvm::ArmAapcsCallConv,\n-            Conv::Msp430Intr => llvm::Msp430Intr,\n-            Conv::PtxKernel => llvm::PtxKernel,\n-            Conv::X86Fastcall => llvm::X86FastcallCallConv,\n-            Conv::X86Intr => llvm::X86_Intr,\n-            Conv::X86Stdcall => llvm::X86StdcallCallConv,\n-            Conv::X86ThisCall => llvm::X86_ThisCall,\n-            Conv::X86VectorCall => llvm::X86_VectorCall,\n-            Conv::X86_64SysV => llvm::X86_64_SysV,\n-            Conv::X86_64Win64 => llvm::X86_64_Win64,\n-        }\n+        self.conv.into()\n     }\n \n     fn apply_attrs_llfn(&self, cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value) {\n@@ -596,3 +580,25 @@ impl<'tcx> AbiBuilderMethods<'tcx> for Builder<'_, '_, 'tcx> {\n         llvm::get_param(self.llfn(), index as c_uint)\n     }\n }\n+\n+impl From<Conv> for llvm::CallConv {\n+    fn from(conv: Conv) -> Self {\n+        match conv {\n+            Conv::C | Conv::Rust | Conv::CCmseNonSecureCall => llvm::CCallConv,\n+            Conv::RustCold => llvm::ColdCallConv,\n+            Conv::AmdGpuKernel => llvm::AmdGpuKernel,\n+            Conv::AvrInterrupt => llvm::AvrInterrupt,\n+            Conv::AvrNonBlockingInterrupt => llvm::AvrNonBlockingInterrupt,\n+            Conv::ArmAapcs => llvm::ArmAapcsCallConv,\n+            Conv::Msp430Intr => llvm::Msp430Intr,\n+            Conv::PtxKernel => llvm::PtxKernel,\n+            Conv::X86Fastcall => llvm::X86FastcallCallConv,\n+            Conv::X86Intr => llvm::X86_Intr,\n+            Conv::X86Stdcall => llvm::X86StdcallCallConv,\n+            Conv::X86ThisCall => llvm::X86_ThisCall,\n+            Conv::X86VectorCall => llvm::X86_VectorCall,\n+            Conv::X86_64SysV => llvm::X86_64_SysV,\n+            Conv::X86_64Win64 => llvm::X86_64_Win64,\n+        }\n+    }\n+}"}, {"sha": "4dcc7cd54477def2a32ab3ea7e06b9f566b08b0c", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -576,8 +576,14 @@ impl<'ll, 'tcx> MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {\n-        if self.get_declared_value(\"main\").is_none() {\n-            Some(self.declare_cfn(\"main\", llvm::UnnamedAddr::Global, fn_type))\n+        let entry_name = self.sess().target.entry_name.as_ref();\n+        if self.get_declared_value(entry_name).is_none() {\n+            Some(self.declare_entry_fn(\n+                entry_name,\n+                self.sess().target.entry_abi.into(),\n+                llvm::UnnamedAddr::Global,\n+                fn_type,\n+            ))\n         } else {\n             // If the symbol already exists, it is an error: for example, the user wrote\n             // #[no_mangle] extern \"C\" fn main(..) {..}"}, {"sha": "dc21a02cec44a144fef0c9704b3a16af5c1868d2", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -90,6 +90,28 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         declare_raw_fn(self, name, llvm::CCallConv, unnamed, visibility, fn_type)\n     }\n \n+    /// Declare an entry Function\n+    ///\n+    /// The ABI of this function can change depending on the target (although for now the same as\n+    /// `declare_cfn`)\n+    ///\n+    /// If there\u2019s a value with the same name already declared, the function will\n+    /// update the declaration and return existing Value instead.\n+    pub fn declare_entry_fn(\n+        &self,\n+        name: &str,\n+        callconv: llvm::CallConv,\n+        unnamed: llvm::UnnamedAddr,\n+        fn_type: &'ll Type,\n+    ) -> &'ll Value {\n+        let visibility = if self.tcx.sess.target.default_hidden_visibility {\n+            llvm::Visibility::Hidden\n+        } else {\n+            llvm::Visibility::Default\n+        };\n+        declare_raw_fn(self, name, callconv, unnamed, visibility, fn_type)\n+    }\n+\n     /// Declare a Rust function.\n     ///\n     /// If there\u2019s a value with the same name already declared, the function will"}, {"sha": "22f534d909ab6ca4ccab579d2003b535be8e8376", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -180,7 +180,8 @@ fn exported_symbols_provider_local<'tcx>(\n         .collect();\n \n     if tcx.entry_fn(()).is_some() {\n-        let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, \"main\"));\n+        let exported_symbol =\n+            ExportedSymbol::NoDefId(SymbolName::new(tcx, tcx.sess.target.entry_name.as_ref()));\n \n         symbols.push((\n             exported_symbol,"}, {"sha": "04e68b96455251c2eeaa8651be41b7c88685b78f", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 135, "deletions": 53, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,8 +1,12 @@\n use rustc_hir::def::DefKind;\n+use rustc_hir::LangItem;\n use rustc_middle::mir;\n+use rustc_middle::mir::interpret::PointerArithmetic;\n+use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use std::borrow::Borrow;\n use std::hash::Hash;\n+use std::ops::ControlFlow;\n \n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::fx::IndexEntry;\n@@ -17,58 +21,12 @@ use rustc_target::abi::{Align, Size};\n use rustc_target::spec::abi::Abi as CallAbi;\n \n use crate::interpret::{\n-    self, compile_time_machine, AllocId, ConstAllocation, Frame, ImmTy, InterpCx, InterpResult,\n-    OpTy, PlaceTy, Pointer, Scalar, StackPopUnwind,\n+    self, compile_time_machine, AllocId, ConstAllocation, FnVal, Frame, ImmTy, InterpCx,\n+    InterpResult, OpTy, PlaceTy, Pointer, Scalar, StackPopUnwind,\n };\n \n use super::error::*;\n \n-impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n-    /// \"Intercept\" a function call to a panic-related function\n-    /// because we have something special to do for it.\n-    /// If this returns successfully (`Ok`), the function should just be evaluated normally.\n-    fn hook_special_const_fn(\n-        &mut self,\n-        instance: ty::Instance<'tcx>,\n-        args: &[OpTy<'tcx>],\n-    ) -> InterpResult<'tcx, Option<ty::Instance<'tcx>>> {\n-        // All `#[rustc_do_not_const_check]` functions should be hooked here.\n-        let def_id = instance.def_id();\n-\n-        if Some(def_id) == self.tcx.lang_items().panic_display()\n-            || Some(def_id) == self.tcx.lang_items().begin_panic_fn()\n-        {\n-            // &str or &&str\n-            assert!(args.len() == 1);\n-\n-            let mut msg_place = self.deref_operand(&args[0])?;\n-            while msg_place.layout.ty.is_ref() {\n-                msg_place = self.deref_operand(&msg_place.into())?;\n-            }\n-\n-            let msg = Symbol::intern(self.read_str(&msg_place)?);\n-            let span = self.find_closest_untracked_caller_location();\n-            let (file, line, col) = self.location_triple_for_span(span);\n-            return Err(ConstEvalErrKind::Panic { msg, file, line, col }.into());\n-        } else if Some(def_id) == self.tcx.lang_items().panic_fmt() {\n-            // For panic_fmt, call const_panic_fmt instead.\n-            if let Some(const_panic_fmt) = self.tcx.lang_items().const_panic_fmt() {\n-                return Ok(Some(\n-                    ty::Instance::resolve(\n-                        *self.tcx,\n-                        ty::ParamEnv::reveal_all(),\n-                        const_panic_fmt,\n-                        self.tcx.intern_substs(&[]),\n-                    )\n-                    .unwrap()\n-                    .unwrap(),\n-                ));\n-            }\n-        }\n-        Ok(None)\n-    }\n-}\n-\n /// Extra machine state for CTFE, and the Machine instance\n pub struct CompileTimeInterpreter<'mir, 'tcx> {\n     /// For now, the number of terminators that can be evaluated before we throw a resource\n@@ -191,6 +149,125 @@ impl interpret::MayLeak for ! {\n }\n \n impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n+    /// \"Intercept\" a function call, because we have something special to do for it.\n+    /// All `#[rustc_do_not_const_check]` functions should be hooked here.\n+    /// If this returns `Some` function, which may be `instance` or a different function with\n+    /// compatible arguments, then evaluation should continue with that function.\n+    /// If this returns `None`, the function call has been handled and the function has returned.\n+    fn hook_special_const_fn(\n+        &mut self,\n+        instance: ty::Instance<'tcx>,\n+        args: &[OpTy<'tcx>],\n+        dest: &PlaceTy<'tcx>,\n+        ret: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx, Option<ty::Instance<'tcx>>> {\n+        let def_id = instance.def_id();\n+\n+        if Some(def_id) == self.tcx.lang_items().panic_display()\n+            || Some(def_id) == self.tcx.lang_items().begin_panic_fn()\n+        {\n+            // &str or &&str\n+            assert!(args.len() == 1);\n+\n+            let mut msg_place = self.deref_operand(&args[0])?;\n+            while msg_place.layout.ty.is_ref() {\n+                msg_place = self.deref_operand(&msg_place.into())?;\n+            }\n+\n+            let msg = Symbol::intern(self.read_str(&msg_place)?);\n+            let span = self.find_closest_untracked_caller_location();\n+            let (file, line, col) = self.location_triple_for_span(span);\n+            return Err(ConstEvalErrKind::Panic { msg, file, line, col }.into());\n+        } else if Some(def_id) == self.tcx.lang_items().panic_fmt() {\n+            // For panic_fmt, call const_panic_fmt instead.\n+            let const_def_id = self.tcx.require_lang_item(LangItem::ConstPanicFmt, None);\n+            let new_instance = ty::Instance::resolve(\n+                *self.tcx,\n+                ty::ParamEnv::reveal_all(),\n+                const_def_id,\n+                instance.substs,\n+            )\n+            .unwrap()\n+            .unwrap();\n+\n+            return Ok(Some(new_instance));\n+        } else if Some(def_id) == self.tcx.lang_items().align_offset_fn() {\n+            // For align_offset, we replace the function call if the pointer has no address.\n+            match self.align_offset(instance, args, dest, ret)? {\n+                ControlFlow::Continue(()) => return Ok(Some(instance)),\n+                ControlFlow::Break(()) => return Ok(None),\n+            }\n+        }\n+        Ok(Some(instance))\n+    }\n+\n+    /// `align_offset(ptr, target_align)` needs special handling in const eval, because the pointer\n+    /// may not have an address.\n+    ///\n+    /// If `ptr` does have a known address, then we return `CONTINUE` and the function call should\n+    /// proceed as normal.\n+    ///\n+    /// If `ptr` doesn't have an address, but its underlying allocation's alignment is at most\n+    /// `target_align`, then we call the function again with an dummy address relative to the\n+    /// allocation.\n+    ///\n+    /// If `ptr` doesn't have an address and `target_align` is stricter than the underlying\n+    /// allocation's alignment, then we return `usize::MAX` immediately.\n+    fn align_offset(\n+        &mut self,\n+        instance: ty::Instance<'tcx>,\n+        args: &[OpTy<'tcx>],\n+        dest: &PlaceTy<'tcx>,\n+        ret: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx, ControlFlow<()>> {\n+        assert_eq!(args.len(), 2);\n+\n+        let ptr = self.read_pointer(&args[0])?;\n+        let target_align = self.read_scalar(&args[1])?.to_machine_usize(self)?;\n+\n+        if !target_align.is_power_of_two() {\n+            throw_ub_format!(\"`align_offset` called with non-power-of-two align: {}\", target_align);\n+        }\n+\n+        match self.ptr_try_get_alloc_id(ptr) {\n+            Ok((alloc_id, offset, _extra)) => {\n+                let (_size, alloc_align, _kind) = self.get_alloc_info(alloc_id);\n+\n+                if target_align <= alloc_align.bytes() {\n+                    // Extract the address relative to the allocation base that is definitely\n+                    // sufficiently aligned and call `align_offset` again.\n+                    let addr = ImmTy::from_uint(offset.bytes(), args[0].layout).into();\n+                    let align = ImmTy::from_uint(target_align, args[1].layout).into();\n+                    let fn_abi = self.fn_abi_of_instance(instance, ty::List::empty())?;\n+\n+                    // We replace the entire entire function call with a \"tail call\".\n+                    // Note that this happens before the frame of the original function\n+                    // is pushed on the stack.\n+                    self.eval_fn_call(\n+                        FnVal::Instance(instance),\n+                        (CallAbi::Rust, fn_abi),\n+                        &[addr, align],\n+                        /* with_caller_location = */ false,\n+                        dest,\n+                        ret,\n+                        StackPopUnwind::NotAllowed,\n+                    )?;\n+                    Ok(ControlFlow::BREAK)\n+                } else {\n+                    // Not alignable in const, return `usize::MAX`.\n+                    let usize_max = Scalar::from_machine_usize(self.machine_usize_max(), self);\n+                    self.write_scalar(usize_max, dest)?;\n+                    self.return_to_block(ret)?;\n+                    Ok(ControlFlow::BREAK)\n+                }\n+            }\n+            Err(_addr) => {\n+                // The pointer has an address, continue with function call.\n+                Ok(ControlFlow::CONTINUE)\n+            }\n+        }\n+    }\n+\n     /// See documentation on the `ptr_guaranteed_cmp` intrinsic.\n     fn guaranteed_cmp(&mut self, a: Scalar, b: Scalar) -> InterpResult<'tcx, u8> {\n         Ok(match (a, b) {\n@@ -271,8 +348,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         instance: ty::Instance<'tcx>,\n         _abi: CallAbi,\n         args: &[OpTy<'tcx>],\n-        _dest: &PlaceTy<'tcx>,\n-        _ret: Option<mir::BasicBlock>,\n+        dest: &PlaceTy<'tcx>,\n+        ret: Option<mir::BasicBlock>,\n         _unwind: StackPopUnwind, // unwinding is not supported in consts\n     ) -> InterpResult<'tcx, Option<(&'mir mir::Body<'tcx>, ty::Instance<'tcx>)>> {\n         debug!(\"find_mir_or_eval_fn: {:?}\", instance);\n@@ -291,7 +368,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 }\n             }\n \n-            if let Some(new_instance) = ecx.hook_special_const_fn(instance, args)? {\n+            let Some(new_instance) = ecx.hook_special_const_fn(instance, args, dest, ret)? else {\n+                return Ok(None);\n+            };\n+\n+            if new_instance != instance {\n                 // We call another const fn instead.\n                 // However, we return the *original* instance to make backtraces work out\n                 // (and we hope this does not confuse the FnAbi checks too much).\n@@ -300,13 +381,14 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                     new_instance,\n                     _abi,\n                     args,\n-                    _dest,\n-                    _ret,\n+                    dest,\n+                    ret,\n                     _unwind,\n                 )?\n                 .map(|(body, _instance)| (body, instance)));\n             }\n         }\n+\n         // This is a const fn. Call it.\n         Ok(Some((ecx.load_mir(instance.def, None)?, instance)))\n     }"}, {"sha": "f59f34b874c19441de4178bf9bb4443e69242c8d", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -23,7 +23,7 @@ use super::{\n     MemPlaceMeta, Memory, MemoryKind, Operand, Place, PlaceTy, PointerArithmetic, Provenance,\n     Scalar, StackPopJump,\n };\n-use crate::transform::validate::equal_up_to_regions;\n+use crate::util;\n \n pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     /// Stores the `Machine` instance.\n@@ -354,8 +354,8 @@ pub(super) fn mir_assign_valid_types<'tcx>(\n     // Type-changing assignments can happen when subtyping is used. While\n     // all normal lifetimes are erased, higher-ranked types with their\n     // late-bound lifetimes are still around and can lead to type\n-    // differences. So we compare ignoring lifetimes.\n-    if equal_up_to_regions(tcx, param_env, src.ty, dest.ty) {\n+    // differences.\n+    if util::is_subtype(tcx, param_env, src.ty, dest.ty) {\n         // Make sure the layout is equal, too -- just to be safe. Miri really\n         // needs layout equality. For performance reason we skip this check when\n         // the types are equal. Equal types *can* have different layouts when"}, {"sha": "7940efcd2b11f1517a22631f0d5a4d77616ece7d", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -243,6 +243,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let discr_val = self.read_discriminant(&place.into())?.0;\n                 self.write_scalar(discr_val, dest)?;\n             }\n+            sym::exact_div => {\n+                let l = self.read_immediate(&args[0])?;\n+                let r = self.read_immediate(&args[1])?;\n+                self.exact_div(&l, &r, dest)?;\n+            }\n             sym::unchecked_shl\n             | sym::unchecked_shr\n             | sym::unchecked_add"}, {"sha": "860dee589805780addc061110736fa9db4c888af", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 2, "deletions": 57, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -2,7 +2,6 @@\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_index::bit_set::BitSet;\n-use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::visit::NonUseContext::VarDebugInfo;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n@@ -12,8 +11,7 @@ use rustc_middle::mir::{\n     ProjectionElem, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n     TerminatorKind, UnOp, START_BLOCK,\n };\n-use rustc_middle::ty::fold::BottomUpFolder;\n-use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n@@ -70,44 +68,6 @@ impl<'tcx> MirPass<'tcx> for Validator {\n     }\n }\n \n-/// Returns whether the two types are equal up to lifetimes.\n-/// All lifetimes, including higher-ranked ones, get ignored for this comparison.\n-/// (This is unlike the `erasing_regions` methods, which keep higher-ranked lifetimes for soundness reasons.)\n-///\n-/// The point of this function is to approximate \"equal up to subtyping\".  However,\n-/// the approximation is incorrect as variance is ignored.\n-pub fn equal_up_to_regions<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    param_env: ParamEnv<'tcx>,\n-    src: Ty<'tcx>,\n-    dest: Ty<'tcx>,\n-) -> bool {\n-    // Fast path.\n-    if src == dest {\n-        return true;\n-    }\n-\n-    // Normalize lifetimes away on both sides, then compare.\n-    let normalize = |ty: Ty<'tcx>| {\n-        tcx.try_normalize_erasing_regions(param_env, ty).unwrap_or(ty).fold_with(\n-            &mut BottomUpFolder {\n-                tcx,\n-                // FIXME: We erase all late-bound lifetimes, but this is not fully correct.\n-                // If you have a type like `<for<'a> fn(&'a u32) as SomeTrait>::Assoc`,\n-                // this is not necessarily equivalent to `<fn(&'static u32) as SomeTrait>::Assoc`,\n-                // since one may have an `impl SomeTrait for fn(&32)` and\n-                // `impl SomeTrait for fn(&'static u32)` at the same time which\n-                // specify distinct values for Assoc. (See also #56105)\n-                lt_op: |_| tcx.lifetimes.re_erased,\n-                // Leave consts and types unchanged.\n-                ct_op: |ct| ct,\n-                ty_op: |ty| ty,\n-            },\n-        )\n-    };\n-    tcx.infer_ctxt().build().can_eq(param_env, normalize(src), normalize(dest)).is_ok()\n-}\n-\n struct TypeChecker<'a, 'tcx> {\n     when: &'a str,\n     body: &'a Body<'tcx>,\n@@ -183,22 +143,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             return true;\n         }\n \n-        // Normalize projections and things like that.\n-        // Type-changing assignments can happen when subtyping is used. While\n-        // all normal lifetimes are erased, higher-ranked types with their\n-        // late-bound lifetimes are still around and can lead to type\n-        // differences. So we compare ignoring lifetimes.\n-\n-        // First, try with reveal_all. This might not work in some cases, as the predicates\n-        // can be cleared in reveal_all mode. We try the reveal first anyways as it is used\n-        // by some other passes like inlining as well.\n-        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n-        if equal_up_to_regions(self.tcx, param_env, src, dest) {\n-            return true;\n-        }\n-\n-        // If this fails, we can try it without the reveal.\n-        equal_up_to_regions(self.tcx, self.param_env, src, dest)\n+        crate::util::is_subtype(self.tcx, self.param_env, src, dest)\n     }\n }\n "}, {"sha": "a9cb191cc593fc0f7d5c116580712a35b930e59f", "filename": "compiler/rustc_const_eval/src/util/compare_types.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,63 @@\n+//! Routines to check for relations between fully inferred types.\n+//!\n+//! FIXME: Move this to a more general place. The utility of this extends to\n+//! other areas of the compiler as well.\n+\n+use rustc_infer::infer::{DefiningAnchor, TyCtxtInferExt};\n+use rustc_infer::traits::ObligationCause;\n+use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n+use rustc_trait_selection::traits::ObligationCtxt;\n+\n+/// Returns whether the two types are equal up to subtyping.\n+///\n+/// This is used in case we don't know the expected subtyping direction\n+/// and still want to check whether anything is broken.\n+pub fn is_equal_up_to_subtyping<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n+    src: Ty<'tcx>,\n+    dest: Ty<'tcx>,\n+) -> bool {\n+    // Fast path.\n+    if src == dest {\n+        return true;\n+    }\n+\n+    // Check for subtyping in either direction.\n+    is_subtype(tcx, param_env, src, dest) || is_subtype(tcx, param_env, dest, src)\n+}\n+\n+/// Returns whether `src` is a subtype of `dest`, i.e. `src <: dest`.\n+///\n+/// This mostly ignores opaque types as it can be used in constraining contexts\n+/// while still computing the final underlying type.\n+pub fn is_subtype<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n+    src: Ty<'tcx>,\n+    dest: Ty<'tcx>,\n+) -> bool {\n+    if src == dest {\n+        return true;\n+    }\n+\n+    let mut builder =\n+        tcx.infer_ctxt().ignoring_regions().with_opaque_type_inference(DefiningAnchor::Bubble);\n+    let infcx = builder.build();\n+    let ocx = ObligationCtxt::new(&infcx);\n+    let cause = ObligationCause::dummy();\n+    let src = ocx.normalize(cause.clone(), param_env, src);\n+    let dest = ocx.normalize(cause.clone(), param_env, dest);\n+    match ocx.sub(&cause, param_env, src, dest) {\n+        Ok(()) => {}\n+        Err(_) => return false,\n+    };\n+    let errors = ocx.select_all_or_error();\n+    // With `Reveal::All`, opaque types get normalized away, with `Reveal::UserFacing`\n+    // we would get unification errors because we're unable to look into opaque types,\n+    // even if they're constrained in our current function.\n+    //\n+    // It seems very unlikely that this hides any bugs.\n+    let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+    errors.is_empty()\n+}"}, {"sha": "76ea5a24e69edd8c1bd09cab7ece7e05eb345302", "filename": "compiler/rustc_const_eval/src/util/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -2,13 +2,15 @@ pub mod aggregate;\n mod alignment;\n mod call_kind;\n pub mod collect_writes;\n+mod compare_types;\n mod find_self_call;\n mod might_permit_raw_init;\n mod type_name;\n \n pub use self::aggregate::expand_aggregate;\n pub use self::alignment::is_disaligned;\n pub use self::call_kind::{call_kind, CallDesugaringKind, CallKind};\n+pub use self::compare_types::{is_equal_up_to_subtyping, is_subtype};\n pub use self::find_self_call::find_self_call;\n pub use self::might_permit_raw_init::might_permit_raw_init;\n pub use self::type_name::type_name;"}, {"sha": "84cb417dd89363c64946c1cef65cca0d15d6fd38", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -34,43 +34,11 @@ impl<T> IdFunctor for Vec<T> {\n     type Inner = T;\n \n     #[inline]\n-    fn try_map_id<F, E>(self, mut f: F) -> Result<Self, E>\n+    fn try_map_id<F, E>(self, f: F) -> Result<Self, E>\n     where\n         F: FnMut(Self::Inner) -> Result<Self::Inner, E>,\n     {\n-        struct HoleVec<T> {\n-            vec: Vec<mem::ManuallyDrop<T>>,\n-            hole: Option<usize>,\n-        }\n-\n-        impl<T> Drop for HoleVec<T> {\n-            fn drop(&mut self) {\n-                unsafe {\n-                    for (index, slot) in self.vec.iter_mut().enumerate() {\n-                        if self.hole != Some(index) {\n-                            mem::ManuallyDrop::drop(slot);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        unsafe {\n-            let (ptr, length, capacity) = self.into_raw_parts();\n-            let vec = Vec::from_raw_parts(ptr.cast(), length, capacity);\n-            let mut hole_vec = HoleVec { vec, hole: None };\n-\n-            for (index, slot) in hole_vec.vec.iter_mut().enumerate() {\n-                hole_vec.hole = Some(index);\n-                let original = mem::ManuallyDrop::take(slot);\n-                let mapped = f(original)?;\n-                *slot = mem::ManuallyDrop::new(mapped);\n-                hole_vec.hole = None;\n-            }\n-\n-            mem::forget(hole_vec);\n-            Ok(Vec::from_raw_parts(ptr, length, capacity))\n-        }\n+        self.into_iter().map(f).collect()\n     }\n }\n "}, {"sha": "8a712cec85211b0a9c1936c83b586350a74537dd", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(is_terminal)]\n #![feature(once_cell)]\n #![feature(decl_macro)]\n #![recursion_limit = \"256\"]\n@@ -27,7 +28,6 @@ use rustc_feature::find_gated_cfg;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n-use rustc_log::stdout_isatty;\n use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n@@ -48,7 +48,7 @@ use std::default::Default;\n use std::env;\n use std::ffi::OsString;\n use std::fs;\n-use std::io::{self, Read, Write};\n+use std::io::{self, IsTerminal, Read, Write};\n use std::panic::{self, catch_unwind};\n use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n@@ -515,7 +515,7 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n                 }\n                 text.push('\\n');\n             }\n-            if stdout_isatty() {\n+            if io::stdout().is_terminal() {\n                 show_content_with_pager(&text);\n             } else {\n                 print!(\"{}\", text);"}, {"sha": "0c705d2ecf5fface2271ea6b76540eaee71b1d9d", "filename": "compiler/rustc_error_messages/Cargo.toml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_error_messages%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_error_messages%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2FCargo.toml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -9,9 +9,17 @@ edition = \"2021\"\n fluent-bundle = \"0.15.2\"\n fluent-syntax = \"0.11\"\n intl-memoizer = \"0.5.1\"\n+rustc_baked_icu_data = { path = \"../rustc_baked_icu_data\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }\n tracing = \"0.1\"\n unic-langid = { version = \"0.9.0\", features = [\"macros\"] }\n+icu_list = \"1.0.0\"\n+writeable = \"0.5.0\"\n+icu_locid = \"1.0.0\"\n+icu_provider_adapters = \"1.0.0\"\n+\n+[features]\n+rustc_use_parallel_compiler = ['rustc_baked_icu_data/rustc_use_parallel_compiler']"}, {"sha": "1df5bf1a22037fef47d29a92a2b06d9df946b6d4", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -54,6 +54,9 @@ parser_invalid_logical_operator = `{$incorrect}` is not a logical operator\n parser_tilde_is_not_unary_operator = `~` cannot be used as a unary operator\n     .suggestion = use `!` to perform bitwise not\n \n+parser_unexpected_if_with_if = unexpected `if` in the condition expression\n+    .suggestion = remove the `if`\n+\n parser_unexpected_token_after_not = unexpected {$negated_desc} after identifier\n parser_unexpected_token_after_not_bitwise = use `!` to perform bitwise not\n parser_unexpected_token_after_not_logical = use `!` to perform logical negation"}, {"sha": "817bb83ed786a6ed3a8267397b5bc0e958da03d1", "filename": "compiler/rustc_error_messages/locales/en-US/resolve.ftl", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fresolve.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fresolve.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fresolve.ftl?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,211 @@\n+resolve_parent_module_reset_for_binding =\n+    parent module is reset for binding\n+\n+resolve_ampersand_used_without_explicit_lifetime_name =\n+    `&` without an explicit lifetime name cannot be used here\n+    .note = explicit lifetime name needed here\n+\n+resolve_underscore_lifetime_name_cannot_be_used_here =\n+    `'_` cannot be used here\n+    .note = `'_` is a reserved lifetime name\n+\n+resolve_crate_may_not_be_imported =\n+    `$crate` may not be imported\n+\n+resolve_crate_root_imports_must_be_named_explicitly =\n+    crate root imports need to be explicitly named: `use crate as name;`\n+\n+resolve_generic_params_from_outer_function =\n+    can't use generic parameters from outer function\n+    .label = use of generic parameter from outer function\n+    .suggestion = try using a local generic parameter instead\n+\n+resolve_self_type_implicitly_declared_by_impl =\n+    `Self` type implicitly declared here, by this `impl`\n+\n+resolve_cannot_use_self_type_here =\n+    can't use `Self` here\n+\n+resolve_use_a_type_here_instead =\n+    use a type here instead\n+\n+resolve_type_param_from_outer_fn =\n+    type parameter from outer function\n+\n+resolve_const_param_from_outer_fn =\n+    const parameter from outer function\n+\n+resolve_try_using_local_generic_parameter =\n+    try using a local generic parameter instead\n+\n+resolve_try_adding_local_generic_param_on_method =\n+    try adding a local generic parameter in this method instead\n+\n+resolve_help_try_using_local_generic_param =\n+    try using a local generic paramter instead\n+\n+resolve_name_is_already_used_as_generic_parameter =\n+    the name `{$name}` is already used for a generic parameter in this item's generic parameters\n+    .label = already used\n+    .first_use_of_name = first use of `{$name}`\n+\n+resolve_method_not_member_of_trait =\n+    method `{$method}` is not a member of trait `{$trait_}`\n+    .label = not a member of trait `{$trait_}`\n+\n+resolve_associated_fn_with_similar_name_exists =\n+    there is an associated function with a similar name\n+\n+resolve_type_not_member_of_trait =\n+    type `{$type_}` is not a member of trait `{$trait_}`\n+    .label = not a member of trait `{$trait_}`\n+\n+resolve_associated_type_with_similar_name_exists =\n+    there is an associated type with a similar name\n+\n+resolve_const_not_member_of_trait =\n+    const `{$const_}` is not a member of trait `{$trait_}`\n+    .label = not a member of trait `{$trait_}`\n+\n+resolve_associated_const_with_similar_name_exists =\n+    there is an associated constant with a similar name\n+\n+resolve_variable_bound_with_different_mode =\n+    variable `{$variable_name}` is bound inconsistently across alternatives separated by `|`\n+    .label = bound in different ways\n+    .first_binding_span = first binding\n+\n+resolve_ident_bound_more_than_once_in_parameter_list =\n+    identifier `{$identifier}` is bound more than once in this parameter list\n+    .label = used as parameter more than once\n+\n+resolve_ident_bound_more_than_once_in_same_pattern =\n+    identifier `{$identifier}` is bound more than once in the same pattern\n+    .label = used in a pattern more than once\n+\n+resolve_undeclared_label =\n+    use of undeclared label `{$name}`\n+    .label = undeclared label `{$name}`\n+\n+resolve_label_with_similar_name_reachable =\n+    a label with a similar name is reachable\n+\n+resolve_try_using_similarly_named_label =\n+    try using similarly named label\n+\n+resolve_unreachable_label_with_similar_name_exists =\n+    a label with a similar name exists but is unreachable\n+\n+resolve_self_import_can_only_appear_once_in_the_list =\n+    `self` import can only appear once in an import list\n+    .label = can only appear once in an import list\n+\n+resolve_self_import_only_in_import_list_with_non_empty_prefix =\n+    `self` import can only appear in an import list with a non-empty prefix\n+    .label = can only appear in an import list with a non-empty prefix\n+\n+resolve_cannot_capture_dynamic_environment_in_fn_item =\n+    can't capture dynamic environment in a fn item\n+    .help = use the `|| {\"{\"} ... {\"}\"}` closure form instead\n+\n+resolve_attempt_to_use_non_constant_value_in_constant =\n+    attempt to use a non-constant value in a constant\n+\n+resolve_attempt_to_use_non_constant_value_in_constant_with_suggestion =\n+    consider using `{$suggestion}` instead of `{$current}`\n+\n+resolve_attempt_to_use_non_constant_value_in_constant_label_with_suggestion =\n+    non-constant value\n+\n+resolve_attempt_to_use_non_constant_value_in_constant_without_suggestion =\n+    this would need to be a `{$suggestion}`\n+\n+resolve_self_imports_only_allowed_within =\n+    `self` imports are only allowed within a {\"{\"} {\"}\"} list\n+\n+resolve_self_imports_only_allowed_within_suggestion =\n+    consider importing the module directly\n+\n+resolve_self_imports_only_allowed_within_multipart_suggestion =\n+    alternatively, use the multi-path `use` syntax to import `self`\n+\n+resolve_binding_shadows_something_unacceptable =\n+    {$shadowing_binding}s cannot shadow {$shadowed_binding}s\n+    .label = cannot be named the same as {$article} {$shadowed_binding}\n+    .label_shadowed_binding = the {$shadowed_binding} `{$name}` is {$participle} here\n+\n+resolve_binding_shadows_something_unacceptable_suggestion =\n+    try specify the pattern arguments\n+\n+resolve_forward_declared_generic_param =\n+    generic parameters with a default cannot use forward declared identifiers\n+    .label = defaulted generic parameters cannot be forward declared\n+\n+resolve_param_in_ty_of_const_param =\n+    the type of const parameters must not depend on other generic parameters\n+    .label = the type must not depend on the parameter `{$name}`\n+\n+resolve_self_in_generic_param_default =\n+    generic parameters cannot use `Self` in their defaults\n+    .label = `Self` in generic parameter default\n+\n+resolve_param_in_non_trivial_anon_const =\n+    generic parameters may not be used in const operations\n+    .label = cannot perform const operation using `{$name}`\n+\n+resolve_param_in_non_trivial_anon_const_help =\n+    use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n+resolve_param_in_non_trivial_anon_const_sub_type =\n+    type parameters may not be used in const expressions\n+\n+resolve_param_in_non_trivial_anon_const_sub_non_type =\n+    const parameters may only be used as standalone arguments, i.e. `{$name}`\n+\n+resolve_unreachable_label =\n+    use of unreachable label `{$name}`\n+    .label = unreachable label `{$name}`\n+    .label_definition_span = unreachable label defined here\n+    .note = labels are unreachable through functions, closures, async blocks and modules\n+\n+resolve_unreachable_label_suggestion_use_similarly_named =\n+    try using similarly named label\n+\n+resolve_unreachable_label_similar_name_reachable =\n+    a label with a similar name is reachable\n+\n+resolve_unreachable_label_similar_name_unreachable =\n+    a label with a similar name exists but is also unreachable\n+\n+resolve_trait_impl_mismatch =\n+    item `{$name}` is an associated {$kind}, which doesn't match its trait `{$trait_path}`\n+    .label = does not match trait\n+    .label_trait_item = item in trait\n+\n+resolve_invalid_asm_sym =\n+    invalid `sym` operand\n+    .label = is a local variable\n+    .help = `sym` operands must refer to either a function or a static\n+\n+resolve_trait_impl_duplicate =\n+    duplicate definitions with name `{$name}`:\n+    .label = duplicate definition\n+    .old_span_label = previous definition here\n+    .trait_item_span = item in trait\n+\n+resolve_relative_2018 =\n+    relative paths are not supported in visibilities in 2018 edition or later\n+    .suggestion = try\n+\n+resolve_ancestor_only =\n+    visibilities can only be restricted to ancestor modules\n+\n+resolve_expected_found =\n+    expected module, found {$res} `{$path_str}`\n+    .label = not a module\n+\n+resolve_indeterminate =\n+    cannot determine resolution for the visibility\n+\n+resolve_module_only =\n+    visibility must resolve to a module"}, {"sha": "d7f9148091ce438d459f98c2837f7614304d52e5", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -10,6 +10,7 @@ extern crate tracing;\n \n use fluent_bundle::FluentResource;\n use fluent_syntax::parser::ParserError;\n+use icu_provider_adapters::fallback::{LocaleFallbackProvider, LocaleFallbacker};\n use rustc_data_structures::sync::Lrc;\n use rustc_macros::{fluent_messages, Decodable, Encodable};\n use rustc_span::Span;\n@@ -30,8 +31,7 @@ use intl_memoizer::concurrent::IntlLangMemoizer;\n #[cfg(not(parallel_compiler))]\n use intl_memoizer::IntlLangMemoizer;\n \n-pub use fluent_bundle::{self, FluentArgs, FluentError, FluentValue};\n-\n+pub use fluent_bundle::{self, types::FluentType, FluentArgs, FluentError, FluentValue};\n pub use unic_langid::{langid, LanguageIdentifier};\n \n // Generates `DEFAULT_LOCALE_RESOURCES` static and `fluent_generated` module.\n@@ -63,6 +63,7 @@ fluent_messages! {\n     plugin_impl => \"../locales/en-US/plugin_impl.ftl\",\n     privacy => \"../locales/en-US/privacy.ftl\",\n     query_system => \"../locales/en-US/query_system.ftl\",\n+    resolve => \"../locales/en-US/resolve.ftl\",\n     save_analysis => \"../locales/en-US/save_analysis.ftl\",\n     session => \"../locales/en-US/session.ftl\",\n     symbol_mangling => \"../locales/en-US/symbol_mangling.ftl\",\n@@ -541,3 +542,92 @@ impl From<Vec<Span>> for MultiSpan {\n         MultiSpan::from_spans(spans)\n     }\n }\n+\n+fn icu_locale_from_unic_langid(lang: LanguageIdentifier) -> Option<icu_locid::Locale> {\n+    icu_locid::Locale::try_from_bytes(lang.to_string().as_bytes()).ok()\n+}\n+\n+pub fn fluent_value_from_str_list_sep_by_and<'source>(\n+    l: Vec<Cow<'source, str>>,\n+) -> FluentValue<'source> {\n+    // Fluent requires 'static value here for its AnyEq usages.\n+    #[derive(Clone, PartialEq, Debug)]\n+    struct FluentStrListSepByAnd(Vec<String>);\n+\n+    impl FluentType for FluentStrListSepByAnd {\n+        fn duplicate(&self) -> Box<dyn FluentType + Send> {\n+            Box::new(self.clone())\n+        }\n+\n+        fn as_string(&self, intls: &intl_memoizer::IntlLangMemoizer) -> Cow<'static, str> {\n+            let result = intls\n+                .with_try_get::<MemoizableListFormatter, _, _>((), |list_formatter| {\n+                    list_formatter.format_to_string(self.0.iter())\n+                })\n+                .unwrap();\n+            Cow::Owned(result)\n+        }\n+\n+        #[cfg(not(parallel_compiler))]\n+        fn as_string_threadsafe(\n+            &self,\n+            _intls: &intl_memoizer::concurrent::IntlLangMemoizer,\n+        ) -> Cow<'static, str> {\n+            unreachable!(\"`as_string_threadsafe` is not used in non-parallel rustc\")\n+        }\n+\n+        #[cfg(parallel_compiler)]\n+        fn as_string_threadsafe(\n+            &self,\n+            intls: &intl_memoizer::concurrent::IntlLangMemoizer,\n+        ) -> Cow<'static, str> {\n+            let result = intls\n+                .with_try_get::<MemoizableListFormatter, _, _>((), |list_formatter| {\n+                    list_formatter.format_to_string(self.0.iter())\n+                })\n+                .unwrap();\n+            Cow::Owned(result)\n+        }\n+    }\n+\n+    struct MemoizableListFormatter(icu_list::ListFormatter);\n+\n+    impl std::ops::Deref for MemoizableListFormatter {\n+        type Target = icu_list::ListFormatter;\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+\n+    impl intl_memoizer::Memoizable for MemoizableListFormatter {\n+        type Args = ();\n+        type Error = ();\n+\n+        fn construct(lang: LanguageIdentifier, _args: Self::Args) -> Result<Self, Self::Error>\n+        where\n+            Self: Sized,\n+        {\n+            let baked_data_provider = rustc_baked_icu_data::baked_data_provider();\n+            let locale_fallbacker =\n+                LocaleFallbacker::try_new_with_any_provider(&baked_data_provider)\n+                    .expect(\"Failed to create fallback provider\");\n+            let data_provider =\n+                LocaleFallbackProvider::new_with_fallbacker(baked_data_provider, locale_fallbacker);\n+            let locale = icu_locale_from_unic_langid(lang)\n+                .unwrap_or_else(|| rustc_baked_icu_data::supported_locales::EN);\n+            let list_formatter =\n+                icu_list::ListFormatter::try_new_and_with_length_with_any_provider(\n+                    &data_provider,\n+                    &locale.into(),\n+                    icu_list::ListLength::Wide,\n+                )\n+                .expect(\"Failed to create list formatter\");\n+\n+            Ok(MemoizableListFormatter(list_formatter))\n+        }\n+    }\n+\n+    let l = l.into_iter().map(|x| x.into_owned()).collect();\n+\n+    FluentValue::Custom(Box::new(FluentStrListSepByAnd(l)))\n+}"}, {"sha": "dee7a31ec2028287b06304fdb3b0b68f377a631e", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -18,7 +18,6 @@ rustc_target = { path = \"../rustc_target\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n unicode-width = \"0.1.4\"\n-atty = \"0.2\"\n termcolor = \"1.0\"\n annotate-snippets = \"0.9\"\n termize = \"0.1.1\"\n@@ -27,3 +26,6 @@ serde_json = \"1.0.59\"\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [ \"handleapi\", \"synchapi\", \"winbase\" ] }\n+\n+[features]\n+rustc_use_parallel_compiler = ['rustc_error_messages/rustc_use_parallel_compiler']"}, {"sha": "7d5e4723a6d883b6b22bf24c19259c93f210c3fa", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -4,6 +4,7 @@ use crate::{\n     SubdiagnosticMessage, Substitution, SubstitutionPart, SuggestionStyle,\n };\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_error_messages::fluent_value_from_str_list_sep_by_and;\n use rustc_error_messages::FluentValue;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_span::edition::LATEST_STABLE_EDITION;\n@@ -34,6 +35,7 @@ pub type DiagnosticArgName<'source> = Cow<'source, str>;\n pub enum DiagnosticArgValue<'source> {\n     Str(Cow<'source, str>),\n     Number(usize),\n+    StrListSepByAnd(Vec<Cow<'source, str>>),\n }\n \n /// Converts a value of a type into a `DiagnosticArg` (typically a field of an `IntoDiagnostic`\n@@ -49,6 +51,9 @@ impl<'source> IntoDiagnosticArg for DiagnosticArgValue<'source> {\n         match self {\n             DiagnosticArgValue::Str(s) => DiagnosticArgValue::Str(Cow::Owned(s.into_owned())),\n             DiagnosticArgValue::Number(n) => DiagnosticArgValue::Number(n),\n+            DiagnosticArgValue::StrListSepByAnd(l) => DiagnosticArgValue::StrListSepByAnd(\n+                l.into_iter().map(|s| Cow::Owned(s.into_owned())).collect(),\n+            ),\n         }\n     }\n }\n@@ -58,6 +63,7 @@ impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n         match self {\n             DiagnosticArgValue::Str(s) => From::from(s),\n             DiagnosticArgValue::Number(n) => From::from(n),\n+            DiagnosticArgValue::StrListSepByAnd(l) => fluent_value_from_str_list_sep_by_and(l),\n         }\n     }\n }"}, {"sha": "7155db32e53b7f75e71c4e592c70aa58a4278362", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -11,7 +11,6 @@ use rustc_target::abi::TargetDataLayoutErrors;\n use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n use std::borrow::Cow;\n use std::fmt;\n-use std::fmt::Write;\n use std::num::ParseIntError;\n use std::path::{Path, PathBuf};\n use std::process::ExitStatus;\n@@ -191,23 +190,15 @@ impl From<Vec<Symbol>> for DiagnosticSymbolList {\n \n impl IntoDiagnosticArg for DiagnosticSymbolList {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        // FIXME: replace the logic here with a real list formatter\n-        let symbols = match &self.0[..] {\n-            [symbol] => format!(\"`{symbol}`\"),\n-            [symbol, last] => {\n-                format!(\"`{symbol}` and `{last}`\",)\n-            }\n-            [symbols @ .., last] => {\n-                let mut result = String::new();\n-                for symbol in symbols {\n-                    write!(result, \"`{symbol}`, \").unwrap();\n-                }\n-                write!(result, \"and `{last}`\").unwrap();\n-                result\n-            }\n-            [] => unreachable!(),\n-        };\n-        DiagnosticArgValue::Str(Cow::Owned(symbols))\n+        DiagnosticArgValue::StrListSepByAnd(\n+            self.0.into_iter().map(|sym| Cow::Owned(format!(\"`{sym}`\"))).collect(),\n+        )\n+    }\n+}\n+\n+impl<Id> IntoDiagnosticArg for hir::def::Res<Id> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Borrowed(self.descr()))\n     }\n }\n "}, {"sha": "bc136aea44d4cf59a97f30c8e8e5cdc89dab565a", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -28,8 +28,8 @@ use rustc_error_messages::FluentArgs;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use std::borrow::Cow;\n use std::cmp::{max, min, Reverse};\n-use std::io;\n use std::io::prelude::*;\n+use std::io::{self, IsTerminal};\n use std::iter;\n use std::path::Path;\n use termcolor::{Ansi, BufferWriter, ColorChoice, ColorSpec, StandardStream};\n@@ -619,14 +619,14 @@ impl ColorConfig {\n     fn to_color_choice(self) -> ColorChoice {\n         match self {\n             ColorConfig::Always => {\n-                if atty::is(atty::Stream::Stderr) {\n+                if io::stderr().is_terminal() {\n                     ColorChoice::Always\n                 } else {\n                     ColorChoice::AlwaysAnsi\n                 }\n             }\n             ColorConfig::Never => ColorChoice::Never,\n-            ColorConfig::Auto if atty::is(atty::Stream::Stderr) => ColorChoice::Auto,\n+            ColorConfig::Auto if io::stderr().is_terminal() => ColorChoice::Auto,\n             ColorConfig::Auto => ColorChoice::Never,\n         }\n     }"}, {"sha": "f3f1c7534b0a305c816b16fd1d89595044693e2b", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -5,6 +5,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n+#![feature(is_terminal)]\n #![feature(adt_const_params)]\n #![feature(let_chains)]\n #![feature(never_type)]\n@@ -644,13 +645,14 @@ impl Handler {\n         inner.stashed_diagnostics = Default::default();\n     }\n \n-    /// Stash a given diagnostic with the given `Span` and `StashKey` as the key for later stealing.\n+    /// Stash a given diagnostic with the given `Span` and [`StashKey`] as the key.\n+    /// Retrieve a stashed diagnostic with `steal_diagnostic`.\n     pub fn stash_diagnostic(&self, span: Span, key: StashKey, diag: Diagnostic) {\n         let mut inner = self.inner.borrow_mut();\n         inner.stash((span, key), diag);\n     }\n \n-    /// Steal a previously stashed diagnostic with the given `Span` and `StashKey` as the key.\n+    /// Steal a previously stashed diagnostic with the given `Span` and [`StashKey`] as the key.\n     pub fn steal_diagnostic(&self, span: Span, key: StashKey) -> Option<DiagnosticBuilder<'_, ()>> {\n         let mut inner = self.inner.borrow_mut();\n         inner.steal((span, key)).map(|diag| DiagnosticBuilder::new_diagnostic(self, diag))"}, {"sha": "192f54171cee6885d1d327f6397908b6d3afaab0", "filename": "compiler/rustc_expand/Cargo.toml", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2FCargo.toml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -8,20 +8,21 @@ build = false\n doctest = false\n \n [dependencies]\n-rustc_serialize = { path = \"../rustc_serialize\" }\n-tracing = \"0.1\"\n-rustc_span = { path = \"../rustc_span\" }\n-rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n+crossbeam-channel = \"0.5.0\"\n rustc_ast_passes = { path = \"../rustc_ast_passes\" }\n+rustc_ast = { path = \"../rustc_ast\" }\n+rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }\n-rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_parse = { path = \"../rustc_parse\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n+rustc_span = { path = \"../rustc_span\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-rustc_ast = { path = \"../rustc_ast\" }\n-crossbeam-channel = \"0.5.0\"\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\""}, {"sha": "04fe6c4007e948fd106f14fb95947ae1003e3090", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1436,7 +1436,7 @@ fn pretty_printing_compatibility_hack(item: &Item, sess: &ParseSess) -> bool {\n                             let crate_matches = if c.starts_with(\"allsorts-rental\") {\n                                 true\n                             } else {\n-                                let mut version = c.trim_start_matches(\"rental-\").split(\".\");\n+                                let mut version = c.trim_start_matches(\"rental-\").split('.');\n                                 version.next() == Some(\"0\")\n                                     && version.next() == Some(\"5\")\n                                     && version"}, {"sha": "e17cba1478ab6e939eb3153cf76565e4dffb3446", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,13 +1,12 @@\n use crate::base::ExtCtxt;\n-\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Expr, LocalKind, PatKind, UnOp};\n use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-\n use rustc_span::Span;\n+use thin_vec::ThinVec;\n \n impl<'a> ExtCtxt<'a> {\n     pub fn path(&self, span: Span, strs: Vec<Ident>) -> ast::Path {\n@@ -28,7 +27,7 @@ impl<'a> ExtCtxt<'a> {\n     ) -> ast::Path {\n         assert!(!idents.is_empty());\n         let add_root = global && !idents[0].is_path_segment_keyword();\n-        let mut segments = Vec::with_capacity(idents.len() + add_root as usize);\n+        let mut segments = ThinVec::with_capacity(idents.len() + add_root as usize);\n         if add_root {\n             segments.push(ast::PathSegment::path_root(span));\n         }\n@@ -532,15 +531,15 @@ impl<'a> ExtCtxt<'a> {\n         // here, but that's not entirely clear.\n         self.expr(\n             span,\n-            ast::ExprKind::Closure(\n-                ast::ClosureBinder::NotPresent,\n-                ast::CaptureBy::Ref,\n-                ast::Async::No,\n-                ast::Movability::Movable,\n+            ast::ExprKind::Closure(Box::new(ast::Closure {\n+                binder: ast::ClosureBinder::NotPresent,\n+                capture_clause: ast::CaptureBy::Ref,\n+                asyncness: ast::Async::No,\n+                movability: ast::Movability::Movable,\n                 fn_decl,\n                 body,\n-                span,\n-            ),\n+                fn_decl_span: span,\n+            })),\n         )\n     }\n "}, {"sha": "97b1871028ec043075f2f6a7f5cdc1bafc411c8a", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,14 +1,12 @@\n use crate::expand::{AstFragment, AstFragmentKind};\n-\n use rustc_ast as ast;\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::Ident;\n-\n use smallvec::{smallvec, SmallVec};\n-\n-use rustc_data_structures::fx::FxHashMap;\n+use thin_vec::ThinVec;\n \n pub fn placeholder(\n     kind: AstFragmentKind,\n@@ -17,7 +15,7 @@ pub fn placeholder(\n ) -> AstFragment {\n     fn mac_placeholder() -> P<ast::MacCall> {\n         P(ast::MacCall {\n-            path: ast::Path { span: DUMMY_SP, segments: Vec::new(), tokens: None },\n+            path: ast::Path { span: DUMMY_SP, segments: ThinVec::new(), tokens: None },\n             args: P(ast::MacArgs::Empty),\n             prior_type_ascription: None,\n         })"}, {"sha": "010373ba547d07869ffb2461f3154f6e90bc5401", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -95,6 +95,14 @@ macro_rules! language_item_table {\n                 }\n             }\n \n+            /// Returns the name of the `LangItem` enum variant.\n+            // This method is used by Clippy for internal lints.\n+            pub fn variant_name(self) -> &'static str {\n+                match self {\n+                    $( LangItem::$variant => stringify!($variant), )*\n+                }\n+            }\n+\n             pub fn target(self) -> Target {\n                 match self {\n                     $( LangItem::$variant => $target, )*\n@@ -270,6 +278,8 @@ language_item_table! {\n     TryTraitBranch,          sym::branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n     TryTraitFromYeet,        sym::from_yeet,           from_yeet_fn,               Target::Fn,             GenericRequirement::None;\n \n+    PointerSized,            sym::pointer_sized,       pointer_sized,              Target::Trait,          GenericRequirement::Exact(0);\n+\n     PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;\n     PollPending,             sym::Pending,             poll_pending_variant,       Target::Variant,        GenericRequirement::None;\n "}, {"sha": "83b95fe0e911ec055f08c426b50d498a2f583a66", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -115,7 +115,7 @@ pub trait AstConv<'tcx> {\n     /// (e.g., resolve) that is translated into a ty-error. This is\n     /// used to help suppress derived errors typeck might otherwise\n     /// report.\n-    fn set_tainted_by_errors(&self);\n+    fn set_tainted_by_errors(&self, e: ErrorGuaranteed);\n \n     fn record_ty(&self, hir_id: hir::HirId, ty: Ty<'tcx>, span: Span);\n }\n@@ -2620,8 +2620,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n             }\n             Res::Err => {\n-                self.set_tainted_by_errors();\n-                self.tcx().ty_error()\n+                let e = self\n+                    .tcx()\n+                    .sess\n+                    .delay_span_bug(path.span, \"path with `Res:Err` but no error emitted\");\n+                self.set_tainted_by_errors(e);\n+                self.tcx().ty_error_with_guaranteed(e)\n             }\n             _ => span_bug!(span, \"unexpected resolution: {:?}\", path.res),\n         }"}, {"sha": "b4805de961889a2fcb8c1da77ee829a219b8e32f", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -449,8 +449,8 @@ fn check_opaque_meets_bounds<'tcx>(\n \n     let misc_cause = traits::ObligationCause::misc(span, hir_id);\n \n-    match infcx.at(&misc_cause, param_env).eq(opaque_ty, hidden_ty) {\n-        Ok(infer_ok) => ocx.register_infer_ok_obligations(infer_ok),\n+    match ocx.eq(&misc_cause, param_env, opaque_ty, hidden_ty) {\n+        Ok(()) => {}\n         Err(ty_err) => {\n             tcx.sess.delay_span_bug(\n                 span,"}, {"sha": "e68df228c6b5186ae13871f1d88eca4c4afbae3f", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -402,10 +402,8 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n         unnormalized_trait_sig.inputs_and_output.iter().chain(trait_sig.inputs_and_output.iter()),\n     );\n \n-    match infcx.at(&cause, param_env).eq(trait_return_ty, impl_return_ty) {\n-        Ok(infer::InferOk { value: (), obligations }) => {\n-            ocx.register_obligations(obligations);\n-        }\n+    match ocx.eq(&cause, param_env, trait_return_ty, impl_return_ty) {\n+        Ok(()) => {}\n         Err(terr) => {\n             let mut diag = struct_span_err!(\n                 tcx.sess,\n@@ -442,10 +440,8 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     // the lifetimes of the return type, but do this after unifying just the\n     // return types, since we want to avoid duplicating errors from\n     // `compare_predicate_entailment`.\n-    match infcx.at(&cause, param_env).eq(trait_fty, impl_fty) {\n-        Ok(infer::InferOk { value: (), obligations }) => {\n-            ocx.register_obligations(obligations);\n-        }\n+    match ocx.eq(&cause, param_env, trait_fty, impl_fty) {\n+        Ok(()) => {}\n         Err(terr) => {\n             // This function gets called during `compare_predicate_entailment` when normalizing a\n             // signature that contains RPITIT. When the method signatures don't match, we have to"}, {"sha": "a738ee4a14887ae60c0d41d7e2ff8d98aa429750", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -518,7 +518,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n         ty\n     }\n \n-    fn set_tainted_by_errors(&self) {\n+    fn set_tainted_by_errors(&self, _: ErrorGuaranteed) {\n         // There's no obvious place to track this, so just let it go.\n     }\n "}, {"sha": "af0b7f62ae3195f6ce058bde7b0cf97be631efc1", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -775,7 +775,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         // Check the obligations of the cast -- for example, when casting\n         // `usize` to `dyn* Clone + 'static`:\n-        let obligations = predicates\n+        let mut obligations: Vec<_> = predicates\n             .iter()\n             .map(|predicate| {\n                 // For each existential predicate (e.g., `?Self: Clone`) substitute\n@@ -785,16 +785,33 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 let predicate = predicate.with_self_ty(self.tcx, a);\n                 Obligation::new(self.tcx, self.cause.clone(), self.param_env, predicate)\n             })\n-            // Enforce the region bound (e.g., `usize: 'static`, in our example).\n-            .chain([Obligation::new(\n+            .chain([\n+                // Enforce the region bound (e.g., `usize: 'static`, in our example).\n+                Obligation::new(\n+                    self.tcx,\n+                    self.cause.clone(),\n+                    self.param_env,\n+                    ty::Binder::dummy(ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(\n+                        a, b_region,\n+                    ))),\n+                ),\n+            ])\n+            .collect();\n+\n+        // Enforce that the type is `usize`/pointer-sized. For now, only those\n+        // can be coerced to `dyn*`, except for `dyn* -> dyn*` upcasts.\n+        if !a.is_dyn_star() {\n+            obligations.push(Obligation::new(\n                 self.tcx,\n                 self.cause.clone(),\n                 self.param_env,\n-                self.tcx.mk_predicate(ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n-                    ty::OutlivesPredicate(a, b_region),\n-                ))),\n-            )])\n-            .collect();\n+                ty::Binder::dummy(ty::TraitRef::new(\n+                    self.tcx.require_lang_item(hir::LangItem::PointerSized, Some(self.cause.span)),\n+                    self.tcx.mk_substs_trait(a, &[]),\n+                ))\n+                .to_poly_trait_predicate(),\n+            ));\n+        }\n \n         Ok(InferOk {\n             value: (vec![Adjustment { kind: Adjust::DynStar, target: b }], b),\n@@ -1544,7 +1561,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 // Mark that we've failed to coerce the types here to suppress\n                 // any superfluous errors we might encounter while trying to\n                 // emit or provide suggestions on how to fix the initial error.\n-                fcx.set_tainted_by_errors();\n+                fcx.set_tainted_by_errors(\n+                    fcx.tcx.sess.delay_span_bug(cause.span, \"coercion error but no error emitted\"),\n+                );\n                 let (expected, found) = if label_expression_as_expected {\n                     // In the case where this is a \"forced unit\", like\n                     // `break`, we want to call the `()` \"expected\""}, {"sha": "5a34ab401749f74491f92a45ec04a1b0786e5434", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -154,7 +154,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Err(e) => e,\n         };\n \n-        self.set_tainted_by_errors();\n+        self.set_tainted_by_errors(self.tcx.sess.delay_span_bug(\n+            expr.span,\n+            \"`TypeError` when attempting coercion but no error emitted\",\n+        ));\n         let expr = expr.peel_drop_temps();\n         let cause = self.misc(expr.span);\n         let expr_ty = self.resolve_vars_with_obligations(checked_ty);"}, {"sha": "752d2e0ff78589046f2c327c51b5bfd0288e60a4", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -527,12 +527,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.resolve_ty_and_res_fully_qualified_call(qpath, expr.hir_id, expr.span);\n         let ty = match res {\n             Res::Err => {\n-                self.set_tainted_by_errors();\n-                tcx.ty_error()\n+                let e =\n+                    self.tcx.sess.delay_span_bug(qpath.span(), \"`Res::Err` but no error emitted\");\n+                self.set_tainted_by_errors(e);\n+                tcx.ty_error_with_guaranteed(e)\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _) => {\n-                report_unexpected_variant_res(tcx, res, qpath, expr.span);\n-                tcx.ty_error()\n+                let e = report_unexpected_variant_res(tcx, res, qpath, expr.span);\n+                tcx.ty_error_with_guaranteed(e)\n             }\n             _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,\n         };\n@@ -1962,7 +1964,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr_span: Span,\n     ) {\n         if variant.is_recovered() {\n-            self.set_tainted_by_errors();\n+            self.set_tainted_by_errors(\n+                self.tcx\n+                    .sess\n+                    .delay_span_bug(expr_span, \"parser recovered but no error was emitted\"),\n+            );\n             return;\n         }\n         let mut err = self.err_ctxt().type_error_struct_with_diag("}, {"sha": "ac6b0924ab572498a4cc36f9fe8187f1b93b38ed", "filename": "compiler/rustc_hir_typeck/src/fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         // type, `?T` is not considered unsolved, but `?I` is. The\n         // same is true for float variables.)\n         let fallback = match ty.kind() {\n-            _ if self.is_tainted_by_errors() => self.tcx.ty_error(),\n+            _ if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n             ty::Infer(ty::IntVar(_)) => self.tcx.types.i32,\n             ty::Infer(ty::FloatVar(_)) => self.tcx.types.f64,\n             _ => match diverging_fallback.get(&ty) {"}, {"sha": "b85a23257286b6ddfad19fffb788d93e567a8001", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -140,8 +140,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"write_ty({:?}, {:?}) in fcx {}\", id, self.resolve_vars_if_possible(ty), self.tag());\n         self.typeck_results.borrow_mut().node_types_mut().insert(id, ty);\n \n-        if ty.references_error() {\n-            self.set_tainted_by_errors();\n+        if let Err(e) = ty.error_reported() {\n+            self.set_tainted_by_errors(e);\n         }\n     }\n \n@@ -528,7 +528,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn node_ty(&self, id: hir::HirId) -> Ty<'tcx> {\n         match self.typeck_results.borrow().node_types().get(id) {\n             Some(&t) => t,\n-            None if self.is_tainted_by_errors() => self.tcx.ty_error(),\n+            None if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n             None => {\n                 bug!(\n                     \"no type for node {}: {} in fcx {}\",\n@@ -543,7 +543,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn node_ty_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {\n         match self.typeck_results.borrow().node_types().get(id) {\n             Some(&t) => Some(t),\n-            None if self.is_tainted_by_errors() => Some(self.tcx.ty_error()),\n+            None if let Some(e) = self.tainted_by_errors() => Some(self.tcx.ty_error_with_guaranteed(e)),\n             None => None,\n         }\n     }\n@@ -1148,9 +1148,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 explicit_late_bound = ExplicitLateBound::Yes;\n             }\n \n-            if let Err(GenericArgCountMismatch { reported: Some(_), .. }) = arg_count.correct {\n+            if let Err(GenericArgCountMismatch { reported: Some(e), .. }) = arg_count.correct {\n                 infer_args_for_err.insert(index);\n-                self.set_tainted_by_errors(); // See issue #53251.\n+                self.set_tainted_by_errors(e); // See issue #53251.\n             }\n         }\n \n@@ -1440,12 +1440,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if !ty.is_ty_var() {\n             ty\n         } else {\n-            if !self.is_tainted_by_errors() {\n+            let e = self.tainted_by_errors().unwrap_or_else(|| {\n                 self.err_ctxt()\n                     .emit_inference_failure_err((**self).body_id, sp, ty.into(), E0282, true)\n-                    .emit();\n-            }\n-            let err = self.tcx.ty_error();\n+                    .emit()\n+            });\n+            let err = self.tcx.ty_error_with_guaranteed(e);\n             self.demand_suptype(sp, err, ty);\n             err\n         }"}, {"sha": "a31ab9c8b23b899c00dcad27aad6b7f8816e9a54", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -511,8 +511,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tys.into_iter().any(|ty| ty.references_error() || ty.is_ty_var())\n         }\n \n-        self.set_tainted_by_errors();\n         let tcx = self.tcx;\n+        // FIXME: taint after emitting errors and pass through an `ErrorGuaranteed`\n+        self.set_tainted_by_errors(\n+            tcx.sess.delay_span_bug(call_span, \"no errors reported for args\"),\n+        );\n \n         // Get the argument span in the context of the call span so that\n         // suggestions and labels are (more) correct when an arg is a\n@@ -1207,7 +1210,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (def, ty) = self.finish_resolving_struct_path(qpath, path_span, hir_id);\n         let variant = match def {\n             Res::Err => {\n-                self.set_tainted_by_errors();\n+                self.set_tainted_by_errors(\n+                    self.tcx.sess.delay_span_bug(path_span, \"`Res::Err` but no error emitted\"),\n+                );\n                 return None;\n             }\n             Res::Def(DefKind::Variant, _) => match ty.kind() {"}, {"sha": "177d521d2804cd1e1ff08f4e769229b64fd28f4a", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -4,6 +4,7 @@ mod checks;\n mod suggestions;\n \n pub use _impl::*;\n+use rustc_errors::ErrorGuaranteed;\n pub use suggestions::*;\n \n use crate::coercion::DynamicCoerceMany;\n@@ -289,8 +290,8 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn set_tainted_by_errors(&self) {\n-        self.infcx.set_tainted_by_errors()\n+    fn set_tainted_by_errors(&self, e: ErrorGuaranteed) {\n+        self.infcx.set_tainted_by_errors(e)\n     }\n \n     fn record_ty(&self, hir_id: hir::HirId, ty: Ty<'tcx>, _span: Span) {"}, {"sha": "334d6d0aa6c209838c6a042895e8d94eab3e7742", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -53,7 +53,7 @@ use crate::check::check_fn;\n use crate::coercion::DynamicCoerceMany;\n use crate::gather_locals::GatherLocalsVisitor;\n use rustc_data_structures::unord::UnordSet;\n-use rustc_errors::{struct_span_err, MultiSpan};\n+use rustc_errors::{struct_span_err, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::Visitor;\n@@ -344,7 +344,7 @@ fn typeck_with_fallback<'tcx>(\n \n         fcx.select_all_obligations_or_error();\n \n-        if !fcx.infcx.is_tainted_by_errors() {\n+        if let None = fcx.infcx.tainted_by_errors() {\n             fcx.check_transmutes();\n         }\n \n@@ -428,7 +428,12 @@ impl<'tcx> EnclosingBreakables<'tcx> {\n     }\n }\n \n-fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, qpath: &hir::QPath<'_>, span: Span) {\n+fn report_unexpected_variant_res(\n+    tcx: TyCtxt<'_>,\n+    res: Res,\n+    qpath: &hir::QPath<'_>,\n+    span: Span,\n+) -> ErrorGuaranteed {\n     struct_span_err!(\n         tcx.sess,\n         span,\n@@ -437,7 +442,7 @@ fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, qpath: &hir::QPath<'\n         res.descr(),\n         rustc_hir_pretty::qpath_to_string(qpath),\n     )\n-    .emit();\n+    .emit()\n }\n \n /// Controls whether the arguments are tupled. This is used for the call"}, {"sha": "0b5dc946c1deffa589f20f036542cfacc7edd6a8", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n     }\n \n     fn is_tainted_by_errors(&self) -> bool {\n-        self.infcx.is_tainted_by_errors()\n+        self.infcx.tainted_by_errors().is_some()\n     }\n \n     fn resolve_type_vars_or_error("}, {"sha": "9a66e73d9c2aa1838f7d7342d91b56ee73781d13", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let report_candidates = |span: Span,\n                                  err: &mut Diagnostic,\n                                  sources: &mut Vec<CandidateSource>,\n-                                 sugg_span: Span| {\n+                                 sugg_span: Option<Span>| {\n             sources.sort();\n             sources.dedup();\n             // Dynamic limit to avoid hiding just one candidate, which is silly.\n@@ -175,7 +175,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else {\n                             err.note(&note_str);\n                         }\n-                        if let Some(trait_ref) = self.tcx.impl_trait_ref(impl_did) {\n+                        if let Some(sugg_span) = sugg_span\n+                            && let Some(trait_ref) = self.tcx.impl_trait_ref(impl_did) {\n                             let path = self.tcx.def_path_str(trait_ref.def_id);\n \n                             let ty = match item.kind {\n@@ -224,20 +225,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             err.span_note(item_span, msg);\n                             None\n                         };\n-                        let path = self.tcx.def_path_str(trait_did);\n-                        print_disambiguation_help(\n-                            item_name,\n-                            args,\n-                            err,\n-                            path,\n-                            rcvr_ty,\n-                            item.kind,\n-                            item.def_id,\n-                            sugg_span,\n-                            idx,\n-                            self.tcx.sess.source_map(),\n-                            item.fn_has_self_parameter,\n-                        );\n+                        if let Some(sugg_span) = sugg_span {\n+                            let path = self.tcx.def_path_str(trait_did);\n+                            print_disambiguation_help(\n+                                item_name,\n+                                args,\n+                                err,\n+                                path,\n+                                rcvr_ty,\n+                                item.kind,\n+                                item.def_id,\n+                                sugg_span,\n+                                idx,\n+                                self.tcx.sess.source_map(),\n+                                item.fn_has_self_parameter,\n+                            );\n+                        }\n                     }\n                 }\n             }\n@@ -407,9 +410,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         sugg_span,\n                     );\n \n-                    report_candidates(span, &mut err, &mut static_candidates, sugg_span);\n+                    report_candidates(span, &mut err, &mut static_candidates, None);\n                 } else if static_candidates.len() > 1 {\n-                    report_candidates(span, &mut err, &mut static_candidates, sugg_span);\n+                    report_candidates(span, &mut err, &mut static_candidates, Some(sugg_span));\n                 }\n \n                 let mut bound_spans = vec![];\n@@ -1015,7 +1018,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 err.span_label(item_name.span, format!(\"multiple `{}` found\", item_name));\n \n-                report_candidates(span, &mut err, &mut sources, sugg_span);\n+                report_candidates(span, &mut err, &mut sources, Some(sugg_span));\n                 err.emit();\n             }\n \n@@ -1915,12 +1918,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         | ty::Str\n                         | ty::Projection(_)\n                         | ty::Param(_) => format!(\"{deref_ty}\"),\n-                        // we need to test something like  <&[_]>::len\n+                        // we need to test something like  <&[_]>::len or <(&[u32])>::len\n                         // and Vec::function();\n-                        // <&[_]>::len doesn't need an extra \"<>\" between\n+                        // <&[_]>::len or <&[u32]>::len doesn't need an extra \"<>\" between\n                         // but for Adt type like Vec::function()\n                         // we would suggest <[_]>::function();\n-                        _ if self.tcx.sess.source_map().span_wrapped_by_angle_bracket(ty.span)  => format!(\"{deref_ty}\"),\n+                        _ if self.tcx.sess.source_map().span_wrapped_by_angle_or_parentheses(ty.span)  => format!(\"{deref_ty}\"),\n                         _ => format!(\"<{deref_ty}>\"),\n                     };\n                     err.span_suggestion_verbose("}, {"sha": "a62d43561302bf43d3126b502367f7d21c4c455e", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -839,12 +839,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (res, opt_ty, segments) = path_resolution;\n         match res {\n             Res::Err => {\n-                self.set_tainted_by_errors();\n-                return tcx.ty_error();\n+                let e = tcx.sess.delay_span_bug(qpath.span(), \"`Res::Err` but no error emitted\");\n+                self.set_tainted_by_errors(e);\n+                return tcx.ty_error_with_guaranteed(e);\n             }\n             Res::Def(DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fictive | CtorKind::Fn), _) => {\n-                report_unexpected_variant_res(tcx, res, qpath, pat.span);\n-                return tcx.ty_error();\n+                let e = report_unexpected_variant_res(tcx, res, qpath, pat.span);\n+                return tcx.ty_error_with_guaranteed(e);\n             }\n             Res::SelfCtor(..)\n             | Res::Def(\n@@ -985,9 +986,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ti: TopInfo<'tcx>,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n-        let on_error = || {\n+        let on_error = |e| {\n             for pat in subpats {\n-                self.check_pat(pat, tcx.ty_error(), def_bm, ti);\n+                self.check_pat(pat, tcx.ty_error_with_guaranteed(e), def_bm, ti);\n             }\n         };\n         let report_unexpected_res = |res: Res| {\n@@ -1014,36 +1015,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_label(pat.span, \"not a tuple variant or struct\");\n                 }\n             }\n-            err.emit();\n-            on_error();\n+            let e = err.emit();\n+            on_error(e);\n+            e\n         };\n \n         // Resolve the path and check the definition for errors.\n         let (res, opt_ty, segments) =\n             self.resolve_ty_and_res_fully_qualified_call(qpath, pat.hir_id, pat.span);\n         if res == Res::Err {\n-            self.set_tainted_by_errors();\n-            on_error();\n-            return self.tcx.ty_error();\n+            let e = tcx.sess.delay_span_bug(pat.span, \"`Res:Err` but no error emitted\");\n+            self.set_tainted_by_errors(e);\n+            on_error(e);\n+            return tcx.ty_error_with_guaranteed(e);\n         }\n \n         // Type-check the path.\n         let (pat_ty, res) =\n             self.instantiate_value_path(segments, opt_ty, res, pat.span, pat.hir_id);\n         if !pat_ty.is_fn() {\n-            report_unexpected_res(res);\n-            return tcx.ty_error();\n+            let e = report_unexpected_res(res);\n+            return tcx.ty_error_with_guaranteed(e);\n         }\n \n         let variant = match res {\n             Res::Err => {\n-                self.set_tainted_by_errors();\n-                on_error();\n-                return tcx.ty_error();\n+                let e = tcx.sess.delay_span_bug(pat.span, \"`Res::Err` but no error emitted\");\n+                self.set_tainted_by_errors(e);\n+                on_error(e);\n+                return tcx.ty_error_with_guaranteed(e);\n             }\n             Res::Def(DefKind::AssocConst | DefKind::AssocFn, _) => {\n-                report_unexpected_res(res);\n-                return tcx.ty_error();\n+                let e = report_unexpected_res(res);\n+                return tcx.ty_error_with_guaranteed(e);\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => tcx.expect_variant_res(res),\n             _ => bug!(\"unexpected pattern resolution: {:?}\", res),\n@@ -1082,9 +1086,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         } else {\n             // Pattern has wrong number of fields.\n-            self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected, had_err);\n-            on_error();\n-            return tcx.ty_error();\n+            let e = self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected, had_err);\n+            on_error(e);\n+            return tcx.ty_error_with_guaranteed(e);\n         }\n         pat_ty\n     }\n@@ -1098,7 +1102,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fields: &'tcx [ty::FieldDef],\n         expected: Ty<'tcx>,\n         had_err: bool,\n-    ) {\n+    ) -> ErrorGuaranteed {\n         let subpats_ending = pluralize!(subpats.len());\n         let fields_ending = pluralize!(fields.len());\n \n@@ -1245,7 +1249,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        err.emit();\n+        err.emit()\n     }\n \n     fn check_pat_tuple("}, {"sha": "6c2ee35fa50da5b1daef213e9941db8fc3510113", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -83,10 +83,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.typeck_results.treat_byte_string_as_slice =\n             mem::take(&mut self.typeck_results.borrow_mut().treat_byte_string_as_slice);\n \n-        if self.is_tainted_by_errors() {\n-            // FIXME(eddyb) keep track of `ErrorGuaranteed` from where the error was emitted.\n-            wbcx.typeck_results.tainted_by_errors =\n-                Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n+        if let Some(e) = self.tainted_by_errors() {\n+            wbcx.typeck_results.tainted_by_errors = Some(e);\n         }\n \n         debug!(\"writeback: typeck results for {:?} are {:#?}\", item_def_id, wbcx.typeck_results);\n@@ -674,10 +672,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         // We may have introduced e.g. `ty::Error`, if inference failed, make sure\n         // to mark the `TypeckResults` as tainted in that case, so that downstream\n         // users of the typeck results don't produce extra errors, or worse, ICEs.\n-        if resolver.replaced_with_error {\n-            // FIXME(eddyb) keep track of `ErrorGuaranteed` from where the error was emitted.\n-            self.typeck_results.tainted_by_errors =\n-                Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n+        if let Some(e) = resolver.replaced_with_error {\n+            self.typeck_results.tainted_by_errors = Some(e);\n         }\n \n         x\n@@ -708,8 +704,8 @@ struct Resolver<'cx, 'tcx> {\n     span: &'cx dyn Locatable,\n     body: &'tcx hir::Body<'tcx>,\n \n-    /// Set to `true` if any `Ty` or `ty::Const` had to be replaced with an `Error`.\n-    replaced_with_error: bool,\n+    /// Set to `Some` if any `Ty` or `ty::Const` had to be replaced with an `Error`.\n+    replaced_with_error: Option<ErrorGuaranteed>,\n }\n \n impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n@@ -718,12 +714,14 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n         span: &'cx dyn Locatable,\n         body: &'tcx hir::Body<'tcx>,\n     ) -> Resolver<'cx, 'tcx> {\n-        Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }\n+        Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: None }\n     }\n \n-    fn report_error(&self, p: impl Into<ty::GenericArg<'tcx>>) {\n-        if !self.tcx.sess.has_errors().is_some() {\n-            self.infcx\n+    fn report_error(&self, p: impl Into<ty::GenericArg<'tcx>>) -> ErrorGuaranteed {\n+        match self.tcx.sess.has_errors() {\n+            Some(e) => e,\n+            None => self\n+                .infcx\n                 .err_ctxt()\n                 .emit_inference_failure_err(\n                     Some(self.body.id()),\n@@ -732,7 +730,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     E0282,\n                     false,\n                 )\n-                .emit();\n+                .emit(),\n         }\n     }\n }\n@@ -773,9 +771,9 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             }\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n-                self.report_error(t);\n-                self.replaced_with_error = true;\n-                self.tcx().ty_error()\n+                let e = self.report_error(t);\n+                self.replaced_with_error = Some(e);\n+                self.tcx().ty_error_with_guaranteed(e)\n             }\n         }\n     }\n@@ -790,9 +788,9 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             Ok(ct) => self.tcx.erase_regions(ct),\n             Err(_) => {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n-                self.report_error(ct);\n-                self.replaced_with_error = true;\n-                self.tcx().const_error(ct.ty())\n+                let e = self.report_error(ct);\n+                self.replaced_with_error = Some(e);\n+                self.tcx().const_error_with_guaranteed(ct.ty(), e)\n             }\n         }\n     }"}, {"sha": "b9ed6b28c220d1f47172421bedf05f593f661dd9", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -34,7 +34,7 @@ pub use rustc_middle::ty::IntVarValue;\n use rustc_middle::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n use rustc_span::symbol::Symbol;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use std::cell::{Cell, RefCell};\n use std::fmt;\n@@ -1208,7 +1208,8 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// reporting errors that often occur as a result of earlier\n     /// errors, but where it's hard to be 100% sure (e.g., unresolved\n     /// inference variables, regionck errors).\n-    pub fn is_tainted_by_errors(&self) -> bool {\n+    #[must_use = \"this method does not have any side effects\"]\n+    pub fn tainted_by_errors(&self) -> Option<ErrorGuaranteed> {\n         debug!(\n             \"is_tainted_by_errors(err_count={}, err_count_on_creation={}, \\\n              tainted_by_errors={})\",\n@@ -1217,19 +1218,25 @@ impl<'tcx> InferCtxt<'tcx> {\n             self.tainted_by_errors.get().is_some()\n         );\n \n+        if let Some(e) = self.tainted_by_errors.get() {\n+            return Some(e);\n+        }\n+\n         if self.tcx.sess.err_count() > self.err_count_on_creation {\n-            return true; // errors reported since this infcx was made\n+            // errors reported since this infcx was made\n+            let e = self.tcx.sess.has_errors().unwrap();\n+            self.set_tainted_by_errors(e);\n+            return Some(e);\n         }\n-        self.tainted_by_errors.get().is_some()\n+\n+        None\n     }\n \n     /// Set the \"tainted by errors\" flag to true. We call this when we\n     /// observe an error from a prior pass.\n-    pub fn set_tainted_by_errors(&self) {\n-        debug!(\"set_tainted_by_errors()\");\n-        self.tainted_by_errors.set(Some(\n-            self.tcx.sess.delay_span_bug(DUMMY_SP, \"`InferCtxt` incorrectly tainted by errors\"),\n-        ));\n+    pub fn set_tainted_by_errors(&self, e: ErrorGuaranteed) {\n+        debug!(\"set_tainted_by_errors(ErrorGuaranteed)\");\n+        self.tainted_by_errors.set(Some(e));\n     }\n \n     pub fn skip_region_resolution(&self) {\n@@ -1270,7 +1277,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             let mut inner = self.inner.borrow_mut();\n             let inner = &mut *inner;\n             assert!(\n-                self.is_tainted_by_errors() || inner.region_obligations.is_empty(),\n+                self.tainted_by_errors().is_some() || inner.region_obligations.is_empty(),\n                 \"region_obligations not empty: {:#?}\",\n                 inner.region_obligations\n             );\n@@ -1707,7 +1714,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     ) {\n         let errors = self.resolve_regions(outlives_env);\n \n-        if !self.is_tainted_by_errors() {\n+        if let None = self.tainted_by_errors() {\n             // As a heuristic, just skip reporting region errors\n             // altogether if other errors have been reported while\n             // this infcx was in use.  This is totally hokey but"}, {"sha": "167a82d4499a188603895a21b2bfe9349d628341", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -556,8 +556,9 @@ where\n         self.ambient_variance_info = self.ambient_variance_info.xform(info);\n \n         debug!(?self.ambient_variance);\n-\n-        let r = self.relate(a, b)?;\n+        // In a bivariant context this always succeeds.\n+        let r =\n+            if self.ambient_variance == ty::Variance::Bivariant { a } else { self.relate(a, b)? };\n \n         self.ambient_variance = old_ambient_variance;\n "}, {"sha": "bd3c5780b891bb28efae312459722b10febf7e43", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -116,9 +116,9 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n                 Ok(a)\n             }\n \n-            (&ty::Error(_), _) | (_, &ty::Error(_)) => {\n-                infcx.set_tainted_by_errors();\n-                Ok(self.tcx().ty_error())\n+            (&ty::Error(e), _) | (_, &ty::Error(e)) => {\n+                infcx.set_tainted_by_errors(e);\n+                Ok(self.tcx().ty_error_with_guaranteed(e))\n             }\n \n             (&ty::Opaque(a_def_id, _), &ty::Opaque(b_def_id, _)) if a_def_id == b_def_id => {"}, {"sha": "e67dec31dcee377d3387929efe32c87cbcc44bdd", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -53,4 +53,4 @@ rustc_target = { path = \"../rustc_target\" }\n \n [features]\n llvm = ['rustc_codegen_llvm']\n-rustc_use_parallel_compiler = ['rayon', 'rustc-rayon-core', 'rustc_query_impl/rustc_use_parallel_compiler']\n+rustc_use_parallel_compiler = ['rayon', 'rustc-rayon-core', 'rustc_query_impl/rustc_use_parallel_compiler', 'rustc_errors/rustc_use_parallel_compiler']"}, {"sha": "fc760ee3b8fa03281a3fd88bf768f894ca81e208", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -212,7 +212,10 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         // Explicitly check for lints associated with 'closure_id', since\n         // it does not have a corresponding AST node\n         match e.kind {\n-            ast::ExprKind::Closure(_, _, ast::Async::Yes { closure_id, .. }, ..)\n+            ast::ExprKind::Closure(box ast::Closure {\n+                asyncness: ast::Async::Yes { closure_id, .. },\n+                ..\n+            })\n             | ast::ExprKind::Async(_, closure_id, ..) => self.check_id(closure_id),\n             _ => {}\n         }"}, {"sha": "cdf279313a6726e0985cdd0d51c45d11576c7618", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -582,15 +582,15 @@ trait UnusedDelimLint {\n                 let sm = cx.sess().source_map();\n                 let lo_replace =\n                     if keep_space.0 &&\n-                        let Ok(snip) = sm.span_to_prev_source(lo) && !snip.ends_with(\" \") {\n+                        let Ok(snip) = sm.span_to_prev_source(lo) && !snip.ends_with(' ') {\n                         \" \".to_string()\n                         } else {\n                             \"\".to_string()\n                         };\n \n                 let hi_replace =\n                     if keep_space.1 &&\n-                        let Ok(snip) = sm.span_to_next_source(hi) && !snip.starts_with(\" \") {\n+                        let Ok(snip) = sm.span_to_next_source(hi) && !snip.starts_with(' ') {\n                         \" \".to_string()\n                         } else {\n                             \"\".to_string()\n@@ -651,7 +651,7 @@ trait UnusedDelimLint {\n             ref call_or_other => {\n                 let (args_to_check, ctx) = match *call_or_other {\n                     Call(_, ref args) => (&args[..], UnusedDelimsCtx::FunctionArg),\n-                    MethodCall(_, _, ref args, _) => (&args[..], UnusedDelimsCtx::MethodArg),\n+                    MethodCall(ref call) => (&call.args[..], UnusedDelimsCtx::MethodArg),\n                     // actual catch-all arm\n                     _ => {\n                         return;"}, {"sha": "3c50827c1abc33abba077405029d7a91aaa61e2c", "filename": "compiler/rustc_log/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_log%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_log%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2FCargo.toml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -4,7 +4,6 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-atty = \"0.2\"\n tracing = \"0.1.28\"\n tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n tracing-tree = \"0.2.0\""}, {"sha": "ddf29c488c933284433fd2f63376c2d7367e28cf", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -40,10 +40,11 @@\n \n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n+#![feature(is_terminal)]\n \n use std::env::{self, VarError};\n use std::fmt::{self, Display};\n-use std::io;\n+use std::io::{self, IsTerminal};\n use tracing_subscriber::filter::{Directive, EnvFilter, LevelFilter};\n use tracing_subscriber::layer::SubscriberExt;\n \n@@ -93,11 +94,11 @@ pub fn init_env_logger(env: &str) -> Result<(), Error> {\n }\n \n pub fn stdout_isatty() -> bool {\n-    atty::is(atty::Stream::Stdout)\n+    io::stdout().is_terminal()\n }\n \n pub fn stderr_isatty() -> bool {\n-    atty::is(atty::Stream::Stderr)\n+    io::stderr().is_terminal()\n }\n \n #[derive(Debug)]"}, {"sha": "dff088b9bdfa66140867a8cc88f7e400a6c29961", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -830,5 +830,5 @@ pub(super) fn should_generate_set_arg(field: &Field) -> bool {\n }\n \n pub(super) fn is_doc_comment(attr: &Attribute) -> bool {\n-    attr.path.segments.last().unwrap().ident.to_string() == \"doc\"\n+    attr.path.segments.last().unwrap().ident == \"doc\"\n }"}, {"sha": "bd9cd53e11578b2442d0a981d1c3b6dd7fe1a8a2", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -144,7 +144,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n             AlreadyReported(ErrorGuaranteed { .. }) => {\n                 write!(\n                     f,\n-                    \"an error has already been reported elsewhere (this sould not usually be printed)\"\n+                    \"an error has already been reported elsewhere (this should not usually be printed)\"\n                 )\n             }\n             Layout(ref err) => write!(f, \"{err}\"),"}, {"sha": "d6044ceb0cafc4088a4913c2e5515754c911f8de", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -12,7 +12,12 @@ use rustc_span::{BytePos, Span};\n use rustc_target::spec::abi;\n \n use std::borrow::Cow;\n+use std::collections::hash_map::DefaultHasher;\n use std::fmt;\n+use std::hash::{Hash, Hasher};\n+use std::path::PathBuf;\n+\n+use super::print::PrettyPrinter;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable, TypeVisitable, Lift)]\n pub struct ExpectedFound<T> {\n@@ -985,6 +990,38 @@ fn foo(&self) -> Self::T { String::new() }\n         false\n     }\n \n+    pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n+        let length_limit = 50;\n+        let type_limit = 4;\n+        let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n+            .pretty_print_type(ty)\n+            .expect(\"could not write to `String`\")\n+            .into_buffer();\n+        if regular.len() <= length_limit {\n+            return (regular, None);\n+        }\n+        let short = FmtPrinter::new_with_limit(\n+            self,\n+            hir::def::Namespace::TypeNS,\n+            rustc_session::Limit(type_limit),\n+        )\n+        .pretty_print_type(ty)\n+        .expect(\"could not write to `String`\")\n+        .into_buffer();\n+        if regular == short {\n+            return (regular, None);\n+        }\n+        // Multiple types might be shortened in a single error, ensure we create a file for each.\n+        let mut s = DefaultHasher::new();\n+        ty.hash(&mut s);\n+        let hash = s.finish();\n+        let path = self.output_filenames(()).temp_path_ext(&format!(\"long-type-{hash}.txt\"), None);\n+        match std::fs::write(&path, &regular) {\n+            Ok(_) => (short, Some(path)),\n+            Err(_) => (regular, None),\n+        }\n+    }\n+\n     fn format_generic_args(self, args: &[ty::GenericArg<'tcx>]) -> String {\n         FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n             .path_generic_args(Ok, args)"}, {"sha": "a792d2694b3b9f08e70a4c3d3eb7ba72b4c0f8b1", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -276,28 +276,45 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Display for Instance<'tcx> {\n+fn fmt_instance(\n+    f: &mut fmt::Formatter<'_>,\n+    instance: &Instance<'_>,\n+    type_length: rustc_session::Limit,\n+) -> fmt::Result {\n+    ty::tls::with(|tcx| {\n+        let substs = tcx.lift(instance.substs).expect(\"could not lift for printing\");\n+\n+        let s = FmtPrinter::new_with_limit(tcx, Namespace::ValueNS, type_length)\n+            .print_def_path(instance.def_id(), substs)?\n+            .into_buffer();\n+        f.write_str(&s)\n+    })?;\n+\n+    match instance.def {\n+        InstanceDef::Item(_) => Ok(()),\n+        InstanceDef::VTableShim(_) => write!(f, \" - shim(vtable)\"),\n+        InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n+        InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n+        InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n+        InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),\n+        InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n+        InstanceDef::DropGlue(_, None) => write!(f, \" - shim(None)\"),\n+        InstanceDef::DropGlue(_, Some(ty)) => write!(f, \" - shim(Some({}))\", ty),\n+        InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({})\", ty),\n+    }\n+}\n+\n+pub struct ShortInstance<'a, 'tcx>(pub &'a Instance<'tcx>, pub usize);\n+\n+impl<'a, 'tcx> fmt::Display for ShortInstance<'a, 'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        ty::tls::with(|tcx| {\n-            let substs = tcx.lift(self.substs).expect(\"could not lift for printing\");\n-            let s = FmtPrinter::new(tcx, Namespace::ValueNS)\n-                .print_def_path(self.def_id(), substs)?\n-                .into_buffer();\n-            f.write_str(&s)\n-        })?;\n+        fmt_instance(f, self.0, rustc_session::Limit(self.1))\n+    }\n+}\n \n-        match self.def {\n-            InstanceDef::Item(_) => Ok(()),\n-            InstanceDef::VTableShim(_) => write!(f, \" - shim(vtable)\"),\n-            InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n-            InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n-            InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n-            InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),\n-            InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n-            InstanceDef::DropGlue(_, None) => write!(f, \" - shim(None)\"),\n-            InstanceDef::DropGlue(_, Some(ty)) => write!(f, \" - shim(Some({}))\", ty),\n-            InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({})\", ty),\n-        }\n+impl<'tcx> fmt::Display for Instance<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        ty::tls::with(|tcx| fmt_instance(f, self, tcx.type_length_limit()))\n     }\n }\n "}, {"sha": "a770c6a2e99bee226bab8368096db8c66e174b4f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -84,7 +84,7 @@ pub use self::context::{\n     GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n     UserTypeAnnotationIndex,\n };\n-pub use self::instance::{Instance, InstanceDef};\n+pub use self::instance::{Instance, InstanceDef, ShortInstance};\n pub use self::list::List;\n pub use self::parameterized::ParameterizedOverTcx;\n pub use self::rvalue_scopes::RvalueScopes;"}, {"sha": "023c9d26c42e303700d09d182e80a25c7fb5b5ad", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_session::config::TrimmedDefPaths;\n use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n+use rustc_session::Limit;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n@@ -1583,6 +1584,8 @@ pub struct FmtPrinterData<'a, 'tcx> {\n     region_index: usize,\n     binder_depth: usize,\n     printed_type_count: usize,\n+    type_length_limit: Limit,\n+    truncated: bool,\n \n     pub region_highlight_mode: RegionHighlightMode<'tcx>,\n \n@@ -1605,6 +1608,10 @@ impl DerefMut for FmtPrinter<'_, '_> {\n \n impl<'a, 'tcx> FmtPrinter<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, ns: Namespace) -> Self {\n+        Self::new_with_limit(tcx, ns, tcx.type_length_limit())\n+    }\n+\n+    pub fn new_with_limit(tcx: TyCtxt<'tcx>, ns: Namespace, type_length_limit: Limit) -> Self {\n         FmtPrinter(Box::new(FmtPrinterData {\n             tcx,\n             // Estimated reasonable capacity to allocate upfront based on a few\n@@ -1617,6 +1624,8 @@ impl<'a, 'tcx> FmtPrinter<'a, 'tcx> {\n             region_index: 0,\n             binder_depth: 0,\n             printed_type_count: 0,\n+            type_length_limit,\n+            truncated: false,\n             region_highlight_mode: RegionHighlightMode::new(tcx),\n             ty_infer_name_resolver: None,\n             const_infer_name_resolver: None,\n@@ -1751,11 +1760,11 @@ impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n     }\n \n     fn print_type(mut self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n-        let type_length_limit = self.tcx.type_length_limit();\n-        if type_length_limit.value_within_limit(self.printed_type_count) {\n+        if self.type_length_limit.value_within_limit(self.printed_type_count) {\n             self.printed_type_count += 1;\n             self.pretty_print_type(ty)\n         } else {\n+            self.truncated = true;\n             write!(self, \"...\")?;\n             Ok(self)\n         }\n@@ -2194,11 +2203,9 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n \n         define_scoped_cx!(self);\n \n-        let possible_names =\n-            ('a'..='z').rev().map(|s| Symbol::intern(&format!(\"'{s}\"))).collect::<Vec<_>>();\n+        let possible_names = ('a'..='z').rev().map(|s| Symbol::intern(&format!(\"'{s}\")));\n \n         let mut available_names = possible_names\n-            .into_iter()\n             .filter(|name| !self.used_region_names.contains(&name))\n             .collect::<Vec<_>>();\n         debug!(?available_names);"}, {"sha": "cc69a1bb02db19cac318ec2c149bd18d7dcfc9bf", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -899,7 +899,7 @@ fn debug_with_context_rec<V: Debug + Eq>(\n         let info_elem = map.places[child].proj_elem.unwrap();\n         let child_place_str = match info_elem {\n             TrackElem::Field(field) => {\n-                if place_str.starts_with(\"*\") {\n+                if place_str.starts_with('*') {\n                     format!(\"({}).{}\", place_str, field.index())\n                 } else {\n                     format!(\"{}.{}\", place_str, field.index())"}, {"sha": "d7dd5fc8528454ca76c0a78ce2f1decdbedb437f", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,7 +1,6 @@\n //! Inlining pass for MIR functions\n use crate::deref_separator::deref_finder;\n use rustc_attr::InlineAttr;\n-use rustc_const_eval::transform::validate::equal_up_to_regions;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -14,7 +13,8 @@ use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n \n-use super::simplify::{remove_dead_blocks, CfgSimplifier};\n+use crate::simplify::{remove_dead_blocks, CfgSimplifier};\n+use crate::util;\n use crate::MirPass;\n use std::iter;\n use std::ops::{Range, RangeFrom};\n@@ -180,7 +180,7 @@ impl<'tcx> Inliner<'tcx> {\n         let TerminatorKind::Call { args, destination, .. } = &terminator.kind else { bug!() };\n         let destination_ty = destination.ty(&caller_body.local_decls, self.tcx).ty;\n         let output_type = callee_body.return_ty();\n-        if !equal_up_to_regions(self.tcx, self.param_env, output_type, destination_ty) {\n+        if !util::is_subtype(self.tcx, self.param_env, output_type, destination_ty) {\n             trace!(?output_type, ?destination_ty);\n             return Err(\"failed to normalize return type\");\n         }\n@@ -200,7 +200,7 @@ impl<'tcx> Inliner<'tcx> {\n                 arg_tuple_tys.iter().zip(callee_body.args_iter().skip(skipped_args))\n             {\n                 let input_type = callee_body.local_decls[input].ty;\n-                if !equal_up_to_regions(self.tcx, self.param_env, arg_ty, input_type) {\n+                if !util::is_subtype(self.tcx, self.param_env, input_type, arg_ty) {\n                     trace!(?arg_ty, ?input_type);\n                     return Err(\"failed to normalize tuple argument type\");\n                 }\n@@ -209,7 +209,7 @@ impl<'tcx> Inliner<'tcx> {\n             for (arg, input) in args.iter().zip(callee_body.args_iter()) {\n                 let input_type = callee_body.local_decls[input].ty;\n                 let arg_ty = arg.ty(&caller_body.local_decls, self.tcx);\n-                if !equal_up_to_regions(self.tcx, self.param_env, arg_ty, input_type) {\n+                if !util::is_subtype(self.tcx, self.param_env, input_type, arg_ty) {\n                     trace!(?arg_ty, ?input_type);\n                     return Err(\"failed to normalize argument type\");\n                 }\n@@ -847,7 +847,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n             let parent = Place { local, projection: self.tcx.intern_place_elems(proj_base) };\n             let parent_ty = parent.ty(&self.callee_body.local_decls, self.tcx);\n             let check_equal = |this: &mut Self, f_ty| {\n-                if !equal_up_to_regions(this.tcx, this.param_env, ty, f_ty) {\n+                if !util::is_equal_up_to_subtyping(this.tcx, this.param_env, ty, f_ty) {\n                     trace!(?ty, ?f_ty);\n                     this.validation = Err(\"failed to normalize projection type\");\n                     return;"}, {"sha": "d74893bf0f0e3354bc5b04daacb86d7cb252461c", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -197,7 +197,6 @@ use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;\n use rustc_session::Limit;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use rustc_target::abi::Size;\n-use std::iter;\n use std::ops::Range;\n use std::path::PathBuf;\n \n@@ -541,29 +540,23 @@ fn collect_items_rec<'tcx>(\n }\n \n /// Format instance name that is already known to be too long for rustc.\n-/// Show only the first and last 32 characters to avoid blasting\n+/// Show only the first 2 types if it is longer than 32 characters to avoid blasting\n /// the user's terminal with thousands of lines of type-name.\n ///\n /// If the type name is longer than before+after, it will be written to a file.\n fn shrunk_instance_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: &Instance<'tcx>,\n-    before: usize,\n-    after: usize,\n ) -> (String, Option<PathBuf>) {\n     let s = instance.to_string();\n \n     // Only use the shrunk version if it's really shorter.\n     // This also avoids the case where before and after slices overlap.\n-    if s.chars().nth(before + after + 1).is_some() {\n-        // An iterator of all byte positions including the end of the string.\n-        let positions = || s.char_indices().map(|(i, _)| i).chain(iter::once(s.len()));\n-\n-        let shrunk = format!(\n-            \"{before}...{after}\",\n-            before = &s[..positions().nth(before).unwrap_or(s.len())],\n-            after = &s[positions().rev().nth(after).unwrap_or(0)..],\n-        );\n+    if s.chars().nth(33).is_some() {\n+        let shrunk = format!(\"{}\", ty::ShortInstance(instance, 4));\n+        if shrunk == s {\n+            return (s, None);\n+        }\n \n         let path = tcx.output_filenames(()).temp_path_ext(\"long-type.txt\", None);\n         let written_to_path = std::fs::write(&path, s).ok().map(|_| path);\n@@ -599,7 +592,7 @@ fn check_recursion_limit<'tcx>(\n     if !recursion_limit.value_within_limit(adjusted_recursion_depth) {\n         let def_span = tcx.def_span(def_id);\n         let def_path_str = tcx.def_path_str(def_id);\n-        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n+        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let mut path = PathBuf::new();\n         let was_written = if written_to_path.is_some() {\n             path = written_to_path.unwrap();\n@@ -641,7 +634,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     //\n     // Bail out in these cases to avoid that bad user experience.\n     if !tcx.type_length_limit().value_within_limit(type_length) {\n-        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n+        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let span = tcx.def_span(instance.def_id());\n         let mut path = PathBuf::new();\n         let was_written = if written_to_path.is_some() {"}, {"sha": "dbcfb390333100ae34ce0be134cd5f5d27584e02", "filename": "compiler/rustc_parse/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2FCargo.toml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -7,15 +7,16 @@ edition = \"2021\"\n \n [dependencies]\n bitflags = \"1.0\"\n-tracing = \"0.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_macros = { path = \"../rustc_macros\" }\n-rustc_errors = { path = \"../rustc_errors\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n-rustc_ast = { path = \"../rustc_ast\" }\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\"\n unicode-normalization = \"0.1.11\"\n unicode-width = \"0.1.4\""}, {"sha": "211450250fdf44a1fc7f8f9d86cf7bc83bd5da04", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1219,3 +1219,11 @@ pub(crate) struct FnPtrWithGenericsSugg {\n     pub arity: usize,\n     pub for_param_list_exists: bool,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parser_unexpected_if_with_if)]\n+pub(crate) struct UnexpectedIfWithIf(\n+    #[primary_span]\n+    #[suggestion(applicability = \"machine-applicable\", code = \" \", style = \"verbose\")]\n+    pub Span,\n+);"}, {"sha": "2558ac801addd18c6a3a492db233d7245292787f", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -18,6 +18,7 @@ use crate::errors::{\n };\n \n use crate::lexer::UnmatchedBrace;\n+use crate::parser;\n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Lit, LitKind, TokenKind};\n@@ -37,11 +38,10 @@ use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n-use std::ops::{Deref, DerefMut};\n-\n use std::mem::take;\n-\n-use crate::parser;\n+use std::ops::{Deref, DerefMut};\n+use thin_vec::{thin_vec, ThinVec};\n+use tracing::{debug, trace};\n \n /// Creates a placeholder argument.\n pub(super) fn dummy_arg(ident: Ident) -> Param {\n@@ -65,15 +65,15 @@ pub(super) fn dummy_arg(ident: Ident) -> Param {\n pub(super) trait RecoverQPath: Sized + 'static {\n     const PATH_STYLE: PathStyle = PathStyle::Expr;\n     fn to_ty(&self) -> Option<P<Ty>>;\n-    fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self;\n+    fn recovered(qself: Option<P<QSelf>>, path: ast::Path) -> Self;\n }\n \n impl RecoverQPath for Ty {\n     const PATH_STYLE: PathStyle = PathStyle::Type;\n     fn to_ty(&self) -> Option<P<Ty>> {\n         Some(P(self.clone()))\n     }\n-    fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self {\n+    fn recovered(qself: Option<P<QSelf>>, path: ast::Path) -> Self {\n         Self {\n             span: path.span,\n             kind: TyKind::Path(qself, path),\n@@ -87,7 +87,7 @@ impl RecoverQPath for Pat {\n     fn to_ty(&self) -> Option<P<Ty>> {\n         self.to_ty()\n     }\n-    fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self {\n+    fn recovered(qself: Option<P<QSelf>>, path: ast::Path) -> Self {\n         Self {\n             span: path.span,\n             kind: PatKind::Path(qself, path),\n@@ -101,7 +101,7 @@ impl RecoverQPath for Expr {\n     fn to_ty(&self) -> Option<P<Ty>> {\n         self.to_ty()\n     }\n-    fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self {\n+    fn recovered(qself: Option<P<QSelf>>, path: ast::Path) -> Self {\n         Self {\n             span: path.span,\n             kind: ExprKind::Path(qself, path),\n@@ -638,8 +638,11 @@ impl<'a> Parser<'a> {\n             //     field: value,\n             // }\n             let mut snapshot = self.create_snapshot_for_diagnostic();\n-            let path =\n-                Path { segments: vec![], span: self.prev_token.span.shrink_to_lo(), tokens: None };\n+            let path = Path {\n+                segments: ThinVec::new(),\n+                span: self.prev_token.span.shrink_to_lo(),\n+                tokens: None,\n+            };\n             let struct_expr = snapshot.parse_struct_expr(None, path, false);\n             let block_tail = self.parse_block_tail(lo, s, AttemptLocalParseRecovery::No);\n             return Some(match (struct_expr, block_tail) {\n@@ -1426,7 +1429,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, P<T>> {\n         self.expect(&token::ModSep)?;\n \n-        let mut path = ast::Path { segments: Vec::new(), span: DUMMY_SP, tokens: None };\n+        let mut path = ast::Path { segments: ThinVec::new(), span: DUMMY_SP, tokens: None };\n         self.parse_path_segments(&mut path.segments, T::PATH_STYLE, None)?;\n         path.span = ty_span.to(self.prev_token.span);\n \n@@ -1437,7 +1440,7 @@ impl<'a> Parser<'a> {\n         });\n \n         let path_span = ty_span.shrink_to_hi(); // Use an empty path since `position == 0`.\n-        Ok(P(T::recovered(Some(QSelf { ty, path_span, position: 0 }), path)))\n+        Ok(P(T::recovered(Some(P(QSelf { ty, path_span, position: 0 })), path)))\n     }\n \n     pub fn maybe_consume_incorrect_semicolon(&mut self, items: &[P<Item>]) -> bool {\n@@ -1657,14 +1660,14 @@ impl<'a> Parser<'a> {\n                 let left = begin_par_sp;\n                 let right = self.prev_token.span;\n                 let left_snippet = if let Ok(snip) = sm.span_to_prev_source(left) &&\n-                        !snip.ends_with(\" \") {\n+                        !snip.ends_with(' ') {\n                                 \" \".to_string()\n                             } else {\n                                 \"\".to_string()\n                             };\n \n                 let right_snippet = if let Ok(snip) = sm.span_to_next_source(right) &&\n-                        !snip.starts_with(\" \") {\n+                        !snip.starts_with(' ') {\n                                 \" \".to_string()\n                             } else {\n                                 \"\".to_string()\n@@ -2434,7 +2437,7 @@ impl<'a> Parser<'a> {\n                                             None,\n                                             Path {\n                                                 span: new_span,\n-                                                segments: vec![\n+                                                segments: thin_vec![\n                                                     PathSegment::from_ident(*old_ident),\n                                                     PathSegment::from_ident(*ident),\n                                                 ],"}, {"sha": "9f680a60613ff07ca2251914930e99ed8c10866a", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -21,8 +21,8 @@ use crate::errors::{\n     NoFieldsForFnCall, NotAsNegationOperator, NotAsNegationOperatorSub,\n     OuterAttributeNotAllowedOnIfElse, ParenthesesWithStructFields,\n     RequireColonAfterLabeledExpression, ShiftInterpretedAsGeneric, StructLiteralNotAllowedHere,\n-    StructLiteralNotAllowedHereSugg, TildeAsUnaryOperator, UnexpectedTokenAfterLabel,\n-    UnexpectedTokenAfterLabelSugg, WrapExpressionInParentheses,\n+    StructLiteralNotAllowedHereSugg, TildeAsUnaryOperator, UnexpectedIfWithIf,\n+    UnexpectedTokenAfterLabel, UnexpectedTokenAfterLabelSugg, WrapExpressionInParentheses,\n };\n use crate::maybe_recover_from_interpolated_ty_qpath;\n use core::mem;\n@@ -840,7 +840,7 @@ impl<'a> Parser<'a> {\n                     ExprKind::Index(_, _) => \"indexing\",\n                     ExprKind::Try(_) => \"`?`\",\n                     ExprKind::Field(_, _) => \"a field access\",\n-                    ExprKind::MethodCall(_, _, _, _) => \"a method call\",\n+                    ExprKind::MethodCall(_) => \"a method call\",\n                     ExprKind::Call(_, _) => \"a function call\",\n                     ExprKind::Await(_) => \"`.await`\",\n                     ExprKind::Err => return Ok(with_postfix),\n@@ -1262,24 +1262,32 @@ impl<'a> Parser<'a> {\n         }\n \n         let fn_span_lo = self.token.span;\n-        let mut segment = self.parse_path_segment(PathStyle::Expr, None)?;\n-        self.check_trailing_angle_brackets(&segment, &[&token::OpenDelim(Delimiter::Parenthesis)]);\n-        self.check_turbofish_missing_angle_brackets(&mut segment);\n+        let mut seg = self.parse_path_segment(PathStyle::Expr, None)?;\n+        self.check_trailing_angle_brackets(&seg, &[&token::OpenDelim(Delimiter::Parenthesis)]);\n+        self.check_turbofish_missing_angle_brackets(&mut seg);\n \n         if self.check(&token::OpenDelim(Delimiter::Parenthesis)) {\n             // Method call `expr.f()`\n             let args = self.parse_paren_expr_seq()?;\n             let fn_span = fn_span_lo.to(self.prev_token.span);\n             let span = lo.to(self.prev_token.span);\n-            Ok(self.mk_expr(span, ExprKind::MethodCall(segment, self_arg, args, fn_span)))\n+            Ok(self.mk_expr(\n+                span,\n+                ExprKind::MethodCall(Box::new(ast::MethodCall {\n+                    seg,\n+                    receiver: self_arg,\n+                    args,\n+                    span: fn_span,\n+                })),\n+            ))\n         } else {\n             // Field access `expr.f`\n-            if let Some(args) = segment.args {\n+            if let Some(args) = seg.args {\n                 self.sess.emit_err(FieldExpressionWithGeneric(args.span()));\n             }\n \n             let span = lo.to(self.prev_token.span);\n-            Ok(self.mk_expr(span, ExprKind::Field(self_arg, segment.ident)))\n+            Ok(self.mk_expr(span, ExprKind::Field(self_arg, seg.ident)))\n         }\n     }\n \n@@ -1498,7 +1506,7 @@ impl<'a> Parser<'a> {\n             });\n             (lo.to(self.prev_token.span), ExprKind::MacCall(mac))\n         } else if self.check(&token::OpenDelim(Delimiter::Brace)) &&\n-            let Some(expr) = self.maybe_parse_struct_expr(qself.as_ref(), &path) {\n+            let Some(expr) = self.maybe_parse_struct_expr(&qself, &path) {\n                 if qself.is_some() {\n                     self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);\n                 }\n@@ -2049,9 +2057,9 @@ impl<'a> Parser<'a> {\n         };\n \n         let capture_clause = self.parse_capture_clause()?;\n-        let decl = self.parse_fn_block_decl()?;\n+        let fn_decl = self.parse_fn_block_decl()?;\n         let decl_hi = self.prev_token.span;\n-        let mut body = match decl.output {\n+        let mut body = match fn_decl.output {\n             FnRetTy::Default(_) => {\n                 let restrictions = self.restrictions - Restrictions::STMT_EXPR;\n                 self.parse_expr_res(restrictions, None)?\n@@ -2087,15 +2095,15 @@ impl<'a> Parser<'a> {\n \n         let closure = self.mk_expr(\n             lo.to(body.span),\n-            ExprKind::Closure(\n+            ExprKind::Closure(Box::new(ast::Closure {\n                 binder,\n                 capture_clause,\n                 asyncness,\n                 movability,\n-                decl,\n+                fn_decl,\n                 body,\n-                lo.to(decl_hi),\n-            ),\n+                fn_decl_span: lo.to(decl_hi),\n+            })),\n         );\n \n         // Disable recovery for closure body\n@@ -2231,6 +2239,7 @@ impl<'a> Parser<'a> {\n                 if let Some(block) = recover_block_from_condition(self) {\n                     block\n                 } else {\n+                    self.error_on_extra_if(&cond)?;\n                     // Parse block, which will always fail, but we can add a nice note to the error\n                     self.parse_block().map_err(|mut err| {\n                         err.span_note(\n@@ -2367,6 +2376,16 @@ impl<'a> Parser<'a> {\n         });\n     }\n \n+    fn error_on_extra_if(&mut self, cond: &P<Expr>) -> PResult<'a, ()> {\n+        if let ExprKind::Binary(Spanned { span: binop_span, node: binop}, _, right) = &cond.kind &&\n+            let BinOpKind::And = binop &&\n+            let ExprKind::If(cond, ..) = &right.kind {\n+                    Err(self.sess.create_err(UnexpectedIfWithIf(binop_span.shrink_to_hi().to(cond.span.shrink_to_lo()))))\n+            } else {\n+                Ok(())\n+            }\n+    }\n+\n     /// Parses `for <src_pat> in <src_expr> <src_loop_block>` (`for` token already eaten).\n     fn parse_for_expr(&mut self, opt_label: Option<Label>, lo: Span) -> PResult<'a, P<Expr>> {\n         // Record whether we are about to parse `for (`.\n@@ -2800,15 +2819,15 @@ impl<'a> Parser<'a> {\n \n     fn maybe_parse_struct_expr(\n         &mut self,\n-        qself: Option<&ast::QSelf>,\n+        qself: &Option<P<ast::QSelf>>,\n         path: &ast::Path,\n     ) -> Option<PResult<'a, P<Expr>>> {\n         let struct_allowed = !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);\n         if struct_allowed || self.is_certainly_not_a_block() {\n             if let Err(err) = self.expect(&token::OpenDelim(Delimiter::Brace)) {\n                 return Some(Err(err));\n             }\n-            let expr = self.parse_struct_expr(qself.cloned(), path.clone(), true);\n+            let expr = self.parse_struct_expr(qself.clone(), path.clone(), true);\n             if let (Ok(expr), false) = (&expr, struct_allowed) {\n                 // This is a struct literal, but we don't can't accept them here.\n                 self.sess.emit_err(StructLiteralNotAllowedHere {\n@@ -2939,7 +2958,7 @@ impl<'a> Parser<'a> {\n     /// Precondition: already parsed the '{'.\n     pub(super) fn parse_struct_expr(\n         &mut self,\n-        qself: Option<ast::QSelf>,\n+        qself: Option<P<ast::QSelf>>,\n         pth: ast::Path,\n         recover: bool,\n     ) -> PResult<'a, P<Expr>> {"}, {"sha": "e5f58ca38946334116dcd58fe031ef3c4dddcbfd", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -3,7 +3,6 @@ use crate::errors::{DocCommentDoesNotDocumentAnything, UseEmptyBlockNotSemi};\n use super::diagnostics::{dummy_arg, ConsumeClosingDelim};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, FollowedByType, ForceCollect, Parser, PathStyle, TrailingToken};\n-\n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n@@ -22,9 +21,10 @@ use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n-\n use std::convert::TryFrom;\n use std::mem;\n+use thin_vec::ThinVec;\n+use tracing::debug;\n \n impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser.\n@@ -972,7 +972,8 @@ impl<'a> Parser<'a> {\n     fn parse_use_tree(&mut self) -> PResult<'a, UseTree> {\n         let lo = self.token.span;\n \n-        let mut prefix = ast::Path { segments: Vec::new(), span: lo.shrink_to_lo(), tokens: None };\n+        let mut prefix =\n+            ast::Path { segments: ThinVec::new(), span: lo.shrink_to_lo(), tokens: None };\n         let kind = if self.check(&token::OpenDelim(Delimiter::Brace))\n             || self.check(&token::BinOp(token::Star))\n             || self.is_import_coupler()"}, {"sha": "0e202645a39b85a5e82a296345e7a23ea785d0fb", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -889,7 +889,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a struct (\"record\") pattern (e.g. `Foo { ... }` or `Foo::Bar { ... }`).\n-    fn parse_pat_struct(&mut self, qself: Option<QSelf>, path: Path) -> PResult<'a, PatKind> {\n+    fn parse_pat_struct(&mut self, qself: Option<P<QSelf>>, path: Path) -> PResult<'a, PatKind> {\n         if qself.is_some() {\n             // Feature gate the use of qualified paths in patterns\n             self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);\n@@ -906,7 +906,11 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse tuple struct or tuple variant pattern (e.g. `Foo(...)` or `Foo::Bar(...)`).\n-    fn parse_pat_tuple_struct(&mut self, qself: Option<QSelf>, path: Path) -> PResult<'a, PatKind> {\n+    fn parse_pat_tuple_struct(\n+        &mut self,\n+        qself: Option<P<QSelf>>,\n+        path: Path,\n+    ) -> PResult<'a, PatKind> {\n         let (fields, _) = self.parse_paren_comma_seq(|p| {\n             p.parse_pat_allow_top_alt(\n                 None,"}, {"sha": "2d432e3f5bd65500b5ab8279efb4bd9298eaef62", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -11,8 +11,9 @@ use rustc_ast::{\n use rustc_errors::{pluralize, Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym, Ident};\n-\n use std::mem;\n+use thin_vec::ThinVec;\n+use tracing::debug;\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]\n@@ -48,7 +49,7 @@ impl<'a> Parser<'a> {\n     /// `<T as U>::a`\n     /// `<T as U>::F::a<S>` (without disambiguator)\n     /// `<T as U>::F::a::<S>` (with disambiguator)\n-    pub(super) fn parse_qpath(&mut self, style: PathStyle) -> PResult<'a, (QSelf, Path)> {\n+    pub(super) fn parse_qpath(&mut self, style: PathStyle) -> PResult<'a, (P<QSelf>, Path)> {\n         let lo = self.prev_token.span;\n         let ty = self.parse_ty()?;\n \n@@ -63,7 +64,7 @@ impl<'a> Parser<'a> {\n             path_span = path_lo.to(self.prev_token.span);\n         } else {\n             path_span = self.token.span.to(self.token.span);\n-            path = ast::Path { segments: Vec::new(), span: path_span, tokens: None };\n+            path = ast::Path { segments: ThinVec::new(), span: path_span, tokens: None };\n         }\n \n         // See doc comment for `unmatched_angle_bracket_count`.\n@@ -77,7 +78,7 @@ impl<'a> Parser<'a> {\n             self.expect(&token::ModSep)?;\n         }\n \n-        let qself = QSelf { ty, path_span, position: path.segments.len() };\n+        let qself = P(QSelf { ty, path_span, position: path.segments.len() });\n         self.parse_path_segments(&mut path.segments, style, None)?;\n \n         Ok((\n@@ -179,7 +180,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let lo = self.token.span;\n-        let mut segments = Vec::new();\n+        let mut segments = ThinVec::new();\n         let mod_sep_ctxt = self.token.span.ctxt();\n         if self.eat(&token::ModSep) {\n             segments.push(PathSegment::path_root(lo.shrink_to_lo().with_ctxt(mod_sep_ctxt)));\n@@ -191,7 +192,7 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn parse_path_segments(\n         &mut self,\n-        segments: &mut Vec<PathSegment>,\n+        segments: &mut ThinVec<PathSegment>,\n         style: PathStyle,\n         ty_generics: Option<&Generics>,\n     ) -> PResult<'a, ()> {"}, {"sha": "acb9bd8e78a4a57077e348f4e369eabd910f9730", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -353,7 +353,7 @@ impl CheckAttrVisitor<'_> {\n                 attr.span,\n                 OnlyHasEffectOn {\n                     attr_name: attr.name_or_empty(),\n-                    target_name: allowed_target.name().replace(\" \", \"_\"),\n+                    target_name: allowed_target.name().replace(' ', \"_\"),\n                 },\n             );\n         }"}, {"sha": "5d0224c35f3645a8716d2820e8d8a4f0f49914e9", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -772,7 +772,7 @@ impl<'tcx> DeadVisitor<'tcx> {\n         self.tcx.emit_spanned_lint(\n             lint,\n             tcx.hir().local_def_id_to_hir_id(first_id),\n-            MultiSpan::from_spans(spans.clone()),\n+            MultiSpan::from_spans(spans),\n             diag,\n         );\n     }"}, {"sha": "7c3a0f8f277b5b6480016958e3b3b7a5c24759f0", "filename": "compiler/rustc_resolve/Cargo.toml", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2FCargo.toml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -7,10 +7,8 @@ edition = \"2021\"\n \n [dependencies]\n bitflags = \"1.2.1\"\n-tracing = \"0.1\"\n-rustc_ast = { path = \"../rustc_ast\" }\n rustc_arena = { path = \"../rustc_arena\" }\n-rustc_middle = { path = \"../rustc_middle\" }\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n@@ -19,8 +17,12 @@ rustc_expand = { path = \"../rustc_expand\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\""}, {"sha": "b1cee06849dd98f753c1904498bf73bd9190f64a", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -262,11 +262,11 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     fn visit_expr(&mut self, expr: &'a Expr) {\n         let parent_def = match expr.kind {\n             ExprKind::MacCall(..) => return self.visit_macro_invoc(expr.id),\n-            ExprKind::Closure(_, _, asyncness, ..) => {\n+            ExprKind::Closure(ref closure) => {\n                 // Async closures desugar to closures inside of closures, so\n                 // we must create two defs.\n                 let closure_def = self.create_def(expr.id, DefPathData::ClosureExpr, expr.span);\n-                match asyncness {\n+                match closure.asyncness {\n                     Async::Yes { closure_id, .. } => {\n                         self.create_def(closure_id, DefPathData::ClosureExpr, expr.span)\n                     }"}, {"sha": "bc3a710e84bd046b9213e2086f850d30f47236e8", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 184, "deletions": 363, "changes": 547, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -25,7 +25,9 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span, SyntaxContext};\n+use thin_vec::ThinVec;\n \n+use crate::errors as errs;\n use crate::imports::{Import, ImportKind, ImportResolver};\n use crate::late::{PatternSource, Rib};\n use crate::path_names_to_string;\n@@ -597,78 +599,41 @@ impl<'a> Resolver<'a> {\n \n                 err\n             }\n-            ResolutionError::NameAlreadyUsedInParameterList(name, first_use_span) => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0403,\n-                    \"the name `{}` is already used for a generic \\\n-                     parameter in this item's generic parameters\",\n-                    name,\n-                );\n-                err.span_label(span, \"already used\");\n-                err.span_label(first_use_span, format!(\"first use of `{}`\", name));\n-                err\n-            }\n+            ResolutionError::NameAlreadyUsedInParameterList(name, first_use_span) => self\n+                .session\n+                .create_err(errs::NameAlreadyUsedInParameterList { span, first_use_span, name }),\n             ResolutionError::MethodNotMemberOfTrait(method, trait_, candidate) => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n+                self.session.create_err(errs::MethodNotMemberOfTrait {\n                     span,\n-                    E0407,\n-                    \"method `{}` is not a member of trait `{}`\",\n                     method,\n-                    trait_\n-                );\n-                err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n-                if let Some(candidate) = candidate {\n-                    err.span_suggestion(\n-                        method.span,\n-                        \"there is an associated function with a similar name\",\n-                        candidate.to_ident_string(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                err\n+                    trait_,\n+                    sub: candidate.map(|c| errs::AssociatedFnWithSimilarNameExists {\n+                        span: method.span,\n+                        candidate: c,\n+                    }),\n+                })\n             }\n             ResolutionError::TypeNotMemberOfTrait(type_, trait_, candidate) => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n+                self.session.create_err(errs::TypeNotMemberOfTrait {\n                     span,\n-                    E0437,\n-                    \"type `{}` is not a member of trait `{}`\",\n                     type_,\n-                    trait_\n-                );\n-                err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n-                if let Some(candidate) = candidate {\n-                    err.span_suggestion(\n-                        type_.span,\n-                        \"there is an associated type with a similar name\",\n-                        candidate.to_ident_string(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                err\n+                    trait_,\n+                    sub: candidate.map(|c| errs::AssociatedTypeWithSimilarNameExists {\n+                        span: type_.span,\n+                        candidate: c,\n+                    }),\n+                })\n             }\n             ResolutionError::ConstNotMemberOfTrait(const_, trait_, candidate) => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n+                self.session.create_err(errs::ConstNotMemberOfTrait {\n                     span,\n-                    E0438,\n-                    \"const `{}` is not a member of trait `{}`\",\n                     const_,\n-                    trait_\n-                );\n-                err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n-                if let Some(candidate) = candidate {\n-                    err.span_suggestion(\n-                        const_.span,\n-                        \"there is an associated constant with a similar name\",\n-                        candidate.to_ident_string(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                err\n+                    trait_,\n+                    sub: candidate.map(|c| errs::AssociatedConstWithSimilarNameExists {\n+                        span: const_.span,\n+                        candidate: c,\n+                    }),\n+                })\n             }\n             ResolutionError::VariableNotBoundInPattern(binding_error, parent_scope) => {\n                 let BindingError { name, target, origin, could_be_path } = binding_error;\n@@ -730,128 +695,78 @@ impl<'a> Resolver<'a> {\n                 err\n             }\n             ResolutionError::VariableBoundWithDifferentMode(variable_name, first_binding_span) => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0409,\n-                    \"variable `{}` is bound inconsistently across alternatives separated by `|`\",\n-                    variable_name\n-                );\n-                err.span_label(span, \"bound in different ways\");\n-                err.span_label(first_binding_span, \"first binding\");\n-                err\n-            }\n-            ResolutionError::IdentifierBoundMoreThanOnceInParameterList(identifier) => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0415,\n-                    \"identifier `{}` is bound more than once in this parameter list\",\n-                    identifier\n-                );\n-                err.span_label(span, \"used as parameter more than once\");\n-                err\n-            }\n-            ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(identifier) => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n+                self.session.create_err(errs::VariableBoundWithDifferentMode {\n                     span,\n-                    E0416,\n-                    \"identifier `{}` is bound more than once in the same pattern\",\n-                    identifier\n-                );\n-                err.span_label(span, \"used in a pattern more than once\");\n-                err\n-            }\n+                    first_binding_span,\n+                    variable_name,\n+                })\n+            }\n+            ResolutionError::IdentifierBoundMoreThanOnceInParameterList(identifier) => self\n+                .session\n+                .create_err(errs::IdentifierBoundMoreThanOnceInParameterList { span, identifier }),\n+            ResolutionError::IdentifierBoundMoreThanOnceInSamePattern(identifier) => self\n+                .session\n+                .create_err(errs::IdentifierBoundMoreThanOnceInSamePattern { span, identifier }),\n             ResolutionError::UndeclaredLabel { name, suggestion } => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0426,\n-                    \"use of undeclared label `{}`\",\n-                    name\n-                );\n-\n-                err.span_label(span, format!(\"undeclared label `{}`\", name));\n-\n-                match suggestion {\n+                let ((sub_reachable, sub_reachable_suggestion), sub_unreachable) = match suggestion\n+                {\n                     // A reachable label with a similar name exists.\n-                    Some((ident, true)) => {\n-                        err.span_label(ident.span, \"a label with a similar name is reachable\");\n-                        err.span_suggestion(\n-                            span,\n-                            \"try using similarly named label\",\n-                            ident.name,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n+                    Some((ident, true)) => (\n+                        (\n+                            Some(errs::LabelWithSimilarNameReachable(ident.span)),\n+                            Some(errs::TryUsingSimilarlyNamedLabel {\n+                                span,\n+                                ident_name: ident.name,\n+                            }),\n+                        ),\n+                        None,\n+                    ),\n                     // An unreachable label with a similar name exists.\n-                    Some((ident, false)) => {\n-                        err.span_label(\n-                            ident.span,\n-                            \"a label with a similar name exists but is unreachable\",\n-                        );\n-                    }\n+                    Some((ident, false)) => (\n+                        (None, None),\n+                        Some(errs::UnreachableLabelWithSimilarNameExists {\n+                            ident_span: ident.span,\n+                        }),\n+                    ),\n                     // No similarly-named labels exist.\n-                    None => (),\n-                }\n-\n-                err\n+                    None => ((None, None), None),\n+                };\n+                self.session.create_err(errs::UndeclaredLabel {\n+                    span,\n+                    name,\n+                    sub_reachable,\n+                    sub_reachable_suggestion,\n+                    sub_unreachable,\n+                })\n             }\n             ResolutionError::SelfImportsOnlyAllowedWithin { root, span_with_rename } => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0429,\n-                    \"{}\",\n-                    \"`self` imports are only allowed within a { } list\"\n-                );\n-\n                 // None of the suggestions below would help with a case like `use self`.\n-                if !root {\n+                let (suggestion, mpart_suggestion) = if root {\n+                    (None, None)\n+                } else {\n                     // use foo::bar::self        -> foo::bar\n                     // use foo::bar::self as abc -> foo::bar as abc\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider importing the module directly\",\n-                        \"\",\n-                        Applicability::MachineApplicable,\n-                    );\n+                    let suggestion = errs::SelfImportsOnlyAllowedWithinSuggestion { span };\n \n                     // use foo::bar::self        -> foo::bar::{self}\n                     // use foo::bar::self as abc -> foo::bar::{self as abc}\n-                    let braces = vec![\n-                        (span_with_rename.shrink_to_lo(), \"{\".to_string()),\n-                        (span_with_rename.shrink_to_hi(), \"}\".to_string()),\n-                    ];\n-                    err.multipart_suggestion(\n-                        \"alternatively, use the multi-path `use` syntax to import `self`\",\n-                        braces,\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-                err\n+                    let mpart_suggestion = errs::SelfImportsOnlyAllowedWithinMultipartSuggestion {\n+                        multipart_start: span_with_rename.shrink_to_lo(),\n+                        multipart_end: span_with_rename.shrink_to_hi(),\n+                    };\n+                    (Some(suggestion), Some(mpart_suggestion))\n+                };\n+                self.session.create_err(errs::SelfImportsOnlyAllowedWithin {\n+                    span,\n+                    suggestion,\n+                    mpart_suggestion,\n+                })\n             }\n             ResolutionError::SelfImportCanOnlyAppearOnceInTheList => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0430,\n-                    \"`self` import can only appear once in an import list\"\n-                );\n-                err.span_label(span, \"can only appear once in an import list\");\n-                err\n+                self.session.create_err(errs::SelfImportCanOnlyAppearOnceInTheList { span })\n             }\n             ResolutionError::SelfImportOnlyInImportListWithNonEmptyPrefix => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0431,\n-                    \"`self` import can only appear in an import list with \\\n-                                                a non-empty prefix\"\n-                );\n-                err.span_label(span, \"can only appear in an import list with a non-empty prefix\");\n-                err\n+                self.session.create_err(errs::SelfImportOnlyInImportListWithNonEmptyPrefix { span })\n             }\n             ResolutionError::FailedToResolve { label, suggestion } => {\n                 let mut err =\n@@ -869,23 +784,9 @@ impl<'a> Resolver<'a> {\n                 err\n             }\n             ResolutionError::CannotCaptureDynamicEnvironmentInFnItem => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0434,\n-                    \"{}\",\n-                    \"can't capture dynamic environment in a fn item\"\n-                );\n-                err.help(\"use the `|| { ... }` closure form instead\");\n-                err\n+                self.session.create_err(errs::CannotCaptureDynamicEnvironmentInFnItem { span })\n             }\n-            ResolutionError::AttemptToUseNonConstantValueInConstant(ident, sugg, current) => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0435,\n-                    \"attempt to use a non-constant value in a constant\"\n-                );\n+            ResolutionError::AttemptToUseNonConstantValueInConstant(ident, suggestion, current) => {\n                 // let foo =...\n                 //     ^^^ given this Span\n                 // ------- get this Span to have an applicable suggestion\n@@ -899,23 +800,34 @@ impl<'a> Resolver<'a> {\n                     .source_map()\n                     .span_extend_to_prev_str(ident.span, current, true, false);\n \n-                match sp {\n+                let ((with, with_label), without) = match sp {\n                     Some(sp) if !self.session.source_map().is_multiline(sp) => {\n                         let sp = sp.with_lo(BytePos(sp.lo().0 - (current.len() as u32)));\n-                        err.span_suggestion(\n-                            sp,\n-                            &format!(\"consider using `{}` instead of `{}`\", sugg, current),\n-                            format!(\"{} {}\", sugg, ident),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        err.span_label(span, \"non-constant value\");\n-                    }\n-                    _ => {\n-                        err.span_label(ident.span, &format!(\"this would need to be a `{}`\", sugg));\n+                        (\n+                        (Some(errs::AttemptToUseNonConstantValueInConstantWithSuggestion {\n+                                span: sp,\n+                                ident,\n+                                suggestion,\n+                                current,\n+                            }), Some(errs::AttemptToUseNonConstantValueInConstantLabelWithSuggestion {span})),\n+                            None,\n+                        )\n                     }\n-                }\n+                    _ => (\n+                        (None, None),\n+                        Some(errs::AttemptToUseNonConstantValueInConstantWithoutSuggestion {\n+                            ident_span: ident.span,\n+                            suggestion,\n+                        }),\n+                    ),\n+                };\n \n-                err\n+                self.session.create_err(errs::AttemptToUseNonConstantValueInConstant {\n+                    span,\n+                    with,\n+                    with_label,\n+                    without,\n+                })\n             }\n             ResolutionError::BindingShadowsSomethingUnacceptable {\n                 shadowing_binding,\n@@ -924,135 +836,80 @@ impl<'a> Resolver<'a> {\n                 article,\n                 shadowed_binding,\n                 shadowed_binding_span,\n-            } => {\n-                let shadowed_binding_descr = shadowed_binding.descr();\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0530,\n-                    \"{}s cannot shadow {}s\",\n-                    shadowing_binding.descr(),\n-                    shadowed_binding_descr,\n-                );\n-                err.span_label(\n-                    span,\n-                    format!(\"cannot be named the same as {} {}\", article, shadowed_binding_descr),\n-                );\n-                match (shadowing_binding, shadowed_binding) {\n+            } => self.session.create_err(errs::BindingShadowsSomethingUnacceptable {\n+                span,\n+                shadowing_binding,\n+                shadowed_binding,\n+                article,\n+                sub_suggestion: match (shadowing_binding, shadowed_binding) {\n                     (\n                         PatternSource::Match,\n                         Res::Def(DefKind::Ctor(CtorOf::Variant | CtorOf::Struct, CtorKind::Fn), _),\n-                    ) => {\n-                        err.span_suggestion(\n-                            span,\n-                            \"try specify the pattern arguments\",\n-                            format!(\"{}(..)\", name),\n-                            Applicability::Unspecified,\n-                        );\n-                    }\n-                    _ => (),\n-                }\n-                let msg =\n-                    format!(\"the {} `{}` is {} here\", shadowed_binding_descr, name, participle);\n-                err.span_label(shadowed_binding_span, msg);\n-                err\n-            }\n+                    ) => Some(errs::BindingShadowsSomethingUnacceptableSuggestion { span, name }),\n+                    _ => None,\n+                },\n+                shadowed_binding_span,\n+                participle,\n+                name,\n+            }),\n             ResolutionError::ForwardDeclaredGenericParam => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0128,\n-                    \"generic parameters with a default cannot use \\\n-                                                forward declared identifiers\"\n-                );\n-                err.span_label(span, \"defaulted generic parameters cannot be forward declared\");\n-                err\n+                self.session.create_err(errs::ForwardDeclaredGenericParam { span })\n             }\n             ResolutionError::ParamInTyOfConstParam(name) => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0770,\n-                    \"the type of const parameters must not depend on other generic parameters\"\n-                );\n-                err.span_label(\n-                    span,\n-                    format!(\"the type must not depend on the parameter `{}`\", name),\n-                );\n-                err\n+                self.session.create_err(errs::ParamInTyOfConstParam { span, name })\n             }\n             ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n-                let mut err = self.session.struct_span_err(\n+                self.session.create_err(errs::ParamInNonTrivialAnonConst {\n                     span,\n-                    \"generic parameters may not be used in const operations\",\n-                );\n-                err.span_label(span, &format!(\"cannot perform const operation using `{}`\", name));\n-\n-                if is_type {\n-                    err.note(\"type parameters may not be used in const expressions\");\n-                } else {\n-                    err.help(&format!(\n-                        \"const parameters may only be used as standalone arguments, i.e. `{}`\",\n-                        name\n-                    ));\n-                }\n-\n-                if self.session.is_nightly_build() {\n-                    err.help(\n-                        \"use `#![feature(generic_const_exprs)]` to allow generic const expressions\",\n-                    );\n-                }\n-\n-                err\n+                    name,\n+                    sub_is_type: if is_type {\n+                        errs::ParamInNonTrivialAnonConstIsType::AType\n+                    } else {\n+                        errs::ParamInNonTrivialAnonConstIsType::NotAType { name }\n+                    },\n+                    help: self\n+                        .session\n+                        .is_nightly_build()\n+                        .then_some(errs::ParamInNonTrivialAnonConstHelp),\n+                })\n             }\n             ResolutionError::SelfInGenericParamDefault => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0735,\n-                    \"generic parameters cannot use `Self` in their defaults\"\n-                );\n-                err.span_label(span, \"`Self` in generic parameter default\");\n-                err\n+                self.session.create_err(errs::SelfInGenericParamDefault { span })\n             }\n             ResolutionError::UnreachableLabel { name, definition_span, suggestion } => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n+                let ((sub_suggestion_label, sub_suggestion), sub_unreachable_label) =\n+                    match suggestion {\n+                        // A reachable label with a similar name exists.\n+                        Some((ident, true)) => (\n+                            (\n+                                Some(errs::UnreachableLabelSubLabel { ident_span: ident.span }),\n+                                Some(errs::UnreachableLabelSubSuggestion {\n+                                    span,\n+                                    // intentionally taking 'ident.name' instead of 'ident' itself, as this\n+                                    // could be used in suggestion context\n+                                    ident_name: ident.name,\n+                                }),\n+                            ),\n+                            None,\n+                        ),\n+                        // An unreachable label with a similar name exists.\n+                        Some((ident, false)) => (\n+                            (None, None),\n+                            Some(errs::UnreachableLabelSubLabelUnreachable {\n+                                ident_span: ident.span,\n+                            }),\n+                        ),\n+                        // No similarly-named labels exist.\n+                        None => ((None, None), None),\n+                    };\n+                self.session.create_err(errs::UnreachableLabel {\n                     span,\n-                    E0767,\n-                    \"use of unreachable label `{}`\",\n                     name,\n-                );\n-\n-                err.span_label(definition_span, \"unreachable label defined here\");\n-                err.span_label(span, format!(\"unreachable label `{}`\", name));\n-                err.note(\n-                    \"labels are unreachable through functions, closures, async blocks and modules\",\n-                );\n-\n-                match suggestion {\n-                    // A reachable label with a similar name exists.\n-                    Some((ident, true)) => {\n-                        err.span_label(ident.span, \"a label with a similar name is reachable\");\n-                        err.span_suggestion(\n-                            span,\n-                            \"try using similarly named label\",\n-                            ident.name,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                    // An unreachable label with a similar name exists.\n-                    Some((ident, false)) => {\n-                        err.span_label(\n-                            ident.span,\n-                            \"a label with a similar name exists but is also unreachable\",\n-                        );\n-                    }\n-                    // No similarly-named labels exist.\n-                    None => (),\n-                }\n-\n-                err\n+                    definition_span,\n+                    sub_suggestion,\n+                    sub_suggestion_label,\n+                    sub_unreachable_label,\n+                })\n             }\n             ResolutionError::TraitImplMismatch {\n                 name,\n@@ -1073,25 +930,10 @@ impl<'a> Resolver<'a> {\n                 err.span_label(trait_item_span, \"item in trait\");\n                 err\n             }\n-            ResolutionError::TraitImplDuplicate { name, trait_item_span, old_span } => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0201,\n-                    \"duplicate definitions with name `{}`:\",\n-                    name,\n-                );\n-                err.span_label(old_span, \"previous definition here\");\n-                err.span_label(trait_item_span, \"item in trait\");\n-                err.span_label(span, \"duplicate definition\");\n-                err\n-            }\n-            ResolutionError::InvalidAsmSym => {\n-                let mut err = self.session.struct_span_err(span, \"invalid `sym` operand\");\n-                err.span_label(span, \"is a local variable\");\n-                err.help(\"`sym` operands must refer to either a function or a static\");\n-                err\n-            }\n+            ResolutionError::TraitImplDuplicate { name, trait_item_span, old_span } => self\n+                .session\n+                .create_err(errs::TraitImplDuplicate { span, name, trait_item_span, old_span }),\n+            ResolutionError::InvalidAsmSym => self.session.create_err(errs::InvalidAsmSym { span }),\n         }\n     }\n \n@@ -1101,48 +943,27 @@ impl<'a> Resolver<'a> {\n     ) -> ErrorGuaranteed {\n         match vis_resolution_error {\n             VisResolutionError::Relative2018(span, path) => {\n-                let mut err = self.session.struct_span_err(\n+                self.session.create_err(errs::Relative2018 {\n                     span,\n-                    \"relative paths are not supported in visibilities in 2018 edition or later\",\n-                );\n-                err.span_suggestion(\n-                    path.span,\n-                    \"try\",\n-                    format!(\"crate::{}\", pprust::path_to_string(&path)),\n-                    Applicability::MaybeIncorrect,\n-                );\n-                err\n+                    path_span: path.span,\n+                    // intentionally converting to String, as the text would also be used as\n+                    // in suggestion context\n+                    path_str: pprust::path_to_string(&path),\n+                })\n+            }\n+            VisResolutionError::AncestorOnly(span) => {\n+                self.session.create_err(errs::AncestorOnly(span))\n             }\n-            VisResolutionError::AncestorOnly(span) => struct_span_err!(\n-                self.session,\n-                span,\n-                E0742,\n-                \"visibilities can only be restricted to ancestor modules\"\n-            ),\n             VisResolutionError::FailedToResolve(span, label, suggestion) => {\n                 self.into_struct_error(span, ResolutionError::FailedToResolve { label, suggestion })\n             }\n             VisResolutionError::ExpectedFound(span, path_str, res) => {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    span,\n-                    E0577,\n-                    \"expected module, found {} `{}`\",\n-                    res.descr(),\n-                    path_str\n-                );\n-                err.span_label(span, \"not a module\");\n-                err\n+                self.session.create_err(errs::ExpectedFound { span, res, path_str })\n             }\n-            VisResolutionError::Indeterminate(span) => struct_span_err!(\n-                self.session,\n-                span,\n-                E0578,\n-                \"cannot determine resolution for the visibility\"\n-            ),\n-            VisResolutionError::ModuleOnly(span) => {\n-                self.session.struct_span_err(span, \"visibility must resolve to a module\")\n+            VisResolutionError::Indeterminate(span) => {\n+                self.session.create_err(errs::Indeterminate(span))\n             }\n+            VisResolutionError::ModuleOnly(span) => self.session.create_err(errs::ModuleOnly(span)),\n         }\n         .emit()\n     }\n@@ -1295,7 +1116,7 @@ impl<'a> Resolver<'a> {\n     {\n         let mut candidates = Vec::new();\n         let mut seen_modules = FxHashSet::default();\n-        let mut worklist = vec![(start_module, Vec::<ast::PathSegment>::new(), true)];\n+        let mut worklist = vec![(start_module, ThinVec::<ast::PathSegment>::new(), true)];\n         let mut worklist_via_import = vec![];\n \n         while let Some((in_module, path_segments, accessible)) = match worklist.pop() {"}, {"sha": "2c442774667b2b21dc8c56b1cf3489c71c8cc6d8", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "added", "additions": 474, "deletions": 0, "changes": 474, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,474 @@\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n+use rustc_span::{\n+    symbol::{Ident, Symbol},\n+    Span,\n+};\n+\n+use crate::{late::PatternSource, Res};\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_parent_module_reset_for_binding, code = \"E0637\")]\n+pub(crate) struct ParentModuleResetForBinding;\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_ampersand_used_without_explicit_lifetime_name, code = \"E0637\")]\n+#[note]\n+pub(crate) struct AmpersandUsedWithoutExplicitLifetimeName(#[primary_span] pub(crate) Span);\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_underscore_lifetime_name_cannot_be_used_here, code = \"E0637\")]\n+#[note]\n+pub(crate) struct UnderscoreLifetimeNameCannotBeUsedHere(#[primary_span] pub(crate) Span);\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_crate_may_not_be_imported)]\n+pub(crate) struct CrateMayNotBeImprted(#[primary_span] pub(crate) Span);\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_crate_root_imports_must_be_named_explicitly)]\n+pub(crate) struct CrateRootNamesMustBeNamedExplicitly(#[primary_span] pub(crate) Span);\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_crate_root_imports_must_be_named_explicitly)]\n+pub(crate) struct ResolutionError(#[primary_span] pub(crate) Span);\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_name_is_already_used_as_generic_parameter, code = \"E0403\")]\n+pub(crate) struct NameAlreadyUsedInParameterList {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    #[label(first_use_of_name)]\n+    pub(crate) first_use_span: Span,\n+    pub(crate) name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_method_not_member_of_trait, code = \"E0407\")]\n+pub(crate) struct MethodNotMemberOfTrait {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) method: Ident,\n+    pub(crate) trait_: String,\n+    #[subdiagnostic]\n+    pub(crate) sub: Option<AssociatedFnWithSimilarNameExists>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    resolve_associated_fn_with_similar_name_exists,\n+    code = \"{candidate}\",\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub(crate) struct AssociatedFnWithSimilarNameExists {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    pub(crate) candidate: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_type_not_member_of_trait, code = \"E0437\")]\n+pub(crate) struct TypeNotMemberOfTrait {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) type_: Ident,\n+    pub(crate) trait_: String,\n+    #[subdiagnostic]\n+    pub(crate) sub: Option<AssociatedTypeWithSimilarNameExists>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    resolve_associated_type_with_similar_name_exists,\n+    code = \"{candidate}\",\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub(crate) struct AssociatedTypeWithSimilarNameExists {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    pub(crate) candidate: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_const_not_member_of_trait, code = \"E0438\")]\n+pub(crate) struct ConstNotMemberOfTrait {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) const_: Ident,\n+    pub(crate) trait_: String,\n+    #[subdiagnostic]\n+    pub(crate) sub: Option<AssociatedConstWithSimilarNameExists>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    resolve_associated_const_with_similar_name_exists,\n+    code = \"{candidate}\",\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub(crate) struct AssociatedConstWithSimilarNameExists {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    pub(crate) candidate: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_variable_bound_with_different_mode, code = \"E0409\")]\n+pub(crate) struct VariableBoundWithDifferentMode {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    #[label(first_binding_span)]\n+    pub(crate) first_binding_span: Span,\n+    pub(crate) variable_name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_ident_bound_more_than_once_in_parameter_list, code = \"E0415\")]\n+pub(crate) struct IdentifierBoundMoreThanOnceInParameterList {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) identifier: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_ident_bound_more_than_once_in_same_pattern, code = \"E0416\")]\n+pub(crate) struct IdentifierBoundMoreThanOnceInSamePattern {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) identifier: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_undeclared_label, code = \"E0426\")]\n+pub(crate) struct UndeclaredLabel {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) name: Symbol,\n+    #[subdiagnostic]\n+    pub(crate) sub_reachable: Option<LabelWithSimilarNameReachable>,\n+    #[subdiagnostic]\n+    pub(crate) sub_reachable_suggestion: Option<TryUsingSimilarlyNamedLabel>,\n+    #[subdiagnostic]\n+    pub(crate) sub_unreachable: Option<UnreachableLabelWithSimilarNameExists>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[label(resolve_label_with_similar_name_reachable)]\n+pub(crate) struct LabelWithSimilarNameReachable(#[primary_span] pub(crate) Span);\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    resolve_try_using_similarly_named_label,\n+    code = \"{ident_name}\",\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub(crate) struct TryUsingSimilarlyNamedLabel {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    pub(crate) ident_name: Symbol,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[label(resolve_unreachable_label_with_similar_name_exists)]\n+pub(crate) struct UnreachableLabelWithSimilarNameExists {\n+    #[primary_span]\n+    pub(crate) ident_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_self_import_can_only_appear_once_in_the_list, code = \"E0430\")]\n+pub(crate) struct SelfImportCanOnlyAppearOnceInTheList {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_self_import_only_in_import_list_with_non_empty_prefix, code = \"E0431\")]\n+pub(crate) struct SelfImportOnlyInImportListWithNonEmptyPrefix {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_cannot_capture_dynamic_environment_in_fn_item, code = \"E0434\")]\n+#[help]\n+pub(crate) struct CannotCaptureDynamicEnvironmentInFnItem {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_attempt_to_use_non_constant_value_in_constant, code = \"E0435\")]\n+pub(crate) struct AttemptToUseNonConstantValueInConstant<'a> {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    #[subdiagnostic]\n+    pub(crate) with: Option<AttemptToUseNonConstantValueInConstantWithSuggestion<'a>>,\n+    #[subdiagnostic]\n+    pub(crate) with_label: Option<AttemptToUseNonConstantValueInConstantLabelWithSuggestion>,\n+    #[subdiagnostic]\n+    pub(crate) without: Option<AttemptToUseNonConstantValueInConstantWithoutSuggestion<'a>>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    resolve_attempt_to_use_non_constant_value_in_constant_with_suggestion,\n+    code = \"{suggestion} {ident}\",\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub(crate) struct AttemptToUseNonConstantValueInConstantWithSuggestion<'a> {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    pub(crate) ident: Ident,\n+    pub(crate) suggestion: &'a str,\n+    pub(crate) current: &'a str,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[label(resolve_attempt_to_use_non_constant_value_in_constant_label_with_suggestion)]\n+pub(crate) struct AttemptToUseNonConstantValueInConstantLabelWithSuggestion {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[label(resolve_attempt_to_use_non_constant_value_in_constant_without_suggestion)]\n+pub(crate) struct AttemptToUseNonConstantValueInConstantWithoutSuggestion<'a> {\n+    #[primary_span]\n+    pub(crate) ident_span: Span,\n+    pub(crate) suggestion: &'a str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_self_imports_only_allowed_within, code = \"E0429\")]\n+pub(crate) struct SelfImportsOnlyAllowedWithin {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    #[subdiagnostic]\n+    pub(crate) suggestion: Option<SelfImportsOnlyAllowedWithinSuggestion>,\n+    #[subdiagnostic]\n+    pub(crate) mpart_suggestion: Option<SelfImportsOnlyAllowedWithinMultipartSuggestion>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    resolve_self_imports_only_allowed_within_suggestion,\n+    code = \"\",\n+    applicability = \"machine-applicable\"\n+)]\n+pub(crate) struct SelfImportsOnlyAllowedWithinSuggestion {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(\n+    resolve_self_imports_only_allowed_within_multipart_suggestion,\n+    applicability = \"machine-applicable\"\n+)]\n+pub(crate) struct SelfImportsOnlyAllowedWithinMultipartSuggestion {\n+    #[suggestion_part(code = \"{{\")]\n+    pub(crate) multipart_start: Span,\n+    #[suggestion_part(code = \"}}\")]\n+    pub(crate) multipart_end: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_binding_shadows_something_unacceptable, code = \"E0530\")]\n+pub(crate) struct BindingShadowsSomethingUnacceptable<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) shadowing_binding: PatternSource,\n+    pub(crate) shadowed_binding: Res,\n+    pub(crate) article: &'a str,\n+    #[subdiagnostic]\n+    pub(crate) sub_suggestion: Option<BindingShadowsSomethingUnacceptableSuggestion>,\n+    #[label(label_shadowed_binding)]\n+    pub(crate) shadowed_binding_span: Span,\n+    pub(crate) participle: &'a str,\n+    pub(crate) name: Symbol,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    resolve_binding_shadows_something_unacceptable_suggestion,\n+    code = \"{name}(..)\",\n+    applicability = \"unspecified\"\n+)]\n+pub(crate) struct BindingShadowsSomethingUnacceptableSuggestion {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    pub(crate) name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_forward_declared_generic_param, code = \"E0128\")]\n+pub(crate) struct ForwardDeclaredGenericParam {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_param_in_ty_of_const_param, code = \"E0770\")]\n+pub(crate) struct ParamInTyOfConstParam {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_self_in_generic_param_default, code = \"E0735\")]\n+pub(crate) struct SelfInGenericParamDefault {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_param_in_non_trivial_anon_const)]\n+pub(crate) struct ParamInNonTrivialAnonConst {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) name: Symbol,\n+    #[subdiagnostic]\n+    pub(crate) sub_is_type: ParamInNonTrivialAnonConstIsType,\n+    #[subdiagnostic]\n+    pub(crate) help: Option<ParamInNonTrivialAnonConstHelp>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[help(resolve_param_in_non_trivial_anon_const_help)]\n+pub(crate) struct ParamInNonTrivialAnonConstHelp;\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum ParamInNonTrivialAnonConstIsType {\n+    #[note(resolve_param_in_non_trivial_anon_const_sub_type)]\n+    AType,\n+    #[help(resolve_param_in_non_trivial_anon_const_sub_non_type)]\n+    NotAType { name: Symbol },\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_unreachable_label, code = \"E0767\")]\n+#[note]\n+pub(crate) struct UnreachableLabel {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) name: Symbol,\n+    #[label(label_definition_span)]\n+    pub(crate) definition_span: Span,\n+    #[subdiagnostic]\n+    pub(crate) sub_suggestion: Option<UnreachableLabelSubSuggestion>,\n+    #[subdiagnostic]\n+    pub(crate) sub_suggestion_label: Option<UnreachableLabelSubLabel>,\n+    #[subdiagnostic]\n+    pub(crate) sub_unreachable_label: Option<UnreachableLabelSubLabelUnreachable>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    resolve_unreachable_label_suggestion_use_similarly_named,\n+    code = \"{ident_name}\",\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub(crate) struct UnreachableLabelSubSuggestion {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    pub(crate) ident_name: Symbol,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[label(resolve_unreachable_label_similar_name_reachable)]\n+pub(crate) struct UnreachableLabelSubLabel {\n+    #[primary_span]\n+    pub(crate) ident_span: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[label(resolve_unreachable_label_similar_name_unreachable)]\n+pub(crate) struct UnreachableLabelSubLabelUnreachable {\n+    #[primary_span]\n+    pub(crate) ident_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_trait_impl_mismatch, code = \"{code}\")]\n+pub(crate) struct TraitImplMismatch {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) name: Symbol,\n+    pub(crate) kind: String,\n+    #[label(label_trait_item)]\n+    pub(crate) trait_item_span: Span,\n+    pub(crate) trait_path: String,\n+    pub(crate) code: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_invalid_asm_sym)]\n+#[help]\n+pub(crate) struct InvalidAsmSym {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_trait_impl_duplicate, code = \"E0201\")]\n+pub(crate) struct TraitImplDuplicate {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    #[label(old_span_label)]\n+    pub(crate) old_span: Span,\n+    #[label(trait_item_span)]\n+    pub(crate) trait_item_span: Span,\n+    pub(crate) name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_relative_2018)]\n+pub(crate) struct Relative2018 {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    #[suggestion(code = \"crate::{path_str}\", applicability = \"maybe-incorrect\")]\n+    pub(crate) path_span: Span,\n+    pub(crate) path_str: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_ancestor_only, code = \"E0742\")]\n+pub(crate) struct AncestorOnly(#[primary_span] pub(crate) Span);\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_expected_found, code = \"E0577\")]\n+pub(crate) struct ExpectedFound {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) res: Res,\n+    pub(crate) path_str: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_indeterminate, code = \"E0578\")]\n+pub(crate) struct Indeterminate(#[primary_span] pub(crate) Span);\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_module_only)]\n+pub(crate) struct ModuleOnly(#[primary_span] pub(crate) Span);"}, {"sha": "5072d2aad1669ff99e10c879563db2606aa237a8", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n use rustc_ast::*;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n-use rustc_errors::DiagnosticId;\n+use rustc_errors::{DiagnosticArgValue, DiagnosticId, IntoDiagnosticArg};\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, LifetimeRes, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n@@ -31,6 +31,7 @@ use smallvec::{smallvec, SmallVec};\n \n use rustc_span::source_map::{respan, Spanned};\n use std::assert_matches::debug_assert_matches;\n+use std::borrow::Cow;\n use std::collections::{hash_map::Entry, BTreeSet};\n use std::mem::{replace, swap, take};\n \n@@ -78,6 +79,12 @@ impl PatternSource {\n     }\n }\n \n+impl IntoDiagnosticArg for PatternSource {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Borrowed(self.descr()))\n+    }\n+}\n+\n /// Denotes whether the context for the set of already bound bindings is a `Product`\n /// or `Or` context. This is used in e.g., `fresh_binding` and `resolve_pattern_inner`.\n /// See those functions for more information.\n@@ -648,7 +655,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n             }\n             TyKind::Path(ref qself, ref path) => {\n                 self.diagnostic_metadata.current_type_path = Some(ty);\n-                self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);\n+                self.smart_resolve_path(ty.id, &qself, path, PathSource::Type);\n \n                 // Check whether we should interpret this as a bare trait object.\n                 if qself.is_none()\n@@ -749,7 +756,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 this.visit_generic_params(&tref.bound_generic_params, false);\n                 this.smart_resolve_path(\n                     tref.trait_ref.ref_id,\n-                    None,\n+                    &None,\n                     &tref.trait_ref.path,\n                     PathSource::Trait(AliasPossibility::Maybe),\n                 );\n@@ -978,7 +985,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                                 |this| {\n                                     this.smart_resolve_path(\n                                         ty.id,\n-                                        qself.as_ref(),\n+                                        qself,\n                                         path,\n                                         PathSource::Expr(None),\n                                     );\n@@ -1138,12 +1145,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.with_rib(ValueNS, InlineAsmSymRibKind, |this| {\n             this.with_rib(TypeNS, InlineAsmSymRibKind, |this| {\n                 this.with_label_rib(InlineAsmSymRibKind, |this| {\n-                    this.smart_resolve_path(\n-                        sym.id,\n-                        sym.qself.as_ref(),\n-                        &sym.path,\n-                        PathSource::Expr(None),\n-                    );\n+                    this.smart_resolve_path(sym.id, &sym.qself, &sym.path, PathSource::Expr(None));\n                     visit::walk_inline_asm_sym(this, sym);\n                 });\n             })\n@@ -2571,7 +2573,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             self.diagnostic_metadata.currently_processing_impl_trait =\n                 Some((trait_ref.clone(), self_type.clone()));\n             let res = self.smart_resolve_path_fragment(\n-                None,\n+                &None,\n                 &path,\n                 PathSource::Trait(AliasPossibility::No),\n                 Finalize::new(trait_ref.ref_id, trait_ref.path.span),\n@@ -3094,7 +3096,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 PatKind::TupleStruct(ref qself, ref path, ref sub_patterns) => {\n                     self.smart_resolve_path(\n                         pat.id,\n-                        qself.as_ref(),\n+                        qself,\n                         path,\n                         PathSource::TupleStruct(\n                             pat.span,\n@@ -3103,10 +3105,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     );\n                 }\n                 PatKind::Path(ref qself, ref path) => {\n-                    self.smart_resolve_path(pat.id, qself.as_ref(), path, PathSource::Pat);\n+                    self.smart_resolve_path(pat.id, qself, path, PathSource::Pat);\n                 }\n                 PatKind::Struct(ref qself, ref path, ..) => {\n-                    self.smart_resolve_path(pat.id, qself.as_ref(), path, PathSource::Struct);\n+                    self.smart_resolve_path(pat.id, qself, path, PathSource::Struct);\n                 }\n                 PatKind::Or(ref ps) => {\n                     // Add a new set of bindings to the stack. `Or` here records that when a\n@@ -3299,7 +3301,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn smart_resolve_path(\n         &mut self,\n         id: NodeId,\n-        qself: Option<&QSelf>,\n+        qself: &Option<P<QSelf>>,\n         path: &Path,\n         source: PathSource<'ast>,\n     ) {\n@@ -3313,7 +3315,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n     fn smart_resolve_path_fragment(\n         &mut self,\n-        qself: Option<&QSelf>,\n+        qself: &Option<P<QSelf>>,\n         path: &[Segment],\n         source: PathSource<'ast>,\n         finalize: Finalize,\n@@ -3534,7 +3536,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     // Resolve in alternative namespaces if resolution in the primary namespace fails.\n     fn resolve_qpath_anywhere(\n         &mut self,\n-        qself: Option<&QSelf>,\n+        qself: &Option<P<QSelf>>,\n         path: &[Segment],\n         primary_ns: Namespace,\n         span: Span,\n@@ -3578,7 +3580,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     /// Handles paths that may refer to associated items.\n     fn resolve_qpath(\n         &mut self,\n-        qself: Option<&QSelf>,\n+        qself: &Option<P<QSelf>>,\n         path: &[Segment],\n         ns: Namespace,\n         finalize: Finalize,\n@@ -3608,7 +3610,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // but with `qself` set to `None`.\n             let ns = if qself.position + 1 == path.len() { ns } else { TypeNS };\n             let partial_res = self.smart_resolve_path_fragment(\n-                None,\n+                &None,\n                 &path[..=qself.position],\n                 PathSource::TraitItem(ns),\n                 Finalize::with_root_span(finalize.node_id, finalize.path_span, qself.path_span),\n@@ -3791,12 +3793,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         // Next, resolve the node.\n         match expr.kind {\n             ExprKind::Path(ref qself, ref path) => {\n-                self.smart_resolve_path(expr.id, qself.as_ref(), path, PathSource::Expr(parent));\n+                self.smart_resolve_path(expr.id, qself, path, PathSource::Expr(parent));\n                 visit::walk_expr(self, expr);\n             }\n \n             ExprKind::Struct(ref se) => {\n-                self.smart_resolve_path(expr.id, se.qself.as_ref(), &se.path, PathSource::Struct);\n+                self.smart_resolve_path(expr.id, &se.qself, &se.path, PathSource::Struct);\n                 visit::walk_expr(self, expr);\n             }\n \n@@ -3866,12 +3868,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ExprKind::Field(ref subexpression, _) => {\n                 self.resolve_expr(subexpression, Some(expr));\n             }\n-            ExprKind::MethodCall(ref segment, ref receiver, ref arguments, _) => {\n+            ExprKind::MethodCall(box MethodCall { ref seg, ref receiver, ref args, .. }) => {\n                 self.resolve_expr(receiver, Some(expr));\n-                for argument in arguments {\n-                    self.resolve_expr(argument, None);\n+                for arg in args {\n+                    self.resolve_expr(arg, None);\n                 }\n-                self.visit_path_segment(segment);\n+                self.visit_path_segment(seg);\n             }\n \n             ExprKind::Call(ref callee, ref arguments) => {\n@@ -3913,7 +3915,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // `async |x| ...` gets desugared to `|x| future_from_generator(|| ...)`, so we need to\n             // resolve the arguments within the proper scopes so that usages of them inside the\n             // closure are detected as upvars rather than normal closure arg usages.\n-            ExprKind::Closure(_, _, Async::Yes { .. }, _, ref fn_decl, ref body, _span) => {\n+            ExprKind::Closure(box ast::Closure {\n+                asyncness: Async::Yes { .. },\n+                ref fn_decl,\n+                ref body,\n+                ..\n+            }) => {\n                 self.with_rib(ValueNS, NormalRibKind, |this| {\n                     this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n                         // Resolve arguments:\n@@ -3933,7 +3940,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 });\n             }\n             // For closures, ClosureOrAsyncRibKind is added in visit_fn\n-            ExprKind::Closure(ClosureBinder::For { ref generic_params, span }, ..) => {\n+            ExprKind::Closure(box ast::Closure {\n+                binder: ClosureBinder::For { ref generic_params, span },\n+                ..\n+            }) => {\n                 self.with_generic_param_rib(\n                     &generic_params,\n                     NormalRibKind,\n@@ -3990,9 +4000,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 let traits = self.traits_in_scope(ident, ValueNS);\n                 self.r.trait_map.insert(expr.id, traits);\n             }\n-            ExprKind::MethodCall(ref segment, ..) => {\n+            ExprKind::MethodCall(ref call) => {\n                 debug!(\"(recording candidate traits for expr) recording traits for {}\", expr.id);\n-                let traits = self.traits_in_scope(segment.ident, ValueNS);\n+                let traits = self.traits_in_scope(call.seg.ident, ValueNS);\n                 self.r.trait_map.insert(expr.id, traits);\n             }\n             _ => {"}, {"sha": "e0c927dd1e7602ac12e1550cbddb892359e86109", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -8,7 +8,7 @@ use crate::{PathResult, PathSource, Segment};\n use rustc_ast::visit::{FnCtxt, FnKind, LifetimeCtxt};\n use rustc_ast::{\n     self as ast, AssocItemKind, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind,\n-    NodeId, Path, Ty, TyKind, DUMMY_NODE_ID,\n+    MethodCall, NodeId, Path, Ty, TyKind, DUMMY_NODE_ID,\n };\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n@@ -33,6 +33,8 @@ use rustc_span::{BytePos, Span};\n use std::iter;\n use std::ops::Deref;\n \n+use thin_vec::ThinVec;\n+\n type Res = def::Res<ast::NodeId>;\n \n /// A field or associated item from self type suggested in case of resolution failure.\n@@ -78,7 +80,7 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n     let path_len = suggestion.path.segments.len();\n     let enum_path = ast::Path {\n         span: suggestion.path.span,\n-        segments: suggestion.path.segments[0..path_len - 1].to_vec(),\n+        segments: suggestion.path.segments[0..path_len - 1].iter().cloned().collect(),\n         tokens: None,\n     };\n     let enum_path_string = path_names_to_string(&enum_path);\n@@ -1022,11 +1024,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             };\n \n         // Confirm that the target is an associated type.\n-        let (ty, position, path) = if let ast::TyKind::Path(\n-            Some(ast::QSelf { ty, position, .. }),\n-            path,\n-        ) = &bounded_ty.kind\n-        {\n+        let (ty, position, path) = if let ast::TyKind::Path(Some(qself), path) = &bounded_ty.kind {\n             // use this to verify that ident is a type param.\n             let Some(partial_res) = self.r.partial_res_map.get(&bounded_ty.id) else {\n                 return false;\n@@ -1037,7 +1035,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             ) {\n                 return false;\n             }\n-            (ty, position, path)\n+            (&qself.ty, qself.position, path)\n         } else {\n             return false;\n         };\n@@ -1073,12 +1071,12 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                     .source_map()\n                                     .span_to_snippet(ty.span) // Account for `<&'a T as Foo>::Bar`.\n                                     .unwrap_or_else(|_| constrain_ident.to_string()),\n-                                path.segments[..*position]\n+                                path.segments[..position]\n                                     .iter()\n                                     .map(|segment| path_segment_to_string(segment))\n                                     .collect::<Vec<_>>()\n                                     .join(\"::\"),\n-                                path.segments[*position..]\n+                                path.segments[position..]\n                                     .iter()\n                                     .map(|segment| path_segment_to_string(segment))\n                                     .collect::<Vec<_>>()\n@@ -1170,7 +1168,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n             let (lhs_span, rhs_span) = match &expr.kind {\n                 ExprKind::Field(base, ident) => (base.span, ident.span),\n-                ExprKind::MethodCall(_, receiver, _, span) => (receiver.span, *span),\n+                ExprKind::MethodCall(box MethodCall { receiver, span, .. }) => {\n+                    (receiver.span, *span)\n+                }\n                 _ => return false,\n             };\n \n@@ -1833,7 +1833,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     fn find_module(&mut self, def_id: DefId) -> Option<(Module<'a>, ImportSuggestion)> {\n         let mut result = None;\n         let mut seen_modules = FxHashSet::default();\n-        let mut worklist = vec![(self.r.graph_root, Vec::new())];\n+        let mut worklist = vec![(self.r.graph_root, ThinVec::new())];\n \n         while let Some((in_module, path_segments)) = worklist.pop() {\n             // abort if the module is already found"}, {"sha": "f9ae3b58172725eefc65025acd2332026b3f7143", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -73,6 +73,7 @@ mod check_unused;\n mod def_collector;\n mod diagnostics;\n mod effective_visibilities;\n+mod errors;\n mod ident;\n mod imports;\n mod late;"}, {"sha": "d602acec53e3214998c52ffa1f52ca334428f916", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -562,7 +562,10 @@ impl Session {\n         if self.err_count() == old_count {\n             Ok(result)\n         } else {\n-            Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+            Err(self.delay_span_bug(\n+                rustc_span::DUMMY_SP,\n+                \"`self.err_count()` changed but an error was not emitted\",\n+            ))\n         }\n     }\n     #[allow(rustc::untranslatable_diagnostic)]"}, {"sha": "e8d129d733c1e340c10b76bbc28cb2e3b3646c08", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -753,22 +753,29 @@ impl SourceMap {\n         }\n     }\n \n-    /// Given a 'Span', tries to tell if the next character is '>'\n-    /// and the previous charactoer is '<' after skipping white space\n-    /// return true if wrapped by '<>'\n-    pub fn span_wrapped_by_angle_bracket(&self, span: Span) -> bool {\n+    /// Given a 'Span', tries to tell if it's wrapped by \"<>\" or \"()\"\n+    /// the algorithm searches if the next character is '>' or ')' after skipping white space\n+    /// then searches the previous charactoer to match '<' or '(' after skipping white space\n+    /// return true if wrapped by '<>' or '()'\n+    pub fn span_wrapped_by_angle_or_parentheses(&self, span: Span) -> bool {\n         self.span_to_source(span, |src, start_index, end_index| {\n             if src.get(start_index..end_index).is_none() {\n                 return Ok(false);\n             }\n             // test the right side to match '>' after skipping white space\n             let end_src = &src[end_index..];\n             let mut i = 0;\n+            let mut found_right_parentheses = false;\n+            let mut found_right_angle = false;\n             while let Some(cc) = end_src.chars().nth(i) {\n                 if cc == ' ' {\n                     i = i + 1;\n                 } else if cc == '>' {\n                     // found > in the right;\n+                    found_right_angle = true;\n+                    break;\n+                } else if cc == ')' {\n+                    found_right_parentheses = true;\n                     break;\n                 } else {\n                     // failed to find '>' return false immediately\n@@ -786,6 +793,16 @@ impl SourceMap {\n                     i = i - 1;\n                 } else if cc == '<' {\n                     // found < in the left\n+                    if !found_right_angle {\n+                        // skip something like \"(< )>\"\n+                        return Ok(false);\n+                    }\n+                    break;\n+                } else if cc == '(' {\n+                    if !found_right_parentheses {\n+                        // skip something like \"<(>)\"\n+                        return Ok(false);\n+                    }\n                     break;\n                 } else {\n                     // failed to find '<' return false immediately"}, {"sha": "199b2d32b9d4c1e6b01492321a982f7052713f93", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1067,6 +1067,7 @@ symbols! {\n         plugins,\n         pointee_trait,\n         pointer,\n+        pointer_sized,\n         poll,\n         position,\n         post_dash_lto: \"post-lto\","}, {"sha": "0c559ec04a413f1e86aab9052148956e89b5a5f3", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -3,6 +3,7 @@ use crate::abi::{HasDataLayout, TyAbiInterface, TyAndLayout};\n use crate::spec::{self, HasTargetSpec};\n use rustc_span::Symbol;\n use std::fmt;\n+use std::str::FromStr;\n \n mod aarch64;\n mod amdgpu;\n@@ -737,6 +738,33 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n     }\n }\n \n+impl FromStr for Conv {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"C\" => Ok(Conv::C),\n+            \"Rust\" => Ok(Conv::Rust),\n+            \"RustCold\" => Ok(Conv::Rust),\n+            \"ArmAapcs\" => Ok(Conv::ArmAapcs),\n+            \"CCmseNonSecureCall\" => Ok(Conv::CCmseNonSecureCall),\n+            \"Msp430Intr\" => Ok(Conv::Msp430Intr),\n+            \"PtxKernel\" => Ok(Conv::PtxKernel),\n+            \"X86Fastcall\" => Ok(Conv::X86Fastcall),\n+            \"X86Intr\" => Ok(Conv::X86Intr),\n+            \"X86Stdcall\" => Ok(Conv::X86Stdcall),\n+            \"X86ThisCall\" => Ok(Conv::X86ThisCall),\n+            \"X86VectorCall\" => Ok(Conv::X86VectorCall),\n+            \"X86_64SysV\" => Ok(Conv::X86_64SysV),\n+            \"X86_64Win64\" => Ok(Conv::X86_64Win64),\n+            \"AmdGpuKernel\" => Ok(Conv::AmdGpuKernel),\n+            \"AvrInterrupt\" => Ok(Conv::AvrInterrupt),\n+            \"AvrNonBlockingInterrupt\" => Ok(Conv::AvrNonBlockingInterrupt),\n+            _ => Err(format!(\"'{}' is not a valid value for entry function call convetion.\", s)),\n+        }\n+    }\n+}\n+\n // Some types are used a lot. Make sure they don't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {"}, {"sha": "75bb76a9de0878afe6f0faa1e65f7adf5f73a580", "filename": "compiler/rustc_target/src/json.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_target%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_target%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fjson.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -89,3 +89,28 @@ impl<A: ToJson> ToJson for Option<A> {\n         }\n     }\n }\n+\n+impl ToJson for crate::abi::call::Conv {\n+    fn to_json(&self) -> Json {\n+        let s = match self {\n+            Self::C => \"C\",\n+            Self::Rust => \"Rust\",\n+            Self::RustCold => \"RustCold\",\n+            Self::ArmAapcs => \"ArmAapcs\",\n+            Self::CCmseNonSecureCall => \"CCmseNonSecureCall\",\n+            Self::Msp430Intr => \"Msp430Intr\",\n+            Self::PtxKernel => \"PtxKernel\",\n+            Self::X86Fastcall => \"X86Fastcall\",\n+            Self::X86Intr => \"X86Intr\",\n+            Self::X86Stdcall => \"X86Stdcall\",\n+            Self::X86ThisCall => \"X86ThisCall\",\n+            Self::X86VectorCall => \"X86VectorCall\",\n+            Self::X86_64SysV => \"X86_64SysV\",\n+            Self::X86_64Win64 => \"X86_64Win64\",\n+            Self::AmdGpuKernel => \"AmdGpuKernel\",\n+            Self::AvrInterrupt => \"AvrInterrupt\",\n+            Self::AvrNonBlockingInterrupt => \"AvrNonBlockingInterrupt\",\n+        };\n+        Json::String(s.to_owned())\n+    }\n+}"}, {"sha": "6d936d2cb9ff0463e13ff9d6802a76b38dea4f1c", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -34,6 +34,7 @@\n //! the target's settings, though `target-feature` and `link-args` will *add*\n //! to the list specified by the target, rather than replace.\n \n+use crate::abi::call::Conv;\n use crate::abi::Endian;\n use crate::json::{Json, ToJson};\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n@@ -1668,6 +1669,14 @@ pub struct TargetOptions {\n     /// Whether the target supports stack canary checks. `true` by default,\n     /// since this is most common among tier 1 and tier 2 targets.\n     pub supports_stack_protector: bool,\n+\n+    // The name of entry function.\n+    // Default value is \"main\"\n+    pub entry_name: StaticCow<str>,\n+\n+    // The ABI of entry function.\n+    // Default value is `Conv::C`, i.e. C call convention\n+    pub entry_abi: Conv,\n }\n \n /// Add arguments for the given flavor and also for its \"twin\" flavors\n@@ -1884,6 +1893,8 @@ impl Default for TargetOptions {\n             c_enum_min_bits: 32,\n             generate_arange_section: true,\n             supports_stack_protector: true,\n+            entry_name: \"main\".into(),\n+            entry_abi: Conv::C,\n         }\n     }\n }\n@@ -2404,6 +2415,18 @@ impl Target {\n                     }\n                 }\n             } );\n+            ($key_name:ident, Conv) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n+                    match Conv::from_str(s) {\n+                        Ok(c) => {\n+                            base.$key_name = c;\n+                            Some(Ok(()))\n+                        }\n+                        Err(e) => Some(Err(e))\n+                    }\n+                })).unwrap_or(Ok(()))\n+            } );\n         }\n \n         if let Some(j) = obj.remove(\"target-endian\") {\n@@ -2523,6 +2546,8 @@ impl Target {\n         key!(c_enum_min_bits, u64);\n         key!(generate_arange_section, bool);\n         key!(supports_stack_protector, bool);\n+        key!(entry_name);\n+        key!(entry_abi, Conv)?;\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n@@ -2773,6 +2798,8 @@ impl ToJson for Target {\n         target_option_val!(c_enum_min_bits);\n         target_option_val!(generate_arange_section);\n         target_option_val!(supports_stack_protector);\n+        target_option_val!(entry_name);\n+        target_option_val!(entry_abi);\n \n         if let Some(abi) = self.default_adjusted_cabi {\n             d.insert(\"default-adjusted-cabi\".into(), Abi::name(abi).to_json());"}, {"sha": "f8346e515d70c57ab0a3e693a65871e4ad4a4c1a", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -125,20 +125,32 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n             .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }\n \n+    /// Checks whether `expected` is a subtype of `actual`: `expected <: actual`.\n+    pub fn sub<T: ToTrace<'tcx>>(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        expected: T,\n+        actual: T,\n+    ) -> Result<(), TypeError<'tcx>> {\n+        self.infcx\n+            .at(cause, param_env)\n+            .sup(expected, actual)\n+            .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n+    }\n+\n+    /// Checks whether `expected` is a supertype of `actual`: `expected :> actual`.\n     pub fn sup<T: ToTrace<'tcx>>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         expected: T,\n         actual: T,\n     ) -> Result<(), TypeError<'tcx>> {\n-        match self.infcx.at(cause, param_env).sup(expected, actual) {\n-            Ok(InferOk { obligations, value: () }) => {\n-                self.register_obligations(obligations);\n-                Ok(())\n-            }\n-            Err(e) => Err(e),\n-        }\n+        self.infcx\n+            .at(cause, param_env)\n+            .sup(expected, actual)\n+            .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }\n \n     pub fn select_where_possible(&self) -> Vec<FulfillmentError<'tcx>> {"}, {"sha": "6e90b9446505e18b7d019e0399786c454394184b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -22,6 +22,7 @@ use rustc_errors::{\n     MultiSpan, Style,\n };\n use rustc_hir as hir;\n+use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::GenericParam;\n@@ -34,6 +35,7 @@ use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::print::{FmtPrinter, Print};\n use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n     TypeVisitable,\n@@ -109,7 +111,10 @@ pub trait TypeErrCtxtExt<'tcx> {\n         suggest_increasing_limit: bool,\n     ) -> !\n     where\n-        T: fmt::Display + TypeFoldable<'tcx>;\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n \n     fn suggest_new_overflow_limit(&self, err: &mut Diagnostic);\n \n@@ -468,15 +473,31 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         suggest_increasing_limit: bool,\n     ) -> !\n     where\n-        T: fmt::Display + TypeFoldable<'tcx>,\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n     {\n         let predicate = self.resolve_vars_if_possible(obligation.predicate.clone());\n+        let mut pred_str = predicate.to_string();\n+        if pred_str.len() > 50 {\n+            // We don't need to save the type to a file, we will be talking about this type already\n+            // in a separate note when we explain the obligation, so it will be available that way.\n+            pred_str = predicate\n+                .print(FmtPrinter::new_with_limit(\n+                    self.tcx,\n+                    Namespace::TypeNS,\n+                    rustc_session::Limit(6),\n+                ))\n+                .unwrap()\n+                .into_buffer();\n+        }\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             obligation.cause.span,\n             E0275,\n             \"overflow evaluating the requirement `{}`\",\n-            predicate\n+            pred_str,\n         );\n \n         if suggest_increasing_limit {\n@@ -532,9 +553,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         root_obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n     ) {\n-        self.set_tainted_by_errors();\n         let tcx = self.tcx;\n         let mut span = obligation.cause.span;\n+        // FIXME: statically guarantee this by tainting after the diagnostic is emitted\n+        self.set_tainted_by_errors(\n+            tcx.sess.delay_span_bug(span, \"`report_selection_error` did not emit an error\"),\n+        );\n \n         let mut err = match *error {\n             SelectionError::Unimplemented => {\n@@ -2060,7 +2084,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // check upstream for type errors and don't add the obligations to\n                 // begin with in those cases.\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n-                    if !self.is_tainted_by_errors() {\n+                    if let None = self.tainted_by_errors() {\n                         self.emit_inference_failure_err(\n                             body_id,\n                             span,\n@@ -2115,16 +2139,16 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         if impls.len() > 1 && impls.len() < 5 && has_non_region_infer {\n                             self.annotate_source_of_ambiguity(&mut err, &impls, predicate);\n                         } else {\n-                            if self.is_tainted_by_errors() {\n-                                err.delay_as_bug();\n+                            if self.tainted_by_errors().is_some() {\n+                                err.cancel();\n                                 return;\n                             }\n                             err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                         }\n                     }\n                     _ => {\n-                        if self.is_tainted_by_errors() {\n-                            err.delay_as_bug();\n+                        if self.tainted_by_errors().is_some() {\n+                            err.cancel();\n                             return;\n                         }\n                         err.note(&format!(\"cannot satisfy `{}`\", predicate));\n@@ -2226,7 +2250,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         ] = path.segments\n                         && data.trait_ref.def_id == *trait_id\n                         && self.tcx.trait_of_item(*item_id) == Some(*trait_id)\n-                        && !self.is_tainted_by_errors()\n+                        && let None = self.tainted_by_errors()\n                     {\n                         let (verb, noun) = match self.tcx.associated_item(item_id).kind {\n                             ty::AssocKind::Const => (\"refer to the\", \"constant\"),\n@@ -2295,7 +2319,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // with error messages.\n                 if arg.references_error()\n                     || self.tcx.sess.has_errors().is_some()\n-                    || self.is_tainted_by_errors()\n+                    || self.tainted_by_errors().is_some()\n                 {\n                     return;\n                 }\n@@ -2306,7 +2330,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ty::PredicateKind::Subtype(data) => {\n                 if data.references_error()\n                     || self.tcx.sess.has_errors().is_some()\n-                    || self.is_tainted_by_errors()\n+                    || self.tainted_by_errors().is_some()\n                 {\n                     // no need to overload user in such cases\n                     return;\n@@ -2317,7 +2341,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 self.emit_inference_failure_err(body_id, span, a.into(), ErrorCode::E0282, true)\n             }\n             ty::PredicateKind::Projection(data) => {\n-                if predicate.references_error() || self.is_tainted_by_errors() {\n+                if predicate.references_error() || self.tainted_by_errors().is_some() {\n                     return;\n                 }\n                 let subst = data\n@@ -2351,7 +2375,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n \n             ty::PredicateKind::ConstEvaluatable(data) => {\n-                if predicate.references_error() || self.is_tainted_by_errors() {\n+                if predicate.references_error() || self.tainted_by_errors().is_some() {\n                     return;\n                 }\n                 let subst = data.walk().find(|g| g.is_non_region_infer());\n@@ -2378,7 +2402,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n             _ => {\n-                if self.tcx.sess.has_errors().is_some() || self.is_tainted_by_errors() {\n+                if self.tcx.sess.has_errors().is_some() || self.tainted_by_errors().is_some() {\n                     return;\n                 }\n                 let mut err = struct_span_err!(\n@@ -2422,7 +2446,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         post.sort();\n         post.dedup();\n \n-        if self.is_tainted_by_errors()\n+        if self.tainted_by_errors().is_some()\n             && (crate_names.len() == 1\n                 && spans.len() == 0\n                 && [\"`core`\", \"`alloc`\", \"`std`\"].contains(&crate_names[0].as_str())"}, {"sha": "757977ac5d508774849861a8050d0b084f3da192", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -2733,9 +2733,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     self.resolve_vars_if_possible(data.derived.parent_trait_pred);\n                 parent_trait_pred.remap_constness_diag(param_env);\n                 let parent_def_id = parent_trait_pred.def_id();\n+                let (self_ty, file) =\n+                    self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty());\n                 let msg = format!(\n-                    \"required for `{}` to implement `{}`\",\n-                    parent_trait_pred.skip_binder().self_ty(),\n+                    \"required for `{self_ty}` to implement `{}`\",\n                     parent_trait_pred.print_modifiers_and_trait_path()\n                 );\n                 let mut is_auto_trait = false;\n@@ -2764,6 +2765,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     _ => err.note(&msg),\n                 };\n \n+                if let Some(file) = file {\n+                    err.note(&format!(\n+                        \"the full type name has been written to '{}'\",\n+                        file.display(),\n+                    ));\n+                }\n                 let mut parent_predicate = parent_trait_pred;\n                 let mut data = &data.derived;\n                 let mut count = 0;\n@@ -2804,11 +2811,18 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         count,\n                         pluralize!(count)\n                     ));\n+                    let (self_ty, file) =\n+                        self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty());\n                     err.note(&format!(\n-                        \"required for `{}` to implement `{}`\",\n-                        parent_trait_pred.skip_binder().self_ty(),\n+                        \"required for `{self_ty}` to implement `{}`\",\n                         parent_trait_pred.print_modifiers_and_trait_path()\n                     ));\n+                    if let Some(file) = file {\n+                        err.note(&format!(\n+                            \"the full type name has been written to '{}'\",\n+                            file.display(),\n+                        ));\n+                    }\n                 }\n                 // #74711: avoid a stack overflow\n                 ensure_sufficient_stack(|| {"}, {"sha": "528b98cf4a1c0915ff33a1471c3ce0fa1019adb1", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -508,7 +508,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),"}, {"sha": "a875ea1578dcb92d879b7f8ce80751ee13e97c5d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -198,7 +198,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.try_super_fold_with(self),"}, {"sha": "8183f34bb3c933e5274d9f8cd3858b15c3ea7dd2", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -304,6 +304,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 self.assemble_candidates_for_transmutability(obligation, &mut candidates);\n             } else if lang_items.tuple_trait() == Some(def_id) {\n                 self.assemble_candidate_for_tuple(obligation, &mut candidates);\n+            } else if lang_items.pointer_sized() == Some(def_id) {\n+                self.assemble_candidate_for_ptr_sized(obligation, &mut candidates);\n             } else {\n                 if lang_items.clone_trait() == Some(def_id) {\n                     // Same builtin conditions as `Copy`, i.e., every type which has builtin support\n@@ -780,7 +782,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         match (source.kind(), target.kind()) {\n             // Trait+Kx+'a -> Trait+Ky+'b (upcasts).\n-            (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {\n+            (&ty::Dynamic(ref data_a, _, dyn_a), &ty::Dynamic(ref data_b, _, dyn_b))\n+                if dyn_a == dyn_b =>\n+            {\n                 // Upcast coercions permit several things:\n                 //\n                 // 1. Dropping auto traits, e.g., `Foo + Send` to `Foo`\n@@ -841,7 +845,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             // `T` -> `Trait`\n-            (_, &ty::Dynamic(..)) => {\n+            (_, &ty::Dynamic(_, _, ty::Dyn)) => {\n                 candidates.vec.push(BuiltinUnsizeCandidate);\n             }\n \n@@ -1047,4 +1051,30 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Placeholder(_) => {}\n         }\n     }\n+\n+    fn assemble_candidate_for_ptr_sized(\n+        &mut self,\n+        obligation: &TraitObligation<'tcx>,\n+        candidates: &mut SelectionCandidateSet<'tcx>,\n+    ) {\n+        // The regions of a type don't affect the size of the type\n+        let self_ty = self\n+            .tcx()\n+            .erase_regions(self.tcx().erase_late_bound_regions(obligation.predicate.self_ty()));\n+\n+        // But if there are inference variables, we have to wait until it's resolved.\n+        if self_ty.has_non_region_infer() {\n+            candidates.ambiguous = true;\n+            return;\n+        }\n+\n+        let usize_layout =\n+            self.tcx().layout_of(ty::ParamEnv::empty().and(self.tcx().types.usize)).unwrap().layout;\n+        if let Ok(layout) = self.tcx().layout_of(obligation.param_env.and(self_ty))\n+            && layout.layout.size() == usize_layout.size()\n+            && layout.layout.align().abi == usize_layout.align().abi\n+        {\n+            candidates.vec.push(BuiltinCandidate { has_nested: false });\n+        }\n+    }\n }"}, {"sha": "a496aed38ac1772ffd00fe25742ed4bbf85ac46c", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -912,7 +912,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let mut nested = vec![];\n         match (source.kind(), target.kind()) {\n             // Trait+Kx+'a -> Trait+Ky+'b (auto traits and lifetime subtyping).\n-            (&ty::Dynamic(ref data_a, r_a, ty::Dyn), &ty::Dynamic(ref data_b, r_b, ty::Dyn)) => {\n+            (&ty::Dynamic(ref data_a, r_a, dyn_a), &ty::Dynamic(ref data_b, r_b, dyn_b))\n+                if dyn_a == dyn_b =>\n+            {\n                 // See `assemble_candidates_for_unsizing` for more info.\n                 // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let iter = data_a\n@@ -931,7 +933,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .map(ty::Binder::dummy),\n                     );\n                 let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n-                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, ty::Dyn);\n+                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, dyn_a);\n \n                 // Require that the traits involved in this upcast are **equal**;\n                 // only the **lifetime bound** is changed.\n@@ -1140,7 +1142,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }));\n             }\n \n-            _ => bug!(),\n+            _ => bug!(\"source: {source}, target: {target}\"),\n         };\n \n         Ok(ImplSourceBuiltinData { nested })"}, {"sha": "a9314b1b85e668944ab4700a1e84b640baa01610", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -33,7 +33,7 @@ use crate::traits::ProjectionCacheKey;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::{Diagnostic, ErrorGuaranteed};\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n@@ -42,6 +42,7 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::fold::BottomUpFolder;\n+use rustc_middle::ty::print::{FmtPrinter, Print};\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n@@ -1081,18 +1082,22 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);\n     }\n \n-    fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(\n+    fn check_recursion_depth<T>(\n         &self,\n         depth: usize,\n         error_obligation: &Obligation<'tcx, T>,\n-    ) -> Result<(), OverflowError> {\n+    ) -> Result<(), OverflowError>\n+    where\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+    {\n         if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n-                    if self.infcx.is_tainted_by_errors() {\n-                        return Err(OverflowError::Error(\n-                            ErrorGuaranteed::unchecked_claim_error_was_emitted(),\n-                        ));\n+                    if let Some(e) = self.infcx.tainted_by_errors() {\n+                        return Err(OverflowError::Error(e));\n                     }\n                     self.infcx.err_ctxt().report_overflow_error(error_obligation, true);\n                 }\n@@ -1109,11 +1114,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// The weird return type of this function allows it to be used with the `try` (`?`)\n     /// operator within certain functions.\n     #[inline(always)]\n-    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V: Display + TypeFoldable<'tcx>>(\n+    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V>(\n         &self,\n         obligation: &Obligation<'tcx, T>,\n         error_obligation: &Obligation<'tcx, V>,\n-    ) -> Result<(), OverflowError> {\n+    ) -> Result<(), OverflowError>\n+    where\n+        V: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <V as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+    {\n         self.check_recursion_depth(obligation.recursion_depth, error_obligation)\n     }\n "}, {"sha": "f1835d317e841be4b8c5808ace9d9ca28465df06", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -34,7 +34,9 @@ fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq +\n             // We don't care about the `obligations`; they are\n             // always only region relations, and we are about to\n             // erase those anyway:\n-            debug_assert_eq!(\n+            // This has been seen to fail in RL, so making it a non-debug assertion to better catch\n+            // those cases.\n+            assert_eq!(\n                 normalized_obligations.iter().find(|p| not_outlives_predicate(p.predicate)),\n                 None,\n             );"}, {"sha": "5f307069d8076d81778d6db3dadc6e9a3757370c", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 6, "deletions": 53, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1441,48 +1441,6 @@ impl<T> Rc<[T]> {\n         }\n     }\n \n-    /// Create an `Rc<[T]>` by reusing the underlying memory\n-    /// of a `Vec<T>`. This will return the vector if the existing allocation\n-    /// is not large enough.\n-    #[cfg(not(no_global_oom_handling))]\n-    fn try_from_vec_in_place(mut v: Vec<T>) -> Result<Rc<[T]>, Vec<T>> {\n-        let layout_elements = Layout::array::<T>(v.len()).unwrap();\n-        let layout_allocation = Layout::array::<T>(v.capacity()).unwrap();\n-        let layout_rcbox = rcbox_layout_for_value_layout(layout_elements);\n-        let mut ptr = NonNull::new(v.as_mut_ptr()).expect(\"`Vec<T>` stores `NonNull<T>`\");\n-        if layout_rcbox.size() > layout_allocation.size()\n-            || layout_rcbox.align() > layout_allocation.align()\n-        {\n-            // Can't fit - calling `grow` would involve `realloc`\n-            // (which copies the elements), followed by copying again.\n-            return Err(v);\n-        }\n-        if layout_rcbox.size() < layout_allocation.size()\n-            || layout_rcbox.align() < layout_allocation.align()\n-        {\n-            // We need to shrink the allocation so that it fits\n-            // https://doc.rust-lang.org/nightly/std/alloc/trait.Allocator.html#memory-fitting\n-            // SAFETY:\n-            // - Vec allocates by requesting `Layout::array::<T>(capacity)`, so this capacity matches\n-            // - `layout_rcbox` is smaller\n-            // If this fails, the ownership has not been transferred\n-            if let Ok(p) = unsafe { Global.shrink(ptr.cast(), layout_allocation, layout_rcbox) } {\n-                ptr = p.cast();\n-            } else {\n-                return Err(v);\n-            }\n-        }\n-        // Make sure the vec's memory isn't deallocated now\n-        let v = mem::ManuallyDrop::new(v);\n-        let ptr: *mut RcBox<[T]> = ptr::slice_from_raw_parts_mut(ptr.as_ptr(), v.len()) as _;\n-        unsafe {\n-            ptr::copy(ptr.cast::<T>(), &mut (*ptr).value as *mut [T] as *mut T, v.len());\n-            ptr::write(&mut (*ptr).strong, Cell::new(1));\n-            ptr::write(&mut (*ptr).weak, Cell::new(1));\n-            Ok(Self::from_ptr(ptr))\n-        }\n-    }\n-\n     /// Constructs an `Rc<[T]>` from an iterator known to be of a certain size.\n     ///\n     /// Behavior is undefined should the size be wrong.\n@@ -2008,17 +1966,12 @@ impl<T> From<Vec<T>> for Rc<[T]> {\n     /// assert_eq!(vec![1, 2, 3], *shared);\n     /// ```\n     #[inline]\n-    fn from(v: Vec<T>) -> Rc<[T]> {\n-        match Rc::try_from_vec_in_place(v) {\n-            Ok(rc) => rc,\n-            Err(mut v) => {\n-                unsafe {\n-                    let rc = Rc::copy_from_slice(&v);\n-                    // Allow the Vec to free its memory, but not destroy its contents\n-                    v.set_len(0);\n-                    rc\n-                }\n-            }\n+    fn from(mut v: Vec<T>) -> Rc<[T]> {\n+        unsafe {\n+            let rc = Rc::copy_from_slice(&v);\n+            // Allow the Vec to free its memory, but not destroy its contents\n+            v.set_len(0);\n+            rc\n         }\n     }\n }"}, {"sha": "b69f6b0311234c37b9532d1fc6b128c24045d3cf", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 6, "deletions": 54, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1261,49 +1261,6 @@ impl<T> Arc<[T]> {\n         }\n     }\n \n-    /// Create an `Arc<[T]>` by reusing the underlying memory\n-    /// of a `Vec<T>`. This will return the vector if the existing allocation\n-    /// is not large enough.\n-    #[cfg(not(no_global_oom_handling))]\n-    fn try_from_vec_in_place(mut v: Vec<T>) -> Result<Arc<[T]>, Vec<T>> {\n-        let layout_elements = Layout::array::<T>(v.len()).unwrap();\n-        let layout_allocation = Layout::array::<T>(v.capacity()).unwrap();\n-        let layout_arcinner = arcinner_layout_for_value_layout(layout_elements);\n-        let mut ptr = NonNull::new(v.as_mut_ptr()).expect(\"`Vec<T>` stores `NonNull<T>`\");\n-        if layout_arcinner.size() > layout_allocation.size()\n-            || layout_arcinner.align() > layout_allocation.align()\n-        {\n-            // Can't fit - calling `grow` would involve `realloc`\n-            // (which copies the elements), followed by copying again.\n-            return Err(v);\n-        }\n-        if layout_arcinner.size() < layout_allocation.size()\n-            || layout_arcinner.align() < layout_allocation.align()\n-        {\n-            // We need to shrink the allocation so that it fits\n-            // https://doc.rust-lang.org/nightly/std/alloc/trait.Allocator.html#memory-fitting\n-            // SAFETY:\n-            // - Vec allocates by requesting `Layout::array::<T>(capacity)`, so this capacity matches\n-            // - `layout_arcinner` is smaller\n-            // If this fails, the ownership has not been transferred\n-            if let Ok(p) = unsafe { Global.shrink(ptr.cast(), layout_allocation, layout_arcinner) }\n-            {\n-                ptr = p.cast();\n-            } else {\n-                return Err(v);\n-            }\n-        }\n-        // Make sure the vec's memory isn't deallocated now\n-        let v = mem::ManuallyDrop::new(v);\n-        let ptr: *mut ArcInner<[T]> = ptr::slice_from_raw_parts_mut(ptr.as_ptr(), v.len()) as _;\n-        unsafe {\n-            ptr::copy(ptr.cast::<T>(), &mut (*ptr).data as *mut [T] as *mut T, v.len());\n-            ptr::write(&mut (*ptr).strong, atomic::AtomicUsize::new(1));\n-            ptr::write(&mut (*ptr).weak, atomic::AtomicUsize::new(1));\n-            Ok(Self::from_ptr(ptr))\n-        }\n-    }\n-\n     /// Constructs an `Arc<[T]>` from an iterator known to be of a certain size.\n     ///\n     /// Behavior is undefined should the size be wrong.\n@@ -2615,17 +2572,12 @@ impl<T> From<Vec<T>> for Arc<[T]> {\n     /// assert_eq!(&[1, 2, 3], &shared[..]);\n     /// ```\n     #[inline]\n-    fn from(v: Vec<T>) -> Arc<[T]> {\n-        match Arc::try_from_vec_in_place(v) {\n-            Ok(rc) => rc,\n-            Err(mut v) => {\n-                unsafe {\n-                    let rc = Arc::copy_from_slice(&v);\n-                    // Allow the Vec to free its memory, but not destroy its contents\n-                    v.set_len(0);\n-                    rc\n-                }\n-            }\n+    fn from(mut v: Vec<T>) -> Arc<[T]> {\n+        unsafe {\n+            let rc = Arc::copy_from_slice(&v);\n+            // Allow the Vec to free its memory, but not destroy its contents\n+            v.set_len(0);\n+            rc\n         }\n     }\n }"}, {"sha": "ce40b5c9b0a0d3a5948635c131dc1b353adbbcfb", "filename": "library/alloc/tests/arc.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Falloc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Falloc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Farc.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -210,18 +210,3 @@ fn weak_may_dangle() {\n     // `val` dropped here while still borrowed\n     // borrow might be used here, when `val` is dropped and runs the `Drop` code for type `std::sync::Weak`\n }\n-\n-#[test]\n-fn arc_from_vec_opt() {\n-    let mut v = Vec::with_capacity(64);\n-    v.push(0usize);\n-    let addr = v.as_ptr().cast::<u8>();\n-    let arc: Arc<[_]> = v.into();\n-    unsafe {\n-        assert_eq!(\n-            arc.as_ptr().cast::<u8>().offset_from(addr),\n-            (std::mem::size_of::<usize>() * 2) as isize,\n-            \"Vector allocation not reused\"\n-        );\n-    }\n-}"}, {"sha": "efb39a609665b33ad2e6b9b43a75533a98f1feb5", "filename": "library/alloc/tests/rc.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Falloc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Falloc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Frc.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -206,18 +206,3 @@ fn weak_may_dangle() {\n     // `val` dropped here while still borrowed\n     // borrow might be used here, when `val` is dropped and runs the `Drop` code for type `std::rc::Weak`\n }\n-\n-#[test]\n-fn rc_from_vec_opt() {\n-    let mut v = Vec::with_capacity(64);\n-    v.push(0usize);\n-    let addr = v.as_ptr().cast::<u8>();\n-    let rc: Rc<[_]> = v.into();\n-    unsafe {\n-        assert_eq!(\n-            rc.as_ptr().cast::<u8>().offset_from(addr),\n-            (std::mem::size_of::<usize>() * 2) as isize,\n-            \"Vector allocation not reused\"\n-        );\n-    }\n-}"}, {"sha": "b355d94ce4976697ff0226398b040c248f97ee38", "filename": "library/core/src/cell/lazy.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -4,6 +4,10 @@ use crate::ops::Deref;\n \n /// A value which is initialized on the first access.\n ///\n+/// For a thread-safe version of this struct, see [`std::sync::LazyLock`].\n+///\n+/// [`std::sync::LazyLock`]: ../../std/sync/struct.LazyLock.html\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "8c01643c7ac177a4d0e5027536b605a74e699278", "filename": "library/core/src/cell/once.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -4,8 +4,14 @@ use crate::mem;\n \n /// A cell which can be written to only once.\n ///\n-/// Unlike `RefCell`, a `OnceCell` only provides shared `&T` references to its value.\n-/// Unlike `Cell`, a `OnceCell` doesn't require copying or replacing the value to access it.\n+/// Unlike [`RefCell`], a `OnceCell` only provides shared `&T` references to its value.\n+/// Unlike [`Cell`], a `OnceCell` doesn't require copying or replacing the value to access it.\n+///\n+/// For a thread-safe version of this struct, see [`std::sync::OnceLock`].\n+///\n+/// [`RefCell`]: crate::cell::RefCell\n+/// [`Cell`]: crate::cell::Cell\n+/// [`std::sync::OnceLock`]: ../../std/sync/struct.OnceLock.html\n ///\n /// # Examples\n ///"}, {"sha": "7ed7d767f2fb5b42955ac6c80cccaba8e9003885", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1851,6 +1851,7 @@ extern \"rust-intrinsic\" {\n     /// `x % y != 0` or `y == 0` or `x == T::MIN && y == -1`\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_exact_div\", issue = \"none\")]\n     pub fn exact_div<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs an unchecked division, resulting in undefined behavior"}, {"sha": "848eccd7f2908ef05ac3a55930797e5c429465e1", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -109,6 +109,7 @@\n #![feature(const_cmp)]\n #![feature(const_discriminant)]\n #![feature(const_eval_select)]\n+#![feature(const_exact_div)]\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n #![feature(const_fmt_arguments_new)]\n@@ -129,8 +130,10 @@\n #![feature(const_option)]\n #![feature(const_option_ext)]\n #![feature(const_pin)]\n+#![feature(const_pointer_is_aligned)]\n #![feature(const_ptr_sub_ptr)]\n #![feature(const_replace)]\n+#![feature(const_result_drop)]\n #![feature(const_ptr_as_ref)]\n #![feature(const_ptr_is_null)]\n #![feature(const_ptr_read)]\n@@ -155,6 +158,7 @@\n #![feature(maybe_uninit_uninit_array)]\n #![feature(ptr_alignment_type)]\n #![feature(ptr_metadata)]\n+#![feature(set_ptr_value)]\n #![feature(slice_ptr_get)]\n #![feature(slice_split_at_unchecked)]\n #![feature(str_internals)]"}, {"sha": "42c342801976957a9696b25b92511653d313b918", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -809,6 +809,15 @@ pub trait Destruct {}\n #[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Tuple {}\n \n+/// A marker for things\n+#[unstable(feature = \"pointer_sized_trait\", issue = \"none\")]\n+#[cfg_attr(not(bootstrap), lang = \"pointer_sized\")]\n+#[rustc_on_unimplemented(\n+    message = \"`{Self}` needs to be a pointer-sized type\",\n+    label = \"`{Self}` needs to be a pointer-sized type\"\n+)]\n+pub trait PointerSized {}\n+\n /// Implementations of `Copy` for primitive types.\n ///\n /// Implementations that cannot be described in Rust"}, {"sha": "e1ab7ac5ff045e056a2ba2c26a295867e7137042", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -761,10 +761,11 @@ macro_rules! int_impl {\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n         #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n-        pub const unsafe fn unchecked_shl(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_shl(self, rhs: u32) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shl`.\n-            unsafe { intrinsics::unchecked_shl(self, rhs) }\n+            // Any legal shift amount is losslessly representable in the self type.\n+            unsafe { intrinsics::unchecked_shl(self, rhs.try_into().ok().unwrap_unchecked()) }\n         }\n \n         /// Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is\n@@ -808,10 +809,11 @@ macro_rules! int_impl {\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n         #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n-        pub const unsafe fn unchecked_shr(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_shr(self, rhs: u32) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shr`.\n-            unsafe { intrinsics::unchecked_shr(self, rhs) }\n+            // Any legal shift amount is losslessly representable in the self type.\n+            unsafe { intrinsics::unchecked_shr(self, rhs.try_into().ok().unwrap_unchecked()) }\n         }\n \n         /// Checked absolute value. Computes `self.abs()`, returning `None` if\n@@ -1358,11 +1360,12 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n+        #[rustc_allow_const_fn_unstable(const_inherent_unchecked_arith)]\n         pub const fn wrapping_shl(self, rhs: u32) -> Self {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n             unsafe {\n-                intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n+                self.unchecked_shl(rhs & ($BITS - 1))\n             }\n         }\n \n@@ -1387,11 +1390,12 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n+        #[rustc_allow_const_fn_unstable(const_inherent_unchecked_arith)]\n         pub const fn wrapping_shr(self, rhs: u32) -> Self {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n             unsafe {\n-                intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n+                self.unchecked_shr(rhs & ($BITS - 1))\n             }\n         }\n "}, {"sha": "b2328b001de904368ad0adb8ef7ee8a98a080d67", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -3,6 +3,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::ascii;\n+use crate::convert::TryInto;\n use crate::error::Error;\n use crate::intrinsics;\n use crate::mem;"}, {"sha": "af74faa90b11031c954536972b8ab5e9170a0e25", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -908,10 +908,11 @@ macro_rules! uint_impl {\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n         #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n-        pub const unsafe fn unchecked_shl(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_shl(self, rhs: u32) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shl`.\n-            unsafe { intrinsics::unchecked_shl(self, rhs) }\n+            // Any legal shift amount is losslessly representable in the self type.\n+            unsafe { intrinsics::unchecked_shl(self, rhs.try_into().ok().unwrap_unchecked()) }\n         }\n \n         /// Checked shift right. Computes `self >> rhs`, returning `None`\n@@ -955,10 +956,11 @@ macro_rules! uint_impl {\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n         #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n-        pub const unsafe fn unchecked_shr(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_shr(self, rhs: u32) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shr`.\n-            unsafe { intrinsics::unchecked_shr(self, rhs) }\n+            // Any legal shift amount is losslessly representable in the self type.\n+            unsafe { intrinsics::unchecked_shr(self, rhs.try_into().ok().unwrap_unchecked()) }\n         }\n \n         /// Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\n@@ -1374,11 +1376,12 @@ macro_rules! uint_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n+        #[rustc_allow_const_fn_unstable(const_inherent_unchecked_arith)]\n         pub const fn wrapping_shl(self, rhs: u32) -> Self {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n             unsafe {\n-                intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n+                self.unchecked_shl(rhs & ($BITS - 1))\n             }\n         }\n \n@@ -1406,11 +1409,12 @@ macro_rules! uint_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n+        #[rustc_allow_const_fn_unstable(const_inherent_unchecked_arith)]\n         pub const fn wrapping_shr(self, rhs: u32) -> Self {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n             unsafe {\n-                intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n+                self.unchecked_shr(rhs & ($BITS - 1))\n             }\n         }\n "}, {"sha": "8a3eee0dc529f59988bdaa1fdaa8f9f8c5ddb843", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 251, "deletions": 36, "changes": 287, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -79,19 +79,14 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[rustc_const_unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn with_metadata_of<U>(self, mut val: *const U) -> *const U\n+    pub const fn with_metadata_of<U>(self, meta: *const U) -> *const U\n     where\n         U: ?Sized,\n     {\n-        let target = &mut val as *mut *const U as *mut *const u8;\n-        // SAFETY: In case of a thin pointer, this operations is identical\n-        // to a simple assignment. In case of a fat pointer, with the current\n-        // fat pointer layout implementation, the first field of such a\n-        // pointer is always the data pointer, which is likewise assigned.\n-        unsafe { *target = self as *const u8 };\n-        val\n+        from_raw_parts::<U>(self as *const (), metadata(meta))\n     }\n \n     /// Changes constness without changing the type.\n@@ -478,8 +473,7 @@ impl<T: ?Sized> *const T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n-        from_raw_parts::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().offset(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -559,7 +553,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n-        from_raw_parts::<T>(self.cast::<u8>().wrapping_offset(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_offset(count).with_metadata_of(self)\n     }\n \n     /// Masks out bits of the pointer according to a mask.\n@@ -597,8 +591,7 @@ impl<T: ?Sized> *const T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]\n     pub fn mask(self, mask: usize) -> *const T {\n-        let this = intrinsics::ptr_mask(self.cast::<()>(), mask);\n-        from_raw_parts::<T>(this, metadata(self))\n+        intrinsics::ptr_mask(self.cast::<()>(), mask).with_metadata_of(self)\n     }\n \n     /// Calculates the distance between two pointers. The returned value is in\n@@ -939,8 +932,7 @@ impl<T: ?Sized> *const T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n-        let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n-        from_raw_parts::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().add(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer (convenience for\n@@ -1026,8 +1018,7 @@ impl<T: ?Sized> *const T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n-        let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n-        from_raw_parts::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().sub(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1107,7 +1098,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_add(self, count: usize) -> Self {\n-        from_raw_parts::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_add(count).with_metadata_of(self)\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1187,7 +1178,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n-        from_raw_parts::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_sub(count).with_metadata_of(self)\n     }\n \n     /// Reads the value from `self` without moving it. This leaves the\n@@ -1329,6 +1320,8 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// # }\n     /// ```\n+    #[must_use]\n+    #[inline]\n     #[stable(feature = \"align_offset\", since = \"1.36.0\")]\n     #[rustc_const_unstable(feature = \"const_align_offset\", issue = \"90962\")]\n     pub const fn align_offset(self, align: usize) -> usize\n@@ -1339,32 +1332,149 @@ impl<T: ?Sized> *const T {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n \n-        fn rt_impl<T>(p: *const T, align: usize) -> usize {\n-            // SAFETY: `align` has been checked to be a power of 2 above\n-            unsafe { align_offset(p, align) }\n-        }\n+        #[cfg(bootstrap)]\n+        {\n+            fn rt_impl<T>(p: *const T, align: usize) -> usize {\n+                // SAFETY: `align` has been checked to be a power of 2 above\n+                unsafe { align_offset(p, align) }\n+            }\n+\n+            const fn ctfe_impl<T>(_: *const T, _: usize) -> usize {\n+                usize::MAX\n+            }\n \n-        const fn ctfe_impl<T>(_: *const T, _: usize) -> usize {\n-            usize::MAX\n+            // SAFETY:\n+            // It is permissible for `align_offset` to always return `usize::MAX`,\n+            // algorithm correctness can not depend on `align_offset` returning non-max values.\n+            //\n+            // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n+            unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n         }\n \n-        // SAFETY:\n-        // It is permissible for `align_offset` to always return `usize::MAX`,\n-        // algorithm correctness can not depend on `align_offset` returning non-max values.\n-        //\n-        // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n-        unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n+        #[cfg(not(bootstrap))]\n+        {\n+            // SAFETY: `align` has been checked to be a power of 2 above\n+            unsafe { align_offset(self, align) }\n+        }\n     }\n \n     /// Returns whether the pointer is properly aligned for `T`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    /// ```\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(pointer_byte_offsets)]\n+    ///\n+    /// // On some platforms, the alignment of i32 is less than 4.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    ///\n+    /// let data = AlignedI32(42);\n+    /// let ptr = &data as *const AlignedI32;\n+    ///\n+    /// assert!(ptr.is_aligned());\n+    /// assert!(!ptr.wrapping_byte_add(1).is_aligned());\n+    /// ```\n+    ///\n+    /// # At compiletime\n+    /// **Note: Alignment at compiletime is experimental and subject to change. See the\n+    /// [tracking issue] for details.**\n+    ///\n+    /// At compiletime, the compiler may not know where a value will end up in memory.\n+    /// Calling this function on a pointer created from a reference at compiletime will only\n+    /// return `true` if the pointer is guaranteed to be aligned. This means that the pointer\n+    /// is never aligned if cast to a type with a stricter alignment than the reference's\n+    /// underlying allocation.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    ///\n+    /// // On some platforms, the alignment of primitives is less than their size.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    /// #[repr(align(8))]\n+    /// struct AlignedI64(i64);\n+    ///\n+    /// const _: () = {\n+    ///     let data = AlignedI32(42);\n+    ///     let ptr = &data as *const AlignedI32;\n+    ///     assert!(ptr.is_aligned());\n+    ///\n+    ///     // At runtime either `ptr1` or `ptr2` would be aligned, but at compiletime neither is aligned.\n+    ///     let ptr1 = ptr.cast::<AlignedI64>();\n+    ///     let ptr2 = ptr.wrapping_add(1).cast::<AlignedI64>();\n+    ///     assert!(!ptr1.is_aligned());\n+    ///     assert!(!ptr2.is_aligned());\n+    /// };\n+    /// ```\n+    ///\n+    /// Due to this behavior, it is possible that a runtime pointer derived from a compiletime\n+    /// pointer is aligned, even if the compiletime pointer wasn't aligned.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    ///\n+    /// // On some platforms, the alignment of primitives is less than their size.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    /// #[repr(align(8))]\n+    /// struct AlignedI64(i64);\n+    ///\n+    /// // At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n+    /// const COMPTIME_PTR: *const AlignedI32 = &AlignedI32(42);\n+    /// const _: () = assert!(!COMPTIME_PTR.cast::<AlignedI64>().is_aligned());\n+    /// const _: () = assert!(!COMPTIME_PTR.wrapping_add(1).cast::<AlignedI64>().is_aligned());\n+    ///\n+    /// // At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n+    /// let runtime_ptr = COMPTIME_PTR;\n+    /// assert_ne!(\n+    ///     runtime_ptr.cast::<AlignedI64>().is_aligned(),\n+    ///     runtime_ptr.wrapping_add(1).cast::<AlignedI64>().is_aligned(),\n+    /// );\n+    /// ```\n+    ///\n+    /// If a pointer is created from a fixed address, this function behaves the same during\n+    /// runtime and compiletime.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    ///\n+    /// // On some platforms, the alignment of primitives is less than their size.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    /// #[repr(align(8))]\n+    /// struct AlignedI64(i64);\n+    ///\n+    /// const _: () = {\n+    ///     let ptr = 40 as *const AlignedI32;\n+    ///     assert!(ptr.is_aligned());\n+    ///\n+    ///     // For pointers with a known address, runtime and compiletime behavior are identical.\n+    ///     let ptr1 = ptr.cast::<AlignedI64>();\n+    ///     let ptr2 = ptr.wrapping_add(1).cast::<AlignedI64>();\n+    ///     assert!(ptr1.is_aligned());\n+    ///     assert!(!ptr2.is_aligned());\n+    /// };\n+    /// ```\n+    ///\n+    /// [tracking issue]: https://github.com/rust-lang/rust/issues/104203\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n-    pub fn is_aligned(self) -> bool\n+    #[rustc_const_unstable(feature = \"const_pointer_is_aligned\", issue = \"104203\")]\n+    pub const fn is_aligned(self) -> bool\n     where\n         T: Sized,\n     {\n-        self.is_aligned_to(core::mem::align_of::<T>())\n+        self.is_aligned_to(mem::align_of::<T>())\n     }\n \n     /// Returns whether the pointer is aligned to `align`.\n@@ -1375,16 +1485,121 @@ impl<T: ?Sized> *const T {\n     /// # Panics\n     ///\n     /// The function panics if `align` is not a power-of-two (this includes 0).\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    /// ```\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(pointer_byte_offsets)]\n+    ///\n+    /// // On some platforms, the alignment of i32 is less than 4.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    ///\n+    /// let data = AlignedI32(42);\n+    /// let ptr = &data as *const AlignedI32;\n+    ///\n+    /// assert!(ptr.is_aligned_to(1));\n+    /// assert!(ptr.is_aligned_to(2));\n+    /// assert!(ptr.is_aligned_to(4));\n+    ///\n+    /// assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));\n+    /// assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));\n+    ///\n+    /// assert_ne!(ptr.is_aligned_to(8), ptr.wrapping_add(1).is_aligned_to(8));\n+    /// ```\n+    ///\n+    /// # At compiletime\n+    /// **Note: Alignment at compiletime is experimental and subject to change. See the\n+    /// [tracking issue] for details.**\n+    ///\n+    /// At compiletime, the compiler may not know where a value will end up in memory.\n+    /// Calling this function on a pointer created from a reference at compiletime will only\n+    /// return `true` if the pointer is guaranteed to be aligned. This means that the pointer\n+    /// cannot be stricter aligned than the reference's underlying allocation.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    ///\n+    /// // On some platforms, the alignment of i32 is less than 4.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    ///\n+    /// const _: () = {\n+    ///     let data = AlignedI32(42);\n+    ///     let ptr = &data as *const AlignedI32;\n+    ///\n+    ///     assert!(ptr.is_aligned_to(1));\n+    ///     assert!(ptr.is_aligned_to(2));\n+    ///     assert!(ptr.is_aligned_to(4));\n+    ///\n+    ///     // At compiletime, we know for sure that the pointer isn't aligned to 8.\n+    ///     assert!(!ptr.is_aligned_to(8));\n+    ///     assert!(!ptr.wrapping_add(1).is_aligned_to(8));\n+    /// };\n+    /// ```\n+    ///\n+    /// Due to this behavior, it is possible that a runtime pointer derived from a compiletime\n+    /// pointer is aligned, even if the compiletime pointer wasn't aligned.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    ///\n+    /// // On some platforms, the alignment of i32 is less than 4.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    ///\n+    /// // At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n+    /// const COMPTIME_PTR: *const AlignedI32 = &AlignedI32(42);\n+    /// const _: () = assert!(!COMPTIME_PTR.is_aligned_to(8));\n+    /// const _: () = assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));\n+    ///\n+    /// // At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n+    /// let runtime_ptr = COMPTIME_PTR;\n+    /// assert_ne!(\n+    ///     runtime_ptr.is_aligned_to(8),\n+    ///     runtime_ptr.wrapping_add(1).is_aligned_to(8),\n+    /// );\n+    /// ```\n+    ///\n+    /// If a pointer is created from a fixed address, this function behaves the same during\n+    /// runtime and compiletime.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    ///\n+    /// const _: () = {\n+    ///     let ptr = 40 as *const u8;\n+    ///     assert!(ptr.is_aligned_to(1));\n+    ///     assert!(ptr.is_aligned_to(2));\n+    ///     assert!(ptr.is_aligned_to(4));\n+    ///     assert!(ptr.is_aligned_to(8));\n+    ///     assert!(!ptr.is_aligned_to(16));\n+    /// };\n+    /// ```\n+    ///\n+    /// [tracking issue]: https://github.com/rust-lang/rust/issues/104203\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n-    pub fn is_aligned_to(self, align: usize) -> bool {\n+    #[rustc_const_unstable(feature = \"const_pointer_is_aligned\", issue = \"104203\")]\n+    pub const fn is_aligned_to(self, align: usize) -> bool {\n         if !align.is_power_of_two() {\n             panic!(\"is_aligned_to: align is not a power-of-two\");\n         }\n \n-        // Cast is needed for `T: !Sized`\n-        self.cast::<u8>().addr() & align - 1 == 0\n+        // We can't use the address of `self` in a `const fn`, so we use `align_offset` instead.\n+        // The cast to `()` is used to\n+        //   1. deal with fat pointers; and\n+        //   2. ensure that `align_offset` doesn't actually try to compute an offset.\n+        self.cast::<()>().align_offset(align) == 0\n     }\n }\n "}, {"sha": "73923753a3020062ad6811df4849eb013a5dd970", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1574,10 +1574,14 @@ pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {\n \n /// Align pointer `p`.\n ///\n-/// Calculate offset (in terms of elements of `stride` stride) that has to be applied\n+/// Calculate offset (in terms of elements of `size_of::<T>()` stride) that has to be applied\n /// to pointer `p` so that pointer `p` would get aligned to `a`.\n ///\n-/// Note: This implementation has been carefully tailored to not panic. It is UB for this to panic.\n+/// # Safety\n+/// `a` must be a power of two.\n+///\n+/// # Notes\n+/// This implementation has been carefully tailored to not panic. It is UB for this to panic.\n /// The only real change that can be made here is change of `INV_TABLE_MOD_16` and associated\n /// constants.\n ///\n@@ -1587,12 +1591,12 @@ pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {\n ///\n /// Any questions go to @nagisa.\n #[lang = \"align_offset\"]\n-pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n+pub(crate) const unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n     // FIXME(#75598): Direct use of these intrinsics improves codegen significantly at opt-level <=\n     // 1, where the method versions of these operations are not inlined.\n     use intrinsics::{\n-        cttz_nonzero, exact_div, unchecked_rem, unchecked_shl, unchecked_shr, unchecked_sub,\n-        wrapping_add, wrapping_mul, wrapping_sub,\n+        cttz_nonzero, exact_div, mul_with_overflow, unchecked_rem, unchecked_shl, unchecked_shr,\n+        unchecked_sub, wrapping_add, wrapping_mul, wrapping_sub,\n     };\n \n     /// Calculate multiplicative modular inverse of `x` modulo `m`.\n@@ -1604,48 +1608,56 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n     ///\n     /// Implementation of this function shall not panic. Ever.\n     #[inline]\n-    unsafe fn mod_inv(x: usize, m: usize) -> usize {\n+    const unsafe fn mod_inv(x: usize, m: usize) -> usize {\n         /// Multiplicative modular inverse table modulo 2\u2074 = 16.\n         ///\n         /// Note, that this table does not contain values where inverse does not exist (i.e., for\n         /// `0\u207b\u00b9 mod 16`, `2\u207b\u00b9 mod 16`, etc.)\n         const INV_TABLE_MOD_16: [u8; 8] = [1, 11, 13, 7, 9, 3, 5, 15];\n         /// Modulo for which the `INV_TABLE_MOD_16` is intended.\n         const INV_TABLE_MOD: usize = 16;\n-        /// INV_TABLE_MOD\u00b2\n-        const INV_TABLE_MOD_SQUARED: usize = INV_TABLE_MOD * INV_TABLE_MOD;\n \n-        let table_inverse = INV_TABLE_MOD_16[(x & (INV_TABLE_MOD - 1)) >> 1] as usize;\n         // SAFETY: `m` is required to be a power-of-two, hence non-zero.\n         let m_minus_one = unsafe { unchecked_sub(m, 1) };\n-        if m <= INV_TABLE_MOD {\n-            table_inverse & m_minus_one\n-        } else {\n-            // We iterate \"up\" using the following formula:\n-            //\n-            // $$ xy \u2261 1 (mod 2\u207f) \u2192 xy (2 - xy) \u2261 1 (mod 2\u00b2\u207f) $$\n+        let mut inverse = INV_TABLE_MOD_16[(x & (INV_TABLE_MOD - 1)) >> 1] as usize;\n+        let mut mod_gate = INV_TABLE_MOD;\n+        // We iterate \"up\" using the following formula:\n+        //\n+        // $$ xy \u2261 1 (mod 2\u207f) \u2192 xy (2 - xy) \u2261 1 (mod 2\u00b2\u207f) $$\n+        //\n+        // This application needs to be applied at least until `2\u00b2\u207f \u2265 m`, at which point we can\n+        // finally reduce the computation to our desired `m` by taking `inverse mod m`.\n+        //\n+        // This computation is `O(log log m)`, which is to say, that on 64-bit machines this loop\n+        // will always finish in at most 4 iterations.\n+        loop {\n+            // y = y * (2 - xy) mod n\n             //\n-            // until 2\u00b2\u207f \u2265 m. Then we can reduce to our desired `m` by taking the result `mod m`.\n-            let mut inverse = table_inverse;\n-            let mut going_mod = INV_TABLE_MOD_SQUARED;\n-            loop {\n-                // y = y * (2 - xy) mod n\n-                //\n-                // Note, that we use wrapping operations here intentionally \u2013 the original formula\n-                // uses e.g., subtraction `mod n`. It is entirely fine to do them `mod\n-                // usize::MAX` instead, because we take the result `mod n` at the end\n-                // anyway.\n-                inverse = wrapping_mul(inverse, wrapping_sub(2usize, wrapping_mul(x, inverse)));\n-                if going_mod >= m {\n-                    return inverse & m_minus_one;\n-                }\n-                going_mod = wrapping_mul(going_mod, going_mod);\n+            // Note, that we use wrapping operations here intentionally \u2013 the original formula\n+            // uses e.g., subtraction `mod n`. It is entirely fine to do them `mod\n+            // usize::MAX` instead, because we take the result `mod n` at the end\n+            // anyway.\n+            if mod_gate >= m {\n+                break;\n             }\n+            inverse = wrapping_mul(inverse, wrapping_sub(2usize, wrapping_mul(x, inverse)));\n+            let (new_gate, overflow) = mul_with_overflow(mod_gate, mod_gate);\n+            if overflow {\n+                break;\n+            }\n+            mod_gate = new_gate;\n         }\n+        inverse & m_minus_one\n     }\n \n-    let addr = p.addr();\n     let stride = mem::size_of::<T>();\n+\n+    // SAFETY: This is just an inlined `p.addr()` (which is not\n+    // a `const fn` so we cannot call it).\n+    // During const eval, we hook this function to ensure that the pointer never\n+    // has provenance, making this sound.\n+    let addr: usize = unsafe { mem::transmute(p) };\n+\n     // SAFETY: `a` is a power-of-two, therefore non-zero.\n     let a_minus_one = unsafe { unchecked_sub(a, 1) };\n "}, {"sha": "8472b05ddbd40a595f6b1d3bdb8d2b2ba98a5438", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 255, "deletions": 43, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -78,23 +78,14 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[rustc_const_unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn with_metadata_of<U>(self, val: *const U) -> *mut U\n+    pub const fn with_metadata_of<U>(self, meta: *const U) -> *mut U\n     where\n         U: ?Sized,\n     {\n-        // Prepare in the type system that we will replace the pointer value with a mutable\n-        // pointer, taking the mutable provenance from the `self` pointer.\n-        let mut val = val as *mut U;\n-        // Pointer to the pointer value within the value.\n-        let target = &mut val as *mut *mut U as *mut *mut u8;\n-        // SAFETY: In case of a thin pointer, this operations is identical\n-        // to a simple assignment. In case of a fat pointer, with the current\n-        // fat pointer layout implementation, the first field of such a\n-        // pointer is always the data pointer, which is likewise assigned.\n-        unsafe { *target = self as *mut u8 };\n-        val\n+        from_raw_parts_mut::<U>(self as *mut (), metadata(meta))\n     }\n \n     /// Changes constness without changing the type.\n@@ -496,8 +487,7 @@ impl<T: ?Sized> *mut T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n-        let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().offset(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -576,10 +566,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_offset(self, count: isize) -> Self {\n-        from_raw_parts_mut::<T>(\n-            self.cast::<u8>().wrapping_offset(count).cast::<()>(),\n-            metadata(self),\n-        )\n+        self.cast::<u8>().wrapping_offset(count).with_metadata_of(self)\n     }\n \n     /// Masks out bits of the pointer according to a mask.\n@@ -620,8 +607,7 @@ impl<T: ?Sized> *mut T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]\n     pub fn mask(self, mask: usize) -> *mut T {\n-        let this = intrinsics::ptr_mask(self.cast::<()>(), mask) as *mut ();\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        intrinsics::ptr_mask(self.cast::<()>(), mask).cast_mut().with_metadata_of(self)\n     }\n \n     /// Returns `None` if the pointer is null, or else returns a unique reference to\n@@ -1048,8 +1034,7 @@ impl<T: ?Sized> *mut T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n-        let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().add(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer (convenience for\n@@ -1135,8 +1120,7 @@ impl<T: ?Sized> *mut T {\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n-        let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n-        from_raw_parts_mut::<T>(this, metadata(self))\n+        unsafe { self.cast::<u8>().sub(count).with_metadata_of(self) }\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1216,7 +1200,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_add(self, count: usize) -> Self {\n-        from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_add(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_add(count).with_metadata_of(self)\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n@@ -1296,7 +1280,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n     pub const fn wrapping_byte_sub(self, count: usize) -> Self {\n-        from_raw_parts_mut::<T>(self.cast::<u8>().wrapping_sub(count).cast::<()>(), metadata(self))\n+        self.cast::<u8>().wrapping_sub(count).with_metadata_of(self)\n     }\n \n     /// Reads the value from `self` without moving it. This leaves the\n@@ -1604,6 +1588,8 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// # }\n     /// ```\n+    #[must_use]\n+    #[inline]\n     #[stable(feature = \"align_offset\", since = \"1.36.0\")]\n     #[rustc_const_unstable(feature = \"const_align_offset\", issue = \"90962\")]\n     pub const fn align_offset(self, align: usize) -> usize\n@@ -1614,32 +1600,151 @@ impl<T: ?Sized> *mut T {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n \n-        fn rt_impl<T>(p: *mut T, align: usize) -> usize {\n-            // SAFETY: `align` has been checked to be a power of 2 above\n-            unsafe { align_offset(p, align) }\n+        #[cfg(bootstrap)]\n+        {\n+            fn rt_impl<T>(p: *mut T, align: usize) -> usize {\n+                // SAFETY: `align` has been checked to be a power of 2 above\n+                unsafe { align_offset(p, align) }\n+            }\n+\n+            const fn ctfe_impl<T>(_: *mut T, _: usize) -> usize {\n+                usize::MAX\n+            }\n+\n+            // SAFETY:\n+            // It is permissible for `align_offset` to always return `usize::MAX`,\n+            // algorithm correctness can not depend on `align_offset` returning non-max values.\n+            //\n+            // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n+            unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n         }\n \n-        const fn ctfe_impl<T>(_: *mut T, _: usize) -> usize {\n-            usize::MAX\n+        #[cfg(not(bootstrap))]\n+        {\n+            // SAFETY: `align` has been checked to be a power of 2 above\n+            unsafe { align_offset(self, align) }\n         }\n-\n-        // SAFETY:\n-        // It is permissible for `align_offset` to always return `usize::MAX`,\n-        // algorithm correctness can not depend on `align_offset` returning non-max values.\n-        //\n-        // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n-        unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n     }\n \n     /// Returns whether the pointer is properly aligned for `T`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    /// ```\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(pointer_byte_offsets)]\n+    ///\n+    /// // On some platforms, the alignment of i32 is less than 4.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    ///\n+    /// let mut data = AlignedI32(42);\n+    /// let ptr = &mut data as *mut AlignedI32;\n+    ///\n+    /// assert!(ptr.is_aligned());\n+    /// assert!(!ptr.wrapping_byte_add(1).is_aligned());\n+    /// ```\n+    ///\n+    /// # At compiletime\n+    /// **Note: Alignment at compiletime is experimental and subject to change. See the\n+    /// [tracking issue] for details.**\n+    ///\n+    /// At compiletime, the compiler may not know where a value will end up in memory.\n+    /// Calling this function on a pointer created from a reference at compiletime will only\n+    /// return `true` if the pointer is guaranteed to be aligned. This means that the pointer\n+    /// is never aligned if cast to a type with a stricter alignment than the reference's\n+    /// underlying allocation.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    /// #![feature(const_mut_refs)]\n+    ///\n+    /// // On some platforms, the alignment of primitives is less than their size.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    /// #[repr(align(8))]\n+    /// struct AlignedI64(i64);\n+    ///\n+    /// const _: () = {\n+    ///     let mut data = AlignedI32(42);\n+    ///     let ptr = &mut data as *mut AlignedI32;\n+    ///     assert!(ptr.is_aligned());\n+    ///\n+    ///     // At runtime either `ptr1` or `ptr2` would be aligned, but at compiletime neither is aligned.\n+    ///     let ptr1 = ptr.cast::<AlignedI64>();\n+    ///     let ptr2 = ptr.wrapping_add(1).cast::<AlignedI64>();\n+    ///     assert!(!ptr1.is_aligned());\n+    ///     assert!(!ptr2.is_aligned());\n+    /// };\n+    /// ```\n+    ///\n+    /// Due to this behavior, it is possible that a runtime pointer derived from a compiletime\n+    /// pointer is aligned, even if the compiletime pointer wasn't aligned.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    ///\n+    /// // On some platforms, the alignment of primitives is less than their size.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    /// #[repr(align(8))]\n+    /// struct AlignedI64(i64);\n+    ///\n+    /// // At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n+    /// // Also, note that mutable references are not allowed in the final value of constants.\n+    /// const COMPTIME_PTR: *mut AlignedI32 = (&AlignedI32(42) as *const AlignedI32).cast_mut();\n+    /// const _: () = assert!(!COMPTIME_PTR.cast::<AlignedI64>().is_aligned());\n+    /// const _: () = assert!(!COMPTIME_PTR.wrapping_add(1).cast::<AlignedI64>().is_aligned());\n+    ///\n+    /// // At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n+    /// let runtime_ptr = COMPTIME_PTR;\n+    /// assert_ne!(\n+    ///     runtime_ptr.cast::<AlignedI64>().is_aligned(),\n+    ///     runtime_ptr.wrapping_add(1).cast::<AlignedI64>().is_aligned(),\n+    /// );\n+    /// ```\n+    ///\n+    /// If a pointer is created from a fixed address, this function behaves the same during\n+    /// runtime and compiletime.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    ///\n+    /// // On some platforms, the alignment of primitives is less than their size.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    /// #[repr(align(8))]\n+    /// struct AlignedI64(i64);\n+    ///\n+    /// const _: () = {\n+    ///     let ptr = 40 as *mut AlignedI32;\n+    ///     assert!(ptr.is_aligned());\n+    ///\n+    ///     // For pointers with a known address, runtime and compiletime behavior are identical.\n+    ///     let ptr1 = ptr.cast::<AlignedI64>();\n+    ///     let ptr2 = ptr.wrapping_add(1).cast::<AlignedI64>();\n+    ///     assert!(ptr1.is_aligned());\n+    ///     assert!(!ptr2.is_aligned());\n+    /// };\n+    /// ```\n+    ///\n+    /// [tracking issue]: https://github.com/rust-lang/rust/issues/104203\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n-    pub fn is_aligned(self) -> bool\n+    #[rustc_const_unstable(feature = \"const_pointer_is_aligned\", issue = \"104203\")]\n+    pub const fn is_aligned(self) -> bool\n     where\n         T: Sized,\n     {\n-        self.is_aligned_to(core::mem::align_of::<T>())\n+        self.is_aligned_to(mem::align_of::<T>())\n     }\n \n     /// Returns whether the pointer is aligned to `align`.\n@@ -1650,16 +1755,123 @@ impl<T: ?Sized> *mut T {\n     /// # Panics\n     ///\n     /// The function panics if `align` is not a power-of-two (this includes 0).\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    /// ```\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(pointer_byte_offsets)]\n+    ///\n+    /// // On some platforms, the alignment of i32 is less than 4.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    ///\n+    /// let mut data = AlignedI32(42);\n+    /// let ptr = &mut data as *mut AlignedI32;\n+    ///\n+    /// assert!(ptr.is_aligned_to(1));\n+    /// assert!(ptr.is_aligned_to(2));\n+    /// assert!(ptr.is_aligned_to(4));\n+    ///\n+    /// assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));\n+    /// assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));\n+    ///\n+    /// assert_ne!(ptr.is_aligned_to(8), ptr.wrapping_add(1).is_aligned_to(8));\n+    /// ```\n+    ///\n+    /// # At compiletime\n+    /// **Note: Alignment at compiletime is experimental and subject to change. See the\n+    /// [tracking issue] for details.**\n+    ///\n+    /// At compiletime, the compiler may not know where a value will end up in memory.\n+    /// Calling this function on a pointer created from a reference at compiletime will only\n+    /// return `true` if the pointer is guaranteed to be aligned. This means that the pointer\n+    /// cannot be stricter aligned than the reference's underlying allocation.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    /// #![feature(const_mut_refs)]\n+    ///\n+    /// // On some platforms, the alignment of i32 is less than 4.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    ///\n+    /// const _: () = {\n+    ///     let mut data = AlignedI32(42);\n+    ///     let ptr = &mut data as *mut AlignedI32;\n+    ///\n+    ///     assert!(ptr.is_aligned_to(1));\n+    ///     assert!(ptr.is_aligned_to(2));\n+    ///     assert!(ptr.is_aligned_to(4));\n+    ///\n+    ///     // At compiletime, we know for sure that the pointer isn't aligned to 8.\n+    ///     assert!(!ptr.is_aligned_to(8));\n+    ///     assert!(!ptr.wrapping_add(1).is_aligned_to(8));\n+    /// };\n+    /// ```\n+    ///\n+    /// Due to this behavior, it is possible that a runtime pointer derived from a compiletime\n+    /// pointer is aligned, even if the compiletime pointer wasn't aligned.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    ///\n+    /// // On some platforms, the alignment of i32 is less than 4.\n+    /// #[repr(align(4))]\n+    /// struct AlignedI32(i32);\n+    ///\n+    /// // At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n+    /// // Also, note that mutable references are not allowed in the final value of constants.\n+    /// const COMPTIME_PTR: *mut AlignedI32 = (&AlignedI32(42) as *const AlignedI32).cast_mut();\n+    /// const _: () = assert!(!COMPTIME_PTR.is_aligned_to(8));\n+    /// const _: () = assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));\n+    ///\n+    /// // At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n+    /// let runtime_ptr = COMPTIME_PTR;\n+    /// assert_ne!(\n+    ///     runtime_ptr.is_aligned_to(8),\n+    ///     runtime_ptr.wrapping_add(1).is_aligned_to(8),\n+    /// );\n+    /// ```\n+    ///\n+    /// If a pointer is created from a fixed address, this function behaves the same during\n+    /// runtime and compiletime.\n+    ///\n+    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// #![feature(pointer_is_aligned)]\n+    /// #![feature(const_pointer_is_aligned)]\n+    ///\n+    /// const _: () = {\n+    ///     let ptr = 40 as *mut u8;\n+    ///     assert!(ptr.is_aligned_to(1));\n+    ///     assert!(ptr.is_aligned_to(2));\n+    ///     assert!(ptr.is_aligned_to(4));\n+    ///     assert!(ptr.is_aligned_to(8));\n+    ///     assert!(!ptr.is_aligned_to(16));\n+    /// };\n+    /// ```\n+    ///\n+    /// [tracking issue]: https://github.com/rust-lang/rust/issues/104203\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"pointer_is_aligned\", issue = \"96284\")]\n-    pub fn is_aligned_to(self, align: usize) -> bool {\n+    #[rustc_const_unstable(feature = \"const_pointer_is_aligned\", issue = \"104203\")]\n+    pub const fn is_aligned_to(self, align: usize) -> bool {\n         if !align.is_power_of_two() {\n             panic!(\"is_aligned_to: align is not a power-of-two\");\n         }\n \n-        // Cast is needed for `T: !Sized`\n-        self.cast::<u8>().addr() & align - 1 == 0\n+        // We can't use the address of `self` in a `const fn`, so we use `align_offset` instead.\n+        // The cast to `()` is used to\n+        //   1. deal with fat pointers; and\n+        //   2. ensure that `align_offset` doesn't actually try to compute an offset.\n+        self.cast::<()>().align_offset(align) == 0\n     }\n }\n "}, {"sha": "ad90e00b8a095a42aa6a0fed4a28d4ae0f98c0e9", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -3752,9 +3752,9 @@ impl<T> [T] {\n     /// [`is_sorted`]: slice::is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n     #[must_use]\n-    pub fn is_sorted_by<F>(&self, mut compare: F) -> bool\n+    pub fn is_sorted_by<'a, F>(&'a self, mut compare: F) -> bool\n     where\n-        F: FnMut(&T, &T) -> Option<Ordering>,\n+        F: FnMut(&'a T, &'a T) -> Option<Ordering>,\n     {\n         self.iter().is_sorted_by(|a, b| compare(*a, *b))\n     }\n@@ -3778,9 +3778,9 @@ impl<T> [T] {\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n     #[must_use]\n-    pub fn is_sorted_by_key<F, K>(&self, f: F) -> bool\n+    pub fn is_sorted_by_key<'a, F, K>(&'a self, f: F) -> bool\n     where\n-        F: FnMut(&T) -> K,\n+        F: FnMut(&'a T) -> K,\n         K: PartialOrd,\n     {\n         self.iter().is_sorted_by_key(f)"}, {"sha": "66d28770b87f9fbdf177d660434a337410b9d65d", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -4,6 +4,7 @@\n #![feature(array_windows)]\n #![feature(bigint_helper_methods)]\n #![feature(cell_update)]\n+#![feature(const_align_offset)]\n #![feature(const_assume)]\n #![feature(const_align_of_val_raw)]\n #![feature(const_black_box)]\n@@ -18,6 +19,7 @@\n #![feature(const_nonnull_new)]\n #![feature(const_num_from_num)]\n #![feature(const_pointer_byte_offsets)]\n+#![feature(const_pointer_is_aligned)]\n #![feature(const_ptr_as_ref)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n@@ -81,6 +83,7 @@\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(pointer_byte_offsets)]\n+#![feature(pointer_is_aligned)]\n #![feature(portable_simd)]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]"}, {"sha": "390148550a4b398d891d2db7110a6dc19b24e9b4", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 291, "deletions": 0, "changes": 291, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -358,6 +358,23 @@ fn align_offset_zst() {\n     }\n }\n \n+#[test]\n+#[cfg(not(bootstrap))]\n+fn align_offset_zst_const() {\n+    const {\n+        // For pointers of stride = 0, the pointer is already aligned or it cannot be aligned at\n+        // all, because no amount of elements will align the pointer.\n+        let mut p = 1;\n+        while p < 1024 {\n+            assert!(ptr::invalid::<()>(p).align_offset(p) == 0);\n+            if p != 1 {\n+                assert!(ptr::invalid::<()>(p + 1).align_offset(p) == !0);\n+            }\n+            p = (p + 1).next_power_of_two();\n+        }\n+    }\n+}\n+\n #[test]\n fn align_offset_stride_one() {\n     // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n@@ -379,6 +396,26 @@ fn align_offset_stride_one() {\n     }\n }\n \n+#[test]\n+#[cfg(not(bootstrap))]\n+fn align_offset_stride_one_const() {\n+    const {\n+        // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n+        // number of bytes.\n+        let mut align = 1;\n+        while align < 1024 {\n+            let mut ptr = 1;\n+            while ptr < 2 * align {\n+                let expected = ptr % align;\n+                let offset = if expected == 0 { 0 } else { align - expected };\n+                assert!(ptr::invalid::<u8>(ptr).align_offset(align) == offset);\n+                ptr += 1;\n+            }\n+            align = (align + 1).next_power_of_two();\n+        }\n+    }\n+}\n+\n #[test]\n fn align_offset_various_strides() {\n     unsafe fn test_stride<T>(ptr: *const T, align: usize) -> bool {\n@@ -455,6 +492,260 @@ fn align_offset_various_strides() {\n     assert!(!x);\n }\n \n+#[test]\n+#[cfg(not(bootstrap))]\n+fn align_offset_various_strides_const() {\n+    const unsafe fn test_stride<T>(ptr: *const T, numptr: usize, align: usize) {\n+        let mut expected = usize::MAX;\n+        // Naive but definitely correct way to find the *first* aligned element of stride::<T>.\n+        let mut el = 0;\n+        while el < align {\n+            if (numptr + el * ::std::mem::size_of::<T>()) % align == 0 {\n+                expected = el;\n+                break;\n+            }\n+            el += 1;\n+        }\n+        let got = ptr.align_offset(align);\n+        assert!(got == expected);\n+    }\n+\n+    const {\n+        // For pointers of stride != 1, we verify the algorithm against the naivest possible\n+        // implementation\n+        let mut align = 1;\n+        let limit = 32;\n+        while align < limit {\n+            let mut ptr = 1;\n+            while ptr < 4 * align {\n+                unsafe {\n+                    #[repr(packed)]\n+                    struct A3(u16, u8);\n+                    test_stride::<A3>(ptr::invalid::<A3>(ptr), ptr, align);\n+\n+                    struct A4(u32);\n+                    test_stride::<A4>(ptr::invalid::<A4>(ptr), ptr, align);\n+\n+                    #[repr(packed)]\n+                    struct A5(u32, u8);\n+                    test_stride::<A5>(ptr::invalid::<A5>(ptr), ptr, align);\n+\n+                    #[repr(packed)]\n+                    struct A6(u32, u16);\n+                    test_stride::<A6>(ptr::invalid::<A6>(ptr), ptr, align);\n+\n+                    #[repr(packed)]\n+                    struct A7(u32, u16, u8);\n+                    test_stride::<A7>(ptr::invalid::<A7>(ptr), ptr, align);\n+\n+                    #[repr(packed)]\n+                    struct A8(u32, u32);\n+                    test_stride::<A8>(ptr::invalid::<A8>(ptr), ptr, align);\n+\n+                    #[repr(packed)]\n+                    struct A9(u32, u32, u8);\n+                    test_stride::<A9>(ptr::invalid::<A9>(ptr), ptr, align);\n+\n+                    #[repr(packed)]\n+                    struct A10(u32, u32, u16);\n+                    test_stride::<A10>(ptr::invalid::<A10>(ptr), ptr, align);\n+\n+                    test_stride::<u32>(ptr::invalid::<u32>(ptr), ptr, align);\n+                    test_stride::<u128>(ptr::invalid::<u128>(ptr), ptr, align);\n+                }\n+                ptr += 1;\n+            }\n+            align = (align + 1).next_power_of_two();\n+        }\n+    }\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn align_offset_with_provenance_const() {\n+    const {\n+        // On some platforms (e.g. msp430-none-elf), the alignment of `i32` is less than 4.\n+        #[repr(align(4))]\n+        struct AlignedI32(i32);\n+\n+        let data = AlignedI32(42);\n+\n+        // `stride % align == 0` (usual case)\n+\n+        let ptr: *const i32 = &data.0;\n+        assert!(ptr.align_offset(1) == 0);\n+        assert!(ptr.align_offset(2) == 0);\n+        assert!(ptr.align_offset(4) == 0);\n+        assert!(ptr.align_offset(8) == usize::MAX);\n+        assert!(ptr.wrapping_byte_add(1).align_offset(1) == 0);\n+        assert!(ptr.wrapping_byte_add(1).align_offset(2) == usize::MAX);\n+        assert!(ptr.wrapping_byte_add(2).align_offset(1) == 0);\n+        assert!(ptr.wrapping_byte_add(2).align_offset(2) == 0);\n+        assert!(ptr.wrapping_byte_add(2).align_offset(4) == usize::MAX);\n+        assert!(ptr.wrapping_byte_add(3).align_offset(1) == 0);\n+        assert!(ptr.wrapping_byte_add(3).align_offset(2) == usize::MAX);\n+\n+        assert!(ptr.wrapping_add(42).align_offset(4) == 0);\n+        assert!(ptr.wrapping_add(42).align_offset(8) == usize::MAX);\n+\n+        let ptr1: *const i8 = ptr.cast();\n+        assert!(ptr1.align_offset(1) == 0);\n+        assert!(ptr1.align_offset(2) == 0);\n+        assert!(ptr1.align_offset(4) == 0);\n+        assert!(ptr1.align_offset(8) == usize::MAX);\n+        assert!(ptr1.wrapping_byte_add(1).align_offset(1) == 0);\n+        assert!(ptr1.wrapping_byte_add(1).align_offset(2) == 1);\n+        assert!(ptr1.wrapping_byte_add(1).align_offset(4) == 3);\n+        assert!(ptr1.wrapping_byte_add(1).align_offset(8) == usize::MAX);\n+        assert!(ptr1.wrapping_byte_add(2).align_offset(1) == 0);\n+        assert!(ptr1.wrapping_byte_add(2).align_offset(2) == 0);\n+        assert!(ptr1.wrapping_byte_add(2).align_offset(4) == 2);\n+        assert!(ptr1.wrapping_byte_add(2).align_offset(8) == usize::MAX);\n+        assert!(ptr1.wrapping_byte_add(3).align_offset(1) == 0);\n+        assert!(ptr1.wrapping_byte_add(3).align_offset(2) == 1);\n+        assert!(ptr1.wrapping_byte_add(3).align_offset(4) == 1);\n+        assert!(ptr1.wrapping_byte_add(3).align_offset(8) == usize::MAX);\n+\n+        let ptr2: *const i16 = ptr.cast();\n+        assert!(ptr2.align_offset(1) == 0);\n+        assert!(ptr2.align_offset(2) == 0);\n+        assert!(ptr2.align_offset(4) == 0);\n+        assert!(ptr2.align_offset(8) == usize::MAX);\n+        assert!(ptr2.wrapping_byte_add(1).align_offset(1) == 0);\n+        assert!(ptr2.wrapping_byte_add(1).align_offset(2) == usize::MAX);\n+        assert!(ptr2.wrapping_byte_add(2).align_offset(1) == 0);\n+        assert!(ptr2.wrapping_byte_add(2).align_offset(2) == 0);\n+        assert!(ptr2.wrapping_byte_add(2).align_offset(4) == 1);\n+        assert!(ptr2.wrapping_byte_add(2).align_offset(8) == usize::MAX);\n+        assert!(ptr2.wrapping_byte_add(3).align_offset(1) == 0);\n+        assert!(ptr2.wrapping_byte_add(3).align_offset(2) == usize::MAX);\n+\n+        let ptr3: *const i64 = ptr.cast();\n+        assert!(ptr3.align_offset(1) == 0);\n+        assert!(ptr3.align_offset(2) == 0);\n+        assert!(ptr3.align_offset(4) == 0);\n+        assert!(ptr3.align_offset(8) == usize::MAX);\n+        assert!(ptr3.wrapping_byte_add(1).align_offset(1) == 0);\n+        assert!(ptr3.wrapping_byte_add(1).align_offset(2) == usize::MAX);\n+\n+        // `stride % align != 0` (edge case)\n+\n+        let ptr4: *const [u8; 3] = ptr.cast();\n+        assert!(ptr4.align_offset(1) == 0);\n+        assert!(ptr4.align_offset(2) == 0);\n+        assert!(ptr4.align_offset(4) == 0);\n+        assert!(ptr4.align_offset(8) == usize::MAX);\n+        assert!(ptr4.wrapping_byte_add(1).align_offset(1) == 0);\n+        assert!(ptr4.wrapping_byte_add(1).align_offset(2) == 1);\n+        assert!(ptr4.wrapping_byte_add(1).align_offset(4) == 1);\n+        assert!(ptr4.wrapping_byte_add(1).align_offset(8) == usize::MAX);\n+        assert!(ptr4.wrapping_byte_add(2).align_offset(1) == 0);\n+        assert!(ptr4.wrapping_byte_add(2).align_offset(2) == 0);\n+        assert!(ptr4.wrapping_byte_add(2).align_offset(4) == 2);\n+        assert!(ptr4.wrapping_byte_add(2).align_offset(8) == usize::MAX);\n+        assert!(ptr4.wrapping_byte_add(3).align_offset(1) == 0);\n+        assert!(ptr4.wrapping_byte_add(3).align_offset(2) == 1);\n+        assert!(ptr4.wrapping_byte_add(3).align_offset(4) == 3);\n+        assert!(ptr4.wrapping_byte_add(3).align_offset(8) == usize::MAX);\n+\n+        let ptr5: *const [u8; 5] = ptr.cast();\n+        assert!(ptr5.align_offset(1) == 0);\n+        assert!(ptr5.align_offset(2) == 0);\n+        assert!(ptr5.align_offset(4) == 0);\n+        assert!(ptr5.align_offset(8) == usize::MAX);\n+        assert!(ptr5.wrapping_byte_add(1).align_offset(1) == 0);\n+        assert!(ptr5.wrapping_byte_add(1).align_offset(2) == 1);\n+        assert!(ptr5.wrapping_byte_add(1).align_offset(4) == 3);\n+        assert!(ptr5.wrapping_byte_add(1).align_offset(8) == usize::MAX);\n+        assert!(ptr5.wrapping_byte_add(2).align_offset(1) == 0);\n+        assert!(ptr5.wrapping_byte_add(2).align_offset(2) == 0);\n+        assert!(ptr5.wrapping_byte_add(2).align_offset(4) == 2);\n+        assert!(ptr5.wrapping_byte_add(2).align_offset(8) == usize::MAX);\n+        assert!(ptr5.wrapping_byte_add(3).align_offset(1) == 0);\n+        assert!(ptr5.wrapping_byte_add(3).align_offset(2) == 1);\n+        assert!(ptr5.wrapping_byte_add(3).align_offset(4) == 1);\n+        assert!(ptr5.wrapping_byte_add(3).align_offset(8) == usize::MAX);\n+    }\n+}\n+\n+#[test]\n+fn align_offset_issue_103361() {\n+    #[cfg(target_pointer_width = \"64\")]\n+    const SIZE: usize = 1 << 47;\n+    #[cfg(target_pointer_width = \"32\")]\n+    const SIZE: usize = 1 << 30;\n+    #[cfg(target_pointer_width = \"16\")]\n+    const SIZE: usize = 1 << 13;\n+    struct HugeSize([u8; SIZE - 1]);\n+    let _ = (SIZE as *const HugeSize).align_offset(SIZE);\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn align_offset_issue_103361_const() {\n+    #[cfg(target_pointer_width = \"64\")]\n+    const SIZE: usize = 1 << 47;\n+    #[cfg(target_pointer_width = \"32\")]\n+    const SIZE: usize = 1 << 30;\n+    #[cfg(target_pointer_width = \"16\")]\n+    const SIZE: usize = 1 << 13;\n+    struct HugeSize([u8; SIZE - 1]);\n+\n+    const {\n+        assert!(ptr::invalid::<HugeSize>(SIZE - 1).align_offset(SIZE) == SIZE - 1);\n+        assert!(ptr::invalid::<HugeSize>(SIZE).align_offset(SIZE) == 0);\n+        assert!(ptr::invalid::<HugeSize>(SIZE + 1).align_offset(SIZE) == 1);\n+    }\n+}\n+\n+#[test]\n+fn is_aligned() {\n+    let data = 42;\n+    let ptr: *const i32 = &data;\n+    assert!(ptr.is_aligned());\n+    assert!(ptr.is_aligned_to(1));\n+    assert!(ptr.is_aligned_to(2));\n+    assert!(ptr.is_aligned_to(4));\n+    assert!(ptr.wrapping_byte_add(2).is_aligned_to(1));\n+    assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));\n+    assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));\n+\n+    // At runtime either `ptr` or `ptr+1` is aligned to 8.\n+    assert_ne!(ptr.is_aligned_to(8), ptr.wrapping_add(1).is_aligned_to(8));\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn is_aligned_const() {\n+    const {\n+        let data = 42;\n+        let ptr: *const i32 = &data;\n+        assert!(ptr.is_aligned());\n+        assert!(ptr.is_aligned_to(1));\n+        assert!(ptr.is_aligned_to(2));\n+        assert!(ptr.is_aligned_to(4));\n+        assert!(ptr.wrapping_byte_add(2).is_aligned_to(1));\n+        assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));\n+        assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));\n+\n+        // At comptime neither `ptr` nor `ptr+1` is aligned to 8.\n+        assert!(!ptr.is_aligned_to(8));\n+        assert!(!ptr.wrapping_add(1).is_aligned_to(8));\n+    }\n+}\n+\n+#[test]\n+#[cfg(bootstrap)]\n+fn is_aligned_const() {\n+    const {\n+        let data = 42;\n+        let ptr: *const i32 = &data;\n+        // The bootstrap compiler always returns false for is_aligned.\n+        assert!(!ptr.is_aligned());\n+        assert!(!ptr.is_aligned_to(1));\n+    }\n+}\n+\n #[test]\n fn offset_from() {\n     let mut a = [0; 5];"}, {"sha": "7e7180a38e2f23d6c76b3886a503ebb20832bec6", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -42,7 +42,8 @@ cfg_if::cfg_if! {\n         // L4Re is unix family but does not yet support unwinding.\n         #[path = \"dummy.rs\"]\n         mod real_imp;\n-    } else if #[cfg(target_env = \"msvc\")] {\n+    } else if #[cfg(all(target_env = \"msvc\", not(target_arch = \"arm\")))] {\n+        // LLVM does not support unwinding on 32 bit ARM msvc (thumbv7a-pc-windows-msvc)\n         #[path = \"seh.rs\"]\n         mod real_imp;\n     } else if #[cfg(any("}, {"sha": "4e30076246314edb50cdf017b1f1aa00878a3d12", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -880,7 +880,9 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f32 {\n-        (self.abs() + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n+        let ax = self.abs();\n+        let ix = 1.0 / ax;\n+        (ax + (ax / (Self::hypot(1.0, ix) + ix))).ln_1p().copysign(self)\n     }\n \n     /// Inverse hyperbolic cosine function.\n@@ -900,7 +902,11 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f32 {\n-        if self < 1.0 { Self::NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n+        if self < 1.0 {\n+            Self::NAN\n+        } else {\n+            (self + ((self - 1.0).sqrt() * (self + 1.0).sqrt())).ln()\n+        }\n     }\n \n     /// Inverse hyperbolic tangent function."}, {"sha": "6ee295de6163f3807fee36515ad138a61c10dc98", "filename": "library/std/src/f32/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -587,6 +587,11 @@ fn test_asinh() {\n     assert_approx_eq!((-2.0f32).asinh(), -1.443635475178810342493276740273105f32);\n     // regression test for the catastrophic cancellation fixed in 72486\n     assert_approx_eq!((-3000.0f32).asinh(), -8.699514775987968673236893537700647f32);\n+\n+    // test for low accuracy from issue 104548\n+    assert_approx_eq!(60.0f32, 60.0f32.sinh().asinh());\n+    // mul needed for approximate comparison to be meaningful\n+    assert_approx_eq!(1.0f32, 1e-15f32.sinh().asinh() * 1e15f32);\n }\n \n #[test]\n@@ -602,6 +607,9 @@ fn test_acosh() {\n     assert!(nan.acosh().is_nan());\n     assert_approx_eq!(2.0f32.acosh(), 1.31695789692481670862504634730796844f32);\n     assert_approx_eq!(3.0f32.acosh(), 1.76274717403908605046521864995958461f32);\n+\n+    // test for low accuracy from issue 104548\n+    assert_approx_eq!(60.0f32, 60.0f32.cosh().acosh());\n }\n \n #[test]"}, {"sha": "ec67fdad4f726f50ac11d503701fef61ab8664b5", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -882,7 +882,9 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f64 {\n-        (self.abs() + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n+        let ax = self.abs();\n+        let ix = 1.0 / ax;\n+        (ax + (ax / (Self::hypot(1.0, ix) + ix))).ln_1p().copysign(self)\n     }\n \n     /// Inverse hyperbolic cosine function.\n@@ -902,7 +904,11 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f64 {\n-        if self < 1.0 { Self::NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n+        if self < 1.0 {\n+            Self::NAN\n+        } else {\n+            (self + ((self - 1.0).sqrt() * (self + 1.0).sqrt())).ln()\n+        }\n     }\n \n     /// Inverse hyperbolic tangent function."}, {"sha": "5b039d445ce14db91eabb7e6c570d6dc29cf0be5", "filename": "library/std/src/f64/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -575,6 +575,11 @@ fn test_asinh() {\n     assert_approx_eq!((-2.0f64).asinh(), -1.443635475178810342493276740273105f64);\n     // regression test for the catastrophic cancellation fixed in 72486\n     assert_approx_eq!((-67452098.07139316f64).asinh(), -18.72007542627454439398548429400083);\n+\n+    // test for low accuracy from issue 104548\n+    assert_approx_eq!(60.0f64, 60.0f64.sinh().asinh());\n+    // mul needed for approximate comparison to be meaningful\n+    assert_approx_eq!(1.0f64, 1e-15f64.sinh().asinh() * 1e15f64);\n }\n \n #[test]\n@@ -590,6 +595,9 @@ fn test_acosh() {\n     assert!(nan.acosh().is_nan());\n     assert_approx_eq!(2.0f64.acosh(), 1.31695789692481670862504634730796844f64);\n     assert_approx_eq!(3.0f64.acosh(), 1.76274717403908605046521864995958461f64);\n+\n+    // test for low accuracy from issue 104548\n+    assert_approx_eq!(60.0f64, 60.0f64.cosh().acosh());\n }\n \n #[test]"}, {"sha": "c8d3289ca4a06986bd81ff1ea97ced5996745bd7", "filename": "library/std/src/sync/lazy_lock.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -6,7 +6,9 @@ use crate::sync::OnceLock;\n \n /// A value which is initialized on the first access.\n ///\n-/// This type is a thread-safe `Lazy`, and can be used in statics.\n+/// This type is a thread-safe [`LazyCell`], and can be used in statics.\n+///\n+/// [`LazyCell`]: crate::cell::LazyCell\n ///\n /// # Examples\n ///"}, {"sha": "16d1fd2a576b97703ae8483cd01953997d5b6e0d", "filename": "library/std/src/sync/once_lock.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -7,7 +7,9 @@ use crate::sync::Once;\n \n /// A synchronization primitive which can be written to only once.\n ///\n-/// This type is a thread-safe `OnceCell`.\n+/// This type is a thread-safe [`OnceCell`], and can be used in statics.\n+///\n+/// [`OnceCell`]: crate::cell::OnceCell\n ///\n /// # Examples\n ///\n@@ -33,7 +35,7 @@ use crate::sync::Once;\n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n pub struct OnceLock<T> {\n     once: Once,\n-    // Whether or not the value is initialized is tracked by `state_and_queue`.\n+    // Whether or not the value is initialized is tracked by `once.is_completed()`.\n     value: UnsafeCell<MaybeUninit<T>>,\n     /// `PhantomData` to make sure dropck understands we're dropping T in our Drop impl.\n     ///"}, {"sha": "ffcc507d2a763f9a430d99af59c098caa5b79892", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -149,7 +149,11 @@ impl From<libc::timespec> for Timespec {\n     }\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+#[cfg(any(\n+    all(target_os = \"macos\", any(not(target_arch = \"aarch64\"), miri)),\n+    target_os = \"ios\",\n+    target_os = \"watchos\"\n+))]\n mod inner {\n     use crate::sync::atomic::{AtomicU64, Ordering};\n     use crate::sys::cvt;\n@@ -265,7 +269,11 @@ mod inner {\n     }\n }\n \n-#[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\")))]\n+#[cfg(not(any(\n+    all(target_os = \"macos\", any(not(target_arch = \"aarch64\"), miri)),\n+    target_os = \"ios\",\n+    target_os = \"watchos\"\n+)))]\n mod inner {\n     use crate::fmt;\n     use crate::mem::MaybeUninit;\n@@ -281,7 +289,11 @@ mod inner {\n \n     impl Instant {\n         pub fn now() -> Instant {\n-            Instant { t: Timespec::now(libc::CLOCK_MONOTONIC) }\n+            #[cfg(target_os = \"macos\")]\n+            const clock_id: libc::clockid_t = libc::CLOCK_UPTIME_RAW;\n+            #[cfg(not(target_os = \"macos\"))]\n+            const clock_id: libc::clockid_t = libc::CLOCK_MONOTONIC;\n+            Instant { t: Timespec::now(clock_id) }\n         }\n \n         pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n@@ -312,13 +324,8 @@ mod inner {\n         }\n     }\n \n-    #[cfg(not(any(target_os = \"dragonfly\", target_os = \"espidf\", target_os = \"horizon\")))]\n-    pub type clock_t = libc::c_int;\n-    #[cfg(any(target_os = \"dragonfly\", target_os = \"espidf\", target_os = \"horizon\"))]\n-    pub type clock_t = libc::c_ulong;\n-\n     impl Timespec {\n-        pub fn now(clock: clock_t) -> Timespec {\n+        pub fn now(clock: libc::clockid_t) -> Timespec {\n             // Try to use 64-bit time in preparation for Y2038.\n             #[cfg(all(target_os = \"linux\", target_env = \"gnu\", target_pointer_width = \"32\"))]\n             {"}, {"sha": "2e64ae59aff24422cf1862c2e18b863b8201efe1", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -88,6 +88,14 @@ fn instant_math_is_associative() {\n     // Changing the order of instant math shouldn't change the results,\n     // especially when the expression reduces to X + identity.\n     assert_eq!((now + offset) - now, (now - now) + offset);\n+\n+    // On any platform, `Instant` should have the same resolution as `Duration` (e.g. 1 nanosecond)\n+    // or better. Otherwise, math will be non-associative (see #91417).\n+    let now = Instant::now();\n+    let provided_offset = Duration::from_nanos(1);\n+    let later = now + provided_offset;\n+    let measured_offset = later - now;\n+    assert_eq!(measured_offset, provided_offset);\n }\n \n #[test]"}, {"sha": "0deed3f990d033ab3a4be39ae379bb68f28badfa", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1121,13 +1121,18 @@ impl Step for Sysroot {\n     fn run(self, builder: &Builder<'_>) -> Interned<PathBuf> {\n         let compiler = self.compiler;\n         let host_dir = builder.out.join(&compiler.host.triple);\n-        let sysroot = if compiler.stage == 0 {\n-            host_dir.join(\"stage0-sysroot\")\n-        } else if builder.download_rustc() {\n-            host_dir.join(\"ci-rustc-sysroot\")\n-        } else {\n-            host_dir.join(format!(\"stage{}\", compiler.stage))\n+\n+        let sysroot_dir = |stage| {\n+            if stage == 0 {\n+                host_dir.join(\"stage0-sysroot\")\n+            } else if builder.download_rustc() && compiler.stage != builder.top_stage {\n+                host_dir.join(\"ci-rustc-sysroot\")\n+            } else {\n+                host_dir.join(format!(\"stage{}\", stage))\n+            }\n         };\n+        let sysroot = sysroot_dir(compiler.stage);\n+\n         let _ = fs::remove_dir_all(&sysroot);\n         t!(fs::create_dir_all(&sysroot));\n \n@@ -1138,9 +1143,15 @@ impl Step for Sysroot {\n                 \"Cross-compiling is not yet supported with `download-rustc`\",\n             );\n \n-            // #102002, cleanup stage1 and stage0-sysroot folders when using download-rustc so people don't use old versions of the toolchain by accident.\n-            let _ = fs::remove_dir_all(host_dir.join(\"stage1\"));\n-            let _ = fs::remove_dir_all(host_dir.join(\"stage0-sysroot\"));\n+            // #102002, cleanup old toolchain folders when using download-rustc so people don't use them by accident.\n+            for stage in 0..=2 {\n+                if stage != compiler.stage {\n+                    let dir = sysroot_dir(stage);\n+                    if !dir.ends_with(\"ci-rustc-sysroot\") {\n+                        let _ = fs::remove_dir_all(dir);\n+                    }\n+                }\n+            }\n \n             // Copy the compiler into the correct sysroot.\n             let ci_rustc_dir ="}, {"sha": "babf09d2b93349605ed3c8b2965635e7932a352b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1511,19 +1511,25 @@ impl Config {\n \n     /// Return whether we will use a downloaded, pre-compiled version of rustc, or just build from source.\n     pub(crate) fn download_rustc(&self) -> bool {\n-        static DOWNLOAD_RUSTC: OnceCell<bool> = OnceCell::new();\n+        self.download_rustc_commit().is_some()\n+    }\n+\n+    pub(crate) fn download_rustc_commit(&self) -> Option<&'static str> {\n+        static DOWNLOAD_RUSTC: OnceCell<Option<String>> = OnceCell::new();\n         if self.dry_run() && DOWNLOAD_RUSTC.get().is_none() {\n             // avoid trying to actually download the commit\n-            return false;\n+            return None;\n         }\n \n-        *DOWNLOAD_RUSTC.get_or_init(|| match &self.download_rustc_commit {\n-            None => false,\n-            Some(commit) => {\n-                self.download_ci_rustc(commit);\n-                true\n-            }\n-        })\n+        DOWNLOAD_RUSTC\n+            .get_or_init(|| match &self.download_rustc_commit {\n+                None => None,\n+                Some(commit) => {\n+                    self.download_ci_rustc(commit);\n+                    Some(commit.clone())\n+                }\n+            })\n+            .as_deref()\n     }\n \n     pub(crate) fn initial_rustfmt(&self) -> Option<PathBuf> {"}, {"sha": "b22b7ad4ae04a7b28ed8e1cd347d78eff9754e50", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1401,6 +1401,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--src-base\").arg(builder.src.join(\"src/test\").join(suite));\n         cmd.arg(\"--build-base\").arg(testdir(builder, compiler.host).join(suite));\n+        cmd.arg(\"--sysroot-base\").arg(builder.sysroot(compiler));\n         cmd.arg(\"--stage-id\").arg(format!(\"stage{}-{}\", compiler.stage, target));\n         cmd.arg(\"--suite\").arg(suite);\n         cmd.arg(\"--mode\").arg(mode);\n@@ -1670,6 +1671,10 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--channel\").arg(&builder.config.channel);\n \n+        if let Some(commit) = builder.config.download_rustc_commit() {\n+            cmd.env(\"FAKE_DOWNLOAD_RUSTC_PREFIX\", format!(\"/rustc/{commit}\"));\n+        }\n+\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         builder.info(&format!("}, {"sha": "3f8dcd03d2db1e396fd994bd43521c76473f02bd", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1 +1 @@\n-0.13.1\n\\ No newline at end of file\n+0.13.2\n\\ No newline at end of file"}, {"sha": "1e7b4fe15b68cad5c59d74e96df437a4d4cf57d9", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -9,7 +9,6 @@ path = \"lib.rs\"\n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n askama = { version = \"0.11\", default-features = false, features = [\"config\"] }\n-atty = \"0.2\"\n itertools = \"0.10.1\"\n minifier = \"0.2.2\"\n once_cell = \"1.10.0\""}, {"sha": "e0cdb86d9d1dc152e47f97f85e5ea4456ed0f2ea", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -418,7 +418,7 @@ impl Options {\n             ) {\n                 Ok(p) => p,\n                 Err(e) => {\n-                    diag.struct_err(&e.to_string()).emit();\n+                    diag.struct_err(e).emit();\n                     return Err(1);\n                 }\n             };\n@@ -561,7 +561,7 @@ impl Options {\n             ) {\n                 Ok(p) => p,\n                 Err(e) => {\n-                    diag.struct_err(&e.to_string()).emit();\n+                    diag.struct_err(e).emit();\n                     return Err(1);\n                 }\n             };"}, {"sha": "c95f117a205886dc06c5c32937884b07d3fd9d2a", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -19,8 +19,8 @@ use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, get_filtered_impls_for_reference,\n     item_ty_to_section, notable_traits_button, notable_traits_json, render_all_impls,\n     render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n-    render_impl, render_rightside, render_stability_since_raw, AssocItemLink, Context,\n-    ImplRenderingParameters,\n+    render_impl, render_rightside, render_stability_since_raw,\n+    render_stability_since_raw_with_extra, AssocItemLink, Context, ImplRenderingParameters,\n };\n use crate::clean;\n use crate::config::ModuleSorting;\n@@ -1267,30 +1267,30 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n             document_non_exhaustive_header(it)\n         );\n         document_non_exhaustive(w, it);\n+        write!(w, \"<div class=\\\"variants\\\">\");\n         for variant in e.variants() {\n             let id = cx.derive_id(format!(\"{}.{}\", ItemType::Variant, variant.name.unwrap()));\n             write!(\n                 w,\n-                \"<h3 id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n-                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                    <code>{name}\",\n+                \"<section id=\\\"{id}\\\" class=\\\"variant\\\">\\\n+                    <a href=\\\"#{id}\\\" class=\\\"anchor\\\"></a>\",\n                 id = id,\n-                name = variant.name.unwrap()\n             );\n-            if let clean::VariantItem(clean::Variant::Tuple(ref s)) = *variant.kind {\n-                w.write_str(\"(\");\n-                print_tuple_struct_fields(w, cx, s);\n-                w.write_str(\")\");\n-            }\n-            w.write_str(\"</code>\");\n-            render_stability_since_raw(\n+            render_stability_since_raw_with_extra(\n                 w,\n                 variant.stable_since(tcx),\n                 variant.const_stability(tcx),\n                 it.stable_since(tcx),\n                 it.const_stable_since(tcx),\n+                \" rightside\",\n             );\n-            w.write_str(\"</h3>\");\n+            write!(w, \"<h3 class=\\\"code-header\\\">{name}\", name = variant.name.unwrap());\n+            if let clean::VariantItem(clean::Variant::Tuple(ref s)) = *variant.kind {\n+                w.write_str(\"(\");\n+                print_tuple_struct_fields(w, cx, s);\n+                w.write_str(\")\");\n+            }\n+            w.write_str(\"</h3></section>\");\n \n             use crate::clean::Variant;\n \n@@ -1324,7 +1324,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                             write!(\n                                 w,\n                                 \"<div class=\\\"sub-variant-field\\\">\\\n-                                 <span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n+                                 <span id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n                                      <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n                                      <code>{f}:&nbsp;{t}</code>\\\n                                  </span>\",\n@@ -1343,6 +1343,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n \n             document(w, cx, variant, Some(it), HeadingOffset::H4);\n         }\n+        write!(w, \"</div>\");\n     }\n     let def_id = it.item_id.expect_def_id();\n     render_assoc_items(w, cx, it, def_id, AssocItemRender::All);"}, {"sha": "e1234b37f4e2737125fe75fff43c0e67ad487860", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -384,8 +384,7 @@ img {\n \n .sidebar {\n \tfont-size: 0.875rem;\n-\twidth: 200px;\n-\tmin-width: 200px;\n+\tflex: 0 0 200px;\n \toverflow-y: scroll;\n \tposition: sticky;\n \theight: 100vh;\n@@ -394,12 +393,7 @@ img {\n }\n \n .rustdoc.source .sidebar {\n-\twidth: 50px;\n-\tmin-width: 0px;\n-\tmax-width: 300px;\n-\tflex-grow: 0;\n-\tflex-shrink: 0;\n-\tflex-basis: auto;\n+\tflex-basis: 50px;\n \tborder-right: 1px solid;\n \toverflow-x: hidden;\n \t/* The sidebar is by default hidden  */\n@@ -420,7 +414,7 @@ img {\n \n .source-sidebar-expanded .source .sidebar {\n \toverflow-y: auto;\n-\twidth: 300px;\n+\tflex-basis: 300px;\n }\n \n .source-sidebar-expanded .source .sidebar > *:not(#sidebar-toggle) {\n@@ -706,16 +700,14 @@ a {\n }\n \n .small-section-header {\n-\tdisplay: flex;\n-\tjustify-content: space-between;\n \tposition: relative;\n }\n \n .small-section-header:hover > .anchor {\n \tdisplay: initial;\n }\n \n-.impl:hover > .anchor, .trait-impl:hover > .anchor {\n+.impl:hover > .anchor, .trait-impl:hover > .anchor, .variant:hover > .anchor {\n \tdisplay: inline-block;\n \tposition: absolute;\n }\n@@ -1234,12 +1226,6 @@ a.test-arrow:hover {\n \tfont-size: 1.25rem;\n }\n \n-h3.variant {\n-\tfont-weight: 600;\n-\tfont-size: 1.125rem;\n-\tmargin-bottom: 10px;\n-}\n-\n .sub-variant h4 {\n \tfont-size: 1rem;\n \tfont-weight: 400;\n@@ -1392,6 +1378,12 @@ h3.variant {\n \tbackground-color: var(--button-background-color);\n \tborder: 1px solid var(--border-color);\n \tborder-radius: 2px;\n+\tcolor: var(--settings-button-color);\n+}\n+\n+#settings-menu > a:hover, #settings-menu > a:focus,\n+#help-button > a:hover, #help-button > a:focus {\n+\tborder-color: var(--settings-button-border-focus);\n }\n \n #copy-path {\n@@ -1701,6 +1693,7 @@ in storage.js\n \t\tz-index: 11;\n \t\t/* Reduce height slightly to account for mobile topbar. */\n \t\theight: calc(100vh - 45px);\n+\t\twidth: 200px;\n \t}\n \n \t/* The source view uses a different design for the sidebar toggle, and doesn't have a topbar,\n@@ -1908,6 +1901,7 @@ in storage.js\n \t}\n }\n \n+.variant,\n .implementors-toggle > summary,\n .impl,\n #implementors-list > .docblock,\n@@ -1919,6 +1913,7 @@ in storage.js\n \tmargin-bottom: 0.75em;\n }\n \n+.variants > .docblock,\n .impl-items > .rustdoc-toggle[open]:not(:last-child),\n .methods > .rustdoc-toggle[open]:not(:last-child),\n .implementors-toggle[open]:not(:last-child) {"}, {"sha": "9d2493c035dc75eb61db1640bf8fd46df2270db3", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -7,6 +7,8 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--main-background-color: #0f1419;\n \t--main-color: #c5c5c5;\n \t--settings-input-color: #ffb454;\n+\t--settings-button-color: #fff;\n+\t--settings-button-border-focus: #e0e0e0;\n \t--sidebar-background-color: #14191f;\n \t--sidebar-background-color-hover: rgba(70, 70, 70, 0.33);\n \t--code-block-background-color: #191f26;\n@@ -199,19 +201,10 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #5c6773;\n }\n \n-#settings-menu > a, #help-button > a {\n-\tcolor: #fff;\n-}\n-\n #settings-menu > a img {\n \tfilter: invert(100);\n }\n \n-#settings-menu > a:hover, #settings-menu > a:focus,\n-#help-button > a:hover, #help-button > a:focus {\n-\tborder-color: #e0e0e0;\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #c5c5c5;\n }"}, {"sha": "22a3ae7b273ccbb14e98d5e0a072338287edb551", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -2,6 +2,8 @@\n \t--main-background-color: #353535;\n \t--main-color: #ddd;\n \t--settings-input-color: #2196f3;\n+\t--settings-button-color: #000;\n+\t--settings-button-border-focus: #ffb900;\n \t--sidebar-background-color: #505050;\n \t--sidebar-background-color-hover: #676767;\n \t--code-block-background-color: #2A2A2A;\n@@ -104,15 +106,6 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n-#settings-menu > a, #help-button > a {\n-\tcolor: #000;\n-}\n-\n-#settings-menu > a:hover, #settings-menu > a:focus,\n-#help-button > a:hover, #help-button > a:focus {\n-\tborder-color: #ffb900;\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #fff;\n }"}, {"sha": "219dd5cd2ecf615aeb1f83c877abb1eb51356039", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -2,6 +2,8 @@\n \t--main-background-color: white;\n \t--main-color: black;\n \t--settings-input-color: #2196f3;\n+\t--settings-button-color: #000;\n+\t--settings-button-border-focus: #717171;\n \t--sidebar-background-color: #F5F5F5;\n \t--sidebar-background-color-hover: #E0E0E0;\n \t--code-block-background-color: #F5F5F5;\n@@ -97,15 +99,6 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n-#settings-menu > a, #help-button > a {\n-\tcolor: #000;\n-}\n-\n-#settings-menu > a:hover, #settings-menu > a:focus,\n-#help-button > a:hover, #help-button > a:focus {\n-\tborder-color: #717171;\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #000;\n }"}, {"sha": "75b3dce2eda86bd4a133e259a89ffa0fd1f49401", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -795,7 +795,7 @@ function loadCss(cssUrl) {\n             // This means when the window is resized, we need to redo the layout.\n             const base = window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE;\n             const force_visible = base.NOTABLE_FORCE_VISIBLE;\n-            hideNotable();\n+            hideNotable(false);\n             if (force_visible) {\n                 showNotable(base);\n                 base.NOTABLE_FORCE_VISIBLE = true;\n@@ -846,7 +846,7 @@ function loadCss(cssUrl) {\n             // Make this function idempotent.\n             return;\n         }\n-        hideNotable();\n+        hideNotable(false);\n         const ty = e.getAttribute(\"data-ty\");\n         const wrapper = document.createElement(\"div\");\n         wrapper.innerHTML = \"<div class=\\\"docblock\\\">\" + window.NOTABLE_TRAITS[ty] + \"</div>\";\n@@ -883,7 +883,7 @@ function loadCss(cssUrl) {\n                 return;\n             }\n             if (!e.NOTABLE_FORCE_VISIBLE && !elemIsInParent(event.relatedTarget, e)) {\n-                hideNotable();\n+                hideNotable(true);\n             }\n         };\n     }\n@@ -903,14 +903,16 @@ function loadCss(cssUrl) {\n             // To work around this, make sure the click finishes being dispatched before\n             // hiding the popover. Since `hideNotable()` is idempotent, this makes Safari behave\n             // consistently with the other two.\n-            setTimeout(hideNotable, 0);\n+            setTimeout(() => hideNotable(false), 0);\n         }\n     }\n \n-    function hideNotable() {\n+    function hideNotable(focus) {\n         if (window.CURRENT_NOTABLE_ELEMENT) {\n             if (window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE.NOTABLE_FORCE_VISIBLE) {\n-                window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE.focus();\n+                if (focus) {\n+                    window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE.focus();\n+                }\n                 window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE.NOTABLE_FORCE_VISIBLE = false;\n             }\n             const body = document.getElementsByTagName(\"body\")[0];\n@@ -923,7 +925,7 @@ function loadCss(cssUrl) {\n         e.onclick = function() {\n             this.NOTABLE_FORCE_VISIBLE = this.NOTABLE_FORCE_VISIBLE ? false : true;\n             if (window.CURRENT_NOTABLE_ELEMENT && !this.NOTABLE_FORCE_VISIBLE) {\n-                hideNotable();\n+                hideNotable(true);\n             } else {\n                 showNotable(this);\n                 window.CURRENT_NOTABLE_ELEMENT.setAttribute(\"tabindex\", \"0\");\n@@ -946,7 +948,7 @@ function loadCss(cssUrl) {\n             }\n             if (!this.NOTABLE_FORCE_VISIBLE &&\n                 !elemIsInParent(event.relatedTarget, window.CURRENT_NOTABLE_ELEMENT)) {\n-                hideNotable();\n+                hideNotable(true);\n             }\n         };\n     });\n@@ -1057,7 +1059,7 @@ function loadCss(cssUrl) {\n         onEachLazy(document.querySelectorAll(\".search-form .popover\"), elem => {\n             elem.style.display = \"none\";\n         });\n-        hideNotable();\n+        hideNotable(false);\n     };\n \n     /**"}, {"sha": "1f87f95563ad550d789ec580f3d4eff64fcb71ce", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn suffix_path(filename: &str, suffix: &str) -> PathBuf {\n }\n \n pub(crate) fn static_filename(filename: &str, contents: &[u8]) -> PathBuf {\n-    let filename = filename.rsplit(\"/\").next().unwrap();\n+    let filename = filename.rsplit('/').next().unwrap();\n     suffix_path(filename, &static_suffix(contents))\n }\n "}, {"sha": "1a84ec650474d28b916f4c62cfab234515490f81", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -8,6 +8,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n+#![feature(is_terminal)]\n #![feature(let_chains)]\n #![feature(test)]\n #![feature(never_type)]\n@@ -69,7 +70,7 @@ extern crate jemalloc_sys;\n \n use std::default::Default;\n use std::env::{self, VarError};\n-use std::io;\n+use std::io::{self, IsTerminal};\n use std::process;\n \n use rustc_driver::abort_on_err;\n@@ -179,7 +180,7 @@ fn init_logging() {\n     let color_logs = match std::env::var(\"RUSTDOC_LOG_COLOR\").as_deref() {\n         Ok(\"always\") => true,\n         Ok(\"never\") => false,\n-        Ok(\"auto\") | Err(VarError::NotPresent) => atty::is(atty::Stream::Stdout),\n+        Ok(\"auto\") | Err(VarError::NotPresent) => io::stdout().is_terminal(),\n         Ok(value) => early_error(\n             ErrorOutputType::default(),\n             &format!(\"invalid log color value '{}': expected one of always, never, or auto\", value),"}, {"sha": "04b5de83423709c09a5980b1ec645712715956bb", "filename": "src/test/assembly/is_aligned.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fassembly%2Fis_aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fassembly%2Fis_aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fis_aligned.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,58 @@\n+// assembly-output: emit-asm\n+// min-llvm-version: 14.0\n+// only-x86_64\n+// revisions: opt-speed opt-size\n+// [opt-speed] compile-flags: -Copt-level=1\n+// [opt-size] compile-flags: -Copt-level=s\n+#![crate_type=\"rlib\"]\n+\n+#![feature(core_intrinsics)]\n+#![feature(pointer_is_aligned)]\n+\n+// CHECK-LABEL: is_aligned_to_unchecked\n+// CHECK: decq\n+// CHECK-NEXT: testq\n+// CHECK-NEXT: sete\n+// CHECK: retq\n+#[no_mangle]\n+pub unsafe fn is_aligned_to_unchecked(ptr: *const u8, align: usize) -> bool {\n+    unsafe {\n+        std::intrinsics::assume(align.is_power_of_two())\n+    }\n+    ptr.is_aligned_to(align)\n+}\n+\n+// CHECK-LABEL: is_aligned_1\n+// CHECK: movb $1\n+// CHECK: retq\n+#[no_mangle]\n+pub fn is_aligned_1(ptr: *const u8) -> bool {\n+    ptr.is_aligned()\n+}\n+\n+// CHECK-LABEL: is_aligned_2\n+// CHECK: testb $1\n+// CHECK-NEXT: sete\n+// CHECK: retq\n+#[no_mangle]\n+pub fn is_aligned_2(ptr: *const u16) -> bool {\n+    ptr.is_aligned()\n+}\n+\n+// CHECK-LABEL: is_aligned_4\n+// CHECK: testb $3\n+// CHECK-NEXT: sete\n+// CHECK: retq\n+#[no_mangle]\n+pub fn is_aligned_4(ptr: *const u32) -> bool {\n+    ptr.is_aligned()\n+}\n+\n+// CHECK-LABEL: is_aligned_8\n+// CHECK: testb $7\n+// CHECK-NEXT: sete\n+// CHECK: retq\n+#[no_mangle]\n+pub fn is_aligned_8(ptr: *const u64) -> bool {\n+    ptr.is_aligned()\n+}"}, {"sha": "60d0cb09acaf94f85060896078c2a9f9cf796c7b", "filename": "src/test/codegen/unchecked_shifts.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fcodegen%2Funchecked_shifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fcodegen%2Funchecked_shifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funchecked_shifts.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,66 @@\n+// compile-flags: -O\n+// min-llvm-version: 15.0 (LLVM 13 in CI does this differently from submodule LLVM)\n+// ignore-debug (because unchecked is checked in debug)\n+\n+#![crate_type = \"lib\"]\n+#![feature(unchecked_math)]\n+\n+// CHECK-LABEL: @unchecked_shl_unsigned_same\n+#[no_mangle]\n+pub unsafe fn unchecked_shl_unsigned_same(a: u32, b: u32) -> u32 {\n+    // CHECK-NOT: and i32\n+    // CHECK: shl i32 %a, %b\n+    // CHECK-NOT: and i32\n+    a.unchecked_shl(b)\n+}\n+\n+// CHECK-LABEL: @unchecked_shl_unsigned_smaller\n+#[no_mangle]\n+pub unsafe fn unchecked_shl_unsigned_smaller(a: u16, b: u32) -> u16 {\n+    // This uses -DAG to avoid failing on irrelevant reorderings,\n+    // like emitting the truncation earlier.\n+\n+    // CHECK-DAG: %[[INRANGE:.+]] = icmp ult i32 %b, 65536\n+    // CHECK-DAG: tail call void @llvm.assume(i1 %[[INRANGE]])\n+    // CHECK-DAG: %[[TRUNC:.+]] = trunc i32 %b to i16\n+    // CHECK-DAG: shl i16 %a, %[[TRUNC]]\n+    a.unchecked_shl(b)\n+}\n+\n+// CHECK-LABEL: @unchecked_shl_unsigned_bigger\n+#[no_mangle]\n+pub unsafe fn unchecked_shl_unsigned_bigger(a: u64, b: u32) -> u64 {\n+    // CHECK: %[[EXT:.+]] = zext i32 %b to i64\n+    // CHECK: shl i64 %a, %[[EXT]]\n+    a.unchecked_shl(b)\n+}\n+\n+// CHECK-LABEL: @unchecked_shr_signed_same\n+#[no_mangle]\n+pub unsafe fn unchecked_shr_signed_same(a: i32, b: u32) -> i32 {\n+    // CHECK-NOT: and i32\n+    // CHECK: ashr i32 %a, %b\n+    // CHECK-NOT: and i32\n+    a.unchecked_shr(b)\n+}\n+\n+// CHECK-LABEL: @unchecked_shr_signed_smaller\n+#[no_mangle]\n+pub unsafe fn unchecked_shr_signed_smaller(a: i16, b: u32) -> i16 {\n+    // This uses -DAG to avoid failing on irrelevant reorderings,\n+    // like emitting the truncation earlier.\n+\n+    // CHECK-DAG: %[[INRANGE:.+]] = icmp ult i32 %b, 32768\n+    // CHECK-DAG: tail call void @llvm.assume(i1 %[[INRANGE]])\n+    // CHECK-DAG: %[[TRUNC:.+]] = trunc i32 %b to i16\n+    // CHECK-DAG: ashr i16 %a, %[[TRUNC]]\n+    a.unchecked_shr(b)\n+}\n+\n+// CHECK-LABEL: @unchecked_shr_signed_bigger\n+#[no_mangle]\n+pub unsafe fn unchecked_shr_signed_bigger(a: i64, b: u32) -> i64 {\n+    // CHECK: %[[EXT:.+]] = zext i32 %b to i64\n+    // CHECK: ashr i64 %a, %[[EXT]]\n+    a.unchecked_shr(b)\n+}"}, {"sha": "2227de3b377659530471d21b43a191869fc60566", "filename": "src/test/debuginfo/function-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -76,9 +76,9 @@\n // Const generic parameter\n // cdb-command:x a!function_names::const_generic_fn*\n // cdb-check:[...] a!function_names::const_generic_fn_bool<false> (void)\n-// cdb-check:[...] a!function_names::const_generic_fn_non_int<CONST$6348c650c7b26618> (void)\n // cdb-check:[...] a!function_names::const_generic_fn_unsigned_int<14> (void)\n // cdb-check:[...] a!function_names::const_generic_fn_signed_int<-7> (void)\n+// cdb-check:[...] a!function_names::const_generic_fn_non_int<CONST$6348c650c7b26618> (void)\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "230abb236bd64aa1fba2215737c68bd63bc3b0e4", "filename": "src/test/rustdoc-gui/enum-variants.goml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Frustdoc-gui%2Fenum-variants.goml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Frustdoc-gui%2Fenum-variants.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fenum-variants.goml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,5 @@\n+// Verifies that there is non-zero margin on variants and their docblocks.\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/enum.WhoLetTheDogOut.html\"\n+\n+assert-css: (\".variants > .variant\", {\"margin\": \"0px 0px 12px\"})\n+assert-css: (\".variants > .docblock\", {\"margin\": \"0px 0px 32px 24px\"})"}, {"sha": "aab3b11433e93d2d15ab96fade3614403da6c27c", "filename": "src/test/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -219,3 +219,33 @@ press-key: \"Tab\"\n press-key: \"Tab\"\n press-key: \"Tab\"\n assert-count: (\"//*[@class='notable popover']\", 0)\n+assert: \"#method\\.create_an_iterator_from_read .notable-traits:focus\"\n+\n+// Now we check that the focus isn't given back to the wrong item when opening\n+// another popover.\n+store-window-property: (scroll, \"scrollY\")\n+click: \"#method\\.create_an_iterator_from_read .fnname\"\n+// We ensure that the scroll position changed.\n+assert-window-property-false: {\"scrollY\": |scroll|}\n+// Store the new position.\n+store-window-property: (scroll, \"scrollY\")\n+click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+wait-for: \"//*[@class='notable popover']\"\n+click: \"#settings-menu a\"\n+click: \".search-input\"\n+// We ensure we didn't come back to the previous focused item.\n+assert-window-property-false: {\"scrollY\": |scroll|}\n+\n+// Same but with Escape handling.\n+store-window-property: (scroll, \"scrollY\")\n+click: \"#method\\.create_an_iterator_from_read .fnname\"\n+// We ensure that the scroll position changed.\n+assert-window-property-false: {\"scrollY\": |scroll|}\n+// Store the new position.\n+store-window-property: (scroll, \"scrollY\")\n+click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+wait-for: \"//*[@class='notable popover']\"\n+click: \"#settings-menu a\"\n+press-key: \"Escape\"\n+// We ensure we didn't come back to the previous focused item.\n+assert-window-property-false: {\"scrollY\": |scroll|}"}, {"sha": "abf8af77715c9eec5da0306c825e479abcf5db59", "filename": "src/test/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 87, "deletions": 162, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -29,170 +29,95 @@ assert-local-storage: {\"rustdoc-source-sidebar-show\": \"true\"}\n // Now we check the display of the sidebar items.\n show-text: true\n \n-// First we start with the light theme.\n-local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n-reload:\n-// Waiting for the sidebar to be displayed...\n-wait-for-css: (\"#sidebar-toggle\", {\"visibility\": \"visible\"})\n-assert-css: (\n-    \"#source-sidebar details[open] > .files a.selected\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(255, 255, 255)\"},\n-)\n-// Without hover or focus.\n-assert-css: (\"#sidebar-toggle > button\", {\"background-color\": \"rgba(0, 0, 0, 0)\"})\n-// With focus.\n-focus: \"#sidebar-toggle > button\"\n-assert-css: (\"#sidebar-toggle > button\", {\"background-color\": \"rgb(224, 224, 224)\"})\n-focus: \".search-input\"\n-// With hover.\n-move-cursor-to: \"#sidebar-toggle > button\"\n-assert-css: (\"#sidebar-toggle > button\", {\"background-color\": \"rgb(224, 224, 224)\"})\n-// Without hover.\n-assert-css: (\n-    \"#source-sidebar details[open] > .files a:not(.selected)\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// With focus.\n-focus: \"#source-sidebar details[open] > .files a:not(.selected)\"\n-wait-for-css: (\n-    \"#source-sidebar details[open] > .files a:not(.selected)\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(224, 224, 224)\"},\n-)\n-focus: \".search-input\"\n-// With hover.\n-move-cursor-to: \"#source-sidebar details[open] > .files a:not(.selected)\"\n-assert-css: (\n-    \"#source-sidebar details[open] > .files a:not(.selected)\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(224, 224, 224)\"},\n-)\n-// Without hover.\n-assert-css: (\n-    \"#source-sidebar details[open] > .folders > details > summary\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// With focus.\n-focus: \"#source-sidebar details[open] > .folders > details > summary\"\n-wait-for-css: (\n-    \"#source-sidebar details[open] > .folders > details > summary\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(224, 224, 224)\"},\n-)\n-focus: \".search-input\"\n-// With hover.\n-move-cursor-to: \"#source-sidebar details[open] > .folders > details > summary\"\n-assert-css: (\n-    \"#source-sidebar details[open] > .folders > details > summary\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(224, 224, 224)\"},\n+define-function: (\n+    \"check-colors\",\n+    (\n+        theme, color, color_hover, background, background_hover, background_toggle,\n+        background_toggle_hover,\n+    ),\n+    [\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        (\"wait-for-css\", (\"#sidebar-toggle\", {\"visibility\": \"visible\"})),\n+        (\"assert-css\", (\n+            \"#source-sidebar details[open] > .files a.selected\",\n+            {\"color\": |color_hover|, \"background-color\": |background|},\n+        )),\n+        // Without hover or focus.\n+        (\"assert-css\", (\"#sidebar-toggle > button\", {\"background-color\": |background_toggle|})),\n+        // With focus.\n+        (\"focus\", \"#sidebar-toggle > button\"),\n+        (\"assert-css\", (\"#sidebar-toggle > button\", {\"background-color\": |background_toggle_hover|})),\n+        (\"focus\", \".search-input\"),\n+        // With hover.\n+        (\"move-cursor-to\", \"#sidebar-toggle > button\"),\n+        (\"assert-css\", (\"#sidebar-toggle > button\", {\"background-color\": |background_toggle_hover|})),\n+        // Without hover.\n+        (\"assert-css\", (\n+            \"#source-sidebar details[open] > .files a:not(.selected)\",\n+            {\"color\": |color|, \"background-color\": |background_toggle|},\n+        )),\n+        // With focus.\n+        (\"focus\", \"#source-sidebar details[open] > .files a:not(.selected)\"),\n+        (\"wait-for-css\", (\n+            \"#source-sidebar details[open] > .files a:not(.selected)\",\n+            {\"color\": |color_hover|, \"background-color\": |background_hover|},\n+        )),\n+        (\"focus\", \".search-input\"),\n+        // With hover.\n+        (\"move-cursor-to\", \"#source-sidebar details[open] > .files a:not(.selected)\"),\n+        (\"assert-css\", (\n+            \"#source-sidebar details[open] > .files a:not(.selected)\",\n+            {\"color\": |color_hover|, \"background-color\": |background_hover|},\n+        )),\n+        // Without hover.\n+        (\"assert-css\", (\n+            \"#source-sidebar details[open] > .folders > details > summary\",\n+            {\"color\": |color|, \"background-color\": |background_toggle|},\n+        )),\n+        // With focus.\n+        (\"focus\", \"#source-sidebar details[open] > .folders > details > summary\"),\n+        (\"wait-for-css\", (\n+            \"#source-sidebar details[open] > .folders > details > summary\",\n+            {\"color\": |color_hover|, \"background-color\": |background_hover|},\n+        )),\n+        (\"focus\", \".search-input\"),\n+        // With hover.\n+        (\"move-cursor-to\", \"#source-sidebar details[open] > .folders > details > summary\"),\n+        (\"assert-css\", (\n+            \"#source-sidebar details[open] > .folders > details > summary\",\n+            {\"color\": |color_hover|, \"background-color\": |background_hover|},\n+        )),\n+    ],\n )\n \n-// Now with the dark theme.\n-local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n-reload:\n-// Waiting for the sidebar to be displayed...\n-wait-for-css: (\"#sidebar-toggle\", {\"visibility\": \"visible\"})\n-assert-css: (\n-    \"#source-sidebar details[open] > .files > a.selected\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(51, 51, 51)\"},\n-)\n-// Without hover or focus.\n-assert-css: (\"#sidebar-toggle > button\", {\"background-color\": \"rgba(0, 0, 0, 0)\"})\n-// With focus.\n-focus: \"#sidebar-toggle > button\"\n-assert-css: (\"#sidebar-toggle > button\", {\"background-color\": \"rgb(103, 103, 103)\"})\n-focus: \".search-input\"\n-// With hover.\n-move-cursor-to: \"#sidebar-toggle > button\"\n-assert-css: (\"#sidebar-toggle > button\", {\"background-color\": \"rgb(103, 103, 103)\"})\n-// Without hover.\n-assert-css: (\n-    \"#source-sidebar details[open] > .files > a:not(.selected)\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// With focus.\n-focus: \"#source-sidebar details[open] > .files a:not(.selected)\"\n-wait-for-css: (\n-    \"#source-sidebar details[open] > .files a:not(.selected)\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(68, 68, 68)\"},\n-)\n-focus: \".search-input\"\n-// With hover.\n-move-cursor-to: \"#source-sidebar details[open] > .files a:not(.selected)\"\n-assert-css: (\n-    \"#source-sidebar details[open] > .files a:not(.selected)\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(68, 68, 68)\"},\n-)\n-// Without hover.\n-assert-css: (\n-    \"#source-sidebar details[open] > .folders > details > summary\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// With focus.\n-focus: \"#source-sidebar details[open] > .folders > details > summary\"\n-wait-for-css: (\n-    \"#source-sidebar details[open] > .folders > details > summary\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(68, 68, 68)\"},\n-)\n-focus: \".search-input\"\n-// With hover.\n-move-cursor-to: \"#source-sidebar details[open] > .folders > details > summary\"\n-assert-css: (\n-    \"#source-sidebar details[open] > .folders > details > summary\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(68, 68, 68)\"},\n-)\n-\n-// And finally with the ayu theme.\n-local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n-reload:\n-// Waiting for the sidebar to be displayed...\n-wait-for-css: (\"#sidebar-toggle\", {\"visibility\": \"visible\"})\n-assert-css: (\n-    \"#source-sidebar details[open] > .files a.selected\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgb(20, 25, 31)\"},\n-)\n-// Without hover or focus.\n-assert-css: (\"#sidebar-toggle > button\", {\"background-color\": \"rgba(0, 0, 0, 0)\"})\n-// With focus.\n-focus: \"#sidebar-toggle > button\"\n-assert-css: (\"#sidebar-toggle > button\", {\"background-color\": \"rgba(70, 70, 70, 0.33)\"})\n-focus: \".search-input\"\n-// With hover.\n-move-cursor-to: \"#sidebar-toggle > button\"\n-assert-css: (\"#sidebar-toggle > button\", {\"background-color\": \"rgba(70, 70, 70, 0.33)\"})\n-// Without hover.\n-assert-css: (\n-    \"#source-sidebar details[open] > .files a:not(.selected)\",\n-    {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// With focus.\n-focus: \"#source-sidebar details[open] > .files a:not(.selected)\"\n-wait-for-css: (\n-    \"#source-sidebar details[open] > .files a:not(.selected)\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgb(20, 25, 31)\"},\n-)\n-focus: \".search-input\"\n-// With hover.\n-move-cursor-to: \"#source-sidebar details[open] > .files a:not(.selected)\"\n-assert-css: (\n-    \"#source-sidebar details[open] > .files a:not(.selected)\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgb(20, 25, 31)\"},\n-)\n-// Without hover.\n-assert-css: (\n-    \"#source-sidebar details[open] > .folders > details > summary\",\n-    {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-// With focus.\n-focus: \"#source-sidebar details[open] > .folders > details > summary\"\n-wait-for-css: (\n-    \"#source-sidebar details[open] > .folders > details > summary\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgb(20, 25, 31)\"},\n-)\n-focus: \".search-input\"\n-// With hover.\n-move-cursor-to: \"#source-sidebar details[open] > .folders > details > summary\"\n-assert-css: (\n-    \"#source-sidebar details[open] > .folders > details > summary\",\n-    {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgb(20, 25, 31)\"},\n-)\n+call-function: (\"check-colors\", {\n+    \"theme\": \"light\",\n+    \"color\": \"rgb(0, 0, 0)\",\n+    \"color_hover\": \"rgb(0, 0, 0)\",\n+    \"background\": \"rgb(255, 255, 255)\",\n+    \"background_hover\": \"rgb(224, 224, 224)\",\n+    \"background_toggle\": \"rgba(0, 0, 0, 0)\",\n+    \"background_toggle_hover\": \"rgb(224, 224, 224)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"dark\",\n+    \"color\": \"rgb(221, 221, 221)\",\n+    \"color_hover\": \"rgb(221, 221, 221)\",\n+    \"background\": \"rgb(51, 51, 51)\",\n+    \"background_hover\": \"rgb(68, 68, 68)\",\n+    \"background_toggle\": \"rgba(0, 0, 0, 0)\",\n+    \"background_toggle_hover\": \"rgb(103, 103, 103)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"ayu\",\n+    \"color\": \"rgb(197, 197, 197)\",\n+    \"color_hover\": \"rgb(255, 180, 76)\",\n+    \"background\": \"rgb(20, 25, 31)\",\n+    \"background_hover\": \"rgb(20, 25, 31)\",\n+    \"background_toggle\": \"rgba(0, 0, 0, 0)\",\n+    \"background_toggle_hover\": \"rgba(70, 70, 70, 0.33)\",\n+})\n \n // Now checking on mobile devices.\n size: (500, 700)"}, {"sha": "db0d102b741846292198e1d04994b908ac2827cc", "filename": "src/test/rustdoc/issue-88600.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Frustdoc%2Fissue-88600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Frustdoc%2Fissue-88600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-88600.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -8,22 +8,22 @@ pub struct S;\n \n // @has issue_88600/enum.FooEnum.html\n pub enum FooEnum {\n-    // @has - '//*[@id=\"variant.HiddenTupleItem\"]//code' 'HiddenTupleItem(_)'\n+    // @has - '//*[@id=\"variant.HiddenTupleItem\"]//h3' 'HiddenTupleItem(_)'\n     // @count - '//*[@id=\"variant.HiddenTupleItem.field.0\"]' 0\n     HiddenTupleItem(#[doc(hidden)] H),\n-    // @has - '//*[@id=\"variant.MultipleHidden\"]//code' 'MultipleHidden(_, _)'\n+    // @has - '//*[@id=\"variant.MultipleHidden\"]//h3' 'MultipleHidden(_, _)'\n     // @count - '//*[@id=\"variant.MultipleHidden.field.0\"]' 0\n     // @count - '//*[@id=\"variant.MultipleHidden.field.1\"]' 0\n     MultipleHidden(#[doc(hidden)] H, #[doc(hidden)] H),\n-    // @has - '//*[@id=\"variant.MixedHiddenFirst\"]//code' 'MixedHiddenFirst(_, S)'\n+    // @has - '//*[@id=\"variant.MixedHiddenFirst\"]//h3' 'MixedHiddenFirst(_, S)'\n     // @count - '//*[@id=\"variant.MixedHiddenFirst.field.0\"]' 0\n     // @has - '//*[@id=\"variant.MixedHiddenFirst.field.1\"]' '1: S'\n     MixedHiddenFirst(#[doc(hidden)] H, /** dox */ S),\n-    // @has - '//*[@id=\"variant.MixedHiddenLast\"]//code' 'MixedHiddenLast(S, _)'\n+    // @has - '//*[@id=\"variant.MixedHiddenLast\"]//h3' 'MixedHiddenLast(S, _)'\n     // @has - '//*[@id=\"variant.MixedHiddenLast.field.0\"]' '0: S'\n     // @count - '//*[@id=\"variant.MixedHiddenLast.field.1\"]' 0\n     MixedHiddenLast(/** dox */ S, #[doc(hidden)] H),\n-    // @has - '//*[@id=\"variant.HiddenStruct\"]//code' 'HiddenStruct'\n+    // @has - '//*[@id=\"variant.HiddenStruct\"]//h3' 'HiddenStruct'\n     // @count - '//*[@id=\"variant.HiddenStruct.field.h\"]' 0\n     // @has - '//*[@id=\"variant.HiddenStruct.field.s\"]' 's: S'\n     HiddenStruct {"}, {"sha": "d6dc179da7f9897b0112a5d23abb3f524bad9dc0", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -25,6 +25,7 @@ extern crate rustc_data_structures;\n extern crate rustc_parse;\n extern crate rustc_session;\n extern crate rustc_span;\n+extern crate thin_vec;\n \n use rustc_ast::mut_visit::{self, visit_clobber, MutVisitor};\n use rustc_ast::ptr::P;\n@@ -35,6 +36,7 @@ use rustc_session::parse::ParseSess;\n use rustc_span::source_map::FilePathMapping;\n use rustc_span::source_map::{FileName, Spanned, DUMMY_SP};\n use rustc_span::symbol::Ident;\n+use thin_vec::thin_vec;\n \n fn parse_expr(ps: &ParseSess, src: &str) -> Option<P<Expr>> {\n     let src_as_string = src.to_string();\n@@ -51,7 +53,7 @@ fn expr(kind: ExprKind) -> P<Expr> {\n \n fn make_x() -> P<Expr> {\n     let seg = PathSegment::from_ident(Ident::from_str(\"x\"));\n-    let path = Path { segments: vec![seg], span: DUMMY_SP, tokens: None };\n+    let path = Path { segments: thin_vec![seg], span: DUMMY_SP, tokens: None };\n     expr(ExprKind::Path(None, path))\n }\n \n@@ -73,11 +75,15 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n             2 => {\n                 let seg = PathSegment::from_ident(Ident::from_str(\"x\"));\n                 iter_exprs(depth - 1, &mut |e| {\n-                    g(ExprKind::MethodCall(seg.clone(), e, vec![make_x()], DUMMY_SP))\n-                });\n+                    g(ExprKind::MethodCall(Box::new(MethodCall {\n+                        seg: seg.clone(), receiver: e, args: vec![make_x()], span: DUMMY_SP\n+                    }))\n+                )});\n                 iter_exprs(depth - 1, &mut |e| {\n-                    g(ExprKind::MethodCall(seg.clone(), make_x(), vec![e], DUMMY_SP))\n-                });\n+                    g(ExprKind::MethodCall(Box::new(MethodCall {\n+                        seg: seg.clone(), receiver: make_x(), args: vec![e], span: DUMMY_SP\n+                    }))\n+                )});\n             }\n             3..=8 => {\n                 let op = Spanned {\n@@ -112,15 +118,15 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n             11 => {\n                 let decl = P(FnDecl { inputs: vec![], output: FnRetTy::Default(DUMMY_SP) });\n                 iter_exprs(depth - 1, &mut |e| {\n-                    g(ExprKind::Closure(\n-                        ClosureBinder::NotPresent,\n-                        CaptureBy::Value,\n-                        Async::No,\n-                        Movability::Movable,\n-                        decl.clone(),\n-                        e,\n-                        DUMMY_SP,\n-                    ))\n+                    g(ExprKind::Closure(Box::new(Closure {\n+                        binder: ClosureBinder::NotPresent,\n+                        capture_clause: CaptureBy::Value,\n+                        asyncness: Async::No,\n+                        movability: Movability::Movable,\n+                        fn_decl: decl.clone(),\n+                        body: e,\n+                        fn_decl_span: DUMMY_SP,\n+                    })))\n                 });\n             }\n             12 => {"}, {"sha": "073280d0fab1f0f099be6963d4085a33ce4f3630", "filename": "src/test/ui/array-slice-vec/slice_is_sorted_by_borrow.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice_is_sorted_by_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice_is_sorted_by_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice_is_sorted_by_borrow.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+// regression test for https://github.com/rust-lang/rust/issues/53485#issuecomment-885393452\n+\n+#![feature(is_sorted)]\n+\n+struct A {\n+    name: String,\n+}\n+\n+fn main() {\n+    let a = &[\n+        A {\n+            name: \"1\".to_string(),\n+        },\n+        A {\n+            name: \"2\".to_string(),\n+        },\n+    ];\n+    assert!(a.is_sorted_by_key(|a| a.name.as_str()));\n+}"}, {"sha": "1c8316f87fa073ef9bdf16e5503df9942beaaf0d", "filename": "src/test/ui/coherence/issue-100191-2.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aada2d16892ed411d9f6d22b3b9dcfcf47977647/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aada2d16892ed411d9f6d22b3b9dcfcf47977647/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.rs?ref=aada2d16892ed411d9f6d22b3b9dcfcf47977647", "patch": "@@ -1,12 +0,0 @@\n-//~ ERROR overflow evaluating the requirement `T: Trait<_>`\n-\n-#![feature(specialization, with_negative_coherence)]\n-#![allow(incomplete_features)]\n-\n-pub trait Trait<T> {}\n-\n-default impl<T, U> Trait<T> for U {}\n-\n-impl<T> Trait<<T as Iterator>::Item> for T {}\n-\n-fn main() {}"}, {"sha": "e8597fde54d3ba133ec922311d78233642e949cc", "filename": "src/test/ui/coherence/issue-100191.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aada2d16892ed411d9f6d22b3b9dcfcf47977647/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aada2d16892ed411d9f6d22b3b9dcfcf47977647/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191.rs?ref=aada2d16892ed411d9f6d22b3b9dcfcf47977647", "patch": "@@ -1,21 +0,0 @@\n-#![crate_type = \"lib\"]\n-#![feature(specialization, with_negative_coherence)]\n-#![allow(incomplete_features)]\n-\n-trait X {}\n-trait Y: X {}\n-trait Z {\n-    type Assoc: Y;\n-}\n-struct A<T>(T);\n-\n-impl<T> Y for T where T: X {}\n-impl<T: X> Z for A<T> {\n-    type Assoc = T;\n-}\n-\n-// this impl is invalid, but causes an ICE anyway\n-impl<T> From<<A<T> as Z>::Assoc> for T {}\n-//~^ ERROR type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-\n-fn main() {}"}, {"sha": "983d7bf6e7e9cdc7e3d7053534651ca41b95180b", "filename": "src/test/ui/dyn-star/align.normal.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Falign.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Falign.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Falign.normal.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/align.rs:4:12\n+   |\n+LL | #![feature(dyn_star)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "6b6fc55d8053eb71861505f62c24082816a29b02", "filename": "src/test/ui/dyn-star/align.over_aligned.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Falign.over_aligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Falign.over_aligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Falign.over_aligned.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/align.rs:4:12\n+   |\n+LL | #![feature(dyn_star)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: `AlignedUsize` needs to be a pointer-sized type\n+  --> $DIR/align.rs:15:13\n+   |\n+LL |     let x = AlignedUsize(12) as dyn* Debug;\n+   |             ^^^^^^^^^^^^^^^^ `AlignedUsize` needs to be a pointer-sized type\n+   |\n+   = help: the trait `PointerSized` is not implemented for `AlignedUsize`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fb41a05a0660ba19e45dc5f652b43fdf0f856111", "filename": "src/test/ui/dyn-star/align.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Falign.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,17 @@\n+// revisions: normal over_aligned\n+//[normal] check-pass\n+\n+#![feature(dyn_star)]\n+//~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+use std::fmt::Debug;\n+\n+#[cfg_attr(over_aligned,      repr(C, align(1024)))]\n+#[cfg_attr(not(over_aligned), repr(C))]\n+#[derive(Debug)]\n+struct AlignedUsize(usize);\n+\n+fn main() {\n+    let x = AlignedUsize(12) as dyn* Debug;\n+    //[over_aligned]~^ ERROR `AlignedUsize` needs to be a pointer-sized type\n+}"}, {"sha": "e19e36cc7d7b5a7ed70400259361b3d009e3f5a8", "filename": "src/test/ui/dyn-star/check-size-at-cast-polymorphic-bad.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,15 @@\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+fn dyn_debug(_: (dyn* Debug + '_)) {\n+\n+}\n+\n+fn polymorphic<T: Debug + ?Sized>(t: &T) {\n+    dyn_debug(t);\n+    //~^ ERROR `&T` needs to be a pointer-sized type\n+}\n+\n+fn main() {}"}, {"sha": "53ccbe43dcc9eea389cb3712f2e88028d378a8b6", "filename": "src/test/ui/dyn-star/check-size-at-cast-polymorphic-bad.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: `&T` needs to be a pointer-sized type\n+  --> $DIR/check-size-at-cast-polymorphic-bad.rs:11:15\n+   |\n+LL |     dyn_debug(t);\n+   |               ^ `&T` needs to be a pointer-sized type\n+   |\n+   = help: the trait `PointerSized` is not implemented for `&T`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn polymorphic<T: Debug + ?Sized>(t: &T) where &T: PointerSized {\n+   |                                          ++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "5c0a3d256f60742da6c3a2d0b19a428c5f3251b6", "filename": "src/test/ui/dyn-star/check-size-at-cast-polymorphic.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+fn dyn_debug(_: (dyn* Debug + '_)) {\n+\n+}\n+\n+fn polymorphic<T: Debug>(t: &T) {\n+    dyn_debug(t);\n+}\n+\n+fn main() {}"}, {"sha": "1f22f798361541600bc877d8ee90fe2fe0565d2c", "filename": "src/test/ui/dyn-star/check-size-at-cast.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,10 @@\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {\n+    let i = [1, 2, 3, 4] as dyn* Debug;\n+    //~^ ERROR `[i32; 4]` needs to be a pointer-sized type\n+    dbg!(i);\n+}"}, {"sha": "af2a1ccf71c6d6e7851c389a030aa4a0d43e2c0f", "filename": "src/test/ui/dyn-star/check-size-at-cast.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: `[i32; 4]` needs to be a pointer-sized type\n+  --> $DIR/check-size-at-cast.rs:7:13\n+   |\n+LL |     let i = [1, 2, 3, 4] as dyn* Debug;\n+   |             ^^^^^^^^^^^^ `[i32; 4]` needs to be a pointer-sized type\n+   |\n+   = help: the trait `PointerSized` is not implemented for `[i32; 4]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b4ff8a222866a5ef787467690cbdf91ff85ed567", "filename": "src/test/ui/dyn-star/dont-unsize-coerce-dyn-star.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdont-unsize-coerce-dyn-star.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+trait AddOne {\n+    fn add1(&mut self) -> usize;\n+}\n+\n+impl AddOne for usize {\n+    fn add1(&mut self) -> usize {\n+        *self += 1;\n+        *self\n+    }\n+}\n+\n+fn add_one(i: &mut (dyn* AddOne + '_)) -> usize {\n+    i.add1()\n+}\n+\n+fn main() {\n+    let mut x = 42usize as dyn* AddOne;\n+\n+    println!(\"{}\", add_one(&mut x));\n+    println!(\"{}\", add_one(&mut x));\n+}"}, {"sha": "1e8cafe1561e8a72e9d0803ba8260eef4a120070", "filename": "src/test/ui/dyn-star/unsize-into-ref-dyn-star.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,9 @@\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {\n+    let i = 42 as &dyn* Debug;\n+    //~^ ERROR non-primitive cast: `i32` as `&dyn* Debug`\n+}"}, {"sha": "f6444a60a4654212148447ddededdfa1e00c3cc6", "filename": "src/test/ui/dyn-star/unsize-into-ref-dyn-star.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Funsize-into-ref-dyn-star.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,9 @@\n+error[E0605]: non-primitive cast: `i32` as `&dyn* Debug`\n+  --> $DIR/unsize-into-ref-dyn-star.rs:7:13\n+   |\n+LL |     let i = 42 as &dyn* Debug;\n+   |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0605`."}, {"sha": "95d7f85f10546240f81ae998a841f818953bfea9", "filename": "src/test/ui/error-codes/E0275.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n trait Foo {}\n \n struct Bar<T>(T);"}, {"sha": "49a4d984af9eb6143418ea31f0bf55e6f02fc9e7", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,15 +1,16 @@\n-error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/E0275.rs:5:33\n+error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<...>>>>>>>: Foo`\n+  --> $DIR/E0275.rs:6:33\n    |\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`E0275`)\n-note: required for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Foo`\n-  --> $DIR/E0275.rs:5:9\n+note: required for `Bar<Bar<Bar<Bar<Bar<Bar<...>>>>>>` to implement `Foo`\n+  --> $DIR/E0275.rs:6:9\n    |\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/error-codes/E0275/E0275.long-type-hash.txt'\n    = note: 127 redundant requirements hidden\n    = note: required for `Bar<T>` to implement `Foo`\n "}, {"sha": "020bcbb8396c959d468aadc238e6250ff3e078ac", "filename": "src/test/ui/impl-trait/normalize-tait-in-const.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,39 @@\n+// known-bug: #103507\n+// failure-status: 101\n+// normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n+// rustc-env:RUST_BACKTRACE=0\n+\n+#![feature(type_alias_impl_trait)]\n+#![feature(const_trait_impl)]\n+#![feature(const_refs_to_cell)]\n+#![feature(inline_const)]\n+\n+use std::marker::Destruct;\n+\n+trait T {\n+    type Item;\n+}\n+\n+type Alias<'a> = impl T<Item = &'a ()>;\n+\n+struct S;\n+impl<'a> T for &'a S {\n+    type Item = &'a ();\n+}\n+\n+const fn filter_positive<'a>() -> &'a Alias<'a> {\n+    &&S\n+}\n+\n+const fn with_positive<F: ~const for<'a> Fn(&'a Alias<'a>) + ~const Destruct>(fun: F) {\n+    fun(filter_positive());\n+}\n+\n+const fn foo(_: &Alias<'_>) {}\n+\n+const BAR: () = {\n+    with_positive(foo);\n+};\n+\n+fn main() {}"}, {"sha": "b9fc8726ffc0b342227921676dc17088d13cf956", "filename": "src/test/ui/impl-trait/normalize-tait-in-const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,8 @@\n+error: internal compiler error: compiler/rustc_middle/src/ty/normalize_erasing_regions.rs:198:90: Failed to normalize <for<'a, 'b> fn(&'a Alias<'b>) {foo} as std::ops::FnOnce<(&&S,)>>::Output, maybe try to call `try_normalize_erasing_regions` instead\n+\n+query stack during panic:\n+#0 [eval_to_allocation_raw] const-evaluating + checking `BAR`\n+#1 [eval_to_const_value_raw] simplifying constant for the type system `BAR`\n+end of query stack\n+error: aborting due to previous error\n+"}, {"sha": "951e0f5870d7d084ba3c802c2570f4be32340587", "filename": "src/test/ui/infinite/infinite-instantiation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `function::<Option<Option<Option<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `function::<Option<Option<Option<Option<Option<...>>>>>>`\n   --> $DIR/infinite-instantiation.rs:22:9\n    |\n LL |         function(counter - 1, t.to_option());"}, {"sha": "4de22f0c9177d4f90ff06e7dd667c043ac29aeca", "filename": "src/test/ui/issues/issue-20413.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n trait Foo {\n     fn answer(self);\n }"}, {"sha": "91509ceace8cb3406806a91d1c75c54b504b47af", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,64 +1,69 @@\n error[E0392]: parameter `T` is never used\n-  --> $DIR/issue-20413.rs:5:15\n+  --> $DIR/issue-20413.rs:6:15\n    |\n LL | struct NoData<T>;\n    |               ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n-error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/issue-20413.rs:8:36\n+error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<...>>>>>>>: Foo`\n+  --> $DIR/issue-20413.rs:9:36\n    |\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Foo`\n-  --> $DIR/issue-20413.rs:8:9\n+note: required for `NoData<NoData<NoData<NoData<NoData<NoData<...>>>>>>` to implement `Foo`\n+  --> $DIR/issue-20413.rs:9:9\n    |\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 127 redundant requirements hidden\n    = note: required for `NoData<T>` to implement `Foo`\n \n-error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n-  --> $DIR/issue-20413.rs:27:42\n+error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>: Baz`\n+  --> $DIR/issue-20413.rs:28:42\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Bar`\n-  --> $DIR/issue-20413.rs:27:9\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>` to implement `Bar`\n+  --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Baz`\n-  --> $DIR/issue-20413.rs:34:9\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>` to implement `Baz`\n+  --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 126 redundant requirements hidden\n    = note: required for `EvenLessData<T>` to implement `Baz`\n \n-error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n-  --> $DIR/issue-20413.rs:34:42\n+error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>: Bar`\n+  --> $DIR/issue-20413.rs:35:42\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Baz`\n-  --> $DIR/issue-20413.rs:34:9\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>` to implement `Baz`\n+  --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Bar`\n-  --> $DIR/issue-20413.rs:27:9\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>` to implement `Bar`\n+  --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 126 redundant requirements hidden\n    = note: required for `AlmostNoData<T>` to implement `Bar`\n "}, {"sha": "1caa4221f25015fc6d292f88e9c6b4ae76037719", "filename": "src/test/ui/issues/issue-22638.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -9,7 +9,6 @@ note: `A::matches` defined here\n    |\n LL |     pub fn matches<F: Fn()>(&self, f: &F) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-22638/issue-22638.long-type.txt'\n \n error: aborting due to previous error\n "}, {"sha": "5b8299fe839d7bcdb100808ed8c4e7a5049d5458", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(.....), ...), ...) as Foo>::recurse`\n+error: reached the recursion limit while instantiating `<(&(&(..., ...), ...), ...) as Foo>::recurse`\n   --> $DIR/issue-37311.rs:17:9\n    |\n LL |         (self, self).recurse();"}, {"sha": "547643f0d6e203f9644dd410d44deb97d3e7ffac", "filename": "src/test/ui/issues/issue-52262.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-52262.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-52262.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52262.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags:-Ztreat-err-as-bug=5\n #[derive(Debug)]\n enum MyError {\n     NotFound { key: Vec<u8> },"}, {"sha": "ef41f078b8037d25e1ab892ac182fad9a3656163", "filename": "src/test/ui/issues/issue-52262.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-52262.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-52262.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52262.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `*key` which is behind a shared reference\n-  --> $DIR/issue-52262.rs:16:35\n+  --> $DIR/issue-52262.rs:15:35\n    |\n LL |                 String::from_utf8(*key).unwrap()\n    |                                   ^^^^ move occurs because `*key` has type `Vec<u8>`, which does not implement the `Copy` trait"}, {"sha": "4746f918bf8dd53b761d70b0bfcad528f2bddf55", "filename": "src/test/ui/issues/issue-67552.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n+error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut ...>`\n   --> $DIR/issue-67552.rs:29:9\n    |\n LL |         rec(identity(&mut it))"}, {"sha": "22332b357231b3b88d51e21b8c405854c721b8de", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -9,7 +9,7 @@ LL |     generic::<Option<T>>();\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error: reached the recursion limit while instantiating `generic::<Option<Option<Option<O...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `generic::<Option<Option<Option<Option<Option<...>>>>>>`\n   --> $DIR/issue-8727.rs:8:5\n    |\n LL |     generic::<Option<T>>();"}, {"sha": "cadfb3b66f29747cc0e37ffc30561e69b605eb29", "filename": "src/test/ui/mir/important-higher-ranked-regions.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fmir%2Fimportant-higher-ranked-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fmir%2Fimportant-higher-ranked-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fimportant-higher-ranked-regions.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// compile-flags: -Zvalidate-mir\n+\n+// This test checks that bivariant parameters are handled correctly\n+// in the mir.\n+#![allow(coherence_leak_check)]\n+trait Trait {\n+    type Assoc;\n+}\n+\n+struct Foo<T, U>(T)\n+where\n+    T: Trait<Assoc = U>;\n+\n+impl Trait for for<'a> fn(&'a ()) {\n+    type Assoc = u32;\n+}\n+impl Trait for fn(&'static ()) {\n+    type Assoc = String;\n+}\n+\n+fn foo(x: Foo<for<'a> fn(&'a ()), u32>) -> Foo<fn(&'static ()), String> {\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "6a9fb991097fb4cd049a442fc266b290bf50dad5", "filename": "src/test/ui/parser/issue-103381.fixed", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fparser%2Fissue-103381.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fparser%2Fissue-103381.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103381.fixed?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,59 @@\n+// run-rustfix\n+\n+#![feature(let_chains)]\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![allow(irrefutable_let_patterns)]\n+\n+fn err_some(b: bool, x: Option<u32>) {\n+    if b && let Some(x) = x {}\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_none(b: bool, x: Option<u32>) {\n+    if b && let None = x {}\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_bool_1() {\n+    if true && true { true } else { false };\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_bool_2() {\n+    if true && false { true } else { false };\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn should_ok_1() {\n+    if true && if let x = 1 { true } else { true } {}\n+}\n+\n+fn should_ok_2() {\n+    if true && if let 1 = 1 { true } else { true } {}\n+}\n+\n+fn should_ok_3() {\n+    if true && if true { true } else { false } {}\n+}\n+\n+fn shoule_match_ok() {\n+    #[cfg(feature = \"full\")]\n+    {\n+        let a = 1;\n+        let b = 2;\n+        if match a {\n+            1 if b == 1 => true,\n+            _ => false,\n+        } && if a > 1 { true } else { false }\n+        {\n+            true\n+        }\n+    }\n+}\n+\n+fn should_ok_in_nested() {\n+    if true && if true { true } else { false } { true } else { false };\n+}\n+\n+fn main() {}"}, {"sha": "bf79e10103e13c701c2367209b4265273fdcd60b", "filename": "src/test/ui/parser/issue-103381.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fparser%2Fissue-103381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fparser%2Fissue-103381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103381.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,59 @@\n+// run-rustfix\n+\n+#![feature(let_chains)]\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![allow(irrefutable_let_patterns)]\n+\n+fn err_some(b: bool, x: Option<u32>) {\n+    if b && if let Some(x) = x {}\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_none(b: bool, x: Option<u32>) {\n+    if b && if let None = x {}\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_bool_1() {\n+    if true && if true { true } else { false };\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn err_bool_2() {\n+    if true && if false { true } else { false };\n+    //~^ ERROR unexpected `if` in the condition expression\n+}\n+\n+fn should_ok_1() {\n+    if true && if let x = 1 { true } else { true } {}\n+}\n+\n+fn should_ok_2() {\n+    if true && if let 1 = 1 { true } else { true } {}\n+}\n+\n+fn should_ok_3() {\n+    if true && if true { true } else { false } {}\n+}\n+\n+fn shoule_match_ok() {\n+    #[cfg(feature = \"full\")]\n+    {\n+        let a = 1;\n+        let b = 2;\n+        if match a {\n+            1 if b == 1 => true,\n+            _ => false,\n+        } && if a > 1 { true } else { false }\n+        {\n+            true\n+        }\n+    }\n+}\n+\n+fn should_ok_in_nested() {\n+    if true && if true { true } else { false } { true } else { false };\n+}\n+\n+fn main() {}"}, {"sha": "85fcc18e76b57f385122ad764f9a5a23332e54d8", "filename": "src/test/ui/parser/issue-103381.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fparser%2Fissue-103381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fparser%2Fissue-103381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103381.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -0,0 +1,50 @@\n+error: unexpected `if` in the condition expression\n+  --> $DIR/issue-103381.rs:9:12\n+   |\n+LL |     if b && if let Some(x) = x {}\n+   |            ^^^^\n+   |\n+help: remove the `if`\n+   |\n+LL -     if b && if let Some(x) = x {}\n+LL +     if b && let Some(x) = x {}\n+   |\n+\n+error: unexpected `if` in the condition expression\n+  --> $DIR/issue-103381.rs:14:12\n+   |\n+LL |     if b && if let None = x {}\n+   |            ^^^^\n+   |\n+help: remove the `if`\n+   |\n+LL -     if b && if let None = x {}\n+LL +     if b && let None = x {}\n+   |\n+\n+error: unexpected `if` in the condition expression\n+  --> $DIR/issue-103381.rs:19:15\n+   |\n+LL |     if true && if true { true } else { false };\n+   |               ^^^^\n+   |\n+help: remove the `if`\n+   |\n+LL -     if true && if true { true } else { false };\n+LL +     if true && true { true } else { false };\n+   |\n+\n+error: unexpected `if` in the condition expression\n+  --> $DIR/issue-103381.rs:24:15\n+   |\n+LL |     if true && if false { true } else { false };\n+   |               ^^^^\n+   |\n+help: remove the `if`\n+   |\n+LL -     if true && if false { true } else { false };\n+LL +     if true && false { true } else { false };\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "38353d161c1339e626f95750c3d58ef166c3ff51", "filename": "src/test/ui/recursion/issue-83150.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,6 +1,7 @@\n // build-fail\n // compile-flags: -Copt-level=0\n-//~^^ ERROR overflow evaluating the requirement\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+//~^^^ ERROR overflow evaluating the requirement\n \n fn main() {\n     let mut iter = 0u8..1;"}, {"sha": "a67bfd018a2b5cfd9f96255a5c34eddfda1b56c3", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-83150.rs:10:1\n+  --> $DIR/issue-83150.rs:11:1\n    |\n LL | fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -12,9 +12,10 @@ LL |     func(&mut iter.map(|x| x + 1))\n error[E0275]: overflow evaluating the requirement `<std::ops::Range<u8> as Iterator>::Item`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required for `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>` to implement `Iterator`\n+   = note: required for `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>` to implement `Iterator`\n    = note: 64 redundant requirements hidden\n-   = note: required for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>` to implement `Iterator`\n+   = note: required for `&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>` to implement `Iterator`\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type-hash.txt'\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "cf08095372b0792aab0eb8bb6ad92d36a3ccd8ed", "filename": "src/test/ui/recursion/recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>`\n   --> $DIR/recursion.rs:18:11\n    |\n LL |     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}"}, {"sha": "26db9d7c9974982e38c2b5a01283ce872f286985", "filename": "src/test/ui/specialization/issue-43037.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.current.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/issue-43037.rs:17:6\n+  --> $DIR/issue-43037.rs:19:6\n    |\n LL | impl<T> From<<A<T> as Z>::Assoc> for T {}\n    |      ^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/specialization/issue-43037.stderr"}, {"sha": "26db9d7c9974982e38c2b5a01283ce872f286985", "filename": "src/test/ui/specialization/issue-43037.negative.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.negative.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,5 +1,5 @@\n error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n-  --> $DIR/issue-100191.rs:18:6\n+  --> $DIR/issue-43037.rs:19:6\n    |\n LL | impl<T> From<<A<T> as Z>::Assoc> for T {}\n    |      ^ type parameter `T` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/coherence/issue-100191.stderr"}, {"sha": "a1e3f998b23701c5a04d86fb76594c0d0d008d89", "filename": "src/test/ui/specialization/issue-43037.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-43037.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,4 +1,6 @@\n+// revisions: current negative\n #![feature(specialization)]\n+#![cfg_attr(negative, feature(with_negative_coherence))]\n #![allow(incomplete_features)]\n \n trait X {}"}, {"sha": "5013559b80ea9ae90fe56f3a5d77503072342208", "filename": "src/test/ui/specialization/issue-45814.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.current.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `T: Trait<_>`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_45814`)\n note: required for `T` to implement `Trait<_>`\n-  --> $DIR/issue-45814.rs:8:20\n+  --> $DIR/issue-45814.rs:9:20\n    |\n LL | default impl<T, U> Trait<T> for U {}\n    |                    ^^^^^^^^     ^", "previous_filename": "src/test/ui/specialization/issue-45814.stderr"}, {"sha": "5013559b80ea9ae90fe56f3a5d77503072342208", "filename": "src/test/ui/specialization/issue-45814.negative.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.negative.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `T: Trait<_>`\n    |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_100191_2`)\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_45814`)\n note: required for `T` to implement `Trait<_>`\n-  --> $DIR/issue-100191-2.rs:8:20\n+  --> $DIR/issue-45814.rs:9:20\n    |\n LL | default impl<T, U> Trait<T> for U {}\n    |                    ^^^^^^^^     ^", "previous_filename": "src/test/ui/coherence/issue-100191-2.stderr"}, {"sha": "fce236390c2b0e78ef913361fbb234ac87f6d7b7", "filename": "src/test/ui/specialization/issue-45814.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,6 +1,7 @@\n //~ ERROR overflow evaluating the requirement `T: Trait<_>`\n-\n+// revisions: current negative\n #![feature(specialization)]\n+#![cfg_attr(negative, feature(with_negative_coherence))]\n #![allow(incomplete_features)]\n \n pub trait Trait<T> {}"}, {"sha": "297245f0198b5e0d7a21ca7fc2651f457372fb97", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 102, "deletions": 102, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -2,118 +2,118 @@ ast-stats-1 PRE EXPANSION AST STATS\n ast-stats-1 Name                Accumulated Size         Count     Item Size\n ast-stats-1 ----------------------------------------------------------------\n ast-stats-1 ExprField                 48 ( 0.6%)             1            48\n-ast-stats-1 Crate                     56 ( 0.7%)             1            56\n-ast-stats-1 Attribute                 64 ( 0.8%)             2            32\n+ast-stats-1 Crate                     56 ( 0.8%)             1            56\n+ast-stats-1 Attribute                 64 ( 0.9%)             2            32\n ast-stats-1 - Normal                    32 ( 0.4%)             1\n ast-stats-1 - DocComment                32 ( 0.4%)             1\n-ast-stats-1 GenericArgs               64 ( 0.8%)             1            64\n-ast-stats-1 - AngleBracketed            64 ( 0.8%)             1\n-ast-stats-1 Local                     72 ( 0.9%)             1            72\n-ast-stats-1 WherePredicate            72 ( 0.9%)             1            72\n-ast-stats-1 - BoundPredicate            72 ( 0.9%)             1\n-ast-stats-1 Arm                       96 ( 1.1%)             2            48\n-ast-stats-1 ForeignItem               96 ( 1.1%)             1            96\n-ast-stats-1 - Fn                        96 ( 1.1%)             1\n-ast-stats-1 FieldDef                 160 ( 1.9%)             2            80\n-ast-stats-1 Stmt                     160 ( 1.9%)             5            32\n+ast-stats-1 GenericArgs               64 ( 0.9%)             1            64\n+ast-stats-1 - AngleBracketed            64 ( 0.9%)             1\n+ast-stats-1 Local                     72 ( 1.0%)             1            72\n+ast-stats-1 WherePredicate            72 ( 1.0%)             1            72\n+ast-stats-1 - BoundPredicate            72 ( 1.0%)             1\n+ast-stats-1 Arm                       96 ( 1.3%)             2            48\n+ast-stats-1 ForeignItem               96 ( 1.3%)             1            96\n+ast-stats-1 - Fn                        96 ( 1.3%)             1\n+ast-stats-1 FieldDef                 160 ( 2.2%)             2            80\n+ast-stats-1 Stmt                     160 ( 2.2%)             5            32\n ast-stats-1 - Local                     32 ( 0.4%)             1\n ast-stats-1 - MacCall                   32 ( 0.4%)             1\n-ast-stats-1 - Expr                      96 ( 1.1%)             3\n-ast-stats-1 Param                    160 ( 1.9%)             4            40\n-ast-stats-1 FnDecl                   200 ( 2.4%)             5            40\n-ast-stats-1 Variant                  240 ( 2.9%)             2           120\n-ast-stats-1 Block                    288 ( 3.4%)             6            48\n-ast-stats-1 GenericBound             352 ( 4.2%)             4            88\n-ast-stats-1 - Trait                    352 ( 4.2%)             4\n-ast-stats-1 AssocItem                416 ( 4.9%)             4           104\n-ast-stats-1 - Type                     208 ( 2.5%)             2\n-ast-stats-1 - Fn                       208 ( 2.5%)             2\n-ast-stats-1 GenericParam             480 ( 5.7%)             5            96\n-ast-stats-1 PathSegment              720 ( 8.6%)            30            24\n-ast-stats-1 Expr                     832 ( 9.9%)             8           104\n-ast-stats-1 - Path                     104 ( 1.2%)             1\n-ast-stats-1 - Match                    104 ( 1.2%)             1\n-ast-stats-1 - Struct                   104 ( 1.2%)             1\n-ast-stats-1 - Lit                      208 ( 2.5%)             2\n-ast-stats-1 - Block                    312 ( 3.7%)             3\n-ast-stats-1 Pat                      840 (10.0%)             7           120\n-ast-stats-1 - Struct                   120 ( 1.4%)             1\n-ast-stats-1 - Wild                     120 ( 1.4%)             1\n-ast-stats-1 - Ident                    600 ( 7.1%)             5\n-ast-stats-1 Ty                     1_344 (16.0%)            14            96\n-ast-stats-1 - Rptr                      96 ( 1.1%)             1\n-ast-stats-1 - Ptr                       96 ( 1.1%)             1\n-ast-stats-1 - ImplicitSelf             192 ( 2.3%)             2\n-ast-stats-1 - Path                     960 (11.4%)            10\n-ast-stats-1 Item                   1_656 (19.7%)             9           184\n-ast-stats-1 - Trait                    184 ( 2.2%)             1\n-ast-stats-1 - Enum                     184 ( 2.2%)             1\n-ast-stats-1 - ForeignMod               184 ( 2.2%)             1\n-ast-stats-1 - Impl                     184 ( 2.2%)             1\n-ast-stats-1 - Fn                       368 ( 4.4%)             2\n-ast-stats-1 - Use                      552 ( 6.6%)             3\n+ast-stats-1 - Expr                      96 ( 1.3%)             3\n+ast-stats-1 Param                    160 ( 2.2%)             4            40\n+ast-stats-1 FnDecl                   200 ( 2.7%)             5            40\n+ast-stats-1 Variant                  240 ( 3.2%)             2           120\n+ast-stats-1 GenericBound             288 ( 3.9%)             4            72\n+ast-stats-1 - Trait                    288 ( 3.9%)             4\n+ast-stats-1 Block                    288 ( 3.9%)             6            48\n+ast-stats-1 AssocItem                416 ( 5.6%)             4           104\n+ast-stats-1 - Type                     208 ( 2.8%)             2\n+ast-stats-1 - Fn                       208 ( 2.8%)             2\n+ast-stats-1 GenericParam             480 ( 6.5%)             5            96\n+ast-stats-1 Expr                     576 ( 7.8%)             8            72\n+ast-stats-1 - Path                      72 ( 1.0%)             1\n+ast-stats-1 - Match                     72 ( 1.0%)             1\n+ast-stats-1 - Struct                    72 ( 1.0%)             1\n+ast-stats-1 - Lit                      144 ( 1.9%)             2\n+ast-stats-1 - Block                    216 ( 2.9%)             3\n+ast-stats-1 Pat                      616 ( 8.3%)             7            88\n+ast-stats-1 - Struct                    88 ( 1.2%)             1\n+ast-stats-1 - Wild                      88 ( 1.2%)             1\n+ast-stats-1 - Ident                    440 ( 5.9%)             5\n+ast-stats-1 PathSegment              720 ( 9.7%)            30            24\n+ast-stats-1 Ty                       896 (12.1%)            14            64\n+ast-stats-1 - Rptr                      64 ( 0.9%)             1\n+ast-stats-1 - Ptr                       64 ( 0.9%)             1\n+ast-stats-1 - ImplicitSelf             128 ( 1.7%)             2\n+ast-stats-1 - Path                     640 ( 8.6%)            10\n+ast-stats-1 Item                   1_656 (22.3%)             9           184\n+ast-stats-1 - Trait                    184 ( 2.5%)             1\n+ast-stats-1 - Enum                     184 ( 2.5%)             1\n+ast-stats-1 - ForeignMod               184 ( 2.5%)             1\n+ast-stats-1 - Impl                     184 ( 2.5%)             1\n+ast-stats-1 - Fn                       368 ( 5.0%)             2\n+ast-stats-1 - Use                      552 ( 7.4%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  8_416\n+ast-stats-1 Total                  7_424\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 ExprField                 48 ( 0.5%)             1            48\n-ast-stats-2 Crate                     56 ( 0.6%)             1            56\n-ast-stats-2 GenericArgs               64 ( 0.7%)             1            64\n-ast-stats-2 - AngleBracketed            64 ( 0.7%)             1\n-ast-stats-2 Local                     72 ( 0.8%)             1            72\n-ast-stats-2 WherePredicate            72 ( 0.8%)             1            72\n-ast-stats-2 - BoundPredicate            72 ( 0.8%)             1\n-ast-stats-2 Arm                       96 ( 1.0%)             2            48\n-ast-stats-2 ForeignItem               96 ( 1.0%)             1            96\n-ast-stats-2 - Fn                        96 ( 1.0%)             1\n-ast-stats-2 InlineAsm                120 ( 1.3%)             1           120\n-ast-stats-2 Attribute                128 ( 1.4%)             4            32\n-ast-stats-2 - DocComment                32 ( 0.3%)             1\n-ast-stats-2 - Normal                    96 ( 1.0%)             3\n-ast-stats-2 FieldDef                 160 ( 1.7%)             2            80\n-ast-stats-2 Stmt                     160 ( 1.7%)             5            32\n-ast-stats-2 - Local                     32 ( 0.3%)             1\n-ast-stats-2 - Semi                      32 ( 0.3%)             1\n-ast-stats-2 - Expr                      96 ( 1.0%)             3\n-ast-stats-2 Param                    160 ( 1.7%)             4            40\n-ast-stats-2 FnDecl                   200 ( 2.2%)             5            40\n-ast-stats-2 Variant                  240 ( 2.6%)             2           120\n-ast-stats-2 Block                    288 ( 3.1%)             6            48\n-ast-stats-2 GenericBound             352 ( 3.8%)             4            88\n-ast-stats-2 - Trait                    352 ( 3.8%)             4\n-ast-stats-2 AssocItem                416 ( 4.5%)             4           104\n-ast-stats-2 - Type                     208 ( 2.3%)             2\n-ast-stats-2 - Fn                       208 ( 2.3%)             2\n-ast-stats-2 GenericParam             480 ( 5.2%)             5            96\n-ast-stats-2 PathSegment              792 ( 8.7%)            33            24\n-ast-stats-2 Pat                      840 ( 9.2%)             7           120\n-ast-stats-2 - Struct                   120 ( 1.3%)             1\n-ast-stats-2 - Wild                     120 ( 1.3%)             1\n-ast-stats-2 - Ident                    600 ( 6.6%)             5\n-ast-stats-2 Expr                     936 (10.2%)             9           104\n-ast-stats-2 - Path                     104 ( 1.1%)             1\n-ast-stats-2 - Match                    104 ( 1.1%)             1\n-ast-stats-2 - Struct                   104 ( 1.1%)             1\n-ast-stats-2 - InlineAsm                104 ( 1.1%)             1\n-ast-stats-2 - Lit                      208 ( 2.3%)             2\n-ast-stats-2 - Block                    312 ( 3.4%)             3\n-ast-stats-2 Ty                     1_344 (14.7%)            14            96\n-ast-stats-2 - Rptr                      96 ( 1.0%)             1\n-ast-stats-2 - Ptr                       96 ( 1.0%)             1\n-ast-stats-2 - ImplicitSelf             192 ( 2.1%)             2\n-ast-stats-2 - Path                     960 (10.5%)            10\n-ast-stats-2 Item                   2_024 (22.1%)            11           184\n-ast-stats-2 - Trait                    184 ( 2.0%)             1\n-ast-stats-2 - Enum                     184 ( 2.0%)             1\n-ast-stats-2 - ExternCrate              184 ( 2.0%)             1\n-ast-stats-2 - ForeignMod               184 ( 2.0%)             1\n-ast-stats-2 - Impl                     184 ( 2.0%)             1\n-ast-stats-2 - Fn                       368 ( 4.0%)             2\n-ast-stats-2 - Use                      736 ( 8.0%)             4\n+ast-stats-2 ExprField                 48 ( 0.6%)             1            48\n+ast-stats-2 Crate                     56 ( 0.7%)             1            56\n+ast-stats-2 GenericArgs               64 ( 0.8%)             1            64\n+ast-stats-2 - AngleBracketed            64 ( 0.8%)             1\n+ast-stats-2 Local                     72 ( 0.9%)             1            72\n+ast-stats-2 WherePredicate            72 ( 0.9%)             1            72\n+ast-stats-2 - BoundPredicate            72 ( 0.9%)             1\n+ast-stats-2 Arm                       96 ( 1.2%)             2            48\n+ast-stats-2 ForeignItem               96 ( 1.2%)             1            96\n+ast-stats-2 - Fn                        96 ( 1.2%)             1\n+ast-stats-2 InlineAsm                120 ( 1.5%)             1           120\n+ast-stats-2 Attribute                128 ( 1.6%)             4            32\n+ast-stats-2 - DocComment                32 ( 0.4%)             1\n+ast-stats-2 - Normal                    96 ( 1.2%)             3\n+ast-stats-2 FieldDef                 160 ( 2.0%)             2            80\n+ast-stats-2 Stmt                     160 ( 2.0%)             5            32\n+ast-stats-2 - Local                     32 ( 0.4%)             1\n+ast-stats-2 - Semi                      32 ( 0.4%)             1\n+ast-stats-2 - Expr                      96 ( 1.2%)             3\n+ast-stats-2 Param                    160 ( 2.0%)             4            40\n+ast-stats-2 FnDecl                   200 ( 2.5%)             5            40\n+ast-stats-2 Variant                  240 ( 3.0%)             2           120\n+ast-stats-2 GenericBound             288 ( 3.5%)             4            72\n+ast-stats-2 - Trait                    288 ( 3.5%)             4\n+ast-stats-2 Block                    288 ( 3.5%)             6            48\n+ast-stats-2 AssocItem                416 ( 5.1%)             4           104\n+ast-stats-2 - Type                     208 ( 2.6%)             2\n+ast-stats-2 - Fn                       208 ( 2.6%)             2\n+ast-stats-2 GenericParam             480 ( 5.9%)             5            96\n+ast-stats-2 Pat                      616 ( 7.6%)             7            88\n+ast-stats-2 - Struct                    88 ( 1.1%)             1\n+ast-stats-2 - Wild                      88 ( 1.1%)             1\n+ast-stats-2 - Ident                    440 ( 5.4%)             5\n+ast-stats-2 Expr                     648 ( 8.0%)             9            72\n+ast-stats-2 - Path                      72 ( 0.9%)             1\n+ast-stats-2 - Match                     72 ( 0.9%)             1\n+ast-stats-2 - Struct                    72 ( 0.9%)             1\n+ast-stats-2 - InlineAsm                 72 ( 0.9%)             1\n+ast-stats-2 - Lit                      144 ( 1.8%)             2\n+ast-stats-2 - Block                    216 ( 2.7%)             3\n+ast-stats-2 PathSegment              792 ( 9.8%)            33            24\n+ast-stats-2 Ty                       896 (11.0%)            14            64\n+ast-stats-2 - Rptr                      64 ( 0.8%)             1\n+ast-stats-2 - Ptr                       64 ( 0.8%)             1\n+ast-stats-2 - ImplicitSelf             128 ( 1.6%)             2\n+ast-stats-2 - Path                     640 ( 7.9%)            10\n+ast-stats-2 Item                   2_024 (24.9%)            11           184\n+ast-stats-2 - Trait                    184 ( 2.3%)             1\n+ast-stats-2 - Enum                     184 ( 2.3%)             1\n+ast-stats-2 - ExternCrate              184 ( 2.3%)             1\n+ast-stats-2 - ForeignMod               184 ( 2.3%)             1\n+ast-stats-2 - Impl                     184 ( 2.3%)             1\n+ast-stats-2 - Fn                       368 ( 4.5%)             2\n+ast-stats-2 - Use                      736 ( 9.1%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  9_144\n+ast-stats-2 Total                  8_120\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}, {"sha": "08d4b99559031e9c9f63d7a357e9e45d4c5f2733", "filename": "src/test/ui/suggestions/issue-102354.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -2,22 +2,17 @@ error[E0599]: no method named `func` found for type `i32` in the current scope\n   --> $DIR/issue-102354.rs:9:7\n    |\n LL |     x.func();\n-   |       ^^^^ this is an associated function, not a method\n+   |     --^^^^--\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `i32::func()`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in the trait `Trait`\n   --> $DIR/issue-102354.rs:2:5\n    |\n LL |     fn func() {}\n    |     ^^^^^^^^^\n-help: use associated function syntax instead\n-   |\n-LL |     i32::func();\n-   |     ~~~~~~~~~~~\n-help: disambiguate the associated function for the candidate\n-   |\n-LL |     <i32 as Trait>::func(x);\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "6474b2b38e1c089a164cb1c8d86e129126d6b19f", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -Zinline-mir=no\n // error-pattern: overflow evaluating the requirement `(): Sized`\n // error-pattern: function cannot return without recursing\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n \n // Regression test for #91949.\n // This hanged *forever* on 1.56, fixed by #90423."}, {"sha": "a74d2524996a10d4d9f85c9ed166f1733264c3fe", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-91949-hangs-on-recursion.rs:22:1\n+  --> $DIR/issue-91949-hangs-on-recursion.rs:23:1\n    |\n LL | / fn recurse<T>(elements: T) -> Vec<char>\n LL | | where\n@@ -17,7 +17,8 @@ error[E0275]: overflow evaluating the requirement `(): Sized`\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n    = note: required for `std::iter::Empty<()>` to implement `Iterator`\n    = note: 171 redundant requirements hidden\n-   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), std::iter::Empty<()>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>` to implement `Iterator`\n+   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<..., ...>>, ...>>` to implement `Iterator`\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/traits/issue-91949-hangs-on-recursion/issue-91949-hangs-on-recursion.long-type-hash.txt'\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "7cd76286a929efbf054860ce2e3561a8ad9b1148", "filename": "src/test/ui/type/issue-103271.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -7,4 +7,12 @@ fn main() {\n         let x: &u32 = item;\n         assert_eq!(x, &1);\n     }\n+    let iter_fun2 = <(&[u32])>::iter;\n+    //~^ no function or associated item named `iter` found for reference `&[u32]` in the current scope [E0599]\n+    //~| function or associated item not found in `&[u32]`\n+    //~| HELP the function `iter` is implemented on `[u32]`\n+    for item2 in iter_fun2(&[1,1]) {\n+        let x: &u32 = item2;\n+        assert_eq!(x, &1);\n+    }\n }"}, {"sha": "f4dac51b2b47852a6c4dd8dd7a640f454a544806", "filename": "src/test/ui/type/issue-103271.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -9,6 +9,17 @@ help: the function `iter` is implemented on `[u32]`\n LL |     let iter_fun = <[u32]>::iter;\n    |                     ~~~~~\n \n-error: aborting due to previous error\n+error[E0599]: no function or associated item named `iter` found for reference `&[u32]` in the current scope\n+  --> $DIR/issue-103271.rs:10:33\n+   |\n+LL |     let iter_fun2 = <(&[u32])>::iter;\n+   |                                 ^^^^ function or associated item not found in `&[u32]`\n+   |\n+help: the function `iter` is implemented on `[u32]`\n+   |\n+LL |     let iter_fun2 = <([u32])>::iter;\n+   |                       ~~~~~\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}, {"sha": "b3c12747414ed15a53432bf5b4055aa3a614dad7", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -7,22 +7,27 @@\n // The exact type depends on optimizations, so disable them.\n \n #![allow(dead_code)]\n-#![type_length_limit=\"4\"]\n+#![type_length_limit=\"8\"]\n \n macro_rules! link {\n     ($id:ident, $t:ty) => {\n         pub type $id = ($t, $t, $t);\n     }\n }\n \n+link! { A1, B1 }\n+link! { B1, C1 }\n+link! { C1, D1 }\n+link! { D1, E1 }\n+link! { E1, A }\n link! { A, B }\n link! { B, C }\n link! { C, D }\n link! { D, E }\n link! { E, F }\n-link! { F, G }\n+link! { F, G<Option<i32>, Option<i32>> }\n \n-pub struct G;\n+pub struct G<T, K>(std::marker::PhantomData::<(T, K)>);\n \n fn main() {\n     drop::<Option<A>>(None);"}, {"sha": "ff487466902236425d4be9180f9fb20f71ac6bd2", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,20 +1,11 @@\n-error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((...,....., ...), ..., ...), ..., ...)>>`\n+error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((..., ..., ...), ..., ...), ..., ...), ..., ...)>>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub fn drop<T>(_x: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+   = help: consider adding a `#![type_length_limit=\"10\"]` attribute to your crate\n    = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n \n-error: reached the type-length limit while instantiating `<[closure@std::rt::lang_start<()...e<()>>::call_once - shim(vtable)`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "eb5d35917b2395194593c9ca70c3778f60c1573b", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1 +1 @@\n-Subproject commit 16b097879b6f117c8ae698aab054c87f26ff325e\n+Subproject commit eb5d35917b2395194593c9ca70c3778f60c1573b"}, {"sha": "29425b2e5541791db6c485d904a38981abda173b", "filename": "src/tools/clippy/clippy_lints/src/double_parens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -61,10 +61,10 @@ impl EarlyLintPass for DoubleParens {\n                     }\n                 }\n             },\n-            ExprKind::MethodCall(_, _, ref params, _) => {\n-                if let [ref param] = params[..] {\n-                    if let ExprKind::Paren(_) = param.kind {\n-                        span_lint(cx, DOUBLE_PARENS, param.span, msg);\n+            ExprKind::MethodCall(ref call) => {\n+                if let [ref arg] = call.args[..] {\n+                    if let ExprKind::Paren(_) = arg.kind {\n+                        span_lint(cx, DOUBLE_PARENS, arg.span, msg);\n                     }\n                 }\n             },"}, {"sha": "377bddeaa5feabccaa30f4a6e759baf33b152741", "filename": "src/tools/clippy/clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::is_direct_expn_of;\n use if_chain::if_chain;\n-use rustc_ast::ast::{Expr, ExprKind};\n+use rustc_ast::ast::{Expr, ExprKind, MethodCall};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -37,8 +37,8 @@ declare_lint_pass!(OptionEnvUnwrap => [OPTION_ENV_UNWRAP]);\n impl EarlyLintPass for OptionEnvUnwrap {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path_segment, receiver, _, _) = &expr.kind;\n-            if matches!(path_segment.ident.name, sym::expect | sym::unwrap);\n+            if let ExprKind::MethodCall(box MethodCall { seg, receiver, .. }) = &expr.kind;\n+            if matches!(seg.ident.name, sym::expect | sym::unwrap);\n             if let ExprKind::Call(caller, _) = &receiver.kind;\n             if is_direct_expn_of(caller.span, \"option_env\").is_some();\n             then {"}, {"sha": "057b7e30642ec5bc0edd134d913bef1ec8c537e4", "filename": "src/tools/clippy/clippy_lints/src/precedence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n-use rustc_ast::ast::{BinOpKind, Expr, ExprKind, UnOp};\n+use rustc_ast::ast::{BinOpKind, Expr, ExprKind, MethodCall, UnOp};\n use rustc_ast::token;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -110,11 +110,11 @@ impl EarlyLintPass for Precedence {\n             let mut arg = operand;\n \n             let mut all_odd = true;\n-            while let ExprKind::MethodCall(path_segment, receiver, _, _) = &arg.kind {\n-                let path_segment_str = path_segment.ident.name.as_str();\n+            while let ExprKind::MethodCall(box MethodCall { seg, receiver, .. }) = &arg.kind {\n+                let seg_str = seg.ident.name.as_str();\n                 all_odd &= ALLOWED_ODD_FUNCTIONS\n                     .iter()\n-                    .any(|odd_function| **odd_function == *path_segment_str);\n+                    .any(|odd_function| **odd_function == *seg_str);\n                 arg = receiver;\n             }\n "}, {"sha": "4cbe9597c5393eee7221480dbb487aa6d863ce76", "filename": "src/tools/clippy/clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -69,24 +69,24 @@ impl EarlyLintPass for RedundantClosureCall {\n         if_chain! {\n             if let ast::ExprKind::Call(ref paren, _) = expr.kind;\n             if let ast::ExprKind::Paren(ref closure) = paren.kind;\n-            if let ast::ExprKind::Closure(_, _, ref r#async, _, ref decl, ref block, _) = closure.kind;\n+            if let ast::ExprKind::Closure(box ast::Closure { ref asyncness, ref fn_decl, ref body, .. }) = closure.kind;\n             then {\n                 let mut visitor = ReturnVisitor::new();\n-                visitor.visit_expr(block);\n+                visitor.visit_expr(body);\n                 if !visitor.found_return {\n                     span_lint_and_then(\n                         cx,\n                         REDUNDANT_CLOSURE_CALL,\n                         expr.span,\n                         \"try not to call a closure in the expression where it is declared\",\n                         |diag| {\n-                            if decl.inputs.is_empty() {\n+                            if fn_decl.inputs.is_empty() {\n                                 let app = Applicability::MachineApplicable;\n-                                let mut hint = Sugg::ast(cx, block, \"..\");\n+                                let mut hint = Sugg::ast(cx, body, \"..\");\n \n-                                if r#async.is_async() {\n+                                if asyncness.is_async() {\n                                     // `async x` is a syntax error, so it becomes `async { x }`\n-                                    if !matches!(block.kind, ast::ExprKind::Block(_, _)) {\n+                                    if !matches!(body.kind, ast::ExprKind::Block(_, _)) {\n                                         hint = hint.blockify();\n                                     }\n "}, {"sha": "78e83880e1a6121020f0d6e0d724fee457fe46e0", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -580,7 +580,7 @@ fn ident_difference_expr_with_base_location(\n         | (Await(_), Await(_))\n         | (Async(_, _, _), Async(_, _, _))\n         | (Block(_, _), Block(_, _))\n-        | (Closure(_, _, _, _, _, _, _), Closure(_, _, _, _, _, _, _))\n+        | (Closure(_), Closure(_))\n         | (Match(_, _), Match(_, _))\n         | (Loop(_, _), Loop(_, _))\n         | (ForLoop(_, _, _, _), ForLoop(_, _, _, _))\n@@ -593,7 +593,7 @@ fn ident_difference_expr_with_base_location(\n         | (Unary(_, _), Unary(_, _))\n         | (Binary(_, _, _), Binary(_, _, _))\n         | (Tup(_), Tup(_))\n-        | (MethodCall(_, _, _, _), MethodCall(_, _, _, _))\n+        | (MethodCall(_), MethodCall(_))\n         | (Call(_, _), Call(_, _))\n         | (ConstBlock(_), ConstBlock(_))\n         | (Array(_), Array(_))"}, {"sha": "bb6fb38e9690e32a3e472c49f1462bc38fa28d1b", "filename": "src/tools/clippy/clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -292,7 +292,7 @@ fn transform_with_focus_on_idx(alternatives: &mut Vec<P<Pat>>, focus_idx: usize)\n /// So when we fixate on some `ident_k: pat_k`, we try to find `ident_k` in the other pattern\n /// and check that all `fp_i` where `i \u2208 ((0...n) \\ k)` between two patterns are equal.\n fn extend_with_struct_pat(\n-    qself1: &Option<ast::QSelf>,\n+    qself1: &Option<P<ast::QSelf>>,\n     path1: &ast::Path,\n     fps1: &mut [ast::PatField],\n     rest1: bool,"}, {"sha": "5ab351bc29ca0b8b1ba653287f1933cc70d99217", "filename": "src/tools/clippy/clippy_lints/src/unused_rounding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_ast::ast::{Expr, ExprKind};\n+use rustc_ast::ast::{Expr, ExprKind, MethodCall};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -30,8 +30,8 @@ declare_clippy_lint! {\n declare_lint_pass!(UnusedRounding => [UNUSED_ROUNDING]);\n \n fn is_useless_rounding(expr: &Expr) -> Option<(&str, String)> {\n-    if let ExprKind::MethodCall(name_ident, receiver, _, _) = &expr.kind\n-        && let method_name = name_ident.ident.name.as_str()\n+    if let ExprKind::MethodCall(box MethodCall { seg, receiver, .. }) = &expr.kind\n+        && let method_name = seg.ident.name.as_str()\n         && (method_name == \"ceil\" || method_name == \"round\" || method_name == \"floor\")\n         && let ExprKind::Lit(token_lit) = &receiver.kind\n         && token_lit.is_semantic_float() {"}, {"sha": "22a5aa5351ad5b1c044319975a19c81869ddba15", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/invalid_paths.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -79,22 +79,22 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n         SimplifiedTypeGen::StrSimplifiedType,\n     ]\n     .iter()\n-    .flat_map(|&ty| cx.tcx.incoherent_impls(ty));\n-    for item_def_id in lang_items.items().iter().flatten().chain(incoherent_impls) {\n-        let lang_item_path = cx.get_def_path(*item_def_id);\n+    .flat_map(|&ty| cx.tcx.incoherent_impls(ty).iter().copied());\n+    for item_def_id in lang_items.iter().map(|(_, def_id)| def_id).chain(incoherent_impls) {\n+        let lang_item_path = cx.get_def_path(item_def_id);\n         if path_syms.starts_with(&lang_item_path) {\n             if let [item] = &path_syms[lang_item_path.len()..] {\n                 if matches!(\n-                    cx.tcx.def_kind(*item_def_id),\n+                    cx.tcx.def_kind(item_def_id),\n                     DefKind::Mod | DefKind::Enum | DefKind::Trait\n                 ) {\n-                    for child in cx.tcx.module_children(*item_def_id) {\n+                    for child in cx.tcx.module_children(item_def_id) {\n                         if child.ident.name == *item {\n                             return true;\n                         }\n                     }\n                 } else {\n-                    for child in cx.tcx.associated_item_def_ids(*item_def_id) {\n+                    for child in cx.tcx.associated_item_def_ids(item_def_id) {\n                         if cx.tcx.item_name(*child) == *item {\n                             return true;\n                         }"}, {"sha": "cfba7fa8791de3c7567f09c8a41f643f7cd38427", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Namespace, Res};\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind, Local, Mutability, Node};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -91,7 +91,7 @@ impl UnnecessaryDefPath {\n     #[allow(clippy::too_many_lines)]\n     fn check_call(&mut self, cx: &LateContext<'_>, func: &Expr<'_>, args: &[Expr<'_>], span: Span) {\n         enum Item {\n-            LangItem(Symbol),\n+            LangItem(&'static str),\n             DiagnosticItem(Symbol),\n         }\n         static PATHS: &[&[&str]] = &[\n@@ -325,18 +325,9 @@ fn inherent_def_path_res(cx: &LateContext<'_>, segments: &[&str]) -> Option<DefI\n     })\n }\n \n-fn get_lang_item_name(cx: &LateContext<'_>, def_id: DefId) -> Option<Symbol> {\n-    if let Some(lang_item) = cx.tcx.lang_items().items().iter().position(|id| *id == Some(def_id)) {\n-        let lang_items = def_path_res(cx, &[\"rustc_hir\", \"lang_items\", \"LangItem\"], Some(Namespace::TypeNS)).def_id();\n-        let item_name = cx\n-            .tcx\n-            .adt_def(lang_items)\n-            .variants()\n-            .iter()\n-            .nth(lang_item)\n-            .unwrap()\n-            .name;\n-        Some(item_name)\n+fn get_lang_item_name(cx: &LateContext<'_>, def_id: DefId) -> Option<&'static str> {\n+    if let Some((lang_item, _)) = cx.tcx.lang_items().iter().find(|(_, id)| *id == def_id) {\n+        Some(lang_item.variant_name())\n     } else {\n         None\n     }"}, {"sha": "23aed4b5ba2f40f2c675009c338736431a5fdd1e", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -75,11 +75,11 @@ pub fn eq_field_pat(l: &PatField, r: &PatField) -> bool {\n         && over(&l.attrs, &r.attrs, eq_attr)\n }\n \n-pub fn eq_qself(l: &QSelf, r: &QSelf) -> bool {\n+pub fn eq_qself(l: &P<QSelf>, r: &P<QSelf>) -> bool {\n     l.position == r.position && eq_ty(&l.ty, &r.ty)\n }\n \n-pub fn eq_maybe_qself(l: &Option<QSelf>, r: &Option<QSelf>) -> bool {\n+pub fn eq_maybe_qself(l: &Option<P<QSelf>>, r: &Option<P<QSelf>>) -> bool {\n     match (l, r) {\n         (Some(l), Some(r)) => eq_qself(l, r),\n         (None, None) => true,\n@@ -147,8 +147,11 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Array(l), Array(r)) | (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),\n         (Call(lc, la), Call(rc, ra)) => eq_expr(lc, rc) && over(la, ra, |l, r| eq_expr(l, r)),\n-        (MethodCall(lc, ls, la, _), MethodCall(rc, rs, ra, _)) => {\n-            eq_path_seg(lc, rc) && eq_expr(ls, rs) && over(la, ra, |l, r| eq_expr(l, r))\n+        (\n+            MethodCall(box ast::MethodCall { seg: ls, receiver: lr, args: la, .. }),\n+            MethodCall(box ast::MethodCall { seg: rs, receiver: rr, args: ra, .. })\n+        ) => {\n+            eq_path_seg(ls, rs) && eq_expr(lr, rr) && over(la, ra, |l, r| eq_expr(l, r))\n         },\n         (Binary(lo, ll, lr), Binary(ro, rl, rr)) => lo.node == ro.node && eq_expr(ll, rl) && eq_expr(lr, rr),\n         (Unary(lo, l), Unary(ro, r)) => mem::discriminant(lo) == mem::discriminant(ro) && eq_expr(l, r),\n@@ -170,7 +173,26 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (AssignOp(lo, lp, lv), AssignOp(ro, rp, rv)) => lo.node == ro.node && eq_expr(lp, rp) && eq_expr(lv, rv),\n         (Field(lp, lf), Field(rp, rf)) => eq_id(*lf, *rf) && eq_expr(lp, rp),\n         (Match(ls, la), Match(rs, ra)) => eq_expr(ls, rs) && over(la, ra, eq_arm),\n-        (Closure(lb, lc, la, lm, lf, le, _), Closure(rb, rc, ra, rm, rf, re, _)) => {\n+        (\n+            Closure(box ast::Closure {\n+                binder: lb,\n+                capture_clause: lc,\n+                asyncness: la,\n+                movability: lm,\n+                fn_decl: lf,\n+                body: le,\n+                ..\n+            }),\n+            Closure(box ast::Closure {\n+                binder: rb,\n+                capture_clause: rc,\n+                asyncness: ra,\n+                movability: rm,\n+                fn_decl: rf,\n+                body: re,\n+                ..\n+            })\n+        ) => {\n             eq_closure_binder(lb, rb)\n                 && lc == rc\n                 && la.is_async() == ra.is_async()"}, {"sha": "e474f370a5d172cbc4c2b4e469f1bb2daa91483b", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_def_path.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_def_path.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_def_path.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_def_path.fixed?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -48,14 +48,14 @@ fn _f<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, did: DefId, expr: &Expr<'_>) {\n     let _ = is_type_lang_item(cx, ty, LangItem::OwnedBox);\n     let _ = is_type_diagnostic_item(cx, ty, sym::maybe_uninit_uninit);\n \n-    let _ = cx.tcx.lang_items().require(LangItem::OwnedBox).ok() == Some(did);\n+    let _ = cx.tcx.lang_items().get(LangItem::OwnedBox) == Some(did);\n     let _ = cx.tcx.is_diagnostic_item(sym::Option, did);\n-    let _ = cx.tcx.lang_items().require(LangItem::OptionSome).ok() == Some(did);\n+    let _ = cx.tcx.lang_items().get(LangItem::OptionSome) == Some(did);\n \n     let _ = is_trait_method(cx, expr, sym::AsRef);\n \n     let _ = is_path_diagnostic_item(cx, expr, sym::Option);\n-    let _ = path_res(cx, expr).opt_def_id().map_or(false, |id| cx.tcx.lang_items().require(LangItem::IteratorNext).ok() == Some(id));\n+    let _ = path_res(cx, expr).opt_def_id().map_or(false, |id| cx.tcx.lang_items().get(LangItem::IteratorNext) == Some(id));\n     let _ = is_res_lang_ctor(cx, path_res(cx, expr), LangItem::OptionSome);\n }\n "}, {"sha": "3ca29f099771b9607ab423d6087c0bb2c95cabaf", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_def_path.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_def_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_def_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_def_path.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -57,7 +57,7 @@ error: use of a def path to a `LangItem`\n   --> $DIR/unnecessary_def_path.rs:51:13\n    |\n LL |     let _ = match_def_path(cx, did, &[\"alloc\", \"boxed\", \"Box\"]);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cx.tcx.lang_items().require(LangItem::OwnedBox).ok() == Some(did)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cx.tcx.lang_items().get(LangItem::OwnedBox) == Some(did)`\n \n error: use of a def path to a diagnostic item\n   --> $DIR/unnecessary_def_path.rs:52:13\n@@ -69,7 +69,7 @@ error: use of a def path to a `LangItem`\n   --> $DIR/unnecessary_def_path.rs:53:13\n    |\n LL |     let _ = match_def_path(cx, did, &[\"core\", \"option\", \"Option\", \"Some\"]);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cx.tcx.lang_items().require(LangItem::OptionSome).ok() == Some(did)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `cx.tcx.lang_items().get(LangItem::OptionSome) == Some(did)`\n    |\n    = help: if this `DefId` came from a constructor expression or pattern then the parent `DefId` should be used instead\n \n@@ -89,7 +89,7 @@ error: use of a def path to a `LangItem`\n   --> $DIR/unnecessary_def_path.rs:58:13\n    |\n LL |     let _ = is_expr_path_def_path(cx, expr, &[\"core\", \"iter\", \"traits\", \"Iterator\", \"next\"]);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `path_res(cx, expr).opt_def_id().map_or(false, |id| cx.tcx.lang_items().require(LangItem::IteratorNext).ok() == Some(id))`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `path_res(cx, expr).opt_def_id().map_or(false, |id| cx.tcx.lang_items().get(LangItem::IteratorNext) == Some(id))`\n \n error: use of a def path to a `LangItem`\n   --> $DIR/unnecessary_def_path.rs:59:13"}, {"sha": "2a240cc249b0c768f084dab5b6f220ae53a59399", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_def_path_hardcoded_path.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -1,10 +1,10 @@\n-error: hardcoded path to a language item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n+error: hardcoded path to a diagnostic item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:10:36\n    |\n-LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: convert all references to use `LangItem::DerefMut`\n+   = help: convert all references to use `sym::Deref`\n    = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n \n error: hardcoded path to a diagnostic item\n@@ -15,13 +15,13 @@ LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\",\n    |\n    = help: convert all references to use `sym::deref_method`\n \n-error: hardcoded path to a diagnostic item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:10:36\n+error: hardcoded path to a language item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n    |\n-LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: convert all references to use `sym::Deref`\n+   = help: convert all references to use `LangItem::DerefMut`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "07b80b8baac1639ee9270142114cbb3f271246b3", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -230,6 +230,9 @@ pub struct Config {\n     /// The directory where programs should be built\n     pub build_base: PathBuf,\n \n+    /// The directory containing the compiler sysroot\n+    pub sysroot_base: PathBuf,\n+\n     /// The name of the stage being built (stage1, etc)\n     pub stage_id: String,\n "}, {"sha": "e42b8c5240842a1387a490dfdbb02569a22e18e7", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -46,6 +46,7 @@ fn config() -> Config {\n         \"--jsondocck-path=\",\n         \"--src-base=\",\n         \"--build-base=\",\n+        \"--sysroot-base=\",\n         \"--stage-id=stage2\",\n         \"--cc=c\",\n         \"--cxx=c++\","}, {"sha": "519da685f940a24a6b18a2ab5780ad20db66146f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -69,6 +69,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .optopt(\"\", \"llvm-filecheck\", \"path to LLVM's FileCheck binary\", \"DIR\")\n         .reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\")\n         .reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\")\n+        .reqopt(\"\", \"sysroot-base\", \"directory containing the compiler sysroot\", \"PATH\")\n         .reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\")\n         .reqopt(\n             \"\",\n@@ -234,6 +235,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         llvm_bin_dir: matches.opt_str(\"llvm-bin-dir\").map(PathBuf::from),\n         src_base,\n         build_base: opt_path(matches, \"build-base\"),\n+        sysroot_base: opt_path(matches, \"sysroot-base\"),\n         stage_id: matches.opt_str(\"stage-id\").unwrap(),\n         mode,\n         suite: matches.opt_str(\"suite\").unwrap(),"}, {"sha": "e07b71a7c47802b07e5be842899be0f3706cb896", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -711,7 +711,7 @@ impl<'test> TestCx<'test> {\n             script_str.push_str(\"\\n\");\n         }\n \n-        script_str.push_str(\"\\nqq\\n\"); // Quit the debugger (including remote debugger, if any)\n+        script_str.push_str(\"qq\\n\"); // Quit the debugger (including remote debugger, if any)\n \n         // Write the script into a file\n         debug!(\"script_str = {}\", script_str);\n@@ -3533,22 +3533,25 @@ impl<'test> TestCx<'test> {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         normalize_path(parent_dir, \"$DIR\");\n \n-        // Paths into the libstd/libcore\n-        let base_dir = self.config.src_base.parent().unwrap().parent().unwrap().parent().unwrap();\n-        let src_dir = base_dir.join(\"library\");\n-        normalize_path(&src_dir, \"$SRC_DIR\");\n-\n-        // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n-        // `rustc_macros`\n-        // eg. /home/user/rust/compiler\n-        let compiler_src_dir = base_dir.join(\"compiler\");\n-        normalize_path(&compiler_src_dir, \"$COMPILER_DIR\");\n-\n-        if let Some(virtual_rust_source_base_dir) =\n-            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from)\n-        {\n-            normalize_path(&virtual_rust_source_base_dir.join(\"library\"), \"$SRC_DIR\");\n-            normalize_path(&virtual_rust_source_base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n+        let source_bases = &[\n+            // Source base on the current filesystem (calculated as parent of `src/test/$suite`):\n+            Some(self.config.src_base.parent().unwrap().parent().unwrap().parent().unwrap().into()),\n+            // Source base on the sysroot (from the src components downloaded by `download-rustc`):\n+            Some(self.config.sysroot_base.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\")),\n+            // Virtual `/rustc/$sha` remapped paths (if `remap-debuginfo` is enabled):\n+            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n+            // Virtual `/rustc/$sha` coming from download-rustc:\n+            std::env::var_os(\"FAKE_DOWNLOAD_RUSTC_PREFIX\").map(PathBuf::from),\n+        ];\n+        for base_dir in source_bases {\n+            if let Some(base_dir) = base_dir {\n+                // Paths into the libstd/libcore\n+                normalize_path(&base_dir.join(\"library\"), \"$SRC_DIR\");\n+                // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n+                // `rustc_macros`\n+                // eg. /home/user/rust/compiler\n+                normalize_path(&base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n+            }\n         }\n \n         // Paths into the build directory"}, {"sha": "5ea82adb9c69c762d48e492010958647c85dae10", "filename": "src/tools/miri/src/shims/intrinsics/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -368,11 +368,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n \n             // Other\n-            \"exact_div\" => {\n-                let [num, denom] = check_arg_count(args)?;\n-                this.exact_div(&this.read_immediate(num)?, &this.read_immediate(denom)?, dest)?;\n-            }\n-\n             \"breakpoint\" => {\n                 let [] = check_arg_count(args)?;\n                 // normally this would raise a SIGTRAP, which aborts if no debugger is connected"}, {"sha": "a8281d30bac4a61e827ac54dcaab121c44cbe934", "filename": "src/tools/miri/tests/pass/issues/issue-miri-2433.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aada2d16892ed411d9f6d22b3b9dcfcf47977647/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-2433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aada2d16892ed411d9f6d22b3b9dcfcf47977647/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-2433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-2433.rs?ref=aada2d16892ed411d9f6d22b3b9dcfcf47977647", "patch": "@@ -1,24 +0,0 @@\n-#![feature(type_alias_impl_trait)]\n-\n-trait T {\n-    type Item;\n-}\n-\n-type Alias<'a> = impl T<Item = &'a ()>;\n-\n-struct S;\n-impl<'a> T for &'a S {\n-    type Item = &'a ();\n-}\n-\n-fn filter_positive<'a>() -> Alias<'a> {\n-    &S\n-}\n-\n-fn with_positive(fun: impl Fn(Alias<'_>)) {\n-    fun(filter_positive());\n-}\n-\n-fn main() {\n-    with_positive(|_| ());\n-}"}, {"sha": "cfba7d583b138633d8ad151badc188f60a1784b0", "filename": "src/tools/miropt-test-tools/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -11,7 +11,7 @@ pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<\n     let test_file_contents = fs::read_to_string(&testfile).unwrap();\n \n     let test_dir = testfile.parent().unwrap();\n-    let test_crate = testfile.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n+    let test_crate = testfile.file_stem().unwrap().to_str().unwrap().replace('-', \"_\");\n \n     let bit_width = if test_file_contents.lines().any(|l| l == \"// EMIT_MIR_FOR_EACH_BIT_WIDTH\") {\n         format!(\".{}bit\", bit_width)"}, {"sha": "23f55db773e6c01e52ab624b95a681b019f7ddbb", "filename": "src/tools/rustfmt/src/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -290,10 +290,10 @@ impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         Some(match self.kind {\n             ast::MetaItemKind::Word => {\n-                rewrite_path(context, PathContext::Type, None, &self.path, shape)?\n+                rewrite_path(context, PathContext::Type, &None, &self.path, shape)?\n             }\n             ast::MetaItemKind::List(ref list) => {\n-                let path = rewrite_path(context, PathContext::Type, None, &self.path, shape)?;\n+                let path = rewrite_path(context, PathContext::Type, &None, &self.path, shape)?;\n                 let has_trailing_comma = crate::expr::span_ends_with_comma(context, self.span);\n                 overflow::rewrite_with_parens(\n                     context,\n@@ -311,7 +311,7 @@ impl Rewrite for ast::MetaItem {\n                 )?\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n-                let path = rewrite_path(context, PathContext::Type, None, &self.path, shape)?;\n+                let path = rewrite_path(context, PathContext::Type, &None, &self.path, shape)?;\n                 // 3 = ` = `\n                 let lit_shape = shape.shrink_left(path.len() + 3)?;\n                 // `rewrite_literal` returns `None` when `literal` exceeds max"}, {"sha": "a1a73cf4bd570f2ee495766e207e2e7935487773", "filename": "src/tools/rustfmt/src/chains.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -145,8 +145,8 @@ impl ChainItemKind {\n \n     fn from_ast(context: &RewriteContext<'_>, expr: &ast::Expr) -> (ChainItemKind, Span) {\n         let (kind, span) = match expr.kind {\n-            ast::ExprKind::MethodCall(ref segment, ref receiver, ref expressions, _) => {\n-                let types = if let Some(ref generic_args) = segment.args {\n+            ast::ExprKind::MethodCall(ref call) => {\n+                let types = if let Some(ref generic_args) = call.seg.args {\n                     if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n                         data.args\n                             .iter()\n@@ -163,8 +163,8 @@ impl ChainItemKind {\n                 } else {\n                     vec![]\n                 };\n-                let span = mk_sp(receiver.span.hi(), expr.span.hi());\n-                let kind = ChainItemKind::MethodCall(segment.clone(), types, expressions.clone());\n+                let span = mk_sp(call.receiver.span.hi(), expr.span.hi());\n+                let kind = ChainItemKind::MethodCall(call.seg.clone(), types, call.args.clone());\n                 (kind, span)\n             }\n             ast::ExprKind::Field(ref nested, field) => {\n@@ -400,9 +400,7 @@ impl Chain {\n     // is a try! macro, we'll convert it to shorthand when the option is set.\n     fn pop_expr_chain(expr: &ast::Expr, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n         match expr.kind {\n-            ast::ExprKind::MethodCall(_, ref receiver, _, _) => {\n-                Some(Self::convert_try(&receiver, context))\n-            }\n+            ast::ExprKind::MethodCall(ref call) => Some(Self::convert_try(&call.receiver, context)),\n             ast::ExprKind::Field(ref subexpr, _)\n             | ast::ExprKind::Try(ref subexpr)\n             | ast::ExprKind::Await(ref subexpr) => Some(Self::convert_try(subexpr, context)),"}, {"sha": "423c3a997f53da7e8879bbb797b92a2774026569", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -326,16 +326,16 @@ pub(crate) fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(\n-        ref binder,\n-        capture,\n-        ref is_async,\n-        movability,\n-        ref fn_decl,\n-        ref body,\n-        _,\n-    ) = expr.kind\n-    {\n+    if let ast::ExprKind::Closure(ref closure) = expr.kind {\n+        let ast::Closure {\n+            ref binder,\n+            capture_clause,\n+            ref asyncness,\n+            movability,\n+            ref fn_decl,\n+            ref body,\n+            fn_decl_span: _,\n+        } = **closure;\n         let body = match body.kind {\n             ast::ExprKind::Block(ref block, _)\n                 if !is_unsafe_block(block)\n@@ -347,7 +347,15 @@ pub(crate) fn rewrite_last_closure(\n             _ => body,\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+            binder,\n+            capture_clause,\n+            asyncness,\n+            movability,\n+            fn_decl,\n+            body,\n+            expr.span,\n+            context,\n+            shape,\n         )?;\n         // If the closure goes multi line before its body, do not overflow the closure.\n         if prefix.contains('\\n') {"}, {"sha": "aba1c484bf1ddc028e8507fd59517c9a9691e6a1", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -116,7 +116,7 @@ pub(crate) fn format_expr(\n             rewrite_struct_lit(\n                 context,\n                 path,\n-                qself.as_ref(),\n+                qself,\n                 fields,\n                 rest,\n                 &expr.attrs,\n@@ -169,7 +169,7 @@ pub(crate) fn format_expr(\n             rewrite_match(context, cond, arms, shape, expr.span, &expr.attrs)\n         }\n         ast::ExprKind::Path(ref qself, ref path) => {\n-            rewrite_path(context, PathContext::Expr, qself.as_ref(), path, shape)\n+            rewrite_path(context, PathContext::Expr, qself, path, shape)\n         }\n         ast::ExprKind::Assign(ref lhs, ref rhs, _) => {\n             rewrite_assignment(context, lhs, rhs, None, shape)\n@@ -203,16 +203,16 @@ pub(crate) fn format_expr(\n                 Some(\"yield\".to_string())\n             }\n         }\n-        ast::ExprKind::Closure(\n-            ref binder,\n-            capture,\n-            ref is_async,\n-            movability,\n-            ref fn_decl,\n-            ref body,\n-            _,\n-        ) => closures::rewrite_closure(\n-            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+        ast::ExprKind::Closure(ref cl) => closures::rewrite_closure(\n+            &cl.binder,\n+            cl.capture_clause,\n+            &cl.asyncness,\n+            cl.movability,\n+            &cl.fn_decl,\n+            &cl.body,\n+            expr.span,\n+            context,\n+            shape,\n         ),\n         ast::ExprKind::Try(..)\n         | ast::ExprKind::Field(..)\n@@ -1537,7 +1537,7 @@ fn struct_lit_can_be_aligned(fields: &[ast::ExprField], has_base: bool) -> bool\n fn rewrite_struct_lit<'a>(\n     context: &RewriteContext<'_>,\n     path: &ast::Path,\n-    qself: Option<&ast::QSelf>,\n+    qself: &Option<ptr::P<ast::QSelf>>,\n     fields: &'a [ast::ExprField],\n     struct_rest: &ast::StructRest,\n     attrs: &[ast::Attribute],"}, {"sha": "3f335172590ec808e44a3a667905e1764cd01aba", "filename": "src/tools/rustfmt/src/patterns.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -227,11 +227,10 @@ impl Rewrite for Pat {\n             }\n             PatKind::Tuple(ref items) => rewrite_tuple_pat(items, None, self.span, context, shape),\n             PatKind::Path(ref q_self, ref path) => {\n-                rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)\n+                rewrite_path(context, PathContext::Expr, q_self, path, shape)\n             }\n             PatKind::TupleStruct(ref q_self, ref path, ref pat_vec) => {\n-                let path_str =\n-                    rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)?;\n+                let path_str = rewrite_path(context, PathContext::Expr, q_self, path, shape)?;\n                 rewrite_tuple_pat(pat_vec, Some(path_str), self.span, context, shape)\n             }\n             PatKind::Lit(ref expr) => expr.rewrite(context, shape),\n@@ -271,7 +270,7 @@ impl Rewrite for Pat {\n }\n \n fn rewrite_struct_pat(\n-    qself: &Option<ast::QSelf>,\n+    qself: &Option<ptr::P<ast::QSelf>>,\n     path: &ast::Path,\n     fields: &[ast::PatField],\n     ellipsis: bool,\n@@ -281,7 +280,7 @@ fn rewrite_struct_pat(\n ) -> Option<String> {\n     // 2 =  ` {`\n     let path_shape = shape.sub_width(2)?;\n-    let path_str = rewrite_path(context, PathContext::Expr, qself.as_ref(), path, path_shape)?;\n+    let path_str = rewrite_path(context, PathContext::Expr, qself, path, path_shape)?;\n \n     if fields.is_empty() && !ellipsis {\n         return Some(format!(\"{} {{}}\", path_str));"}, {"sha": "d5177a2057b8ab05fb3daebe466de1d87dc32710", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -38,11 +38,11 @@ pub(crate) enum PathContext {\n pub(crate) fn rewrite_path(\n     context: &RewriteContext<'_>,\n     path_context: PathContext,\n-    qself: Option<&ast::QSelf>,\n+    qself: &Option<ptr::P<ast::QSelf>>,\n     path: &ast::Path,\n     shape: Shape,\n ) -> Option<String> {\n-    let skip_count = qself.map_or(0, |x| x.position);\n+    let skip_count = qself.as_ref().map_or(0, |x| x.position);\n \n     let mut result = if path.is_global() && qself.is_none() && path_context != PathContext::Import {\n         \"::\".to_owned()\n@@ -655,7 +655,7 @@ impl Rewrite for ast::PolyTraitRef {\n \n impl Rewrite for ast::TraitRef {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        rewrite_path(context, PathContext::Type, None, &self.path, shape)\n+        rewrite_path(context, PathContext::Type, &None, &self.path, shape)\n     }\n }\n \n@@ -800,7 +800,7 @@ impl Rewrite for ast::Ty {\n                 rewrite_tuple(context, items.iter(), self.span, shape, items.len() == 1)\n             }\n             ast::TyKind::Path(ref q_self, ref path) => {\n-                rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n+                rewrite_path(context, PathContext::Type, q_self, path, shape)\n             }\n             ast::TyKind::Array(ref ty, ref repeats) => rewrite_pair(\n                 &**ty,"}, {"sha": "136a2c7fce24a802aac4c6e252e818b12db00ea1", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -479,9 +479,9 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Binary(_, _, ref expr)\n         | ast::ExprKind::Index(_, ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Closure(_, _, _, _, _, ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Yield(Some(ref expr)) => is_block_expr(context, expr, repr),\n+        ast::ExprKind::Closure(ref closure) => is_block_expr(context, &closure.body, repr),\n         // This can only be a string lit\n         ast::ExprKind::Lit(_) => {\n             repr.contains('\\n') && trimmed_last_line_width(repr) <= context.config.tab_spaces()"}, {"sha": "8155ec9dd27e22e0ffb15809efe04a87ca065f06", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3865e654f02c918e7b6ac7415dc6a9adb0dd436d/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=3865e654f02c918e7b6ac7415dc6a9adb0dd436d", "patch": "@@ -133,6 +133,11 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"hashbrown\",\n     \"hermit-abi\",\n     \"humantime\",\n+    \"icu_list\",\n+    \"icu_locid\",\n+    \"icu_provider\",\n+    \"icu_provider_adapters\",\n+    \"icu_provider_macros\",\n     \"if_chain\",\n     \"indexmap\",\n     \"instant\",\n@@ -145,6 +150,7 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"libc\",\n     \"libloading\",\n     \"libz-sys\",\n+    \"litemap\",\n     \"lock_api\",\n     \"log\",\n     \"matchers\",\n@@ -253,9 +259,16 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"winapi-i686-pc-windows-gnu\",\n     \"winapi-util\",\n     \"winapi-x86_64-pc-windows-gnu\",\n+    \"writeable\",\n     // this is a false-positive: it's only used by rustfmt, but because it's enabled through a\n     // feature, tidy thinks it's used by rustc as well.\n     \"yansi-term\",\n+    \"yoke\",\n+    \"yoke-derive\",\n+    \"zerofrom\",\n+    \"zerofrom-derive\",\n+    \"zerovec\",\n+    \"zerovec-derive\",\n ];\n \n const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &["}]}