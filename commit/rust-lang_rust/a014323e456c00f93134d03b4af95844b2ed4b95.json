{"sha": "a014323e456c00f93134d03b4af95844b2ed4b95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMTQzMjNlNDU2YzAwZjkzMTM0ZDAzYjRhZjk1ODQ0YjJlZDRiOTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-08T22:18:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:33Z"}, "message": "Lower unions from AST to HIR and from HIR to types\n\nParse union items and add a feature for them", "tree": {"sha": "8d7c47cd7c965a03d8daf195d6a7f1d29a22fdf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d7c47cd7c965a03d8daf195d6a7f1d29a22fdf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a014323e456c00f93134d03b4af95844b2ed4b95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a014323e456c00f93134d03b4af95844b2ed4b95", "html_url": "https://github.com/rust-lang/rust/commit/a014323e456c00f93134d03b4af95844b2ed4b95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a014323e456c00f93134d03b4af95844b2ed4b95/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd912babab4b8cebe9e90a632117913ca192743", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd912babab4b8cebe9e90a632117913ca192743", "html_url": "https://github.com/rust-lang/rust/commit/cbd912babab4b8cebe9e90a632117913ca192743"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "80e034721d63f59228821a805d9bd38d93ebdd8c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a014323e456c00f93134d03b4af95844b2ed4b95", "patch": "@@ -638,7 +638,10 @@ impl<'a> LoweringContext<'a> {\n                 let struct_def = self.lower_variant_data(struct_def);\n                 hir::ItemStruct(struct_def, self.lower_generics(generics))\n             }\n-            ItemKind::Union(..) => panic!(\"`union` is not yet implemented\"),\n+            ItemKind::Union(ref vdata, ref generics) => {\n+                let vdata = self.lower_variant_data(vdata);\n+                hir::ItemUnion(vdata, self.lower_generics(generics))\n+            }\n             ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n                 hir::ItemDefaultImpl(self.lower_unsafety(unsafety),\n                                      self.lower_trait_ref(trait_ref))"}, {"sha": "0fc1641d31f705021016849f30e227fcf1ffebcd", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a014323e456c00f93134d03b4af95844b2ed4b95", "patch": "@@ -1321,6 +1321,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TyStruct(def, substs))\n     }\n \n+    pub fn mk_union(self, def: AdtDef<'tcx>, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n+        // take a copy of substs so that we own the vectors inside\n+        self.mk_ty(TyUnion(def, substs))\n+    }\n+\n     pub fn mk_closure(self,\n                       closure_id: DefId,\n                       substs: &'tcx Substs<'tcx>,"}, {"sha": "4cda74911138eacbed00827994634564fc6e50aa", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a014323e456c00f93134d03b4af95844b2ed4b95", "patch": "@@ -1514,7 +1514,7 @@ impl<'tcx> Decodable for AdtDef<'tcx> {\n \n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub enum AdtKind { Struct, Enum }\n+pub enum AdtKind { Struct, Union, Enum }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum VariantKind { Struct, Tuple, Unit }\n@@ -1545,8 +1545,10 @@ impl<'a, 'gcx, 'tcx, 'container> AdtDefData<'gcx, 'container> {\n         if Some(did) == tcx.lang_items.phantom_data() {\n             flags = flags | AdtFlags::IS_PHANTOM_DATA;\n         }\n-        if let AdtKind::Enum = kind {\n-            flags = flags | AdtFlags::IS_ENUM;\n+        match kind {\n+            AdtKind::Enum => flags = flags | AdtFlags::IS_ENUM,\n+            AdtKind::Union => flags = flags | AdtFlags::IS_UNION,\n+            AdtKind::Struct => {}\n         }\n         AdtDefData {\n             did: did,\n@@ -1569,6 +1571,8 @@ impl<'a, 'gcx, 'tcx, 'container> AdtDefData<'gcx, 'container> {\n     pub fn adt_kind(&self) -> AdtKind {\n         if self.flags.get().intersects(AdtFlags::IS_ENUM) {\n             AdtKind::Enum\n+        } else if self.flags.get().intersects(AdtFlags::IS_UNION) {\n+            AdtKind::Union\n         } else {\n             AdtKind::Struct\n         }"}, {"sha": "cd2eb4d2b58bd62b01fba0d843c6c2337ae7af16", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a014323e456c00f93134d03b4af95844b2ed4b95", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n \n     // Checks that a field is in scope.\n     fn check_field(&mut self, span: Span, def: ty::AdtDef<'tcx>, field: ty::FieldDef<'tcx>) {\n-        if def.adt_kind() == ty::AdtKind::Struct &&\n+        if def.adt_kind() != ty::AdtKind::Enum &&\n            !field.vis.is_accessible_from(self.curitem, &self.tcx.map) {\n             struct_span_err!(self.tcx.sess, span, E0451, \"field `{}` of struct `{}` is private\",\n                       field.name, self.tcx.item_path_str(def.did))"}, {"sha": "bd47ff0b00b7bbe9159c6cb2384302f4a5ba31df", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=a014323e456c00f93134d03b4af95844b2ed4b95", "patch": "@@ -304,7 +304,8 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'gcx, 'tcx>(\n                                                      tcx.item_path_str(def_id),\n                                                      variant),\n                         ty::AdtKind::Struct => format!(\"struct {}\",\n-                                                       tcx.item_path_str(def_id))\n+                                                       tcx.item_path_str(def_id)),\n+                        ty::AdtKind::Union => unimplemented_unions!(),\n                     };\n                     span_note!(\n                         &mut err,"}, {"sha": "7f9de2becee6ef75ec81dd4fa10da49def5df9eb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a014323e456c00f93134d03b4af95844b2ed4b95", "patch": "@@ -1069,6 +1069,16 @@ fn convert_struct_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     adt\n }\n \n+fn convert_union_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n+                                it: &hir::Item,\n+                                def: &hir::VariantData)\n+                                -> ty::AdtDefMaster<'tcx>\n+{\n+    let did = ccx.tcx.map.local_def_id(it.id);\n+    let variants = vec![convert_struct_variant(ccx, did, it.name, ConstInt::Infer(0), def)];\n+    ccx.tcx.intern_adt_def(did, ty::AdtKind::Union, variants)\n+}\n+\n     fn evaluate_disr_expr(ccx: &CrateCtxt, repr_ty: attr::IntType, e: &hir::Expr)\n                           -> Option<ty::Disr> {\n         debug!(\"disr expr, checking {}\", pprust::expr_to_string(e));"}, {"sha": "b40124bd7741a8da040e2bdbe60ad7d9a2b27af7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a014323e456c00f93134d03b4af95844b2ed4b95", "patch": "@@ -292,6 +292,9 @@ declare_features! (\n \n     // Macros 1.1\n     (active, rustc_macro, \"1.13.0\", Some(35900)),\n+\n+    // Allows untagged unions `union U { ... }`\n+    (active, untagged_unions, \"1.13.0\", Some(32836)),\n );\n \n declare_features! (\n@@ -953,6 +956,12 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                 }\n             }\n \n+            ast::ItemKind::Union(..) => {\n+                gate_feature_post!(&self, untagged_unions,\n+                                   i.span,\n+                                   \"unions are unstable and not fully implemented\");\n+            }\n+\n             ast::ItemKind::DefaultImpl(..) => {\n                 gate_feature_post!(&self, optin_builtin_traits,\n                                    i.span,"}, {"sha": "290a59cf1e59146802500a9418bbbdc3f8df4447", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a014323e456c00f93134d03b4af95844b2ed4b95/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a014323e456c00f93134d03b4af95844b2ed4b95", "patch": "@@ -5102,6 +5102,25 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Struct(vdata, generics), None))\n     }\n \n+    /// Parse union Foo { ... }\n+    fn parse_item_union(&mut self) -> PResult<'a, ItemInfo> {\n+        let class_name = self.parse_ident()?;\n+        let mut generics = self.parse_generics()?;\n+\n+        let vdata = if self.token.is_keyword(keywords::Where) {\n+            generics.where_clause = self.parse_where_clause()?;\n+            VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n+        } else if self.token == token::OpenDelim(token::Brace) {\n+            VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n+        } else {\n+            let token_str = self.this_token_to_string();\n+            return Err(self.fatal(&format!(\"expected `where` or `{{` after union \\\n+                                            name, found `{}`\", token_str)))\n+        };\n+\n+        Ok((class_name, ItemKind::Union(vdata, generics), None))\n+    }\n+\n     pub fn parse_record_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n         let mut fields = Vec::new();\n         if self.eat(&token::OpenDelim(token::Brace)) {\n@@ -5938,6 +5957,18 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n+        if self.eat_keyword(keywords::Union) {\n+            // UNION ITEM\n+            let (ident, item_, extra_attrs) = self.parse_item_union()?;\n+            let last_span = self.last_span;\n+            let item = self.mk_item(lo,\n+                                    last_span.hi,\n+                                    ident,\n+                                    item_,\n+                                    visibility,\n+                                    maybe_append(attrs, extra_attrs));\n+            return Ok(Some(item));\n+        }\n         self.parse_macro_use_or_failure(attrs,macros_allowed,attributes_allowed,lo,visibility)\n     }\n "}]}