{"sha": "3550068b531703bc492b0f97331c6a2bcafecf37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NTAwNjhiNTMxNzAzYmM0OTJiMGY5NzMzMWM2YTJiY2FmZWNmMzc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-24T02:57:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T14:26:22Z"}, "message": "librustc: Make bare functions implement the `FnMut` trait.\n\nThis is done entirely in the libraries for functions up to 16 arguments.\nA macro is used so that more arguments can be easily added if we need.\nNote that I had to adjust the overloaded call algorithm to not try\ncalling the overloaded call operator if the callee is a built-in\nfunction type, to prevent loops.\n\nCloses #15448.", "tree": {"sha": "4f804314e83b3ed0f59dc56bd3e8405de3b353b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f804314e83b3ed0f59dc56bd3e8405de3b353b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3550068b531703bc492b0f97331c6a2bcafecf37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3550068b531703bc492b0f97331c6a2bcafecf37", "html_url": "https://github.com/rust-lang/rust/commit/3550068b531703bc492b0f97331c6a2bcafecf37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3550068b531703bc492b0f97331c6a2bcafecf37/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31ac8a90f1fbe66c3ad34ef0e5f48bc5f7026059", "url": "https://api.github.com/repos/rust-lang/rust/commits/31ac8a90f1fbe66c3ad34ef0e5f48bc5f7026059", "html_url": "https://github.com/rust-lang/rust/commit/31ac8a90f1fbe66c3ad34ef0e5f48bc5f7026059"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "839243970ac673ed40080d84c55212b76aa3b50d", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3550068b531703bc492b0f97331c6a2bcafecf37/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3550068b531703bc492b0f97331c6a2bcafecf37/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=3550068b531703bc492b0f97331c6a2bcafecf37", "patch": "@@ -769,3 +769,37 @@ pub trait FnOnce<Args,Result> {\n     fn call_once(self, args: Args) -> Result;\n }\n \n+macro_rules! def_fn_mut(\n+    ($($args:ident)*) => (\n+        #[cfg(not(stage0))]\n+        impl<Result$(,$args)*>\n+        FnMut<($($args,)*),Result>\n+        for extern \"Rust\" fn($($args: $args,)*) -> Result {\n+            #[rust_call_abi_hack]\n+            #[allow(uppercase_variables)]\n+            fn call_mut(&mut self, args: ($($args,)*)) -> Result {\n+                let ($($args,)*) = args;\n+                (*self)($($args,)*)\n+            }\n+        }\n+    )\n+)\n+\n+def_fn_mut!()\n+def_fn_mut!(A0)\n+def_fn_mut!(A0 A1)\n+def_fn_mut!(A0 A1 A2)\n+def_fn_mut!(A0 A1 A2 A3)\n+def_fn_mut!(A0 A1 A2 A3 A4)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5 A6)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14)\n+def_fn_mut!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14 A15)\n+"}, {"sha": "39e79040e8367d312a45dcde09e239fc9ff9b38f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3550068b531703bc492b0f97331c6a2bcafecf37/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3550068b531703bc492b0f97331c6a2bcafecf37/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3550068b531703bc492b0f97331c6a2bcafecf37", "patch": "@@ -1541,6 +1541,13 @@ fn try_overloaded_call(fcx: &FnCtxt,\n                        callee_type: ty::t,\n                        args: &[Gc<ast::Expr>])\n                        -> bool {\n+    // Bail out if the callee is a bare function or a closure. We check those\n+    // manually.\n+    match *structure_of(fcx, callee.span, callee_type) {\n+        ty::ty_bare_fn(_) | ty::ty_closure(_) => return false,\n+        _ => {}\n+    }\n+\n     // Try `FnOnce`, then `FnMut`, then `Fn`.\n     for &(maybe_function_trait, method_name) in [\n         (fcx.tcx().lang_items.fn_once_trait(), token::intern(\"call_once\")),"}, {"sha": "0116518d537a75dee4ddb72c2dc878c26683583a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3550068b531703bc492b0f97331c6a2bcafecf37/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3550068b531703bc492b0f97331c6a2bcafecf37/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3550068b531703bc492b0f97331c6a2bcafecf37", "patch": "@@ -4045,7 +4045,8 @@ impl<'a> Parser<'a> {\n \n     /// Parse a method in a trait impl, starting with `attrs` attributes.\n     pub fn parse_method(&mut self,\n-                    already_parsed_attrs: Option<Vec<Attribute>>) -> Gc<Method> {\n+                        already_parsed_attrs: Option<Vec<Attribute>>)\n+                        -> Gc<Method> {\n         let next_attrs = self.parse_outer_attributes();\n         let attrs = match already_parsed_attrs {\n             Some(mut a) => { a.push_all_move(next_attrs); a }\n@@ -4083,6 +4084,11 @@ impl<'a> Parser<'a> {\n                 let visa = self.parse_visibility();\n                 let abi = if self.eat_keyword(keywords::Extern) {\n                     self.parse_opt_abi().unwrap_or(abi::C)\n+                } else if attr::contains_name(attrs.as_slice(),\n+                                              \"rust_call_abi_hack\") {\n+                    // FIXME(stage0, pcwalton): Remove this awful hack after a\n+                    // snapshot, and change to `extern \"rust-call\" fn`.\n+                    abi::RustCall\n                 } else {\n                     abi::Rust\n                 };"}, {"sha": "37c551734defbb9dc546fce335861d8f9cb17d60", "filename": "src/test/run-pass/bare-fn-implements-fn-mut.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3550068b531703bc492b0f97331c6a2bcafecf37/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3550068b531703bc492b0f97331c6a2bcafecf37/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs?ref=3550068b531703bc492b0f97331c6a2bcafecf37", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(overloaded_calls)]\n+\n+use std::ops::FnMut;\n+\n+fn call_f<F:FnMut<(),()>>(mut f: F) {\n+    f();\n+}\n+\n+fn f() {\n+    println!(\"hello\");\n+}\n+\n+fn call_g<G:FnMut<(String,String),String>>(mut g: G, x: String, y: String)\n+          -> String {\n+    g(x, y)\n+}\n+\n+fn g(x: String, y: String) -> String {\n+    x.append(y.as_slice())\n+}\n+\n+fn main() {\n+    call_f(f);\n+    assert_eq!(call_g(g, \"foo\".to_string(), \"bar\".to_string()).as_slice(),\n+               \"foobar\");\n+}\n+"}]}