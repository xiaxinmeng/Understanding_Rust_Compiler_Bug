{"sha": "43c6eced848034cf10018b109245263e2428bb1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYzZlY2VkODQ4MDM0Y2YxMDAxOGIxMDkyNDUyNjNlMjQyOGJiMWY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-12-11T22:42:54Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-12-12T09:36:00Z"}, "message": "Remove `RcVec` and `RcSlice`.\n\nThey're both unused now.", "tree": {"sha": "74d1c0b0155e6f8d7d265fcbeaeb69323e3a3513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74d1c0b0155e6f8d7d265fcbeaeb69323e3a3513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43c6eced848034cf10018b109245263e2428bb1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43c6eced848034cf10018b109245263e2428bb1f", "html_url": "https://github.com/rust-lang/rust/commit/43c6eced848034cf10018b109245263e2428bb1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43c6eced848034cf10018b109245263e2428bb1f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c9aef1f452d9b7063d908fc40012e39ae1d2d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9aef1f452d9b7063d908fc40012e39ae1d2d16", "html_url": "https://github.com/rust-lang/rust/commit/3c9aef1f452d9b7063d908fc40012e39ae1d2d16"}], "stats": {"total": 161, "additions": 0, "deletions": 161}, "files": [{"sha": "1fa11a4d6c856a3467bc3867bc1a91472e8db51f", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43c6eced848034cf10018b109245263e2428bb1f/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43c6eced848034cf10018b109245263e2428bb1f/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=43c6eced848034cf10018b109245263e2428bb1f", "patch": "@@ -145,12 +145,6 @@ pub mod util {\n     #[cfg(test)]\n     pub mod parser_testing;\n     pub mod move_map;\n-\n-    mod rc_slice;\n-    pub use self::rc_slice::RcSlice;\n-\n-    mod rc_vec;\n-    pub use self::rc_vec::RcVec;\n }\n \n pub mod json;"}, {"sha": "520b7a48e3025a205128dd86f37e21ef5309129d", "filename": "src/libsyntax/util/rc_slice.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3c9aef1f452d9b7063d908fc40012e39ae1d2d16/src%2Flibsyntax%2Futil%2Frc_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9aef1f452d9b7063d908fc40012e39ae1d2d16/src%2Flibsyntax%2Futil%2Frc_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Frc_slice.rs?ref=3c9aef1f452d9b7063d908fc40012e39ae1d2d16", "patch": "@@ -1,64 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::fmt;\n-use std::ops::{Deref, Range};\n-use rustc_data_structures::sync::Lrc;\n-\n-use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n-                                           HashStable};\n-\n-#[derive(Clone)]\n-pub struct RcSlice<T> {\n-    data: Lrc<Box<[T]>>,\n-    offset: u32,\n-    len: u32,\n-}\n-\n-impl<T> RcSlice<T> {\n-    pub fn new(vec: Vec<T>) -> Self {\n-        RcSlice {\n-            offset: 0,\n-            len: vec.len() as u32,\n-            data: Lrc::new(vec.into_boxed_slice()),\n-        }\n-    }\n-\n-    pub fn sub_slice(&self, range: Range<usize>) -> Self {\n-        RcSlice {\n-            data: self.data.clone(),\n-            offset: self.offset + range.start as u32,\n-            len: (range.end - range.start) as u32,\n-        }\n-    }\n-}\n-\n-impl<T> Deref for RcSlice<T> {\n-    type Target = [T];\n-    fn deref(&self) -> &[T] {\n-        &self.data[self.offset as usize .. (self.offset + self.len) as usize]\n-    }\n-}\n-\n-impl<T: fmt::Debug> fmt::Debug for RcSlice<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(self.deref(), f)\n-    }\n-}\n-\n-impl<CTX, T> HashStable<CTX> for RcSlice<T>\n-    where T: HashStable<CTX>\n-{\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut CTX,\n-                                          hasher: &mut StableHasher<W>) {\n-        (**self).hash_stable(hcx, hasher);\n-    }\n-}"}, {"sha": "99fbce1ad91e1e27106e3a0590d7d9fee7b8d1b7", "filename": "src/libsyntax/util/rc_vec.rs", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/3c9aef1f452d9b7063d908fc40012e39ae1d2d16/src%2Flibsyntax%2Futil%2Frc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9aef1f452d9b7063d908fc40012e39ae1d2d16/src%2Flibsyntax%2Futil%2Frc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Frc_vec.rs?ref=3c9aef1f452d9b7063d908fc40012e39ae1d2d16", "patch": "@@ -1,90 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::fmt;\n-use std::ops::{Deref, Range};\n-\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n-use rustc_data_structures::sync::Lrc;\n-\n-#[derive(Clone)]\n-pub struct RcVec<T> {\n-    data: Lrc<Vec<T>>,\n-    offset: u32,\n-    len: u32,\n-}\n-\n-impl<T> RcVec<T> {\n-    pub fn new(mut vec: Vec<T>) -> Self {\n-        // By default, constructing RcVec from Vec gives it just enough capacity\n-        // to hold the initial elements. Callers that anticipate needing to\n-        // extend the vector may prefer RcVec::new_preserving_capacity.\n-        vec.shrink_to_fit();\n-        Self::new_preserving_capacity(vec)\n-    }\n-\n-    pub fn new_preserving_capacity(vec: Vec<T>) -> Self {\n-        RcVec {\n-            offset: 0,\n-            len: vec.len() as u32,\n-            data: Lrc::new(vec),\n-        }\n-    }\n-\n-    pub fn sub_slice(&self, range: Range<usize>) -> Self {\n-        RcVec {\n-            data: self.data.clone(),\n-            offset: self.offset + range.start as u32,\n-            len: (range.end - range.start) as u32,\n-        }\n-    }\n-\n-    /// If this RcVec has exactly one strong reference, returns ownership of the\n-    /// underlying vector. Otherwise returns self unmodified.\n-    pub fn try_unwrap(self) -> Result<Vec<T>, Self> {\n-        match Lrc::try_unwrap(self.data) {\n-            // If no other RcVec shares ownership of this data.\n-            Ok(mut vec) => {\n-                // Drop any elements after our view of the data.\n-                vec.truncate(self.offset as usize + self.len as usize);\n-                // Drop any elements before our view of the data. Do this after\n-                // the `truncate` so that elements past the end of our view do\n-                // not need to be copied around.\n-                vec.drain(..self.offset as usize);\n-                Ok(vec)\n-            }\n-\n-            // If the data is shared.\n-            Err(data) => Err(RcVec { data, ..self }),\n-        }\n-    }\n-}\n-\n-impl<T> Deref for RcVec<T> {\n-    type Target = [T];\n-    fn deref(&self) -> &[T] {\n-        &self.data[self.offset as usize..(self.offset + self.len) as usize]\n-    }\n-}\n-\n-impl<T: fmt::Debug> fmt::Debug for RcVec<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(self.deref(), f)\n-    }\n-}\n-\n-impl<CTX, T> HashStable<CTX> for RcVec<T>\n-where\n-    T: HashStable<CTX>,\n-{\n-    fn hash_stable<W: StableHasherResult>(&self, hcx: &mut CTX, hasher: &mut StableHasher<W>) {\n-        (**self).hash_stable(hcx, hasher);\n-    }\n-}"}, {"sha": "1aa647a6a1b7822e4186786a287bdd3d7fbe7ad5", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43c6eced848034cf10018b109245263e2428bb1f/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43c6eced848034cf10018b109245263e2428bb1f/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=43c6eced848034cf10018b109245263e2428bb1f", "patch": "@@ -137,7 +137,6 @@ fn check(cache: &mut Cache,\n        file.ends_with(\"symbol/struct.InternedString.html\") ||\n        file.ends_with(\"ast/struct.ThinVec.html\") ||\n        file.ends_with(\"util/struct.ThinVec.html\") ||\n-       file.ends_with(\"util/struct.RcSlice.html\") ||\n        file.ends_with(\"layout/struct.TyLayout.html\") ||\n        file.ends_with(\"humantime/struct.Timestamp.html\") ||\n        file.ends_with(\"log/index.html\") ||"}]}