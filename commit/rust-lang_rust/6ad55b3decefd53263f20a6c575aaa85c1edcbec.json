{"sha": "6ad55b3decefd53263f20a6c575aaa85c1edcbec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZDU1YjNkZWNlZmQ1MzI2M2YyMGE2YzU3NWFhYTg1YzFlZGNiZWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-02-27T19:06:26Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-16T20:13:15Z"}, "message": "syntax: Introduce `Ident::can_be_raw`", "tree": {"sha": "6ad909da93cbfe48a004e134ea296ada6f84ee42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad909da93cbfe48a004e134ea296ada6f84ee42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ad55b3decefd53263f20a6c575aaa85c1edcbec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad55b3decefd53263f20a6c575aaa85c1edcbec", "html_url": "https://github.com/rust-lang/rust/commit/6ad55b3decefd53263f20a6c575aaa85c1edcbec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ad55b3decefd53263f20a6c575aaa85c1edcbec/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cb5083909f19c107aec186a72b8b9104f8ca30d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb5083909f19c107aec186a72b8b9104f8ca30d", "html_url": "https://github.com/rust-lang/rust/commit/5cb5083909f19c107aec186a72b8b9104f8ca30d"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "bcd53dbfeb2c5de9a865a4770085dc99e4c93bf0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=6ad55b3decefd53263f20a6c575aaa85c1edcbec", "patch": "@@ -1,7 +1,7 @@\n use crate::ast::{self, Ident};\n use crate::source_map::{SourceMap, FilePathMapping};\n use crate::parse::{token, ParseSess};\n-use crate::symbol::{Symbol, keywords};\n+use crate::symbol::Symbol;\n \n use errors::{Applicability, FatalError, Diagnostic, DiagnosticBuilder};\n use syntax_pos::{BytePos, CharPos, Pos, Span, NO_EXPANSION};\n@@ -1249,15 +1249,11 @@ impl<'a> StringReader<'a> {\n                     // FIXME: perform NFKC normalization here. (Issue #2253)\n                     let ident = self.mk_ident(string);\n \n-                    if is_raw_ident && (ident.is_path_segment_keyword() ||\n-                                        ident.name == keywords::Underscore.name()) {\n-                        self.fatal_span_(raw_start, self.pos,\n-                            &format!(\"`r#{}` is not currently supported.\", ident.name)\n-                        ).raise();\n-                    }\n-\n                     if is_raw_ident {\n                         let span = self.mk_sp(raw_start, self.pos);\n+                        if !ident.can_be_raw() {\n+                            self.err_span(span, &format!(\"`{}` cannot be a raw identifier\", ident));\n+                        }\n                         self.sess.raw_identifier_spans.borrow_mut().push(span);\n                     }\n "}, {"sha": "b9510dc08b007df98421d39c68b4e909045e5823", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6ad55b3decefd53263f20a6c575aaa85c1edcbec", "patch": "@@ -895,9 +895,7 @@ impl<'a> Parser<'a> {\n                                            &format!(\"expected identifier, found {}\",\n                                                     self.this_token_descr()));\n         if let token::Ident(ident, false) = &self.token {\n-            if ident.is_reserved() && !ident.is_path_segment_keyword() &&\n-                ident.name != keywords::Underscore.name()\n-            {\n+            if ident.is_raw_guess() {\n                 err.span_suggestion(\n                     self.span,\n                     \"you can escape reserved keywords to use them as identifiers\","}, {"sha": "6787ba6dd43903bf544acaeb8e085c47d223f547", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=6ad55b3decefd53263f20a6c575aaa85c1edcbec", "patch": "@@ -128,7 +128,7 @@ impl<'a> CollectProcMacros<'a> {\n             }\n         };\n \n-        if trait_ident.is_path_segment_keyword() {\n+        if !trait_ident.can_be_raw() {\n             self.handler.span_err(trait_attr.span(),\n                                   &format!(\"`{}` cannot be a name of derive macro\", trait_ident));\n         }\n@@ -162,7 +162,7 @@ impl<'a> CollectProcMacros<'a> {\n                         return None;\n                     }\n                 };\n-                if ident.is_path_segment_keyword() {\n+                if !ident.can_be_raw() {\n                     self.handler.span_err(\n                         attr.span(),\n                         &format!(\"`{}` cannot be a name of derive helper attribute\", ident),"}, {"sha": "c0a9dfe6189defc20309b9047b50aae0e795d405", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=6ad55b3decefd53263f20a6c575aaa85c1edcbec", "patch": "@@ -340,12 +340,8 @@ impl Ident {\n         if !Self::is_valid(string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n         }\n-        if is_raw {\n-            let normalized_sym = Symbol::intern(string);\n-            if normalized_sym == keywords::Underscore.name() ||\n-               ast::Ident::with_empty_ctxt(normalized_sym).is_path_segment_keyword() {\n-                panic!(\"`{:?}` is not a valid raw identifier\", string)\n-            }\n+        if is_raw && !ast::Ident::from_str(string).can_be_raw() {\n+            panic!(\"`{}` cannot be a raw identifier\", string);\n         }\n         Ident { sym, is_raw, span }\n     }"}, {"sha": "e8d215a562e2c36a05b0a2d903bffbdf3d324822", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=6ad55b3decefd53263f20a6c575aaa85c1edcbec", "patch": "@@ -484,11 +484,16 @@ impl Ident {\n         self.name == keywords::DollarCrate.name()\n     }\n \n-    // We see this identifier in a normal identifier position, like variable name or a type.\n-    // How was it written originally? Did it use the raw form? Let's try to guess.\n-    pub fn is_raw_guess(self) -> bool {\n+    /// This identifier can be a raw identifier.\n+    pub fn can_be_raw(self) -> bool {\n         self.name != keywords::Invalid.name() && self.name != keywords::Underscore.name() &&\n-        self.is_reserved() && !self.is_path_segment_keyword()\n+        !self.is_path_segment_keyword()\n+    }\n+\n+    /// We see this identifier in a normal identifier position, like variable name or a type.\n+    /// How was it written originally? Did it use the raw form? Let's try to guess.\n+    pub fn is_raw_guess(self) -> bool {\n+        self.can_be_raw() && self.is_reserved()\n     }\n }\n "}, {"sha": "123a11b6f8543174a54aef3020fa584800182fec", "filename": "src/test/ui/parser/raw/raw-literal-self.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.rs?ref=6ad55b3decefd53263f20a6c575aaa85c1edcbec", "patch": "@@ -1,3 +1,4 @@\n-fn self_test(r#self: u32) {\n-    //~^ ERROR `r#self` is not currently supported.\n+fn main() {\n+    let r#self;\n+    //~^ ERROR `self` cannot be a raw identifier\n }"}, {"sha": "9a330fcdf2aae3375ed338214f513316917256c6", "filename": "src/test/ui/parser/raw/raw-literal-self.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.stderr?ref=6ad55b3decefd53263f20a6c575aaa85c1edcbec", "patch": "@@ -1,8 +1,8 @@\n-error: `r#self` is not currently supported.\n-  --> $DIR/raw-literal-self.rs:1:14\n+error: `self` cannot be a raw identifier\n+  --> $DIR/raw-literal-self.rs:2:9\n    |\n-LL | fn self_test(r#self: u32) {\n-   |              ^^^^^^\n+LL |     let r#self;\n+   |         ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6d15f1e7f0afdda43b0934c3b3daf319ea67f109", "filename": "src/test/ui/parser/raw/raw-literal-underscore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.rs?ref=6ad55b3decefd53263f20a6c575aaa85c1edcbec", "patch": "@@ -1,3 +1,4 @@\n-fn underscore_test(r#_: u32) {\n-    //~^ ERROR `r#_` is not currently supported.\n+fn main() {\n+    let r#_;\n+    //~^ ERROR `_` cannot be a raw identifier\n }"}, {"sha": "d96b14f55a39b2da20fc5b330e734aa032a81c49", "filename": "src/test/ui/parser/raw/raw-literal-underscore.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.stderr?ref=6ad55b3decefd53263f20a6c575aaa85c1edcbec", "patch": "@@ -1,8 +1,8 @@\n-error: `r#_` is not currently supported.\n-  --> $DIR/raw-literal-underscore.rs:1:20\n+error: `_` cannot be a raw identifier\n+  --> $DIR/raw-literal-underscore.rs:2:9\n    |\n-LL | fn underscore_test(r#_: u32) {\n-   |                    ^^^\n+LL |     let r#_;\n+   |         ^^^\n \n error: aborting due to previous error\n "}, {"sha": "24371f3a2a6dbc3620ff4e9eb10d32e7f8d8ecbd", "filename": "src/test/ui/proc-macro/invalid-punct-ident-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ad55b3decefd53263f20a6c575aaa85c1edcbec/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr?ref=6ad55b3decefd53263f20a6c575aaa85c1edcbec", "patch": "@@ -4,7 +4,7 @@ error: proc macro panicked\n LL | invalid_raw_ident!();\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: message: `\"self\"` is not a valid raw identifier\n+   = help: message: `self` cannot be a raw identifier\n \n error: aborting due to previous error\n "}]}