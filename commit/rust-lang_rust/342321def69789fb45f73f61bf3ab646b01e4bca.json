{"sha": "342321def69789fb45f73f61bf3ab646b01e4bca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MjMyMWRlZjY5Nzg5ZmI0NWY3M2Y2MWJmM2FiNjQ2YjAxZTRiY2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-05T11:11:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-05T11:11:47Z"}, "message": "auto merge of #15442 : luqmana/rust/odp, r=pnkfelix\n\nInadvertently changed the order in which destructors ran in certain cases with #15076.\r\n\r\nFixes #15438.", "tree": {"sha": "2c6578aa3f16b9cef48f6076ccea6657f261d1fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c6578aa3f16b9cef48f6076ccea6657f261d1fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/342321def69789fb45f73f61bf3ab646b01e4bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/342321def69789fb45f73f61bf3ab646b01e4bca", "html_url": "https://github.com/rust-lang/rust/commit/342321def69789fb45f73f61bf3ab646b01e4bca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/342321def69789fb45f73f61bf3ab646b01e4bca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0d3cf6b2a1db489520712f7e0a47874176c35de", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d3cf6b2a1db489520712f7e0a47874176c35de", "html_url": "https://github.com/rust-lang/rust/commit/e0d3cf6b2a1db489520712f7e0a47874176c35de"}, {"sha": "1af8663579c0e0eb08fda29df51d0eefb2e2b6de", "url": "https://api.github.com/repos/rust-lang/rust/commits/1af8663579c0e0eb08fda29df51d0eefb2e2b6de", "html_url": "https://github.com/rust-lang/rust/commit/1af8663579c0e0eb08fda29df51d0eefb2e2b6de"}], "stats": {"total": 124, "additions": 116, "deletions": 8}, "files": [{"sha": "e0be1d89a94d39a646e43d389143e359c202d948", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/342321def69789fb45f73f61bf3ab646b01e4bca/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342321def69789fb45f73f61bf3ab646b01e4bca/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=342321def69789fb45f73f61bf3ab646b01e4bca", "patch": "@@ -947,8 +947,8 @@ fn compare_values<'a>(\n     }\n }\n \n-fn insert_lllocals<'a>(mut bcx: &'a Block<'a>,\n-                       bindings_map: &BindingsMap)\n+fn insert_lllocals<'a>(mut bcx: &'a Block<'a>, bindings_map: &BindingsMap,\n+                       cs: Option<cleanup::ScopeId>)\n                        -> &'a Block<'a> {\n     /*!\n      * For each binding in `data.bindings_map`, adds an appropriate entry into\n@@ -975,6 +975,10 @@ fn insert_lllocals<'a>(mut bcx: &'a Block<'a>,\n         };\n \n         let datum = Datum::new(llval, binding_info.ty, Lvalue);\n+        match cs {\n+            Some(cs) => bcx.fcx.schedule_drop_and_zero_mem(cs, llval, binding_info.ty),\n+            _ => {}\n+        }\n \n         debug!(\"binding {:?} to {}\",\n                binding_info.id,\n@@ -1006,7 +1010,7 @@ fn compile_guard<'a, 'b>(\n            vec_map_to_str(vals, |v| bcx.val_to_str(*v)));\n     let _indenter = indenter();\n \n-    let mut bcx = insert_lllocals(bcx, &data.bindings_map);\n+    let mut bcx = insert_lllocals(bcx, &data.bindings_map, None);\n \n     let val = unpack_datum!(bcx, expr::trans(bcx, guard_expr));\n     let val = val.to_llbool(bcx);\n@@ -1460,9 +1464,11 @@ fn trans_match_inner<'a>(scope_cx: &'a Block<'a>,\n     for arm_data in arm_datas.iter() {\n         let mut bcx = arm_data.bodycx;\n \n-        // insert bindings into the lllocals map\n-        bcx = insert_lllocals(bcx, &arm_data.bindings_map);\n+        // insert bindings into the lllocals map and add cleanups\n+        let cs = fcx.push_custom_cleanup_scope();\n+        bcx = insert_lllocals(bcx, &arm_data.bindings_map, Some(cleanup::CustomScope(cs)));\n         bcx = expr::trans_into(bcx, &*arm_data.arm.body, dest);\n+        bcx = fcx.pop_and_trans_custom_cleanup_scope(bcx, cs);\n         arm_cxs.push(bcx);\n     }\n "}, {"sha": "0bcf94997cdbbc23e6ef32f2ef17f50bc566d1bb", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/342321def69789fb45f73f61bf3ab646b01e4bca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342321def69789fb45f73f61bf3ab646b01e4bca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=342321def69789fb45f73f61bf3ab646b01e4bca", "patch": "@@ -240,7 +240,8 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n             is_immediate: false,\n             on_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n             val: val,\n-            ty: ty\n+            ty: ty,\n+            zero: false\n         };\n \n         debug!(\"schedule_drop_mem({:?}, val={}, ty={})\",\n@@ -251,6 +252,33 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n         self.schedule_clean(cleanup_scope, drop as Box<Cleanup>);\n     }\n \n+    fn schedule_drop_and_zero_mem(&self,\n+                                  cleanup_scope: ScopeId,\n+                                  val: ValueRef,\n+                                  ty: ty::t) {\n+        /*!\n+         * Schedules a (deep) drop and zero-ing of `val`, which is a pointer\n+         * to an instance of `ty`\n+         */\n+\n+        if !ty::type_needs_drop(self.ccx.tcx(), ty) { return; }\n+        let drop = box DropValue {\n+            is_immediate: false,\n+            on_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n+            val: val,\n+            ty: ty,\n+            zero: true\n+        };\n+\n+        debug!(\"schedule_drop_and_zero_mem({:?}, val={}, ty={}, zero={})\",\n+               cleanup_scope,\n+               self.ccx.tn.val_to_str(val),\n+               ty.repr(self.ccx.tcx()),\n+               true);\n+\n+        self.schedule_clean(cleanup_scope, drop as Box<Cleanup>);\n+    }\n+\n     fn schedule_drop_immediate(&self,\n                                cleanup_scope: ScopeId,\n                                val: ValueRef,\n@@ -264,7 +292,8 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n             is_immediate: true,\n             on_unwind: ty::type_needs_unwind_cleanup(self.ccx.tcx(), ty),\n             val: val,\n-            ty: ty\n+            ty: ty,\n+            zero: false\n         };\n \n         debug!(\"schedule_drop_immediate({:?}, val={}, ty={})\",\n@@ -824,6 +853,7 @@ pub struct DropValue {\n     on_unwind: bool,\n     val: ValueRef,\n     ty: ty::t,\n+    zero: bool\n }\n \n impl Cleanup for DropValue {\n@@ -832,11 +862,15 @@ impl Cleanup for DropValue {\n     }\n \n     fn trans<'a>(&self, bcx: &'a Block<'a>) -> &'a Block<'a> {\n-        if self.is_immediate {\n+        let bcx = if self.is_immediate {\n             glue::drop_ty_immediate(bcx, self.val, self.ty)\n         } else {\n             glue::drop_ty(bcx, self.val, self.ty)\n+        };\n+        if self.zero {\n+            base::zero_mem(bcx, self.val, self.ty);\n         }\n+        bcx\n     }\n }\n \n@@ -927,6 +961,10 @@ pub trait CleanupMethods<'a> {\n                          cleanup_scope: ScopeId,\n                          val: ValueRef,\n                          ty: ty::t);\n+    fn schedule_drop_and_zero_mem(&self,\n+                                  cleanup_scope: ScopeId,\n+                                  val: ValueRef,\n+                                  ty: ty::t);\n     fn schedule_drop_immediate(&self,\n                                cleanup_scope: ScopeId,\n                                val: ValueRef,"}, {"sha": "ed5cff36c8bb24be4f2b94f1531253552fcfdfc5", "filename": "src/test/run-pass/order-drop-with-match.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/342321def69789fb45f73f61bf3ab646b01e4bca/src%2Ftest%2Frun-pass%2Forder-drop-with-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342321def69789fb45f73f61bf3ab646b01e4bca/src%2Ftest%2Frun-pass%2Forder-drop-with-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Forder-drop-with-match.rs?ref=342321def69789fb45f73f61bf3ab646b01e4bca", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// Test to make sure the destructors run in the right order.\n+// Each destructor sets it's tag in the corresponding entry\n+// in ORDER matching up to when it ran.\n+// Correct order is: matched, inner, outer\n+\n+static mut ORDER: [uint, ..3] = [0, 0, 0];\n+static mut INDEX: uint = 0;\n+\n+struct A;\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        unsafe {\n+            ORDER[INDEX] = 1;\n+            INDEX = INDEX + 1;\n+        }\n+    }\n+}\n+\n+struct B;\n+impl Drop for B {\n+    fn drop(&mut self) {\n+        unsafe {\n+            ORDER[INDEX] = 2;\n+            INDEX = INDEX + 1;\n+        }\n+    }\n+}\n+\n+struct C;\n+impl Drop for C {\n+    fn drop(&mut self) {\n+        unsafe {\n+            ORDER[INDEX] = 3;\n+            INDEX = INDEX + 1;\n+        }\n+    }\n+}\n+\n+fn main() {\n+    {\n+        let matched = A;\n+        let _outer = C;\n+        {\n+            match matched {\n+                _s => {}\n+            }\n+            let _inner = B;\n+        }\n+    }\n+    unsafe {\n+        assert_eq!(&[1, 2, 3], ORDER.as_slice());\n+    }\n+}"}]}