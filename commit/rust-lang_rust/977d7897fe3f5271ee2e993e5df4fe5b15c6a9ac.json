{"sha": "977d7897fe3f5271ee2e993e5df4fe5b15c6a9ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3N2Q3ODk3ZmUzZjUyNzFlZTJlOTkzZTVkZjRmZTViMTVjNmE5YWM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-02-19T20:35:26Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-03-04T18:32:43Z"}, "message": "TRPL: Documentation\n\nThis chapter covers writing documentation in depth.\n\nFixes #4361\nFixes #12862\nFixes #14070\nFixes #14967", "tree": {"sha": "41418a6ca14d29b54c3e2c5dea0bb6ecd25f0636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41418a6ca14d29b54c3e2c5dea0bb6ecd25f0636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977d7897fe3f5271ee2e993e5df4fe5b15c6a9ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977d7897fe3f5271ee2e993e5df4fe5b15c6a9ac", "html_url": "https://github.com/rust-lang/rust/commit/977d7897fe3f5271ee2e993e5df4fe5b15c6a9ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977d7897fe3f5271ee2e993e5df4fe5b15c6a9ac/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "129173f1980e9ac03f7ef0fc0193c41235d07649", "url": "https://api.github.com/repos/rust-lang/rust/commits/129173f1980e9ac03f7ef0fc0193c41235d07649", "html_url": "https://github.com/rust-lang/rust/commit/129173f1980e9ac03f7ef0fc0193c41235d07649"}], "stats": {"total": 633, "additions": 419, "deletions": 214}, "files": [{"sha": "0553fe3280c68fd08b0123649912ced97cbde9b9", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 419, "deletions": 214, "changes": 633, "blob_url": "https://github.com/rust-lang/rust/blob/977d7897fe3f5271ee2e993e5df4fe5b15c6a9ac/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/977d7897fe3f5271ee2e993e5df4fe5b15c6a9ac/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=977d7897fe3f5271ee2e993e5df4fe5b15c6a9ac", "patch": "@@ -1,224 +1,223 @@\n % Documentation\n \n-`rustdoc` is the built-in tool for generating documentation. It integrates\n-with the compiler to provide accurate hyperlinking between usage of types and\n-their documentation. Furthermore, by not using a separate parser, it will\n-never reject your valid Rust code.\n+Documentation is an important part of any software project, and it's\n+first-class in Rust. Let's talk about the tooling Rust gives you to\n+document your project.\n \n-# Creating Documentation\n+## About `rustdoc`\n \n-Documenting Rust APIs is quite simple. To document a given item, we have \"doc\n-comments\":\n+The Rust distribution includes a tool, `rustdoc`, that generates documentation.\n+`rustdoc` is also used by Cargo through `cargo doc`.\n \n-~~~\n-# #![allow(unused_attribute)]\n-// the \"link\" crate attribute is currently required for rustdoc, but normally\n-// isn't needed.\n-#![crate_id = \"universe\"]\n-#![crate_type= \"lib\"]\n-\n-//! Tools for dealing with universes (this is a doc comment, and is shown on\n-//! the crate index page. The ! makes it apply to the parent of the comment,\n-//! rather than what follows).\n-\n-# mod workaround_the_outer_function_rustdoc_inserts {\n-/// Widgets are very common (this is a doc comment, and will show up on\n-/// Widget's documentation).\n-pub struct Widget {\n-\t/// All widgets have a purpose (this is a doc comment, and will show up\n-\t/// the field's documentation).\n-\tpurpose: String,\n-\t/// Humans are not allowed to understand some widgets\n-\tunderstandable: bool\n-}\n+Documentation can be generated in two ways: from source code, and from\n+standalone Markdown files.\n \n-pub fn recalibrate() {\n-\t//! Recalibrate a pesky universe (this is also a doc comment, like above,\n-\t//! the documentation will be applied to the *parent* item, so\n-\t//! `recalibrate`).\n-\t/* ... */\n-}\n-# }\n-~~~\n+## Documenting source code\n \n-Documentation can also be controlled via the `doc` attribute on items. This is\n-implicitly done by the compiler when using the above form of doc comments\n-(converting the slash-based comments to `#[doc]` attributes).\n+The primary way of documenting a Rust project is through annotating the source\n+code. You can use documentation comments for this purpose:\n \n-~~~\n-#[doc = \"\n-Calculates the factorial of a number.\n+```rust,ignore\n+/// Constructs a new `Rc<T>`.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::rc::Rc;\n+///\n+/// let five = Rc::new(5);\n+/// ```\n+pub fn new(value: T) -> Rc<T> {\n+    // implementation goes here\n+}\n+```\n \n-Given the input integer `n`, this function will calculate `n!` and return it.\n-\"]\n-pub fn factorial(n: int) -> int { if n < 2 {1} else {n * factorial(n - 1)} }\n-# fn main() {}\n-~~~\n+This code generates documentation that looks [like this][rc-new]. I've left the\n+implementation out, with a regular comment in its place. That's the first thing\n+to notice about this annotation: it uses `///`, instead of `//`. The triple slash\n+indicates a documentation comment.\n \n-The `doc` attribute can also be used to control how rustdoc emits documentation\n-in some cases.\n+Documentation comments are written in Markdown.\n+\n+Rust keeps track of these comments, and uses them when generating\n+documentation. This is important when documenting things like enums:\n \n ```\n-// Rustdoc will inline documentation of a `pub use` into this crate when the\n-// `pub use` reaches across crates, but this behavior can also be disabled.\n-#[doc(no_inline)]\n-pub use std::option::Option;\n-# fn main() {}\n+/// The `Option` type. See [the module level documentation](../) for more.\n+enum Option<T> {\n+    /// No value\n+    None,\n+    /// Some value `T`\n+    Some(T),\n+}\n ```\n \n-Doc comments are markdown, and are currently parsed with the\n-[hoedown][hoedown] library. rustdoc does not yet do any fanciness such as\n-referencing other items inline, like javadoc's `@see`. One exception to this\n-is that the first paragraph will be used as the \"summary\" of an item in the\n-generated documentation:\n+The above works, but this does not:\n \n-~~~\n-/// A whizbang. Does stuff. (this line is the summary)\n-///\n-/// Whizbangs are ...\n-struct Whizbang;\n-~~~\n-\n-To generate the docs, run `rustdoc universe.rs`. By default, it generates a\n-directory called `doc`, with the documentation for `universe` being in\n-`doc/universe/index.html`. If you are using other crates with `extern crate`,\n-rustdoc will even link to them when you use their types, as long as their\n-documentation has already been generated by a previous run of rustdoc, or the\n-crate advertises that its documentation is hosted at a given URL.\n+```rust,ignore\n+/// The `Option` type. See [the module level documentation](../) for more.\n+enum Option<T> {\n+    None, /// No value\n+    Some(T), /// Some value `T`\n+}\n+```\n \n-The generated output can be controlled with the `doc` crate attribute, which\n-is how the above advertisement works. An example from the `libstd`\n-documentation:\n+You'll get an error:\n \n-~~~\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://doc.rust-lang.org/\")];\n-~~~\n+```text\n+hello.rs:4:1: 4:2 error: expected ident, found `}`\n+hello.rs:4 }\n+           ^\n+```\n \n-The `html_root_url` is the prefix that rustdoc will apply to any references to\n-that crate's types etc.\n+This [unfortunate error](https://github.com/rust-lang/rust/issues/22547) is\n+correct: documentation comments apply to the thing after them, and there's no\n+thing after that last comment.\n \n-rustdoc can also generate JSON, for consumption by other tools, with\n-`rustdoc --output-format json`, and also consume already-generated JSON with\n-`rustdoc --input-format json`.\n+[rc-new]: http://doc.rust-lang.org/nightly/std/rc/struct.Rc.html#method.new\n \n-rustdoc also supports personalizing the output from crates' documentation,\n-similar to markdown options.\n+### Writing documentation comments\n \n-- `--html-in-header FILE`: includes the contents of `FILE` at the\n-  end of the `<head>...</head>` section.\n-- `--html-before-content FILE`: includes the contents of `FILE`\n-  directly after `<body>`, before the rendered content (including the\n-  search bar).\n-- `--html-after-content FILE`: includes the contents of `FILE`\n-  after all the rendered content.\n+Anyway, let's cover each part of this comment in detail:\n \n-# Using the Documentation\n+```\n+/// Constructs a new `Rc<T>`.\n+# fn foo() {}\n+```\n \n-The web pages generated by rustdoc present the same logical hierarchy that one\n-writes a library with. Every kind of item (function, struct, etc) has its own\n-color, and one can always click on a colored type to jump to its\n-documentation. There is a search bar at the top, which is powered by some\n-JavaScript and a statically-generated search index. No special web server is\n-required for the search.\n+The first line of a documentation comment should be a short summary of its\n+functionality. One sentence. Just the basics. High level.\n \n-[hoedown]: https://github.com/hoedown/hoedown\n+```\n+///\n+/// Other details about constructing `Rc<T>`s, maybe describing complicated\n+/// semantics, maybe additional options, all kinds of stuff.\n+///\n+# fn foo() {}\n+```\n \n-# Testing the Documentation\n+Our original example had just a summary line, but if we had more things to say,\n+we could have added more explanation in a new paragraph.\n \n-`rustdoc` has support for testing code examples which appear in the\n-documentation. This is helpful for keeping code examples up to date with the\n-source code.\n+#### Special sections\n \n-To test documentation, the `--test` argument is passed to rustdoc:\n+```\n+/// # Examples\n+# fn foo() {}\n+```\n \n-~~~ {.sh}\n-rustdoc --test crate.rs\n-~~~\n+Next, are special sections. These are indicated with a header, `#`. There\n+are three kinds of headers that are commonly used. They aren't special syntax,\n+just convention, for now.\n \n-## Defining tests\n+```\n+/// # Panics\n+# fn foo() {}\n+```\n \n-Rust documentation currently uses the markdown format, and rustdoc treats all\n-code blocks as testable-by-default unless they carry a language tag of another\n-language. In order to not run a test over a block of code, the `ignore` string\n-can be added to the three-backtick form of markdown code block.\n+Unrecoverable misuses of a function (i.e. programming errors) in Rust are\n+usually indicated by panics, which kill the whole current thread at the very\n+least. If your function has a non-trivial contract like this, that is\n+detected/enforced by panics, documenting it is very important.\n \n-~~~md\n ```\n-// This is a testable code block\n+/// # Failures\n+# fn foo() {}\n ```\n \n-```rust{.example}\n-// This is rust and also testable\n-```\n+If your function or method returns a `Result<T, E>`, then describing the\n+conditions under which it returns `Err(E)` is a nice thing to do. This is\n+slightly less important than `Panics`, because failure is encoded into the type\n+system, but it's still a good thing to do.\n \n-```ignore\n-// This is not a testable code block\n+```\n+/// # Safety\n+# fn foo() {}\n ```\n \n-    // This is a testable code block (4-space indent)\n+If your function is `unsafe`, you should explain which invariants the caller is\n+responsible for upholding.\n \n-```sh\n-# this is shell code and not tested\n ```\n-~~~\n+/// # Examples\n+///\n+/// ```\n+/// use std::rc::Rc;\n+///\n+/// let five = Rc::new(5);\n+/// ```\n+# fn foo() {}\n+```\n \n-You can specify that the test's execution should fail with the `should_fail`\n-directive.\n+Third, `Examples`. Include one or more examples of using your function or\n+method, and your users will love you for it. These examples go inside of\n+code block annotations, which we'll talk about in a moment, and can have\n+more than one section:\n \n-~~~md\n-```should_fail\n-// This code block is expected to generate a panic when run\n ```\n-~~~\n+/// # Examples\n+///\n+/// Simple `&str` patterns:\n+///\n+/// ```\n+/// let v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\n+/// assert_eq!(v, vec![\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n+/// ```\n+///\n+/// More complex patterns with a lambda:\n+///\n+/// ```\n+/// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).collect();\n+/// assert_eq!(v, vec![\"abc\", \"def\", \"ghi\"]);\n+/// ```\n+# fn foo() {}\n+```\n \n-You can specify that the code block should be compiled but not run with the\n-`no_run` directive.\n+Let's discuss the details of these code blocks.\n \n-~~~md\n-```no_run\n-// This code will be compiled but not executed\n-```\n-~~~\n+#### Code block annotations\n \n-Lastly, you can specify that a code block be compiled as if `--test`\n-were passed to the compiler using the `test_harness` directive.\n+To write some Rust code in a comment, use the triple graves:\n \n-~~~md\n-```test_harness\n-#[test]\n-fn foo() {\n-    panic!(\"oops! (will run & register as a failed test)\")\n-}\n ```\n-~~~\n+/// ```\n+/// println!(\"Hello, world\");\n+/// ```\n+# fn foo() {}\n+```\n \n-Rustdoc also supplies some extra sugar for helping with some tedious\n-documentation examples. If a line is prefixed with `# `, then the line\n-will not show up in the HTML documentation, but it will be used when\n-testing the code block (NB. the space after the `#` is required, so\n-that one can still write things like `#[derive(Eq)]`).\n+If you want something that's not Rust code, you can add an annotation:\n \n-~~~md\n ```\n-# /!\\ The three following lines are comments, which are usually stripped off by\n-# the doc-generating tool.  In order to display them anyway in this particular\n-# case, the character following the leading '#' is not a usual space like in\n-# these first five lines but a non breakable one.\n-#\u00a0// showing 'fib' in this documentation would just be tedious and detracts from\n-#\u00a0// what's actually being documented.\n-#\u00a0fn fib(n: int) { n + 2 }\n-\n-spawn(move || { fib(200); })\n+/// ```c\n+/// printf(\"Hello, world\\n\");\n+/// ```\n+# fn foo() {}\n ```\n-~~~\n \n-The documentation online would look like `spawn(move || { fib(200); })`, but when\n-testing this code, the `fib` function will be included (so it can compile).\n+This will highlight according to whatever language you're showing off.\n+If you're just showing plain text, choose `text`.\n+\n+It's important to choose the correct annotation here, because `rustdoc` uses it\n+in an interesting way: It can be used to actually test your examples, so that\n+they don't get out of date. If you have some C code but `rustdoc` thinks it's\n+Rust because you left off the annotation, `rustdoc` will complain when trying to\n+generate the documentation.\n \n-Rustdoc will automatically add a `main()` wrapper around your code, and in the right\n-place. For example:\n+## Documentation as tests\n+\n+Let's discuss our sample example documentation:\n+\n+```\n+/// ```\n+/// println!(\"Hello, world\");\n+/// ```\n+# fn foo() {}\n+```\n+\n+You'll notice that you don't need a `fn main()` or anything here. `rustdoc` will\n+automatically add a main() wrapper around your code, and in the right place.\n+For example:\n \n ```\n /// ```\n@@ -240,80 +239,286 @@ fn main() {\n \n Here's the full algorithm:\n \n-1. Given a code block, if it does not contain `fn main`, it is wrapped in `fn main() { your_code }`\n+1. Given a code block, if it does not contain `fn main()`, it is wrapped in\n+   `fn main() { your_code }`\n 2. Given that result, if it contains no `extern crate` directives but it also\n    contains the name of the crate being tested, then `extern crate <name>` is\n    injected at the top.\n-3. Some common `allow` attributes are added for documentation examples at the top.\n+3. Some common allow attributes are added for documentation examples at the top.\n+\n+Sometimes, this isn't enough, though. For example, all of these code samples\n+with `///` we've been talking about? The raw text:\n+\n+```text\n+/// Some documentation.\n+# fn foo() {}\n+```\n+\n+looks different than the output:\n+\n+```\n+/// Some documentation.\n+# fn foo() {}\n+```\n+\n+Yes, that's right: you can add lines that start with `# `, and they will\n+be hidden from the output, but will be used when compiling your code. You\n+can use this to your advantage. In this case, documentation comments need\n+to apply to some kind of function, so if I want to show you just a\n+documentation comment, I need to add a little function definition below\n+it. At the same time, it's just there to satisfy the compiler, so hiding\n+it makes the example more clear. You can use this technique to explain\n+longer examples in detail, while still preserving the testability of your\n+documentation. For example, this code:\n+\n+```\n+let x = 5;\n+let y = 6;\n+println!(\"{}\", x + y);\n+```\n+\n+Here's an explanation, rendered:\n+\n+First, we set `x` to five:\n+\n+```\n+let x = 5;\n+# let y = 6;\n+# println!(\"{}\", x + y);\n+```\n+\n+Next, we set `y` to six:\n+\n+```\n+# let x = 5;\n+let y = 6;\n+# println!(\"{}\", x + y);\n+```\n+\n+Finally, we print the sum of `x` and `y`:\n+\n+```\n+# let x = 5;\n+# let y = 6;\n+println!(\"{}\", x + y);\n+```\n+\n+Here's the same explanation, in raw text:\n+\n+> First, we set `x` to five:\n+> \n+> ```text\n+> let x = 5;\n+> # let y = 6;\n+> # println!(\"{}\", x + y);\n+> ```\n+> \n+> Next, we set `y` to six:\n+> \n+> ```text\n+> # let x = 5;\n+> let y = 6;\n+> # println!(\"{}\", x + y);\n+> ```\n+> \n+> Finally, we print the sum of `x` and `y`:\n+> \n+> ```text\n+> # let x = 5;\n+> # let y = 6;\n+> println!(\"{}\", x + y);\n+> ```\n+\n+By repeating all parts of the example, you can ensure that your example still\n+compiles, while only showing the parts that are relevant to that part of your\n+explanation.\n+\n+To run the tests, either\n+\n+```bash\n+$ rustdoc --test path/to/my/crate/root.rs\n+# or\n+$ cargo test\n+```\n+\n+That's right, `cargo test` tests embedded documentation too.\n+\n+There are a few more annotations that are useful to help `rustdoc` do the right\n+thing when testing your code:\n+\n+```\n+/// ```ignore\n+/// fn foo() {\n+/// ```\n+# fn foo() {}\n+```\n+\n+The `ignore` directive tells Rust to ignore your code. This is almost never\n+what you want, as it's the most generic. Instead, consider annotating it\n+with `text` if it's not code, or using `#`s to get a working example that\n+only shows the part you care about.\n+\n+```\n+/// ```should_panic\n+/// assert!(false);\n+/// ```\n+# fn foo() {}\n+```\n+\n+`should_panic` tells `rustdoc` that the code should compile correctly, but\n+not actually pass as a test.\n+\n+```\n+/// ```no_run\n+/// loop {\n+///     println!(\"Hello, world\");\n+/// }\n+/// ```\n+# fn foo() {}\n+```\n+\n+The `no_run` attribute will compile your code, but not run it. This is\n+important for examples such as \"Here's how to start up a network service,\"\n+which you would want to make sure compile, but might run in an infinite loop!\n+\n+### Documenting modules\n+\n+Rust has another kind of doc comment, `//!`. This comment doesn't document the next item, but the enclosing item. In other words:\n+\n+```\n+mod foo {\n+    //! This is documentation for the `foo` module.\n+    //!\n+    //! # Examples\n+\n+    // ...\n+}\n+```\n+\n+This is where you'll see `//!` used most often: for module documentation. If\n+you have a module in `foo.rs`, you'll often open its code and see this:\n+\n+```\n+//! A module for using `foo`s.\n+//!\n+//! The `foo` module contains a lot of useful functionality blah blah blah\n+```\n+\n+### Documentation comment style\n+\n+Check out [RFC 505][rfc505] for full conventions around the style and format of\n+documentation.\n+\n+[rfc505]: https://github.com/rust-lang/rfcs/blob/master/text/0505-api-comment-conventions.md\n+\n+## Other documentation\n+\n+All of this behavior works in non-Rust source files too. Because comments\n+are written in Markdown, they're often `.md` files.\n+\n+When you write documentation in Markdown files, you don't need to prefix\n+the documentation with comments. For example:\n \n-## Running tests (advanced)\n+```\n+/// # Examples\n+///\n+/// ```\n+/// use std::rc::Rc;\n+///\n+/// let five = Rc::new(5);\n+/// ```\n+# fn foo() {}\n+```\n \n-Running tests often requires some special configuration to filter tests, find\n-libraries, or try running ignored examples. The testing framework that rustdoc\n-uses is built on crate `test`, which is also used when you compile crates with\n-rustc's `--test` flag. Extra arguments can be passed to rustdoc's test harness\n-with the `--test-args` flag.\n+is just\n \n-~~~console\n-# Only run tests containing 'foo' in their name\n-$ rustdoc --test lib.rs --test-args 'foo'\n+~~~markdown\n+# Examples\n \n-# See what's possible when running tests\n-$ rustdoc --test lib.rs --test-args '--help'\n+```\n+use std::rc::Rc;\n+\n+let five = Rc::new(5);\n+```\n ~~~\n \n-When testing a library, code examples will often show how functions are used,\n-and this code often requires `use`-ing paths from the crate. To accommodate this,\n-rustdoc will implicitly add `extern crate <crate>;` where `<crate>` is the name of\n-the crate being tested to the top of each code example. This means that rustdoc\n-must be able to find a compiled version of the library crate being tested. Extra\n-search paths may be added via the `-L` flag to `rustdoc`.\n+when it's in a Markdown file. There is one wrinkle though: Markdown files need\n+to have a title like this:\n \n-# Standalone Markdown files\n+```markdown\n+% The title\n \n-As well as Rust crates, rustdoc supports rendering pure Markdown files\n-into HTML and testing the code snippets from them. A Markdown file is\n-detected by a `.md` or `.markdown` extension.\n+This is the example documentation.\n+```\n+\n+This `%` line needs to be the very first line of the file.\n+\n+## `doc` attributes\n+\n+At a deeper level, documentation comments are sugar for documentation attributes:\n+\n+```\n+/// this\n+# fn foo() {}\n+\n+#[doc=\"this\"]\n+# fn bar() {}\n+```\n \n-There are 4 options to modify the output that Rustdoc creates.\n+are the same, as are these:\n \n-- `--markdown-css PATH`: adds a `<link rel=\"stylesheet\">` tag pointing to `PATH`.\n-- `--html-in-header FILE`: includes the contents of `FILE` at the\n-  end of the `<head>...</head>` section.\n-- `--html-before-content FILE`: includes the contents of `FILE`\n-  directly after `<body>`, before the rendered content (including the\n-  title).\n-- `--html-after-content FILE`: includes the contents of `FILE`\n-  directly before `</body>`, after all the rendered content.\n+```\n+//! this\n \n-All of these can be specified multiple times, and they are output in\n-the order in which they are specified. The first line of the file being rendered must\n-be the title, prefixed with `%` (e.g. this page has `% Rust\n-Documentation` on the first line).\n+#![doc=\"/// this\"]\n+```\n \n-Like with a Rust crate, the `--test` argument will run the code\n-examples to check they compile, and obeys any `--test-args` flags. The\n-tests are named after the last `#` heading.\n+You won't often see this attribute used for writing documentation, but it\n+can be useful when changing some options, or when writing a macro.\n \n-# Re-exports\n+### Re-exports\n \n-Rustdoc will show the documentation for a publc re-export in both places:\n+`rustdoc` will show the documentation for a publc re-export in both places:\n \n-```{rust,ignore}\n+```ignore\n extern crate foo;\n \n pub use foo::bar;\n ```\n \n-This will create documentation for `bar` both inside the documentation for\n-the crate `foo`, as well as the documentation for your crate. It will use\n-the same documentation in both places.\n+This will create documentation for bar both inside the documentation for the\n+crate `foo`, as well as the documentation for your crate. It will use the same\n+documentation in both places.\n \n This behavior can be supressed with `no_inline`:\n \n-```{rust,ignore}\n+```ignore\n extern crate foo;\n \n #[doc(no_inline)]\n pub use foo::bar;\n ```\n+\n+### Controlling HTML\n+\n+You can control a few aspects of the HTML that `rustdoc` generates through the\n+`#![doc]` version of the attribute:\n+\n+```\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://doc.rust-lang.org/\")];\n+```\n+\n+This sets a few different options, with a logo, favicon, and a root URL.\n+\n+## Generation options\n+\n+`rustdoc` also contains a few other options on the command line, for further customiziation:\n+\n+- `--html-in-header FILE`: includes the contents of FILE at the end of the\n+  `<head>...</head>` section.\n+- `--html-before-content FILE`: includes the contents of FILE directly after\n+  `<body>`, before the rendered content (including the search bar).\n+- `--html-after-content FILE`: includes the contents of FILE after all the rendered content.\n+"}]}