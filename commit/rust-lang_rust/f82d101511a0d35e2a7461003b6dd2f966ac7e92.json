{"sha": "f82d101511a0d35e2a7461003b6dd2f966ac7e92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MmQxMDE1MTFhMGQzNWUyYTc0NjEwMDNiNmRkMmY5NjZhYzdlOTI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-14T14:42:35Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-15T07:18:38Z"}, "message": "Iterate over an array when creating the parser's reserved word table", "tree": {"sha": "8c49978d837d552f6d1e0a97b69cadfd0c3b912e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c49978d837d552f6d1e0a97b69cadfd0c3b912e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f82d101511a0d35e2a7461003b6dd2f966ac7e92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f82d101511a0d35e2a7461003b6dd2f966ac7e92", "html_url": "https://github.com/rust-lang/rust/commit/f82d101511a0d35e2a7461003b6dd2f966ac7e92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f82d101511a0d35e2a7461003b6dd2f966ac7e92/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cd3d1ff5934f69b894e9c41b9d5898f0d249d3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd3d1ff5934f69b894e9c41b9d5898f0d249d3e", "html_url": "https://github.com/rust-lang/rust/commit/2cd3d1ff5934f69b894e9c41b9d5898f0d249d3e"}], "stats": {"total": 46, "additions": 8, "deletions": 38}, "files": [{"sha": "b716e8925a0ae8b3f2e67d05307175eea61938d3", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f82d101511a0d35e2a7461003b6dd2f966ac7e92/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82d101511a0d35e2a7461003b6dd2f966ac7e92/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=f82d101511a0d35e2a7461003b6dd2f966ac7e92", "patch": "@@ -151,40 +151,14 @@ fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: lexer::reader,\n // interpreted as a specific kind of statement, which would be confusing.\n fn bad_expr_word_table() -> hashmap<str, ()> {\n     let words = new_str_hash();\n-    words.insert(\"mod\", ());\n-    words.insert(\"if\", ());\n-    words.insert(\"else\", ());\n-    words.insert(\"while\", ());\n-    words.insert(\"do\", ());\n-    words.insert(\"alt\", ());\n-    words.insert(\"for\", ());\n-    words.insert(\"break\", ());\n-    words.insert(\"cont\", ());\n-    words.insert(\"ret\", ());\n-    words.insert(\"be\", ());\n-    words.insert(\"fail\", ());\n-    words.insert(\"type\", ());\n-    words.insert(\"resource\", ());\n-    words.insert(\"check\", ());\n-    words.insert(\"assert\", ());\n-    words.insert(\"claim\", ());\n-    words.insert(\"native\", ());\n-    words.insert(\"fn\", ());\n-    words.insert(\"lambda\", ());\n-    words.insert(\"pure\", ());\n-    words.insert(\"unsafe\", ());\n-    words.insert(\"block\", ());\n-    words.insert(\"import\", ());\n-    words.insert(\"export\", ());\n-    words.insert(\"let\", ());\n-    words.insert(\"const\", ());\n-    words.insert(\"log\", ());\n-    words.insert(\"log_err\", ());\n-    words.insert(\"sendfn\", ());\n-    words.insert(\"tag\", ());\n-    words.insert(\"obj\", ());\n-    words.insert(\"copy\", ());\n-    ret words;\n+    for word in [\"mod\", \"if\", \"else\", \"while\", \"do\", \"alt\", \"for\", \"break\",\n+                 \"cont\", \"ret\", \"be\", \"fail\", \"type\", \"resource\", \"check\",\n+                 \"assert\", \"claim\", \"native\", \"fn\", \"lambda\", \"pure\",\n+                 \"unsafe\", \"block\", \"import\", \"export\", \"let\", \"const\",\n+                 \"log\", \"log_err\", \"tag\", \"obj\", \"self\", \"copy\", \"sendfn\"] {\n+        words.insert(word, ());\n+    }\n+    words\n }\n \n fn unexpected(p: parser, t: token::token) -> ! {\n@@ -828,10 +802,6 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n         ret parse_do_while_expr(p);\n     } else if eat_word(p, \"alt\") {\n         ret parse_alt_expr(p);\n-        /*\n-            } else if (eat_word(p, \"spawn\")) {\n-                ret parse_spawn_expr(p);\n-        */\n     } else if eat_word(p, \"fn\") {\n         let proto = parse_fn_ty_proto(p);\n         ret parse_fn_expr(p, proto);"}]}