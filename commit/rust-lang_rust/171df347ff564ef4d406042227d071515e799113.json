{"sha": "171df347ff564ef4d406042227d071515e799113", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MWRmMzQ3ZmY1NjRlZjRkNDA2MDQyMjI3ZDA3MTUxNWU3OTkxMTM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-25T22:15:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-27T23:56:11Z"}, "message": "resolve: Refactor away `legacy_macro_imports`/`LegacyMacroImports`", "tree": {"sha": "e64f14e5604751a294fe48650a5cb968736df751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e64f14e5604751a294fe48650a5cb968736df751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/171df347ff564ef4d406042227d071515e799113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/171df347ff564ef4d406042227d071515e799113", "html_url": "https://github.com/rust-lang/rust/commit/171df347ff564ef4d406042227d071515e799113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/171df347ff564ef4d406042227d071515e799113/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3738a2ba63d6ba2d8359c90732c994abeaf4be", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3738a2ba63d6ba2d8359c90732c994abeaf4be", "html_url": "https://github.com/rust-lang/rust/commit/dd3738a2ba63d6ba2d8359c90732c994abeaf4be"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "6c7398e17530a20cb31f845b264ba9f609c11b71", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 31, "deletions": 37, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/171df347ff564ef4d406042227d071515e799113/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171df347ff564ef4d406042227d071515e799113/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=171df347ff564ef4d406042227d071515e799113", "patch": "@@ -35,7 +35,7 @@ use syntax::ast::{Name, Ident};\n use syntax::attr;\n \n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n-use syntax::ast::{Mutability, StmtKind, TraitItem, TraitItemKind, Variant};\n+use syntax::ast::{MetaItemKind, Mutability, StmtKind, TraitItem, TraitItemKind, Variant};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n@@ -83,12 +83,6 @@ impl<'a> ToNameBinding<'a> for (Def, ty::Visibility, Span, Mark, IsMacroExport)\n     }\n }\n \n-#[derive(Default, PartialEq, Eq)]\n-struct LegacyMacroImports {\n-    import_all: Option<Span>,\n-    imports: Vec<(Name, Span)>,\n-}\n-\n impl<'a, 'cl> Resolver<'a, 'cl> {\n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n     /// otherwise, reports an error.\n@@ -858,14 +852,32 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n     // This returns true if we should consider the underlying `extern crate` to be used.\n     fn process_legacy_macro_imports(&mut self, item: &Item, module: Module<'a>,\n                                     parent_scope: &ParentScope<'a>) -> bool {\n-        let allow_shadowing = parent_scope.expansion == Mark::root();\n-        let legacy_imports = self.legacy_macro_imports(&item.attrs);\n-        let used = legacy_imports != LegacyMacroImports::default();\n-\n-        // `#[macro_use]` is only allowed at the crate root.\n-        if self.current_module.parent.is_some() && used {\n-            span_err!(self.session, item.span, E0468,\n-                      \"an `extern crate` loading macros must be at the crate root\");\n+        let mut import_all = None;\n+        let mut single_imports = Vec::new();\n+        for attr in &item.attrs {\n+            if attr.check_name(\"macro_use\") {\n+                if self.current_module.parent.is_some() {\n+                    span_err!(self.session, item.span, E0468,\n+                        \"an `extern crate` loading macros must be at the crate root\");\n+                }\n+                let ill_formed = |span| span_err!(self.session, span, E0466, \"bad macro import\");\n+                match attr.meta() {\n+                    Some(meta) => match meta.node {\n+                        MetaItemKind::Word => {\n+                            import_all = Some(meta.span);\n+                            break;\n+                        }\n+                        MetaItemKind::List(nested_metas) => for nested_meta in nested_metas {\n+                            match nested_meta.word() {\n+                                Some(word) => single_imports.push((word.name(), word.span)),\n+                                None => ill_formed(nested_meta.span),\n+                            }\n+                        }\n+                        MetaItemKind::NameValue(..) => ill_formed(meta.span),\n+                    }\n+                    None => ill_formed(attr.span()),\n+                }\n+            }\n         }\n \n         let arenas = self.arenas;\n@@ -883,15 +895,16 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             is_uniform_paths_canary: false,\n         });\n \n-        if let Some(span) = legacy_imports.import_all {\n+        let allow_shadowing = parent_scope.expansion == Mark::root();\n+        if let Some(span) = import_all {\n             let directive = macro_use_directive(span);\n             self.potentially_unused_imports.push(directive);\n             module.for_each_child(|ident, ns, binding| if ns == MacroNS {\n                 let imported_binding = self.import(binding, directive);\n                 self.legacy_import_macro(ident.name, imported_binding, span, allow_shadowing);\n             });\n         } else {\n-            for (name, span) in legacy_imports.imports {\n+            for (name, span) in single_imports.iter().cloned() {\n                 let ident = Ident::with_empty_ctxt(name);\n                 let result = self.resolve_ident_in_module(\n                     ModuleOrUniformRoot::Module(module),\n@@ -910,7 +923,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 }\n             }\n         }\n-        used\n+        import_all.is_some() || !single_imports.is_empty()\n     }\n \n     // does this attribute list contain \"macro_use\"?\n@@ -936,25 +949,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n         false\n     }\n-\n-    fn legacy_macro_imports(&mut self, attrs: &[ast::Attribute]) -> LegacyMacroImports {\n-        let mut imports = LegacyMacroImports::default();\n-        for attr in attrs {\n-            if attr.check_name(\"macro_use\") {\n-                match attr.meta_item_list() {\n-                    Some(names) => for attr in names {\n-                        if let Some(word) = attr.word() {\n-                            imports.imports.push((word.name(), attr.span()));\n-                        } else {\n-                            span_err!(self.session, attr.span(), E0466, \"bad macro import\");\n-                        }\n-                    },\n-                    None => imports.import_all = Some(attr.span),\n-                }\n-            }\n-        }\n-        imports\n-    }\n }\n \n pub struct BuildReducedGraphVisitor<'a, 'b: 'a, 'c: 'b> {"}, {"sha": "fc4b33bafa40ace8a14c70966d5f3eaff94bf943", "filename": "src/test/run-pass/macros/macro-use-all-and-none.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/171df347ff564ef4d406042227d071515e799113/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-use-all-and-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/171df347ff564ef4d406042227d071515e799113/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-use-all-and-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-use-all-and-none.stderr?ref=171df347ff564ef4d406042227d071515e799113", "patch": "@@ -0,0 +1,8 @@\n+warning: unused attribute\n+  --> $DIR/macro-use-all-and-none.rs:15:1\n+   |\n+LL | #[macro_use()]\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(unused_attributes)] on by default\n+"}]}