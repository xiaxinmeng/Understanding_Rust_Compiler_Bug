{"sha": "e4d9bc66f65fd3d206587c07e33c4877fda073f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZDliYzY2ZjY1ZmQzZDIwNjU4N2MwN2UzM2M0ODc3ZmRhMDczZjk=", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-02-18T20:01:44Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-05-11T12:09:46Z"}, "message": "improve diagnosts for GATs", "tree": {"sha": "1cbfff1dc8de7fd37b9c550e063d9e6256599676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cbfff1dc8de7fd37b9c550e063d9e6256599676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4d9bc66f65fd3d206587c07e33c4877fda073f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d9bc66f65fd3d206587c07e33c4877fda073f9", "html_url": "https://github.com/rust-lang/rust/commit/e4d9bc66f65fd3d206587c07e33c4877fda073f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4d9bc66f65fd3d206587c07e33c4877fda073f9/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe62c6e2958abfe54a9410a24a5750baf4c157e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe62c6e2958abfe54a9410a24a5750baf4c157e0", "html_url": "https://github.com/rust-lang/rust/commit/fe62c6e2958abfe54a9410a24a5750baf4c157e0"}], "stats": {"total": 2435, "additions": 1585, "deletions": 850}, "files": [{"sha": "82a0983e2a1a32b824e270944578f05a24e423cf", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -24,6 +24,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         param_mode: ParamMode,\n         mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::QPath<'hir> {\n+        debug!(\"lower_qpath(id: {:?}, qself: {:?}, p: {:?})\", id, qself, p);\n         let qself_position = qself.as_ref().map(|q| q.position);\n         let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx.reborrow()));\n \n@@ -222,6 +223,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         itctx: ImplTraitContext<'_, 'hir>,\n         explicit_owner: Option<NodeId>,\n     ) -> hir::PathSegment<'hir> {\n+        debug!(\n+            \"path_span: {:?}, lower_path_segment(segment: {:?}, expected_lifetimes: {:?})\",\n+            path_span, segment, expected_lifetimes\n+        );\n         let (mut generic_args, infer_args) = if let Some(ref generic_args) = segment.args {\n             let msg = \"parenthesized type parameters may only be used with a `Fn` trait\";\n             match **generic_args {"}, {"sha": "2665ea8d7fd73a48599095131492ea813a7c8329", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -49,6 +49,20 @@ pub enum Region {\n     Free(DefId, /* lifetime decl */ DefId),\n }\n \n+/// This is used in diagnostics to improve suggestions for missing generic arguments.\n+/// It gives information on the type of lifetimes that are in scope for a particular `PathSegment`,\n+/// so that we can e.g. suggest elided-lifetimes-in-paths of the form <'_, '_> e.g.\n+#[derive(Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, HashStable)]\n+pub enum LifetimeScopeForPath {\n+    // Contains all lifetime names that are in scope and could possibly be used in generics\n+    // arguments of path.\n+    NonElided(Vec<String>),\n+\n+    // Information that allows us to suggest args of the form `<'_>` in case\n+    // no generic arguments were provided for a path.\n+    Elided,\n+}\n+\n /// A set containing, at most, one known element.\n /// If two distinct values are inserted into a set, then it\n /// becomes `Many`, which can be used to detect ambiguities."}, {"sha": "3c5440f5b68598a1afc636b05d781a6685669d08", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1301,6 +1301,10 @@ rustc_queries! {\n         desc { \"looking up late bound vars\" }\n     }\n \n+    query lifetime_scope_map(_: LocalDefId) -> Option<FxHashMap<ItemLocalId, LifetimeScopeForPath>> {\n+        desc { \"finds the lifetime scope for an HirId of a PathSegment\" }\n+    }\n+\n     query visibility(def_id: DefId) -> ty::Visibility {\n         eval_always\n         desc { |tcx| \"computing visibility of `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "eaf0887c4e7fe3fd1043382e08f0cd85c4e1b18d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -9,7 +9,7 @@ use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n use crate::middle;\n use crate::middle::cstore::{CrateStoreDyn, EncodedMetadata};\n-use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n+use crate::middle::resolve_lifetime::{self, LifetimeScopeForPath, ObjectLifetimeDefault};\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstValue, Scalar};\n use crate::mir::{Body, Field, Local, Place, PlaceElem, ProjectionKind, Promoted};\n@@ -2686,6 +2686,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .iter(),\n         )\n     }\n+\n+    pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {\n+        self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))\n+    }\n }\n \n impl TyCtxtAt<'tcx> {"}, {"sha": "3c772a14647c87d0889825d3220fa6b56bd343e1", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -9,7 +9,9 @@ use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use crate::middle::lib_features::LibFeatures;\n use crate::middle::privacy::AccessLevels;\n use crate::middle::region;\n-use crate::middle::resolve_lifetime::{ObjectLifetimeDefault, Region, ResolveLifetimes};\n+use crate::middle::resolve_lifetime::{\n+    LifetimeScopeForPath, ObjectLifetimeDefault, Region, ResolveLifetimes,\n+};\n use crate::middle::stability::{self, DeprecationEntry};\n use crate::mir;\n use crate::mir::interpret::GlobalId;"}, {"sha": "bf69defb4e674f9f0a7aa7ddb3d57f262906960a", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 114, "deletions": 18, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -8,11 +8,11 @@\n \n use crate::late::diagnostics::{ForLifetimeSpanType, MissingLifetimeSpot};\n use rustc_ast::walk_list;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::DefIdMap;\n+use rustc_hir::def_id::{DefIdMap, LocalDefId};\n use rustc_hir::hir_id::ItemLocalId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n@@ -22,7 +22,7 @@ use rustc_middle::middle::resolve_lifetime::*;\n use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_session::lint;\n-use rustc_span::def_id::{DefId, LocalDefId};\n+use rustc_span::def_id::DefId;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use std::borrow::Cow;\n@@ -158,6 +158,9 @@ struct NamedRegionMap {\n     // - trait refs\n     // - bound types (like `T` in `for<'a> T<'a>: Foo`)\n     late_bound_vars: HirIdMap<Vec<ty::BoundVariableKind>>,\n+\n+    // maps `PathSegment` `HirId`s to lifetime scopes.\n+    scope_for_path: Option<FxHashMap<LocalDefId, FxHashMap<ItemLocalId, LifetimeScopeForPath>>>,\n }\n \n crate struct LifetimeContext<'a, 'tcx> {\n@@ -195,7 +198,9 @@ enum Scope<'a> {\n     /// it should be shifted by the number of `Binder`s in between the\n     /// declaration `Binder` and the location it's referenced from.\n     Binder {\n-        lifetimes: FxHashMap<hir::ParamName, Region>,\n+        /// We use an IndexMap here because we want these lifetimes in order\n+        /// for diagnostics.\n+        lifetimes: FxIndexMap<hir::ParamName, Region>,\n \n         /// if we extend this scope with another scope, what is the next index\n         /// we should use for an early-bound region?\n@@ -379,6 +384,10 @@ pub fn provide(providers: &mut ty::query::Providers) {\n             }\n         },\n         late_bound_vars_map: |tcx, id| resolve_lifetimes_for(tcx, id).late_bound_vars.get(&id),\n+        lifetime_scope_map: |tcx, id| {\n+            let item_id = item_for(tcx, id);\n+            do_resolve(tcx, item_id, false, true).scope_for_path.unwrap().remove(&id)\n+        },\n \n         ..*providers\n     };\n@@ -419,27 +428,29 @@ fn resolve_lifetimes_trait_definition(\n     tcx: TyCtxt<'_>,\n     local_def_id: LocalDefId,\n ) -> ResolveLifetimes {\n-    do_resolve(tcx, local_def_id, true)\n+    convert_named_region_map(do_resolve(tcx, local_def_id, true, false))\n }\n \n /// Computes the `ResolveLifetimes` map that contains data for an entire `Item`.\n /// You should not read the result of this query directly, but rather use\n /// `named_region_map`, `is_late_bound_map`, etc.\n #[tracing::instrument(level = \"debug\", skip(tcx))]\n fn resolve_lifetimes(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> ResolveLifetimes {\n-    do_resolve(tcx, local_def_id, false)\n+    convert_named_region_map(do_resolve(tcx, local_def_id, false, false))\n }\n \n fn do_resolve(\n     tcx: TyCtxt<'_>,\n     local_def_id: LocalDefId,\n     trait_definition_only: bool,\n-) -> ResolveLifetimes {\n+    with_scope_for_path: bool,\n+) -> NamedRegionMap {\n     let item = tcx.hir().expect_item(tcx.hir().local_def_id_to_hir_id(local_def_id));\n     let mut named_region_map = NamedRegionMap {\n         defs: Default::default(),\n         late_bound: Default::default(),\n         late_bound_vars: Default::default(),\n+        scope_for_path: with_scope_for_path.then(|| Default::default()),\n     };\n     let mut visitor = LifetimeContext {\n         tcx,\n@@ -455,6 +466,10 @@ fn do_resolve(\n     };\n     visitor.visit_item(item);\n \n+    named_region_map\n+}\n+\n+fn convert_named_region_map(named_region_map: NamedRegionMap) -> ResolveLifetimes {\n     let mut rl = ResolveLifetimes::default();\n \n     for (hir_id, v) in named_region_map.defs {\n@@ -567,6 +582,41 @@ fn late_region_as_bound_region<'tcx>(tcx: TyCtxt<'tcx>, region: &Region) -> ty::\n     }\n }\n \n+#[tracing::instrument(level = \"debug\")]\n+fn get_lifetime_scopes_for_path(mut scope: &Scope<'_>) -> LifetimeScopeForPath {\n+    let mut available_lifetimes = vec![];\n+    loop {\n+        match scope {\n+            Scope::Binder { lifetimes, s, .. } => {\n+                available_lifetimes.extend(lifetimes.keys().filter_map(|p| match p {\n+                    hir::ParamName::Plain(ident) => Some(ident.name.to_string()),\n+                    _ => None,\n+                }));\n+                scope = s;\n+            }\n+            Scope::Body { s, .. } => {\n+                scope = s;\n+            }\n+            Scope::Elision { elide, s } => {\n+                if let Elide::Exact(_) = elide {\n+                    return LifetimeScopeForPath::Elided;\n+                } else {\n+                    scope = s;\n+                }\n+            }\n+            Scope::ObjectLifetimeDefault { s, .. } => {\n+                scope = s;\n+            }\n+            Scope::Root => {\n+                return LifetimeScopeForPath::NonElided(available_lifetimes);\n+            }\n+            Scope::Supertrait { s, .. } | Scope::TraitRefBoundary { s, .. } => {\n+                scope = s;\n+            }\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     /// Returns the binders in scope and the type of `Binder` that should be created for a poly trait ref.\n     fn poly_trait_ref_binder_info(&mut self) -> (Vec<ty::BoundVariableKind>, BinderScopeType) {\n@@ -656,7 +706,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.map.late_bound_vars.insert(hir_id, vec![]);\n                 let scope = Scope::Binder {\n                     hir_id,\n-                    lifetimes: FxHashMap::default(),\n+                    lifetimes: FxIndexMap::default(),\n                     next_early_index: self.next_early_index(),\n                     s: self.scope,\n                     track_lifetime_uses: true,\n@@ -720,9 +770,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             // We need to add *all* deps, since opaque tys may want them from *us*\n                             for (&owner, defs) in resolved_lifetimes.defs.iter() {\n                                 defs.iter().for_each(|(&local_id, region)| {\n-                                    self.map\n-                                        .defs\n-                                        .insert(hir::HirId { owner, local_id }, region.clone());\n+                                    self.map.defs.insert(hir::HirId { owner, local_id }, *region);\n                                 });\n                             }\n                             for (&owner, late_bound) in resolved_lifetimes.late_bound.iter() {\n@@ -836,7 +884,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 };\n                 self.missing_named_lifetime_spots\n                     .push(MissingLifetimeSpot::HigherRanked { span, span_type });\n-                let (lifetimes, binders): (FxHashMap<hir::ParamName, Region>, Vec<_>) = c\n+                let (lifetimes, binders): (FxIndexMap<hir::ParamName, Region>, Vec<_>) = c\n                     .generic_params\n                     .iter()\n                     .filter_map(|param| match param.kind {\n@@ -1010,7 +1058,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 debug!(?index);\n \n                 let mut elision = None;\n-                let mut lifetimes = FxHashMap::default();\n+                let mut lifetimes = FxIndexMap::default();\n                 let mut non_lifetime_count = 0;\n                 for param in generics.params {\n                     match param.kind {\n@@ -1181,7 +1229,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let mut index = self.next_early_index();\n                 let mut non_lifetime_count = 0;\n                 debug!(\"visit_ty: index = {}\", index);\n-                let lifetimes: FxHashMap<hir::ParamName, Region> = generics\n+                let lifetimes: FxIndexMap<hir::ParamName, Region> = generics\n                     .params\n                     .iter()\n                     .filter_map(|param| match param.kind {\n@@ -1241,15 +1289,53 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         self.resolve_lifetime_ref(lifetime_ref);\n     }\n \n+    fn visit_assoc_type_binding(&mut self, type_binding: &'tcx hir::TypeBinding<'_>) {\n+        let scope = self.scope;\n+        if let Some(scope_for_path) = self.map.scope_for_path.as_mut() {\n+            // We add lifetime scope information for `Ident`s in associated type bindings and use\n+            // the `HirId` of the type binding as the key in `LifetimeMap`\n+            let lifetime_scope = get_lifetime_scopes_for_path(scope);\n+            let map = scope_for_path.entry(type_binding.hir_id.owner).or_default();\n+            map.insert(type_binding.hir_id.local_id, lifetime_scope);\n+        }\n+        hir::intravisit::walk_assoc_type_binding(self, type_binding);\n+    }\n+\n     fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _: hir::HirId) {\n         for (i, segment) in path.segments.iter().enumerate() {\n             let depth = path.segments.len() - i - 1;\n             if let Some(ref args) = segment.args {\n                 self.visit_segment_args(path.res, depth, args);\n             }\n+\n+            let scope = self.scope;\n+            if let Some(scope_for_path) = self.map.scope_for_path.as_mut() {\n+                // Add lifetime scope information to path segment. Note we cannot call `visit_path_segment`\n+                // here because that call would yield to resolution problems due to `walk_path_segment`\n+                // being called, which processes the path segments generic args, which we have already\n+                // processed using `visit_segment_args`.\n+                let lifetime_scope = get_lifetime_scopes_for_path(scope);\n+                if let Some(hir_id) = segment.hir_id {\n+                    let map = scope_for_path.entry(hir_id.owner).or_default();\n+                    map.insert(hir_id.local_id, lifetime_scope);\n+                }\n+            }\n         }\n     }\n \n+    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'tcx hir::PathSegment<'tcx>) {\n+        let scope = self.scope;\n+        if let Some(scope_for_path) = self.map.scope_for_path.as_mut() {\n+            let lifetime_scope = get_lifetime_scopes_for_path(scope);\n+            if let Some(hir_id) = path_segment.hir_id {\n+                let map = scope_for_path.entry(hir_id.owner).or_default();\n+                map.insert(hir_id.local_id, lifetime_scope);\n+            }\n+        }\n+\n+        intravisit::walk_path_segment(self, path_span, path_segment);\n+    }\n+\n     fn visit_fn_decl(&mut self, fd: &'tcx hir::FnDecl<'tcx>) {\n         let output = match fd.output {\n             hir::FnRetTy::DefaultReturn(_) => None,\n@@ -1290,7 +1376,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         ref bound_generic_params,\n                         ..\n                     }) => {\n-                        let (lifetimes, binders): (FxHashMap<hir::ParamName, Region>, Vec<_>) =\n+                        let (lifetimes, binders): (FxIndexMap<hir::ParamName, Region>, Vec<_>) =\n                             bound_generic_params\n                                 .iter()\n                                 .filter_map(|param| match param.kind {\n@@ -1360,7 +1446,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.map.late_bound_vars.insert(*hir_id, binders);\n                 let scope = Scope::Binder {\n                     hir_id: *hir_id,\n-                    lifetimes: FxHashMap::default(),\n+                    lifetimes: FxIndexMap::default(),\n                     s: self.scope,\n                     next_early_index: self.next_early_index(),\n                     track_lifetime_uses: true,\n@@ -1388,7 +1474,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         let (mut binders, scope_type) = self.poly_trait_ref_binder_info();\n \n         let initial_bound_vars = binders.len() as u32;\n-        let mut lifetimes: FxHashMap<hir::ParamName, Region> = FxHashMap::default();\n+        let mut lifetimes: FxIndexMap<hir::ParamName, Region> = FxIndexMap::default();\n         let binders_iter = trait_ref\n             .bound_generic_params\n             .iter()\n@@ -2115,7 +2201,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         let mut non_lifetime_count = 0;\n         let mut named_late_bound_vars = 0;\n-        let lifetimes: FxHashMap<hir::ParamName, Region> = generics\n+        let lifetimes: FxIndexMap<hir::ParamName, Region> = generics\n             .params\n             .iter()\n             .filter_map(|param| match param.kind {\n@@ -3034,6 +3120,16 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n \n+        // If we specifically need the `scope_for_path` map, then we're in the\n+        // diagnostic pass and we don't want to emit more errors.\n+        if self.map.scope_for_path.is_some() {\n+            self.tcx.sess.delay_span_bug(\n+                rustc_span::DUMMY_SP,\n+                \"Encountered unexpected errors during diagnostics related part\",\n+            );\n+            return;\n+        }\n+\n         let mut spans: Vec<_> = lifetime_refs.iter().map(|lt| lt.span).collect();\n         spans.sort();\n         let mut spans_dedup = spans.clone();"}, {"sha": "456f2a908a8c1c764fe0d64cb460942b7d8d841a", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 96, "deletions": 38, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -4,7 +4,7 @@ use crate::astconv::{\n     GenericArgCountResult, GenericArgPosition,\n };\n use crate::errors::AssocTypeBindingNotAllowed;\n-use crate::structured_errors::{StructuredDiagnostic, WrongNumberOfGenericArgs};\n+use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n@@ -438,6 +438,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         has_self: bool,\n         infer_args: bool,\n     ) -> GenericArgCountResult {\n+        debug!(\n+            \"check_generic_arg_count(span: {:?}, def_id: {:?}, seg: {:?}, gen_params: {:?}, gen_args: {:?})\",\n+            span, def_id, seg, gen_params, gen_args\n+        );\n+\n         let default_counts = gen_params.own_defaults();\n         let param_counts = gen_params.own_counts();\n         let named_type_param_count = param_counts.types - has_self as usize;\n@@ -453,79 +458,132 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let mut invalid_args = vec![];\n \n-        let mut check_generics =\n-            |kind, expected_min, expected_max, provided, params_offset, args_offset, silent| {\n+        let mut check_lifetime_args = |min_expected_args: usize,\n+                                       max_expected_args: usize,\n+                                       provided_args: usize,\n+                                       late_bounds_ignore: bool|\n+         -> bool {\n+            if (min_expected_args..=max_expected_args).contains(&provided_args) {\n+                return true;\n+            }\n+\n+            if late_bounds_ignore {\n+                return true;\n+            }\n+\n+            if provided_args > max_expected_args {\n+                invalid_args.extend(\n+                    gen_args.args[max_expected_args..provided_args].iter().map(|arg| arg.span()),\n+                );\n+            };\n+\n+            let gen_args_info = if provided_args > min_expected_args {\n+                invalid_args.extend(\n+                    gen_args.args[min_expected_args..provided_args].iter().map(|arg| arg.span()),\n+                );\n+                let num_redundant_args = provided_args - min_expected_args;\n+                GenericArgsInfo::ExcessLifetimes { num_redundant_args }\n+            } else {\n+                let num_missing_args = min_expected_args - provided_args;\n+                GenericArgsInfo::MissingLifetimes { num_missing_args }\n+            };\n+\n+            WrongNumberOfGenericArgs::new(\n+                tcx,\n+                gen_args_info,\n+                seg,\n+                gen_params,\n+                has_self as usize,\n+                gen_args,\n+                def_id,\n+            )\n+            .diagnostic()\n+            .emit();\n+\n+            false\n+        };\n+\n+        let min_expected_lifetime_args = if infer_lifetimes { 0 } else { param_counts.lifetimes };\n+        let max_expected_lifetime_args = param_counts.lifetimes;\n+        let num_provided_lifetime_args = arg_counts.lifetimes;\n+\n+        let lifetimes_correct = check_lifetime_args(\n+            min_expected_lifetime_args,\n+            max_expected_lifetime_args,\n+            num_provided_lifetime_args,\n+            explicit_late_bound == ExplicitLateBound::Yes,\n+        );\n+\n+        let mut check_types_and_consts =\n+            |expected_min, expected_max, provided, params_offset, args_offset| {\n+                debug!(\n+                    \"check_types_and_consts(expected_min: {:?}, expected_max: {:?}, \\\n+                        provided: {:?}, params_offset: {:?}, args_offset: {:?}\",\n+                    expected_min, expected_max, provided, params_offset, args_offset\n+                );\n                 if (expected_min..=expected_max).contains(&provided) {\n                     return true;\n                 }\n \n-                if silent {\n-                    return true;\n-                }\n+                let num_default_params = expected_max - expected_min;\n \n-                if provided > expected_max {\n+                let gen_args_info = if provided > expected_max {\n                     invalid_args.extend(\n                         gen_args.args[args_offset + expected_max..args_offset + provided]\n                             .iter()\n                             .map(|arg| arg.span()),\n                     );\n+                    let num_redundant_args = provided - expected_max;\n+\n+                    GenericArgsInfo::ExcessTypesOrConsts {\n+                        num_redundant_args,\n+                        num_default_params,\n+                        args_offset,\n+                    }\n+                } else {\n+                    let num_missing_args = expected_max - provided;\n+\n+                    GenericArgsInfo::MissingTypesOrConsts {\n+                        num_missing_args,\n+                        num_default_params,\n+                        args_offset,\n+                    }\n                 };\n \n-                WrongNumberOfGenericArgs {\n+                debug!(\"gen_args_info: {:?}\", gen_args_info);\n+\n+                WrongNumberOfGenericArgs::new(\n                     tcx,\n-                    kind,\n-                    expected_min,\n-                    expected_max,\n-                    provided,\n-                    params_offset,\n-                    args_offset,\n-                    path_segment: seg,\n+                    gen_args_info,\n+                    seg,\n                     gen_params,\n+                    params_offset,\n                     gen_args,\n                     def_id,\n-                    span,\n-                }\n+                )\n                 .diagnostic()\n                 .emit();\n \n                 false\n             };\n \n-        let lifetimes_correct = check_generics(\n-            \"lifetime\",\n-            if infer_lifetimes { 0 } else { param_counts.lifetimes },\n-            param_counts.lifetimes,\n-            arg_counts.lifetimes,\n-            has_self as usize,\n-            0,\n-            explicit_late_bound == ExplicitLateBound::Yes,\n-        );\n-\n         let args_correct = {\n-            let kind = if param_counts.consts + arg_counts.consts == 0 {\n-                \"type\"\n-            } else if named_type_param_count + arg_counts.types == 0 {\n-                \"const\"\n-            } else {\n-                \"generic\"\n-            };\n-\n             let expected_min = if infer_args {\n                 0\n             } else {\n                 param_counts.consts + named_type_param_count\n                     - default_counts.types\n                     - default_counts.consts\n             };\n+            debug!(\"expected_min: {:?}\", expected_min);\n+            debug!(\"arg_counts.lifetimes: {:?}\", arg_counts.lifetimes);\n \n-            check_generics(\n-                kind,\n+            check_types_and_consts(\n                 expected_min,\n                 param_counts.consts + named_type_param_count,\n                 arg_counts.consts + arg_counts.types,\n                 param_counts.lifetimes + has_self as usize,\n                 arg_counts.lifetimes,\n-                false,\n             )\n         };\n "}, {"sha": "7696a0c69cac9ec169f25198265e94c15e5b63b6", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -120,6 +120,7 @@ pub enum SizedByDefault {\n \n #[derive(Debug)]\n struct ConvertedBinding<'a, 'tcx> {\n+    hir_id: hir::HirId,\n     item_name: Ident,\n     kind: ConvertedBindingKind<'a, 'tcx>,\n     gen_args: &'a GenericArgs<'a>,\n@@ -590,6 +591,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 };\n                 ConvertedBinding {\n+                    hir_id: binding.hir_id,\n                     item_name: binding.ident,\n                     kind,\n                     gen_args: binding.gen_args,\n@@ -609,6 +611,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         item_segment: &hir::PathSegment<'_>,\n         parent_substs: SubstsRef<'tcx>,\n     ) -> SubstsRef<'tcx> {\n+        debug!(\n+            \"create_substs_for_associated_item(span: {:?}, item_def_id: {:?}, item_segment: {:?}\",\n+            span, item_def_id, item_segment\n+        );\n         if tcx.generics_of(item_def_id).params.is_empty() {\n             self.prohibit_generics(slice::from_ref(item_segment));\n \n@@ -1071,9 +1077,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // Include substitutions for generic parameters of associated types\n         let projection_ty = candidate.map_bound(|trait_ref| {\n+            let ident = Ident::new(assoc_ty.ident.name, binding.item_name.span);\n             let item_segment = hir::PathSegment {\n-                ident: assoc_ty.ident,\n-                hir_id: None,\n+                ident,\n+                hir_id: Some(binding.hir_id),\n                 res: None,\n                 args: Some(binding.gen_args),\n                 infer_args: false,"}, {"sha": "c533ca28321a10896d6df62b3d19a6af3e666141", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 599, "deletions": 201, "changes": 800, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,134 +1,410 @@\n use crate::structured_errors::StructuredDiagnostic;\n-use hir::def::DefKind;\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n+use rustc_middle::middle::resolve_lifetime::LifetimeScopeForPath;\n use rustc_middle::ty::{self as ty, TyCtxt};\n use rustc_session::Session;\n-use rustc_span::Span;\n use rustc_span::{def_id::DefId, MultiSpan};\n \n+use GenericArgsInfo::*;\n+\n /// Handles the `wrong number of type / lifetime / ... arguments` family of error messages.\n pub struct WrongNumberOfGenericArgs<'a, 'tcx> {\n     crate tcx: TyCtxt<'tcx>,\n \n-    /// \"type\", \"lifetime\" etc., put verbatim into the message\n-    crate kind: &'static str,\n-\n-    /// Minimum number of expected generic arguments (e.g. `2` for `HashMap`)\n-    crate expected_min: usize,\n+    crate angle_brackets: AngleBrackets,\n \n-    /// Maximum number of expected generic arguments (e.g. `3` for `HashMap`)\n-    crate expected_max: usize,\n-\n-    /// Number of generic arguments provided by the user\n-    crate provided: usize,\n-\n-    /// Offset into `gen_params` - depends on the `kind`; might be different than `args_offset` when\n-    /// user passed e.g. more arguments than was actually expected\n-    crate params_offset: usize,\n-\n-    /// Offset into `gen_args` - depends on the `kind`\n-    crate args_offset: usize,\n+    crate gen_args_info: GenericArgsInfo,\n \n     /// Offending path segment\n     crate path_segment: &'a hir::PathSegment<'a>,\n \n     /// Generic parameters as expected by type or trait\n     crate gen_params: &'a ty::Generics,\n \n+    /// Index offset into parameters. Depends on whether `Self` is included and on\n+    /// number of lifetime parameters in case we're processing missing or redundant\n+    /// type or constant arguments.\n+    crate params_offset: usize,\n+\n     /// Generic arguments as provided by user\n     crate gen_args: &'a hir::GenericArgs<'a>,\n \n     /// DefId of the generic type\n     crate def_id: DefId,\n+}\n+\n+// Provides information about the kind of arguments that were provided for\n+// the PathSegment, for which missing generic arguments were detected\n+#[derive(Debug)]\n+pub(crate) enum AngleBrackets {\n+    // No angle brackets were provided, but generic arguments exist in elided form\n+    Implied,\n+\n+    // No angle brackets were provided\n+    Missing,\n+\n+    // Angle brackets are available, but missing some generic arguments\n+    Available,\n+}\n \n-    /// Offending place where the generic type has been misused\n-    crate span: Span,\n+// Information about the kind of arguments that are either missing or are unexpected\n+#[derive(Debug)]\n+pub enum GenericArgsInfo {\n+    MissingLifetimes {\n+        num_missing_args: usize,\n+    },\n+    ExcessLifetimes {\n+        num_redundant_args: usize,\n+    },\n+    MissingTypesOrConsts {\n+        num_missing_args: usize,\n+\n+        // type or const generic arguments can have default values\n+        num_default_params: usize,\n+\n+        // lifetime arguments precede type and const parameters, this\n+        // field gives the number of generic lifetime arguments to let\n+        // us infer the position of type and const generic arguments\n+        // in the angle brackets\n+        args_offset: usize,\n+    },\n+\n+    ExcessTypesOrConsts {\n+        num_redundant_args: usize,\n+\n+        // type or const generic arguments can have default values\n+        num_default_params: usize,\n+\n+        // lifetime arguments precede type and const parameters, this\n+        // field gives the number of generic lifetime arguments to let\n+        // us infer the position of type and const generic arguments\n+        // in the angle brackets\n+        args_offset: usize,\n+    },\n }\n \n-impl<'tcx> WrongNumberOfGenericArgs<'_, 'tcx> {\n-    fn quantifier_and_bound(&self) -> (&'static str, usize) {\n-        if self.expected_min == self.expected_max {\n-            (\"\", self.expected_min)\n-        } else if self.provided < self.expected_min {\n-            (\"at least \", self.expected_min)\n+impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n+    pub fn new(\n+        tcx: TyCtxt<'tcx>,\n+        gen_args_info: GenericArgsInfo,\n+        path_segment: &'a hir::PathSegment<'_>,\n+        gen_params: &'a ty::Generics,\n+        params_offset: usize,\n+        gen_args: &'a hir::GenericArgs<'a>,\n+        def_id: DefId,\n+    ) -> Self {\n+        let angle_brackets = if gen_args.is_empty() {\n+            AngleBrackets::Missing\n         } else {\n-            (\"at most \", self.expected_max)\n+            if gen_args.span().is_none() {\n+                AngleBrackets::Implied\n+            } else {\n+                AngleBrackets::Available\n+            }\n+        };\n+\n+        Self {\n+            tcx,\n+            angle_brackets,\n+            gen_args_info,\n+            path_segment,\n+            gen_params,\n+            params_offset,\n+            gen_args,\n+            def_id,\n         }\n     }\n \n-    fn start_diagnostics(&self) -> DiagnosticBuilder<'tcx> {\n-        let span = self.path_segment.ident.span;\n+    fn missing_lifetimes(&self) -> bool {\n+        match self.gen_args_info {\n+            MissingLifetimes { .. } | ExcessLifetimes { .. } => true,\n+            MissingTypesOrConsts { .. } | ExcessTypesOrConsts { .. } => false,\n+        }\n+    }\n \n-        let msg = {\n-            let def_path = self.tcx.def_path_str(self.def_id);\n-            let def_kind = self.tcx.def_kind(self.def_id).descr(self.def_id);\n-            let (quantifier, bound) = self.quantifier_and_bound();\n+    fn kind(&self) -> String {\n+        if self.missing_lifetimes() { \"lifetime\".to_string() } else { \"generic\".to_string() }\n+    }\n \n-            if self.gen_args.span().is_some() {\n-                format!(\n-                    \"this {} takes {}{} {} argument{} but {}{} {} argument{} {} supplied\",\n-                    def_kind,\n-                    quantifier,\n-                    bound,\n-                    self.kind,\n-                    pluralize!(bound),\n-                    if self.provided > 0 && self.provided < self.expected_min {\n-                        \"only \"\n-                    } else {\n-                        \"\"\n-                    },\n-                    self.provided,\n-                    self.kind,\n-                    pluralize!(self.provided),\n-                    if self.provided == 1 { \"was\" } else { \"were\" },\n-                )\n-            } else {\n-                format!(\"missing generics for {} `{}`\", def_kind, def_path)\n+    fn num_provided_args(&self) -> usize {\n+        if self.missing_lifetimes() {\n+            self.num_provided_lifetime_args()\n+        } else {\n+            self.num_provided_type_or_const_args()\n+        }\n+    }\n+\n+    fn num_provided_lifetime_args(&self) -> usize {\n+        match self.angle_brackets {\n+            AngleBrackets::Missing => 0,\n+            // Only lifetime arguments can be implied\n+            AngleBrackets::Implied => self.gen_args.args.len(),\n+            AngleBrackets::Available => self.gen_args.args.iter().fold(0, |acc, arg| match arg {\n+                hir::GenericArg::Lifetime(_) => acc + 1,\n+                _ => acc,\n+            }),\n+        }\n+    }\n+\n+    fn num_provided_type_or_const_args(&self) -> usize {\n+        match self.angle_brackets {\n+            AngleBrackets::Missing => 0,\n+            // Only lifetime arguments can be implied\n+            AngleBrackets::Implied => 0,\n+            AngleBrackets::Available => self.gen_args.args.iter().fold(0, |acc, arg| match arg {\n+                hir::GenericArg::Type(_) | hir::GenericArg::Const(_) => acc + 1,\n+                _ => acc,\n+            }),\n+        }\n+    }\n+\n+    fn num_expected_lifetime_args(&self) -> usize {\n+        let num_provided_args = self.num_provided_lifetime_args();\n+        match self.gen_args_info {\n+            MissingLifetimes { num_missing_args } => num_provided_args + num_missing_args,\n+            ExcessLifetimes { num_redundant_args } => num_provided_args - num_redundant_args,\n+            _ => 0,\n+        }\n+    }\n+\n+    fn num_expected_type_or_const_args(&self) -> usize {\n+        let num_provided_args = self.num_provided_type_or_const_args();\n+        match self.gen_args_info {\n+            MissingTypesOrConsts { num_missing_args, .. } => num_provided_args + num_missing_args,\n+            ExcessTypesOrConsts { num_redundant_args, .. } => {\n+                num_provided_args - num_redundant_args\n+            }\n+            _ => 0,\n+        }\n+    }\n+\n+    // Gives the number of expected arguments taking into account default arguments\n+    fn num_expected_type_or_const_args_including_defaults(&self) -> usize {\n+        let provided_args = self.num_provided_type_or_const_args();\n+        match self.gen_args_info {\n+            MissingTypesOrConsts { num_missing_args, num_default_params, .. } => {\n+                provided_args + num_missing_args - num_default_params\n+            }\n+            ExcessTypesOrConsts { num_redundant_args, num_default_params, .. } => {\n+                provided_args - num_redundant_args - num_default_params\n+            }\n+            _ => 0,\n+        }\n+    }\n+\n+    fn num_missing_lifetime_args(&self) -> usize {\n+        let missing_args = self.num_expected_lifetime_args() - self.num_provided_lifetime_args();\n+        assert!(missing_args > 0);\n+        missing_args\n+    }\n+\n+    fn num_missing_type_or_const_args(&self) -> usize {\n+        let missing_args = self.num_expected_type_or_const_args_including_defaults()\n+            - self.num_provided_type_or_const_args();\n+        assert!(missing_args > 0);\n+        missing_args\n+    }\n+\n+    fn num_excess_lifetime_args(&self) -> usize {\n+        match self.gen_args_info {\n+            ExcessLifetimes { num_redundant_args } => num_redundant_args,\n+            _ => 0,\n+        }\n+    }\n+\n+    fn num_excess_type_or_const_args(&self) -> usize {\n+        match self.gen_args_info {\n+            ExcessTypesOrConsts { num_redundant_args, .. } => num_redundant_args,\n+            _ => 0,\n+        }\n+    }\n+\n+    fn too_many_args_provided(&self) -> bool {\n+        match self.gen_args_info {\n+            MissingLifetimes { .. } | MissingTypesOrConsts { .. } => false,\n+            ExcessLifetimes { num_redundant_args }\n+            | ExcessTypesOrConsts { num_redundant_args, .. } => {\n+                assert!(num_redundant_args > 0);\n+                true\n+            }\n+        }\n+    }\n+\n+    fn not_enough_args_provided(&self) -> bool {\n+        match self.gen_args_info {\n+            MissingLifetimes { num_missing_args }\n+            | MissingTypesOrConsts { num_missing_args, .. } => {\n+                assert!(num_missing_args > 0);\n+                true\n+            }\n+            ExcessLifetimes { .. } | ExcessTypesOrConsts { .. } => false,\n+        }\n+    }\n+\n+    // Helper method to get the index offset in angle brackets, at which type or const arguments\n+    // start appearing\n+    fn get_lifetime_args_offset(&self) -> usize {\n+        match self.gen_args_info {\n+            MissingLifetimes { .. } | ExcessLifetimes { .. } => 0,\n+            MissingTypesOrConsts { args_offset, .. } | ExcessTypesOrConsts { args_offset, .. } => {\n+                args_offset\n             }\n+        }\n+    }\n+\n+    fn get_num_default_params(&self) -> usize {\n+        match self.gen_args_info {\n+            MissingTypesOrConsts { num_default_params, .. }\n+            | ExcessTypesOrConsts { num_default_params, .. } => num_default_params,\n+            _ => 0,\n+        }\n+    }\n+\n+    // Helper function to choose a quantifier word for the number of expected arguments\n+    // and to give a bound for the number of expected arguments\n+    fn get_quantifier_and_bound(&self) -> (&'static str, usize) {\n+        if self.get_num_default_params() == 0 {\n+            match self.gen_args_info {\n+                MissingLifetimes { .. } | ExcessLifetimes { .. } => {\n+                    (\"\", self.num_expected_lifetime_args())\n+                }\n+                MissingTypesOrConsts { .. } | ExcessTypesOrConsts { .. } => {\n+                    (\"\", self.num_expected_type_or_const_args())\n+                }\n+            }\n+        } else {\n+            match self.gen_args_info {\n+                MissingLifetimes { .. } => (\"at least \", self.num_expected_lifetime_args()),\n+                MissingTypesOrConsts { .. } => {\n+                    (\"at least \", self.num_expected_type_or_const_args_including_defaults())\n+                }\n+                ExcessLifetimes { .. } => (\"at most \", self.num_expected_lifetime_args()),\n+                ExcessTypesOrConsts { .. } => (\"at most \", self.num_expected_type_or_const_args()),\n+            }\n+        }\n+    }\n+\n+    // Creates lifetime name suggestions from the lifetime parameter names\n+    fn get_lifetime_args_suggestions_from_param_names(&self, num_params_to_take: usize) -> String {\n+        self.gen_params\n+            .params\n+            .iter()\n+            .skip(self.params_offset + self.num_provided_lifetime_args())\n+            .take(num_params_to_take)\n+            .map(|param| param.name.to_string())\n+            .collect::<Vec<_>>()\n+            .join(\", \")\n+    }\n+\n+    // Creates type or constant name suggestions from the provided parameter names\n+    fn get_type_or_const_args_suggestions_from_param_names(\n+        &self,\n+        num_params_to_take: usize,\n+    ) -> String {\n+        self.gen_params\n+            .params\n+            .iter()\n+            .skip(self.params_offset + self.num_provided_type_or_const_args())\n+            .take(num_params_to_take)\n+            .map(|param| param.name.to_string())\n+            .collect::<Vec<_>>()\n+            .join(\", \")\n+    }\n+\n+    fn create_error_message(&self) -> String {\n+        let def_path = self.tcx.def_path_str(self.def_id);\n+        let def_kind = self.tcx.def_kind(self.def_id).descr(self.def_id);\n+        let (quantifier, bound) = self.get_quantifier_and_bound();\n+        let kind = self.kind();\n+        let provided_lt_args = self.num_provided_lifetime_args();\n+        let provided_type_or_const_args = self.num_provided_type_or_const_args();\n+\n+        let get_verb = |num_args| if num_args == 1 { \"was\" } else { \"were\" };\n+\n+        let (provided_args_str, verb) = match self.gen_args_info {\n+            MissingLifetimes { .. } | ExcessLifetimes { .. } => (\n+                format!(\"{} lifetime argument{}\", provided_lt_args, pluralize!(provided_lt_args)),\n+                get_verb(provided_lt_args),\n+            ),\n+            MissingTypesOrConsts { .. } | ExcessTypesOrConsts { .. } => (\n+                format!(\n+                    \"{} generic argument{}\",\n+                    provided_type_or_const_args,\n+                    pluralize!(provided_type_or_const_args)\n+                ),\n+                get_verb(provided_type_or_const_args),\n+            ),\n         };\n \n+        if self.gen_args.span().is_some() {\n+            format!(\n+                \"this {} takes {}{} {} argument{} but {} {} supplied\",\n+                def_kind,\n+                quantifier,\n+                bound,\n+                kind,\n+                pluralize!(bound),\n+                provided_args_str.as_str(),\n+                verb\n+            )\n+        } else {\n+            format!(\"missing generics for {} `{}`\", def_kind, def_path)\n+        }\n+    }\n+\n+    fn start_diagnostics(&self) -> DiagnosticBuilder<'tcx> {\n+        let span = self.path_segment.ident.span;\n+        let msg = self.create_error_message();\n+\n         self.tcx.sess.struct_span_err_with_code(span, &msg, self.code())\n     }\n \n     /// Builds the `expected 1 type argument / supplied 2 type arguments` message.\n     fn notify(&self, err: &mut DiagnosticBuilder<'_>) {\n-        let (quantifier, bound) = self.quantifier_and_bound();\n+        let (quantifier, bound) = self.get_quantifier_and_bound();\n+        let provided_args = self.num_provided_args();\n \n         err.span_label(\n             self.path_segment.ident.span,\n             format!(\n                 \"expected {}{} {} argument{}\",\n                 quantifier,\n                 bound,\n-                self.kind,\n+                self.kind(),\n                 pluralize!(bound),\n             ),\n         );\n \n-        // When user's provided too many arguments, we don't highlight each of them, because it\n+        // When too many arguments were provided, we don't highlight each of them, because it\n         // would overlap with the suggestion to remove them:\n         //\n         // ```\n         // type Foo = Bar<usize, usize>;\n         //                -----  ----- supplied 2 type arguments\n         //                     ^^^^^^^ remove this type argument\n         // ```\n-        if self.provided > self.expected_max {\n+        if self.too_many_args_provided() {\n             return;\n         }\n \n-        let args = self.gen_args.args.iter().skip(self.args_offset).take(self.provided).enumerate();\n+        let args = self\n+            .gen_args\n+            .args\n+            .iter()\n+            .skip(self.get_lifetime_args_offset())\n+            .take(provided_args)\n+            .enumerate();\n \n         for (i, arg) in args {\n             err.span_label(\n                 arg.span(),\n-                if i + 1 == self.provided {\n+                if i + 1 == provided_args {\n                     format!(\n                         \"supplied {} {} argument{}\",\n-                        self.provided,\n-                        self.kind,\n-                        pluralize!(self.provided)\n+                        provided_args,\n+                        self.kind(),\n+                        pluralize!(provided_args)\n                     )\n                 } else {\n                     String::new()\n@@ -138,56 +414,24 @@ impl<'tcx> WrongNumberOfGenericArgs<'_, 'tcx> {\n     }\n \n     fn suggest(&self, err: &mut DiagnosticBuilder<'_>) {\n-        if self.provided == 0 {\n-            if self.gen_args.span().is_some() {\n-                self.suggest_adding_args(err);\n-            } else {\n-                self.suggest_creating_generics(err);\n-            }\n-        } else if self.provided < self.expected_min {\n-            self.suggest_adding_args(err);\n-        } else {\n-            self.suggest_removing_args_or_generics(err);\n-        }\n-    }\n-\n-    /// Suggests to create generics (`<...>`) when current invocation site contains no generics at\n-    /// all:\n-    ///\n-    /// ```text\n-    /// type Map = HashMap;\n-    /// ```\n-    fn suggest_creating_generics(&self, err: &mut DiagnosticBuilder<'_>) {\n-        let params = self\n-            .gen_params\n-            .params\n-            .iter()\n-            .skip(self.params_offset)\n-            .take(self.expected_min)\n-            .map(|param| param.name.to_string())\n-            .collect::<Vec<_>>()\n-            .join(\", \");\n-\n-        let def_kind = self.tcx.def_kind(self.def_id);\n-\n-        let sugg = if matches!(def_kind, DefKind::Fn | DefKind::AssocFn) {\n-            format!(\"::<{}>\", params)\n-        } else {\n-            format!(\"<{}>\", params)\n-        };\n-\n-        let msg = format!(\n-            \"use angle brackets to add missing {} argument{}\",\n-            self.kind,\n-            pluralize!(self.expected_min),\n+        debug!(\n+            \"suggest(self.provided {:?}, self.gen_args.span(): {:?})\",\n+            self.num_provided_args(),\n+            self.gen_args.span(),\n         );\n \n-        err.span_suggestion_verbose(\n-            self.path_segment.ident.span.shrink_to_hi(),\n-            &msg,\n-            sugg,\n-            Applicability::HasPlaceholders,\n-        );\n+        match self.angle_brackets {\n+            AngleBrackets::Missing | AngleBrackets::Implied => self.suggest_adding_args(err),\n+            AngleBrackets::Available => {\n+                if self.not_enough_args_provided() {\n+                    self.suggest_adding_args(err);\n+                } else if self.too_many_args_provided() {\n+                    self.suggest_removing_args_or_generics(err);\n+                } else {\n+                    unreachable!();\n+                }\n+            }\n+        }\n     }\n \n     /// Suggests to add missing argument(s) when current invocation site already contains some\n@@ -197,38 +441,167 @@ impl<'tcx> WrongNumberOfGenericArgs<'_, 'tcx> {\n     /// type Map = HashMap<String>;\n     /// ```\n     fn suggest_adding_args(&self, err: &mut DiagnosticBuilder<'_>) {\n-        assert!(!self.gen_args.is_empty());\n-\n         if self.gen_args.parenthesized {\n             return;\n         }\n \n-        let missing_arg_count = self.expected_min - self.provided;\n+        match self.gen_args_info {\n+            MissingLifetimes { .. } => {\n+                self.suggest_adding_lifetime_args(err);\n+            }\n+            MissingTypesOrConsts { .. } => {\n+                self.suggest_adding_type_and_const_args(err);\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n \n-        let (span, sugg_prefix) = if self.args_offset + self.provided == 0 {\n-            let span = self.gen_args.args[0].span().shrink_to_lo();\n-            (span, \"\")\n+    fn suggest_adding_lifetime_args(&self, err: &mut DiagnosticBuilder<'_>) {\n+        debug!(\"suggest_adding_lifetime_args(path_segment: {:?})\", self.path_segment);\n+        let num_missing_args = self.num_missing_lifetime_args();\n+        let num_params_to_take = num_missing_args;\n+        let msg = format!(\"add missing {} argument{}\", self.kind(), pluralize!(num_missing_args));\n+\n+        // we first try to get lifetime name suggestions from scope or elision information. If none is\n+        // available we use the parameter defintions\n+        let suggested_args = if let Some(hir_id) = self.path_segment.hir_id {\n+            if let Some(lifetimes_in_scope) = self.tcx.lifetime_scope(hir_id) {\n+                match lifetimes_in_scope {\n+                    LifetimeScopeForPath::NonElided(param_names) => {\n+                        debug!(\"NonElided(param_names: {:?})\", param_names);\n+\n+                        if param_names.len() >= num_params_to_take {\n+                            // use lifetime parameters in scope for suggestions\n+                            param_names\n+                                .iter()\n+                                .take(num_params_to_take)\n+                                .map(|p| (*p).clone())\n+                                .collect::<Vec<_>>()\n+                                .join(\", \")\n+                        } else {\n+                            // Not enough lifetime arguments in scope -> create suggestions from\n+                            // lifetime parameter names in definition. An error for the incorrect\n+                            // lifetime scope will be output later.\n+                            self.get_lifetime_args_suggestions_from_param_names(num_params_to_take)\n+                        }\n+                    }\n+                    LifetimeScopeForPath::Elided => {\n+                        debug!(\"Elided\");\n+                        // use suggestions of the form `<'_, '_>` in case lifetime can be elided\n+                        [\"'_\"].repeat(num_params_to_take).join(\",\")\n+                    }\n+                }\n+            } else {\n+                self.get_lifetime_args_suggestions_from_param_names(num_params_to_take)\n+            }\n         } else {\n-            let span =\n-                self.gen_args.args[self.args_offset + self.provided - 1].span().shrink_to_hi();\n-            (span, \", \")\n+            self.get_lifetime_args_suggestions_from_param_names(num_params_to_take)\n         };\n \n-        let msg = format!(\"add missing {} argument{}\", self.kind, pluralize!(missing_arg_count));\n+        debug!(\"suggested_args: {:?}\", &suggested_args);\n \n-        let sugg = self\n-            .gen_params\n-            .params\n-            .iter()\n-            .skip(self.params_offset + self.provided)\n-            .take(missing_arg_count)\n-            .map(|param| param.name.to_string())\n-            .collect::<Vec<_>>()\n-            .join(\", \");\n+        match self.angle_brackets {\n+            AngleBrackets::Missing => {\n+                let span = self.path_segment.ident.span;\n+\n+                // insert a suggestion of the form \"Y<'a, 'b>\"\n+                let ident = self.path_segment.ident.name.to_ident_string();\n+                let sugg = format!(\"{}<{}>\", ident, suggested_args);\n+                debug!(\"sugg: {:?}\", sugg);\n+\n+                err.span_suggestion_verbose(span, &msg, sugg, Applicability::HasPlaceholders);\n+            }\n+\n+            AngleBrackets::Available => {\n+                // angle brackets exist, so we insert missing arguments after the existing args\n+\n+                assert!(!self.gen_args.args.is_empty());\n+\n+                if self.num_provided_lifetime_args() > 0 {\n+                    let last_lt_arg_span = self.gen_args.args\n+                        [self.num_provided_lifetime_args() - 1]\n+                        .span()\n+                        .shrink_to_hi();\n+                    let source_map = self.tcx.sess.source_map();\n \n-        let sugg = format!(\"{}{}\", sugg_prefix, sugg);\n+                    if let Ok(last_gen_arg) = source_map.span_to_snippet(last_lt_arg_span) {\n+                        let sugg = format!(\"{}, {}\", last_gen_arg, suggested_args);\n \n-        err.span_suggestion_verbose(span, &msg, sugg, Applicability::HasPlaceholders);\n+                        err.span_suggestion_verbose(\n+                            last_lt_arg_span,\n+                            &msg,\n+                            sugg,\n+                            Applicability::HasPlaceholders,\n+                        );\n+                    }\n+                } else {\n+                    // Non-lifetime arguments included in `gen_args` -> insert missing lifetimes before\n+                    // existing arguments\n+                    let first_arg_span = self.gen_args.args[0].span().shrink_to_lo();\n+                    let source_map = self.tcx.sess.source_map();\n+\n+                    if let Ok(first_gen_arg) = source_map.span_to_snippet(first_arg_span) {\n+                        let sugg = format!(\"{}, {}\", suggested_args, first_gen_arg);\n+\n+                        err.span_suggestion_verbose(\n+                            first_arg_span,\n+                            &msg,\n+                            sugg,\n+                            Applicability::HasPlaceholders,\n+                        );\n+                    }\n+                }\n+            }\n+            AngleBrackets::Implied => {\n+                // We never encounter missing lifetimes in situations in which lifetimes are elided\n+                unreachable!();\n+            }\n+        }\n+    }\n+\n+    fn suggest_adding_type_and_const_args(&self, err: &mut DiagnosticBuilder<'_>) {\n+        let num_missing_args = self.num_missing_type_or_const_args();\n+        let msg = format!(\"add missing {} argument{}\", self.kind(), pluralize!(num_missing_args));\n+\n+        let suggested_args =\n+            self.get_type_or_const_args_suggestions_from_param_names(num_missing_args);\n+        debug!(\"suggested_args: {:?}\", suggested_args);\n+\n+        match self.angle_brackets {\n+            AngleBrackets::Missing | AngleBrackets::Implied => {\n+                let span = self.path_segment.ident.span;\n+\n+                // insert a suggestion of the form \"Y<T, U>\"\n+                let ident = self.path_segment.ident.name.to_ident_string();\n+                let sugg = format!(\"{}<{}>\", ident, suggested_args);\n+                debug!(\"sugg: {:?}\", sugg);\n+\n+                err.span_suggestion_verbose(span, &msg, sugg, Applicability::HasPlaceholders);\n+            }\n+            AngleBrackets::Available => {\n+                // angle brackets exist, so we just insert missing arguments after the existing\n+                // type or const args\n+\n+                let index_last_provided_arg =\n+                    self.get_lifetime_args_offset() + self.num_provided_type_or_const_args() - 1;\n+                if index_last_provided_arg < self.gen_args.args.len() {\n+                    let first_arg_span =\n+                        self.gen_args.args[index_last_provided_arg].span().shrink_to_hi();\n+                    let source_map = self.tcx.sess.source_map();\n+                    if let Ok(first_gen_arg) = source_map.span_to_snippet(first_arg_span) {\n+                        let sugg = format!(\"{}, {}\", first_gen_arg, suggested_args);\n+                        debug!(\"sugg: {:?}\", sugg);\n+\n+                        err.span_suggestion_verbose(\n+                            first_arg_span,\n+                            &msg,\n+                            sugg,\n+                            Applicability::HasPlaceholders,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n     }\n \n     /// Suggests to remove redundant argument(s):\n@@ -237,12 +610,91 @@ impl<'tcx> WrongNumberOfGenericArgs<'_, 'tcx> {\n     /// type Map = HashMap<String, String, String, String>;\n     /// ```\n     fn suggest_removing_args_or_generics(&self, err: &mut DiagnosticBuilder<'_>) {\n-        assert!(self.provided > 0);\n+        let num_provided_lt_args = self.num_provided_lifetime_args();\n+        let num_provided_type_const_args = self.num_provided_type_or_const_args();\n+        let num_provided_args = num_provided_lt_args + num_provided_type_const_args;\n+        assert!(num_provided_args > 0);\n+\n+        let num_redundant_lt_args = self.num_excess_lifetime_args();\n+        let num_redundant_type_or_const_args = self.num_excess_type_or_const_args();\n+        let num_redundant_args = num_redundant_lt_args + num_redundant_type_or_const_args;\n+\n+        let redundant_lifetime_args = num_redundant_lt_args > 0;\n+        let redundant_type_or_const_args = num_redundant_type_or_const_args > 0;\n+\n+        let remove_entire_generics = num_redundant_args >= self.gen_args.args.len();\n+\n+        let remove_lifetime_args = |err: &mut DiagnosticBuilder<'_>| {\n+            let idx_first_redundant_lt_args = self.num_expected_lifetime_args();\n+            let span_lo_redundant_lt_args =\n+                self.gen_args.args[idx_first_redundant_lt_args].span().shrink_to_lo();\n+            let span_hi_redundant_lt_args = self.gen_args.args\n+                [idx_first_redundant_lt_args + num_redundant_lt_args - 1]\n+                .span()\n+                .shrink_to_hi();\n+            let eat_comma =\n+                idx_first_redundant_lt_args + num_redundant_lt_args - 1 != self.gen_args.args.len();\n+\n+            let span_redundant_lt_args = if eat_comma {\n+                let span_hi = self.gen_args.args\n+                    [idx_first_redundant_lt_args + num_redundant_lt_args - 1]\n+                    .span()\n+                    .shrink_to_hi();\n+                span_lo_redundant_lt_args.to(span_hi)\n+            } else {\n+                span_lo_redundant_lt_args.to(span_hi_redundant_lt_args)\n+            };\n+            debug!(\"span_redundant_lt_args: {:?}\", span_redundant_lt_args);\n+\n+            let msg_lifetimes = format!(\n+                \"remove {} {} argument{}\",\n+                if num_redundant_args == 1 { \"this\" } else { \"these\" },\n+                \"lifetime\",\n+                pluralize!(num_redundant_lt_args),\n+            );\n+\n+            err.span_suggestion(\n+                span_redundant_lt_args,\n+                &msg_lifetimes,\n+                String::new(),\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+\n+        let remove_type_or_const_args = |err: &mut DiagnosticBuilder<'_>| {\n+            let idx_first_redundant_type_or_const_args = self.get_lifetime_args_offset()\n+                + num_redundant_lt_args\n+                + self.num_expected_type_or_const_args();\n+\n+            let span_lo_redundant_type_or_const_args =\n+                self.gen_args.args[idx_first_redundant_type_or_const_args].span().shrink_to_lo();\n \n-        let redundant_args_count = self.provided - self.expected_max;\n-        let remove_entire_generics = redundant_args_count >= self.gen_args.args.len();\n+            let span_hi_redundant_type_or_const_args = self.gen_args.args\n+                [idx_first_redundant_type_or_const_args + num_redundant_type_or_const_args - 1]\n+                .span()\n+                .shrink_to_hi();\n \n-        let (span, msg) = if remove_entire_generics {\n+            let span_redundant_type_or_const_args =\n+                span_lo_redundant_type_or_const_args.to(span_hi_redundant_type_or_const_args);\n+\n+            debug!(\"span_redundant_type_or_const_args: {:?}\", span_redundant_type_or_const_args);\n+\n+            let msg_types_or_consts = format!(\n+                \"remove {} {} argument{}\",\n+                if num_redundant_args == 1 { \"this\" } else { \"these\" },\n+                \"generic\",\n+                pluralize!(num_redundant_type_or_const_args),\n+            );\n+\n+            err.span_suggestion(\n+                span_redundant_type_or_const_args,\n+                &msg_types_or_consts,\n+                String::new(),\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+\n+        if remove_entire_generics {\n             let sm = self.tcx.sess.source_map();\n \n             let span = self\n@@ -258,70 +710,16 @@ impl<'tcx> WrongNumberOfGenericArgs<'_, 'tcx> {\n                 if self.gen_args.parenthesized { \"parenthetical \" } else { \"\" },\n             );\n \n-            (span, msg)\n+            err.span_suggestion(span, &msg, String::new(), Applicability::MaybeIncorrect);\n+        } else if redundant_lifetime_args && redundant_type_or_const_args {\n+            remove_lifetime_args(err);\n+            remove_type_or_const_args(err);\n+        } else if redundant_lifetime_args {\n+            remove_lifetime_args(err);\n         } else {\n-            // When it comes to removing particular argument(s) from the generics, there are two\n-            // edge cases we have to consider:\n-            //\n-            // When the first redundant argument is at the beginning or in the middle of the\n-            // generics, like so:\n-            //\n-            // ```\n-            // type Map = HashMap<String, String, String, String>;\n-            //                    ^^^^^^^^^^^^^^^^\n-            //                    | span must start with the argument\n-            // ```\n-            //\n-            // When the last redundant argument is at the ending of the generics, like so:\n-            //\n-            // ```\n-            // type Map = HashMap<String, String, String, String>;\n-            //                                  ^^^^^^^^^^^^^^^^\n-            //                                  | span must start with the comma\n-            // ```\n-\n-            // Index of the first redundant argument\n-            let from_idx = self.args_offset + self.expected_max;\n-\n-            // Index of the last redundant argument\n-            let to_idx = self.args_offset + self.provided - 1;\n-\n-            assert!(from_idx <= to_idx);\n-\n-            let (from, comma_eaten) = {\n-                let first_argument_starts_generics = from_idx == 0;\n-                let last_argument_ends_generics = to_idx + 1 == self.gen_args.args.len();\n-\n-                if !first_argument_starts_generics && last_argument_ends_generics {\n-                    (self.gen_args.args[from_idx - 1].span().hi(), true)\n-                } else {\n-                    (self.gen_args.args[from_idx].span().lo(), false)\n-                }\n-            };\n-\n-            let to = {\n-                let hi = self.gen_args.args[to_idx].span().hi();\n-\n-                if comma_eaten {\n-                    hi\n-                } else {\n-                    self.gen_args.args.get(to_idx + 1).map(|arg| arg.span().lo()).unwrap_or(hi)\n-                }\n-            };\n-\n-            let span = Span::new(from, to, self.span.ctxt());\n-\n-            let msg = format!(\n-                \"remove {} {} argument{}\",\n-                if redundant_args_count == 1 { \"this\" } else { \"these\" },\n-                self.kind,\n-                pluralize!(redundant_args_count),\n-            );\n-\n-            (span, msg)\n-        };\n-\n-        err.span_suggestion(span, &msg, String::new(), Applicability::MaybeIncorrect);\n+            assert!(redundant_type_or_const_args);\n+            remove_type_or_const_args(err);\n+        }\n     }\n \n     /// Builds the `type defined here` message.\n@@ -334,7 +732,7 @@ impl<'tcx> WrongNumberOfGenericArgs<'_, 'tcx> {\n \n         let msg = {\n             let def_kind = self.tcx.def_kind(self.def_id).descr(self.def_id);\n-            let (quantifier, bound) = self.quantifier_and_bound();\n+            let (quantifier, bound) = self.get_quantifier_and_bound();\n \n             let params = if bound == 0 {\n                 String::new()\n@@ -362,7 +760,7 @@ impl<'tcx> WrongNumberOfGenericArgs<'_, 'tcx> {\n                 def_kind,\n                 quantifier,\n                 bound,\n-                self.kind,\n+                self.kind(),\n                 pluralize!(bound),\n                 params,\n             )"}, {"sha": "1dbf5db6c32ed9bdae77c7c18787f270c9d003db", "filename": "src/test/ui/async-await/issues/issue-65159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -3,7 +3,7 @@\n // edition:2018\n \n async fn copy() -> Result<()>\n-//~^ ERROR this enum takes 2 type arguments but only 1 type argument was supplied\n+//~^ ERROR this enum takes 2 generic arguments\n {\n     Ok(())\n     //~^ ERROR type annotations needed"}, {"sha": "51fc34c48186c5ebf7f4fcfb396331baaa806aac", "filename": "src/test/ui/async-await/issues/issue-65159.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,17 +1,17 @@\n-error[E0107]: this enum takes 2 type arguments but only 1 type argument was supplied\n+error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-65159.rs:5:20\n    |\n LL | async fn copy() -> Result<()>\n-   |                    ^^^^^^ -- supplied 1 type argument\n+   |                    ^^^^^^ -- supplied 1 generic argument\n    |                    |\n-   |                    expected 2 type arguments\n+   |                    expected 2 generic arguments\n    |\n-note: enum defined here, with 2 type parameters: `T`, `E`\n+note: enum defined here, with 2 generic parameters: `T`, `E`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {\n    |          ^^^^^^ -  -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL | async fn copy() -> Result<(), E>\n    |                             ^^^"}, {"sha": "569769b8213bff69417fc07200b2a9ff175ac535", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -15,7 +15,7 @@ impl MarketMultiplier {\n \n async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n     //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n-    //~^^ ERROR this struct takes 1 type argument but 0 type arguments were supplied\n+    //~^^ ERROR this struct takes 1 generic argument but 0 generic arguments were supplied\n     LockedMarket(generator.lock().unwrap().buy())\n     //~^ ERROR cannot return value referencing temporary value\n }"}, {"sha": "0d506a0956d21abbc50e2360995d6e5e737ab0c6", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -12,18 +12,18 @@ note: struct defined here, with 0 lifetime parameters\n LL | struct LockedMarket<T>(T);\n    |        ^^^^^^^^^^^^\n \n-error[E0107]: this struct takes 1 type argument but 0 type arguments were supplied\n+error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/issue-82126-mismatched-subst-and-hir.rs:16:59\n    |\n LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n-   |                                                           ^^^^^^^^^^^^ expected 1 type argument\n+   |                                                           ^^^^^^^^^^^^ expected 1 generic argument\n    |\n-note: struct defined here, with 1 type parameter: `T`\n+note: struct defined here, with 1 generic parameter: `T`\n   --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n    |\n LL | struct LockedMarket<T>(T);\n    |        ^^^^^^^^^^^^ -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_, T> {\n    |                                                                          ^^^"}, {"sha": "9deda56cd0df212ecb3fd3e622d093d6f14c125a", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.full.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,30 +1,30 @@\n-error[E0107]: this function takes 2 const arguments but only 1 const argument was supplied\n+error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/incorrect-number-of-const-args.rs:11:5\n    |\n LL |     foo::<0>();\n-   |     ^^^   - supplied 1 const argument\n+   |     ^^^   - supplied 1 generic argument\n    |     |\n-   |     expected 2 const arguments\n+   |     expected 2 generic arguments\n    |\n-note: function defined here, with 2 const parameters: `X`, `Y`\n+note: function defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/incorrect-number-of-const-args.rs:6:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {\n    |    ^^^       -               -\n-help: add missing const argument\n+help: add missing generic argument\n    |\n LL |     foo::<0, Y>();\n    |            ^^^\n \n-error[E0107]: this function takes 2 const arguments but 3 const arguments were supplied\n+error[E0107]: this function takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/incorrect-number-of-const-args.rs:14:5\n    |\n LL |     foo::<0, 0, 0>();\n-   |     ^^^       --- help: remove this const argument\n+   |     ^^^         - help: remove this generic argument\n    |     |\n-   |     expected 2 const arguments\n+   |     expected 2 generic arguments\n    |\n-note: function defined here, with 2 const parameters: `X`, `Y`\n+note: function defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/incorrect-number-of-const-args.rs:6:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {"}, {"sha": "9deda56cd0df212ecb3fd3e622d093d6f14c125a", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.min.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,30 +1,30 @@\n-error[E0107]: this function takes 2 const arguments but only 1 const argument was supplied\n+error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/incorrect-number-of-const-args.rs:11:5\n    |\n LL |     foo::<0>();\n-   |     ^^^   - supplied 1 const argument\n+   |     ^^^   - supplied 1 generic argument\n    |     |\n-   |     expected 2 const arguments\n+   |     expected 2 generic arguments\n    |\n-note: function defined here, with 2 const parameters: `X`, `Y`\n+note: function defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/incorrect-number-of-const-args.rs:6:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {\n    |    ^^^       -               -\n-help: add missing const argument\n+help: add missing generic argument\n    |\n LL |     foo::<0, Y>();\n    |            ^^^\n \n-error[E0107]: this function takes 2 const arguments but 3 const arguments were supplied\n+error[E0107]: this function takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/incorrect-number-of-const-args.rs:14:5\n    |\n LL |     foo::<0, 0, 0>();\n-   |     ^^^       --- help: remove this const argument\n+   |     ^^^         - help: remove this generic argument\n    |     |\n-   |     expected 2 const arguments\n+   |     expected 2 generic arguments\n    |\n-note: function defined here, with 2 const parameters: `X`, `Y`\n+note: function defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/incorrect-number-of-const-args.rs:6:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {"}, {"sha": "305559d93fdad20169ba87e80912eeff8df725c1", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -9,8 +9,8 @@ fn foo<const X: usize, const Y: usize>() -> usize {\n \n fn main() {\n     foo::<0>();\n-    //~^ ERROR this function takes 2 const arguments but only 1 const argument was supplied\n+    //~^ ERROR this function takes 2\n \n     foo::<0, 0, 0>();\n-    //~^ ERROR this function takes 2 const arguments but 3 const arguments were supplied\n+    //~^ ERROR this function takes 2\n }"}, {"sha": "7d4dc98f396b4c7ccf4bcf1a62e0bdab7c693ad0", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -4,11 +4,11 @@ struct S;\n \n fn main() {\n     let _: u32 = 5i32.try_into::<32>().unwrap();\n-    //~^ ERROR this associated function takes 0 const arguments but 1 const argument was supplied\n+    //~^ ERROR this associated function takes\n \n     S.f::<0>();\n     //~^ ERROR no method named `f`\n \n     S::<0>;\n-    //~^ ERROR this struct takes 0 const arguments but 1 const argument was supplied\n+    //~^ ERROR this struct takes 0\n }"}, {"sha": "aa5cebd873e3191a2bc9c4a336ae6137255f8117", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this associated function takes 0 const arguments but 1 const argument was supplied\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/invalid-const-arg-for-type-param.rs:6:23\n    |\n LL |     let _: u32 = 5i32.try_into::<32>().unwrap();\n    |                       ^^^^^^^^------ help: remove these generics\n    |                       |\n-   |                       expected 0 const arguments\n+   |                       expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 const parameters\n+note: associated function defined here, with 0 generic parameters\n   --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n    |\n LL |     fn try_into(self) -> Result<T, Self::Error>;\n@@ -21,15 +21,15 @@ LL | struct S;\n LL |     S.f::<0>();\n    |       ^ method not found in `S`\n \n-error[E0107]: this struct takes 0 const arguments but 1 const argument was supplied\n+error[E0107]: this struct takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/invalid-const-arg-for-type-param.rs:12:5\n    |\n LL |     S::<0>;\n    |     ^----- help: remove these generics\n    |     |\n-   |     expected 0 const arguments\n+   |     expected 0 generic arguments\n    |\n-note: struct defined here, with 0 const parameters\n+note: struct defined here, with 0 generic parameters\n   --> $DIR/invalid-const-arg-for-type-param.rs:3:8\n    |\n LL | struct S;"}, {"sha": "1400d2bf5a7ba64ff65b98d3bad000bb0fb93cab", "filename": "src/test/ui/const-generics/invalid-constant-in-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -2,7 +2,7 @@ error[E0107]: this struct takes 1 generic argument but 2 generic arguments were\n   --> $DIR/invalid-constant-in-args.rs:4:12\n    |\n LL |     let _: Cell<&str, \"a\"> = Cell::new(\"\");\n-   |            ^^^^     ----- help: remove this generic argument\n+   |            ^^^^       --- help: remove this generic argument\n    |            |\n    |            expected 1 generic argument\n    |"}, {"sha": "2d7051c3a245cf6b59d78ea062e48b33bae25155", "filename": "src/test/ui/const-generics/issues/issue-76595.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -13,5 +13,5 @@ fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n \n fn main() {\n     test::<2>();\n-    //~^ ERROR this function takes 2 generic arguments but only 1 generic argument was supplied\n+    //~^ ERROR this function takes 2 generic arguments\n }"}, {"sha": "01a0f6bcba9d8512599297c44a0e74f71dc8bdf7", "filename": "src/test/ui/const-generics/issues/issue-76595.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this function takes 2 generic arguments but only 1 generic argument was supplied\n+error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-76595.rs:15:5\n    |\n LL |     test::<2>();"}, {"sha": "a824a44c9c22264708cb6deca46239bffaf41dfb", "filename": "src/test/ui/constructor-lifetime-args.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconstructor-lifetime-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconstructor-lifetime-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconstructor-lifetime-args.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -15,12 +15,12 @@ enum E<'a, 'b> {\n fn main() {\n     S(&0, &0); // OK\n     S::<'static>(&0, &0);\n-    //~^ ERROR this struct takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~^ ERROR this struct takes 2 lifetime arguments\n     S::<'static, 'static, 'static>(&0, &0);\n-    //~^ ERROR this struct takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+    //~^ ERROR this struct takes 2 lifetime arguments\n     E::V(&0); // OK\n     E::V::<'static>(&0);\n-    //~^ ERROR this enum takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~^ ERROR this enum takes 2 lifetime arguments\n     E::V::<'static, 'static, 'static>(&0);\n-    //~^ ERROR this enum takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+    //~^ ERROR this enum takes 2 lifetime arguments\n }"}, {"sha": "f33aa4953e4f51accde9bb0754fb06706d91f5da", "filename": "src/test/ui/constructor-lifetime-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this struct takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/constructor-lifetime-args.rs:17:5\n    |\n LL |     S::<'static>(&0, &0);\n@@ -20,7 +20,7 @@ error[E0107]: this struct takes 2 lifetime arguments but 3 lifetime arguments we\n   --> $DIR/constructor-lifetime-args.rs:19:5\n    |\n LL |     S::<'static, 'static, 'static>(&0, &0);\n-   |     ^                   --------- help: remove this lifetime argument\n+   |     ^                     ------- help: remove this lifetime argument\n    |     |\n    |     expected 2 lifetime arguments\n    |\n@@ -30,7 +30,7 @@ note: struct defined here, with 2 lifetime parameters: `'a`, `'b`\n LL | struct S<'a, 'b>(&'a u8, &'b u8);\n    |        ^ --  --\n \n-error[E0107]: this enum takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this enum takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/constructor-lifetime-args.rs:22:8\n    |\n LL |     E::V::<'static>(&0);\n@@ -52,7 +52,7 @@ error[E0107]: this enum takes 2 lifetime arguments but 3 lifetime arguments were\n   --> $DIR/constructor-lifetime-args.rs:24:8\n    |\n LL |     E::V::<'static, 'static, 'static>(&0);\n-   |        ^                   --------- help: remove this lifetime argument\n+   |        ^                     ------- help: remove this lifetime argument\n    |        |\n    |        expected 2 lifetime arguments\n    |"}, {"sha": "f7f6afa860e0b35ad2d1746148b89ef62e9fa3b8", "filename": "src/test/ui/error-codes/E0107.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -9,15 +9,15 @@ enum Bar {\n \n struct Baz<'a, 'b, 'c> {\n     buzz: Buzz<'a>,\n-    //~^ ERROR this struct takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~^ ERROR this struct takes 2 lifetime arguments\n     //~| HELP add missing lifetime argument\n \n     bar: Bar<'a>,\n-    //~^ ERROR this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~^ ERROR this enum takes 0 lifetime arguments\n     //~| HELP remove these generics\n \n     foo2: Foo<'a, 'b, 'c>,\n-    //~^ ERROR this struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n+    //~^ ERROR this struct takes 1 lifetime argument\n     //~| HELP remove these lifetime arguments\n }\n "}, {"sha": "299776b08f2da6dd4ce2166c478606d0b6695d8d", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this struct takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this struct takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/E0107.rs:11:11\n    |\n LL |     buzz: Buzz<'a>,\n@@ -13,7 +13,7 @@ LL | struct Buzz<'a, 'b>(&'a str, &'b str);\n    |        ^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     buzz: Buzz<'a, 'b>,\n+LL |     buzz: Buzz<'a, 'a>,\n    |                  ^^^^\n \n error[E0107]: this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n@@ -34,7 +34,7 @@ error[E0107]: this struct takes 1 lifetime argument but 3 lifetime arguments wer\n   --> $DIR/E0107.rs:19:11\n    |\n LL |     foo2: Foo<'a, 'b, 'c>,\n-   |           ^^^   -------- help: remove these lifetime arguments\n+   |           ^^^     ------ help: remove these lifetime arguments\n    |           |\n    |           expected 1 lifetime argument\n    |"}, {"sha": "484790501b98e54ede42afa1975ef6dbff5beadc", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -3,14 +3,14 @@\n \n trait X {\n   type Y<'a>;\n-    //~^ ERROR missing generics for\n-    //~| ERROR missing generics for\n \n   fn foo<'a>(t : Self::Y<'a>) -> Self::Y<'a> { t }\n }\n \n impl<T> X for T {\n   fn foo<'a, T1: X<Y = T1>>(t : T1) -> T1::Y<'a> {\n+    //~^ ERROR missing generics for associated type\n+    //~^^ ERROR missing generics for associated type\n     t\n   }\n }"}, {"sha": "56b5551cd3fde9d93a403103a4ececb4a57373c2", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -8,36 +8,36 @@ LL | #![feature(generic_associated_types)]\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error[E0107]: missing generics for associated type `X::Y`\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:11:20\n    |\n-LL |   type Y<'a>;\n-   |        ^ expected 1 lifetime argument\n+LL |   fn foo<'a, T1: X<Y = T1>>(t : T1) -> T1::Y<'a> {\n+   |                    ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n   --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n    |\n LL |   type Y<'a>;\n    |        ^ --\n-help: use angle brackets to add missing lifetime argument\n+help: add missing lifetime argument\n    |\n-LL |   type Y<'a><'a>;\n-   |         ^^^^\n+LL |   fn foo<'a, T1: X<Y<'a> = T1>>(t : T1) -> T1::Y<'a> {\n+   |                    ^^^^^\n \n error[E0107]: missing generics for associated type `X::Y`\n-  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:11:20\n    |\n-LL |   type Y<'a>;\n-   |        ^ expected 1 lifetime argument\n+LL |   fn foo<'a, T1: X<Y = T1>>(t : T1) -> T1::Y<'a> {\n+   |                    ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n   --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n    |\n LL |   type Y<'a>;\n    |        ^ --\n-help: use angle brackets to add missing lifetime argument\n+help: add missing lifetime argument\n    |\n-LL |   type Y<'a><'a>;\n-   |         ^^^^\n+LL |   fn foo<'a, T1: X<Y<'a> = T1>>(t : T1) -> T1::Y<'a> {\n+   |                    ^^^^^\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "f1af6860284cb5a0ad8988fdcf1898f06e5b00a8", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -3,13 +3,13 @@\n \n trait X {\n   type Y<'a>;\n-    //~^ ERROR this associated type\n-    //~| ERROR this associated type\n }\n \n fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~^ ERROR: lifetime in trait object type must be followed by `+`\n   //~| ERROR: parenthesized generic arguments cannot be used\n+  //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n+  //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n   //~| WARNING: trait objects without an explicit `dyn` are deprecated\n   //~| WARNING: this was previously accepted by the compiler\n "}, {"sha": "72855a742561c1f78adc22ece43ef6f6b331583d", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,11 +1,11 @@\n error: lifetime in trait object type must be followed by `+`\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:10:29\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:8:29\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                             ^^\n \n error: parenthesized generic arguments cannot be used in associated type constraints\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:10:27\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:8:27\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^^^^^\n@@ -20,7 +20,7 @@ LL | #![feature(generic_associated_types)]\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:10:29\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:8:29\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                             ^^ help: use `dyn`: `dyn 'a`\n@@ -30,10 +30,10 @@ LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:8:27\n    |\n-LL |   type Y<'a>;\n-   |        ^ expected 1 lifetime argument\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+   |                           ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n   --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n@@ -42,24 +42,18 @@ LL |   type Y<'a>;\n    |        ^ --\n help: add missing lifetime argument\n    |\n-LL | fn foo<'a>(arg: Box<dyn X<Y('a'a) = &'a ()>>) {}\n-   |                             ^^\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a, 'a) = &'a ()>>) {}\n+   |                             ^^^\n \n-error[E0107]: this associated type takes 0 type arguments but 1 type argument was supplied\n-  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:8:27\n    |\n-LL |     type Y<'a>;\n-   |  ________^-\n-   | |        |\n-   | |        expected 0 type arguments\n-LL | |\n-LL | |\n-LL | | }\n-LL | |\n-LL | | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n-   | |_________________________________________- help: remove these generics\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+   |                           ^-------------- help: remove these generics\n+   |                           |\n+   |                           expected 0 generic arguments\n    |\n-note: associated type defined here, with 0 type parameters\n+note: associated type defined here, with 0 generic parameters\n   --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n    |\n LL |   type Y<'a>;"}, {"sha": "c767bef1552ed642e05cb88a1e6b58947571455b", "filename": "src/test/ui/generic-associated-types/issue-71176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -3,7 +3,6 @@\n \n trait Provider {\n     type A<'a>;\n-      //~^ ERROR: missing generics for associated type\n }\n \n impl Provider for () {\n@@ -12,6 +11,7 @@ impl Provider for () {\n \n struct Holder<B> {\n   inner: Box<dyn Provider<A = B>>,\n+  //~^ ERROR: missing generics for associated type\n }\n \n fn main() {"}, {"sha": "2df800d065f4034f73ce644e67619bb4239a5232", "filename": "src/test/ui/generic-associated-types/issue-71176.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-71176.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,18 +1,18 @@\n error[E0107]: missing generics for associated type `Provider::A`\n-  --> $DIR/issue-71176.rs:5:10\n+  --> $DIR/issue-71176.rs:13:27\n    |\n-LL |     type A<'a>;\n-   |          ^ expected 1 lifetime argument\n+LL |   inner: Box<dyn Provider<A = B>>,\n+   |                           ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n   --> $DIR/issue-71176.rs:5:10\n    |\n LL |     type A<'a>;\n    |          ^ --\n-help: use angle brackets to add missing lifetime argument\n+help: add missing lifetime argument\n    |\n-LL |     type A<'a><'a>;\n-   |           ^^^^\n+LL |   inner: Box<dyn Provider<A<'a> = B>>,\n+   |                           ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3db3c38216aaab56049e4d01c49c29631e1b1d6c", "filename": "src/test/ui/generic-associated-types/issue-76535.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -5,7 +5,6 @@ pub trait SubTrait {}\n \n pub trait SuperTrait {\n     type SubType<'a>: SubTrait;\n-    //~^ ERROR missing generics for associated\n \n     fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n }\n@@ -36,6 +35,7 @@ impl SuperTrait for SuperStruct {\n \n fn main() {\n     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n-    //~^ ERROR the trait `SuperTrait` cannot be made into an object\n-    //~^^ ERROR the trait `SuperTrait` cannot be made into an object\n+      //~^ ERROR missing generics for associated type\n+      //~^^ ERROR the trait\n+      //~| ERROR the trait\n }"}, {"sha": "d9829e59605588648fc506ac57307decc4c2ef68", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -8,23 +8,23 @@ LL | #![feature(generic_associated_types)]\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error[E0107]: missing generics for associated type `SuperTrait::SubType`\n-  --> $DIR/issue-76535.rs:7:10\n+  --> $DIR/issue-76535.rs:37:33\n    |\n-LL |     type SubType<'a>: SubTrait;\n-   |          ^^^^^^^ expected 1 lifetime argument\n+LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |                                 ^^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n   --> $DIR/issue-76535.rs:7:10\n    |\n LL |     type SubType<'a>: SubTrait;\n    |          ^^^^^^^ --\n-help: use angle brackets to add missing lifetime argument\n+help: add missing lifetime argument\n    |\n-LL |     type SubType<'a><'a>: SubTrait;\n-   |                 ^^^^\n+LL |     let sub: Box<dyn SuperTrait<SubType<'a> = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |                                 ^^^^^^^^^^^\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n-  --> $DIR/issue-76535.rs:38:14\n+  --> $DIR/issue-76535.rs:37:14\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n@@ -39,7 +39,7 @@ LL |     type SubType<'a>: SubTrait;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n-  --> $DIR/issue-76535.rs:38:57\n+  --> $DIR/issue-76535.rs:37:57\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object"}, {"sha": "310dd51ea0c827d667eb49e6119176ba86587735", "filename": "src/test/ui/generic-associated-types/issue-78671.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -3,11 +3,11 @@\n \n trait CollectionFamily {\n     type Member<T>;\n-         //~^ ERROR: missing generics for associated type\n }\n fn floatify() {\n     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n-    //~^ the trait `CollectionFamily` cannot be made into an object\n+    //~^ ERROR: missing generics for associated type\n+    //~| ERROR: the trait `CollectionFamily` cannot be made into an object\n }\n \n struct Family;"}, {"sha": "0a231d22b62681407ffb3ece1f1e98da43257ee7", "filename": "src/test/ui/generic-associated-types/issue-78671.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,21 +1,21 @@\n error[E0107]: missing generics for associated type `CollectionFamily::Member`\n-  --> $DIR/issue-78671.rs:5:10\n+  --> $DIR/issue-78671.rs:8:47\n    |\n-LL |     type Member<T>;\n-   |          ^^^^^^ expected 1 type argument\n+LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n+   |                                               ^^^^^^ expected 1 generic argument\n    |\n-note: associated type defined here, with 1 type parameter: `T`\n+note: associated type defined here, with 1 generic parameter: `T`\n   --> $DIR/issue-78671.rs:5:10\n    |\n LL |     type Member<T>;\n    |          ^^^^^^ -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n-LL |     type Member<T><T>;\n-   |                ^^^\n+LL |     Box::new(Family) as &dyn CollectionFamily<Member<T>=usize>\n+   |                                               ^^^^^^^^^\n \n error[E0038]: the trait `CollectionFamily` cannot be made into an object\n-  --> $DIR/issue-78671.rs:9:25\n+  --> $DIR/issue-78671.rs:8:25\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CollectionFamily` cannot be made into an object"}, {"sha": "216e426ada265da691b21e5bd957feb802fcb9e2", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -19,7 +19,6 @@ impl<'a, T> RefCont<'a, T> for Box<T> {\n \n trait MapLike<K, V> {\n     type VRefCont<'a>: RefCont<'a, V>;\n-    //~^ ERROR missing generics\n     fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n }\n \n@@ -42,6 +41,7 @@ impl<K, V: Default> MapLike<K, V> for Source {\n fn main() {\n     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n-    //~^^ the trait `MapLike` cannot be made into an object\n-    //~^^ the trait `MapLike` cannot be made into an object\n+      //~^ ERROR missing generics for associated type\n+      //~^^ ERROR the trait\n+      //~^^^^ ERROR the trait\n }"}, {"sha": "11b4a519d51883764b2d79ea30cdc9ee480a5bc5", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,21 +1,21 @@\n error[E0107]: missing generics for associated type `MapLike::VRefCont`\n-  --> $DIR/issue-79422.rs:21:10\n+  --> $DIR/issue-79422.rs:43:36\n    |\n-LL |     type VRefCont<'a>: RefCont<'a, V>;\n-   |          ^^^^^^^^ expected 1 lifetime argument\n+LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n+   |                                    ^^^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n   --> $DIR/issue-79422.rs:21:10\n    |\n LL |     type VRefCont<'a>: RefCont<'a, V>;\n    |          ^^^^^^^^ --\n-help: use angle brackets to add missing lifetime argument\n+help: add missing lifetime argument\n    |\n-LL |     type VRefCont<'a><'a>: RefCont<'a, V>;\n-   |                  ^^^^\n+LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n+   |                                    ^^^^^^^^^^^^\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n-  --> $DIR/issue-79422.rs:44:12\n+  --> $DIR/issue-79422.rs:43:12\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n@@ -30,7 +30,7 @@ LL |     type VRefCont<'a>: RefCont<'a, V>;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n-  --> $DIR/issue-79422.rs:43:13\n+  --> $DIR/issue-79422.rs:42:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object"}, {"sha": "412a9f8257c8ae284ccc62792151ac8b70a77812", "filename": "src/test/ui/generic-associated-types/issue-79636-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -4,7 +4,6 @@\n trait Monad {\n     type Unwrapped;\n     type Wrapped<B>;\n-         //~^ ERROR: missing generics for associated type `Monad::Wrapped`\n \n     fn bind<B, F>(self, f: F) -> Self::Wrapped<B> {\n         todo!()\n@@ -15,6 +14,7 @@ fn join<MOuter, MInner, A>(outer: MOuter) -> MOuter::Wrapped<A>\n where\n     MOuter: Monad<Unwrapped = MInner>,\n     MInner: Monad<Unwrapped = A, Wrapped = MOuter::Wrapped<A>>,\n+    //~^ ERROR: missing generics for associated type `Monad::Wrapped`\n {\n     outer.bind(|inner| inner)\n }"}, {"sha": "b7a0ef0a6d674a68b952d868130de5b9f5d819bd", "filename": "src/test/ui/generic-associated-types/issue-79636-1.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-1.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,18 +1,18 @@\n error[E0107]: missing generics for associated type `Monad::Wrapped`\n-  --> $DIR/issue-79636-1.rs:6:10\n+  --> $DIR/issue-79636-1.rs:16:34\n    |\n-LL |     type Wrapped<B>;\n-   |          ^^^^^^^ expected 1 type argument\n+LL |     MInner: Monad<Unwrapped = A, Wrapped = MOuter::Wrapped<A>>,\n+   |                                  ^^^^^^^ expected 1 generic argument\n    |\n-note: associated type defined here, with 1 type parameter: `B`\n+note: associated type defined here, with 1 generic parameter: `B`\n   --> $DIR/issue-79636-1.rs:6:10\n    |\n LL |     type Wrapped<B>;\n    |          ^^^^^^^ -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n-LL |     type Wrapped<B><B>;\n-   |                 ^^^\n+LL |     MInner: Monad<Unwrapped = A, Wrapped<B> = MOuter::Wrapped<A>>,\n+   |                                  ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ef39378e78d68a3f37b4277903bca9402b1044a0", "filename": "src/test/ui/generic-associated-types/issue-79636-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -3,14 +3,14 @@\n \n trait SomeTrait {\n     type Wrapped<A>: SomeTrait;\n-         //~^ ERROR: missing generics for associated type `SomeTrait::Wrapped`\n \n     fn f() -> ();\n }\n \n fn program<W>() -> ()\n where\n     W: SomeTrait<Wrapped = W>,\n+    //~^ ERROR: missing generics for associated type `SomeTrait::Wrapped`\n {\n     return W::f();\n }"}, {"sha": "d5ba1aaeed5e3863a2a8037052432c624b694afd", "filename": "src/test/ui/generic-associated-types/issue-79636-2.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79636-2.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,18 +1,18 @@\n error[E0107]: missing generics for associated type `SomeTrait::Wrapped`\n-  --> $DIR/issue-79636-2.rs:5:10\n+  --> $DIR/issue-79636-2.rs:12:18\n    |\n-LL |     type Wrapped<A>: SomeTrait;\n-   |          ^^^^^^^ expected 1 type argument\n+LL |     W: SomeTrait<Wrapped = W>,\n+   |                  ^^^^^^^ expected 1 generic argument\n    |\n-note: associated type defined here, with 1 type parameter: `A`\n+note: associated type defined here, with 1 generic parameter: `A`\n   --> $DIR/issue-79636-2.rs:5:10\n    |\n LL |     type Wrapped<A>: SomeTrait;\n    |          ^^^^^^^ -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n-LL |     type Wrapped<A><A>: SomeTrait;\n-   |                 ^^^\n+LL |     W: SomeTrait<Wrapped<A> = W>,\n+   |                  ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fd81804f234e51797bfa2ccb5e4cca26eeaedd75", "filename": "src/test/ui/generic-associated-types/issue-80433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -8,7 +8,6 @@ struct E<T> {\n \n trait TestMut {\n     type Output<'a>;\n-      //~^ ERROR missing generics\n     fn test_mut<'a>(&'a mut self) -> Self::Output<'a>;\n }\n \n@@ -23,6 +22,7 @@ where\n }\n \n fn test_simpler<'a>(dst: &'a mut impl TestMut<Output = &'a mut f32>)\n+  //~^ ERROR missing generics for associated type\n {\n     for n in 0i16..100 {\n         *dst.test_mut() = n.into();"}, {"sha": "31483ff0cd63d58b9996c852dffa05c6853b0bf1", "filename": "src/test/ui/generic-associated-types/issue-80433.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,18 +1,18 @@\n error[E0107]: missing generics for associated type `TestMut::Output`\n-  --> $DIR/issue-80433.rs:10:10\n+  --> $DIR/issue-80433.rs:24:47\n    |\n-LL |     type Output<'a>;\n-   |          ^^^^^^ expected 1 lifetime argument\n+LL | fn test_simpler<'a>(dst: &'a mut impl TestMut<Output = &'a mut f32>)\n+   |                                               ^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n   --> $DIR/issue-80433.rs:10:10\n    |\n LL |     type Output<'a>;\n    |          ^^^^^^ --\n-help: use angle brackets to add missing lifetime argument\n+help: add missing lifetime argument\n    |\n-LL |     type Output<'a><'a>;\n-   |                ^^^^\n+LL | fn test_simpler<'a>(dst: &'a mut impl TestMut<Output<'a> = &'a mut f32>)\n+   |                                               ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b5512ee6d6290bc2e3eaecf8837074ac138a6854", "filename": "src/test/ui/generic-associated-types/issue-81712-cyclic-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -12,10 +12,10 @@ trait B {\n }\n trait C {\n     type DType<T>: D<T, CType = Self>;\n-    //~^ ERROR: missing generics for associated type `C::DType` [E0107]\n }\n trait D<T> {\n     type CType: C<DType = Self>;\n+    //~^ ERROR missing generics for associated type\n }\n \n fn main() {}"}, {"sha": "4a7b96db30a9b9a705b4a8848d7348853c9ecf78", "filename": "src/test/ui/generic-associated-types/issue-81712-cyclic-traits.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81712-cyclic-traits.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,18 +1,18 @@\n error[E0107]: missing generics for associated type `C::DType`\n-  --> $DIR/issue-81712-cyclic-traits.rs:14:10\n+  --> $DIR/issue-81712-cyclic-traits.rs:17:19\n    |\n-LL |     type DType<T>: D<T, CType = Self>;\n-   |          ^^^^^ expected 1 type argument\n+LL |     type CType: C<DType = Self>;\n+   |                   ^^^^^ expected 1 generic argument\n    |\n-note: associated type defined here, with 1 type parameter: `T`\n+note: associated type defined here, with 1 generic parameter: `T`\n   --> $DIR/issue-81712-cyclic-traits.rs:14:10\n    |\n LL |     type DType<T>: D<T, CType = Self>;\n    |          ^^^^^ -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n-LL |     type DType<T><T>: D<T, CType = Self>;\n-   |               ^^^\n+LL |     type CType: C<DType<T> = Self>;\n+   |                   ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "02f843b07e23d07b43089d379dc858fe4d9488fc", "filename": "src/test/ui/generic-associated-types/issue-81862.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -0,0 +1,13 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait StreamingIterator {\n+    type Item<'a>;\n+    fn next(&mut self) -> Option<Self::Item>;\n+    //~^ ERROR missing generics for associated type\n+}\n+\n+fn main() {}\n+\n+// call stack from back to front:\n+// create_substs_for_assoc_ty -> qpath_to_ty -> res_to_ty -> ast_ty_to_ty -> ty_of_fn"}, {"sha": "d7b904165c0ec39b73ccfd4069d98b576465f642", "filename": "src/test/ui/generic-associated-types/issue-81862.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `StreamingIterator::Item`\n+  --> $DIR/issue-81862.rs:6:40\n+   |\n+LL |     fn next(&mut self) -> Option<Self::Item>;\n+   |                                        ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-81862.rs:5:10\n+   |\n+LL |     type Item<'a>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn next(&mut self) -> Option<Self::Item<'_>>;\n+   |                                        ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "de24361dfde32876fec2816dfc6f1be14473c252", "filename": "src/test/ui/generic-associated-types/missing_lifetime_args.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -0,0 +1,23 @@\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature `generic_associated_types`\n+\n+trait X {\n+    type Y<'a, 'b>;\n+}\n+\n+struct Foo<'a, 'b, 'c> {\n+    a: &'a u32,\n+    b: &'b str,\n+    c: &'c str,\n+}\n+\n+fn foo<'c, 'd>(_arg: Box<dyn X<Y = (&'c u32, &'d u32)>>) {}\n+//~^ ERROR missing generics for associated type\n+\n+fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b>) {}\n+//~^ ERROR this struct takes 3 lifetime arguments but 2 lifetime\n+\n+fn f<'a>(_arg: Foo<'a>) {}\n+//~^ ERROR this struct takes 3 lifetime arguments but 1 lifetime\n+\n+fn main() {}"}, {"sha": "73829594c826a09a929217ba8e65c5e0445ef002", "filename": "src/test/ui/generic-associated-types/missing_lifetime_args.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -0,0 +1,64 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing_lifetime_args.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0107]: missing generics for associated type `X::Y`\n+  --> $DIR/missing_lifetime_args.rs:14:32\n+   |\n+LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y = (&'c u32, &'d u32)>>) {}\n+   |                                ^ expected 2 lifetime arguments\n+   |\n+note: associated type defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/missing_lifetime_args.rs:5:10\n+   |\n+LL |     type Y<'a, 'b>;\n+   |          ^ --  --\n+help: add missing lifetime arguments\n+   |\n+LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y<'c, 'd> = (&'c u32, &'d u32)>>) {}\n+   |                                ^^^^^^^^^\n+\n+error[E0107]: this struct takes 3 lifetime arguments but 2 lifetime arguments were supplied\n+  --> $DIR/missing_lifetime_args.rs:17:26\n+   |\n+LL | fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b>) {}\n+   |                          ^^^ --  -- supplied 2 lifetime arguments\n+   |                          |\n+   |                          expected 3 lifetime arguments\n+   |\n+note: struct defined here, with 3 lifetime parameters: `'a`, `'b`, `'c`\n+  --> $DIR/missing_lifetime_args.rs:8:8\n+   |\n+LL | struct Foo<'a, 'b, 'c> {\n+   |        ^^^ --  --  --\n+help: add missing lifetime argument\n+   |\n+LL | fn bar<'a, 'b, 'c>(_arg: Foo<'a, 'b, 'a>) {}\n+   |                                    ^^^^\n+\n+error[E0107]: this struct takes 3 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/missing_lifetime_args.rs:20:16\n+   |\n+LL | fn f<'a>(_arg: Foo<'a>) {}\n+   |                ^^^ -- supplied 1 lifetime argument\n+   |                |\n+   |                expected 3 lifetime arguments\n+   |\n+note: struct defined here, with 3 lifetime parameters: `'a`, `'b`, `'c`\n+  --> $DIR/missing_lifetime_args.rs:8:8\n+   |\n+LL | struct Foo<'a, 'b, 'c> {\n+   |        ^^^ --  --  --\n+help: add missing lifetime arguments\n+   |\n+LL | fn f<'a>(_arg: Foo<'a, 'b, 'c>) {}\n+   |                      ^^^^^^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "37cb7cab121ba196f63343d43a48a19cf1369128", "filename": "src/test/ui/generic-associated-types/missing_lifetime_const.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -0,0 +1,13 @@\n+#![feature(generic_associated_types)]\n+//~^ WARNING the feature\n+\n+trait Foo {\n+    type Assoc<'a, const N: usize>;\n+}\n+\n+fn foo<T: Foo>() {\n+    let _: <T as Foo>::Assoc<3>;\n+      //~^ ERROR  this associated type\n+}\n+\n+fn main() {}"}, {"sha": "6c66312e7b160099cf7e25c1179ed2b2f75cadba", "filename": "src/test/ui/generic-associated-types/missing_lifetime_const.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_const.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -0,0 +1,28 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing_lifetime_const.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/missing_lifetime_const.rs:9:24\n+   |\n+LL |     let _: <T as Foo>::Assoc<3>;\n+   |                        ^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/missing_lifetime_const.rs:5:10\n+   |\n+LL |     type Assoc<'a, const N: usize>;\n+   |          ^^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     let _: <T as Foo>::Assoc<'a, 3>;\n+   |                              ^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "3f92c031e18d003ad4fc65587889411bd71fdeec", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -12,9 +12,9 @@ trait Foo {\n     type FOk<T> = Self::E<'static, T>;\n     type FErr1 = Self::E<'static, 'static>;\n     //~^ ERROR this associated type takes 1 lifetime argument but 2 lifetime arguments were supplied\n-    //~| ERROR this associated type takes 1 type argument but 0 type arguments were supplied\n+    //~| ERROR this associated type takes 1\n     type FErr2<T> = Self::E<'static, T, u32>;\n-    //~^ ERROR this associated type takes 1 type argument but 2 type arguments were supplied\n+    //~^ ERROR this associated type takes 1\n }\n \n fn main() {}"}, {"sha": "b6f600964c9a398eba8a200b392662ba8801a092", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -2,7 +2,7 @@ error[E0107]: this associated type takes 1 lifetime argument but 2 lifetime argu\n   --> $DIR/parameter_number_and_kind.rs:13:24\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n-   |                        ^        --------- help: remove this lifetime argument\n+   |                        ^          ------- help: remove this lifetime argument\n    |                        |\n    |                        expected 1 lifetime argument\n    |\n@@ -12,31 +12,31 @@ note: associated type defined here, with 1 lifetime parameter: `'a`\n LL |     type E<'a, T>;\n    |          ^ --\n \n-error[E0107]: this associated type takes 1 type argument but 0 type arguments were supplied\n+error[E0107]: this associated type takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/parameter_number_and_kind.rs:13:24\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n-   |                        ^ expected 1 type argument\n+   |                        ^ expected 1 generic argument\n    |\n-note: associated type defined here, with 1 type parameter: `T`\n+note: associated type defined here, with 1 generic parameter: `T`\n   --> $DIR/parameter_number_and_kind.rs:10:10\n    |\n LL |     type E<'a, T>;\n    |          ^     -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL |     type FErr1 = Self::E<'static, 'static, T>;\n    |                                          ^^^\n \n-error[E0107]: this associated type takes 1 type argument but 2 type arguments were supplied\n+error[E0107]: this associated type takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/parameter_number_and_kind.rs:16:27\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>;\n-   |                           ^           ----- help: remove this type argument\n+   |                           ^             --- help: remove this generic argument\n    |                           |\n-   |                           expected 1 type argument\n+   |                           expected 1 generic argument\n    |\n-note: associated type defined here, with 1 type parameter: `T`\n+note: associated type defined here, with 1 generic parameter: `T`\n   --> $DIR/parameter_number_and_kind.rs:10:10\n    |\n LL |     type E<'a, T>;"}, {"sha": "d7a0ef4916a1820563d2ad14c3e1661eca5afa31", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -3,12 +3,12 @@\n \n trait X {\n     type Y<'a>;\n-      //~^ ERROR this associated type\n-      //~| ERROR this associated type\n }\n \n const _: () = {\n   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+      //~^ ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n+      //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n };\n \n fn main() {}"}, {"sha": "5685e5208c6d8e00afffa54ab4478b26c78c7b8e", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.stderr", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -8,10 +8,10 @@ LL | #![feature(generic_associated_types)]\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n-  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+  --> $DIR/trait-path-type-error-once-implemented.rs:9:29\n    |\n-LL |     type Y<'a>;\n-   |          ^ expected 1 lifetime argument\n+LL |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+   |                             ^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n   --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n@@ -20,25 +20,18 @@ LL |     type Y<'a>;\n    |          ^ --\n help: add missing lifetime argument\n    |\n-LL |   fn f2<'a>(arg : Box<dyn X<Y<'a1> = &'a ()>>) {}\n-   |                               ^^\n+LL |   fn f2<'a>(arg : Box<dyn X<Y<'a, 1> = &'a ()>>) {}\n+   |                               ^^^\n \n-error[E0107]: this associated type takes 0 const arguments but 1 const argument was supplied\n-  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/trait-path-type-error-once-implemented.rs:9:29\n+   |\n+LL |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+   |                             ^--- help: remove these generics\n+   |                             |\n+   |                             expected 0 generic arguments\n    |\n-LL |       type Y<'a>;\n-   |  __________^-\n-   | |          |\n-   | |          expected 0 const arguments\n-LL | |\n-LL | |\n-LL | | }\n-LL | |\n-LL | | const _: () = {\n-LL | |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n-   | |________________________________- help: remove these generics\n-   |\n-note: associated type defined here, with 0 const parameters\n+note: associated type defined here, with 0 generic parameters\n   --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n    |\n LL |     type Y<'a>;"}, {"sha": "23a5d1525d9953a64cc610fe31e251dd1e34c15f", "filename": "src/test/ui/generics/bad-mid-path-type-params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fbad-mid-path-type-params.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -28,17 +28,17 @@ impl Trait<isize> for S2 {\n \n fn foo<'a>() {\n     let _ = S::new::<isize,f64>(1, 1.0);\n-    //~^ ERROR this associated function takes 1 type argument but 2 type arguments were supplied\n+    //~^ ERROR this associated function takes 1\n \n     let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n     //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n \n     let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n-    //~^ ERROR this associated function takes 1 type argument but 2 type arguments were supplied\n+    //~^ ERROR this associated function takes 1\n \n     let _: S2 = Trait::<'a,isize>::new::<f64,f64>(1, 1.0);\n     //~^ ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this associated function takes 1 type argument but 2 type arguments were supplied\n+    //~| ERROR this associated function takes 1\n }\n \n fn main() {}"}, {"sha": "aee2b60159f10338d16b48a62d8c72b81c100075", "filename": "src/test/ui/generics/bad-mid-path-type-params.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fbad-mid-path-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fbad-mid-path-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fbad-mid-path-type-params.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this associated function takes 1 type argument but 2 type arguments were supplied\n+error[E0107]: this associated function takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/bad-mid-path-type-params.rs:30:16\n    |\n LL |     let _ = S::new::<isize,f64>(1, 1.0);\n-   |                ^^^        ---- help: remove this type argument\n+   |                ^^^         --- help: remove this generic argument\n    |                |\n-   |                expected 1 type argument\n+   |                expected 1 generic argument\n    |\n-note: associated function defined here, with 1 type parameter: `U`\n+note: associated function defined here, with 1 generic parameter: `U`\n   --> $DIR/bad-mid-path-type-params.rs:6:8\n    |\n LL |     fn new<U>(x: T, _: U) -> S<T> {\n@@ -16,7 +16,7 @@ error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was\n   --> $DIR/bad-mid-path-type-params.rs:33:13\n    |\n LL |     let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n-   |             ^   --- help: remove this lifetime argument\n+   |             ^   -- help: remove this lifetime argument\n    |             |\n    |             expected 0 lifetime arguments\n    |\n@@ -26,15 +26,15 @@ note: struct defined here, with 0 lifetime parameters\n LL | struct S<T> {\n    |        ^\n \n-error[E0107]: this associated function takes 1 type argument but 2 type arguments were supplied\n+error[E0107]: this associated function takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/bad-mid-path-type-params.rs:36:24\n    |\n LL |     let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n-   |                        ^^^        ---- help: remove this type argument\n+   |                        ^^^         --- help: remove this generic argument\n    |                        |\n-   |                        expected 1 type argument\n+   |                        expected 1 generic argument\n    |\n-note: associated function defined here, with 1 type parameter: `U`\n+note: associated function defined here, with 1 generic parameter: `U`\n   --> $DIR/bad-mid-path-type-params.rs:14:8\n    |\n LL |     fn new<U>(x: T, y: U) -> Self;\n@@ -44,7 +44,7 @@ error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was\n   --> $DIR/bad-mid-path-type-params.rs:39:17\n    |\n LL |     let _: S2 = Trait::<'a,isize>::new::<f64,f64>(1, 1.0);\n-   |                 ^^^^^   --- help: remove this lifetime argument\n+   |                 ^^^^^   -- help: remove this lifetime argument\n    |                 |\n    |                 expected 0 lifetime arguments\n    |\n@@ -54,15 +54,15 @@ note: trait defined here, with 0 lifetime parameters\n LL | trait Trait<T> {\n    |       ^^^^^\n \n-error[E0107]: this associated function takes 1 type argument but 2 type arguments were supplied\n+error[E0107]: this associated function takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/bad-mid-path-type-params.rs:39:36\n    |\n LL |     let _: S2 = Trait::<'a,isize>::new::<f64,f64>(1, 1.0);\n-   |                                    ^^^      ---- help: remove this type argument\n+   |                                    ^^^       --- help: remove this generic argument\n    |                                    |\n-   |                                    expected 1 type argument\n+   |                                    expected 1 generic argument\n    |\n-note: associated function defined here, with 1 type parameter: `U`\n+note: associated function defined here, with 1 generic parameter: `U`\n   --> $DIR/bad-mid-path-type-params.rs:14:8\n    |\n LL |     fn new<U>(x: T, y: U) -> Self;"}, {"sha": "2cf7f1d657b187409411943c86c49dee53704a08", "filename": "src/test/ui/generics/generic-arg-mismatch-recover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -8,5 +8,5 @@ fn main() {\n \n     Bar::<'static, 'static, ()>(&());\n     //~^ ERROR this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n-    //~| ERROR this struct takes 0 type arguments but 1 type argument was supplied\n+    //~| ERROR this struct takes 0\n }"}, {"sha": "45fea925f27cf59433b8f9d06b0eca4dd6b0f908", "filename": "src/test/ui/generics/generic-arg-mismatch-recover.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -2,7 +2,7 @@ error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments wer\n   --> $DIR/generic-arg-mismatch-recover.rs:6:5\n    |\n LL |     Foo::<'static, 'static, ()>(&0);\n-   |     ^^^            --------- help: remove this lifetime argument\n+   |     ^^^            ------- help: remove this lifetime argument\n    |     |\n    |     expected 1 lifetime argument\n    |\n@@ -16,7 +16,7 @@ error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments wer\n   --> $DIR/generic-arg-mismatch-recover.rs:9:5\n    |\n LL |     Bar::<'static, 'static, ()>(&());\n-   |     ^^^            --------- help: remove this lifetime argument\n+   |     ^^^            ------- help: remove this lifetime argument\n    |     |\n    |     expected 1 lifetime argument\n    |\n@@ -26,15 +26,15 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct Bar<'a>(&'a ());\n    |        ^^^ --\n \n-error[E0107]: this struct takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this struct takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/generic-arg-mismatch-recover.rs:9:5\n    |\n LL |     Bar::<'static, 'static, ()>(&());\n-   |     ^^^                   ---- help: remove this type argument\n+   |     ^^^                     -- help: remove this generic argument\n    |     |\n-   |     expected 0 type arguments\n+   |     expected 0 generic arguments\n    |\n-note: struct defined here, with 0 type parameters\n+note: struct defined here, with 0 generic parameters\n   --> $DIR/generic-arg-mismatch-recover.rs:3:8\n    |\n LL | struct Bar<'a>(&'a ());"}, {"sha": "66afbb58ad49027474e8b7701ee577bc8cb14608", "filename": "src/test/ui/generics/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -9,5 +9,5 @@ impl<A, B, C> Foo<A, B, C> {\n \n fn main() {\n     Foo::<isize>::new();\n-    //~^ ERROR this struct takes at least 2 type arguments but only 1 type argument was supplied\n+    //~^ ERROR this struct takes at least 2 generic arguments but 1 generic argument\n }"}, {"sha": "2c7ffde7ddb97bb2ec406442a7a94731c236433b", "filename": "src/test/ui/generics/generic-impl-less-params-with-defaults.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,17 +1,17 @@\n-error[E0107]: this struct takes at least 2 type arguments but only 1 type argument was supplied\n+error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/generic-impl-less-params-with-defaults.rs:11:5\n    |\n LL |     Foo::<isize>::new();\n-   |     ^^^   ----- supplied 1 type argument\n+   |     ^^^   ----- supplied 1 generic argument\n    |     |\n-   |     expected at least 2 type arguments\n+   |     expected at least 2 generic arguments\n    |\n-note: struct defined here, with at least 2 type parameters: `A`, `B`\n+note: struct defined here, with at least 2 generic parameters: `A`, `B`\n   --> $DIR/generic-impl-less-params-with-defaults.rs:3:8\n    |\n LL | struct Foo<A, B, C = (A, B)>(\n    |        ^^^ -  -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL |     Foo::<isize, B>::new();\n    |                ^^^"}, {"sha": "a283323742a0f8d7cc72f676b36d8f4047f09fee", "filename": "src/test/ui/generics/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -11,5 +11,5 @@ impl<T, A> Vec<T, A> {\n \n fn main() {\n     Vec::<isize, Heap, bool>::new();\n-    //~^ ERROR this struct takes at most 2 type arguments but 3 type arguments were supplied\n+    //~^ ERROR this struct takes at most 2 generic arguments but 3 generic arguments were supplied\n }"}, {"sha": "059289533dadc5df608012e2e620df378244d136", "filename": "src/test/ui/generics/generic-impl-more-params-with-defaults.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this struct takes at most 2 type arguments but 3 type arguments were supplied\n+error[E0107]: this struct takes at most 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/generic-impl-more-params-with-defaults.rs:13:5\n    |\n LL |     Vec::<isize, Heap, bool>::new();\n-   |     ^^^              ------ help: remove this type argument\n+   |     ^^^                ---- help: remove this generic argument\n    |     |\n-   |     expected at most 2 type arguments\n+   |     expected at most 2 generic arguments\n    |\n-note: struct defined here, with at most 2 type parameters: `T`, `A`\n+note: struct defined here, with at most 2 generic parameters: `T`, `A`\n   --> $DIR/generic-impl-more-params-with-defaults.rs:5:8\n    |\n LL | struct Vec<T, A = Heap>("}, {"sha": "7c0836375e38e7e59f4a4bd9606f66239b55edc1", "filename": "src/test/ui/generics/generic-type-less-params-with-defaults.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -2,17 +2,17 @@ error[E0107]: missing generics for struct `Vec`\n   --> $DIR/generic-type-less-params-with-defaults.rs:9:12\n    |\n LL |     let _: Vec;\n-   |            ^^^ expected at least 1 type argument\n+   |            ^^^ expected at least 1 generic argument\n    |\n-note: struct defined here, with at least 1 type parameter: `T`\n+note: struct defined here, with at least 1 generic parameter: `T`\n   --> $DIR/generic-type-less-params-with-defaults.rs:5:8\n    |\n LL | struct Vec<T, A = Heap>(\n    |        ^^^ -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL |     let _: Vec<T>;\n-   |               ^^^\n+   |            ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3dab03297c9df9484977f763b63acd2f18f89962", "filename": "src/test/ui/generics/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -7,5 +7,5 @@ struct Vec<T, A = Heap>(\n \n fn main() {\n     let _: Vec<isize, Heap, bool>;\n-    //~^ ERROR this struct takes at most 2 type arguments but 3 type arguments were supplied\n+    //~^ ERROR this struct takes at most 2 generic arguments but 3 generic arguments\n }"}, {"sha": "500880cfb867860f7bb5d790a9910661f29a3d9d", "filename": "src/test/ui/generics/generic-type-more-params-with-defaults.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this struct takes at most 2 type arguments but 3 type arguments were supplied\n+error[E0107]: this struct takes at most 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/generic-type-more-params-with-defaults.rs:9:12\n    |\n LL |     let _: Vec<isize, Heap, bool>;\n-   |            ^^^            ------ help: remove this type argument\n+   |            ^^^              ---- help: remove this generic argument\n    |            |\n-   |            expected at most 2 type arguments\n+   |            expected at most 2 generic arguments\n    |\n-note: struct defined here, with at most 2 type parameters: `T`, `A`\n+note: struct defined here, with at most 2 generic parameters: `T`, `A`\n   --> $DIR/generic-type-more-params-with-defaults.rs:5:8\n    |\n LL | struct Vec<T, A = Heap>("}, {"sha": "f061c5814594ea8a7b805d97b7692df9370affee", "filename": "src/test/ui/generics/wrong-number-of-args.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -4,18 +4,18 @@ mod no_generics {\n     type A = Ty;\n \n     type B = Ty<'static>;\n-    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument\n     //~| HELP remove these generics\n \n     type C = Ty<'static, usize>;\n-    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this struct takes 0 type arguments but 1 type argument was supplied\n+    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument\n+    //~| ERROR this struct takes 0 generic arguments but 1 generic argument\n     //~| HELP remove this lifetime argument\n-    //~| HELP remove this type argument\n+    //~| HELP remove this generic argument\n \n     type D = Ty<'static, usize, { 0 }>;\n-    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n-    //~| ERROR this struct takes 0 generic arguments but 2 generic arguments were supplied\n+    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument\n+    //~| ERROR this struct takes 0 generic arguments but 2 generic arguments\n     //~| HELP remove this lifetime argument\n     //~| HELP remove these generic arguments\n }\n@@ -25,31 +25,31 @@ mod type_and_type {\n \n     type A = Ty;\n     //~^ ERROR missing generics for struct `type_and_type::Ty`\n-    //~| HELP use angle brackets\n+    //~| HELP add missing\n \n     type B = Ty<usize>;\n-    //~^ ERROR this struct takes 2 type arguments but only 1 type argument was supplied\n-    //~| HELP add missing type argument\n+    //~^ ERROR this struct takes 2 generic arguments but 1 generic argument\n+    //~| HELP add missing\n \n     type C = Ty<usize, String>;\n \n     type D = Ty<usize, String, char>;\n-    //~^ ERROR this struct takes 2 type arguments but 3 type arguments were supplied\n-    //~| HELP remove this type argument\n+    //~^ ERROR this struct takes 2 generic arguments but 3 generic arguments\n+    //~| HELP remove this\n }\n \n mod lifetime_and_type {\n     struct Ty<'a, T>;\n \n     type A = Ty;\n-    //~^ ERROR missing generics for struct `lifetime_and_type::Ty`\n+    //~^ ERROR missing generics for struct\n     //~| ERROR missing lifetime specifier\n+    //~| HELP add missing\n     //~| HELP consider introducing\n-    //~| HELP use angle brackets\n \n     type B = Ty<'static>;\n-    //~^ ERROR this struct takes 1 type argument but 0 type arguments were supplied\n-    //~| HELP add missing type argument\n+    //~^ ERROR this struct takes 1 generic argument but 0 generic arguments\n+    //~| HELP add missing\n \n     type C = Ty<usize>;\n     //~^ ERROR missing lifetime specifier\n@@ -63,18 +63,18 @@ mod type_and_type_and_type {\n \n     type A = Ty;\n     //~^ ERROR missing generics for struct `type_and_type_and_type::Ty`\n-    //~| HELP use angle brackets\n+    //~| HELP add missing\n \n     type B = Ty<usize>;\n-    //~^ ERROR this struct takes at least 2 type arguments but only 1 type argument was supplied\n-    //~| HELP add missing type argument\n+    //~^ ERROR this struct takes at least 2\n+    //~| HELP add missing\n \n     type C = Ty<usize, String>;\n \n     type D = Ty<usize, String, char>;\n \n     type E = Ty<usize, String, char, f64>;\n-    //~^ ERROR this struct takes at most 3 type arguments but 4 type arguments were supplied\n+    //~^ ERROR this struct takes at most 3\n     //~| HELP remove\n }\n \n@@ -94,7 +94,7 @@ mod r#trait {\n     }\n \n     type A = Box<dyn NonGeneric<usize>>;\n-    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n     //~| HELP remove\n \n     type B = Box<dyn GenericLifetime>;\n@@ -107,10 +107,10 @@ mod r#trait {\n \n     type D = Box<dyn GenericType>;\n     //~^ ERROR missing generics for trait `GenericType`\n-    //~| HELP use angle brackets\n+    //~| HELP add missing\n \n     type E = Box<dyn GenericType<String, usize>>;\n-    //~^ ERROR this trait takes 1 type argument but 2 type arguments were supplied\n+    //~^ ERROR this trait takes 1 generic argument but 2 generic arguments\n     //~| HELP remove\n }\n \n@@ -120,40 +120,40 @@ mod stdlib {\n \n         type A = HashMap;\n         //~^ ERROR missing generics for struct `HashMap`\n-        //~| HELP use angle brackets\n+        //~| HELP add missing\n \n         type B = HashMap<String>;\n-        //~^ ERROR this struct takes at least 2 type arguments but only 1 type argument was supplied\n-        //~| HELP add missing type argument\n+        //~^ ERROR this struct takes at least\n+        //~| HELP add missing\n \n         type C = HashMap<'static>;\n-        //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+        //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument\n         //~| HELP remove these generics\n-        //~| ERROR this struct takes at least 2 type arguments but 0 type arguments were supplied\n-        //~| HELP add missing type arguments\n+        //~| ERROR this struct takes at least 2\n+        //~| HELP add missing\n \n         type D = HashMap<usize, String, char, f64>;\n-        //~^ ERROR this struct takes at most 3 type arguments but 4 type arguments were supplied\n-        //~| HELP remove this type argument\n+        //~^ ERROR this struct takes at most 3\n+        //~| HELP remove this\n     }\n \n     mod result {\n         type A = Result;\n         //~^ ERROR missing generics for enum `Result`\n-        //~| HELP use angle brackets\n+        //~| HELP add missing\n \n         type B = Result<String>;\n-        //~^ ERROR this enum takes 2 type arguments but only 1 type argument was supplied\n-        //~| HELP add missing type argument\n+        //~^ ERROR this enum takes 2 generic arguments but 1 generic argument\n+        //~| HELP add missing\n \n         type C = Result<'static>;\n-        //~^ ERROR this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n+        //~^ ERROR this enum takes 0 lifetime arguments but 1 lifetime argument\n         //~| HELP remove these generics\n-        //~| ERROR this enum takes 2 type arguments but 0 type arguments were supplied\n-        //~| HELP add missing type arguments\n+        //~| ERROR this enum takes 2 generic arguments but 0 generic arguments\n+        //~| HELP add missing\n \n         type D = Result<usize, String, char>;\n-        //~^ ERROR this enum takes 2 type arguments but 3 type arguments were supplied\n+        //~^ ERROR this enum takes 2 generic arguments but 3 generic arguments\n         //~| HELP remove\n     }\n }"}, {"sha": "45bde4163d0fee72154d4a106435d589d6411627", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 87, "deletions": 87, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -16,7 +16,7 @@ error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was\n   --> $DIR/wrong-number-of-args.rs:10:14\n    |\n LL |     type C = Ty<'static, usize>;\n-   |              ^^ --------- help: remove this lifetime argument\n+   |              ^^ ------- help: remove this lifetime argument\n    |              |\n    |              expected 0 lifetime arguments\n    |\n@@ -26,15 +26,15 @@ note: struct defined here, with 0 lifetime parameters\n LL |     struct Ty;\n    |            ^^\n \n-error[E0107]: this struct takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this struct takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:10:14\n    |\n LL |     type C = Ty<'static, usize>;\n-   |              ^^        ------- help: remove this type argument\n+   |              ^^          ----- help: remove this generic argument\n    |              |\n-   |              expected 0 type arguments\n+   |              expected 0 generic arguments\n    |\n-note: struct defined here, with 0 type parameters\n+note: struct defined here, with 0 generic parameters\n   --> $DIR/wrong-number-of-args.rs:2:12\n    |\n LL |     struct Ty;\n@@ -44,7 +44,7 @@ error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was\n   --> $DIR/wrong-number-of-args.rs:16:14\n    |\n LL |     type D = Ty<'static, usize, { 0 }>;\n-   |              ^^ --------- help: remove this lifetime argument\n+   |              ^^ ------- help: remove this lifetime argument\n    |              |\n    |              expected 0 lifetime arguments\n    |\n@@ -58,7 +58,7 @@ error[E0107]: this struct takes 0 generic arguments but 2 generic arguments were\n   --> $DIR/wrong-number-of-args.rs:16:14\n    |\n LL |     type D = Ty<'static, usize, { 0 }>;\n-   |              ^^        -------------- help: remove these generic arguments\n+   |              ^^          ------------ help: remove these generic arguments\n    |              |\n    |              expected 0 generic arguments\n    |\n@@ -72,45 +72,45 @@ error[E0107]: missing generics for struct `type_and_type::Ty`\n   --> $DIR/wrong-number-of-args.rs:26:14\n    |\n LL |     type A = Ty;\n-   |              ^^ expected 2 type arguments\n+   |              ^^ expected 2 generic arguments\n    |\n-note: struct defined here, with 2 type parameters: `A`, `B`\n+note: struct defined here, with 2 generic parameters: `A`, `B`\n   --> $DIR/wrong-number-of-args.rs:24:12\n    |\n LL |     struct Ty<A, B>;\n    |            ^^ -  -\n-help: use angle brackets to add missing type arguments\n+help: add missing generic arguments\n    |\n LL |     type A = Ty<A, B>;\n-   |                ^^^^^^\n+   |              ^^^^^^^^\n \n-error[E0107]: this struct takes 2 type arguments but only 1 type argument was supplied\n+error[E0107]: this struct takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:30:14\n    |\n LL |     type B = Ty<usize>;\n-   |              ^^ ----- supplied 1 type argument\n+   |              ^^ ----- supplied 1 generic argument\n    |              |\n-   |              expected 2 type arguments\n+   |              expected 2 generic arguments\n    |\n-note: struct defined here, with 2 type parameters: `A`, `B`\n+note: struct defined here, with 2 generic parameters: `A`, `B`\n   --> $DIR/wrong-number-of-args.rs:24:12\n    |\n LL |     struct Ty<A, B>;\n    |            ^^ -  -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL |     type B = Ty<usize, B>;\n    |                      ^^^\n \n-error[E0107]: this struct takes 2 type arguments but 3 type arguments were supplied\n+error[E0107]: this struct takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:36:14\n    |\n LL |     type D = Ty<usize, String, char>;\n-   |              ^^              ------ help: remove this type argument\n+   |              ^^                ---- help: remove this generic argument\n    |              |\n-   |              expected 2 type arguments\n+   |              expected 2 generic arguments\n    |\n-note: struct defined here, with 2 type parameters: `A`, `B`\n+note: struct defined here, with 2 generic parameters: `A`, `B`\n   --> $DIR/wrong-number-of-args.rs:24:12\n    |\n LL |     struct Ty<A, B>;\n@@ -120,17 +120,17 @@ error[E0107]: missing generics for struct `lifetime_and_type::Ty`\n   --> $DIR/wrong-number-of-args.rs:44:14\n    |\n LL |     type A = Ty;\n-   |              ^^ expected 1 type argument\n+   |              ^^ expected 1 generic argument\n    |\n-note: struct defined here, with 1 type parameter: `T`\n+note: struct defined here, with 1 generic parameter: `T`\n   --> $DIR/wrong-number-of-args.rs:42:12\n    |\n LL |     struct Ty<'a, T>;\n    |            ^^     -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL |     type A = Ty<T>;\n-   |                ^^^\n+   |              ^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/wrong-number-of-args.rs:44:14\n@@ -143,18 +143,18 @@ help: consider introducing a named lifetime parameter\n LL |     type A<'a> = Ty<'a>;\n    |           ^^^^   ^^^^^^\n \n-error[E0107]: this struct takes 1 type argument but 0 type arguments were supplied\n+error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:50:14\n    |\n LL |     type B = Ty<'static>;\n-   |              ^^ expected 1 type argument\n+   |              ^^ expected 1 generic argument\n    |\n-note: struct defined here, with 1 type parameter: `T`\n+note: struct defined here, with 1 generic parameter: `T`\n   --> $DIR/wrong-number-of-args.rs:42:12\n    |\n LL |     struct Ty<'a, T>;\n    |            ^^     -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL |     type B = Ty<'static, T>;\n    |                        ^^^\n@@ -174,59 +174,59 @@ error[E0107]: missing generics for struct `type_and_type_and_type::Ty`\n   --> $DIR/wrong-number-of-args.rs:64:14\n    |\n LL |     type A = Ty;\n-   |              ^^ expected at least 2 type arguments\n+   |              ^^ expected at least 2 generic arguments\n    |\n-note: struct defined here, with at least 2 type parameters: `A`, `B`\n+note: struct defined here, with at least 2 generic parameters: `A`, `B`\n   --> $DIR/wrong-number-of-args.rs:62:12\n    |\n LL |     struct Ty<A, B, C = &'static str>;\n    |            ^^ -  -\n-help: use angle brackets to add missing type arguments\n+help: add missing generic arguments\n    |\n LL |     type A = Ty<A, B>;\n-   |                ^^^^^^\n+   |              ^^^^^^^^\n \n-error[E0107]: this struct takes at least 2 type arguments but only 1 type argument was supplied\n+error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:68:14\n    |\n LL |     type B = Ty<usize>;\n-   |              ^^ ----- supplied 1 type argument\n+   |              ^^ ----- supplied 1 generic argument\n    |              |\n-   |              expected at least 2 type arguments\n+   |              expected at least 2 generic arguments\n    |\n-note: struct defined here, with at least 2 type parameters: `A`, `B`\n+note: struct defined here, with at least 2 generic parameters: `A`, `B`\n   --> $DIR/wrong-number-of-args.rs:62:12\n    |\n LL |     struct Ty<A, B, C = &'static str>;\n    |            ^^ -  -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL |     type B = Ty<usize, B>;\n    |                      ^^^\n \n-error[E0107]: this struct takes at most 3 type arguments but 4 type arguments were supplied\n+error[E0107]: this struct takes at most 3 generic arguments but 4 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:76:14\n    |\n LL |     type E = Ty<usize, String, char, f64>;\n-   |              ^^                    ----- help: remove this type argument\n+   |              ^^                      --- help: remove this generic argument\n    |              |\n-   |              expected at most 3 type arguments\n+   |              expected at most 3 generic arguments\n    |\n-note: struct defined here, with at most 3 type parameters: `A`, `B`, `C`\n+note: struct defined here, with at most 3 generic parameters: `A`, `B`, `C`\n   --> $DIR/wrong-number-of-args.rs:62:12\n    |\n LL |     struct Ty<A, B, C = &'static str>;\n    |            ^^ -  -  -\n \n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:96:22\n    |\n LL |     type A = Box<dyn NonGeneric<usize>>;\n    |                      ^^^^^^^^^^------- help: remove these generics\n    |                      |\n-   |                      expected 0 type arguments\n+   |                      expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $DIR/wrong-number-of-args.rs:84:11\n    |\n LL |     trait NonGeneric {\n@@ -247,7 +247,7 @@ error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were\n   --> $DIR/wrong-number-of-args.rs:104:22\n    |\n LL |     type C = Box<dyn GenericLifetime<'static, 'static>>;\n-   |                      ^^^^^^^^^^^^^^^        --------- help: remove this lifetime argument\n+   |                      ^^^^^^^^^^^^^^^          ------- help: remove this lifetime argument\n    |                      |\n    |                      expected 1 lifetime argument\n    |\n@@ -261,27 +261,27 @@ error[E0107]: missing generics for trait `GenericType`\n   --> $DIR/wrong-number-of-args.rs:108:22\n    |\n LL |     type D = Box<dyn GenericType>;\n-   |                      ^^^^^^^^^^^ expected 1 type argument\n+   |                      ^^^^^^^^^^^ expected 1 generic argument\n    |\n-note: trait defined here, with 1 type parameter: `A`\n+note: trait defined here, with 1 generic parameter: `A`\n   --> $DIR/wrong-number-of-args.rs:92:11\n    |\n LL |     trait GenericType<A> {\n    |           ^^^^^^^^^^^ -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL |     type D = Box<dyn GenericType<A>>;\n-   |                                 ^^^\n+   |                      ^^^^^^^^^^^^^^\n \n-error[E0107]: this trait takes 1 type argument but 2 type arguments were supplied\n+error[E0107]: this trait takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:112:22\n    |\n LL |     type E = Box<dyn GenericType<String, usize>>;\n-   |                      ^^^^^^^^^^^       ------- help: remove this type argument\n+   |                      ^^^^^^^^^^^         ----- help: remove this generic argument\n    |                      |\n-   |                      expected 1 type argument\n+   |                      expected 1 generic argument\n    |\n-note: trait defined here, with 1 type parameter: `A`\n+note: trait defined here, with 1 generic parameter: `A`\n   --> $DIR/wrong-number-of-args.rs:92:11\n    |\n LL |     trait GenericType<A> {\n@@ -291,32 +291,32 @@ error[E0107]: missing generics for struct `HashMap`\n   --> $DIR/wrong-number-of-args.rs:121:18\n    |\n LL |         type A = HashMap;\n-   |                  ^^^^^^^ expected at least 2 type arguments\n+   |                  ^^^^^^^ expected at least 2 generic arguments\n    |\n-note: struct defined here, with at least 2 type parameters: `K`, `V`\n+note: struct defined here, with at least 2 generic parameters: `K`, `V`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n    |\n LL | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^ -  -\n-help: use angle brackets to add missing type arguments\n+help: add missing generic arguments\n    |\n LL |         type A = HashMap<K, V>;\n-   |                         ^^^^^^\n+   |                  ^^^^^^^^^^^^^\n \n-error[E0107]: this struct takes at least 2 type arguments but only 1 type argument was supplied\n+error[E0107]: this struct takes at least 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:125:18\n    |\n LL |         type B = HashMap<String>;\n-   |                  ^^^^^^^ ------ supplied 1 type argument\n+   |                  ^^^^^^^ ------ supplied 1 generic argument\n    |                  |\n-   |                  expected at least 2 type arguments\n+   |                  expected at least 2 generic arguments\n    |\n-note: struct defined here, with at least 2 type parameters: `K`, `V`\n+note: struct defined here, with at least 2 generic parameters: `K`, `V`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n    |\n LL | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^ -  -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL |         type B = HashMap<String, V>;\n    |                                ^^^\n@@ -335,31 +335,31 @@ note: struct defined here, with 0 lifetime parameters\n LL | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n \n-error[E0107]: this struct takes at least 2 type arguments but 0 type arguments were supplied\n+error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:129:18\n    |\n LL |         type C = HashMap<'static>;\n-   |                  ^^^^^^^ expected at least 2 type arguments\n+   |                  ^^^^^^^ expected at least 2 generic arguments\n    |\n-note: struct defined here, with at least 2 type parameters: `K`, `V`\n+note: struct defined here, with at least 2 generic parameters: `K`, `V`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n    |\n LL | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^ -  -\n-help: add missing type arguments\n+help: add missing generic arguments\n    |\n LL |         type C = HashMap<'static, K, V>;\n    |                                 ^^^^^^\n \n-error[E0107]: this struct takes at most 3 type arguments but 4 type arguments were supplied\n+error[E0107]: this struct takes at most 3 generic arguments but 4 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:135:18\n    |\n LL |         type D = HashMap<usize, String, char, f64>;\n-   |                  ^^^^^^^                    ----- help: remove this type argument\n+   |                  ^^^^^^^                      --- help: remove this generic argument\n    |                  |\n-   |                  expected at most 3 type arguments\n+   |                  expected at most 3 generic arguments\n    |\n-note: struct defined here, with at most 3 type parameters: `K`, `V`, `S`\n+note: struct defined here, with at most 3 generic parameters: `K`, `V`, `S`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n    |\n LL | pub struct HashMap<K, V, S = RandomState> {\n@@ -369,32 +369,32 @@ error[E0107]: missing generics for enum `Result`\n   --> $DIR/wrong-number-of-args.rs:141:18\n    |\n LL |         type A = Result;\n-   |                  ^^^^^^ expected 2 type arguments\n+   |                  ^^^^^^ expected 2 generic arguments\n    |\n-note: enum defined here, with 2 type parameters: `T`, `E`\n+note: enum defined here, with 2 generic parameters: `T`, `E`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {\n    |          ^^^^^^ -  -\n-help: use angle brackets to add missing type arguments\n+help: add missing generic arguments\n    |\n LL |         type A = Result<T, E>;\n-   |                        ^^^^^^\n+   |                  ^^^^^^^^^^^^\n \n-error[E0107]: this enum takes 2 type arguments but only 1 type argument was supplied\n+error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/wrong-number-of-args.rs:145:18\n    |\n LL |         type B = Result<String>;\n-   |                  ^^^^^^ ------ supplied 1 type argument\n+   |                  ^^^^^^ ------ supplied 1 generic argument\n    |                  |\n-   |                  expected 2 type arguments\n+   |                  expected 2 generic arguments\n    |\n-note: enum defined here, with 2 type parameters: `T`, `E`\n+note: enum defined here, with 2 generic parameters: `T`, `E`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {\n    |          ^^^^^^ -  -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL |         type B = Result<String, E>;\n    |                               ^^^\n@@ -413,31 +413,31 @@ note: enum defined here, with 0 lifetime parameters\n LL | pub enum Result<T, E> {\n    |          ^^^^^^\n \n-error[E0107]: this enum takes 2 type arguments but 0 type arguments were supplied\n+error[E0107]: this enum takes 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:149:18\n    |\n LL |         type C = Result<'static>;\n-   |                  ^^^^^^ expected 2 type arguments\n+   |                  ^^^^^^ expected 2 generic arguments\n    |\n-note: enum defined here, with 2 type parameters: `T`, `E`\n+note: enum defined here, with 2 generic parameters: `T`, `E`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {\n    |          ^^^^^^ -  -\n-help: add missing type arguments\n+help: add missing generic arguments\n    |\n LL |         type C = Result<'static, T, E>;\n    |                                ^^^^^^\n \n-error[E0107]: this enum takes 2 type arguments but 3 type arguments were supplied\n+error[E0107]: this enum takes 2 generic arguments but 3 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:155:18\n    |\n LL |         type D = Result<usize, String, char>;\n-   |                  ^^^^^^              ------ help: remove this type argument\n+   |                  ^^^^^^                ---- help: remove this generic argument\n    |                  |\n-   |                  expected 2 type arguments\n+   |                  expected 2 generic arguments\n    |\n-note: enum defined here, with 2 type parameters: `T`, `E`\n+note: enum defined here, with 2 generic parameters: `T`, `E`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {"}, {"sha": "1aa278b450f9f15ed7afc63c08339a545dac68b9", "filename": "src/test/ui/issues/issue-14092.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -2,19 +2,19 @@ error[E0107]: missing generics for struct `Box`\n   --> $DIR/issue-14092.rs:1:11\n    |\n LL | fn fn1(0: Box) {}\n-   |           ^^^ expected at least 1 type argument\n+   |           ^^^ expected at least 1 generic argument\n    |\n-note: struct defined here, with at least 1 type parameter: `T`\n+note: struct defined here, with at least 1 generic parameter: `T`\n   --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n LL | pub struct Box<\n    |            ^^^\n LL |     T: ?Sized,\n    |     -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL | fn fn1(0: Box<T>) {}\n-   |              ^^^\n+   |           ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4711a3f3ce07ef57db1388c1320a73036051634d", "filename": "src/test/ui/issues/issue-18423.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -2,7 +2,7 @@ error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was\n   --> $DIR/issue-18423.rs:4:8\n    |\n LL |     x: Box<'a, isize>\n-   |        ^^^ ---- help: remove this lifetime argument\n+   |        ^^^ -- help: remove this lifetime argument\n    |        |\n    |        expected 0 lifetime arguments\n    |"}, {"sha": "5d7ffeb0deb0ef5e968967fb83f6249f8b18f177", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -11,17 +11,17 @@ error[E0107]: missing generics for trait `Fn`\n   --> $DIR/issue-23024.rs:9:39\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n-   |                                       ^^ expected 1 type argument\n+   |                                       ^^ expected 1 generic argument\n    |\n-note: trait defined here, with 1 type parameter: `Args`\n+note: trait defined here, with 1 generic parameter: `Args`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL | pub trait Fn<Args>: FnMut<Args> {\n    |           ^^ ----\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn<Args>)(3));\n-   |                                         ^^^^^^\n+   |                                       ^^^^^^^^\n \n error[E0191]: the value of the associated type `Output` (from trait `FnOnce`) must be specified\n   --> $DIR/issue-23024.rs:9:39"}, {"sha": "aa43d06c99b0101d8387d74209455aa89a5e7742", "filename": "src/test/ui/issues/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -4,7 +4,7 @@ fn foo<T>() {\n     }\n \n     impl<T> Drop for Foo<T> {\n-        //~^ ERROR this struct takes 0 type arguments but 1 type argument was supplied\n+        //~^ ERROR this struct takes 0 generic arguments but 1 generic argument\n         //~| ERROR the type parameter `T` is not constrained by the impl trait, self type, or predicates\n         fn drop(&mut self) {}\n     }"}, {"sha": "094da64d76d4d252df3da36b9555b843c275012e", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -9,15 +9,15 @@ LL |     struct Foo {\n LL |         x: T,\n    |            ^ use of generic parameter from outer function\n \n-error[E0107]: this struct takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this struct takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-3214.rs:6:22\n    |\n LL |     impl<T> Drop for Foo<T> {\n    |                      ^^^--- help: remove these generics\n    |                      |\n-   |                      expected 0 type arguments\n+   |                      expected 0 generic arguments\n    |\n-note: struct defined here, with 0 type parameters\n+note: struct defined here, with 0 generic parameters\n   --> $DIR/issue-3214.rs:2:12\n    |\n LL |     struct Foo {"}, {"sha": "240826a161d976b93e636b80f9277dadb7018694", "filename": "src/test/ui/issues/issue-53251.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -9,8 +9,8 @@ macro_rules! impl_add {\n         $(\n             fn $n() {\n                 S::f::<i64>();\n-                //~^ ERROR this associated function takes 0 type arguments but 1 type argument was supplied\n-                //~| ERROR this associated function takes 0 type arguments but 1 type argument was supplied\n+                //~^ ERROR this associated function takes 0 generic\n+                //~| ERROR this associated function takes 0 generic\n             }\n         )*\n     }"}, {"sha": "708feffb84d5e868e0332445452ad8b9faada461", "filename": "src/test/ui/issues/issue-53251.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,33 +1,33 @@\n-error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-53251.rs:11:20\n    |\n LL |                 S::f::<i64>();\n    |                    ^------- help: remove these generics\n    |                    |\n-   |                    expected 0 type arguments\n+   |                    expected 0 generic arguments\n ...\n LL | impl_add!(a b);\n    | --------------- in this macro invocation\n    |\n-note: associated function defined here, with 0 type parameters\n+note: associated function defined here, with 0 generic parameters\n   --> $DIR/issue-53251.rs:4:8\n    |\n LL |     fn f() {}\n    |        ^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-53251.rs:11:20\n    |\n LL |                 S::f::<i64>();\n    |                    ^------- help: remove these generics\n    |                    |\n-   |                    expected 0 type arguments\n+   |                    expected 0 generic arguments\n ...\n LL | impl_add!(a b);\n    | --------------- in this macro invocation\n    |\n-note: associated function defined here, with 0 type parameters\n+note: associated function defined here, with 0 generic parameters\n   --> $DIR/issue-53251.rs:4:8\n    |\n LL |     fn f() {}"}, {"sha": "8e230c615bc93837ccf9fe94e95b79ebc9ef1fc4", "filename": "src/test/ui/issues/issue-60622.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-60622.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-60622.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60622.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -9,7 +9,7 @@ impl Borked {\n fn run_wild<T>(b: &Borked) {\n     b.a::<'_, T>();\n     //~^ ERROR cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-    //~| ERROR this associated function takes 0 type arguments but 1 type argument was supplied\n+    //~| ERROR this associated function takes 0 generic arguments but 1 generic argument\n     //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n }\n "}, {"sha": "b305cc78535372e5fd5298807b43f8098dbf0125", "filename": "src/test/ui/issues/issue-60622.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -16,15 +16,15 @@ LL | #![deny(warnings)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n \n-error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-60622.rs:10:7\n    |\n LL |     b.a::<'_, T>();\n-   |       ^     --- help: remove this type argument\n+   |       ^       - help: remove this generic argument\n    |       |\n-   |       expected 0 type arguments\n+   |       expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 type parameters\n+note: associated function defined here, with 0 generic parameters\n   --> $DIR/issue-60622.rs:6:8\n    |\n LL |     fn a(&self) {}"}, {"sha": "6bf55844da8f25aae7643d042a0eb2ca665f77c8", "filename": "src/test/ui/methods/method-call-lifetime-args-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -14,7 +14,7 @@ impl S {\n fn method_call() {\n     S.early(); // OK\n     S.early::<'static>();\n-    //~^ ERROR this associated function takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~^ ERROR this associated function takes 2 lifetime arguments but 1 lifetime argument\n     S.early::<'static, 'static, 'static>();\n     //~^ ERROR this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n     let _: &u8 = S.life_and_type::<'static>();\n@@ -61,7 +61,7 @@ fn ufcs() {\n \n     S::early(S); // OK\n     S::early::<'static>(S);\n-    //~^ ERROR this associated function takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~^ ERROR this associated function takes 2 lifetime arguments but 1 lifetime argument\n     S::early::<'static, 'static, 'static>(S);\n     //~^ ERROR this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n     let _: &u8 = S::life_and_type::<'static>(S);"}, {"sha": "ea50815ec1af71711e8bc0b74f06588142d44da9", "filename": "src/test/ui/methods/method-call-lifetime-args-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this associated function takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this associated function takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:16:7\n    |\n LL |     S.early::<'static>();\n@@ -20,7 +20,7 @@ error[E0107]: this associated function takes 2 lifetime arguments but 3 lifetime\n   --> $DIR/method-call-lifetime-args-fail.rs:18:7\n    |\n LL |     S.early::<'static, 'static, 'static>();\n-   |       ^^^^^                   --------- help: remove this lifetime argument\n+   |       ^^^^^                     ------- help: remove this lifetime argument\n    |       |\n    |       expected 2 lifetime arguments\n    |\n@@ -198,7 +198,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_unused_early<'a, 'b>(self) -> &'b u8 { loop {} }\n    |                          ^^\n \n-error[E0107]: this associated function takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this associated function takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:63:8\n    |\n LL |     S::early::<'static>(S);\n@@ -220,7 +220,7 @@ error[E0107]: this associated function takes 2 lifetime arguments but 3 lifetime\n   --> $DIR/method-call-lifetime-args-fail.rs:65:8\n    |\n LL |     S::early::<'static, 'static, 'static>(S);\n-   |        ^^^^^                   --------- help: remove this lifetime argument\n+   |        ^^^^^                     ------- help: remove this lifetime argument\n    |        |\n    |        expected 2 lifetime arguments\n    |"}, {"sha": "a5ebeecd3116c1fe390450e5745d1b531d83ca9b", "filename": "src/test/ui/seq-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fseq-args.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -2,12 +2,12 @@ fn main() {\n     trait Seq { }\n \n     impl<T> Seq<T> for Vec<T> {\n-        //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+        //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n         /* ... */\n     }\n \n     impl Seq<bool> for u32 {\n-        //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+        //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n         /* Treat the integer as a sequence of bits */\n     }\n }"}, {"sha": "c404d95748b5c703314f619bd6f346f16ddc4e17", "filename": "src/test/ui/seq-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fseq-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fseq-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fseq-args.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,26 +1,26 @@\n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/seq-args.rs:4:13\n    |\n LL |     impl<T> Seq<T> for Vec<T> {\n    |             ^^^--- help: remove these generics\n    |             |\n-   |             expected 0 type arguments\n+   |             expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $DIR/seq-args.rs:2:11\n    |\n LL |     trait Seq { }\n    |           ^^^\n \n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/seq-args.rs:9:10\n    |\n LL |     impl Seq<bool> for u32 {\n    |          ^^^------ help: remove these generics\n    |          |\n-   |          expected 0 type arguments\n+   |          expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $DIR/seq-args.rs:2:11\n    |\n LL |     trait Seq { }"}, {"sha": "a03ef590cb3a12a24305aa5bba19bd687b80b4fe", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -45,13 +45,13 @@ fn main() {\n         y: 8,\n     };\n \n-    let pt3 = PointF::<i32> { //~ ERROR this type alias takes 0 type arguments but 1 type argument was supplied\n+    let pt3 = PointF::<i32> { //~ ERROR this type alias takes 0 generic arguments but 1 generic argument\n         x: 9,  //~ ERROR mismatched types\n         y: 10, //~ ERROR mismatched types\n     };\n \n     match (Point { x: 1, y: 2 }) {\n-        PointF::<u32> { .. } => {} //~ ERROR this type alias takes 0 type arguments but 1 type argument was supplied\n+        PointF::<u32> { .. } => {} //~ ERROR this type alias takes 0 generic arguments but 1 generic argument\n         //~^ ERROR mismatched types\n     }\n "}, {"sha": "3d64fc601df988f32052207bbcddca2a85ebed28", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -52,15 +52,15 @@ LL |         x: 7,\n    |            expected `f32`, found integer\n    |            help: use a float literal: `7.0`\n \n-error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/structure-constructor-type-mismatch.rs:48:15\n    |\n LL |     let pt3 = PointF::<i32> {\n    |               ^^^^^^------- help: remove these generics\n    |               |\n-   |               expected 0 type arguments\n+   |               expected 0 generic arguments\n    |\n-note: type alias defined here, with 0 type parameters\n+note: type alias defined here, with 0 generic parameters\n   --> $DIR/structure-constructor-type-mismatch.rs:6:6\n    |\n LL | type PointF = Point<f32>;\n@@ -84,15 +84,15 @@ LL |         y: 10,\n    |            expected `f32`, found integer\n    |            help: use a float literal: `10.0`\n \n-error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/structure-constructor-type-mismatch.rs:54:9\n    |\n LL |         PointF::<u32> { .. } => {}\n    |         ^^^^^^------- help: remove these generics\n    |         |\n-   |         expected 0 type arguments\n+   |         expected 0 generic arguments\n    |\n-note: type alias defined here, with 0 type parameters\n+note: type alias defined here, with 0 generic parameters\n   --> $DIR/structure-constructor-type-mismatch.rs:6:6\n    |\n LL | type PointF = Point<f32>;"}, {"sha": "4aaac2d95d44793907e0fb459cc79a19405d66c5", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -16,44 +16,44 @@ trait Tar<'t, 'k, I> {}\n \n thread_local! {\n     static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR missing lifetime specifier\n-    //~| ERROR missing lifetime specifier\n+      //~^ ERROR missing lifetime specifiers\n+      //~| ERROR missing lifetime specifiers\n }\n thread_local! {\n     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR missing lifetime specifier\n-    //~| ERROR missing lifetime specifier\n-    //~| ERROR missing lifetime specifier\n-    //~| ERROR missing lifetime specifier\n+      //~^ ERROR missing lifetime specifier\n+      //~| ERROR missing lifetime specifier\n+      //~| ERROR missing lifetime specifier\n+      //~| ERROR missing lifetime specifier\n }\n thread_local! {\n     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR missing lifetime specifier\n-    //~| ERROR missing lifetime specifier\n+    //~^ ERROR missing lifetime\n+    //~| ERROR missing lifetime\n }\n thread_local! {\n     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR missing lifetime specifier\n-    //~| ERROR missing lifetime specifier\n-    //~| ERROR missing lifetime specifier\n-    //~| ERROR missing lifetime specifier\n+    //~^ ERROR missing lifetime\n+    //~| ERROR missing lifetime\n+    //~| ERROR missing lifetime\n+    //~| ERROR missing lifetime\n }\n \n thread_local! {\n     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n-    //~| ERROR this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n-    //~| ERROR this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n-    //~| ERROR this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~^ ERROR this union takes 2 lifetime arguments but 1 lifetime argument\n+    //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n }\n thread_local! {\n     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n-    //~| ERROR this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n-    //~| ERROR this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n-    //~| ERROR this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n-    //~| ERROR missing lifetime specifier\n-    //~| ERROR missing lifetime specifier\n+    //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR missing lifetime\n+    //~| ERROR missing lifetime\n }\n \n fn main() {}"}, {"sha": "8ddd2f7d52221fa585f94a725180a760dfda1d5e", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -142,7 +142,7 @@ help: consider using the `'static` lifetime\n LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                 ^^^^^^^^^^^^^^^^^\n \n-error[E0107]: this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -157,10 +157,10 @@ LL | pub union Qux<'t, 'k, I> {\n    |           ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, '_, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                       ^^^^\n \n-error[E0107]: this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -178,7 +178,7 @@ help: add missing lifetime argument\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                       ^^^^\n \n-error[E0107]: this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -196,7 +196,7 @@ help: add missing lifetime argument\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                       ^^^^\n \n-error[E0107]: this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -211,10 +211,10 @@ LL | pub union Qux<'t, 'k, I> {\n    |           ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, '_, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                       ^^^^\n \n-error[E0107]: this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -229,7 +229,7 @@ LL | trait Tar<'t, 'k, I> {}\n    |       ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, '_, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                        ^^^^\n \n error[E0106]: missing lifetime specifier\n@@ -244,7 +244,7 @@ help: consider using the `'static` lifetime\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^\n \n-error[E0107]: this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -274,7 +274,7 @@ help: consider using the `'static` lifetime\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^\n \n-error[E0107]: this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -292,7 +292,7 @@ help: add missing lifetime argument\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                        ^^^^\n \n-error[E0107]: this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n@@ -307,7 +307,7 @@ LL | trait Tar<'t, 'k, I> {}\n    |       ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, '_, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                        ^^^^\n \n error: aborting due to 22 previous errors"}, {"sha": "8b6e8cfd720be6cf213eb762e3ed999f04202555", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -6,7 +6,7 @@ pub trait T<X, Y> {\n pub struct Foo {\n     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,\n     //~^ ERROR must be specified\n-    //~| ERROR this trait takes 2 type arguments but 4 type arguments were supplied\n+    //~| ERROR this trait takes 2 generic arguments but 4 generic arguments were supplied\n }\n \n "}, {"sha": "f1248643105eba7e30c2626ff3a9985ecf8b6610", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this trait takes 2 type arguments but 4 type arguments were supplied\n+error[E0107]: this trait takes 2 generic arguments but 4 generic arguments were supplied\n   --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:16\n    |\n LL |     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,\n-   |                ^             -------------- help: remove these type arguments\n+   |                ^               ------------ help: remove these generic arguments\n    |                |\n-   |                expected 2 type arguments\n+   |                expected 2 generic arguments\n    |\n-note: trait defined here, with 2 type parameters: `X`, `Y`\n+note: trait defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/use-type-argument-instead-of-assoc-type.rs:1:11\n    |\n LL | pub trait T<X, Y> {"}, {"sha": "7523a931dd58f172ae7fda97408de4ce92d18462", "filename": "src/test/ui/tag-type-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftag-type-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftag-type-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-type-args.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -2,17 +2,17 @@ error[E0107]: missing generics for enum `Quux`\n   --> $DIR/tag-type-args.rs:3:11\n    |\n LL | fn foo(c: Quux) { assert!((false)); }\n-   |           ^^^^ expected 1 type argument\n+   |           ^^^^ expected 1 generic argument\n    |\n-note: enum defined here, with 1 type parameter: `T`\n+note: enum defined here, with 1 generic parameter: `T`\n   --> $DIR/tag-type-args.rs:1:6\n    |\n LL | enum Quux<T> { Bar }\n    |      ^^^^ -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL | fn foo(c: Quux<T>) { assert!((false)); }\n-   |               ^^^\n+   |           ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "14ae67cffd703dfcad7f0116f1c1ef9311c3cf95", "filename": "src/test/ui/traits/object/vs-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     //~^ at least one trait is required for an object type\n     let _: S<'static, 'static>;\n     //~^ ERROR this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n-    //~| ERROR this struct takes 1 type argument but 0 type arguments were supplied\n+    //~| ERROR this struct takes 1 generic argument but 0 generic arguments were supplied\n     let _: S<dyn 'static +, 'static>;\n     //~^ ERROR type provided when a lifetime was expected\n     //~| ERROR at least one trait is required for an object type"}, {"sha": "40f5fcbceaf0b0a5613e3eebc36a5b2c78cd27cf", "filename": "src/test/ui/traits/object/vs-lifetime.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fvs-lifetime.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -8,7 +8,7 @@ error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments wer\n   --> $DIR/vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;\n-   |            ^        --------- help: remove this lifetime argument\n+   |            ^          ------- help: remove this lifetime argument\n    |            |\n    |            expected 1 lifetime argument\n    |\n@@ -18,18 +18,18 @@ note: struct defined here, with 1 lifetime parameter: `'a`\n LL | struct S<'a, T>(&'a u8, T);\n    |        ^ --\n \n-error[E0107]: this struct takes 1 type argument but 0 type arguments were supplied\n+error[E0107]: this struct takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;\n-   |            ^ expected 1 type argument\n+   |            ^ expected 1 generic argument\n    |\n-note: struct defined here, with 1 type parameter: `T`\n+note: struct defined here, with 1 generic parameter: `T`\n   --> $DIR/vs-lifetime.rs:4:8\n    |\n LL | struct S<'a, T>(&'a u8, T);\n    |        ^     -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL |     let _: S<'static, 'static, T>;\n    |                              ^^^"}, {"sha": "183c779607c9510a09c1e948ea9811443e65b2cf", "filename": "src/test/ui/traits/test-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -7,9 +7,9 @@ impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n \n fn main() {\n     10.dup::<i32>();\n-    //~^ ERROR this associated function takes 0 type arguments but 1 type argument was supplied\n+    //~^ ERROR this associated function takes 0 generic arguments but 1\n     10.blah::<i32, i32>();\n-    //~^ ERROR this associated function takes 1 type argument but 2 type arguments were supplied\n+    //~^ ERROR this associated function takes 1 generic argument but 2\n     (box 10 as Box<dyn bar>).dup();\n     //~^ ERROR E0038\n     //~| ERROR E0038"}, {"sha": "0289424510f9781cebb0e0ecc267897e5d9ad9ab", "filename": "src/test/ui/traits/test-2.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,26 +1,26 @@\n-error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/test-2.rs:9:8\n    |\n LL |     10.dup::<i32>();\n    |        ^^^------- help: remove these generics\n    |        |\n-   |        expected 0 type arguments\n+   |        expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 type parameters\n+note: associated function defined here, with 0 generic parameters\n   --> $DIR/test-2.rs:4:16\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |                ^^^\n \n-error[E0107]: this associated function takes 1 type argument but 2 type arguments were supplied\n+error[E0107]: this associated function takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/test-2.rs:11:8\n    |\n LL |     10.blah::<i32, i32>();\n-   |        ^^^^      ----- help: remove this type argument\n+   |        ^^^^        --- help: remove this generic argument\n    |        |\n-   |        expected 1 type argument\n+   |        expected 1 generic argument\n    |\n-note: associated function defined here, with 1 type parameter: `X`\n+note: associated function defined here, with 1 generic parameter: `X`\n   --> $DIR/test-2.rs:4:39\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }"}, {"sha": "6bc4f528faaf9092f705e0e308c6044f72ecb835", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -62,10 +62,10 @@ fn main() {\n     AliasFixed::TSVariant::<()>(());\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n     AliasFixed::<()>::TSVariant(());\n-    //~^ ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n+    //~^ ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n     AliasFixed::<()>::TSVariant::<()>(());\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n-    //~| ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n+    //~| ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n \n     // Struct variant\n \n@@ -80,10 +80,10 @@ fn main() {\n     AliasFixed::SVariant::<()> { v: () };\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n     AliasFixed::<()>::SVariant { v: () };\n-    //~^ ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n+    //~^ ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n     AliasFixed::<()>::SVariant::<()> { v: () };\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n-    //~| ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n+    //~| ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n \n     // Unit variant\n \n@@ -98,8 +98,8 @@ fn main() {\n     AliasFixed::UVariant::<()>;\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n     AliasFixed::<()>::UVariant;\n-    //~^ ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n+    //~^ ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n     AliasFixed::<()>::UVariant::<()>;\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n-    //~| ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n+    //~| ERROR this type alias takes 0 generic arguments but 1 generic argument was supplied [E0107]\n }"}, {"sha": "a384d5f561c940e9d1d1b01d87443aec5c2d4e65", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -166,29 +166,29 @@ error[E0109]: type arguments are not allowed for this type\n LL |     AliasFixed::TSVariant::<()>(());\n    |                             ^^ type argument not allowed\n \n-error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:64:5\n    |\n LL |     AliasFixed::<()>::TSVariant(());\n    |     ^^^^^^^^^^------ help: remove these generics\n    |     |\n-   |     expected 0 type arguments\n+   |     expected 0 generic arguments\n    |\n-note: type alias defined here, with 0 type parameters\n+note: type alias defined here, with 0 generic parameters\n   --> $DIR/enum-variant-generic-args.rs:9:6\n    |\n LL | type AliasFixed = Enum<()>;\n    |      ^^^^^^^^^^\n \n-error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:66:5\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |     ^^^^^^^^^^------ help: remove these generics\n    |     |\n-   |     expected 0 type arguments\n+   |     expected 0 generic arguments\n    |\n-note: type alias defined here, with 0 type parameters\n+note: type alias defined here, with 0 generic parameters\n   --> $DIR/enum-variant-generic-args.rs:9:6\n    |\n LL | type AliasFixed = Enum<()>;\n@@ -224,29 +224,29 @@ error[E0109]: type arguments are not allowed for this type\n LL |     AliasFixed::SVariant::<()> { v: () };\n    |                            ^^ type argument not allowed\n \n-error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:82:5\n    |\n LL |     AliasFixed::<()>::SVariant { v: () };\n    |     ^^^^^^^^^^------ help: remove these generics\n    |     |\n-   |     expected 0 type arguments\n+   |     expected 0 generic arguments\n    |\n-note: type alias defined here, with 0 type parameters\n+note: type alias defined here, with 0 generic parameters\n   --> $DIR/enum-variant-generic-args.rs:9:6\n    |\n LL | type AliasFixed = Enum<()>;\n    |      ^^^^^^^^^^\n \n-error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:84:5\n    |\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n    |     ^^^^^^^^^^------ help: remove these generics\n    |     |\n-   |     expected 0 type arguments\n+   |     expected 0 generic arguments\n    |\n-note: type alias defined here, with 0 type parameters\n+note: type alias defined here, with 0 generic parameters\n   --> $DIR/enum-variant-generic-args.rs:9:6\n    |\n LL | type AliasFixed = Enum<()>;\n@@ -282,29 +282,29 @@ error[E0109]: type arguments are not allowed for this type\n LL |     AliasFixed::UVariant::<()>;\n    |                            ^^ type argument not allowed\n \n-error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:100:5\n    |\n LL |     AliasFixed::<()>::UVariant;\n    |     ^^^^^^^^^^------ help: remove these generics\n    |     |\n-   |     expected 0 type arguments\n+   |     expected 0 generic arguments\n    |\n-note: type alias defined here, with 0 type parameters\n+note: type alias defined here, with 0 generic parameters\n   --> $DIR/enum-variant-generic-args.rs:9:6\n    |\n LL | type AliasFixed = Enum<()>;\n    |      ^^^^^^^^^^\n \n-error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:102:5\n    |\n LL |     AliasFixed::<()>::UVariant::<()>;\n    |     ^^^^^^^^^^------ help: remove these generics\n    |     |\n-   |     expected 0 type arguments\n+   |     expected 0 generic arguments\n    |\n-note: type alias defined here, with 0 type parameters\n+note: type alias defined here, with 0 generic parameters\n   --> $DIR/enum-variant-generic-args.rs:9:6\n    |\n LL | type AliasFixed = Enum<()>;"}, {"sha": "00449af6a459fab5375837f4182aa678429f0ccb", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -14,17 +14,17 @@ error[E0107]: missing generics for struct `Vec`\n   --> $DIR/issue-34255-1.rs:7:22\n    |\n LL |         input_cells: Vec::new()\n-   |                      ^^^ expected at least 1 type argument\n+   |                      ^^^ expected at least 1 generic argument\n    |\n-note: struct defined here, with at least 1 type parameter: `T`\n+note: struct defined here, with at least 1 generic parameter: `T`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n    |            ^^^ -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL |         input_cells: Vec<T>::new()\n-   |                         ^^^\n+   |                      ^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8cd34f48835edf27e4903cd4ea1777d794b446ec", "filename": "src/test/ui/typeck/issue-75883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -4,7 +4,7 @@ pub struct UI {}\n \n impl UI {\n     pub fn run() -> Result<_> {\n-        //~^ ERROR: this enum takes 2 type arguments but only 1 type argument was supplied\n+        //~^ ERROR: this enum takes 2 generic arguments but 1 generic argument was supplied\n         //~| ERROR: the type placeholder `_` is not allowed within types on item signatures\n         let mut ui = UI {};\n         ui.interact();\n@@ -13,7 +13,7 @@ impl UI {\n     }\n \n     pub fn interact(&mut self) -> Result<_> {\n-        //~^ ERROR: this enum takes 2 type arguments but only 1 type argument was supplied\n+        //~^ ERROR: this enum takes 2 generic arguments but 1 generic argument was supplied\n         //~| ERROR: the type placeholder `_` is not allowed within types on item signatures\n         unimplemented!();\n     }"}, {"sha": "71f4138c81d56c08f7a8a282b7e24855340435d6", "filename": "src/test/ui/typeck/issue-75883.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,35 +1,35 @@\n-error[E0107]: this enum takes 2 type arguments but only 1 type argument was supplied\n+error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-75883.rs:6:21\n    |\n LL |     pub fn run() -> Result<_> {\n-   |                     ^^^^^^ - supplied 1 type argument\n+   |                     ^^^^^^ - supplied 1 generic argument\n    |                     |\n-   |                     expected 2 type arguments\n+   |                     expected 2 generic arguments\n    |\n-note: enum defined here, with 2 type parameters: `T`, `E`\n+note: enum defined here, with 2 generic parameters: `T`, `E`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {\n    |          ^^^^^^ -  -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL |     pub fn run() -> Result<_, E> {\n    |                             ^^^\n \n-error[E0107]: this enum takes 2 type arguments but only 1 type argument was supplied\n+error[E0107]: this enum takes 2 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-75883.rs:15:35\n    |\n LL |     pub fn interact(&mut self) -> Result<_> {\n-   |                                   ^^^^^^ - supplied 1 type argument\n+   |                                   ^^^^^^ - supplied 1 generic argument\n    |                                   |\n-   |                                   expected 2 type arguments\n+   |                                   expected 2 generic arguments\n    |\n-note: enum defined here, with 2 type parameters: `T`, `E`\n+note: enum defined here, with 2 generic parameters: `T`, `E`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {\n    |          ^^^^^^ -  -\n-help: add missing type argument\n+help: add missing generic argument\n    |\n LL |     pub fn interact(&mut self) -> Result<_, E> {\n    |                                           ^^^"}, {"sha": "c463a8ad0c75789f50f9db67f17a96fff71b83b1", "filename": "src/test/ui/typeck/typeck-builtin-bound-type-parameters.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,17 +1,17 @@\n fn foo1<T:Copy<U>, U>(x: T) {}\n-//~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+//~^ ERROR this trait takes 0 generic arguments but 1 generic argument was supplied\n \n trait Trait: Copy<dyn Send> {}\n-//~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+//~^ ERROR this trait takes 0 generic arguments but 1 generic argument was supplied\n \n struct MyStruct1<T: Copy<T>>;\n-//~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+//~^ ERROR this trait takes 0 generic arguments but 1 generic argument was supplied\n \n struct MyStruct2<'a, T: Copy<'a>>;\n //~^ ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n \n fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n //~^ ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n-//~| ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+//~| ERROR this trait takes 0 generic arguments but 1 generic argument was supplied\n \n fn main() { }"}, {"sha": "bf74dd7dec0040ede852fdd6ab1bc4f8db2e2f2d", "filename": "src/test/ui/typeck/typeck-builtin-bound-type-parameters.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,40 +1,40 @@\n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:1:11\n    |\n LL | fn foo1<T:Copy<U>, U>(x: T) {}\n    |           ^^^^--- help: remove these generics\n    |           |\n-   |           expected 0 type arguments\n+   |           expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {\n    |           ^^^^\n \n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:4:14\n    |\n LL | trait Trait: Copy<dyn Send> {}\n    |              ^^^^---------- help: remove these generics\n    |              |\n-   |              expected 0 type arguments\n+   |              expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {\n    |           ^^^^\n \n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:7:21\n    |\n LL | struct MyStruct1<T: Copy<T>>;\n    |                     ^^^^--- help: remove these generics\n    |                     |\n-   |                     expected 0 type arguments\n+   |                     expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {\n@@ -58,7 +58,7 @@ error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-   |               ^^^^ ---- help: remove this lifetime argument\n+   |               ^^^^ -- help: remove this lifetime argument\n    |               |\n    |               expected 0 lifetime arguments\n    |\n@@ -68,15 +68,15 @@ note: trait defined here, with 0 lifetime parameters\n LL | pub trait Copy: Clone {\n    |           ^^^^\n \n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-   |               ^^^^   --- help: remove this type argument\n+   |               ^^^^     - help: remove this generic argument\n    |               |\n-   |               expected 0 type arguments\n+   |               expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {"}, {"sha": "43e46c5b6c3d771c3f5cb81b734cedd1808fb384", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -7,5 +7,5 @@ struct Foo<'a, T:'a> {\n \n pub fn main() {\n     let c: Foo<_, _> = Foo { r: &5 };\n-    //~^ ERROR this struct takes 1 type argument but 2 type arguments were supplied\n+    //~^ ERROR this struct takes 1 generic argument but 2 generic arguments were supplied\n }"}, {"sha": "a89c6b85c78edc0ab925c2905a270327d36cb96b", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this struct takes 1 type argument but 2 type arguments were supplied\n+error[E0107]: this struct takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/typeck_type_placeholder_lifetime_1.rs:9:12\n    |\n LL |     let c: Foo<_, _> = Foo { r: &5 };\n-   |            ^^^  --- help: remove this type argument\n+   |            ^^^    - help: remove this generic argument\n    |            |\n-   |            expected 1 type argument\n+   |            expected 1 generic argument\n    |\n-note: struct defined here, with 1 type parameter: `T`\n+note: struct defined here, with 1 generic parameter: `T`\n   --> $DIR/typeck_type_placeholder_lifetime_1.rs:4:8\n    |\n LL | struct Foo<'a, T:'a> {"}, {"sha": "178b8b1229a591850b332500d73f80e9ca84e25d", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -7,5 +7,5 @@ struct Foo<'a, T:'a> {\n \n pub fn main() {\n     let c: Foo<_, usize> = Foo { r: &5 };\n-    //~^ ERROR this struct takes 1 type argument but 2 type arguments were supplied\n+    //~^ ERROR this struct takes 1 generic argument but 2 generic arguments were supplied\n }"}, {"sha": "f30766bdf0121a413bf89b3c5c27ae9ea2bbf9ee", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this struct takes 1 type argument but 2 type arguments were supplied\n+error[E0107]: this struct takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/typeck_type_placeholder_lifetime_2.rs:9:12\n    |\n LL |     let c: Foo<_, usize> = Foo { r: &5 };\n-   |            ^^^  ------- help: remove this type argument\n+   |            ^^^    ----- help: remove this generic argument\n    |            |\n-   |            expected 1 type argument\n+   |            expected 1 generic argument\n    |\n-note: struct defined here, with 1 type parameter: `T`\n+note: struct defined here, with 1 generic parameter: `T`\n   --> $DIR/typeck_type_placeholder_lifetime_2.rs:4:8\n    |\n LL | struct Foo<'a, T:'a> {"}, {"sha": "766351634bb8af20293bac1bea6179d3b43db31d", "filename": "src/test/ui/ufcs/ufcs-qpath-missing-params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -12,9 +12,9 @@ impl<'a> IntoCow<'a, str> for String {\n \n fn main() {\n     <String as IntoCow>::into_cow(\"foo\".to_string());\n-    //~^ ERROR missing generics for trait `IntoCow`\n+      //~^ ERROR missing generics for\n \n     <String as IntoCow>::into_cow::<str>(\"foo\".to_string());\n-    //~^ ERROR missing generics for trait `IntoCow`\n-    //~| ERROR this associated function takes 0 type arguments but 1 type argument was supplied\n+    //~^ ERROR this associated function takes 0 generic arguments but 1\n+    //~| ERROR missing generics for\n }"}, {"sha": "37aa4d949daeaddbe395e3ebed546c0271495e6a", "filename": "src/test/ui/ufcs/ufcs-qpath-missing-params.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -2,43 +2,43 @@ error[E0107]: missing generics for trait `IntoCow`\n   --> $DIR/ufcs-qpath-missing-params.rs:14:16\n    |\n LL |     <String as IntoCow>::into_cow(\"foo\".to_string());\n-   |                ^^^^^^^ expected 1 type argument\n+   |                ^^^^^^^ expected 1 generic argument\n    |\n-note: trait defined here, with 1 type parameter: `B`\n+note: trait defined here, with 1 generic parameter: `B`\n   --> $DIR/ufcs-qpath-missing-params.rs:3:11\n    |\n LL | pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n    |           ^^^^^^^     -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL |     <String as IntoCow<B>>::into_cow(\"foo\".to_string());\n-   |                       ^^^\n+   |                ^^^^^^^^^^\n \n error[E0107]: missing generics for trait `IntoCow`\n   --> $DIR/ufcs-qpath-missing-params.rs:17:16\n    |\n LL |     <String as IntoCow>::into_cow::<str>(\"foo\".to_string());\n-   |                ^^^^^^^ expected 1 type argument\n+   |                ^^^^^^^ expected 1 generic argument\n    |\n-note: trait defined here, with 1 type parameter: `B`\n+note: trait defined here, with 1 generic parameter: `B`\n   --> $DIR/ufcs-qpath-missing-params.rs:3:11\n    |\n LL | pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n    |           ^^^^^^^     -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL |     <String as IntoCow<B>>::into_cow::<str>(\"foo\".to_string());\n-   |                       ^^^\n+   |                ^^^^^^^^^^\n \n-error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/ufcs-qpath-missing-params.rs:17:26\n    |\n LL |     <String as IntoCow>::into_cow::<str>(\"foo\".to_string());\n    |                          ^^^^^^^^------- help: remove these generics\n    |                          |\n-   |                          expected 0 type arguments\n+   |                          expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 type parameters\n+note: associated function defined here, with 0 generic parameters\n   --> $DIR/ufcs-qpath-missing-params.rs:4:8\n    |\n LL |     fn into_cow(self) -> Cow<'a, B>;"}, {"sha": "d0d27a5b75955dc969bedee1d5a434c1ad6b1d8a", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -8,17 +8,17 @@ error[E0107]: missing generics for struct `Bar`\n   --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:16\n    |\n LL |     let x: Box<Bar()> = panic!();\n-   |                ^^^ expected 1 type argument\n+   |                ^^^ expected 1 generic argument\n    |\n-note: struct defined here, with 1 type parameter: `A`\n+note: struct defined here, with 1 generic parameter: `A`\n   --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:3:8\n    |\n LL | struct Bar<A> {\n    |        ^^^ -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL |     let x: Box<Bar<A>()> = panic!();\n-   |                   ^^^\n+   |                ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0abf46cee9269c07964a3ef002269a8e7f97f752", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -8,17 +8,17 @@ error[E0107]: missing generics for struct `Bar`\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:15\n    |\n LL | fn foo(b: Box<Bar()>) {\n-   |               ^^^ expected 1 type argument\n+   |               ^^^ expected 1 generic argument\n    |\n-note: struct defined here, with 1 type parameter: `A`\n+note: struct defined here, with 1 generic parameter: `A`\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:3:8\n    |\n LL | struct Bar<A> {\n    |        ^^^ -\n-help: use angle brackets to add missing type argument\n+help: add missing generic argument\n    |\n LL | fn foo(b: Box<Bar<A>()>) {\n-   |                  ^^^\n+   |               ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f26ad8e93a153e5f4203c12403ff4386aa9a5885", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -3,7 +3,7 @@\n trait Three<A,B,C> { fn dummy(&self) -> (A,B,C); }\n \n fn foo(_: &dyn Three())\n-//~^ ERROR this trait takes 3 type arguments but only 1 type argument was supplied\n+//~^ ERROR this trait takes 3 generic arguments but 1 generic argument\n //~| ERROR associated type `Output` not found\n {}\n "}, {"sha": "ebaacf0a6982dd15884187800b4cbb84db34d6c0", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this trait takes 3 type arguments but only 1 type argument was supplied\n+error[E0107]: this trait takes 3 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16\n    |\n LL | fn foo(_: &dyn Three())\n-   |                ^^^^^-- supplied 1 type argument\n+   |                ^^^^^-- supplied 1 generic argument\n    |                |\n-   |                expected 3 type arguments\n+   |                expected 3 generic arguments\n    |\n-note: trait defined here, with 3 type parameters: `A`, `B`, `C`\n+note: trait defined here, with 3 generic parameters: `A`, `B`, `C`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:3:7\n    |\n LL | trait Three<A,B,C> { fn dummy(&self) -> (A,B,C); }"}, {"sha": "4465b43a75724ce795facef4e05aecfffa7cde73", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -3,25 +3,25 @@\n trait Zero { fn dummy(&self); }\n \n fn foo1(_: dyn Zero()) {\n-    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n     //~| ERROR associated type `Output` not found for `Zero`\n }\n \n fn foo2(_: dyn Zero<usize>) {\n-    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n }\n \n fn foo3(_: dyn Zero <   usize   >) {\n-    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n }\n \n fn foo4(_: dyn Zero(usize)) {\n-    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n     //~| ERROR associated type `Output` not found for `Zero`\n }\n \n fn foo5(_: dyn Zero (   usize   )) {\n-    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+    //~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n     //~| ERROR associated type `Output` not found for `Zero`\n }\n "}, {"sha": "9601e64c1895b6ecf77fd308287359d13e4d8703", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:16\n    |\n LL | fn foo1(_: dyn Zero()) {\n    |                ^^^^-- help: remove these parenthetical generics\n    |                |\n-   |                expected 0 type arguments\n+   |                expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:3:7\n    |\n LL | trait Zero { fn dummy(&self); }\n@@ -18,43 +18,43 @@ error[E0220]: associated type `Output` not found for `Zero`\n LL | fn foo1(_: dyn Zero()) {\n    |                ^^^^^^ associated type `Output` not found\n \n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:10:16\n    |\n LL | fn foo2(_: dyn Zero<usize>) {\n    |                ^^^^------- help: remove these generics\n    |                |\n-   |                expected 0 type arguments\n+   |                expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:3:7\n    |\n LL | trait Zero { fn dummy(&self); }\n    |       ^^^^\n \n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:14:16\n    |\n LL | fn foo3(_: dyn Zero <   usize   >) {\n    |                ^^^^-------------- help: remove these generics\n    |                |\n-   |                expected 0 type arguments\n+   |                expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:3:7\n    |\n LL | trait Zero { fn dummy(&self); }\n    |       ^^^^\n \n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:18:16\n    |\n LL | fn foo4(_: dyn Zero(usize)) {\n    |                ^^^^------- help: remove these parenthetical generics\n    |                |\n-   |                expected 0 type arguments\n+   |                expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:3:7\n    |\n LL | trait Zero { fn dummy(&self); }\n@@ -66,15 +66,15 @@ error[E0220]: associated type `Output` not found for `Zero`\n LL | fn foo4(_: dyn Zero(usize)) {\n    |                ^^^^^^^^^^^ associated type `Output` not found\n \n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:23:16\n    |\n LL | fn foo5(_: dyn Zero (   usize   )) {\n    |                ^^^^-------------- help: remove these parenthetical generics\n    |                |\n-   |                expected 0 type arguments\n+   |                expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:3:7\n    |\n LL | trait Zero { fn dummy(&self); }"}, {"sha": "4bcf90552f9067ac3f87fc48a950b67231587037", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.rs?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -3,7 +3,7 @@\n trait Trait {}\n \n fn f<F:Trait(isize) -> isize>(x: F) {}\n-//~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+//~^ ERROR this trait takes 0 generic arguments but 1 generic argument\n //~| ERROR associated type `Output` not found for `Trait`\n \n fn main() {}"}, {"sha": "3ff05fb2331ef6e993fa165f018f87cb7c14afb4", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4d9bc66f65fd3d206587c07e33c4877fda073f9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr?ref=e4d9bc66f65fd3d206587c07e33c4877fda073f9", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:8\n    |\n LL | fn f<F:Trait(isize) -> isize>(x: F) {}\n    |        ^^^^^------- help: remove these parenthetical generics\n    |        |\n-   |        expected 0 type arguments\n+   |        expected 0 generic arguments\n    |\n-note: trait defined here, with 0 type parameters\n+note: trait defined here, with 0 generic parameters\n   --> $DIR/unboxed-closure-sugar-wrong-trait.rs:3:7\n    |\n LL | trait Trait {}"}]}