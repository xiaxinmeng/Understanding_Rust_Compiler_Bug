{"sha": "81f391930301afbc121b7c468138069daa354bf8", "node_id": "C_kwDOAAsO6NoAKDgxZjM5MTkzMDMwMWFmYmMxMjFiN2M0NjgxMzgwNjlkYWEzNTRiZjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-09T18:15:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-09T18:15:26Z"}, "message": "Auto merge of #102850 - JohnTitor:rollup-lze1w03, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #101118 (fs::get_mode enable getting the data via fcntl/F_GETFL on major BSD)\n - #102072 (Add `ptr::Alignment` type)\n - #102799 (rustdoc: remove hover gap in file picker)\n - #102820 (Show let-else suggestion on stable.)\n - #102829 (rename `ImplItemKind::TyAlias` to `ImplItemKind::Type`)\n - #102831 (Don't use unnormalized type in `Ty::fn_sig` call in rustdoc `clean_middle_ty`)\n - #102834 (Remove unnecessary `lift`/`lift_to_tcx` calls from rustdoc)\n - #102838 (remove cfg(bootstrap) from Miri)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1a9279048f9ce2976afbc3bf452ee410666c20a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a9279048f9ce2976afbc3bf452ee410666c20a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f391930301afbc121b7c468138069daa354bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f391930301afbc121b7c468138069daa354bf8", "html_url": "https://github.com/rust-lang/rust/commit/81f391930301afbc121b7c468138069daa354bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f391930301afbc121b7c468138069daa354bf8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b225414f325593f974c6b41e671a0a0dc5d7d5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b225414f325593f974c6b41e671a0a0dc5d7d5e", "html_url": "https://github.com/rust-lang/rust/commit/1b225414f325593f974c6b41e671a0a0dc5d7d5e"}, {"sha": "f59e8afb66495b7a6cc2a7f28b71eb367acaf518", "url": "https://api.github.com/repos/rust-lang/rust/commits/f59e8afb66495b7a6cc2a7f28b71eb367acaf518", "html_url": "https://github.com/rust-lang/rust/commit/f59e8afb66495b7a6cc2a7f28b71eb367acaf518"}], "stats": {"total": 336, "additions": 212, "deletions": 124}, "files": [{"sha": "347e735fadfbd2a9b443177affe08c7e698dace4", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -908,11 +908,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     |this| match ty {\n                         None => {\n                             let ty = this.arena.alloc(this.ty(i.span, hir::TyKind::Err));\n-                            hir::ImplItemKind::TyAlias(ty)\n+                            hir::ImplItemKind::Type(ty)\n                         }\n                         Some(ty) => {\n                             let ty = this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy);\n-                            hir::ImplItemKind::TyAlias(ty)\n+                            hir::ImplItemKind::Type(ty)\n                         }\n                     },\n                 )"}, {"sha": "098f9d5154976ffb68c2a0e8a94df42f8eb08598", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -2315,7 +2315,7 @@ pub enum ImplItemKind<'hir> {\n     /// An associated function implementation with the given signature and body.\n     Fn(FnSig<'hir>, BodyId),\n     /// An associated type.\n-    TyAlias(&'hir Ty<'hir>),\n+    Type(&'hir Ty<'hir>),\n }\n \n // The name of the associated type for `Fn` return types."}, {"sha": "f3bde099b134fd0b475ea7f2dfb41a18191b6e30", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -979,7 +979,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n                 impl_item.hir_id(),\n             );\n         }\n-        ImplItemKind::TyAlias(ref ty) => {\n+        ImplItemKind::Type(ref ty) => {\n             visitor.visit_id(impl_item.hir_id());\n             visitor.visit_ty(ty);\n         }"}, {"sha": "c92d8dfb6027180cb105f0808063b14c3bb576a0", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -1062,7 +1062,7 @@ fn check_impl_items_against_trait<'tcx>(\n                     opt_trait_span,\n                 );\n             }\n-            hir::ImplItemKind::TyAlias(impl_ty) => {\n+            hir::ImplItemKind::Type(impl_ty) => {\n                 let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n                 compare_ty_impl(\n                     tcx,"}, {"sha": "0bd45bb1c915318201998b76388e2f20da6e0c87", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -837,7 +837,7 @@ fn check_impl_item(tcx: TyCtxt<'_>, impl_item: &hir::ImplItem<'_>) {\n     let (method_sig, span) = match impl_item.kind {\n         hir::ImplItemKind::Fn(ref sig, _) => (Some(sig), impl_item.span),\n         // Constrain binding and overflow error spans to `<Ty>` in `type foo = <Ty>`.\n-        hir::ImplItemKind::TyAlias(ty) if ty.span != DUMMY_SP => (None, ty.span),\n+        hir::ImplItemKind::Type(ty) if ty.span != DUMMY_SP => (None, ty.span),\n         _ => (None, impl_item.span),\n     };\n "}, {"sha": "6976c5a0edbddbe57e15438106800ef2319a5a94", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -738,7 +738,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::ImplItemId) {\n         hir::ImplItemKind::Fn(..) => {\n             tcx.ensure().fn_sig(def_id);\n         }\n-        hir::ImplItemKind::TyAlias(_) => {\n+        hir::ImplItemKind::Type(_) => {\n             // Account for `type T = _;`\n             let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_impl_item(impl_item);"}, {"sha": "707fd6c75278d0f74887ef82bcdfd3dcb45bfa82", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -213,7 +213,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         Node::TraitItem(item) if matches!(item.kind, TraitItemKind::Type(..)) => {\n             (None, Defaults::Deny)\n         }\n-        Node::ImplItem(item) if matches!(item.kind, ImplItemKind::TyAlias(..)) => {\n+        Node::ImplItem(item) if matches!(item.kind, ImplItemKind::Type(..)) => {\n             (None, Defaults::Deny)\n         }\n "}, {"sha": "1b7ed60929d00b48fc390b5682fbe7af8e7abfe0", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -284,7 +284,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     icx.to_ty(ty)\n                 }\n             }\n-            ImplItemKind::TyAlias(ty) => {\n+            ImplItemKind::Type(ty) => {\n                 if tcx.impl_trait_ref(tcx.hir().get_parent_item(hir_id)).is_none() {\n                     check_feature_inherent_assoc_ty(tcx, item.span);\n                 }"}, {"sha": "b0fdfcf38a6083d74c063dfaa16cc61c105d59f3", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -117,7 +117,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n     let ty = match loc {\n         WellFormedLoc::Ty(_) => match hir.get(hir_id) {\n             hir::Node::ImplItem(item) => match item.kind {\n-                hir::ImplItemKind::TyAlias(ty) => Some(ty),\n+                hir::ImplItemKind::Type(ty) => Some(ty),\n                 hir::ImplItemKind::Const(ty, _) => Some(ty),\n                 ref item => bug!(\"Unexpected ImplItem {:?}\", item),\n             },"}, {"sha": "729139adc2de822f6a283e8bf8101f6a43cc0b25", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -887,7 +887,7 @@ impl<'a> State<'a> {\n                 self.end(); // need to close a box\n                 self.ann.nested(self, Nested::Body(body));\n             }\n-            hir::ImplItemKind::TyAlias(ty) => {\n+            hir::ImplItemKind::Type(ty) => {\n                 self.print_associated_type(ii.ident, ii.generics, None, Some(ty));\n             }\n         }"}, {"sha": "9c19f16a496bfaa0966cf90f47117c3e2e12ef1f", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -302,7 +302,7 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n             HirNode::ImplItem(item) => match item.kind {\n                 ImplItemKind::Fn(..) => (\"Node::ImplItem\", LABELS_FN_IN_IMPL),\n                 ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_IN_IMPL),\n-                ImplItemKind::TyAlias(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n+                ImplItemKind::Type(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n             },\n             _ => self.tcx.sess.span_fatal(\n                 attr.span,"}, {"sha": "ddeeaa9618e606524033bebf51bf3da7a14288a1", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -2598,7 +2598,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             for h in self.tcx.hir().parent_iter(param.hir_id) {\n                                 break 'origin match h.1 {\n                                     Node::ImplItem(hir::ImplItem {\n-                                        kind: hir::ImplItemKind::TyAlias(..),\n+                                        kind: hir::ImplItemKind::Type(..),\n                                         generics,\n                                         ..\n                                     })"}, {"sha": "302f12a6f7d440b54126c95f673002072e0f04a5", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -241,7 +241,7 @@ impl<'hir> Map<'hir> {\n             Node::ImplItem(item) => match item.kind {\n                 ImplItemKind::Const(..) => DefKind::AssocConst,\n                 ImplItemKind::Fn(..) => DefKind::AssocFn,\n-                ImplItemKind::TyAlias(..) => DefKind::AssocTy,\n+                ImplItemKind::Type(..) => DefKind::AssocTy,\n             },\n             Node::Variant(_) => DefKind::Variant,\n             Node::Ctor(variant_data) => {\n@@ -1244,7 +1244,7 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 format!(\"assoc const {} in {}{}\", ii.ident, path_str(), id_str)\n             }\n             ImplItemKind::Fn(..) => format!(\"method {} in {}{}\", ii.ident, path_str(), id_str),\n-            ImplItemKind::TyAlias(_) => {\n+            ImplItemKind::Type(_) => {\n                 format!(\"assoc type {} in {}{}\", ii.ident, path_str(), id_str)\n             }\n         },"}, {"sha": "ec709a1db513e0ef43277aeea699bb552feb45cf", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -491,7 +491,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                     ],\n                     Applicability::HasPlaceholders,\n                 );\n-                if !bindings.is_empty() && cx.tcx.sess.is_nightly_build() {\n+                if !bindings.is_empty() {\n                     err.span_suggestion_verbose(\n                         semi_span.shrink_to_lo(),\n                         &format!("}, {"sha": "5455d063c13a97151da8e7b829eea2566ba090c6", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -49,7 +49,7 @@ pub(crate) fn target_from_impl_item<'tcx>(\n                 Target::Method(MethodKind::Inherent)\n             }\n         }\n-        hir::ImplItemKind::TyAlias(..) => Target::AssocTy,\n+        hir::ImplItemKind::Type(..) => Target::AssocTy,\n     }\n }\n "}, {"sha": "b413d78b38df9522c553ea7b400972135f0206f3", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -391,7 +391,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem<'v>) {\n         record_variants!(\n             (self, ii, ii.kind, Id::Node(ii.hir_id()), hir, ImplItem, ImplItemKind),\n-            [Const, Fn, TyAlias]\n+            [Const, Fn, Type]\n         );\n         hir_visit::walk_impl_item(self, ii)\n     }"}, {"sha": "0f2879c1eff2b249d5490da1b197d6a401834228", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                     let impl_did = self.tcx.hir().get_parent_item(hir_id);\n                     method_might_be_inlined(self.tcx, impl_item, impl_did.def_id)\n                 }\n-                hir::ImplItemKind::TyAlias(_) => false,\n+                hir::ImplItemKind::Type(_) => false,\n             },\n             Some(_) => false,\n             None => false, // This will happen for default methods.\n@@ -271,7 +271,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                         self.visit_nested_body(body)\n                     }\n                 }\n-                hir::ImplItemKind::TyAlias(_) => {}\n+                hir::ImplItemKind::Type(_) => {}\n             },\n             Node::Expr(&hir::Expr {\n                 kind: hir::ExprKind::Closure(&hir::Closure { body, .. }),"}, {"sha": "0983c3148f2ffae01f2fee24cf719d467ee19c1a", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -1574,7 +1574,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                             hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {\n                                 self.access_levels.is_reachable(impl_item_ref.id.def_id.def_id)\n                             }\n-                            hir::ImplItemKind::TyAlias(_) => false,\n+                            hir::ImplItemKind::Type(_) => false,\n                         }\n                     });\n \n@@ -1596,7 +1596,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                     {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }\n-                                    hir::ImplItemKind::TyAlias(..) => {\n+                                    hir::ImplItemKind::Type(..) => {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }\n                                     _ => {}\n@@ -1622,7 +1622,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                             // Those in 3. are warned with this call.\n                             for impl_item_ref in impl_.items {\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n-                                if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {\n+                                if let hir::ImplItemKind::Type(ty) = impl_item.kind {\n                                     self.visit_ty(ty);\n                                 }\n                             }"}, {"sha": "8fa6160d4367f17c765879646461f7f191b7b4e1", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -898,7 +898,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             Fn(..) => self.visit_early_late(impl_item.hir_id(), &impl_item.generics, |this| {\n                 intravisit::walk_impl_item(this, impl_item)\n             }),\n-            TyAlias(ref ty) => {\n+            Type(ref ty) => {\n                 let generics = &impl_item.generics;\n                 let lifetimes: FxIndexMap<LocalDefId, Region> = generics\n                     .params"}, {"sha": "23d06d8e5163b92e14534d6dd8300a48a3a4feb7", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -1069,7 +1069,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     impl_item.span,\n                 );\n             }\n-            hir::ImplItemKind::TyAlias(ref ty) => {\n+            hir::ImplItemKind::Type(ref ty) => {\n                 // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait."}, {"sha": "490b0e863225d5cb299cd98a26d1c75c8212bc34", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -1659,7 +1659,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 ..\n                             })\n                             | hir::Node::ImplItem(hir::ImplItem {\n-                                kind: hir::ImplItemKind::TyAlias(ty),\n+                                kind: hir::ImplItemKind::Type(ty),\n                                 ..\n                             }),\n                         ) => Some((ty.span, format!(\"type mismatch resolving `{}`\", predicate))),"}, {"sha": "635cdde0e8eec8f03ea7604189b96b957a95bef0", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -224,7 +224,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n     };\n     let fix_span =\n         |impl_item_ref: &hir::ImplItemRef| match tcx.hir().impl_item(impl_item_ref.id).kind {\n-            hir::ImplItemKind::Const(ty, _) | hir::ImplItemKind::TyAlias(ty) => ty.span,\n+            hir::ImplItemKind::Const(ty, _) | hir::ImplItemKind::Type(ty) => ty.span,\n             _ => impl_item_ref.span,\n         };\n "}, {"sha": "30efbf66175989fb52f411ca54f5c746b91695a5", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -161,7 +161,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n             }) => hir::Constness::Const,\n \n             hir::Node::ImplItem(hir::ImplItem {\n-                kind: hir::ImplItemKind::TyAlias(..) | hir::ImplItemKind::Fn(..),\n+                kind: hir::ImplItemKind::Type(..) | hir::ImplItemKind::Fn(..),\n                 ..\n             }) => {\n                 let parent_hir_id = tcx.hir().get_parent_node(hir_id);"}, {"sha": "920e559cc4aa39e8d7eafed71a225b94b657e588", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -64,6 +64,7 @@ impl Layout {\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[rustc_const_stable(feature = \"const_alloc_layout_size_align\", since = \"1.50.0\")]\n     #[inline]\n+    #[rustc_allow_const_fn_unstable(ptr_alignment_type)]\n     pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {\n         if !align.is_power_of_two() {\n             return Err(LayoutError);\n@@ -113,6 +114,7 @@ impl Layout {\n     #[rustc_const_stable(feature = \"const_alloc_layout_unchecked\", since = \"1.36.0\")]\n     #[must_use]\n     #[inline]\n+    #[rustc_allow_const_fn_unstable(ptr_alignment_type)]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         // SAFETY: the caller is required to uphold the preconditions.\n         unsafe { Layout { size, align: ValidAlign::new_unchecked(align) } }\n@@ -133,6 +135,7 @@ impl Layout {\n     #[must_use = \"this returns the minimum alignment, \\\n                   without modifying the layout\"]\n     #[inline]\n+    #[rustc_allow_const_fn_unstable(ptr_alignment_type)]\n     pub const fn align(&self) -> usize {\n         self.align.as_usize()\n     }"}, {"sha": "7d893ca4aa16a54996ba86b0ff87094fce7eb074", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -152,6 +152,7 @@\n #![feature(core_panic)]\n #![feature(duration_consts_float)]\n #![feature(maybe_uninit_uninit_array)]\n+#![feature(ptr_alignment_type)]\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]\n #![feature(slice_split_at_unchecked)]"}, {"sha": "1a78efaf4ffad51778fd97238be30c8ad223ca54", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -21,11 +21,10 @@ mod maybe_uninit;\n #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n pub use maybe_uninit::MaybeUninit;\n \n-mod valid_align;\n-// For now this type is left crate-local.  It could potentially make sense to expose\n-// it publicly, as it would be a nice parameter type for methods which need to take\n-// alignment as a parameter, such as `Layout::padding_needed_for`.\n-pub(crate) use valid_align::ValidAlign;\n+// FIXME: This is left here for now to avoid complications around pending reverts.\n+// Once <https://github.com/rust-lang/rust/issues/101899> is fully resolved,\n+// this should be removed and the references in `alloc::Layout` updated.\n+pub(crate) use ptr::Alignment as ValidAlign;\n \n mod transmutability;\n #[unstable(feature = \"transmutability\", issue = \"99571\")]"}, {"sha": "bdebf8baabe489c2ba834e11b7ca874c3eac4871", "filename": "library/core/src/ptr/alignment.rs", "status": "renamed", "additions": 103, "deletions": 59, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -1,4 +1,4 @@\n-use crate::convert::TryFrom;\n+use crate::convert::{TryFrom, TryInto};\n use crate::intrinsics::assert_unsafe_precondition;\n use crate::num::NonZeroUsize;\n use crate::{cmp, fmt, hash, mem, num};\n@@ -8,134 +8,178 @@ use crate::{cmp, fmt, hash, mem, num};\n ///\n /// Note that particularly large alignments, while representable in this type,\n /// are likely not to be supported by actual allocators and linkers.\n-#[derive(Copy, Clone)]\n+#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n #[repr(transparent)]\n-pub(crate) struct ValidAlign(ValidAlignEnum);\n+pub struct Alignment(AlignmentEnum);\n \n-// ValidAlign is `repr(usize)`, but via extra steps.\n-const _: () = assert!(mem::size_of::<ValidAlign>() == mem::size_of::<usize>());\n-const _: () = assert!(mem::align_of::<ValidAlign>() == mem::align_of::<usize>());\n+// Alignment is `repr(usize)`, but via extra steps.\n+const _: () = assert!(mem::size_of::<Alignment>() == mem::size_of::<usize>());\n+const _: () = assert!(mem::align_of::<Alignment>() == mem::align_of::<usize>());\n \n-impl ValidAlign {\n-    /// Creates a `ValidAlign` from a power-of-two `usize`.\n+fn _alignment_can_be_structurally_matched(a: Alignment) -> bool {\n+    matches!(a, Alignment::MIN)\n+}\n+\n+impl Alignment {\n+    /// The smallest possible alignment, 1.\n+    ///\n+    /// All addresses are always aligned at least this much.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_alignment_type)]\n+    /// use std::ptr::Alignment;\n+    ///\n+    /// assert_eq!(Alignment::MIN.as_usize(), 1);\n+    /// ```\n+    #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+    pub const MIN: Self = Self(AlignmentEnum::_Align1Shl0);\n+\n+    /// Returns the alignment for a type.\n+    ///\n+    /// This provides the same numerical value as [`mem::align_of`],\n+    /// but in an `Alignment` instead of a `usize.\n+    #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+    #[inline]\n+    pub const fn of<T>() -> Self {\n+        // SAFETY: rustc ensures that type alignment is always a power of two.\n+        unsafe { Alignment::new_unchecked(mem::align_of::<T>()) }\n+    }\n+\n+    /// Creates an `Alignment` from a `usize`, or returns `None` if it's\n+    /// not a power of two.\n+    ///\n+    /// Note that `0` is not a power of two, nor a valid alignment.\n+    #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+    #[inline]\n+    pub const fn new(align: usize) -> Option<Self> {\n+        if align.is_power_of_two() {\n+            // SAFETY: Just checked it only has one bit set\n+            Some(unsafe { Self::new_unchecked(align) })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Creates an `Alignment` from a power-of-two `usize`.\n     ///\n     /// # Safety\n     ///\n     /// `align` must be a power of two.\n     ///\n     /// Equivalently, it must be `1 << exp` for some `exp` in `0..usize::BITS`.\n     /// It must *not* be zero.\n+    #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+    #[rustc_const_unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n     #[inline]\n-    pub(crate) const unsafe fn new_unchecked(align: usize) -> Self {\n+    pub const unsafe fn new_unchecked(align: usize) -> Self {\n         // SAFETY: Precondition passed to the caller.\n         unsafe { assert_unsafe_precondition!((align: usize) => align.is_power_of_two()) };\n \n         // SAFETY: By precondition, this must be a power of two, and\n         // our variants encompass all possible powers of two.\n-        unsafe { mem::transmute::<usize, ValidAlign>(align) }\n+        unsafe { mem::transmute::<usize, Alignment>(align) }\n     }\n \n+    /// Returns the alignment as a [`NonZeroUsize`]\n+    #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+    #[rustc_const_unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n     #[inline]\n-    pub(crate) const fn as_usize(self) -> usize {\n+    pub const fn as_usize(self) -> usize {\n         self.0 as usize\n     }\n \n+    /// Returns the alignment as a [`usize`]\n+    #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n     #[inline]\n-    pub(crate) const fn as_nonzero(self) -> NonZeroUsize {\n+    pub const fn as_nonzero(self) -> NonZeroUsize {\n         // SAFETY: All the discriminants are non-zero.\n         unsafe { NonZeroUsize::new_unchecked(self.as_usize()) }\n     }\n \n-    /// Returns the base 2 logarithm of the alignment.\n+    /// Returns the base-2 logarithm of the alignment.\n     ///\n     /// This is always exact, as `self` represents a power of two.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_alignment_type)]\n+    /// use std::ptr::Alignment;\n+    ///\n+    /// assert_eq!(Alignment::of::<u8>().log2(), 0);\n+    /// assert_eq!(Alignment::new(1024).unwrap().log2(), 10);\n+    /// ```\n+    #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n     #[inline]\n-    pub(crate) fn log2(self) -> u32 {\n+    pub fn log2(self) -> u32 {\n         self.as_nonzero().trailing_zeros()\n     }\n-\n-    /// Returns the alignment for a type.\n-    #[inline]\n-    pub(crate) fn of<T>() -> Self {\n-        // SAFETY: rustc ensures that type alignment is always a power of two.\n-        unsafe { ValidAlign::new_unchecked(mem::align_of::<T>()) }\n-    }\n }\n \n-impl fmt::Debug for ValidAlign {\n+#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+impl fmt::Debug for Alignment {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?} (1 << {:?})\", self.as_nonzero(), self.log2())\n     }\n }\n \n-impl TryFrom<NonZeroUsize> for ValidAlign {\n+#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+impl TryFrom<NonZeroUsize> for Alignment {\n     type Error = num::TryFromIntError;\n \n     #[inline]\n-    fn try_from(align: NonZeroUsize) -> Result<ValidAlign, Self::Error> {\n-        if align.is_power_of_two() {\n-            // SAFETY: Just checked for power-of-two\n-            unsafe { Ok(ValidAlign::new_unchecked(align.get())) }\n-        } else {\n-            Err(num::TryFromIntError(()))\n-        }\n+    fn try_from(align: NonZeroUsize) -> Result<Alignment, Self::Error> {\n+        align.get().try_into()\n     }\n }\n \n-impl TryFrom<usize> for ValidAlign {\n+#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+impl TryFrom<usize> for Alignment {\n     type Error = num::TryFromIntError;\n \n     #[inline]\n-    fn try_from(align: usize) -> Result<ValidAlign, Self::Error> {\n-        if align.is_power_of_two() {\n-            // SAFETY: Just checked for power-of-two\n-            unsafe { Ok(ValidAlign::new_unchecked(align)) }\n-        } else {\n-            Err(num::TryFromIntError(()))\n-        }\n-    }\n-}\n-\n-impl cmp::Eq for ValidAlign {}\n-\n-impl cmp::PartialEq for ValidAlign {\n-    #[inline]\n-    fn eq(&self, other: &Self) -> bool {\n-        self.as_nonzero() == other.as_nonzero()\n+    fn try_from(align: usize) -> Result<Alignment, Self::Error> {\n+        Self::new(align).ok_or(num::TryFromIntError(()))\n     }\n }\n \n-impl cmp::Ord for ValidAlign {\n+#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+impl cmp::Ord for Alignment {\n     #[inline]\n     fn cmp(&self, other: &Self) -> cmp::Ordering {\n         self.as_nonzero().cmp(&other.as_nonzero())\n     }\n }\n \n-impl cmp::PartialOrd for ValidAlign {\n+#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+impl cmp::PartialOrd for Alignment {\n     #[inline]\n     fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {\n         Some(self.cmp(other))\n     }\n }\n \n-impl hash::Hash for ValidAlign {\n+#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+impl hash::Hash for Alignment {\n     #[inline]\n     fn hash<H: hash::Hasher>(&self, state: &mut H) {\n         self.as_nonzero().hash(state)\n     }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n-type ValidAlignEnum = ValidAlignEnum16;\n+type AlignmentEnum = AlignmentEnum16;\n #[cfg(target_pointer_width = \"32\")]\n-type ValidAlignEnum = ValidAlignEnum32;\n+type AlignmentEnum = AlignmentEnum32;\n #[cfg(target_pointer_width = \"64\")]\n-type ValidAlignEnum = ValidAlignEnum64;\n+type AlignmentEnum = AlignmentEnum64;\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n #[repr(u16)]\n-enum ValidAlignEnum16 {\n+enum AlignmentEnum16 {\n     _Align1Shl0 = 1 << 0,\n     _Align1Shl1 = 1 << 1,\n     _Align1Shl2 = 1 << 2,\n@@ -154,9 +198,9 @@ enum ValidAlignEnum16 {\n     _Align1Shl15 = 1 << 15,\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n #[repr(u32)]\n-enum ValidAlignEnum32 {\n+enum AlignmentEnum32 {\n     _Align1Shl0 = 1 << 0,\n     _Align1Shl1 = 1 << 1,\n     _Align1Shl2 = 1 << 2,\n@@ -191,9 +235,9 @@ enum ValidAlignEnum32 {\n     _Align1Shl31 = 1 << 31,\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n #[repr(u64)]\n-enum ValidAlignEnum64 {\n+enum AlignmentEnum64 {\n     _Align1Shl0 = 1 << 0,\n     _Align1Shl1 = 1 << 1,\n     _Align1Shl2 = 1 << 2,", "previous_filename": "library/core/src/mem/valid_align.rs"}, {"sha": "1f7cf6e5d052ca6f1e33b1f5a0580f811f4bcd4e", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -377,6 +377,10 @@ use crate::intrinsics::{\n \n use crate::mem::{self, MaybeUninit};\n \n+mod alignment;\n+#[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n+pub use alignment::Alignment;\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(inline)]\n pub use crate::intrinsics::copy_nonoverlapping;"}, {"sha": "7bb4b0a9c790832a1db7b5b289eec81ae356430c", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -1234,7 +1234,14 @@ impl fmt::Debug for File {\n             None\n         }\n \n-        #[cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"vxworks\"))]\n+        #[cfg(any(\n+            target_os = \"linux\",\n+            target_os = \"macos\",\n+            target_os = \"freebsd\",\n+            target_os = \"netbsd\",\n+            target_os = \"openbsd\",\n+            target_os = \"vxworks\"\n+        ))]\n         fn get_mode(fd: c_int) -> Option<(bool, bool)> {\n             let mode = unsafe { libc::fcntl(fd, libc::F_GETFL) };\n             if mode == -1 {\n@@ -1248,7 +1255,14 @@ impl fmt::Debug for File {\n             }\n         }\n \n-        #[cfg(not(any(target_os = \"linux\", target_os = \"macos\", target_os = \"vxworks\")))]\n+        #[cfg(not(any(\n+            target_os = \"linux\",\n+            target_os = \"macos\",\n+            target_os = \"freebsd\",\n+            target_os = \"netbsd\",\n+            target_os = \"openbsd\",\n+            target_os = \"vxworks\"\n+        )))]\n         fn get_mode(_fd: c_int) -> Option<(bool, bool)> {\n             // FIXME(#24570): implement this for other Unix platforms\n             None"}, {"sha": "432d318907fa0669805c3043b353e8780cc1ec9f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -410,7 +410,7 @@ pub(crate) fn build_impl(\n                         let assoc_kind = match item.kind {\n                             hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n                             hir::ImplItemKind::Fn(..) => ty::AssocKind::Fn,\n-                            hir::ImplItemKind::TyAlias(..) => ty::AssocKind::Type,\n+                            hir::ImplItemKind::Type(..) => ty::AssocKind::Type,\n                         };\n                         let trait_item = tcx\n                             .associated_items(associated_trait.def_id)"}, {"sha": "8d556a962d9f56a508f88be67bb3ac1c6b288b7c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -22,7 +22,7 @@ use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::InternalSubsts;\n-use rustc_middle::ty::{self, AdtKind, DefIdTree, EarlyBinder, Lift, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, DefIdTree, EarlyBinder, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -176,8 +176,6 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n     poly_trait_ref: ty::PolyTraitRef<'tcx>,\n     bindings: ThinVec<TypeBinding>,\n ) -> GenericBound {\n-    let poly_trait_ref = poly_trait_ref.lift_to_tcx(cx.tcx).unwrap();\n-\n     // collect any late bound regions\n     let late_bound_regions: Vec<_> = cx\n         .tcx\n@@ -417,8 +415,7 @@ fn clean_projection<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n-    let trait_ = clean_trait_ref_with_bindings(cx, lifted.trait_ref(cx.tcx), ThinVec::new());\n+    let trait_ = clean_trait_ref_with_bindings(cx, ty.trait_ref(cx.tcx), ThinVec::new());\n     let self_type = clean_middle_ty(ty.self_ty(), cx, None);\n     let self_def_id = if let Some(def_id) = def_id {\n         cx.tcx.opt_parent(def_id).or(Some(def_id))\n@@ -1094,7 +1091,7 @@ pub(crate) fn clean_impl_item<'tcx>(\n                 let defaultness = cx.tcx.impl_defaultness(impl_.def_id);\n                 MethodItem(m, Some(defaultness))\n             }\n-            hir::ImplItemKind::TyAlias(hir_ty) => {\n+            hir::ImplItemKind::Type(hir_ty) => {\n                 let type_ = clean_ty(hir_ty, cx);\n                 let generics = clean_generics(impl_.generics, cx);\n                 let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, hir_ty), cx, None);\n@@ -1552,7 +1549,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n }\n \n /// Returns `None` if the type could not be normalized\n-fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n+fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     // HACK: low-churn fix for #79459 while we wait for a trait normalization fix\n     if !cx.tcx.sess.opts.unstable_opts.normalize_docs {\n         return None;\n@@ -1563,11 +1560,10 @@ fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n     use rustc_middle::traits::ObligationCause;\n \n     // Try to normalize `<X as Y>::T` to a type\n-    let lifted = ty.lift_to_tcx(cx.tcx).unwrap();\n     let infcx = cx.tcx.infer_ctxt().build();\n     let normalized = infcx\n         .at(&ObligationCause::dummy(), cx.param_env)\n-        .normalize(lifted)\n+        .normalize(ty)\n         .map(|resolved| infcx.resolve_vars_if_possible(resolved.value));\n     match normalized {\n         Ok(normalized_value) => {\n@@ -1582,12 +1578,12 @@ fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n }\n \n pub(crate) fn clean_middle_ty<'tcx>(\n-    this: Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    trace!(\"cleaning type: {:?}\", this);\n-    let ty = normalize(cx, this).unwrap_or(this);\n+    trace!(\"cleaning type: {:?}\", ty);\n+    let ty = normalize(cx, ty).unwrap_or(ty);\n     match *ty.kind() {\n         ty::Never => Primitive(PrimitiveType::Never),\n         ty::Bool => Primitive(PrimitiveType::Bool),\n@@ -1597,8 +1593,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Float(float_ty) => Primitive(float_ty.into()),\n         ty::Str => Primitive(PrimitiveType::Str),\n         ty::Slice(ty) => Slice(Box::new(clean_middle_ty(ty, cx, None))),\n-        ty::Array(ty, n) => {\n-            let mut n = cx.tcx.lift(n).expect(\"array lift failed\");\n+        ty::Array(ty, mut n) => {\n             n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n             let n = print_const(cx, n);\n             Array(Box::new(clean_middle_ty(ty, cx, None)), n)\n@@ -1610,7 +1605,6 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             type_: Box::new(clean_middle_ty(ty, cx, None)),\n         },\n         ty::FnDef(..) | ty::FnPtr(_) => {\n-            let ty = cx.tcx.lift(this).expect(\"FnPtr lift failed\");\n             let sig = ty.fn_sig(cx.tcx);\n             let decl = clean_fn_decl_from_did_and_sig(cx, None, sig);\n             BareFunction(Box::new(BareFunctionDecl {\n@@ -1644,7 +1638,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             let did = obj\n                 .principal_def_id()\n                 .or_else(|| dids.next())\n-                .unwrap_or_else(|| panic!(\"found trait object `{:?}` with no traits?\", this));\n+                .unwrap_or_else(|| panic!(\"found trait object `{:?}` with no traits?\", ty));\n             let substs = match obj.principal() {\n                 Some(principal) => principal.skip_binder().substs,\n                 // marker traits have no substs.\n@@ -1668,8 +1662,6 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                 .map(|pb| TypeBinding {\n                     assoc: projection_to_path_segment(\n                         pb.skip_binder()\n-                            .lift_to_tcx(cx.tcx)\n-                            .unwrap()\n                             // HACK(compiler-errors): Doesn't actually matter what self\n                             // type we put here, because we're only using the GAT's substs.\n                             .with_self_ty(cx.tcx, cx.tcx.types.self_param)\n@@ -1702,7 +1694,6 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Opaque(def_id, substs) => {\n             // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n             // by looking up the bounds associated with the def_id.\n-            let substs = cx.tcx.lift(substs).expect(\"Opaque lift failed\");\n             let bounds = cx\n                 .tcx\n                 .explicit_item_bounds(def_id)"}, {"sha": "4572a712258abf582b8fe7a1c76b0c0282b8e074", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -304,9 +304,9 @@ fn format_integer_with_underscore_sep(num: &str) -> String {\n         .collect()\n }\n \n-fn print_const_with_custom_print_scalar(\n-    tcx: TyCtxt<'_>,\n-    ct: mir::ConstantKind<'_>,\n+fn print_const_with_custom_print_scalar<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ct: mir::ConstantKind<'tcx>,\n     underscores_and_type: bool,\n ) -> String {\n     // Use a slightly different format for integer types which always shows the actual value.\n@@ -320,7 +320,7 @@ fn print_const_with_custom_print_scalar(\n             }\n         }\n         (mir::ConstantKind::Val(ConstValue::Scalar(int), _), ty::Int(i)) => {\n-            let ty = tcx.lift(ct.ty()).unwrap();\n+            let ty = ct.ty();\n             let size = tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size;\n             let data = int.assert_bits(size);\n             let sign_extended_data = size.sign_extend(data) as i128;"}, {"sha": "eb64147d906778e4e97d55c8f4040a056fb3e7ff", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -1494,10 +1494,31 @@ details.dir-entry {\n \tpadding-left: 4px;\n }\n \n+details.dir-entry > summary::after {\n+\tcontent: \" \u25ba\";\n+\tposition: absolute;\n+\tleft: -15px;\n+\ttop: 0px;\n+\tfont-size: 80%;\n+\tpadding: 2px 0px;\n+\t/* set width to cover gap between arrow and text */\n+\twidth: 25px;\n+}\n+\n+details[open].dir-entry > summary::after {\n+\tcontent: \" \u25bc\";\n+}\n+\n+details.dir-entry > summary::-webkit-details-marker,\n+details.dir-entry > summary::marker {\n+\tdisplay: none;\n+}\n+\n details.dir-entry > summary {\n \tmargin: 0 0 0 13px;\n-\tlist-style-position: outside;\n+\tlist-style: none;\n \tcursor: pointer;\n+\tposition: relative;\n }\n \n details.dir-entry div.folders, details.dir-entry div.files {"}, {"sha": "db56f68526b3fdce61f5120aea93a29dbc88531c", "filename": "src/test/rustdoc/normalize-assoc-item.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/src%2Ftest%2Frustdoc%2Fnormalize-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/src%2Ftest%2Frustdoc%2Fnormalize-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnormalize-assoc-item.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -11,11 +11,24 @@ impl Trait for usize {\n     type X = isize;\n }\n \n+impl Trait for () {\n+    type X = fn() -> i32;\n+}\n+\n+impl Trait for isize {\n+    type X = <() as Trait>::X;\n+}\n+\n // @has 'normalize_assoc_item/fn.f.html' '//pre[@class=\"rust fn\"]' 'pub fn f() -> isize'\n pub fn f() -> <usize as Trait>::X {\n     0\n }\n \n+// @has 'normalize_assoc_item/fn.f2.html' '//pre[@class=\"rust fn\"]' 'pub fn f2() -> fn() -> i32'\n+pub fn f2() -> <isize as Trait>::X {\n+    todo!()\n+}\n+\n pub struct S {\n     // @has 'normalize_assoc_item/struct.S.html' '//span[@id=\"structfield.box_me_up\"]' 'box_me_up: Box<S, Global>'\n     pub box_me_up: <S as Trait>::X,"}, {"sha": "01c87f058adea16f0d2b3333f62f890deeffdda8", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n \n         let desc = match impl_item.kind {\n             hir::ImplItemKind::Fn(..) => \"a method\",\n-            hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(_) => return,\n+            hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(_) => return,\n         };\n \n         let assoc_item = cx.tcx.associated_item(impl_item.def_id);"}, {"sha": "a06d1fffd8bdf88c5a36afc4647303c7a3f201f2", "filename": "src/tools/clippy/clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -374,7 +374,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n             // Methods are covered by check_fn.\n             // Type aliases are ignored because oftentimes it's impossible to\n             // make type alias declaration in trait simpler, see #1013\n-            ImplItemKind::Fn(..) | ImplItemKind::TyAlias(..) => (),\n+            ImplItemKind::Fn(..) | ImplItemKind::Type(..) => (),\n         }\n     }\n "}, {"sha": "c6bf98b7b8bbd35fbf2b1c12994d94e2a7de6b59", "filename": "src/tools/clippy/clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -220,7 +220,7 @@ fn trait_item_search_pat(item: &TraitItem<'_>) -> (Pat, Pat) {\n fn impl_item_search_pat(item: &ImplItem<'_>) -> (Pat, Pat) {\n     let (start_pat, end_pat) = match &item.kind {\n         ImplItemKind::Const(..) => (Pat::Str(\"const\"), Pat::Str(\";\")),\n-        ImplItemKind::TyAlias(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n+        ImplItemKind::Type(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n         ImplItemKind::Fn(sig, ..) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n     };\n     if item.vis_span.is_empty() {"}, {"sha": "9b5fa7ae8736e2079b90850b8a3569e2e33f4816", "filename": "src/tools/miri/cargo-miri/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fmain.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -1,4 +1,3 @@\n-#![cfg_attr(bootstrap, feature(let_else))]\n #![allow(clippy::useless_format, clippy::derive_partial_eq_without_eq, rustc::internal)]\n \n #[macro_use]"}, {"sha": "e21dca7adc1b442289c73f7d34685695986ac53f", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81f391930301afbc121b7c468138069daa354bf8/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f391930301afbc121b7c468138069daa354bf8/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=81f391930301afbc121b7c468138069daa354bf8", "patch": "@@ -10,7 +10,6 @@\n #![feature(is_some_and)]\n #![feature(nonzero_ops)]\n #![feature(local_key_cell_methods)]\n-#![cfg_attr(bootstrap, feature(let_else))]\n // Configure clippy and other lints\n #![allow(\n     clippy::collapsible_else_if,"}]}