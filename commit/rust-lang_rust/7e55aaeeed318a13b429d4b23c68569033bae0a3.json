{"sha": "7e55aaeeed318a13b429d4b23c68569033bae0a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNTVhYWVlZWQzMThhMTNiNDI5ZDRiMjNjNjg1NjkwMzNiYWUwYTM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-10T15:54:57Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-10T15:54:57Z"}, "message": "Merge #120\n\n120: Cleanup grammar generation r=matklad a=ReinierMaas\n\nhttps://github.com/rust-analyzer/rust-analyzer/blob/31c8ebb743572ef07ac4ca77ddd17eddbcf4b24c/crates/ra_syntax/src/ast/generated.rs#L207-L210\r\nNeeded an additional newline before the `pub fn`.\r\n\r\nRemoving `-` for #114.\r\nRunnning `cargo gen-kinds` to update grammar.\n\nCo-authored-by: Reinier Maas <reiniermaas@users.noreply.github.com>\nCo-authored-by: Reinier Maas <reiniermaas@hotmail.com>", "tree": {"sha": "7bca9c8fbb9299e83f4f5c5fad9fe8dcbf900ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bca9c8fbb9299e83f4f5c5fad9fe8dcbf900ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e55aaeeed318a13b429d4b23c68569033bae0a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e55aaeeed318a13b429d4b23c68569033bae0a3", "html_url": "https://github.com/rust-lang/rust/commit/7e55aaeeed318a13b429d4b23c68569033bae0a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e55aaeeed318a13b429d4b23c68569033bae0a3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "3c41087bf83a4ffda87a7bee16d8eb31562bac23", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c41087bf83a4ffda87a7bee16d8eb31562bac23", "html_url": "https://github.com/rust-lang/rust/commit/3c41087bf83a4ffda87a7bee16d8eb31562bac23"}, {"sha": "6abecf76e51599c71a351ea45a78eed1d1cef8af", "url": "https://api.github.com/repos/rust-lang/rust/commits/6abecf76e51599c71a351ea45a78eed1d1cef8af", "html_url": "https://github.com/rust-lang/rust/commit/6abecf76e51599c71a351ea45a78eed1d1cef8af"}], "stats": {"total": 99, "additions": 65, "deletions": 34}, "files": [{"sha": "f2709329158c1d9606df4a9aa1a2e6599410c047", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 64, "deletions": 32, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/7e55aaeeed318a13b429d4b23c68569033bae0a3/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e55aaeeed318a13b429d4b23c68569033bae0a3/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=7e55aaeeed318a13b429d4b23c68569033bae0a3", "patch": "@@ -81,7 +81,8 @@ impl<'a> AstNode<'a> for Attr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> Attr<'a> {pub fn value(self) -> Option<TokenTree<'a>> {\n+impl<'a> Attr<'a> {\n+    pub fn value(self) -> Option<TokenTree<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -143,7 +144,8 @@ impl<'a> Block<'a> {\n     pub fn statements(self) -> impl Iterator<Item = Stmt<'a>> + 'a {\n         super::children(self)\n     }\n-pub fn expr(self) -> Option<Expr<'a>> {\n+\n+    pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -164,7 +166,8 @@ impl<'a> AstNode<'a> for BlockExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> BlockExpr<'a> {pub fn block(self) -> Option<Block<'a>> {\n+impl<'a> BlockExpr<'a> {\n+    pub fn block(self) -> Option<Block<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -204,7 +207,8 @@ impl<'a> AstNode<'a> for CallExpr<'a> {\n }\n \n impl<'a> ast::ArgListOwner<'a> for CallExpr<'a> {}\n-impl<'a> CallExpr<'a> {pub fn expr(self) -> Option<Expr<'a>> {\n+impl<'a> CallExpr<'a> {\n+    pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -243,10 +247,12 @@ impl<'a> AstNode<'a> for Condition<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> Condition<'a> {pub fn pat(self) -> Option<Pat<'a>> {\n+impl<'a> Condition<'a> {\n+    pub fn pat(self) -> Option<Pat<'a>> {\n         super::child_opt(self)\n     }\n-pub fn expr(self) -> Option<Expr<'a>> {\n+\n+    pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -460,7 +466,8 @@ impl<'a> AstNode<'a> for ExprStmt<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> ExprStmt<'a> {pub fn expr(self) -> Option<Expr<'a>> {\n+impl<'a> ExprStmt<'a> {\n+    pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -538,13 +545,16 @@ impl<'a> AstNode<'a> for FnDef<'a> {\n impl<'a> ast::NameOwner<'a> for FnDef<'a> {}\n impl<'a> ast::TypeParamsOwner<'a> for FnDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for FnDef<'a> {}\n-impl<'a> FnDef<'a> {pub fn param_list(self) -> Option<ParamList<'a>> {\n+impl<'a> FnDef<'a> {\n+    pub fn param_list(self) -> Option<ParamList<'a>> {\n         super::child_opt(self)\n     }\n-pub fn body(self) -> Option<Block<'a>> {\n+\n+    pub fn body(self) -> Option<Block<'a>> {\n         super::child_opt(self)\n     }\n-pub fn ret_type(self) -> Option<RetType<'a>> {\n+\n+    pub fn ret_type(self) -> Option<RetType<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -584,10 +594,12 @@ impl<'a> AstNode<'a> for ForExpr<'a> {\n }\n \n impl<'a> ast::LoopBodyOwner<'a> for ForExpr<'a> {}\n-impl<'a> ForExpr<'a> {pub fn pat(self) -> Option<Pat<'a>> {\n+impl<'a> ForExpr<'a> {\n+    pub fn pat(self) -> Option<Pat<'a>> {\n         super::child_opt(self)\n     }\n-pub fn iterable(self) -> Option<Expr<'a>> {\n+\n+    pub fn iterable(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -626,7 +638,8 @@ impl<'a> AstNode<'a> for IfExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> IfExpr<'a> {pub fn condition(self) -> Option<Condition<'a>> {\n+impl<'a> IfExpr<'a> {\n+    pub fn condition(self) -> Option<Condition<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -739,10 +752,12 @@ impl<'a> AstNode<'a> for LambdaExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> LambdaExpr<'a> {pub fn param_list(self) -> Option<ParamList<'a>> {\n+impl<'a> LambdaExpr<'a> {\n+    pub fn param_list(self) -> Option<ParamList<'a>> {\n         super::child_opt(self)\n     }\n-pub fn body(self) -> Option<Expr<'a>> {\n+\n+    pub fn body(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -763,10 +778,12 @@ impl<'a> AstNode<'a> for LetStmt<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> LetStmt<'a> {pub fn pat(self) -> Option<Pat<'a>> {\n+impl<'a> LetStmt<'a> {\n+    pub fn pat(self) -> Option<Pat<'a>> {\n         super::child_opt(self)\n     }\n-pub fn initializer(self) -> Option<Expr<'a>> {\n+\n+    pub fn initializer(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -805,7 +822,8 @@ impl<'a> AstNode<'a> for LifetimeParam<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> LifetimeParam<'a> {pub fn lifetime(self) -> Option<Lifetime<'a>> {\n+impl<'a> LifetimeParam<'a> {\n+    pub fn lifetime(self) -> Option<Lifetime<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -867,10 +885,12 @@ impl<'a> MatchArm<'a> {\n     pub fn pats(self) -> impl Iterator<Item = Pat<'a>> + 'a {\n         super::children(self)\n     }\n-pub fn guard(self) -> Option<MatchGuard<'a>> {\n+\n+    pub fn guard(self) -> Option<MatchGuard<'a>> {\n         super::child_opt(self)\n     }\n-pub fn expr(self) -> Option<Expr<'a>> {\n+\n+    pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -913,10 +933,12 @@ impl<'a> AstNode<'a> for MatchExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> MatchExpr<'a> {pub fn expr(self) -> Option<Expr<'a>> {\n+impl<'a> MatchExpr<'a> {\n+    pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n-pub fn match_arm_list(self) -> Option<MatchArmList<'a>> {\n+\n+    pub fn match_arm_list(self) -> Option<MatchArmList<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -956,7 +978,8 @@ impl<'a> AstNode<'a> for MethodCallExpr<'a> {\n }\n \n impl<'a> ast::ArgListOwner<'a> for MethodCallExpr<'a> {}\n-impl<'a> MethodCallExpr<'a> {pub fn expr(self) -> Option<Expr<'a>> {\n+impl<'a> MethodCallExpr<'a> {\n+    pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -979,7 +1002,8 @@ impl<'a> AstNode<'a> for Module<'a> {\n \n impl<'a> ast::NameOwner<'a> for Module<'a> {}\n impl<'a> ast::AttrsOwner<'a> for Module<'a> {}\n-impl<'a> Module<'a> {pub fn item_list(self) -> Option<ItemList<'a>> {\n+impl<'a> Module<'a> {\n+    pub fn item_list(self) -> Option<ItemList<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -1190,7 +1214,8 @@ impl<'a> AstNode<'a> for Param<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> Param<'a> {pub fn pat(self) -> Option<Pat<'a>> {\n+impl<'a> Param<'a> {\n+    pub fn pat(self) -> Option<Pat<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -1215,7 +1240,8 @@ impl<'a> ParamList<'a> {\n     pub fn params(self) -> impl Iterator<Item = Param<'a>> + 'a {\n         super::children(self)\n     }\n-pub fn self_param(self) -> Option<SelfParam<'a>> {\n+\n+    pub fn self_param(self) -> Option<SelfParam<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -1321,7 +1347,8 @@ impl<'a> AstNode<'a> for Path<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> Path<'a> {pub fn segment(self) -> Option<PathSegment<'a>> {\n+impl<'a> Path<'a> {\n+    pub fn segment(self) -> Option<PathSegment<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -1378,7 +1405,8 @@ impl<'a> AstNode<'a> for PathSegment<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> PathSegment<'a> {pub fn name_ref(self) -> Option<NameRef<'a>> {\n+impl<'a> PathSegment<'a> {\n+    pub fn name_ref(self) -> Option<NameRef<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -2052,7 +2080,8 @@ impl<'a> AstNode<'a> for UseItem<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> UseItem<'a> {pub fn use_tree(self) -> Option<UseTree<'a>> {\n+impl<'a> UseItem<'a> {\n+    pub fn use_tree(self) -> Option<UseTree<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -2073,10 +2102,12 @@ impl<'a> AstNode<'a> for UseTree<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> UseTree<'a> {pub fn path(self) -> Option<Path<'a>> {\n+impl<'a> UseTree<'a> {\n+    pub fn path(self) -> Option<Path<'a>> {\n         super::child_opt(self)\n     }\n-pub fn use_tree_list(self) -> Option<UseTreeList<'a>> {\n+\n+    pub fn use_tree_list(self) -> Option<UseTreeList<'a>> {\n         super::child_opt(self)\n     }\n }\n@@ -2138,7 +2169,8 @@ impl<'a> AstNode<'a> for WhileExpr<'a> {\n }\n \n impl<'a> ast::LoopBodyOwner<'a> for WhileExpr<'a> {}\n-impl<'a> WhileExpr<'a> {pub fn condition(self) -> Option<Condition<'a>> {\n+impl<'a> WhileExpr<'a> {\n+    pub fn condition(self) -> Option<Condition<'a>> {\n         super::child_opt(self)\n     }\n }"}, {"sha": "ffa9c413469e78e5e6c86157b174bf320122e82c", "filename": "crates/ra_syntax/src/ast/generated.rs.tera", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e55aaeeed318a13b429d4b23c68569033bae0a3/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/7e55aaeeed318a13b429d4b23c68569033bae0a3/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=7e55aaeeed318a13b429d4b23c68569033bae0a3", "patch": "@@ -77,8 +77,7 @@ impl<'a> {{ node }}<'a> {\n {%- else -%}\n {%- set method_name = m.0 -%}\n {%- set ChildName = m.1 %}\n-{%- endif -%}\n-\n+{%- endif %}\n     pub fn {{ method_name }}(self) -> Option<{{ ChildName }}<'a>> {\n         super::child_opt(self)\n     }"}]}