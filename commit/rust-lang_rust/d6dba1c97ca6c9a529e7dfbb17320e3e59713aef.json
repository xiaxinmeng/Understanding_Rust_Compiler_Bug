{"sha": "d6dba1c97ca6c9a529e7dfbb17320e3e59713aef", "node_id": "C_kwDOAAsO6NoAKGQ2ZGJhMWM5N2NhNmM5YTUyOWU3ZGZiYjE3MzIwZTNlNTk3MTNhZWY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-29T11:34:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-01T17:57:09Z"}, "message": "auto update old configurations to newer ones", "tree": {"sha": "d2e084224baf6d1c7096b7b8035778c27d979380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2e084224baf6d1c7096b7b8035778c27d979380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6dba1c97ca6c9a529e7dfbb17320e3e59713aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6dba1c97ca6c9a529e7dfbb17320e3e59713aef", "html_url": "https://github.com/rust-lang/rust/commit/d6dba1c97ca6c9a529e7dfbb17320e3e59713aef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6dba1c97ca6c9a529e7dfbb17320e3e59713aef/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f11b70c3bcbdd1481d00344ccf4da9cdca2a572", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572", "html_url": "https://github.com/rust-lang/rust/commit/1f11b70c3bcbdd1481d00344ccf4da9cdca2a572"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "99b72635d18e7ae1fd30f8e5538093ca66f4eced", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6dba1c97ca6c9a529e7dfbb17320e3e59713aef/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d6dba1c97ca6c9a529e7dfbb17320e3e59713aef/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=d6dba1c97ca6c9a529e7dfbb17320e3e59713aef", "patch": "@@ -5,6 +5,7 @@ import * as Is from 'vscode-languageclient/lib/common/utils/is';\n import { assert } from './util';\n import { WorkspaceEdit } from 'vscode';\n import { Workspace } from './ctx';\n+import { updateConfig } from './config';\n \n export interface Env {\n     [name: string]: string;\n@@ -24,7 +25,7 @@ function renderHoverActions(actions: ra.CommandLinkGroup[]): vscode.MarkdownStri\n     return result;\n }\n \n-export function createClient(serverPath: string, workspace: Workspace, extraEnv: Env): lc.LanguageClient {\n+export async function createClient(serverPath: string, workspace: Workspace, extraEnv: Env): Promise<lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n@@ -45,6 +46,10 @@ export function createClient(serverPath: string, workspace: Workspace, extraEnv:\n     );\n \n     let initializationOptions = vscode.workspace.getConfiguration(\"rust-analyzer\");\n+\n+    // Update outdated user configs\n+    await updateConfig(initializationOptions);\n+\n     if (workspace.kind === \"Detached Files\") {\n         initializationOptions = { \"detachedFiles\": workspace.files.map(file => file.uri.fsPath), ...initializationOptions };\n     }"}, {"sha": "5b650e1420aec6a90327b1008d8328c3dd5005ef", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 80, "deletions": 7, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/d6dba1c97ca6c9a529e7dfbb17320e3e59713aef/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d6dba1c97ca6c9a529e7dfbb17320e3e59713aef/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=d6dba1c97ca6c9a529e7dfbb17320e3e59713aef", "patch": "@@ -18,7 +18,6 @@ export class Config {\n         \"cargo\",\n         \"procMacro\",\n         \"files\",\n-        \"highlighting\",\n         \"lens\", // works as lens.*\n     ]\n         .map(opt => `${this.rootSection}.${opt}`);\n@@ -79,7 +78,7 @@ export class Config {\n      * const nullableNum = vscode\n      *  .workspace\n      *  .getConfiguration\n-     *  .getConfiguration(\"rust-analyer\")\n+     *  .getConfiguration(\"rust-analyzer\")\n      *  .get<number | null>(path)!;\n      *\n      * // What happens is that type of `nullableNum` is `number` but not `null | number`:\n@@ -124,15 +123,89 @@ export class Config {\n     get hoverActions() {\n         return {\n             enable: this.get<boolean>(\"hoverActions.enable\"),\n-            implementations: this.get<boolean>(\"hoverActions.implementations\"),\n-            references: this.get<boolean>(\"hoverActions.references\"),\n-            run: this.get<boolean>(\"hoverActions.run\"),\n-            debug: this.get<boolean>(\"hoverActions.debug\"),\n-            gotoTypeDef: this.get<boolean>(\"hoverActions.gotoTypeDef\"),\n+            implementations: this.get<boolean>(\"hoverActions.implementations.enable\"),\n+            references: this.get<boolean>(\"hoverActions.references.enable\"),\n+            run: this.get<boolean>(\"hoverActions.run.enable\"),\n+            debug: this.get<boolean>(\"hoverActions.debug.enable\"),\n+            gotoTypeDef: this.get<boolean>(\"hoverActions.gotoTypeDef.enable\"),\n         };\n     }\n \n     get currentExtensionIsNightly() {\n         return this.package.releaseTag === NIGHTLY_TAG;\n     }\n }\n+\n+export async function updateConfig(config: vscode.WorkspaceConfiguration) {\n+    const renames = [\n+        [\"assist.allowMergingIntoGlobImports\", \"imports.merge.glob\",],\n+        [\"assist.exprFillDefault\", \"assist.expressionFillDefault\",],\n+        [\"assist.importEnforceGranularity\", \"imports.granularity.enforce\",],\n+        [\"assist.importGranularity\", \"imports.granularity.group\",],\n+        [\"assist.importMergeBehavior\", \"imports.granularity.group\",],\n+        [\"assist.importMergeBehaviour\", \"imports.granularity.group\",],\n+        [\"assist.importGroup\", \"imports.group.enable\",],\n+        [\"assist.importPrefix\", \"imports.prefix\",],\n+        [\"cache.warmup\", \"primeCaches.enable\",],\n+        [\"cargo.loadOutDirsFromCheck\", \"cargo.buildScripts.enable\",],\n+        [\"cargo.runBuildScripts\", \"cargo.runBuildScripts.overrideCommand\",],\n+        [\"cargo.runBuildScriptsCommand\", \"cargo.runBuildScripts.overrideCommand\",],\n+        [\"cargo.useRustcWrapperForBuildScripts\", \"cargo.runBuildScripts.useRustcWrapper\",],\n+        [\"completion.snippets\", \"completion.snippets.custom\",],\n+        [\"diagnostics.enableExperimental\", \"diagnostics.experimental.enable\",],\n+        [\"experimental.procAttrMacros\", \"procMacro.attributes.enable\",],\n+        [\"highlighting.strings\", \"semanticHighlighting.strings.enable\",],\n+        [\"highlightRelated.breakPoints\", \"highlightRelated.breakPoints.enable\",],\n+        [\"highlightRelated.exitPoints\", \"highlightRelated.exitPoints.enable\",],\n+        [\"highlightRelated.yieldPoints\", \"highlightRelated.yieldPoints.enable\",],\n+        [\"highlightRelated.references\", \"highlightRelated.references.enable\",],\n+        [\"hover.documentation\", \"hover.documentation.enable\",],\n+        [\"hover.linksInHover\", \"hover.links.enable\",],\n+        [\"hoverActions.linksInHover\", \"hover.links.enable\",],\n+        [\"hoverActions.debug\", \"hoverActions.debug.enable\",],\n+        [\"hoverActions.enable\", \"hoverActions.enable.enable\",],\n+        [\"hoverActions.gotoTypeDef\", \"hoverActions.gotoTypeDef.enable\",],\n+        [\"hoverActions.implementations\", \"hoverActions.implementations.enable\",],\n+        [\"hoverActions.references\", \"hoverActions.references.enable\",],\n+        [\"hoverActions.run\", \"hoverActions.run.enable\",],\n+        [\"inlayHints.chainingHints\", \"inlayHints.chainingHints.enable\",],\n+        [\"inlayHints.closureReturnTypeHints\", \"inlayHints.closureReturnTypeHints.enable\",],\n+        [\"inlayHints.hideNamedConstructorHints\", \"inlayHints.typeHints.hideNamedConstructorHints\",],\n+        [\"inlayHints.parameterHints\", \"inlayHints.parameterHints.enable\",],\n+        [\"inlayHints.reborrowHints\", \"inlayHints.reborrowHints.enable\",],\n+        [\"inlayHints.typeHints\", \"inlayHints.typeHints.enable\",],\n+        [\"lruCapacity\", \"lru.capacity\",],\n+        [\"runnables.cargoExtraArgs\", \"runnables.extraArgs\",],\n+        [\"runnables.overrideCargo\", \"runnables.command\",],\n+        [\"rustcSource\", \"rustc.source\",],\n+        [\"rustfmt.enableRangeFormatting\", \"rustfmt.rangeFormatting.enable\"]\n+    ];\n+\n+    for (const [oldKey, newKey] of renames) {\n+        const inspect = config.inspect(oldKey);\n+        if (inspect !== undefined) {\n+            const valMatrix = [\n+                { val: inspect.globalValue, langVal: inspect.globalLanguageValue, target: vscode.ConfigurationTarget.Global },\n+                { val: inspect.workspaceFolderValue, langVal: inspect.workspaceFolderLanguageValue, target: vscode.ConfigurationTarget.WorkspaceFolder },\n+                { val: inspect.workspaceValue, langVal: inspect.workspaceLanguageValue, target: vscode.ConfigurationTarget.Workspace }\n+            ];\n+            for (const { val, langVal, target } of valMatrix) {\n+                const pred = (val: unknown) => {\n+                    // some of the updates we do only append \"enable\" or \"custom\"\n+                    // that means on the next run we would find these again, but as objects with\n+                    // these properties causing us to destroy the config\n+                    // so filter those already updated ones out\n+                    return val !== undefined && !(typeof val === \"object\" && val !== null && (val.hasOwnProperty(\"enable\") || val.hasOwnProperty(\"custom\")));\n+                };\n+                if (pred(val)) {\n+                    await config.update(newKey, val, target, false);\n+                    await config.update(oldKey, undefined, target, false);\n+                }\n+                if (pred(langVal)) {\n+                    await config.update(newKey, langVal, target, true);\n+                    await config.update(oldKey, undefined, target, true);\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "0c3e6810e999dbf8d947f33660fd4d29db69e7e6", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6dba1c97ca6c9a529e7dfbb17320e3e59713aef/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d6dba1c97ca6c9a529e7dfbb17320e3e59713aef/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=d6dba1c97ca6c9a529e7dfbb17320e3e59713aef", "patch": "@@ -33,7 +33,7 @@ export class Ctx {\n         serverPath: string,\n         workspace: Workspace,\n     ): Promise<Ctx> {\n-        const client = createClient(serverPath, workspace, config.serverExtraEnv);\n+        const client = await createClient(serverPath, workspace, config.serverExtraEnv);\n \n         const statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n         extCtx.subscriptions.push(statusBar);"}]}