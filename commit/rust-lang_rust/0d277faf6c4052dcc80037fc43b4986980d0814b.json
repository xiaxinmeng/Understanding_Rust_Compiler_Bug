{"sha": "0d277faf6c4052dcc80037fc43b4986980d0814b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMjc3ZmFmNmM0MDUyZGNjODAwMzdmYzQzYjQ5ODY5ODBkMDgxNGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-25T20:23:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-25T20:23:09Z"}, "message": "Merge #1914\n\n1914: Resolve trait associated items r=matklad a=flodiebold\n\nE.g. `Default::default` or `<Foo as Default>::default`.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "807f32992732a74c591f6a8c85aff354ebea09c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/807f32992732a74c591f6a8c85aff354ebea09c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d277faf6c4052dcc80037fc43b4986980d0814b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdi8yuCRBK7hj4Ov3rIwAAdHIIAKi2hiZKjwJ6vnkhys+mk8tG\npJedda8O/qOKa+y6bmAhWJdvFdqb4q6qAWw1yleOR9xyrst+Cp2UKdS5QjdkPc3w\nE8EPDKzeyyTOPj5kMRAIosk/StPKeLWEbGuYQtPMW3Wt2VS7Wp12CkF6aSHiFM9X\nlDeiQByYjjr+rLa3cBVWpI44y/YrnBgfCobHMeyciX3sboAGp+nn5YlWLM6a+qOr\nVo8ikdJplL+N9DOHo1Q2HGotgl8AvZDVxsXIAdTy575wGNo/Jhs9B5ARBO2rxiZk\nK/pCLwGk9BtYXgoED8aapNgmOf/55pkfGHOpWtzqY8WuRYL1fKC6dvvhoarxXns=\n=DZ3f\n-----END PGP SIGNATURE-----\n", "payload": "tree 807f32992732a74c591f6a8c85aff354ebea09c6\nparent 5704485063bad82e651c8e68f4fa2d333bfdf152\nparent c35ef5013c3223986ae5111a3720ef8e85c80efc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1569442989 +0000\ncommitter GitHub <noreply@github.com> 1569442989 +0000\n\nMerge #1914\n\n1914: Resolve trait associated items r=matklad a=flodiebold\n\nE.g. `Default::default` or `<Foo as Default>::default`.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d277faf6c4052dcc80037fc43b4986980d0814b", "html_url": "https://github.com/rust-lang/rust/commit/0d277faf6c4052dcc80037fc43b4986980d0814b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d277faf6c4052dcc80037fc43b4986980d0814b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5704485063bad82e651c8e68f4fa2d333bfdf152", "url": "https://api.github.com/repos/rust-lang/rust/commits/5704485063bad82e651c8e68f4fa2d333bfdf152", "html_url": "https://github.com/rust-lang/rust/commit/5704485063bad82e651c8e68f4fa2d333bfdf152"}, {"sha": "c35ef5013c3223986ae5111a3720ef8e85c80efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c35ef5013c3223986ae5111a3720ef8e85c80efc", "html_url": "https://github.com/rust-lang/rust/commit/c35ef5013c3223986ae5111a3720ef8e85c80efc"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "20413cb3dfe88972eb1cd7b5991de51eb96e0f19", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d277faf6c4052dcc80037fc43b4986980d0814b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d277faf6c4052dcc80037fc43b4986980d0814b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=0d277faf6c4052dcc80037fc43b4986980d0814b", "patch": "@@ -1055,3 +1055,13 @@ pub enum AssocItem {\n // require not implementing From, and instead having some checked way of\n // casting them, and somehow making the constructors private, which would be annoying.\n impl_froms!(AssocItem: Function, Const, TypeAlias);\n+\n+impl From<AssocItem> for crate::generics::GenericDef {\n+    fn from(item: AssocItem) -> Self {\n+        match item {\n+            AssocItem::Function(f) => f.into(),\n+            AssocItem::Const(c) => c.into(),\n+            AssocItem::TypeAlias(t) => t.into(),\n+        }\n+    }\n+}"}, {"sha": "6865d34ba7cb1973f0c3391c6c6e7fcafe3c3621", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d277faf6c4052dcc80037fc43b4986980d0814b/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d277faf6c4052dcc80037fc43b4986980d0814b/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=0d277faf6c4052dcc80037fc43b4986980d0814b", "patch": "@@ -12,8 +12,8 @@ use crate::{\n     name::SELF_TYPE,\n     path::Path,\n     type_ref::{TypeBound, TypeRef},\n-    Adt, AsName, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct, Trait,\n-    TypeAlias, Union,\n+    Adt, AsName, Const, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct,\n+    Trait, TypeAlias, Union,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -44,7 +44,6 @@ pub struct WherePredicate {\n     pub(crate) bound: TypeBound,\n }\n \n-// FIXME: consts can have type parameters from their parents (i.e. associated consts of traits)\n #[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n pub enum GenericDef {\n     Function(Function),\n@@ -55,14 +54,17 @@ pub enum GenericDef {\n     // enum variants cannot have generics themselves, but their parent enums\n     // can, and this makes some code easier to write\n     EnumVariant(EnumVariant),\n+    // consts can have type parameters from their parents (i.e. associated consts of traits)\n+    Const(Const),\n }\n impl_froms!(\n     GenericDef: Function,\n     Adt(Struct, Enum, Union),\n     Trait,\n     TypeAlias,\n     ImplBlock,\n-    EnumVariant\n+    EnumVariant,\n+    Const\n );\n \n impl GenericParams {\n@@ -75,7 +77,7 @@ impl GenericParams {\n             GenericDef::TypeAlias(it) => it.container(db).map(GenericDef::from),\n             GenericDef::EnumVariant(it) => Some(it.parent_enum(db).into()),\n             GenericDef::Adt(_) | GenericDef::Trait(_) => None,\n-            GenericDef::ImplBlock(_) => None,\n+            GenericDef::ImplBlock(_) | GenericDef::Const(_) => None,\n         };\n         let mut generics = GenericParams {\n             def,\n@@ -104,7 +106,7 @@ impl GenericParams {\n             // type-parameter, but rather is a type-alias for impl's target\n             // type, so this is handled by the resolver.\n             GenericDef::ImplBlock(it) => generics.fill(&it.source(db).ast, start),\n-            GenericDef::EnumVariant(_) => {}\n+            GenericDef::EnumVariant(_) | GenericDef::Const(_) => {}\n         }\n \n         Arc::new(generics)\n@@ -198,6 +200,7 @@ impl GenericDef {\n             GenericDef::TypeAlias(inner) => inner.resolver(db),\n             GenericDef::ImplBlock(inner) => inner.resolver(db),\n             GenericDef::EnumVariant(inner) => inner.parent_enum(db).resolver(db),\n+            GenericDef::Const(inner) => inner.resolver(db),\n         }\n     }\n }"}, {"sha": "feb7481b2e18501df398dd8d987b0e1e21ec0280", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0d277faf6c4052dcc80037fc43b4986980d0814b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d277faf6c4052dcc80037fc43b4986980d0814b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=0d277faf6c4052dcc80037fc43b4986980d0814b", "patch": "@@ -1,6 +1,6 @@\n //! Path expression resolution.\n \n-use super::{ExprOrPatId, InferenceContext};\n+use super::{ExprOrPatId, InferenceContext, TraitRef};\n use crate::{\n     db::HirDatabase,\n     resolve::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n@@ -91,9 +91,17 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let is_before_last = remaining_segments.len() == 1;\n \n         match (def, is_before_last) {\n-            (TypeNs::Trait(_trait), true) => {\n-                // FIXME Associated item of trait, e.g. `Default::default`\n-                None\n+            (TypeNs::Trait(trait_), true) => {\n+                let segment =\n+                    remaining_segments.last().expect(\"there should be at least one segment here\");\n+                let trait_ref = TraitRef::from_resolved_path(\n+                    self.db,\n+                    &self.resolver,\n+                    trait_,\n+                    resolved_segment,\n+                    None,\n+                );\n+                self.resolve_trait_assoc_item(trait_ref, segment, id)\n             }\n             (def, _) => {\n                 // Either we already have a type (e.g. `Vec::new`), or we have a\n@@ -120,6 +128,45 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         }\n     }\n \n+    fn resolve_trait_assoc_item(\n+        &mut self,\n+        trait_ref: TraitRef,\n+        segment: &crate::path::PathSegment,\n+        id: ExprOrPatId,\n+    ) -> Option<(ValueNs, Option<Substs>)> {\n+        let trait_ = trait_ref.trait_;\n+        let item = trait_.items(self.db).iter().copied().find_map(|item| match item {\n+            AssocItem::Function(func) => {\n+                if segment.name == func.name(self.db) {\n+                    Some(AssocItem::Function(func))\n+                } else {\n+                    None\n+                }\n+            }\n+\n+            AssocItem::Const(konst) => {\n+                if konst.name(self.db).map_or(false, |n| n == segment.name) {\n+                    Some(AssocItem::Const(konst))\n+                } else {\n+                    None\n+                }\n+            }\n+            AssocItem::TypeAlias(_) => None,\n+        })?;\n+        let def = match item {\n+            AssocItem::Function(f) => ValueNs::Function(f),\n+            AssocItem::Const(c) => ValueNs::Const(c),\n+            AssocItem::TypeAlias(_) => unreachable!(),\n+        };\n+        let generics = item.generic_params(self.db);\n+        let mut substs = Vec::with_capacity(generics.count_params_including_parent());\n+        substs.extend(trait_ref.substs.iter().cloned());\n+        substs.extend(std::iter::repeat(Ty::Unknown).take(generics.params.len()));\n+\n+        self.write_assoc_resolution(id, item);\n+        Some((def, Some(substs.into())))\n+    }\n+\n     fn resolve_ty_assoc_item(\n         &mut self,\n         ty: Ty,"}, {"sha": "dd503d7719bff33597c925934bea162dc5bc0b78", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d277faf6c4052dcc80037fc43b4986980d0814b/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d277faf6c4052dcc80037fc43b4986980d0814b/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=0d277faf6c4052dcc80037fc43b4986980d0814b", "patch": "@@ -386,7 +386,7 @@ impl TraitRef {\n         Some(TraitRef::from_resolved_path(db, resolver, resolved, segment, explicit_self_ty))\n     }\n \n-    fn from_resolved_path(\n+    pub(super) fn from_resolved_path(\n         db: &impl HirDatabase,\n         resolver: &Resolver,\n         resolved: Trait,"}, {"sha": "f4f63ca934f048a322363f4dd4890571a6cf52f6", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d277faf6c4052dcc80037fc43b4986980d0814b/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d277faf6c4052dcc80037fc43b4986980d0814b/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=0d277faf6c4052dcc80037fc43b4986980d0814b", "patch": "@@ -2535,17 +2535,16 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [87; 193) '{     ...t(); }': ()\n     [97; 99) 's1': S\n-    [105; 121) 'Defaul...efault': {unknown}\n+    [105; 121) 'Defaul...efault': fn default<S>() -> Self\n     [105; 123) 'Defaul...ault()': S\n     [133; 135) 's2': {unknown}\n     [138; 148) 'S::default': {unknown}\n     [138; 150) 'S::default()': {unknown}\n-    [160; 162) 's3': {unknown}\n-    [165; 188) '<S as ...efault': {unknown}\n-    [165; 190) '<S as ...ault()': {unknown}\n+    [160; 162) 's3': S\n+    [165; 188) '<S as ...efault': fn default<S>() -> Self\n+    [165; 190) '<S as ...ault()': S\n     \"###\n     );\n }\n@@ -2674,9 +2673,9 @@ fn test() {\n     [148; 149) 'y': u64\n     [157; 158) 'S': S\n     [157; 165) 'S.into()': u64\n-    [175; 176) 'z': {unknown}\n-    [179; 196) 'Into::...::into': {unknown}\n-    [179; 199) 'Into::...nto(S)': {unknown}\n+    [175; 176) 'z': u64\n+    [179; 196) 'Into::...::into': fn into<S, u64>(Self) -> T\n+    [179; 199) 'Into::...nto(S)': u64\n     [197; 198) 'S': S\n     \"###\n     );"}]}