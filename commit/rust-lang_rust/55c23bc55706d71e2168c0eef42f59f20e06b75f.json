{"sha": "55c23bc55706d71e2168c0eef42f59f20e06b75f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YzIzYmM1NTcwNmQ3MWUyMTY4YzBlZWY0MmY1OWYyMGUwNmI3NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-31T22:22:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-31T22:22:45Z"}, "message": "auto merge of #6862 : thestinger/rust/swap, r=bstrie\n\nI don't like the `util` module in general, and `ptr` is a much better place for these.", "tree": {"sha": "599bc6bbed9522ad81f9498c396333af407e5d72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/599bc6bbed9522ad81f9498c396333af407e5d72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c23bc55706d71e2168c0eef42f59f20e06b75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c23bc55706d71e2168c0eef42f59f20e06b75f", "html_url": "https://github.com/rust-lang/rust/commit/55c23bc55706d71e2168c0eef42f59f20e06b75f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c23bc55706d71e2168c0eef42f59f20e06b75f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91a707390045eb29e5392de1f7f5b9d5fdb64e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/91a707390045eb29e5392de1f7f5b9d5fdb64e65", "html_url": "https://github.com/rust-lang/rust/commit/91a707390045eb29e5392de1f7f5b9d5fdb64e65"}, {"sha": "ed93cc1987842d05992376c25a02d21d049ef792", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed93cc1987842d05992376c25a02d21d049ef792", "html_url": "https://github.com/rust-lang/rust/commit/ed93cc1987842d05992376c25a02d21d049ef792"}], "stats": {"total": 173, "additions": 66, "deletions": 107}, "files": [{"sha": "186522f3fb96775d85dcbef6c5907ae59d43f5cd", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55c23bc55706d71e2168c0eef42f59f20e06b75f/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/55c23bc55706d71e2168c0eef42f59f20e06b75f/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=55c23bc55706d71e2168c0eef42f59f20e06b75f", "patch": "@@ -153,7 +153,6 @@ use std::cast;\n use std::libc::{c_void, size_t, malloc, free};\n use std::ptr;\n use std::unstable::intrinsics;\n-use std::util;\n \n // a wrapper around the handle returned by the foreign code\n pub struct Unique<T> {\n@@ -186,9 +185,9 @@ pub impl<T: Owned> Unique<T> {\n impl<T: Owned> Drop for Unique<T> {\n     fn finalize(&self) {\n         unsafe {\n-            let mut x = intrinsics::init(); // dummy value to swap in\n+            let x = intrinsics::init(); // dummy value to swap in\n             // moving the object out is needed to call the destructor\n-            util::replace_ptr(self.ptr, x);\n+            ptr::replace_ptr(self.ptr, x);\n             free(self.ptr as *c_void)\n         }\n     }"}, {"sha": "8cd1c893bb6f04ed8d4b66221aec53eb75135b1a", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55c23bc55706d71e2168c0eef42f59f20e06b75f/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c23bc55706d71e2168c0eef42f59f20e06b75f/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=55c23bc55706d71e2168c0eef42f59f20e06b75f", "patch": "@@ -28,7 +28,6 @@ use core::libc::{c_void, size_t, malloc, free};\n use core::ptr;\n use core::sys;\n use core::unstable::intrinsics;\n-use core::util;\n \n struct RcBox<T> {\n     value: T,\n@@ -73,7 +72,7 @@ impl<T> Drop for Rc<T> {\n         unsafe {\n             (*self.ptr).count -= 1;\n             if (*self.ptr).count == 0 {\n-                util::replace_ptr(self.ptr, intrinsics::uninit());\n+                ptr::replace_ptr(self.ptr, intrinsics::uninit());\n                 free(self.ptr as *c_void)\n             }\n         }\n@@ -223,7 +222,7 @@ impl<T> Drop for RcMut<T> {\n         unsafe {\n             (*self.ptr).count -= 1;\n             if (*self.ptr).count == 0 {\n-                util::replace_ptr(self.ptr, uninit());\n+                ptr::replace_ptr(self.ptr, uninit());\n                 free(self.ptr as *c_void)\n             }\n         }"}, {"sha": "ebc0a4b1e96ba02eeb02dde3f32453e794fa4cdb", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 48, "deletions": 57, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/55c23bc55706d71e2168c0eef42f59f20e06b75f/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c23bc55706d71e2168c0eef42f59f20e06b75f/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=55c23bc55706d71e2168c0eef42f59f20e06b75f", "patch": "@@ -15,6 +15,7 @@ use cast;\n #[cfg(stage0)] use libc::{c_void, size_t};\n use option::{Option, Some, None};\n use sys;\n+use unstable::intrinsics;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n use uint;\n@@ -71,11 +72,11 @@ pub unsafe fn position<T>(buf: *T, f: &fn(&T) -> bool) -> uint {\n \n /// Create an unsafe null pointer\n #[inline(always)]\n-pub fn null<T>() -> *T { unsafe { cast::transmute(0u) } }\n+pub fn null<T>() -> *T { 0 as *T }\n \n /// Create an unsafe mutable null pointer\n #[inline(always)]\n-pub fn mut_null<T>() -> *mut T { unsafe { cast::transmute(0u) } }\n+pub fn mut_null<T>() -> *mut T { 0 as *mut T }\n \n /// Returns true if the pointer is equal to the null pointer.\n #[inline(always)]\n@@ -207,47 +208,57 @@ pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n }\n \n /**\n-  Transform a region pointer - &T - to an unsafe pointer - *T.\n-  This is safe, but is implemented with an unsafe block due to\n-  transmute.\n-*/\n+ * Swap the values at two mutable locations of the same type, without\n+ * deinitialising or copying either one.\n+ */\n+#[inline]\n+pub unsafe fn swap_ptr<T>(x: *mut T, y: *mut T) {\n+    // Give ourselves some scratch space to work with\n+    let mut tmp: T = intrinsics::uninit();\n+    let t: *mut T = &mut tmp;\n+\n+    // Perform the swap\n+    copy_memory(t, x, 1);\n+    copy_memory(x, y, 1);\n+    copy_memory(y, t, 1);\n+\n+    // y and t now point to the same thing, but we need to completely forget `tmp`\n+    // because it's no longer relevant.\n+    cast::forget(tmp);\n+}\n+\n+/**\n+ * Replace the value at a mutable location with a new one, returning the old\n+ * value, without deinitialising or copying either one.\n+ */\n+#[inline(always)]\n+pub unsafe fn replace_ptr<T>(dest: *mut T, mut src: T) -> T {\n+    swap_ptr(dest, &mut src);\n+    src\n+}\n+\n+/// Transform a region pointer - &T - to an unsafe pointer - *T.\n #[inline(always)]\n pub fn to_unsafe_ptr<T>(thing: &T) -> *T {\n-    unsafe { cast::transmute(thing) }\n+    thing as *T\n }\n \n-/**\n-  Transform a const region pointer - &const T - to a const unsafe pointer -\n-  *const T. This is safe, but is implemented with an unsafe block due to\n-  transmute.\n-*/\n+/// Transform a const region pointer - &const T - to a const unsafe pointer - *const T.\n #[inline(always)]\n pub fn to_const_unsafe_ptr<T>(thing: &const T) -> *const T {\n-    unsafe { cast::transmute(thing) }\n+    thing as *const T\n }\n \n-/**\n-  Transform a mutable region pointer - &mut T - to a mutable unsafe pointer -\n-  *mut T. This is safe, but is implemented with an unsafe block due to\n-  transmute.\n-*/\n+/// Transform a mutable region pointer - &mut T - to a mutable unsafe pointer - *mut T.\n #[inline(always)]\n pub fn to_mut_unsafe_ptr<T>(thing: &mut T) -> *mut T {\n-    unsafe { cast::transmute(thing) }\n+    thing as *mut T\n }\n \n-/**\n-  Cast a region pointer - &T - to a uint.\n-  This is safe, but is implemented with an unsafe block due to\n-  transmute.\n-\n-  (I couldn't think of a cutesy name for this one.)\n-*/\n+/// Cast a region pointer - &T - to a uint.\n #[inline(always)]\n pub fn to_uint<T>(thing: &T) -> uint {\n-    unsafe {\n-        cast::transmute(thing)\n-    }\n+    thing as *T as uint\n }\n \n /// Determine if two borrowed pointers point to the same thing.\n@@ -373,50 +384,30 @@ impl<T> Ptr<T> for *mut T {\n impl<T> Eq for *const T {\n     #[inline(always)]\n     fn eq(&self, other: &*const T) -> bool {\n-        unsafe {\n-            let a: uint = cast::transmute(*self);\n-            let b: uint = cast::transmute(*other);\n-            return a == b;\n-        }\n+        (*self as uint) == (*other as uint)\n     }\n     #[inline(always)]\n-    fn ne(&self, other: &*const T) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &*const T) -> bool { !self.eq(other) }\n }\n \n // Comparison for pointers\n #[cfg(not(test))]\n impl<T> Ord for *const T {\n     #[inline(always)]\n     fn lt(&self, other: &*const T) -> bool {\n-        unsafe {\n-            let a: uint = cast::transmute(*self);\n-            let b: uint = cast::transmute(*other);\n-            return a < b;\n-        }\n+        (*self as uint) < (*other as uint)\n     }\n     #[inline(always)]\n     fn le(&self, other: &*const T) -> bool {\n-        unsafe {\n-            let a: uint = cast::transmute(*self);\n-            let b: uint = cast::transmute(*other);\n-            return a <= b;\n-        }\n+        (*self as uint) <= (*other as uint)\n     }\n     #[inline(always)]\n     fn ge(&self, other: &*const T) -> bool {\n-        unsafe {\n-            let a: uint = cast::transmute(*self);\n-            let b: uint = cast::transmute(*other);\n-            return a >= b;\n-        }\n+        (*self as uint) >= (*other as uint)\n     }\n     #[inline(always)]\n     fn gt(&self, other: &*const T) -> bool {\n-        unsafe {\n-            let a: uint = cast::transmute(*self);\n-            let b: uint = cast::transmute(*other);\n-            return a > b;\n-        }\n+        (*self as uint) > (*other as uint)\n     }\n }\n \n@@ -425,11 +416,11 @@ impl<T> Ord for *const T {\n impl<'self,T:Eq> Eq for &'self T {\n     #[inline(always)]\n     fn eq(&self, other: & &'self T) -> bool {\n-        return *(*self) == *(*other);\n+        *(*self) == *(*other)\n     }\n     #[inline(always)]\n     fn ne(&self, other: & &'self T) -> bool {\n-        return *(*self) != *(*other);\n+        *(*self) != *(*other)\n     }\n }\n "}, {"sha": "21fbe2836cd68264e41de741abe91362a4b85a2c", "filename": "src/libstd/util.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/55c23bc55706d71e2168c0eef42f59f20e06b75f/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c23bc55706d71e2168c0eef42f59f20e06b75f/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=55c23bc55706d71e2168c0eef42f59f20e06b75f", "patch": "@@ -64,26 +64,6 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n     }\n }\n \n-/**\n- * Swap the values at two mutable locations of the same type, without\n- * deinitialising or copying either one.\n- */\n-#[inline]\n-pub unsafe fn swap_ptr<T>(x: *mut T, y: *mut T) {\n-    // Give ourselves some scratch space to work with\n-    let mut tmp: T = intrinsics::uninit();\n-    let t: *mut T = &mut tmp;\n-\n-    // Perform the swap\n-    ptr::copy_memory(t, x, 1);\n-    ptr::copy_memory(x, y, 1);\n-    ptr::copy_memory(y, t, 1);\n-\n-    // y and t now point to the same thing, but we need to completely forget `tmp`\n-    // because it's no longer relevant.\n-    cast::forget(tmp);\n-}\n-\n /**\n  * Replace the value at a mutable location with a new one, returning the old\n  * value, without deinitialising or copying either one.\n@@ -94,16 +74,6 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n     src\n }\n \n-/**\n- * Replace the value at a mutable location with a new one, returning the old\n- * value, without deinitialising or copying either one.\n- */\n-#[inline(always)]\n-pub unsafe fn replace_ptr<T>(dest: *mut T, mut src: T) -> T {\n-    swap_ptr(dest, ptr::to_mut_unsafe_ptr(&mut src));\n-    src\n-}\n-\n /// A non-copyable dummy type.\n pub struct NonCopyable {\n     priv i: (),"}, {"sha": "795c3cdb405e16da17c0c29b6493761a0e77596e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/55c23bc55706d71e2168c0eef42f59f20e06b75f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c23bc55706d71e2168c0eef42f59f20e06b75f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=55c23bc55706d71e2168c0eef42f59f20e06b75f", "patch": "@@ -506,7 +506,7 @@ pub fn shift<T>(v: &mut ~[T]) -> T {\n         let vp = raw::to_mut_ptr(*v);\n         let vp = ptr::mut_offset(vp, next_ln - 1);\n \n-        util::replace_ptr(vp, work_elt)\n+        ptr::replace_ptr(vp, work_elt)\n     }\n }\n \n@@ -570,7 +570,7 @@ pub fn consume<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n                 // elements during unwinding\n                 let x = intrinsics::init();\n                 let p = ptr::mut_offset(p, i);\n-                f(i, util::replace_ptr(p, x));\n+                f(i, ptr::replace_ptr(p, x));\n             }\n         }\n \n@@ -597,7 +597,7 @@ pub fn consume_reverse<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n                 // elements during unwinding\n                 let x = intrinsics::init();\n                 let p = ptr::mut_offset(p, i);\n-                f(i, util::replace_ptr(p, x));\n+                f(i, ptr::replace_ptr(p, x));\n             }\n         }\n \n@@ -613,7 +613,7 @@ pub fn pop<T>(v: &mut ~[T]) -> T {\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n-        let val = util::replace_ptr(valptr, intrinsics::init());\n+        let val = ptr::replace_ptr(valptr, intrinsics::init());\n         raw::set_len(v, ln - 1u);\n         val\n     }\n@@ -707,8 +707,8 @@ pub fn push_all_move<T>(v: &mut ~[T], mut rhs: ~[T]) {\n     unsafe {\n         do as_mut_buf(rhs) |p, len| {\n             for uint::range(0, len) |i| {\n-                let x = util::replace_ptr(ptr::mut_offset(p, i),\n-                                          intrinsics::uninit());\n+                let x = ptr::replace_ptr(ptr::mut_offset(p, i),\n+                                         intrinsics::uninit());\n                 push(&mut *v, x);\n             }\n         }\n@@ -723,7 +723,7 @@ pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n         unsafe {\n             // This loop is optimized out for non-drop types.\n             for uint::range(newlen, oldlen) |i| {\n-                util::replace_ptr(ptr::mut_offset(p, i), intrinsics::uninit());\n+                ptr::replace_ptr(ptr::mut_offset(p, i), intrinsics::uninit());\n             }\n         }\n     }\n@@ -747,14 +747,14 @@ pub fn dedup<T:Eq>(v: &mut ~[T]) {\n                 // last_written < next_to_read < ln\n                 if *ptr::mut_offset(p, next_to_read) ==\n                     *ptr::mut_offset(p, last_written) {\n-                    util::replace_ptr(ptr::mut_offset(p, next_to_read),\n-                                      intrinsics::uninit());\n+                    ptr::replace_ptr(ptr::mut_offset(p, next_to_read),\n+                                     intrinsics::uninit());\n                 } else {\n                     last_written += 1;\n                     // last_written <= next_to_read < ln\n                     if next_to_read != last_written {\n-                        util::swap_ptr(ptr::mut_offset(p, last_written),\n-                                       ptr::mut_offset(p, next_to_read));\n+                        ptr::swap_ptr(ptr::mut_offset(p, last_written),\n+                                      ptr::mut_offset(p, next_to_read));\n                     }\n                 }\n                 // last_written <= next_to_read < ln\n@@ -1398,7 +1398,7 @@ pub fn swap<T>(v: &mut [T], a: uint, b: uint) {\n         // them to their raw pointers to do the swap\n         let pa: *mut T = ptr::to_mut_unsafe_ptr(&mut v[a]);\n         let pb: *mut T = ptr::to_mut_unsafe_ptr(&mut v[b]);\n-        util::swap_ptr(pa, pb);\n+        ptr::swap_ptr(pa, pb);\n     }\n }\n "}, {"sha": "07d1226d3829734ac48d012cd47a48dedd7b497a", "filename": "src/test/run-pass/swap-overlapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55c23bc55706d71e2168c0eef42f59f20e06b75f/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c23bc55706d71e2168c0eef42f59f20e06b75f/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs?ref=55c23bc55706d71e2168c0eef42f59f20e06b75f", "patch": "@@ -26,8 +26,8 @@ pub fn main() {\n \n fn do_swap(test: &mut TestDescAndFn) {\n     unsafe {\n-        util::swap_ptr(ptr::to_mut_unsafe_ptr(test),\n-                       ptr::to_mut_unsafe_ptr(test));\n+        ptr::swap_ptr(ptr::to_mut_unsafe_ptr(test),\n+                      ptr::to_mut_unsafe_ptr(test));\n     }\n }\n "}]}