{"sha": "94e655eca6909fdca6f346e04abdcec8b8cc6e25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZTY1NWVjYTY5MDlmZGNhNmYzNDZlMDRhYmRjZWM4YjhjYzZlMjU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-04T15:37:39Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-04T15:37:39Z"}, "message": "Add -Zhir-stats for collecting statistics on HIR and AST", "tree": {"sha": "8764a785e173757b37cd1e8baba0868707b727fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8764a785e173757b37cd1e8baba0868707b727fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94e655eca6909fdca6f346e04abdcec8b8cc6e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94e655eca6909fdca6f346e04abdcec8b8cc6e25", "html_url": "https://github.com/rust-lang/rust/commit/94e655eca6909fdca6f346e04abdcec8b8cc6e25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94e655eca6909fdca6f346e04abdcec8b8cc6e25/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0", "html_url": "https://github.com/rust-lang/rust/commit/ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0"}], "stats": {"total": 430, "additions": 428, "deletions": 2}, "files": [{"sha": "63eabd5212fd0d8ed0d8a9449944c754571f47a2", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94e655eca6909fdca6f346e04abdcec8b8cc6e25/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e655eca6909fdca6f346e04abdcec8b8cc6e25/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=94e655eca6909fdca6f346e04abdcec8b8cc6e25", "patch": "@@ -918,6 +918,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"the directory the MIR is dumped into\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n           \"print some performance-related statistics\"),\n+    hir_stats: bool = (false, parse_bool, [UNTRACKED],\n+          \"print some statistics about AST and HIR\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "7cd5fd78df528981329792c6f9585bf522e6d81a", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/94e655eca6909fdca6f346e04abdcec8b8cc6e25/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e655eca6909fdca6f346e04abdcec8b8cc6e25/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=94e655eca6909fdca6f346e04abdcec8b8cc6e25", "patch": "@@ -75,6 +75,26 @@ pub fn duration_to_secs_str(dur: Duration) -> String {\n     format!(\"{:.3}\", secs)\n }\n \n+pub fn to_readable_str(mut val: usize) -> String {\n+    let mut groups = vec![];\n+    loop {\n+        let group = val % 1000;\n+\n+        val /= 1000;\n+\n+        if val == 0 {\n+            groups.push(format!(\"{}\", group));\n+            break\n+        } else {\n+            groups.push(format!(\"{:03}\", group));\n+        }\n+    }\n+\n+    groups.reverse();\n+\n+    groups.join(\"_\")\n+}\n+\n pub fn record_time<T, F>(accu: &Cell<Duration>, f: F) -> T where\n     F: FnOnce() -> T,\n {\n@@ -264,3 +284,17 @@ pub fn path2cstr(p: &Path) -> CString {\n pub fn path2cstr(p: &Path) -> CString {\n     CString::new(p.to_str().unwrap()).unwrap()\n }\n+\n+\n+#[test]\n+fn test_to_readable_str() {\n+    assert_eq!(\"0\", to_readable_str(0));\n+    assert_eq!(\"1\", to_readable_str(1));\n+    assert_eq!(\"99\", to_readable_str(99));\n+    assert_eq!(\"999\", to_readable_str(999));\n+    assert_eq!(\"1_000\", to_readable_str(1_000));\n+    assert_eq!(\"1_001\", to_readable_str(1_001));\n+    assert_eq!(\"999_999\", to_readable_str(999_999));\n+    assert_eq!(\"1_000_000\", to_readable_str(1_000_000));\n+    assert_eq!(\"1_234_567\", to_readable_str(1_234_567));\n+}"}, {"sha": "77d2eb0cbce3a6c91424ea69388dccd8227b14e2", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/94e655eca6909fdca6f346e04abdcec8b8cc6e25/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e655eca6909fdca6f346e04abdcec8b8cc6e25/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=94e655eca6909fdca6f346e04abdcec8b8cc6e25", "patch": "@@ -37,7 +37,8 @@ use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n-use rustc_passes::{ast_validation, no_asm, loops, consts, rvalues, static_recursion};\n+use rustc_passes::{ast_validation, no_asm, loops, consts, rvalues,\n+                   static_recursion, hir_stats};\n use rustc_const_eval::check_match;\n use super::Compilation;\n \n@@ -513,6 +514,10 @@ pub fn phase_1_parse_input<'a>(sess: &'a Session, input: &Input) -> PResult<'a,\n         syntax::show_span::run(sess.diagnostic(), s, &krate);\n     }\n \n+    if sess.opts.debugging_opts.hir_stats {\n+        hir_stats::print_ast_stats(&krate, \"PRE EXPANSION AST STATS\");\n+    }\n+\n     Ok(krate)\n }\n \n@@ -718,6 +723,10 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n         println!(\"Post-expansion node count: {}\", count_nodes(&krate));\n     }\n \n+    if sess.opts.debugging_opts.hir_stats {\n+        hir_stats::print_ast_stats(&krate, \"POST EXPANSION AST STATS\");\n+    }\n+\n     if sess.opts.debugging_opts.ast_json {\n         println!(\"{}\", json::as_json(&krate));\n     }\n@@ -758,7 +767,13 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n \n     // Lower ast -> hir.\n     let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {\n-        hir_map::Forest::new(lower_crate(sess, &krate, &mut resolver), &sess.dep_graph)\n+        let hir_crate = lower_crate(sess, &krate, &mut resolver);\n+\n+        if sess.opts.debugging_opts.hir_stats {\n+            hir_stats::print_hir_stats(&hir_crate);\n+        }\n+\n+        hir_map::Forest::new(hir_crate, &sess.dep_graph)\n     });\n \n     // Discard hygiene data, which isn't required past lowering to HIR."}, {"sha": "18586715894f5042ab09819f02228f0ddcb9a229", "filename": "src/librustc_passes/hir_stats.rs", "status": "added", "additions": 374, "deletions": 0, "changes": 374, "blob_url": "https://github.com/rust-lang/rust/blob/94e655eca6909fdca6f346e04abdcec8b8cc6e25/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e655eca6909fdca6f346e04abdcec8b8cc6e25/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=94e655eca6909fdca6f346e04abdcec8b8cc6e25", "patch": "@@ -0,0 +1,374 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The visitors in this module collect sizes and counts of the most important\n+// pieces of AST and HIR. The resulting numbers are good approximations but not\n+// completely accurate (some things might be counted twice, others missed).\n+\n+use rustc::hir;\n+use rustc::hir::intravisit as hir_visit;\n+use rustc::util::common::to_readable_str;\n+use rustc::util::nodemap::{FnvHashMap, FnvHashSet};\n+use syntax::ast::{self, NodeId, AttrId};\n+use syntax::visit as ast_visit;\n+use syntax_pos::Span;\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+enum Id {\n+    Node(NodeId),\n+    Attr(AttrId),\n+    None,\n+}\n+\n+struct NodeData {\n+    count: usize,\n+    size: usize,\n+}\n+\n+struct StatCollector<'k> {\n+    krate: Option<&'k hir::Crate>,\n+    data: FnvHashMap<&'static str, NodeData>,\n+    seen: FnvHashSet<Id>,\n+}\n+\n+pub fn print_hir_stats(krate: &hir::Crate) {\n+    let mut collector = StatCollector {\n+        krate: Some(krate),\n+        data: FnvHashMap(),\n+        seen: FnvHashSet(),\n+    };\n+    hir_visit::walk_crate(&mut collector, krate);\n+    collector.print(\"HIR STATS\");\n+}\n+\n+pub fn print_ast_stats(krate: &ast::Crate, title: &str) {\n+    let mut collector = StatCollector {\n+        krate: None,\n+        data: FnvHashMap(),\n+        seen: FnvHashSet(),\n+    };\n+    ast_visit::walk_crate(&mut collector, krate);\n+    collector.print(title);\n+}\n+\n+impl<'k> StatCollector<'k> {\n+\n+    fn record<T>(&mut self, label: &'static str, id: Id, node: &T) {\n+        if id != Id::None {\n+            if !self.seen.insert(id) {\n+                return\n+            }\n+        }\n+\n+        let entry = self.data.entry(label).or_insert(NodeData {\n+            count: 0,\n+            size: 0,\n+        });\n+\n+        entry.count += 1;\n+        entry.size = ::std::mem::size_of_val(node);\n+    }\n+\n+    fn print(&self, title: &str) {\n+        let mut stats: Vec<_> = self.data.iter().collect();\n+\n+        stats.sort_by_key(|&(_, ref d)| d.count * d.size);\n+\n+        let mut total_size = 0;\n+\n+        println!(\"\\n{}\\n\", title);\n+\n+        println!(\"{:<18}{:>18}{:>14}{:>14}\",\n+            \"Name\", \"Accumulated Size\", \"Count\", \"Item Size\");\n+        println!(\"----------------------------------------------------------------\");\n+\n+        for (label, data) in stats {\n+            println!(\"{:<18}{:>18}{:>14}{:>14}\",\n+                label,\n+                to_readable_str(data.count * data.size),\n+                to_readable_str(data.count),\n+                to_readable_str(data.size));\n+\n+            total_size += data.count * data.size;\n+        }\n+        println!(\"----------------------------------------------------------------\");\n+        println!(\"{:<18}{:>18}\\n\",\n+                \"Total\",\n+                to_readable_str(total_size));\n+    }\n+}\n+\n+impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n+\n+    fn visit_nested_item(&mut self, id: hir::ItemId) {\n+        let nested_item = self.krate.unwrap().item(id.id);\n+        self.visit_item(nested_item)\n+    }\n+\n+    fn visit_item(&mut self, i: &'v hir::Item) {\n+        self.record(\"Item\", Id::Node(i.id), i);\n+        hir_visit::walk_item(self, i)\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////\n+\n+    fn visit_mod(&mut self, m: &'v hir::Mod, _s: Span, n: NodeId) {\n+        self.record(\"Mod\", Id::None, m);\n+        hir_visit::walk_mod(self, m, n)\n+    }\n+    fn visit_foreign_item(&mut self, i: &'v hir::ForeignItem) {\n+        self.record(\"ForeignItem\", Id::Node(i.id), i);\n+        hir_visit::walk_foreign_item(self, i)\n+    }\n+    fn visit_local(&mut self, l: &'v hir::Local) {\n+        self.record(\"Local\", Id::Node(l.id), l);\n+        hir_visit::walk_local(self, l)\n+    }\n+    fn visit_block(&mut self, b: &'v hir::Block) {\n+        self.record(\"Block\", Id::Node(b.id), b);\n+        hir_visit::walk_block(self, b)\n+    }\n+    fn visit_stmt(&mut self, s: &'v hir::Stmt) {\n+        self.record(\"Stmt\", Id::Node(s.node.id()), s);\n+        hir_visit::walk_stmt(self, s)\n+    }\n+    fn visit_arm(&mut self, a: &'v hir::Arm) {\n+        self.record(\"Arm\", Id::None, a);\n+        hir_visit::walk_arm(self, a)\n+    }\n+    fn visit_pat(&mut self, p: &'v hir::Pat) {\n+        self.record(\"Pat\", Id::Node(p.id), p);\n+        hir_visit::walk_pat(self, p)\n+    }\n+    fn visit_decl(&mut self, d: &'v hir::Decl) {\n+        self.record(\"Decl\", Id::None, d);\n+        hir_visit::walk_decl(self, d)\n+    }\n+    fn visit_expr(&mut self, ex: &'v hir::Expr) {\n+        self.record(\"Expr\", Id::Node(ex.id), ex);\n+        hir_visit::walk_expr(self, ex)\n+    }\n+\n+    fn visit_ty(&mut self, t: &'v hir::Ty) {\n+        self.record(\"Ty\", Id::Node(t.id), t);\n+        hir_visit::walk_ty(self, t)\n+    }\n+\n+    fn visit_fn(&mut self,\n+                fk: hir_visit::FnKind<'v>,\n+                fd: &'v hir::FnDecl,\n+                b: &'v hir::Block,\n+                s: Span,\n+                id: NodeId) {\n+        self.record(\"FnDecl\", Id::None, fd);\n+        hir_visit::walk_fn(self, fk, fd, b, s, id)\n+    }\n+\n+    fn visit_where_predicate(&mut self, predicate: &'v hir::WherePredicate) {\n+        self.record(\"WherePredicate\", Id::None, predicate);\n+        hir_visit::walk_where_predicate(self, predicate)\n+    }\n+\n+    fn visit_trait_item(&mut self, ti: &'v hir::TraitItem) {\n+        self.record(\"TraitItem\", Id::Node(ti.id), ti);\n+        hir_visit::walk_trait_item(self, ti)\n+    }\n+    fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n+        self.record(\"ImplItem\", Id::Node(ii.id), ii);\n+        hir_visit::walk_impl_item(self, ii)\n+    }\n+\n+    fn visit_ty_param_bound(&mut self, bounds: &'v hir::TyParamBound) {\n+        self.record(\"TyParamBound\", Id::None, bounds);\n+        hir_visit::walk_ty_param_bound(self, bounds)\n+    }\n+\n+    fn visit_struct_field(&mut self, s: &'v hir::StructField) {\n+        self.record(\"StructField\", Id::Node(s.id), s);\n+        hir_visit::walk_struct_field(self, s)\n+    }\n+\n+    fn visit_variant(&mut self,\n+                     v: &'v hir::Variant,\n+                     g: &'v hir::Generics,\n+                     item_id: NodeId) {\n+        self.record(\"Variant\", Id::None, v);\n+        hir_visit::walk_variant(self, v, g, item_id)\n+    }\n+    fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {\n+        self.record(\"Lifetime\", Id::Node(lifetime.id), lifetime);\n+        hir_visit::walk_lifetime(self, lifetime)\n+    }\n+    fn visit_lifetime_def(&mut self, lifetime: &'v hir::LifetimeDef) {\n+        self.record(\"LifetimeDef\", Id::None, lifetime);\n+        hir_visit::walk_lifetime_def(self, lifetime)\n+    }\n+    fn visit_path(&mut self, path: &'v hir::Path, _id: NodeId) {\n+        self.record(\"Path\", Id::None, path);\n+        hir_visit::walk_path(self, path)\n+    }\n+    fn visit_path_list_item(&mut self,\n+                            prefix: &'v hir::Path,\n+                            item: &'v hir::PathListItem) {\n+        self.record(\"PathListItem\", Id::Node(item.node.id), item);\n+        hir_visit::walk_path_list_item(self, prefix, item)\n+    }\n+    fn visit_path_segment(&mut self,\n+                          path_span: Span,\n+                          path_segment: &'v hir::PathSegment) {\n+        self.record(\"PathSegment\", Id::None, path_segment);\n+        hir_visit::walk_path_segment(self, path_span, path_segment)\n+    }\n+\n+    fn visit_assoc_type_binding(&mut self, type_binding: &'v hir::TypeBinding) {\n+        self.record(\"TypeBinding\", Id::Node(type_binding.id), type_binding);\n+        hir_visit::walk_assoc_type_binding(self, type_binding)\n+    }\n+    fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n+        self.record(\"Attribute\", Id::Attr(attr.node.id), attr);\n+    }\n+    fn visit_macro_def(&mut self, macro_def: &'v hir::MacroDef) {\n+        self.record(\"MacroDef\", Id::Node(macro_def.id), macro_def);\n+        hir_visit::walk_macro_def(self, macro_def)\n+    }\n+}\n+\n+impl<'v> ast_visit::Visitor for StatCollector<'v> {\n+\n+    fn visit_mod(&mut self, m: &ast::Mod, _s: Span, _n: NodeId) {\n+        self.record(\"Mod\", Id::None, m);\n+        ast_visit::walk_mod(self, m)\n+    }\n+\n+    fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n+        self.record(\"ForeignItem\", Id::None, i);\n+        ast_visit::walk_foreign_item(self, i)\n+    }\n+\n+    fn visit_item(&mut self, i: &ast::Item) {\n+        self.record(\"Item\", Id::None, i);\n+        ast_visit::walk_item(self, i)\n+    }\n+\n+    fn visit_local(&mut self, l: &ast::Local) {\n+        self.record(\"Local\", Id::None, l);\n+        ast_visit::walk_local(self, l)\n+    }\n+\n+    fn visit_block(&mut self, b: &ast::Block) {\n+        self.record(\"Block\", Id::None, b);\n+        ast_visit::walk_block(self, b)\n+    }\n+\n+    fn visit_stmt(&mut self, s: &ast::Stmt) {\n+        self.record(\"Stmt\", Id::None, s);\n+        ast_visit::walk_stmt(self, s)\n+    }\n+\n+    fn visit_arm(&mut self, a: &ast::Arm) {\n+        self.record(\"Arm\", Id::None, a);\n+        ast_visit::walk_arm(self, a)\n+    }\n+\n+    fn visit_pat(&mut self, p: &ast::Pat) {\n+        self.record(\"Pat\", Id::None, p);\n+        ast_visit::walk_pat(self, p)\n+    }\n+\n+    fn visit_expr(&mut self, ex: &ast::Expr) {\n+        self.record(\"Expr\", Id::None, ex);\n+        ast_visit::walk_expr(self, ex)\n+    }\n+\n+    fn visit_ty(&mut self, t: &ast::Ty) {\n+        self.record(\"Ty\", Id::None, t);\n+        ast_visit::walk_ty(self, t)\n+    }\n+\n+    fn visit_fn(&mut self,\n+                fk: ast_visit::FnKind,\n+                fd: &ast::FnDecl,\n+                b: &ast::Block,\n+                s: Span,\n+                _: NodeId) {\n+        self.record(\"FnDecl\", Id::None, fd);\n+        ast_visit::walk_fn(self, fk, fd, b, s)\n+    }\n+\n+    fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n+        self.record(\"TraitItem\", Id::None, ti);\n+        ast_visit::walk_trait_item(self, ti)\n+    }\n+\n+    fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n+        self.record(\"ImplItem\", Id::None, ii);\n+        ast_visit::walk_impl_item(self, ii)\n+    }\n+\n+    fn visit_ty_param_bound(&mut self, bounds: &ast::TyParamBound) {\n+        self.record(\"TyParamBound\", Id::None, bounds);\n+        ast_visit::walk_ty_param_bound(self, bounds)\n+    }\n+\n+    fn visit_struct_field(&mut self, s: &ast::StructField) {\n+        self.record(\"StructField\", Id::None, s);\n+        ast_visit::walk_struct_field(self, s)\n+    }\n+\n+    fn visit_variant(&mut self,\n+                     v: &ast::Variant,\n+                     g: &ast::Generics,\n+                     item_id: NodeId) {\n+        self.record(\"Variant\", Id::None, v);\n+        ast_visit::walk_variant(self, v, g, item_id)\n+    }\n+\n+    fn visit_lifetime(&mut self, lifetime: &ast::Lifetime) {\n+        self.record(\"Lifetime\", Id::None, lifetime);\n+        ast_visit::walk_lifetime(self, lifetime)\n+    }\n+\n+    fn visit_lifetime_def(&mut self, lifetime: &ast::LifetimeDef) {\n+        self.record(\"LifetimeDef\", Id::None, lifetime);\n+        ast_visit::walk_lifetime_def(self, lifetime)\n+    }\n+\n+    fn visit_mac(&mut self, mac: &ast::Mac) {\n+        self.record(\"Mac\", Id::None, mac);\n+    }\n+\n+    fn visit_path_list_item(&mut self,\n+                            prefix: &ast::Path,\n+                            item: &ast::PathListItem) {\n+        self.record(\"PathListItem\", Id::None, item);\n+        ast_visit::walk_path_list_item(self, prefix, item)\n+    }\n+\n+    fn visit_path_segment(&mut self,\n+                          path_span: Span,\n+                          path_segment: &ast::PathSegment) {\n+        self.record(\"PathSegment\", Id::None, path_segment);\n+        ast_visit::walk_path_segment(self, path_span, path_segment)\n+    }\n+\n+    fn visit_assoc_type_binding(&mut self, type_binding: &ast::TypeBinding) {\n+        self.record(\"TypeBinding\", Id::None, type_binding);\n+        ast_visit::walk_assoc_type_binding(self, type_binding)\n+    }\n+\n+    fn visit_attribute(&mut self, attr: &ast::Attribute) {\n+        self.record(\"Attribute\", Id::None, attr);\n+    }\n+\n+    fn visit_macro_def(&mut self, macro_def: &ast::MacroDef) {\n+        self.record(\"MacroDef\", Id::None, macro_def);\n+        ast_visit::walk_macro_def(self, macro_def)\n+    }\n+}"}, {"sha": "94816594878ccada8d6dc816454e15b355665b50", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94e655eca6909fdca6f346e04abdcec8b8cc6e25/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e655eca6909fdca6f346e04abdcec8b8cc6e25/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=94e655eca6909fdca6f346e04abdcec8b8cc6e25", "patch": "@@ -45,6 +45,7 @@ pub mod diagnostics;\n \n pub mod ast_validation;\n pub mod consts;\n+pub mod hir_stats;\n pub mod loops;\n pub mod no_asm;\n pub mod rvalues;"}]}