{"sha": "6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d", "node_id": "C_kwDOAAsO6NoAKDZlZTAzZTJiMDE0ZmM5OGUxYmJmZGJmNWMzOTg3MmI4MzA4Y2QxNWQ", "commit": {"author": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-07-21T20:45:12Z"}, "committer": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-07-21T20:50:54Z"}, "message": "unwrap_used: Stop recommending using `expect` when the `expect_used` lint is not allowed", "tree": {"sha": "0cf520ff29cffc441741a09461e0a122abf2e364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf520ff29cffc441741a09461e0a122abf2e364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d", "html_url": "https://github.com/rust-lang/rust/commit/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d/comments", "author": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05a51e5730bb643f4905e711b2cbdbc91e1288d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/05a51e5730bb643f4905e711b2cbdbc91e1288d7", "html_url": "https://github.com/rust-lang/rust/commit/05a51e5730bb643f4905e711b2cbdbc91e1288d7"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "eae6ba693a29226e97aa2b809704f112d03401cf", "filename": "clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_in_test_function;\n use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_in_test_function, is_lint_allowed};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n-use super::UNWRAP_USED;\n+use super::{EXPECT_USED, UNWRAP_USED};\n \n /// lint use of `unwrap()` for `Option`s and `Result`s\n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, allow_unwrap_in_tests: bool) {\n@@ -24,17 +24,22 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n     }\n \n     if let Some((lint, kind, none_value)) = mess {\n+        let help = if is_lint_allowed(cx, EXPECT_USED, expr.hir_id) {\n+            format!(\n+                \"if you don't want to handle the `{none_value}` case gracefully, consider \\\n+                using `expect()` to provide a better panic message\"\n+            )\n+        } else {\n+            format!(\"if this value is an `{none_value}`, it will panic\")\n+        };\n+\n         span_lint_and_help(\n             cx,\n             lint,\n             expr.span,\n-            &format!(\"used `unwrap()` on `{}` value\", kind,),\n+            &format!(\"used `unwrap()` on `{kind}` value\"),\n             None,\n-            &format!(\n-                \"if you don't want to handle the `{}` case gracefully, consider \\\n-                using `expect()` to provide a better panic message\",\n-                none_value,\n-            ),\n+            &help,\n         );\n     }\n }"}, {"sha": "0d4a0504a6e04142ea69b6940c01833b7d9f7bbb", "filename": "tests/ui/unwrap_expect_used.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d/tests%2Fui%2Funwrap_expect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d/tests%2Fui%2Funwrap_expect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.rs?ref=6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d", "patch": "@@ -0,0 +1,10 @@\n+#![warn(clippy::unwrap_used, clippy::expect_used)]\n+\n+fn main() {\n+    Some(3).unwrap();\n+    Some(3).expect(\"Hello world!\");\n+\n+    let a: Result<i32, i32> = Ok(3);\n+    a.unwrap();\n+    a.expect(\"Hello world!\");\n+}"}, {"sha": "a44aed4cb38de6e4c066df0982944ccca95fefb6", "filename": "tests/ui/unwrap_expect_used.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d/tests%2Fui%2Funwrap_expect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d/tests%2Fui%2Funwrap_expect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.stderr?ref=6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d", "patch": "@@ -0,0 +1,36 @@\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_expect_used.rs:4:5\n+   |\n+LL |     Some(3).unwrap();\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n+   = help: if this value is an `None`, it will panic\n+\n+error: used `expect()` on `an Option` value\n+  --> $DIR/unwrap_expect_used.rs:5:5\n+   |\n+LL |     Some(3).expect(\"Hello world!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::expect-used` implied by `-D warnings`\n+   = help: if this value is an `None`, it will panic\n+\n+error: used `unwrap()` on `a Result` value\n+  --> $DIR/unwrap_expect_used.rs:8:5\n+   |\n+LL |     a.unwrap();\n+   |     ^^^^^^^^^^\n+   |\n+   = help: if this value is an `Err`, it will panic\n+\n+error: used `expect()` on `a Result` value\n+  --> $DIR/unwrap_expect_used.rs:9:5\n+   |\n+LL |     a.expect(\"Hello world!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this value is an `Err`, it will panic\n+\n+error: aborting due to 4 previous errors\n+"}]}