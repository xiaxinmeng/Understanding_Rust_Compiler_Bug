{"sha": "e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "node_id": "C_kwDOAAsO6NoAKGUxZWY4MzNiY2E4ZmUyMWNiMmNiYzQyNzk1Y2RhNGI1ODllYzZmMjU", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-27T02:14:54Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-04-04T21:14:08Z"}, "message": "Remove hack, fix fmt and tests", "tree": {"sha": "4c60eec8a68ed7ddac4a40710766bcdb5d89df7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c60eec8a68ed7ddac4a40710766bcdb5d89df7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "html_url": "https://github.com/rust-lang/rust/commit/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6301cab5e3512bf28c69e60e28e8253911702c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6301cab5e3512bf28c69e60e28e8253911702c9", "html_url": "https://github.com/rust-lang/rust/commit/a6301cab5e3512bf28c69e60e28e8253911702c9"}], "stats": {"total": 119, "additions": 72, "deletions": 47}, "files": [{"sha": "408c2ab9675e2c2e6a15a854e09e0d21873c2475", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "patch": "@@ -1756,7 +1756,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         err: &mut Diagnostic,\n     ) -> bool {\n-        let report = |mut candidates: Vec<TraitRef<'_>>, err: &mut Diagnostic| {\n+        let report = |mut candidates: Vec<TraitRef<'tcx>>, err: &mut Diagnostic| {\n             candidates.sort();\n             candidates.dedup();\n             let len = candidates.len();\n@@ -1778,11 +1778,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             let trait_ref = TraitRef::identity(self.tcx, candidates[0].def_id);\n             // Check if the trait is the same in all cases. If so, we'll only show the type.\n-            // FIXME: there *has* to be a better way!\n-            let mut traits: Vec<_> = candidates\n-                .iter()\n-                .map(|c| format!(\"{}\", c).split(\" as \").last().unwrap().to_string())\n-                .collect();\n+            let mut traits: Vec<_> =\n+                candidates.iter().map(|c| c.print_only_trait_path().to_string()).collect();\n             traits.sort();\n             traits.dedup();\n "}, {"sha": "48c61c22e7a32d51b4e49aa331379356d718a611", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "patch": "@@ -40,7 +40,7 @@ LL | |     1_u32\n LL | | }\n    | |_^ the trait `Traitor<N, N>` is not implemented for `u32`\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>\n              <u64 as Traitor<1_u8, 2_u8>>\n \n@@ -65,9 +65,9 @@ LL | |     1_u64\n LL | | }\n    | |_^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n    |\n-   = help: the following implementations were found:\n-             <u64 as Traitor<1_u8, 2_u8>>\n+   = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>\n+             <u64 as Traitor<1_u8, 2_u8>>\n \n error: aborting due to 6 previous errors\n "}, {"sha": "94f802620a302856f2ae25cea7c3b12079f601ad", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "patch": "@@ -72,6 +72,7 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n LL |     let a = t as Box<dyn Gettable<String>>;\n    |             ^ the trait `Copy` is not implemented for `String`\n    |\n+   = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<String>` for `S<String>`\n   --> $DIR/kindck-impl-type-params.rs:14:32\n    |\n@@ -85,6 +86,7 @@ error[E0277]: the trait bound `Foo: Copy` is not satisfied\n LL |     let a: Box<dyn Gettable<Foo>> = t;\n    |                                     ^ the trait `Copy` is not implemented for `Foo`\n    |\n+   = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<Foo>` for `S<Foo>`\n   --> $DIR/kindck-impl-type-params.rs:14:32\n    |"}, {"sha": "7a8433f90572e027dfb1fae29923ea318cb9a090", "filename": "src/test/ui/traits/suggest-deferences/root-obligation.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.fixed?ref=e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "patch": "@@ -11,4 +11,3 @@ fn get_vowel_count(string: &str) -> usize {\n fn main() {\n     let _ = get_vowel_count(\"asdf\");\n }\n-"}, {"sha": "51bac2107e3b4cacc74afdfa1c0ad0af3030e124", "filename": "src/test/ui/traits/suggest-deferences/root-obligation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.rs?ref=e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "patch": "@@ -11,4 +11,3 @@ fn get_vowel_count(string: &str) -> usize {\n fn main() {\n     let _ = get_vowel_count(\"asdf\");\n }\n-"}, {"sha": "264e8024fac3a445fab636c6745c74568ee01a47", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "patch": "@@ -19,7 +19,7 @@ LL | |     ()\n LL | | }\n    | |_^ the trait `Foo<FooX>` is not implemented for `()`\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Foo<A>`:\n              <() as Foo<()>>\n              <() as Foo<u32>>\n "}, {"sha": "348696f25e3b5aaecdc0848204e61354810b897b", "filename": "src/test/ui/type-alias-impl-trait/self-referential-2.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr?ref=e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "patch": "@@ -5,11 +5,15 @@ LL |     42_i32\n    |     ^^^^^^ no implementation for `i32 == Foo`\n    |\n    = help: the trait `PartialEq<Foo>` is not implemented for `i32`\n-   = help: the following implementations were found:\n-             <i32 as PartialEq>\n-             <f32 as PartialEq>\n-             <f64 as PartialEq>\n-             <i128 as PartialEq>\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n \n error: aborting due to previous error"}, {"sha": "838264794194cdc252150201549e907c7850c339", "filename": "src/test/ui/type-alias-impl-trait/self-referential-4.stderr", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr?ref=e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "patch": "@@ -5,11 +5,15 @@ LL |     i\n    |     ^ no implementation for `&i32 == Bar<'b, 'static>`\n    |\n    = help: the trait `PartialEq<Bar<'b, 'static>>` is not implemented for `&i32`\n-   = help: the following implementations were found:\n-             <i32 as PartialEq>\n-             <f32 as PartialEq>\n-             <f64 as PartialEq>\n-             <i128 as PartialEq>\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n \n error[E0277]: can't compare `&i32` with `Foo<'static, 'b>`\n@@ -19,11 +23,15 @@ LL |     i\n    |     ^ no implementation for `&i32 == Foo<'static, 'b>`\n    |\n    = help: the trait `PartialEq<Foo<'static, 'b>>` is not implemented for `&i32`\n-   = help: the following implementations were found:\n-             <i32 as PartialEq>\n-             <f32 as PartialEq>\n-             <f64 as PartialEq>\n-             <i128 as PartialEq>\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n \n error[E0277]: can't compare `&i32` with `Moo<'static, 'a>`\n@@ -33,11 +41,15 @@ LL |     i\n    |     ^ no implementation for `&i32 == Moo<'static, 'a>`\n    |\n    = help: the trait `PartialEq<Moo<'static, 'a>>` is not implemented for `&i32`\n-   = help: the following implementations were found:\n-             <i32 as PartialEq>\n-             <f32 as PartialEq>\n-             <f64 as PartialEq>\n-             <i128 as PartialEq>\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n \n error: aborting due to 3 previous errors"}, {"sha": "2ebb15b88030811ee6b3a877b99ccdc670987086", "filename": "src/test/ui/type-alias-impl-trait/self-referential.stderr", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1ef833bca8fe21cb2cbc42795cda4b589ec6f25/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr?ref=e1ef833bca8fe21cb2cbc42795cda4b589ec6f25", "patch": "@@ -5,11 +5,15 @@ LL |     i\n    |     ^ no implementation for `&i32 == Bar<'b, 'a>`\n    |\n    = help: the trait `PartialEq<Bar<'b, 'a>>` is not implemented for `&i32`\n-   = help: the following implementations were found:\n-             <i32 as PartialEq>\n-             <f32 as PartialEq>\n-             <f64 as PartialEq>\n-             <i128 as PartialEq>\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n \n error[E0277]: can't compare `&i32` with `(i32, &i32)`\n@@ -19,11 +23,15 @@ LL |     (42, i)\n    |          ^ no implementation for `&i32 == (i32, &i32)`\n    |\n    = help: the trait `PartialEq<(i32, &i32)>` is not implemented for `&i32`\n-   = help: the following implementations were found:\n-             <i32 as PartialEq>\n-             <f32 as PartialEq>\n-             <f64 as PartialEq>\n-             <i128 as PartialEq>\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n \n error[E0277]: can't compare `&i32` with `(i32, Moo<'b, 'a>::{opaque#0})`\n@@ -33,11 +41,15 @@ LL |     (42, i)\n    |          ^ no implementation for `&i32 == (i32, Moo<'b, 'a>::{opaque#0})`\n    |\n    = help: the trait `PartialEq<(i32, Moo<'b, 'a>::{opaque#0})>` is not implemented for `&i32`\n-   = help: the following implementations were found:\n-             <i32 as PartialEq>\n-             <f32 as PartialEq>\n-             <f64 as PartialEq>\n-             <i128 as PartialEq>\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n \n error: aborting due to 3 previous errors"}]}