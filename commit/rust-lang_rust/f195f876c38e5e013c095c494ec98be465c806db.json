{"sha": "f195f876c38e5e013c095c494ec98be465c806db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOTVmODc2YzM4ZTVlMDEzYzA5NWM0OTRlYzk4YmU0NjVjODA2ZGI=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-07-24T07:41:50Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-07-24T10:13:39Z"}, "message": "Send dynamic didSave only if the client supports", "tree": {"sha": "48497af2ef1b20a9a5a4367f4ac2ba0b9f99dfe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48497af2ef1b20a9a5a4367f4ac2ba0b9f99dfe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f195f876c38e5e013c095c494ec98be465c806db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f195f876c38e5e013c095c494ec98be465c806db", "html_url": "https://github.com/rust-lang/rust/commit/f195f876c38e5e013c095c494ec98be465c806db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f195f876c38e5e013c095c494ec98be465c806db/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594ce72d1e37dadb23c15b6daf18714200bfd191", "url": "https://api.github.com/repos/rust-lang/rust/commits/594ce72d1e37dadb23c15b6daf18714200bfd191", "html_url": "https://github.com/rust-lang/rust/commit/594ce72d1e37dadb23c15b6daf18714200bfd191"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "93605314a4da8947bf833c599c917ef69002f22a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f195f876c38e5e013c095c494ec98be465c806db/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f195f876c38e5e013c095c494ec98be465c806db/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f195f876c38e5e013c095c494ec98be465c806db", "patch": "@@ -128,6 +128,7 @@ pub struct ClientCapsConfig {\n     pub hover_actions: bool,\n     pub status_notification: bool,\n     pub signature_help_label_offsets: bool,\n+    pub dynamic_watched_files: bool,\n }\n \n impl Config {\n@@ -290,6 +291,12 @@ impl Config {\n     }\n \n     pub fn update_caps(&mut self, caps: &ClientCapabilities) {\n+        if let Some(ws_caps) = caps.workspace.as_ref() {\n+            if let Some(did_change_watched_files) = ws_caps.did_change_watched_files.as_ref() {\n+                self.client_caps.dynamic_watched_files = did_change_watched_files.dynamic_registration.unwrap_or(false);\n+            }\n+        }\n+\n         if let Some(doc_caps) = caps.text_document.as_ref() {\n             if let Some(value) = doc_caps.definition.as_ref().and_then(|it| it.link_support) {\n                 self.client_caps.location_link = value;"}, {"sha": "b44fd9eb4f65c77dc11e3321a76ff0de98c6faa0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f195f876c38e5e013c095c494ec98be465c806db/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f195f876c38e5e013c095c494ec98be465c806db/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f195f876c38e5e013c095c494ec98be465c806db", "patch": "@@ -106,38 +106,41 @@ impl GlobalState {\n             );\n         };\n \n-        let save_registration_options = lsp_types::TextDocumentSaveRegistrationOptions {\n-            include_text: Some(false),\n-            text_document_registration_options: lsp_types::TextDocumentRegistrationOptions {\n-                document_selector: Some(vec![\n-                    lsp_types::DocumentFilter {\n-                        language: None,\n-                        scheme: None,\n-                        pattern: Some(\"**/*.rs\".into()),\n-                    },\n-                    lsp_types::DocumentFilter {\n-                        language: None,\n-                        scheme: None,\n-                        pattern: Some(\"**/Cargo.toml\".into()),\n-                    },\n-                    lsp_types::DocumentFilter {\n-                        language: None,\n-                        scheme: None,\n-                        pattern: Some(\"**/Cargo.lock\".into()),\n-                    },\n-                ]),\n-            },\n-        };\n-\n-        let registration = lsp_types::Registration {\n-            id: \"textDocument/didSave\".to_string(),\n-            method: \"textDocument/didSave\".to_string(),\n-            register_options: Some(serde_json::to_value(save_registration_options).unwrap()),\n-        };\n-        self.send_request::<lsp_types::request::RegisterCapability>(\n-            lsp_types::RegistrationParams { registrations: vec![registration] },\n-            |_, _| (),\n-        );\n+        if self.config.client_caps.dynamic_watched_files {\n+            let save_registration_options = lsp_types::TextDocumentSaveRegistrationOptions {\n+                include_text: Some(false),\n+                text_document_registration_options: lsp_types::TextDocumentRegistrationOptions {\n+                    document_selector: Some(vec![\n+                        lsp_types::DocumentFilter {\n+                            language: None,\n+                            scheme: None,\n+                            pattern: Some(\"**/*.rs\".into()),\n+                        },\n+                        lsp_types::DocumentFilter {\n+                            language: None,\n+                            scheme: None,\n+                            pattern: Some(\"**/Cargo.toml\".into()),\n+                        },\n+                        lsp_types::DocumentFilter {\n+                            language: None,\n+                            scheme: None,\n+                            pattern: Some(\"**/Cargo.lock\".into()),\n+                        },\n+                    ]),\n+                },\n+            };\n+\n+            let registration = lsp_types::Registration {\n+                id: \"textDocument/didSave\".to_string(),\n+                method: \"textDocument/didSave\".to_string(),\n+                register_options: Some(serde_json::to_value(save_registration_options).unwrap()),\n+            };\n+\n+            self.send_request::<lsp_types::request::RegisterCapability>(\n+                lsp_types::RegistrationParams { registrations: vec![registration] },\n+                |_, _| (),\n+            );\n+        }\n \n         self.fetch_workspaces();\n "}]}