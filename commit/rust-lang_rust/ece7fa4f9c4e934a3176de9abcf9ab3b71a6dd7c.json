{"sha": "ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c", "node_id": "C_kwDOAAsO6NoAKGVjZTdmYTRmOWM0ZTkzNGEzMTc2ZGU5YWJjZjlhYjNiNzFhNmRkN2M", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-06T15:39:46Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-28T22:05:35Z"}, "message": "Factor out match_any_diagnostic_items", "tree": {"sha": "011ede8462da640849807cfd8a909e791766881c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/011ede8462da640849807cfd8a909e791766881c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c", "html_url": "https://github.com/rust-lang/rust/commit/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3771fe4adeafc0825a562b5b542ce1be0350b7dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3771fe4adeafc0825a562b5b542ce1be0350b7dd", "html_url": "https://github.com/rust-lang/rust/commit/3771fe4adeafc0825a562b5b542ce1be0350b7dd"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "6decd18b0a3ece3fc35bf7a2dc2ba0eb7627d918", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c", "patch": "@@ -3,10 +3,7 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::expr_sig;\n-use clippy_utils::{\n-    expr_path_res, get_expr_use_or_unification_node, is_lint_allowed, is_lint_allowed, match_any_diagnostic_items,\n-    path_def_id, path_to_local, paths, paths,\n-};\n+use clippy_utils::{get_expr_use_or_unification_node, is_lint_allowed, path_def_id, path_to_local, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;"}, {"sha": "2d67401a15f2d65b96cacdbaa0f92e69c6ae7fce", "filename": "clippy_lints/src/transmute/unsound_collection_transmute.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs?ref=ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c", "patch": "@@ -1,29 +1,31 @@\n use super::utils::is_layout_incompatible;\n use super::UNSOUND_COLLECTION_TRANSMUTE;\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::match_any_diagnostic_items;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::symbol::{sym, Symbol};\n-\n-// used to check for UNSOUND_COLLECTION_TRANSMUTE\n-static COLLECTIONS: &[Symbol] = &[\n-    sym::Vec,\n-    sym::VecDeque,\n-    sym::BinaryHeap,\n-    sym::BTreeSet,\n-    sym::BTreeMap,\n-    sym::HashSet,\n-    sym::HashMap,\n-];\n+use rustc_span::symbol::sym;\n \n /// Checks for `unsound_collection_transmute` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`.\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::Adt(from_adt, from_substs), ty::Adt(to_adt, to_substs)) => {\n-            if from_adt.did != to_adt.did || match_any_diagnostic_items(cx, to_adt.did, COLLECTIONS).is_none() {\n+            if from_adt.did != to_adt.did {\n+                return false;\n+            }\n+            if !matches!(\n+                cx.tcx.get_diagnostic_name(to_adt.did),\n+                Some(\n+                    sym::BTreeMap\n+                        | sym::BTreeSet\n+                        | sym::BinaryHeap\n+                        | sym::HashMap\n+                        | sym::HashSet\n+                        | sym::Vec\n+                        | sym::VecDeque\n+                )\n+            ) {\n                 return false;\n             }\n             if from_substs"}, {"sha": "62066987232a6ffebe72d133fd974f4b3db0d1f4", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=ece7fa4f9c4e934a3176de9abcf9ab3b71a6dd7c", "patch": "@@ -1615,22 +1615,14 @@ pub fn match_function_call<'tcx>(\n /// Checks if the given `DefId` matches any of the paths. Returns the index of matching path, if\n /// any.\n ///\n-/// Please use `match_any_diagnostic_items` if the targets are all diagnostic items.\n+/// Please use `tcx.get_diagnostic_name` if the targets are all diagnostic items.\n pub fn match_any_def_paths(cx: &LateContext<'_>, did: DefId, paths: &[&[&str]]) -> Option<usize> {\n     let search_path = cx.get_def_path(did);\n     paths\n         .iter()\n         .position(|p| p.iter().map(|x| Symbol::intern(x)).eq(search_path.iter().copied()))\n }\n \n-/// Checks if the given `DefId` matches any of provided diagnostic items. Returns the index of\n-/// matching path, if any.\n-pub fn match_any_diagnostic_items(cx: &LateContext<'_>, def_id: DefId, diag_items: &[Symbol]) -> Option<usize> {\n-    diag_items\n-        .iter()\n-        .position(|item| cx.tcx.is_diagnostic_item(*item, def_id))\n-}\n-\n /// Checks if the given `DefId` matches the path.\n pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -> bool {\n     // We should probably move to Symbols in Clippy as well rather than interning every time."}]}