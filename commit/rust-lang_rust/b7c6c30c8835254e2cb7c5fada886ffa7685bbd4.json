{"sha": "b7c6c30c8835254e2cb7c5fada886ffa7685bbd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YzZjMzBjODgzNTI1NGUyY2I3YzVmYWRhODg2ZmZhNzY4NWJiZDQ=", "commit": {"author": {"name": "Pyriphlegethon", "email": "pyriphlegethon.github@gmail.com", "date": "2015-10-07T15:15:44Z"}, "committer": {"name": "Pyriphlegethon", "email": "pyriphlegethon.github@gmail.com", "date": "2015-10-07T15:15:44Z"}, "message": "Change lint description", "tree": {"sha": "d1b7d8ecd3f19e047e17a445c95834eef9ac8413", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1b7d8ecd3f19e047e17a445c95834eef9ac8413"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7c6c30c8835254e2cb7c5fada886ffa7685bbd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c6c30c8835254e2cb7c5fada886ffa7685bbd4", "html_url": "https://github.com/rust-lang/rust/commit/b7c6c30c8835254e2cb7c5fada886ffa7685bbd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7c6c30c8835254e2cb7c5fada886ffa7685bbd4/comments", "author": {"login": "Pyriphlegethon", "id": 13908830, "node_id": "MDQ6VXNlcjEzOTA4ODMw", "avatar_url": "https://avatars.githubusercontent.com/u/13908830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pyriphlegethon", "html_url": "https://github.com/Pyriphlegethon", "followers_url": "https://api.github.com/users/Pyriphlegethon/followers", "following_url": "https://api.github.com/users/Pyriphlegethon/following{/other_user}", "gists_url": "https://api.github.com/users/Pyriphlegethon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pyriphlegethon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pyriphlegethon/subscriptions", "organizations_url": "https://api.github.com/users/Pyriphlegethon/orgs", "repos_url": "https://api.github.com/users/Pyriphlegethon/repos", "events_url": "https://api.github.com/users/Pyriphlegethon/events{/privacy}", "received_events_url": "https://api.github.com/users/Pyriphlegethon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pyriphlegethon", "id": 13908830, "node_id": "MDQ6VXNlcjEzOTA4ODMw", "avatar_url": "https://avatars.githubusercontent.com/u/13908830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pyriphlegethon", "html_url": "https://github.com/Pyriphlegethon", "followers_url": "https://api.github.com/users/Pyriphlegethon/followers", "following_url": "https://api.github.com/users/Pyriphlegethon/following{/other_user}", "gists_url": "https://api.github.com/users/Pyriphlegethon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pyriphlegethon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pyriphlegethon/subscriptions", "organizations_url": "https://api.github.com/users/Pyriphlegethon/orgs", "repos_url": "https://api.github.com/users/Pyriphlegethon/repos", "events_url": "https://api.github.com/users/Pyriphlegethon/events{/privacy}", "received_events_url": "https://api.github.com/users/Pyriphlegethon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7644f8e2a1774c426f520efc50fe3626b31e028c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7644f8e2a1774c426f520efc50fe3626b31e028c", "html_url": "https://github.com/rust-lang/rust/commit/7644f8e2a1774c426f520efc50fe3626b31e028c"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "6c6849ba1057aacac6578015a060eedd32a71bb3", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7c6c30c8835254e2cb7c5fada886ffa7685bbd4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7c6c30c8835254e2cb7c5fada886ffa7685bbd4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b7c6c30c8835254e2cb7c5fada886ffa7685bbd4", "patch": "@@ -42,7 +42,7 @@ name\n [needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)             | warn    | for-looping over a range of indices where an iterator over items would do\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                     | warn    | using a return statement like `return expr;` where an expression would suffice\n [non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                 | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n-[nonsensical_open_options](https://github.com/Manishearth/rust-clippy/wiki#nonsensical_open_options)   | warn    | The options used for opening a file are nonsensical\n+[nonsensical_open_options](https://github.com/Manishearth/rust-clippy/wiki#nonsensical_open_options)   | warn    | nonsensical combination of options for opening a file\n [option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)               | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n [precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                               | warn    | catches operations where precedence may be unclear. See the wiki for a list of cases caught\n [ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                     | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively"}, {"sha": "76a2eeef1ba12627797bb8481b910064154e76f6", "filename": "src/open_options.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b7c6c30c8835254e2cb7c5fada886ffa7685bbd4/src%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c6c30c8835254e2cb7c5fada886ffa7685bbd4/src%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fopen_options.rs?ref=b7c6c30c8835254e2cb7c5fada886ffa7685bbd4", "patch": "@@ -7,7 +7,7 @@ use syntax::ast::Lit_::LitBool;\n declare_lint! {\n     pub NONSENSICAL_OPEN_OPTIONS,\n     Warn,\n-    \"The options used for opening a file are nonsensical\"\n+    \"nonsensical combination of options for opening a file\"\n }\n \n \n@@ -42,14 +42,14 @@ enum Argument {\n \n #[derive(Debug)]\n enum OpenOption {\n-    Write(Argument),\n-    Read(Argument),\n-    Truncate(Argument),\n-    Create(Argument),\n-    Append(Argument)\n+    Write,\n+    Read,\n+    Truncate,\n+    Create,\n+    Append\n }\n \n-fn get_open_options(cx: &LateContext, argument: &Expr, options: &mut Vec<OpenOption>) {\n+fn get_open_options(cx: &LateContext, argument: &Expr, options: &mut Vec<(OpenOption, Argument)>) {\n     if let ExprMethodCall(ref name, _, ref arguments) = argument.node {\n         let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&arguments[0]));\n         \n@@ -73,19 +73,19 @@ fn get_open_options(cx: &LateContext, argument: &Expr, options: &mut Vec<OpenOpt\n             \n             match &*name.node.as_str() {\n                 \"create\" => {\n-                    options.push(OpenOption::Create(argument_option));\n+                    options.push((OpenOption::Create, argument_option));\n                 },\n                 \"append\" => {\n-                    options.push(OpenOption::Append(argument_option));\n+                    options.push((OpenOption::Append, argument_option));\n                 },\n                 \"truncate\" => {\n-                    options.push(OpenOption::Truncate(argument_option));\n+                    options.push((OpenOption::Truncate, argument_option));\n                 },\n                 \"read\" => {\n-                    options.push(OpenOption::Read(argument_option));\n+                    options.push((OpenOption::Read, argument_option));\n                 },\n                 \"write\" => {\n-                    options.push(OpenOption::Write(argument_option));\n+                    options.push((OpenOption::Write, argument_option));\n                 },\n                 _ => {}\n             }\n@@ -95,45 +95,45 @@ fn get_open_options(cx: &LateContext, argument: &Expr, options: &mut Vec<OpenOpt\n     }\n }\n \n-fn check_for_duplicates(cx: &LateContext, options: &[OpenOption], span: Span) {\n+fn check_for_duplicates(cx: &LateContext, options: &[(OpenOption, Argument)], span: Span) {\n     // This code is almost duplicated (oh, the irony), but I haven't found a way to unify it.\n-    if options.iter().filter(|o| if let OpenOption::Create(_) = **o {true} else {false}).count() > 1 {\n+    if options.iter().filter(|o| if let (OpenOption::Create, _) = **o {true} else {false}).count() > 1 {\n         span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"The method \\\"create\\\" \\\n                                                        is called more than once\");\n     }\n-    if options.iter().filter(|o| if let OpenOption::Append(_) = **o {true} else {false}).count() > 1 {\n+    if options.iter().filter(|o| if let (OpenOption::Append, _) = **o {true} else {false}).count() > 1 {\n         span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"The method \\\"append\\\" \\\n                                                        is called more than once\");\n     }\n-    if options.iter().filter(|o| if let OpenOption::Truncate(_) = **o {true} else {false}).count() > 1 {\n+    if options.iter().filter(|o| if let (OpenOption::Truncate, _) = **o {true} else {false}).count() > 1 {\n         span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"The method \\\"truncate\\\" \\\n                                                        is called more than once\");\n     }\n-    if options.iter().filter(|o| if let OpenOption::Read(_) = **o {true} else {false}).count() > 1 {\n+    if options.iter().filter(|o| if let (OpenOption::Read, _) = **o {true} else {false}).count() > 1 {\n         span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"The method \\\"read\\\" \\\n                                                        is called more than once\");\n     }\n-    if options.iter().filter(|o| if let OpenOption::Write(_) = **o {true} else {false}).count() > 1 {\n+    if options.iter().filter(|o| if let (OpenOption::Write, _) = **o {true} else {false}).count() > 1 {\n         span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"The method \\\"write\\\" \\\n                                                        is called more than once\");\n     }\n }\n \n-fn check_for_inconsistencies(cx: &LateContext, options: &[OpenOption], span: Span) {\n+fn check_for_inconsistencies(cx: &LateContext, options: &[(OpenOption, Argument)], span: Span) {\n     // Truncate + read makes no sense.\n-    if options.iter().filter(|o| if let OpenOption::Read(Argument::True) = **o {true} else {false}).count() > 0 &&\n-       options.iter().filter(|o| if let OpenOption::Truncate(Argument::True) = **o {true} else {false}).count() > 0 {\n+    if options.iter().filter(|o| if let (OpenOption::Read, Argument::True) = **o {true} else {false}).count() > 0 &&\n+       options.iter().filter(|o| if let (OpenOption::Truncate, Argument::True) = **o {true} else {false}).count() > 0 {\n         span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"File opened with \\\"truncate\\\" and \\\"read\\\"\");\n     }\n     \n     // Append + truncate makes no sense.\n-    if options.iter().filter(|o| if let OpenOption::Append(Argument::True) = **o {true} else {false}).count() > 0 &&\n-       options.iter().filter(|o| if let OpenOption::Truncate(Argument::True) = **o {true} else {false}).count() > 0 {\n+    if options.iter().filter(|o| if let (OpenOption::Append, Argument::True) = **o {true} else {false}).count() > 0 &&\n+       options.iter().filter(|o| if let (OpenOption::Truncate, Argument::True) = **o {true} else {false}).count() > 0 {\n         span_lint(cx, NONSENSICAL_OPEN_OPTIONS, span, \"File opened with \\\"append\\\" and \\\"truncate\\\"\");\n     }\n }\n \n-fn check_open_options(cx: &LateContext, options: &[OpenOption], span: Span) {\n+fn check_open_options(cx: &LateContext, options: &[(OpenOption, Argument)], span: Span) {\n     check_for_duplicates(cx, options, span);\n     check_for_inconsistencies(cx, options, span);\n }"}]}