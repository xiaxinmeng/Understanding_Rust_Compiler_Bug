{"sha": "26a7544aa306d1c22b57798ade4662bd51c3e306", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YTc1NDRhYTMwNmQxYzIyYjU3Nzk4YWRlNDY2MmJkNTFjM2UzMDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-09T16:34:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-09T16:34:55Z"}, "message": "Rollup merge of #60647 - petrochenkov:nospace, r=michaelwoerister\n\ncleanup: Remove `DefIndexAddressSpace`\n\nThe scheme with two address spaces for `DefIndex` was needed in the past, but apparently not needed anymore (after removing `DefId`s from locals and `HirId`-ification).", "tree": {"sha": "90f4a206d063d18a0abeb933bc1d379c085cd095", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90f4a206d063d18a0abeb933bc1d379c085cd095"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26a7544aa306d1c22b57798ade4662bd51c3e306", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc1FavCRBK7hj4Ov3rIwAAdHIIAAF9H5P79aewra9k32V7ho5T\nCryC7B84do+SbEkANyTZIcAquNixGuQJLdlN4SI9m5X3AvN79KI8qAB6o0Nse7Ys\nirLdtEfRCCxEEkwwPVYVXerd+ztpDnz9HLJWEwIt0TpcnHG1jKx9rneQt7EyUM9D\nsGzqxKtx32unZgyjJ/nboYcW15Qt5s66HQFbEKA3kuEZz/+t0ZCoC63ry3qmefmL\nsYnjgFOxCZ1EyGnuhxWcem3IXwupwO3m+jlsSLRWc50bI1T1UYrVhVWkLn7DuVj8\nnlT1TjEOcLX7e2hD7Y3x09+izW2C9dkKFYbbG2DxFWRY7Gv9hEGyU1kFTbHBd/M=\n=Nm1e\n-----END PGP SIGNATURE-----\n", "payload": "tree 90f4a206d063d18a0abeb933bc1d379c085cd095\nparent a74313b4984d12ab131406dbca42021d8acd9c10\nparent ee6d31520071b38f9a2996d60a66d6e2cd965fe7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557419695 +0200\ncommitter GitHub <noreply@github.com> 1557419695 +0200\n\nRollup merge of #60647 - petrochenkov:nospace, r=michaelwoerister\n\ncleanup: Remove `DefIndexAddressSpace`\n\nThe scheme with two address spaces for `DefIndex` was needed in the past, but apparently not needed anymore (after removing `DefId`s from locals and `HirId`-ification).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26a7544aa306d1c22b57798ade4662bd51c3e306", "html_url": "https://github.com/rust-lang/rust/commit/26a7544aa306d1c22b57798ade4662bd51c3e306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26a7544aa306d1c22b57798ade4662bd51c3e306/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a74313b4984d12ab131406dbca42021d8acd9c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/a74313b4984d12ab131406dbca42021d8acd9c10", "html_url": "https://github.com/rust-lang/rust/commit/a74313b4984d12ab131406dbca42021d8acd9c10"}, {"sha": "ee6d31520071b38f9a2996d60a66d6e2cd965fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6d31520071b38f9a2996d60a66d6e2cd965fe7", "html_url": "https://github.com/rust-lang/rust/commit/ee6d31520071b38f9a2996d60a66d6e2cd965fe7"}], "stats": {"total": 649, "additions": 246, "deletions": 403}, "files": [{"sha": "b268a1a494d107cc92b1996b51374f89e61fd2e9", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 11, "deletions": 56, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -1,5 +1,5 @@\n use crate::ty::{self, TyCtxt};\n-use crate::hir::map::definitions::FIRST_FREE_HIGH_DEF_INDEX;\n+use crate::hir::map::definitions::FIRST_FREE_DEF_INDEX;\n use rustc_data_structures::indexed_vec::Idx;\n use serialize;\n use std::fmt;\n@@ -99,17 +99,6 @@ impl serialize::UseSpecializedDecodable for CrateNum {}\n /// A DefIndex is an index into the hir-map for a crate, identifying a\n /// particular definition. It should really be considered an interned\n /// shorthand for a particular DefPath.\n-///\n-/// At the moment we are allocating the numerical values of DefIndexes from two\n-/// address spaces: DefIndexAddressSpace::Low and DefIndexAddressSpace::High.\n-/// This allows us to allocate the DefIndexes of all item-likes\n-/// (Items, TraitItems, and ImplItems) into one of these spaces and\n-/// consequently use a simple array for lookup tables keyed by DefIndex and\n-/// known to be densely populated. This is especially important for the HIR map.\n-///\n-/// Since the DefIndex is mostly treated as an opaque ID, you probably\n-/// don't have to care about these address spaces.\n-\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n pub struct DefIndex(u32);\n \n@@ -119,67 +108,49 @@ pub const CRATE_DEF_INDEX: DefIndex = DefIndex(0);\n \n impl fmt::Debug for DefIndex {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f,\n-               \"DefIndex({}:{})\",\n-               self.address_space().index(),\n-               self.as_array_index())\n+        write!(f, \"DefIndex({})\", self.as_array_index())\n     }\n }\n \n impl DefIndex {\n-    #[inline]\n-    pub fn address_space(&self) -> DefIndexAddressSpace {\n-        match self.0 & 1 {\n-            0 => DefIndexAddressSpace::Low,\n-            1 => DefIndexAddressSpace::High,\n-            _ => unreachable!()\n-        }\n-    }\n-\n     /// Converts this DefIndex into a zero-based array index.\n-    /// This index is the offset within the given DefIndexAddressSpace.\n     #[inline]\n     pub fn as_array_index(&self) -> usize {\n-        (self.0 >> 1) as usize\n+        self.0 as usize\n     }\n \n     #[inline]\n-    pub fn from_array_index(i: usize, address_space: DefIndexAddressSpace) -> DefIndex {\n-        DefIndex::from_raw_u32(((i << 1) | (address_space as usize)) as u32)\n+    pub fn from_array_index(i: usize) -> DefIndex {\n+        DefIndex(i as u32)\n     }\n \n     // Proc macros from a proc-macro crate have a kind of virtual DefIndex. This\n     // function maps the index of the macro within the crate (which is also the\n     // index of the macro in the CrateMetadata::proc_macros array) to the\n     // corresponding DefIndex.\n     pub fn from_proc_macro_index(proc_macro_index: usize) -> DefIndex {\n-        // DefIndex for proc macros start from FIRST_FREE_HIGH_DEF_INDEX,\n-        // because the first FIRST_FREE_HIGH_DEF_INDEX indexes are reserved\n+        // DefIndex for proc macros start from FIRST_FREE_DEF_INDEX,\n+        // because the first FIRST_FREE_DEF_INDEX indexes are reserved\n         // for internal use.\n         let def_index = DefIndex::from_array_index(\n-            proc_macro_index.checked_add(FIRST_FREE_HIGH_DEF_INDEX)\n-                .expect(\"integer overflow adding `proc_macro_index`\"),\n-            DefIndexAddressSpace::High);\n+            proc_macro_index.checked_add(FIRST_FREE_DEF_INDEX)\n+                .expect(\"integer overflow adding `proc_macro_index`\"));\n         assert!(def_index != CRATE_DEF_INDEX);\n         def_index\n     }\n \n     // This function is the reverse of from_proc_macro_index() above.\n     pub fn to_proc_macro_index(self: DefIndex) -> usize {\n-        assert_eq!(self.address_space(), DefIndexAddressSpace::High);\n-\n-        self.as_array_index().checked_sub(FIRST_FREE_HIGH_DEF_INDEX)\n+        self.as_array_index().checked_sub(FIRST_FREE_DEF_INDEX)\n             .unwrap_or_else(|| {\n                 bug!(\"using local index {:?} as proc-macro index\", self)\n             })\n     }\n \n-    // Don't use this if you don't know about the DefIndex encoding.\n     pub fn from_raw_u32(x: u32) -> DefIndex {\n         DefIndex(x)\n     }\n \n-    // Don't use this if you don't know about the DefIndex encoding.\n     pub fn as_raw_u32(&self) -> u32 {\n         self.0\n     }\n@@ -188,19 +159,6 @@ impl DefIndex {\n impl serialize::UseSpecializedEncodable for DefIndex {}\n impl serialize::UseSpecializedDecodable for DefIndex {}\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum DefIndexAddressSpace {\n-    Low = 0,\n-    High = 1,\n-}\n-\n-impl DefIndexAddressSpace {\n-    #[inline]\n-    pub fn index(&self) -> usize {\n-        *self as usize\n-    }\n-}\n-\n /// A `DefId` identifies a particular *definition*, by combining a crate\n /// index and a def index.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n@@ -211,10 +169,7 @@ pub struct DefId {\n \n impl fmt::Debug for DefId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"DefId({}/{}:{}\",\n-               self.krate,\n-               self.index.address_space().index(),\n-               self.index.as_array_index())?;\n+        write!(f, \"DefId({}:{}\", self.krate, self.index.as_array_index())?;\n \n         ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {"}, {"sha": "848e9ca58e59579e81af422549da9cc307d4743e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -36,7 +36,7 @@ use crate::dep_graph::DepGraph;\n use crate::hir::{self, ParamName};\n use crate::hir::HirVec;\n use crate::hir::map::{DefKey, DefPathData, Definitions};\n-use crate::hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n+use crate::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n use crate::hir::def::{Res, DefKind, PartialRes, PerNS};\n use crate::hir::{GenericArg, ConstArg};\n use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n@@ -418,7 +418,6 @@ impl<'a> LoweringContext<'a> {\n                                 owner,\n                                 id,\n                                 DefPathData::Misc,\n-                                DefIndexAddressSpace::High,\n                                 Mark::root(),\n                                 tree.prefix.span,\n                             );\n@@ -962,7 +961,6 @@ impl<'a> LoweringContext<'a> {\n             parent_index,\n             node_id,\n             DefPathData::LifetimeNs(str_name),\n-            DefIndexAddressSpace::High,\n             Mark::root(),\n             span,\n         );\n@@ -1763,7 +1761,6 @@ impl<'a> LoweringContext<'a> {\n                         self.parent,\n                         def_node_id,\n                         DefPathData::LifetimeNs(name.ident().as_interned_str()),\n-                        DefIndexAddressSpace::High,\n                         Mark::root(),\n                         lifetime.span,\n                     );"}, {"sha": "a1cf338bf12ea991e6199dc2363cafc34ffe6723", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -145,15 +145,10 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             );\n         }\n \n-        let (lo, hi) = definitions.def_index_counts_lo_hi();\n-\n         let mut collector = NodeCollector {\n             krate,\n             source_map: sess.source_map(),\n-            map: [\n-                repeat(None).take(lo).collect(),\n-                repeat(None).take(hi).collect(),\n-            ],\n+            map: vec![None; definitions.def_index_count()],\n             parent_node: hir::CRATE_HIR_ID,\n             current_signature_dep_index: root_mod_sig_dep_index,\n             current_full_dep_index: root_mod_full_dep_index,\n@@ -231,7 +226,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>) {\n         debug!(\"hir_map: {:?} => {:?}\", id, entry);\n-        let local_map = &mut self.map[id.owner.address_space().index()][id.owner.as_array_index()];\n+        let local_map = &mut self.map[id.owner.as_array_index()];\n         let i = id.local_id.as_u32() as usize;\n         if local_map.is_none() {\n             *local_map = Some(IndexVec::with_capacity(i + 1));"}, {"sha": "6e7a8f5bc234f01c1049dc0c514b1a39abcb04f1", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -1,5 +1,5 @@\n use crate::hir::map::definitions::*;\n-use crate::hir::def_id::{CRATE_DEF_INDEX, DefIndex, DefIndexAddressSpace};\n+use crate::hir::def_id::{CRATE_DEF_INDEX, DefIndex};\n use crate::session::CrateDisambiguator;\n \n use syntax::ast::*;\n@@ -10,8 +10,6 @@ use syntax::symbol::Symbol;\n use syntax::parse::token::{self, Token};\n use syntax_pos::Span;\n \n-use crate::hir::map::{ITEM_LIKE_SPACE, REGULAR_SPACE};\n-\n /// Creates `DefId`s for nodes in the AST.\n pub struct DefCollector<'a> {\n     definitions: &'a mut Definitions,\n@@ -47,13 +45,12 @@ impl<'a> DefCollector<'a> {\n     fn create_def(&mut self,\n                   node_id: NodeId,\n                   data: DefPathData,\n-                  address_space: DefIndexAddressSpace,\n                   span: Span)\n                   -> DefIndex {\n         let parent_def = self.parent_def.unwrap();\n         debug!(\"create_def(node_id={:?}, data={:?}, parent_def={:?})\", node_id, data, parent_def);\n         self.definitions\n-            .create_def_with_parent(parent_def, node_id, data, address_space, self.expansion, span)\n+            .create_def_with_parent(parent_def, node_id, data, self.expansion, span)\n     }\n \n     pub fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n@@ -85,9 +82,9 @@ impl<'a> DefCollector<'a> {\n         // For async functions, we need to create their inner defs inside of a\n         // closure to match their desugared representation.\n         let fn_def_data = DefPathData::ValueNs(name.as_interned_str());\n-        let fn_def = self.create_def(id, fn_def_data, ITEM_LIKE_SPACE, span);\n+        let fn_def = self.create_def(id, fn_def_data, span);\n         return self.with_parent(fn_def, |this| {\n-            this.create_def(*return_impl_trait_id, DefPathData::ImplTrait, REGULAR_SPACE, span);\n+            this.create_def(*return_impl_trait_id, DefPathData::ImplTrait, span);\n \n             visit::walk_generics(this, generics);\n \n@@ -106,7 +103,7 @@ impl<'a> DefCollector<'a> {\n             visit::walk_fn_ret_ty(this, &decl.output);\n \n             let closure_def = this.create_def(\n-                *closure_id, DefPathData::ClosureExpr, REGULAR_SPACE, span,\n+                *closure_id, DefPathData::ClosureExpr, span,\n             );\n             this.with_parent(closure_def, |this| {\n                 use visit::Visitor;\n@@ -173,14 +170,14 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 return visit::walk_item(self, i);\n             }\n         };\n-        let def = self.create_def(i.id, def_data, ITEM_LIKE_SPACE, i.span);\n+        let def = self.create_def(i.id, def_data, i.span);\n \n         self.with_parent(def, |this| {\n             match i.node {\n                 ItemKind::Struct(ref struct_def, _) | ItemKind::Union(ref struct_def, _) => {\n                     // If this is a unit or tuple-like struct, register the constructor.\n                     if let Some(ctor_hir_id) = struct_def.ctor_id() {\n-                        this.create_def(ctor_hir_id, DefPathData::Ctor, REGULAR_SPACE, i.span);\n+                        this.create_def(ctor_hir_id, DefPathData::Ctor, i.span);\n                     }\n                 }\n                 _ => {}\n@@ -190,7 +187,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {\n-        self.create_def(id, DefPathData::Misc, ITEM_LIKE_SPACE, use_tree.span);\n+        self.create_def(id, DefPathData::Misc, use_tree.span);\n         visit::walk_use_tree(self, use_tree, id);\n     }\n \n@@ -201,7 +198,6 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n         let def = self.create_def(foreign_item.id,\n                                   DefPathData::ValueNs(foreign_item.ident.as_interned_str()),\n-                                  REGULAR_SPACE,\n                                   foreign_item.span);\n \n         self.with_parent(def, |this| {\n@@ -212,11 +208,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_variant(&mut self, v: &'a Variant, g: &'a Generics, item_id: NodeId) {\n         let def = self.create_def(v.node.id,\n                                   DefPathData::TypeNs(v.node.ident.as_interned_str()),\n-                                  REGULAR_SPACE,\n                                   v.span);\n         self.with_parent(def, |this| {\n             if let Some(ctor_hir_id) = v.node.data.ctor_id() {\n-                this.create_def(ctor_hir_id, DefPathData::Ctor, REGULAR_SPACE, v.span);\n+                this.create_def(ctor_hir_id, DefPathData::Ctor, v.span);\n             }\n             visit::walk_variant(this, v, g, item_id)\n         });\n@@ -229,7 +224,6 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n             let def = self.create_def(field.id,\n                                       DefPathData::ValueNs(name.as_interned_str()),\n-                                      REGULAR_SPACE,\n                                       field.span);\n             self.with_parent(def, |this| this.visit_struct_field(field));\n         }\n@@ -242,7 +236,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             GenericParamKind::Type { .. } => DefPathData::TypeNs(name),\n             GenericParamKind::Const { .. } => DefPathData::ValueNs(name),\n         };\n-        self.create_def(param.id, def_path_data, REGULAR_SPACE, param.ident.span);\n+        self.create_def(param.id, def_path_data, param.ident.span);\n \n         visit::walk_generic_param(self, param);\n     }\n@@ -257,7 +251,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id),\n         };\n \n-        let def = self.create_def(ti.id, def_data, ITEM_LIKE_SPACE, ti.span);\n+        let def = self.create_def(ti.id, def_data, ti.span);\n         self.with_parent(def, |this| visit::walk_trait_item(this, ti));\n     }\n \n@@ -286,7 +280,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n         };\n \n-        let def = self.create_def(ii.id, def_data, ITEM_LIKE_SPACE, ii.span);\n+        let def = self.create_def(ii.id, def_data, ii.span);\n         self.with_parent(def, |this| visit::walk_impl_item(this, ii));\n     }\n \n@@ -300,7 +294,6 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_anon_const(&mut self, constant: &'a AnonConst) {\n         let def = self.create_def(constant.id,\n                                   DefPathData::AnonConst,\n-                                  REGULAR_SPACE,\n                                   constant.value.span);\n         self.with_parent(def, |this| visit::walk_anon_const(this, constant));\n     }\n@@ -313,7 +306,6 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ExprKind::Closure(_, ref asyncness, ..) => {\n                 let closure_def = self.create_def(expr.id,\n                                           DefPathData::ClosureExpr,\n-                                          REGULAR_SPACE,\n                                           expr.span);\n                 self.parent_def = Some(closure_def);\n \n@@ -322,15 +314,13 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 if let IsAsync::Async { closure_id, .. } = asyncness {\n                     let async_def = self.create_def(*closure_id,\n                                                     DefPathData::ClosureExpr,\n-                                                    REGULAR_SPACE,\n                                                     expr.span);\n                     self.parent_def = Some(async_def);\n                 }\n             }\n             ExprKind::Async(_, async_id, _) => {\n                 let async_def = self.create_def(async_id,\n                                                 DefPathData::ClosureExpr,\n-                                                REGULAR_SPACE,\n                                                 expr.span);\n                 self.parent_def = Some(async_def);\n             }\n@@ -345,7 +335,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         match ty.node {\n             TyKind::Mac(..) => return self.visit_macro_invoc(ty.id),\n             TyKind::ImplTrait(node_id, _) => {\n-                self.create_def(node_id, DefPathData::ImplTrait, REGULAR_SPACE, ty.span);\n+                self.create_def(node_id, DefPathData::ImplTrait, ty.span);\n             }\n             _ => {}\n         }"}, {"sha": "dc6cddc89f9128e490dc49297553ffedae6916f5", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 51, "deletions": 108, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -5,8 +5,7 @@\n //! expressions) that are mostly just leftovers.\n \n use crate::hir;\n-use crate::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n-                  CRATE_DEF_INDEX};\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, CRATE_DEF_INDEX};\n use crate::ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec};\n@@ -26,116 +25,85 @@ use crate::util::nodemap::NodeMap;\n /// Internally the DefPathTable holds a tree of DefKeys, where each DefKey\n /// stores the DefIndex of its parent.\n /// There is one DefPathTable for each crate.\n-#[derive(Default)]\n+#[derive(Clone, Default)]\n pub struct DefPathTable {\n-    index_to_key: [Vec<DefKey>; 2],\n-    def_path_hashes: [Vec<DefPathHash>; 2],\n-}\n-\n-// Unfortunately we have to provide a manual impl of Clone because of the\n-// fixed-sized array field.\n-impl Clone for DefPathTable {\n-    fn clone(&self) -> Self {\n-        DefPathTable {\n-            index_to_key: [self.index_to_key[0].clone(),\n-                           self.index_to_key[1].clone()],\n-            def_path_hashes: [self.def_path_hashes[0].clone(),\n-                              self.def_path_hashes[1].clone()],\n-        }\n-    }\n+    index_to_key: Vec<DefKey>,\n+    def_path_hashes: Vec<DefPathHash>,\n }\n \n impl DefPathTable {\n \n     fn allocate(&mut self,\n                 key: DefKey,\n-                def_path_hash: DefPathHash,\n-                address_space: DefIndexAddressSpace)\n+                def_path_hash: DefPathHash)\n                 -> DefIndex {\n         let index = {\n-            let index_to_key = &mut self.index_to_key[address_space.index()];\n-            let index = DefIndex::from_array_index(index_to_key.len(), address_space);\n+            let index = DefIndex::from_array_index(self.index_to_key.len());\n             debug!(\"DefPathTable::insert() - {:?} <-> {:?}\", key, index);\n-            index_to_key.push(key);\n+            self.index_to_key.push(key);\n             index\n         };\n-        self.def_path_hashes[address_space.index()].push(def_path_hash);\n-        debug_assert!(self.def_path_hashes[address_space.index()].len() ==\n-                      self.index_to_key[address_space.index()].len());\n+        self.def_path_hashes.push(def_path_hash);\n+        debug_assert!(self.def_path_hashes.len() == self.index_to_key.len());\n         index\n     }\n \n-    pub fn next_id(&self, address_space: DefIndexAddressSpace) -> DefIndex {\n-        DefIndex::from_array_index(self.index_to_key[address_space.index()].len(), address_space)\n+    pub fn next_id(&self) -> DefIndex {\n+        DefIndex::from_array_index(self.index_to_key.len())\n     }\n \n     #[inline(always)]\n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n-        self.index_to_key[index.address_space().index()]\n-                         [index.as_array_index()].clone()\n+        self.index_to_key[index.as_array_index()].clone()\n     }\n \n     #[inline(always)]\n     pub fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n-        let ret = self.def_path_hashes[index.address_space().index()]\n-                                      [index.as_array_index()];\n+        let ret = self.def_path_hashes[index.as_array_index()];\n         debug!(\"def_path_hash({:?}) = {:?}\", index, ret);\n         return ret\n     }\n \n     pub fn add_def_path_hashes_to(&self,\n                                   cnum: CrateNum,\n                                   out: &mut FxHashMap<DefPathHash, DefId>) {\n-        for &address_space in &[DefIndexAddressSpace::Low, DefIndexAddressSpace::High] {\n-            out.extend(\n-                (&self.def_path_hashes[address_space.index()])\n-                    .iter()\n-                    .enumerate()\n-                    .map(|(index, &hash)| {\n-                        let def_id = DefId {\n-                            krate: cnum,\n-                            index: DefIndex::from_array_index(index, address_space),\n-                        };\n-                        (hash, def_id)\n-                    })\n-            );\n-        }\n+        out.extend(\n+            self.def_path_hashes\n+                .iter()\n+                .enumerate()\n+                .map(|(index, &hash)| {\n+                    let def_id = DefId {\n+                        krate: cnum,\n+                        index: DefIndex::from_array_index(index),\n+                    };\n+                    (hash, def_id)\n+                })\n+        );\n     }\n \n     pub fn size(&self) -> usize {\n-        self.index_to_key.iter().map(|v| v.len()).sum()\n+        self.index_to_key.len()\n     }\n }\n \n \n impl Encodable for DefPathTable {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         // Index to key\n-        self.index_to_key[DefIndexAddressSpace::Low.index()].encode(s)?;\n-        self.index_to_key[DefIndexAddressSpace::High.index()].encode(s)?;\n+        self.index_to_key.encode(s)?;\n \n         // DefPath hashes\n-        self.def_path_hashes[DefIndexAddressSpace::Low.index()].encode(s)?;\n-        self.def_path_hashes[DefIndexAddressSpace::High.index()].encode(s)?;\n+        self.def_path_hashes.encode(s)?;\n \n         Ok(())\n     }\n }\n \n impl Decodable for DefPathTable {\n     fn decode<D: Decoder>(d: &mut D) -> Result<DefPathTable, D::Error> {\n-        let index_to_key_lo: Vec<DefKey> = Decodable::decode(d)?;\n-        let index_to_key_hi: Vec<DefKey> = Decodable::decode(d)?;\n-\n-        let def_path_hashes_lo: Vec<DefPathHash> = Decodable::decode(d)?;\n-        let def_path_hashes_hi: Vec<DefPathHash> = Decodable::decode(d)?;\n-\n-        let index_to_key = [index_to_key_lo, index_to_key_hi];\n-        let def_path_hashes = [def_path_hashes_lo, def_path_hashes_hi];\n-\n         Ok(DefPathTable {\n-            index_to_key,\n-            def_path_hashes,\n+            index_to_key: Decodable::decode(d)?,\n+            def_path_hashes : Decodable::decode(d)?,\n         })\n     }\n }\n@@ -147,7 +115,7 @@ impl Decodable for DefPathTable {\n pub struct Definitions {\n     table: DefPathTable,\n     node_to_def_index: NodeMap<DefIndex>,\n-    def_index_to_node: [Vec<ast::NodeId>; 2],\n+    def_index_to_node: Vec<ast::NodeId>,\n     pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n     /// If `Mark` is an ID of some macro expansion,\n     /// then `DefId` is the normal module (`mod`) in which the expanded macro was defined.\n@@ -374,30 +342,13 @@ impl Borrow<Fingerprint> for DefPathHash {\n }\n \n impl Definitions {\n-    /// Creates new empty definition map.\n-    ///\n-    /// The `DefIndex` returned from a new `Definitions` are as follows:\n-    /// 1. At `DefIndexAddressSpace::Low`,\n-    ///     CRATE_ROOT has index 0:0, and then new indexes are allocated in\n-    ///     ascending order.\n-    /// 2. At `DefIndexAddressSpace::High`,\n-    ///     the first `FIRST_FREE_HIGH_DEF_INDEX` indexes are reserved for\n-    ///     internal use, then `1:FIRST_FREE_HIGH_DEF_INDEX` are allocated in\n-    ///     ascending order.\n-    //\n-    // FIXME: there is probably a better place to put this comment.\n-    pub fn new() -> Self {\n-        Self::default()\n-    }\n-\n     pub fn def_path_table(&self) -> &DefPathTable {\n         &self.table\n     }\n \n     /// Gets the number of definitions.\n-    pub fn def_index_counts_lo_hi(&self) -> (usize, usize) {\n-        (self.table.index_to_key[DefIndexAddressSpace::Low.index()].len(),\n-         self.table.index_to_key[DefIndexAddressSpace::High.index()].len())\n+    pub fn def_index_count(&self) -> usize {\n+        self.table.index_to_key.len()\n     }\n \n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n@@ -436,17 +387,12 @@ impl Definitions {\n     #[inline]\n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<ast::NodeId> {\n         if def_id.krate == LOCAL_CRATE {\n-            let space_index = def_id.index.address_space().index();\n-            let array_index = def_id.index.as_array_index();\n-            let node_id = self.def_index_to_node[space_index][array_index];\n+            let node_id = self.def_index_to_node[def_id.index.as_array_index()];\n             if node_id != ast::DUMMY_NODE_ID {\n-                Some(node_id)\n-            } else {\n-                None\n+                return Some(node_id);\n             }\n-        } else {\n-            None\n         }\n+        None\n     }\n \n     // FIXME(@ljedrz): replace the NodeId variant\n@@ -471,9 +417,7 @@ impl Definitions {\n \n     #[inline]\n     pub fn def_index_to_hir_id(&self, def_index: DefIndex) -> hir::HirId {\n-        let space_index = def_index.address_space().index();\n-        let array_index = def_index.as_array_index();\n-        let node_id = self.def_index_to_node[space_index][array_index];\n+        let node_id = self.def_index_to_node[def_index.as_array_index()];\n         self.node_to_hir_id[node_id]\n     }\n \n@@ -488,7 +432,11 @@ impl Definitions {\n         }\n     }\n \n-    /// Adds a root definition (no parent).\n+    /// Adds a root definition (no parent) and a few other reserved definitions.\n+    ///\n+    /// After the initial definitions are created the first `FIRST_FREE_DEF_INDEX` indexes\n+    /// are taken, so the \"user\" indexes will be allocated starting with `FIRST_FREE_DEF_INDEX`\n+    /// in ascending order.\n     pub fn create_root_def(&mut self,\n                            crate_name: &str,\n                            crate_disambiguator: CrateDisambiguator)\n@@ -506,11 +454,10 @@ impl Definitions {\n         let def_path_hash = key.compute_stable_hash(parent_hash);\n \n         // Create the definition.\n-        let address_space = super::ITEM_LIKE_SPACE;\n-        let root_index = self.table.allocate(key, def_path_hash, address_space);\n+        let root_index = self.table.allocate(key, def_path_hash);\n         assert_eq!(root_index, CRATE_DEF_INDEX);\n-        assert!(self.def_index_to_node[address_space.index()].is_empty());\n-        self.def_index_to_node[address_space.index()].push(ast::CRATE_NODE_ID);\n+        assert!(self.def_index_to_node.is_empty());\n+        self.def_index_to_node.push(ast::CRATE_NODE_ID);\n         self.node_to_def_index.insert(ast::CRATE_NODE_ID, root_index);\n \n         // Allocate some other DefIndices that always must exist.\n@@ -524,7 +471,6 @@ impl Definitions {\n                                   parent: DefIndex,\n                                   node_id: ast::NodeId,\n                                   data: DefPathData,\n-                                  address_space: DefIndexAddressSpace,\n                                   expansion: Mark,\n                                   span: Span)\n                                   -> DefIndex {\n@@ -561,10 +507,9 @@ impl Definitions {\n         debug!(\"create_def_with_parent: after disambiguation, key = {:?}\", key);\n \n         // Create the definition.\n-        let index = self.table.allocate(key, def_path_hash, address_space);\n-        assert_eq!(index.as_array_index(),\n-                   self.def_index_to_node[address_space.index()].len());\n-        self.def_index_to_node[address_space.index()].push(node_id);\n+        let index = self.table.allocate(key, def_path_hash);\n+        assert_eq!(index.as_array_index(), self.def_index_to_node.len());\n+        self.def_index_to_node.push(node_id);\n \n         // Some things for which we allocate DefIndices don't correspond to\n         // anything in the AST, so they don't have a NodeId. For these cases\n@@ -673,8 +618,7 @@ macro_rules! define_global_metadata_kind {\n             $($variant),*\n         }\n \n-        const GLOBAL_MD_ADDRESS_SPACE: DefIndexAddressSpace = DefIndexAddressSpace::High;\n-        pub const FIRST_FREE_HIGH_DEF_INDEX: usize = count!($($variant)*);\n+        pub const FIRST_FREE_DEF_INDEX: usize = 1 + count!($($variant)*);\n \n         impl GlobalMetaDataKind {\n             fn allocate_def_indices(definitions: &mut Definitions) {\n@@ -684,7 +628,6 @@ macro_rules! define_global_metadata_kind {\n                         CRATE_DEF_INDEX,\n                         ast::DUMMY_NODE_ID,\n                         DefPathData::GlobalMetaData(instance.name().as_interned_str()),\n-                        GLOBAL_MD_ADDRESS_SPACE,\n                         Mark::root(),\n                         DUMMY_SP\n                     );\n@@ -705,12 +648,12 @@ macro_rules! define_global_metadata_kind {\n \n                 // These DefKeys are all right after the root,\n                 // so a linear search is fine.\n-                let index = def_path_table.index_to_key[GLOBAL_MD_ADDRESS_SPACE.index()]\n+                let index = def_path_table.index_to_key\n                                           .iter()\n                                           .position(|k| *k == def_key)\n                                           .unwrap();\n \n-                DefIndex::from_array_index(index, GLOBAL_MD_ADDRESS_SPACE)\n+                DefIndex::from_array_index(index)\n             }\n \n             fn name(&self) -> Symbol {"}, {"sha": "1a48dff213b5ff51cc8012e8a5d98493d747e920", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -5,7 +5,7 @@ pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n \n use crate::dep_graph::{DepGraph, DepNode, DepKind, DepNodeIndex};\n \n-use crate::hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId, DefIndexAddressSpace};\n+use crate::hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId};\n \n use crate::middle::cstore::CrateStoreDyn;\n \n@@ -34,9 +34,6 @@ mod def_collector;\n pub mod definitions;\n mod hir_id_validator;\n \n-pub const ITEM_LIKE_SPACE: DefIndexAddressSpace = DefIndexAddressSpace::Low;\n-pub const REGULAR_SPACE: DefIndexAddressSpace = DefIndexAddressSpace::High;\n-\n /// Represents an entry and its parent `NodeId`.\n #[derive(Copy, Clone, Debug)]\n pub struct Entry<'hir> {\n@@ -163,11 +160,10 @@ impl Forest {\n }\n \n /// This type is effectively a `HashMap<HirId, Entry<'hir>>`,\n-/// but is implemented by 3 layers of arrays.\n-/// - the outer layer is `[A; 2]` and correspond to the 2 address spaces `DefIndex`es can be in\n-/// - then we have `A = Vec<Option<B>>` mapping a `DefIndex`'s index to a inner value\n-/// - which is `B = IndexVec<ItemLocalId, Option<Entry<'hir>>` which finally gives you the `Entry`.\n-pub(super) type HirEntryMap<'hir> = [Vec<Option<IndexVec<ItemLocalId, Option<Entry<'hir>>>>>; 2];\n+/// but it is implemented as 2 layers of arrays.\n+/// - first we have `A = Vec<Option<B>>` mapping a `DefIndex`'s index to an inner value\n+/// - which is `B = IndexVec<ItemLocalId, Option<Entry<'hir>>` which gives you the `Entry`.\n+pub(super) type HirEntryMap<'hir> = Vec<Option<IndexVec<ItemLocalId, Option<Entry<'hir>>>>>;\n \n /// Represents a mapping from `NodeId`s to AST elements and their parent `NodeId`s.\n #[derive(Clone)]\n@@ -193,7 +189,7 @@ pub struct Map<'hir> {\n impl<'hir> Map<'hir> {\n     #[inline]\n     fn lookup(&self, id: HirId) -> Option<&Entry<'hir>> {\n-        let local_map = self.map[id.owner.address_space().index()].get(id.owner.as_array_index())?;\n+        let local_map = self.map.get(id.owner.as_array_index())?;\n         local_map.as_ref()?.get(id.local_id)?.as_ref()\n     }\n \n@@ -1016,29 +1012,21 @@ impl<'hir> Map<'hir> {\n \n     /// Returns an iterator that yields all the hir ids in the map.\n     fn all_ids<'a>(&'a self) -> impl Iterator<Item = HirId> + 'a {\n-        // This code is a bit awkward because the map is implemented as 3 levels of arrays,\n+        // This code is a bit awkward because the map is implemented as 2 levels of arrays,\n         // see the comment on `HirEntryMap`.\n-        let map = &self.map;\n-\n-        // Look at both the def index address spaces\n-        let spaces = [DefIndexAddressSpace::Low, DefIndexAddressSpace::High].iter().cloned();\n-        spaces.flat_map(move |space| {\n-            // Iterate over all the indices in the address space and return a reference to\n-            // local maps and their index given that they exist.\n-            let local_maps = map[space.index()].iter().enumerate().filter_map(|(i, local_map)| {\n-                local_map.as_ref().map(|m| (i, m))\n-            });\n-\n-            local_maps.flat_map(move |(array_index, local_map)| {\n-                // Iterate over each valid entry in the local map\n-                local_map.iter_enumerated().filter_map(move |(i, entry)| entry.map(move |_| {\n-                    // Reconstruct the HirId based on the 3 indices we used to find it\n-                    HirId {\n-                        owner: DefIndex::from_array_index(array_index, space),\n-                        local_id: i,\n-                    }\n-                }))\n-            })\n+        // Iterate over all the indices and return a reference to\n+        // local maps and their index given that they exist.\n+        self.map.iter().enumerate().filter_map(|(i, local_map)| {\n+            local_map.as_ref().map(|m| (i, m))\n+        }).flat_map(move |(array_index, local_map)| {\n+            // Iterate over each valid entry in the local map\n+            local_map.iter_enumerated().filter_map(move |(i, entry)| entry.map(move |_| {\n+                // Reconstruct the HirId based on the 3 indices we used to find it\n+                HirId {\n+                    owner: DefIndex::from_array_index(array_index),\n+                    local_id: i,\n+                }\n+            }))\n         })\n     }\n "}, {"sha": "2496419640c2e8e3a64e911add85efa14951f0dd", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -298,9 +298,7 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(\n     // negated `CrateNum` (so remote definitions are visited first) and then\n     // by a flattened version of the `DefIndex`.\n     trait_impls.sort_unstable_by_key(|def_id| {\n-        (-(def_id.krate.as_u32() as i64),\n-         def_id.index.address_space().index(),\n-         def_id.index.as_array_index())\n+        (-(def_id.krate.as_u32() as i64), def_id.index.as_array_index())\n     });\n \n     for impl_def_id in trait_impls {"}, {"sha": "fc8bf0baa99f6239e51177312d4f7554a35777ea", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -647,8 +647,7 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n     // alphanumeric. This does not appear in the rendered graph, so it does not\n     // have to be user friendly.\n     let name = format!(\n-        \"hir_id_{}_{}_{}\",\n-        hir_id.owner.address_space().index(),\n+        \"hir_id_{}_{}\",\n         hir_id.owner.as_array_index(),\n         hir_id.local_id.index(),\n     );"}, {"sha": "4b9db466da84307e4d4d55aca13032d5ddc47180", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -9,8 +9,7 @@ use rustc::hir;\n use rustc::middle::cstore::LinkagePreference;\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::hir::def::{self, Res, DefKind, CtorOf, CtorKind};\n-use rustc::hir::def_id::{CrateNum, DefId, DefIndex, DefIndexAddressSpace,\n-                         CRATE_DEF_INDEX, LOCAL_CRATE, LocalDefId};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::middle::lang_items;\n@@ -449,7 +448,7 @@ crate fn proc_macro_def_path_table(crate_root: &CrateRoot,\n                                    proc_macros: &[(ast::Name, Lrc<SyntaxExtension>)])\n                                    -> DefPathTable\n {\n-    let mut definitions = Definitions::new();\n+    let mut definitions = Definitions::default();\n \n     let name = crate_root.name.as_str();\n     let disambiguator = crate_root.disambiguator;\n@@ -460,7 +459,6 @@ crate fn proc_macro_def_path_table(crate_root: &CrateRoot,\n             crate_root,\n             ast::DUMMY_NODE_ID,\n             DefPathData::MacroNs(name.as_interned_str()),\n-            DefIndexAddressSpace::High,\n             Mark::root(),\n             DUMMY_SP);\n         debug!(\"definition for {:?} is {:?}\", name, def_index);"}, {"sha": "4c1e39cd0a9e1a945c1ed3c18ebc8e8cdd1f0f45", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -1,6 +1,6 @@\n use crate::schema::*;\n \n-use rustc::hir::def_id::{DefId, DefIndex, DefIndexAddressSpace};\n+use rustc::hir::def_id::{DefId, DefIndex};\n use rustc_serialize::opaque::Encoder;\n use std::u32;\n use log::debug;\n@@ -75,14 +75,13 @@ impl FixedSizeEncoding for u32 {\n /// appropriate spot by calling `record_position`. We should never\n /// visit the same index twice.\n pub struct Index {\n-    positions: [Vec<u8>; 2]\n+    positions: Vec<u8>,\n }\n \n impl Index {\n-    pub fn new((max_index_lo, max_index_hi): (usize, usize)) -> Index {\n+    pub fn new(max_index: usize) -> Index {\n         Index {\n-            positions: [vec![0xff; max_index_lo * 4],\n-                        vec![0xff; max_index_hi * 4]],\n+            positions: vec![0xff; max_index * 4],\n         }\n     }\n \n@@ -94,10 +93,9 @@ impl Index {\n     pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry<'_>>) {\n         assert!(entry.position < (u32::MAX as usize));\n         let position = entry.position as u32;\n-        let space_index = item.address_space().index();\n         let array_index = item.as_array_index();\n \n-        let positions = &mut self.positions[space_index];\n+        let positions = &mut self.positions;\n         assert!(u32::read_from_bytes_at(positions, array_index) == u32::MAX,\n                 \"recorded position for item {:?} twice, first at {:?} and now at {:?}\",\n                 item,\n@@ -111,13 +109,10 @@ impl Index {\n         let pos = buf.position();\n \n         // First we write the length of the lower range ...\n-        buf.emit_raw_bytes(&(self.positions[0].len() as u32 / 4).to_le_bytes());\n-        // ... then the values in the lower range ...\n-        buf.emit_raw_bytes(&self.positions[0]);\n-        // ... then the values in the higher range.\n-        buf.emit_raw_bytes(&self.positions[1]);\n-        LazySeq::with_position_and_length(pos as usize,\n-            (self.positions[0].len() + self.positions[1].len()) / 4 + 1)\n+        buf.emit_raw_bytes(&(self.positions.len() as u32 / 4).to_le_bytes());\n+        // ... then the values.\n+        buf.emit_raw_bytes(&self.positions);\n+        LazySeq::with_position_and_length(pos as usize, self.positions.len() / 4 + 1)\n     }\n }\n \n@@ -131,16 +126,7 @@ impl<'tcx> LazySeq<Index> {\n                def_index,\n                self.len);\n \n-        let i = def_index.as_array_index() + match def_index.address_space() {\n-            DefIndexAddressSpace::Low => 0,\n-            DefIndexAddressSpace::High => {\n-                // This is a DefIndex in the higher range, so find out where\n-                // that starts:\n-                u32::read_from_bytes_at(bytes, 0) as usize\n-            }\n-        };\n-\n-        let position = u32::read_from_bytes_at(bytes, 1 + i);\n+        let position = u32::read_from_bytes_at(bytes, 1 + def_index.as_array_index());\n         if position == u32::MAX {\n             debug!(\"Index::lookup: position=u32::MAX\");\n             None"}, {"sha": "e780693a5a92dda349899727efea5fc4424fa8bf", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'b, 'tcx> DerefMut for IndexBuilder<'a, 'b, 'tcx> {\n impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n     pub fn new(ecx: &'a mut EncodeContext<'b, 'tcx>) -> Self {\n         IndexBuilder {\n-            items: Index::new(ecx.tcx.hir().definitions().def_index_counts_lo_hi()),\n+            items: Index::new(ecx.tcx.hir().definitions().def_index_count()),\n             ecx,\n         }\n     }"}, {"sha": "04b0e16cd9a81b296db45c7a8142f636ba73cda5", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -25,9 +25,8 @@ pub fn write_mir_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n // it does not have to be user friendly.\n pub fn graphviz_safe_def_name(def_id: DefId) -> String {\n     format!(\n-        \"{}_{}_{}\",\n+        \"{}_{}\",\n         def_id.krate.index(),\n-        def_id.index.address_space().index(),\n         def_id.index.as_array_index(),\n     )\n }"}, {"sha": "18da89b9099a5c3f0bdbd62c1c5d5dc1df7a6f66", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -1970,7 +1970,7 @@ impl<'a> Resolver<'a> {\n         let mut module_map = FxHashMap::default();\n         module_map.insert(DefId::local(CRATE_DEF_INDEX), graph_root);\n \n-        let mut definitions = Definitions::new();\n+        let mut definitions = Definitions::default();\n         DefCollector::new(&mut definitions, Mark::root())\n             .collect_root(crate_name, session.local_crate_disambiguator());\n "}, {"sha": "79a92d595c2edc9ebc64213e20ad8faf7b2ae9d4", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -6,8 +6,7 @@ use crate::ModuleOrUniformRoot;\n use crate::Namespace::*;\n use crate::build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n use crate::resolve_imports::ImportResolver;\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, DefIndex,\n-                         CrateNum, DefIndexAddressSpace};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n@@ -173,8 +172,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>) {\n         let def_id = DefId {\n             krate: CrateNum::BuiltinMacros,\n-            index: DefIndex::from_array_index(self.macro_map.len(),\n-                                              DefIndexAddressSpace::Low),\n+            index: DefIndex::from_array_index(self.macro_map.len()),\n         };\n         let kind = ext.kind();\n         self.macro_map.insert(def_id, ext);"}, {"sha": "e91e3a029dacfe993d8af336c560bf271c1f2128", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -1,6 +1,6 @@\n use rustc_lint;\n use rustc::session::{self, config};\n-use rustc::hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CrateNum, LOCAL_CRATE};\n+use rustc::hir::def_id::{DefId, DefIndex, CrateNum, LOCAL_CRATE};\n use rustc::hir::HirId;\n use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n@@ -112,8 +112,8 @@ impl<'tcx> DocContext<'tcx> {\n     // registered after the AST is constructed would require storing the defid mapping in a\n     // RefCell, decreasing the performance for normal compilation for very little gain.\n     //\n-    // Instead, we construct 'fake' def ids, which start immediately after the last DefId in\n-    // DefIndexAddressSpace::Low. In the Debug impl for clean::Item, we explicitly check for fake\n+    // Instead, we construct 'fake' def ids, which start immediately after the last DefId.\n+    // In the Debug impl for clean::Item, we explicitly check for fake\n     // def ids, as we'll end up with a panic if we use the DefId Debug impl for fake DefIds\n     pub fn next_def_id(&self, crate_num: CrateNum) -> DefId {\n         let start_def_id = {\n@@ -122,11 +122,11 @@ impl<'tcx> DocContext<'tcx> {\n                     .hir()\n                     .definitions()\n                     .def_path_table()\n-                    .next_id(DefIndexAddressSpace::Low)\n+                    .next_id()\n             } else {\n                 self.cstore\n                     .def_path_table(crate_num)\n-                    .next_id(DefIndexAddressSpace::Low)\n+                    .next_id()\n             };\n \n             DefId {\n@@ -142,10 +142,7 @@ impl<'tcx> DocContext<'tcx> {\n             crate_num,\n             DefId {\n                 krate: crate_num,\n-                index: DefIndex::from_array_index(\n-                    def_id.index.as_array_index() + 1,\n-                    def_id.index.address_space(),\n-                ),\n+                index: DefIndex::from_array_index(def_id.index.as_array_index() + 1),\n             },\n         );\n "}, {"sha": "67a6d1d263bf53f543fea3d30f186621d43364ef", "filename": "src/test/mir-opt/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -7,7 +7,7 @@ fn main() {}\n \n // END RUST SOURCE\n // START rustc.main.mir_map.0.dot\n-// digraph Mir_0_0_3 { // The name here MUST be an ASCII identifier.\n+// digraph Mir_0_12 { // The name here MUST be an ASCII identifier.\n //     graph [fontname=\"monospace\"];\n //     node [fontname=\"monospace\"];\n //     edge [fontname=\"monospace\"];"}, {"sha": "0e1db68f37255fb0be265cf82c74ec0c99531ff1", "filename": "src/test/mir-opt/inline-closure-borrows-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -20,7 +20,7 @@ fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n // ...\n // bb0: {\n //     ...\n-//     _3 = [closure@HirId { owner: DefIndex(0:4), local_id: 31 }];\n+//     _3 = [closure@HirId { owner: DefIndex(13), local_id: 31 }];\n //     ...\n //     _4 = &_3;\n //     ..."}, {"sha": "fa8557f3b38a7e9eca6e2d7b6f484685f54740f1", "filename": "src/test/mir-opt/inline-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -16,7 +16,7 @@ fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n // ...\n // bb0: {\n //     ...\n-//     _3 = [closure@HirId { owner: DefIndex(0:4), local_id: 15 }];\n+//     _3 = [closure@HirId { owner: DefIndex(13), local_id: 15 }];\n //     ...\n //     _4 = &_3;\n //     ..."}, {"sha": "33ee0fe61b288811efe073cee15441cb0e748471", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -98,7 +98,7 @@ fn main() {\n // }\n // END rustc.main.EraseRegions.after.mir\n // START rustc.main-{{closure}}.EraseRegions.after.mir\n-// fn main::{{closure}}#0(_1: &[closure@HirId { owner: DefIndex(0:7), local_id: 72 }], _2: &i32) -> &i32 {\n+// fn main::{{closure}}#0(_1: &[closure@HirId { owner: DefIndex(20), local_id: 72 }], _2: &i32) -> &i32 {\n //     ...\n //     bb0: {\n //         Retag([fn entry] _1);"}, {"sha": "cc5ffca10475efa275c7c5184d3e5b0350981ad8", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,9 +4,9 @@ note: No external requirements\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                      ^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:9 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:13 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) i32)),\n+               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) i32)),\n            ]\n \n error: lifetime may not live long enough\n@@ -30,7 +30,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:3 ~ escape_argument_callee[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:12 ~ escape_argument_callee[317d]::test[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "fdf95b8acebfc9c4ac004011f86d2db71a98845c", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,9 +4,9 @@ note: No external requirements\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                      ^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:9 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:13 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32)),\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)),\n            ]\n \n note: No external requirements\n@@ -21,7 +21,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:3 ~ escape_argument[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:12 ~ escape_argument[317d]::test[0]) with substs []\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-argument.rs:27:25"}, {"sha": "135de0445a79989d0c82d367e8443c800f42d342", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |             let mut closure1 = || p = &y;\n    |                                ^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:10 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:14 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]::{{closure}}[0]) with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r mut &'_#2r i32,\n@@ -23,7 +23,7 @@ LL | |             closure1();\n LL | |         };\n    | |_________^\n    |\n-   = note: defining type: DefId(0/1:9 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:13 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r mut &'_#2r i32,\n@@ -44,7 +44,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:3 ~ escape_upvar_nested[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:12 ~ escape_upvar_nested[317d]::test[0]) with substs []\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-upvar-nested.rs:21:40"}, {"sha": "8c37ab7b768c3cc930fe1136427d31a9a20c73da", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |         let mut closure = || p = &y;\n    |                           ^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:9 ~ escape_upvar_ref[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:13 ~ escape_upvar_ref[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r mut &'_#2r i32,\n@@ -25,7 +25,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:3 ~ escape_upvar_ref[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:12 ~ escape_upvar_ref[317d]::test[0]) with substs []\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-upvar-ref.rs:23:35"}, {"sha": "8916fdcfc88f145af2a77f7a3cf4041885a92f6d", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -8,9 +8,9 @@ LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^\n    |\n-   = note: defining type: DefId(0/1:20 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:27 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>)),\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n    = note: late-bound region is '_#4r\n    = note: late-bound region is '_#5r\n@@ -39,7 +39,7 @@ LL | |     );\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:23 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "fa8384311ea578664a7e6b14817c1060c323abb4", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -9,9 +9,9 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:18 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:25 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r\n@@ -30,7 +30,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ propagate_approximated_ref[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:22 ~ propagate_approximated_ref[317d]::supply[0]) with substs []\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-approximated-ref.rs:45:9"}, {"sha": "cfaa75b8ef86169cb071e1535b56bcd88590fcd9", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -8,9 +8,9 @@ LL | |\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:12 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:18 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>)),\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>)),\n            ]\n \n error[E0521]: borrowed data escapes outside of closure\n@@ -35,7 +35,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:5 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]) with substs []\n+   = note: defining type: DefId(0:17 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]) with substs []\n \n note: External requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:35:15\n@@ -46,9 +46,9 @@ LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:13 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:20 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>)),\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>)),\n            ]\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r\n@@ -65,7 +65,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]) with substs []\n+   = note: defining type: DefId(0:19 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]) with substs []\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:30:26"}, {"sha": "601b3577e0eec821abfc0775783873d9abf6e62f", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -10,9 +10,9 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:18 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:25 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) u32>)),\n            ]\n    = note: late-bound region is '_#2r\n    = note: late-bound region is '_#3r\n@@ -31,7 +31,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:22 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]) with substs []\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:5"}, {"sha": "5b5440e7a9641ac29197d49e226b7f35bb6b566f", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -10,9 +10,9 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:18 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:25 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r\n@@ -31,7 +31,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:22 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]) with substs []\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:5"}, {"sha": "a08cde2c9c6352e3238709afb018e563d730e20b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -9,9 +9,9 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:18 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:25 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>)),\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r\n@@ -30,7 +30,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ propagate_approximated_val[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:22 ~ propagate_approximated_val[317d]::test[0]) with substs []\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-approximated-val.rs:38:9"}, {"sha": "60847bb2e92905d8d34c143b40112f8eb630a03a", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -8,9 +8,9 @@ LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^\n    |\n-   = note: defining type: DefId(0/1:16 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:23 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>)),\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n@@ -28,5 +28,5 @@ LL | |     );\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ propagate_despite_same_free_region[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:21 ~ propagate_despite_same_free_region[317d]::supply[0]) with substs []\n "}, {"sha": "a660c763bff78bb780bbce53a7a6520a7f512ca1", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -9,9 +9,9 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:18 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:25 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n    = note: late-bound region is '_#2r\n    = note: late-bound region is '_#3r\n@@ -39,7 +39,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:22 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "9671b8ebff3a42ee6e825f0475579c882827fae3", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -9,9 +9,9 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:18 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:25 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>)),\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r\n@@ -39,7 +39,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:22 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "457b5950b7ff05dd2c51e7b7bb3d820e074b6e30", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -11,7 +11,7 @@ LL | |         require(value);\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:16 ~ propagate_from_trait_match[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:23 ~ propagate_from_trait_match[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -32,7 +32,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ propagate_from_trait_match[317d]::supply[0]) with substs [\n+   = note: defining type: DefId(0:20 ~ propagate_from_trait_match[317d]::supply[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "8aff6d5b892798086ff739f2cfca360d2423b688", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,9 +4,9 @@ note: No external requirements\n LL |     expect_sig(|a, b| b); // ought to return `a`\n    |                ^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:9 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:13 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) i32,\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) i32,\n            ]\n \n error: lifetime may not live long enough\n@@ -27,7 +27,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:3 ~ return_wrong_bound_region[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:12 ~ return_wrong_bound_region[317d]::test[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "9fa54e83812f721cb9bc5927aaf1bc914d9f4704", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:15 ~ projection_no_regions_closure[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:22 ~ projection_no_regions_closure[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -25,7 +25,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ projection_no_regions_closure[317d]::no_region[0]) with substs [\n+   = note: defining type: DefId(0:19 ~ projection_no_regions_closure[317d]::no_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -44,7 +44,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:18 ~ projection_no_regions_closure[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:26 ~ projection_no_regions_closure[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -64,7 +64,7 @@ LL | |     with_signature(x, |mut y| Box::new(y.next()))\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:7 ~ projection_no_regions_closure[317d]::correct_region[0]) with substs [\n+   = note: defining type: DefId(0:23 ~ projection_no_regions_closure[317d]::correct_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -75,7 +75,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:22 ~ projection_no_regions_closure[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:31 ~ projection_no_regions_closure[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -97,7 +97,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:8 ~ projection_no_regions_closure[317d]::wrong_region[0]) with substs [\n+   = note: defining type: DefId(0:27 ~ projection_no_regions_closure[317d]::wrong_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -117,7 +117,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:26 ~ projection_no_regions_closure[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:36 ~ projection_no_regions_closure[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -139,7 +139,7 @@ LL | |     with_signature(x, |mut y| Box::new(y.next()))\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:9 ~ projection_no_regions_closure[317d]::outlives_region[0]) with substs [\n+   = note: defining type: DefId(0:32 ~ projection_no_regions_closure[317d]::outlives_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,"}, {"sha": "10b2bd1af47028e43d93d0f843ded2dffb4b7c1c", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:19 ~ projection_one_region_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:28 ~ projection_one_region_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -27,7 +27,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:24 ~ projection_one_region_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -38,7 +38,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:24 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(25), 'a))`...\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39\n@@ -57,7 +57,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:23 ~ projection_one_region_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:33 ~ projection_one_region_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -80,7 +80,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:9 ~ projection_one_region_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:29 ~ projection_one_region_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -111,7 +111,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:27 ~ projection_one_region_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:38 ~ projection_one_region_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -133,7 +133,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:10 ~ projection_one_region_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:34 ~ projection_one_region_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -145,7 +145,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:31 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:43 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -168,7 +168,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:11 ~ projection_one_region_closure[317d]::elements_outlive[0]) with substs [\n+   = note: defining type: DefId(0:39 ~ projection_one_region_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,"}, {"sha": "b4b74bfc1284f25da7efbc1fffda08d6a9dd8e35", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:19 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:28 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -26,7 +26,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:8 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -48,7 +48,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:23 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:33 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -70,7 +70,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:9 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -93,7 +93,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:27 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -115,7 +115,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:10 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -127,7 +127,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:31 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:43 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -149,7 +149,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:11 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]) with substs [\n+   = note: defining type: DefId(0:39 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -161,7 +161,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:34 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:47 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -182,7 +182,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:12 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]) with substs [\n+   = note: defining type: DefId(0:44 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "a757a43499f4b7472dc80e6ad7cd847b363f0b58", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:19 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:28 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -23,7 +23,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:8 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -34,7 +34,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:23 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:33 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -54,7 +54,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:9 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -66,7 +66,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:27 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -86,7 +86,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:10 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -98,7 +98,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:31 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:43 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -118,7 +118,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:11 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]) with substs [\n+   = note: defining type: DefId(0:39 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -130,7 +130,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:34 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:47 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -149,7 +149,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:12 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]) with substs [\n+   = note: defining type: DefId(0:44 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "a48766cd7340b578927cf1fd02f115e5eeb9dc6f", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:22 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:31 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -27,7 +27,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:26 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -39,15 +39,15 @@ error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), 'a))`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0:26 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(27), 'a))`...\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:27 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:37 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -70,7 +70,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:9 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:32 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -91,7 +91,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:32 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:43 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -114,7 +114,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:10 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:38 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -127,7 +127,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:37 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:49 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -150,7 +150,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:11 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]) with substs [\n+   = note: defining type: DefId(0:44 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -163,7 +163,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:42 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:55 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -186,7 +186,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:12 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]) with substs [\n+   = note: defining type: DefId(0:50 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -199,7 +199,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:46 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:60 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -221,7 +221,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:13 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]) with substs [\n+   = note: defining type: DefId(0:56 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -243,7 +243,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:50 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:65 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -265,7 +265,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:14 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]) with substs [\n+   = note: defining type: DefId(0:61 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -277,7 +277,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:53 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:69 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -298,7 +298,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:15 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]) with substs [\n+   = note: defining type: DefId(0:66 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "2ed94df1f347850648fa2a0fa088a2dd16cbf990", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,10 +4,10 @@ note: External requirements\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:14 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:20 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T)),\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) T)),\n            ]\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n@@ -21,7 +21,7 @@ LL | |     twice(cell, value, |a, b| invoke(a, b));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:5 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]) with substs [\n+   = note: defining type: DefId(0:18 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]) with substs [\n                T,\n            ]\n \n@@ -31,10 +31,10 @@ note: External requirements\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0/1:17 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:24 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T)),\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) T)),\n            ]\n    = note: late-bound region is '_#2r\n    = note: number of external vids: 3\n@@ -49,7 +49,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]) with substs [\n+   = note: defining type: DefId(0:21 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]) with substs [\n                T,\n            ]\n \n@@ -59,7 +59,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(1:15), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:21 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(22), 'a))`...\n \n error: aborting due to previous error\n "}, {"sha": "d689949969d7ed58a6db35014ae4a3f0323c3ad4", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(x, |y| y)\n    |                       ^^^^^\n    |\n-   = note: defining type: DefId(0/1:14 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:20 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -25,7 +25,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:5 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]) with substs [\n+   = note: defining type: DefId(0:17 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "11444c9f72bef6bf3333734e2defdf0446d7dcc9", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a7544aa306d1c22b57798ade4662bd51c3e306/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=26a7544aa306d1c22b57798ade4662bd51c3e306", "patch": "@@ -11,7 +11,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:16 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:23 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n                T,\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T)),\n@@ -32,7 +32,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:6 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]) with substs [\n+   = note: defining type: DefId(0:20 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]) with substs [\n                T,\n            ]\n \n@@ -49,7 +49,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(1:14), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:20 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(21), 'a))`...\n \n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n@@ -64,7 +64,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:19 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:27 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -85,7 +85,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:7 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]) with substs [\n+   = note: defining type: DefId(0:24 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -101,7 +101,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:23 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:32 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -123,7 +123,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:8 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]) with substs [\n+   = note: defining type: DefId(0:28 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -139,7 +139,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(1:20), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:28 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(29), 'a))`...\n \n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26\n@@ -151,7 +151,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0/1:27 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:37 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -173,7 +173,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0/0:9 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]) with substs [\n+   = note: defining type: DefId(0:33 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,"}]}