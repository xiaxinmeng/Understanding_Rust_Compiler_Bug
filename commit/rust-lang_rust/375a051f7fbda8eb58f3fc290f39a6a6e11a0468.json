{"sha": "375a051f7fbda8eb58f3fc290f39a6a6e11a0468", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NWEwNTFmN2ZiZGE4ZWI1OGYzZmMyOTBmMzlhNmE2ZTExYTA0Njg=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-10-09T07:03:08Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-10-09T07:03:08Z"}, "message": "Make interface of the feature more convenient", "tree": {"sha": "52f3e9dff12a1b75ef0bebb14b1d1eaba225a94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52f3e9dff12a1b75ef0bebb14b1d1eaba225a94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375a051f7fbda8eb58f3fc290f39a6a6e11a0468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375a051f7fbda8eb58f3fc290f39a6a6e11a0468", "html_url": "https://github.com/rust-lang/rust/commit/375a051f7fbda8eb58f3fc290f39a6a6e11a0468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375a051f7fbda8eb58f3fc290f39a6a6e11a0468/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8231f46a8f72cc56c92f258bd434fa6234daf3f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8231f46a8f72cc56c92f258bd434fa6234daf3f5", "html_url": "https://github.com/rust-lang/rust/commit/8231f46a8f72cc56c92f258bd434fa6234daf3f5"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "2935b4c99cec42c68f76e5c1c0acc1cd6a1f3d58", "filename": "src/libtest/formatters/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/375a051f7fbda8eb58f3fc290f39a6a6e11a0468/src%2Flibtest%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375a051f7fbda8eb58f3fc290f39a6a6e11a0468/src%2Flibtest%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fpretty.rs?ref=375a051f7fbda8eb58f3fc290f39a6a6e11a0468", "patch": "@@ -209,7 +209,7 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n             TrAllowedFail => self.write_allowed_fail()?,\n             TrBench(ref bs) => {\n                 self.write_bench()?;\n-                self.write_plain(&format!(\": {}\\n\", fmt_bench_samples(bs)))?;\n+                self.write_plain(&format!(\": {}\", fmt_bench_samples(bs)))?;\n             }\n             TrTimedFail => self.write_time_failed()?,\n         }"}, {"sha": "60bd088ea427d2b60c6d3aebbeb8ebc9921e1bbe", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/375a051f7fbda8eb58f3fc290f39a6a6e11a0468/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375a051f7fbda8eb58f3fc290f39a6a6e11a0468/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=375a051f7fbda8eb58f3fc290f39a6a6e11a0468", "patch": "@@ -514,6 +514,10 @@ impl TimeThreshold {\n             durations.next().unwrap_or_else(panic_on_incorrect_value)\n         );\n \n+        if warn > critical {\n+            panic!(\"Test execution warn time should be less or equal to the critical time\");\n+        }\n+\n         Some(Self::new(Duration::from_millis(warn), Duration::from_millis(critical)))\n     }\n }\n@@ -704,17 +708,24 @@ fn optgroups() -> getopts::Options {\n             `RUST_TEST_TIME_UNIT`, `RUST_TEST_TIME_INTEGRATION` and\n             `RUST_TEST_TIME_DOCTEST` environment variables.\n \n+            Expected format of environment variable is `VARIABLE=WARN_TIME,CRITICAL_TIME`.\n+\n             Not available for --format=terse\",\n             \"plain|colored\"\n         )\n         .optflag(\n             \"\",\n-            \"ensure-test-time\",\n+            \"ensure-time\",\n             \"Treat excess of the test execution time limit as error.\n \n             Threshold values for this option can be configured via\n             `RUST_TEST_TIME_UNIT`, `RUST_TEST_TIME_INTEGRATION` and\n-            `RUST_TEST_TIME_DOCTEST` environment variables.\"\n+            `RUST_TEST_TIME_DOCTEST` environment variables.\n+\n+            Expected format of environment variable is `VARIABLE=WARN_TIME,CRITICAL_TIME`.\n+\n+            `CRITICAL_TIME` here means the limit that should not be exceeded by test.\n+            \"\n         );\n     return opts;\n }\n@@ -785,12 +796,15 @@ fn get_time_options(\n -> Option<OptPartRes<TestTimeOptions>> {\n     let report_time = unstable_optflag!(matches, allow_unstable, \"report-time\");\n     let colored_opt_str = matches.opt_str(\"report-time\");\n-    let report_time_colored = report_time && colored_opt_str == Some(\"colored\".into());\n-    let ensure_test_time = unstable_optflag!(matches, allow_unstable, \"ensure-test-time\");\n+    let mut report_time_colored = report_time && colored_opt_str == Some(\"colored\".into());\n+    let ensure_test_time = unstable_optflag!(matches, allow_unstable, \"ensure-time\");\n \n     // If `ensure-test-time` option is provided, time output is enforced,\n     // so user won't be confused if any of tests will silently fail.\n     let options = if report_time || ensure_test_time {\n+        if ensure_test_time && !report_time {\n+            report_time_colored = true;\n+        }\n         Some(TestTimeOptions::new_from_env(ensure_test_time, report_time_colored))\n     } else {\n         None\n@@ -872,7 +886,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     let time_options = match get_time_options(&matches, allow_unstable) {\n         Some(Ok(val)) => val,\n         Some(Err(e)) => return Some(Err(e)),\n-        x => panic!(\"Unexpected output from `get_time_options`: {:?}\", x),\n+        None => panic!(\"Unexpected output from `get_time_options`\"),\n     };\n \n     let test_threads = match matches.opt_str(\"test-threads\") {"}]}