{"sha": "c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b", "node_id": "C_kwDOAAsO6NoAKGM2ZmNiMWM2YTMzZDQ1ZDM0ZmZlZDY4MWU3M2Y2ZThhNWZkMzVlOWI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-15T15:33:46Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-15T15:33:46Z"}, "message": "Merge all `TypeVisitable for &List<T>` impls into one generic one", "tree": {"sha": "495d2f3a04db760f5df9cf0264d574f50c4de90d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/495d2f3a04db760f5df9cf0264d574f50c4de90d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b", "html_url": "https://github.com/rust-lang/rust/commit/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d9306828c08a997c4994c9bb4ec36205dddd5cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d9306828c08a997c4994c9bb4ec36205dddd5cd", "html_url": "https://github.com/rust-lang/rust/commit/9d9306828c08a997c4994c9bb4ec36205dddd5cd"}], "stats": {"total": 54, "additions": 13, "deletions": 41}, "files": [{"sha": "d3cf519b633c71db5860a291a17347e06ac07104", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b", "patch": "@@ -44,6 +44,15 @@ pub struct Canonical<'tcx, V> {\n \n pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;\n \n+impl<'tcx> ty::TypeFoldable<'tcx> for CanonicalVarInfos<'tcx> {\n+    fn try_fold_with<F: ty::FallibleTypeFolder<'tcx>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_canonical_var_infos(v))\n+    }\n+}\n+\n /// A set of values corresponding to the canonical variables from some\n /// `Canonical`. You can give these values to\n /// `canonical_value.substitute` to substitute them into the canonical\n@@ -90,6 +99,7 @@ impl<'tcx> Default for OriginalQueryValues<'tcx> {\n /// a copy of the canonical value in some other inference context,\n /// with fresh inference variables replacing the canonical values.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct CanonicalVarInfo<'tcx> {\n     pub kind: CanonicalVarKind<'tcx>,\n }\n@@ -115,6 +125,7 @@ impl<'tcx> CanonicalVarInfo<'tcx> {\n /// in the type-theory sense of the term -- i.e., a \"meta\" type system\n /// that analyzes type-like values.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum CanonicalVarKind<'tcx> {\n     /// Some kind of type inference variable.\n     Ty(CanonicalTyVarKind),\n@@ -299,14 +310,7 @@ pub type QueryOutlivesConstraint<'tcx> = (\n TrivialTypeTraversalAndLiftImpls! {\n     for <'tcx> {\n         crate::infer::canonical::Certainty,\n-        crate::infer::canonical::CanonicalVarInfo<'tcx>,\n-        crate::infer::canonical::CanonicalVarKind<'tcx>,\n-    }\n-}\n-\n-TrivialTypeTraversalImpls! {\n-    for <'tcx> {\n-        crate::infer::canonical::CanonicalVarInfos<'tcx>,\n+        crate::infer::canonical::CanonicalTyVarKind,\n     }\n }\n "}, {"sha": "27a251f2f56f8271dd6f9d7c0b63ed32ca3e3b44", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b", "patch": "@@ -1,13 +1,7 @@\n //! `TypeVisitable` implementations for MIR types\n \n use super::*;\n-use crate::ty;\n \n-impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE"}, {"sha": "f5fd1f6ffafce2ce0c16bb59ffa6d0c44c22fc9a", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b", "patch": "@@ -602,26 +602,12 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::Existentia\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx>\n-    for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>\n-{\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|p| p.visit_with(visitor))\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<ProjectionKind> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_ty(self)\n@@ -797,12 +783,6 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|p| p.visit_with(visitor))\n-    }\n-}\n-\n impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|x| x.try_fold_with(folder))"}, {"sha": "8e69bf067d08eeb47f6a621005239dc097bbf9d0", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=c6fcb1c6a33d45d34ffed681e73f6e8a5fd35e9b", "patch": "@@ -459,12 +459,6 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for SubstsRef<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is fairly hot, though not as hot as `SubstsRef`.\n@@ -497,7 +491,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &'tcx ty::List<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }"}]}