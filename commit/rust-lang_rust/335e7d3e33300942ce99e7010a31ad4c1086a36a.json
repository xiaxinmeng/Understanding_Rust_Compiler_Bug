{"sha": "335e7d3e33300942ce99e7010a31ad4c1086a36a", "node_id": "C_kwDOAAsO6NoAKDMzNWU3ZDNlMzMzMDA5NDJjZTk5ZTcwMTBhMzFhZDRjMTA4NmEzNmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-01T04:05:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-01T04:05:59Z"}, "message": "Rollup merge of #98745 - thomcc:build-dir-arg, r=jyn514\n\nAdd a `--build-dir` flag to rustbuild\n\nThis adds an optional `--build-dir <path>` flag to rustbuild (to both the python and rust code in src/bootstrap). If provided, it overrides build directory from the config file (if any was provided).\n\nMy reason for wanting this is that I often will make a change, save, and then go run `x.py check` or `x.py test` (or something). Because I've saved, vscode will start doing its thing in the background, but this will take the file lock, preventing `x.py` from running until vscode finishes whatever it's doing (since the manually invoked x.py won't be able to acquire said file lock). This is annoying, because I'd rather the command I explicitly invoke *not* wait for r-a to complete, as r-a's check is conceptually a background task (and one which can take quite some time to complete).\n\nAnyway, while there are likely other ways this could be handled, if you have the disk space an easy way is to just have vscode be configured to use a different build directory, and then they never have to block each-other.\n\nThis can currently be arranged without this patch, by maintaining two `config.toml`s, one of which has a different build dir, and just exists to be passed into the overridden check command in vscode.\n\nUnfortunately, this has the downside of requiring I maintain two `config.toml`s and keep them (at least somewhat) in sync, aside from the build dir. I dislike for several reasons, not the least of which because I know myself well enough to know that these will inevitably get out of sync and confuse me in the future (perhaps this case would be different since I've thought about it enough to write this patch? Who knows, I'd rather not find out).\n\nEither way, it would be much easier for me to have a way for *only* the build directory to differ, which this patch provides by way of a new flag.  I suggested this to `@jyn514` who indicated it sounded reasonable so long as it didn't add too much complexity, which I think I've achieved, but he can be the judge.\n\nAnyway, with this patch I can just use something like `[\"python3\", \"x.py\", \"check\", \"--build-dir\", \"build-vscode\", \"--json-output\"]` as the overridden check command to rust-analyzer, and do not need to futz with any additional `config.toml`s. Which is very nice!\n\nI've tested this manually, and can confirm that it works. I'm not sure if it needs automated tests, or where I should add them if so.\n\nr? `@jyn514` (who has had to put up with my complaints about this... many times. <3)", "tree": {"sha": "a4ccaa0018c02e9f9dca1f3fd9db33f33288d56a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ccaa0018c02e9f9dca1f3fd9db33f33288d56a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/335e7d3e33300942ce99e7010a31ad4c1086a36a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJivnKnCRBK7hj4Ov3rIwAANRkIABB6b+YYO5/Cd+WX9WZgsO9R\nYuXYQ4lnIUx0iLhCs5HCXo3sdtjrDAtjj4EHQiV1os9eJENXTJlPw5xwByHvj1qv\nMyexiHsGE4qv8Oqk4ijXShvUE9N+TGbF33UjjIZ916Vh/ZRAWAUb3ZvR9YPJLeM8\nPMgnjzctDgxYTsX0eeJ2aXJ4aEOtl0H2iLnMPd4LXtPYVqYJeWgCJbdHwVpL2i/9\nh3+xO7E7rDAmYVr0g3jT/CcfK1WsityDhdvU46UBj48k5jbUj4Hp3urvqQQ1PD1k\nEXXKZ9/sWCncctWEth2q5UZLPdVVnFYZO8oKH73RPBpKenKIRZl6IF2pgX1EA5o=\n=3F3b\n-----END PGP SIGNATURE-----\n", "payload": "tree a4ccaa0018c02e9f9dca1f3fd9db33f33288d56a\nparent c4acd06a57f0add28b15a67985ed0d89d00f81d3\nparent 79f8dc0b898b0a387df684a539cd97446a0f964f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656648359 +0200\ncommitter GitHub <noreply@github.com> 1656648359 +0200\n\nRollup merge of #98745 - thomcc:build-dir-arg, r=jyn514\n\nAdd a `--build-dir` flag to rustbuild\n\nThis adds an optional `--build-dir <path>` flag to rustbuild (to both the python and rust code in src/bootstrap). If provided, it overrides build directory from the config file (if any was provided).\n\nMy reason for wanting this is that I often will make a change, save, and then go run `x.py check` or `x.py test` (or something). Because I've saved, vscode will start doing its thing in the background, but this will take the file lock, preventing `x.py` from running until vscode finishes whatever it's doing (since the manually invoked x.py won't be able to acquire said file lock). This is annoying, because I'd rather the command I explicitly invoke *not* wait for r-a to complete, as r-a's check is conceptually a background task (and one which can take quite some time to complete).\n\nAnyway, while there are likely other ways this could be handled, if you have the disk space an easy way is to just have vscode be configured to use a different build directory, and then they never have to block each-other.\n\nThis can currently be arranged without this patch, by maintaining two `config.toml`s, one of which has a different build dir, and just exists to be passed into the overridden check command in vscode.\n\nUnfortunately, this has the downside of requiring I maintain two `config.toml`s and keep them (at least somewhat) in sync, aside from the build dir. I dislike for several reasons, not the least of which because I know myself well enough to know that these will inevitably get out of sync and confuse me in the future (perhaps this case would be different since I've thought about it enough to write this patch? Who knows, I'd rather not find out).\n\nEither way, it would be much easier for me to have a way for *only* the build directory to differ, which this patch provides by way of a new flag.  I suggested this to `@jyn514` who indicated it sounded reasonable so long as it didn't add too much complexity, which I think I've achieved, but he can be the judge.\n\nAnyway, with this patch I can just use something like `[\"python3\", \"x.py\", \"check\", \"--build-dir\", \"build-vscode\", \"--json-output\"]` as the overridden check command to rust-analyzer, and do not need to futz with any additional `config.toml`s. Which is very nice!\n\nI've tested this manually, and can confirm that it works. I'm not sure if it needs automated tests, or where I should add them if so.\n\nr? `@jyn514` (who has had to put up with my complaints about this... many times. <3)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/335e7d3e33300942ce99e7010a31ad4c1086a36a", "html_url": "https://github.com/rust-lang/rust/commit/335e7d3e33300942ce99e7010a31ad4c1086a36a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/335e7d3e33300942ce99e7010a31ad4c1086a36a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4acd06a57f0add28b15a67985ed0d89d00f81d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4acd06a57f0add28b15a67985ed0d89d00f81d3", "html_url": "https://github.com/rust-lang/rust/commit/c4acd06a57f0add28b15a67985ed0d89d00f81d3"}, {"sha": "79f8dc0b898b0a387df684a539cd97446a0f964f", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f8dc0b898b0a387df684a539cd97446a0f964f", "html_url": "https://github.com/rust-lang/rust/commit/79f8dc0b898b0a387df684a539cd97446a0f964f"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "6ead79ef040a98e7945812cbde1d2924b88f846e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/335e7d3e33300942ce99e7010a31ad4c1086a36a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/335e7d3e33300942ce99e7010a31ad4c1086a36a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=335e7d3e33300942ce99e7010a31ad4c1086a36a", "patch": "@@ -866,6 +866,7 @@ def bootstrap(help_triggered):\n \n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')\n+    parser.add_argument('--build-dir')\n     parser.add_argument('--build')\n     parser.add_argument('--color', choices=['always', 'never', 'auto'])\n     parser.add_argument('--clean', action='store_true')\n@@ -915,7 +916,7 @@ def bootstrap(help_triggered):\n \n     build.check_vendored_status()\n \n-    build_dir = build.get_toml('build-dir', 'build') or 'build'\n+    build_dir = args.build_dir or build.get_toml('build-dir', 'build') or 'build'\n     build.build_dir = os.path.abspath(build_dir)\n \n     with open(os.path.join(build.rust_root, \"src\", \"stage0.json\")) as f:"}, {"sha": "2fc18c9e79e32adb782c70b05e46327bcb446a34", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/335e7d3e33300942ce99e7010a31ad4c1086a36a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/335e7d3e33300942ce99e7010a31ad4c1086a36a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=335e7d3e33300942ce99e7010a31ad4c1086a36a", "patch": "@@ -857,7 +857,7 @@ impl Config {\n         let build = toml.build.unwrap_or_default();\n \n         set(&mut config.initial_rustc, build.rustc.map(PathBuf::from));\n-        set(&mut config.out, build.build_dir.map(PathBuf::from));\n+        set(&mut config.out, flags.build_dir.or_else(|| build.build_dir.map(PathBuf::from)));\n         // NOTE: Bootstrap spawns various commands with different working directories.\n         // To avoid writing to random places on the file system, `config.out` needs to be an absolute path.\n         if !config.out.is_absolute() {"}, {"sha": "7ebae55efc168010bae2e8f4d0620fe03f63076d", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/335e7d3e33300942ce99e7010a31ad4c1086a36a/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/335e7d3e33300942ce99e7010a31ad4c1086a36a/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=335e7d3e33300942ce99e7010a31ad4c1086a36a", "patch": "@@ -51,6 +51,7 @@ pub struct Flags {\n     pub host: Option<Vec<TargetSelection>>,\n     pub target: Option<Vec<TargetSelection>>,\n     pub config: Option<PathBuf>,\n+    pub build_dir: Option<PathBuf>,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n     pub incremental: bool,\n@@ -174,6 +175,12 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         opts.optflagmulti(\"v\", \"verbose\", \"use verbose output (-vv for very verbose)\");\n         opts.optflag(\"i\", \"incremental\", \"use incremental compilation\");\n         opts.optopt(\"\", \"config\", \"TOML configuration file for build\", \"FILE\");\n+        opts.optopt(\n+            \"\",\n+            \"build-dir\",\n+            \"Build directory, overrides `build.build-dir` in `config.toml`\",\n+            \"DIR\",\n+        );\n         opts.optopt(\"\", \"build\", \"build target of the stage0 compiler\", \"BUILD\");\n         opts.optmulti(\"\", \"host\", \"host targets to build\", \"HOST\");\n         opts.optmulti(\"\", \"target\", \"target targets to build\", \"TARGET\");\n@@ -649,6 +656,7 @@ Arguments:\n                 None\n             },\n             config: matches.opt_str(\"config\").map(PathBuf::from),\n+            build_dir: matches.opt_str(\"build-dir\").map(PathBuf::from),\n             jobs: matches.opt_str(\"jobs\").map(|j| j.parse().expect(\"`jobs` should be a number\")),\n             cmd,\n             incremental: matches.opt_present(\"incremental\"),"}]}