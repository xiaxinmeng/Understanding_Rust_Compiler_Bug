{"sha": "4512424391768cfad54efb8ccdb1191f61e338c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MTI0MjQzOTE3NjhjZmFkNTRlZmI4Y2NkYjExOTFmNjFlMzM4YzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-26T03:26:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-26T03:26:12Z"}, "message": "Auto merge of #41551 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 9 pull requests\n\n- Successful merges: #39983, #41442, #41463, #41500, #41518, #41527, #41528, #41530, #41535\n- Failed merges:", "tree": {"sha": "741a957d1c96041611a4c21dc5ce6c9bde4512c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/741a957d1c96041611a4c21dc5ce6c9bde4512c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4512424391768cfad54efb8ccdb1191f61e338c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4512424391768cfad54efb8ccdb1191f61e338c2", "html_url": "https://github.com/rust-lang/rust/commit/4512424391768cfad54efb8ccdb1191f61e338c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4512424391768cfad54efb8ccdb1191f61e338c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e7114fe2e26c5ccd6ebbd5686410b61a47820dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7114fe2e26c5ccd6ebbd5686410b61a47820dc", "html_url": "https://github.com/rust-lang/rust/commit/7e7114fe2e26c5ccd6ebbd5686410b61a47820dc"}, {"sha": "1fd8ba9088dc0f945191253076bd5f26511905ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd8ba9088dc0f945191253076bd5f26511905ce", "html_url": "https://github.com/rust-lang/rust/commit/1fd8ba9088dc0f945191253076bd5f26511905ce"}], "stats": {"total": 237, "additions": 221, "deletions": 16}, "files": [{"sha": "ada8d4df604e3550a0a9306a7352633c281a65c5", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=4512424391768cfad54efb8ccdb1191f61e338c2", "patch": "@@ -254,7 +254,12 @@ pub fn debugger_scripts(build: &Build,\n         install(&build.src.join(\"src/etc/\").join(file), &dst, 0o644);\n     };\n     if host.contains(\"windows-msvc\") {\n-        // no debugger scripts\n+        // windbg debugger scripts\n+        install(&build.src.join(\"src/etc/rust-windbg.cmd\"), &sysroot.join(\"bin\"),\n+            0o755);\n+\n+        cp_debugger_script(\"natvis/libcore.natvis\");\n+        cp_debugger_script(\"natvis/libcollections.natvis\");\n     } else {\n         cp_debugger_script(\"debugger_pretty_printers_common.py\");\n "}, {"sha": "fd5b120e81faeceb8a0fd3e2898adeb5d24fead2", "filename": "src/doc/index.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=4512424391768cfad54efb8ccdb1191f61e338c2", "patch": "@@ -32,16 +32,21 @@ nicknamed 'The Rust Bookshelf.'\n * [The Rustonomicon][nomicon] is your guidebook to the dark arts of unsafe Rust.\n * [The Reference][ref] is not a formal spec, but is more detailed and comprehensive than the book.\n \n+Initially, documentation lands in the Unstable Book, and then, as part of the\n+stabilization process, is moved into the Book, Nomicon, or Reference.\n+\n Another few words about the reference: it is guaranteed to be accurate, but not\n-complete. We now have a policy that all new features must be included in the\n-reference before stabilization; however, we are still back-filling things that\n-landed before then. That work is being tracked [here][38643].\n+complete. We have a policy that features must have documentation to be stabilized,\n+but we did not always have this policy, and so there are some stable things that\n+are not yet in the reference. We're working on back-filling things that landed\n+before this policy was put into place. That work is being tracked\n+[here][refchecklist].\n \n [Rust Learning]: https://github.com/ctjhoa/rust-learning\n [Docs.rs]: https://docs.rs/\n [api]: std/index.html\n [ref]: reference/index.html\n-[38643]: https://github.com/rust-lang/rust/issues/38643\n+[refchecklist]: https://github.com/rust-lang-nursery/reference/issues/9\n [err]: error-index.html\n [book]: book/index.html\n [nomicon]: nomicon/index.html"}, {"sha": "4a5d850d66dc7851922e38890b95084c6666c23b", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=4512424391768cfad54efb8ccdb1191f61e338c2", "patch": "@@ -160,6 +160,7 @@\n     - [linked_list_extras](library-features/linked-list-extras.md)\n     - [lookup_host](library-features/lookup-host.md)\n     - [manually_drop](library-features/manually-drop.md)\n+    - [more_io_inner_methods](library-features/more-io-inner-methods.md)\n     - [mpsc_select](library-features/mpsc-select.md)\n     - [n16](library-features/n16.md)\n     - [never_type_impls](library-features/never-type-impls.md)"}, {"sha": "c84f40e7ee551ffa53a4e3abb710f7cfef45432d", "filename": "src/doc/unstable-book/src/library-features/more-io-inner-methods.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md", "raw_url": "https://github.com/rust-lang/rust/raw/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md?ref=4512424391768cfad54efb8ccdb1191f61e338c2", "patch": "@@ -0,0 +1,11 @@\n+# `more_io_inner_methods`\n+\n+The tracking issue for this feature is: [#41519]\n+\n+[#41519]: https://github.com/rust-lang/rust/issues/41519\n+\n+------------------------\n+\n+This feature enables several internal accessor methods on structures in\n+`std::io` including `Take::{get_ref, get_mut}` and `Chain::{into_inner, get_ref,\n+get_mut}`."}, {"sha": "4cdd6b9860996b8218a95fd9e2b33a33bd14a527", "filename": "src/etc/rust-windbg.cmd", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Fetc%2Frust-windbg.cmd", "raw_url": "https://github.com/rust-lang/rust/raw/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Fetc%2Frust-windbg.cmd", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-windbg.cmd?ref=4512424391768cfad54efb8ccdb1191f61e338c2", "patch": "@@ -0,0 +1,18 @@\n+@echo off\n+setlocal\n+\n+REM Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+REM file at the top-level directory of this distribution and at\n+REM http://rust-lang.org/COPYRIGHT.\n+REM\n+REM Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+REM http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+REM <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+REM option. This file may not be copied, modified, or distributed\n+REM except according to those terms.\n+\n+for /f \"delims=\" %%i in ('rustc --print=sysroot') do set rustc_sysroot=%%i\n+\n+set rust_etc=%rustc_sysroot%\\lib\\rustlib\\etc\n+\n+windbg -c \".nvload %rust_etc%\\libcore.natvis;.nvload %rust_etc%\\libcollections.natvis;\" %*\n\\ No newline at end of file"}, {"sha": "fc5de70e98387ed7583c7bc9308e393ceec2aa76", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=4512424391768cfad54efb8ccdb1191f61e338c2", "patch": "@@ -275,7 +275,9 @@ use Bound::{Excluded, Included, Unbounded};\n /// removed data to be erased for security purposes. Even if you drop a `Vec`, its\n /// buffer may simply be reused by another `Vec`. Even if you zero a `Vec`'s memory\n /// first, that may not actually happen because the optimizer does not consider\n-/// this a side-effect that must be preserved.\n+/// this a side-effect that must be preserved. There is one case which we will\n+/// not break, however: using `unsafe` code to write to the excess capacity,\n+/// and then increasing the length to match, is always valid.\n ///\n /// `Vec` does not currently guarantee the order in which elements are dropped\n /// (the order has changed in the past, and may change again).\n@@ -1147,7 +1149,8 @@ impl<T> Vec<T> {\n         self.truncate(0)\n     }\n \n-    /// Returns the number of elements in the vector.\n+    /// Returns the number of elements in the vector, also referred to\n+    /// as its 'length'.\n     ///\n     /// # Examples\n     ///\n@@ -2032,6 +2035,18 @@ impl<'a, T: Clone> From<&'a [T]> for Vec<T> {\n     }\n }\n \n+#[stable(feature = \"vec_from_mut\", since = \"1.21.0\")]\n+impl<'a, T: Clone> From<&'a mut [T]> for Vec<T> {\n+    #[cfg(not(test))]\n+    fn from(s: &'a mut [T]) -> Vec<T> {\n+        s.to_vec()\n+    }\n+    #[cfg(test)]\n+    fn from(s: &'a mut [T]) -> Vec<T> {\n+        ::slice::to_vec(s)\n+    }\n+}\n+\n #[stable(feature = \"vec_from_cow_slice\", since = \"1.14.0\")]\n impl<'a, T> From<Cow<'a, [T]>> for Vec<T> where [T]: ToOwned<Owned=Vec<T>> {\n     fn from(s: Cow<'a, [T]>) -> Vec<T> {"}, {"sha": "b3f4d75c4da617d61e5d6443ec479016e1ffc466", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=4512424391768cfad54efb8ccdb1191f61e338c2", "patch": "@@ -629,8 +629,9 @@ pub trait Iterator {\n     ///\n     /// Note that the underlying iterator is still advanced when [`peek`] is\n     /// called for the first time: In order to retrieve the next element,\n-    /// [`next`] is called on the underlying iterator, hence any side effects of\n-    /// the [`next`] method will occur.\n+    /// [`next`] is called on the underlying iterator, hence any side effects (i.e.\n+    /// anything other than fetching the next value) of the [`next`] method\n+    /// will occur.\n     ///\n     /// [`peek`]: struct.Peekable.html#method.peek\n     /// [`next`]: ../../std/iter/trait.Iterator.html#tymethod.next"}, {"sha": "e2832873e2e674a83d2e80d67503fd2ff83471ce", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 155, "deletions": 6, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4512424391768cfad54efb8ccdb1191f61e338c2", "patch": "@@ -466,6 +466,9 @@ pub trait Read {\n     /// variant will be returned. If an error is returned then it must be\n     /// guaranteed that no bytes were read.\n     ///\n+    /// An error of the `ErrorKind::Interrupted` kind is non-fatal and the read\n+    /// operation should be retried if there is nothing else to do.\n+    ///\n     /// # Examples\n     ///\n     /// [`File`][file]s implement `Read`:\n@@ -481,7 +484,7 @@ pub trait Read {\n     /// let mut f = File::open(\"foo.txt\")?;\n     /// let mut buffer = [0; 10];\n     ///\n-    /// // read 10 bytes\n+    /// // read up to 10 bytes\n     /// f.read(&mut buffer[..])?;\n     /// # Ok(())\n     /// # }\n@@ -885,6 +888,9 @@ pub trait Write {\n     /// It is **not** considered an error if the entire buffer could not be\n     /// written to this writer.\n     ///\n+    /// An error of the `ErrorKind::Interrupted` kind is non-fatal and the\n+    /// write operation should be retried if there is nothing else to do.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -894,6 +900,7 @@ pub trait Write {\n     /// # fn foo() -> std::io::Result<()> {\n     /// let mut buffer = File::create(\"foo.txt\")?;\n     ///\n+    /// // Writes some prefix of the byte string, not necessarily all of it.\n     /// buffer.write(b\"some bytes\")?;\n     /// # Ok(())\n     /// # }\n@@ -929,14 +936,17 @@ pub trait Write {\n \n     /// Attempts to write an entire buffer into this write.\n     ///\n-    /// This method will continuously call `write` while there is more data to\n-    /// write. This method will not return until the entire buffer has been\n-    /// successfully written or an error occurs. The first error generated from\n-    /// this method will be returned.\n+    /// This method will continuously call `write` until there is no more data\n+    /// to be written or an error of non-`ErrorKind::Interrupted` kind is\n+    /// returned. This method will not return until the entire buffer has been\n+    /// successfully written or such an error occurs. The first error that is\n+    /// not of `ErrorKind::Interrupted` kind generated from this method will be\n+    /// returned.\n     ///\n     /// # Errors\n     ///\n-    /// This function will return the first error that `write` returns.\n+    /// This function will return the first error of\n+    /// non-`ErrorKind::Interrupted` kind that `write` returns.\n     ///\n     /// # Examples\n     ///\n@@ -1494,6 +1504,87 @@ pub struct Chain<T, U> {\n     done_first: bool,\n }\n \n+impl<T, U> Chain<T, U> {\n+    /// Consumes the `Chain`, returning the wrapped readers.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(more_io_inner_methods)]\n+    ///\n+    /// # use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut foo_file = File::open(\"foo.txt\")?;\n+    /// let mut bar_file = File::open(\"bar.txt\")?;\n+    ///\n+    /// let chain = foo_file.chain(bar_file);\n+    /// let (foo_file, bar_file) = chain.into_inner();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"more_io_inner_methods\", issue=\"41519\")]\n+    pub fn into_inner(self) -> (T, U) {\n+        (self.first, self.second)\n+    }\n+\n+    /// Gets references to the underlying readers in this `Chain`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(more_io_inner_methods)]\n+    ///\n+    /// # use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut foo_file = File::open(\"foo.txt\")?;\n+    /// let mut bar_file = File::open(\"bar.txt\")?;\n+    ///\n+    /// let chain = foo_file.chain(bar_file);\n+    /// let (foo_file, bar_file) = chain.get_ref();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"more_io_inner_methods\", issue=\"41519\")]\n+    pub fn get_ref(&self) -> (&T, &U) {\n+        (&self.first, &self.second)\n+    }\n+\n+    /// Gets mutable references to the underlying readers in this `Chain`.\n+    ///\n+    /// Care should be taken to avoid modifying the internal I/O state of the\n+    /// underlying readers as doing so may corrupt the internal state of this\n+    /// `Chain`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(more_io_inner_methods)]\n+    ///\n+    /// # use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut foo_file = File::open(\"foo.txt\")?;\n+    /// let mut bar_file = File::open(\"bar.txt\")?;\n+    ///\n+    /// let mut chain = foo_file.chain(bar_file);\n+    /// let (foo_file, bar_file) = chain.get_mut();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"more_io_inner_methods\", issue=\"41519\")]\n+    pub fn get_mut(&mut self) -> (&mut T, &mut U) {\n+        (&mut self.first, &mut self.second)\n+    }\n+}\n+\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: fmt::Debug, U: fmt::Debug> fmt::Debug for Chain<T, U> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -1606,6 +1697,64 @@ impl<T> Take<T> {\n     pub fn into_inner(self) -> T {\n         self.inner\n     }\n+\n+    /// Gets a reference to the underlying reader.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(more_io_inner_methods)]\n+    ///\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    ///\n+    /// let mut buffer = [0; 5];\n+    /// let mut handle = file.take(5);\n+    /// handle.read(&mut buffer)?;\n+    ///\n+    /// let file = handle.get_ref();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"more_io_inner_methods\", issue=\"41519\")]\n+    pub fn get_ref(&self) -> &T {\n+        &self.inner\n+    }\n+\n+    /// Gets a mutable reference to the underlying reader.\n+    ///\n+    /// Care should be taken to avoid modifying the internal I/O state of the\n+    /// underlying reader as doing so may corrupt the internal limit of this\n+    /// `Take`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(more_io_inner_methods)]\n+    ///\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    ///\n+    /// let mut buffer = [0; 5];\n+    /// let mut handle = file.take(5);\n+    /// handle.read(&mut buffer)?;\n+    ///\n+    /// let file = handle.get_mut();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"more_io_inner_methods\", issue=\"41519\")]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        &mut self.inner\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a1ad94872de5c1ae366dee9d9fe84c1eeaf89259", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4512424391768cfad54efb8ccdb1191f61e338c2/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=4512424391768cfad54efb8ccdb1191f61e338c2", "patch": "@@ -157,7 +157,7 @@ mod inner {\n         pub fn sub_duration(&self, other: &Duration) -> Instant {\n             Instant {\n                 t: self.t.checked_sub(dur2intervals(other))\n-                       .expect(\"overflow when adding duration to instant\"),\n+                       .expect(\"overflow when subtracting duration from instant\"),\n             }\n         }\n     }"}]}