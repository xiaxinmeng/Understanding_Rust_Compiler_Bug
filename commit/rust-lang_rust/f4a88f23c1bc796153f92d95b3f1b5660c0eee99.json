{"sha": "f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "node_id": "C_kwDOAAsO6NoAKGY0YTg4ZjIzYzFiYzc5NjE1M2Y5MmQ5NWIzZjFiNTY2MGMwZWVlOTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-16T11:19:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-16T11:19:21Z"}, "message": "Auto merge of #92805 - BoxyUwU:revert-lazy-anon-const-substs, r=lcnr\n\npartially revertish `lazily \"compute\" anon const default substs`\n\nreverts #87280 except for some of the changes around `ty::Unevaluated` having a visitor and a generic for promoted\nwhy revert: <https://github.com/rust-lang/rust/pull/92805#issuecomment-1010736049>\n\nr? `@lcnr`", "tree": {"sha": "aae8e3dd704d1d165807cac1602db1fdf5b9db1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae8e3dd704d1d165807cac1602db1fdf5b9db1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "html_url": "https://github.com/rust-lang/rust/commit/f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "938b4c321b35dd93326850237c732e6537d95b1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/938b4c321b35dd93326850237c732e6537d95b1a", "html_url": "https://github.com/rust-lang/rust/commit/938b4c321b35dd93326850237c732e6537d95b1a"}, {"sha": "fb86f844a4dee8e5449c6ee7477ed9de5541c5e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb86f844a4dee8e5449c6ee7477ed9de5541c5e1", "html_url": "https://github.com/rust-lang/rust/commit/fb86f844a4dee8e5449c6ee7477ed9de5541c5e1"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "af591dd71aa1d37d383570065195df3d6b637821", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -175,8 +175,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                 // skip if there is a `self` parameter binding to a type\n                 // that contains `Self` (i.e.: `self: Box<Self>`), see #4804\n                 if let Some(trait_self_ty) = self.trait_self_ty {\n-                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(self.cx.tcx, cmt.place.ty(), trait_self_ty)\n-                    {\n+                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(cmt.place.ty(), trait_self_ty) {\n                         return;\n                     }\n                 }"}, {"sha": "cb1ef01f5ba9da535914e20717219b40ef8c33af", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n             if let Some(init) = local.init;\n             then {\n                 let init_ty = cx.typeck_results().expr_ty(init);\n-                let contains_sync_guard = init_ty.walk(cx.tcx).any(|inner| match inner.unpack() {\n+                let contains_sync_guard = init_ty.walk().any(|inner| match inner.unpack() {\n                     GenericArgKind::Type(inner_ty) => {\n                         SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, inner_ty, path))\n                     },"}, {"sha": "ab83291461fb4e1526dd727a898c9d84201a0bd2", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -49,7 +49,7 @@ pub(super) fn check<'tcx>(\n         if same_item_push_visitor.should_lint();\n         if let Some((vec, pushed_item)) = same_item_push_visitor.vec_push;\n         let vec_ty = cx.typeck_results().expr_ty(vec);\n-        let ty = vec_ty.walk(cx.tcx).nth(1).unwrap().expect_ty();\n+        let ty = vec_ty.walk().nth(1).unwrap().expect_ty();\n         if cx\n             .tcx\n             .lang_items()"}, {"sha": "ed5136e7d00ff1cbe7c0643f06062916840ed42c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -2129,10 +2129,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             // walk the return type and check for Self (this does not check associated types)\n             if let Some(self_adt) = self_ty.ty_adt_def() {\n-                if contains_adt_constructor(cx.tcx, ret_ty, self_adt) {\n+                if contains_adt_constructor(ret_ty, self_adt) {\n                     return;\n                 }\n-            } else if contains_ty(cx.tcx, ret_ty, self_ty) {\n+            } else if contains_ty(ret_ty, self_ty) {\n                 return;\n             }\n \n@@ -2143,10 +2143,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {\n-                            if contains_adt_constructor(cx.tcx, projection_predicate.ty, self_adt) {\n+                            if contains_adt_constructor(projection_predicate.ty, self_adt) {\n                                 return;\n                             }\n-                        } else if contains_ty(cx.tcx, projection_predicate.ty, self_ty) {\n+                        } else if contains_ty(projection_predicate.ty, self_ty) {\n                             return;\n                         }\n                     }\n@@ -2195,7 +2195,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id());\n             let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n-            if !contains_ty(cx.tcx, ret_ty, self_ty);\n+            if !contains_ty(ret_ty, self_ty);\n \n             then {\n                 span_lint("}, {"sha": "ebd4fb0bf51ccb4390a4fa96fdf7e9c5c42f1549", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -118,7 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n-            .filter(|p| !p.is_global(cx.tcx))\n+            .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n                 match obligation.predicate.kind().no_bound_vars() {"}, {"sha": "afc356d1ab25794b810913ade86be05da6be3c3b", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -188,7 +188,10 @@ fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: D\n \n     let result = cx.tcx.const_eval_resolve(\n         cx.param_env,\n-        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n+        ty::Unevaluated::new(\n+            ty::WithOptConstParam::unknown(def_id),\n+            substs,\n+        ),\n         None,\n     );\n     is_value_unfrozen_raw(cx, result, ty)"}, {"sha": "ab1559c85d8b1f431946778eeb03991ffa925aa9", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                                 non_send_fields.push(NonSendField {\n                                     def: field_def,\n                                     ty: field_ty,\n-                                    generic_params: collect_generic_params(cx, field_ty),\n+                                    generic_params: collect_generic_params(field_ty),\n                                 })\n                             }\n                         }\n@@ -171,8 +171,8 @@ impl<'tcx> NonSendField<'tcx> {\n \n /// Given a type, collect all of its generic parameters.\n /// Example: `MyStruct<P, Box<Q, R>>` => `vec![P, Q, R]`\n-fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n-    ty.walk(cx.tcx)\n+fn collect_generic_params(ty: Ty<'_>) -> Vec<Ty<'_>> {\n+    ty.walk()\n         .filter_map(|inner| match inner.unpack() {\n             GenericArgKind::Type(inner_ty) => Some(inner_ty),\n             _ => None,\n@@ -226,7 +226,7 @@ fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'t\n \n /// Checks if the type contains any pointer-like types in substs (including nested ones)\n fn contains_pointer_like<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> bool {\n-    for ty_node in target_ty.walk(cx.tcx) {\n+    for ty_node in target_ty.walk() {\n         if let GenericArgKind::Type(inner_ty) = ty_node.unpack() {\n             match inner_ty.kind() {\n                 ty::RawPtr(_) => {"}, {"sha": "dce1f66107a62c5921a81a9cbe99bbb142e5ce94", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::{\n     visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n     Mutability,\n };\n-use rustc_middle::ty::{self, fold::TypeVisitor, Ty, TyCtxt};\n+use rustc_middle::ty::{self, fold::TypeVisitor, Ty};\n use rustc_mir_dataflow::{Analysis, AnalysisDomain, CallReturnPlaces, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n@@ -575,7 +575,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 self.possible_borrower.add(borrowed.local, lhs);\n             },\n             other => {\n-                if ContainsRegion(self.cx.tcx)\n+                if ContainsRegion\n                     .visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty)\n                     .is_continue()\n                 {\n@@ -624,7 +624,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 .flat_map(HybridBitSet::iter)\n                 .collect();\n \n-            if ContainsRegion(self.cx.tcx)\n+            if ContainsRegion\n                 .visit_ty(self.body.local_decls[*dest].ty)\n                 .is_break()\n             {\n@@ -703,15 +703,12 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleOriginVisitor<'a, 'tcx> {\n     }\n }\n \n-struct ContainsRegion<'tcx>(TyCtxt<'tcx>);\n+struct ContainsRegion;\n \n-impl<'tcx> TypeVisitor<'tcx> for ContainsRegion<'tcx> {\n+impl TypeVisitor<'_> for ContainsRegion {\n     type BreakTy = ();\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.0)\n-    }\n \n-    fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {\n         ControlFlow::BREAK\n     }\n }"}, {"sha": "52e708f628a241ffa55f4bdd5a7d18e7287b7d18", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -301,7 +301,7 @@ impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n                 .fn_sig(def_id)\n                 .output()\n                 .skip_binder()\n-                .walk(self.cx.tcx)\n+                .walk()\n                 .any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)));\n         }\n "}, {"sha": "123d0ad0457d1f1d5c2dff1f13c3f5eee0f6eb28", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -63,10 +63,10 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n \n         // Ensure method is constructor-like\n         if let Some(self_adt) = self_ty.ty_adt_def() {\n-            if !contains_adt_constructor(cx.tcx, ret_ty, self_adt) {\n+            if !contains_adt_constructor(ret_ty, self_adt) {\n                 return;\n             }\n-        } else if !contains_ty(cx.tcx, ret_ty, self_ty) {\n+        } else if !contains_ty(ret_ty, self_ty) {\n             return;\n         }\n "}, {"sha": "32adccdbd1cedea225f47209ea1a97680dc0bc96", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -226,7 +226,7 @@ fn expr_borrows(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n     matches!(ty.kind(), ty::Ref(..))\n         || ty\n-            .walk(cx.tcx)\n+            .walk()\n             .any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)))\n }\n "}, {"sha": "cf9a4a5e6d37d7d1c32a4ccdae3e26f7c9485e89", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -170,7 +170,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 //\n                 // See also https://github.com/rust-lang/rust-clippy/issues/2894.\n                 for (impl_hir_ty, trait_sem_ty) in impl_inputs_outputs.zip(trait_method_sig.inputs_and_output) {\n-                    if trait_sem_ty.walk(cx.tcx).any(|inner| inner == self_ty.into()) {\n+                    if trait_sem_ty.walk().any(|inner| inner == self_ty.into()) {\n                         let mut visitor = SkipTyCollector::default();\n                         visitor.visit_ty(impl_hir_ty);\n                         types_to_skip.extend(visitor.types_to_skip);"}, {"sha": "e09a663538ddcfeff5899eae3d0af5155b6a2340", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -413,7 +413,10 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     .tcx\n                     .const_eval_resolve(\n                         self.param_env,\n-                        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n+                        ty::Unevaluated::new(\n+                            ty::WithOptConstParam::unknown(def_id),\n+                            substs,\n+                        ),\n                         None,\n                     )\n                     .ok()"}, {"sha": "c11594002702652576476437e290c357d7ce5cc8", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -1955,7 +1955,7 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n         .predicates_of(did)\n         .predicates\n         .iter()\n-        .filter_map(|(p, _)| if p.is_global(cx.tcx) { Some(*p) } else { None });\n+        .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n     traits::impossible_predicates(\n         cx.tcx,\n         traits::elaborate_predicates(cx.tcx, predicates)\n@@ -2001,15 +2001,15 @@ pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<S\n     if is_primitive {\n         // if we have wrappers like Array, Slice or Tuple, print these\n         // and get the type enclosed in the slice ref\n-        match expr_type.peel_refs().walk(cx.tcx).nth(1).unwrap().expect_ty().kind() {\n+        match expr_type.peel_refs().walk().nth(1).unwrap().expect_ty().kind() {\n             rustc_ty::Slice(..) => return Some(\"slice\".into()),\n             rustc_ty::Array(..) => return Some(\"array\".into()),\n             rustc_ty::Tuple(..) => return Some(\"tuple\".into()),\n             _ => {\n                 // is_recursively_primitive_type() should have taken care\n                 // of the rest and we can rely on the type that is found\n                 let refs_peeled = expr_type.peel_refs();\n-                return Some(refs_peeled.walk(cx.tcx).last().unwrap().to_string());\n+                return Some(refs_peeled.walk().last().unwrap().to_string());\n             },\n         }\n     }"}, {"sha": "729ee00cba00e2ce75c86bb7a9b086f249fd895b", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -86,7 +86,7 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n }\n \n fn check_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n-    for arg in ty.walk(tcx) {\n+    for arg in ty.walk() {\n         let ty = match arg.unpack() {\n             GenericArgKind::Type(ty) => ty,\n "}, {"sha": "f109b7845b4bdf7e63af2399cdba24b674fccc05", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a88f23c1bc796153f92d95b3f1b5660c0eee99/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=f4a88f23c1bc796153f92d95b3f1b5660c0eee99", "patch": "@@ -37,17 +37,17 @@ pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool\n }\n \n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n-pub fn contains_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, other_ty: Ty<'tcx>) -> bool {\n-    ty.walk(tcx).any(|inner| match inner.unpack() {\n+pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n }\n \n /// Walks into `ty` and returns `true` if any inner type is an instance of the given adt\n /// constructor.\n-pub fn contains_adt_constructor<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, adt: &'tcx AdtDef) -> bool {\n-    ty.walk(tcx).any(|inner| match inner.unpack() {\n+pub fn contains_adt_constructor(ty: Ty<'_>, adt: &AdtDef) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => inner_ty.ty_adt_def() == Some(adt),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n@@ -221,7 +221,7 @@ fn is_normalizable_helper<'tcx>(\n                         .iter()\n                         .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n                 }),\n-                _ => ty.walk(cx.tcx).all(|generic_arg| match generic_arg.unpack() {\n+                _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n                     GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n                         is_normalizable_helper(cx, param_env, inner_ty, cache)\n                     },"}]}