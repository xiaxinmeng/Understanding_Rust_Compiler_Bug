{"sha": "c6ed01cab3a76ef801c8c072b6e82d10bdf287eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZWQwMWNhYjNhNzZlZjgwMWM4YzA3MmI2ZTgyZDEwYmRmMjg3ZWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-10-25T01:56:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-10-25T01:56:31Z"}, "message": "adjust comments", "tree": {"sha": "d56bc5df7e0a294c70e281ecace5b865fad9a09d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56bc5df7e0a294c70e281ecace5b865fad9a09d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ed01cab3a76ef801c8c072b6e82d10bdf287eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed01cab3a76ef801c8c072b6e82d10bdf287eb", "html_url": "https://github.com/rust-lang/rust/commit/c6ed01cab3a76ef801c8c072b6e82d10bdf287eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed01cab3a76ef801c8c072b6e82d10bdf287eb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8468c40fdef3544169ea5b06b5b9905a5d448495", "url": "https://api.github.com/repos/rust-lang/rust/commits/8468c40fdef3544169ea5b06b5b9905a5d448495", "html_url": "https://github.com/rust-lang/rust/commit/8468c40fdef3544169ea5b06b5b9905a5d448495"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "bef9e6530b0b153e24a791388894875896000d0f", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed01cab3a76ef801c8c072b6e82d10bdf287eb/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed01cab3a76ef801c8c072b6e82d10bdf287eb/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=c6ed01cab3a76ef801c8c072b6e82d10bdf287eb", "patch": "@@ -12,9 +12,42 @@\n  * match against the current list of values.  If those patterns match, then\n  * the arm listed in the match is the correct arm.  A given arm may have\n  * multiple corresponding match entries, one for each alternative that\n- * remains.  As we proceed these sets of matches are adjusted.  Anyway this\n- * part I am pretty vague on.  Perhaps I or someone else can add more\n- * documentation when they understand it. :)\n+ * remains.  As we proceed these sets of matches are adjusted by the various\n+ * `enter_XXX()` functions, each of which adjusts the set of options given\n+ * some information about the value which has been matched.\n+ *\n+ * So, initially, there is one value and N matches, each of which have one\n+ * constituent pattern.  N here is usually the number of arms but may be\n+ * greater, if some arms have multiple alternatives.  For example, here:\n+ *\n+ *     enum Foo { A, B(int), C(uint, uint) }\n+ *     match foo {\n+ *         A => ...,\n+ *         B(x) => ...,\n+ *         C(1u, 2) => ...,\n+ *         C(_) => ...\n+ *     }\n+ *\n+ * The value would be `foo`.  There would be four matches, each of which\n+ * contains one pattern (and, in one case, a guard).  We could collect the\n+ * various options and then compile the code for the case where `foo` is an\n+ * `A`, a `B`, and a `C`.  When we generate the code for `C`, we would (1)\n+ * drop the two matches that do not match a `C` and (2) expand the other two\n+ * into two patterns each.  In the first case, the two patterns would be `1u`\n+ * and `2`, and the in the second case the _ pattern would be expanded into\n+ * `_` and `_`.  The two values are of course the arguments to `C`.\n+ *\n+ * Here is a quick guide to the various functions:\n+ *\n+ * - `compile_submatch()`: The main workhouse.  It takes a list of values and\n+ *   a list of matches and finds the various possibilities that could occur.\n+ *\n+ * - `enter_XXX()`: modifies the list of matches based on some information about\n+ *   the value that has been matched.  For example, `enter_rec_or_struct()`\n+ *   adjusts the values given that a record or struct has been matched.  This is\n+ *   an infallible pattern, so *all* of the matches must be either wildcards or\n+ *   record/struct patterns.  `enter_opt()` handles the fallible cases, and it is\n+ *   correspondingly more complex.\n  *\n  * ## Bindings\n  *"}, {"sha": "b6ae922ed1a2f31ebb887d274c10a7fe4b24d2c9", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed01cab3a76ef801c8c072b6e82d10bdf287eb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed01cab3a76ef801c8c072b6e82d10bdf287eb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=c6ed01cab3a76ef801c8c072b6e82d10bdf287eb", "patch": "@@ -270,9 +270,8 @@ fn ensure_supertraits(ccx: @crate_ctxt,\n  *\n  * # Parameters\n  *\n- * - impl_m: the method in the impl\n  * - impl_tps: the type params declared on the impl itself (not the method!)\n- * - impl_body_id: the id of the method body from the impl\n+ * - cm: info about the method we are checking\n  * - trait_m: the method in the trait\n  * - trait_substs: the substitutions used on the type of the trait\n  * - self_ty: the self type of the impl\n@@ -357,9 +356,6 @@ fn compare_impl_method(tcx: ty::ctxt,\n     // a free region.  So, for example, if the impl type is\n     // \"&self/str\", then this would replace the self type with a free\n     // region `self`.\n-    //\n-    // Note: Ideal would be to use the node-id of the method body here,\n-    // not the node id of the method itself.\n     let dummy_self_r = ty::re_free(cm.body_id, ty::br_self);\n     let self_ty = replace_bound_self(tcx, self_ty, dummy_self_r);\n "}]}