{"sha": "3af45d6c571ab634dfb3dcc941b32afe4119e934", "node_id": "C_kwDOAAsO6NoAKDNhZjQ1ZDZjNTcxYWI2MzRkZmIzZGNjOTQxYjMyYWZlNDExOWU5MzQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-11-15T17:00:40Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-04-06T08:34:16Z"}, "message": "Address review feedback", "tree": {"sha": "453114e0815ada1f69ea9ee7a112fd8e99231c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/453114e0815ada1f69ea9ee7a112fd8e99231c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3af45d6c571ab634dfb3dcc941b32afe4119e934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3af45d6c571ab634dfb3dcc941b32afe4119e934", "html_url": "https://github.com/rust-lang/rust/commit/3af45d6c571ab634dfb3dcc941b32afe4119e934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3af45d6c571ab634dfb3dcc941b32afe4119e934/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3f2edc75bf2becb57d7d770bba20606da1c4224", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f2edc75bf2becb57d7d770bba20606da1c4224", "html_url": "https://github.com/rust-lang/rust/commit/e3f2edc75bf2becb57d7d770bba20606da1c4224"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "7f220681a94cb7ee29663bbf723143a95213bc68", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=3af45d6c571ab634dfb3dcc941b32afe4119e934", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n     }\n \n     /// Call `fn_ptr` of `fn_abi` with the arguments `llargs`, the optional\n-    /// return destination `destination` and the cleanup function `cleanup`.\n+    /// return destination `destination` and the unwind action `unwind`.\n     fn do_call<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n         fx: &mut FunctionCx<'a, 'tcx, Bx>,\n@@ -234,7 +234,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         }\n     }\n \n-    /// Generates inline assembly with optional `destination` and `cleanup`.\n+    /// Generates inline assembly with optional `destination` and `unwind`.\n     fn do_inlineasm<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n         fx: &mut FunctionCx<'a, 'tcx, Bx>,"}, {"sha": "0f56fda18f56151c1a0afefdec9f1bbb0090c725", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=3af45d6c571ab634dfb3dcc941b32afe4119e934", "patch": "@@ -232,6 +232,24 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n     }\n \n+    fn check_unwind_edge(&mut self, location: Location, unwind: UnwindAction) {\n+        let is_cleanup = self.body.basic_blocks[location.block].is_cleanup;\n+        match unwind {\n+            UnwindAction::Cleanup(unwind) => {\n+                if is_cleanup {\n+                    self.fail(location, \"unwind on cleanup block\");\n+                }\n+                self.check_edge(location, unwind, EdgeKind::Unwind);\n+            }\n+            UnwindAction::Continue => {\n+                if is_cleanup {\n+                    self.fail(location, \"unwind on cleanup block\");\n+                }\n+            }\n+            UnwindAction::Unreachable | UnwindAction::Terminate => (),\n+        }\n+    }\n+\n     /// Check if src can be assigned into dest.\n     /// This is not precise, it will accept some incorrect assignments.\n     fn mir_assign_valid_types(&self, src: Ty<'tcx>, dest: Ty<'tcx>) -> bool {\n@@ -902,9 +920,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Drop { target, unwind, .. } => {\n                 self.check_edge(location, *target, EdgeKind::Normal);\n-                if let UnwindAction::Cleanup(unwind) = unwind {\n-                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n-                }\n+                self.check_unwind_edge(location, *unwind);\n             }\n             TerminatorKind::Call { func, args, destination, target, unwind, .. } => {\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n@@ -918,9 +934,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 if let Some(target) = target {\n                     self.check_edge(location, *target, EdgeKind::Normal);\n                 }\n-                if let UnwindAction::Cleanup(cleanup) = unwind {\n-                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n-                }\n+                self.check_unwind_edge(location, *unwind);\n \n                 // The call destination place and Operand::Move place used as an argument might be\n                 // passed by a reference to the callee. Consequently they must be non-overlapping.\n@@ -958,9 +972,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 self.check_edge(location, *target, EdgeKind::Normal);\n-                if let UnwindAction::Cleanup(cleanup) = unwind {\n-                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n-                }\n+                self.check_unwind_edge(location, *unwind);\n             }\n             TerminatorKind::Yield { resume, drop, .. } => {\n                 if self.body.generator.is_none() {\n@@ -992,17 +1004,13 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 self.check_edge(location, *real_target, EdgeKind::Normal);\n-                if let UnwindAction::Cleanup(unwind) = unwind {\n-                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n-                }\n+                self.check_unwind_edge(location, *unwind);\n             }\n             TerminatorKind::InlineAsm { destination, unwind, .. } => {\n                 if let Some(destination) = destination {\n                     self.check_edge(location, *destination, EdgeKind::Normal);\n                 }\n-                if let UnwindAction::Cleanup(cleanup) = unwind {\n-                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n-                }\n+                self.check_unwind_edge(location, *unwind);\n             }\n             TerminatorKind::GeneratorDrop => {\n                 if self.body.generator.is_none() {"}, {"sha": "b898e85fa71b9b2093efbda1b123477503cad4f3", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=3af45d6c571ab634dfb3dcc941b32afe4119e934", "patch": "@@ -13,7 +13,7 @@ pub struct MirPatch<'tcx> {\n     new_locals: Vec<LocalDecl<'tcx>>,\n     resume_block: Option<BasicBlock>,\n     // Only for unreachable in cleanup path.\n-    unreachable_block: Option<BasicBlock>,\n+    unreachable_cleanup_block: Option<BasicBlock>,\n     terminate_block: Option<BasicBlock>,\n     body_span: Span,\n     next_local: usize,\n@@ -28,7 +28,7 @@ impl<'tcx> MirPatch<'tcx> {\n             new_locals: vec![],\n             next_local: body.local_decls.len(),\n             resume_block: None,\n-            unreachable_block: None,\n+            unreachable_cleanup_block: None,\n             terminate_block: None,\n             body_span: body.span,\n         };\n@@ -41,8 +41,11 @@ impl<'tcx> MirPatch<'tcx> {\n             }\n \n             // Check if we already have an unreachable block\n-            if let TerminatorKind::Unreachable = block.terminator().kind && block.statements.is_empty() {\n-                result.unreachable_block = Some(bb);\n+            if let TerminatorKind::Unreachable = block.terminator().kind\n+                && block.statements.is_empty()\n+                && block.is_cleanup\n+            {\n+                result.unreachable_cleanup_block = Some(bb);\n                 continue;\n             }\n \n@@ -73,8 +76,8 @@ impl<'tcx> MirPatch<'tcx> {\n         bb\n     }\n \n-    pub fn unreachable_block(&mut self) -> BasicBlock {\n-        if let Some(bb) = self.unreachable_block {\n+    pub fn unreachable_cleanup_block(&mut self) -> BasicBlock {\n+        if let Some(bb) = self.unreachable_cleanup_block {\n             return bb;\n         }\n \n@@ -86,7 +89,7 @@ impl<'tcx> MirPatch<'tcx> {\n             }),\n             is_cleanup: true,\n         });\n-        self.unreachable_block = Some(bb);\n+        self.unreachable_cleanup_block = Some(bb);\n         bb\n     }\n "}, {"sha": "135889d0da810831a32e1529800727e7c92b2b96", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=3af45d6c571ab634dfb3dcc941b32afe4119e934", "patch": "@@ -523,7 +523,7 @@ pub struct CopyNonOverlapping<'tcx> {\n /// The basic block pointed to by a `Cleanup` unwind action must have its `cleanup` flag set.\n /// `cleanup` basic blocks have a couple restrictions:\n ///  1. All `unwind` fields in them must be `UnwindAction::Terminate` or `UnwindAction::Unreachable`.\n-///  2. `Return` terminators are not allowed in them. `Terminate` and `Unwind` terminators are.\n+///  2. `Return` terminators are not allowed in them. `Terminate` and `Resume` terminators are.\n ///  3. All other basic blocks (in the current body) that are reachable from `cleanup` basic blocks\n ///     must also be `cleanup`. This is a part of the type system and checked statically, so it is\n ///     still an error to have such an edge in the CFG even if it's known that it won't be taken at\n@@ -721,8 +721,6 @@ pub enum TerminatorKind<'tcx> {\n         /// consider it in borrowck. We don't want to accept programs which\n         /// pass borrowck only when `panic=abort` or some assertions are disabled\n         /// due to release vs. debug mode builds.\n-        /// This field does not necessary have to be `UnwindAction::Cleanup` because\n-        /// of the `remove_noop_landing_pads` and `abort_unwinding_calls` passes.\n         unwind: UnwindAction,\n     },\n "}, {"sha": "dd7fd2524e0a2f191706ddf37531c35a5dae7cdb", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=3af45d6c571ab634dfb3dcc941b32afe4119e934", "patch": "@@ -415,7 +415,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                                     UnwindAction::Cleanup(cleanup) => Unwind::To(cleanup),\n                                     UnwindAction::Continue => Unwind::To(self.patch.resume_block()),\n                                     UnwindAction::Unreachable => {\n-                                        Unwind::To(self.patch.unreachable_block())\n+                                        Unwind::To(self.patch.unreachable_cleanup_block())\n                                     }\n                                     UnwindAction::Terminate => {\n                                         Unwind::To(self.patch.terminate_block())"}, {"sha": "4352d34cb897005d86439c2009b523383c737fb8", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=3af45d6c571ab634dfb3dcc941b32afe4119e934", "patch": "@@ -1063,7 +1063,7 @@ fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             Unwind::To(match *unwind {\n                 UnwindAction::Cleanup(tgt) => tgt,\n                 UnwindAction::Continue => elaborator.patch.resume_block(),\n-                UnwindAction::Unreachable => elaborator.patch.unreachable_block(),\n+                UnwindAction::Unreachable => elaborator.patch.unreachable_cleanup_block(),\n                 UnwindAction::Terminate => elaborator.patch.terminate_block(),\n             })\n         };"}, {"sha": "2787fe2ce42cd6b18266824b0f8e58b88183121e", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af45d6c571ab634dfb3dcc941b32afe4119e934/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=3af45d6c571ab634dfb3dcc941b32afe4119e934", "patch": "@@ -543,7 +543,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n                 TerminatorKind::Drop {\n                     place: dest_field,\n                     target: unwind,\n-                    unwind: UnwindAction::Continue,\n+                    unwind: UnwindAction::Terminate,\n                 },\n                 true,\n             );\n@@ -814,7 +814,7 @@ fn build_call_shim<'tcx>(\n             TerminatorKind::Drop {\n                 place: rcvr_place(),\n                 target: BasicBlock::new(4),\n-                unwind: UnwindAction::Continue,\n+                unwind: UnwindAction::Terminate,\n             },\n             true,\n         );"}]}