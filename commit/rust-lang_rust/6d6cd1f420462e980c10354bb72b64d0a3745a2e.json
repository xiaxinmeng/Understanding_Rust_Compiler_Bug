{"sha": "6d6cd1f420462e980c10354bb72b64d0a3745a2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNmNkMWY0MjA0NjJlOTgwYzEwMzU0YmI3MmI2NGQwYTM3NDVhMmU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T10:50:44Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T10:50:44Z"}, "message": "Rename 'block' to 'current_block'.", "tree": {"sha": "5c2b7b61a23a989f7766bad6ac632e4f53ec3b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c2b7b61a23a989f7766bad6ac632e4f53ec3b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d6cd1f420462e980c10354bb72b64d0a3745a2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6cd1f420462e980c10354bb72b64d0a3745a2e", "html_url": "https://github.com/rust-lang/rust/commit/6d6cd1f420462e980c10354bb72b64d0a3745a2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d6cd1f420462e980c10354bb72b64d0a3745a2e/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "586bc5d1da55e776b39601ad06f00c7cae0a0f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/586bc5d1da55e776b39601ad06f00c7cae0a0f5e", "html_url": "https://github.com/rust-lang/rust/commit/586bc5d1da55e776b39601ad06f00c7cae0a0f5e"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "da0128f5539debb69ee3fd2c098acb08f3753808", "filename": "src/interpreter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d6cd1f420462e980c10354bb72b64d0a3745a2e/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6cd1f420462e980c10354bb72b64d0a3745a2e/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=6d6cd1f420462e980c10354bb72b64d0a3745a2e", "patch": "@@ -144,11 +144,11 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n         -> EvalResult<()>\n     {\n         try!(self.push_stack_frame(mir, args, return_ptr));\n-        let mut block = mir::START_BLOCK;\n+        let mut current_block = mir::START_BLOCK;\n \n         loop {\n-            if TRACE_EXECUTION { println!(\"Entering block: {:?}\", block); }\n-            let block_data = mir.basic_block_data(block);\n+            if TRACE_EXECUTION { println!(\"Entering block: {:?}\", current_block); }\n+            let block_data = mir.basic_block_data(current_block);\n \n             for stmt in &block_data.statements {\n                 if TRACE_EXECUTION { println!(\"{:?}\", stmt); }\n@@ -163,12 +163,12 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n             match *block_data.terminator() {\n                 Return => break,\n \n-                Goto { target } => block = target,\n+                Goto { target } => current_block = target,\n \n                 If { ref cond, targets: (then_target, else_target) } => {\n                     let cond_ptr = try!(self.operand_to_ptr(cond));\n                     let cond = try!(self.memory.read_bool(&cond_ptr));\n-                    block = if cond { then_target } else { else_target }\n+                    current_block = if cond { then_target } else { else_target };\n                 }\n \n                 // Call { ref func, ref args, ref destination, .. } => {\n@@ -192,7 +192,7 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                 //         self.call(mir, &arg_vals, ptr);\n \n                 //         if let Some((_, target)) = *destination {\n-                //             block = target;\n+                //             current_block = target;\n                 //         }\n                 //     } else {\n                 //         panic!(\"tried to call a non-function value: {:?}\", func_val);\n@@ -205,22 +205,22 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                 //     let index = values.iter().position(|v| discr_val == self.const_to_ptr(v))\n                 //         .expect(\"discriminant matched no values\");\n \n-                //     block = targets[index];\n+                //     current_block = targets[index];\n                 // }\n \n                 // Switch { ref discr, ref targets, .. } => {\n                 //     let discr_val = self.read_lvalue(discr);\n \n                 //     if let Value::Adt { variant, .. } = discr_val {\n-                //         block = targets[variant];\n+                //         current_block = targets[variant];\n                 //     } else {\n                 //         panic!(\"Switch on non-Adt value: {:?}\", discr_val);\n                 //     }\n                 // }\n \n                 Drop { target, .. } => {\n                     // TODO: Handle destructors and dynamic drop.\n-                    block = target;\n+                    current_block = target;\n                 }\n \n                 Resume => unimplemented!(),"}]}