{"sha": "578b036f9b0415852aae0af9286ff53630fa1c56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OGIwMzZmOWIwNDE1ODUyYWFlMGFmOTI4NmZmNTM2MzBmYTFjNTY=", "commit": {"author": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-28T18:00:24Z"}, "committer": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-09-07T16:21:22Z"}, "message": "gc: Don't expect sentinel when core is compiled without GC.", "tree": {"sha": "6e453479a0254c8ee2e8d44178c65abf7a0b850f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e453479a0254c8ee2e8d44178c65abf7a0b850f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/578b036f9b0415852aae0af9286ff53630fa1c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/578b036f9b0415852aae0af9286ff53630fa1c56", "html_url": "https://github.com/rust-lang/rust/commit/578b036f9b0415852aae0af9286ff53630fa1c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/578b036f9b0415852aae0af9286ff53630fa1c56/comments", "author": null, "committer": null, "parents": [{"sha": "7823ad8586f52bcd6277965277bd15ff15674219", "url": "https://api.github.com/repos/rust-lang/rust/commits/7823ad8586f52bcd6277965277bd15ff15674219", "html_url": "https://github.com/rust-lang/rust/commit/7823ad8586f52bcd6277965277bd15ff15674219"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "b075c873202907708a56e5f67236de906e9297b8", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/578b036f9b0415852aae0af9286ff53630fa1c56/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/578b036f9b0415852aae0af9286ff53630fa1c56/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=578b036f9b0415852aae0af9286ff53630fa1c56", "patch": "@@ -167,18 +167,33 @@ fn RootSet() -> RootSet {\n     LinearMap()\n }\n \n+#[cfg(gc)]\n+fn expect_sentinel() -> bool { true }\n+\n+#[cfg(nogc)]\n+fn expect_sentinel() -> bool { false }\n+\n // This should only be called from fail, as it will drop the roots\n // which are *live* on the stack, rather than dropping those that are\n // dead.\n fn cleanup_stack_for_failure() {\n     unsafe {\n-        // Leave a sentinel on the stack to mark the current\n-        // frame. The stack walker will ignore any frames above the\n-        // sentinel, thus avoiding collecting any memory being used by\n-        // the stack walker itself.\n+        // Leave a sentinel on the stack to mark the current frame. The\n+        // stack walker will ignore any frames above the sentinel, thus\n+        // avoiding collecting any memory being used by the stack walker\n+        // itself.\n+        //\n+        // However, when core itself is not compiled with GC, then none of\n+        // the functions in core will have GC metadata, which means we\n+        // won't be able to find the sentinel root on the stack. In this\n+        // case, we can safely skip the sentinel since we won't find our\n+        // own stack roots on the stack anyway.\n         let sentinel_box = ~0;\n-        let sentinel: **Word =\n-            unsafe::reinterpret_cast(&ptr::addr_of(sentinel_box));\n+        let sentinel: **Word = if expect_sentinel() {\n+            unsafe::reinterpret_cast(&ptr::addr_of(sentinel_box))\n+        } else {\n+            ptr::null()\n+        };\n \n         let mut roots = ~RootSet();\n         for walk_gc_roots(need_cleanup, sentinel) |root, tydesc| {"}]}