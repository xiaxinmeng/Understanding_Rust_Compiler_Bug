{"sha": "2a010dd3404256ea774e5338ad1952d09ab2cf03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMDEwZGQzNDA0MjU2ZWE3NzRlNTMzOGFkMTk1MmQwOWFiMmNmMDM=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-11T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-11-12T19:09:04Z"}, "message": "./x.py test --bless", "tree": {"sha": "7c53054a4346491e5c35513a00a5dc2c01affdc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c53054a4346491e5c35513a00a5dc2c01affdc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a010dd3404256ea774e5338ad1952d09ab2cf03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a010dd3404256ea774e5338ad1952d09ab2cf03", "html_url": "https://github.com/rust-lang/rust/commit/2a010dd3404256ea774e5338ad1952d09ab2cf03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a010dd3404256ea774e5338ad1952d09ab2cf03/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d853eccebf6d9704adeea45f20f11bae0d7396", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d853eccebf6d9704adeea45f20f11bae0d7396", "html_url": "https://github.com/rust-lang/rust/commit/79d853eccebf6d9704adeea45f20f11bae0d7396"}], "stats": {"total": 220, "additions": 184, "deletions": 36}, "files": [{"sha": "c95cf47695785de07fa671541204b37003f4e371", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff?ref=2a010dd3404256ea774e5338ad1952d09ab2cf03", "patch": "@@ -2,24 +2,24 @@\n + // MIR for `inlined_no_sanitize` after Inline\n   \n   fn inlined_no_sanitize() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:24:37: 24:37\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:25:5: 25:18\n-+     scope 1 (inlined no_sanitize) {      // at $DIR/inline-compatibility.rs:25:5: 25:18\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:23:37: 23:37\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:24:5: 24:18\n++     scope 1 (inlined no_sanitize) {      // at $DIR/inline-compatibility.rs:24:5: 24:18\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:25:5: 25:18\n--         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:25:5: 25:18\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:24:5: 24:18\n+-         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:24:5: 24:18\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-compatibility.rs:25:5: 25:16\n+-                                          // + span: $DIR/inline-compatibility.rs:24:5: 24:16\n -                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb1: {\n-+         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:25:5: 25:18\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:25:18: 25:19\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:24:37: 26:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:26:2: 26:2\n++         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:24:5: 24:18\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:24:18: 24:19\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:23:37: 25:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:25:2: 25:2\n       }\n   }\n   "}, {"sha": "2bb928343229fd190b82304de92676ea03cba704", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff?ref=2a010dd3404256ea774e5338ad1952d09ab2cf03", "patch": "@@ -2,24 +2,24 @@\n + // MIR for `inlined_target_feature` after Inline\n   \n   fn inlined_target_feature() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:13:40: 13:40\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:14:5: 14:21\n-+     scope 1 (inlined target_feature) {   // at $DIR/inline-compatibility.rs:14:5: 14:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:12:40: 12:40\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:13:5: 13:21\n++     scope 1 (inlined target_feature) {   // at $DIR/inline-compatibility.rs:13:5: 13:21\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:14:5: 14:21\n--         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:14:5: 14:21\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:13:5: 13:21\n+-         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:13:5: 13:21\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-compatibility.rs:14:5: 14:19\n+-                                          // + span: $DIR/inline-compatibility.rs:13:5: 13:19\n -                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb1: {\n-+         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:14:5: 14:21\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:14:21: 14:22\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:13:40: 15:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:15:2: 15:2\n++         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:13:5: 13:21\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:13:21: 13:22\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:12:40: 14:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:14:2: 14:2\n       }\n   }\n   "}, {"sha": "09bca903c80e892da07a8573341cfc1460ef6748", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_c_variadic.Inline.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff?ref=2a010dd3404256ea774e5338ad1952d09ab2cf03", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `not_inlined_c_variadic` before Inline\n++ // MIR for `not_inlined_c_variadic` after Inline\n+  \n+  fn not_inlined_c_variadic() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:41:40: 41:40\n+      let _1: u32;                         // in scope 0 at $DIR/inline-compatibility.rs:42:9: 42:10\n+      scope 1 {\n+          debug s => _1;                   // in scope 1 at $DIR/inline-compatibility.rs:42:9: 42:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:42:9: 42:10\n+          _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> bb1; // scope 0 at $DIR/inline-compatibility.rs:42:13: 42:52\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-compatibility.rs:42:13: 42:16\n+                                           // + literal: Const { ty: unsafe extern \"C\" fn(u32, ...) -> u32 {sum}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:41:40: 43:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:43:1: 43:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:43:2: 43:2\n+      }\n+  }\n+  "}, {"sha": "5af3946f2e501d32622dc4d0d526e8f279e7e633", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff?ref=2a010dd3404256ea774e5338ad1952d09ab2cf03", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `not_inlined_no_sanitize` after Inline\n   \n   fn not_inlined_no_sanitize() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:29:41: 29:41\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:30:5: 30:18\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:28:41: 28:41\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:29:5: 29:18\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:30:5: 30:18\n-          _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:30:5: 30:18\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:29:5: 29:18\n+          _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:29:5: 29:18\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-compatibility.rs:30:5: 30:16\n+                                           // + span: $DIR/inline-compatibility.rs:29:5: 29:16\n                                            // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:30:18: 30:19\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:29:41: 31:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:31:2: 31:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:29:18: 29:19\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:28:41: 30:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:30:2: 30:2\n       }\n   }\n   "}, {"sha": "8c9fa573ce218ca550f536608d8aa809266b659b", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff?ref=2a010dd3404256ea774e5338ad1952d09ab2cf03", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `not_inlined_target_feature` after Inline\n   \n   fn not_inlined_target_feature() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:18:44: 18:44\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:19:5: 19:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:17:44: 17:44\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:18:5: 18:21\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:19:5: 19:21\n-          _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:19:5: 19:21\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:18:5: 18:21\n+          _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:18:5: 18:21\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-compatibility.rs:19:5: 19:19\n+                                           // + span: $DIR/inline-compatibility.rs:18:5: 18:19\n                                            // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:19:21: 19:22\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:18:44: 20:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:20:2: 20:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:18:21: 18:22\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:17:44: 19:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:19:2: 19:2\n       }\n   }\n   "}, {"sha": "aa32daa82dd51135f81ceb0b2e2f91f03adbb1a8", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a010dd3404256ea774e5338ad1952d09ab2cf03/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=2a010dd3404256ea774e5338ad1952d09ab2cf03", "patch": "@@ -0,0 +1,123 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-generator.rs:8:11: 8:11\n+      let _1: std::ops::GeneratorState<<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Yield, <impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Return>; // in scope 0 at $DIR/inline-generator.rs:9:9: 9:11\n+      let mut _2: std::pin::Pin<&mut impl std::ops::Generator<bool>>; // in scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+      let mut _3: &mut impl std::ops::Generator<bool>; // in scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n+      let mut _4: impl std::ops::Generator<bool>; // in scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n++     let mut _7: bool;                    // in scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+      scope 1 {\n+          debug _r => _1;                  // in scope 1 at $DIR/inline-generator.rs:9:9: 9:11\n+      }\n++     scope 2 (inlined g) {                // at $DIR/inline-generator.rs:9:28: 9:31\n++     }\n++     scope 3 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]>::new) { // at $DIR/inline-generator.rs:9:14: 9:32\n++         debug pointer => _3;             // in scope 3 at $DIR/inline-generator.rs:9:14: 9:32\n++         let mut _5: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]; // in scope 3 at $DIR/inline-generator.rs:9:14: 9:32\n++         scope 4 {\n++             scope 5 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]>::new_unchecked) { // at $DIR/inline-generator.rs:9:14: 9:32\n++                 debug pointer => _5;     // in scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++                 let mut _6: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]; // in scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++             }\n++         }\n++     }\n++     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline-generator.rs:9:14: 9:46\n++         debug a => _8;                   // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         let mut _8: bool;                // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         let mut _9: u32;                 // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-generator.rs:9:9: 9:11\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+          StorageLive(_3);                 // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n+          StorageLive(_4);                 // scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n+-         _4 = g() -> bb1;                 // scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-generator.rs:9:28: 9:29\n+-                                          // + literal: Const { ty: fn() -> impl std::ops::Generator<bool> {g}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1: {\n++         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:9:28: 9:31\n+          _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n+-         _2 = Pin::<&mut impl Generator<bool>>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-generator.rs:9:14: 9:22\n+-                                          // + user_ty: UserType(0)\n+-                                          // + literal: Const { ty: fn(&mut impl std::ops::Generator<bool>) -> std::pin::Pin<&mut impl std::ops::Generator<bool>> {std::pin::Pin::<&mut impl std::ops::Generator<bool>>::new}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb2: {\n++         StorageLive(_5);                 // scope 4 at $DIR/inline-generator.rs:9:14: 9:32\n++         _5 = move _3;                    // scope 4 at $DIR/inline-generator.rs:9:14: 9:32\n++         StorageLive(_6);                 // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++         _6 = move _5;                    // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++         (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]) = move _6; // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++         StorageDead(_6);                 // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++         StorageDead(_5);                 // scope 4 at $DIR/inline-generator.rs:9:14: 9:32\n+          StorageDead(_3);                 // scope 0 at $DIR/inline-generator.rs:9:31: 9:32\n+-         _1 = <impl Generator<bool> as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-generator.rs:9:33: 9:39\n+-                                          // + literal: Const { ty: for<'r> fn(std::pin::Pin<&'r mut impl std::ops::Generator<bool>>, bool) -> std::ops::GeneratorState<<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Yield, <impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Return> {<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         _9 = discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))); // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         switchInt(move _9) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n+      }\n+  \n+-     bb3: {\n++     bb1: {\n++         StorageDead(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-generator.rs:9:45: 9:46\n+          StorageDead(_4);                 // scope 0 at $DIR/inline-generator.rs:9:46: 9:47\n+          _0 = const ();                   // scope 0 at $DIR/inline-generator.rs:8:11: 10:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-generator.rs:10:1: 10:2\n+          return;                          // scope 0 at $DIR/inline-generator.rs:10:2: 10:2\n+      }\n+  \n+-     bb4 (cleanup): {\n++     bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/inline-generator.rs:8:1: 10:2\n++     }\n++ \n++     bb3: {\n++         _8 = move _7;                    // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         switchInt(_8) -> [false: bb4, otherwise: bb5]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++     }\n++ \n++     bb4: {\n++         ((_1 as Yielded).0: i32) = const 13_i32; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++     }\n++ \n++     bb5: {\n++         ((_1 as Yielded).0: i32) = const 7_i32; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++     }\n++ \n++     bb6: {\n++         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))) = 3; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:11: 15:39\n++     }\n++ \n++     bb7: {\n++         ((_1 as Complete).0: bool) = move _7; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))) = 1; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:41: 15:41\n++     }\n++ \n++     bb8: {\n++         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++     }\n++ \n++     bb9: {\n++         unreachable;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n+      }\n+  }\n+  "}]}