{"sha": "d663c276da262f4b3b7f67ac45257f0b451ab070", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NjNjMjc2ZGEyNjJmNGIzYjdmNjdhYzQ1MjU3ZjBiNDUxYWIwNzA=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril@gmail.com", "date": "2019-09-23T15:58:41Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-01T17:23:02Z"}, "message": "`specialize` conceptually operates on a single pattern", "tree": {"sha": "037c3440171422e980433c7ef7d5a9e06910f2cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/037c3440171422e980433c7ef7d5a9e06910f2cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d663c276da262f4b3b7f67ac45257f0b451ab070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d663c276da262f4b3b7f67ac45257f0b451ab070", "html_url": "https://github.com/rust-lang/rust/commit/d663c276da262f4b3b7f67ac45257f0b451ab070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d663c276da262f4b3b7f67ac45257f0b451ab070/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a656a46c279153a626dc5ee259c2c9c7d4af89", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a656a46c279153a626dc5ee259c2c9c7d4af89", "html_url": "https://github.com/rust-lang/rust/commit/57a656a46c279153a626dc5ee259c2c9c7d4af89"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "8dace0bab7d63f3b868b7cc6e96f3725e48ffd54", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d663c276da262f4b3b7f67ac45257f0b451ab070/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d663c276da262f4b3b7f67ac45257f0b451ab070/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=d663c276da262f4b3b7f67ac45257f0b451ab070", "patch": "@@ -397,7 +397,11 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n         'a: 'q,\n         'p: 'q,\n     {\n-        specialize(cx, self, constructor, ctor_wild_subpatterns)\n+        let new_heads = specialize_one_pattern(cx, self.head(), constructor, ctor_wild_subpatterns);\n+        new_heads.map(|mut new_head| {\n+            new_head.0.extend_from_slice(&self.0[1..]);\n+            new_head\n+        })\n     }\n }\n \n@@ -2018,26 +2022,24 @@ fn patterns_for_variant<'p, 'a: 'p, 'tcx>(\n     PatStack::from_vec(result)\n }\n \n-/// This is the main specialization step. It expands the first pattern in the given row\n+/// This is the main specialization step. It expands the pattern\n /// into `arity` patterns based on the constructor. For most patterns, the step is trivial,\n /// for instance tuple patterns are flattened and box patterns expand into their inner pattern.\n+/// Returns `None` if the pattern does not have the given constructor.\n ///\n /// OTOH, slice patterns with a subslice pattern (tail @ ..) can be expanded into multiple\n /// different patterns.\n /// Structure patterns with a partial wild pattern (Foo { a: 42, .. }) have their missing\n /// fields filled with wild patterns.\n-fn specialize<'p, 'a: 'p, 'q: 'p, 'tcx>(\n+fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-    r: &PatStack<'q, 'tcx>,\n+    pat: &'q Pat<'tcx>,\n     constructor: &Constructor<'tcx>,\n     ctor_wild_subpatterns: &[&'p Pat<'tcx>],\n ) -> Option<PatStack<'p, 'tcx>> {\n-    let pat = r.head();\n-\n-    let new_head = match *pat.kind {\n-        PatKind::AscribeUserType { ref subpattern, .. } => {\n-            specialize(cx, &PatStack::from_pattern(subpattern), constructor, ctor_wild_subpatterns)\n-        }\n+    let result = match *pat.kind {\n+        PatKind::AscribeUserType { ref subpattern, .. } => PatStack::from_pattern(subpattern)\n+            .specialize_constructor(cx, constructor, ctor_wild_subpatterns),\n \n         PatKind::Binding { .. } | PatKind::Wild => {\n             Some(PatStack::from_slice(ctor_wild_subpatterns))\n@@ -2192,11 +2194,7 @@ fn specialize<'p, 'a: 'p, 'q: 'p, 'tcx>(\n             bug!(\"support for or-patterns has not been fully implemented yet.\");\n         }\n     };\n-    debug!(\"specialize({:#?}, {:#?}) = {:#?}\", r.head(), ctor_wild_subpatterns, new_head);\n+    debug!(\"specialize({:#?}, {:#?}) = {:#?}\", pat, ctor_wild_subpatterns, result);\n \n-    new_head.map(|head| {\n-        let mut head = head.0;\n-        head.extend_from_slice(&r.0[1..]);\n-        PatStack::from_vec(head)\n-    })\n+    result\n }"}]}