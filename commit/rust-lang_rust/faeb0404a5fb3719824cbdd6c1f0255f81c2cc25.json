{"sha": "faeb0404a5fb3719824cbdd6c1f0255f81c2cc25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZWIwNDA0YTVmYjM3MTk4MjRjYmRkNmMxZjAyNTVmODFjMmNjMjU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-18T18:07:41Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-20T17:42:25Z"}, "message": "Remove unnecessary allocation", "tree": {"sha": "980eacf623fac047466a1986451a226ac27895b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/980eacf623fac047466a1986451a226ac27895b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faeb0404a5fb3719824cbdd6c1f0255f81c2cc25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faeb0404a5fb3719824cbdd6c1f0255f81c2cc25", "html_url": "https://github.com/rust-lang/rust/commit/faeb0404a5fb3719824cbdd6c1f0255f81c2cc25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faeb0404a5fb3719824cbdd6c1f0255f81c2cc25/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2000f91f68d2218b01401b9b92177090d784e724", "url": "https://api.github.com/repos/rust-lang/rust/commits/2000f91f68d2218b01401b9b92177090d784e724", "html_url": "https://github.com/rust-lang/rust/commit/2000f91f68d2218b01401b9b92177090d784e724"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "7eabdf706ef9f0941e0689cc9172ef7a7dba007c", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/faeb0404a5fb3719824cbdd6c1f0255f81c2cc25/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faeb0404a5fb3719824cbdd6c1f0255f81c2cc25/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=faeb0404a5fb3719824cbdd6c1f0255f81c2cc25", "patch": "@@ -140,7 +140,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n     item: Option<&hir::Item<'tcx>>,\n     cause: &mut traits::ObligationCause<'tcx>,\n     pred: &ty::Predicate<'_>,\n-    mut trait_assoc_items: impl Iterator<Item = ty::AssocItem>,\n+    mut trait_assoc_items: impl Iterator<Item = &'tcx ty::AssocItem>,\n ) {\n     debug!(\n         \"extended_cause_with_original_assoc_item_obligation {:?} {:?} {:?} {:?}\",\n@@ -232,35 +232,34 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n         let item = self.item;\n \n+        let extend = |obligation: traits::PredicateObligation<'tcx>| {\n+            let mut cause = cause.clone();\n+            if let Some(parent_trait_ref) = obligation.predicate.to_opt_poly_trait_ref() {\n+                let derived_cause = traits::DerivedObligationCause {\n+                    parent_trait_ref,\n+                    parent_code: Rc::new(obligation.cause.code.clone()),\n+                };\n+                cause.code = traits::ObligationCauseCode::DerivedObligation(derived_cause);\n+            }\n+            extend_cause_with_original_assoc_item_obligation(\n+                tcx,\n+                trait_ref,\n+                item,\n+                &mut cause,\n+                &obligation.predicate,\n+                tcx.associated_items(trait_ref.def_id).in_definition_order(),\n+            );\n+            traits::Obligation::new(cause, param_env, obligation.predicate)\n+        };\n+\n         if let Elaborate::All = elaborate {\n-            let implied_obligations = traits::util::elaborate_obligations(tcx, obligations.clone());\n-            let implied_obligations = implied_obligations.map(|obligation| {\n-                debug!(\"compute_trait_ref implied_obligation {:?}\", obligation);\n-                debug!(\"compute_trait_ref implied_obligation cause {:?}\", obligation.cause);\n-                let mut cause = cause.clone();\n-                if let Some(parent_trait_ref) = obligation.predicate.to_opt_poly_trait_ref() {\n-                    let derived_cause = traits::DerivedObligationCause {\n-                        parent_trait_ref,\n-                        parent_code: Rc::new(obligation.cause.code.clone()),\n-                    };\n-                    cause.code = traits::ObligationCauseCode::DerivedObligation(derived_cause);\n-                }\n-                extend_cause_with_original_assoc_item_obligation(\n-                    tcx,\n-                    trait_ref,\n-                    item,\n-                    &mut cause,\n-                    &obligation.predicate,\n-                    tcx.associated_items(trait_ref.def_id).in_definition_order().copied(),\n-                );\n-                debug!(\"compute_trait_ref new cause {:?}\", cause);\n-                traits::Obligation::new(cause, param_env, obligation.predicate)\n-            });\n+            let implied_obligations = traits::util::elaborate_obligations(tcx, obligations);\n+            let implied_obligations = implied_obligations.map(extend);\n             self.out.extend(implied_obligations);\n+        } else {\n+            self.out.extend(obligations);\n         }\n \n-        self.out.extend(obligations);\n-\n         self.out.extend(trait_ref.substs.types().filter(|ty| !ty.has_escaping_bound_vars()).map(\n             |ty| traits::Obligation::new(cause.clone(), param_env, ty::Predicate::WellFormed(ty)),\n         ));"}]}