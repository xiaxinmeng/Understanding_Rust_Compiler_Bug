{"sha": "cc47b069983292e4ee8982d5dabe6301452c5f25", "node_id": "C_kwDOAAsO6NoAKGNjNDdiMDY5OTgzMjkyZTRlZTg5ODJkNWRhYmU2MzAxNDUyYzVmMjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-08T17:49:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-08T17:49:31Z"}, "message": "Auto merge of #106449 - GuillaumeGomez:rustdoc-gui-retry-mechanism, r=Mark-Simulacrum\n\nAdd retry mechanism for rustdoc GUI tests to reduce flakyness\n\nPart of #93784.\n\nI added 3 retries for failing GUI tests. An important note: if more than half of total tests fail, I don't retry because it's very likely not flakyness anymore at this point but a missing update after changes.", "tree": {"sha": "ab518d066a629ce484fbf744b8fe6082627cd193", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab518d066a629ce484fbf744b8fe6082627cd193"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc47b069983292e4ee8982d5dabe6301452c5f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc47b069983292e4ee8982d5dabe6301452c5f25", "html_url": "https://github.com/rust-lang/rust/commit/cc47b069983292e4ee8982d5dabe6301452c5f25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc47b069983292e4ee8982d5dabe6301452c5f25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa51fc01ca3d654d08d627b1d1482d1b77e5ed8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa51fc01ca3d654d08d627b1d1482d1b77e5ed8b", "html_url": "https://github.com/rust-lang/rust/commit/fa51fc01ca3d654d08d627b1d1482d1b77e5ed8b"}, {"sha": "f902200de4a722908919da701c05244fed3dabc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f902200de4a722908919da701c05244fed3dabc5", "html_url": "https://github.com/rust-lang/rust/commit/f902200de4a722908919da701c05244fed3dabc5"}], "stats": {"total": 122, "additions": 76, "deletions": 46}, "files": [{"sha": "900ca389436254276107f6dbff349e622b2463d2", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 76, "deletions": 46, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/cc47b069983292e4ee8982d5dabe6301452c5f25/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/cc47b069983292e4ee8982d5dabe6301452c5f25/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=cc47b069983292e4ee8982d5dabe6301452c5f25", "patch": "@@ -9,6 +9,9 @@ const path = require(\"path\");\n const os = require('os');\n const {Options, runTest} = require('browser-ui-test');\n \n+// If a test fails or errors, we will retry it two more times in case it was a flaky failure.\n+const NB_RETRY = 3;\n+\n function showHelp() {\n     console.log(\"rustdoc-js options:\");\n     console.log(\"  --doc-folder [PATH]        : location of the generated doc folder\");\n@@ -129,11 +132,59 @@ function char_printer(n_tests) {\n     };\n }\n \n-/// Sort array by .file_name property\n+// Sort array by .file_name property\n function by_filename(a, b) {\n     return a.file_name - b.file_name;\n }\n \n+async function runTests(opts, framework_options, files, results, status_bar, showTestFailures) {\n+    const tests_queue = [];\n+\n+    for (const testPath of files) {\n+        const callback = runTest(testPath, framework_options)\n+            .then(out => {\n+                const [output, nb_failures] = out;\n+                results[nb_failures === 0 ? \"successful\" : \"failed\"].push({\n+                    file_name: testPath,\n+                    output: output,\n+                });\n+                if (nb_failures === 0) {\n+                    status_bar.successful();\n+                } else if (showTestFailures) {\n+                    status_bar.erroneous();\n+                }\n+            })\n+            .catch(err => {\n+                results.errored.push({\n+                    file_name: testPath,\n+                    output: err,\n+                });\n+                if (showTestFailures) {\n+                    status_bar.erroneous();\n+                }\n+            })\n+            .finally(() => {\n+                // We now remove the promise from the tests_queue.\n+                tests_queue.splice(tests_queue.indexOf(callback), 1);\n+            });\n+        tests_queue.push(callback);\n+        if (opts[\"jobs\"] > 0 && tests_queue.length >= opts[\"jobs\"]) {\n+            await Promise.race(tests_queue);\n+        }\n+    }\n+    if (tests_queue.length > 0) {\n+        await Promise.all(tests_queue);\n+    }\n+}\n+\n+function createEmptyResults() {\n+    return {\n+        successful: [],\n+        failed: [],\n+        errored: [],\n+    };\n+}\n+\n async function main(argv) {\n     let opts = parseOptions(argv.slice(2));\n     if (opts === null) {\n@@ -144,7 +195,7 @@ async function main(argv) {\n     let debug = false;\n     // Run tests in sequentially\n     let headless = true;\n-    const options = new Options();\n+    const framework_options = new Options();\n     try {\n         // This is more convenient that setting fields one by one.\n         let args = [\n@@ -169,13 +220,12 @@ async function main(argv) {\n             args.push(\"--executable-path\");\n             args.push(opts[\"executable_path\"]);\n         }\n-        options.parseArguments(args);\n+        framework_options.parseArguments(args);\n     } catch (error) {\n         console.error(`invalid argument: ${error}`);\n         process.exit(1);\n     }\n \n-    let failed = false;\n     let files;\n     if (opts[\"files\"].length === 0) {\n         files = fs.readdirSync(opts[\"tests_folder\"]);\n@@ -187,6 +237,9 @@ async function main(argv) {\n         console.error(\"rustdoc-gui: No test selected\");\n         process.exit(2);\n     }\n+    files.forEach((file_name, index) => {\n+        files[index] = path.join(opts[\"tests_folder\"], file_name);\n+    });\n     files.sort();\n \n     if (!headless) {\n@@ -215,52 +268,29 @@ async function main(argv) {\n     };\n     process.on('exit', exitHandling);\n \n-    const tests_queue = [];\n-    let results = {\n-        successful: [],\n-        failed: [],\n-        errored: [],\n-    };\n+    const originalFilesLen = files.length;\n+    let results = createEmptyResults();\n     const status_bar = char_printer(files.length);\n-    for (let i = 0; i < files.length; ++i) {\n-        const file_name = files[i];\n-        const testPath = path.join(opts[\"tests_folder\"], file_name);\n-        const callback = runTest(testPath, options)\n-            .then(out => {\n-                const [output, nb_failures] = out;\n-                results[nb_failures === 0 ? \"successful\" : \"failed\"].push({\n-                    file_name: testPath,\n-                    output: output,\n-                });\n-                if (nb_failures > 0) {\n-                    status_bar.erroneous();\n-                    failed = true;\n-                } else {\n-                    status_bar.successful();\n-                }\n-            })\n-            .catch(err => {\n-                results.errored.push({\n-                    file_name: testPath + file_name,\n-                    output: err,\n-                });\n-                status_bar.erroneous();\n-                failed = true;\n-            })\n-            .finally(() => {\n-                // We now remove the promise from the tests_queue.\n-                tests_queue.splice(tests_queue.indexOf(callback), 1);\n-            });\n-        tests_queue.push(callback);\n-        if (opts[\"jobs\"] > 0 && tests_queue.length >= opts[\"jobs\"]) {\n-            await Promise.race(tests_queue);\n+\n+    let new_results;\n+    for (let it = 0; it < NB_RETRY && files.length > 0; ++it) {\n+        new_results = createEmptyResults();\n+        await runTests(opts, framework_options, files, new_results, status_bar, it + 1 >= NB_RETRY);\n+        Array.prototype.push.apply(results.successful, new_results.successful);\n+        // We generate the new list of files with the previously failing tests.\n+        files = Array.prototype.concat(new_results.failed, new_results.errored);\n+        if (files.length > originalFilesLen / 2) {\n+            // If we have too many failing tests, it's very likely not flaky failures anymore so\n+            // no need to retry.\n+            break;\n         }\n     }\n-    if (tests_queue.length > 0) {\n-        await Promise.all(tests_queue);\n-    }\n+\n     status_bar.finish();\n \n+    Array.prototype.push.apply(results.failed, new_results.failed);\n+    Array.prototype.push.apply(results.errored, new_results.errored);\n+\n     // We don't need this listener anymore.\n     process.removeListener(\"exit\", exitHandling);\n \n@@ -287,7 +317,7 @@ async function main(argv) {\n         });\n     }\n \n-    if (failed) {\n+    if (results.failed.length > 0 || results.errored.length > 0) {\n         process.exit(1);\n     }\n }"}]}