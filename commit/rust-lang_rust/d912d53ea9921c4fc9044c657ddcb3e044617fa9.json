{"sha": "d912d53ea9921c4fc9044c657ddcb3e044617fa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MTJkNTNlYTk5MjFjNGZjOTA0NGM2NTdkZGNiM2UwNDQ2MTdmYTk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-24T19:46:09Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-24T19:46:09Z"}, "message": "remove is_not_empty method from PriorityQueue", "tree": {"sha": "2730d7a4a42e68b1e40568416b2e8c27c352b38b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2730d7a4a42e68b1e40568416b2e8c27c352b38b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d912d53ea9921c4fc9044c657ddcb3e044617fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d912d53ea9921c4fc9044c657ddcb3e044617fa9", "html_url": "https://github.com/rust-lang/rust/commit/d912d53ea9921c4fc9044c657ddcb3e044617fa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d912d53ea9921c4fc9044c657ddcb3e044617fa9/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8f4da78e78238d7a24dc452302a4c1f113f0e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f4da78e78238d7a24dc452302a4c1f113f0e2a", "html_url": "https://github.com/rust-lang/rust/commit/e8f4da78e78238d7a24dc452302a4c1f113f0e2a"}], "stats": {"total": 9, "additions": 3, "deletions": 6}, "files": [{"sha": "a348026f07244af928c6b282fa33e7bb3dd265d8", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d912d53ea9921c4fc9044c657ddcb3e044617fa9/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d912d53ea9921c4fc9044c657ddcb3e044617fa9/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=d912d53ea9921c4fc9044c657ddcb3e044617fa9", "patch": "@@ -47,9 +47,6 @@ impl <T: Ord> PriorityQueue<T> {\n         if self.is_empty() { None } else { Some(self.top()) }\n     }\n \n-    /// Returns true if a queue contains some elements\n-    pure fn is_not_empty(&self) -> bool { self.data.is_not_empty() }\n-\n     /// Returns the number of elements the queue can hold without reallocating\n     pure fn capacity(&self) -> uint { vec::capacity(&self.data) }\n \n@@ -62,7 +59,7 @@ impl <T: Ord> PriorityQueue<T> {\n     /// Pop the greatest item from the queue - fails if empty\n     fn pop(&mut self) -> T {\n         let mut item = self.data.pop();\n-        if self.is_not_empty() { item <-> self.data[0]; self.siftdown(0); }\n+        if !self.is_empty() { item <-> self.data[0]; self.siftdown(0); }\n         item\n     }\n \n@@ -80,7 +77,7 @@ impl <T: Ord> PriorityQueue<T> {\n     /// Optimized version of a push followed by a pop\n     fn push_pop(&mut self, item: T) -> T {\n         let mut item = item;\n-        if self.is_not_empty() && self.data[0] > item {\n+        if !self.is_empty() && self.data[0] > item {\n             item <-> self.data[0];\n             self.siftdown(0);\n         }\n@@ -189,7 +186,7 @@ mod tests {\n         let data = ~[2, 4, 6, 2, 1, 8, 10, 3, 5, 7, 0, 9, 1];\n         let mut sorted = merge_sort(data, le);\n         let mut heap = from_vec(data);\n-        while heap.is_not_empty() {\n+        while !heap.is_empty() {\n             assert *heap.top() == sorted.last();\n             assert heap.pop() == sorted.pop();\n         }"}]}