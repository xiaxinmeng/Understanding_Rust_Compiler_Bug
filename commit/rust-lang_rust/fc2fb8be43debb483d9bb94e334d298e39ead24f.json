{"sha": "fc2fb8be43debb483d9bb94e334d298e39ead24f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMmZiOGJlNDNkZWJiNDgzZDliYjk0ZTMzNGQyOThlMzllYWQyNGY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-01T06:20:17Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-01T06:20:17Z"}, "message": "Support different indent styles for generics", "tree": {"sha": "2531273a88c6d39f7466d333e7eef9021d27a020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2531273a88c6d39f7466d333e7eef9021d27a020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2fb8be43debb483d9bb94e334d298e39ead24f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2fb8be43debb483d9bb94e334d298e39ead24f", "html_url": "https://github.com/rust-lang/rust/commit/fc2fb8be43debb483d9bb94e334d298e39ead24f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2fb8be43debb483d9bb94e334d298e39ead24f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0413c47a09d24ecd4494b2dc73442b88087f1020", "url": "https://api.github.com/repos/rust-lang/rust/commits/0413c47a09d24ecd4494b2dc73442b88087f1020", "html_url": "https://github.com/rust-lang/rust/commit/0413c47a09d24ecd4494b2dc73442b88087f1020"}], "stats": {"total": 170, "additions": 163, "deletions": 7}, "files": [{"sha": "fdfca0631729b7003b66f25042b58751b7172059", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2fb8be43debb483d9bb94e334d298e39ead24f/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2fb8be43debb483d9bb94e334d298e39ead24f/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=fc2fb8be43debb483d9bb94e334d298e39ead24f", "patch": "@@ -91,6 +91,7 @@ create_config! {\n     fn_args_paren_newline: bool,\n     fn_args_layout: Density,\n     fn_arg_indent: BlockIndentStyle,\n+    generics_indent: BlockIndentStyle,\n     struct_trailing_comma: SeparatorTactic,\n     struct_lit_trailing_comma: SeparatorTactic,\n     struct_lit_style: StructLitStyle,\n@@ -117,6 +118,7 @@ impl Default for Config {\n             fn_args_paren_newline: true,\n             fn_args_layout: Density::Tall,\n             fn_arg_indent: BlockIndentStyle::Visual,\n+            generics_indent: BlockIndentStyle::Visual,\n             struct_trailing_comma: SeparatorTactic::Vertical,\n             struct_lit_trailing_comma: SeparatorTactic::Vertical,\n             struct_lit_style: StructLitStyle::BlockIndent,"}, {"sha": "ae440826bdfbab3c861455be546618e770bae4ed", "filename": "src/items.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fc2fb8be43debb483d9bb94e334d298e39ead24f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2fb8be43debb483d9bb94e334d298e39ead24f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fc2fb8be43debb483d9bb94e334d298e39ead24f", "patch": "@@ -196,6 +196,7 @@ impl<'a> FmtVisitor<'a> {\n         // Generics.\n         let generics_indent = indent + result.len();\n         result.push_str(&self.rewrite_generics(generics,\n+                                               indent,\n                                                generics_indent,\n                                                codemap::mk_sp(span.lo,\n                                                               span_for_return(&fd.output).lo)));\n@@ -432,6 +433,7 @@ impl<'a> FmtVisitor<'a> {\n         let body_start = span.lo + BytePos(enum_snippet.find_uncommented(\"{\").unwrap() as u32 + 1);\n         let generics_str = self.format_generics(generics,\n                                                 \" {\",\n+                                                self.block_indent,\n                                                 self.block_indent + self.config.tab_spaces,\n                                                 codemap::mk_sp(span.lo,\n                                                                body_start));\n@@ -573,6 +575,7 @@ impl<'a> FmtVisitor<'a> {\n         let generics_str = match generics {\n             Some(g) => self.format_generics(g,\n                                             opener,\n+                                            offset,\n                                             offset + header_str.len(),\n                                             codemap::mk_sp(span.lo,\n                                                            struct_def.fields[0].span.lo)),\n@@ -670,9 +673,10 @@ impl<'a> FmtVisitor<'a> {\n                        generics: &ast::Generics,\n                        opener: &str,\n                        offset: usize,\n+                       generics_offset: usize,\n                        span: Span)\n                        -> String {\n-        let mut result = self.rewrite_generics(generics, offset, span);\n+        let mut result = self.rewrite_generics(generics, offset, generics_offset, span);\n \n         if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n             result.push_str(&self.rewrite_where_clause(&generics.where_clause,\n@@ -722,7 +726,12 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    fn rewrite_generics(&self, generics: &ast::Generics, offset: usize, span: Span) -> String {\n+    fn rewrite_generics(&self,\n+                        generics: &ast::Generics,\n+                        offset: usize,\n+                        generics_offset: usize,\n+                        span: Span)\n+                        -> String {\n         // FIXME convert bounds to where clauses where they get too big or if\n         // there is a where clause at all.\n         let lifetimes: &[_] = &generics.lifetimes;\n@@ -731,18 +740,24 @@ impl<'a> FmtVisitor<'a> {\n             return String::new();\n         }\n \n-        let budget = self.config.max_width - offset - 2;\n+        let offset = match self.config.generics_indent {\n+            BlockIndentStyle::Inherit => offset,\n+            BlockIndentStyle::Tabbed => offset + self.config.tab_spaces,\n+            // 1 = <\n+            BlockIndentStyle::Visual => generics_offset + 1,\n+        };\n+\n+        let h_budget = self.config.max_width - generics_offset - 2;\n         // TODO might need to insert a newline if the generics are really long\n \n         // Strings for the generics.\n-        // 1 = <\n         let context = self.get_context();\n         // FIXME: don't unwrap\n         let lt_strs = lifetimes.iter().map(|lt| {\n-            lt.rewrite(&context, budget, offset + 1).unwrap()\n+            lt.rewrite(&context, h_budget, offset).unwrap()\n         });\n         let ty_strs = tys.iter().map(|ty_param| {\n-            ty_param.rewrite(&context, budget, offset + 1).unwrap()\n+            ty_param.rewrite(&context, h_budget, offset).unwrap()\n         });\n \n         // Extract comments between generics.\n@@ -770,7 +785,7 @@ impl<'a> FmtVisitor<'a> {\n             item.item = ty;\n         }\n \n-        let fmt = ListFormatting::for_fn(budget, offset + 1);\n+        let fmt = ListFormatting::for_fn(h_budget, offset);\n \n         format!(\"<{}>\", write_list(&items, &fmt))\n     }"}, {"sha": "e621547a0105ed37717ceb481b6ffe72b3863944", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc2fb8be43debb483d9bb94e334d298e39ead24f/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fc2fb8be43debb483d9bb94e334d298e39ead24f/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=fc2fb8be43debb483d9bb94e334d298e39ead24f", "patch": "@@ -8,6 +8,7 @@ fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n fn_args_layout = \"Tall\"\n fn_arg_indent = \"Visual\"\n+generics_indent = \"Visual\"\n struct_trailing_comma = \"Vertical\"\n struct_lit_trailing_comma = \"Vertical\"\n struct_lit_style = \"BlockIndent\""}, {"sha": "1b7e6ad78ad975eb432186dfdb6079bd0093035f", "filename": "tests/source/fn-custom-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fc2fb8be43debb483d9bb94e334d298e39ead24f/tests%2Fsource%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2fb8be43debb483d9bb94e334d298e39ead24f/tests%2Fsource%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-2.rs?ref=fc2fb8be43debb483d9bb94e334d298e39ead24f", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-fn_arg_indent: Inherit\n+// rustfmt-generics_indent: Tabbed\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+    foo();\n+}\n+\n+fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb, TTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>(a: Aaaaaaaaaaaaaaa) {\n+    bar();\n+}\n+\n+impl Foo {\n+    fn foo(self, a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+        foo();\n+    }    \n+\n+    fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb, TTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>(a: Aaaaaaaaaaaaaaa) {\n+        bar();\n+    }\n+}\n+\n+struct Foo<TTTTTTTTTTTTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUU, VVVVVVVVVVVVVVVVVVVVVVVVVVV, WWWWWWWWWWWWWWWWWWWWWWWW> {\n+    foo: Foo,\n+}"}, {"sha": "68939eee6b53d28d1e71300d1fc4183fd0c08740", "filename": "tests/source/fn-custom-3.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fc2fb8be43debb483d9bb94e334d298e39ead24f/tests%2Fsource%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2fb8be43debb483d9bb94e334d298e39ead24f/tests%2Fsource%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-3.rs?ref=fc2fb8be43debb483d9bb94e334d298e39ead24f", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-fn_arg_indent: Tabbed\n+// rustfmt-generics_indent: Inherit\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+    foo();\n+}\n+\n+fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb, TTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>(a: Aaaaaaaaaaaaaaa) {\n+    bar();\n+}\n+\n+impl Foo {\n+    fn foo(self, a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+        foo();\n+    }    \n+\n+    fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb, TTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>(a: Aaaaaaaaaaaaaaa) {\n+        bar();\n+    }\n+}\n+\n+struct Foo<TTTTTTTTTTTTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUU, VVVVVVVVVVVVVVVVVVVVVVVVVVV, WWWWWWWWWWWWWWWWWWWWWWWW> {\n+    foo: Foo,\n+}"}, {"sha": "1bb7ef401ec5bc8c3c09ddc223b00a5570856e85", "filename": "tests/target/fn-custom-2.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fc2fb8be43debb483d9bb94e334d298e39ead24f/tests%2Ftarget%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2fb8be43debb483d9bb94e334d298e39ead24f/tests%2Ftarget%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-2.rs?ref=fc2fb8be43debb483d9bb94e334d298e39ead24f", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-fn_arg_indent: Inherit\n+// rustfmt-generics_indent: Tabbed\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaaa,\n+b: Bbbbbbbbbbbbbbbb,\n+c: Ccccccccccccccccc,\n+d: Ddddddddddddddddddddddddd,\n+e: Eeeeeeeeeeeeeeeeeee) {\n+    foo();\n+}\n+\n+fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    TTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n+    (a: Aaaaaaaaaaaaaaa) {\n+    bar();\n+}\n+\n+impl Foo {\n+    fn foo(self,\n+    a: Aaaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbbbb,\n+    c: Ccccccccccccccccc,\n+    d: Ddddddddddddddddddddddddd,\n+    e: Eeeeeeeeeeeeeeeeeee) {\n+        foo();\n+    }\n+\n+    fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+        TTTTTTTTTTTTT,\n+        UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n+        (a: Aaaaaaaaaaaaaaa) {\n+        bar();\n+    }\n+}\n+\n+struct Foo<TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUUUU,\n+    VVVVVVVVVVVVVVVVVVVVVVVVVVV,\n+    WWWWWWWWWWWWWWWWWWWWWWWW>\n+{\n+    foo: Foo,\n+}"}, {"sha": "61194dd04f3928edd679e2331a94e4a2839044ea", "filename": "tests/target/fn-custom-3.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fc2fb8be43debb483d9bb94e334d298e39ead24f/tests%2Ftarget%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2fb8be43debb483d9bb94e334d298e39ead24f/tests%2Ftarget%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-3.rs?ref=fc2fb8be43debb483d9bb94e334d298e39ead24f", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-fn_arg_indent: Tabbed\n+// rustfmt-generics_indent: Inherit\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbbbb,\n+    c: Ccccccccccccccccc,\n+    d: Ddddddddddddddddddddddddd,\n+    e: Eeeeeeeeeeeeeeeeeee) {\n+    foo();\n+}\n+\n+fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+TTTTTTTTTTTTT,\n+UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n+    (a: Aaaaaaaaaaaaaaa) {\n+    bar();\n+}\n+\n+impl Foo {\n+    fn foo(self,\n+        a: Aaaaaaaaaaaaaaa,\n+        b: Bbbbbbbbbbbbbbbb,\n+        c: Ccccccccccccccccc,\n+        d: Ddddddddddddddddddddddddd,\n+        e: Eeeeeeeeeeeeeeeeeee) {\n+        foo();\n+    }\n+\n+    fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    TTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n+        (a: Aaaaaaaaaaaaaaa) {\n+        bar();\n+    }\n+}\n+\n+struct Foo<TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+UUUUUUUUUUUUUUUUUUUUUU,\n+VVVVVVVVVVVVVVVVVVVVVVVVVVV,\n+WWWWWWWWWWWWWWWWWWWWWWWW>\n+{\n+    foo: Foo,\n+}"}]}