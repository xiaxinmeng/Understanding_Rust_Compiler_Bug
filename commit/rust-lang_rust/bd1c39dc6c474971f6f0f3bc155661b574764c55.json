{"sha": "bd1c39dc6c474971f6f0f3bc155661b574764c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMWMzOWRjNmM0NzQ5NzFmNmYwZjNiYzE1NTY2MWI1NzQ3NjRjNTU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-07-15T20:59:26Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-07-15T20:59:30Z"}, "message": "implement TrustedLen for Flatten/FlatMap if the U: IntoIterator == [T; N]\n\nThis only works if arrays are passed directly instead of array iterators\nbecause we need to be sure that they have not been advanced before\nFlatten does its size calculation.", "tree": {"sha": "ea9b423c6f0b3f27fc3a86b050879093f39ae872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea9b423c6f0b3f27fc3a86b050879093f39ae872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd1c39dc6c474971f6f0f3bc155661b574764c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1c39dc6c474971f6f0f3bc155661b574764c55", "html_url": "https://github.com/rust-lang/rust/commit/bd1c39dc6c474971f6f0f3bc155661b574764c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd1c39dc6c474971f6f0f3bc155661b574764c55/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a6c636c40540707cdfd542866998862e8aa72e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6c636c40540707cdfd542866998862e8aa72e8", "html_url": "https://github.com/rust-lang/rust/commit/0a6c636c40540707cdfd542866998862e8aa72e8"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "0240d30363a57297bbbfed55f3f844f8fcfd5734", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bd1c39dc6c474971f6f0f3bc155661b574764c55/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1c39dc6c474971f6f0f3bc155661b574764c55/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=bd1c39dc6c474971f6f0f3bc155661b574764c55", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::iter::{DoubleEndedIterator, Fuse, FusedIterator, Iterator, Map};\n+use crate::iter::{DoubleEndedIterator, Fuse, FusedIterator, Iterator, Map, TrustedLen};\n use crate::ops::Try;\n \n /// An iterator that maps each element to an iterator, and yields the elements\n@@ -114,6 +114,14 @@ where\n {\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<T, I, F, const N: usize> TrustedLen for FlatMap<I, [T; N], F>\n+where\n+    I: TrustedLen,\n+    F: FnMut(I::Item) -> [T; N],\n+{\n+}\n+\n /// An iterator that flattens one level of nesting in an iterator of things\n /// that can be turned into iterators.\n ///\n@@ -230,6 +238,12 @@ where\n {\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<T, I, const N: usize> TrustedLen for Flatten<I> where\n+    I: Iterator<Item = [T; N]> + TrustedLen\n+{\n+}\n+\n /// Real logic of both `Flatten` and `FlatMap` which simply delegate to\n /// this type.\n #[derive(Clone, Debug)]\n@@ -282,6 +296,21 @@ where\n         let (flo, fhi) = self.frontiter.as_ref().map_or((0, Some(0)), U::size_hint);\n         let (blo, bhi) = self.backiter.as_ref().map_or((0, Some(0)), U::size_hint);\n         let lo = flo.saturating_add(blo);\n+\n+        if let Some(fixed_size) = <<I as Iterator>::Item as ConstSizeIterable>::size() {\n+            let (lower, upper) = self.iter.size_hint();\n+\n+            let lower = lower.saturating_mul(fixed_size).saturating_add(lo);\n+            let upper = upper.and_then(|i| i.checked_mul(fixed_size));\n+            let upper = fhi\n+                .zip_with(bhi, usize::checked_add)\n+                .flatten()\n+                .zip_with(upper, usize::checked_add)\n+                .flatten();\n+\n+            return (lower, upper);\n+        }\n+\n         match (self.iter.size_hint(), fhi, bhi) {\n             ((0, Some(0)), Some(a), Some(b)) => (lo, a.checked_add(b)),\n             _ => (lo, None),\n@@ -444,3 +473,21 @@ where\n         init\n     }\n }\n+\n+trait ConstSizeIterable {\n+    fn size() -> Option<usize>;\n+}\n+\n+impl<T> ConstSizeIterable for T {\n+    #[inline]\n+    default fn size() -> Option<usize> {\n+        None\n+    }\n+}\n+\n+impl<T, const N: usize> ConstSizeIterable for [T; N] {\n+    #[inline]\n+    fn size() -> Option<usize> {\n+        Some(N)\n+    }\n+}"}, {"sha": "9fa0ff4c921539c0399c3b8f73bd8d517400cf28", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd1c39dc6c474971f6f0f3bc155661b574764c55/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1c39dc6c474971f6f0f3bc155661b574764c55/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=bd1c39dc6c474971f6f0f3bc155661b574764c55", "patch": "@@ -1,4 +1,5 @@\n use super::*;\n+use core::array;\n use core::iter::*;\n \n #[test]\n@@ -109,3 +110,26 @@ fn test_double_ended_flatten() {\n     assert_eq!(it.next(), None);\n     assert_eq!(it.next_back(), None);\n }\n+\n+#[test]\n+fn test_trusted_len_flatten() {\n+    fn assert_trusted_len<T: TrustedLen>(_: &T) {}\n+    let mut iter = array::IntoIter::new([[0; 3]; 4]).flatten();\n+    assert_trusted_len(&iter);\n+\n+    assert_eq!(iter.size_hint(), (12, Some(12)));\n+    iter.next();\n+    assert_eq!(iter.size_hint(), (11, Some(11)));\n+    iter.next_back();\n+    assert_eq!(iter.size_hint(), (10, Some(10)));\n+\n+    let iter = array::IntoIter::new([[(); usize::MAX]; 1]).flatten();\n+    assert_eq!(iter.size_hint(), (usize::MAX, Some(usize::MAX)));\n+\n+    let iter = array::IntoIter::new([[(); usize::MAX]; 2]).flatten();\n+    assert_eq!(iter.size_hint(), (usize::MAX, None));\n+\n+    let iter = [(), (), ()].iter().flat_map(|_| [(); 1000]);\n+    assert_trusted_len(&iter);\n+    assert_eq!(iter.size_hint(), (3000, Some(3000)));\n+}"}]}