{"sha": "92c56f607b24e5ef5dcbc70ac442c88c296e4591", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYzU2ZjYwN2IyNGU1ZWY1ZGNiYzcwYWM0NDJjODhjMjk2ZTQ1OTE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-02T05:25:29Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-10T17:42:41Z"}, "message": "Fix build on further stages", "tree": {"sha": "7948da6f0ce100f2272e0bf3b16b2c833a642fcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7948da6f0ce100f2272e0bf3b16b2c833a642fcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92c56f607b24e5ef5dcbc70ac442c88c296e4591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92c56f607b24e5ef5dcbc70ac442c88c296e4591", "html_url": "https://github.com/rust-lang/rust/commit/92c56f607b24e5ef5dcbc70ac442c88c296e4591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92c56f607b24e5ef5dcbc70ac442c88c296e4591/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00a0adc7913152bff626d6dbebfa2cfdbb93d0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00a0adc7913152bff626d6dbebfa2cfdbb93d0a", "html_url": "https://github.com/rust-lang/rust/commit/a00a0adc7913152bff626d6dbebfa2cfdbb93d0a"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "3a7acc5c7b59e90a6ff265b463ad716cce7ebd04", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92c56f607b24e5ef5dcbc70ac442c88c296e4591/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92c56f607b24e5ef5dcbc70ac442c88c296e4591/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=92c56f607b24e5ef5dcbc70ac442c88c296e4591", "patch": "@@ -400,7 +400,7 @@ impl Integer {\n     }\n \n     /// Find the smallest Integer type which can represent the signed value.\n-    pub fn fit_signed(x: i64) -> Integer {\n+    pub fn fit_signed(x: i128) -> Integer {\n         match x {\n             -0x0000_0000_0000_0001...0x0000_0000_0000_0000 => I1,\n             -0x0000_0000_0000_0080...0x0000_0000_0000_007f => I8,\n@@ -412,7 +412,7 @@ impl Integer {\n     }\n \n     /// Find the smallest Integer type which can represent the unsigned value.\n-    pub fn fit_unsigned(x: u64) -> Integer {\n+    pub fn fit_unsigned(x: u128) -> Integer {\n         match x {\n             0...0x0000_0000_0000_0001 => I1,\n             0...0x0000_0000_0000_00ff => I8,"}]}