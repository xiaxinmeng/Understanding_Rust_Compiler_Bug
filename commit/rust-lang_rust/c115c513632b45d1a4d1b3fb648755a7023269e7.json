{"sha": "c115c513632b45d1a4d1b3fb648755a7023269e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMTVjNTEzNjMyYjQ1ZDFhNGQxYjNmYjY0ODc1NWE3MDIzMjY5ZTc=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2015-08-07T14:36:56Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2015-08-07T14:53:13Z"}, "message": "improve span of erroneous empty macro invocation\n\nThe ideas is to use the span of the complete macro invocation if the span of a\nmacro error is `DUMMY_SP`.\n\nfixes #7970", "tree": {"sha": "1eee7e96b408c7f8b8432c54a96b76be450149a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eee7e96b408c7f8b8432c54a96b76be450149a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c115c513632b45d1a4d1b3fb648755a7023269e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c115c513632b45d1a4d1b3fb648755a7023269e7", "html_url": "https://github.com/rust-lang/rust/commit/c115c513632b45d1a4d1b3fb648755a7023269e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c115c513632b45d1a4d1b3fb648755a7023269e7/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "html_url": "https://github.com/rust-lang/rust/commit/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1"}], "stats": {"total": 77, "additions": 55, "deletions": 22}, "files": [{"sha": "26b4181ea8a66bb4f4dd79cf019c113a09285479", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c115c513632b45d1a4d1b3fb648755a7023269e7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115c513632b45d1a4d1b3fb648755a7023269e7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=c115c513632b45d1a4d1b3fb648755a7023269e7", "patch": "@@ -249,22 +249,6 @@ pub enum ParseResult<T> {\n pub type NamedParseResult = ParseResult<HashMap<Ident, Rc<NamedMatch>>>;\n pub type PositionalParseResult = ParseResult<Vec<Rc<NamedMatch>>>;\n \n-pub fn parse_or_else(sess: &ParseSess,\n-                     cfg: ast::CrateConfig,\n-                     rdr: TtReader,\n-                     ms: Vec<TokenTree> )\n-                     -> HashMap<Ident, Rc<NamedMatch>> {\n-    match parse(sess, cfg, rdr, &ms[..]) {\n-        Success(m) => m,\n-        Failure(sp, str) => {\n-            panic!(sess.span_diagnostic.span_fatal(sp, &str[..]))\n-        }\n-        Error(sp, str) => {\n-            panic!(sess.span_diagnostic.span_fatal(sp, &str[..]))\n-        }\n-    }\n-}\n-\n /// Perform a token equality check, ignoring syntax context (that is, an\n /// unhygienic comparison)\n pub fn token_name_eq(t1 : &Token, t2 : &Token) -> bool {"}, {"sha": "53e3127086cab25d4c1fa4917c143aa8331bd7b6", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c115c513632b45d1a4d1b3fb648755a7023269e7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115c513632b45d1a4d1b3fb648755a7023269e7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=c115c513632b45d1a4d1b3fb648755a7023269e7", "patch": "@@ -14,7 +14,7 @@ use ext::base::{ExtCtxt, MacResult, SyntaxExtension};\n use ext::base::{NormalTT, TTMacroExpander};\n use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n-use ext::tt::macro_parser::{parse, parse_or_else};\n+use ext::tt::macro_parser::parse;\n use parse::lexer::new_tt_reader;\n use parse::parser::Parser;\n use parse::token::{self, special_idents, gensym_ident, NtTT, Token};\n@@ -211,12 +211,23 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 best_fail_spot = sp;\n                 best_fail_msg = (*msg).clone();\n               },\n-              Error(sp, ref msg) => panic!(cx.span_fatal(sp, &msg[..]))\n+              Error(mut spp, ref msg) => {\n+                if spp == DUMMY_SP {\n+                    spp = sp;\n+                }\n+\n+                panic!(cx.span_fatal(spp, &msg[..]))\n+              }\n             }\n           }\n           _ => cx.bug(\"non-matcher found in parsed lhses\")\n         }\n     }\n+\n+    if best_fail_spot == DUMMY_SP {\n+        best_fail_spot = sp;\n+    }\n+\n     panic!(cx.span_fatal(best_fail_spot, &best_fail_msg[..]));\n }\n \n@@ -266,10 +277,20 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n                                    None,\n                                    None,\n                                    def.body.clone());\n-    let argument_map = parse_or_else(cx.parse_sess(),\n-                                     cx.cfg(),\n-                                     arg_reader,\n-                                     argument_gram);\n+\n+    let argument_map = match parse(cx.parse_sess(),\n+                                   cx.cfg(),\n+                                   arg_reader,\n+                                   &argument_gram) {\n+        Success(m) => m,\n+        Failure(mut sp, str) | Error(mut sp, str) => {\n+            if sp == DUMMY_SP {\n+                sp = def.span;\n+            }\n+\n+            panic!(cx.parse_sess().span_diagnostic.span_fatal(sp, &str[..]));\n+        }\n+    };\n \n     // Extract the arguments:\n     let lhses = match **argument_map.get(&lhs_nm).unwrap() {"}, {"sha": "114db74f42048a9660773948278ee8c63f60f038", "filename": "src/test/compile-fail/issue-7970a.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c115c513632b45d1a4d1b3fb648755a7023269e7/src%2Ftest%2Fcompile-fail%2Fissue-7970a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115c513632b45d1a4d1b3fb648755a7023269e7/src%2Ftest%2Fcompile-fail%2Fissue-7970a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7970a.rs?ref=c115c513632b45d1a4d1b3fb648755a7023269e7", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!();\n+    //~^ ERROR unexpected end of macro invocation\n+}"}, {"sha": "0cff90f281b9016626522229be70436cb8d74e44", "filename": "src/test/compile-fail/issue-7970b.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c115c513632b45d1a4d1b3fb648755a7023269e7/src%2Ftest%2Fcompile-fail%2Fissue-7970b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115c513632b45d1a4d1b3fb648755a7023269e7/src%2Ftest%2Fcompile-fail%2Fissue-7970b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7970b.rs?ref=c115c513632b45d1a4d1b3fb648755a7023269e7", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}\n+\n+macro_rules! test {}\n+//~^ ERROR unexpected end of macro invocation"}]}