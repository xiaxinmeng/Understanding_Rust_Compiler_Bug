{"sha": "274128c6b271c1e122e0220884080881c8f58290", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NDEyOGM2YjI3MWMxZTEyMmUwMjIwODg0MDgwODgxYzhmNTgyOTA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-24T01:38:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-24T01:38:37Z"}, "message": "Add trans.get_upcall and skeleton for trans_log.", "tree": {"sha": "71f041ea186678e69c389b07b7c7a90057ca0575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f041ea186678e69c389b07b7c7a90057ca0575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/274128c6b271c1e122e0220884080881c8f58290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/274128c6b271c1e122e0220884080881c8f58290", "html_url": "https://github.com/rust-lang/rust/commit/274128c6b271c1e122e0220884080881c8f58290", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/274128c6b271c1e122e0220884080881c8f58290/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730439c5087f16183f496a359b80be748695c39d", "url": "https://api.github.com/repos/rust-lang/rust/commits/730439c5087f16183f496a359b80be748695c39d", "html_url": "https://github.com/rust-lang/rust/commit/730439c5087f16183f496a359b80be748695c39d"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "30d721044a64b8c07abe1f31f0ffa7c7b1c602ff", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/274128c6b271c1e122e0220884080881c8f58290/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274128c6b271c1e122e0220884080881c8f58290/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=274128c6b271c1e122e0220884080881c8f58290", "patch": "@@ -2,13 +2,15 @@ import std._str;\n import std._vec;\n import std._str.rustrt.sbuf;\n import std._vec.rustrt.vbuf;\n+import std.map.hashmap;\n \n import front.ast;\n import driver.session;\n import back.x86;\n import back.abi;\n \n import util.common.istr;\n+import util.common.new_str_hash;\n \n import lib.llvm.llvm;\n import lib.llvm.builder;\n@@ -27,6 +29,7 @@ type glue_fns = rec(ValueRef activate_glue,\n \n type trans_ctxt = rec(session.session sess,\n                       ModuleRef llmod,\n+                      hashmap[str,ValueRef] upcalls,\n                       @glue_fns glues,\n                       str path);\n \n@@ -88,10 +91,36 @@ fn decl_upcall(ModuleRef llmod, uint _n) -> ValueRef {\n     ret decl_cdecl_fn(llmod, s, args, T_int());\n }\n \n-\n type terminator = fn(&trans_ctxt cx, builder b);\n \n+fn get_upcall(&trans_ctxt cx, str name, int n_args) -> ValueRef {\n+    if (cx.upcalls.contains_key(name)) {\n+        ret cx.upcalls.get(name);\n+    }\n+    auto inputs = vec(T_ptr(T_task()));\n+    inputs += _vec.init_elt[TypeRef](T_int(), n_args as uint);\n+    auto output = T_nil();\n+    auto f = decl_cdecl_fn(cx.llmod, name, inputs, output);\n+    cx.upcalls.insert(name, f);\n+    ret f;\n+}\n+\n fn trans_log(&trans_ctxt cx, builder b, &ast.atom a) {\n+    alt (a) {\n+        case (ast.atom_lit(?lit)) {\n+            alt (*lit) {\n+                case (ast.lit_int(?i)) {\n+                    cx.sess.unimpl(\"log int\");\n+                }\n+                case (_) {\n+                    cx.sess.unimpl(\"literal variant in trans_log\");\n+                }\n+            }\n+        }\n+        case (_) {\n+            cx.sess.unimpl(\"atom variant in trans_log\");\n+        }\n+    }\n }\n \n fn trans_stmt(&trans_ctxt cx, builder b, &ast.stmt s, terminator t) {\n@@ -160,7 +189,12 @@ fn trans_crate(session.session sess, ast.crate crate) {\n                       _vec.init_fn[ValueRef](bind decl_upcall(llmod, _),\n                                              abi.n_upcall_glues as uint));\n \n-    auto cx = rec(sess=sess, llmod=llmod, glues=glues, path=\"\");\n+    auto cx = rec(sess = sess,\n+                  llmod = llmod,\n+                  upcalls = new_str_hash[ValueRef](),\n+                  glues = glues,\n+                  path = \"\");\n+\n     trans_mod(cx, crate.module);\n \n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(\"rust_out.bc\"));"}]}