{"sha": "97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YWE1OTliMGQ4Y2QxOWM2NTM1YzdhOWU0YTFlNzJkNzBjMGMxNmY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-01-08T04:09:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-10T19:31:33Z"}, "message": "Fix circular_buffer growth when _next != 0", "tree": {"sha": "a2b1165f0abe4419f35ae4e3d5a4d62b3bd7bbac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b1165f0abe4419f35ae4e3d5a4d62b3bd7bbac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f", "html_url": "https://github.com/rust-lang/rust/commit/97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebf8638d3115b9da676e5f737c545ace503be868", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf8638d3115b9da676e5f737c545ace503be868", "html_url": "https://github.com/rust-lang/rust/commit/ebf8638d3115b9da676e5f737c545ace503be868"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "54898fb77c24071fa85899259d2bbd5bfbbaf0d8", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f", "patch": "@@ -63,7 +63,7 @@ circular_buffer::enqueue(void *src) {\n     I(dom, _unread <= _buffer_sz);\n \n     // Grow if necessary.\n-    if (_unread + unit_sz > _buffer_sz) {\n+    if (_next + _unread + unit_sz > _buffer_sz) {\n         size_t new_buffer_sz = _buffer_sz << 1;\n         I(dom, new_buffer_sz <= MAX_CIRCULAR_BUFFFER_SIZE);\n         void *new_buffer = dom->malloc(new_buffer_sz);\n@@ -76,15 +76,16 @@ circular_buffer::enqueue(void *src) {\n \n     dom->log(rust_log::MEM | rust_log::COMM,\n              \"circular_buffer enqueue \"\n-             \"unread: %d, buffer_sz: %d, unit_sz: %d\",\n-             _unread, _buffer_sz, unit_sz);\n+             \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n+             _unread, _next, _buffer_sz, unit_sz);\n \n     I(dom, is_power_of_two(_buffer_sz));\n     I(dom, _unread < _buffer_sz);\n-    I(dom, _unread + unit_sz <= _buffer_sz);\n+    I(dom, _next + _unread + unit_sz <= _buffer_sz);\n \n     // Copy data\n     size_t i = (_next + _unread) & (_buffer_sz - 1);\n+    I(dom, i + unit_sz <= _buffer_sz);\n     memcpy(&_buffer[i], src, unit_sz);\n     _unread += unit_sz;\n \n@@ -106,8 +107,8 @@ circular_buffer::dequeue(void *dst) {\n \n     dom->log(rust_log::MEM | rust_log::COMM,\n              \"circular_buffer dequeue \"\n-             \"unread: %d, buffer_sz: %d, unit_sz: %d\",\n-             _unread, _buffer_sz, unit_sz);\n+             \"unread: %d, next: %d, buffer_sz: %d, unit_sz: %d\",\n+             _unread, _next, _buffer_sz, unit_sz);\n \n     if (dst != NULL) {\n         memcpy(dst, &_buffer[_next], unit_sz);"}, {"sha": "044d8238079d604a0e6dcda91b3964a9acbd9559", "filename": "src/test/run-pass/chan-poweroftwo.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f/src%2Ftest%2Frun-pass%2Fchan-poweroftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f/src%2Ftest%2Frun-pass%2Fchan-poweroftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-poweroftwo.rs?ref=97aa599b0d8cd19c6535c7a9e4a1e72d70c0c16f", "patch": "@@ -10,7 +10,7 @@ import std._uint;\n import std._vec;\n \n // A 12-byte unit to send over the channel\n-type record = rec(i32 val1, i32 val2, i32 val3);\n+type record = rec(u32 val1, u32 val2, u32 val3);\n \n // Assuming that the default buffer size needs to hold 8 units,\n // then the minimum buffer size needs to be 96. That's not a\n@@ -20,7 +20,7 @@ impure fn test_init() {\n     let port[record] myport = port();\n     auto mychan = chan(myport);\n \n-    let record val = rec(val1=0i32, val2=0i32, val3=0i32);\n+    let record val = rec(val1=0u32, val2=0u32, val3=0u32);\n \n     mychan <| val;\n }\n@@ -31,7 +31,7 @@ impure fn test_grow() {\n     let port[record] myport = port();\n     auto mychan = chan(myport);\n \n-    let record val = rec(val1=0i32, val2=0i32, val3=0i32);\n+    let record val = rec(val1=0u32, val2=0u32, val3=0u32);\n \n     for each (uint i in _uint.range(0u, 100u)) {\n         mychan <| val;\n@@ -51,7 +51,7 @@ impure fn test_shrink2() {\n     let port[record] myport = port();\n     auto mychan = chan(myport);\n \n-    let record val = rec(val1=0i32, val2=0i32, val3=0i32);\n+    let record val = rec(val1=0u32, val2=0u32, val3=0u32);\n \n     for each (uint i in _uint.range(0u, 100u)) {\n         mychan <| val;\n@@ -62,11 +62,36 @@ impure fn test_shrink2() {\n     }\n }\n \n+// Test rotating the buffer when the unit size is not a power of two\n+impure fn test_rotate() {\n+    let port[record] myport = port();\n+    auto mychan = chan(myport);\n+\n+    let record val = rec(val1=0u32, val2=0u32, val3=0u32);\n+\n+    for each (uint j in _uint.range(0u, 10u)) {\n+        for each (uint i in _uint.range(0u, 10u)) {\n+            let record val = rec(val1=i as u32,\n+                                 val2=i as u32,\n+                                 val3=i as u32);\n+            mychan <| val;\n+        }\n+\n+        for each (uint i in _uint.range(0u, 10u)) {\n+            auto x <- myport;\n+            check (x.val1 == i as u32);\n+            check (x.val2 == i as u32);\n+            check (x.val3 == i as u32);\n+        }\n+    }\n+}\n+\n impure fn main() {\n     test_init();\n     test_grow();\n     test_shrink1();\n     test_shrink2();\n+    test_rotate();\n }\n \n // Local Variables:"}]}