{"sha": "f73d4ac9e093801eec92096684061ce7e189ca79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3M2Q0YWM5ZTA5MzgwMWVlYzkyMDk2Njg0MDYxY2U3ZTE4OWNhNzk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-01-14T19:29:57Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:08Z"}, "message": "Implement on disk cache for AllocId", "tree": {"sha": "d6360e991e56fdb12f19af552aac5f6157c10de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6360e991e56fdb12f19af552aac5f6157c10de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f73d4ac9e093801eec92096684061ce7e189ca79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53AACgkQpp+NIls6\n19kgoRAAi93A/K1gga+VwuWx51YKX9I+dX6ggrP3ayr72CgB3mTFjm5ZnYzDx9PX\nPd/vb5+7rgH4yjl9RC+rgeDb5gvAvgxD6DsdvBCbhytLMoB5l35fQsN+IpkmFoYn\nLjLidr71ZN4l+0ae44vyBrLuS4Jv4i1mK+OA8/koO3iOlKoul+uqPO+rMsf5SS5A\n7DPNYcSauUNNpX5+IyfiGIghyoQNBRrfRvAWx7IxJMbPuA5eVbNDSCs2XRe4E/9c\nj8ez0HuSCEfm/fonG0QVbpHWioVG+OQ1mjU0fmGF38ayp0fhthRLf6wRTvdmPi5+\n36NIMVlTShywfzgsLuZuZcrr6taopcVH/5qMOwWAjG00wZh92QncPzzDl4qtWTVF\n97PbwOKeLfZIojvdAlzw+vBKYSsh6y/t1VohBmefnt4zoqplXiTTfQNEP3SrFGr2\nc7Zz4TJXtPMAzUoBFcwWDH2KANOp/qUzhW/BQ0atp2PvX3vAiwjK1DbsfcXjPVRa\nlfiL8ibsd3l9TI2OqGI0TJ0m83KCUs7p/sec/Ls/zqnIUpE+D+elpK2oSRtfAR81\nnBZxJfZFPlp/tjk2EmF7JI0xSIWeJsThiI5imUyzgvgCRw75yUoCSf3zHp65RhA3\nBdB8ByNhHJsVeR8ePR+GQXQvKoTGg67fyr+M0DjhnOXQo8+iBEM=\n=MvAJ\n-----END PGP SIGNATURE-----", "payload": "tree d6360e991e56fdb12f19af552aac5f6157c10de0\nparent 246d05b6247429df433b3f01491b90b6e47a6ad8\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1515958197 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494448 +0100\n\nImplement on disk cache for AllocId\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f73d4ac9e093801eec92096684061ce7e189ca79", "html_url": "https://github.com/rust-lang/rust/commit/f73d4ac9e093801eec92096684061ce7e189ca79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f73d4ac9e093801eec92096684061ce7e189ca79/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "246d05b6247429df433b3f01491b90b6e47a6ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/246d05b6247429df433b3f01491b90b6e47a6ad8", "html_url": "https://github.com/rust-lang/rust/commit/246d05b6247429df433b3f01491b90b6e47a6ad8"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "7f126976a2ec1d0fa95d32d5abc34d93697a3877", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 77, "deletions": 4, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f73d4ac9e093801eec92096684061ce7e189ca79/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73d4ac9e093801eec92096684061ce7e189ca79/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=f73d4ac9e093801eec92096684061ce7e189ca79", "patch": "@@ -187,6 +187,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 type_shorthands: FxHashMap(),\n                 predicate_shorthands: FxHashMap(),\n                 expn_info_shorthands: FxHashMap(),\n+                interpret_alloc_shorthands: FxHashMap(),\n                 codemap: CachingCodemapView::new(tcx.sess.codemap()),\n                 file_to_file_index,\n             };\n@@ -361,7 +362,7 @@ impl<'sess> OnDiskCache<'sess> {\n             cnum_map: cnum_map.as_ref().unwrap(),\n             file_index_to_file: &self.file_index_to_file,\n             file_index_to_stable_id: &self.file_index_to_stable_id,\n-            synthetic_expansion_infos: &self.synthetic_expansion_infos,\n+            interpret_alloc_cache: FxHashMap::default(),\n         };\n \n         match decode_tagged(&mut decoder, dep_node_index) {\n@@ -423,6 +424,7 @@ struct CacheDecoder<'a, 'tcx: 'a, 'x> {\n     synthetic_expansion_infos: &'x RefCell<FxHashMap<AbsoluteBytePos, SyntaxContext>>,\n     file_index_to_file: &'x RefCell<FxHashMap<FileMapIndex, Lrc<FileMap>>>,\n     file_index_to_stable_id: &'x FxHashMap<FileMapIndex, StableFilemapId>,\n+    interpret_alloc_cache: FxHashMap<usize, interpret::AllocId>,\n }\n \n impl<'a, 'tcx, 'x> CacheDecoder<'a, 'tcx, 'x> {\n@@ -542,13 +544,51 @@ impl<'a, 'tcx: 'a, 'x> ty_codec::TyDecoder<'a, 'tcx> for CacheDecoder<'a, 'tcx,\n \n implement_ty_decoder!( CacheDecoder<'a, 'tcx, 'x> );\n \n-\n impl<'a, 'tcx, 'x> SpecializedDecoder<interpret::AllocId> for CacheDecoder<'a, 'tcx, 'x> {\n     fn specialized_decode(&mut self) -> Result<interpret::AllocId, Self::Error> {\n-        unimplemented!()\n+        const MAX1: usize = usize::max_value() - 1;\n+        let tcx = self.tcx;\n+        let interpret_interner = || tcx.interpret_interner.borrow_mut();\n+        let pos = TyDecoder::position(self);\n+        match usize::decode(self)? {\n+            ::std::usize::MAX => {\n+                let alloc_id = interpret_interner().reserve();\n+                trace!(\"creating alloc id {:?} at {}\", alloc_id, pos);\n+                // insert early to allow recursive allocs\n+                self.interpret_alloc_cache.insert(pos, alloc_id);\n+\n+                let allocation = interpret::Allocation::decode(self)?;\n+                trace!(\"decoded alloc {:?} {:#?}\", alloc_id, allocation);\n+                let allocation = self.tcx.intern_const_alloc(allocation);\n+                interpret_interner().intern_at_reserved(alloc_id, allocation);\n+\n+                if let Some(glob) = Option::<DefId>::decode(self)? {\n+                    interpret_interner().cache(glob, alloc_id);\n+                }\n+\n+                Ok(alloc_id)\n+            },\n+            MAX1 => {\n+                trace!(\"creating fn alloc id at {}\", pos);\n+                let instance = ty::Instance::decode(self)?;\n+                trace!(\"decoded fn alloc instance: {:?}\", instance);\n+                let id = interpret_interner().create_fn_alloc(instance);\n+                trace!(\"created fn alloc id: {:?}\", id);\n+                self.interpret_alloc_cache.insert(pos, id);\n+                Ok(id)\n+            },\n+            shorthand => {\n+                trace!(\"loading shorthand {}\", shorthand);\n+                if let Some(&alloc_id) = self.interpret_alloc_cache.get(&shorthand) {\n+                    return Ok(alloc_id);\n+                }\n+                trace!(\"shorthand {} not cached, loading entire allocation\", shorthand);\n+                // need to load allocation\n+                self.with_position(shorthand, |this| interpret::AllocId::decode(this))\n+            },\n+        }\n     }\n }\n-\n impl<'a, 'tcx, 'x> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx, 'x> {\n     fn specialized_decode(&mut self) -> Result<Span, Self::Error> {\n         let tag: u8 = Decodable::decode(self)?;\n@@ -710,6 +750,7 @@ struct CacheEncoder<'enc, 'a, 'tcx, E>\n     type_shorthands: FxHashMap<ty::Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n     expn_info_shorthands: FxHashMap<Mark, AbsoluteBytePos>,\n+    interpret_alloc_shorthands: FxHashMap<interpret::AllocId, usize>,\n     codemap: CachingCodemapView<'tcx>,\n     file_to_file_index: FxHashMap<*const FileMap, FileMapIndex>,\n }\n@@ -742,6 +783,38 @@ impl<'enc, 'a, 'tcx, E> CacheEncoder<'enc, 'a, 'tcx, E>\n     }\n }\n \n+impl<'enc, 'a, 'tcx, E> SpecializedEncoder<interpret::AllocId> for CacheEncoder<'enc, 'a, 'tcx, E>\n+    where E: 'enc + ty_codec::TyEncoder\n+{\n+    fn specialized_encode(&mut self, alloc_id: &interpret::AllocId) -> Result<(), Self::Error> {\n+        trace!(\"encoding {:?} at {}\", alloc_id, self.position());\n+        if let Some(shorthand) = self.interpret_alloc_shorthands.get(alloc_id).cloned() {\n+            trace!(\"encoding {:?} as shorthand to {}\", alloc_id, shorthand);\n+            return shorthand.encode(self);\n+        }\n+        let start = self.position();\n+        // cache the allocation shorthand now, because the allocation itself might recursively\n+        // point to itself.\n+        self.interpret_alloc_shorthands.insert(*alloc_id, start);\n+        let interpret_interner = self.tcx.interpret_interner.borrow();\n+        if let Some(alloc) = interpret_interner.get_alloc(*alloc_id) {\n+            trace!(\"encoding {:?} with {:#?}\", alloc_id, alloc);\n+            usize::max_value().encode(self)?;\n+            alloc.encode(self)?;\n+            interpret_interner\n+                .get_corresponding_static_def_id(*alloc_id)\n+                .encode(self)?;\n+        } else if let Some(fn_instance) = interpret_interner.get_fn(*alloc_id) {\n+            trace!(\"encoding {:?} with {:#?}\", alloc_id, fn_instance);\n+            (usize::max_value() - 1).encode(self)?;\n+            fn_instance.encode(self)?;\n+        } else {\n+            bug!(\"alloc id without corresponding allocation: {}\", alloc_id);\n+        }\n+        Ok(())\n+    }\n+}\n+\n impl<'enc, 'a, 'tcx, E> SpecializedEncoder<Span> for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder\n {"}]}