{"sha": "014026d1a7ca991f82f12efa95ef4dffb29dc8af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDAyNmQxYTdjYTk5MWY4MmYxMmVmYTk1ZWY0ZGZmYjI5ZGM4YWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T21:25:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T21:25:43Z"}, "message": "Auto merge of #87153 - michaelwoerister:debuginfo-names-dyn-trait-projection-bounds, r=wesleywiser\n\n[debuginfo] Emit associated type bindings in trait object type names.\n\nThis PR updates debuginfo type name generation for trait objects to include associated type bindings and auto trait bounds -- so that, for example, the debuginfo type name of `&dyn Iterator<Item=Foo>` and `&dyn Iterator<Item=Bar>` don't both map to just `&dyn Iterator` anymore.\n\nThe following table shows examples of debuginfo type names before and after the PR:\n| type | before |  after |\n|------|---------|-------|\n| `&dyn Iterator<Item=u32>>` | `&dyn Iterator` | `&dyn Iterator<Item=u32>` |\n| `&(dyn Iterator<Item=u32>> + Sync)` | `&dyn Iterator` | `&(dyn Iterator<Item=u32> + Sync)` |\n| `&(dyn SomeTrait<bool, i8, Bar=u32>> + Send)` | `&dyn SomeTrait<bool, i8>` | `&(dyn SomeTrait<bool, i8, Bar=u32>> + Send)`  |\n\nFor targets that need C++-like type names, we use `assoc$<Item,u32>` instead of `Item=u32`:\n| type | before |  after |\n|------|---------|-------|\n| `&dyn Iterator<Item=u32>>` | `ref$<dyn$<Iterator> >` | `ref$<dyn$<Iterator<assoc$<Item,u32> > > >` |\n| `&(dyn Iterator<Item=u32>> + Sync)` | `ref$<dyn$<Iterator> >` | `ref$<dyn$<Iterator<assoc$<Item,u32> >,Sync> >` |\n| `&(dyn SomeTrait<bool, i8, Bar=u32>> + Send)` | `ref$<dyn$<SomeTrait<bool, i8> > >` | `ref$<dyn$<SomeTrait<bool,i8,assoc$<Bar,u32> > >,Send> >`  |\n\nThe PR also adds self-profiling measurements for debuginfo type name generation (re. https://github.com/rust-lang/rust/issues/86431). It looks like the compiler spends up to 0.5% of its time in that task, so the potential for optimizing it via caching seems limited.\n\nHowever, the perf run also shows [the biggest regression](https://perf.rust-lang.org/detailed-query.html?commit=585e91c718b0b2c5319e1fffd0ff1e62aaf7ccc2&base_commit=b9197978a90be6f7570741eabe2da175fec75375&benchmark=tokio-webpush-simple-debug&run_name=incr-unchanged) in a test case that does not even invoke the code in question. This suggests that the length of the names we generate here can affect performance by influencing how much data the linker has to copy around.\n\nFixes https://github.com/rust-lang/rust/issues/86134.", "tree": {"sha": "c37b14619e1df48cc510cf6ee081bd925de332d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c37b14619e1df48cc510cf6ee081bd925de332d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014026d1a7ca991f82f12efa95ef4dffb29dc8af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014026d1a7ca991f82f12efa95ef4dffb29dc8af", "html_url": "https://github.com/rust-lang/rust/commit/014026d1a7ca991f82f12efa95ef4dffb29dc8af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014026d1a7ca991f82f12efa95ef4dffb29dc8af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5af63480fb08b5276a608a8cd4865fa92d4b2bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5af63480fb08b5276a608a8cd4865fa92d4b2bc", "html_url": "https://github.com/rust-lang/rust/commit/d5af63480fb08b5276a608a8cd4865fa92d4b2bc"}, {"sha": "5b1bfaed8c387ff36200ad789a4a215680fbff79", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1bfaed8c387ff36200ad789a4a215680fbff79", "html_url": "https://github.com/rust-lang/rust/commit/5b1bfaed8c387ff36200ad789a4a215680fbff79"}], "stats": {"total": 290, "additions": 182, "deletions": 108}, "files": [{"sha": "0c25ff3cfe4761a4dc447d1ba7419811f98e94ed", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/014026d1a7ca991f82f12efa95ef4dffb29dc8af/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/014026d1a7ca991f82f12efa95ef4dffb29dc8af/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=014026d1a7ca991f82f12efa95ef4dffb29dc8af", "patch": "@@ -3747,6 +3747,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_symbol_mangling\",\n  \"rustc_target\",\n+ \"smallvec\",\n  \"tempfile\",\n  \"tracing\",\n ]"}, {"sha": "a11098b11c6ebea80839eebf9f6fe13041ceb964", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/014026d1a7ca991f82f12efa95ef4dffb29dc8af/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/014026d1a7ca991f82f12efa95ef4dffb29dc8af/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=014026d1a7ca991f82f12efa95ef4dffb29dc8af", "patch": "@@ -16,6 +16,7 @@ libc = \"0.2.50\"\n jobserver = \"0.1.22\"\n tempfile = \"3.2\"\n pathdiff = \"0.2.0\"\n+smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n \n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "81e905b1b5f578279466d7f28feb5ade52ac7147", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 139, "deletions": 71, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/014026d1a7ca991f82f12efa95ef4dffb29dc8af/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014026d1a7ca991f82f12efa95ef4dffb29dc8af/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=014026d1a7ca991f82f12efa95ef4dffb29dc8af", "patch": "@@ -19,8 +19,9 @@ use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathD\n use rustc_middle::ich::NodeIdHashingMode;\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtDef, ExistentialProjection, Ty, TyCtxt};\n use rustc_target::abi::{Integer, TagEncoding, Variants};\n+use smallvec::SmallVec;\n \n use std::fmt::Write;\n \n@@ -33,6 +34,8 @@ pub fn compute_debuginfo_type_name<'tcx>(\n     t: Ty<'tcx>,\n     qualified: bool,\n ) -> String {\n+    let _prof = tcx.prof.generic_activity(\"compute_debuginfo_type_name\");\n+\n     let mut result = String::with_capacity(64);\n     let mut visited = FxHashSet::default();\n     push_debuginfo_type_name(tcx, t, qualified, &mut result, &mut visited);\n@@ -41,7 +44,7 @@ pub fn compute_debuginfo_type_name<'tcx>(\n \n // Pushes the name of the type as it should be stored in debuginfo on the\n // `output` String. See also compute_debuginfo_type_name().\n-pub fn push_debuginfo_type_name<'tcx>(\n+fn push_debuginfo_type_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     t: Ty<'tcx>,\n     qualified: bool,\n@@ -84,25 +87,14 @@ pub fn push_debuginfo_type_name<'tcx>(\n \n             for component_type in component_types {\n                 push_debuginfo_type_name(tcx, component_type.expect_ty(), true, output, visited);\n-                output.push(',');\n-\n-                // Natvis does not always like having spaces between parts of the type name\n-                // and this causes issues when we need to write a typename in natvis, for example\n-                // as part of a cast like the `HashMap` visualizer does.\n-                if !cpp_like_names {\n-                    output.push(' ');\n-                }\n+                push_arg_separator(cpp_like_names, output);\n             }\n             if !component_types.is_empty() {\n-                output.pop();\n-\n-                if !cpp_like_names {\n-                    output.pop();\n-                }\n+                pop_arg_separator(output);\n             }\n \n             if cpp_like_names {\n-                push_close_angle_bracket(tcx, output);\n+                push_close_angle_bracket(cpp_like_names, output);\n             } else {\n                 output.push(')');\n             }\n@@ -124,7 +116,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n             push_debuginfo_type_name(tcx, inner_type, qualified, output, visited);\n \n             if cpp_like_names {\n-                push_close_angle_bracket(tcx, output);\n+                push_close_angle_bracket(cpp_like_names, output);\n             }\n         }\n         ty::Ref(_, inner_type, mutbl) => {\n@@ -150,7 +142,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n             push_debuginfo_type_name(tcx, inner_type, qualified, output, visited);\n \n             if cpp_like_names && !is_slice_or_str {\n-                push_close_angle_bracket(tcx, output);\n+                push_close_angle_bracket(cpp_like_names, output);\n             }\n         }\n         ty::Array(inner_type, len) => {\n@@ -182,69 +174,97 @@ pub fn push_debuginfo_type_name<'tcx>(\n             push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n \n             if cpp_like_names {\n-                push_close_angle_bracket(tcx, output);\n+                push_close_angle_bracket(cpp_like_names, output);\n             } else {\n                 output.push(']');\n             }\n         }\n         ty::Dynamic(ref trait_data, ..) => {\n-            if cpp_like_names {\n+            let auto_traits: SmallVec<[DefId; 4]> = trait_data.auto_traits().collect();\n+\n+            let has_enclosing_parens = if cpp_like_names {\n                 output.push_str(\"dyn$<\");\n+                false\n             } else {\n-                output.push_str(\"dyn \");\n-            }\n+                if trait_data.len() > 1 && auto_traits.len() != 0 {\n+                    // We need enclosing parens because there is more than one trait\n+                    output.push_str(\"(dyn \");\n+                    true\n+                } else {\n+                    output.push_str(\"dyn \");\n+                    false\n+                }\n+            };\n \n             if let Some(principal) = trait_data.principal() {\n                 let principal =\n                     tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), principal);\n                 push_item_name(tcx, principal.def_id, qualified, output);\n-                push_generic_params_internal(tcx, principal.substs, output, visited);\n-            } else {\n-                // The auto traits come ordered by `DefPathHash`, which guarantees stability if the\n-                // environment is stable (e.g., incremental builds) but not otherwise (e.g.,\n-                // updated compiler version, different target).\n-                //\n-                // To avoid that causing instabilities in test output, sort the auto-traits\n-                // alphabetically.\n-                let mut auto_traits: Vec<_> = trait_data\n-                    .iter()\n-                    .filter_map(|predicate| {\n-                        match tcx.normalize_erasing_late_bound_regions(\n-                            ty::ParamEnv::reveal_all(),\n-                            predicate,\n-                        ) {\n-                            ty::ExistentialPredicate::AutoTrait(def_id) => {\n-                                let mut name = String::new();\n-                                push_item_name(tcx, def_id, true, &mut name);\n-                                Some(name)\n-                            }\n-                            _ => None,\n-                        }\n+                let principal_has_generic_params =\n+                    push_generic_params_internal(tcx, principal.substs, output, visited);\n+\n+                let projection_bounds: SmallVec<[_; 4]> = trait_data\n+                    .projection_bounds()\n+                    .map(|bound| {\n+                        let ExistentialProjection { item_def_id, ty, .. } = bound.skip_binder();\n+                        (item_def_id, ty)\n                     })\n                     .collect();\n-                auto_traits.sort();\n \n-                for name in auto_traits {\n-                    output.push_str(&name);\n+                if projection_bounds.len() != 0 {\n+                    if principal_has_generic_params {\n+                        // push_generic_params_internal() above added a `>` but we actually\n+                        // want to add more items to that list, so remove that again.\n+                        pop_close_angle_bracket(output);\n+                    }\n \n-                    if cpp_like_names {\n-                        output.push_str(\", \");\n-                    } else {\n-                        output.push_str(\" + \");\n+                    for (item_def_id, ty) in projection_bounds {\n+                        push_arg_separator(cpp_like_names, output);\n+\n+                        if cpp_like_names {\n+                            output.push_str(\"assoc$<\");\n+                            push_item_name(tcx, item_def_id, false, output);\n+                            push_arg_separator(cpp_like_names, output);\n+                            push_debuginfo_type_name(tcx, ty, true, output, visited);\n+                            push_close_angle_bracket(cpp_like_names, output);\n+                        } else {\n+                            push_item_name(tcx, item_def_id, false, output);\n+                            output.push('=');\n+                            push_debuginfo_type_name(tcx, ty, true, output, visited);\n+                        }\n                     }\n+\n+                    push_close_angle_bracket(cpp_like_names, output);\n                 }\n \n-                // Remove the trailing joining characters. For cpp_like_names\n-                // this is `, ` otherwise ` + `.\n-                output.pop();\n-                output.pop();\n-                if !cpp_like_names {\n-                    output.pop();\n+                if auto_traits.len() != 0 {\n+                    push_auto_trait_separator(cpp_like_names, output);\n                 }\n             }\n \n+            if auto_traits.len() != 0 {\n+                let mut auto_traits: SmallVec<[String; 4]> = auto_traits\n+                    .into_iter()\n+                    .map(|def_id| {\n+                        let mut name = String::with_capacity(20);\n+                        push_item_name(tcx, def_id, true, &mut name);\n+                        name\n+                    })\n+                    .collect();\n+                auto_traits.sort_unstable();\n+\n+                for auto_trait in auto_traits {\n+                    output.push_str(&auto_trait);\n+                    push_auto_trait_separator(cpp_like_names, output);\n+                }\n+\n+                pop_auto_trait_separator(output);\n+            }\n+\n             if cpp_like_names {\n-                push_close_angle_bracket(tcx, output);\n+                push_close_angle_bracket(cpp_like_names, output);\n+            } else if has_enclosing_parens {\n+                output.push(')');\n             }\n         }\n         ty::FnDef(..) | ty::FnPtr(_) => {\n@@ -296,10 +316,9 @@ pub fn push_debuginfo_type_name<'tcx>(\n             if !sig.inputs().is_empty() {\n                 for &parameter_type in sig.inputs() {\n                     push_debuginfo_type_name(tcx, parameter_type, true, output, visited);\n-                    output.push_str(\", \");\n+                    push_arg_separator(cpp_like_names, output);\n                 }\n-                output.pop();\n-                output.pop();\n+                pop_arg_separator(output);\n             }\n \n             if sig.c_variadic {\n@@ -405,7 +424,25 @@ pub fn push_debuginfo_type_name<'tcx>(\n                 output.push_str(&format!(\", {}\", variant));\n             }\n         }\n-        push_close_angle_bracket(tcx, output);\n+        push_close_angle_bracket(true, output);\n+    }\n+\n+    const NON_CPP_AUTO_TRAIT_SEPARATOR: &str = \" + \";\n+\n+    fn push_auto_trait_separator(cpp_like_names: bool, output: &mut String) {\n+        if cpp_like_names {\n+            push_arg_separator(cpp_like_names, output);\n+        } else {\n+            output.push_str(NON_CPP_AUTO_TRAIT_SEPARATOR);\n+        }\n+    }\n+\n+    fn pop_auto_trait_separator(output: &mut String) {\n+        if output.ends_with(NON_CPP_AUTO_TRAIT_SEPARATOR) {\n+            output.truncate(output.len() - NON_CPP_AUTO_TRAIT_SEPARATOR.len());\n+        } else {\n+            pop_arg_separator(output);\n+        }\n     }\n }\n \n@@ -466,13 +503,15 @@ fn push_generic_params_internal<'tcx>(\n     substs: SubstsRef<'tcx>,\n     output: &mut String,\n     visited: &mut FxHashSet<Ty<'tcx>>,\n-) {\n+) -> bool {\n     if substs.non_erasable_generics().next().is_none() {\n-        return;\n+        return false;\n     }\n \n     debug_assert_eq!(substs, tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), substs));\n \n+    let cpp_like_names = cpp_like_names(tcx);\n+\n     output.push('<');\n \n     for type_parameter in substs.non_erasable_generics() {\n@@ -486,13 +525,12 @@ fn push_generic_params_internal<'tcx>(\n             other => bug!(\"Unexpected non-erasable generic: {:?}\", other),\n         }\n \n-        output.push_str(\", \");\n+        push_arg_separator(cpp_like_names, output);\n     }\n+    pop_arg_separator(output);\n+    push_close_angle_bracket(cpp_like_names, output);\n \n-    output.pop();\n-    output.pop();\n-\n-    push_close_angle_bracket(tcx, output);\n+    true\n }\n \n fn push_const_param<'tcx>(tcx: TyCtxt<'tcx>, ct: &'tcx ty::Const<'tcx>, output: &mut String) {\n@@ -541,20 +579,50 @@ fn push_const_param<'tcx>(tcx: TyCtxt<'tcx>, ct: &'tcx ty::Const<'tcx>, output:\n }\n \n pub fn push_generic_params<'tcx>(tcx: TyCtxt<'tcx>, substs: SubstsRef<'tcx>, output: &mut String) {\n+    let _prof = tcx.prof.generic_activity(\"compute_debuginfo_type_name\");\n     let mut visited = FxHashSet::default();\n     push_generic_params_internal(tcx, substs, output, &mut visited);\n }\n \n-fn push_close_angle_bracket<'tcx>(tcx: TyCtxt<'tcx>, output: &mut String) {\n+fn push_close_angle_bracket(cpp_like_names: bool, output: &mut String) {\n     // MSVC debugger always treats `>>` as a shift, even when parsing templates,\n     // so add a space to avoid confusion.\n-    if cpp_like_names(tcx) && output.ends_with('>') {\n+    if cpp_like_names && output.ends_with('>') {\n         output.push(' ')\n     };\n \n     output.push('>');\n }\n \n+fn pop_close_angle_bracket(output: &mut String) {\n+    assert!(output.ends_with('>'), \"'output' does not end with '>': {}\", output);\n+    output.pop();\n+    if output.ends_with(' ') {\n+        output.pop();\n+    }\n+}\n+\n+fn push_arg_separator(cpp_like_names: bool, output: &mut String) {\n+    // Natvis does not always like having spaces between parts of the type name\n+    // and this causes issues when we need to write a typename in natvis, for example\n+    // as part of a cast like the `HashMap` visualizer does.\n+    if cpp_like_names {\n+        output.push(',');\n+    } else {\n+        output.push_str(\", \");\n+    };\n+}\n+\n+fn pop_arg_separator(output: &mut String) {\n+    if output.ends_with(' ') {\n+        output.pop();\n+    }\n+\n+    assert!(output.ends_with(','));\n+\n+    output.pop();\n+}\n+\n fn cpp_like_names(tcx: TyCtxt<'_>) -> bool {\n     tcx.sess.target.is_like_msvc\n }"}, {"sha": "28ab176ba509acd2a70ec88ea483f86915ba59fb", "filename": "src/test/debuginfo/function-names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=014026d1a7ca991f82f12efa95ef4dffb29dc8af", "patch": "@@ -52,21 +52,21 @@\n // cdb-command:x a!function_names::*::impl_function*\n // cdb-check:[...] a!function_names::Mod1::TestStruct2::impl_function (void)\n // cdb-check:[...] a!function_names::TestStruct1::impl_function (void)\n-// cdb-check:[...] a!function_names::GenericStruct<i32, i32>::impl_function<i32, i32> (void)\n+// cdb-check:[...] a!function_names::GenericStruct<i32,i32>::impl_function<i32,i32> (void)\n \n // Trait implementations\n // cdb-command:x a!function_names::*::trait_function*\n // cdb-check:[...] a!function_names::impl$3::trait_function<i32> (void)\n+// cdb-check:[...] a!function_names::impl$6::trait_function<i32,1> (void)\n // cdb-check:[...] a!function_names::impl$1::trait_function (void)\n-// cdb-check:[...] a!function_names::impl$6::trait_function<i32, 1> (void)\n // cdb-check:[...] a!function_names::impl$5::trait_function3<function_names::TestStruct1> (void)\n // cdb-check:[...] a!function_names::Mod1::impl$1::trait_function (void)\n \n // Closure\n // cdb-command:x a!function_names::*::closure*\n+// cdb-check:[...] a!function_names::impl$2::impl_function::closure$0<i32,i32> (void)\n // cdb-check:[...] a!function_names::main::closure$0 (void)\n // cdb-check:[...] a!function_names::generic_func::closure$0<i32> (void)\n-// cdb-check:[...] a!function_names::impl$2::impl_function::closure$0<i32, i32> (void)\n \n // Generator\n // cdb-command:x a!function_names::*::generator*"}, {"sha": "5fa5ce80099358821d4f6f9b641d6524ac1da7eb", "filename": "src/test/debuginfo/generic-struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs?ref=014026d1a7ca991f82f12efa95ef4dffb29dc8af", "patch": "@@ -44,21 +44,21 @@\n // cdb-command:g\n \n // cdb-command:dx int_int\n-// cdb-check:int_int          [Type: generic_struct::AGenericStruct<i32, i32>]\n+// cdb-check:int_int          [Type: generic_struct::AGenericStruct<i32,i32>]\n // cdb-check:[...]key              : 0 [Type: int]\n // cdb-check:[...]value            : 1 [Type: int]\n // cdb-command:dx int_float\n-// cdb-check:int_float        [Type: generic_struct::AGenericStruct<i32, f64>]\n+// cdb-check:int_float        [Type: generic_struct::AGenericStruct<i32,f64>]\n // cdb-check:[...]key              : 2 [Type: int]\n // cdb-check:[...]value            : 3.500000 [Type: double]\n // cdb-command:dx float_int\n-// cdb-check:float_int        [Type: generic_struct::AGenericStruct<f64, i32>]\n+// cdb-check:float_int        [Type: generic_struct::AGenericStruct<f64,i32>]\n // cdb-check:[...]key              : 4.500000 [Type: double]\n // cdb-check:[...]value            : 5 [Type: int]\n // cdb-command:dx float_int_float\n-// cdb-check:float_int_float  [Type: generic_struct::AGenericStruct<f64, generic_struct::AGenericStruct<i32, f64> >]\n+// cdb-check:float_int_float  [Type: generic_struct::AGenericStruct<f64,generic_struct::AGenericStruct<i32,f64> >]\n // cdb-check:[...]key              : 6.500000 [Type: double]\n-// cdb-check:[...]value            [Type: generic_struct::AGenericStruct<i32, f64>]\n+// cdb-check:[...]value            [Type: generic_struct::AGenericStruct<i32,f64>]\n \n \n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "9463f82c797496b5a05f9fde1f3622f3dd47c1c4", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=014026d1a7ca991f82f12efa95ef4dffb29dc8af", "patch": "@@ -87,8 +87,8 @@\n // cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::Discriminant$]\n \n // cdb-command: dx -r2 l,!\n-// cdb-check:l,!              : $T2 [Type: enum$<core::result::Result<u32, enum$<msvc_pretty_enums::Empty> >, Ok>]\n-// cdb-check:    [+0x000] Ok               [Type: enum$<core::result::Result<u32, enum$<msvc_pretty_enums::Empty> >, Ok>::Ok]\n+// cdb-check:l,!              : $T2 [Type: enum$<core::result::Result<u32,enum$<msvc_pretty_enums::Empty> >, Ok>]\n+// cdb-check:    [+0x000] Ok               [Type: enum$<core::result::Result<u32,enum$<msvc_pretty_enums::Empty> >, Ok>::Ok]\n // cdb-check:        [+0x000] __0              : 0x2a [Type: unsigned int]\n \n pub enum CStyleEnum {"}, {"sha": "40bde8606996aaabdae5ec3d5cbd4fcb6233814c", "filename": "src/test/debuginfo/pretty-std-collections-hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs?ref=014026d1a7ca991f82f12efa95ef4dffb29dc8af", "patch": "@@ -10,7 +10,7 @@\n // cdb-command: g\n \n // cdb-command: dx hash_set,d\n-// cdb-check:hash_set,d [...] : { len=15 } [Type: [...]::HashSet<u64, [...]>]\n+// cdb-check:hash_set,d [...] : { len=15 } [Type: [...]::HashSet<u64,[...]>]\n // cdb-check:    [len]            : 15 [Type: [...]]\n // cdb-check:    [capacity]       : [...]\n // cdb-check:    [[...]] [...]    : 0 [Type: u64]\n@@ -44,7 +44,7 @@\n // cdb-check:    [[...]] [...]    : 14 [Type: u64]\n \n // cdb-command: dx hash_map,d\n-// cdb-check:hash_map,d [...] : { len=15 } [Type: [...]::HashMap<u64, u64, [...]>]\n+// cdb-check:hash_map,d [...] : { len=15 } [Type: [...]::HashMap<u64,u64,[...]>]\n // cdb-check:    [len]            : 15 [Type: [...]]\n // cdb-check:    [capacity]       : [...]\n // cdb-check:    [\"0x0\"]          : 0 [Type: unsigned __int64]"}, {"sha": "a190a29eec2a59491f32fa85884e1bf8082d7f56", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=014026d1a7ca991f82f12efa95ef4dffb29dc8af", "patch": "@@ -79,7 +79,7 @@\n // cdb-check:    [3]              : 3 [Type: int]\n \n // cdb-command: dx vec,d\n-// cdb-check:vec,d [...] : { len=4 } [Type: [...]::Vec<u64, alloc::alloc::Global>]\n+// cdb-check:vec,d [...] : { len=4 } [Type: [...]::Vec<u64,alloc::alloc::Global>]\n // cdb-check:    [len]            : 4 [Type: [...]]\n // cdb-check:    [capacity]       : [...] [Type: [...]]\n // cdb-check:    [0]              : 4 [Type: unsigned __int64]"}, {"sha": "c0d905a6acc4ebd1ec6e668fc659809b975d2e92", "filename": "src/test/debuginfo/result-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Fresult-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Fresult-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fresult-types.rs?ref=014026d1a7ca991f82f12efa95ef4dffb29dc8af", "patch": "@@ -7,11 +7,11 @@\n // cdb-command: g\n \n // cdb-command: dx x,d\n-// cdb-check:x,d              : Ok [Type: enum$<core::result::Result<i32, str> >]\n+// cdb-check:x,d              : Ok [Type: enum$<core::result::Result<i32,str> >]\n // cdb-check:    [...] __0              : -3 [Type: int]\n \n // cdb-command: dx y\n-// cdb-check:y                : Err [Type: enum$<core::result::Result<i32, str> >]\n+// cdb-check:y                : Err [Type: enum$<core::result::Result<i32,str> >]\n // cdb-check:    [...] __0              : \"Some error message\" [Type: str]\n \n fn main()"}, {"sha": "3497f0afb2cb0bd4447872ef8bb0ceb1f2d40111", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014026d1a7ca991f82f12efa95ef4dffb29dc8af/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=014026d1a7ca991f82f12efa95ef4dffb29dc8af", "patch": "@@ -117,7 +117,11 @@\n // gdb-check:type = &mut dyn type_names::Trait2<type_names::mod1::mod2::Struct3, type_names::GenericStruct<usize, isize>>\n \n // gdb-command:whatis no_principal_trait\n-// gdb-check:type = alloc::boxed::Box<dyn core::marker::Send + core::marker::Sync, alloc::alloc::Global>\n+// gdb-check:type = alloc::boxed::Box<(dyn core::marker::Send + core::marker::Sync), alloc::alloc::Global>\n+\n+// gdb-command:whatis has_associated_type_trait\n+// gdb-check:type = &(dyn type_names::Trait3<u32, AssocType=isize> + core::marker::Send)\n+\n \n // BARE FUNCTIONS\n // gdb-command:whatis rust_fn\n@@ -169,7 +173,7 @@\n // 0-sized structs appear to be optimized away in some cases, so only check the structs that do\n // actually appear.\n // cdb-command:dv /t *_struct\n-// cdb-check:struct type_names::GenericStruct<enum$<type_names::mod1::Enum2>, f64> mut_generic_struct = [...]\n+// cdb-check:struct type_names::GenericStruct<enum$<type_names::mod1::Enum2>,f64> mut_generic_struct = [...]\n \n // ENUMS\n // cdb-command:dv /t *_enum_*\n@@ -186,15 +190,15 @@\n \n // BOX\n // cdb-command:dv /t box*\n-// cdb-check:struct tuple$<alloc::boxed::Box<f32, alloc::alloc::Global>,i32> box1 = [...]\n-// cdb-check:struct tuple$<alloc::boxed::Box<enum$<type_names::mod1::mod2::Enum3<f32> >, alloc::alloc::Global>,i32> box2 = [...]\n+// cdb-check:struct tuple$<alloc::boxed::Box<f32,alloc::alloc::Global>,i32> box1 = [...]\n+// cdb-check:struct tuple$<alloc::boxed::Box<enum$<type_names::mod1::mod2::Enum3<f32> >,alloc::alloc::Global>,i32> box2 = [...]\n \n // REFERENCES\n // cdb-command:dv /t *ref*\n // cdb-check:struct tuple$<ref$<type_names::Struct1>,i32> ref1 = [...]\n-// cdb-check:struct tuple$<ref$<type_names::GenericStruct<char, type_names::Struct1> >,i32> ref2 = [...]\n+// cdb-check:struct tuple$<ref$<type_names::GenericStruct<char,type_names::Struct1> >,i32> ref2 = [...]\n // cdb-check:struct tuple$<ref_mut$<type_names::Struct1>,i32> mut_ref1 = [...]\n-// cdb-check:struct tuple$<ref_mut$<type_names::GenericStruct<enum$<type_names::mod1::Enum2>, f64> >,i32> mut_ref2 = [...]\n+// cdb-check:struct tuple$<ref_mut$<type_names::GenericStruct<enum$<type_names::mod1::Enum2>,f64> >,i32> mut_ref2 = [...]\n \n // RAW POINTERS\n // cdb-command:dv /t *_ptr*\n@@ -209,31 +213,31 @@\n // cdb-command:dv /t *vec*\n // cdb-check:struct tuple$<array$<type_names::Struct1,3>,i16> fixed_size_vec1 = [...]\n // cdb-check:struct tuple$<array$<usize,3>,i16> fixed_size_vec2 = [...]\n-// cdb-check:struct alloc::vec::Vec<usize, alloc::alloc::Global> vec1 = [...]\n-// cdb-check:struct alloc::vec::Vec<enum$<type_names::mod1::Enum2>, alloc::alloc::Global> vec2 = [...]\n+// cdb-check:struct alloc::vec::Vec<usize,alloc::alloc::Global> vec1 = [...]\n+// cdb-check:struct alloc::vec::Vec<enum$<type_names::mod1::Enum2>,alloc::alloc::Global> vec2 = [...]\n // cdb-command:dv /t slice*\n // cdb-check:struct slice$<usize> slice1 = [...]\n // cdb-check:struct slice$<enum$<type_names::mod1::Enum2> > slice2 = [...]\n \n // TRAITS\n // cdb-command:dv /t *_trait\n-// cdb-check:struct ref_mut$<dyn$<type_names::Trait2<type_names::mod1::mod2::Struct3, type_names::GenericStruct<usize, isize> > > > generic_mut_ref_trait = [...]\n-// cdb-check:struct ref$<dyn$<type_names::Trait2<type_names::Struct1, type_names::Struct1> > > generic_ref_trait = [...]\n-// cdb-check:struct alloc::boxed::Box<dyn$<type_names::Trait2<i32, type_names::mod1::Struct2> >, alloc::alloc::Global> generic_box_trait = [...]\n-// cdb-check:struct alloc::boxed::Box<dyn$<type_names::Trait1>, alloc::alloc::Global> box_trait = [...]\n+// cdb-check:struct ref_mut$<dyn$<type_names::Trait2<type_names::mod1::mod2::Struct3,type_names::GenericStruct<usize,isize> > > > generic_mut_ref_trait = [...]\n+// cdb-check:struct ref$<dyn$<type_names::Trait2<type_names::Struct1,type_names::Struct1> > > generic_ref_trait = [...]\n+// cdb-check:struct alloc::boxed::Box<dyn$<type_names::Trait2<i32,type_names::mod1::Struct2> >,alloc::alloc::Global> generic_box_trait = [...]\n+// cdb-check:struct alloc::boxed::Box<dyn$<type_names::Trait1>,alloc::alloc::Global> box_trait = [...]\n // cdb-check:struct ref$<dyn$<type_names::Trait1> > ref_trait = [...]\n // cdb-check:struct ref_mut$<dyn$<type_names::Trait1> > mut_ref_trait = [...]\n-// cdb-check:struct alloc::boxed::Box<dyn$<core::marker::Send, core::marker::Sync>, alloc::alloc::Global> no_principal_trait = [...]\n-// cdb-check:struct ref$<dyn$<type_names::Trait3> > has_associated_type_trait = struct ref$<dyn$<type_names::Trait3> >\n+// cdb-check:struct alloc::boxed::Box<dyn$<core::marker::Send,core::marker::Sync>,alloc::alloc::Global> no_principal_trait = [...]\n+// cdb-check:struct ref$<dyn$<type_names::Trait3<u32,assoc$<AssocType,isize> >,core::marker::Send> > has_associated_type_trait = struct ref$<dyn$<type_names::Trait3<u32,assoc$<AssocType,isize> >,core::marker::Send> >\n \n // BARE FUNCTIONS\n // cdb-command:dv /t *_fn*\n-// cdb-check:struct tuple$<type_names::mod1::Struct2 (*)(type_names::GenericStruct<u16, u8>),usize> unsafe_fn_with_return_value = [...]\n+// cdb-check:struct tuple$<type_names::mod1::Struct2 (*)(type_names::GenericStruct<u16,u8>),usize> unsafe_fn_with_return_value = [...]\n // cdb-check:struct tuple$<type_names::Struct1 (*)(),usize> extern_c_fn_with_return_value = [...]\n // cdb-check:struct tuple$<usize (*)(f64),usize> rust_fn_with_return_value = [...]\n-// cdb-check:struct tuple$<void (*)(enum$<core::result::Result<char, f64> >),usize> unsafe_fn = [...]\n+// cdb-check:struct tuple$<void (*)(enum$<core::result::Result<char,f64> >),usize> unsafe_fn = [...]\n // cdb-check:struct tuple$<void (*)(isize),usize> extern_c_fn = [...]\n-// cdb-check:struct tuple$<void (*)(enum$<core::option::Option<isize> >, enum$<core::option::Option<ref$<type_names::mod1::Struct2> >, 1, [...], Some>),usize> rust_fn = [...]\n+// cdb-check:struct tuple$<void (*)(enum$<core::option::Option<isize> >,enum$<core::option::Option<ref$<type_names::mod1::Struct2> >, 1, [...], Some>),usize> rust_fn = [...]\n // cdb-command:dv /t *_function*\n // cdb-check:struct tuple$<isize (*)(ptr_const$<u8>, ...),usize> variadic_function = [...]\n // cdb-check:struct tuple$<type_names::mod1::mod2::Struct3 (*)(type_names::mod1::mod2::Struct3),usize> generic_function_struct3 = [...]\n@@ -306,14 +310,14 @@ trait Trait1 {\n trait Trait2<T1, T2> {\n     fn dummy(&self, _: T1, _: T2) {}\n }\n-trait Trait3 {\n+trait Trait3<T> {\n     type AssocType;\n-    fn dummy(&self) {}\n+    fn dummy(&self) -> T { panic!() }\n }\n \n impl Trait1 for isize {}\n impl<T1, T2> Trait2<T1, T2> for isize {}\n-impl Trait3 for isize {\n+impl<T> Trait3<T> for isize {\n     type AssocType = isize;\n }\n \n@@ -404,8 +408,8 @@ fn main() {\n     let ref_trait = &0_isize as &dyn Trait1;\n     let mut mut_int1 = 0_isize;\n     let mut_ref_trait = (&mut mut_int1) as &mut dyn Trait1;\n-    let no_principal_trait = (box 0_isize) as Box<dyn Send + Sync>;\n-    let has_associated_type_trait = &0_isize as &dyn Trait3<AssocType = isize>;\n+    let no_principal_trait = (box 0_isize) as Box<(dyn Send + Sync)>;\n+    let has_associated_type_trait = &0_isize as &(dyn Trait3<u32, AssocType = isize> + Send);\n \n     let generic_box_trait = (box 0_isize) as Box<dyn Trait2<i32, mod1::Struct2>>;\n     let generic_ref_trait = (&0_isize) as &dyn Trait2<Struct1, Struct1>;"}]}