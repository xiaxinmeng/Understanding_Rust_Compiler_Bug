{"sha": "ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "node_id": "C_kwDOAAsO6NoAKGVkOWU2ZjJhZDgyYTlhZDc4M2VkODliOTM3ZDI5NTFlNDRiNmNlNGI", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-09-30T02:13:30Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-09-30T02:49:23Z"}, "message": "Enable inline stack probes on X86 with LLVM 16", "tree": {"sha": "7967f1b6edc80c2a305f4322ed71407302064b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7967f1b6edc80c2a305f4322ed71407302064b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "html_url": "https://github.com/rust-lang/rust/commit/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb8d276c94c77a5fada815c5fad3b8d324adac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb8d276c94c77a5fada815c5fad3b8d324adac4", "html_url": "https://github.com/rust-lang/rust/commit/1bb8d276c94c77a5fada815c5fad3b8d324adac4"}], "stats": {"total": 152, "additions": 87, "deletions": 65}, "files": [{"sha": "b85214a9c6b4acd84d9627fbba3b45035a1536ce", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -14,8 +14,7 @@ pub fn target() -> Target {\n         arch: \"x86\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n-            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-            stack_probes: StackProbeType::Call,\n+            stack_probes: StackProbeType::X86,\n             ..base\n         },\n     }"}, {"sha": "99b9d88e642ff296b11e0c0fcfb624d2bad52e20", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -7,8 +7,7 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     base.frame_pointer = FramePointer::Always;\n \n     // Clang automatically chooses a more specific target based on"}, {"sha": "c7c30c23901d306220ef95e8a065fa35ef225911", "filename": "compiler/rustc_target/src/spec/i686_linux_android.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -11,8 +11,7 @@ pub fn target() -> Target {\n     // https://developer.android.com/ndk/guides/abis.html#x86\n     base.cpu = \"pentiumpro\".into();\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3\".into();\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"i686-linux-android\".into(),"}, {"sha": "7d201245006f153eeecfaa02e29c12135918ce44", "filename": "compiler/rustc_target/src/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"-Wl,-znotext\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"i686-unknown-freebsd\".into(),"}, {"sha": "357cc547fa0c1f32fdefd33dd757eddbce7bc5d0", "filename": "compiler/rustc_target/src/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"i686-unknown-haiku\".into(),"}, {"sha": "bb7b56802983adb43a4707ce4e47f89c93e09e50", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -6,8 +6,7 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.supported_sanitizers = SanitizerSet::ADDRESS;\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"i686-unknown-linux-gnu\".into(),"}, {"sha": "f604791967402f73086c8568b2f5b518d4f54a8f", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"-Wl,-melf_i386\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     // The unwinder used by i686-unknown-linux-musl, the LLVM libunwind\n     // implementation, apparently relies on frame pointers existing... somehow."}, {"sha": "0fd2d1231df889b36ff9b61a7c8b89b9b873cd88", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"i686-unknown-netbsdelf\".into(),"}, {"sha": "2952c043daaf8874205699a19135fcd7ef27b55e", "filename": "compiler/rustc_target/src/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"-fuse-ld=lld\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"i686-unknown-openbsd\".into(),"}, {"sha": "4a0d98efd82ebd7702a4e67185e5ef2ac6480f29", "filename": "compiler/rustc_target/src/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"i686-unknown-linux-gnu\".into(),"}, {"sha": "f41533a9548fe459aa0431e94a78ca210541d4af", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -6,8 +6,7 @@ pub fn opts() -> TargetOptions {\n         env: \"gnu\".into(),\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n-        // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-        stack_probes: StackProbeType::Call,\n+        stack_probes: StackProbeType::X86,\n         frame_pointer: FramePointer::Always,\n         position_independent_executables: true,\n         needs_plt: true,"}, {"sha": "af85e2f4febcdc7c9dcf966db4e92068077ba30e", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -635,6 +635,10 @@ pub enum StackProbeType {\n }\n \n impl StackProbeType {\n+    // LLVM X86 targets (ix86 and x86_64) can use inline-asm stack probes starting with LLVM 16.\n+    // Notable past issues were rust#83139 (fixed in 14) and rust#84667 (fixed in 16).\n+    const X86: Self = Self::InlineOrCall { min_llvm_version_for_inline: (16, 0, 0) };\n+\n     fn from_json(json: &Json) -> Result<Self, String> {\n         let object = json.as_object().ok_or_else(|| \"expected a JSON object\")?;\n         let kind = object"}, {"sha": "ad96923320ce87ea7e0ccff8c6e54b3ef0e93e8d", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -9,8 +9,7 @@ pub fn target() -> Target {\n     base.frame_pointer = FramePointer::Always;\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;\n "}, {"sha": "e6143025d6d2c0323981b99731beb8d6666ff1f8", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -13,8 +13,7 @@ pub fn target() -> Target {\n         arch: \"x86_64\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n-            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-            stack_probes: StackProbeType::Call,\n+            stack_probes: StackProbeType::X86,\n             ..base\n         },\n     }"}, {"sha": "61591dacf45b32d9d3616598587d0392bbfff33d", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -15,8 +15,7 @@ pub fn target() -> Target {\n         arch: \"x86_64\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n-            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-            stack_probes: StackProbeType::Call,\n+            stack_probes: StackProbeType::X86,\n             ..base\n         },\n     }"}, {"sha": "3d54da0867cf7c7be6634d26a902228eec354e7a", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -10,8 +10,7 @@ pub fn target() -> Target {\n         arch: \"x86_64\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n-            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-            stack_probes: StackProbeType::Call,\n+            stack_probes: StackProbeType::X86,\n             ..base\n         },\n     }"}, {"sha": "e499b1985e7616d40735dcaae629b02115f35356", "filename": "compiler/rustc_target/src/spec/x86_64_apple_watchos_sim.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_watchos_sim.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -15,8 +15,7 @@ pub fn target() -> Target {\n         arch: \"x86_64\".into(),\n         options: TargetOptions {\n             max_atomic_width: Some(64),\n-            // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-            stack_probes: StackProbeType::Call,\n+            stack_probes: StackProbeType::X86,\n             forces_embed_bitcode: true,\n             // Taken from a clang build on Xcode 11.4.1.\n             // These arguments are not actually invoked - they just have"}, {"sha": "532dd6d074280106955f238941a3bed071ab1277", "filename": "compiler/rustc_target/src/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -4,8 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;\n \n     Target {"}, {"sha": "4db5ec7fd285b64e6de8fb60ecfdf9e4db19ca27", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -7,8 +7,7 @@ pub fn target() -> Target {\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"x86_64-linux-android\".into(),"}, {"sha": "974359a138b9fbf2f0531d0f25d1945e6b845666", "filename": "compiler/rustc_target/src/spec/x86_64_pc_solaris.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -6,8 +6,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.vendor = \"pc\".into();\n     base.max_atomic_width = Some(64);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;\n \n     Target {"}, {"sha": "a2fe371a2b8fac186580194139e9250ae222344d", "filename": "compiler/rustc_target/src/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -6,8 +6,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.vendor = \"sun\".into();\n     base.max_atomic_width = Some(64);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"x86_64-pc-solaris\".into(),"}, {"sha": "989e6432b66333143e08e1e1e591a189388bd1fb", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"x86_64-unknown-dragonfly\".into(),"}, {"sha": "24b5b4beebc80c5efa37f39cbe4790a5abdb0c88", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n "}, {"sha": "e3f14aeeea91f0bca5a404626d0e030c488864e0", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     // This option is required to build executables on Haiku x86_64\n     base.position_independent_executables = true;\n "}, {"sha": "fb1af33f80a86d51167843e146dc11e6c7dddc19", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.features = \"+rdrnd,+rdseed\".into();\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"x86_64-unknown-hermit\".into(),"}, {"sha": "34e20544da694dbedde0f7f648e347aab38116e8", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     base.static_position_independent_executables = true;\n     base.supported_sanitizers = SanitizerSet::ADDRESS\n         | SanitizerSet::CFI"}, {"sha": "23a1f5d80f216320e29d8b936a8c60c32de87487", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -6,8 +6,7 @@ pub fn target() -> Target {\n     base.abi = \"x32\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mx32\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     base.has_thread_local = false;\n     // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI\n     // breaks code gen. See LLVM bug 36743"}, {"sha": "179f0995456083c75e3b29b503f9e4a033f4f220", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     base.static_position_independent_executables = true;\n     base.supported_sanitizers = SanitizerSet::ADDRESS\n         | SanitizerSet::CFI"}, {"sha": "ac77dfb64157edbece3ba4145fa9f37ee5a74c4d", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers = SanitizerSet::ADDRESS\n         | SanitizerSet::CFI\n         | SanitizerSet::LEAK"}, {"sha": "871cdd02078a0aacf744729b781e5b3fad0a7e61", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -11,8 +11,7 @@ pub fn target() -> Target {\n     let opts = TargetOptions {\n         cpu: \"x86-64\".into(),\n         max_atomic_width: Some(64),\n-        // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-        stack_probes: StackProbeType::Call,\n+        stack_probes: StackProbeType::X86,\n         position_independent_executables: true,\n         static_position_independent_executables: true,\n         relro_level: RelroLevel::Full,"}, {"sha": "b8084d513f7fa8c23a56b0a940cb64384691d14e", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"x86_64-unknown-openbsd\".into(),"}, {"sha": "a2a143f856de6af159549c712866dcfdef07bbf2", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n \n     Target {\n         llvm_target: \"x86_64-unknown-redox\".into(),"}, {"sha": "187027d388974f749cda07954f6182c37a3409c2", "filename": "compiler/rustc_target/src/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n-    // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n-    base.stack_probes = StackProbeType::Call;\n+    base.stack_probes = StackProbeType::X86;\n     base.disable_redzone = true;\n \n     Target {"}, {"sha": "c7141fb208a0d940031e26f1fd0633b9684430e3", "filename": "src/test/assembly/x86-stack-probes.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/src%2Ftest%2Fassembly%2Fx86-stack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/src%2Ftest%2Fassembly%2Fx86-stack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86-stack-probes.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -0,0 +1,42 @@\n+// min-llvm-version: 16\n+// revisions: x86_64 i686\n+// assembly-output: emit-asm\n+//[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n+//[x86_64] needs-llvm-components: x86\n+//[i686] compile-flags: --target i686-unknown-linux-gnu\n+//[i686] needs-llvm-components: x86\n+// compile-flags: -C llvm-args=-x86-asm-syntax=intel\n+\n+#![feature(no_core, lang_items)]\n+#![crate_type = \"lib\"]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+impl Copy for u8 {}\n+\n+// Check that inline-asm stack probes are generated correctly.\n+// To avoid making this test fragile to slight asm changes,\n+// we only check that the stack pointer is decremented by a page at a time,\n+// instead of matching the whole probe sequence.\n+\n+// CHECK-LABEL: small_stack_probe:\n+#[no_mangle]\n+pub fn small_stack_probe(x: u8, f: fn(&mut [u8; 8192])) {\n+    // CHECK-NOT: __rust_probestack\n+    // x86_64: sub rsp, 4096\n+    // i686: sub esp, 4096\n+    f(&mut [x; 8192]);\n+}\n+\n+// CHECK-LABEL: big_stack_probe:\n+#[no_mangle]\n+pub fn big_stack_probe(x: u8, f: fn(&[u8; 65536])) {\n+    // CHECK-NOT: __rust_probestack\n+    // x86_64: sub rsp, 4096\n+    // i686: sub esp, 4096\n+    f(&mut [x; 65536]);\n+}"}, {"sha": "a18fd41c28c0e943a2522f7c13823fe6cc524f87", "filename": "src/test/codegen/stack-probes-call.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/src%2Ftest%2Fcodegen%2Fstack-probes-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/src%2Ftest%2Fcodegen%2Fstack-probes-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes-call.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -5,8 +5,10 @@\n // revisions: i686 x86_64\n //[i686] compile-flags: --target i686-unknown-linux-gnu\n //[i686] needs-llvm-components: x86\n+//[i686] ignore-llvm-version: 16 - 99\n //[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n //[x86_64] needs-llvm-components: x86\n+//[x86_64] ignore-llvm-version: 16 - 99\n \n #![crate_type = \"rlib\"]\n #![feature(no_core, lang_items)]"}, {"sha": "a6b781de531fd9eaf5aeac215ba0b09d8e739ba5", "filename": "src/test/codegen/stack-probes-inline.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/src%2Ftest%2Fcodegen%2Fstack-probes-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b/src%2Ftest%2Fcodegen%2Fstack-probes-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes-inline.rs?ref=ed9e6f2ad82a9ad783ed89b937d2951e44b6ce4b", "patch": "@@ -2,7 +2,7 @@\n // or `StackProbeType::InlineOrCall` when running on newer LLVM.\n \n // compile-flags: -C no-prepopulate-passes\n-// revisions: powerpc powerpc64 powerpc64le s390x\n+// revisions: powerpc powerpc64 powerpc64le s390x i686 x86_64\n //[powerpc] compile-flags: --target powerpc-unknown-linux-gnu\n //[powerpc] needs-llvm-components: powerpc\n //[powerpc64] compile-flags: --target powerpc64-unknown-linux-gnu\n@@ -11,6 +11,12 @@\n //[powerpc64le] needs-llvm-components: powerpc\n //[s390x] compile-flags: --target s390x-unknown-linux-gnu\n //[s390x] needs-llvm-components: systemz\n+//[i686] compile-flags: --target i686-unknown-linux-gnu\n+//[i686] needs-llvm-components: x86\n+//[i686] min-llvm-version: 16\n+//[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n+//[x86_64] needs-llvm-components: x86\n+//[x86_64] min-llvm-version: 16\n \n #![crate_type = \"rlib\"]\n #![feature(no_core, lang_items)]"}]}