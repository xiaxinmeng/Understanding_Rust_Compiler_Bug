{"sha": "555f56862e10cda545c9b7de21f68c7d62266c35", "node_id": "C_kwDOAAsO6NoAKDU1NWY1Njg2MmUxMGNkYTU0NWM5YjdkZTIxZjY4YzdkNjIyNjZjMzU", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2023-03-09T17:31:10Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2023-03-13T14:17:35Z"}, "message": "Fix semicolon insertion in `match_single_binding`", "tree": {"sha": "079cb8a63bf392df72f4ce91db4023b683f01539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/079cb8a63bf392df72f4ce91db4023b683f01539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/555f56862e10cda545c9b7de21f68c7d62266c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/555f56862e10cda545c9b7de21f68c7d62266c35", "html_url": "https://github.com/rust-lang/rust/commit/555f56862e10cda545c9b7de21f68c7d62266c35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/555f56862e10cda545c9b7de21f68c7d62266c35/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65ad6f5d0c97d4b20e68c9c81c3f35225563fa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65ad6f5d0c97d4b20e68c9c81c3f35225563fa6", "html_url": "https://github.com/rust-lang/rust/commit/e65ad6f5d0c97d4b20e68c9c81c3f35225563fa6"}], "stats": {"total": 236, "additions": 192, "deletions": 44}, "files": [{"sha": "89da7a55cbd5f82ad7014b584d246d82a317b7a1", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/555f56862e10cda545c9b7de21f68c7d62266c35/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f56862e10cda545c9b7de21f68c7d62266c35/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=555f56862e10cda545c9b7de21f68c7d62266c35", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::macros::HirNode;\n use clippy_utils::source::{indent_of, snippet, snippet_block_with_context, snippet_with_applicability};\n use clippy_utils::{get_parent_expr, is_refutable, peel_blocks};\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, Expr, ExprKind, Node, PatKind};\n+use rustc_hir::{Arm, Expr, ExprKind, Node, PatKind, StmtKind};\n use rustc_lint::LateContext;\n use rustc_span::Span;\n \n@@ -24,22 +24,27 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n     let bind_names = arms[0].pat.span;\n     let match_body = peel_blocks(arms[0].body);\n     let mut app = Applicability::MaybeIncorrect;\n-    let (snippet_body, from_macro) = snippet_block_with_context(\n+    let mut snippet_body = snippet_block_with_context(\n         cx,\n         match_body.span,\n         arms[0].span.ctxt(),\n         \"..\",\n         Some(expr.span),\n         &mut app,\n-    );\n-    let mut snippet_body = snippet_body.to_string();\n+    )\n+    .0\n+    .to_string();\n \n     // Do we need to add ';' to suggestion ?\n-    if matches!(match_body.kind, ExprKind::Block(..)) {\n-        // macro + expr_ty(body) == ()\n-        if from_macro && cx.typeck_results().expr_ty(match_body).is_unit() {\n-            snippet_body.push(';');\n+    if let Node::Stmt(stmt) = cx.tcx.hir().get_parent(expr.hir_id)\n+        && let StmtKind::Expr(_) = stmt.kind\n+        && match match_body.kind {\n+            // We don't need to add a ; to blocks, unless that block is from a macro expansion\n+            ExprKind::Block(block, _) => block.span.from_expansion(),\n+            _ => true,\n         }\n+    {\n+        snippet_body.push(';');\n     }\n \n     match arms[0].pat.kind {"}, {"sha": "201301cc9b737cde9405996cbd617124f922d081", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/555f56862e10cda545c9b7de21f68c7d62266c35/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/555f56862e10cda545c9b7de21f68c7d62266c35/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=555f56862e10cda545c9b7de21f68c7d62266c35", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n #![warn(clippy::match_single_binding)]\n-#![allow(unused_variables)]\n-#![allow(clippy::toplevel_ref_arg, clippy::uninlined_format_args)]\n+#![allow(\n+    unused,\n+    clippy::let_unit_value,\n+    clippy::no_effect,\n+    clippy::toplevel_ref_arg,\n+    clippy::uninlined_format_args\n+)]\n \n struct Point {\n     x: i32,\n@@ -109,10 +114,9 @@ fn main() {\n \n     // Lint\n     let x = 1;\n-    println!(\"Not an array index start\");\n+    println!(\"Not an array index start\")\n }\n \n-#[allow(dead_code)]\n fn issue_8723() {\n     let (mut val, idx) = (\"a b\", 1);\n \n@@ -125,16 +129,15 @@ fn issue_8723() {\n     let _ = val;\n }\n \n-#[allow(dead_code)]\n+fn side_effects() {}\n+\n fn issue_9575() {\n-    fn side_effects() {}\n     let _ = || {\n         side_effects();\n-        println!(\"Needs curlies\");\n+        println!(\"Needs curlies\")\n     };\n }\n \n-#[allow(dead_code)]\n fn issue_9725(r: Option<u32>) {\n     let x = r;\n     match x {\n@@ -146,3 +149,25 @@ fn issue_9725(r: Option<u32>) {\n         },\n     };\n }\n+\n+fn issue_10447() -> usize {\n+    ();\n+\n+    let a = ();\n+\n+    side_effects();\n+\n+    let b = side_effects();\n+\n+    println!(\"1\");\n+\n+    let c = println!(\"1\");\n+\n+    let in_expr = [\n+        (),\n+        side_effects(),\n+        println!(\"1\"),\n+    ];\n+\n+    2\n+}"}, {"sha": "8b047b19ce96882c606a794c56235108371e4991", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/555f56862e10cda545c9b7de21f68c7d62266c35/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555f56862e10cda545c9b7de21f68c7d62266c35/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=555f56862e10cda545c9b7de21f68c7d62266c35", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n #![warn(clippy::match_single_binding)]\n-#![allow(unused_variables)]\n-#![allow(clippy::toplevel_ref_arg, clippy::uninlined_format_args)]\n+#![allow(\n+    unused,\n+    clippy::let_unit_value,\n+    clippy::no_effect,\n+    clippy::toplevel_ref_arg,\n+    clippy::uninlined_format_args\n+)]\n \n struct Point {\n     x: i32,\n@@ -127,7 +132,6 @@ fn main() {\n     }\n }\n \n-#[allow(dead_code)]\n fn issue_8723() {\n     let (mut val, idx) = (\"a b\", 1);\n \n@@ -141,15 +145,14 @@ fn issue_8723() {\n     let _ = val;\n }\n \n-#[allow(dead_code)]\n+fn side_effects() {}\n+\n fn issue_9575() {\n-    fn side_effects() {}\n     let _ = || match side_effects() {\n         _ => println!(\"Needs curlies\"),\n     };\n }\n \n-#[allow(dead_code)]\n fn issue_9725(r: Option<u32>) {\n     match r {\n         x => match x {\n@@ -162,3 +165,43 @@ fn issue_9725(r: Option<u32>) {\n         },\n     };\n }\n+\n+fn issue_10447() -> usize {\n+    match 1 {\n+        _ => (),\n+    }\n+\n+    let a = match 1 {\n+        _ => (),\n+    };\n+\n+    match 1 {\n+        _ => side_effects(),\n+    }\n+\n+    let b = match 1 {\n+        _ => side_effects(),\n+    };\n+\n+    match 1 {\n+        _ => println!(\"1\"),\n+    }\n+\n+    let c = match 1 {\n+        _ => println!(\"1\"),\n+    };\n+\n+    let in_expr = [\n+        match 1 {\n+            _ => (),\n+        },\n+        match 1 {\n+            _ => side_effects(),\n+        },\n+        match 1 {\n+            _ => println!(\"1\"),\n+        },\n+    ];\n+\n+    2\n+}"}, {"sha": "9d16af76c6af912fff2b500c9624b6f1ecb65dce", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 93, "deletions": 18, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/555f56862e10cda545c9b7de21f68c7d62266c35/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/555f56862e10cda545c9b7de21f68c7d62266c35/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=555f56862e10cda545c9b7de21f68c7d62266c35", "patch": "@@ -1,5 +1,5 @@\n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:28:5\n+  --> $DIR/match_single_binding.rs:33:5\n    |\n LL | /     match (a, b, c) {\n LL | |         (x, y, z) => {\n@@ -18,7 +18,7 @@ LL +     }\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:34:5\n+  --> $DIR/match_single_binding.rs:39:5\n    |\n LL | /     match (a, b, c) {\n LL | |         (x, y, z) => println!(\"{} {} {}\", x, y, z),\n@@ -32,15 +32,15 @@ LL +     println!(\"{} {} {}\", x, y, z);\n    |\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:51:5\n+  --> $DIR/match_single_binding.rs:56:5\n    |\n LL | /     match a {\n LL | |         _ => println!(\"whatever\"),\n LL | |     }\n    | |_____^ help: consider using the match body instead: `println!(\"whatever\");`\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:55:5\n+  --> $DIR/match_single_binding.rs:60:5\n    |\n LL | /     match a {\n LL | |         _ => {\n@@ -59,7 +59,7 @@ LL +     }\n    |\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:62:5\n+  --> $DIR/match_single_binding.rs:67:5\n    |\n LL | /     match a {\n LL | |         _ => {\n@@ -81,7 +81,7 @@ LL +     }\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:72:5\n+  --> $DIR/match_single_binding.rs:77:5\n    |\n LL | /     match p {\n LL | |         Point { x, y } => println!(\"Coords: ({}, {})\", x, y),\n@@ -95,7 +95,7 @@ LL +     println!(\"Coords: ({}, {})\", x, y);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:76:5\n+  --> $DIR/match_single_binding.rs:81:5\n    |\n LL | /     match p {\n LL | |         Point { x: x1, y: y1 } => println!(\"Coords: ({}, {})\", x1, y1),\n@@ -109,7 +109,7 @@ LL +     println!(\"Coords: ({}, {})\", x1, y1);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:81:5\n+  --> $DIR/match_single_binding.rs:86:5\n    |\n LL | /     match x {\n LL | |         ref r => println!(\"Got a reference to {}\", r),\n@@ -123,7 +123,7 @@ LL +     println!(\"Got a reference to {}\", r);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:86:5\n+  --> $DIR/match_single_binding.rs:91:5\n    |\n LL | /     match x {\n LL | |         ref mut mr => println!(\"Got a mutable reference to {}\", mr),\n@@ -137,7 +137,7 @@ LL +     println!(\"Got a mutable reference to {}\", mr);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:90:5\n+  --> $DIR/match_single_binding.rs:95:5\n    |\n LL | /     let product = match coords() {\n LL | |         Point { x, y } => x * y,\n@@ -151,7 +151,7 @@ LL +     let product = x * y;\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:98:18\n+  --> $DIR/match_single_binding.rs:103:18\n    |\n LL |           .map(|i| match i.unwrap() {\n    |  __________________^\n@@ -168,16 +168,16 @@ LL ~         })\n    |\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:124:5\n+  --> $DIR/match_single_binding.rs:129:5\n    |\n LL | /     match x {\n LL | |         // =>\n LL | |         _ => println!(\"Not an array index start\"),\n LL | |     }\n-   | |_____^ help: consider using the match body instead: `println!(\"Not an array index start\");`\n+   | |_____^ help: consider using the match body instead: `println!(\"Not an array index start\")`\n \n error: this assignment could be simplified\n-  --> $DIR/match_single_binding.rs:134:5\n+  --> $DIR/match_single_binding.rs:138:5\n    |\n LL | /     val = match val.split_at(idx) {\n LL | |         (pre, suf) => {\n@@ -197,7 +197,7 @@ LL ~     };\n    |\n \n error: this match could be replaced by its scrutinee and body\n-  --> $DIR/match_single_binding.rs:147:16\n+  --> $DIR/match_single_binding.rs:151:16\n    |\n LL |       let _ = || match side_effects() {\n    |  ________________^\n@@ -209,12 +209,12 @@ help: consider using the scrutinee and body instead\n    |\n LL ~     let _ = || {\n LL +         side_effects();\n-LL +         println!(\"Needs curlies\");\n+LL +         println!(\"Needs curlies\")\n LL ~     };\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:154:5\n+  --> $DIR/match_single_binding.rs:157:5\n    |\n LL | /     match r {\n LL | |         x => match x {\n@@ -238,5 +238,80 @@ LL +         },\n LL ~     };\n    |\n \n-error: aborting due to 15 previous errors\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:170:5\n+   |\n+LL | /     match 1 {\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____^ help: consider using the match body instead: `();`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:174:13\n+   |\n+LL |       let a = match 1 {\n+   |  _____________^\n+LL | |         _ => (),\n+LL | |     };\n+   | |_____^ help: consider using the match body instead: `()`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:178:5\n+   |\n+LL | /     match 1 {\n+LL | |         _ => side_effects(),\n+LL | |     }\n+   | |_____^ help: consider using the match body instead: `side_effects();`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:182:13\n+   |\n+LL |       let b = match 1 {\n+   |  _____________^\n+LL | |         _ => side_effects(),\n+LL | |     };\n+   | |_____^ help: consider using the match body instead: `side_effects()`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:186:5\n+   |\n+LL | /     match 1 {\n+LL | |         _ => println!(\"1\"),\n+LL | |     }\n+   | |_____^ help: consider using the match body instead: `println!(\"1\");`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:190:13\n+   |\n+LL |       let c = match 1 {\n+   |  _____________^\n+LL | |         _ => println!(\"1\"),\n+LL | |     };\n+   | |_____^ help: consider using the match body instead: `println!(\"1\")`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:195:9\n+   |\n+LL | /         match 1 {\n+LL | |             _ => (),\n+LL | |         },\n+   | |_________^ help: consider using the match body instead: `()`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:198:9\n+   |\n+LL | /         match 1 {\n+LL | |             _ => side_effects(),\n+LL | |         },\n+   | |_________^ help: consider using the match body instead: `side_effects()`\n+\n+error: this match could be replaced by its body itself\n+  --> $DIR/match_single_binding.rs:201:9\n+   |\n+LL | /         match 1 {\n+LL | |             _ => println!(\"1\"),\n+LL | |         },\n+   | |_________^ help: consider using the match body instead: `println!(\"1\")`\n+\n+error: aborting due to 24 previous errors\n "}, {"sha": "e3cf56a4293cc81803d96356ecfde77d566c2e66", "filename": "tests/ui/match_single_binding2.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555f56862e10cda545c9b7de21f68c7d62266c35/tests%2Fui%2Fmatch_single_binding2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/555f56862e10cda545c9b7de21f68c7d62266c35/tests%2Fui%2Fmatch_single_binding2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding2.fixed?ref=555f56862e10cda545c9b7de21f68c7d62266c35", "patch": "@@ -30,7 +30,7 @@ fn main() {\n         #[rustfmt::skip]\n         Some((first, _second)) => {\n             let (a, b) = get_tup();\n-            println!(\"a {:?} and b {:?}\", a, b);\n+            println!(\"a {:?} and b {:?}\", a, b)\n         },\n         None => println!(\"nothing\"),\n     }\n@@ -49,5 +49,5 @@ fn main() {\n         0 => 1,\n         _ => 2,\n     };\n-    println!(\"Single branch\");\n+    println!(\"Single branch\")\n }"}, {"sha": "e180b93e76d7bce23ee6b9ab18fe30dab95a93f0", "filename": "tests/ui/match_single_binding2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555f56862e10cda545c9b7de21f68c7d62266c35/tests%2Fui%2Fmatch_single_binding2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/555f56862e10cda545c9b7de21f68c7d62266c35/tests%2Fui%2Fmatch_single_binding2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding2.stderr?ref=555f56862e10cda545c9b7de21f68c7d62266c35", "patch": "@@ -27,7 +27,7 @@ LL | |             }\n help: consider using a `let` statement\n    |\n LL ~             let (a, b) = get_tup();\n-LL +             println!(\"a {:?} and b {:?}\", a, b);\n+LL +             println!(\"a {:?} and b {:?}\", a, b)\n    |\n \n error: this match could be replaced by its scrutinee and body\n@@ -61,7 +61,7 @@ LL ~     match x {\n LL +         0 => 1,\n LL +         _ => 2,\n LL +     };\n-LL +     println!(\"Single branch\");\n+LL +     println!(\"Single branch\")\n    |\n \n error: aborting due to 4 previous errors"}]}