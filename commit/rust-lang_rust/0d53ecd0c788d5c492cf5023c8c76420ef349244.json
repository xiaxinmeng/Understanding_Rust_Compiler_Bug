{"sha": "0d53ecd0c788d5c492cf5023c8c76420ef349244", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNTNlY2QwYzc4OGQ1YzQ5MmNmNTAyM2M4Yzc2NDIwZWYzNDkyNDQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-07T07:52:15Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-07T14:40:20Z"}, "message": "Rollup merge of #45784 - harpocrates:fix/print-parens-cast-lt, r=kennytm\n\nPretty print parens around casts on the LHS of `<`/`<<`\n\nWhen pretty printing a cast expression occuring on the LHS of a `<` or `<<` expression, we should add parens around the cast. Otherwise, the `<`/`<<` gets interpreted as the beginning of the generics for the type on the RHS of the cast.\n\nConsider:\n\n    $ cat parens_cast.rs\n    macro_rules! negative {\n        ($e:expr) => { $e < 0 }\n    }\n\n    fn main() {\n        negative!(1 as i32);\n    }\n\nBefore this PR, the output of the following is not valid Rust:\n\n    $ rustc -Z unstable-options --pretty=expanded parens_cast.rs\n    #![feature(prelude_import)]\n    #![no_std]\n    #[prelude_import]\n    use std::prelude::v1::*;\n    #[macro_use]\n    extern crate std as std;\n    macro_rules! negative(( $ e : expr ) => { $ e < 0 });\n\n    fn main() { 1 as i32 < 0; }\n\nAfter this PR, the output of the following is valid Rust:\n\n    $ rustc -Z unstable-options --pretty=expanded parens_cast.rs\n    #![feature(prelude_import)]\n    #![no_std]\n    #[prelude_import]\n    use std::prelude::v1::*;\n    #[macro_use]\n    extern crate std as std;\n    macro_rules! negative(( $ e : expr ) => { $ e < 0 });\n\n    fn main() { (1 as i32) < 0; }\n\nI've gone through several README/wiki style documents but I'm still not sure where to test this though. I'm not even sure if this sort of thing is tested...", "tree": {"sha": "67cdcf6f5cf391b20eb76b4f09ac77b028a2e3b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67cdcf6f5cf391b20eb76b4f09ac77b028a2e3b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d53ecd0c788d5c492cf5023c8c76420ef349244", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAloBxdQACgkQ/vbIBR0O\nATy9+g/+NSZW3qJ1kKUajdCB9aeq6qaUYlzLixo+wu7+AUaEvwr9kP1g9ZGjIXuB\nDkXRK0/1aFtMdDjGa5henuWUpNUMLMClykCQwdSmeqVnVgEVbiFx6/S/lOPksmId\nBl1qqmOyluw7GOrW8fBYM9/FNWNbONkSJ1tW1zGkaJEgOBk/c6A27DOPMozUXt/b\na2EW84XAhoAQ5f/JZamCRK2AzNevRvzO2GsL8rCt7grBtuedW2Y/6OAqK1h1KYXQ\nxPoRTE/zkY1iE8tEZd1LEyDiEzKGPHzXlSTHr3cQXtaXKtkjWb1KuOmQulf9KGpo\nvKGRBIJA5JOjEF8Ss185xkHUFspQyUIyQTMDpO/2v9lHGqrl/LGs5wiyuEzZxUqs\nxdDMmZZQxuh+MmyrdhWLXjy/gbMZ7mJ04jfl7ZjFXyR5pEPGQ9Wf3zssQc2K9Z48\nB4nUnzWZeMauYgIegsJ37aUMfhxYyTfzUFSW2oqzki1wKnp8y6+w3LKvLsXKhJML\nnKFpLlOufNlFsnxIWK06RLU+JwBUccJMJaTcb64wQ2Yo71h6EzU61FZ5inD6Z/wb\n4FcdME6qTr2RmlHnhqGleti8kyaRjxzFCPuKu6P07ENsap6FeIpSRn88dzNY1niT\nurOY+JRlpiSSk+Sq6ZSu+wwmj+word1q65uWtqBTdr3XRZ8p4w0=\n=Oi23\n-----END PGP SIGNATURE-----", "payload": "tree 67cdcf6f5cf391b20eb76b4f09ac77b028a2e3b3\nparent 1683b830a88c99c5072563150acb3f7feaac0d04\nparent aa38a1ee5092fb81e23b0cbd215535de08ae7b28\nauthor kennytm <kennytm@gmail.com> 1510041135 +0800\ncommitter kennytm <kennytm@gmail.com> 1510065620 +0800\n\nRollup merge of #45784 - harpocrates:fix/print-parens-cast-lt, r=kennytm\n\nPretty print parens around casts on the LHS of `<`/`<<`\n\nWhen pretty printing a cast expression occuring on the LHS of a `<` or `<<` expression, we should add parens around the cast. Otherwise, the `<`/`<<` gets interpreted as the beginning of the generics for the type on the RHS of the cast.\n\nConsider:\n\n    $ cat parens_cast.rs\n    macro_rules! negative {\n        ($e:expr) => { $e < 0 }\n    }\n\n    fn main() {\n        negative!(1 as i32);\n    }\n\nBefore this PR, the output of the following is not valid Rust:\n\n    $ rustc -Z unstable-options --pretty=expanded parens_cast.rs\n    #![feature(prelude_import)]\n    #![no_std]\n    #[prelude_import]\n    use std::prelude::v1::*;\n    #[macro_use]\n    extern crate std as std;\n    macro_rules! negative(( $ e : expr ) => { $ e < 0 });\n\n    fn main() { 1 as i32 < 0; }\n\nAfter this PR, the output of the following is valid Rust:\n\n    $ rustc -Z unstable-options --pretty=expanded parens_cast.rs\n    #![feature(prelude_import)]\n    #![no_std]\n    #[prelude_import]\n    use std::prelude::v1::*;\n    #[macro_use]\n    extern crate std as std;\n    macro_rules! negative(( $ e : expr ) => { $ e < 0 });\n\n    fn main() { (1 as i32) < 0; }\n\nI've gone through several README/wiki style documents but I'm still not sure where to test this though. I'm not even sure if this sort of thing is tested...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d53ecd0c788d5c492cf5023c8c76420ef349244", "html_url": "https://github.com/rust-lang/rust/commit/0d53ecd0c788d5c492cf5023c8c76420ef349244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d53ecd0c788d5c492cf5023c8c76420ef349244/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1683b830a88c99c5072563150acb3f7feaac0d04", "url": "https://api.github.com/repos/rust-lang/rust/commits/1683b830a88c99c5072563150acb3f7feaac0d04", "html_url": "https://github.com/rust-lang/rust/commit/1683b830a88c99c5072563150acb3f7feaac0d04"}, {"sha": "aa38a1ee5092fb81e23b0cbd215535de08ae7b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa38a1ee5092fb81e23b0cbd215535de08ae7b28", "html_url": "https://github.com/rust-lang/rust/commit/aa38a1ee5092fb81e23b0cbd215535de08ae7b28"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "7d0f26ba34d4159770c7f3b0710e4b69b3e95188", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d53ecd0c788d5c492cf5023c8c76420ef349244/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d53ecd0c788d5c492cf5023c8c76420ef349244/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=0d53ecd0c788d5c492cf5023c8c76420ef349244", "patch": "@@ -1254,6 +1254,15 @@ impl<'a> State<'a> {\n             Fixity::None => (prec + 1, prec + 1),\n         };\n \n+        let left_prec = match (&lhs.node, op.node) {\n+            // These cases need parens: `x as i32 < y` has the parser thinking that `i32 < y` is\n+            // the beginning of a path type. It starts trying to parse `x as (i32 < y ...` instead\n+            // of `(x as i32) < ...`. We need to convince it _not_ to do that.\n+            (&hir::ExprCast { .. }, hir::BinOp_::BiLt) |\n+            (&hir::ExprCast { .. }, hir::BinOp_::BiShl) => parser::PREC_FORCE_PAREN,\n+            _ => left_prec,\n+        };\n+\n         self.print_expr_maybe_paren(lhs, left_prec)?;\n         self.s.space()?;\n         self.word_space(op.node.as_str())?;"}, {"sha": "5cb8e8694cfc75a4aaeb66304be0d3865a134654", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d53ecd0c788d5c492cf5023c8c76420ef349244/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d53ecd0c788d5c492cf5023c8c76420ef349244/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0d53ecd0c788d5c492cf5023c8c76420ef349244", "patch": "@@ -1987,6 +1987,15 @@ impl<'a> State<'a> {\n             Fixity::None => (prec + 1, prec + 1),\n         };\n \n+        let left_prec = match (&lhs.node, op.node) {\n+            // These cases need parens: `x as i32 < y` has the parser thinking that `i32 < y` is\n+            // the beginning of a path type. It starts trying to parse `x as (i32 < y ...` instead\n+            // of `(x as i32) < ...`. We need to convince it _not_ to do that.\n+            (&ast::ExprKind::Cast { .. }, ast::BinOpKind::Lt) |\n+            (&ast::ExprKind::Cast { .. }, ast::BinOpKind::Shl) => parser::PREC_FORCE_PAREN,\n+            _ => left_prec,\n+        };\n+\n         self.print_expr_maybe_paren(lhs, left_prec)?;\n         self.s.space()?;\n         self.word_space(op.node.to_string())?;"}, {"sha": "b21158abfe551d53be911e1bbd635bdfce2f82eb", "filename": "src/test/pretty/cast-lt.pp", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0d53ecd0c788d5c492cf5023c8c76420ef349244/src%2Ftest%2Fpretty%2Fcast-lt.pp", "raw_url": "https://github.com/rust-lang/rust/raw/0d53ecd0c788d5c492cf5023c8c76420ef349244/src%2Ftest%2Fpretty%2Fcast-lt.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fcast-lt.pp?ref=0d53ecd0c788d5c492cf5023c8c76420ef349244", "patch": "@@ -0,0 +1,24 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use std::prelude::v1::*;\n+#[macro_use]\n+extern crate std as std;\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-compare-only\n+// pretty-mode:expanded\n+// pp-exact:cast-lt.pp\n+\n+macro_rules! negative(( $ e : expr ) => { $ e < 0 });\n+\n+fn main() { (1 as i32) < 0; }\n+"}, {"sha": "87b5274545f385425b4b4ac682c7ef5c97bf587f", "filename": "src/test/pretty/cast-lt.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0d53ecd0c788d5c492cf5023c8c76420ef349244/src%2Ftest%2Fpretty%2Fcast-lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d53ecd0c788d5c492cf5023c8c76420ef349244/src%2Ftest%2Fpretty%2Fcast-lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fcast-lt.rs?ref=0d53ecd0c788d5c492cf5023c8c76420ef349244", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-compare-only\n+// pretty-mode:expanded\n+// pp-exact:cast-lt.pp\n+\n+macro_rules! negative {\n+      ($e:expr) => { $e < 0 }\n+}\n+\n+fn main() {\n+      negative!(1 as i32);\n+}\n+"}]}