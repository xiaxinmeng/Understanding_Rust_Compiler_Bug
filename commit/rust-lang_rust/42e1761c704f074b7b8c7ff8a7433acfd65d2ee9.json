{"sha": "42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "node_id": "C_kwDOAAsO6NoAKDQyZTE3NjFjNzA0ZjA3NGI3YjhjN2ZmOGE3NDMzYWNmZDY1ZDJlZTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-15T21:17:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-15T21:17:46Z"}, "message": "Auto merge of #97057 - bjorn3:sync_cg_clif-2022-05-15, r=bjorn3\n\nSync rustc_codegen_cranelift\n\nSince the last sync there have mostly been fixes of various sorts. I also changed cg_clif from using a custom driver to `-Zcodegen-backend` when built as separate project. When built as part of rust it was already using `-Zcodegen-backend`.\n\nr? `@ghost`\n\n`@rustbot` label +A-codegen +A-cranelift +T-compiler", "tree": {"sha": "e774c6383bd7be785e4ae58de0ce0b9a7b848fac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e774c6383bd7be785e4ae58de0ce0b9a7b848fac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "html_url": "https://github.com/rust-lang/rust/commit/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e972dc608a0a2cb639decda1c9f30cb029e423", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e972dc608a0a2cb639decda1c9f30cb029e423", "html_url": "https://github.com/rust-lang/rust/commit/29e972dc608a0a2cb639decda1c9f30cb029e423"}, {"sha": "ecd8fa1a75bea03f82b905b0e06318ed4e9d7683", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd8fa1a75bea03f82b905b0e06318ed4e9d7683", "html_url": "https://github.com/rust-lang/rust/commit/ecd8fa1a75bea03f82b905b0e06318ed4e9d7683"}], "stats": {"total": 694, "additions": 269, "deletions": 425}, "files": [{"sha": "aa556a21bf8c30506b9f28471cf02b17af5cc5ea", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/main.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -10,7 +10,7 @@ jobs:\n     timeout-minutes: 10\n \n     steps:\n-    - uses: actions/checkout@v2\n+    - uses: actions/checkout@v3\n \n     - name: Install rustfmt\n       run: |\n@@ -39,7 +39,7 @@ jobs:\n               TARGET_TRIPLE: aarch64-unknown-linux-gnu\n \n     steps:\n-    - uses: actions/checkout@v2\n+    - uses: actions/checkout@v3\n \n     - name: Cache cargo installed crates\n       uses: actions/cache@v2\n@@ -127,7 +127,7 @@ jobs:\n     timeout-minutes: 60\n \n     steps:\n-    - uses: actions/checkout@v2\n+    - uses: actions/checkout@v3\n \n     #- name: Cache cargo installed crates\n     #  uses: actions/cache@v2"}, {"sha": "0a3e7ca073b45debb68785811cf0f727a7e0bde7", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/nightly-cranelift.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fnightly-cranelift.yml", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fnightly-cranelift.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fnightly-cranelift.yml?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -11,7 +11,7 @@ jobs:\n     timeout-minutes: 60\n \n     steps:\n-    - uses: actions/checkout@v2\n+    - uses: actions/checkout@v3\n \n     - name: Cache cargo installed crates\n       uses: actions/cache@v2\n@@ -34,7 +34,7 @@ jobs:\n         sed -i 's/cranelift-jit = { version = \"\\w*.\\w*.\\w*\", optional = true }/cranelift-jit = { git = \"https:\\/\\/github.com\\/bytecodealliance\\/wasmtime.git\", optional = true }/' Cargo.toml\n         sed -i 's/cranelift-object = \"\\w*.\\w*.\\w*\"/cranelift-object = { git = \"https:\\/\\/github.com\\/bytecodealliance\\/wasmtime.git\" }/' Cargo.toml\n \n-        sed -i 's/gimli = { version = \"0.25.0\", default-features = false, features = \\[\"write\"\\]}/gimli = { version = \"0.26.1\", default-features = false, features = [\"write\"] }/' Cargo.toml\n+        sed -i 's/object = { version = \"0.27.0\"/object = { version = \"0.28.0\"/' Cargo.toml\n \n         cat Cargo.toml\n "}, {"sha": "b8a98b83ebe5eb1a5d292f5fa6b2b7df1168a5a9", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/rustc.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -8,7 +8,7 @@ jobs:\n     runs-on: ubuntu-latest\n \n     steps:\n-    - uses: actions/checkout@v2\n+    - uses: actions/checkout@v3\n \n     - name: Cache cargo installed crates\n       uses: actions/cache@v2\n@@ -46,7 +46,7 @@ jobs:\n     runs-on: ubuntu-latest\n \n     steps:\n-    - uses: actions/checkout@v2\n+    - uses: actions/checkout@v3\n \n     - name: Cache cargo installed crates\n       uses: actions/cache@v2"}, {"sha": "ecb20f22d8c92005c4b488785c4cc428ccc8289e", "filename": "compiler/rustc_codegen_cranelift/.vscode/settings.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -5,7 +5,7 @@\n     \"rust-analyzer.assist.importEnforceGranularity\": true,\n     \"rust-analyzer.assist.importPrefix\": \"crate\",\n     \"rust-analyzer.cargo.runBuildScripts\": true,\n-    \"rust-analyzer.cargo.features\": [\"unstable-features\"]\n+    \"rust-analyzer.cargo.features\": [\"unstable-features\"],\n     \"rust-analyzer.linkedProjects\": [\n         \"./Cargo.toml\",\n         //\"./build_sysroot/sysroot_src/src/libstd/Cargo.toml\","}, {"sha": "18d7f41cf408a7713cf1fc4ae9066dad23987b8a", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -41,15 +41,5 @@ unstable-features = [\"jit\", \"inline_asm\"]\n jit = [\"cranelift-jit\", \"libloading\"]\n inline_asm = []\n \n-# Disable optimizations and debuginfo of build scripts and some of the heavy build deps, as the\n-# execution time of build scripts is so fast that optimizing them slows down the total build time.\n-[profile.release.build-override]\n-opt-level = 0\n-debug = false\n-\n-[profile.release.package.cranelift-codegen-meta]\n-opt-level = 0\n-debug = false\n-\n [package.metadata.rust-analyzer]\n rustc_private = true"}, {"sha": "efee6ef3f3780192943ec1b2dd34332d8692b57a", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -112,9 +112,9 @@ dependencies = [\n \n [[package]]\n name = \"hashbrown\"\n-version = \"0.12.0\"\n+version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8c21d40587b92fa6a6c6e3c1bdbf87d75511db5672f9c93175574b3a00df1758\"\n+checksum = \"db0d4cf898abf0081f964436dc980e96670a0f36863e4b83aaacdb65c9d7ccc3\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\",\n@@ -134,18 +134,18 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.124\"\n+version = \"0.2.125\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"21a41fed9d98f27ab1c6d161da622a4fa35e8a54a8adc24bbf3ddd0ef70b0e50\"\n+checksum = \"5916d2ae698f6de9bfb891ad7a8d65c09d232dc58cc4ac433c7da3b2fd84bc2b\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n [[package]]\n name = \"memchr\"\n-version = \"2.4.1\"\n+version = \"2.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a\"\n+checksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-core\","}, {"sha": "48faec8bc4b9434f5e9f278d88d3e8a2f5149455", "filename": "compiler/rustc_codegen_cranelift/build_system/build_backend.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -34,18 +34,6 @@ pub(crate) fn build_backend(\n         _ => unreachable!(),\n     }\n \n-    // Set the rpath to make the cg_clif executable find librustc_codegen_cranelift without changing\n-    // LD_LIBRARY_PATH\n-    if cfg!(unix) {\n-        if cfg!(target_os = \"macos\") {\n-            rustflags += \" -Csplit-debuginfo=unpacked \\\n-                -Clink-arg=-Wl,-rpath,@loader_path/../lib \\\n-                -Zosx-rpath-install-name\";\n-        } else {\n-            rustflags += \" -Clink-arg=-Wl,-rpath=$ORIGIN/../lib \";\n-        }\n-    }\n-\n     cmd.env(\"RUSTFLAGS\", rustflags);\n \n     eprintln!(\"[BUILD] rustc_codegen_cranelift\");"}, {"sha": "8682204f4fd30b355fa0d11f83adbb1705af8eae", "filename": "compiler/rustc_codegen_cranelift/build_system/build_sysroot.rs", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -1,4 +1,3 @@\n-use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n@@ -22,35 +21,28 @@ pub(crate) fn build_sysroot(\n     fs::create_dir_all(target_dir.join(\"lib\")).unwrap();\n \n     // Copy the backend\n-    for file in [\"cg_clif\", \"cg_clif_build_sysroot\"] {\n-        try_hard_link(\n-            cg_clif_build_dir.join(get_file_name(file, \"bin\")),\n-            target_dir.join(\"bin\").join(get_file_name(file, \"bin\")),\n-        );\n-    }\n-\n     let cg_clif_dylib = get_file_name(\"rustc_codegen_cranelift\", \"dylib\");\n-    try_hard_link(\n-        cg_clif_build_dir.join(&cg_clif_dylib),\n-        target_dir\n-            .join(if cfg!(windows) {\n-                // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n-                // binaries.\n-                \"bin\"\n-            } else {\n-                \"lib\"\n-            })\n-            .join(cg_clif_dylib),\n-    );\n-\n-    // Build and copy cargo wrapper\n-    let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n-    build_cargo_wrapper_cmd\n-        .arg(\"scripts/cargo-clif.rs\")\n-        .arg(\"-o\")\n-        .arg(target_dir.join(\"cargo-clif\"))\n-        .arg(\"-g\");\n-    spawn_and_wait(build_cargo_wrapper_cmd);\n+    let cg_clif_dylib_path = target_dir\n+        .join(if cfg!(windows) {\n+            // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n+            // binaries.\n+            \"bin\"\n+        } else {\n+            \"lib\"\n+        })\n+        .join(&cg_clif_dylib);\n+    try_hard_link(cg_clif_build_dir.join(cg_clif_dylib), &cg_clif_dylib_path);\n+\n+    // Build and copy rustc and cargo wrappers\n+    for wrapper in [\"rustc-clif\", \"cargo-clif\"] {\n+        let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n+        build_cargo_wrapper_cmd\n+            .arg(PathBuf::from(\"scripts\").join(format!(\"{wrapper}.rs\")))\n+            .arg(\"-o\")\n+            .arg(target_dir.join(wrapper))\n+            .arg(\"-g\");\n+        spawn_and_wait(build_cargo_wrapper_cmd);\n+    }\n \n     let default_sysroot = super::rustc_info::get_default_sysroot();\n \n@@ -117,7 +109,13 @@ pub(crate) fn build_sysroot(\n             }\n         }\n         SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(channel, target_dir, host_triple, None);\n+            build_clif_sysroot_for_triple(\n+                channel,\n+                target_dir,\n+                host_triple,\n+                &cg_clif_dylib_path,\n+                None,\n+            );\n \n             if host_triple != target_triple {\n                 // When cross-compiling it is often necessary to manually pick the right linker\n@@ -126,14 +124,21 @@ pub(crate) fn build_sysroot(\n                 } else {\n                     None\n                 };\n-                build_clif_sysroot_for_triple(channel, target_dir, target_triple, linker);\n+                build_clif_sysroot_for_triple(\n+                    channel,\n+                    target_dir,\n+                    target_triple,\n+                    &cg_clif_dylib_path,\n+                    linker,\n+                );\n             }\n \n             // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n             // libstd.\n             for file in fs::read_dir(host_rustlib_lib).unwrap() {\n                 let file = file.unwrap().path();\n-                if file.file_name().unwrap().to_str().unwrap().contains(\"std-\") {\n+                let filename = file.file_name().unwrap().to_str().unwrap();\n+                if filename.contains(\"std-\") && !filename.contains(\".rlib\") {\n                     try_hard_link(&file, target_dir.join(\"lib\").join(file.file_name().unwrap()));\n                 }\n             }\n@@ -145,6 +150,7 @@ fn build_clif_sysroot_for_triple(\n     channel: &str,\n     target_dir: &Path,\n     triple: &str,\n+    cg_clif_dylib_path: &Path,\n     linker: Option<&str>,\n ) {\n     match fs::read_to_string(Path::new(\"build_sysroot\").join(\"rustc_version\")) {\n@@ -168,18 +174,18 @@ fn build_clif_sysroot_for_triple(\n     let build_dir = Path::new(\"build_sysroot\").join(\"target\").join(triple).join(channel);\n \n     if !super::config::get_bool(\"keep_sysroot\") {\n-        // Cleanup the target dir with the exception of build scripts and the incremental cache\n-        for dir in [\"build\", \"deps\", \"examples\", \"native\"] {\n-            if build_dir.join(dir).exists() {\n-                fs::remove_dir_all(build_dir.join(dir)).unwrap();\n-            }\n+        // Cleanup the deps dir, but keep build scripts and the incremental cache for faster\n+        // recompilation as they are not affected by changes in cg_clif.\n+        if build_dir.join(\"deps\").exists() {\n+            fs::remove_dir_all(build_dir.join(\"deps\")).unwrap();\n         }\n     }\n \n     // Build sysroot\n     let mut build_cmd = Command::new(\"cargo\");\n     build_cmd.arg(\"build\").arg(\"--target\").arg(triple).current_dir(\"build_sysroot\");\n-    let mut rustflags = \"--clif -Zforce-unstable-if-unmarked\".to_string();\n+    let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n+    rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n     if channel == \"release\" {\n         build_cmd.arg(\"--release\");\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n@@ -189,10 +195,6 @@ fn build_clif_sysroot_for_triple(\n         write!(rustflags, \" -Clinker={}\", linker).unwrap();\n     }\n     build_cmd.env(\"RUSTFLAGS\", rustflags);\n-    build_cmd.env(\n-        \"RUSTC\",\n-        env::current_dir().unwrap().join(target_dir).join(\"bin\").join(\"cg_clif_build_sysroot\"),\n-    );\n     build_cmd.env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n     spawn_and_wait(build_cmd);\n "}, {"sha": "b897b7fbacfcdf54426583790ed5116d2450ddd6", "filename": "compiler/rustc_codegen_cranelift/build_system/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmod.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -86,6 +86,7 @@ pub fn main() {\n             arg => arg_error!(\"Unexpected argument {}\", arg),\n         }\n     }\n+    target_dir = std::env::current_dir().unwrap().join(target_dir);\n \n     let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n         host_triple"}, {"sha": "33f146e7ba27aec13e57e55d40ebb79e3f28e359", "filename": "compiler/rustc_codegen_cranelift/docs/usage.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -19,7 +19,7 @@ This will build your project with rustc_codegen_cranelift instead of the usual L\n > You should prefer using the Cargo method.\n \n ```bash\n-$ $cg_clif_dir/build/bin/cg_clif my_crate.rs\n+$ $cg_clif_dir/build/rustc-clif my_crate.rs\n ```\n \n ## Jit mode\n@@ -38,7 +38,7 @@ $ $cg_clif_dir/build/cargo-clif jit\n or\n \n ```bash\n-$ $cg_clif_dir/build/bin/cg_clif -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs\n+$ $cg_clif_dir/build/rustc-clif -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs\n ```\n \n There is also an experimental lazy jit mode. In this mode functions are only compiled once they are\n@@ -54,7 +54,7 @@ These are a few functions that allow you to easily run rust code from the shell\n \n ```bash\n function jit_naked() {\n-    echo \"$@\" | $cg_clif_dir/build/bin/cg_clif - -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic\n+    echo \"$@\" | $cg_clif_dir/build/rustc-clif - -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic\n }\n \n function jit() {"}, {"sha": "ce1c6c99b40c8b9964e8549c9d82eb2c43b7d5f5", "filename": "compiler/rustc_codegen_cranelift/patches/0027-sysroot-128bit-atomic-operations.patch", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0027-sysroot-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0027-sysroot-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0027-sysroot-128bit-atomic-operations.patch?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -21,7 +21,7 @@ index 092b7cf..158cf71 100644\n -#[cfg(target_has_atomic_load_store = \"128\")]\n -#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n -impl RefUnwindSafe for crate::sync::atomic::AtomicI128 {}\n- \n+\n  #[cfg(target_has_atomic_load_store = \"ptr\")]\n  #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n @@ -235,9 +232,6 @@ impl RefUnwindSafe for crate::sync::atomic::AtomicU32 {}\n@@ -31,14 +31,14 @@ index 092b7cf..158cf71 100644\n -#[cfg(target_has_atomic_load_store = \"128\")]\n -#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n -impl RefUnwindSafe for crate::sync::atomic::AtomicU128 {}\n- \n+\n  #[cfg(target_has_atomic_load_store = \"8\")]\n  #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n diff --git a/library/core/src/sync/atomic.rs b/library/core/src/sync/atomic.rs\n index d9de37e..8293fce 100644\n --- a/library/core/src/sync/atomic.rs\n +++ b/library/core/src/sync/atomic.rs\n-@@ -2234,44 +2234,6 @@ atomic_int! {\n+@@ -2234,46 +2234,6 @@ atomic_int! {\n      \"AtomicU64::new(0)\",\n      u64 AtomicU64 ATOMIC_U64_INIT\n  }\n@@ -54,6 +54,7 @@ index d9de37e..8293fce 100644\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n -    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicI128\"),\n -    \"i128\",\n -    \"#![feature(integer_atomics)]\\n\\n\",\n -    atomic_min, atomic_max,\n@@ -73,6 +74,7 @@ index d9de37e..8293fce 100644\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n -    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n -    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicU128\"),\n -    \"u128\",\n -    \"#![feature(integer_atomics)]\\n\\n\",\n -    atomic_umin, atomic_umax,\n@@ -98,6 +100,6 @@ index b735957..ea728b6 100644\n      #[cfg(target_has_atomic = \"ptr\")]\n      assert_eq!(align_of::<AtomicUsize>(), size_of::<AtomicUsize>());\n      #[cfg(target_has_atomic = \"ptr\")]\n--- \n+--\n 2.26.2.7.g19db9cfb68\n "}, {"sha": "e98e92e468e93dacc140a5c23b22a147710917e3", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-04-21\"\n+channel = \"nightly-2022-05-15\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "9362b47fa6d83137701069fc9c9aced1a9b0ab22", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo-clif.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -5,20 +5,11 @@ use std::path::PathBuf;\n use std::process::Command;\n \n fn main() {\n-    if env::var(\"RUSTC_WRAPPER\").map_or(false, |wrapper| wrapper.contains(\"sccache\")) {\n-        eprintln!(\n-            \"\\x1b[1;93m=== Warning: Unsetting RUSTC_WRAPPER to prevent interference with sccache ===\\x1b[0m\"\n-        );\n-        env::remove_var(\"RUSTC_WRAPPER\");\n-    }\n-\n     let sysroot = PathBuf::from(env::current_exe().unwrap().parent().unwrap());\n \n-    env::set_var(\"RUSTC\", sysroot.join(\"bin/cg_clif\".to_string() + env::consts::EXE_SUFFIX));\n-\n-    let mut rustdoc_flags = env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new());\n-    rustdoc_flags.push_str(\" -Cpanic=abort -Zpanic-abort-tests -Zcodegen-backend=\");\n-    rustdoc_flags.push_str(\n+    let mut rustflags = String::new();\n+    rustflags.push_str(\" -Cpanic=abort -Zpanic-abort-tests -Zcodegen-backend=\");\n+    rustflags.push_str(\n         sysroot\n             .join(if cfg!(windows) { \"bin\" } else { \"lib\" })\n             .join(\n@@ -29,9 +20,10 @@ fn main() {\n             .to_str()\n             .unwrap(),\n     );\n-    rustdoc_flags.push_str(\" --sysroot \");\n-    rustdoc_flags.push_str(sysroot.to_str().unwrap());\n-    env::set_var(\"RUSTDOCFLAGS\", rustdoc_flags);\n+    rustflags.push_str(\" --sysroot \");\n+    rustflags.push_str(sysroot.to_str().unwrap());\n+    env::set_var(\"RUSTFLAGS\", env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + &rustflags);\n+    env::set_var(\"RUSTDOCFLAGS\", env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new()) + &rustflags);\n \n     // Ensure that the right toolchain is used\n     env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"RUSTUP_TOOLCHAIN\"));\n@@ -46,7 +38,7 @@ fn main() {\n                 .chain(env::args().skip(2))\n                 .chain([\n                     \"--\".to_string(),\n-                    \"-Zunstable-features\".to_string(),\n+                    \"-Zunstable-options\".to_string(),\n                     \"-Cllvm-args=mode=jit\".to_string(),\n                 ])\n                 .collect()\n@@ -60,7 +52,7 @@ fn main() {\n                 .chain(env::args().skip(2))\n                 .chain([\n                     \"--\".to_string(),\n-                    \"-Zunstable-features\".to_string(),\n+                    \"-Zunstable-options\".to_string(),\n                     \"-Cllvm-args=mode=jit-lazy\".to_string(),\n                 ])\n                 .collect()"}, {"sha": "53ada369b089a28ee63b3c183603a36153239821", "filename": "compiler/rustc_codegen_cranelift/scripts/config.sh", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -1,6 +0,0 @@\n-# Note to people running shellcheck: this file should only be sourced, not executed directly.\n-\n-set -e\n-\n-export LD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib:$LD_LIBRARY_PATH\"\n-export DYLD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib:$DYLD_LIBRARY_PATH\""}, {"sha": "11d6c4c83186743f2751a2403c2996eab66746be", "filename": "compiler/rustc_codegen_cranelift/scripts/ext_config.sh", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fext_config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fext_config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fext_config.sh?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -1,32 +0,0 @@\n-# Note to people running shellcheck: this file should only be sourced, not executed directly.\n-\n-# Various env vars that should only be set for the build system\n-\n-set -e\n-\n-export CG_CLIF_DISPLAY_CG_TIME=1\n-export CG_CLIF_DISABLE_INCR_CACHE=1\n-\n-export HOST_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n-export TARGET_TRIPLE=${TARGET_TRIPLE:-$HOST_TRIPLE}\n-\n-export RUN_WRAPPER=''\n-export JIT_SUPPORTED=1\n-if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n-   export JIT_SUPPORTED=0\n-   if [[ \"$TARGET_TRIPLE\" == \"aarch64-unknown-linux-gnu\" ]]; then\n-      # We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n-      export RUSTFLAGS='-Clinker=aarch64-linux-gnu-gcc '$RUSTFLAGS\n-      export RUN_WRAPPER='qemu-aarch64 -L /usr/aarch64-linux-gnu'\n-   elif [[ \"$TARGET_TRIPLE\" == \"x86_64-pc-windows-gnu\" ]]; then\n-      # We are cross-compiling for Windows. Run tests in wine.\n-      export RUN_WRAPPER='wine'\n-   else\n-      echo \"Unknown non-native platform\"\n-   fi\n-fi\n-\n-# FIXME fix `#[linkage = \"extern_weak\"]` without this\n-if [[ \"$(uname)\" == 'Darwin' ]]; then\n-   export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n-fi"}, {"sha": "e6f60d1c0cb230985bf85311076b15199291a807", "filename": "compiler/rustc_codegen_cranelift/scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -2,8 +2,7 @@\n #![forbid(unsafe_code)]/* This line is ignored by bash\n # This block is ignored by rustc\n pushd $(dirname \"$0\")/../\n-source scripts/config.sh\n-RUSTC=\"$(pwd)/build/bin/cg_clif\"\n+RUSTC=\"$(pwd)/build/rustc-clif\"\n popd\n PROFILE=$1 OUTPUT=$2 exec $RUSTC -Zunstable-options -Cllvm-args=mode=jit -Cprefer-dynamic $0\n #*/"}, {"sha": "3abfcd8ddc824e493c5f3a3f4086c6a9b4c989f4", "filename": "compiler/rustc_codegen_cranelift/scripts/rustc-clif.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustc-clif.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -0,0 +1,36 @@\n+use std::env;\n+use std::ffi::OsString;\n+#[cfg(unix)]\n+use std::os::unix::process::CommandExt;\n+use std::path::PathBuf;\n+use std::process::Command;\n+\n+fn main() {\n+    let sysroot = PathBuf::from(env::current_exe().unwrap().parent().unwrap());\n+\n+    let cg_clif_dylib_path = sysroot.join(if cfg!(windows) { \"bin\" } else { \"lib\" }).join(\n+        env::consts::DLL_PREFIX.to_string() + \"rustc_codegen_cranelift\" + env::consts::DLL_SUFFIX,\n+    );\n+\n+    let mut args = std::env::args_os().skip(1).collect::<Vec<_>>();\n+    args.push(OsString::from(\"-Cpanic=abort\"));\n+    args.push(OsString::from(\"-Zpanic-abort-tests\"));\n+    let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n+    codegen_backend_arg.push(cg_clif_dylib_path);\n+    args.push(codegen_backend_arg);\n+    if !args.contains(&OsString::from(\"--sysroot\")) {\n+        args.push(OsString::from(\"--sysroot\"));\n+        args.push(OsString::from(sysroot.to_str().unwrap()));\n+    }\n+\n+    // Ensure that the right toolchain is used\n+    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"RUSTUP_TOOLCHAIN\"));\n+\n+    #[cfg(unix)]\n+    Command::new(\"rustc\").args(args).exec();\n+\n+    #[cfg(not(unix))]\n+    std::process::exit(\n+        Command::new(\"rustc\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+    );\n+}"}, {"sha": "4d0dfa16c5ecf88488e6a360b752e65fbb200012", "filename": "compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -2,7 +2,6 @@\n set -e\n \n ./y.rs build --no-unstable-features\n-source scripts/config.sh\n \n echo \"[SETUP] Rust fork\"\n git clone https://github.com/rust-lang/rust.git || true\n@@ -26,21 +25,6 @@ index d95b5b7f17f..00b6f0e3635 100644\n  [dev-dependencies]\n  rand = \"0.7\"\n  rand_xorshift = \"0.2\"\n-diff --git a/src/tools/compiletest/src/header.rs b/src/tools/compiletest/src/header.rs\n-index 887d27fd6dca4..2c2239f2b83d1 100644\n---- a/src/tools/compiletest/src/header.rs\n-+++ b/src/tools/compiletest/src/header.rs\n-@@ -806,8 +806,8 @@ pub fn make_test_description<R: Read>(\n-     cfg: Option<&str>,\n- ) -> test::TestDesc {\n-     let mut ignore = false;\n-     #[cfg(not(bootstrap))]\n--    let ignore_message: Option<String> = None;\n-+    let ignore_message: Option<&str> = None;\n-     let mut should_fail = false;\n-\n-     let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n-\n diff --git a/src/tools/compiletest/src/runtest.rs b/src/tools/compiletest/src/runtest.rs\n index 8431aa7b818..a3ff7e68ce5 100644\n --- a/src/tools/compiletest/src/runtest.rs\n@@ -67,7 +51,7 @@ changelog-seen = 2\n ninja = false\n \n [build]\n-rustc = \"$(pwd)/../build/bin/cg_clif\"\n+rustc = \"$(pwd)/../build/rustc-clif\"\n cargo = \"$(rustup which cargo)\"\n full-bootstrap = true\n local-rebuild = true"}, {"sha": "9bdb9f22c549a56d34850f97cbf2461a0d83585d", "filename": "compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -101,11 +101,10 @@ rm src/test/incremental/spike-neg1.rs # errors out for some reason\n rm src/test/incremental/spike-neg2.rs # same\n rm src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs # gives a stackoverflow before the backend runs\n rm src/test/ui/mir/ssa-analysis-regression-50041.rs # produces ICE\n+rm src/test/ui/type-alias-impl-trait/assoc-projection-ice.rs # produces ICE\n \n rm src/test/ui/simd/intrinsic/generic-reduction-pass.rs # simd_reduce_add_unordered doesn't accept an accumulator for integer vectors\n \n-rm src/test/ui/rfc-2091-track-caller/intrinsic-wrapper.rs # wrong result from `Location::caller()`\n-\n # bugs in the test suite\n # ======================\n rm src/test/ui/backtrace.rs # TODO warning"}, {"sha": "9b5ffa4096049c04b9b2b509e9ec80107a7e1a92", "filename": "compiler/rustc_codegen_cranelift/scripts/tests.sh", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -2,10 +2,43 @@\n \n set -e\n \n-source scripts/config.sh\n-source scripts/ext_config.sh\n-export RUSTC=false # ensure that cg_llvm isn't accidentally used\n-MY_RUSTC=\"$(pwd)/build/bin/cg_clif $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n+export CG_CLIF_DISPLAY_CG_TIME=1\n+export CG_CLIF_DISABLE_INCR_CACHE=1\n+\n+export HOST_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n+export TARGET_TRIPLE=${TARGET_TRIPLE:-$HOST_TRIPLE}\n+\n+export RUN_WRAPPER=''\n+\n+case \"$TARGET_TRIPLE\" in\n+   x86_64*)\n+      export JIT_SUPPORTED=1\n+      ;;\n+   *)\n+      export JIT_SUPPORTED=0\n+      ;;\n+esac\n+\n+if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n+   export JIT_SUPPORTED=0\n+   if [[ \"$TARGET_TRIPLE\" == \"aarch64-unknown-linux-gnu\" ]]; then\n+      # We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n+      export RUSTFLAGS='-Clinker=aarch64-linux-gnu-gcc '$RUSTFLAGS\n+      export RUN_WRAPPER='qemu-aarch64 -L /usr/aarch64-linux-gnu'\n+   elif [[ \"$TARGET_TRIPLE\" == \"x86_64-pc-windows-gnu\" ]]; then\n+      # We are cross-compiling for Windows. Run tests in wine.\n+      export RUN_WRAPPER='wine'\n+   else\n+      echo \"Unknown non-native platform\"\n+   fi\n+fi\n+\n+# FIXME fix `#[linkage = \"extern_weak\"]` without this\n+if [[ \"$(uname)\" == 'Darwin' ]]; then\n+   export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n+fi\n+\n+MY_RUSTC=\"$(pwd)/build/rustc-clif $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n \n function no_sysroot_tests() {\n     echo \"[BUILD] mini_core\"\n@@ -39,7 +72,7 @@ function base_sysroot_tests() {\n     $MY_RUSTC example/issue-91827-extern-types.rs --crate-name issue_91827_extern_types --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/issue_91827_extern_types\n \n-    echo \"[AOT] alloc_system\"\n+    echo \"[BUILD] alloc_system\"\n     $MY_RUSTC example/alloc_system.rs --crate-type lib --target \"$TARGET_TRIPLE\"\n \n     echo \"[AOT] alloc_example\"\n@@ -56,14 +89,14 @@ function base_sysroot_tests() {\n         echo \"[JIT] std_example (skipped)\"\n     fi\n \n-    echo \"[AOT] dst_field_align\"\n-    $MY_RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target \"$TARGET_TRIPLE\"\n-    $RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n-\n     echo \"[AOT] std_example\"\n     $MY_RUSTC example/std_example.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/std_example arg\n \n+    echo \"[AOT] dst_field_align\"\n+    $MY_RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target \"$TARGET_TRIPLE\"\n+    $RUN_WRAPPER ./target/out/dst_field_align\n+\n     echo \"[AOT] subslice-patterns-const-eval\"\n     $MY_RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n@@ -97,7 +130,7 @@ function extended_sysroot_tests() {\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n         hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"../build/cargo-clif clean\" \\\n-        \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n+        \"RUSTFLAGS='' cargo build\" \\\n         \"../build/cargo-clif build\"\n \n         echo \"[BENCH RUN] ebobby/simple-raytracer\""}, {"sha": "b163a42619172d2739142d1f689a821ab8fcb3e1", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -309,7 +309,7 @@ fn codegen_call_argument_operand<'tcx>(\n \n pub(crate) fn codegen_terminator_call<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    span: Span,\n+    source_info: mir::SourceInfo,\n     func: &Operand<'tcx>,\n     args: &[Operand<'tcx>],\n     mir_dest: Option<(Place<'tcx>, BasicBlock)>,\n@@ -340,7 +340,13 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n         match instance.def {\n             InstanceDef::Intrinsic(_) => {\n-                crate::intrinsics::codegen_intrinsic_call(fx, instance, args, destination, span);\n+                crate::intrinsics::codegen_intrinsic_call(\n+                    fx,\n+                    instance,\n+                    args,\n+                    destination,\n+                    source_info,\n+                );\n                 return;\n             }\n             InstanceDef::DropGlue(_, None) => {\n@@ -402,7 +408,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     // Pass the caller location for `#[track_caller]`.\n     if instance.map(|inst| inst.def.requires_caller_location(fx.tcx)).unwrap_or(false) {\n-        let caller_location = fx.get_caller_location(span);\n+        let caller_location = fx.get_caller_location(source_info);\n         args.push(CallArgument { value: caller_location, is_owned: false });\n     }\n \n@@ -479,9 +485,10 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         // FIXME find a cleaner way to support varargs\n         if fn_sig.c_variadic {\n             if !matches!(fn_sig.abi, Abi::C { .. }) {\n-                fx.tcx\n-                    .sess\n-                    .span_fatal(span, &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi));\n+                fx.tcx.sess.span_fatal(\n+                    source_info.span,\n+                    &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi),\n+                );\n             }\n             let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n             let abi_params = call_args\n@@ -490,9 +497,10 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                     let ty = fx.bcx.func.dfg.value_type(arg);\n                     if !ty.is_int() {\n                         // FIXME set %al to upperbound on float args once floats are supported\n-                        fx.tcx\n-                            .sess\n-                            .span_fatal(span, &format!(\"Non int ty {:?} for variadic call\", ty));\n+                        fx.tcx.sess.span_fatal(\n+                            source_info.span,\n+                            &format!(\"Non int ty {:?} for variadic call\", ty),\n+                        );\n                     }\n                     AbiParam::new(ty)\n                 })\n@@ -513,7 +521,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n pub(crate) fn codegen_drop<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    span: Span,\n+    source_info: mir::SourceInfo,\n     drop_place: CPlace<'tcx>,\n ) {\n     let ty = drop_place.layout().ty;\n@@ -560,7 +568,7 @@ pub(crate) fn codegen_drop<'tcx>(\n \n                 if drop_instance.def.requires_caller_location(fx.tcx) {\n                     // Pass the caller location for `#[track_caller]`.\n-                    let caller_location = fx.get_caller_location(span);\n+                    let caller_location = fx.get_caller_location(source_info);\n                     call_args.extend(\n                         adjust_arg_for_abi(fx, caller_location, &fn_abi.args[1], false).into_iter(),\n                     );"}, {"sha": "65e5812a8a5b0e00f35b57a5ddf399af51c040f7", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -325,7 +325,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                     AssertKind::BoundsCheck { ref len, ref index } => {\n                         let len = codegen_operand(fx, len).load_scalar(fx);\n                         let index = codegen_operand(fx, index).load_scalar(fx);\n-                        let location = fx.get_caller_location(source_info.span).load_scalar(fx);\n+                        let location = fx.get_caller_location(source_info).load_scalar(fx);\n \n                         codegen_panic_inner(\n                             fx,\n@@ -336,7 +336,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                     }\n                     _ => {\n                         let msg_str = msg.description();\n-                        codegen_panic(fx, msg_str, source_info.span);\n+                        codegen_panic(fx, msg_str, source_info);\n                     }\n                 }\n             }\n@@ -398,7 +398,13 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                 from_hir_call: _,\n             } => {\n                 fx.tcx.sess.time(\"codegen call\", || {\n-                    crate::abi::codegen_terminator_call(fx, *fn_span, func, args, *destination)\n+                    crate::abi::codegen_terminator_call(\n+                        fx,\n+                        mir::SourceInfo { span: *fn_span, ..source_info },\n+                        func,\n+                        args,\n+                        *destination,\n+                    )\n                 });\n             }\n             TerminatorKind::InlineAsm {\n@@ -450,7 +456,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             }\n             TerminatorKind::Drop { place, target, unwind: _ } => {\n                 let drop_place = codegen_place(fx, *place);\n-                crate::abi::codegen_drop(fx, source_info.span, drop_place);\n+                crate::abi::codegen_drop(fx, source_info, drop_place);\n \n                 let target_block = fx.get_block(*target);\n                 fx.bcx.ins().jump(target_block, &[]);\n@@ -471,7 +477,7 @@ fn codegen_stmt<'tcx>(\n \n     fx.set_debug_loc(stmt.source_info);\n \n-    #[cfg(disabled)]\n+    #[cfg(any())] // This is never true\n     match &stmt.kind {\n         StatementKind::StorageLive(..) | StatementKind::StorageDead(..) => {} // Those are not very useful\n         _ => {\n@@ -898,14 +904,18 @@ pub(crate) fn codegen_operand<'tcx>(\n     }\n }\n \n-pub(crate) fn codegen_panic<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, msg_str: &str, span: Span) {\n-    let location = fx.get_caller_location(span).load_scalar(fx);\n+pub(crate) fn codegen_panic<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    msg_str: &str,\n+    source_info: mir::SourceInfo,\n+) {\n+    let location = fx.get_caller_location(source_info).load_scalar(fx);\n \n     let msg_ptr = fx.anonymous_str(msg_str);\n     let msg_len = fx.bcx.ins().iconst(fx.pointer_type, i64::try_from(msg_str.len()).unwrap());\n     let args = [msg_ptr, msg_len, location];\n \n-    codegen_panic_inner(fx, rustc_hir::LangItem::Panic, &args, span);\n+    codegen_panic_inner(fx, rustc_hir::LangItem::Panic, &args, source_info.span);\n }\n \n pub(crate) fn codegen_panic_inner<'tcx>("}, {"sha": "5984ec8412ad71acfdf304f10faf98183d929762", "filename": "compiler/rustc_codegen_cranelift/src/bin/cg_clif.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -1,94 +0,0 @@\n-#![feature(rustc_private)]\n-#![warn(rust_2018_idioms)]\n-#![warn(unused_lifetimes)]\n-#![warn(unreachable_pub)]\n-\n-extern crate rustc_data_structures;\n-extern crate rustc_driver;\n-extern crate rustc_interface;\n-extern crate rustc_session;\n-extern crate rustc_target;\n-\n-use std::panic;\n-\n-use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n-use rustc_interface::interface;\n-use rustc_session::config::{ErrorOutputType, TrimmedDefPaths};\n-use rustc_session::early_error;\n-use rustc_target::spec::PanicStrategy;\n-\n-// FIXME use std::lazy::SyncLazy once it stabilizes\n-use once_cell::sync::Lazy;\n-\n-const BUG_REPORT_URL: &str = \"https://github.com/bjorn3/rustc_codegen_cranelift/issues/new\";\n-\n-static DEFAULT_HOOK: Lazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n-    Lazy::new(|| {\n-        let hook = panic::take_hook();\n-        panic::set_hook(Box::new(|info| {\n-            // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n-            (*DEFAULT_HOOK)(info);\n-\n-            // Separate the output with an empty line\n-            eprintln!();\n-\n-            // Print the ICE message\n-            rustc_driver::report_ice(info, BUG_REPORT_URL);\n-        }));\n-        hook\n-    });\n-\n-#[derive(Default)]\n-pub struct CraneliftPassesCallbacks {\n-    time_passes: bool,\n-}\n-\n-impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n-    fn config(&mut self, config: &mut interface::Config) {\n-        // If a --prints=... option has been given, we don't print the \"total\"\n-        // time because it will mess up the --prints output. See #64339.\n-        self.time_passes = config.opts.prints.is_empty()\n-            && (config.opts.debugging_opts.time_passes || config.opts.debugging_opts.time);\n-\n-        config.opts.cg.panic = Some(PanicStrategy::Abort);\n-        config.opts.debugging_opts.panic_abort_tests = true;\n-        config.opts.maybe_sysroot = Some(config.opts.maybe_sysroot.clone().unwrap_or_else(|| {\n-            std::env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_owned()\n-        }));\n-\n-        config.opts.trimmed_def_paths = TrimmedDefPaths::GoodPath;\n-    }\n-}\n-\n-fn main() {\n-    let start_time = std::time::Instant::now();\n-    let start_rss = get_resident_set_size();\n-    rustc_driver::init_rustc_env_logger();\n-    let mut callbacks = CraneliftPassesCallbacks::default();\n-    Lazy::force(&DEFAULT_HOOK); // Install ice hook\n-    let exit_code = rustc_driver::catch_with_exit_code(|| {\n-        let args = std::env::args_os()\n-            .enumerate()\n-            .map(|(i, arg)| {\n-                arg.into_string().unwrap_or_else(|arg| {\n-                    early_error(\n-                        ErrorOutputType::default(),\n-                        &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n-                    )\n-                })\n-            })\n-            .collect::<Vec<_>>();\n-        let mut run_compiler = rustc_driver::RunCompiler::new(&args, &mut callbacks);\n-        run_compiler.set_make_codegen_backend(Some(Box::new(move |_| {\n-            Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend { config: None })\n-        })));\n-        run_compiler.run()\n-    });\n-\n-    if callbacks.time_passes {\n-        let end_rss = get_resident_set_size();\n-        print_time_passes_entry(\"total\", start_time.elapsed(), start_rss, end_rss);\n-    }\n-\n-    std::process::exit(exit_code)\n-}"}, {"sha": "bde4d71b9a33c4f385b9640410e68b0bff51d5e5", "filename": "compiler/rustc_codegen_cranelift/src/bin/cg_clif_build_sysroot.rs", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif_build_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif_build_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif_build_sysroot.rs?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -1,93 +0,0 @@\n-//! The only difference between this and cg_clif.rs is that this binary defaults to using cg_llvm\n-//! instead of cg_clif and requires `--clif` to use cg_clif and that this binary doesn't have JIT\n-//! support.\n-//! This is necessary as with Cargo `RUSTC` applies to both target crates and host crates. The host\n-//! crates must be built with cg_llvm as we are currently building a sysroot for cg_clif.\n-//! `RUSTFLAGS` however is only applied to target crates, so `--clif` would only be passed to the\n-//! target crates.\n-\n-#![feature(rustc_private)]\n-#![warn(rust_2018_idioms)]\n-#![warn(unused_lifetimes)]\n-#![warn(unreachable_pub)]\n-\n-extern crate rustc_driver;\n-extern crate rustc_interface;\n-extern crate rustc_session;\n-extern crate rustc_target;\n-\n-use std::path::PathBuf;\n-\n-use rustc_interface::interface;\n-use rustc_session::config::ErrorOutputType;\n-use rustc_session::early_error;\n-use rustc_target::spec::PanicStrategy;\n-\n-fn find_sysroot() -> String {\n-    // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n-    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    match (home, toolchain) {\n-        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ => option_env!(\"RUST_SYSROOT\")\n-            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n-            .to_owned(),\n-    }\n-}\n-\n-pub struct CraneliftPassesCallbacks {\n-    use_clif: bool,\n-}\n-\n-impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n-    fn config(&mut self, config: &mut interface::Config) {\n-        if !self.use_clif {\n-            config.opts.maybe_sysroot = Some(PathBuf::from(find_sysroot()));\n-            return;\n-        }\n-\n-        config.opts.cg.panic = Some(PanicStrategy::Abort);\n-        config.opts.debugging_opts.panic_abort_tests = true;\n-        config.opts.maybe_sysroot =\n-            Some(std::env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_owned());\n-    }\n-}\n-\n-fn main() {\n-    rustc_driver::init_rustc_env_logger();\n-    rustc_driver::install_ice_hook();\n-    let exit_code = rustc_driver::catch_with_exit_code(|| {\n-        let mut use_clif = false;\n-\n-        let args = std::env::args_os()\n-            .enumerate()\n-            .map(|(i, arg)| {\n-                arg.into_string().unwrap_or_else(|arg| {\n-                    early_error(\n-                        ErrorOutputType::default(),\n-                        &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n-                    )\n-                })\n-            })\n-            .filter(|arg| {\n-                if arg == \"--clif\" {\n-                    use_clif = true;\n-                    false\n-                } else {\n-                    true\n-                }\n-            })\n-            .collect::<Vec<_>>();\n-\n-        let mut callbacks = CraneliftPassesCallbacks { use_clif };\n-\n-        let mut run_compiler = rustc_driver::RunCompiler::new(&args, &mut callbacks);\n-        if use_clif {\n-            run_compiler.set_make_codegen_backend(Some(Box::new(move |_| {\n-                Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend { config: None })\n-            })));\n-        }\n-        run_compiler.run()\n-    });\n-    std::process::exit(exit_code)\n-}"}, {"sha": "f9dc1b5169e1a624c35949691a5a8f0f6f0e6f8c", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -340,22 +340,46 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         self.bcx.set_srcloc(SourceLoc::new(index as u32));\n     }\n \n-    pub(crate) fn get_caller_location(&mut self, span: Span) -> CValue<'tcx> {\n-        if let Some(loc) = self.caller_location {\n-            // `#[track_caller]` is used; return caller location instead of current location.\n-            return loc;\n+    // Note: must be kept in sync with get_caller_location from cg_ssa\n+    pub(crate) fn get_caller_location(&mut self, mut source_info: mir::SourceInfo) -> CValue<'tcx> {\n+        let span_to_caller_location = |fx: &mut FunctionCx<'_, '_, 'tcx>, span: Span| {\n+            let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n+            let caller = fx.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n+            let const_loc = fx.tcx.const_caller_location((\n+                rustc_span::symbol::Symbol::intern(\n+                    &caller.file.name.prefer_remapped().to_string_lossy(),\n+                ),\n+                caller.line as u32,\n+                caller.col_display as u32 + 1,\n+            ));\n+            crate::constant::codegen_const_value(fx, const_loc, fx.tcx.caller_location_ty())\n+        };\n+\n+        // Walk up the `SourceScope`s, in case some of them are from MIR inlining.\n+        // If so, the starting `source_info.span` is in the innermost inlined\n+        // function, and will be replaced with outer callsite spans as long\n+        // as the inlined functions were `#[track_caller]`.\n+        loop {\n+            let scope_data = &self.mir.source_scopes[source_info.scope];\n+\n+            if let Some((callee, callsite_span)) = scope_data.inlined {\n+                // Stop inside the most nested non-`#[track_caller]` function,\n+                // before ever reaching its caller (which is irrelevant).\n+                if !callee.def.requires_caller_location(self.tcx) {\n+                    return span_to_caller_location(self, source_info.span);\n+                }\n+                source_info.span = callsite_span;\n+            }\n+\n+            // Skip past all of the parents with `inlined: None`.\n+            match scope_data.inlined_parent_scope {\n+                Some(parent) => source_info.scope = parent,\n+                None => break,\n+            }\n         }\n \n-        let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n-        let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n-        let const_loc = self.tcx.const_caller_location((\n-            rustc_span::symbol::Symbol::intern(\n-                &caller.file.name.prefer_remapped().to_string_lossy(),\n-            ),\n-            caller.line as u32,\n-            caller.col_display as u32 + 1,\n-        ));\n-        crate::constant::codegen_const_value(self, const_loc, self.tcx.caller_location_ty())\n+        // No inlined `SourceScope`s, or all of them were `#[track_caller]`.\n+        self.caller_location.unwrap_or_else(|| span_to_caller_location(self, source_info.span))\n     }\n \n     pub(crate) fn anonymous_str(&mut self, msg: &str) -> Value {"}, {"sha": "1b01f4edbb3f3313bdd1ba9a4943822e3625667d", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -74,6 +74,7 @@ fn create_jit_module<'tcx>(\n     jit_builder.hotswap(hotswap);\n     crate::compiler_builtins::register_functions_for_jit(&mut jit_builder);\n     jit_builder.symbols(imported_symbols);\n+    jit_builder.symbol(\"__clif_jit_fn\", clif_jit_fn as *const u8);\n     let mut jit_module = JITModule::new(jit_builder);\n \n     let mut cx = crate::CodegenCx::new(\n@@ -210,8 +211,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     }\n }\n \n-#[no_mangle]\n-extern \"C\" fn __clif_jit_fn(\n+extern \"C\" fn clif_jit_fn(\n     instance_ptr: *const Instance<'static>,\n     trampoline_ptr: *const u8,\n ) -> *const u8 {"}, {"sha": "29b3f36b2bef2c389bb79d54bec9ebcf191a7308", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -218,7 +218,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n     instance: Instance<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     destination: Option<(CPlace<'tcx>, BasicBlock)>,\n-    span: Span,\n+    source_info: mir::SourceInfo,\n ) {\n     let intrinsic = fx.tcx.item_name(instance.def_id());\n     let substs = instance.substs;\n@@ -232,7 +232,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                     fx.bcx.ins().trap(TrapCode::User(0));\n                 }\n                 sym::transmute => {\n-                    crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", span);\n+                    crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n                 }\n                 _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n             }\n@@ -241,7 +241,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n     };\n \n     if intrinsic.as_str().starts_with(\"simd_\") {\n-        self::simd::codegen_simd_intrinsic_call(fx, intrinsic, substs, args, ret, span);\n+        self::simd::codegen_simd_intrinsic_call(fx, intrinsic, substs, args, ret, source_info.span);\n         let ret_block = fx.get_block(destination.expect(\"SIMD intrinsics don't diverge\").1);\n         fx.bcx.ins().jump(ret_block, &[]);\n     } else if codegen_float_intrinsic_call(fx, intrinsic, args, ret) {\n@@ -255,7 +255,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             substs,\n             args,\n             ret,\n-            span,\n+            source_info,\n             destination,\n         );\n     }\n@@ -339,15 +339,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n     substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,\n-    span: Span,\n+    source_info: mir::SourceInfo,\n     destination: Option<(CPlace<'tcx>, BasicBlock)>,\n ) {\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n     intrinsic_match! {\n         fx, intrinsic, args,\n         _ => {\n-            fx.tcx.sess.span_fatal(span, &format!(\"unsupported intrinsic {}\", intrinsic));\n+            fx.tcx.sess.span_fatal(source_info.span, &format!(\"unsupported intrinsic {}\", intrinsic));\n         };\n \n         assume, (c _a) {};\n@@ -658,7 +658,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                     crate::base::codegen_panic(\n                         fx,\n                         &format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty),\n-                        span,\n+                        source_info,\n                     )\n                 });\n                 return;\n@@ -669,7 +669,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                     crate::base::codegen_panic(\n                         fx,\n                         &format!(\"attempted to zero-initialize type `{}`, which is invalid\", layout.ty),\n-                        span,\n+                        source_info,\n                     );\n                 });\n                 return;\n@@ -680,7 +680,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                     crate::base::codegen_panic(\n                         fx,\n                         &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", layout.ty),\n-                        span,\n+                        source_info,\n                     )\n                 });\n                 return;\n@@ -715,19 +715,19 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n         ptr_offset_from | ptr_offset_from_unsigned, (v ptr, v base) {\n             let ty = substs.type_at(0);\n-            let isize_layout = fx.layout_of(fx.tcx.types.isize);\n \n             let pointee_size: u64 = fx.layout_of(ty).size.bytes();\n             let diff_bytes = fx.bcx.ins().isub(ptr, base);\n             // FIXME this can be an exact division.\n-            let diff = if intrinsic == sym::ptr_offset_from_unsigned {\n+            let val = if intrinsic == sym::ptr_offset_from_unsigned {\n+                let usize_layout = fx.layout_of(fx.tcx.types.usize);\n                 // Because diff_bytes ULE isize::MAX, this would be fine as signed,\n                 // but unsigned is slightly easier to codegen, so might as well.\n-                fx.bcx.ins().udiv_imm(diff_bytes, pointee_size as i64)\n+                CValue::by_val(fx.bcx.ins().udiv_imm(diff_bytes, pointee_size as i64), usize_layout)\n             } else {\n-                fx.bcx.ins().sdiv_imm(diff_bytes, pointee_size as i64)\n+                let isize_layout = fx.layout_of(fx.tcx.types.isize);\n+                CValue::by_val(fx.bcx.ins().sdiv_imm(diff_bytes, pointee_size as i64), isize_layout)\n             };\n-            let val = CValue::by_val(diff, isize_layout);\n             ret.write_cvalue(fx, val);\n         };\n \n@@ -742,7 +742,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n \n         caller_location, () {\n-            let caller_location = fx.get_caller_location(span);\n+            let caller_location = fx.get_caller_location(source_info);\n             ret.write_cvalue(fx, caller_location);\n         };\n \n@@ -765,12 +765,12 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                         fx.bcx.ins().jump(ret_block, &[]);\n                         return;\n                     } else {\n-                        fx.tcx.sess.span_fatal(span, \"128bit atomics not yet supported\");\n+                        fx.tcx.sess.span_fatal(source_info.span, \"128bit atomics not yet supported\");\n                     }\n                 }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, ty);\n                     return;\n                 }\n             }\n@@ -793,12 +793,12 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                         fx.bcx.ins().jump(ret_block, &[]);\n                         return;\n                     } else {\n-                        fx.tcx.sess.span_fatal(span, \"128bit atomics not yet supported\");\n+                        fx.tcx.sess.span_fatal(source_info.span, \"128bit atomics not yet supported\");\n                     }\n                 }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, ty);\n                     return;\n                 }\n             }\n@@ -812,7 +812,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -830,7 +830,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -850,7 +850,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -868,7 +868,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -886,7 +886,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -904,7 +904,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -922,7 +922,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -940,7 +940,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -958,7 +958,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -976,7 +976,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -994,7 +994,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }\n@@ -1012,7 +1012,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n-                    report_atomic_type_validation_error(fx, intrinsic, span, layout.ty);\n+                    report_atomic_type_validation_error(fx, intrinsic, source_info.span, layout.ty);\n                     return;\n                 }\n             }"}, {"sha": "a68225de58b32d160dd2302ed54eaf352b3d8831", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=42e1761c704f074b7b8c7ff8a7433acfd65d2ee9", "patch": "@@ -828,6 +828,7 @@ pub(crate) fn assert_assignable<'tcx>(\n                 }\n             }\n         }\n+        (ty::Array(a, _), ty::Array(b, _)) => assert_assignable(fx, *a, *b),\n         _ => {\n             assert_eq!(\n                 from_ty, to_ty,"}]}