{"sha": "4b362bbbb61f7a140c6a7443d4809b73a43e50f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMzYyYmJiYjYxZjdhMTQwYzZhNzQ0M2Q0ODA5YjczYTQzZTUwZjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-21T13:30:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-21T13:30:44Z"}, "message": "Rollup merge of #76981 - pickfire:patch-5, r=Mark-Simulacrum\n\nliballoc bench use imported path Bencher\n\ntest is already in scope, no need to use the full path", "tree": {"sha": "368bddaede13773d46ce0b9125c35ae3358abc0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368bddaede13773d46ce0b9125c35ae3358abc0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b362bbbb61f7a140c6a7443d4809b73a43e50f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaKsECRBK7hj4Ov3rIwAAdHIIAIUxdkuMjFls0oYzPOUfvouT\n228TCAoHncgYnHfX7aJN1jzEaRmRUfkoyDy50OLoTL+ahsj7FPLi2Do7QgeRgx0S\nspxB0wG97nmNkm7CfST4P1c0qz0XhvOPn5yONe+JZBPBNNnMAlfIE5RFkA1A54Qj\nry9+niB19INk29YVKU5ltTemOomxK5M5bmtkh462C4zioVzwtziEJV/xHGlPpIA+\n3TjC2gGm/d1uAk24lFEgyM6pcwCC2UX0NlrYYVTYm7ae2p4sPX6u3kH+8IurSxLj\nz9x4v9ipOw+HzJMLu52NK4iFr5ORZcgmAqGeopEh8iyYGx9oTsxhUmtuvAlO3Js=\n=N/D5\n-----END PGP SIGNATURE-----\n", "payload": "tree 368bddaede13773d46ce0b9125c35ae3358abc0b\nparent 9c14ef572fd5bd032a5b86df8a5d2eadf5b935b5\nparent d99bb9d31c9fb170c1f80c20511d18e433cc5e9c\nauthor Ralf Jung <post@ralfj.de> 1600695044 +0200\ncommitter GitHub <noreply@github.com> 1600695044 +0200\n\nRollup merge of #76981 - pickfire:patch-5, r=Mark-Simulacrum\n\nliballoc bench use imported path Bencher\n\ntest is already in scope, no need to use the full path\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b362bbbb61f7a140c6a7443d4809b73a43e50f2", "html_url": "https://github.com/rust-lang/rust/commit/4b362bbbb61f7a140c6a7443d4809b73a43e50f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b362bbbb61f7a140c6a7443d4809b73a43e50f2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c14ef572fd5bd032a5b86df8a5d2eadf5b935b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c14ef572fd5bd032a5b86df8a5d2eadf5b935b5", "html_url": "https://github.com/rust-lang/rust/commit/9c14ef572fd5bd032a5b86df8a5d2eadf5b935b5"}, {"sha": "d99bb9d31c9fb170c1f80c20511d18e433cc5e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d99bb9d31c9fb170c1f80c20511d18e433cc5e9c", "html_url": "https://github.com/rust-lang/rust/commit/d99bb9d31c9fb170c1f80c20511d18e433cc5e9c"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "b295342f3610ee609cbb73c72ae785fe600967a5", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4b362bbbb61f7a140c6a7443d4809b73a43e50f2/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b362bbbb61f7a140c6a7443d4809b73a43e50f2/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=4b362bbbb61f7a140c6a7443d4809b73a43e50f2", "patch": "@@ -496,7 +496,7 @@ bench_in_place![\n ];\n \n #[bench]\n-fn bench_in_place_recycle(b: &mut test::Bencher) {\n+fn bench_in_place_recycle(b: &mut Bencher) {\n     let mut data = vec![0; 1000];\n \n     b.iter(|| {\n@@ -513,7 +513,7 @@ fn bench_in_place_recycle(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_in_place_zip_recycle(b: &mut test::Bencher) {\n+fn bench_in_place_zip_recycle(b: &mut Bencher) {\n     let mut data = vec![0u8; 1000];\n     let mut rng = rand::thread_rng();\n     let mut subst = vec![0u8; 1000];\n@@ -533,7 +533,7 @@ fn bench_in_place_zip_recycle(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_in_place_zip_iter_mut(b: &mut test::Bencher) {\n+fn bench_in_place_zip_iter_mut(b: &mut Bencher) {\n     let mut data = vec![0u8; 256];\n     let mut rng = rand::thread_rng();\n     let mut subst = vec![0u8; 1000];\n@@ -558,7 +558,7 @@ impl Drop for Droppable {\n }\n \n #[bench]\n-fn bench_in_place_collect_droppable(b: &mut test::Bencher) {\n+fn bench_in_place_collect_droppable(b: &mut Bencher) {\n     let v: Vec<Droppable> = std::iter::repeat_with(|| Droppable(0)).take(1000).collect();\n     b.iter(|| {\n         v.clone()\n@@ -571,13 +571,13 @@ fn bench_in_place_collect_droppable(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_chain_collect(b: &mut test::Bencher) {\n+fn bench_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| data.iter().cloned().chain([1].iter().cloned()).collect::<Vec<_>>());\n }\n \n #[bench]\n-fn bench_chain_chain_collect(b: &mut test::Bencher) {\n+fn bench_chain_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| {\n         data.iter()\n@@ -589,7 +589,7 @@ fn bench_chain_chain_collect(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_nest_chain_chain_collect(b: &mut test::Bencher) {\n+fn bench_nest_chain_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| {\n         data.iter().cloned().chain([1].iter().chain([2].iter()).cloned()).collect::<Vec<_>>()\n@@ -616,12 +616,12 @@ pub fn map_fast(l: &[(u32, u32)]) -> Vec<u32> {\n const LEN: usize = 16384;\n \n #[bench]\n-fn bench_range_map_collect(b: &mut test::Bencher) {\n+fn bench_range_map_collect(b: &mut Bencher) {\n     b.iter(|| (0..LEN).map(|_| u32::default()).collect::<Vec<_>>());\n }\n \n #[bench]\n-fn bench_chain_extend_ref(b: &mut test::Bencher) {\n+fn bench_chain_extend_ref(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| {\n         let mut v = Vec::<u32>::with_capacity(data.len() + 1);\n@@ -631,7 +631,7 @@ fn bench_chain_extend_ref(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_chain_extend_value(b: &mut test::Bencher) {\n+fn bench_chain_extend_value(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| {\n         let mut v = Vec::<u32>::with_capacity(data.len() + 1);\n@@ -641,7 +641,7 @@ fn bench_chain_extend_value(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_rev_1(b: &mut test::Bencher) {\n+fn bench_rev_1(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| {\n         let mut v = Vec::<u32>::new();\n@@ -651,13 +651,13 @@ fn bench_rev_1(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_rev_2(b: &mut test::Bencher) {\n+fn bench_rev_2(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n     b.iter(|| example_plain_slow(&data));\n }\n \n #[bench]\n-fn bench_map_regular(b: &mut test::Bencher) {\n+fn bench_map_regular(b: &mut Bencher) {\n     let data = black_box([(0, 0); LEN]);\n     b.iter(|| {\n         let mut v = Vec::<u32>::new();\n@@ -667,7 +667,7 @@ fn bench_map_regular(b: &mut test::Bencher) {\n }\n \n #[bench]\n-fn bench_map_fast(b: &mut test::Bencher) {\n+fn bench_map_fast(b: &mut Bencher) {\n     let data = black_box([(0, 0); LEN]);\n     b.iter(|| map_fast(&data));\n }"}]}