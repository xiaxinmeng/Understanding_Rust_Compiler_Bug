{"sha": "8c963c07a8e56320d33681050f94b467cfcc6251", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOTYzYzA3YThlNTYzMjBkMzM2ODEwNTBmOTRiNDY3Y2ZjYzYyNTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-09-30T17:08:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-09-30T18:12:30Z"}, "message": "rustc: Support output filenames for each emit type\n\nCurrently the compiler supports the ability to emit multiple output types as\npart of one compilation (e.g. asm, LLVM IR, bytecode, link, dep-info, etc). It\ndoes not, however, support the ability to customize the output filename for each\nof these output types. The `-o` flag is ignored if multiple emit types are\nspecified (and the compiler emits a warning about this).\n\nNormally this doesn't matter too much, but in the case of `dep-info` it can lead\nto a number of problems (e.g. see #28716). By allowing customization of the\noutput filename for each emit type we're able to solve the problems in that\nissue.\n\nThis commit adds support for the `--emit` option to the compiler to look like:\n\n    rustc foo.rs --emit dep-info=.deps/foo.d,link\n\nThis indicates that the `dep-info` output type will be placed at `.deps/foo.d`\nand the `link` output type will otherwise be determined via the `--out-dir` and\n`-o` flags.\n\nCloses #28716", "tree": {"sha": "8e1c04dc7d38df8f2dec20e211a16f146b175bf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1c04dc7d38df8f2dec20e211a16f146b175bf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c963c07a8e56320d33681050f94b467cfcc6251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c963c07a8e56320d33681050f94b467cfcc6251", "html_url": "https://github.com/rust-lang/rust/commit/8c963c07a8e56320d33681050f94b467cfcc6251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c963c07a8e56320d33681050f94b467cfcc6251/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6d7243ae9749eff27fd320cb422e42291e79d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6d7243ae9749eff27fd320cb422e42291e79d4", "html_url": "https://github.com/rust-lang/rust/commit/3e6d7243ae9749eff27fd320cb422e42291e79d4"}], "stats": {"total": 307, "additions": 165, "deletions": 142}, "files": [{"sha": "56e3fe0515eb9b7dbe34dc8fed719acb39686347", "filename": "man/rustc.1", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c963c07a8e56320d33681050f94b467cfcc6251/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/8c963c07a8e56320d33681050f94b467cfcc6251/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=8c963c07a8e56320d33681050f94b467cfcc6251", "patch": "@@ -53,7 +53,9 @@ Comma separated list of types of crates for the compiler to emit.\n Specify the name of the crate being built.\n .TP\n \\fB\\-\\-emit\\fR [asm|llvm\\-bc|llvm\\-ir|obj|link|dep\\-info]\n-Configure the output that \\fBrustc\\fR will produce.\n+Configure the output that \\fBrustc\\fR will produce. Each option may also be of\n+the form KIND=PATH to specify the explicit output location for that particular\n+emission kind.\n .TP\n \\fB\\-\\-print\\fR [crate\\-name|file\\-names|sysroot]\n Comma separated list of compiler information to print on stdout.\n@@ -66,7 +68,8 @@ Equivalent to \\fI\\-C\\ opt\\-level=2\\fR.\n .TP\n \\fB\\-o\\fR \\fIFILENAME\\fR\n Write output to \\fIFILENAME\\fR.\n-Ignored if multiple \\fI\\-\\-emit\\fR outputs are specified.\n+Ignored if multiple \\fI\\-\\-emit\\fR outputs are specified which don't have an\n+explicit path otherwise.\n .TP\n \\fB\\-\\-out\\-dir\\fR \\fIDIR\\fR\n Write output to compiler\\[hy]chosen filename in \\fIDIR\\fR."}, {"sha": "0739420ea4d684889d8565b2fa59a2f9c52c4276", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 34, "deletions": 42, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=8c963c07a8e56320d33681050f94b467cfcc6251", "patch": "@@ -15,7 +15,6 @@ pub use self::EntryFnType::*;\n pub use self::CrateType::*;\n pub use self::Passes::*;\n pub use self::OptLevel::*;\n-pub use self::OutputType::*;\n pub use self::DebugInfoLevel::*;\n \n use session::{early_error, early_warn, Session};\n@@ -62,14 +61,14 @@ pub enum DebugInfoLevel {\n     FullDebugInfo,\n }\n \n-#[derive(Clone, Copy, PartialEq, PartialOrd, Ord, Eq)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n pub enum OutputType {\n-    OutputTypeBitcode,\n-    OutputTypeAssembly,\n-    OutputTypeLlvmAssembly,\n-    OutputTypeObject,\n-    OutputTypeExe,\n-    OutputTypeDepInfo,\n+    Bitcode,\n+    Assembly,\n+    LlvmAssembly,\n+    Object,\n+    Exe,\n+    DepInfo,\n }\n \n #[derive(Clone)]\n@@ -85,7 +84,7 @@ pub struct Options {\n     pub lint_opts: Vec<(String, lint::Level)>,\n     pub lint_cap: Option<lint::Level>,\n     pub describe_lints: bool,\n-    pub output_types: Vec<OutputType>,\n+    pub output_types: HashMap<OutputType, Option<PathBuf>>,\n     // This was mutable for rustpkg, which updates search paths based on the\n     // parsed code. It remains mutable in case its replacements wants to use\n     // this.\n@@ -105,8 +104,6 @@ pub struct Options {\n     pub always_build_mir: bool,\n     pub no_analysis: bool,\n     pub debugging_opts: DebuggingOptions,\n-    /// Whether to write dependency files. It's (enabled, optional filename).\n-    pub write_dependency_info: (bool, Option<PathBuf>),\n     pub prints: Vec<PrintRequest>,\n     pub cg: CodegenOptions,\n     pub color: ColorConfig,\n@@ -151,26 +148,25 @@ pub struct OutputFilenames {\n     pub out_filestem: String,\n     pub single_output_file: Option<PathBuf>,\n     pub extra: String,\n+    pub outputs: HashMap<OutputType, Option<PathBuf>>,\n }\n \n impl OutputFilenames {\n     pub fn path(&self, flavor: OutputType) -> PathBuf {\n-        match self.single_output_file {\n-            Some(ref path) => return path.clone(),\n-            None => {}\n-        }\n-        self.temp_path(flavor)\n+        self.outputs.get(&flavor).and_then(|p| p.to_owned())\n+            .or_else(|| self.single_output_file.clone())\n+            .unwrap_or_else(|| self.temp_path(flavor))\n     }\n \n     pub fn temp_path(&self, flavor: OutputType) -> PathBuf {\n         let base = self.out_directory.join(&self.filestem());\n         match flavor {\n-            OutputTypeBitcode => base.with_extension(\"bc\"),\n-            OutputTypeAssembly => base.with_extension(\"s\"),\n-            OutputTypeLlvmAssembly => base.with_extension(\"ll\"),\n-            OutputTypeObject => base.with_extension(\"o\"),\n-            OutputTypeDepInfo => base.with_extension(\"d\"),\n-            OutputTypeExe => base,\n+            OutputType::Bitcode => base.with_extension(\"bc\"),\n+            OutputType::Assembly => base.with_extension(\"s\"),\n+            OutputType::LlvmAssembly => base.with_extension(\"ll\"),\n+            OutputType::Object => base.with_extension(\"o\"),\n+            OutputType::DepInfo => base.with_extension(\"d\"),\n+            OutputType::Exe => base,\n         }\n     }\n \n@@ -206,7 +202,7 @@ pub fn basic_options() -> Options {\n         lint_opts: Vec::new(),\n         lint_cap: None,\n         describe_lints: false,\n-        output_types: Vec::new(),\n+        output_types: HashMap::new(),\n         search_paths: SearchPaths::new(),\n         maybe_sysroot: None,\n         target_triple: host_triple().to_string(),\n@@ -218,7 +214,6 @@ pub fn basic_options() -> Options {\n         always_build_mir: false,\n         no_analysis: false,\n         debugging_opts: basic_debugging_options(),\n-        write_dependency_info: (false, None),\n         prints: Vec::new(),\n         cg: basic_codegen_options(),\n         color: Auto,\n@@ -907,31 +902,30 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         unsafe { llvm::LLVMSetDebug(1); }\n     }\n \n-    let mut output_types = Vec::new();\n+    let mut output_types = HashMap::new();\n     if !debugging_opts.parse_only && !no_trans {\n-        let unparsed_output_types = matches.opt_strs(\"emit\");\n-        for unparsed_output_type in &unparsed_output_types {\n-            for part in unparsed_output_type.split(',') {\n-                let output_type = match part {\n-                    \"asm\" => OutputTypeAssembly,\n-                    \"llvm-ir\" => OutputTypeLlvmAssembly,\n-                    \"llvm-bc\" => OutputTypeBitcode,\n-                    \"obj\" => OutputTypeObject,\n-                    \"link\" => OutputTypeExe,\n-                    \"dep-info\" => OutputTypeDepInfo,\n-                    _ => {\n+        for list in matches.opt_strs(\"emit\") {\n+            for output_type in list.split(',') {\n+                let mut parts = output_type.splitn(2, '=');\n+                let output_type = match parts.next().unwrap() {\n+                    \"asm\" => OutputType::Assembly,\n+                    \"llvm-ir\" => OutputType::LlvmAssembly,\n+                    \"llvm-bc\" => OutputType::Bitcode,\n+                    \"obj\" => OutputType::Object,\n+                    \"link\" => OutputType::Exe,\n+                    \"dep-info\" => OutputType::DepInfo,\n+                    part => {\n                         early_error(color, &format!(\"unknown emission type: `{}`\",\n                                                     part))\n                     }\n                 };\n-                output_types.push(output_type)\n+                let path = parts.next().map(PathBuf::from);\n+                output_types.insert(output_type, path);\n             }\n         }\n     };\n-    output_types.sort();\n-    output_types.dedup();\n     if output_types.is_empty() {\n-        output_types.push(OutputTypeExe);\n+        output_types.insert(OutputType::Exe, None);\n     }\n \n     let cg = build_codegen_options(matches, color);\n@@ -1004,7 +998,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let test = matches.opt_present(\"test\");\n-    let write_dependency_info = (output_types.contains(&OutputTypeDepInfo), None);\n \n     let prints = matches.opt_strs(\"print\").into_iter().map(|s| {\n         match &*s {\n@@ -1059,7 +1052,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         always_build_mir: always_build_mir,\n         no_analysis: no_analysis,\n         debugging_opts: debugging_opts,\n-        write_dependency_info: write_dependency_info,\n         prints: prints,\n         cg: cg,\n         color: color,"}, {"sha": "e2835ae8f0d6f9cd3aaf7889a100c3821d060306", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=8c963c07a8e56320d33681050f94b467cfcc6251", "patch": "@@ -12,7 +12,7 @@ use rustc::front;\n use rustc::front::map as hir_map;\n use rustc_mir as mir;\n use rustc::session::Session;\n-use rustc::session::config::{self, Input, OutputFilenames};\n+use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::metadata;\n@@ -36,6 +36,7 @@ use super::Compilation;\n \n use serialize::json;\n \n+use std::collections::HashMap;\n use std::env;\n use std::ffi::{OsString, OsStr};\n use std::fs;\n@@ -117,7 +118,7 @@ pub fn compile_input(sess: Session,\n         let arenas = ty::CtxtArenas::new();\n         let ast_map = make_map(&sess, &mut hir_forest);\n \n-        write_out_deps(&sess, input, &outputs, &id[..]);\n+        write_out_deps(&sess, &outputs, &id);\n \n         controller_entry_point!(after_write_deps,\n                                 sess,\n@@ -807,16 +808,16 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n                                trans: &trans::CrateTranslation,\n                                outputs: &OutputFilenames) {\n     if sess.opts.cg.no_integrated_as {\n-        let output_type = config::OutputTypeAssembly;\n-\n+        let mut map = HashMap::new();\n+        map.insert(OutputType::Assembly, None);\n         time(sess.time_passes(), \"LLVM passes\", ||\n-            write::run_passes(sess, trans, &[output_type], outputs));\n+            write::run_passes(sess, trans, &map, outputs));\n \n         write::run_assembler(sess, outputs);\n \n         // Remove assembly source, unless --save-temps was specified\n         if !sess.opts.cg.save_temps {\n-            fs::remove_file(&outputs.temp_path(config::OutputTypeAssembly)).unwrap();\n+            fs::remove_file(&outputs.temp_path(OutputType::Assembly)).unwrap();\n         }\n     } else {\n         time(sess.time_passes(), \"LLVM passes\", ||\n@@ -847,16 +848,12 @@ fn escape_dep_filename(filename: &str) -> String {\n     filename.replace(\" \", \"\\\\ \")\n }\n \n-fn write_out_deps(sess: &Session,\n-                  input: &Input,\n-                  outputs: &OutputFilenames,\n-                  id: &str) {\n-\n+fn write_out_deps(sess: &Session, outputs: &OutputFilenames, id: &str) {\n     let mut out_filenames = Vec::new();\n-    for output_type in &sess.opts.output_types {\n+    for output_type in sess.opts.output_types.keys() {\n         let file = outputs.path(*output_type);\n         match *output_type {\n-            config::OutputTypeExe => {\n+            OutputType::Exe => {\n                 for output in sess.crate_types.borrow().iter() {\n                     let p = link::filename_for_input(sess, *output, id,\n                                                      outputs);\n@@ -867,23 +864,11 @@ fn write_out_deps(sess: &Session,\n         }\n     }\n \n-    // Write out dependency rules to the dep-info file if requested with\n-    // --dep-info\n-    let deps_filename = match sess.opts.write_dependency_info {\n-        // Use filename from --dep-file argument if given\n-        (true, Some(ref filename)) => filename.clone(),\n-        // Use default filename: crate source filename with extension replaced\n-        // by \".d\"\n-        (true, None) => match *input {\n-            Input::File(..) => outputs.with_extension(\"d\"),\n-            Input::Str(..) => {\n-                sess.warn(\"can not write --dep-info without a filename \\\n-                           when compiling stdin.\");\n-                return\n-            },\n-        },\n-        _ => return,\n-    };\n+    // Write out dependency rules to the dep-info file if requested\n+    if !sess.opts.output_types.contains_key(&OutputType::DepInfo) {\n+        return\n+    }\n+    let deps_filename = outputs.path(OutputType::DepInfo);\n \n     let result = (|| -> io::Result<()> {\n         // Build a list of files used to compile the output and\n@@ -1012,11 +997,15 @@ pub fn build_output_filenames(input: &Input,\n                 out_filestem: stem,\n                 single_output_file: None,\n                 extra: sess.opts.cg.extra_filename.clone(),\n+                outputs: sess.opts.output_types.clone(),\n             }\n         }\n \n         Some(ref out_file) => {\n-            let ofile = if sess.opts.output_types.len() > 1 {\n+            let unnamed_output_types = sess.opts.output_types.values()\n+                                           .filter(|a| a.is_none())\n+                                           .count();\n+            let ofile = if unnamed_output_types > 1 {\n                 sess.warn(\"ignoring specified output filename because multiple \\\n                            outputs were requested\");\n                 None\n@@ -1035,6 +1024,7 @@ pub fn build_output_filenames(input: &Input,\n                                       .to_str().unwrap().to_string(),\n                 single_output_file: ofile,\n                 extra: sess.opts.cg.extra_filename.clone(),\n+                outputs: sess.opts.output_types.clone(),\n             }\n         }\n     }"}, {"sha": "d5644d49e1ea4afc4c3896e5ae94d3c7d2b85193", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8c963c07a8e56320d33681050f94b467cfcc6251", "patch": "@@ -63,7 +63,7 @@ use rustc_resolve as resolve;\n use rustc_trans::back::link;\n use rustc_trans::save;\n use rustc::session::{config, Session, build_session};\n-use rustc::session::config::{Input, PrintRequest};\n+use rustc::session::config::{Input, PrintRequest, OutputType};\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc::metadata;\n@@ -382,7 +382,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.after_analysis.stop = Compilation::Stop;\n         }\n \n-        if !sess.opts.output_types.iter().any(|&i| i == config::OutputTypeExe) {\n+        if !sess.opts.output_types.keys().any(|&i| i == OutputType::Exe) {\n             control.after_llvm.stop = Compilation::Stop;\n         }\n "}, {"sha": "1590d20b09e7cc80e80f66391cc8b0dde0e9cc20", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=8c963c07a8e56320d33681050f94b467cfcc6251", "patch": "@@ -16,7 +16,7 @@ use super::msvc;\n use super::svh::Svh;\n use session::config;\n use session::config::NoDebugInfo;\n-use session::config::{OutputFilenames, Input, OutputTypeBitcode, OutputTypeExe, OutputTypeObject};\n+use session::config::{OutputFilenames, Input, OutputType};\n use session::search_paths::PathKind;\n use session::Session;\n use metadata::common::LinkMeta;\n@@ -486,7 +486,7 @@ pub fn filename_for_input(sess: &Session,\n         }\n         config::CrateTypeExecutable => {\n             let suffix = &sess.target.target.options.exe_suffix;\n-            let out_filename = outputs.path(OutputTypeExe);\n+            let out_filename = outputs.path(OutputType::Exe);\n             if suffix.is_empty() {\n                 out_filename.to_path_buf()\n             } else {\n@@ -527,10 +527,12 @@ fn link_binary_output(sess: &Session,\n                       outputs: &OutputFilenames,\n                       crate_name: &str) -> PathBuf {\n     let objects = object_filenames(sess, outputs);\n-    let out_filename = match outputs.single_output_file {\n-        Some(ref file) => file.clone(),\n-        None => filename_for_input(sess, crate_type, crate_name, outputs),\n-    };\n+    let default_filename = filename_for_input(sess, crate_type, crate_name,\n+                                              outputs);\n+    let out_filename = outputs.outputs.get(&OutputType::Exe)\n+                              .and_then(|s| s.to_owned())\n+                              .or_else(|| outputs.single_output_file.clone())\n+                              .unwrap_or(default_filename);\n \n     // Make sure files are writeable.  Mac, FreeBSD, and Windows system linkers\n     // check this already -- however, the Linux linker will happily overwrite a\n@@ -571,7 +573,7 @@ fn link_binary_output(sess: &Session,\n fn object_filenames(sess: &Session, outputs: &OutputFilenames) -> Vec<PathBuf> {\n     (0..sess.opts.cg.codegen_units).map(|i| {\n         let ext = format!(\"{}.o\", i);\n-        outputs.temp_path(OutputTypeObject).with_extension(&ext)\n+        outputs.temp_path(OutputType::Object).with_extension(&ext)\n     }).collect()\n }\n \n@@ -718,7 +720,7 @@ fn link_rlib<'a>(sess: &'a Session,\n                 // See the bottom of back::write::run_passes for an explanation\n                 // of when we do and don't keep .0.bc files around.\n                 let user_wants_numbered_bitcode =\n-                        sess.opts.output_types.contains(&OutputTypeBitcode) &&\n+                        sess.opts.output_types.contains_key(&OutputType::Bitcode) &&\n                         sess.opts.cg.codegen_units > 1;\n                 if !sess.opts.cg.save_temps && !user_wants_numbered_bitcode {\n                     remove(sess, &bc_filename);"}, {"sha": "1fbbf82ba38e47560f64398f3e0ffc5c3eda433a", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 43, "deletions": 47, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=8c963c07a8e56320d33681050f94b467cfcc6251", "patch": "@@ -12,7 +12,7 @@ use back::lto;\n use back::link::{get_linker, remove};\n use session::config::{OutputFilenames, Passes, SomePasses, AllPasses};\n use session::Session;\n-use session::config;\n+use session::config::{self, OutputType};\n use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef, ContextRef};\n use llvm::SMDiagnosticRef;\n@@ -23,25 +23,17 @@ use syntax::codemap;\n use syntax::diagnostic;\n use syntax::diagnostic::{Emitter, Handler, Level};\n \n+use std::collections::HashMap;\n use std::ffi::{CStr, CString};\n use std::fs;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::ptr;\n use std::str;\n use std::sync::{Arc, Mutex};\n use std::sync::mpsc::channel;\n use std::thread;\n use libc::{self, c_uint, c_int, c_void};\n \n-#[derive(Clone, Copy, PartialEq, PartialOrd, Ord, Eq)]\n-pub enum OutputType {\n-    OutputTypeBitcode,\n-    OutputTypeAssembly,\n-    OutputTypeLlvmAssembly,\n-    OutputTypeObject,\n-    OutputTypeExe,\n-}\n-\n pub fn llvm_err(handler: &diagnostic::Handler, msg: String) -> ! {\n     unsafe {\n         let cstr = llvm::LLVMRustGetLastError();\n@@ -571,7 +563,7 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n \n pub fn run_passes(sess: &Session,\n                   trans: &CrateTranslation,\n-                  output_types: &[config::OutputType],\n+                  output_types: &HashMap<OutputType, Option<PathBuf>>,\n                   crate_output: &OutputFilenames) {\n     // It's possible that we have `codegen_units > 1` but only one item in\n     // `trans.modules`.  We could theoretically proceed and do LTO in that\n@@ -611,32 +603,32 @@ pub fn run_passes(sess: &Session,\n     // archive in order to allow LTO against it.\n     let needs_crate_bitcode =\n             sess.crate_types.borrow().contains(&config::CrateTypeRlib) &&\n-            sess.opts.output_types.contains(&config::OutputTypeExe);\n+            sess.opts.output_types.contains_key(&OutputType::Exe);\n     let needs_crate_object =\n-            sess.opts.output_types.contains(&config::OutputTypeExe);\n+            sess.opts.output_types.contains_key(&OutputType::Exe);\n     if needs_crate_bitcode {\n         modules_config.emit_bc = true;\n     }\n \n-    for output_type in output_types {\n+    for output_type in output_types.keys() {\n         match *output_type {\n-            config::OutputTypeBitcode => { modules_config.emit_bc = true; },\n-            config::OutputTypeLlvmAssembly => { modules_config.emit_ir = true; },\n-            config::OutputTypeAssembly => {\n+            OutputType::Bitcode => { modules_config.emit_bc = true; },\n+            OutputType::LlvmAssembly => { modules_config.emit_ir = true; },\n+            OutputType::Assembly => {\n                 modules_config.emit_asm = true;\n                 // If we're not using the LLVM assembler, this function\n                 // could be invoked specially with output_type_assembly, so\n                 // in this case we still want the metadata object file.\n-                if !sess.opts.output_types.contains(&config::OutputTypeAssembly) {\n+                if !sess.opts.output_types.contains_key(&OutputType::Assembly) {\n                     metadata_config.emit_obj = true;\n                 }\n             },\n-            config::OutputTypeObject => { modules_config.emit_obj = true; },\n-            config::OutputTypeExe => {\n+            OutputType::Object => { modules_config.emit_obj = true; },\n+            OutputType::Exe => {\n                 modules_config.emit_obj = true;\n                 metadata_config.emit_obj = true;\n             },\n-            config::OutputTypeDepInfo => {}\n+            OutputType::DepInfo => {}\n         }\n     }\n \n@@ -686,8 +678,9 @@ pub fn run_passes(sess: &Session,\n         }\n     };\n \n-    let copy_if_one_unit = |ext: &str, output_type: config::OutputType, keep_numbered: bool| {\n-        // Three cases:\n+    let copy_if_one_unit = |ext: &str,\n+                            output_type: OutputType,\n+                            keep_numbered: bool| {\n         if sess.opts.cg.codegen_units == 1 {\n             // 1) Only one codegen unit.  In this case it's no difficulty\n             //    to copy `foo.0.x` to `foo.x`.\n@@ -697,17 +690,20 @@ pub fn run_passes(sess: &Session,\n                 // The user just wants `foo.x`, not `foo.0.x`.\n                 remove(sess, &crate_output.with_extension(ext));\n             }\n+        } else if crate_output.outputs.contains_key(&output_type) {\n+            // 2) Multiple codegen units, with `--emit foo=some_name`.  We have\n+            //    no good solution for this case, so warn the user.\n+            sess.warn(&format!(\"ignoring emit path because multiple .{} files \\\n+                                were produced\", ext));\n+        } else if crate_output.single_output_file.is_some() {\n+            // 3) Multiple codegen units, with `-o some_name`.  We have\n+            //    no good solution for this case, so warn the user.\n+            sess.warn(&format!(\"ignoring -o because multiple .{} files \\\n+                                were produced\", ext));\n         } else {\n-            if crate_output.single_output_file.is_some() {\n-                // 2) Multiple codegen units, with `-o some_name`.  We have\n-                //    no good solution for this case, so warn the user.\n-                sess.warn(&format!(\"ignoring -o because multiple .{} files were produced\",\n-                                  ext));\n-            } else {\n-                // 3) Multiple codegen units, but no `-o some_name`.  We\n-                //    just leave the `foo.0.x` files in place.\n-                // (We don't have to do any work in this case.)\n-            }\n+            // 4) Multiple codegen units, but no explicit name.  We\n+            //    just leave the `foo.0.x` files in place.\n+            // (We don't have to do any work in this case.)\n         }\n     };\n \n@@ -716,27 +712,27 @@ pub fn run_passes(sess: &Session,\n     // to get rid of it.\n     let mut user_wants_bitcode = false;\n     let mut user_wants_objects = false;\n-    for output_type in output_types {\n+    for output_type in output_types.keys() {\n         match *output_type {\n-            config::OutputTypeBitcode => {\n+            OutputType::Bitcode => {\n                 user_wants_bitcode = true;\n                 // Copy to .bc, but always keep the .0.bc.  There is a later\n                 // check to figure out if we should delete .0.bc files, or keep\n                 // them for making an rlib.\n-                copy_if_one_unit(\"0.bc\", config::OutputTypeBitcode, true);\n+                copy_if_one_unit(\"0.bc\", OutputType::Bitcode, true);\n             }\n-            config::OutputTypeLlvmAssembly => {\n-                copy_if_one_unit(\"0.ll\", config::OutputTypeLlvmAssembly, false);\n+            OutputType::LlvmAssembly => {\n+                copy_if_one_unit(\"0.ll\", OutputType::LlvmAssembly, false);\n             }\n-            config::OutputTypeAssembly => {\n-                copy_if_one_unit(\"0.s\", config::OutputTypeAssembly, false);\n+            OutputType::Assembly => {\n+                copy_if_one_unit(\"0.s\", OutputType::Assembly, false);\n             }\n-            config::OutputTypeObject => {\n+            OutputType::Object => {\n                 user_wants_objects = true;\n-                copy_if_one_unit(\"0.o\", config::OutputTypeObject, true);\n+                copy_if_one_unit(\"0.o\", OutputType::Object, true);\n             }\n-            config::OutputTypeExe |\n-            config::OutputTypeDepInfo => {}\n+            OutputType::Exe |\n+            OutputType::DepInfo => {}\n         }\n     }\n     let user_wants_bitcode = user_wants_bitcode;\n@@ -913,8 +909,8 @@ fn run_work_multithreaded(sess: &Session,\n pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n     let (pname, mut cmd) = get_linker(sess);\n \n-    cmd.arg(\"-c\").arg(\"-o\").arg(&outputs.path(config::OutputTypeObject))\n-                           .arg(&outputs.temp_path(config::OutputTypeAssembly));\n+    cmd.arg(\"-c\").arg(\"-o\").arg(&outputs.path(OutputType::Object))\n+                           .arg(&outputs.temp_path(OutputType::Assembly));\n     debug!(\"{:?}\", cmd);\n \n     match cmd.output() {"}, {"sha": "15ec26e5afe10de21452b0f2cb6f1b9a3c7c66f1", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8c963c07a8e56320d33681050f94b467cfcc6251", "patch": "@@ -23,7 +23,7 @@ use std::sync::{Arc, Mutex};\n use testing;\n use rustc_lint;\n use rustc::session::{self, config};\n-use rustc::session::config::get_unstable_features_setting;\n+use rustc::session::config::{get_unstable_features_setting, OutputType};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_front::lowering::lower_crate;\n use rustc_back::tempdir::TempDir;\n@@ -163,13 +163,15 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     // never wrap the test in `fn main() { ... }`\n     let test = maketest(test, Some(cratename), as_test_harness, opts);\n     let input = config::Input::Str(test.to_string());\n+    let mut outputs = HashMap::new();\n+    outputs.insert(OutputType::Exe, None);\n \n     let sessopts = config::Options {\n         maybe_sysroot: Some(env::current_exe().unwrap().parent().unwrap()\n                                               .parent().unwrap().to_path_buf()),\n         search_paths: libs,\n         crate_types: vec!(config::CrateTypeExecutable),\n-        output_types: vec!(config::OutputTypeExe),\n+        output_types: outputs,\n         externs: externs,\n         cg: config::CodegenOptions {\n             prefer_dynamic: true,"}, {"sha": "bd8c735df31a9f9a324a74f74a13fc1db6acf75a", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=8c963c07a8e56320d33681050f94b467cfcc6251", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_private, path, convert)]\n+#![feature(rustc_private)]\n \n extern crate rustc;\n extern crate rustc_driver;\n extern crate rustc_lint;\n extern crate syntax;\n \n use rustc::session::{build_session, Session};\n-use rustc::session::config::{basic_options, build_configuration, Input, OutputTypeExe};\n+use rustc::session::config::{basic_options, build_configuration, Input, OutputType};\n use rustc_driver::driver::{compile_input, CompileController};\n use syntax::diagnostics::registry::Registry;\n \n@@ -46,7 +46,7 @@ fn main() {\n \n fn basic_sess(sysroot: PathBuf) -> Session {\n     let mut opts = basic_options();\n-    opts.output_types = vec![OutputTypeExe];\n+    opts.output_types.insert(OutputType::Exe, None);\n     opts.maybe_sysroot = Some(sysroot);\n \n     let descriptions = Registry::new(&rustc::DIAGNOSTICS);"}, {"sha": "b4b2e827e947eb32e65754fe88f16a99496d024f", "filename": "src/test/run-make/output-type-permutations/Makefile", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8c963c07a8e56320d33681050f94b467cfcc6251/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile?ref=8c963c07a8e56320d33681050f94b467cfcc6251", "patch": "@@ -23,45 +23,83 @@ all:\n \trm -f $(TMPDIR)/bar.pdb\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --emit=asm -o $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit asm -o $(TMPDIR)/foo\n+\trm $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit asm=$(TMPDIR)/foo\n \trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --emit=llvm-bc -o $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit llvm-bc -o $(TMPDIR)/foo\n+\trm $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit llvm-bc=$(TMPDIR)/foo\n \trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --emit=llvm-ir -o $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit llvm-ir -o $(TMPDIR)/foo\n+\trm $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit llvm-ir=$(TMPDIR)/foo\n \trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --emit=obj -o $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit obj -o $(TMPDIR)/foo\n+\trm $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --emit obj=$(TMPDIR)/foo\n \trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n-\t$(RUSTC) foo.rs --emit=link -o $(TMPDIR)/$(call BIN,foo)\n+\t$(RUSTC) foo.rs --emit link -o $(TMPDIR)/$(call BIN,foo)\n+\trm $(TMPDIR)/$(call BIN,foo)\n+\t$(RUSTC) foo.rs --emit link=$(TMPDIR)/$(call BIN,foo)\n \trm $(TMPDIR)/$(call BIN,foo)\n \trm -f $(TMPDIR)/foo.pdb\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n \t$(RUSTC) foo.rs --crate-type=rlib -o $(TMPDIR)/foo\n \trm $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --crate-type=rlib --emit link=$(TMPDIR)/foo\n+\trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n \t$(RUSTC) foo.rs --crate-type=dylib -o $(TMPDIR)/$(call BIN,foo)\n \trm $(TMPDIR)/$(call BIN,foo)\n+\t$(RUSTC) foo.rs --crate-type=dylib --emit link=$(TMPDIR)/$(call BIN,foo)\n+\trm $(TMPDIR)/$(call BIN,foo)\n \trm -f $(TMPDIR)/foo.{exp,lib,pdb}\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n \t$(RUSTC) foo.rs --crate-type=staticlib -o $(TMPDIR)/foo\n \trm $(TMPDIR)/foo\n+\t$(RUSTC) foo.rs --crate-type=staticlib --emit link=$(TMPDIR)/foo\n+\trm $(TMPDIR)/foo\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n \t$(RUSTC) foo.rs --crate-type=bin -o $(TMPDIR)/$(call BIN,foo)\n \trm $(TMPDIR)/$(call BIN,foo)\n+\t$(RUSTC) foo.rs --crate-type=bin --emit link=$(TMPDIR)/$(call BIN,foo)\n+\trm $(TMPDIR)/$(call BIN,foo)\n \trm -f $(TMPDIR)/foo.pdb\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n \n+\t$(RUSTC) foo.rs --emit llvm-ir=$(TMPDIR)/ir \\\n+\t\t\t--emit link \\\n+\t\t\t--crate-type=rlib\n+\trm $(TMPDIR)/ir\n+\trm $(TMPDIR)/libbar.rlib\n+\t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n+\n+\t$(RUSTC) foo.rs --emit asm=$(TMPDIR)/asm \\\n+\t\t\t--emit llvm-ir=$(TMPDIR)/ir \\\n+\t\t\t--emit llvm-bc=$(TMPDIR)/bc \\\n+\t\t        --emit obj=$(TMPDIR)/obj \\\n+\t\t\t--emit link=$(TMPDIR)/link \\\n+\t\t\t--crate-type=staticlib\n+\trm $(TMPDIR)/asm\n+\trm $(TMPDIR)/ir\n+\trm $(TMPDIR)/bc\n+\trm $(TMPDIR)/obj\n+\trm $(TMPDIR)/link\n+\t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ]\n+\n \t$(RUSTC) foo.rs --emit=asm,llvm-ir,llvm-bc,obj,link --crate-type=staticlib\n \trm $(TMPDIR)/bar.ll\n \trm $(TMPDIR)/bar.s"}]}