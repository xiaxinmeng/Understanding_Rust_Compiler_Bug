{"sha": "e6c33e005469909c42264436bd47afd46b9781a3", "node_id": "C_kwDOAAsO6NoAKGU2YzMzZTAwNTQ2OTkwOWM0MjI2NDQzNmJkNDdhZmQ0NmI5NzgxYTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T01:35:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T01:35:57Z"}, "message": "Auto merge of #104696 - matthiaskrgr:rollup-gi1pdb0, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #103396 (Pin::new_unchecked: discuss pinning closure captures)\n - #104416 (Fix using `include_bytes` in pattern position)\n - #104557 (Add a test case for async dyn* traits)\n - #104559 (Split `MacArgs` in two.)\n - #104597 (Probe + better error messsage for `need_migrate_deref_output_trait_object`)\n - #104656 (Move tests)\n - #104657 (Do not check transmute if has non region infer)\n - #104663 (rustdoc: factor out common button CSS)\n - #104666 (Migrate alias search result to CSS variables)\n - #104674 (Make negative_impl and negative_impl_exists take the right types)\n - #104692 (Update test's cfg-if dependency to 1.0)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0aa5b610b3af2546ef6e8d48bde41a6e5cfe84b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aa5b610b3af2546ef6e8d48bde41a6e5cfe84b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6c33e005469909c42264436bd47afd46b9781a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c33e005469909c42264436bd47afd46b9781a3", "html_url": "https://github.com/rust-lang/rust/commit/e6c33e005469909c42264436bd47afd46b9781a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6c33e005469909c42264436bd47afd46b9781a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb850aef96ed1914a82feb1e297a6c9f5b71cae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb850aef96ed1914a82feb1e297a6c9f5b71cae3", "html_url": "https://github.com/rust-lang/rust/commit/eb850aef96ed1914a82feb1e297a6c9f5b71cae3"}, {"sha": "48b10feedbee5b8554fa82696ce5e836933f189c", "url": "https://api.github.com/repos/rust-lang/rust/commits/48b10feedbee5b8554fa82696ce5e836933f189c", "html_url": "https://github.com/rust-lang/rust/commit/48b10feedbee5b8554fa82696ce5e836933f189c"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "b2fe0386f945dd82f8531f7643a6e5c06869f75f", "filename": "clippy_lints/src/crate_in_macro_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6c33e005469909c42264436bd47afd46b9781a3/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c33e005469909c42264436bd47afd46b9781a3/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=e6c33e005469909c42264436bd47afd46b9781a3", "patch": "@@ -55,7 +55,7 @@ impl EarlyLintPass for CrateInMacroDef {\n         if_chain! {\n             if item.attrs.iter().any(is_macro_export);\n             if let ItemKind::MacroDef(macro_def) = &item.kind;\n-            let tts = macro_def.body.inner_tokens();\n+            let tts = macro_def.body.tokens.clone();\n             if let Some(span) = contains_unhygienic_crate_reference(&tts);\n             then {\n                 span_lint_and_sugg("}, {"sha": "87b378bfd1982517ad2d9e53b600c71ff1e5ff14", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e6c33e005469909c42264436bd47afd46b9781a3/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c33e005469909c42264436bd47afd46b9781a3/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=e6c33e005469909c42264436bd47afd46b9781a3", "patch": "@@ -388,7 +388,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n                 && over(li, ri, |l, r| eq_item(l, r, eq_assoc_item_kind))\n         },\n         (MacCall(l), MacCall(r)) => eq_mac_call(l, r),\n-        (MacroDef(l), MacroDef(r)) => l.macro_rules == r.macro_rules && eq_mac_args(&l.body, &r.body),\n+        (MacroDef(l), MacroDef(r)) => l.macro_rules == r.macro_rules && eq_delim_args(&l.body, &r.body),\n         _ => false,\n     }\n }\n@@ -709,26 +709,30 @@ pub fn eq_assoc_constraint(l: &AssocConstraint, r: &AssocConstraint) -> bool {\n }\n \n pub fn eq_mac_call(l: &MacCall, r: &MacCall) -> bool {\n-    eq_path(&l.path, &r.path) && eq_mac_args(&l.args, &r.args)\n+    eq_path(&l.path, &r.path) && eq_delim_args(&l.args, &r.args)\n }\n \n pub fn eq_attr(l: &Attribute, r: &Attribute) -> bool {\n     use AttrKind::*;\n     l.style == r.style\n         && match (&l.kind, &r.kind) {\n             (DocComment(l1, l2), DocComment(r1, r2)) => l1 == r1 && l2 == r2,\n-            (Normal(l), Normal(r)) => eq_path(&l.item.path, &r.item.path) && eq_mac_args(&l.item.args, &r.item.args),\n+            (Normal(l), Normal(r)) => eq_path(&l.item.path, &r.item.path) && eq_attr_args(&l.item.args, &r.item.args),\n             _ => false,\n         }\n }\n \n-pub fn eq_mac_args(l: &MacArgs, r: &MacArgs) -> bool {\n-    use MacArgs::*;\n+pub fn eq_attr_args(l: &AttrArgs, r: &AttrArgs) -> bool {\n+    use AttrArgs::*;\n     match (l, r) {\n         (Empty, Empty) => true,\n-        (Delimited(_, ld, lts), Delimited(_, rd, rts)) => ld == rd && lts.eq_unspanned(rts),\n-        (Eq(_, MacArgsEq::Ast(le)), Eq(_, MacArgsEq::Ast(re))) => eq_expr(le, re),\n-        (Eq(_, MacArgsEq::Hir(ll)), Eq(_, MacArgsEq::Hir(rl))) => ll.kind == rl.kind,\n+        (Delimited(la), Delimited(ra)) => eq_delim_args(la, ra),\n+        (Eq(_, AttrArgsEq::Ast(le)), Eq(_, AttrArgsEq::Ast(re))) => eq_expr(le, re),\n+        (Eq(_, AttrArgsEq::Hir(ll)), Eq(_, AttrArgsEq::Hir(rl))) => ll.kind == rl.kind,\n         _ => false,\n     }\n }\n+\n+pub fn eq_delim_args(l: &DelimArgs, r: &DelimArgs) -> bool {\n+    l.delim == r.delim && l.tokens.eq_unspanned(&r.tokens)\n+}"}]}