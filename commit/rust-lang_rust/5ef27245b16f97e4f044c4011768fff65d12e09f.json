{"sha": "5ef27245b16f97e4f044c4011768fff65d12e09f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZjI3MjQ1YjE2Zjk3ZTRmMDQ0YzQwMTE3NjhmZmY2NWQxMmUwOWY=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-09-10T07:51:07Z"}, "committer": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-09-10T07:51:07Z"}, "message": "Fuzzer: Refactor check_whole_compiler so it doesn't halt the fuzzer when it finds a bug.", "tree": {"sha": "99bac3b14c4973152f763ccfe145650974d62fa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99bac3b14c4973152f763ccfe145650974d62fa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ef27245b16f97e4f044c4011768fff65d12e09f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef27245b16f97e4f044c4011768fff65d12e09f", "html_url": "https://github.com/rust-lang/rust/commit/5ef27245b16f97e4f044c4011768fff65d12e09f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ef27245b16f97e4f044c4011768fff65d12e09f/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e1902f30fcdd5a8dc28c50b1c93604bd7500f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e1902f30fcdd5a8dc28c50b1c93604bd7500f40", "html_url": "https://github.com/rust-lang/rust/commit/8e1902f30fcdd5a8dc28c50b1c93604bd7500f40"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "0d5973a83ec29719eae3b67af807fec28fef01f5", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5ef27245b16f97e4f044c4011768fff65d12e09f/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef27245b16f97e4f044c4011768fff65d12e09f/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=5ef27245b16f97e4f044c4011768fff65d12e09f", "patch": "@@ -166,41 +166,79 @@ fn check_variants_of_ast(crate: &ast::crate, codemap: &codemap::codemap,\n                                                     io::string_reader(\"\"), _,\n                                                     pprust::no_ann()));\n                 check_roundtrip_convergence(str3, 1u);\n-                //check_whole_compiler(str3);\n+                //let label = #fmt(\"buggy_%s_%ud_%ud.rs\", last_part(filename), i, j);\n+                //check_whole_compiler(str3, label);\n             }\n         }\n     }\n }\n \n+fn last_part(filename: &str) -> str {\n+  let ix = str::rindex(filename, 47u8 /* '/' */);\n+  assert ix >= 0;\n+  str::slice(filename, ix as uint + 1u, str::byte_len(filename) - 3u)\n+}\n+\n+tag compile_result { known_bug(str); passed(str); failed(str); }\n+\n // We'd find more bugs if we could take an AST here, but\n // - that would find many \"false positives\" or unimportant bugs\n // - that would be tricky, requiring use of tasks or serialization or randomness.\n // This seems to find plenty of bugs as it is :)\n-fn check_whole_compiler(code: &str) {\n+fn check_whole_compiler(code: &str, suggested_filename: &str) {\n     let filename = \"test.rs\";\n     write_file(filename, code);\n-    let p =\n-        std::run::program_output(\n+    alt check_whole_compiler_inner(filename) {\n+      known_bug(s) {\n+        log_err \"Ignoring known bug: \" + s;\n+      }\n+      failed(s) {\n+        log_err \"check_whole_compiler failure: \" + s;\n+        write_file(suggested_filename, code);\n+        log_err \"Saved as: \" + suggested_filename;\n+      }\n+      passed(_) { }\n+    }\n+}\n+\n+fn check_whole_compiler_inner(filename: &str) -> compile_result {\n+    let p = std::run::program_output(\n             \"/Users/jruderman/code/rust/build/stage1/rustc\",\n             [\"-c\", filename]);\n \n     //log_err #fmt(\"Status: %d\", p.status);\n-    //log_err \"Output: \" + p.out;\n     if p.err != \"\" {\n-        if false {\n+        if contains(p.err, \"May only branch on boolean predicates\") {\n+            known_bug(\"https://github.com/graydon/rust/issues/892\")\n+        } else if contains(p.err, \"(S->getType()->isPointerTy() && \\\"Invalid cast\\\")\") {\n+            known_bug(\"https://github.com/graydon/rust/issues/895\")\n         } else {\n             log_err \"Stderr: \" + p.err;\n-            fail \"Unfamiliar error message\";\n+            failed(\"Unfamiliar error message\")\n         }\n-    } else if p.status == 256 {\n-        if !contains(p.out, \"error:\") {\n-            fail \"Exited with status 256 without a span-error\";\n+    } else if p.status == 6 {\n+        if contains(p.out, \"get_id_ident: can't find item in ext_map\") {\n+            known_bug(\"https://github.com/graydon/rust/issues/876\")\n+        } else if contains(p.out, \"Assertion !cx.terminated failed\") {\n+            known_bug(\"https://github.com/graydon/rust/issues/893 or https://github.com/graydon/rust/issues/894\")\n+        } else if !contains(p.out, \"error:\") {\n+            log_err \"Stdout: \" + p.out;\n+            failed(\"Rejected the input program without a span-error explanation\")\n+        } else {\n+            passed(\"Rejected the input program cleanly\")\n         }\n     } else if p.status == 11 {\n-        log_err \"What is this I don't even\";\n-    } else if p.status != 0 { fail \"Unfamiliar status code\"; }\n+        failed(\"Crashed!?\")\n+    } else if p.status == 0 {\n+        passed(\"Accepted the input program\")\n+    } else {\n+        log_err p.status;\n+        log_err p.out;\n+        failed(\"Unfamiliar status code\")\n+    }\n }\n \n+\n fn parse_and_print(code: &str) -> str {\n     let filename = \"tmp.rs\";\n     let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};"}]}