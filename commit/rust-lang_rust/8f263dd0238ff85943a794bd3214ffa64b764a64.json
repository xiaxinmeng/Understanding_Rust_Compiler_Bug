{"sha": "8f263dd0238ff85943a794bd3214ffa64b764a64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMjYzZGQwMjM4ZmY4NTk0M2E3OTRiZDMyMTRmZmE2NGI3NjRhNjQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-03T16:50:20Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-06T03:37:05Z"}, "message": "rustc: remove some copies", "tree": {"sha": "6460e45bde49a9f3b792d743afbad68ef04507e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6460e45bde49a9f3b792d743afbad68ef04507e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f263dd0238ff85943a794bd3214ffa64b764a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f263dd0238ff85943a794bd3214ffa64b764a64", "html_url": "https://github.com/rust-lang/rust/commit/8f263dd0238ff85943a794bd3214ffa64b764a64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f263dd0238ff85943a794bd3214ffa64b764a64/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60747a24839c50165b0e2ea35592a7cb008f69b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60747a24839c50165b0e2ea35592a7cb008f69b", "html_url": "https://github.com/rust-lang/rust/commit/d60747a24839c50165b0e2ea35592a7cb008f69b"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "0776611342a3bdb114c89ef967a8f2770fadf40f", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f263dd0238ff85943a794bd3214ffa64b764a64/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f263dd0238ff85943a794bd3214ffa64b764a64/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=8f263dd0238ff85943a794bd3214ffa64b764a64", "patch": "@@ -65,7 +65,7 @@ struct cache_entry {\n     metas: @~[@ast::meta_item]\n }\n \n-fn dump_crates(+crate_cache: @mut ~[cache_entry]) {\n+fn dump_crates(crate_cache: @mut ~[cache_entry]) {\n     debug!(\"resolved crates:\");\n     for crate_cache.each |entry| {\n         debug!(\"cnum: %?\", entry.cnum);"}, {"sha": "0fdea7abebf33ebdcbd9723b035734c9ea2aef09", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8f263dd0238ff85943a794bd3214ffa64b764a64/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f263dd0238ff85943a794bd3214ffa64b764a64/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=8f263dd0238ff85943a794bd3214ffa64b764a64", "patch": "@@ -84,11 +84,12 @@ fn libname(cx: Context) -> (~str, ~str) {\n     (str::from_slice(dll_prefix), str::from_slice(dll_suffix))\n }\n \n-fn find_library_crate_aux(cx: Context,\n-                          (prefix, suffix): (~str, ~str),\n-                          filesearch: filesearch::FileSearch) ->\n-   Option<(~str, @~[u8])> {\n-    let crate_name = crate_name_from_metas(/*bad*/copy cx.metas);\n+fn find_library_crate_aux(\n+    cx: Context,\n+    (prefix, suffix): (~str, ~str),\n+    filesearch: filesearch::FileSearch\n+) -> Option<(~str, @~[u8])> {\n+    let crate_name = crate_name_from_metas(cx.metas);\n     let prefix: ~str = prefix + *crate_name + ~\"-\";\n     let suffix: ~str = /*bad*/copy suffix;\n \n@@ -140,7 +141,7 @@ fn find_library_crate_aux(cx: Context,\n     }\n }\n \n-pub fn crate_name_from_metas(+metas: &[@ast::meta_item]) -> @~str {\n+pub fn crate_name_from_metas(metas: &[@ast::meta_item]) -> @~str {\n     let name_items = attr::find_meta_items_by_name(metas, ~\"name\");\n     match vec::last_opt(name_items) {\n         Some(i) => {"}, {"sha": "cf88a0eb90240b3e46595cabdee3c078c50ceffe", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f263dd0238ff85943a794bd3214ffa64b764a64/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f263dd0238ff85943a794bd3214ffa64b764a64/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=8f263dd0238ff85943a794bd3214ffa64b764a64", "patch": "@@ -105,7 +105,7 @@ pub fn encode_inlined_item(ecx: @e::EncodeContext,\n pub fn decode_inlined_item(cdata: @cstore::crate_metadata,\n                            tcx: ty::ctxt,\n                            maps: Maps,\n-                           +path: ast_map::path,\n+                           path: ast_map::path,\n                            par_doc: ebml::Doc)\n                         -> Option<ast::inlined_item> {\n     let dcx = @DecodeContext {"}, {"sha": "f43fd75864903249d2d8c1074e2b09fd0d896d36", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f263dd0238ff85943a794bd3214ffa64b764a64/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f263dd0238ff85943a794bd3214ffa64b764a64/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=8f263dd0238ff85943a794bd3214ffa64b764a64", "patch": "@@ -71,7 +71,7 @@ pub fn check_expr(cx: @MatchCheckCtxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n                                             arm.pats);\n         }\n \n-        check_arms(cx, (/*bad*/copy *arms));\n+        check_arms(cx, *arms);\n         /* Check for exhaustiveness */\n          // Check for empty enum, because is_useful only works on inhabited\n          // types.\n@@ -108,12 +108,12 @@ pub fn check_expr(cx: @MatchCheckCtxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n }\n \n // Check for unreachable patterns\n-pub fn check_arms(cx: @MatchCheckCtxt, arms: ~[arm]) {\n+pub fn check_arms(cx: @MatchCheckCtxt, arms: &[arm]) {\n     let mut seen = ~[];\n     for arms.each |arm| {\n         for arm.pats.each |pat| {\n             let v = ~[*pat];\n-            match is_useful(cx, copy seen, v) {\n+            match is_useful(cx, &seen, v) {\n               not_useful => {\n                 cx.tcx.sess.span_err(pat.span, ~\"unreachable pattern\");\n               }"}]}