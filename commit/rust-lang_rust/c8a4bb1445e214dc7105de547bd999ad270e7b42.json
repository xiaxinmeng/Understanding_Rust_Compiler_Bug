{"sha": "c8a4bb1445e214dc7105de547bd999ad270e7b42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YTRiYjE0NDVlMjE0ZGM3MTA1ZGU1NDdiZDk5OWFkMjcwZTdiNDI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-05-27T19:05:21Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-05-27T19:07:08Z"}, "message": "Upgrade Chalk\n\nChalk newly added TypeName::Never and Array; I implemented the conversion for\nNever, but not Array since that expects a const argument.", "tree": {"sha": "ba8dbd9d0539f68b22d179f3cd9ab3532477fe25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8dbd9d0539f68b22d179f3cd9ab3532477fe25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8a4bb1445e214dc7105de547bd999ad270e7b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a4bb1445e214dc7105de547bd999ad270e7b42", "html_url": "https://github.com/rust-lang/rust/commit/c8a4bb1445e214dc7105de547bd999ad270e7b42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8a4bb1445e214dc7105de547bd999ad270e7b42/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94889b6472b6332436235f6074ebc8ae3ac0ef15", "url": "https://api.github.com/repos/rust-lang/rust/commits/94889b6472b6332436235f6074ebc8ae3ac0ef15", "html_url": "https://github.com/rust-lang/rust/commit/94889b6472b6332436235f6074ebc8ae3ac0ef15"}], "stats": {"total": 157, "additions": 71, "deletions": 86}, "files": [{"sha": "1159d0f1d57d78bb46b89b3d5bd0d08df9ae29fa", "filename": "Cargo.lock", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c8a4bb1445e214dc7105de547bd999ad270e7b42/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c8a4bb1445e214dc7105de547bd999ad270e7b42/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c8a4bb1445e214dc7105de547bd999ad270e7b42", "patch": "@@ -111,10 +111,18 @@ version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n+[[package]]\n+name = \"chalk-base\"\n+version = \"0.10.1-dev\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=5a3b871ca17529ab5aa5787594fabad1634936cb#5a3b871ca17529ab5aa5787594fabad1634936cb\"\n+dependencies = [\n+ \"lazy_static\",\n+]\n+\n [[package]]\n name = \"chalk-derive\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=5a3b871ca17529ab5aa5787594fabad1634936cb#5a3b871ca17529ab5aa5787594fabad1634936cb\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -125,51 +133,32 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=5a3b871ca17529ab5aa5787594fabad1634936cb#5a3b871ca17529ab5aa5787594fabad1634936cb\"\n dependencies = [\n- \"chalk-macros\",\n+ \"chalk-base\",\n+ \"chalk-derive\",\n+ \"chalk-ir\",\n  \"rustc-hash\",\n ]\n \n [[package]]\n name = \"chalk-ir\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=5a3b871ca17529ab5aa5787594fabad1634936cb#5a3b871ca17529ab5aa5787594fabad1634936cb\"\n dependencies = [\n+ \"chalk-base\",\n  \"chalk-derive\",\n- \"chalk-engine\",\n- \"chalk-macros\",\n-]\n-\n-[[package]]\n-name = \"chalk-macros\"\n-version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n-dependencies = [\n- \"lazy_static\",\n-]\n-\n-[[package]]\n-name = \"chalk-rust-ir\"\n-version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n-dependencies = [\n- \"chalk-derive\",\n- \"chalk-engine\",\n- \"chalk-ir\",\n- \"chalk-macros\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n version = \"0.10.1-dev\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=eaab84b394007d1bed15f5470409a6ea02900a96#eaab84b394007d1bed15f5470409a6ea02900a96\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=5a3b871ca17529ab5aa5787594fabad1634936cb#5a3b871ca17529ab5aa5787594fabad1634936cb\"\n dependencies = [\n+ \"chalk-base\",\n  \"chalk-derive\",\n  \"chalk-engine\",\n  \"chalk-ir\",\n- \"chalk-macros\",\n- \"chalk-rust-ir\",\n  \"ena\",\n  \"itertools\",\n  \"petgraph\",\n@@ -1036,7 +1025,6 @@ version = \"0.1.0\"\n dependencies = [\n  \"arrayvec\",\n  \"chalk-ir\",\n- \"chalk-rust-ir\",\n  \"chalk-solve\",\n  \"ena\",\n  \"insta\","}, {"sha": "5278b5a1676c912d2c3064abd58bdbc239f8c833", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a4bb1445e214dc7105de547bd999ad270e7b42/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c8a4bb1445e214dc7105de547bd999ad270e7b42/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c8a4bb1445e214dc7105de547bd999ad270e7b42", "patch": "@@ -22,8 +22,6 @@ opt-level = 0\n opt-level = 0\n [profile.release.package.chalk-derive]\n opt-level = 0\n-[profile.release.package.chalk-macros]\n-opt-level = 0\n [profile.release.package.salsa-macros]\n opt-level = 0\n [profile.release.package.xtask]"}, {"sha": "6afed58a11f0c9f86ba0fc5753c579338e6b2df4", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8a4bb1445e214dc7105de547bd999ad270e7b42/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c8a4bb1445e214dc7105de547bd999ad270e7b42/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=c8a4bb1445e214dc7105de547bd999ad270e7b42", "patch": "@@ -27,9 +27,8 @@ test_utils = { path = \"../test_utils\" }\n \n scoped-tls = \"1\"\n \n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"eaab84b394007d1bed15f5470409a6ea02900a96\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"eaab84b394007d1bed15f5470409a6ea02900a96\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"eaab84b394007d1bed15f5470409a6ea02900a96\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"5a3b871ca17529ab5aa5787594fabad1634936cb\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"5a3b871ca17529ab5aa5787594fabad1634936cb\" }\n \n [dev-dependencies]\n insta = \"0.16.0\""}, {"sha": "61de3cc30c66fcb4870b035e4d0df62586cb0397", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c8a4bb1445e214dc7105de547bd999ad270e7b42/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a4bb1445e214dc7105de547bd999ad270e7b42/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=c8a4bb1445e214dc7105de547bd999ad270e7b42", "patch": "@@ -4,6 +4,7 @@ use std::sync::Arc;\n use log::debug;\n \n use chalk_ir::{fold::shift::Shift, GenericArg, TypeName};\n+use chalk_solve::rust_ir::{self, WellKnownTrait};\n \n use hir_def::{\n     lang_item::{lang_attr, LangItemTarget},\n@@ -16,7 +17,6 @@ use crate::{\n     db::HirDatabase, display::HirDisplay, method_resolution::TyFingerprint, utils::generics,\n     CallableDef, DebruijnIndex, GenericPredicate, Substs, Ty, TypeCtor,\n };\n-use chalk_rust_ir::WellKnownTrait;\n use mapping::{convert_where_clauses, generic_predicate_to_inline_bound, make_binders};\n \n pub use self::interner::*;\n@@ -55,7 +55,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     fn fn_def_datum(\n         &self,\n         fn_def_id: chalk_ir::FnDefId<Interner>,\n-    ) -> Arc<chalk_rust_ir::FnDefDatum<Interner>> {\n+    ) -> Arc<rust_ir::FnDefDatum<Interner>> {\n         self.db.fn_def_datum(self.krate, fn_def_id)\n     }\n \n@@ -112,7 +112,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     }\n     fn well_known_trait_id(\n         &self,\n-        well_known_trait: chalk_rust_ir::WellKnownTrait,\n+        well_known_trait: rust_ir::WellKnownTrait,\n     ) -> Option<chalk_ir::TraitId<Interner>> {\n         let lang_attr = lang_attr_from_well_known_trait(well_known_trait);\n         let lang_items = self.db.crate_lang_items(self.krate);\n@@ -133,13 +133,13 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     fn opaque_ty_data(\n         &self,\n         _id: chalk_ir::OpaqueTyId<Interner>,\n-    ) -> Arc<chalk_rust_ir::OpaqueTyDatum<Interner>> {\n+    ) -> Arc<rust_ir::OpaqueTyDatum<Interner>> {\n         unimplemented!()\n     }\n \n     fn force_impl_for(\n         &self,\n-        _well_known: chalk_rust_ir::WellKnownTrait,\n+        _well_known: rust_ir::WellKnownTrait,\n         _ty: &chalk_ir::TyData<Interner>,\n     ) -> Option<bool> {\n         // this method is mostly for rustc\n@@ -150,6 +150,10 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         // FIXME: implement actual object safety\n         true\n     }\n+\n+    fn hidden_opaque_type(&self, _id: chalk_ir::OpaqueTyId<Interner>) -> chalk_ir::Ty<Interner> {\n+        Ty::Unknown.to_chalk(self.db)\n+    }\n }\n \n pub(crate) fn program_clauses_for_chalk_env_query(\n@@ -188,7 +192,7 @@ pub(crate) fn associated_ty_data_query(\n         .collect();\n \n     let where_clauses = convert_where_clauses(db, type_alias.into(), &bound_vars);\n-    let bound_data = chalk_rust_ir::AssociatedTyDatumBound { bounds, where_clauses };\n+    let bound_data = rust_ir::AssociatedTyDatumBound { bounds, where_clauses };\n     let datum = AssociatedTyDatum {\n         trait_id: trait_.to_chalk(db),\n         id,\n@@ -209,7 +213,7 @@ pub(crate) fn trait_datum_query(\n     debug!(\"trait {:?} = {:?}\", trait_id, trait_data.name);\n     let generic_params = generics(db.upcast(), trait_.into());\n     let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n-    let flags = chalk_rust_ir::TraitFlags {\n+    let flags = rust_ir::TraitFlags {\n         auto: trait_data.auto,\n         upstream: trait_.lookup(db.upcast()).container.module(db.upcast()).krate != krate,\n         non_enumerable: true,\n@@ -221,7 +225,7 @@ pub(crate) fn trait_datum_query(\n     let where_clauses = convert_where_clauses(db, trait_.into(), &bound_vars);\n     let associated_ty_ids =\n         trait_data.associated_types().map(|type_alias| type_alias.to_chalk(db)).collect();\n-    let trait_datum_bound = chalk_rust_ir::TraitDatumBound { where_clauses };\n+    let trait_datum_bound = rust_ir::TraitDatumBound { where_clauses };\n     let well_known =\n         lang_attr(db.upcast(), trait_).and_then(|name| well_known_trait_from_lang_attr(&name));\n     let trait_datum = TraitDatum {\n@@ -271,12 +275,12 @@ pub(crate) fn struct_datum_query(\n             convert_where_clauses(db, generic_def, &bound_vars)\n         })\n         .unwrap_or_else(Vec::new);\n-    let flags = chalk_rust_ir::AdtFlags {\n+    let flags = rust_ir::AdtFlags {\n         upstream,\n         // FIXME set fundamental flag correctly\n         fundamental: false,\n     };\n-    let struct_datum_bound = chalk_rust_ir::AdtDatumBound {\n+    let struct_datum_bound = rust_ir::AdtDatumBound {\n         fields: Vec::new(), // FIXME add fields (only relevant for auto traits)\n         where_clauses,\n     };\n@@ -316,9 +320,9 @@ fn impl_def_datum(\n     let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n     let trait_ = trait_ref.trait_;\n     let impl_type = if impl_id.lookup(db.upcast()).container.module(db.upcast()).krate == krate {\n-        chalk_rust_ir::ImplType::Local\n+        rust_ir::ImplType::Local\n     } else {\n-        chalk_rust_ir::ImplType::External\n+        rust_ir::ImplType::External\n     };\n     let where_clauses = convert_where_clauses(db, impl_id.into(), &bound_vars);\n     let negative = impl_data.is_negative;\n@@ -331,13 +335,9 @@ fn impl_def_datum(\n     );\n     let trait_ref = trait_ref.to_chalk(db);\n \n-    let polarity = if negative {\n-        chalk_rust_ir::Polarity::Negative\n-    } else {\n-        chalk_rust_ir::Polarity::Positive\n-    };\n+    let polarity = if negative { rust_ir::Polarity::Negative } else { rust_ir::Polarity::Positive };\n \n-    let impl_datum_bound = chalk_rust_ir::ImplDatumBound { trait_ref, where_clauses };\n+    let impl_datum_bound = rust_ir::ImplDatumBound { trait_ref, where_clauses };\n     let trait_data = db.trait_data(trait_);\n     let associated_ty_value_ids = impl_data\n         .items\n@@ -395,8 +395,8 @@ fn type_alias_associated_ty_value(\n         .associated_type_by_name(&type_alias_data.name)\n         .expect(\"assoc ty value should not exist\"); // validated when building the impl data as well\n     let ty = db.ty(type_alias.into());\n-    let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty: ty.value.to_chalk(db) };\n-    let value = chalk_rust_ir::AssociatedTyValue {\n+    let value_bound = rust_ir::AssociatedTyValueBound { ty: ty.value.to_chalk(db) };\n+    let value = rust_ir::AssociatedTyValue {\n         impl_id: Impl::ImplDef(impl_id).to_chalk(db),\n         associated_ty_id: assoc_ty.to_chalk(db),\n         value: make_binders(value_bound, ty.num_binders),\n@@ -414,7 +414,7 @@ pub(crate) fn fn_def_datum_query(\n     let sig = db.callable_item_signature(callable_def);\n     let bound_vars = Substs::bound_vars(&generic_params, DebruijnIndex::INNERMOST);\n     let where_clauses = convert_where_clauses(db, callable_def.into(), &bound_vars);\n-    let bound = chalk_rust_ir::FnDefDatumBound {\n+    let bound = rust_ir::FnDefDatumBound {\n         // Note: Chalk doesn't actually use this information yet as far as I am aware, but we provide it anyway\n         argument_types: sig.value.params().iter().map(|ty| ty.clone().to_chalk(db)).collect(),\n         return_type: sig.value.ret().clone().to_chalk(db),\n@@ -460,14 +460,14 @@ impl From<crate::traits::GlobalImplId> for ImplId {\n     }\n }\n \n-impl From<chalk_rust_ir::AssociatedTyValueId<Interner>> for crate::traits::AssocTyValueId {\n-    fn from(id: chalk_rust_ir::AssociatedTyValueId<Interner>) -> Self {\n+impl From<rust_ir::AssociatedTyValueId<Interner>> for crate::traits::AssocTyValueId {\n+    fn from(id: rust_ir::AssociatedTyValueId<Interner>) -> Self {\n         Self::from_intern_id(id.0)\n     }\n }\n \n-impl From<crate::traits::AssocTyValueId> for chalk_rust_ir::AssociatedTyValueId<Interner> {\n+impl From<crate::traits::AssocTyValueId> for rust_ir::AssociatedTyValueId<Interner> {\n     fn from(assoc_ty_value_id: crate::traits::AssocTyValueId) -> Self {\n-        chalk_rust_ir::AssociatedTyValueId(assoc_ty_value_id.as_intern_id())\n+        rust_ir::AssociatedTyValueId(assoc_ty_value_id.as_intern_id())\n     }\n }"}, {"sha": "e27074ba6fad0cb1c592fda8cd233c331b80af48", "filename": "crates/ra_hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8a4bb1445e214dc7105de547bd999ad270e7b42/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a4bb1445e214dc7105de547bd999ad270e7b42/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=c8a4bb1445e214dc7105de547bd999ad270e7b42", "patch": "@@ -11,17 +11,17 @@ use std::{fmt, sync::Arc};\n pub struct Interner;\n \n pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n-pub type AssociatedTyDatum = chalk_rust_ir::AssociatedTyDatum<Interner>;\n+pub type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n pub type TraitId = chalk_ir::TraitId<Interner>;\n-pub type TraitDatum = chalk_rust_ir::TraitDatum<Interner>;\n+pub type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n pub type AdtId = chalk_ir::AdtId<Interner>;\n-pub type StructDatum = chalk_rust_ir::AdtDatum<Interner>;\n+pub type StructDatum = chalk_solve::rust_ir::AdtDatum<Interner>;\n pub type ImplId = chalk_ir::ImplId<Interner>;\n-pub type ImplDatum = chalk_rust_ir::ImplDatum<Interner>;\n-pub type AssociatedTyValueId = chalk_rust_ir::AssociatedTyValueId<Interner>;\n-pub type AssociatedTyValue = chalk_rust_ir::AssociatedTyValue<Interner>;\n+pub type ImplDatum = chalk_solve::rust_ir::ImplDatum<Interner>;\n+pub type AssociatedTyValueId = chalk_solve::rust_ir::AssociatedTyValueId<Interner>;\n+pub type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Interner>;\n pub type FnDefId = chalk_ir::FnDefId<Interner>;\n-pub type FnDefDatum = chalk_rust_ir::FnDefDatum<Interner>;\n+pub type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n \n impl chalk_ir::interner::Interner for Interner {\n     type InternedType = Box<chalk_ir::TyData<Self>>; // FIXME use Arc?"}, {"sha": "5f6daf842be696c25a34001827380f3ec4536654", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c8a4bb1445e214dc7105de547bd999ad270e7b42/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a4bb1445e214dc7105de547bd999ad270e7b42/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=c8a4bb1445e214dc7105de547bd999ad270e7b42", "patch": "@@ -7,6 +7,7 @@ use chalk_ir::{\n     cast::Cast, fold::shift::Shift, interner::HasInterner, PlaceholderIndex, Scalar, TypeName,\n     UniverseIndex,\n };\n+use chalk_solve::rust_ir;\n \n use hir_def::{type_ref::Mutability, AssocContainerId, GenericDefId, Lookup, TypeAliasId};\n use ra_db::salsa::InternKey;\n@@ -106,7 +107,7 @@ impl ToChalk for Ty {\n                 })\n             }\n             chalk_ir::TyData::BoundVar(idx) => Ty::Bound(idx),\n-            chalk_ir::TyData::InferenceVar(_iv) => Ty::Unknown,\n+            chalk_ir::TyData::InferenceVar(_iv, _kind) => Ty::Unknown,\n             chalk_ir::TyData::Dyn(where_clauses) => {\n                 assert_eq!(where_clauses.bounds.binders.len(&Interner), 1);\n                 let predicates = where_clauses\n@@ -232,12 +233,13 @@ impl ToChalk for TypeCtor {\n                 let id = callable_def.to_chalk(db);\n                 TypeName::FnDef(id)\n             }\n+            TypeCtor::Never => TypeName::Never,\n+\n             TypeCtor::Int(Uncertain::Unknown)\n             | TypeCtor::Float(Uncertain::Unknown)\n             | TypeCtor::Adt(_)\n             | TypeCtor::Array\n             | TypeCtor::FnPtr { .. }\n-            | TypeCtor::Never\n             | TypeCtor::Closure { .. } => {\n                 // other TypeCtors get interned and turned into a chalk StructId\n                 let struct_id = db.intern_type_ctor(self).into();\n@@ -273,13 +275,14 @@ impl ToChalk for TypeCtor {\n             TypeName::Slice => TypeCtor::Slice,\n             TypeName::Ref(mutability) => TypeCtor::Ref(from_chalk(db, mutability)),\n             TypeName::Str => TypeCtor::Str,\n+            TypeName::Never => TypeCtor::Never,\n \n             TypeName::FnDef(fn_def_id) => {\n                 let callable_def = from_chalk(db, fn_def_id);\n                 TypeCtor::FnDef(callable_def)\n             }\n \n-            TypeName::Error => {\n+            TypeName::Array | TypeName::Error => {\n                 // this should not be reached, since we don't represent TypeName::Error with TypeCtor\n                 unreachable!()\n             }\n@@ -508,7 +511,7 @@ where\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Canonical<T::Chalk> {\n         let parameter = chalk_ir::CanonicalVarKind::new(\n-            chalk_ir::VariableKind::Ty,\n+            chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General),\n             chalk_ir::UniverseIndex::ROOT,\n         );\n         let value = self.value.to_chalk(db);\n@@ -579,17 +582,17 @@ impl ToChalk for builtin::BuiltinImplData {\n     type Chalk = ImplDatum;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> ImplDatum {\n-        let impl_type = chalk_rust_ir::ImplType::External;\n+        let impl_type = rust_ir::ImplType::External;\n         let where_clauses = self.where_clauses.into_iter().map(|w| w.to_chalk(db)).collect();\n \n         let impl_datum_bound =\n-            chalk_rust_ir::ImplDatumBound { trait_ref: self.trait_ref.to_chalk(db), where_clauses };\n+            rust_ir::ImplDatumBound { trait_ref: self.trait_ref.to_chalk(db), where_clauses };\n         let associated_ty_value_ids =\n             self.assoc_ty_values.into_iter().map(|v| v.to_chalk(db)).collect();\n-        chalk_rust_ir::ImplDatum {\n+        rust_ir::ImplDatum {\n             binders: make_binders(impl_datum_bound, self.num_vars),\n             impl_type,\n-            polarity: chalk_rust_ir::Polarity::Positive,\n+            polarity: rust_ir::Polarity::Positive,\n             associated_ty_value_ids,\n         }\n     }\n@@ -604,9 +607,9 @@ impl ToChalk for builtin::BuiltinImplAssocTyValueData {\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> AssociatedTyValue {\n         let ty = self.value.to_chalk(db);\n-        let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty };\n+        let value_bound = rust_ir::AssociatedTyValueBound { ty };\n \n-        chalk_rust_ir::AssociatedTyValue {\n+        rust_ir::AssociatedTyValue {\n             associated_ty_id: self.assoc_ty_id.to_chalk(db),\n             impl_id: self.impl_.to_chalk(db),\n             value: make_binders(value_bound, self.num_vars),\n@@ -628,7 +631,7 @@ where\n     chalk_ir::Binders::new(\n         chalk_ir::VariableKinds::from(\n             &Interner,\n-            std::iter::repeat(chalk_ir::VariableKind::Ty).take(num_vars),\n+            std::iter::repeat(chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General)).take(num_vars),\n         ),\n         value,\n     )\n@@ -655,7 +658,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n     db: &dyn HirDatabase,\n     pred: &GenericPredicate,\n     self_ty: &Ty,\n-) -> Option<chalk_rust_ir::InlineBound<Interner>> {\n+) -> Option<rust_ir::InlineBound<Interner>> {\n     // An InlineBound is like a GenericPredicate, except the self type is left out.\n     // We don't have a special type for this, but Chalk does.\n     match pred {\n@@ -670,8 +673,8 @@ pub(super) fn generic_predicate_to_inline_bound(\n                 .map(|ty| ty.clone().to_chalk(db).cast(&Interner))\n                 .collect();\n             let trait_bound =\n-                chalk_rust_ir::TraitBound { trait_id: trait_ref.trait_.to_chalk(db), args_no_self };\n-            Some(chalk_rust_ir::InlineBound::TraitBound(trait_bound))\n+                rust_ir::TraitBound { trait_id: trait_ref.trait_.to_chalk(db), args_no_self };\n+            Some(rust_ir::InlineBound::TraitBound(trait_bound))\n         }\n         GenericPredicate::Projection(proj) => {\n             if &proj.projection_ty.parameters[0] != self_ty {\n@@ -685,16 +688,13 @@ pub(super) fn generic_predicate_to_inline_bound(\n                 .iter()\n                 .map(|ty| ty.clone().to_chalk(db).cast(&Interner))\n                 .collect();\n-            let alias_eq_bound = chalk_rust_ir::AliasEqBound {\n+            let alias_eq_bound = rust_ir::AliasEqBound {\n                 value: proj.ty.clone().to_chalk(db),\n-                trait_bound: chalk_rust_ir::TraitBound {\n-                    trait_id: trait_.to_chalk(db),\n-                    args_no_self,\n-                },\n+                trait_bound: rust_ir::TraitBound { trait_id: trait_.to_chalk(db), args_no_self },\n                 associated_ty_id: proj.projection_ty.associated_ty.to_chalk(db),\n                 parameters: Vec::new(), // FIXME we don't support generic associated types yet\n             };\n-            Some(chalk_rust_ir::InlineBound::AliasEqBound(alias_eq_bound))\n+            Some(rust_ir::InlineBound::AliasEqBound(alias_eq_bound))\n         }\n         GenericPredicate::Error => None,\n     }"}]}