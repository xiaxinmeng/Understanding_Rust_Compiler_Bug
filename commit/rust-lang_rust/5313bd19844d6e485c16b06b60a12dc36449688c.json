{"sha": "5313bd19844d6e485c16b06b60a12dc36449688c", "node_id": "C_kwDOAAsO6NoAKDUzMTNiZDE5ODQ0ZDZlNDg1YzE2YjA2YjYwYTEyZGMzNjQ0OTY4OGM", "commit": {"author": {"name": "OleStrohm", "email": "strohm99@gmail.com", "date": "2022-09-12T17:45:51Z"}, "committer": {"name": "OleStrohm", "email": "strohm99@gmail.com", "date": "2022-09-12T19:20:45Z"}, "message": "Cleaned up code based on feedback", "tree": {"sha": "e589a8e0b9f8b1419575b9e494f174409a110e18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e589a8e0b9f8b1419575b9e494f174409a110e18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5313bd19844d6e485c16b06b60a12dc36449688c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5313bd19844d6e485c16b06b60a12dc36449688c", "html_url": "https://github.com/rust-lang/rust/commit/5313bd19844d6e485c16b06b60a12dc36449688c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5313bd19844d6e485c16b06b60a12dc36449688c/comments", "author": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "301b8894ead191cb33e8aa72ce74f51332fee274", "url": "https://api.github.com/repos/rust-lang/rust/commits/301b8894ead191cb33e8aa72ce74f51332fee274", "html_url": "https://github.com/rust-lang/rust/commit/301b8894ead191cb33e8aa72ce74f51332fee274"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "965bf3f2c5b84fdad49e7e6ddc2f6113a08643c5", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5313bd19844d6e485c16b06b60a12dc36449688c/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5313bd19844d6e485c16b06b60a12dc36449688c/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=5313bd19844d6e485c16b06b60a12dc36449688c", "patch": "@@ -166,12 +166,11 @@ fn get_name(variant: EnumVariantId, ctx: &mut ConstEvalCtx<'_>) -> String {\n pub fn eval_const(\n     expr_id: ExprId,\n     ctx: &mut ConstEvalCtx<'_>,\n-    variant: Option<EnumVariantId>,\n ) -> Result<ComputedExpr, ConstEvalError> {\n     let expr = &ctx.exprs[expr_id];\n     match expr {\n-        Expr::Missing => match variant {\n-            Some(variant) => {\n+        Expr::Missing => match ctx.owner {\n+            DefWithBodyId::VariantId(variant) => {\n                 let prev_idx: u32 = variant.local_id.into_raw().into();\n                 let prev_idx = prev_idx.checked_sub(1).map(|idx| Idx::from_raw(RawIdx::from(idx)));\n                 let value = match prev_idx {\n@@ -198,7 +197,7 @@ pub fn eval_const(\n         Expr::Literal(l) => Ok(ComputedExpr::Literal(l.clone())),\n         &Expr::UnaryOp { expr, op } => {\n             let ty = &ctx.expr_ty(expr);\n-            let ev = eval_const(expr, ctx, None)?;\n+            let ev = eval_const(expr, ctx)?;\n             match op {\n                 hir_def::expr::UnaryOp::Deref => Err(ConstEvalError::NotSupported(\"deref\")),\n                 hir_def::expr::UnaryOp::Not => {\n@@ -254,8 +253,8 @@ pub fn eval_const(\n         }\n         &Expr::BinaryOp { lhs, rhs, op } => {\n             let ty = &ctx.expr_ty(lhs);\n-            let lhs = eval_const(lhs, ctx, None)?;\n-            let rhs = eval_const(rhs, ctx, None)?;\n+            let lhs = eval_const(lhs, ctx)?;\n+            let rhs = eval_const(rhs, ctx)?;\n             let op = op.ok_or(ConstEvalError::IncompleteExpr)?;\n             let v1 = match lhs {\n                 ComputedExpr::Literal(Literal::Int(v, _)) => v,\n@@ -316,7 +315,7 @@ pub fn eval_const(\n                             }\n                         };\n                         let value = match initializer {\n-                            Some(x) => eval_const(x, ctx, None)?,\n+                            Some(x) => eval_const(x, ctx)?,\n                             None => continue,\n                         };\n                         if !prev_values.contains_key(&pat_id) {\n@@ -332,7 +331,7 @@ pub fn eval_const(\n                 }\n             }\n             let r = match tail {\n-                &Some(x) => eval_const(x, ctx, None),\n+                &Some(x) => eval_const(x, ctx),\n                 None => Ok(ComputedExpr::Tuple(Box::new([]))),\n             };\n             // clean up local data, so caller will receive the exact map that passed to us\n@@ -390,7 +389,7 @@ pub fn eval_const(\n                 _ => Err(ConstEvalError::NotSupported(\"path that are not const or local\")),\n             }\n         }\n-        &Expr::Cast { expr, .. } => match eval_const(expr, ctx, None)? {\n+        &Expr::Cast { expr, .. } => match eval_const(expr, ctx)? {\n             ComputedExpr::Enum(_, _, lit) => Ok(ComputedExpr::Literal(lit)),\n             _ => Err(ConstEvalError::NotSupported(\"Can't cast these types\")),\n         },\n@@ -489,7 +488,6 @@ pub(crate) fn const_eval_query(\n             local_data: HashMap::default(),\n             infer,\n         },\n-        None,\n     );\n     result\n }\n@@ -511,7 +509,6 @@ pub(crate) fn const_eval_query_variant(\n             local_data: HashMap::default(),\n             infer,\n         },\n-        Some(variant_id),\n     )\n }\n \n@@ -538,7 +535,7 @@ pub(crate) fn eval_to_const<'a>(\n         local_data: HashMap::default(),\n         infer: &ctx.result,\n     };\n-    let computed_expr = eval_const(expr, &mut ctx, None);\n+    let computed_expr = eval_const(expr, &mut ctx);\n     let const_scalar = match computed_expr {\n         Ok(ComputedExpr::Literal(literal)) => literal.into(),\n         _ => ConstScalar::Unknown,"}, {"sha": "6bcbe62efa883cd28e461980cdbb25086336129f", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5313bd19844d6e485c16b06b60a12dc36449688c/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5313bd19844d6e485c16b06b60a12dc36449688c/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=5313bd19844d6e485c16b06b60a12dc36449688c", "patch": "@@ -954,7 +954,7 @@ impl Enum {\n     }\n \n     pub fn is_data_carrying(self, db: &dyn HirDatabase) -> bool {\n-        self.variants(db).iter().all(|v| matches!(v.kind(db), StructKind::Unit))\n+        self.variants(db).iter().any(|v| !matches!(v.kind(db), StructKind::Unit))\n     }\n }\n \n@@ -966,8 +966,8 @@ impl HasVisibility for Enum {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Variant {\n-    pub parent: Enum,\n-    pub id: LocalEnumVariantId,\n+    pub(crate) parent: Enum,\n+    pub(crate) id: LocalEnumVariantId,\n }\n \n impl Variant {"}, {"sha": "4c429202e6f9a34aec52298d5739f1fe50955c0d", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5313bd19844d6e485c16b06b60a12dc36449688c/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5313bd19844d6e485c16b06b60a12dc36449688c/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=5313bd19844d6e485c16b06b60a12dc36449688c", "patch": "@@ -349,7 +349,7 @@ pub(super) fn definition(\n         Definition::Function(it) => label_and_docs(db, it),\n         Definition::Adt(it) => label_and_docs(db, it),\n         Definition::Variant(it) => label_value_and_docs(db, it, |&it| {\n-            if it.parent.is_data_carrying(db) {\n+            if !it.parent_enum(db).is_data_carrying(db) {\n                 match it.eval(db) {\n                     Ok(x) => Some(format!(\"{}\", x)),\n                     Err(_) => it.value(db).map(|x| format!(\"{:?}\", x)),"}]}