{"sha": "181184a350046a460441209fd34821c2c796b066", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MTE4NGEzNTAwNDZhNDYwNDQxMjA5ZmQzNDgyMWMyYzc5NmIwNjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T20:28:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T20:28:37Z"}, "message": "minor: use minicore", "tree": {"sha": "14e572eacf0feffd45250156c373d0148b78ee93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e572eacf0feffd45250156c373d0148b78ee93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/181184a350046a460441209fd34821c2c796b066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/181184a350046a460441209fd34821c2c796b066", "html_url": "https://github.com/rust-lang/rust/commit/181184a350046a460441209fd34821c2c796b066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/181184a350046a460441209fd34821c2c796b066/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89a0e58393de0ae39fc1f33a33cec87bc084a9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/89a0e58393de0ae39fc1f33a33cec87bc084a9f1", "html_url": "https://github.com/rust-lang/rust/commit/89a0e58393de0ae39fc1f33a33cec87bc084a9f1"}], "stats": {"total": 119, "additions": 43, "deletions": 76}, "files": [{"sha": "f37aa0d53c6a95d6718b88cefa734da11de89a73", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 18, "deletions": 48, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/181184a350046a460441209fd34821c2c796b066/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181184a350046a460441209fd34821c2c796b066/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=181184a350046a460441209fd34821c2c796b066", "patch": "@@ -262,28 +262,23 @@ impl VariantData {\n         check_assist(\n             replace_if_let_with_match,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n+//- minicore: option\n fn foo(x: Option<i32>) {\n     $0if let Some(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"none\")\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n fn foo(x: Option<i32>) {\n     match x {\n         Some(x) => println!(\"{}\", x),\n         None => println!(\"none\"),\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n \n@@ -292,28 +287,23 @@ fn foo(x: Option<i32>) {\n         check_assist(\n             replace_if_let_with_match,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n+//- minicore: option\n fn foo(x: Option<i32>) {\n     $0if let None = x {\n         println!(\"none\")\n     } else {\n         println!(\"some\")\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n fn foo(x: Option<i32>) {\n     match x {\n         None => println!(\"none\"),\n         Some(_) => println!(\"some\"),\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n \n@@ -322,28 +312,23 @@ fn foo(x: Option<i32>) {\n         check_assist(\n             replace_if_let_with_match,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n+//- minicore: result\n fn foo(x: Result<i32, ()>) {\n     $0if let Ok(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"none\")\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n fn foo(x: Result<i32, ()>) {\n     match x {\n         Ok(x) => println!(\"{}\", x),\n         Err(_) => println!(\"none\"),\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n \n@@ -352,28 +337,23 @@ fn foo(x: Result<i32, ()>) {\n         check_assist(\n             replace_if_let_with_match,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n+//- minicore: result\n fn foo(x: Result<i32, ()>) {\n     $0if let Err(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"ok\")\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n fn foo(x: Result<i32, ()>) {\n     match x {\n         Err(x) => println!(\"{}\", x),\n         Ok(_) => println!(\"ok\"),\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n \n@@ -488,28 +468,23 @@ impl VariantData {\n         check_assist(\n             replace_match_with_if_let,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n+//- minicore: option\n fn foo(x: Option<i32>) {\n     $0match x {\n         Some(x) => println!(\"{}\", x),\n         None => println!(\"none\"),\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n fn foo(x: Option<i32>) {\n     if let Some(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"none\")\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n \n@@ -518,28 +493,23 @@ fn foo(x: Option<i32>) {\n         check_assist(\n             replace_match_with_if_let,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n+//- minicore: result\n fn foo(x: Result<i32, ()>) {\n     $0match x {\n         Ok(x) => println!(\"{}\", x),\n         Err(_) => println!(\"none\"),\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n fn foo(x: Result<i32, ()>) {\n     if let Ok(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"none\")\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n "}, {"sha": "7e57353c646629ee378e587597cff4aae245171a", "filename": "crates/ide_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/181184a350046a460441209fd34821c2c796b066/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/181184a350046a460441209fd34821c2c796b066/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=181184a350046a460441209fd34821c2c796b066", "patch": "@@ -97,92 +97,89 @@ mod tests {\n     fn test_replace_result_unwrap_with_match() {\n         check_assist(\n             replace_unwrap_with_match,\n-            r\"\n-enum Result<T, E> { Ok(T), Err(E) }\n+            r#\"\n+//- minicore: result\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x: Result<i32, i32> = Result::Ok(92);\n+    let x: Result<i32, i32> = Ok(92);\n     let y = i(x).$0unwrap();\n }\n-            \",\n-            r\"\n-enum Result<T, E> { Ok(T), Err(E) }\n+\"#,\n+            r#\"\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x: Result<i32, i32> = Result::Ok(92);\n+    let x: Result<i32, i32> = Ok(92);\n     let y = match i(x) {\n         Ok(it) => it,\n         $0_ => unreachable!(),\n     };\n }\n-            \",\n+\"#,\n         )\n     }\n \n     #[test]\n     fn test_replace_option_unwrap_with_match() {\n         check_assist(\n             replace_unwrap_with_match,\n-            r\"\n-enum Option<T> { Some(T), None }\n+            r#\"\n+//- minicore: option\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x = Option::Some(92);\n+    let x = Some(92);\n     let y = i(x).$0unwrap();\n }\n-            \",\n-            r\"\n-enum Option<T> { Some(T), None }\n+\"#,\n+            r#\"\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x = Option::Some(92);\n+    let x = Some(92);\n     let y = match i(x) {\n         Some(it) => it,\n         $0_ => unreachable!(),\n     };\n }\n-            \",\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_replace_result_unwrap_with_match_chaining() {\n         check_assist(\n             replace_unwrap_with_match,\n-            r\"\n-enum Result<T, E> { Ok(T), Err(E) }\n+            r#\"\n+//- minicore: result\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x: Result<i32, i32> = Result::Ok(92);\n+    let x: Result<i32, i32> = Ok(92);\n     let y = i(x).$0unwrap().count_zeroes();\n }\n-            \",\n-            r\"\n-enum Result<T, E> { Ok(T), Err(E) }\n+\"#,\n+            r#\"\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x: Result<i32, i32> = Result::Ok(92);\n+    let x: Result<i32, i32> = Ok(92);\n     let y = match i(x) {\n         Ok(it) => it,\n         $0_ => unreachable!(),\n     }.count_zeroes();\n }\n-            \",\n+\"#,\n         )\n     }\n \n     #[test]\n     fn replace_unwrap_with_match_target() {\n         check_assist_target(\n             replace_unwrap_with_match,\n-            r\"\n-enum Option<T> { Some(T), None }\n+            r#\"\n+//- minicore: option\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x = Option::Some(92);\n+    let x = Some(92);\n     let y = i(x).$0unwrap();\n }\n-            \",\n+\"#,\n             r\"i(x).unwrap()\",\n         );\n     }"}]}