{"sha": "b6ac5a3cebcb6b4cc23bf5e883899e075774781f", "node_id": "C_kwDOAAsO6NoAKGI2YWM1YTNjZWJjYjZiNGNjMjNiZjVlODgzODk5ZTA3NTc3NDc4MWY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T17:42:29Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T19:00:32Z"}, "message": "Allow specifying where build artifacts should be written to", "tree": {"sha": "749662ee1faeeb6dbbc8127bb365270461224cc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/749662ee1faeeb6dbbc8127bb365270461224cc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6ac5a3cebcb6b4cc23bf5e883899e075774781f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ac5a3cebcb6b4cc23bf5e883899e075774781f", "html_url": "https://github.com/rust-lang/rust/commit/b6ac5a3cebcb6b4cc23bf5e883899e075774781f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6ac5a3cebcb6b4cc23bf5e883899e075774781f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "702a293776e0ddc76c12dea6ffb30c3900124deb", "url": "https://api.github.com/repos/rust-lang/rust/commits/702a293776e0ddc76c12dea6ffb30c3900124deb", "html_url": "https://github.com/rust-lang/rust/commit/702a293776e0ddc76c12dea6ffb30c3900124deb"}], "stats": {"total": 94, "additions": 63, "deletions": 31}, "files": [{"sha": "1afc9a55c73b5318bbc9ed006899c4f5ab3647c3", "filename": "build_system/mod.rs", "status": "modified", "additions": 62, "deletions": 30, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b6ac5a3cebcb6b4cc23bf5e883899e075774781f/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6ac5a3cebcb6b4cc23bf5e883899e075774781f/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=b6ac5a3cebcb6b4cc23bf5e883899e075774781f", "patch": "@@ -1,4 +1,5 @@\n use std::env;\n+use std::path::PathBuf;\n use std::process;\n \n use self::utils::is_ci;\n@@ -13,11 +14,31 @@ mod rustc_info;\n mod tests;\n mod utils;\n \n+const USAGE: &str = r#\"The build system of cg_clif.\n+\n+USAGE:\n+    ./y.rs prepare [--out-dir DIR]\n+    ./y.rs build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n+    ./y.rs test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n+\n+OPTIONS:\n+    --sysroot none|clif|llvm\n+            Which sysroot libraries to use:\n+            `none` will not include any standard library in the sysroot.\n+            `clif` will build the standard library using Cranelift.\n+            `llvm` will use the pre-compiled standard library of rustc which is compiled with LLVM.\n+\n+    --out-dir DIR\n+            Specify the directory in which the download, build and dist directories are stored.\n+            By default this is the working directory.\n+\n+    --no-unstable-features\n+            fSome features are not yet ready for production usage. This option will disable these\n+            features. This includes the JIT mode and inline assembly support.\n+\"#;\n+\n fn usage() {\n-    eprintln!(\"Usage:\");\n-    eprintln!(\"  ./y.rs prepare\");\n-    eprintln!(\"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--no-unstable-features]\");\n-    eprintln!(\"  ./y.rs test [--debug] [--sysroot none|clif|llvm] [--no-unstable-features]\");\n+    eprintln!(\"{USAGE}\");\n }\n \n macro_rules! arg_error {\n@@ -30,6 +51,7 @@ macro_rules! arg_error {\n \n #[derive(PartialEq, Debug)]\n enum Command {\n+    Prepare,\n     Build,\n     Test,\n }\n@@ -45,39 +67,14 @@ pub fn main() {\n     env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n     env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n \n-    let current_dir = std::env::current_dir().unwrap();\n-    let dirs = path::Dirs {\n-        source_dir: current_dir.clone(),\n-        download_dir: current_dir.join(\"download\"),\n-        build_dir: current_dir.join(\"build\"),\n-        dist_dir: current_dir.join(\"dist\"),\n-    };\n-\n-    path::RelPath::BUILD.ensure_exists(&dirs);\n-\n-    {\n-        // Make sure we always explicitly specify the target dir\n-        let target =\n-            path::RelPath::BUILD.join(\"target_dir_should_be_set_explicitly\").to_path(&dirs);\n-        env::set_var(\"CARGO_TARGET_DIR\", &target);\n-        let _ = std::fs::remove_file(&target);\n-        std::fs::File::create(target).unwrap();\n-    }\n-\n     if is_ci() {\n         // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n         env::set_var(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n     }\n \n     let mut args = env::args().skip(1);\n     let command = match args.next().as_deref() {\n-        Some(\"prepare\") => {\n-            if args.next().is_some() {\n-                arg_error!(\"./y.rs prepare doesn't expect arguments\");\n-            }\n-            prepare::prepare(&dirs);\n-            process::exit(0);\n-        }\n+        Some(\"prepare\") => Command::Prepare,\n         Some(\"build\") => Command::Build,\n         Some(\"test\") => Command::Test,\n         Some(flag) if flag.starts_with('-') => arg_error!(\"Expected command found flag {}\", flag),\n@@ -88,11 +85,17 @@ pub fn main() {\n         }\n     };\n \n+    let mut out_dir = PathBuf::from(\".\");\n     let mut channel = \"release\";\n     let mut sysroot_kind = SysrootKind::Clif;\n     let mut use_unstable_features = true;\n     while let Some(arg) = args.next().as_deref() {\n         match arg {\n+            \"--out-dir\" => {\n+                out_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--out-dir requires argument\");\n+                }))\n+            }\n             \"--debug\" => channel = \"debug\",\n             \"--sysroot\" => {\n                 sysroot_kind = match args.next().as_deref() {\n@@ -128,9 +131,38 @@ pub fn main() {\n         host_triple.clone()\n     };\n \n+    // FIXME allow changing the location of these dirs using cli arguments\n+    let current_dir = std::env::current_dir().unwrap();\n+    out_dir = current_dir.join(out_dir);\n+    let dirs = path::Dirs {\n+        source_dir: current_dir.clone(),\n+        download_dir: out_dir.join(\"download\"),\n+        build_dir: out_dir.join(\"build\"),\n+        dist_dir: out_dir.join(\"dist\"),\n+    };\n+\n+    path::RelPath::BUILD.ensure_exists(&dirs);\n+\n+    {\n+        // Make sure we always explicitly specify the target dir\n+        let target =\n+            path::RelPath::BUILD.join(\"target_dir_should_be_set_explicitly\").to_path(&dirs);\n+        env::set_var(\"CARGO_TARGET_DIR\", &target);\n+        let _ = std::fs::remove_file(&target);\n+        std::fs::File::create(target).unwrap();\n+    }\n+\n+    if command == Command::Prepare {\n+        prepare::prepare(&dirs);\n+        process::exit(0);\n+    }\n+\n     let cg_clif_dylib =\n         build_backend::build_backend(&dirs, channel, &host_triple, use_unstable_features);\n     match command {\n+        Command::Prepare => {\n+            // Handled above\n+        }\n         Command::Test => {\n             tests::run_tests(\n                 &dirs,"}, {"sha": "13e7784539d5a9b9cdb3c81dd7f548afcb0c418b", "filename": "test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6ac5a3cebcb6b4cc23bf5e883899e075774781f/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b6ac5a3cebcb6b4cc23bf5e883899e075774781f/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=b6ac5a3cebcb6b4cc23bf5e883899e075774781f", "patch": "@@ -1,2 +1,2 @@\n #!/usr/bin/env bash\n-exec ./y.rs test\n+exec ./y.rs test \"$@\""}]}