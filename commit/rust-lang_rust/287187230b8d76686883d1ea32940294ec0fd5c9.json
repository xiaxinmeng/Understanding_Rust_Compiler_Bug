{"sha": "287187230b8d76686883d1ea32940294ec0fd5c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NzE4NzIzMGI4ZDc2Njg2ODgzZDFlYTMyOTQwMjk0ZWMwZmQ1Yzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-25T03:42:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-25T03:42:46Z"}, "message": "Auto merge of #53693 - scottmcm:marker-trait-attribute, r=nikomatsakis\n\nSupport an explicit annotation for marker traits\n\nFrom the tracking issue for rust-lang/rfcs#1268:\n> It seems obvious that we should make a `#[marker]` annotation. ~ https://github.com/rust-lang/rust/issues/29864#issuecomment-368959441\n\nThis PR allows you to put `#[marker]` on a trait, at which point:\n- [x] The trait must not have any items ~~All of the trait's items must have defaults~~\n- [x] Any impl of the trait must be empty (not override any items)\n- [x] But impls of the trait are allowed to overlap\n\nr? @nikomatsakis", "tree": {"sha": "dd5d8586b56ea56db9e8aca684638098058cc3d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd5d8586b56ea56db9e8aca684638098058cc3d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/287187230b8d76686883d1ea32940294ec0fd5c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/287187230b8d76686883d1ea32940294ec0fd5c9", "html_url": "https://github.com/rust-lang/rust/commit/287187230b8d76686883d1ea32940294ec0fd5c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/287187230b8d76686883d1ea32940294ec0fd5c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a2190a9cd4e38a9543ff697dd51ca8b6b68f50d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2190a9cd4e38a9543ff697dd51ca8b6b68f50d", "html_url": "https://github.com/rust-lang/rust/commit/3a2190a9cd4e38a9543ff697dd51ca8b6b68f50d"}, {"sha": "3932249249fa56dd1515c487a5a9eb02cb631775", "url": "https://api.github.com/repos/rust-lang/rust/commits/3932249249fa56dd1515c487a5a9eb02cb631775", "html_url": "https://github.com/rust-lang/rust/commit/3932249249fa56dd1515c487a5a9eb02cb631775"}], "stats": {"total": 557, "additions": 540, "deletions": 17}, "files": [{"sha": "9dd7b6fae9bc61edd5c6ddd85d7a77d465904cce", "filename": "src/doc/unstable-book/src/language-features/marker-trait-attr.md", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmarker-trait-attr.md", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmarker-trait-attr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmarker-trait-attr.md?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,33 @@\n+# `marker_trait_attr`\n+\n+The tracking issue for this feature is: [#29864]\n+\n+[#29864]: https://github.com/rust-lang/rust/issues/29864\n+\n+------------------------\n+\n+Normally, Rust keeps you from adding trait implementations that could\n+overlap with each other, as it would be ambiguous which to use.  This\n+feature, however, carves out an exception to that rule: a trait can\n+opt-in to having overlapping implementations, at the cost that those\n+implementations are not allowed to override anything (and thus the\n+trait itself cannot have any associated items, as they're pointless\n+when they'd need to do the same thing for every type anyway).\n+\n+```rust\n+#![feature(marker_trait_attr)]\n+\n+use std::fmt::{Debug, Display};\n+\n+#[marker] trait MyMarker {}\n+\n+impl<T: Debug> MyMarker for T {}\n+impl<T: Display> MyMarker for T {}\n+\n+fn foo<T: MyMarker>(t: T) -> T {\n+    t\n+}\n+```\n+\n+This is expected to replace the unstable `overlapping_marker_traits`\n+feature, which applied to all empty traits (without needing an opt-in)."}, {"sha": "b23a50ef1a402dcfcd830b35a627290c0e9417e6", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -32,6 +32,7 @@ enum Target {\n     Statement,\n     Closure,\n     Static,\n+    Trait,\n     Other,\n }\n \n@@ -45,6 +46,7 @@ impl Target {\n             hir::ItemKind::Const(..) => Target::Const,\n             hir::ItemKind::ForeignMod(..) => Target::ForeignMod,\n             hir::ItemKind::Static(..) => Target::Static,\n+            hir::ItemKind::Trait(..) => Target::Trait,\n             _ => Target::Other,\n         }\n     }\n@@ -70,6 +72,8 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                 self.check_inline(attr, &item.span, target)\n             } else if attr.check_name(\"non_exhaustive\") {\n                 self.check_non_exhaustive(attr, item, target)\n+            } else if attr.check_name(\"marker\") {\n+                self.check_marker(attr, item, target)\n             }\n         }\n \n@@ -114,6 +118,26 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         }\n     }\n \n+    /// Check if the `#[marker]` attribute on an `item` is valid.\n+    fn check_marker(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) {\n+        match target {\n+            Target::Trait => { /* Valid */ },\n+            _ => {\n+                self.tcx.sess\n+                    .struct_span_err(attr.span, \"attribute can only be applied to a trait\")\n+                    .span_label(item.span, \"not a trait\")\n+                    .emit();\n+                return;\n+            }\n+        }\n+\n+        if !attr.is_word() {\n+            self.tcx.sess\n+                .struct_span_err(attr.span, \"attribute should be empty\")\n+                .emit();\n+        }\n+    }\n+\n     /// Check if the `#[repr]` attributes on `item` are valid.\n     fn check_repr(&self, item: &hir::Item, target: Target) {\n         // Extract the names of all repr hints, e.g., [foo, bar, align] for:"}, {"sha": "78caa45187cc62f6d6c176b593fe9de53d7b0235", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -1033,6 +1033,7 @@ impl_stable_hash_for!(struct ty::TraitDef {\n     unsafety,\n     paren_sugar,\n     has_auto_impl,\n+    is_marker,\n     def_path_hash,\n });\n "}, {"sha": "1f8fb921e0c315345b6f4fd85f2c6d96d53f81af", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -2662,23 +2662,32 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             as Box<dyn Iterator<Item = AssociatedItem> + 'a>\n     }\n \n-    /// Returns true if the impls are the same polarity and are implementing\n-    /// a trait which contains no items\n+    /// Returns true if the impls are the same polarity and the trait either\n+    /// has no items or is annotated #[marker] and prevents item overrides.\n     pub fn impls_are_allowed_to_overlap(self, def_id1: DefId, def_id2: DefId) -> bool {\n-        if !self.features().overlapping_marker_traits {\n-            return false;\n+        if self.features().overlapping_marker_traits {\n+            let trait1_is_empty = self.impl_trait_ref(def_id1)\n+                .map_or(false, |trait_ref| {\n+                    self.associated_item_def_ids(trait_ref.def_id).is_empty()\n+                });\n+            let trait2_is_empty = self.impl_trait_ref(def_id2)\n+                .map_or(false, |trait_ref| {\n+                    self.associated_item_def_ids(trait_ref.def_id).is_empty()\n+                });\n+            self.impl_polarity(def_id1) == self.impl_polarity(def_id2)\n+                && trait1_is_empty\n+                && trait2_is_empty\n+        } else if self.features().marker_trait_attr {\n+            let is_marker_impl = |def_id: DefId| -> bool {\n+                let trait_ref = self.impl_trait_ref(def_id);\n+                trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)\n+            };\n+            self.impl_polarity(def_id1) == self.impl_polarity(def_id2)\n+                && is_marker_impl(def_id1)\n+                && is_marker_impl(def_id2)\n+        } else {\n+            false\n         }\n-        let trait1_is_empty = self.impl_trait_ref(def_id1)\n-            .map_or(false, |trait_ref| {\n-                self.associated_item_def_ids(trait_ref.def_id).is_empty()\n-            });\n-        let trait2_is_empty = self.impl_trait_ref(def_id2)\n-            .map_or(false, |trait_ref| {\n-                self.associated_item_def_ids(trait_ref.def_id).is_empty()\n-            });\n-        self.impl_polarity(def_id1) == self.impl_polarity(def_id2)\n-            && trait1_is_empty\n-            && trait2_is_empty\n     }\n \n     // Returns `ty::VariantDef` if `def` refers to a struct,"}, {"sha": "22277128383b503d7039e394462039f6484397f9", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -36,6 +36,11 @@ pub struct TraitDef {\n \n     pub has_auto_impl: bool,\n \n+    /// If `true`, then this trait has the `#[marker]` attribute, indicating\n+    /// that all its associated items have defaults that cannot be overridden,\n+    /// and thus `impl`s of it are allowed to overlap.\n+    pub is_marker: bool,\n+\n     /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n     /// recomputed all the time.\n     pub def_path_hash: DefPathHash,\n@@ -53,13 +58,15 @@ impl<'a, 'gcx, 'tcx> TraitDef {\n                unsafety: hir::Unsafety,\n                paren_sugar: bool,\n                has_auto_impl: bool,\n+               is_marker: bool,\n                def_path_hash: DefPathHash)\n                -> TraitDef {\n         TraitDef {\n             def_id,\n-            paren_sugar,\n             unsafety,\n+            paren_sugar,\n             has_auto_impl,\n+            is_marker,\n             def_path_hash,\n         }\n     }"}, {"sha": "35ce6eb91b6951177bcc927061c13cc9b120d3cb", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -539,6 +539,7 @@ impl<'a, 'tcx> CrateMetadata {\n                           data.unsafety,\n                           data.paren_sugar,\n                           data.has_auto_impl,\n+                          data.is_marker,\n                           self.def_path_table.def_path_hash(item_id))\n     }\n "}, {"sha": "c36ae02ab54e0a5112d24527c9183fd611057db7", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -1152,6 +1152,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     unsafety: trait_def.unsafety,\n                     paren_sugar: trait_def.paren_sugar,\n                     has_auto_impl: tcx.trait_is_auto(def_id),\n+                    is_marker: trait_def.is_marker,\n                     super_predicates: self.lazy(&tcx.super_predicates_of(def_id)),\n                 };\n "}, {"sha": "da2a8ae714b5a6f32745ee6a632d7ee8ac272b00", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -472,13 +472,15 @@ pub struct TraitData<'tcx> {\n     pub unsafety: hir::Unsafety,\n     pub paren_sugar: bool,\n     pub has_auto_impl: bool,\n+    pub is_marker: bool,\n     pub super_predicates: Lazy<ty::GenericPredicates<'tcx>>,\n }\n \n impl_stable_hash_for!(struct TraitData<'tcx> {\n     unsafety,\n     paren_sugar,\n     has_auto_impl,\n+    is_marker,\n     super_predicates\n });\n "}, {"sha": "a355bc99fd8e82b1561bdd5dfb49f010ba974d33", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -304,6 +304,19 @@ fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn check_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &hir::Item) {\n     let trait_def_id = tcx.hir.local_def_id(item.id);\n+\n+    let trait_def = tcx.trait_def(trait_def_id);\n+    if trait_def.is_marker {\n+        for associated_def_id in &*tcx.associated_item_def_ids(trait_def_id) {\n+            struct_span_err!(\n+                tcx.sess,\n+                tcx.def_span(*associated_def_id),\n+                E0714,\n+                \"marker traits cannot have associated items\",\n+            ).emit();\n+        }\n+    }\n+\n     for_item(tcx, item).with_fcx(|fcx, _| {\n         check_where_clauses(tcx, fcx, item.span, trait_def_id, None);\n         vec![]"}, {"sha": "ecb7a8ea8b62ed4066c50c58ae369f7d017ab2e1", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -46,6 +46,7 @@ fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n         }\n \n         enforce_trait_manually_implementable(tcx, impl_def_id, trait_ref.def_id);\n+        enforce_empty_impls_for_marker_traits(tcx, impl_def_id, trait_ref.def_id);\n     }\n }\n \n@@ -99,6 +100,25 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_d\n         .emit();\n }\n \n+/// We allow impls of marker traits to overlap, so they can't override impls\n+/// as that could make it ambiguous which associated item to use.\n+fn enforce_empty_impls_for_marker_traits(tcx: TyCtxt, impl_def_id: DefId, trait_def_id: DefId) {\n+    if !tcx.trait_def(trait_def_id).is_marker {\n+        return;\n+    }\n+\n+    if tcx.associated_item_def_ids(trait_def_id).is_empty() {\n+        return;\n+    }\n+\n+    let span = tcx.sess.source_map().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n+    struct_span_err!(tcx.sess,\n+                     span,\n+                     E0715,\n+                     \"impls for marker traits cannot contain items\")\n+        .emit();\n+}\n+\n pub fn provide(providers: &mut Providers) {\n     use self::builtin::coerce_unsized_info;\n     use self::inherent_impls::{crate_inherent_impls, inherent_impls};"}, {"sha": "bb5753f432a026060ca59aaea5607a5a0acbc451", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -740,8 +740,9 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::\n         err.emit();\n     }\n \n+    let is_marker = tcx.has_attr(def_id, \"marker\");\n     let def_path_hash = tcx.def_path_hash(def_id);\n-    let def = ty::TraitDef::new(def_id, unsafety, paren_sugar, is_auto, def_path_hash);\n+    let def = ty::TraitDef::new(def_id, unsafety, paren_sugar, is_auto, is_marker, def_path_hash);\n     tcx.alloc_trait_def(def)\n }\n "}, {"sha": "f57d050fa2d77641e9cdef52b34d0d4cb75182ac", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -4750,6 +4750,22 @@ ambiguity for some types, we disallow calling methods on raw pointers when\n the type is unknown.\n \"##,\n \n+E0714: r##\"\n+A `#[marker]` trait contained an associated item.\n+\n+The items of marker traits cannot be overridden, so there's no need to have them\n+when they cannot be changed per-type anyway.  If you wanted them for ergonomic\n+reasons, consider making an extension trait instead.\n+\"##,\n+\n+E0715: r##\"\n+An `impl` for a `#[marker]` trait tried to override an associated item.\n+\n+Because marker traits are allowed to have multiple implementations for the same\n+type, it's not allowed to override anything in those implementations, as it\n+would be ambiguous which override should actually be used.\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "43cb811ed0bbbb33512adf17d6ae2c2a39751e3b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -355,6 +355,9 @@ declare_features! (\n     // Allows overlapping impls of marker traits\n     (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n \n+    // Trait attribute to allow overlapping impls\n+    (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n+\n     // rustc internal\n     (active, abi_thiscall, \"1.19.0\", None, None),\n \n@@ -808,6 +811,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                           \"non exhaustive is an experimental feature\",\n                                           cfg_fn!(non_exhaustive))),\n \n+    // RFC #1268\n+    (\"marker\", Normal, Gated(Stability::Unstable,\n+                             \"marker_trait_attr\",\n+                             \"marker traits is an experimental feature\",\n+                             cfg_fn!(marker_trait_attr))),\n+\n     (\"plugin\", CrateLevel, Gated(Stability::Unstable,\n                                  \"plugin\",\n                                  \"compiler plugins are experimental \\"}, {"sha": "e1081032c059a47103c6deccfcbe157516c2ef82", "filename": "src/test/run-pass/overlap-permitted-for-annotated-marker-traits.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-annotated-marker-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-annotated-marker-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverlap-permitted-for-annotated-marker-traits.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests for RFC 1268: we allow overlapping impls of marker traits,\n+// that is, traits with #[marker]. In this case, a type `T` is\n+// `MyMarker` if it is either `Debug` or `Display`.\n+\n+#![feature(marker_trait_attr)]\n+\n+use std::fmt::{Debug, Display};\n+\n+#[marker] trait MyMarker {}\n+\n+impl<T: Debug> MyMarker for T {}\n+impl<T: Display> MyMarker for T {}\n+\n+fn foo<T: MyMarker>(t: T) -> T {\n+    t\n+}\n+\n+fn main() {\n+    // Debug && Display:\n+    assert_eq!(1, foo(1));\n+    assert_eq!(2.0, foo(2.0));\n+\n+    // Debug && !Display:\n+    assert_eq!(vec![1], foo(vec![1]));\n+}"}, {"sha": "508ffe3845bbd532149407f6aa9cdc142b04598a", "filename": "src/test/ui/feature-gates/feature-gate-marker_trait_attr.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt::{Debug, Display};\n+\n+#[marker] trait ExplicitMarker {}\n+//~^ ERROR marker traits is an experimental feature (see issue #29864)\n+\n+impl<T: Display> ExplicitMarker for T {}\n+impl<T: Debug> ExplicitMarker for T {}\n+\n+fn main() {}"}, {"sha": "4023a04000a03b8a1ead2a3156d56e1ced1669f0", "filename": "src/test/ui/feature-gates/feature-gate-marker_trait_attr.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: marker traits is an experimental feature (see issue #29864)\n+  --> $DIR/feature-gate-marker_trait_attr.rs:13:1\n+   |\n+LL | #[marker] trait ExplicitMarker {}\n+   | ^^^^^^^^^\n+   |\n+   = help: add #![feature(marker_trait_attr)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "4c8003ce3d80883b3ea86f65e73b9723c903fa2e", "filename": "src/test/ui/marker_trait_attr/marker-attribute-on-non-trait.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-on-non-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-on-non-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-on-non-trait.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(marker_trait_attr)]\n+\n+#[marker] //~ ERROR attribute can only be applied to a trait\n+struct Struct {}\n+\n+#[marker] //~ ERROR attribute can only be applied to a trait\n+impl Struct {}\n+\n+#[marker] //~ ERROR attribute can only be applied to a trait\n+union Union {\n+    x: i32,\n+}\n+\n+#[marker] //~ ERROR attribute can only be applied to a trait\n+const CONST: usize = 10;\n+\n+#[marker] //~ ERROR attribute can only be applied to a trait\n+fn function() {}\n+\n+#[marker] //~ ERROR attribute can only be applied to a trait\n+type Type = ();\n+\n+fn main() {}"}, {"sha": "0e2586b9799d935e0fe7dd821b83182f68bb73e3", "filename": "src/test/ui/marker_trait_attr/marker-attribute-on-non-trait.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-on-non-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-on-non-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-on-non-trait.stderr?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,52 @@\n+error: attribute can only be applied to a trait\n+  --> $DIR/marker-attribute-on-non-trait.rs:13:1\n+   |\n+LL | #[marker] //~ ERROR attribute can only be applied to a trait\n+   | ^^^^^^^^^\n+LL | struct Struct {}\n+   | ---------------- not a trait\n+\n+error: attribute can only be applied to a trait\n+  --> $DIR/marker-attribute-on-non-trait.rs:16:1\n+   |\n+LL | #[marker] //~ ERROR attribute can only be applied to a trait\n+   | ^^^^^^^^^\n+LL | impl Struct {}\n+   | -------------- not a trait\n+\n+error: attribute can only be applied to a trait\n+  --> $DIR/marker-attribute-on-non-trait.rs:19:1\n+   |\n+LL |   #[marker] //~ ERROR attribute can only be applied to a trait\n+   |   ^^^^^^^^^\n+LL | / union Union {\n+LL | |     x: i32,\n+LL | | }\n+   | |_- not a trait\n+\n+error: attribute can only be applied to a trait\n+  --> $DIR/marker-attribute-on-non-trait.rs:24:1\n+   |\n+LL | #[marker] //~ ERROR attribute can only be applied to a trait\n+   | ^^^^^^^^^\n+LL | const CONST: usize = 10;\n+   | ------------------------ not a trait\n+\n+error: attribute can only be applied to a trait\n+  --> $DIR/marker-attribute-on-non-trait.rs:27:1\n+   |\n+LL | #[marker] //~ ERROR attribute can only be applied to a trait\n+   | ^^^^^^^^^\n+LL | fn function() {}\n+   | ---------------- not a trait\n+\n+error: attribute can only be applied to a trait\n+  --> $DIR/marker-attribute-on-non-trait.rs:30:1\n+   |\n+LL | #[marker] //~ ERROR attribute can only be applied to a trait\n+   | ^^^^^^^^^\n+LL | type Type = ();\n+   | --------------- not a trait\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "6290481d60f751d9be56e80bb880b42a6b323d2c", "filename": "src/test/ui/marker_trait_attr/marker-attribute-with-values.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(marker_trait_attr)]\n+#![feature(unrestricted_attribute_tokens)]\n+\n+#[marker(always)]\n+trait Marker1 {}\n+//~^^ ERROR attribute should be empty\n+\n+#[marker(\"never\")]\n+trait Marker2 {}\n+//~^^ ERROR attribute should be empty\n+\n+#[marker(key = value)]\n+trait Marker3 {}\n+//~^^ ERROR attribute should be empty\n+\n+fn main() {}"}, {"sha": "66bf2d1c502fb462439c2a35c2d5c38565741636", "filename": "src/test/ui/marker_trait_attr/marker-attribute-with-values.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,20 @@\n+error: attribute should be empty\n+  --> $DIR/marker-attribute-with-values.rs:14:1\n+   |\n+LL | #[marker(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: attribute should be empty\n+  --> $DIR/marker-attribute-with-values.rs:18:1\n+   |\n+LL | #[marker(\"never\")]\n+   | ^^^^^^^^^^^^^^^^^^\n+\n+error: attribute should be empty\n+  --> $DIR/marker-attribute-with-values.rs:22:1\n+   |\n+LL | #[marker(key = value)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "b4677b6844361270bc4a0027daf18a81ec302864", "filename": "src/test/ui/marker_trait_attr/marker-trait-with-associated-items.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(marker_trait_attr)]\n+#![feature(associated_type_defaults)]\n+\n+#[marker]\n+trait MarkerConst {\n+    const N: usize;\n+    //~^ ERROR marker traits cannot have associated items\n+}\n+\n+#[marker]\n+trait MarkerType {\n+    type Output;\n+    //~^ ERROR marker traits cannot have associated items\n+}\n+\n+#[marker]\n+trait MarkerFn {\n+    fn foo();\n+    //~^ ERROR marker traits cannot have associated items\n+}\n+\n+#[marker]\n+trait MarkerConstWithDefault {\n+    const N: usize = 43;\n+    //~^ ERROR marker traits cannot have associated items\n+}\n+\n+#[marker]\n+trait MarkerTypeWithDefault {\n+    type Output = ();\n+    //~^ ERROR marker traits cannot have associated items\n+}\n+\n+#[marker]\n+trait MarkerFnWithDefault {\n+    fn foo() {}\n+    //~^ ERROR marker traits cannot have associated items\n+}\n+\n+fn main() {}"}, {"sha": "dadf1f02b9a8fb7c7cfcadaf71b927d47c9aee16", "filename": "src/test/ui/marker_trait_attr/marker-trait-with-associated-items.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.stderr?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,39 @@\n+error[E0714]: marker traits cannot have associated items\n+  --> $DIR/marker-trait-with-associated-items.rs:16:5\n+   |\n+LL |     const N: usize;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error[E0714]: marker traits cannot have associated items\n+  --> $DIR/marker-trait-with-associated-items.rs:22:5\n+   |\n+LL |     type Output;\n+   |     ^^^^^^^^^^^^\n+\n+error[E0714]: marker traits cannot have associated items\n+  --> $DIR/marker-trait-with-associated-items.rs:28:5\n+   |\n+LL |     fn foo();\n+   |     ^^^^^^^^^\n+\n+error[E0714]: marker traits cannot have associated items\n+  --> $DIR/marker-trait-with-associated-items.rs:34:5\n+   |\n+LL |     const N: usize = 43;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0714]: marker traits cannot have associated items\n+  --> $DIR/marker-trait-with-associated-items.rs:40:5\n+   |\n+LL |     type Output = ();\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0714]: marker traits cannot have associated items\n+  --> $DIR/marker-trait-with-associated-items.rs:46:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0714`."}, {"sha": "a3b4fd6aebacfd2cd6c3815e3a8c0dbc68fa2515", "filename": "src/test/ui/marker_trait_attr/overlap-marker-trait.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for RFC 1268: we allow overlapping impls of marker traits,\n+// that is, traits with #[marker]. In this case, a type `T` is\n+// `MyMarker` if it is either `Debug` or `Display`. This test just\n+// checks that we don't consider **all** types to be `MyMarker`.\n+\n+#![feature(marker_trait_attr)]\n+\n+use std::fmt::{Debug, Display};\n+\n+#[marker] trait Marker {}\n+\n+impl<T: Debug> Marker for T {}\n+impl<T: Display> Marker for T {}\n+\n+fn is_marker<T: Marker>() { }\n+\n+struct NotDebugOrDisplay;\n+\n+fn main() {\n+    // Debug && Display:\n+    is_marker::<i32>();\n+\n+    // Debug && !Display:\n+    is_marker::<Vec<i32>>();\n+\n+    // !Debug && !Display\n+    is_marker::<NotDebugOrDisplay>(); //~ ERROR\n+}"}, {"sha": "a4c4f0629ddd0597dca3604c88c690e5b61815dd", "filename": "src/test/ui/marker_trait_attr/overlap-marker-trait.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n+  --> $DIR/overlap-marker-trait.rs:37:5\n+   |\n+LL |     is_marker::<NotDebugOrDisplay>(); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n+   |\n+note: required by `is_marker`\n+  --> $DIR/overlap-marker-trait.rs:25:1\n+   |\n+LL | fn is_marker<T: Marker>() { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4a9252b38f27ecae365fa43a7bac38a2abeaeae0", "filename": "src/test/ui/marker_trait_attr/override-item-on-marker-trait.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.rs?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(marker_trait_attr)]\n+\n+#[marker]\n+trait Marker {\n+    const N: usize = 0;\n+    fn do_something() {}\n+}\n+\n+struct OverrideConst;\n+impl Marker for OverrideConst {\n+//~^ ERROR impls for marker traits cannot contain items\n+    const N: usize = 1;\n+}\n+\n+struct OverrideFn;\n+impl Marker for OverrideFn {\n+//~^ ERROR impls for marker traits cannot contain items\n+    fn do_something() {\n+        println!(\"Hello world!\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "43af997511eea940690115bf2df618f338ef4ac0", "filename": "src/test/ui/marker_trait_attr/override-item-on-marker-trait.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/287187230b8d76686883d1ea32940294ec0fd5c9/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverride-item-on-marker-trait.stderr?ref=287187230b8d76686883d1ea32940294ec0fd5c9", "patch": "@@ -0,0 +1,15 @@\n+error[E0715]: impls for marker traits cannot contain items\n+  --> $DIR/override-item-on-marker-trait.rs:20:1\n+   |\n+LL | impl Marker for OverrideConst {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0715]: impls for marker traits cannot contain items\n+  --> $DIR/override-item-on-marker-trait.rs:26:1\n+   |\n+LL | impl Marker for OverrideFn {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0715`."}]}