{"sha": "fa355d6339d7b5ccfd4b1a96f035a4366e8152fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMzU1ZDYzMzlkN2I1Y2NmZDRiMWE5NmYwMzVhNDM2NmU4MTUyZmU=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-02-25T19:44:47Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-02-25T19:44:47Z"}, "message": "Rename back to highlight and check event's again highlight range", "tree": {"sha": "4bbcd2d9eb4ac67cf50ba12918c87a41fb5a9624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bbcd2d9eb4ac67cf50ba12918c87a41fb5a9624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa355d6339d7b5ccfd4b1a96f035a4366e8152fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa355d6339d7b5ccfd4b1a96f035a4366e8152fe", "html_url": "https://github.com/rust-lang/rust/commit/fa355d6339d7b5ccfd4b1a96f035a4366e8152fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa355d6339d7b5ccfd4b1a96f035a4366e8152fe/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "html_url": "https://github.com/rust-lang/rust/commit/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e"}], "stats": {"total": 94, "additions": 54, "deletions": 40}, "files": [{"sha": "d2287066942e3c40a8d98184e9797ef74bc6db43", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa355d6339d7b5ccfd4b1a96f035a4366e8152fe/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa355d6339d7b5ccfd4b1a96f035a4366e8152fe/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=fa355d6339d7b5ccfd4b1a96f035a4366e8152fe", "patch": "@@ -425,16 +425,14 @@ impl Analysis {\n         self.with_db(|db| runnables::runnables(db, file_id))\n     }\n \n-    /// Computes syntax highlighting for the given file.\n+    /// Computes syntax highlighting for the given file\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n-        self.with_db(|db| syntax_highlighting::highlight(db, file_id))\n+        self.with_db(|db| syntax_highlighting::highlight(db, file_id, None))\n     }\n \n     /// Computes syntax highlighting for the given file range.\n     pub fn highlight_range(&self, frange: FileRange) -> Cancelable<Vec<HighlightedRange>> {\n-        self.with_db(|db| {\n-            syntax_highlighting::highlight_range(db, frange.file_id, Some(frange.range))\n-        })\n+        self.with_db(|db| syntax_highlighting::highlight(db, frange.file_id, Some(frange.range)))\n     }\n \n     /// Computes syntax highlighting for the given file."}, {"sha": "9bc3ad44894205eebc863a5ccf383bc24fe3784c", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 51, "deletions": 35, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/fa355d6339d7b5ccfd4b1a96f035a4366e8152fe/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa355d6339d7b5ccfd4b1a96f035a4366e8152fe/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=fa355d6339d7b5ccfd4b1a96f035a4366e8152fe", "patch": "@@ -67,17 +67,12 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n     }\n }\n \n-pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n-    let _p = profile(\"highlight\");\n-    highlight_range(db, file_id, None)\n-}\n-\n-pub(crate) fn highlight_range(\n+pub(crate) fn highlight(\n     db: &RootDatabase,\n     file_id: FileId,\n     range: Option<TextRange>,\n ) -> Vec<HighlightedRange> {\n-    let _p = profile(\"highlight_range\");\n+    let _p = profile(\"highlight\");\n \n     let parse = db.parse(file_id);\n     let root = parse.tree().syntax().clone();\n@@ -89,31 +84,56 @@ pub(crate) fn highlight_range(\n \n     let mut in_macro_call = None;\n \n-    // Determine the root based on the range\n-    let root = match range {\n-        Some(range) => match root.covering_element(range) {\n+    // Determine the root based on the given range.\n+    let (root, highlight_range) = if let Some(range) = range {\n+        let root = match root.covering_element(range) {\n             NodeOrToken::Node(node) => node,\n             NodeOrToken::Token(token) => token.parent(),\n-        },\n-        None => root,\n+        };\n+        (root, range)\n+    } else {\n+        (root.clone(), root.text_range())\n     };\n \n     for event in root.preorder_with_tokens() {\n         match event {\n-            WalkEvent::Enter(node) => match node.kind() {\n-                MACRO_CALL => {\n-                    in_macro_call = Some(node.clone());\n-                    if let Some(range) = highlight_macro(InFile::new(file_id.into(), node)) {\n-                        res.push(HighlightedRange { range, tag: tags::MACRO, binding_hash: None });\n-                    }\n+            WalkEvent::Enter(node) => {\n+                if node.text_range().intersection(&highlight_range).is_none() {\n+                    continue;\n                 }\n-                _ if in_macro_call.is_some() => {\n-                    if let Some(token) = node.as_token() {\n-                        if let Some((tag, binding_hash)) = highlight_token_tree(\n+\n+                match node.kind() {\n+                    MACRO_CALL => {\n+                        in_macro_call = Some(node.clone());\n+                        if let Some(range) = highlight_macro(InFile::new(file_id.into(), node)) {\n+                            res.push(HighlightedRange {\n+                                range,\n+                                tag: tags::MACRO,\n+                                binding_hash: None,\n+                            });\n+                        }\n+                    }\n+                    _ if in_macro_call.is_some() => {\n+                        if let Some(token) = node.as_token() {\n+                            if let Some((tag, binding_hash)) = highlight_token_tree(\n+                                &mut sb,\n+                                &analyzer,\n+                                &mut bindings_shadow_count,\n+                                InFile::new(file_id.into(), token.clone()),\n+                            ) {\n+                                res.push(HighlightedRange {\n+                                    range: node.text_range(),\n+                                    tag,\n+                                    binding_hash,\n+                                });\n+                            }\n+                        }\n+                    }\n+                    _ => {\n+                        if let Some((tag, binding_hash)) = highlight_node(\n                             &mut sb,\n-                            &analyzer,\n                             &mut bindings_shadow_count,\n-                            InFile::new(file_id.into(), token.clone()),\n+                            InFile::new(file_id.into(), node.clone()),\n                         ) {\n                             res.push(HighlightedRange {\n                                 range: node.text_range(),\n@@ -123,17 +143,12 @@ pub(crate) fn highlight_range(\n                         }\n                     }\n                 }\n-                _ => {\n-                    if let Some((tag, binding_hash)) = highlight_node(\n-                        &mut sb,\n-                        &mut bindings_shadow_count,\n-                        InFile::new(file_id.into(), node.clone()),\n-                    ) {\n-                        res.push(HighlightedRange { range: node.text_range(), tag, binding_hash });\n-                    }\n-                }\n-            },\n+            }\n             WalkEvent::Leave(node) => {\n+                if node.text_range().intersection(&highlight_range).is_none() {\n+                    continue;\n+                }\n+\n                 if let Some(m) = in_macro_call.as_ref() {\n                     if *m == node {\n                         in_macro_call = None;\n@@ -284,7 +299,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         )\n     }\n \n-    let mut ranges = highlight(db, file_id);\n+    let mut ranges = highlight(db, file_id, None);\n     ranges.sort_by_key(|it| it.range.start());\n     // quick non-optimal heuristic to intersect token ranges and highlighted ranges\n     let mut frontier = 0;\n@@ -509,10 +524,11 @@ fn bar() {\n             }\"#,\n         );\n \n+        // The \"x\"\n         let highlights = &analysis\n             .highlight_range(FileRange {\n                 file_id,\n-                range: TextRange::offset_len(82.into(), 1.into()), // \"x\"\n+                range: TextRange::offset_len(82.into(), 1.into()),\n             })\n             .unwrap();\n "}]}