{"sha": "e11c0e3e857abfbe087df1687244023002e2c2f3", "node_id": "C_kwDOAAsO6NoAKGUxMWMwZTNlODU3YWJmYmUwODdkZjE2ODcyNDQwMjMwMDJlMmMyZjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-17T09:39:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-17T09:39:32Z"}, "message": "Auto merge of #13966 - HKalbasi:layout, r=Veykril\n\nDon't compute layout if `TargetDataLayout` is not available", "tree": {"sha": "4b561aab841d12b5ff49ddf637fbd941fc37c3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b561aab841d12b5ff49ddf637fbd941fc37c3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e11c0e3e857abfbe087df1687244023002e2c2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e11c0e3e857abfbe087df1687244023002e2c2f3", "html_url": "https://github.com/rust-lang/rust/commit/e11c0e3e857abfbe087df1687244023002e2c2f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e11c0e3e857abfbe087df1687244023002e2c2f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455ef0c806b96420f9fcda053cc0b1d707800b0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/455ef0c806b96420f9fcda053cc0b1d707800b0c", "html_url": "https://github.com/rust-lang/rust/commit/455ef0c806b96420f9fcda053cc0b1d707800b0c"}, {"sha": "ec65b3b3aa96bbf9cd44580c938c80034f066f0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec65b3b3aa96bbf9cd44580c938c80034f066f0d", "html_url": "https://github.com/rust-lang/rust/commit/ec65b3b3aa96bbf9cd44580c938c80034f066f0d"}], "stats": {"total": 83, "additions": 40, "deletions": 43}, "files": [{"sha": "b267700a431858d5f9d3477ad5f1e0e3cdc09ca5", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=e11c0e3e857abfbe087df1687244023002e2c2f3", "patch": "@@ -110,6 +110,7 @@ impl ChangeFixture {\n         let mut crates = FxHashMap::default();\n         let mut crate_deps = Vec::new();\n         let mut default_crate_root: Option<FileId> = None;\n+        let mut default_target_data_layout: Option<String> = None;\n         let mut default_cfg = CfgOptions::default();\n \n         let mut file_set = FileSet::default();\n@@ -175,6 +176,7 @@ impl ChangeFixture {\n                 assert!(default_crate_root.is_none());\n                 default_crate_root = Some(file_id);\n                 default_cfg = meta.cfg;\n+                default_target_data_layout = meta.target_data_layout;\n             }\n \n             change.change_file(file_id, Some(Arc::new(text)));\n@@ -198,7 +200,7 @@ impl ChangeFixture {\n                 Ok(Vec::new()),\n                 false,\n                 CrateOrigin::CratesIo { repo: None, name: None },\n-                None,\n+                default_target_data_layout.map(|x| x.into()),\n             );\n         } else {\n             for (from, to, prelude) in crate_deps {"}, {"sha": "49b1190ad46a3a009e9617c9057a898a11859385", "filename": "crates/hir-def/src/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fhir-def%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fhir-def%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flayout.rs?ref=e11c0e3e857abfbe087df1687244023002e2c2f3", "patch": "@@ -90,6 +90,7 @@ impl IntegerExt for Integer {\n pub enum LayoutError {\n     UserError(String),\n     SizeOverflow,\n+    TargetLayoutNotAvailable,\n     HasPlaceholder,\n     NotImplemented,\n     Unknown,"}, {"sha": "d45e2a943addf94a59358be99251536135414bfc", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=e11c0e3e857abfbe087df1687244023002e2c2f3", "patch": "@@ -65,7 +65,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn layout_of_adt(&self, def: AdtId, subst: Substitution) -> Result<Layout, LayoutError>;\n \n     #[salsa::invoke(crate::layout::target_data_layout_query)]\n-    fn target_data_layout(&self, krate: CrateId) -> Arc<TargetDataLayout>;\n+    fn target_data_layout(&self, krate: CrateId) -> Option<Arc<TargetDataLayout>>;\n \n     #[salsa::invoke(crate::lower::callable_item_sig)]\n     fn callable_item_signature(&self, def: CallableDefId) -> PolyFnSig;"}, {"sha": "cd7f1b805c5c55e1e4c9ba48aa7c39e1321f783b", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=e11c0e3e857abfbe087df1687244023002e2c2f3", "patch": "@@ -1,7 +1,5 @@\n //! Compute the binary representation of a type\n \n-use std::sync::Arc;\n-\n use base_db::CrateId;\n use chalk_ir::{AdtId, TyKind};\n use hir_def::{\n@@ -31,19 +29,19 @@ mod adt;\n mod target;\n \n struct LayoutCx<'a> {\n-    db: &'a dyn HirDatabase,\n     krate: CrateId,\n+    target: &'a TargetDataLayout,\n }\n \n-impl LayoutCalculator for LayoutCx<'_> {\n-    type TargetDataLayoutRef = Arc<TargetDataLayout>;\n+impl<'a> LayoutCalculator for LayoutCx<'a> {\n+    type TargetDataLayoutRef = &'a TargetDataLayout;\n \n     fn delay_bug(&self, txt: &str) {\n         never!(\"{}\", txt);\n     }\n \n-    fn current_data_layout(&self) -> Arc<TargetDataLayout> {\n-        self.db.target_data_layout(self.krate)\n+    fn current_data_layout(&self) -> &'a TargetDataLayout {\n+        self.target\n     }\n }\n \n@@ -56,7 +54,8 @@ fn scalar(dl: &TargetDataLayout, value: Primitive) -> Layout {\n }\n \n pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Layout, LayoutError> {\n-    let cx = LayoutCx { db, krate };\n+    let Some(target) = db.target_data_layout(krate) else { return Err(LayoutError::TargetLayoutNotAvailable) };\n+    let cx = LayoutCx { krate, target: &target };\n     let dl = &*cx.current_data_layout();\n     Ok(match ty.kind(Interner) {\n         TyKind::Adt(AdtId(def), subst) => db.layout_of_adt(*def, subst.clone())?,"}, {"sha": "cb7968c1446590df19913a37a746b0db35387dc5", "filename": "crates/hir-ty/src/layout/adt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs?ref=e11c0e3e857abfbe087df1687244023002e2c2f3", "patch": "@@ -23,7 +23,9 @@ pub fn layout_of_adt_query(\n     def: AdtId,\n     subst: Substitution,\n ) -> Result<Layout, LayoutError> {\n-    let cx = LayoutCx { db, krate: def.module(db.upcast()).krate() };\n+    let krate = def.module(db.upcast()).krate();\n+    let Some(target) = db.target_data_layout(krate) else { return Err(LayoutError::TargetLayoutNotAvailable) };\n+    let cx = LayoutCx { krate, target: &target };\n     let dl = cx.current_data_layout();\n     let handle_variant = |def: VariantId, var: &VariantData| {\n         var.fields()"}, {"sha": "93dcd79e120c6974bd5b029ebdebc95147ae9e27", "filename": "crates/hir-ty/src/layout/target.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs?ref=e11c0e3e857abfbe087df1687244023002e2c2f3", "patch": "@@ -3,34 +3,15 @@\n use std::sync::Arc;\n \n use base_db::CrateId;\n-use hir_def::layout::{Endian, Size, TargetDataLayout};\n+use hir_def::layout::TargetDataLayout;\n \n use crate::db::HirDatabase;\n \n-pub fn target_data_layout_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<TargetDataLayout> {\n+pub fn target_data_layout_query(\n+    db: &dyn HirDatabase,\n+    krate: CrateId,\n+) -> Option<Arc<TargetDataLayout>> {\n     let crate_graph = db.crate_graph();\n-    let target_layout = &crate_graph[krate].target_layout;\n-    let cfg_options = &crate_graph[krate].cfg_options;\n-    Arc::new(\n-        target_layout\n-            .as_ref()\n-            .and_then(|it| TargetDataLayout::parse_from_llvm_datalayout_string(it).ok())\n-            .unwrap_or_else(|| {\n-                let endian = match cfg_options.get_cfg_values(\"target_endian\").next() {\n-                    Some(x) if x.as_str() == \"big\" => Endian::Big,\n-                    _ => Endian::Little,\n-                };\n-                let pointer_size = Size::from_bytes(\n-                    match cfg_options.get_cfg_values(\"target_pointer_width\").next() {\n-                        Some(x) => match x.as_str() {\n-                            \"16\" => 2,\n-                            \"32\" => 4,\n-                            _ => 8,\n-                        },\n-                        _ => 8,\n-                    },\n-                );\n-                TargetDataLayout { endian, pointer_size, ..TargetDataLayout::default() }\n-            }),\n-    )\n+    let target_layout = crate_graph[krate].target_layout.as_ref()?;\n+    Some(Arc::new(TargetDataLayout::parse_from_llvm_datalayout_string(&target_layout).ok()?))\n }"}, {"sha": "f90ca86f9b6c455d61f6281da732ac4f6b8f9c7d", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c0e3e857abfbe087df1687244023002e2c2f3/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=e11c0e3e857abfbe087df1687244023002e2c2f3", "patch": "@@ -527,6 +527,7 @@ fn hover_field_offset() {\n     // Hovering over the field when instantiating\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n struct Foo { fiel$0d_a: u8, field_b: i32, field_c: i16 }\n \"#,\n         expect![[r#\"\n@@ -548,6 +549,7 @@ fn hover_shows_struct_field_info() {\n     // Hovering over the field when instantiating\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n struct Foo { field_a: u32 }\n \n fn main() {\n@@ -570,6 +572,7 @@ fn main() {\n     // Hovering over the field in the definition\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n struct Foo { field_a$0: u32 }\n \n fn main() {\n@@ -1515,6 +1518,8 @@ fn my() {}\n fn test_hover_struct_doc_comment() {\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n+\n /// This is an example\n /// multiline doc\n ///\n@@ -1573,7 +1578,7 @@ fn foo() { let bar = Ba$0r; }\n             ```\n \n             ```rust\n-            struct Bar // size = 0, align = 1\n+            struct Bar\n             ```\n \n             ---\n@@ -1602,7 +1607,7 @@ fn foo() { let bar = Ba$0r; }\n             ```\n \n             ```rust\n-            struct Bar // size = 0, align = 1\n+            struct Bar\n             ```\n \n             ---\n@@ -1630,7 +1635,7 @@ pub struct B$0ar\n             ```\n \n             ```rust\n-            pub struct Bar // size = 0, align = 1\n+            pub struct Bar\n             ```\n \n             ---\n@@ -1657,7 +1662,7 @@ pub struct B$0ar\n             ```\n \n             ```rust\n-            pub struct Bar // size = 0, align = 1\n+            pub struct Bar\n             ```\n \n             ---\n@@ -2959,6 +2964,8 @@ fn main() { let foo_test = name_with_dashes::wrapper::Thing::new$0(); }\n fn hover_field_pat_shorthand_ref_match_ergonomics() {\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n+\n struct S {\n     f: i32,\n }\n@@ -4398,6 +4405,7 @@ fn main() {\n fn hover_intra_doc_links() {\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n \n pub mod theitem {\n     /// This is the item. Cool!\n@@ -4539,7 +4547,7 @@ trait A where\n fn string_shadowed_with_inner_items() {\n     check(\n         r#\"\n-//- /main.rs crate:main deps:alloc\n+//- /main.rs crate:main deps:alloc target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n \n /// Custom `String` type.\n struct String;\n@@ -5234,7 +5242,7 @@ foo_macro!(\n             ```\n \n             ```rust\n-            pub struct Foo // size = 0, align = 1\n+            pub struct Foo\n             ```\n \n             ---\n@@ -5248,6 +5256,8 @@ foo_macro!(\n fn hover_intra_in_attr() {\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n+\n #[doc = \"Doc comment for [`Foo$0`]\"]\n pub struct Foo(i32);\n \"#,\n@@ -5368,6 +5378,8 @@ enum Enum {\n fn hover_record_variant_field() {\n     check(\n         r#\"\n+//- /main.rs target_data_layout:e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\n+\n enum Enum {\n     RecordV { field$0: u32 }\n }"}]}