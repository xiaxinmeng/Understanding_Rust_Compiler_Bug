{"sha": "81ab52c6caa9216485a024a864078f086fce2eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYWI1MmM2Y2FhOTIxNjQ4NWEwMjRhODY0MDc4ZjA4NmZjZTJlYWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-01T14:17:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-01T14:17:47Z"}, "message": "Merge #10109\n\n10109: fix: Enable flyimport for ident patterns r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "2d3419947370009e7c7a8ca5a75e4fbe3b7b6766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d3419947370009e7c7a8ca5a75e4fbe3b7b6766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ab52c6caa9216485a024a864078f086fce2eac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhL4uLCRBK7hj4Ov3rIwAAEUUIAA54u+js3JdrpKHYbiObEEZu\ni72k9XME1uLtWtDVKxvJKctPbYMHUBLOhhTOsIWxXB5UtIrF2eOfAT0uHo78tNRF\nnnkUuPHQRa7uaFAbvbZS9ix6/n9CV1VqDYb1WazUgdwRXBcrmNLObeeoteMjs2s1\nRM2hAg1IVaJ1DC49JkKX5BpY6HaTtqwkldI5ds0UGFePYoKZwW0WVVHCSt6aSQZd\naaIfSBMI8g7fi7KtDNDVdtzZN6sweP8EQhF5r1slDRwj1przjh2t8HxHmR4upGWx\nv05glsRGdkBRRsJlAxxQOHjIJxyJn9kS1xisgQOV1kMbuXXciLf06UQcgRFcMU4=\n=RybM\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d3419947370009e7c7a8ca5a75e4fbe3b7b6766\nparent 1b8a294555348d128b0641e3afec4fa830624d8d\nparent 40a2faee656529fee8f408287b6741630fc28ff9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630505867 +0000\ncommitter GitHub <noreply@github.com> 1630505867 +0000\n\nMerge #10109\n\n10109: fix: Enable flyimport for ident patterns r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ab52c6caa9216485a024a864078f086fce2eac", "html_url": "https://github.com/rust-lang/rust/commit/81ab52c6caa9216485a024a864078f086fce2eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ab52c6caa9216485a024a864078f086fce2eac/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8a294555348d128b0641e3afec4fa830624d8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8a294555348d128b0641e3afec4fa830624d8d", "html_url": "https://github.com/rust-lang/rust/commit/1b8a294555348d128b0641e3afec4fa830624d8d"}, {"sha": "40a2faee656529fee8f408287b6741630fc28ff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/40a2faee656529fee8f408287b6741630fc28ff9", "html_url": "https://github.com/rust-lang/rust/commit/40a2faee656529fee8f408287b6741630fc28ff9"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "1eb45036a9dca4516b2dd7d9d859593815fc2ae5", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81ab52c6caa9216485a024a864078f086fce2eac/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ab52c6caa9216485a024a864078f086fce2eac/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=81ab52c6caa9216485a024a864078f086fce2eac", "patch": "@@ -163,11 +163,11 @@ pub(crate) fn position_for_import<'a>(\n     import_candidate: Option<&ImportCandidate>,\n ) -> Option<&'a SyntaxNode> {\n     Some(match import_candidate {\n-        Some(ImportCandidate::Path(_)) => ctx.name_ref_syntax.as_ref()?.syntax(),\n+        Some(ImportCandidate::Path(_)) => ctx.name_syntax.as_ref()?.syntax(),\n         Some(ImportCandidate::TraitAssocItem(_)) => ctx.path_qual()?.syntax(),\n         Some(ImportCandidate::TraitMethod(_)) => ctx.dot_receiver()?.syntax(),\n         None => ctx\n-            .name_ref_syntax\n+            .name_syntax\n             .as_ref()\n             .map(|name_ref| name_ref.syntax())\n             .or_else(|| ctx.path_qual().map(|path| path.syntax()))\n@@ -1203,4 +1203,21 @@ mod mud {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn flyimport_pattern() {\n+        check(\n+            r#\"\n+mod module {\n+    pub struct Struct;\n+}\n+fn function() {\n+    let Str$0\n+}\n+\"#,\n+            expect![[r#\"\n+                st Struct (use module::Struct)\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "233bf51ec06bef4f56550b5a7b581355a9b85976", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81ab52c6caa9216485a024a864078f086fce2eac/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ab52c6caa9216485a024a864078f086fce2eac/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=81ab52c6caa9216485a024a864078f086fce2eac", "patch": "@@ -8,6 +8,7 @@\n //! show up for normal completions, or they won't show completions other than lifetimes depending\n //! on the fixture input.\n use hir::ScopeDef;\n+use syntax::ast;\n \n use crate::{completions::Completions, context::CompletionContext};\n \n@@ -17,17 +18,15 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n         return;\n     }\n     let lp_string;\n-    let param_lifetime = match (\n-        &ctx.lifetime_syntax,\n-        ctx.lifetime_param_syntax.as_ref().and_then(|lp| lp.lifetime()),\n-    ) {\n-        (Some(lt), Some(lp)) if lp == lt.clone() => return,\n-        (Some(_), Some(lp)) => {\n-            lp_string = lp.to_string();\n-            Some(&*lp_string)\n-        }\n-        _ => None,\n-    };\n+    let param_lifetime =\n+        match (&ctx.name_syntax, ctx.lifetime_param_syntax.as_ref().and_then(|lp| lp.lifetime())) {\n+            (Some(ast::NameLike::Lifetime(lt)), Some(lp)) if lp == lt.clone() => return,\n+            (Some(_), Some(lp)) => {\n+                lp_string = lp.to_string();\n+                Some(&*lp_string)\n+            }\n+            _ => None,\n+        };\n \n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {"}, {"sha": "191fdc3d2ccdc7e68d319cb50beac2403b096209", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ab52c6caa9216485a024a864078f086fce2eac/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ab52c6caa9216485a024a864078f086fce2eac/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=81ab52c6caa9216485a024a864078f086fce2eac", "patch": "@@ -92,7 +92,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             for (name, def) in module_scope {\n                 if ctx.in_use_tree() {\n                     if let hir::ScopeDef::Unknown = def {\n-                        if let Some(name_ref) = ctx.name_ref_syntax.as_ref() {\n+                        if let Some(ast::NameLike::NameRef(name_ref)) = ctx.name_syntax.as_ref() {\n                             if name_ref.syntax().text() == name.to_string().as_str() {\n                                 // for `use self::foo$0`, don't suggest `foo` as a completion\n                                 cov_mark::hit!(dont_complete_current_use);"}, {"sha": "4273129dff249b9527a78d303935a15d0fc7cdfb", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/81ab52c6caa9216485a024a864078f086fce2eac/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ab52c6caa9216485a024a864078f086fce2eac/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=81ab52c6caa9216485a024a864078f086fce2eac", "patch": "@@ -93,10 +93,9 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) function_def: Option<ast::Fn>,\n     /// The parent impl of the cursor position if it exists.\n     pub(super) impl_def: Option<ast::Impl>,\n-    pub(super) name_ref_syntax: Option<ast::NameRef>,\n+    pub(super) name_syntax: Option<ast::NameLike>,\n \n     // potentially set if we are completing a lifetime\n-    pub(super) lifetime_syntax: Option<ast::Lifetime>,\n     pub(super) lifetime_param_syntax: Option<ast::LifetimeParam>,\n     pub(super) lifetime_allowed: bool,\n     pub(super) is_label_ref: bool,\n@@ -161,8 +160,7 @@ impl<'a> CompletionContext<'a> {\n             expected_type: None,\n             function_def: None,\n             impl_def: None,\n-            name_ref_syntax: None,\n-            lifetime_syntax: None,\n+            name_syntax: None,\n             lifetime_param_syntax: None,\n             lifetime_allowed: false,\n             is_label_ref: false,\n@@ -601,6 +599,8 @@ impl<'a> CompletionContext<'a> {\n         self.completion_location =\n             determine_location(&self.sema, original_file, offset, &name_like);\n         self.prev_sibling = determine_prev_sibling(&name_like);\n+        self.name_syntax =\n+            find_node_at_offset(original_file, name_like.syntax().text_range().start());\n         match name_like {\n             ast::NameLike::Lifetime(lifetime) => {\n                 self.classify_lifetime(original_file, lifetime, offset);\n@@ -620,8 +620,6 @@ impl<'a> CompletionContext<'a> {\n         lifetime: ast::Lifetime,\n         offset: TextSize,\n     ) {\n-        self.lifetime_syntax =\n-            find_node_at_offset(original_file, lifetime.syntax().text_range().start());\n         if let Some(parent) = lifetime.syntax().parent() {\n             if parent.kind() == ERROR {\n                 return;\n@@ -695,9 +693,6 @@ impl<'a> CompletionContext<'a> {\n     fn classify_name_ref(&mut self, original_file: &SyntaxNode, name_ref: ast::NameRef) {\n         self.fill_impl_def();\n \n-        self.name_ref_syntax =\n-            find_node_at_offset(original_file, name_ref.syntax().text_range().start());\n-\n         self.function_def = self\n             .sema\n             .token_ancestors_with_macros(self.token.clone())"}]}