{"sha": "f2ed1abe34253294ae45d45429fd87b77d593e3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZWQxYWJlMzQyNTMyOTRhZTQ1ZDQ1NDI5ZmQ4N2I3N2Q1OTNlM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T19:01:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T19:01:59Z"}, "message": "Auto merge of #1218 - RalfJung:panic, r=RalfJung\n\nproperly panic in panic_if_uninhabited and align_offset shims", "tree": {"sha": "1ec528549daa950d46ee35edd4a0ead73ea39f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec528549daa950d46ee35edd4a0ead73ea39f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2ed1abe34253294ae45d45429fd87b77d593e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ed1abe34253294ae45d45429fd87b77d593e3c", "html_url": "https://github.com/rust-lang/rust/commit/f2ed1abe34253294ae45d45429fd87b77d593e3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2ed1abe34253294ae45d45429fd87b77d593e3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d080a542681ad57da85c3e3ad3602967650397", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d080a542681ad57da85c3e3ad3602967650397", "html_url": "https://github.com/rust-lang/rust/commit/96d080a542681ad57da85c3e3ad3602967650397"}, {"sha": "83944562476ad783f8cace5d94af3490a41a256b", "url": "https://api.github.com/repos/rust-lang/rust/commits/83944562476ad783f8cace5d94af3490a41a256b", "html_url": "https://github.com/rust-lang/rust/commit/83944562476ad783f8cace5d94af3490a41a256b"}], "stats": {"total": 159, "additions": 97, "deletions": 62}, "files": [{"sha": "05047a6040c1029ff2b547ed182a577e208f1d99", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed1abe34253294ae45d45429fd87b77d593e3c/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed1abe34253294ae45d45429fd87b77d593e3c/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=f2ed1abe34253294ae45d45429fd87b77d593e3c", "patch": "@@ -448,8 +448,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let ty = substs.type_at(0);\n                 let layout = this.layout_of(ty)?;\n                 if layout.abi.is_uninhabited() {\n-                    // FIXME: This should throw a panic in the interpreted program instead.\n-                    throw_unsup_format!(\"Trying to instantiate uninhabited type {}\", ty)\n+                    // Return here because we paniced instead of returning normally from the intrinsic.\n+                    return this.start_panic(&format!(\"Attempted to instantiate uninhabited type {}\", ty), unwind);\n                 }\n             }\n "}, {"sha": "6adf01385855004b4477839ede404f531ea0203b", "filename": "src/shims/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed1abe34253294ae45d45429fd87b77d593e3c/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed1abe34253294ae45d45429fd87b77d593e3c/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=f2ed1abe34253294ae45d45429fd87b77d593e3c", "patch": "@@ -24,12 +24,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // There are some more lang items we want to hook that CTFE does not hook (yet).\n         if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n-            let (dest, ret) = ret.unwrap();\n-            let n = this\n-                .align_offset(args[0], args[1])?\n-                .unwrap_or_else(|| this.truncate(u128::MAX, dest.layout));\n-            this.write_scalar(Scalar::from_uint(n, dest.layout.size), dest)?;\n-            this.go_to_block(ret);\n+            this.align_offset(args[0], args[1], ret, unwind)?;\n             return Ok(None);\n         }\n \n@@ -52,35 +47,40 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         ptr_op: OpTy<'tcx, Tag>,\n         align_op: OpTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, Option<u128>> {\n+        ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n+        unwind: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n+        let (dest, ret) = ret.unwrap();\n \n         let req_align = this\n             .force_bits(this.read_scalar(align_op)?.not_undef()?, this.pointer_size())?\n             as usize;\n \n-        // FIXME: This should actually panic in the interpreted program\n+        // Stop if the alignment is not a power of two.\n         if !req_align.is_power_of_two() {\n-            throw_unsup_format!(\"Required alignment should always be a power of two\")\n+            return this.start_panic(\"align_offset: align is not a power-of-two\", unwind);\n         }\n \n         let ptr_scalar = this.read_scalar(ptr_op)?.not_undef()?;\n \n+        // Default: no result.\n+        let mut result = this.truncate(u128::MAX, dest.layout);\n         if let Ok(ptr) = this.force_ptr(ptr_scalar) {\n+            // Only do anything if we can identify the allocation this goes to.\n             let cur_align =\n                 this.memory.get_size_and_align(ptr.alloc_id, AllocCheck::MaybeDead)?.1.bytes()\n                     as usize;\n             if cur_align >= req_align {\n-                // if the allocation alignment is at least the required alignment we use the\n+                // If the allocation alignment is at least the required alignment we use the\n                 // libcore implementation\n-                return Ok(Some(\n-                    (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8)\n-                        .align_offset(req_align) as u128,\n-                ));\n+                result = (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8).align_offset(req_align) as u128;\n             }\n         }\n-        // If the allocation alignment is smaller than then required alignment or the pointer was\n-        // actually an integer, we return `None`\n-        Ok(None)\n+\n+        // Return result, and jump to caller.\n+        this.write_scalar(Scalar::from_uint(result, dest.layout.size), dest)?;\n+        this.go_to_block(ret);\n+        Ok(())\n     }\n }"}, {"sha": "2968bd9b58d8c6a0c1785881a3e471c6783199f2", "filename": "src/shims/panic.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed1abe34253294ae45d45429fd87b77d593e3c/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed1abe34253294ae45d45429fd87b77d593e3c/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=f2ed1abe34253294ae45d45429fd87b77d593e3c", "patch": "@@ -152,6 +152,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(res)\n     }\n \n+    /// Starta a panic in the interpreter with the given message as payload.\n+    fn start_panic(\n+        &mut self,\n+        msg: &str,\n+        unwind: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+\n+        // First arg: message.\n+        let msg = this.allocate_str(msg, MiriMemoryKind::Machine.into());\n+\n+        // Call the lang item.\n+        let panic = this.tcx.lang_items().panic_fn().unwrap();\n+        let panic = ty::Instance::mono(this.tcx.tcx, panic);\n+        this.call_function(\n+            panic,\n+            &[msg.to_ref()],\n+            None,\n+            StackPopCleanup::Goto { ret: None, unwind },\n+        )\n+    }\n+\n     fn assert_panic(\n         &mut self,\n         span: Span,\n@@ -184,20 +206,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             _ => {\n                 // Forward everything else to `panic` lang item.\n-\n-                // First arg: Message.\n-                let msg = msg.description();\n-                let msg = this.allocate_str(msg, MiriMemoryKind::Machine.into());\n-\n-                // Call the lang item.\n-                let panic = this.tcx.lang_items().panic_fn().unwrap();\n-                let panic = ty::Instance::mono(this.tcx.tcx, panic);\n-                this.call_function(\n-                    panic,\n-                    &[msg.to_ref()],\n-                    None,\n-                    StackPopCleanup::Goto { ret: None, unwind },\n-                )?;\n+                this.start_panic(msg.description(), unwind)?;\n             }\n         }\n         Ok(())"}, {"sha": "33c2beb682ae96d9a218d443b79f66742f964d17", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed1abe34253294ae45d45429fd87b77d593e3c/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed1abe34253294ae45d45429fd87b77d593e3c/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=f2ed1abe34253294ae45d45429fd87b77d593e3c", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Unwind panicking does not currently work on Windows\n-// normalize-stderr-test \"[^ ]*libcore/macros/mod.rs[0-9:]*\" -> \"$$LOC\"\n+// normalize-stderr-test \"[^ ]*libcore/(macros|mem)/mod.rs[0-9:]*\" -> \"$$LOC\"\n #![feature(never_type)]\n #![allow(unconditional_panic)]\n use std::panic::{catch_unwind, AssertUnwindSafe};\n@@ -47,32 +47,49 @@ fn main() {\n     }));\n \n     // Std panics\n-    test(|_old_val| std::panic!(\"Hello from panic: std\"));\n-    test(|old_val| std::panic!(format!(\"Hello from panic: {:?}\", old_val)));\n-    test(|old_val| std::panic!(\"Hello from panic: {:?}\", old_val));\n-    test(|_old_val| std::panic!(1337));\n+    test(None, |_old_val| std::panic!(\"Hello from panic: std\"));\n+    test(None, |old_val| std::panic!(format!(\"Hello from panic: {:?}\", old_val)));\n+    test(None, |old_val| std::panic!(\"Hello from panic: {:?}\", old_val));\n+    test(None, |_old_val| std::panic!(1337));\n \n     // Core panics\n-    test(|_old_val| core::panic!(\"Hello from panic: core\"));\n-    test(|old_val| core::panic!(&format!(\"Hello from panic: {:?}\", old_val)));\n-    test(|old_val| core::panic!(\"Hello from panic: {:?}\", old_val));\n-\n-    // Built-in panics\n-    test(|_old_val| { let _val = [0, 1, 2][4]; loop {} });\n-    test(|_old_val| { let _val = 1/0; loop {} });\n+    test(None, |_old_val| core::panic!(\"Hello from panic: core\"));\n+    test(None, |old_val| core::panic!(&format!(\"Hello from panic: {:?}\", old_val)));\n+    test(None, |old_val| core::panic!(\"Hello from panic: {:?}\", old_val));\n+\n+    // Built-in panics; also make sure the message is right.\n+    test(\n+        Some(\"index out of bounds: the len is 3 but the index is 4\"),\n+        |_old_val| { let _val = [0, 1, 2][4]; loop {} },\n+    );\n+    test(\n+        Some(\"attempt to divide by zero\"),\n+        |_old_val| { let _val = 1/0; loop {} },\n+    );\n+\n+    // libcore panics from shims.\n+    #[allow(deprecated, invalid_value)]\n+    test(\n+        Some(\"Attempted to instantiate uninhabited type !\"),\n+        |_old_val| unsafe { std::mem::uninitialized::<!>() },\n+    );\n+    test(\n+        Some(\"align_offset: align is not a power-of-two\"),\n+        |_old_val| { (0usize as *const u8).align_offset(3); loop {} },\n+    );\n \n     // Assertion and debug assertion\n-    test(|_old_val| { assert!(false); loop {} });\n-    test(|_old_val| { debug_assert!(false); loop {} });\n-    test(|_old_val| { unsafe { (1 as *const i32).read() }; loop {} }); // trigger debug-assertion in libstd\n+    test(None, |_old_val| { assert!(false); loop {} });\n+    test(None, |_old_val| { debug_assert!(false); loop {} });\n+    test(None, |_old_val| { unsafe { (1 as *const i32).read() }; loop {} }); // trigger debug-assertion in libstd\n \n     // Cleanup: reset to default hook.\n     drop(std::panic::take_hook());\n \n     eprintln!(\"Success!\"); // Make sure we get this in stderr\n }\n \n-fn test(do_panic: impl FnOnce(usize) -> !) {\n+fn test(expect_msg: Option<&str>, do_panic: impl FnOnce(usize) -> !) {\n     // Reset test flags.\n     DROPPED.with(|c| c.set(false));\n     HOOK_CALLED.with(|c| c.set(false));\n@@ -84,16 +101,21 @@ fn test(do_panic: impl FnOnce(usize) -> !) {\n     })).expect_err(\"do_panic() did not panic!\");\n \n     // See if we can extract the panic message.\n-    if let Some(s) = res.downcast_ref::<String>() {\n+    let msg = if let Some(s) = res.downcast_ref::<String>() {\n         eprintln!(\"Caught panic message (String): {}\", s);\n+        Some(s.as_str())\n     } else if let Some(s) = res.downcast_ref::<&str>() {\n         eprintln!(\"Caught panic message (&str): {}\", s);\n+        Some(*s)\n     } else {\n         eprintln!(\"Failed get caught panic message.\");\n+        None\n+    };\n+    if let Some(expect_msg) = expect_msg {\n+        assert_eq!(expect_msg, msg.unwrap());\n     }\n \n     // Test flags.\n     assert!(DROPPED.with(|c| c.get()));\n     assert!(HOOK_CALLED.with(|c| c.get()));\n }\n-"}, {"sha": "4ff22fe2176a4c77adfc8343cf349c5cc5499230", "filename": "tests/run-pass/panic/catch_panic.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed1abe34253294ae45d45429fd87b77d593e3c/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed1abe34253294ae45d45429fd87b77d593e3c/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr?ref=f2ed1abe34253294ae45d45429fd87b77d593e3c", "patch": "@@ -1,24 +1,28 @@\n-thread 'main' panicked at 'Hello from panic: std', $DIR/catch_panic.rs:50:21\n+thread 'main' panicked at 'Hello from panic: std', $DIR/catch_panic.rs:50:27\n Caught panic message (&str): Hello from panic: std\n-thread 'main' panicked at 'Hello from panic: 1', $DIR/catch_panic.rs:51:20\n+thread 'main' panicked at 'Hello from panic: 1', $DIR/catch_panic.rs:51:26\n Caught panic message (String): Hello from panic: 1\n-thread 'main' panicked at 'Hello from panic: 2', $DIR/catch_panic.rs:52:20\n+thread 'main' panicked at 'Hello from panic: 2', $DIR/catch_panic.rs:52:26\n Caught panic message (String): Hello from panic: 2\n-thread 'main' panicked at 'Box<Any>', $DIR/catch_panic.rs:53:21\n+thread 'main' panicked at 'Box<Any>', $DIR/catch_panic.rs:53:27\n Failed get caught panic message.\n-thread 'main' panicked at 'Hello from panic: core', $DIR/catch_panic.rs:56:21\n+thread 'main' panicked at 'Hello from panic: core', $DIR/catch_panic.rs:56:27\n Caught panic message (String): Hello from panic: core\n-thread 'main' panicked at 'Hello from panic: 5', $DIR/catch_panic.rs:57:20\n+thread 'main' panicked at 'Hello from panic: 5', $DIR/catch_panic.rs:57:26\n Caught panic message (String): Hello from panic: 5\n-thread 'main' panicked at 'Hello from panic: 6', $DIR/catch_panic.rs:58:20\n+thread 'main' panicked at 'Hello from panic: 6', $DIR/catch_panic.rs:58:26\n Caught panic message (String): Hello from panic: 6\n-thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4', $DIR/catch_panic.rs:61:34\n+thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4', $DIR/catch_panic.rs:63:33\n Caught panic message (String): index out of bounds: the len is 3 but the index is 4\n-thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:62:34\n+thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:67:33\n Caught panic message (String): attempt to divide by zero\n-thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:65:23\n+thread 'main' panicked at 'Attempted to instantiate uninhabited type !', $LOC\n+Caught panic message (String): Attempted to instantiate uninhabited type !\n+thread 'main' panicked at 'align_offset: align is not a power-of-two', $LOC\n+Caught panic message (String): align_offset: align is not a power-of-two\n+thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:82:29\n Caught panic message (&str): assertion failed: false\n-thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:66:23\n+thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:83:29\n Caught panic message (&str): assertion failed: false\n thread 'main' panicked at 'attempt to copy from unaligned or null pointer', $LOC\n Caught panic message (String): attempt to copy from unaligned or null pointer"}, {"sha": "8cbe9a099bb6c1240683a733db1bca8df6fe44da", "filename": "tests/run-pass/transmute_fat2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed1abe34253294ae45d45429fd87b77d593e3c/tests%2Frun-pass%2Ftransmute_fat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed1abe34253294ae45d45429fd87b77d593e3c/tests%2Frun-pass%2Ftransmute_fat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftransmute_fat2.rs?ref=f2ed1abe34253294ae45d45429fd87b77d593e3c", "previous_filename": "tests/run-pass/panic/transmute_fat2.rs"}, {"sha": "08849a5b517a4e9e3a9fa6dd90e9879f4dedfdbe", "filename": "tests/run-pass/transmute_fat2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed1abe34253294ae45d45429fd87b77d593e3c/tests%2Frun-pass%2Ftransmute_fat2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed1abe34253294ae45d45429fd87b77d593e3c/tests%2Frun-pass%2Ftransmute_fat2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftransmute_fat2.stderr?ref=f2ed1abe34253294ae45d45429fd87b77d593e3c", "previous_filename": "tests/run-pass/panic/transmute_fat2.stderr"}]}