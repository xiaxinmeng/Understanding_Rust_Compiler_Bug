{"sha": "fbd2d16c3f9a4ce04547fa30aa60e8cb0362fdc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDJkMTZjM2Y5YTRjZTA0NTQ3ZmEzMGFhNjBlOGNiMDM2MmZkYzc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-19T12:13:08Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:32Z"}, "message": "Add ambiguity errors for macros", "tree": {"sha": "f67d766cd8c5c462865ffd775a15ac9932c7347f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f67d766cd8c5c462865ffd775a15ac9932c7347f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd2d16c3f9a4ce04547fa30aa60e8cb0362fdc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd2d16c3f9a4ce04547fa30aa60e8cb0362fdc7", "html_url": "https://github.com/rust-lang/rust/commit/fbd2d16c3f9a4ce04547fa30aa60e8cb0362fdc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd2d16c3f9a4ce04547fa30aa60e8cb0362fdc7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6256bff7a355a0dca497d8352080883d437d7765", "url": "https://api.github.com/repos/rust-lang/rust/commits/6256bff7a355a0dca497d8352080883d437d7765", "html_url": "https://github.com/rust-lang/rust/commit/6256bff7a355a0dca497d8352080883d437d7765"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "4e86827bf2fe396a061d6c60b19d146129ef6439", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fbd2d16c3f9a4ce04547fa30aa60e8cb0362fdc7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd2d16c3f9a4ce04547fa30aa60e8cb0362fdc7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fbd2d16c3f9a4ce04547fa30aa60e8cb0362fdc7", "patch": "@@ -884,9 +884,9 @@ fn ambiguity_error(cx: &DocContext, attrs: &Attributes,\n                        &format!(\"`{}` is both {} {} and {} {}\",\n                                 path_str, article1, kind1,\n                                 article2, kind2))\n-      .help(&format!(\"try `{0}` if you want to select the {1}, \\\n-                      or `{2}@{3}` if you want to \\\n-                      select the {2}\",\n+      .help(&format!(\"try `{}` if you want to select the {}, \\\n+                      or `{}` if you want to \\\n+                      select the {}\",\n                       disambig1, kind1, disambig2,\n                       kind2))\n              .emit();\n@@ -920,8 +920,8 @@ impl Clean<Attributes> for [ast::Attribute] {\n                         link.trim_left_matches(prefix)\n                     } else if let Some(prefix) =\n                         [\"const@\", \"static@\",\n-                         \"value@\", \"function@\"].iter()\n-                                               .find(|p| link.starts_with(**p)) {\n+                         \"value@\", \"function@\", \"mod@\", \"fn@\", \"module@\"]\n+                            .iter().find(|p| link.starts_with(**p)) {\n                         kind = PathKind::Value;\n                         link.trim_left_matches(prefix)\n                     } else if link.ends_with(\"()\") {\n@@ -1007,28 +1007,44 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             }\n                         }\n                         PathKind::Unknown => {\n-                            // try both!\n-                            // It is imperative we search for not-a-value first\n-                            // Otherwise we will find struct ctors for when we are looking\n-                            // for structs, and the link won't work.\n-                            if let Ok(path) = resolve(false) {\n+                            // try everything!\n+                            if let Some(macro_def) = macro_resolve() {\n+                                if let Ok(type_path) = resolve(false) {\n+                                    let (type_kind, article, type_disambig)\n+                                        = type_ns_kind(type_path.def, path_str);\n+                                    ambiguity_error(cx, &attrs, path_str,\n+                                                    article, type_kind, &type_disambig,\n+                                                    \"a\", \"macro\", &format!(\"macro@{}\", path_str));\n+                                    continue;\n+                                } else if let Ok(value_path) = resolve(true) {\n+                                    let (value_kind, value_disambig)\n+                                        = value_ns_kind(value_path.def, path_str)\n+                                            .expect(\"struct and mod cases should have been \\\n+                                                     caught in previous branch\");\n+                                    ambiguity_error(cx, &attrs, path_str,\n+                                                    \"a\", value_kind, &value_disambig,\n+                                                    \"a\", \"macro\", &format!(\"macro@{}\", path_str));\n+                                }\n+                                macro_def\n+                            } else if let Ok(type_path) = resolve(false) {\n+                                // It is imperative we search for not-a-value first\n+                                // Otherwise we will find struct ctors for when we are looking\n+                                // for structs, and the link won't work.\n                                 // if there is something in both namespaces\n                                 if let Ok(value_path) = resolve(true) {\n                                     let kind = value_ns_kind(value_path.def, path_str);\n                                     if let Some((value_kind, value_disambig)) = kind {\n                                         let (type_kind, article, type_disambig)\n-                                            = type_ns_kind(path.def);\n-                                        ambiguity_error(cx, &attrs,\n-                                                        article, type_kind, type_disambig,\n-                                                        \"a\", value_kind, value_disambig);\n+                                            = type_ns_kind(type_path.def, path_str);\n+                                        ambiguity_error(cx, &attrs, path_str,\n+                                                        article, type_kind, &type_disambig,\n+                                                        \"a\", value_kind, &value_disambig);\n                                         continue;\n                                     }\n                                 }\n-                                path.def\n-                            } else if let Ok(path) = resolve(true) {\n-                                path.def\n-                            } else if let Some(def) = macro_resolve() {\n-                                def\n+                                type_path.def\n+                            } else if let Ok(value_path) = resolve(true) {\n+                                value_path.def\n                             } else {\n                                 // this could just be a normal link\n                                 continue;"}]}