{"sha": "a7ad899f9dbce1b4a0beb56650bc72732f204d24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YWQ4OTlmOWRiY2UxYjRhMGJlYjU2NjUwYmM3MjczMmYyMDRkMjQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-08-14T23:41:41Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-08-15T01:13:25Z"}, "message": "std/sys/unix/time: make it easier for LLVM to optimize `Instant` subtraction.", "tree": {"sha": "33109d8c18696dc751fb97ccd92e64fe88032c7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33109d8c18696dc751fb97ccd92e64fe88032c7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7ad899f9dbce1b4a0beb56650bc72732f204d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ad899f9dbce1b4a0beb56650bc72732f204d24", "html_url": "https://github.com/rust-lang/rust/commit/a7ad899f9dbce1b4a0beb56650bc72732f204d24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7ad899f9dbce1b4a0beb56650bc72732f204d24/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e21bd0633b8d970646ee6eb706c9e8acfad19af", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e21bd0633b8d970646ee6eb706c9e8acfad19af", "html_url": "https://github.com/rust-lang/rust/commit/8e21bd0633b8d970646ee6eb706c9e8acfad19af"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "f2a9cb5a0e8795a4126aed38ebc0224b723b8cd9", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a7ad899f9dbce1b4a0beb56650bc72732f204d24/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ad899f9dbce1b4a0beb56650bc72732f204d24/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=a7ad899f9dbce1b4a0beb56650bc72732f204d24", "patch": "@@ -20,17 +20,29 @@ impl Timespec {\n \n     fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {\n         if self >= other {\n-            Ok(if self.t.tv_nsec >= other.t.tv_nsec {\n-                Duration::new(\n-                    (self.t.tv_sec - other.t.tv_sec) as u64,\n-                    (self.t.tv_nsec - other.t.tv_nsec) as u32,\n-                )\n+            // NOTE(eddyb) two aspects of this `if`-`else` are required for LLVM\n+            // to optimize it into a branchless form (see also #75545):\n+            //\n+            // 1. `self.t.tv_sec - other.t.tv_sec` shows up as a common expression\n+            //    in both branches, i.e. the `else` must have its `- 1`\n+            //    subtraction after the common one, not interleaved with it\n+            //    (it used to be `self.t.tv_sec - 1 - other.t.tv_sec`)\n+            //\n+            // 2. the `Duration::new` call (or any other additional complexity)\n+            //    is outside of the `if`-`else`, not duplicated in both branches\n+            //\n+            // Ideally this code could be rearranged such that it more\n+            // directly expresses the lower-cost behavior we want from it.\n+            let (secs, nsec) = if self.t.tv_nsec >= other.t.tv_nsec {\n+                ((self.t.tv_sec - other.t.tv_sec) as u64, (self.t.tv_nsec - other.t.tv_nsec) as u32)\n             } else {\n-                Duration::new(\n-                    (self.t.tv_sec - 1 - other.t.tv_sec) as u64,\n+                (\n+                    (self.t.tv_sec - other.t.tv_sec - 1) as u64,\n                     self.t.tv_nsec as u32 + (NSEC_PER_SEC as u32) - other.t.tv_nsec as u32,\n                 )\n-            })\n+            };\n+\n+            Ok(Duration::new(secs, nsec))\n         } else {\n             match other.sub_timespec(self) {\n                 Ok(d) => Err(d),"}]}