{"sha": "5fac20f87c2551addcb1e890e806257978f21503", "node_id": "C_kwDOAAsO6NoAKDVmYWMyMGY4N2MyNTUxYWRkY2IxZTg5MGU4MDYyNTc5NzhmMjE1MDM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-16T06:10:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-16T06:10:20Z"}, "message": "Rollup merge of #108050 - martingms:issue-108042-fix, r=compiler-errors\n\nFix index out of bounds ICE in `point_at_expr_source_of_inferred_type`\n\nThere might be more type params than args to a method call, which leads to an index out of bounds panic.\nI'm not familiar with this code at all, so unsure whether this is the right fix, but at least this patch fixes #108042 for me (I hit the same issue with similar code)", "tree": {"sha": "7b23c42d89687d448a818f63aa89dd5b33a3f6a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b23c42d89687d448a818f63aa89dd5b33a3f6a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fac20f87c2551addcb1e890e806257978f21503", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7cjMCRBK7hj4Ov3rIwAA17kIABggTUczXWH3JG+0mZrA8+Zs\neqqWvW46EOZw9Yn25nFZ/FpjUecyOVGJa4/gyChZOOLjM6xQ1krhyVfVyK8/aFj5\nTdCdqytGioQjIrk2z0CTKgFSJMwzh0uP+DDbuyzxx8bIs39rYQ/M1mc41Z9RVd15\n72B/tGTr5GxorM7zJYlE1CXa5qSd3zrTMHWEG3j+O+NgcmY8L0CxHjAXZH9Wildz\nb2DeQkymtXE02wHascICR+XcCFbrMCKIDlKehNdGlYKcODWbb9BQHSkXM5Ub0qGJ\nbBxVlIN6K+rYRSCydT6R+dm1y42asgmrI0fO2h17wQtlSa8jigWnwP/il0lD+xQ=\n=Wnyh\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b23c42d89687d448a818f63aa89dd5b33a3f6a5\nparent 0c5bbca12da926e927c74665fe6abac59bbb49b8\nparent e159c1e0ec3c70c1876790984e769f1e20b19a40\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676527820 +0530\ncommitter GitHub <noreply@github.com> 1676527820 +0530\n\nRollup merge of #108050 - martingms:issue-108042-fix, r=compiler-errors\n\nFix index out of bounds ICE in `point_at_expr_source_of_inferred_type`\n\nThere might be more type params than args to a method call, which leads to an index out of bounds panic.\nI'm not familiar with this code at all, so unsure whether this is the right fix, but at least this patch fixes #108042 for me (I hit the same issue with similar code)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fac20f87c2551addcb1e890e806257978f21503", "html_url": "https://github.com/rust-lang/rust/commit/5fac20f87c2551addcb1e890e806257978f21503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fac20f87c2551addcb1e890e806257978f21503/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c5bbca12da926e927c74665fe6abac59bbb49b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5bbca12da926e927c74665fe6abac59bbb49b8", "html_url": "https://github.com/rust-lang/rust/commit/0c5bbca12da926e927c74665fe6abac59bbb49b8"}, {"sha": "e159c1e0ec3c70c1876790984e769f1e20b19a40", "url": "https://api.github.com/repos/rust-lang/rust/commits/e159c1e0ec3c70c1876790984e769f1e20b19a40", "html_url": "https://github.com/rust-lang/rust/commit/e159c1e0ec3c70c1876790984e769f1e20b19a40"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "76e87a9e566295dcd978a36df4f3f16650f40152", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fac20f87c2551addcb1e890e806257978f21503/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fac20f87c2551addcb1e890e806257978f21503/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=5fac20f87c2551addcb1e890e806257978f21503", "patch": "@@ -298,6 +298,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // call's arguments and we can provide a more explicit span.\n                 let sig = self.tcx.fn_sig(def_id).subst_identity();\n                 let def_self_ty = sig.input(0).skip_binder();\n+                let param_tys = sig.inputs().skip_binder().iter().skip(1);\n+                // If there's an arity mismatch, pointing out the call as the source of an inference\n+                // can be misleading, so we skip it.\n+                if param_tys.len() != args.len() {\n+                    continue;\n+                }\n                 let rcvr_ty = self.node_ty(rcvr.hir_id);\n                 // Get the evaluated type *after* calling the method call, so that the influence\n                 // of the arguments can be reflected in the receiver type. The receiver\n@@ -323,13 +329,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut param_found = FxHashMap::default();\n                 if self.can_eq(self.param_env, ty, found) {\n                     // We only point at the first place where the found type was inferred.\n-                    for (i, param_ty) in sig.inputs().skip_binder().iter().skip(1).enumerate() {\n+                    for (param_ty, arg) in param_tys.zip(args) {\n                         if def_self_ty.contains(*param_ty) && let ty::Param(_) = param_ty.kind() {\n                             // We found an argument that references a type parameter in `Self`,\n                             // so we assume that this is the argument that caused the found\n                             // type, which we know already because of `can_eq` above was first\n                             // inferred in this method call.\n-                            let arg = &args[i];\n                             let arg_ty = self.node_ty(arg.hir_id);\n                             if !arg.span.overlaps(mismatch_span) {\n                                 err.span_label("}, {"sha": "7903e9e83cfb3e001865b0e8d5298fca155a1bd0", "filename": "tests/ui/type/type-check/point-at-inference-4.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5fac20f87c2551addcb1e890e806257978f21503/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fac20f87c2551addcb1e890e806257978f21503/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.rs?ref=5fac20f87c2551addcb1e890e806257978f21503", "patch": "@@ -0,0 +1,21 @@\n+struct S<A, B>(Option<(A, B)>);\n+\n+impl<A, B> S<A, B> {\n+    fn infer(&self, a: A, b: B) {}\n+    //~^ NOTE associated function defined here\n+    //~| NOTE\n+    //~| NOTE\n+}\n+\n+fn main() {\n+    let s = S(None);\n+    s.infer(0i32);\n+    //~^ ERROR this method takes 2 arguments but 1 argument was supplied\n+    //~| NOTE an argument is missing\n+    //~| HELP provide the argument\n+    let t: S<u32, _> = s;\n+    //~^ ERROR mismatched types\n+    //~| NOTE expected `S<u32, _>`, found `S<i32, _>`\n+    //~| NOTE expected due to this\n+    //~| NOTE expected struct `S<u32, _>`\n+}"}, {"sha": "fac9701e4a11e87e4e09247987a96449a4d1ce1a", "filename": "tests/ui/type/type-check/point-at-inference-4.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5fac20f87c2551addcb1e890e806257978f21503/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fac20f87c2551addcb1e890e806257978f21503/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.stderr?ref=5fac20f87c2551addcb1e890e806257978f21503", "patch": "@@ -0,0 +1,31 @@\n+error[E0061]: this method takes 2 arguments but 1 argument was supplied\n+  --> $DIR/point-at-inference-4.rs:12:7\n+   |\n+LL |     s.infer(0i32);\n+   |       ^^^^^------ an argument is missing\n+   |\n+note: associated function defined here\n+  --> $DIR/point-at-inference-4.rs:4:8\n+   |\n+LL |     fn infer(&self, a: A, b: B) {}\n+   |        ^^^^^        ----  ----\n+help: provide the argument\n+   |\n+LL |     s.infer(0i32, /* b */);\n+   |            ~~~~~~~~~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-at-inference-4.rs:16:24\n+   |\n+LL |     let t: S<u32, _> = s;\n+   |            ---------   ^ expected `S<u32, _>`, found `S<i32, _>`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `S<u32, _>`\n+              found struct `S<i32, _>`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}]}