{"sha": "349ba6bb51f53d93286600a0a078fefafff9e0d3", "node_id": "C_kwDOAAsO6NoAKDM0OWJhNmJiNTFmNTNkOTMyODY2MDBhMGEwNzhmZWZhZmZmOWUwZDM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-21T08:27:39Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-21T14:21:44Z"}, "message": "Remove needless special cases and dead code", "tree": {"sha": "27385a6cf2940a26b4b967a0eaf23c7696954ce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27385a6cf2940a26b4b967a0eaf23c7696954ce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/349ba6bb51f53d93286600a0a078fefafff9e0d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/349ba6bb51f53d93286600a0a078fefafff9e0d3", "html_url": "https://github.com/rust-lang/rust/commit/349ba6bb51f53d93286600a0a078fefafff9e0d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/349ba6bb51f53d93286600a0a078fefafff9e0d3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0940040c0486a536be4f8685c7dd9a078f9e87c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0940040c0486a536be4f8685c7dd9a078f9e87c2", "html_url": "https://github.com/rust-lang/rust/commit/0940040c0486a536be4f8685c7dd9a078f9e87c2"}], "stats": {"total": 52, "additions": 3, "deletions": 49}, "files": [{"sha": "54e711c2d50f053a46326ed4174d84b7d03b6605", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 49, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/349ba6bb51f53d93286600a0a078fefafff9e0d3/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349ba6bb51f53d93286600a0a078fefafff9e0d3/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=349ba6bb51f53d93286600a0a078fefafff9e0d3", "patch": "@@ -251,20 +251,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn visit_struct_field_def(&mut self, field: &'a FieldDef) {\n-        if let Some(ident) = field.ident {\n-            if ident.name == kw::Underscore {\n-                self.visit_vis(&field.vis);\n-                self.visit_ident(ident);\n-                self.visit_ty_common(&field.ty);\n-                self.walk_ty(&field.ty);\n-                walk_list!(self, visit_attribute, &field.attrs);\n-                return;\n-            }\n-        }\n-        self.visit_field_def(field);\n-    }\n-\n     fn err_handler(&self) -> &rustc_errors::Handler {\n         &self.session.diagnostic()\n     }\n@@ -1005,8 +991,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_lifetime(self, lifetime);\n     }\n \n-    fn visit_field_def(&mut self, s: &'a FieldDef) {\n-        visit::walk_field_def(self, s)\n+    fn visit_field_def(&mut self, field: &'a FieldDef) {\n+        visit::walk_field_def(self, field)\n     }\n \n     fn visit_item(&mut self, item: &'a Item) {\n@@ -1194,42 +1180,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.check_mod_file_item_asciionly(item.ident);\n                 }\n             }\n-            ItemKind::Struct(ref vdata, ref generics) => match vdata {\n-                // Duplicating the `Visitor` logic allows catching all cases\n-                // of `Anonymous(Struct, Union)` outside of a field struct or union.\n-                //\n-                // Inside `visit_ty` the validator catches every `Anonymous(Struct, Union)` it\n-                // encounters, and only on `ItemKind::Struct` and `ItemKind::Union`\n-                // it uses `visit_ty_common`, which doesn't contain that specific check.\n-                VariantData::Struct(ref fields, ..) => {\n-                    self.visit_vis(&item.vis);\n-                    self.visit_ident(item.ident);\n-                    self.visit_generics(generics);\n-                    self.with_banned_assoc_ty_bound(|this| {\n-                        walk_list!(this, visit_struct_field_def, fields);\n-                    });\n-                    walk_list!(self, visit_attribute, &item.attrs);\n-                    return;\n-                }\n-                _ => {}\n-            },\n-            ItemKind::Union(ref vdata, ref generics) => {\n+            ItemKind::Union(ref vdata, ..) => {\n                 if vdata.fields().is_empty() {\n                     self.err_handler().span_err(item.span, \"unions cannot have zero fields\");\n                 }\n-                match vdata {\n-                    VariantData::Struct(ref fields, ..) => {\n-                        self.visit_vis(&item.vis);\n-                        self.visit_ident(item.ident);\n-                        self.visit_generics(generics);\n-                        self.with_banned_assoc_ty_bound(|this| {\n-                            walk_list!(this, visit_struct_field_def, fields);\n-                        });\n-                        walk_list!(self, visit_attribute, &item.attrs);\n-                        return;\n-                    }\n-                    _ => {}\n-                }\n             }\n             ItemKind::Const(def, .., None) => {\n                 self.check_defaultness(item.span, def);"}]}