{"sha": "9cf99a9c71348c1ed53b6dda7da89d5ad0774b08", "node_id": "C_kwDOAAsO6NoAKDljZjk5YTljNzEzNDhjMWVkNTNiNmRkYTdkYTg5ZDVhZDA3NzRiMDg", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-21T16:44:41Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-21T16:44:41Z"}, "message": "Stringify literals create client-side properly", "tree": {"sha": "ac59d5db7375a533c43bab63e5b259a606021c34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac59d5db7375a533c43bab63e5b259a606021c34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf99a9c71348c1ed53b6dda7da89d5ad0774b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf99a9c71348c1ed53b6dda7da89d5ad0774b08", "html_url": "https://github.com/rust-lang/rust/commit/9cf99a9c71348c1ed53b6dda7da89d5ad0774b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf99a9c71348c1ed53b6dda7da89d5ad0774b08/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d825fd5d01a9796adb55e0ae7fac7ed31dbe9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d825fd5d01a9796adb55e0ae7fac7ed31dbe9c", "html_url": "https://github.com/rust-lang/rust/commit/36d825fd5d01a9796adb55e0ae7fac7ed31dbe9c"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "2e5751756a71c383ad8c197d292bd2290dc4d3e8", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9cf99a9c71348c1ed53b6dda7da89d5ad0774b08/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf99a9c71348c1ed53b6dda7da89d5ad0774b08/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=9cf99a9c71348c1ed53b6dda7da89d5ad0774b08", "patch": "@@ -132,17 +132,11 @@ impl server::TokenStream for RustAnalyzer {\n             }\n \n             bridge::TokenTree::Literal(literal) => {\n-                // FIXME: remove unnecessary clones here\n-                let symbol = ThreadLocalSymbolInterner::get_cloned(&literal.symbol);\n-\n-                let text: tt::SmolStr = if let Some(suffix) = literal.suffix {\n-                    let suffix = ThreadLocalSymbolInterner::get_cloned(&suffix);\n-                    format!(\"{symbol}{suffix}\").into()\n-                } else {\n-                    symbol\n-                };\n+                let literal = LiteralFormatter(literal);\n+                let text = literal\n+                    .with_stringify_parts(|parts| tt::SmolStr::from_iter(parts.iter().copied()));\n \n-                let literal = tt::Literal { text, id: literal.span };\n+                let literal = tt::Literal { text, id: literal.0.span };\n                 let leaf = tt::Leaf::from(literal);\n                 let tree = TokenTree::from(leaf);\n                 Self::TokenStream::from_iter(vec![tree])\n@@ -416,6 +410,53 @@ impl server::Server for RustAnalyzer {\n     }\n }\n \n+struct LiteralFormatter(bridge::Literal<tt::TokenId, Symbol>);\n+\n+impl LiteralFormatter {\n+    /// Invokes the callback with a `&[&str]` consisting of each part of the\n+    /// literal's representation. This is done to allow the `ToString` and\n+    /// `Display` implementations to borrow references to symbol values, and\n+    /// both be optimized to reduce overhead.\n+    fn with_stringify_parts<R>(&self, f: impl FnOnce(&[&str]) -> R) -> R {\n+        /// Returns a string containing exactly `num` '#' characters.\n+        /// Uses a 256-character source string literal which is always safe to\n+        /// index with a `u8` index.\n+        fn get_hashes_str(num: u8) -> &'static str {\n+            const HASHES: &str = \"\\\n+                        ################################################################\\\n+                        ################################################################\\\n+                        ################################################################\\\n+                        ################################################################\\\n+                        \";\n+            const _: () = assert!(HASHES.len() == 256);\n+            &HASHES[..num as usize]\n+        }\n+\n+        self.with_symbol_and_suffix(|symbol, suffix| match self.0.kind {\n+            bridge::LitKind::Byte => f(&[\"b'\", symbol, \"'\", suffix]),\n+            bridge::LitKind::Char => f(&[\"'\", symbol, \"'\", suffix]),\n+            bridge::LitKind::Str => f(&[\"\\\"\", symbol, \"\\\"\", suffix]),\n+            bridge::LitKind::StrRaw(n) => {\n+                let hashes = get_hashes_str(n);\n+                f(&[\"r\", hashes, \"\\\"\", symbol, \"\\\"\", hashes, suffix])\n+            }\n+            bridge::LitKind::ByteStr => f(&[\"b\\\"\", symbol, \"\\\"\", suffix]),\n+            bridge::LitKind::ByteStrRaw(n) => {\n+                let hashes = get_hashes_str(n);\n+                f(&[\"br\", hashes, \"\\\"\", symbol, \"\\\"\", hashes, suffix])\n+            }\n+            _ => f(&[symbol, suffix]),\n+        })\n+    }\n+\n+    fn with_symbol_and_suffix<R>(&self, f: impl FnOnce(&str, &str) -> R) -> R {\n+        ThreadLocalSymbolInterner::with(&self.0.symbol, |symbol| match self.0.suffix.as_ref() {\n+            Some(suffix) => ThreadLocalSymbolInterner::with(suffix, |suffix| f(symbol, suffix)),\n+            None => f(symbol, \"\"),\n+        })\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "94c27fad30bf982c457260a1cf00820bcbc5b851", "filename": "crates/proc-macro-srv/src/tests/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf99a9c71348c1ed53b6dda7da89d5ad0774b08/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf99a9c71348c1ed53b6dda7da89d5ad0774b08/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Ftests%2Fmod.rs?ref=9cf99a9c71348c1ed53b6dda7da89d5ad0774b08", "patch": "@@ -77,7 +77,6 @@ fn test_fn_like_mk_literals() {\n               LITERAL b\"byte_string\" 4294967295\n               LITERAL 'c' 4294967295\n               LITERAL \"string\" 4294967295\n-              LITERAL \"maybe \\\"raw\\\"?\" 4294967295\n               LITERAL 3.14f64 4294967295\n               LITERAL 3.14 4294967295\n               LITERAL 123i64 4294967295"}]}