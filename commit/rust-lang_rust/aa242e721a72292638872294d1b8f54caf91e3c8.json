{"sha": "aa242e721a72292638872294d1b8f54caf91e3c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMjQyZTcyMWE3MjI5MjYzODg3MjI5NGQxYjhmNTRjYWY5MWUzYzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-10-27T16:14:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-10-27T16:14:57Z"}, "message": "libcore: Inline atomic constructors.\n\nServo really wants this.", "tree": {"sha": "3bf5c8d5d82f63bc1ccc2bdf7c758bd332f4d0af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bf5c8d5d82f63bc1ccc2bdf7c758bd332f4d0af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa242e721a72292638872294d1b8f54caf91e3c8", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa242e721a72292638872294d1b8f54caf91e3c8", "html_url": "https://github.com/rust-lang/rust/commit/aa242e721a72292638872294d1b8f54caf91e3c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa242e721a72292638872294d1b8f54caf91e3c8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f", "html_url": "https://github.com/rust-lang/rust/commit/e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "0b2b97794dc87f5e2bb54321f4c05136e7cf638d", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa242e721a72292638872294d1b8f54caf91e3c8/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa242e721a72292638872294d1b8f54caf91e3c8/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=aa242e721a72292638872294d1b8f54caf91e3c8", "patch": "@@ -94,6 +94,7 @@ const UINT_TRUE: uint = -1;\n #[stable]\n impl AtomicBool {\n     /// Create a new `AtomicBool`\n+    #[inline]\n     pub fn new(v: bool) -> AtomicBool {\n         let val = if v { UINT_TRUE } else { 0 };\n         AtomicBool { v: UnsafeCell::new(val), nocopy: marker::NoCopy }\n@@ -305,6 +306,7 @@ impl AtomicBool {\n #[stable]\n impl AtomicInt {\n     /// Create a new `AtomicInt`\n+    #[inline]\n     pub fn new(v: int) -> AtomicInt {\n         AtomicInt {v: UnsafeCell::new(v), nocopy: marker::NoCopy}\n     }\n@@ -426,6 +428,7 @@ impl AtomicInt {\n #[stable]\n impl AtomicUint {\n     /// Create a new `AtomicUint`\n+    #[inline]\n     pub fn new(v: uint) -> AtomicUint {\n         AtomicUint { v: UnsafeCell::new(v), nocopy: marker::NoCopy }\n     }\n@@ -547,6 +550,7 @@ impl AtomicUint {\n #[stable]\n impl<T> AtomicPtr<T> {\n     /// Create a new `AtomicPtr`\n+    #[inline]\n     pub fn new(p: *mut T) -> AtomicPtr<T> {\n         AtomicPtr { p: UnsafeCell::new(p as uint), nocopy: marker::NoCopy }\n     }"}]}