{"sha": "f1fafeee02b88ac7186e479ec595f66d056f842c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZmFmZWVlMDJiODhhYzcxODZlNDc5ZWM1OTVmNjZkMDU2Zjg0MmM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-20T19:58:10Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-20T19:58:10Z"}, "message": "Merge #305 #307\n\n305: Fold curly blocks r=matklad a=matklad\n\n\n\n307: :arrow_up: 1.31.1 r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "31c503abfbca4ea2e2697f17cd26cc038bb33cae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c503abfbca4ea2e2697f17cd26cc038bb33cae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1fafeee02b88ac7186e479ec595f66d056f842c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fafeee02b88ac7186e479ec595f66d056f842c", "html_url": "https://github.com/rust-lang/rust/commit/f1fafeee02b88ac7186e479ec595f66d056f842c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1fafeee02b88ac7186e479ec595f66d056f842c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "61dcaa6addcb3fca522b298bdba12239772eb81e", "url": "https://api.github.com/repos/rust-lang/rust/commits/61dcaa6addcb3fca522b298bdba12239772eb81e", "html_url": "https://github.com/rust-lang/rust/commit/61dcaa6addcb3fca522b298bdba12239772eb81e"}, {"sha": "23b040962ff299feeef1f967bc2d5ba92b01c2bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b040962ff299feeef1f967bc2d5ba92b01c2bc", "html_url": "https://github.com/rust-lang/rust/commit/23b040962ff299feeef1f967bc2d5ba92b01c2bc"}, {"sha": "2956e812955772cdbfb7666141a3a584d78f713f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2956e812955772cdbfb7666141a3a584d78f713f", "html_url": "https://github.com/rust-lang/rust/commit/2956e812955772cdbfb7666141a3a584d78f713f"}], "stats": {"total": 124, "additions": 80, "deletions": 44}, "files": [{"sha": "5e11cbd2f06d5a354d10d09b3cdf31a82ffe1ba2", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1fafeee02b88ac7186e479ec595f66d056f842c/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f1fafeee02b88ac7186e479ec595f66d056f842c/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=f1fafeee02b88ac7186e479ec595f66d056f842c", "patch": "@@ -9,7 +9,7 @@ env:\n \n build: &rust_build\n   language: rust\n-  rust: 1.31.0\n+  rust: 1.31.1\n   script:\n     - cargo gen-tests --verify\n     - cargo gen-syntax --verify"}, {"sha": "da542ecf08a05ab25582663c8b5589ffccb3b8b9", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 42, "deletions": 32, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f1fafeee02b88ac7186e479ec595f66d056f842c/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fafeee02b88ac7186e479ec595f66d056f842c/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=f1fafeee02b88ac7186e479ec595f66d056f842c", "patch": "@@ -10,6 +10,7 @@ use ra_syntax::{\n pub enum FoldKind {\n     Comment,\n     Imports,\n+    Block,\n }\n \n #[derive(Debug)]\n@@ -62,6 +63,8 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n     match kind {\n         COMMENT => Some(FoldKind::Comment),\n         USE_ITEM => Some(FoldKind::Imports),\n+        NAMED_FIELD_DEF_LIST | FIELD_PAT_LIST | ITEM_LIST | EXTERN_ITEM_LIST | USE_TREE_LIST\n+        | BLOCK | ENUM_VARIANT_LIST => Some(FoldKind::Block),\n         _ => None,\n     }\n }\n@@ -170,7 +173,7 @@ mod tests {\n     use test_utils::extract_ranges;\n \n     fn do_check(text: &str, fold_kinds: &[FoldKind]) {\n-        let (ranges, text) = extract_ranges(text);\n+        let (ranges, text) = extract_ranges(text, \"fold\");\n         let file = SourceFileNode::parse(&text);\n         let folds = folding_ranges(&file);\n \n@@ -198,26 +201,27 @@ mod tests {\n     #[test]\n     fn test_fold_comments() {\n         let text = r#\"\n-<|>// Hello\n+<fold>// Hello\n // this is a multiline\n // comment\n-//<|>\n+//</fold>\n \n // But this is not\n \n-fn main() {\n-    <|>// We should\n+fn main() <fold>{\n+    <fold>// We should\n     // also\n     // fold\n-    // this one.<|>\n-    <|>//! But this one is different\n-    //! because it has another flavor<|>\n-    <|>/* As does this\n-    multiline comment */<|>\n-}\"#;\n+    // this one.</fold>\n+    <fold>//! But this one is different\n+    //! because it has another flavor</fold>\n+    <fold>/* As does this\n+    multiline comment */</fold>\n+}</fold>\"#;\n \n         let fold_kinds = &[\n             FoldKind::Comment,\n+            FoldKind::Block,\n             FoldKind::Comment,\n             FoldKind::Comment,\n             FoldKind::Comment,\n@@ -228,60 +232,66 @@ fn main() {\n     #[test]\n     fn test_fold_imports() {\n         let text = r#\"\n-<|>use std::{\n+<fold>use std::<fold>{\n     str,\n     vec,\n     io as iop\n-};<|>\n+}</fold>;</fold>\n \n-fn main() {\n-}\"#;\n+fn main() <fold>{\n+}</fold>\"#;\n \n-        let folds = &[FoldKind::Imports];\n+        let folds = &[FoldKind::Imports, FoldKind::Block, FoldKind::Block];\n         do_check(text, folds);\n     }\n \n     #[test]\n     fn test_fold_import_groups() {\n         let text = r#\"\n-<|>use std::str;\n+<fold>use std::str;\n use std::vec;\n-use std::io as iop;<|>\n+use std::io as iop;</fold>\n \n-<|>use std::mem;\n-use std::f64;<|>\n+<fold>use std::mem;\n+use std::f64;</fold>\n \n use std::collections::HashMap;\n // Some random comment\n use std::collections::VecDeque;\n \n-fn main() {\n-}\"#;\n+fn main() <fold>{\n+}</fold>\"#;\n \n-        let folds = &[FoldKind::Imports, FoldKind::Imports];\n+        let folds = &[FoldKind::Imports, FoldKind::Imports, FoldKind::Block];\n         do_check(text, folds);\n     }\n \n     #[test]\n     fn test_fold_import_and_groups() {\n         let text = r#\"\n-<|>use std::str;\n+<fold>use std::str;\n use std::vec;\n-use std::io as iop;<|>\n+use std::io as iop;</fold>\n \n-<|>use std::mem;\n-use std::f64;<|>\n+<fold>use std::mem;\n+use std::f64;</fold>\n \n-<|>use std::collections::{\n+<fold>use std::collections::<fold>{\n     HashMap,\n     VecDeque,\n-};<|>\n+}</fold>;</fold>\n // Some random comment\n \n-fn main() {\n-}\"#;\n+fn main() <fold>{\n+}</fold>\"#;\n \n-        let folds = &[FoldKind::Imports, FoldKind::Imports, FoldKind::Imports];\n+        let folds = &[\n+            FoldKind::Imports,\n+            FoldKind::Imports,\n+            FoldKind::Imports,\n+            FoldKind::Block,\n+            FoldKind::Block,\n+        ];\n         do_check(text, folds);\n     }\n "}, {"sha": "801966304cf535fc69a0903cd20a37cce9ddfee0", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1fafeee02b88ac7186e479ec595f66d056f842c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fafeee02b88ac7186e479ec595f66d056f842c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=f1fafeee02b88ac7186e479ec595f66d056f842c", "patch": "@@ -446,16 +446,17 @@ pub fn handle_folding_range(\n             .into_iter()\n             .map(|fold| {\n                 let kind = match fold.kind {\n-                    FoldKind::Comment => FoldingRangeKind::Comment,\n-                    FoldKind::Imports => FoldingRangeKind::Imports,\n+                    FoldKind::Comment => Some(FoldingRangeKind::Comment),\n+                    FoldKind::Imports => Some(FoldingRangeKind::Imports),\n+                    FoldKind::Block => None,\n                 };\n                 let range = fold.range.conv_with(&line_index);\n                 FoldingRange {\n                     start_line: range.start.line,\n                     start_character: Some(range.start.character),\n                     end_line: range.end.line,\n                     end_character: Some(range.start.character),\n-                    kind: Some(kind),\n+                    kind,\n                 }\n             })\n             .collect(),"}, {"sha": "1ae800d7cc8f66af0207e0ee7ded96112a1ff5da", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f1fafeee02b88ac7186e479ec595f66d056f842c/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fafeee02b88ac7186e479ec595f66d056f842c/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=f1fafeee02b88ac7186e479ec595f66d056f842c", "patch": "@@ -66,15 +66,40 @@ pub fn try_extract_range(text: &str) -> Option<(TextRange, String)> {\n     Some((TextRange::from_to(start, end), text))\n }\n \n-pub fn extract_ranges(text: &str) -> (Vec<TextRange>, String) {\n+/// Extracts ranges, marked with `<tag> </tag>` paris from the `text`\n+pub fn extract_ranges(mut text: &str, tag: &str) -> (Vec<TextRange>, String) {\n+    let open = format!(\"<{}>\", tag);\n+    let close = format!(\"</{}>\", tag);\n     let mut ranges = Vec::new();\n-    let mut text = String::from(text);\n-    while let Some((range, new_text)) = try_extract_range(&text) {\n-        text = new_text;\n-        ranges.push(range);\n+    let mut res = String::new();\n+    let mut stack = Vec::new();\n+    loop {\n+        match text.find('<') {\n+            None => {\n+                res.push_str(text);\n+                break;\n+            }\n+            Some(i) => {\n+                res.push_str(&text[..i]);\n+                text = &text[i..];\n+                if text.starts_with(&open) {\n+                    text = &text[open.len()..];\n+                    let from = TextUnit::of_str(&res);\n+                    stack.push(from);\n+                } else if text.starts_with(&close) {\n+                    text = &text[close.len()..];\n+                    let from = stack\n+                        .pop()\n+                        .unwrap_or_else(|| panic!(\"unmatched </{}>\", tag));\n+                    let to = TextUnit::of_str(&res);\n+                    ranges.push(TextRange::from_to(from, to));\n+                }\n+            }\n+        }\n     }\n-\n-    (ranges, text)\n+    assert!(stack.is_empty(), \"unmatched <{}>\", tag);\n+    ranges.sort_by_key(|r| (r.start(), r.end()));\n+    (ranges, res)\n }\n \n pub fn add_cursor(text: &str, offset: TextUnit) -> String {"}, {"sha": "2795afe0b6cad12afb796c9895982943395f2e0c", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1fafeee02b88ac7186e479ec595f66d056f842c/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fafeee02b88ac7186e479ec595f66d056f842c/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=f1fafeee02b88ac7186e479ec595f66d056f842c", "patch": "@@ -15,7 +15,7 @@ pub type Result<T> = std::result::Result<T, failure::Error>;\n pub const GRAMMAR: &str = \"crates/ra_syntax/src/grammar.ron\";\n pub const SYNTAX_KINDS: &str = \"crates/ra_syntax/src/syntax_kinds/generated.rs.tera\";\n pub const AST: &str = \"crates/ra_syntax/src/ast/generated.rs.tera\";\n-const TOOLCHAIN: &str = \"1.31.0\";\n+const TOOLCHAIN: &str = \"1.31.1\";\n \n #[derive(Debug)]\n pub struct Test {"}]}