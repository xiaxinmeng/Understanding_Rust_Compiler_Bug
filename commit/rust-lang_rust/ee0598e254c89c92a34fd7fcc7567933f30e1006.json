{"sha": "ee0598e254c89c92a34fd7fcc7567933f30e1006", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDU5OGUyNTRjODljOTJhMzRmZDdmY2M3NTY3OTMzZjMwZTEwMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-09T13:42:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-09T13:42:28Z"}, "message": "Auto merge of #6571 - ThibsG:BoxedLocalTrait, r=phansch\n\nFix FP for `boxed_local` lint in default trait fn impl\n\nFix FP on default trait function implementation on `boxed_local` lint.\n\nMaybe I checked too much when looking if `self` is carrying `Self` in its bound type.\nI can't find a good test case for this, so it could be too much conservative.\nLet me know if you think only detecting `self` parameter is enough.\n\nFixes: #4804\n\nchangelog: none", "tree": {"sha": "a6db08a006a3db39ec45efa736f7fa9bc7945cad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6db08a006a3db39ec45efa736f7fa9bc7945cad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee0598e254c89c92a34fd7fcc7567933f30e1006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0598e254c89c92a34fd7fcc7567933f30e1006", "html_url": "https://github.com/rust-lang/rust/commit/ee0598e254c89c92a34fd7fcc7567933f30e1006", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee0598e254c89c92a34fd7fcc7567933f30e1006/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68bcd202fe2fcf2748ce091071ea2242c228248b", "url": "https://api.github.com/repos/rust-lang/rust/commits/68bcd202fe2fcf2748ce091071ea2242c228248b", "html_url": "https://github.com/rust-lang/rust/commit/68bcd202fe2fcf2748ce091071ea2242c228248b"}, {"sha": "8a6fea4fb85adb8446797f698ab92a0869ccc9c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6fea4fb85adb8446797f698ab92a0869ccc9c9", "html_url": "https://github.com/rust-lang/rust/commit/8a6fea4fb85adb8446797f698ab92a0869ccc9c9"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "9fcd17a756a3d97707b809a289fb7ba5d71fc33a", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ee0598e254c89c92a34fd7fcc7567933f30e1006/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0598e254c89c92a34fd7fcc7567933f30e1006/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=ee0598e254c89c92a34fd7fcc7567933f30e1006", "patch": "@@ -1,15 +1,16 @@\n use rustc_hir::intravisit;\n-use rustc_hir::{self, Body, FnDecl, HirId, HirIdSet, ItemKind, Node};\n+use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, ItemKind, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n+use rustc_span::symbol::kw;\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n-use crate::utils::span_lint;\n+use crate::utils::{contains_ty, span_lint};\n \n #[derive(Copy, Clone)]\n pub struct BoxedLocal {\n@@ -51,6 +52,7 @@ fn is_non_trait_box(ty: Ty<'_>) -> bool {\n struct EscapeDelegate<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     set: HirIdSet,\n+    trait_self_ty: Option<Ty<'a>>,\n     too_large_for_stack: u64,\n }\n \n@@ -72,19 +74,34 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n             }\n         }\n \n-        // If the method is an impl for a trait, don't warn.\n         let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n         let parent_node = cx.tcx.hir().find(parent_id);\n \n+        let mut trait_self_ty = None;\n         if let Some(Node::Item(item)) = parent_node {\n+            // If the method is an impl for a trait, don't warn.\n             if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n                 return;\n             }\n+\n+            // find `self` ty for this trait if relevant\n+            if let ItemKind::Trait(_, _, _, _, items) = item.kind {\n+                for trait_item in items {\n+                    if trait_item.id.hir_id == hir_id {\n+                        // be sure we have `self` parameter in this function\n+                        if let AssocItemKind::Fn { has_self: true } = trait_item.kind {\n+                            trait_self_ty =\n+                                Some(TraitRef::identity(cx.tcx, trait_item.id.hir_id.owner.to_def_id()).self_ty());\n+                        }\n+                    }\n+                }\n+            }\n         }\n \n         let mut v = EscapeDelegate {\n             cx,\n             set: HirIdSet::default(),\n+            trait_self_ty,\n             too_large_for_stack: self.too_large_for_stack,\n         };\n \n@@ -153,6 +170,14 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                     return;\n                 }\n \n+                // skip if there is a `self` parameter binding to a type\n+                // that contains `Self` (i.e.: `self: Box<Self>`), see #4804\n+                if let Some(trait_self_ty) = self.trait_self_ty {\n+                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(cmt.place.ty(), trait_self_ty) {\n+                        return;\n+                    }\n+                }\n+\n                 if is_non_trait_box(cmt.place.ty()) && !self.is_large_box(cmt.place.ty()) {\n                     self.set.insert(cmt.hir_id);\n                 }"}, {"sha": "d26f48fc68f85ebe4ebd07a4027c81539e311dad", "filename": "tests/ui/escape_analysis.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee0598e254c89c92a34fd7fcc7567933f30e1006/tests%2Fui%2Fescape_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0598e254c89c92a34fd7fcc7567933f30e1006/tests%2Fui%2Fescape_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.rs?ref=ee0598e254c89c92a34fd7fcc7567933f30e1006", "patch": "@@ -182,3 +182,23 @@ pub extern \"C\" fn do_not_warn_me(_c_pointer: Box<String>) -> () {}\n \n #[rustfmt::skip] // Forces rustfmt to not add ABI\n pub extern fn do_not_warn_me_no_abi(_c_pointer: Box<String>) -> () {}\n+\n+// Issue #4804 - default implementation in trait\n+mod issue4804 {\n+    trait DefaultTraitImplTest {\n+        // don't warn on `self`\n+        fn default_impl(self: Box<Self>) -> u32 {\n+            5\n+        }\n+\n+        // warn on `x: Box<u32>`\n+        fn default_impl_x(self: Box<Self>, x: Box<u32>) -> u32 {\n+            4\n+        }\n+    }\n+\n+    trait WarnTrait {\n+        // warn on `x: Box<u32>`\n+        fn foo(x: Box<u32>) {}\n+    }\n+}"}, {"sha": "4a82b4419f9974488e68f4f7ec8d3a5932687fcd", "filename": "tests/ui/escape_analysis.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee0598e254c89c92a34fd7fcc7567933f30e1006/tests%2Fui%2Fescape_analysis.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee0598e254c89c92a34fd7fcc7567933f30e1006/tests%2Fui%2Fescape_analysis.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.stderr?ref=ee0598e254c89c92a34fd7fcc7567933f30e1006", "patch": "@@ -12,5 +12,17 @@ error: local variable doesn't need to be boxed here\n LL | pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {}\n    |            ^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:195:44\n+   |\n+LL |         fn default_impl_x(self: Box<Self>, x: Box<u32>) -> u32 {\n+   |                                            ^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:202:16\n+   |\n+LL |         fn foo(x: Box<u32>) {}\n+   |                ^\n+\n+error: aborting due to 4 previous errors\n "}]}