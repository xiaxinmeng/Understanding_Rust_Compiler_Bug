{"sha": "ff65eec80194143a52b3433ff3b98437e130b75d", "node_id": "C_kwDOAAsO6NoAKGZmNjVlZWM4MDE5NDE0M2E1MmIzNDMzZmYzYjk4NDM3ZTEzMGI3NWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T16:06:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-23T16:06:49Z"}, "message": "Auto merge of #9496 - yotamofek:never_loop_let_else, r=Jarcho\n\n[`never_loop`]: Fix FP with let..else statements.\n\nFixes #9356\n\nThis has been bugging me for a while, so I thought I'd take a stab at it! I'm completely uncertain about the quality of my code, but I think it's an alright start, so opening this PR to get some feedback from more experienced clippy people :)\n\nchangelog: [`never_loop`]: Fix FP with let..else statements", "tree": {"sha": "ecd9009494b0f8eaa46c37659aa62719549a9186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd9009494b0f8eaa46c37659aa62719549a9186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff65eec80194143a52b3433ff3b98437e130b75d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff65eec80194143a52b3433ff3b98437e130b75d", "html_url": "https://github.com/rust-lang/rust/commit/ff65eec80194143a52b3433ff3b98437e130b75d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff65eec80194143a52b3433ff3b98437e130b75d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8f2f383b55fec8f306f58316c15dfe465eb483a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f2f383b55fec8f306f58316c15dfe465eb483a", "html_url": "https://github.com/rust-lang/rust/commit/c8f2f383b55fec8f306f58316c15dfe465eb483a"}, {"sha": "d63aeceaa1f4f175ad63456e691395912460ef41", "url": "https://api.github.com/repos/rust-lang/rust/commits/d63aeceaa1f4f175ad63456e691395912460ef41", "html_url": "https://github.com/rust-lang/rust/commit/d63aeceaa1f4f175ad63456e691395912460ef41"}], "stats": {"total": 91, "additions": 71, "deletions": 20}, "files": [{"sha": "2386f4f4f4ee5153490bc2c123281fd76dbda131", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ff65eec80194143a52b3433ff3b98437e130b75d/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff65eec80194143a52b3433ff3b98437e130b75d/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=ff65eec80194143a52b3433ff3b98437e130b75d", "patch": "@@ -42,6 +42,7 @@ pub(super) fn check(\n     }\n }\n \n+#[derive(Copy, Clone)]\n enum NeverLoopResult {\n     // A break/return always get triggered but not necessarily for the main loop.\n     AlwaysBreak,\n@@ -51,8 +52,8 @@ enum NeverLoopResult {\n }\n \n #[must_use]\n-fn absorb_break(arg: &NeverLoopResult) -> NeverLoopResult {\n-    match *arg {\n+fn absorb_break(arg: NeverLoopResult) -> NeverLoopResult {\n+    match arg {\n         NeverLoopResult::AlwaysBreak | NeverLoopResult::Otherwise => NeverLoopResult::Otherwise,\n         NeverLoopResult::MayContinueMainLoop => NeverLoopResult::MayContinueMainLoop,\n     }\n@@ -92,19 +93,29 @@ fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult) -> NeverLoopResult\n }\n \n fn never_loop_block(block: &Block<'_>, main_loop_id: HirId) -> NeverLoopResult {\n-    let mut iter = block.stmts.iter().filter_map(stmt_to_expr).chain(block.expr);\n+    let mut iter = block\n+        .stmts\n+        .iter()\n+        .filter_map(stmt_to_expr)\n+        .chain(block.expr.map(|expr| (expr, None)));\n     never_loop_expr_seq(&mut iter, main_loop_id)\n }\n \n-fn never_loop_expr_seq<'a, T: Iterator<Item = &'a Expr<'a>>>(es: &mut T, main_loop_id: HirId) -> NeverLoopResult {\n-    es.map(|e| never_loop_expr(e, main_loop_id))\n-        .fold(NeverLoopResult::Otherwise, combine_seq)\n+fn never_loop_expr_seq<'a, T: Iterator<Item = (&'a Expr<'a>, Option<&'a Block<'a>>)>>(\n+    es: &mut T,\n+    main_loop_id: HirId,\n+) -> NeverLoopResult {\n+    es.map(|(e, els)| {\n+        let e = never_loop_expr(e, main_loop_id);\n+        els.map_or(e, |els| combine_branches(e, never_loop_block(els, main_loop_id)))\n+    })\n+    .fold(NeverLoopResult::Otherwise, combine_seq)\n }\n \n-fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n+fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<(&'tcx Expr<'tcx>, Option<&'tcx Block<'tcx>>)> {\n     match stmt.kind {\n-        StmtKind::Semi(e, ..) | StmtKind::Expr(e, ..) => Some(e),\n-        StmtKind::Local(local) => local.init,\n+        StmtKind::Semi(e, ..) | StmtKind::Expr(e, ..) => Some((e, None)),\n+        StmtKind::Local(local) => local.init.map(|init| (init, local.els)),\n         StmtKind::Item(..) => None,\n     }\n }\n@@ -139,7 +150,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Index(e1, e2) => never_loop_expr_all(&mut [e1, e2].iter().copied(), main_loop_id),\n         ExprKind::Loop(b, _, _, _) => {\n             // Break can come from the inner loop so remove them.\n-            absorb_break(&never_loop_block(b, main_loop_id))\n+            absorb_break(never_loop_block(b, main_loop_id))\n         },\n         ExprKind::If(e, e2, e3) => {\n             let e1 = never_loop_expr(e, main_loop_id);"}, {"sha": "fc60b4407668a7beda73a92f3c8f346d305eab4d", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ff65eec80194143a52b3433ff3b98437e130b75d/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff65eec80194143a52b3433ff3b98437e130b75d/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=ff65eec80194143a52b3433ff3b98437e130b75d", "patch": "@@ -1,3 +1,4 @@\n+#![feature(let_else)]\n #![allow(\n     clippy::single_match,\n     unused_assignments,\n@@ -203,6 +204,32 @@ pub fn test17() {\n     };\n }\n \n+// Issue #9356: `continue` in else branch of let..else\n+pub fn test18() {\n+    let x = Some(0);\n+    let y = 0;\n+    // might loop\n+    let _ = loop {\n+        let Some(x) = x else {\n+            if y > 0 {\n+                continue;\n+            } else {\n+                return;\n+            }\n+        };\n+\n+        break x;\n+    };\n+    // never loops\n+    let _ = loop {\n+        let Some(x) = x else {\n+            return;\n+        };\n+\n+        break x;\n+    };\n+}\n+\n fn main() {\n     test1();\n     test2();"}, {"sha": "1709e7512eb653942eebc06dfa0585abdb59055a", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ff65eec80194143a52b3433ff3b98437e130b75d/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff65eec80194143a52b3433ff3b98437e130b75d/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=ff65eec80194143a52b3433ff3b98437e130b75d", "patch": "@@ -1,5 +1,5 @@\n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:10:5\n+  --> $DIR/never_loop.rs:11:5\n    |\n LL | /     loop {\n LL | |         // clippy::never_loop\n@@ -13,7 +13,7 @@ LL | |     }\n    = note: `#[deny(clippy::never_loop)]` on by default\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:32:5\n+  --> $DIR/never_loop.rs:33:5\n    |\n LL | /     loop {\n LL | |         // never loops\n@@ -23,7 +23,7 @@ LL | |     }\n    | |_____^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:52:5\n+  --> $DIR/never_loop.rs:53:5\n    |\n LL | /     loop {\n LL | |         // never loops\n@@ -35,7 +35,7 @@ LL | |     }\n    | |_____^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:54:9\n+  --> $DIR/never_loop.rs:55:9\n    |\n LL | /         while i == 0 {\n LL | |             // never loops\n@@ -44,7 +44,7 @@ LL | |         }\n    | |_________^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:66:9\n+  --> $DIR/never_loop.rs:67:9\n    |\n LL | /         loop {\n LL | |             // never loops\n@@ -56,7 +56,7 @@ LL | |         }\n    | |_________^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:102:5\n+  --> $DIR/never_loop.rs:103:5\n    |\n LL | /     while let Some(y) = x {\n LL | |         // never loops\n@@ -65,7 +65,7 @@ LL | |     }\n    | |_____^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:109:5\n+  --> $DIR/never_loop.rs:110:5\n    |\n LL | /     for x in 0..10 {\n LL | |         // never loops\n@@ -82,7 +82,7 @@ LL |     if let Some(x) = (0..10).next() {\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:157:5\n+  --> $DIR/never_loop.rs:158:5\n    |\n LL | /     'outer: while a {\n LL | |         // never loops\n@@ -94,12 +94,25 @@ LL | |     }\n    | |_____^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:172:9\n+  --> $DIR/never_loop.rs:173:9\n    |\n LL | /         while false {\n LL | |             break 'label;\n LL | |         }\n    | |_________^\n \n-error: aborting due to 9 previous errors\n+error: this loop never actually loops\n+  --> $DIR/never_loop.rs:224:13\n+   |\n+LL |       let _ = loop {\n+   |  _____________^\n+LL | |         let Some(x) = x else {\n+LL | |             return;\n+LL | |         };\n+LL | |\n+LL | |         break x;\n+LL | |     };\n+   | |_____^\n+\n+error: aborting due to 10 previous errors\n "}]}