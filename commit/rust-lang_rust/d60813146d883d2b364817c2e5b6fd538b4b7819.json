{"sha": "d60813146d883d2b364817c2e5b6fd538b4b7819", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDgxMzE0NmQ4ODNkMmIzNjQ4MTdjMmU1YjZmZDUzOGI0Yjc4MTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-13T00:31:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-13T00:31:17Z"}, "message": "std: Sort test failures. Closes #1929", "tree": {"sha": "73552487ba5a2dffb9ae74f973fbc53883e4325d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73552487ba5a2dffb9ae74f973fbc53883e4325d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d60813146d883d2b364817c2e5b6fd538b4b7819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d60813146d883d2b364817c2e5b6fd538b4b7819", "html_url": "https://github.com/rust-lang/rust/commit/d60813146d883d2b364817c2e5b6fd538b4b7819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d60813146d883d2b364817c2e5b6fd538b4b7819/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a56ad043d30d69f7c14dea1abeda2899fd1f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/59a56ad043d30d69f7c14dea1abeda2899fd1f28", "html_url": "https://github.com/rust-lang/rust/commit/59a56ad043d30d69f7c14dea1abeda2899fd1f28"}], "stats": {"total": 72, "additions": 57, "deletions": 15}, "files": [{"sha": "a82ec1e668ff74aa3478b899eeddb403ba54851f", "filename": "src/libstd/test.rs", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d60813146d883d2b364817c2e5b6fd538b4b7819/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60813146d883d2b364817c2e5b6fd538b4b7819/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=d60813146d883d2b364817c2e5b6fd538b4b7819", "patch": "@@ -85,20 +85,20 @@ fn parse_opts(args: [str]) -> opt_res {\n \n enum test_result { tr_ok, tr_failed, tr_ignored, }\n \n+type console_test_state =\n+    @{out: io::writer,\n+      use_color: bool,\n+      mutable total: uint,\n+      mutable passed: uint,\n+      mutable failed: uint,\n+      mutable ignored: uint,\n+      mutable failures: [test_desc]};\n+\n // A simple console test runner\n fn run_tests_console(opts: test_opts,\n                      tests: [test_desc]) -> bool {\n \n-    type test_state =\n-        @{out: io::writer,\n-          use_color: bool,\n-          mutable total: uint,\n-          mutable passed: uint,\n-          mutable failed: uint,\n-          mutable ignored: uint,\n-          mutable failures: [test_desc]};\n-\n-    fn callback(event: testevent, st: test_state) {\n+    fn callback(event: testevent, st: console_test_state) {\n         alt event {\n           te_filtered(filtered_tests) {\n             st.total = vec::len(filtered_tests);\n@@ -143,11 +143,7 @@ fn run_tests_console(opts: test_opts,\n     let success = st.failed == 0u;\n \n     if !success {\n-        st.out.write_line(\"\\nfailures:\");\n-        for test: test_desc in st.failures {\n-            let testname = test.name; // Satisfy alias analysis\n-            st.out.write_line(#fmt[\"    %s\", testname]);\n-        }\n+        print_failures(st);\n     }\n \n     st.out.write_str(#fmt[\"\\nresult: \"]);\n@@ -183,6 +179,52 @@ fn run_tests_console(opts: test_opts,\n     }\n }\n \n+fn print_failures(st: console_test_state) {\n+    st.out.write_line(\"\\nfailures:\");\n+    let failures = vec::map(copy st.failures) {|test| test.name};\n+    let failures = sort::merge_sort(str::le, failures);\n+    for name in failures {\n+        st.out.write_line(#fmt[\"    %s\", name]);\n+    }\n+}\n+\n+#[test]\n+fn should_sort_failures_before_printing_them() {\n+    let buffer = io::mk_mem_buffer();\n+    let writer = io::mem_buffer_writer(buffer);\n+\n+    let test_a = {\n+        name: \"a\",\n+        fn: fn~() { },\n+        ignore: false,\n+        should_fail: false\n+    };\n+\n+    let test_b = {\n+        name: \"b\",\n+        fn: fn~() { },\n+        ignore: false,\n+        should_fail: false\n+    };\n+\n+    let st =\n+        @{out: writer,\n+          use_color: false,\n+          mutable total: 0u,\n+          mutable passed: 0u,\n+          mutable failed: 0u,\n+          mutable ignored: 0u,\n+          mutable failures: [test_b, test_a]};\n+\n+    print_failures(st);\n+\n+    let s = io::mem_buffer_str(buffer);\n+\n+    let apos = option::get(str::find_str(s, \"a\"));\n+    let bpos = option::get(str::find_str(s, \"b\"));\n+    assert apos < bpos;\n+}\n+\n fn use_color() -> bool { ret get_concurrency() == 1u; }\n \n enum testevent {"}]}